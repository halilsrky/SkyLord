
SkyLord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000112f0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  080114c0  080114c0  000124c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011aa8  08011aa8  00013228  2**0
                  CONTENTS
  4 .ARM          00000008  08011aa8  08011aa8  00012aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ab0  08011ab0  00013228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ab0  08011ab0  00012ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011ab4  08011ab4  00012ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000228  20000000  08011ab8  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000718  20000228  08011ce0  00013228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000940  08011ce0  00013940  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018843  00000000  00000000  00013258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ee  00000000  00000000  0002ba9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  0002f390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd2  00000000  00000000  00030798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025606  00000000  00000000  0003176a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7f7  00000000  00000000  00056d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d82a9  00000000  00000000  00073567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b810  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b54  00000000  00000000  0014b854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001523a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080114a8 	.word	0x080114a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	080114a8 	.word	0x080114a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	@ 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_ldivmod>:
 8000ea4:	b97b      	cbnz	r3, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea6:	b972      	cbnz	r2, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bfbe      	ittt	lt
 8000eac:	2000      	movlt	r0, #0
 8000eae:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000eb2:	e006      	blt.n	8000ec2 <__aeabi_ldivmod+0x1e>
 8000eb4:	bf08      	it	eq
 8000eb6:	2800      	cmpeq	r0, #0
 8000eb8:	bf1c      	itt	ne
 8000eba:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ebe:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec2:	f000 b9b5 	b.w	8001230 <__aeabi_idiv0>
 8000ec6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	db09      	blt.n	8000ee6 <__aeabi_ldivmod+0x42>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db1a      	blt.n	8000f0c <__aeabi_ldivmod+0x68>
 8000ed6:	f000 f84d 	bl	8000f74 <__udivmoddi4>
 8000eda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	4240      	negs	r0, r0
 8000ee8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db1b      	blt.n	8000f28 <__aeabi_ldivmod+0x84>
 8000ef0:	f000 f840 	bl	8000f74 <__udivmoddi4>
 8000ef4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efc:	b004      	add	sp, #16
 8000efe:	4240      	negs	r0, r0
 8000f00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f04:	4252      	negs	r2, r2
 8000f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f0a:	4770      	bx	lr
 8000f0c:	4252      	negs	r2, r2
 8000f0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f12:	f000 f82f 	bl	8000f74 <__udivmoddi4>
 8000f16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f1e:	b004      	add	sp, #16
 8000f20:	4240      	negs	r0, r0
 8000f22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f26:	4770      	bx	lr
 8000f28:	4252      	negs	r2, r2
 8000f2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f2e:	f000 f821 	bl	8000f74 <__udivmoddi4>
 8000f32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3a:	b004      	add	sp, #16
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	4770      	bx	lr

08000f44 <__aeabi_uldivmod>:
 8000f44:	b953      	cbnz	r3, 8000f5c <__aeabi_uldivmod+0x18>
 8000f46:	b94a      	cbnz	r2, 8000f5c <__aeabi_uldivmod+0x18>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bf08      	it	eq
 8000f4c:	2800      	cmpeq	r0, #0
 8000f4e:	bf1c      	itt	ne
 8000f50:	f04f 31ff 	movne.w	r1, #4294967295
 8000f54:	f04f 30ff 	movne.w	r0, #4294967295
 8000f58:	f000 b96a 	b.w	8001230 <__aeabi_idiv0>
 8000f5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f64:	f000 f806 	bl	8000f74 <__udivmoddi4>
 8000f68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f70:	b004      	add	sp, #16
 8000f72:	4770      	bx	lr

08000f74 <__udivmoddi4>:
 8000f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f78:	9d08      	ldr	r5, [sp, #32]
 8000f7a:	460c      	mov	r4, r1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d14e      	bne.n	800101e <__udivmoddi4+0xaa>
 8000f80:	4694      	mov	ip, r2
 8000f82:	458c      	cmp	ip, r1
 8000f84:	4686      	mov	lr, r0
 8000f86:	fab2 f282 	clz	r2, r2
 8000f8a:	d962      	bls.n	8001052 <__udivmoddi4+0xde>
 8000f8c:	b14a      	cbz	r2, 8000fa2 <__udivmoddi4+0x2e>
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	4091      	lsls	r1, r2
 8000f94:	fa20 f303 	lsr.w	r3, r0, r3
 8000f98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f9c:	4319      	orrs	r1, r3
 8000f9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa6:	fa1f f68c 	uxth.w	r6, ip
 8000faa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fb2:	fb07 1114 	mls	r1, r7, r4, r1
 8000fb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fba:	fb04 f106 	mul.w	r1, r4, r6
 8000fbe:	4299      	cmp	r1, r3
 8000fc0:	d90a      	bls.n	8000fd8 <__udivmoddi4+0x64>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000fca:	f080 8112 	bcs.w	80011f2 <__udivmoddi4+0x27e>
 8000fce:	4299      	cmp	r1, r3
 8000fd0:	f240 810f 	bls.w	80011f2 <__udivmoddi4+0x27e>
 8000fd4:	3c02      	subs	r4, #2
 8000fd6:	4463      	add	r3, ip
 8000fd8:	1a59      	subs	r1, r3, r1
 8000fda:	fa1f f38e 	uxth.w	r3, lr
 8000fde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fe2:	fb07 1110 	mls	r1, r7, r0, r1
 8000fe6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fea:	fb00 f606 	mul.w	r6, r0, r6
 8000fee:	429e      	cmp	r6, r3
 8000ff0:	d90a      	bls.n	8001008 <__udivmoddi4+0x94>
 8000ff2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ffa:	f080 80fc 	bcs.w	80011f6 <__udivmoddi4+0x282>
 8000ffe:	429e      	cmp	r6, r3
 8001000:	f240 80f9 	bls.w	80011f6 <__udivmoddi4+0x282>
 8001004:	4463      	add	r3, ip
 8001006:	3802      	subs	r0, #2
 8001008:	1b9b      	subs	r3, r3, r6
 800100a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800100e:	2100      	movs	r1, #0
 8001010:	b11d      	cbz	r5, 800101a <__udivmoddi4+0xa6>
 8001012:	40d3      	lsrs	r3, r2
 8001014:	2200      	movs	r2, #0
 8001016:	e9c5 3200 	strd	r3, r2, [r5]
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	428b      	cmp	r3, r1
 8001020:	d905      	bls.n	800102e <__udivmoddi4+0xba>
 8001022:	b10d      	cbz	r5, 8001028 <__udivmoddi4+0xb4>
 8001024:	e9c5 0100 	strd	r0, r1, [r5]
 8001028:	2100      	movs	r1, #0
 800102a:	4608      	mov	r0, r1
 800102c:	e7f5      	b.n	800101a <__udivmoddi4+0xa6>
 800102e:	fab3 f183 	clz	r1, r3
 8001032:	2900      	cmp	r1, #0
 8001034:	d146      	bne.n	80010c4 <__udivmoddi4+0x150>
 8001036:	42a3      	cmp	r3, r4
 8001038:	d302      	bcc.n	8001040 <__udivmoddi4+0xcc>
 800103a:	4290      	cmp	r0, r2
 800103c:	f0c0 80f0 	bcc.w	8001220 <__udivmoddi4+0x2ac>
 8001040:	1a86      	subs	r6, r0, r2
 8001042:	eb64 0303 	sbc.w	r3, r4, r3
 8001046:	2001      	movs	r0, #1
 8001048:	2d00      	cmp	r5, #0
 800104a:	d0e6      	beq.n	800101a <__udivmoddi4+0xa6>
 800104c:	e9c5 6300 	strd	r6, r3, [r5]
 8001050:	e7e3      	b.n	800101a <__udivmoddi4+0xa6>
 8001052:	2a00      	cmp	r2, #0
 8001054:	f040 8090 	bne.w	8001178 <__udivmoddi4+0x204>
 8001058:	eba1 040c 	sub.w	r4, r1, ip
 800105c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001060:	fa1f f78c 	uxth.w	r7, ip
 8001064:	2101      	movs	r1, #1
 8001066:	fbb4 f6f8 	udiv	r6, r4, r8
 800106a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800106e:	fb08 4416 	mls	r4, r8, r6, r4
 8001072:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001076:	fb07 f006 	mul.w	r0, r7, r6
 800107a:	4298      	cmp	r0, r3
 800107c:	d908      	bls.n	8001090 <__udivmoddi4+0x11c>
 800107e:	eb1c 0303 	adds.w	r3, ip, r3
 8001082:	f106 34ff 	add.w	r4, r6, #4294967295
 8001086:	d202      	bcs.n	800108e <__udivmoddi4+0x11a>
 8001088:	4298      	cmp	r0, r3
 800108a:	f200 80cd 	bhi.w	8001228 <__udivmoddi4+0x2b4>
 800108e:	4626      	mov	r6, r4
 8001090:	1a1c      	subs	r4, r3, r0
 8001092:	fa1f f38e 	uxth.w	r3, lr
 8001096:	fbb4 f0f8 	udiv	r0, r4, r8
 800109a:	fb08 4410 	mls	r4, r8, r0, r4
 800109e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010a2:	fb00 f707 	mul.w	r7, r0, r7
 80010a6:	429f      	cmp	r7, r3
 80010a8:	d908      	bls.n	80010bc <__udivmoddi4+0x148>
 80010aa:	eb1c 0303 	adds.w	r3, ip, r3
 80010ae:	f100 34ff 	add.w	r4, r0, #4294967295
 80010b2:	d202      	bcs.n	80010ba <__udivmoddi4+0x146>
 80010b4:	429f      	cmp	r7, r3
 80010b6:	f200 80b0 	bhi.w	800121a <__udivmoddi4+0x2a6>
 80010ba:	4620      	mov	r0, r4
 80010bc:	1bdb      	subs	r3, r3, r7
 80010be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010c2:	e7a5      	b.n	8001010 <__udivmoddi4+0x9c>
 80010c4:	f1c1 0620 	rsb	r6, r1, #32
 80010c8:	408b      	lsls	r3, r1
 80010ca:	fa22 f706 	lsr.w	r7, r2, r6
 80010ce:	431f      	orrs	r7, r3
 80010d0:	fa20 fc06 	lsr.w	ip, r0, r6
 80010d4:	fa04 f301 	lsl.w	r3, r4, r1
 80010d8:	ea43 030c 	orr.w	r3, r3, ip
 80010dc:	40f4      	lsrs	r4, r6
 80010de:	fa00 f801 	lsl.w	r8, r0, r1
 80010e2:	0c38      	lsrs	r0, r7, #16
 80010e4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80010e8:	fbb4 fef0 	udiv	lr, r4, r0
 80010ec:	fa1f fc87 	uxth.w	ip, r7
 80010f0:	fb00 441e 	mls	r4, r0, lr, r4
 80010f4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010f8:	fb0e f90c 	mul.w	r9, lr, ip
 80010fc:	45a1      	cmp	r9, r4
 80010fe:	fa02 f201 	lsl.w	r2, r2, r1
 8001102:	d90a      	bls.n	800111a <__udivmoddi4+0x1a6>
 8001104:	193c      	adds	r4, r7, r4
 8001106:	f10e 3aff 	add.w	sl, lr, #4294967295
 800110a:	f080 8084 	bcs.w	8001216 <__udivmoddi4+0x2a2>
 800110e:	45a1      	cmp	r9, r4
 8001110:	f240 8081 	bls.w	8001216 <__udivmoddi4+0x2a2>
 8001114:	f1ae 0e02 	sub.w	lr, lr, #2
 8001118:	443c      	add	r4, r7
 800111a:	eba4 0409 	sub.w	r4, r4, r9
 800111e:	fa1f f983 	uxth.w	r9, r3
 8001122:	fbb4 f3f0 	udiv	r3, r4, r0
 8001126:	fb00 4413 	mls	r4, r0, r3, r4
 800112a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800112e:	fb03 fc0c 	mul.w	ip, r3, ip
 8001132:	45a4      	cmp	ip, r4
 8001134:	d907      	bls.n	8001146 <__udivmoddi4+0x1d2>
 8001136:	193c      	adds	r4, r7, r4
 8001138:	f103 30ff 	add.w	r0, r3, #4294967295
 800113c:	d267      	bcs.n	800120e <__udivmoddi4+0x29a>
 800113e:	45a4      	cmp	ip, r4
 8001140:	d965      	bls.n	800120e <__udivmoddi4+0x29a>
 8001142:	3b02      	subs	r3, #2
 8001144:	443c      	add	r4, r7
 8001146:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800114a:	fba0 9302 	umull	r9, r3, r0, r2
 800114e:	eba4 040c 	sub.w	r4, r4, ip
 8001152:	429c      	cmp	r4, r3
 8001154:	46ce      	mov	lr, r9
 8001156:	469c      	mov	ip, r3
 8001158:	d351      	bcc.n	80011fe <__udivmoddi4+0x28a>
 800115a:	d04e      	beq.n	80011fa <__udivmoddi4+0x286>
 800115c:	b155      	cbz	r5, 8001174 <__udivmoddi4+0x200>
 800115e:	ebb8 030e 	subs.w	r3, r8, lr
 8001162:	eb64 040c 	sbc.w	r4, r4, ip
 8001166:	fa04 f606 	lsl.w	r6, r4, r6
 800116a:	40cb      	lsrs	r3, r1
 800116c:	431e      	orrs	r6, r3
 800116e:	40cc      	lsrs	r4, r1
 8001170:	e9c5 6400 	strd	r6, r4, [r5]
 8001174:	2100      	movs	r1, #0
 8001176:	e750      	b.n	800101a <__udivmoddi4+0xa6>
 8001178:	f1c2 0320 	rsb	r3, r2, #32
 800117c:	fa20 f103 	lsr.w	r1, r0, r3
 8001180:	fa0c fc02 	lsl.w	ip, ip, r2
 8001184:	fa24 f303 	lsr.w	r3, r4, r3
 8001188:	4094      	lsls	r4, r2
 800118a:	430c      	orrs	r4, r1
 800118c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001190:	fa00 fe02 	lsl.w	lr, r0, r2
 8001194:	fa1f f78c 	uxth.w	r7, ip
 8001198:	fbb3 f0f8 	udiv	r0, r3, r8
 800119c:	fb08 3110 	mls	r1, r8, r0, r3
 80011a0:	0c23      	lsrs	r3, r4, #16
 80011a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011a6:	fb00 f107 	mul.w	r1, r0, r7
 80011aa:	4299      	cmp	r1, r3
 80011ac:	d908      	bls.n	80011c0 <__udivmoddi4+0x24c>
 80011ae:	eb1c 0303 	adds.w	r3, ip, r3
 80011b2:	f100 36ff 	add.w	r6, r0, #4294967295
 80011b6:	d22c      	bcs.n	8001212 <__udivmoddi4+0x29e>
 80011b8:	4299      	cmp	r1, r3
 80011ba:	d92a      	bls.n	8001212 <__udivmoddi4+0x29e>
 80011bc:	3802      	subs	r0, #2
 80011be:	4463      	add	r3, ip
 80011c0:	1a5b      	subs	r3, r3, r1
 80011c2:	b2a4      	uxth	r4, r4
 80011c4:	fbb3 f1f8 	udiv	r1, r3, r8
 80011c8:	fb08 3311 	mls	r3, r8, r1, r3
 80011cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011d0:	fb01 f307 	mul.w	r3, r1, r7
 80011d4:	42a3      	cmp	r3, r4
 80011d6:	d908      	bls.n	80011ea <__udivmoddi4+0x276>
 80011d8:	eb1c 0404 	adds.w	r4, ip, r4
 80011dc:	f101 36ff 	add.w	r6, r1, #4294967295
 80011e0:	d213      	bcs.n	800120a <__udivmoddi4+0x296>
 80011e2:	42a3      	cmp	r3, r4
 80011e4:	d911      	bls.n	800120a <__udivmoddi4+0x296>
 80011e6:	3902      	subs	r1, #2
 80011e8:	4464      	add	r4, ip
 80011ea:	1ae4      	subs	r4, r4, r3
 80011ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011f0:	e739      	b.n	8001066 <__udivmoddi4+0xf2>
 80011f2:	4604      	mov	r4, r0
 80011f4:	e6f0      	b.n	8000fd8 <__udivmoddi4+0x64>
 80011f6:	4608      	mov	r0, r1
 80011f8:	e706      	b.n	8001008 <__udivmoddi4+0x94>
 80011fa:	45c8      	cmp	r8, r9
 80011fc:	d2ae      	bcs.n	800115c <__udivmoddi4+0x1e8>
 80011fe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001202:	eb63 0c07 	sbc.w	ip, r3, r7
 8001206:	3801      	subs	r0, #1
 8001208:	e7a8      	b.n	800115c <__udivmoddi4+0x1e8>
 800120a:	4631      	mov	r1, r6
 800120c:	e7ed      	b.n	80011ea <__udivmoddi4+0x276>
 800120e:	4603      	mov	r3, r0
 8001210:	e799      	b.n	8001146 <__udivmoddi4+0x1d2>
 8001212:	4630      	mov	r0, r6
 8001214:	e7d4      	b.n	80011c0 <__udivmoddi4+0x24c>
 8001216:	46d6      	mov	lr, sl
 8001218:	e77f      	b.n	800111a <__udivmoddi4+0x1a6>
 800121a:	4463      	add	r3, ip
 800121c:	3802      	subs	r0, #2
 800121e:	e74d      	b.n	80010bc <__udivmoddi4+0x148>
 8001220:	4606      	mov	r6, r0
 8001222:	4623      	mov	r3, r4
 8001224:	4608      	mov	r0, r1
 8001226:	e70f      	b.n	8001048 <__udivmoddi4+0xd4>
 8001228:	3e02      	subs	r6, #2
 800122a:	4463      	add	r3, ip
 800122c:	e730      	b.n	8001090 <__udivmoddi4+0x11c>
 800122e:	bf00      	nop

08001230 <__aeabi_idiv0>:
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <bme280_getVals>:
static uint8_t bme_started_flag = 0;
static uint8_t last_measuring = 1;


void bme280_getVals()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af04      	add	r7, sp, #16
	uint8_t status;
    HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 800123a:	4b3c      	ldr	r3, [pc, #240]	@ (800132c <bme280_getVals+0xf8>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	2364      	movs	r3, #100	@ 0x64
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	2301      	movs	r3, #1
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	f107 030d 	add.w	r3, r7, #13
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	22f3      	movs	r2, #243	@ 0xf3
 8001250:	21ec      	movs	r1, #236	@ 0xec
 8001252:	f007 fd9b 	bl	8008d8c <HAL_I2C_Mem_Read>
 8001256:	4603      	mov	r3, r0
 8001258:	73fb      	strb	r3, [r7, #15]
    BME->isUpdated = 0;
 800125a:	4b35      	ldr	r3, [pc, #212]	@ (8001330 <bme280_getVals+0xfc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    uint8_t current_measuring = ((status & (0x01 << 3)) == 0);
 8001264:	7b7b      	ldrb	r3, [r7, #13]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf0c      	ite	eq
 800126e:	2301      	moveq	r3, #1
 8001270:	2300      	movne	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	73bb      	strb	r3, [r7, #14]

    if ((last_measuring == 1) && (current_measuring == 0)) {
 8001276:	4b2f      	ldr	r3, [pc, #188]	@ (8001334 <bme280_getVals+0x100>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d14f      	bne.n	800131e <bme280_getVals+0xea>
 800127e:	7bbb      	ldrb	r3, [r7, #14]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d14c      	bne.n	800131e <bme280_getVals+0xea>
        uint8_t data[8];
        retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, data, 8, 20);
 8001284:	4b29      	ldr	r3, [pc, #164]	@ (800132c <bme280_getVals+0xf8>)
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	2314      	movs	r3, #20
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2308      	movs	r3, #8
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	22f7      	movs	r2, #247	@ 0xf7
 8001298:	21ec      	movs	r1, #236	@ 0xec
 800129a:	f007 fd77 	bl	8008d8c <HAL_I2C_Mem_Read>
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]
        if (retVal == HAL_OK && memcmp(data, BME->lastReadings, 8) != 0) {
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d13a      	bne.n	800131e <bme280_getVals+0xea>
 80012a8:	4b21      	ldr	r3, [pc, #132]	@ (8001330 <bme280_getVals+0xfc>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2208      	movs	r2, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f00b fe16 	bl	800cee6 <memcmp>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d02e      	beq.n	800131e <bme280_getVals+0xea>
            memcpy(BME->lastReadings, data, 8);
 80012c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <bme280_getVals+0xfc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3334      	adds	r3, #52	@ 0x34
 80012c6:	461a      	mov	r2, r3
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	cb03      	ldmia	r3!, {r0, r1}
 80012cc:	6010      	str	r0, [r2, #0]
 80012ce:	6051      	str	r1, [r2, #4]
            BME->isUpdated = 1;
 80012d0:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <bme280_getVals+0xfc>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            BME->adcVals.ut = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | ((int32_t)data[5] >> 4);
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	031a      	lsls	r2, r3, #12
 80012de:	7a3b      	ldrb	r3, [r7, #8]
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	431a      	orrs	r2, r3
 80012e4:	7a7b      	ldrb	r3, [r7, #9]
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4619      	mov	r1, r3
 80012ec:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <bme280_getVals+0xfc>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	609a      	str	r2, [r3, #8]
            BME->adcVals.up = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((int32_t)data[2] >> 4);
 80012f4:	793b      	ldrb	r3, [r7, #4]
 80012f6:	031a      	lsls	r2, r3, #12
 80012f8:	797b      	ldrb	r3, [r7, #5]
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	431a      	orrs	r2, r3
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4619      	mov	r1, r3
 8001306:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <bme280_getVals+0xfc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	60da      	str	r2, [r3, #12]
            BME->adcVals.uh = ((int32_t)data[6] << 8) | ((int32_t)data[7]);
 800130e:	7abb      	ldrb	r3, [r7, #10]
 8001310:	021a      	lsls	r2, r3, #8
 8001312:	7afb      	ldrb	r3, [r7, #11]
 8001314:	4619      	mov	r1, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <bme280_getVals+0xfc>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	611a      	str	r2, [r3, #16]
        }
    }
    last_measuring = current_measuring;
 800131e:	4a05      	ldr	r2, [pc, #20]	@ (8001334 <bme280_getVals+0x100>)
 8001320:	7bbb      	ldrb	r3, [r7, #14]
 8001322:	7013      	strb	r3, [r2, #0]
    UNUSED(retVal);
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000244 	.word	0x20000244
 8001330:	20000248 	.word	0x20000248
 8001334:	20000000 	.word	0x20000000

08001338 <bme280_calculate_altitude>:



void bme280_calculate_altitude() {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
    // Standard sea level pressure in hPa
    float p_seaLevel = 1013.25;
 800133e:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <bme280_calculate_altitude+0x98>)
 8001340:	607b      	str	r3, [r7, #4]

    // Calculate altitude from pressure using barometric formula
    float rawAltitude = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 8001342:	4b24      	ldr	r3, [pc, #144]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	ed93 7a06 	vldr	s14, [r3, #24]
 800134a:	edd7 7a01 	vldr	s15, [r7, #4]
 800134e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001352:	ee16 0a90 	vmov	r0, s13
 8001356:	f7ff f917 	bl	8000588 <__aeabi_f2d>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 80013c0 <bme280_calculate_altitude+0x88>
 8001362:	ec43 2b10 	vmov	d0, r2, r3
 8001366:	f00d fcf1 	bl	800ed4c <pow>
 800136a:	ec53 2b10 	vmov	r2, r3, d0
 800136e:	f04f 0000 	mov.w	r0, #0
 8001372:	4919      	ldr	r1, [pc, #100]	@ (80013d8 <bme280_calculate_altitude+0xa0>)
 8001374:	f7fe ffa8 	bl	80002c8 <__aeabi_dsub>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	a311      	add	r3, pc, #68	@ (adr r3, 80013c8 <bme280_calculate_altitude+0x90>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7ff f957 	bl	8000638 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f7ff fc29 	bl	8000be8 <__aeabi_d2f>
 8001396:	4603      	mov	r3, r0
 8001398:	603b      	str	r3, [r7, #0]

    // Apply base altitude correction
    BME->altitude = rawAltitude - BME->base_altitude;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	ed97 7a00 	vldr	s14, [r7]
 80013aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ae:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	f3af 8000 	nop.w
 80013c0:	ccd9456c 	.word	0xccd9456c
 80013c4:	3fc85b95 	.word	0x3fc85b95
 80013c8:	00000000 	.word	0x00000000
 80013cc:	40e5a540 	.word	0x40e5a540
 80013d0:	447d5000 	.word	0x447d5000
 80013d4:	20000248 	.word	0x20000248
 80013d8:	3ff00000 	.word	0x3ff00000

080013dc <bme280_config>:

void bme280_config()
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	@ 0x38
 80013e0:	af04      	add	r7, sp, #16
    uint8_t params[25];
    HAL_StatusTypeDef retVal;

    BME->base_altitude = 0.0;
 80013e2:	4b99      	ldr	r3, [pc, #612]	@ (8001648 <bme280_config+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset and initialize I2C
    HAL_I2C_DeInit(I2C_);
 80013ec:	4b97      	ldr	r3, [pc, #604]	@ (800164c <bme280_config+0x270>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f007 fba1 	bl	8008b38 <HAL_I2C_DeInit>
    HAL_Delay(5);
 80013f6:	2005      	movs	r0, #5
 80013f8:	f006 fa36 	bl	8007868 <HAL_Delay>
    HAL_I2C_Init(I2C_);
 80013fc:	4b93      	ldr	r3, [pc, #588]	@ (800164c <bme280_config+0x270>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f007 fa55 	bl	80088b0 <HAL_I2C_Init>
    HAL_Delay(5);
 8001406:	2005      	movs	r0, #5
 8001408:	f006 fa2e 	bl	8007868 <HAL_Delay>

    // Read calibration parameters
    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 800140c:	4b8f      	ldr	r3, [pc, #572]	@ (800164c <bme280_config+0x270>)
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	23c8      	movs	r3, #200	@ 0xc8
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	2319      	movs	r3, #25
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	2288      	movs	r2, #136	@ 0x88
 8001420:	21ec      	movs	r1, #236	@ 0xec
 8001422:	f007 fcb3 	bl	8008d8c <HAL_I2C_Mem_Read>
 8001426:	4603      	mov	r3, r0
 8001428:	77fb      	strb	r3, [r7, #31]

    BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 800142a:	793b      	ldrb	r3, [r7, #4]
 800142c:	4619      	mov	r1, r3
 800142e:	797b      	ldrb	r3, [r7, #5]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b84      	ldr	r3, [pc, #528]	@ (8001648 <bme280_config+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	b292      	uxth	r2, r2
 800143e:	801a      	strh	r2, [r3, #0]
    BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	b219      	sxth	r1, r3
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b21a      	sxth	r2, r3
 800144a:	4b7f      	ldr	r3, [pc, #508]	@ (8001648 <bme280_config+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	b212      	sxth	r2, r2
 8001454:	805a      	strh	r2, [r3, #2]
    BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001456:	7a3b      	ldrb	r3, [r7, #8]
 8001458:	b219      	sxth	r1, r3
 800145a:	7a7b      	ldrb	r3, [r7, #9]
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	b21a      	sxth	r2, r3
 8001460:	4b79      	ldr	r3, [pc, #484]	@ (8001648 <bme280_config+0x26c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	b212      	sxth	r2, r2
 800146a:	809a      	strh	r2, [r3, #4]
    BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 800146c:	7abb      	ldrb	r3, [r7, #10]
 800146e:	b21a      	sxth	r2, r3
 8001470:	7afb      	ldrb	r3, [r7, #11]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21b      	sxth	r3, r3
 8001476:	4313      	orrs	r3, r2
 8001478:	b21a      	sxth	r2, r3
 800147a:	4b73      	ldr	r3, [pc, #460]	@ (8001648 <bme280_config+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	b292      	uxth	r2, r2
 8001482:	80da      	strh	r2, [r3, #6]
    BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001484:	7b3b      	ldrb	r3, [r7, #12]
 8001486:	b219      	sxth	r1, r3
 8001488:	7b7b      	ldrb	r3, [r7, #13]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b21a      	sxth	r2, r3
 800148e:	4b6e      	ldr	r3, [pc, #440]	@ (8001648 <bme280_config+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	b212      	sxth	r2, r2
 8001498:	811a      	strh	r2, [r3, #8]
    BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800149a:	7bbb      	ldrb	r3, [r7, #14]
 800149c:	b219      	sxth	r1, r3
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	4b68      	ldr	r3, [pc, #416]	@ (8001648 <bme280_config+0x26c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	b212      	sxth	r2, r2
 80014ae:	815a      	strh	r2, [r3, #10]
    BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 80014b0:	7c3b      	ldrb	r3, [r7, #16]
 80014b2:	b219      	sxth	r1, r3
 80014b4:	7c7b      	ldrb	r3, [r7, #17]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	4b63      	ldr	r3, [pc, #396]	@ (8001648 <bme280_config+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	b212      	sxth	r2, r2
 80014c4:	819a      	strh	r2, [r3, #12]
    BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 80014c6:	7cbb      	ldrb	r3, [r7, #18]
 80014c8:	b219      	sxth	r1, r3
 80014ca:	7cfb      	ldrb	r3, [r7, #19]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	4b5d      	ldr	r3, [pc, #372]	@ (8001648 <bme280_config+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	b212      	sxth	r2, r2
 80014da:	81da      	strh	r2, [r3, #14]
    BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 80014dc:	7d3b      	ldrb	r3, [r7, #20]
 80014de:	b219      	sxth	r1, r3
 80014e0:	7d7b      	ldrb	r3, [r7, #21]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	4b58      	ldr	r3, [pc, #352]	@ (8001648 <bme280_config+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	b212      	sxth	r2, r2
 80014f0:	821a      	strh	r2, [r3, #16]
    BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 80014f2:	7dbb      	ldrb	r3, [r7, #22]
 80014f4:	b219      	sxth	r1, r3
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	4b52      	ldr	r3, [pc, #328]	@ (8001648 <bme280_config+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	b212      	sxth	r2, r2
 8001506:	825a      	strh	r2, [r3, #18]
    BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 8001508:	7e3b      	ldrb	r3, [r7, #24]
 800150a:	b219      	sxth	r1, r3
 800150c:	7e7b      	ldrb	r3, [r7, #25]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	4b4d      	ldr	r3, [pc, #308]	@ (8001648 <bme280_config+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	b212      	sxth	r2, r2
 800151c:	829a      	strh	r2, [r3, #20]
    BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 800151e:	7ebb      	ldrb	r3, [r7, #26]
 8001520:	b219      	sxth	r1, r3
 8001522:	7efb      	ldrb	r3, [r7, #27]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	b21a      	sxth	r2, r3
 8001528:	4b47      	ldr	r3, [pc, #284]	@ (8001648 <bme280_config+0x26c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	b212      	sxth	r2, r2
 8001532:	82da      	strh	r2, [r3, #22]
    BME->parameters->dig_H1 = params[24];
 8001534:	4b44      	ldr	r3, [pc, #272]	@ (8001648 <bme280_config+0x26c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	7f3a      	ldrb	r2, [r7, #28]
 800153c:	761a      	strb	r2, [r3, #24]

    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 800153e:	4b43      	ldr	r3, [pc, #268]	@ (800164c <bme280_config+0x270>)
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	2332      	movs	r3, #50	@ 0x32
 8001544:	9302      	str	r3, [sp, #8]
 8001546:	2307      	movs	r3, #7
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2301      	movs	r3, #1
 8001550:	22e1      	movs	r2, #225	@ 0xe1
 8001552:	21ec      	movs	r1, #236	@ 0xec
 8001554:	f007 fc1a 	bl	8008d8c <HAL_I2C_Mem_Read>
 8001558:	4603      	mov	r3, r0
 800155a:	77fb      	strb	r3, [r7, #31]
    BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800155c:	793b      	ldrb	r3, [r7, #4]
 800155e:	b219      	sxth	r1, r3
 8001560:	797b      	ldrb	r3, [r7, #5]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b21a      	sxth	r2, r3
 8001566:	4b38      	ldr	r3, [pc, #224]	@ (8001648 <bme280_config+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	b212      	sxth	r2, r2
 8001570:	835a      	strh	r2, [r3, #26]
    BME->parameters->dig_H3 = params[2];
 8001572:	4b35      	ldr	r3, [pc, #212]	@ (8001648 <bme280_config+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	79ba      	ldrb	r2, [r7, #6]
 800157a:	771a      	strb	r2, [r3, #28]
    BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800157c:	7a3b      	ldrb	r3, [r7, #8]
 800157e:	b21b      	sxth	r3, r3
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	b219      	sxth	r1, r3
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	b21a      	sxth	r2, r3
 800158c:	4b2e      	ldr	r3, [pc, #184]	@ (8001648 <bme280_config+0x26c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	b212      	sxth	r2, r2
 8001596:	83da      	strh	r2, [r3, #30]
    BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001598:	7a3b      	ldrb	r3, [r7, #8]
 800159a:	091b      	lsrs	r3, r3, #4
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b219      	sxth	r1, r3
 80015a0:	7a7b      	ldrb	r3, [r7, #9]
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	4b28      	ldr	r3, [pc, #160]	@ (8001648 <bme280_config+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	b212      	sxth	r2, r2
 80015b0:	841a      	strh	r2, [r3, #32]
    BME->parameters->dig_H6 = params[6];
 80015b2:	7aba      	ldrb	r2, [r7, #10]
 80015b4:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <bme280_config+0x26c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b252      	sxtb	r2, r2
 80015bc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    uint8_t data_ctrl = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_output_speed;
 80015c4:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <bme280_config+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	799b      	ldrb	r3, [r3, #6]
 80015ca:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 80015cc:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <bme280_config+0x270>)
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	2332      	movs	r3, #50	@ 0x32
 80015d2:	9302      	str	r3, [sp, #8]
 80015d4:	2301      	movs	r3, #1
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	1cfb      	adds	r3, r7, #3
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2301      	movs	r3, #1
 80015de:	22f2      	movs	r2, #242	@ 0xf2
 80015e0:	21ec      	movs	r1, #236	@ 0xec
 80015e2:	f007 fad9 	bl	8008b98 <HAL_I2C_Mem_Write>
 80015e6:	4603      	mov	r3, r0
 80015e8:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);
 80015ee:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <bme280_config+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	795b      	ldrb	r3, [r3, #5]
 80015f4:	b25a      	sxtb	r2, r3
 80015f6:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <bme280_config+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	799b      	ldrb	r3, [r3, #6]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b25a      	sxtb	r2, r3
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <bme280_config+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	799b      	ldrb	r3, [r3, #6]
 800160a:	015b      	lsls	r3, r3, #5
 800160c:	b25b      	sxtb	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	b25b      	sxtb	r3, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <bme280_config+0x270>)
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	2332      	movs	r3, #50	@ 0x32
 800161c:	9302      	str	r3, [sp, #8]
 800161e:	2301      	movs	r3, #1
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	1cfb      	adds	r3, r7, #3
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2301      	movs	r3, #1
 8001628:	22f4      	movs	r2, #244	@ 0xf4
 800162a:	21ec      	movs	r1, #236	@ 0xec
 800162c:	f007 fab4 	bl	8008b98 <HAL_I2C_Mem_Write>
 8001630:	4603      	mov	r3, r0
 8001632:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	70fb      	strb	r3, [r7, #3]
    data_ctrl = (BME->device_config.bme280_standby_time << 5) | (BME->device_config.bme280_filter << 2);
 8001638:	4b03      	ldr	r3, [pc, #12]	@ (8001648 <bme280_config+0x26c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	79db      	ldrb	r3, [r3, #7]
 800163e:	015b      	lsls	r3, r3, #5
 8001640:	b25a      	sxtb	r2, r3
 8001642:	4b01      	ldr	r3, [pc, #4]	@ (8001648 <bme280_config+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	e003      	b.n	8001650 <bme280_config+0x274>
 8001648:	20000248 	.word	0x20000248
 800164c:	20000244 	.word	0x20000244
 8001650:	791b      	ldrb	r3, [r3, #4]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	b25b      	sxtb	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b25b      	sxtb	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800165e:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <bme280_config+0x2fc>)
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	2332      	movs	r3, #50	@ 0x32
 8001664:	9302      	str	r3, [sp, #8]
 8001666:	2301      	movs	r3, #1
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	1cfb      	adds	r3, r7, #3
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2301      	movs	r3, #1
 8001670:	22f5      	movs	r2, #245	@ 0xf5
 8001672:	21ec      	movs	r1, #236	@ 0xec
 8001674:	f007 fa90 	bl	8008b98 <HAL_I2C_Mem_Write>
 8001678:	4603      	mov	r3, r0
 800167a:	77fb      	strb	r3, [r7, #31]

    // Take base altitude readings
    float base = 0.0;
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_Delay(100);
 8001682:	2064      	movs	r0, #100	@ 0x64
 8001684:	f006 f8f0 	bl	8007868 <HAL_Delay>

    for(int i = 0; i < 50; i++) {
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
 800168c:	e011      	b.n	80016b2 <bme280_config+0x2d6>
        bme280_update();
 800168e:	f000 f861 	bl	8001754 <bme280_update>
        base += BME->altitude;
 8001692:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <bme280_config+0x300>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	edd3 7a08 	vldr	s15, [r3, #32]
 800169a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        HAL_Delay(30);
 80016a6:	201e      	movs	r0, #30
 80016a8:	f006 f8de 	bl	8007868 <HAL_Delay>
    for(int i = 0; i < 50; i++) {
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	3301      	adds	r3, #1
 80016b0:	623b      	str	r3, [r7, #32]
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	2b31      	cmp	r3, #49	@ 0x31
 80016b6:	ddea      	ble.n	800168e <bme280_config+0x2b2>
    }
    BME->base_altitude = (base / 50.0);
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <bme280_config+0x300>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80016c0:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80016e0 <bme280_config+0x304>
 80016c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bme280_update();
 80016cc:	f000 f842 	bl	8001754 <bme280_update>

    UNUSED(retVal);
}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	@ 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000244 	.word	0x20000244
 80016dc:	20000248 	.word	0x20000248
 80016e0:	42480000 	.word	0x42480000

080016e4 <bme280_init>:

void bme280_init(BME_280_t* BME_sensor, I2C_HandleTypeDef* I2C_bme)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af04      	add	r7, sp, #16
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
    BME = BME_sensor;
 80016ee:	4a14      	ldr	r2, [pc, #80]	@ (8001740 <bme280_init+0x5c>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6013      	str	r3, [r2, #0]
    I2C_ = I2C_bme;
 80016f4:	4a13      	ldr	r2, [pc, #76]	@ (8001744 <bme280_init+0x60>)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	6013      	str	r3, [r2, #0]
    BME->parameters = &bme_params;
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <bme280_init+0x5c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a12      	ldr	r2, [pc, #72]	@ (8001748 <bme280_init+0x64>)
 8001700:	601a      	str	r2, [r3, #0]
    bme_started_flag = 0;
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <bme280_init+0x68>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]

    // Check BME280 ID
    uint8_t buf[1];
    HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8001708:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <bme280_init+0x60>)
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	2332      	movs	r3, #50	@ 0x32
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	2301      	movs	r3, #1
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2301      	movs	r3, #1
 800171c:	22d0      	movs	r2, #208	@ 0xd0
 800171e:	21ec      	movs	r1, #236	@ 0xec
 8001720:	f007 fb34 	bl	8008d8c <HAL_I2C_Mem_Read>
    if(*buf == 0x60)
 8001724:	7b3b      	ldrb	r3, [r7, #12]
 8001726:	2b60      	cmp	r3, #96	@ 0x60
 8001728:	d103      	bne.n	8001732 <bme280_init+0x4e>
        is_BME_ok = 1;
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <bme280_init+0x6c>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]
    else
        is_BME_ok = 0;
}
 8001730:	e002      	b.n	8001738 <bme280_init+0x54>
        is_BME_ok = 0;
 8001732:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <bme280_init+0x6c>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000248 	.word	0x20000248
 8001744:	20000244 	.word	0x20000244
 8001748:	20000698 	.word	0x20000698
 800174c:	2000024c 	.word	0x2000024c
 8001750:	200006bc 	.word	0x200006bc

08001754 <bme280_update>:

void bme280_update() {
 8001754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001758:	b0d2      	sub	sp, #328	@ 0x148
 800175a:	af00      	add	r7, sp, #0
    int32_t var1_t, var2_t, T, adc_T;
    bme280_getVals();
 800175c:	f7ff fd6a 	bl	8001234 <bme280_getVals>

    if(BME->isUpdated == 1){
 8001760:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <bme280_update+0x88>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001768:	2b01      	cmp	r3, #1
 800176a:	f040 840d 	bne.w	8001f88 <bme280_update+0x834>

    	if (!bme_started_flag) {
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <bme280_update+0x8c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d112      	bne.n	800179c <bme280_update+0x48>
    	    bme_started_flag = 1;
 8001776:	4a1a      	ldr	r2, [pc, #104]	@ (80017e0 <bme280_update+0x8c>)
 8001778:	2301      	movs	r3, #1
 800177a:	7013      	strb	r3, [r2, #0]
    	    BME->lastTime = HAL_GetTick();
 800177c:	f006 f868 	bl	8007850 <HAL_GetTick>
 8001780:	ee07 0a90 	vmov	s15, r0
 8001784:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <bme280_update+0x88>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800178c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	    BME->deltaTime1 = 0.0f;
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <bme280_update+0x88>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	e041      	b.n	8001820 <bme280_update+0xcc>
    	} else {
    	    uint32_t now = HAL_GetTick();
 800179c:	f006 f858 	bl	8007850 <HAL_GetTick>
 80017a0:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    	    BME->deltaTime1 = (now > BME->lastTime) ? (now - BME->lastTime) : 0.0f;
 80017a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017b0:	4b0a      	ldr	r3, [pc, #40]	@ (80017dc <bme280_update+0x88>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80017b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	dd12      	ble.n	80017e8 <bme280_update+0x94>
 80017c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80017c6:	ee07 3a90 	vmov	s15, r3
 80017ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ce:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <bme280_update+0x88>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	e007      	b.n	80017ec <bme280_update+0x98>
 80017dc:	20000248 	.word	0x20000248
 80017e0:	2000024c 	.word	0x2000024c
 80017e4:	00000000 	.word	0x00000000
 80017e8:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 80017e4 <bme280_update+0x90>
 80017ec:	4bda      	ldr	r3, [pc, #872]	@ (8001b58 <bme280_update+0x404>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->deltaTime1 = BME->deltaTime1 / 1000.0f;
 80017f4:	4bd8      	ldr	r3, [pc, #864]	@ (8001b58 <bme280_update+0x404>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80017fc:	4bd6      	ldr	r3, [pc, #856]	@ (8001b58 <bme280_update+0x404>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8001b5c <bme280_update+0x408>
 8001804:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001808:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->lastTime = now;
 800180c:	4bd2      	ldr	r3, [pc, #840]	@ (8001b58 <bme280_update+0x404>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001814:	ee07 2a90 	vmov	s15, r2
 8001818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800181c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	}

        //For temperature
        adc_T = BME->adcVals.ut;
 8001820:	4bcd      	ldr	r3, [pc, #820]	@ (8001b58 <bme280_update+0x404>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 800182a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800182e:	10da      	asrs	r2, r3, #3
 8001830:	4bc9      	ldr	r3, [pc, #804]	@ (8001b58 <bme280_update+0x404>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	1ad2      	subs	r2, r2, r3
 800183c:	4bc6      	ldr	r3, [pc, #792]	@ (8001b58 <bme280_update+0x404>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	12db      	asrs	r3, r3, #11
 800184c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001850:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001854:	111a      	asrs	r2, r3, #4
 8001856:	4bc0      	ldr	r3, [pc, #768]	@ (8001b58 <bme280_update+0x404>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	1ad1      	subs	r1, r2, r3
 8001860:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001864:	111a      	asrs	r2, r3, #4
 8001866:	4bbc      	ldr	r3, [pc, #752]	@ (8001b58 <bme280_update+0x404>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	131a      	asrs	r2, r3, #12
 8001876:	4bb8      	ldr	r3, [pc, #736]	@ (8001b58 <bme280_update+0x404>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	139b      	asrs	r3, r3, #14
 8001886:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        int32_t t_fine = var1_t + var2_t;
 800188a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800188e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001892:	4413      	add	r3, r2
 8001894:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        T = (t_fine * 5 + 128) >> 8;
 8001898:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	3380      	adds	r3, #128	@ 0x80
 80018a4:	121b      	asrs	r3, r3, #8
 80018a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        BME->temperature = (float)T / 100.0;
 80018aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b6:	4ba8      	ldr	r3, [pc, #672]	@ (8001b58 <bme280_update+0x404>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001b60 <bme280_update+0x40c>
 80018be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c2:	edc3 7a05 	vstr	s15, [r3, #20]

        //For pressure
        int64_t var1_p, var2_p, P, adc_P;
        adc_P = (int64_t)BME->adcVals.up;
 80018c6:	4ba4      	ldr	r3, [pc, #656]	@ (8001b58 <bme280_update+0x404>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	17da      	asrs	r2, r3, #31
 80018ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80018d0:	657a      	str	r2, [r7, #84]	@ 0x54
 80018d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80018d6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
        var1_p = ((int64_t)t_fine) - 128000;
 80018da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018de:	17da      	asrs	r2, r3, #31
 80018e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80018e4:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80018e8:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80018ec:	460b      	mov	r3, r1
 80018ee:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 80018f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018f4:	4613      	mov	r3, r2
 80018f6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80018fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001900:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 8001904:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001908:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800190c:	fb03 f102 	mul.w	r1, r3, r2
 8001910:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001914:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001918:	fb02 f303 	mul.w	r3, r2, r3
 800191c:	18ca      	adds	r2, r1, r3
 800191e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001922:	fba3 4503 	umull	r4, r5, r3, r3
 8001926:	1953      	adds	r3, r2, r5
 8001928:	461d      	mov	r5, r3
 800192a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b58 <bme280_update+0x404>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001934:	b21b      	sxth	r3, r3
 8001936:	17da      	asrs	r2, r3, #31
 8001938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800193c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001940:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001944:	4603      	mov	r3, r0
 8001946:	fb03 f205 	mul.w	r2, r3, r5
 800194a:	460b      	mov	r3, r1
 800194c:	fb04 f303 	mul.w	r3, r4, r3
 8001950:	4413      	add	r3, r2
 8001952:	4602      	mov	r2, r0
 8001954:	fba4 1202 	umull	r1, r2, r4, r2
 8001958:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800195c:	460a      	mov	r2, r1
 800195e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001962:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001966:	4413      	add	r3, r2
 8001968:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800196c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001970:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8001974:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001978:	4b77      	ldr	r3, [pc, #476]	@ (8001b58 <bme280_update+0x404>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001982:	b21b      	sxth	r3, r3
 8001984:	17da      	asrs	r2, r3, #31
 8001986:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800198a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800198e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001992:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001996:	462a      	mov	r2, r5
 8001998:	fb02 f203 	mul.w	r2, r2, r3
 800199c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80019a0:	4621      	mov	r1, r4
 80019a2:	fb01 f303 	mul.w	r3, r1, r3
 80019a6:	441a      	add	r2, r3
 80019a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019ac:	4621      	mov	r1, r4
 80019ae:	fba3 ab01 	umull	sl, fp, r3, r1
 80019b2:	eb02 030b 	add.w	r3, r2, fp
 80019b6:	469b      	mov	fp, r3
 80019b8:	f04f 0000 	mov.w	r0, #0
 80019bc:	f04f 0100 	mov.w	r1, #0
 80019c0:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80019c4:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 80019c8:	ea4f 404a 	mov.w	r0, sl, lsl #17
 80019cc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80019d0:	1814      	adds	r4, r2, r0
 80019d2:	643c      	str	r4, [r7, #64]	@ 0x40
 80019d4:	414b      	adcs	r3, r1
 80019d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80019d8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80019dc:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 80019e0:	4b5d      	ldr	r3, [pc, #372]	@ (8001b58 <bme280_update+0x404>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	17da      	asrs	r2, r3, #31
 80019ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80019f2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80019f6:	f04f 0000 	mov.w	r0, #0
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a02:	00d9      	lsls	r1, r3, #3
 8001a04:	2000      	movs	r0, #0
 8001a06:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a0a:	1814      	adds	r4, r2, r0
 8001a0c:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001a0e:	414b      	adcs	r3, r1
 8001a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a12:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001a16:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001a1a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a22:	fb03 f102 	mul.w	r1, r3, r2
 8001a26:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	18ca      	adds	r2, r1, r3
 8001a34:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a38:	fba3 8903 	umull	r8, r9, r3, r3
 8001a3c:	eb02 0309 	add.w	r3, r2, r9
 8001a40:	4699      	mov	r9, r3
 8001a42:	4b45      	ldr	r3, [pc, #276]	@ (8001b58 <bme280_update+0x404>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	17da      	asrs	r2, r3, #31
 8001a50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001a58:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	fb03 f209 	mul.w	r2, r3, r9
 8001a62:	460b      	mov	r3, r1
 8001a64:	fb08 f303 	mul.w	r3, r8, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	fba8 1202 	umull	r1, r2, r8, r2
 8001a70:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001a74:	460a      	mov	r2, r1
 8001a76:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001a7a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001a7e:	4413      	add	r3, r2
 8001a80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001a84:	f04f 0000 	mov.w	r0, #0
 8001a88:	f04f 0100 	mov.w	r1, #0
 8001a8c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001a90:	4623      	mov	r3, r4
 8001a92:	0a18      	lsrs	r0, r3, #8
 8001a94:	462b      	mov	r3, r5
 8001a96:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a9a:	462b      	mov	r3, r5
 8001a9c:	1219      	asrs	r1, r3, #8
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b58 <bme280_update+0x404>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	17da      	asrs	r2, r3, #31
 8001aac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001ab0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001ab4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ab8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001abc:	464a      	mov	r2, r9
 8001abe:	fb02 f203 	mul.w	r2, r2, r3
 8001ac2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001ac6:	4644      	mov	r4, r8
 8001ac8:	fb04 f303 	mul.w	r3, r4, r3
 8001acc:	441a      	add	r2, r3
 8001ace:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ad2:	4644      	mov	r4, r8
 8001ad4:	fba3 4304 	umull	r4, r3, r3, r4
 8001ad8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001adc:	4623      	mov	r3, r4
 8001ade:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ae6:	18d3      	adds	r3, r2, r3
 8001ae8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001af8:	464c      	mov	r4, r9
 8001afa:	0323      	lsls	r3, r4, #12
 8001afc:	4644      	mov	r4, r8
 8001afe:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001b02:	4644      	mov	r4, r8
 8001b04:	0322      	lsls	r2, r4, #12
 8001b06:	1884      	adds	r4, r0, r2
 8001b08:	633c      	str	r4, [r7, #48]	@ 0x30
 8001b0a:	eb41 0303 	adc.w	r3, r1, r3
 8001b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b10:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001b14:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
        var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8001b18:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001b1c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001b20:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001b24:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <bme280_update+0x404>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	88db      	ldrh	r3, [r3, #6]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2200      	movs	r2, #0
 8001b34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001b38:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001b3c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001b40:	462b      	mov	r3, r5
 8001b42:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001b46:	4642      	mov	r2, r8
 8001b48:	fb02 f203 	mul.w	r2, r2, r3
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	4621      	mov	r1, r4
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	e005      	b.n	8001b64 <bme280_update+0x410>
 8001b58:	20000248 	.word	0x20000248
 8001b5c:	447a0000 	.word	0x447a0000
 8001b60:	42c80000 	.word	0x42c80000
 8001b64:	4622      	mov	r2, r4
 8001b66:	4641      	mov	r1, r8
 8001b68:	fba2 1201 	umull	r1, r2, r2, r1
 8001b6c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001b70:	460a      	mov	r2, r1
 8001b72:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001b76:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	104a      	asrs	r2, r1, #1
 8001b90:	4629      	mov	r1, r5
 8001b92:	17cb      	asrs	r3, r1, #31
 8001b94:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        if(var1_p == 0)
 8001b98:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	d106      	bne.n	8001bae <bme280_update+0x45a>
        {
            P = 0;
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8001bac:	e14b      	b.n	8001e46 <bme280_update+0x6f2>
        }
        else
        {
            P = 1048576 - adc_P;
 8001bae:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 8001bb8:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001bba:	eb61 0303 	sbc.w	r3, r1, r3
 8001bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bc0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001bc4:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
            P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001bc8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001bcc:	f04f 0000 	mov.w	r0, #0
 8001bd0:	f04f 0100 	mov.w	r1, #0
 8001bd4:	07d9      	lsls	r1, r3, #31
 8001bd6:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001bda:	07d0      	lsls	r0, r2, #31
 8001bdc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001be0:	1a84      	subs	r4, r0, r2
 8001be2:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8001be6:	eb61 0303 	sbc.w	r3, r1, r3
 8001bea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001bee:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	462b      	mov	r3, r5
 8001bf6:	1891      	adds	r1, r2, r2
 8001bf8:	6239      	str	r1, [r7, #32]
 8001bfa:	415b      	adcs	r3, r3
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c02:	4621      	mov	r1, r4
 8001c04:	1851      	adds	r1, r2, r1
 8001c06:	61b9      	str	r1, [r7, #24]
 8001c08:	4629      	mov	r1, r5
 8001c0a:	414b      	adcs	r3, r1
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c1a:	4649      	mov	r1, r9
 8001c1c:	018b      	lsls	r3, r1, #6
 8001c1e:	4641      	mov	r1, r8
 8001c20:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c24:	4641      	mov	r1, r8
 8001c26:	018a      	lsls	r2, r1, #6
 8001c28:	4641      	mov	r1, r8
 8001c2a:	1889      	adds	r1, r1, r2
 8001c2c:	6139      	str	r1, [r7, #16]
 8001c2e:	4649      	mov	r1, r9
 8001c30:	eb43 0101 	adc.w	r1, r3, r1
 8001c34:	6179      	str	r1, [r7, #20]
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c42:	4649      	mov	r1, r9
 8001c44:	008b      	lsls	r3, r1, #2
 8001c46:	4641      	mov	r1, r8
 8001c48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c4c:	4641      	mov	r1, r8
 8001c4e:	008a      	lsls	r2, r1, #2
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	4603      	mov	r3, r0
 8001c56:	4622      	mov	r2, r4
 8001c58:	189b      	adds	r3, r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	462a      	mov	r2, r5
 8001c60:	eb42 0303 	adc.w	r3, r2, r3
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001c72:	4649      	mov	r1, r9
 8001c74:	008b      	lsls	r3, r1, #2
 8001c76:	4641      	mov	r1, r8
 8001c78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c7c:	4641      	mov	r1, r8
 8001c7e:	008a      	lsls	r2, r1, #2
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	4603      	mov	r3, r0
 8001c86:	4622      	mov	r2, r4
 8001c88:	189b      	adds	r3, r3, r2
 8001c8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001c8e:	462b      	mov	r3, r5
 8001c90:	460a      	mov	r2, r1
 8001c92:	eb42 0303 	adc.w	r3, r2, r3
 8001c96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c9a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001ca2:	f7ff f8ff 	bl	8000ea4 <__aeabi_ldivmod>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
            var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001cae:	4bb9      	ldr	r3, [pc, #740]	@ (8001f94 <bme280_update+0x840>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	17da      	asrs	r2, r3, #31
 8001cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001cbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001cc0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001cc4:	f04f 0000 	mov.w	r0, #0
 8001cc8:	f04f 0100 	mov.w	r1, #0
 8001ccc:	0b50      	lsrs	r0, r2, #13
 8001cce:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001cd2:	1359      	asrs	r1, r3, #13
 8001cd4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001cd8:	462b      	mov	r3, r5
 8001cda:	fb00 f203 	mul.w	r2, r0, r3
 8001cde:	4623      	mov	r3, r4
 8001ce0:	fb03 f301 	mul.w	r3, r3, r1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	4622      	mov	r2, r4
 8001ce8:	fba2 1200 	umull	r1, r2, r2, r0
 8001cec:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001cf6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001d00:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001d04:	f04f 0000 	mov.w	r0, #0
 8001d08:	f04f 0100 	mov.w	r1, #0
 8001d0c:	0b50      	lsrs	r0, r2, #13
 8001d0e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d12:	1359      	asrs	r1, r3, #13
 8001d14:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001d18:	462b      	mov	r3, r5
 8001d1a:	fb00 f203 	mul.w	r2, r0, r3
 8001d1e:	4623      	mov	r3, r4
 8001d20:	fb03 f301 	mul.w	r3, r3, r1
 8001d24:	4413      	add	r3, r2
 8001d26:	4622      	mov	r2, r4
 8001d28:	fba2 1200 	umull	r1, r2, r2, r0
 8001d2c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001d30:	460a      	mov	r2, r1
 8001d32:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001d36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	0e4a      	lsrs	r2, r1, #25
 8001d50:	4629      	mov	r1, r5
 8001d52:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001d56:	4629      	mov	r1, r5
 8001d58:	164b      	asrs	r3, r1, #25
 8001d5a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 8001d5e:	4b8d      	ldr	r3, [pc, #564]	@ (8001f94 <bme280_update+0x840>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	17da      	asrs	r2, r3, #31
 8001d6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001d6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d70:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001d74:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001d78:	462a      	mov	r2, r5
 8001d7a:	fb02 f203 	mul.w	r2, r2, r3
 8001d7e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001d82:	4621      	mov	r1, r4
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001d8e:	4621      	mov	r1, r4
 8001d90:	fba2 1201 	umull	r1, r2, r2, r1
 8001d94:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001d98:	460a      	mov	r2, r1
 8001d9a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001d9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001da2:	4413      	add	r3, r2
 8001da4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001db4:	4621      	mov	r1, r4
 8001db6:	0cca      	lsrs	r2, r1, #19
 8001db8:	4629      	mov	r1, r5
 8001dba:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	14cb      	asrs	r3, r1, #19
 8001dc2:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
            P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 8001dc6:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001dca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001dce:	1884      	adds	r4, r0, r2
 8001dd0:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001dd2:	eb41 0303 	adc.w	r3, r1, r3
 8001dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001dd8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001ddc:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001de0:	4621      	mov	r1, r4
 8001de2:	1889      	adds	r1, r1, r2
 8001de4:	6639      	str	r1, [r7, #96]	@ 0x60
 8001de6:	4629      	mov	r1, r5
 8001de8:	eb43 0101 	adc.w	r1, r3, r1
 8001dec:	6679      	str	r1, [r7, #100]	@ 0x64
 8001dee:	f04f 0000 	mov.w	r0, #0
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001dfa:	4623      	mov	r3, r4
 8001dfc:	0a18      	lsrs	r0, r3, #8
 8001dfe:	462b      	mov	r3, r5
 8001e00:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001e04:	462b      	mov	r3, r5
 8001e06:	1219      	asrs	r1, r3, #8
 8001e08:	4b62      	ldr	r3, [pc, #392]	@ (8001f94 <bme280_update+0x840>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	17da      	asrs	r2, r3, #31
 8001e16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e18:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001e26:	464c      	mov	r4, r9
 8001e28:	0123      	lsls	r3, r4, #4
 8001e2a:	4644      	mov	r4, r8
 8001e2c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001e30:	4644      	mov	r4, r8
 8001e32:	0122      	lsls	r2, r4, #4
 8001e34:	1884      	adds	r4, r0, r2
 8001e36:	603c      	str	r4, [r7, #0]
 8001e38:	eb41 0303 	adc.w	r3, r1, r3
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e42:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
        }

        BME->pressure = ((float)P / 256.0 / 100.0);
 8001e46:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001e4a:	f7fe ffed 	bl	8000e28 <__aeabi_l2f>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb99 	bl	8000588 <__aeabi_f2d>
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001f98 <bme280_update+0x844>)
 8001e5c:	f7fe fd16 	bl	800088c <__aeabi_ddiv>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f9c <bme280_update+0x848>)
 8001e6e:	f7fe fd0d 	bl	800088c <__aeabi_ddiv>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4947      	ldr	r1, [pc, #284]	@ (8001f94 <bme280_update+0x840>)
 8001e78:	680c      	ldr	r4, [r1, #0]
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe feb3 	bl	8000be8 <__aeabi_d2f>
 8001e82:	4603      	mov	r3, r0
 8001e84:	61a3      	str	r3, [r4, #24]

        //for humidity
        uint32_t var_h, adc_H;
        adc_H = BME->adcVals.uh;
 8001e86:	4b43      	ldr	r3, [pc, #268]	@ (8001f94 <bme280_update+0x840>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

        var_h = (t_fine - ((int32_t)76800));
 8001e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001e94:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001e98:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8001e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ea0:	039a      	lsls	r2, r3, #14
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	@ (8001f94 <bme280_update+0x840>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001eac:	051b      	lsls	r3, r3, #20
 8001eae:	1ad2      	subs	r2, r2, r3
 8001eb0:	4b38      	ldr	r3, [pc, #224]	@ (8001f94 <bme280_update+0x840>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ec0:	fb01 f303 	mul.w	r3, r1, r3
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001eca:	0bdb      	lsrs	r3, r3, #15
 8001ecc:	4a31      	ldr	r2, [pc, #196]	@ (8001f94 <bme280_update+0x840>)
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001edc:	fb01 f202 	mul.w	r2, r1, r2
 8001ee0:	0a92      	lsrs	r2, r2, #10
 8001ee2:	492c      	ldr	r1, [pc, #176]	@ (8001f94 <bme280_update+0x840>)
 8001ee4:	6809      	ldr	r1, [r1, #0]
 8001ee6:	6809      	ldr	r1, [r1, #0]
 8001ee8:	7f09      	ldrb	r1, [r1, #28]
 8001eea:	4608      	mov	r0, r1
 8001eec:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001ef0:	fb00 f101 	mul.w	r1, r0, r1
 8001ef4:	0ac9      	lsrs	r1, r1, #11
 8001ef6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001efa:	fb01 f202 	mul.w	r2, r1, r2
 8001efe:	0a92      	lsrs	r2, r2, #10
 8001f00:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001f04:	4923      	ldr	r1, [pc, #140]	@ (8001f94 <bme280_update+0x840>)
 8001f06:	6809      	ldr	r1, [r1, #0]
 8001f08:	6809      	ldr	r1, [r1, #0]
 8001f0a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001f0e:	fb01 f202 	mul.w	r2, r1, r2
 8001f12:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001f16:	0b92      	lsrs	r2, r2, #14
 8001f18:	fb02 f303 	mul.w	r3, r2, r3
 8001f1c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8001f20:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f24:	0bdb      	lsrs	r3, r3, #15
 8001f26:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f2a:	0bd2      	lsrs	r2, r2, #15
 8001f2c:	fb02 f303 	mul.w	r3, r2, r3
 8001f30:	09db      	lsrs	r3, r3, #7
 8001f32:	4a18      	ldr	r2, [pc, #96]	@ (8001f94 <bme280_update+0x840>)
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	7e12      	ldrb	r2, [r2, #24]
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h < 0 ? 0 : var_h);
        var_h = (var_h > 419430400 ? 419430400 : var_h);
 8001f4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f4e:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001f52:	bf28      	it	cs
 8001f54:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 8001f58:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 8001f5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f60:	0b1b      	lsrs	r3, r3, #12
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <bme280_update+0x840>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001fa0 <bme280_update+0x84c>
 8001f72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f76:	edc3 7a07 	vstr	s15, [r3, #28]

        // Calculate raw altitude (no filtering)
        bme280_calculate_altitude();
 8001f7a:	f7ff f9dd 	bl	8001338 <bme280_calculate_altitude>
        BME->isUpdated = 0;
 8001f7e:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <bme280_update+0x840>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
}
 8001f88:	bf00      	nop
 8001f8a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f94:	20000248 	.word	0x20000248
 8001f98:	40700000 	.word	0x40700000
 8001f9c:	40590000 	.word	0x40590000
 8001fa0:	44800000 	.word	0x44800000

08001fa4 <bmi088_config>:
	HAL_I2C_Init(bmi_I2C);

}
*/
void bmi088_config()
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af04      	add	r7, sp, #16
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001faa:	2028      	movs	r0, #40	@ 0x28
 8001fac:	f005 fda9 	bl	8007b02 <HAL_NVIC_DisableIRQ>
	HAL_StatusTypeDef retVal = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 8001fb8:	4bb7      	ldr	r3, [pc, #732]	@ (8002298 <bmi088_config+0x2f4>)
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	2364      	movs	r3, #100	@ 0x64
 8001fbe:	9302      	str	r3, [sp, #8]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	227c      	movs	r2, #124	@ 0x7c
 8001fcc:	2130      	movs	r1, #48	@ 0x30
 8001fce:	f006 fde3 	bl	8008b98 <HAL_I2C_Mem_Write>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	71fb      	strb	r3, [r7, #7]

	buf[0] = ACC_DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 8001fe0:	4bad      	ldr	r3, [pc, #692]	@ (8002298 <bmi088_config+0x2f4>)
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	2364      	movs	r3, #100	@ 0x64
 8001fe6:	9302      	str	r3, [sp, #8]
 8001fe8:	2301      	movs	r3, #1
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	227d      	movs	r2, #125	@ 0x7d
 8001ff4:	2130      	movs	r1, #48	@ 0x30
 8001ff6:	f006 fdcf 	bl	8008b98 <HAL_I2C_Mem_Write>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	4313      	orrs	r3, r2
 8002002:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(20);
 8002004:	2014      	movs	r0, #20
 8002006:	f005 fc2f 	bl	8007868 <HAL_Delay>

	buf[0] = ACC_RESET;
 800200a:	23b6      	movs	r3, #182	@ 0xb6
 800200c:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 800200e:	4ba2      	ldr	r3, [pc, #648]	@ (8002298 <bmi088_config+0x2f4>)
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	2364      	movs	r3, #100	@ 0x64
 8002014:	9302      	str	r3, [sp, #8]
 8002016:	2301      	movs	r3, #1
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	2301      	movs	r3, #1
 8002020:	227e      	movs	r2, #126	@ 0x7e
 8002022:	2130      	movs	r1, #48	@ 0x30
 8002024:	f006 fdb8 	bl	8008b98 <HAL_I2C_Mem_Write>
 8002028:	4603      	mov	r3, r0
 800202a:	461a      	mov	r2, r3
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	4313      	orrs	r3, r2
 8002030:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <bmi088_config+0x9a>
 8002038:	4b98      	ldr	r3, [pc, #608]	@ (800229c <bmi088_config+0x2f8>)
 800203a:	2284      	movs	r2, #132	@ 0x84
 800203c:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 800203e:	200a      	movs	r0, #10
 8002040:	f005 fc12 	bl	8007868 <HAL_Delay>

	buf[0] = FIFO_RESET;
 8002044:	23b0      	movs	r3, #176	@ 0xb0
 8002046:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 8002048:	4b93      	ldr	r3, [pc, #588]	@ (8002298 <bmi088_config+0x2f4>)
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	2364      	movs	r3, #100	@ 0x64
 800204e:	9302      	str	r3, [sp, #8]
 8002050:	2301      	movs	r3, #1
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2301      	movs	r3, #1
 800205a:	227e      	movs	r2, #126	@ 0x7e
 800205c:	2130      	movs	r1, #48	@ 0x30
 800205e:	f006 fd9b 	bl	8008b98 <HAL_I2C_Mem_Write>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	4313      	orrs	r3, r2
 800206a:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <bmi088_config+0xd4>
 8002072:	4b8a      	ldr	r3, [pc, #552]	@ (800229c <bmi088_config+0x2f8>)
 8002074:	2289      	movs	r2, #137	@ 0x89
 8002076:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002078:	200a      	movs	r0, #10
 800207a:	f005 fbf5 	bl	8007868 <HAL_Delay>

	buf[0] = GYRO_RESET;
 800207e:	23b6      	movs	r3, #182	@ 0xb6
 8002080:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 8002082:	4b85      	ldr	r3, [pc, #532]	@ (8002298 <bmi088_config+0x2f4>)
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	2364      	movs	r3, #100	@ 0x64
 8002088:	9302      	str	r3, [sp, #8]
 800208a:	2301      	movs	r3, #1
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2301      	movs	r3, #1
 8002094:	2214      	movs	r2, #20
 8002096:	21d0      	movs	r1, #208	@ 0xd0
 8002098:	f006 fd7e 	bl	8008b98 <HAL_I2C_Mem_Write>
 800209c:	4603      	mov	r3, r0
 800209e:	461a      	mov	r2, r3
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <bmi088_config+0x10e>
 80020ac:	4b7b      	ldr	r3, [pc, #492]	@ (800229c <bmi088_config+0x2f8>)
 80020ae:	228e      	movs	r2, #142	@ 0x8e
 80020b0:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80020b2:	200a      	movs	r0, #10
 80020b4:	f005 fbd8 	bl	8007868 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->deviceConfig.gyro_range;
 80020b8:	4b79      	ldr	r3, [pc, #484]	@ (80022a0 <bmi088_config+0x2fc>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	7f5b      	ldrb	r3, [r3, #29]
 80020be:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 80020c0:	4b75      	ldr	r3, [pc, #468]	@ (8002298 <bmi088_config+0x2f4>)
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	2364      	movs	r3, #100	@ 0x64
 80020c6:	9302      	str	r3, [sp, #8]
 80020c8:	2301      	movs	r3, #1
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2301      	movs	r3, #1
 80020d2:	220f      	movs	r2, #15
 80020d4:	21d0      	movs	r1, #208	@ 0xd0
 80020d6:	f006 fd5f 	bl	8008b98 <HAL_I2C_Mem_Write>
 80020da:	4603      	mov	r3, r0
 80020dc:	461a      	mov	r2, r3
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <bmi088_config+0x14c>
 80020ea:	4b6c      	ldr	r3, [pc, #432]	@ (800229c <bmi088_config+0x2f8>)
 80020ec:	2294      	movs	r2, #148	@ 0x94
 80020ee:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_bandWidth;
 80020f0:	4b6b      	ldr	r3, [pc, #428]	@ (80022a0 <bmi088_config+0x2fc>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	7f1b      	ldrb	r3, [r3, #28]
 80020f6:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 80020f8:	4b67      	ldr	r3, [pc, #412]	@ (8002298 <bmi088_config+0x2f4>)
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	2314      	movs	r3, #20
 80020fe:	9302      	str	r3, [sp, #8]
 8002100:	2301      	movs	r3, #1
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	2301      	movs	r3, #1
 800210a:	2210      	movs	r2, #16
 800210c:	21d0      	movs	r1, #208	@ 0xd0
 800210e:	f006 fd43 	bl	8008b98 <HAL_I2C_Mem_Write>
 8002112:	4603      	mov	r3, r0
 8002114:	461a      	mov	r2, r3
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	4313      	orrs	r3, r2
 800211a:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <bmi088_config+0x184>
 8002122:	4b5e      	ldr	r3, [pc, #376]	@ (800229c <bmi088_config+0x2f8>)
 8002124:	2298      	movs	r2, #152	@ 0x98
 8002126:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_powerMode;
 8002128:	4b5d      	ldr	r3, [pc, #372]	@ (80022a0 <bmi088_config+0x2fc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	7edb      	ldrb	r3, [r3, #27]
 800212e:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 8002130:	4b59      	ldr	r3, [pc, #356]	@ (8002298 <bmi088_config+0x2f4>)
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	2314      	movs	r3, #20
 8002136:	9302      	str	r3, [sp, #8]
 8002138:	2301      	movs	r3, #1
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2301      	movs	r3, #1
 8002142:	2211      	movs	r2, #17
 8002144:	21d0      	movs	r1, #208	@ 0xd0
 8002146:	f006 fd27 	bl	8008b98 <HAL_I2C_Mem_Write>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	4313      	orrs	r3, r2
 8002152:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <bmi088_config+0x1bc>
 800215a:	4b50      	ldr	r3, [pc, #320]	@ (800229c <bmi088_config+0x2f8>)
 800215c:	229c      	movs	r2, #156	@ 0x9c
 800215e:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 8002160:	2014      	movs	r0, #20
 8002162:	f005 fb81 	bl	8007868 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 800216a:	4b4b      	ldr	r3, [pc, #300]	@ (8002298 <bmi088_config+0x2f4>)
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	2314      	movs	r3, #20
 8002170:	9302      	str	r3, [sp, #8]
 8002172:	2301      	movs	r3, #1
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2301      	movs	r3, #1
 800217c:	2215      	movs	r2, #21
 800217e:	21d0      	movs	r1, #208	@ 0xd0
 8002180:	f006 fd0a 	bl	8008b98 <HAL_I2C_Mem_Write>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	4313      	orrs	r3, r2
 800218c:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <bmi088_config+0x1f6>
 8002194:	4b41      	ldr	r3, [pc, #260]	@ (800229c <bmi088_config+0x2f8>)
 8002196:	22a2      	movs	r2, #162	@ 0xa2
 8002198:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0);
 800219a:	2301      	movs	r3, #1
 800219c:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 800219e:	4b3e      	ldr	r3, [pc, #248]	@ (8002298 <bmi088_config+0x2f4>)
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	2314      	movs	r3, #20
 80021a4:	9302      	str	r3, [sp, #8]
 80021a6:	2301      	movs	r3, #1
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2301      	movs	r3, #1
 80021b0:	2216      	movs	r2, #22
 80021b2:	21d0      	movs	r1, #208	@ 0xd0
 80021b4:	f006 fcf0 	bl	8008b98 <HAL_I2C_Mem_Write>
 80021b8:	4603      	mov	r3, r0
 80021ba:	461a      	mov	r2, r3
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	4313      	orrs	r3, r2
 80021c0:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <bmi088_config+0x22a>
 80021c8:	4b34      	ldr	r3, [pc, #208]	@ (800229c <bmi088_config+0x2f8>)
 80021ca:	22a6      	movs	r2, #166	@ 0xa6
 80021cc:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_3;
 80021ce:	2301      	movs	r3, #1
 80021d0:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 80021d2:	4b31      	ldr	r3, [pc, #196]	@ (8002298 <bmi088_config+0x2f4>)
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	2314      	movs	r3, #20
 80021d8:	9302      	str	r3, [sp, #8]
 80021da:	2301      	movs	r3, #1
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2301      	movs	r3, #1
 80021e4:	2218      	movs	r2, #24
 80021e6:	21d0      	movs	r1, #208	@ 0xd0
 80021e8:	f006 fcd6 	bl	8008b98 <HAL_I2C_Mem_Write>
 80021ec:	4603      	mov	r3, r0
 80021ee:	461a      	mov	r2, r3
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <bmi088_config+0x25e>
 80021fc:	4b27      	ldr	r3, [pc, #156]	@ (800229c <bmi088_config+0x2f8>)
 80021fe:	22aa      	movs	r2, #170	@ 0xaa
 8002200:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 8002202:	2304      	movs	r3, #4
 8002204:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 8002206:	4b24      	ldr	r3, [pc, #144]	@ (8002298 <bmi088_config+0x2f4>)
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	2314      	movs	r3, #20
 800220c:	9302      	str	r3, [sp, #8]
 800220e:	2301      	movs	r3, #1
 8002210:	9301      	str	r3, [sp, #4]
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	2301      	movs	r3, #1
 8002218:	227d      	movs	r2, #125	@ 0x7d
 800221a:	2130      	movs	r1, #48	@ 0x30
 800221c:	f006 fcbc 	bl	8008b98 <HAL_I2C_Mem_Write>
 8002220:	4603      	mov	r3, r0
 8002222:	461a      	mov	r2, r3
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	4313      	orrs	r3, r2
 8002228:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <bmi088_config+0x292>
 8002230:	4b1a      	ldr	r3, [pc, #104]	@ (800229c <bmi088_config+0x2f8>)
 8002232:	22af      	movs	r2, #175	@ 0xaf
 8002234:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8002236:	2008      	movs	r0, #8
 8002238:	f005 fb16 	bl	8007868 <HAL_Delay>

	buf[0] = BMI->deviceConfig.acc_powerMode;
 800223c:	4b18      	ldr	r3, [pc, #96]	@ (80022a0 <bmi088_config+0x2fc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	7ddb      	ldrb	r3, [r3, #23]
 8002242:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 8002244:	4b14      	ldr	r3, [pc, #80]	@ (8002298 <bmi088_config+0x2f4>)
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	2314      	movs	r3, #20
 800224a:	9302      	str	r3, [sp, #8]
 800224c:	2301      	movs	r3, #1
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2301      	movs	r3, #1
 8002256:	227c      	movs	r2, #124	@ 0x7c
 8002258:	2130      	movs	r1, #48	@ 0x30
 800225a:	f006 fc9d 	bl	8008b98 <HAL_I2C_Mem_Write>
 800225e:	4603      	mov	r3, r0
 8002260:	461a      	mov	r2, r3
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	4313      	orrs	r3, r2
 8002266:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <bmi088_config+0x2d0>
 800226e:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <bmi088_config+0x2f8>)
 8002270:	22b4      	movs	r2, #180	@ 0xb4
 8002272:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8002274:	2008      	movs	r0, #8
 8002276:	f005 faf7 	bl	8007868 <HAL_Delay>

	buf[0] = (BMI->deviceConfig.acc_bandwith << 4) | BMI->deviceConfig.acc_outputDateRate;
 800227a:	4b09      	ldr	r3, [pc, #36]	@ (80022a0 <bmi088_config+0x2fc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	7e5b      	ldrb	r3, [r3, #25]
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	b25a      	sxtb	r2, r3
 8002284:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <bmi088_config+0x2fc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	7e9b      	ldrb	r3, [r3, #26]
 800228a:	b25b      	sxtb	r3, r3
 800228c:	4313      	orrs	r3, r2
 800228e:	b25b      	sxtb	r3, r3
 8002290:	b2db      	uxtb	r3, r3
 8002292:	713b      	strb	r3, [r7, #4]
 8002294:	e006      	b.n	80022a4 <bmi088_config+0x300>
 8002296:	bf00      	nop
 8002298:	20000250 	.word	0x20000250
 800229c:	2000025c 	.word	0x2000025c
 80022a0:	20000254 	.word	0x20000254
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 80022a4:	4b31      	ldr	r3, [pc, #196]	@ (800236c <bmi088_config+0x3c8>)
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	2314      	movs	r3, #20
 80022aa:	9302      	str	r3, [sp, #8]
 80022ac:	2301      	movs	r3, #1
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	2301      	movs	r3, #1
 80022b6:	2240      	movs	r2, #64	@ 0x40
 80022b8:	2130      	movs	r1, #48	@ 0x30
 80022ba:	f006 fc6d 	bl	8008b98 <HAL_I2C_Mem_Write>
 80022be:	4603      	mov	r3, r0
 80022c0:	461a      	mov	r2, r3
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <bmi088_config+0x330>
 80022ce:	4b28      	ldr	r3, [pc, #160]	@ (8002370 <bmi088_config+0x3cc>)
 80022d0:	22b9      	movs	r2, #185	@ 0xb9
 80022d2:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.acc_range;
 80022d4:	4b27      	ldr	r3, [pc, #156]	@ (8002374 <bmi088_config+0x3d0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	7e1b      	ldrb	r3, [r3, #24]
 80022da:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 80022dc:	4b23      	ldr	r3, [pc, #140]	@ (800236c <bmi088_config+0x3c8>)
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	2314      	movs	r3, #20
 80022e2:	9302      	str	r3, [sp, #8]
 80022e4:	2301      	movs	r3, #1
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2301      	movs	r3, #1
 80022ee:	2241      	movs	r2, #65	@ 0x41
 80022f0:	2130      	movs	r1, #48	@ 0x30
 80022f2:	f006 fc51 	bl	8008b98 <HAL_I2C_Mem_Write>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <bmi088_config+0x368>
 8002306:	4b1a      	ldr	r3, [pc, #104]	@ (8002370 <bmi088_config+0x3cc>)
 8002308:	22bd      	movs	r2, #189	@ 0xbd
 800230a:	601a      	str	r2, [r3, #0]

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 800230c:	230a      	movs	r3, #10
 800230e:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 8002310:	4b16      	ldr	r3, [pc, #88]	@ (800236c <bmi088_config+0x3c8>)
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	2314      	movs	r3, #20
 8002316:	9302      	str	r3, [sp, #8]
 8002318:	2301      	movs	r3, #1
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2301      	movs	r3, #1
 8002322:	2253      	movs	r2, #83	@ 0x53
 8002324:	2130      	movs	r1, #48	@ 0x30
 8002326:	f006 fc37 	bl	8008b98 <HAL_I2C_Mem_Write>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	4313      	orrs	r3, r2
 8002332:	71fb      	strb	r3, [r7, #7]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 8002334:	2304      	movs	r3, #4
 8002336:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 8002338:	4b0c      	ldr	r3, [pc, #48]	@ (800236c <bmi088_config+0x3c8>)
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	2314      	movs	r3, #20
 800233e:	9302      	str	r3, [sp, #8]
 8002340:	2301      	movs	r3, #1
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	2301      	movs	r3, #1
 800234a:	2258      	movs	r2, #88	@ 0x58
 800234c:	2130      	movs	r1, #48	@ 0x30
 800234e:	f006 fc23 	bl	8008b98 <HAL_I2C_Mem_Write>
 8002352:	4603      	mov	r3, r0
 8002354:	461a      	mov	r2, r3
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	4313      	orrs	r3, r2
 800235a:	71fb      	strb	r3, [r7, #7]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800235c:	2028      	movs	r0, #40	@ 0x28
 800235e:	f005 fbc2 	bl	8007ae6 <HAL_NVIC_EnableIRQ>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000250 	.word	0x20000250
 8002370:	2000025c 	.word	0x2000025c
 8002374:	20000254 	.word	0x20000254

08002378 <bmi088_init>:

void bmi088_init(bmi088_struct_t* BMI_, I2C_HandleTypeDef* I2C_)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af04      	add	r7, sp, #16
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
	//quaternionSet_zero();
	bmi_I2C = I2C_;
 8002382:	4a25      	ldr	r2, [pc, #148]	@ (8002418 <bmi088_init+0xa0>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6013      	str	r3, [r2, #0]
	BMI = BMI_;
 8002388:	4a24      	ldr	r2, [pc, #144]	@ (800241c <bmi088_init+0xa4>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
	BMI->rawDatas.isGyroUpdated = 0;
 800238e:	4b23      	ldr	r3, [pc, #140]	@ (800241c <bmi088_init+0xa4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2200      	movs	r2, #0
 8002394:	755a      	strb	r2, [r3, #21]
	BMI->rawDatas.isAccelUpdated = 0;
 8002396:	4b21      	ldr	r3, [pc, #132]	@ (800241c <bmi088_init+0xa4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2200      	movs	r2, #0
 800239c:	759a      	strb	r2, [r3, #22]
	isTimeUpdated = 0;
 800239e:	4b20      	ldr	r3, [pc, #128]	@ (8002420 <bmi088_init+0xa8>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
	isStarded = 0;
 80023a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002424 <bmi088_init+0xac>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	701a      	strb	r2, [r3, #0]
	uint8_t buf[1];
	BMI->bmi088_t_2 = &bmi_struct_2;
 80023aa:	4b1c      	ldr	r3, [pc, #112]	@ (800241c <bmi088_init+0xa4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002428 <bmi088_init+0xb0>)
 80023b0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(I2C_, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80023b2:	2332      	movs	r3, #50	@ 0x32
 80023b4:	9302      	str	r3, [sp, #8]
 80023b6:	2301      	movs	r3, #1
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2301      	movs	r3, #1
 80023c2:	2200      	movs	r2, #0
 80023c4:	21d0      	movs	r1, #208	@ 0xd0
 80023c6:	6838      	ldr	r0, [r7, #0]
 80023c8:	f006 fce0 	bl	8008d8c <HAL_I2C_Mem_Read>
	if(*buf == 0x0F){
 80023cc:	7b3b      	ldrb	r3, [r7, #12]
 80023ce:	2b0f      	cmp	r3, #15
 80023d0:	d103      	bne.n	80023da <bmi088_init+0x62>
		is_BMI_ok = 1;
 80023d2:	4b16      	ldr	r3, [pc, #88]	@ (800242c <bmi088_init+0xb4>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
		BMI->bmi088_t_2->q[0] = 1;
		BMI->bmi088_t_2->q[1] = 0;
		BMI->bmi088_t_2->q[2] = 0;
		BMI->bmi088_t_2->q[3] = 0;
	}
}
 80023d8:	e01a      	b.n	8002410 <bmi088_init+0x98>
		is_BMI_ok = 0;
 80023da:	4b14      	ldr	r3, [pc, #80]	@ (800242c <bmi088_init+0xb4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
		BMI->bmi088_t_2->q[0] = 1;
 80023e0:	4b0e      	ldr	r3, [pc, #56]	@ (800241c <bmi088_init+0xa4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80023ea:	601a      	str	r2, [r3, #0]
		BMI->bmi088_t_2->q[1] = 0;
 80023ec:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <bmi088_init+0xa4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	605a      	str	r2, [r3, #4]
		BMI->bmi088_t_2->q[2] = 0;
 80023f8:	4b08      	ldr	r3, [pc, #32]	@ (800241c <bmi088_init+0xa4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
		BMI->bmi088_t_2->q[3] = 0;
 8002404:	4b05      	ldr	r3, [pc, #20]	@ (800241c <bmi088_init+0xa4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	60da      	str	r2, [r3, #12]
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000250 	.word	0x20000250
 800241c:	20000254 	.word	0x20000254
 8002420:	20000258 	.word	0x20000258
 8002424:	20000259 	.word	0x20000259
 8002428:	20000664 	.word	0x20000664
 800242c:	200006c0 	.word	0x200006c0

08002430 <bmi088_update>:

void bmi088_update()
{
 8002430:	b5b0      	push	{r4, r5, r7, lr}
 8002432:	b08a      	sub	sp, #40	@ 0x28
 8002434:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret_val = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	75fb      	strb	r3, [r7, #23]

		if(BMI->rawDatas.isAccelUpdated)
 800243a:	4b22      	ldr	r3, [pc, #136]	@ (80024c4 <bmi088_update+0x94>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	7d9b      	ldrb	r3, [r3, #22]
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 822a 	beq.w	800289a <bmi088_update+0x46a>
		{
			ret_val = HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.accel, 9, 20);
 8002446:	4b20      	ldr	r3, [pc, #128]	@ (80024c8 <bmi088_update+0x98>)
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	4b1e      	ldr	r3, [pc, #120]	@ (80024c4 <bmi088_update+0x94>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3304      	adds	r3, #4
 8002450:	2214      	movs	r2, #20
 8002452:	9202      	str	r2, [sp, #8]
 8002454:	2209      	movs	r2, #9
 8002456:	9201      	str	r2, [sp, #4]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2301      	movs	r3, #1
 800245c:	2212      	movs	r2, #18
 800245e:	2130      	movs	r1, #48	@ 0x30
 8002460:	f006 fc94 	bl	8008d8c <HAL_I2C_Mem_Read>
 8002464:	4603      	mov	r3, r0
 8002466:	75fb      	strb	r3, [r7, #23]
			if(ret_val)
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f040 835b 	bne.w	8002b26 <bmi088_update+0x6f6>
				return;
			HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.temp, 2, 20);
 8002470:	4b15      	ldr	r3, [pc, #84]	@ (80024c8 <bmi088_update+0x98>)
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	4b13      	ldr	r3, [pc, #76]	@ (80024c4 <bmi088_update+0x94>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	330d      	adds	r3, #13
 800247a:	2214      	movs	r2, #20
 800247c:	9202      	str	r2, [sp, #8]
 800247e:	2202      	movs	r2, #2
 8002480:	9201      	str	r2, [sp, #4]
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2301      	movs	r3, #1
 8002486:	2222      	movs	r2, #34	@ 0x22
 8002488:	2130      	movs	r1, #48	@ 0x30
 800248a:	f006 fc7f 	bl	8008d8c <HAL_I2C_Mem_Read>

			uint16_t Temp_uint11 = (BMI->rawDatas.temp[0] << 3) | (BMI->rawDatas.temp[1] >> 5);
 800248e:	4b0d      	ldr	r3, [pc, #52]	@ (80024c4 <bmi088_update+0x94>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	7b5b      	ldrb	r3, [r3, #13]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	b21a      	sxth	r2, r3
 8002498:	4b0a      	ldr	r3, [pc, #40]	@ (80024c4 <bmi088_update+0x94>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	7b9b      	ldrb	r3, [r3, #14]
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	b21b      	sxth	r3, r3
 80024a4:	4313      	orrs	r3, r2
 80024a6:	b21b      	sxth	r3, r3
 80024a8:	82bb      	strh	r3, [r7, #20]
			int16_t Temp_int11 = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	827b      	strh	r3, [r7, #18]
			if (Temp_uint11 > 1023){
 80024ae:	8abb      	ldrh	r3, [r7, #20]
 80024b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024b4:	d30a      	bcc.n	80024cc <bmi088_update+0x9c>
				Temp_int11 = Temp_uint11 - 2048;
 80024b6:	8abb      	ldrh	r3, [r7, #20]
 80024b8:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80024bc:	b29b      	uxth	r3, r3
 80024be:	827b      	strh	r3, [r7, #18]
 80024c0:	e02a      	b.n	8002518 <bmi088_update+0xe8>
 80024c2:	bf00      	nop
 80024c4:	20000254 	.word	0x20000254
 80024c8:	20000250 	.word	0x20000250
			}
			else{
				Temp_int11 = Temp_uint11;
 80024cc:	8abb      	ldrh	r3, [r7, #20]
 80024ce:	827b      	strh	r3, [r7, #18]
				BMI->temp = (float)Temp_int11 * 0.125 + 23.0;
 80024d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80024d4:	ee07 3a90 	vmov	s15, r3
 80024d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024dc:	ee17 0a90 	vmov	r0, s15
 80024e0:	f7fe f852 	bl	8000588 <__aeabi_f2d>
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80024ec:	f7fe f8a4 	bl	8000638 <__aeabi_dmul>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	4bcc      	ldr	r3, [pc, #816]	@ (8002830 <bmi088_update+0x400>)
 80024fe:	f7fd fee5 	bl	80002cc <__adddf3>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	49cb      	ldr	r1, [pc, #812]	@ (8002834 <bmi088_update+0x404>)
 8002508:	680c      	ldr	r4, [r1, #0]
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	f7fe fb6b 	bl	8000be8 <__aeabi_d2f>
 8002512:	4603      	mov	r3, r0
 8002514:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
			}
			uint32_t sensorTime = (BMI->rawDatas.accel[8] << 16) | (BMI->rawDatas.accel[7] << 8) | BMI->rawDatas.accel[6];
 8002518:	4bc6      	ldr	r3, [pc, #792]	@ (8002834 <bmi088_update+0x404>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	7b1b      	ldrb	r3, [r3, #12]
 800251e:	041a      	lsls	r2, r3, #16
 8002520:	4bc4      	ldr	r3, [pc, #784]	@ (8002834 <bmi088_update+0x404>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	7adb      	ldrb	r3, [r3, #11]
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	4313      	orrs	r3, r2
 800252a:	4ac2      	ldr	r2, [pc, #776]	@ (8002834 <bmi088_update+0x404>)
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	7a92      	ldrb	r2, [r2, #10]
 8002530:	4313      	orrs	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]

			BMI->currentTime= (float)sensorTime * 39.0625 / 1000000.0;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800253e:	ee17 0a90 	vmov	r0, s15
 8002542:	f7fe f821 	bl	8000588 <__aeabi_f2d>
 8002546:	a3b2      	add	r3, pc, #712	@ (adr r3, 8002810 <bmi088_update+0x3e0>)
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	f7fe f874 	bl	8000638 <__aeabi_dmul>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4610      	mov	r0, r2
 8002556:	4619      	mov	r1, r3
 8002558:	a3af      	add	r3, pc, #700	@ (adr r3, 8002818 <bmi088_update+0x3e8>)
 800255a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255e:	f7fe f995 	bl	800088c <__aeabi_ddiv>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	49b3      	ldr	r1, [pc, #716]	@ (8002834 <bmi088_update+0x404>)
 8002568:	680c      	ldr	r4, [r1, #0]
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f7fe fb3b 	bl	8000be8 <__aeabi_d2f>
 8002572:	4603      	mov	r3, r0
 8002574:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc

			int16_t acc_z_16 = (BMI->rawDatas.accel[5] << 8) | BMI->rawDatas.accel[4];
 8002578:	4bae      	ldr	r3, [pc, #696]	@ (8002834 <bmi088_update+0x404>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	7a5b      	ldrb	r3, [r3, #9]
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	b21a      	sxth	r2, r3
 8002582:	4bac      	ldr	r3, [pc, #688]	@ (8002834 <bmi088_update+0x404>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	7a1b      	ldrb	r3, [r3, #8]
 8002588:	b21b      	sxth	r3, r3
 800258a:	4313      	orrs	r3, r2
 800258c:	817b      	strh	r3, [r7, #10]
			int16_t acc_y_16 = (BMI->rawDatas.accel[3] << 8) | BMI->rawDatas.accel[2];
 800258e:	4ba9      	ldr	r3, [pc, #676]	@ (8002834 <bmi088_update+0x404>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	79db      	ldrb	r3, [r3, #7]
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	b21a      	sxth	r2, r3
 8002598:	4ba6      	ldr	r3, [pc, #664]	@ (8002834 <bmi088_update+0x404>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	799b      	ldrb	r3, [r3, #6]
 800259e:	b21b      	sxth	r3, r3
 80025a0:	4313      	orrs	r3, r2
 80025a2:	813b      	strh	r3, [r7, #8]
			int16_t acc_x_16 = (BMI->rawDatas.accel[1] << 8) | BMI->rawDatas.accel[0];
 80025a4:	4ba3      	ldr	r3, [pc, #652]	@ (8002834 <bmi088_update+0x404>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	795b      	ldrb	r3, [r3, #5]
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	b21a      	sxth	r2, r3
 80025ae:	4ba1      	ldr	r3, [pc, #644]	@ (8002834 <bmi088_update+0x404>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	791b      	ldrb	r3, [r3, #4]
 80025b4:	b21b      	sxth	r3, r3
 80025b6:	4313      	orrs	r3, r2
 80025b8:	80fb      	strh	r3, [r7, #6]

			BMI->acc_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - 0.0)*9.81/1000;
 80025ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025c6:	ee17 0a90 	vmov	r0, s15
 80025ca:	f7fd ffdd 	bl	8000588 <__aeabi_f2d>
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	4b99      	ldr	r3, [pc, #612]	@ (8002838 <bmi088_update+0x408>)
 80025d4:	f7fe f95a 	bl	800088c <__aeabi_ddiv>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	4b95      	ldr	r3, [pc, #596]	@ (800283c <bmi088_update+0x40c>)
 80025e6:	f7fe f827 	bl	8000638 <__aeabi_dmul>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	4b92      	ldr	r3, [pc, #584]	@ (8002840 <bmi088_update+0x410>)
 80025f8:	f7fe f81e 	bl	8000638 <__aeabi_dmul>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4614      	mov	r4, r2
 8002602:	461d      	mov	r5, r3
 8002604:	4b8b      	ldr	r3, [pc, #556]	@ (8002834 <bmi088_update+0x404>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	7e1b      	ldrb	r3, [r3, #24]
 800260a:	3301      	adds	r3, #1
 800260c:	ee07 3a90 	vmov	s15, r3
 8002610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002614:	ee17 0a90 	vmov	r0, s15
 8002618:	f7fd ffb6 	bl	8000588 <__aeabi_f2d>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	ec43 2b11 	vmov	d1, r2, r3
 8002624:	ed9f 0b7e 	vldr	d0, [pc, #504]	@ 8002820 <bmi088_update+0x3f0>
 8002628:	f00c fb90 	bl	800ed4c <pow>
 800262c:	ec53 2b10 	vmov	r2, r3, d0
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	f7fe f800 	bl	8000638 <__aeabi_dmul>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	a379      	add	r3, pc, #484	@ (adr r3, 8002828 <bmi088_update+0x3f8>)
 8002642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002646:	f7fd fff7 	bl	8000638 <__aeabi_dmul>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4610      	mov	r0, r2
 8002650:	4619      	mov	r1, r3
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	4b79      	ldr	r3, [pc, #484]	@ (800283c <bmi088_update+0x40c>)
 8002658:	f7fe f918 	bl	800088c <__aeabi_ddiv>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4974      	ldr	r1, [pc, #464]	@ (8002834 <bmi088_update+0x404>)
 8002662:	680c      	ldr	r4, [r1, #0]
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	f7fe fabe 	bl	8000be8 <__aeabi_d2f>
 800266c:	4603      	mov	r3, r0
 800266e:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
			BMI->acc_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - 0.0)*9.81/1000;
 8002672:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002676:	ee07 3a90 	vmov	s15, r3
 800267a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800267e:	ee17 0a90 	vmov	r0, s15
 8002682:	f7fd ff81 	bl	8000588 <__aeabi_f2d>
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	4b6b      	ldr	r3, [pc, #428]	@ (8002838 <bmi088_update+0x408>)
 800268c:	f7fe f8fe 	bl	800088c <__aeabi_ddiv>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4610      	mov	r0, r2
 8002696:	4619      	mov	r1, r3
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	4b67      	ldr	r3, [pc, #412]	@ (800283c <bmi088_update+0x40c>)
 800269e:	f7fd ffcb 	bl	8000638 <__aeabi_dmul>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	4b64      	ldr	r3, [pc, #400]	@ (8002840 <bmi088_update+0x410>)
 80026b0:	f7fd ffc2 	bl	8000638 <__aeabi_dmul>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4614      	mov	r4, r2
 80026ba:	461d      	mov	r5, r3
 80026bc:	4b5d      	ldr	r3, [pc, #372]	@ (8002834 <bmi088_update+0x404>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	7e1b      	ldrb	r3, [r3, #24]
 80026c2:	3301      	adds	r3, #1
 80026c4:	ee07 3a90 	vmov	s15, r3
 80026c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026cc:	ee17 0a90 	vmov	r0, s15
 80026d0:	f7fd ff5a 	bl	8000588 <__aeabi_f2d>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	ec43 2b11 	vmov	d1, r2, r3
 80026dc:	ed9f 0b50 	vldr	d0, [pc, #320]	@ 8002820 <bmi088_update+0x3f0>
 80026e0:	f00c fb34 	bl	800ed4c <pow>
 80026e4:	ec53 2b10 	vmov	r2, r3, d0
 80026e8:	4620      	mov	r0, r4
 80026ea:	4629      	mov	r1, r5
 80026ec:	f7fd ffa4 	bl	8000638 <__aeabi_dmul>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	a34b      	add	r3, pc, #300	@ (adr r3, 8002828 <bmi088_update+0x3f8>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f7fd ff9b 	bl	8000638 <__aeabi_dmul>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	4b4b      	ldr	r3, [pc, #300]	@ (800283c <bmi088_update+0x40c>)
 8002710:	f7fe f8bc 	bl	800088c <__aeabi_ddiv>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4946      	ldr	r1, [pc, #280]	@ (8002834 <bmi088_update+0x404>)
 800271a:	680c      	ldr	r4, [r1, #0]
 800271c:	4610      	mov	r0, r2
 800271e:	4619      	mov	r1, r3
 8002720:	f7fe fa62 	bl	8000be8 <__aeabi_d2f>
 8002724:	4603      	mov	r3, r0
 8002726:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
			BMI->acc_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - 0.0)*9.81/1000;
 800272a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800272e:	ee07 3a90 	vmov	s15, r3
 8002732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002736:	ee17 0a90 	vmov	r0, s15
 800273a:	f7fd ff25 	bl	8000588 <__aeabi_f2d>
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	4b3d      	ldr	r3, [pc, #244]	@ (8002838 <bmi088_update+0x408>)
 8002744:	f7fe f8a2 	bl	800088c <__aeabi_ddiv>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4610      	mov	r0, r2
 800274e:	4619      	mov	r1, r3
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	4b39      	ldr	r3, [pc, #228]	@ (800283c <bmi088_update+0x40c>)
 8002756:	f7fd ff6f 	bl	8000638 <__aeabi_dmul>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	4b36      	ldr	r3, [pc, #216]	@ (8002840 <bmi088_update+0x410>)
 8002768:	f7fd ff66 	bl	8000638 <__aeabi_dmul>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4614      	mov	r4, r2
 8002772:	461d      	mov	r5, r3
 8002774:	4b2f      	ldr	r3, [pc, #188]	@ (8002834 <bmi088_update+0x404>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	7e1b      	ldrb	r3, [r3, #24]
 800277a:	3301      	adds	r3, #1
 800277c:	ee07 3a90 	vmov	s15, r3
 8002780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002784:	ee17 0a90 	vmov	r0, s15
 8002788:	f7fd fefe 	bl	8000588 <__aeabi_f2d>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	ec43 2b11 	vmov	d1, r2, r3
 8002794:	ed9f 0b22 	vldr	d0, [pc, #136]	@ 8002820 <bmi088_update+0x3f0>
 8002798:	f00c fad8 	bl	800ed4c <pow>
 800279c:	ec53 2b10 	vmov	r2, r3, d0
 80027a0:	4620      	mov	r0, r4
 80027a2:	4629      	mov	r1, r5
 80027a4:	f7fd ff48 	bl	8000638 <__aeabi_dmul>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	a31d      	add	r3, pc, #116	@ (adr r3, 8002828 <bmi088_update+0x3f8>)
 80027b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b6:	f7fd ff3f 	bl	8000638 <__aeabi_dmul>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4610      	mov	r0, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	4b1d      	ldr	r3, [pc, #116]	@ (800283c <bmi088_update+0x40c>)
 80027c8:	f7fe f860 	bl	800088c <__aeabi_ddiv>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4918      	ldr	r1, [pc, #96]	@ (8002834 <bmi088_update+0x404>)
 80027d2:	680c      	ldr	r4, [r1, #0]
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	f7fe fa06 	bl	8000be8 <__aeabi_d2f>
 80027dc:	4603      	mov	r3, r0
 80027de:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc

			if(isStarded)
 80027e2:	4b18      	ldr	r3, [pc, #96]	@ (8002844 <bmi088_update+0x414>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d042      	beq.n	8002870 <bmi088_update+0x440>
			{
				BMI->deltaTime = BMI->currentTime - BMI->lastTime < 0 ? 0.0 : BMI->currentTime - BMI->lastTime;
 80027ea:	4b12      	ldr	r3, [pc, #72]	@ (8002834 <bmi088_update+0x404>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 80027f2:	4b10      	ldr	r3, [pc, #64]	@ (8002834 <bmi088_update+0x404>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 80027fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002806:	d521      	bpl.n	800284c <bmi088_update+0x41c>
 8002808:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8002848 <bmi088_update+0x418>
 800280c:	e028      	b.n	8002860 <bmi088_update+0x430>
 800280e:	bf00      	nop
 8002810:	00000000 	.word	0x00000000
 8002814:	40438800 	.word	0x40438800
 8002818:	00000000 	.word	0x00000000
 800281c:	412e8480 	.word	0x412e8480
 8002820:	00000000 	.word	0x00000000
 8002824:	40000000 	.word	0x40000000
 8002828:	51eb851f 	.word	0x51eb851f
 800282c:	40239eb8 	.word	0x40239eb8
 8002830:	40370000 	.word	0x40370000
 8002834:	20000254 	.word	0x20000254
 8002838:	40e00000 	.word	0x40e00000
 800283c:	408f4000 	.word	0x408f4000
 8002840:	3ff80000 	.word	0x3ff80000
 8002844:	20000259 	.word	0x20000259
 8002848:	00000000 	.word	0x00000000
 800284c:	4b07      	ldr	r3, [pc, #28]	@ (800286c <bmi088_update+0x43c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 8002854:	4b05      	ldr	r3, [pc, #20]	@ (800286c <bmi088_update+0x43c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 800285c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002860:	4b02      	ldr	r3, [pc, #8]	@ (800286c <bmi088_update+0x43c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
 8002868:	e008      	b.n	800287c <bmi088_update+0x44c>
 800286a:	bf00      	nop
 800286c:	20000254 	.word	0x20000254
			}
			else
			{
				isStarded++;
 8002870:	4bb0      	ldr	r3, [pc, #704]	@ (8002b34 <bmi088_update+0x704>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	3301      	adds	r3, #1
 8002876:	b2da      	uxtb	r2, r3
 8002878:	4bae      	ldr	r3, [pc, #696]	@ (8002b34 <bmi088_update+0x704>)
 800287a:	701a      	strb	r2, [r3, #0]
			}
				BMI->lastTime = BMI->currentTime;
 800287c:	4bae      	ldr	r3, [pc, #696]	@ (8002b38 <bmi088_update+0x708>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4bad      	ldr	r3, [pc, #692]	@ (8002b38 <bmi088_update+0x708>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8002888:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0


			BMI->rawDatas.isAccelUpdated = 0;
 800288c:	4baa      	ldr	r3, [pc, #680]	@ (8002b38 <bmi088_update+0x708>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2200      	movs	r2, #0
 8002892:	759a      	strb	r2, [r3, #22]
			isTimeUpdated = 1;
 8002894:	4ba9      	ldr	r3, [pc, #676]	@ (8002b3c <bmi088_update+0x70c>)
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->rawDatas.isGyroUpdated)
 800289a:	4ba7      	ldr	r3, [pc, #668]	@ (8002b38 <bmi088_update+0x708>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	7d5b      	ldrb	r3, [r3, #21]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8143 	beq.w	8002b2c <bmi088_update+0x6fc>
		{

				ret_val = HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.gyro, 6, 10);
 80028a6:	4ba6      	ldr	r3, [pc, #664]	@ (8002b40 <bmi088_update+0x710>)
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	4ba3      	ldr	r3, [pc, #652]	@ (8002b38 <bmi088_update+0x708>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	330f      	adds	r3, #15
 80028b0:	220a      	movs	r2, #10
 80028b2:	9202      	str	r2, [sp, #8]
 80028b4:	2206      	movs	r2, #6
 80028b6:	9201      	str	r2, [sp, #4]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2301      	movs	r3, #1
 80028bc:	2202      	movs	r2, #2
 80028be:	21d0      	movs	r1, #208	@ 0xd0
 80028c0:	f006 fa64 	bl	8008d8c <HAL_I2C_Mem_Read>
 80028c4:	4603      	mov	r3, r0
 80028c6:	75fb      	strb	r3, [r7, #23]
				if(ret_val)
 80028c8:	7dfb      	ldrb	r3, [r7, #23]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f040 812d 	bne.w	8002b2a <bmi088_update+0x6fa>
					return;
				int16_t gyro_z_16 = (BMI->rawDatas.gyro[5] << 8) | BMI->rawDatas.gyro[4];
 80028d0:	4b99      	ldr	r3, [pc, #612]	@ (8002b38 <bmi088_update+0x708>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	7d1b      	ldrb	r3, [r3, #20]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	b21a      	sxth	r2, r3
 80028da:	4b97      	ldr	r3, [pc, #604]	@ (8002b38 <bmi088_update+0x708>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	7cdb      	ldrb	r3, [r3, #19]
 80028e0:	b21b      	sxth	r3, r3
 80028e2:	4313      	orrs	r3, r2
 80028e4:	80bb      	strh	r3, [r7, #4]
				int16_t gyro_y_16 = (BMI->rawDatas.gyro[3] << 8) | BMI->rawDatas.gyro[2];
 80028e6:	4b94      	ldr	r3, [pc, #592]	@ (8002b38 <bmi088_update+0x708>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	7c9b      	ldrb	r3, [r3, #18]
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	b21a      	sxth	r2, r3
 80028f0:	4b91      	ldr	r3, [pc, #580]	@ (8002b38 <bmi088_update+0x708>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	7c5b      	ldrb	r3, [r3, #17]
 80028f6:	b21b      	sxth	r3, r3
 80028f8:	4313      	orrs	r3, r2
 80028fa:	807b      	strh	r3, [r7, #2]
				int16_t gyro_x_16 = (BMI->rawDatas.gyro[1] << 8) | BMI->rawDatas.gyro[0];
 80028fc:	4b8e      	ldr	r3, [pc, #568]	@ (8002b38 <bmi088_update+0x708>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	7c1b      	ldrb	r3, [r3, #16]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	b21a      	sxth	r2, r3
 8002906:	4b8c      	ldr	r3, [pc, #560]	@ (8002b38 <bmi088_update+0x708>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	7bdb      	ldrb	r3, [r3, #15]
 800290c:	b21b      	sxth	r3, r3
 800290e:	4313      	orrs	r3, r2
 8002910:	803b      	strh	r3, [r7, #0]

				// Doğrudan rad/s olarak al
				BMI->gyro_x = ((float)gyro_x_16 * BMI088_GYRO_LSB_TO_RADS) - BMI->offset_vals[0];
 8002912:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800291e:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8002b44 <bmi088_update+0x714>
 8002922:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002926:	ee17 0a90 	vmov	r0, s15
 800292a:	f7fd fe2d 	bl	8000588 <__aeabi_f2d>
 800292e:	4b82      	ldr	r3, [pc, #520]	@ (8002b38 <bmi088_update+0x708>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 8002936:	4c80      	ldr	r4, [pc, #512]	@ (8002b38 <bmi088_update+0x708>)
 8002938:	6824      	ldr	r4, [r4, #0]
 800293a:	f7fd fcc5 	bl	80002c8 <__aeabi_dsub>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	e9c4 2320 	strd	r2, r3, [r4, #128]	@ 0x80
				BMI->gyro_y = ((float)gyro_y_16 * BMI088_GYRO_LSB_TO_RADS) - BMI->offset_vals[1];
 8002946:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800294a:	ee07 3a90 	vmov	s15, r3
 800294e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002952:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8002b44 <bmi088_update+0x714>
 8002956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800295a:	ee17 0a90 	vmov	r0, s15
 800295e:	f7fd fe13 	bl	8000588 <__aeabi_f2d>
 8002962:	4b75      	ldr	r3, [pc, #468]	@ (8002b38 <bmi088_update+0x708>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	@ 0xf8
 800296a:	4c73      	ldr	r4, [pc, #460]	@ (8002b38 <bmi088_update+0x708>)
 800296c:	6824      	ldr	r4, [r4, #0]
 800296e:	f7fd fcab 	bl	80002c8 <__aeabi_dsub>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	e9c4 2322 	strd	r2, r3, [r4, #136]	@ 0x88
				BMI->gyro_z = ((float)gyro_z_16 * BMI088_GYRO_LSB_TO_RADS) - BMI->offset_vals[2];
 800297a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800297e:	ee07 3a90 	vmov	s15, r3
 8002982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002986:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8002b44 <bmi088_update+0x714>
 800298a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800298e:	ee17 0a90 	vmov	r0, s15
 8002992:	f7fd fdf9 	bl	8000588 <__aeabi_f2d>
 8002996:	4b68      	ldr	r3, [pc, #416]	@ (8002b38 <bmi088_update+0x708>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 800299e:	4c66      	ldr	r4, [pc, #408]	@ (8002b38 <bmi088_update+0x708>)
 80029a0:	6824      	ldr	r4, [r4, #0]
 80029a2:	f7fd fc91 	bl	80002c8 <__aeabi_dsub>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	e9c4 2324 	strd	r2, r3, [r4, #144]	@ 0x90

				Orientation_Update(BMI->gyro_x, BMI->gyro_y, BMI->gyro_z,BMI->acc_x,BMI->acc_y,BMI->acc_z, BMI->deltaTime);
 80029ae:	4b62      	ldr	r3, [pc, #392]	@ (8002b38 <bmi088_update+0x708>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	f7fe f915 	bl	8000be8 <__aeabi_d2f>
 80029be:	4604      	mov	r4, r0
 80029c0:	4b5d      	ldr	r3, [pc, #372]	@ (8002b38 <bmi088_update+0x708>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	f7fe f90c 	bl	8000be8 <__aeabi_d2f>
 80029d0:	4605      	mov	r5, r0
 80029d2:	4b59      	ldr	r3, [pc, #356]	@ (8002b38 <bmi088_update+0x708>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80029da:	4610      	mov	r0, r2
 80029dc:	4619      	mov	r1, r3
 80029de:	f7fe f903 	bl	8000be8 <__aeabi_d2f>
 80029e2:	4602      	mov	r2, r0
 80029e4:	4b54      	ldr	r3, [pc, #336]	@ (8002b38 <bmi088_update+0x708>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 80029ec:	4b52      	ldr	r3, [pc, #328]	@ (8002b38 <bmi088_update+0x708>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 80029f4:	4b50      	ldr	r3, [pc, #320]	@ (8002b38 <bmi088_update+0x708>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	edd3 6a31 	vldr	s13, [r3, #196]	@ 0xc4
 80029fc:	4b4e      	ldr	r3, [pc, #312]	@ (8002b38 <bmi088_update+0x708>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	ed93 6a35 	vldr	s12, [r3, #212]	@ 0xd4
 8002a04:	eeb0 3a46 	vmov.f32	s6, s12
 8002a08:	eef0 2a66 	vmov.f32	s5, s13
 8002a0c:	eeb0 2a47 	vmov.f32	s4, s14
 8002a10:	eef0 1a67 	vmov.f32	s3, s15
 8002a14:	ee01 2a10 	vmov	s2, r2
 8002a18:	ee00 5a90 	vmov	s1, r5
 8002a1c:	ee00 4a10 	vmov	s0, r4
 8002a20:	f002 fea0 	bl	8005764 <Orientation_Update>
				BMI->yaw = quaternionToYaw();
 8002a24:	4b44      	ldr	r3, [pc, #272]	@ (8002b38 <bmi088_update+0x708>)
 8002a26:	681c      	ldr	r4, [r3, #0]
 8002a28:	f003 fbf0 	bl	800620c <quaternionToYaw>
 8002a2c:	eef0 7a40 	vmov.f32	s15, s0
 8002a30:	edc4 7a26 	vstr	s15, [r4, #152]	@ 0x98
				BMI->pitch = quaternionToPitch();
 8002a34:	4b40      	ldr	r3, [pc, #256]	@ (8002b38 <bmi088_update+0x708>)
 8002a36:	681c      	ldr	r4, [r3, #0]
 8002a38:	f003 fc46 	bl	80062c8 <quaternionToPitch>
 8002a3c:	eef0 7a40 	vmov.f32	s15, s0
 8002a40:	edc4 7a27 	vstr	s15, [r4, #156]	@ 0x9c
				BMI->roll = quaternionToRoll();
 8002a44:	4b3c      	ldr	r3, [pc, #240]	@ (8002b38 <bmi088_update+0x708>)
 8002a46:	681c      	ldr	r4, [r3, #0]
 8002a48:	f003 fc76 	bl	8006338 <quaternionToRoll>
 8002a4c:	eef0 7a40 	vmov.f32	s15, s0
 8002a50:	edc4 7a28 	vstr	s15, [r4, #160]	@ 0xa0
				BMI->angleZ = quaternionToYawDegree();
 8002a54:	4b38      	ldr	r3, [pc, #224]	@ (8002b38 <bmi088_update+0x708>)
 8002a56:	681c      	ldr	r4, [r3, #0]
 8002a58:	f003 faf8 	bl	800604c <quaternionToYawDegree>
 8002a5c:	eef0 7a40 	vmov.f32	s15, s0
 8002a60:	edc4 7a39 	vstr	s15, [r4, #228]	@ 0xe4
				BMI->angleY = quaternionToPitchDegree();
 8002a64:	4b34      	ldr	r3, [pc, #208]	@ (8002b38 <bmi088_update+0x708>)
 8002a66:	681c      	ldr	r4, [r3, #0]
 8002a68:	f003 fb38 	bl	80060dc <quaternionToPitchDegree>
 8002a6c:	eef0 7a40 	vmov.f32	s15, s0
 8002a70:	edc4 7a3a 	vstr	s15, [r4, #232]	@ 0xe8
				BMI->angleX = quaternionToRollDegree();
 8002a74:	4b30      	ldr	r3, [pc, #192]	@ (8002b38 <bmi088_update+0x708>)
 8002a76:	681c      	ldr	r4, [r3, #0]
 8002a78:	f003 fb80 	bl	800617c <quaternionToRollDegree>
 8002a7c:	eef0 7a40 	vmov.f32	s15, s0
 8002a80:	edc4 7a3b 	vstr	s15, [r4, #236]	@ 0xec

				ekf_predict(BMI->gyro_x,BMI->gyro_y,BMI->gyro_z,BMI->deltaTime);
 8002a84:	4b2c      	ldr	r3, [pc, #176]	@ (8002b38 <bmi088_update+0x708>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f7fe f8aa 	bl	8000be8 <__aeabi_d2f>
 8002a94:	4604      	mov	r4, r0
 8002a96:	4b28      	ldr	r3, [pc, #160]	@ (8002b38 <bmi088_update+0x708>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f7fe f8a1 	bl	8000be8 <__aeabi_d2f>
 8002aa6:	4605      	mov	r5, r0
 8002aa8:	4b23      	ldr	r3, [pc, #140]	@ (8002b38 <bmi088_update+0x708>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f7fe f898 	bl	8000be8 <__aeabi_d2f>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4b1f      	ldr	r3, [pc, #124]	@ (8002b38 <bmi088_update+0x708>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	edd3 7a35 	vldr	s15, [r3, #212]	@ 0xd4
 8002ac2:	eef0 1a67 	vmov.f32	s3, s15
 8002ac6:	ee01 2a10 	vmov	s2, r2
 8002aca:	ee00 5a90 	vmov	s1, r5
 8002ace:	ee00 4a10 	vmov	s0, r4
 8002ad2:	f002 fa61 	bl	8004f98 <ekf_predict>
				BMI->yaw1 = quaternionToYaw1();
 8002ad6:	4b18      	ldr	r3, [pc, #96]	@ (8002b38 <bmi088_update+0x708>)
 8002ad8:	681c      	ldr	r4, [r3, #0]
 8002ada:	f002 fb83 	bl	80051e4 <quaternionToYaw1>
 8002ade:	eef0 7a40 	vmov.f32	s15, s0
 8002ae2:	edc4 7a29 	vstr	s15, [r4, #164]	@ 0xa4
				BMI->pitch1 = quaternionToPitch1();
 8002ae6:	4b14      	ldr	r3, [pc, #80]	@ (8002b38 <bmi088_update+0x708>)
 8002ae8:	681c      	ldr	r4, [r3, #0]
 8002aea:	f002 fbd9 	bl	80052a0 <quaternionToPitch1>
 8002aee:	eef0 7a40 	vmov.f32	s15, s0
 8002af2:	edc4 7a2a 	vstr	s15, [r4, #168]	@ 0xa8
				BMI->roll1 = quaternionToRoll1();
 8002af6:	4b10      	ldr	r3, [pc, #64]	@ (8002b38 <bmi088_update+0x708>)
 8002af8:	681c      	ldr	r4, [r3, #0]
 8002afa:	f002 fc09 	bl	8005310 <quaternionToRoll1>
 8002afe:	eef0 7a40 	vmov.f32	s15, s0
 8002b02:	edc4 7a2b 	vstr	s15, [r4, #172]	@ 0xac
				BMI->isUpdated = 1;
 8002b06:	4b0c      	ldr	r3, [pc, #48]	@ (8002b38 <bmi088_update+0x708>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

				/*ekf_update(BMI->acc_x, BMI->acc_y, BMI->acc_z);
				BMI->angle = ekf_getTheta();*/
				is_gyro_offset = 1;
 8002b10:	4b0d      	ldr	r3, [pc, #52]	@ (8002b48 <bmi088_update+0x718>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	701a      	strb	r2, [r3, #0]

			BMI->rawDatas.isGyroUpdated = 0;
 8002b16:	4b08      	ldr	r3, [pc, #32]	@ (8002b38 <bmi088_update+0x708>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	755a      	strb	r2, [r3, #21]
			isTimeUpdated = 0;
 8002b1e:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <bmi088_update+0x70c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
 8002b24:	e002      	b.n	8002b2c <bmi088_update+0x6fc>
				return;
 8002b26:	bf00      	nop
 8002b28:	e000      	b.n	8002b2c <bmi088_update+0x6fc>
					return;
 8002b2a:	bf00      	nop
		}


}
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bdb0      	pop	{r4, r5, r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000259 	.word	0x20000259
 8002b38:	20000254 	.word	0x20000254
 8002b3c:	20000258 	.word	0x20000258
 8002b40:	20000250 	.word	0x20000250
 8002b44:	3a8b8bbf 	.word	0x3a8b8bbf
 8002b48:	2000025a 	.word	0x2000025a

08002b4c <bmi088_getAccelDatas_INT>:


void bmi088_getAccelDatas_INT()
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
	BMI->rawDatas.isAccelUpdated = 1;
 8002b50:	4b04      	ldr	r3, [pc, #16]	@ (8002b64 <bmi088_getAccelDatas_INT+0x18>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2201      	movs	r2, #1
 8002b56:	759a      	strb	r2, [r3, #22]
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20000254 	.word	0x20000254

08002b68 <bmi088_getGyroDatas_INT>:

void bmi088_getGyroDatas_INT()
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
	BMI->rawDatas.isGyroUpdated = 1;
 8002b6c:	4b04      	ldr	r3, [pc, #16]	@ (8002b80 <bmi088_getGyroDatas_INT+0x18>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2201      	movs	r2, #1
 8002b72:	755a      	strb	r2, [r3, #21]
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20000254 	.word	0x20000254

08002b84 <getOffset>:
	HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void getOffset()
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
	static int offsetCounter = 0;

	while(1)
	{
		bmi088_update();
 8002b88:	f7ff fc52 	bl	8002430 <bmi088_update>
		if(is_gyro_offset == 1)
 8002b8c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c84 <getOffset+0x100>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d1f9      	bne.n	8002b88 <getOffset+0x4>
		{
			if(offsetCounter < 1000){
 8002b94:	4b3c      	ldr	r3, [pc, #240]	@ (8002c88 <getOffset+0x104>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b9c:	da32      	bge.n	8002c04 <getOffset+0x80>
					 g[0][0] += BMI->gyro_x;
 8002b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c8c <getOffset+0x108>)
 8002ba0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ba4:	4b3a      	ldr	r3, [pc, #232]	@ (8002c90 <getOffset+0x10c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8002bac:	f7fd fb8e 	bl	80002cc <__adddf3>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4935      	ldr	r1, [pc, #212]	@ (8002c8c <getOffset+0x108>)
 8002bb6:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] += BMI->gyro_y;
 8002bba:	4b34      	ldr	r3, [pc, #208]	@ (8002c8c <getOffset+0x108>)
 8002bbc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002bc0:	4b33      	ldr	r3, [pc, #204]	@ (8002c90 <getOffset+0x10c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002bc8:	f7fd fb80 	bl	80002cc <__adddf3>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	492e      	ldr	r1, [pc, #184]	@ (8002c8c <getOffset+0x108>)
 8002bd2:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] += BMI->gyro_z;
 8002bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c8c <getOffset+0x108>)
 8002bd8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8002c90 <getOffset+0x10c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002be4:	f7fd fb72 	bl	80002cc <__adddf3>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4927      	ldr	r1, [pc, #156]	@ (8002c8c <getOffset+0x108>)
 8002bee:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 offsetCounter++;
 8002bf2:	4b25      	ldr	r3, [pc, #148]	@ (8002c88 <getOffset+0x104>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	4a23      	ldr	r2, [pc, #140]	@ (8002c88 <getOffset+0x104>)
 8002bfa:	6013      	str	r3, [r2, #0]
					 BMI->offset_vals[1] = g[0][1];
					 BMI->offset_vals[2] = g[0][2];
					 break;
					 //Error_Handler();
				 }
			is_gyro_offset = 0;
 8002bfc:	4b21      	ldr	r3, [pc, #132]	@ (8002c84 <getOffset+0x100>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	e7c1      	b.n	8002b88 <getOffset+0x4>
					 g[0][0] /= 1000.0;
 8002c04:	4b21      	ldr	r3, [pc, #132]	@ (8002c8c <getOffset+0x108>)
 8002c06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	4b21      	ldr	r3, [pc, #132]	@ (8002c94 <getOffset+0x110>)
 8002c10:	f7fd fe3c 	bl	800088c <__aeabi_ddiv>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	491c      	ldr	r1, [pc, #112]	@ (8002c8c <getOffset+0x108>)
 8002c1a:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] /= 1000.0;
 8002c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c8c <getOffset+0x108>)
 8002c20:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	4b1a      	ldr	r3, [pc, #104]	@ (8002c94 <getOffset+0x110>)
 8002c2a:	f7fd fe2f 	bl	800088c <__aeabi_ddiv>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4916      	ldr	r1, [pc, #88]	@ (8002c8c <getOffset+0x108>)
 8002c34:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] /= 1000.0;
 8002c38:	4b14      	ldr	r3, [pc, #80]	@ (8002c8c <getOffset+0x108>)
 8002c3a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	4b14      	ldr	r3, [pc, #80]	@ (8002c94 <getOffset+0x110>)
 8002c44:	f7fd fe22 	bl	800088c <__aeabi_ddiv>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	490f      	ldr	r1, [pc, #60]	@ (8002c8c <getOffset+0x108>)
 8002c4e:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 BMI->offset_vals[0] = g[0][0];
 8002c52:	4b0f      	ldr	r3, [pc, #60]	@ (8002c90 <getOffset+0x10c>)
 8002c54:	6819      	ldr	r1, [r3, #0]
 8002c56:	4b0d      	ldr	r3, [pc, #52]	@ (8002c8c <getOffset+0x108>)
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
					 BMI->offset_vals[1] = g[0][1];
 8002c60:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <getOffset+0x10c>)
 8002c62:	6819      	ldr	r1, [r3, #0]
 8002c64:	4b09      	ldr	r3, [pc, #36]	@ (8002c8c <getOffset+0x108>)
 8002c66:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c6a:	e9c1 233e 	strd	r2, r3, [r1, #248]	@ 0xf8
					 BMI->offset_vals[2] = g[0][2];
 8002c6e:	4b08      	ldr	r3, [pc, #32]	@ (8002c90 <getOffset+0x10c>)
 8002c70:	6819      	ldr	r1, [r3, #0]
 8002c72:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <getOffset+0x108>)
 8002c74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c78:	e9c1 2340 	strd	r2, r3, [r1, #256]	@ 0x100
					 break;
 8002c7c:	bf00      	nop
		}

	}
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	2000025a 	.word	0x2000025a
 8002c88:	20000290 	.word	0x20000290
 8002c8c:	20000260 	.word	0x20000260
 8002c90:	20000254 	.word	0x20000254
 8002c94:	408f4000 	.word	0x408f4000

08002c98 <flight_algorithm_init>:

/**
 * @brief Initialize the flight algorithm
 */
void flight_algorithm_init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
    flight_algorithm_reset();
 8002c9c:	f000 f802 	bl	8002ca4 <flight_algorithm_reset>
}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <flight_algorithm_reset>:

/**
 * @brief Reset flight algorithm to initial state
 */
void flight_algorithm_reset(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
    current_phase = PHASE_IDLE;
 8002ca8:	4b18      	ldr	r3, [pc, #96]	@ (8002d0c <flight_algorithm_reset+0x68>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
    is_rising = 0;
 8002cae:	4b18      	ldr	r3, [pc, #96]	@ (8002d10 <flight_algorithm_reset+0x6c>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
    is_stabilized = 1;
 8002cb4:	4b17      	ldr	r3, [pc, #92]	@ (8002d14 <flight_algorithm_reset+0x70>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
    is_armed = 0;
 8002cba:	4b17      	ldr	r3, [pc, #92]	@ (8002d18 <flight_algorithm_reset+0x74>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
    drogue_deployed = 0;
 8002cc0:	4b16      	ldr	r3, [pc, #88]	@ (8002d1c <flight_algorithm_reset+0x78>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
    main_deployed = 0;
 8002cc6:	4b16      	ldr	r3, [pc, #88]	@ (8002d20 <flight_algorithm_reset+0x7c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
    altitude_decrease_count = 0;
 8002ccc:	4b15      	ldr	r3, [pc, #84]	@ (8002d24 <flight_algorithm_reset+0x80>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
    status_bits = 0;
 8002cd2:	4b15      	ldr	r3, [pc, #84]	@ (8002d28 <flight_algorithm_reset+0x84>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	801a      	strh	r2, [r3, #0]
    prev_altitude = 0.0f;
 8002cd8:	4b14      	ldr	r3, [pc, #80]	@ (8002d2c <flight_algorithm_reset+0x88>)
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
    flight_start_time = 0;
 8002ce0:	4b13      	ldr	r3, [pc, #76]	@ (8002d30 <flight_algorithm_reset+0x8c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
    deployed_velocity = 1;
 8002ce6:	4b13      	ldr	r3, [pc, #76]	@ (8002d34 <flight_algorithm_reset+0x90>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	701a      	strb	r2, [r3, #0]
    deployed_angle = 1;
 8002cec:	4b12      	ldr	r3, [pc, #72]	@ (8002d38 <flight_algorithm_reset+0x94>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
    apogee_counter = 0;
 8002cf2:	4b12      	ldr	r3, [pc, #72]	@ (8002d3c <flight_algorithm_reset+0x98>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
    prev_velocity = 0;
 8002cf8:	4b11      	ldr	r3, [pc, #68]	@ (8002d40 <flight_algorithm_reset+0x9c>)
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000294 	.word	0x20000294
 8002d10:	20000295 	.word	0x20000295
 8002d14:	20000014 	.word	0x20000014
 8002d18:	20000296 	.word	0x20000296
 8002d1c:	20000297 	.word	0x20000297
 8002d20:	20000298 	.word	0x20000298
 8002d24:	200002a8 	.word	0x200002a8
 8002d28:	200002b0 	.word	0x200002b0
 8002d2c:	200002ac 	.word	0x200002ac
 8002d30:	200002a4 	.word	0x200002a4
 8002d34:	20000016 	.word	0x20000016
 8002d38:	20000015 	.word	0x20000015
 8002d3c:	2000029c 	.word	0x2000029c
 8002d40:	200002a0 	.word	0x200002a0

08002d44 <flight_algorithm_update>:

/**
 * @brief Update flight algorithm with sensor data
 */
void flight_algorithm_update(BME_280_t* bme, bmi088_struct_t* bmi, sensor_fusion_t* sensor_fusion)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
    // Calculate key metrics
    float total_acceleration = calculate_total_acceleration(bmi);
 8002d50:	68b8      	ldr	r0, [r7, #8]
 8002d52:	f000 f91d 	bl	8002f90 <calculate_total_acceleration>
 8002d56:	ed87 0a05 	vstr	s0, [r7, #20]
    float theta = sensor_fusion->angle; // Use sensor fusion output
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	613b      	str	r3, [r7, #16]

    // Status bits are cumulative - once set they remain set
    // Each phase builds on the previous phase's status bits

    // State machine for flight phases
    switch (current_phase) {
 8002d60:	4b7a      	ldr	r3, [pc, #488]	@ (8002f4c <flight_algorithm_update+0x208>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	f200 80e9 	bhi.w	8002f3c <flight_algorithm_update+0x1f8>
 8002d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d70 <flight_algorithm_update+0x2c>)
 8002d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d70:	08002d85 	.word	0x08002d85
 8002d74:	08002dc1 	.word	0x08002dc1
 8002d78:	08002df3 	.word	0x08002df3
 8002d7c:	08002f3d 	.word	0x08002f3d
 8002d80:	08002f3d 	.word	0x08002f3d
        case PHASE_IDLE:
            // Detect launch using acceleration threshold
            if (total_acceleration > launch_accel_threshold) {
 8002d84:	4b72      	ldr	r3, [pc, #456]	@ (8002f50 <flight_algorithm_update+0x20c>)
 8002d86:	edd3 7a00 	vldr	s15, [r3]
 8002d8a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d96:	dc00      	bgt.n	8002d9a <flight_algorithm_update+0x56>
                current_phase = PHASE_BOOST;
                is_rising = 1;
                flight_start_time = HAL_GetTick();
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
            }
            break;
 8002d98:	e0d0      	b.n	8002f3c <flight_algorithm_update+0x1f8>
                current_phase = PHASE_BOOST;
 8002d9a:	4b6c      	ldr	r3, [pc, #432]	@ (8002f4c <flight_algorithm_update+0x208>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
                is_rising = 1;
 8002da0:	4b6c      	ldr	r3, [pc, #432]	@ (8002f54 <flight_algorithm_update+0x210>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
                flight_start_time = HAL_GetTick();
 8002da6:	f004 fd53 	bl	8007850 <HAL_GetTick>
 8002daa:	4603      	mov	r3, r0
 8002dac:	4a6a      	ldr	r2, [pc, #424]	@ (8002f58 <flight_algorithm_update+0x214>)
 8002dae:	6013      	str	r3, [r2, #0]
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
 8002db0:	4b6a      	ldr	r3, [pc, #424]	@ (8002f5c <flight_algorithm_update+0x218>)
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	4b68      	ldr	r3, [pc, #416]	@ (8002f5c <flight_algorithm_update+0x218>)
 8002dbc:	801a      	strh	r2, [r3, #0]
            break;
 8002dbe:	e0bd      	b.n	8002f3c <flight_algorithm_update+0x1f8>

        case PHASE_BOOST:
            // After boost phase (typically 3-5 seconds)
            if (HAL_GetTick() - flight_start_time > 7000) {
 8002dc0:	f004 fd46 	bl	8007850 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	4b64      	ldr	r3, [pc, #400]	@ (8002f58 <flight_algorithm_update+0x214>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	f240 80b0 	bls.w	8002f36 <flight_algorithm_update+0x1f2>
                current_phase = PHASE_COAST;
 8002dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f4c <flight_algorithm_update+0x208>)
 8002dd8:	2202      	movs	r2, #2
 8002dda:	701a      	strb	r2, [r3, #0]
                is_stabilized = 1;
 8002ddc:	4b60      	ldr	r3, [pc, #384]	@ (8002f60 <flight_algorithm_update+0x21c>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0002; // Set Bit 1: Motor burn prevention period ended
 8002de2:	4b5e      	ldr	r3, [pc, #376]	@ (8002f5c <flight_algorithm_update+0x218>)
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	f043 0302 	orr.w	r3, r3, #2
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	4b5b      	ldr	r3, [pc, #364]	@ (8002f5c <flight_algorithm_update+0x218>)
 8002dee:	801a      	strh	r2, [r3, #0]
            }
            break;
 8002df0:	e0a1      	b.n	8002f36 <flight_algorithm_update+0x1f2>

        case PHASE_COAST:
            // Check minimum arming altitude
            if (!is_armed && bme->altitude > min_arming_altitude) {
 8002df2:	4b5c      	ldr	r3, [pc, #368]	@ (8002f64 <flight_algorithm_update+0x220>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d114      	bne.n	8002e24 <flight_algorithm_update+0xe0>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	ed93 7a08 	vldr	s14, [r3, #32]
 8002e00:	4b59      	ldr	r3, [pc, #356]	@ (8002f68 <flight_algorithm_update+0x224>)
 8002e02:	edd3 7a00 	vldr	s15, [r3]
 8002e06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0e:	dd09      	ble.n	8002e24 <flight_algorithm_update+0xe0>
                is_armed = 1;
 8002e10:	4b54      	ldr	r3, [pc, #336]	@ (8002f64 <flight_algorithm_update+0x220>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0004; // Set Bit 2: Minimum altitude threshold exceeded
 8002e16:	4b51      	ldr	r3, [pc, #324]	@ (8002f5c <flight_algorithm_update+0x218>)
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	f043 0304 	orr.w	r3, r3, #4
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	4b4e      	ldr	r3, [pc, #312]	@ (8002f5c <flight_algorithm_update+0x218>)
 8002e22:	801a      	strh	r2, [r3, #0]
            }

            // Check if angle exceeds threshold
            if (is_armed && (fabs(bmi->angleY) > max_angle_threshold) && deployed_angle) {
 8002e24:	4b4f      	ldr	r3, [pc, #316]	@ (8002f64 <flight_algorithm_update+0x220>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d01d      	beq.n	8002e68 <flight_algorithm_update+0x124>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 8002e32:	eeb0 7ae7 	vabs.f32	s14, s15
 8002e36:	4b4d      	ldr	r3, [pc, #308]	@ (8002f6c <flight_algorithm_update+0x228>)
 8002e38:	edd3 7a00 	vldr	s15, [r3]
 8002e3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e44:	dd10      	ble.n	8002e68 <flight_algorithm_update+0x124>
 8002e46:	4b4a      	ldr	r3, [pc, #296]	@ (8002f70 <flight_algorithm_update+0x22c>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00c      	beq.n	8002e68 <flight_algorithm_update+0x124>
            	drogue_deployed = 1;
 8002e4e:	4b49      	ldr	r3, [pc, #292]	@ (8002f74 <flight_algorithm_update+0x230>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	701a      	strb	r2, [r3, #0]
            	deployed_angle = 0;
 8002e54:	4b46      	ldr	r3, [pc, #280]	@ (8002f70 <flight_algorithm_update+0x22c>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0008; // Set Bit 3: Rocket body angle exceeds threshold
 8002e5a:	4b40      	ldr	r3, [pc, #256]	@ (8002f5c <flight_algorithm_update+0x218>)
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	f043 0308 	orr.w	r3, r3, #8
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	4b3d      	ldr	r3, [pc, #244]	@ (8002f5c <flight_algorithm_update+0x218>)
 8002e66:	801a      	strh	r2, [r3, #0]
				drogue_deployed = 1;
				deployed_velocity = 0;
				// deploy_drogue_parachute(); // Actual deployment command
            }*/

            if (is_armed && sensor_fusion->velocity < 0.0f && sensor_fusion->velocity < prev_velocity && deployed_velocity) {
 8002e68:	4b3e      	ldr	r3, [pc, #248]	@ (8002f64 <flight_algorithm_update+0x220>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d034      	beq.n	8002eda <flight_algorithm_update+0x196>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7e:	d52c      	bpl.n	8002eda <flight_algorithm_update+0x196>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e86:	4b3c      	ldr	r3, [pc, #240]	@ (8002f78 <flight_algorithm_update+0x234>)
 8002e88:	edd3 7a00 	vldr	s15, [r3]
 8002e8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e94:	d521      	bpl.n	8002eda <flight_algorithm_update+0x196>
 8002e96:	4b39      	ldr	r3, [pc, #228]	@ (8002f7c <flight_algorithm_update+0x238>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01d      	beq.n	8002eda <flight_algorithm_update+0x196>
				apogee_counter++;
 8002e9e:	4b38      	ldr	r3, [pc, #224]	@ (8002f80 <flight_algorithm_update+0x23c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	4a36      	ldr	r2, [pc, #216]	@ (8002f80 <flight_algorithm_update+0x23c>)
 8002ea6:	6013      	str	r3, [r2, #0]
				if (apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8002ea8:	4b35      	ldr	r3, [pc, #212]	@ (8002f80 <flight_algorithm_update+0x23c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	dd17      	ble.n	8002ee0 <flight_algorithm_update+0x19c>
					status_bits |= 0x0010; // Set Bit 4: Rocket altitude started decreasing
 8002eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8002f5c <flight_algorithm_update+0x218>)
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	f043 0310 	orr.w	r3, r3, #16
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	4b28      	ldr	r3, [pc, #160]	@ (8002f5c <flight_algorithm_update+0x218>)
 8002ebc:	801a      	strh	r2, [r3, #0]
					status_bits |= 0x0020; // Set Bit 5: Drag parachute deployment command generated
 8002ebe:	4b27      	ldr	r3, [pc, #156]	@ (8002f5c <flight_algorithm_update+0x218>)
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	f043 0320 	orr.w	r3, r3, #32
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	4b24      	ldr	r3, [pc, #144]	@ (8002f5c <flight_algorithm_update+0x218>)
 8002eca:	801a      	strh	r2, [r3, #0]
					drogue_deployed = 1;
 8002ecc:	4b29      	ldr	r3, [pc, #164]	@ (8002f74 <flight_algorithm_update+0x230>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
					deployed_velocity = 0;
 8002ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8002f7c <flight_algorithm_update+0x238>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
				if (apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8002ed8:	e002      	b.n	8002ee0 <flight_algorithm_update+0x19c>
				}
			} else {
				apogee_counter = 0;
 8002eda:	4b29      	ldr	r3, [pc, #164]	@ (8002f80 <flight_algorithm_update+0x23c>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
			}
			prev_velocity = sensor_fusion->velocity;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4a24      	ldr	r2, [pc, #144]	@ (8002f78 <flight_algorithm_update+0x234>)
 8002ee6:	6013      	str	r3, [r2, #0]

            // Deploy main parachute at designated altitude
            if (drogue_deployed && bme->altitude < 500.0) {
 8002ee8:	4b22      	ldr	r3, [pc, #136]	@ (8002f74 <flight_algorithm_update+0x230>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d024      	beq.n	8002f3a <flight_algorithm_update+0x1f6>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ef6:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8002f84 <flight_algorithm_update+0x240>
 8002efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f02:	d400      	bmi.n	8002f06 <flight_algorithm_update+0x1c2>
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
                main_deployed = 1;
                drogue_deployed = 0;
                // deploy_main_parachute(); // Actual deployment command
            }
            break;
 8002f04:	e019      	b.n	8002f3a <flight_algorithm_update+0x1f6>
                current_phase = PHASE_MAIN_DESCENT;
 8002f06:	4b11      	ldr	r3, [pc, #68]	@ (8002f4c <flight_algorithm_update+0x208>)
 8002f08:	2203      	movs	r2, #3
 8002f0a:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0040; // Set Bit 6: Rocket altitude below specified altitude
 8002f0c:	4b13      	ldr	r3, [pc, #76]	@ (8002f5c <flight_algorithm_update+0x218>)
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	4b11      	ldr	r3, [pc, #68]	@ (8002f5c <flight_algorithm_update+0x218>)
 8002f18:	801a      	strh	r2, [r3, #0]
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
 8002f1a:	4b10      	ldr	r3, [pc, #64]	@ (8002f5c <flight_algorithm_update+0x218>)
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	4b0d      	ldr	r3, [pc, #52]	@ (8002f5c <flight_algorithm_update+0x218>)
 8002f26:	801a      	strh	r2, [r3, #0]
                main_deployed = 1;
 8002f28:	4b17      	ldr	r3, [pc, #92]	@ (8002f88 <flight_algorithm_update+0x244>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
                drogue_deployed = 0;
 8002f2e:	4b11      	ldr	r3, [pc, #68]	@ (8002f74 <flight_algorithm_update+0x230>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
            break;
 8002f34:	e001      	b.n	8002f3a <flight_algorithm_update+0x1f6>
            break;
 8002f36:	bf00      	nop
 8002f38:	e000      	b.n	8002f3c <flight_algorithm_update+0x1f8>
            break;
 8002f3a:	bf00      	nop
        case PHASE_LANDED:
            // No additional status bits to set after landing
            break;
    }

    prev_altitude = bme->altitude;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	4a12      	ldr	r2, [pc, #72]	@ (8002f8c <flight_algorithm_update+0x248>)
 8002f42:	6013      	str	r3, [r2, #0]
}
 8002f44:	bf00      	nop
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000294 	.word	0x20000294
 8002f50:	20000004 	.word	0x20000004
 8002f54:	20000295 	.word	0x20000295
 8002f58:	200002a4 	.word	0x200002a4
 8002f5c:	200002b0 	.word	0x200002b0
 8002f60:	20000014 	.word	0x20000014
 8002f64:	20000296 	.word	0x20000296
 8002f68:	20000008 	.word	0x20000008
 8002f6c:	20000010 	.word	0x20000010
 8002f70:	20000015 	.word	0x20000015
 8002f74:	20000297 	.word	0x20000297
 8002f78:	200002a0 	.word	0x200002a0
 8002f7c:	20000016 	.word	0x20000016
 8002f80:	2000029c 	.word	0x2000029c
 8002f84:	43fa0000 	.word	0x43fa0000
 8002f88:	20000298 	.word	0x20000298
 8002f8c:	200002ac 	.word	0x200002ac

08002f90 <calculate_total_acceleration>:

/**
 * @brief Calculate total acceleration magnitude
 */
static float calculate_total_acceleration(bmi088_struct_t* bmi)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
    return sqrtf((bmi->acc_x * bmi->acc_x) +
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	ed93 7a2f 	vldr	s14, [r3, #188]	@ 0xbc
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8002fa4:	ee27 7a27 	vmul.f32	s14, s14, s15
                 (bmi->acc_y * bmi->acc_y) +
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	edd3 6a30 	vldr	s13, [r3, #192]	@ 0xc0
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8002fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->acc_x * bmi->acc_x) +
 8002fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
                 (bmi->acc_z * bmi->acc_z));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	edd3 6a31 	vldr	s13, [r3, #196]	@ 0xc4
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 8002fc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->acc_x * bmi->acc_x) +
 8002fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd4:	f00c f806 	bl	800efe4 <sqrtf>
 8002fd8:	eef0 7a40 	vmov.f32	s15, s0
}
 8002fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <flight_algorithm_get_status_bits>:

/**
 * @brief Get the current status bits
 */
uint16_t flight_algorithm_get_status_bits(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
    return status_bits;
 8002fec:	4b03      	ldr	r3, [pc, #12]	@ (8002ffc <flight_algorithm_get_status_bits+0x14>)
 8002fee:	881b      	ldrh	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	200002b0 	.word	0x200002b0

08003000 <flight_algorithm_set_parameters>:
 */
void flight_algorithm_set_parameters(float launch_accel_threshold_param,
                                   float min_arming_altitude_param,
                                   float main_chute_altitude_param,
                                   float max_angle_threshold_param)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	ed87 0a03 	vstr	s0, [r7, #12]
 800300a:	edc7 0a02 	vstr	s1, [r7, #8]
 800300e:	ed87 1a01 	vstr	s2, [r7, #4]
 8003012:	edc7 1a00 	vstr	s3, [r7]
    launch_accel_threshold = launch_accel_threshold_param;
 8003016:	4a09      	ldr	r2, [pc, #36]	@ (800303c <flight_algorithm_set_parameters+0x3c>)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6013      	str	r3, [r2, #0]
    min_arming_altitude = min_arming_altitude_param;
 800301c:	4a08      	ldr	r2, [pc, #32]	@ (8003040 <flight_algorithm_set_parameters+0x40>)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	6013      	str	r3, [r2, #0]
    main_chute_altitude = main_chute_altitude_param;
 8003022:	4a08      	ldr	r2, [pc, #32]	@ (8003044 <flight_algorithm_set_parameters+0x44>)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6013      	str	r3, [r2, #0]
    max_angle_threshold = max_angle_threshold_param;
 8003028:	4a07      	ldr	r2, [pc, #28]	@ (8003048 <flight_algorithm_set_parameters+0x48>)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	6013      	str	r3, [r2, #0]
}
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20000004 	.word	0x20000004
 8003040:	20000008 	.word	0x20000008
 8003044:	2000000c 	.word	0x2000000c
 8003048:	20000010 	.word	0x20000010

0800304c <flight_algorithm_get_start_time>:
/**
 * @brief Get flight start time in milliseconds
 * @return Flight start time from HAL_GetTick(), or 0 if flight hasn't started
 */
uint32_t flight_algorithm_get_start_time(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
    return flight_start_time;
 8003050:	4b03      	ldr	r3, [pc, #12]	@ (8003060 <flight_algorithm_get_start_time+0x14>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	200002a4 	.word	0x200002a4

08003064 <KalmanFilter_Init>:

/**
 * @brief Initialize the Kalman filter
 * @param kf Pointer to Kalman filter structure
 */
void KalmanFilter_Init(KalmanFilter_t *kf) {
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
    // Initialize state vector
    kf->x[0] = 0.0f;  // Altitude
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
    kf->x[1] = 0.0f;  // Velocity
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	605a      	str	r2, [r3, #4]
    kf->x[2] = 0.0f;  // Acceleration
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	609a      	str	r2, [r3, #8]

    // Initialize covariance matrix with initial uncertainty
    for (int i = 0; i < 3; i++) {
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	e01f      	b.n	80030ca <KalmanFilter_Init+0x66>
        for (int j = 0; j < 3; j++) {
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	e016      	b.n	80030be <KalmanFilter_Init+0x5a>
            kf->P[i][j] = (i == j) ? 100.0f : 0.0f;
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	429a      	cmp	r2, r3
 8003096:	d101      	bne.n	800309c <KalmanFilter_Init+0x38>
 8003098:	491b      	ldr	r1, [pc, #108]	@ (8003108 <KalmanFilter_Init+0xa4>)
 800309a:	e001      	b.n	80030a0 <KalmanFilter_Init+0x3c>
 800309c:	f04f 0100 	mov.w	r1, #0
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4613      	mov	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	4413      	add	r3, r2
 80030ae:	3302      	adds	r3, #2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4403      	add	r3, r0
 80030b4:	3304      	adds	r3, #4
 80030b6:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 3; j++) {
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	3301      	adds	r3, #1
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	dde5      	ble.n	8003090 <KalmanFilter_Init+0x2c>
    for (int i = 0; i < 3; i++) {
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3301      	adds	r3, #1
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	dddc      	ble.n	800308a <KalmanFilter_Init+0x26>
        }
    }

    // Set noise parameters - these can be tuned
    kf->process_noise = 0.01f;         // Process noise
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a0e      	ldr	r2, [pc, #56]	@ (800310c <KalmanFilter_Init+0xa8>)
 80030d4:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->measurement_noise_alt = 0.005f;  // Altitude measurement noise
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003110 <KalmanFilter_Init+0xac>)
 80030da:	635a      	str	r2, [r3, #52]	@ 0x34
    kf->measurement_noise_acc = 5.0f;  // Acceleration measurement noise
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a0d      	ldr	r2, [pc, #52]	@ (8003114 <KalmanFilter_Init+0xb0>)
 80030e0:	639a      	str	r2, [r3, #56]	@ 0x38

    // Initialize apogee detection variables
    kf->apogee_detected = 0;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    kf->apogee_counter = 0;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	641a      	str	r2, [r3, #64]	@ 0x40
    kf->prev_velocity = 0.0f;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	645a      	str	r2, [r3, #68]	@ 0x44

    // Mach transition control
    kf->in_mach_transition = 0;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	42c80000 	.word	0x42c80000
 800310c:	3c23d70a 	.word	0x3c23d70a
 8003110:	3ba3d70a 	.word	0x3ba3d70a
 8003114:	40a00000 	.word	0x40a00000

08003118 <KalmanFilter_Update>:
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 * @param dt Time step (seconds)
 * @return Filtered altitude
 */
float KalmanFilter_Update(KalmanFilter_t *kf, float altitude, float accel, float dt) {
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	ed87 0a02 	vstr	s0, [r7, #8]
 8003124:	edc7 0a01 	vstr	s1, [r7, #4]
 8003128:	ed87 1a00 	vstr	s2, [r7]
    // Check for Mach transition region (approximately 300-350 m/s)
    // Skip barometer readings in this region due to pressure anomalies
    if (fabsf(kf->x[1]) > 300.0f && fabsf(kf->x[1]) < 350.0f) {
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003132:	eef0 7ae7 	vabs.f32	s15, s15
 8003136:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800319c <KalmanFilter_Update+0x84>
 800313a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800313e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003142:	dd0f      	ble.n	8003164 <KalmanFilter_Update+0x4c>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	edd3 7a01 	vldr	s15, [r3, #4]
 800314a:	eef0 7ae7 	vabs.f32	s15, s15
 800314e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80031a0 <KalmanFilter_Update+0x88>
 8003152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315a:	d503      	bpl.n	8003164 <KalmanFilter_Update+0x4c>
        kf->in_mach_transition = 1;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2201      	movs	r2, #1
 8003160:	649a      	str	r2, [r3, #72]	@ 0x48
 8003162:	e002      	b.n	800316a <KalmanFilter_Update+0x52>
    } else {
        kf->in_mach_transition = 0;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // Time update (prediction)
    KalmanFilter_TimeUpdate(kf, dt);
 800316a:	ed97 0a00 	vldr	s0, [r7]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f818 	bl	80031a4 <KalmanFilter_TimeUpdate>

    // Measurement update (correction)
    KalmanFilter_MeasurementUpdate(kf, altitude, accel);
 8003174:	edd7 0a01 	vldr	s1, [r7, #4]
 8003178:	ed97 0a02 	vldr	s0, [r7, #8]
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 fa1d 	bl	80035bc <KalmanFilter_MeasurementUpdate>

    // Check for apogee
    KalmanFilter_DetectApogee(kf);
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f001 f96a 	bl	800445c <KalmanFilter_DetectApogee>

    // Return filtered altitude
    return kf->x[0];
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	ee07 3a90 	vmov	s15, r3
}
 8003190:	eeb0 0a67 	vmov.f32	s0, s15
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	43960000 	.word	0x43960000
 80031a0:	43af0000 	.word	0x43af0000

080031a4 <KalmanFilter_TimeUpdate>:
/**
 * @brief Time update step of Kalman filter (prediction)
 * @param kf Pointer to Kalman filter structure
 * @param dt Time step (seconds)
 */
static void KalmanFilter_TimeUpdate(KalmanFilter_t *kf, float dt) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b0b6      	sub	sp, #216	@ 0xd8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	ed87 0a00 	vstr	s0, [r7]
    float dt2 = dt * dt;
 80031b0:	edd7 7a00 	vldr	s15, [r7]
 80031b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80031b8:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
    float dt3 = dt2 * dt;
 80031bc:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80031c0:	edd7 7a00 	vldr	s15, [r7]
 80031c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c8:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
    float dt4 = dt2 * dt2;
 80031cc:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80031d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80031d4:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac

    // State transition matrix F = [1 dt dt²/2; 0 1 dt; 0 0 1]
    // State prediction: x = F*x
    float x0_new = kf->x[0] + kf->x[1] * dt + kf->x[2] * dt2 / 2.0f;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	ed93 7a00 	vldr	s14, [r3]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80031e4:	edd7 7a00 	vldr	s15, [r7]
 80031e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	edd3 6a02 	vldr	s13, [r3, #8]
 80031f6:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80031fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031fe:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003202:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800320a:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
    float x1_new = kf->x[1] + kf->x[2] * dt;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	ed93 7a01 	vldr	s14, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	edd3 6a02 	vldr	s13, [r3, #8]
 800321a:	edd7 7a00 	vldr	s15, [r7]
 800321e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003226:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
    float x2_new = kf->x[2];  // Acceleration assumed constant
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    kf->x[0] = x0_new;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003238:	601a      	str	r2, [r3, #0]
    kf->x[1] = x1_new;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003240:	605a      	str	r2, [r3, #4]
    kf->x[2] = x2_new;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003248:	609a      	str	r2, [r3, #8]

    // Process noise covariance Q
    float q = kf->process_noise;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    float Q[3][3] = {
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 8003252:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003256:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800325a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800325e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003262:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003266:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 800326a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800326e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003272:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003276:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800327a:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800327e:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 8003282:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003286:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800328a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800328e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003292:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003296:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
        {dt3/2.0f * q, dt2 * q, dt * q},
 800329a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800329e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80032a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032a6:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80032aa:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80032ae:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
        {dt3/2.0f * q, dt2 * q, dt * q},
 80032b2:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80032b6:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80032ba:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80032be:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
        {dt3/2.0f * q, dt2 * q, dt * q},
 80032c2:	ed97 7a00 	vldr	s14, [r7]
 80032c6:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80032ca:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80032ce:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
        {dt2/2.0f * q, dt * q, q}
 80032d2:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80032d6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80032da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032de:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80032e2:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80032e6:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
        {dt2/2.0f * q, dt * q, q}
 80032ea:	ed97 7a00 	vldr	s14, [r7]
 80032ee:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80032f2:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80032f6:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 80032fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    };

    // State transition matrix F
    float F[3][3] = {
 8003302:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003306:	657b      	str	r3, [r7, #84]	@ 0x54
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	65bb      	str	r3, [r7, #88]	@ 0x58
        {1.0f, dt, dt2/2.0f},
 800330c:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003310:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003314:	eec7 7a26 	vdiv.f32	s15, s14, s13
    float F[3][3] = {
 8003318:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	663b      	str	r3, [r7, #96]	@ 0x60
 8003322:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003326:	667b      	str	r3, [r7, #100]	@ 0x64
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	673b      	str	r3, [r7, #112]	@ 0x70
 8003338:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800333c:	677b      	str	r3, [r7, #116]	@ 0x74
        {0.0f, 1.0f, dt},
        {0.0f, 0.0f, 1.0f}
    };

    // Temporary matrices for calculation
    float FP[3][3] = {0};
 800333e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003342:	2224      	movs	r2, #36	@ 0x24
 8003344:	2100      	movs	r1, #0
 8003346:	4618      	mov	r0, r3
 8003348:	f009 fddd 	bl	800cf06 <memset>
    float FPFT[3][3] = {0};
 800334c:	f107 030c 	add.w	r3, r7, #12
 8003350:	2224      	movs	r2, #36	@ 0x24
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f009 fdd6 	bl	800cf06 <memset>

    // P = F*P*F' + Q
    // Step 1: FP = F*P
    for (int i = 0; i < 3; i++) {
 800335a:	2300      	movs	r3, #0
 800335c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003360:	e06a      	b.n	8003438 <KalmanFilter_TimeUpdate+0x294>
        for (int j = 0; j < 3; j++) {
 8003362:	2300      	movs	r3, #0
 8003364:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003368:	e05d      	b.n	8003426 <KalmanFilter_TimeUpdate+0x282>
            FP[i][j] = 0.0f;
 800336a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800336e:	4613      	mov	r3, r2
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	4413      	add	r3, r2
 8003374:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	33d8      	adds	r3, #216	@ 0xd8
 800337e:	443b      	add	r3, r7
 8003380:	3ba8      	subs	r3, #168	@ 0xa8
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 8003388:	2300      	movs	r3, #0
 800338a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800338e:	e041      	b.n	8003414 <KalmanFilter_TimeUpdate+0x270>
                FP[i][j] += F[i][k] * kf->P[k][j];
 8003390:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003394:	4613      	mov	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4413      	add	r3, r2
 800339a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	33d8      	adds	r3, #216	@ 0xd8
 80033a4:	443b      	add	r3, r7
 80033a6:	3ba8      	subs	r3, #168	@ 0xa8
 80033a8:	ed93 7a00 	vldr	s14, [r3]
 80033ac:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80033b0:	4613      	mov	r3, r2
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	4413      	add	r3, r2
 80033b6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	33d8      	adds	r3, #216	@ 0xd8
 80033c0:	443b      	add	r3, r7
 80033c2:	3b84      	subs	r3, #132	@ 0x84
 80033c4:	edd3 6a00 	vldr	s13, [r3]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80033ce:	4613      	mov	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4413      	add	r3, r2
 80033d4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033d8:	4413      	add	r3, r2
 80033da:	3302      	adds	r3, #2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	3304      	adds	r3, #4
 80033e2:	edd3 7a00 	vldr	s15, [r3]
 80033e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ee:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80033f2:	4613      	mov	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4413      	add	r3, r2
 80033f8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	33d8      	adds	r3, #216	@ 0xd8
 8003402:	443b      	add	r3, r7
 8003404:	3ba8      	subs	r3, #168	@ 0xa8
 8003406:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 800340a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800340e:	3301      	adds	r3, #1
 8003410:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003414:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003418:	2b02      	cmp	r3, #2
 800341a:	ddb9      	ble.n	8003390 <KalmanFilter_TimeUpdate+0x1ec>
        for (int j = 0; j < 3; j++) {
 800341c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003420:	3301      	adds	r3, #1
 8003422:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003426:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800342a:	2b02      	cmp	r3, #2
 800342c:	dd9d      	ble.n	800336a <KalmanFilter_TimeUpdate+0x1c6>
    for (int i = 0; i < 3; i++) {
 800342e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003432:	3301      	adds	r3, #1
 8003434:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003438:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800343c:	2b02      	cmp	r3, #2
 800343e:	dd90      	ble.n	8003362 <KalmanFilter_TimeUpdate+0x1be>
            }
        }
    }

    // Step 2: FPFT = FP*F'
    for (int i = 0; i < 3; i++) {
 8003440:	2300      	movs	r3, #0
 8003442:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003446:	e069      	b.n	800351c <KalmanFilter_TimeUpdate+0x378>
        for (int j = 0; j < 3; j++) {
 8003448:	2300      	movs	r3, #0
 800344a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800344e:	e05c      	b.n	800350a <KalmanFilter_TimeUpdate+0x366>
            FPFT[i][j] = 0.0f;
 8003450:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003454:	4613      	mov	r3, r2
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	4413      	add	r3, r2
 800345a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	33d8      	adds	r3, #216	@ 0xd8
 8003464:	443b      	add	r3, r7
 8003466:	3bcc      	subs	r3, #204	@ 0xcc
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 800346e:	2300      	movs	r3, #0
 8003470:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003474:	e040      	b.n	80034f8 <KalmanFilter_TimeUpdate+0x354>
                FPFT[i][j] += FP[i][k] * F[j][k];  // F'[k][j] = F[j][k]
 8003476:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800347a:	4613      	mov	r3, r2
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	4413      	add	r3, r2
 8003480:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	33d8      	adds	r3, #216	@ 0xd8
 800348a:	443b      	add	r3, r7
 800348c:	3bcc      	subs	r3, #204	@ 0xcc
 800348e:	ed93 7a00 	vldr	s14, [r3]
 8003492:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003496:	4613      	mov	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	4413      	add	r3, r2
 800349c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	33d8      	adds	r3, #216	@ 0xd8
 80034a6:	443b      	add	r3, r7
 80034a8:	3ba8      	subs	r3, #168	@ 0xa8
 80034aa:	edd3 6a00 	vldr	s13, [r3]
 80034ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034b2:	4613      	mov	r3, r2
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	4413      	add	r3, r2
 80034b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	33d8      	adds	r3, #216	@ 0xd8
 80034c2:	443b      	add	r3, r7
 80034c4:	3b84      	subs	r3, #132	@ 0x84
 80034c6:	edd3 7a00 	vldr	s15, [r3]
 80034ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	33d8      	adds	r3, #216	@ 0xd8
 80034e6:	443b      	add	r3, r7
 80034e8:	3bcc      	subs	r3, #204	@ 0xcc
 80034ea:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 80034ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034f2:	3301      	adds	r3, #1
 80034f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	ddba      	ble.n	8003476 <KalmanFilter_TimeUpdate+0x2d2>
        for (int j = 0; j < 3; j++) {
 8003500:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003504:	3301      	adds	r3, #1
 8003506:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800350a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800350e:	2b02      	cmp	r3, #2
 8003510:	dd9e      	ble.n	8003450 <KalmanFilter_TimeUpdate+0x2ac>
    for (int i = 0; i < 3; i++) {
 8003512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003516:	3301      	adds	r3, #1
 8003518:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800351c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003520:	2b02      	cmp	r3, #2
 8003522:	dd91      	ble.n	8003448 <KalmanFilter_TimeUpdate+0x2a4>
            }
        }
    }

    // Step 3: P = FPFT + Q
    for (int i = 0; i < 3; i++) {
 8003524:	2300      	movs	r3, #0
 8003526:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800352a:	e03e      	b.n	80035aa <KalmanFilter_TimeUpdate+0x406>
        for (int j = 0; j < 3; j++) {
 800352c:	2300      	movs	r3, #0
 800352e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003532:	e031      	b.n	8003598 <KalmanFilter_TimeUpdate+0x3f4>
            kf->P[i][j] = FPFT[i][j] + Q[i][j];
 8003534:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003538:	4613      	mov	r3, r2
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	4413      	add	r3, r2
 800353e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	33d8      	adds	r3, #216	@ 0xd8
 8003548:	443b      	add	r3, r7
 800354a:	3bcc      	subs	r3, #204	@ 0xcc
 800354c:	ed93 7a00 	vldr	s14, [r3]
 8003550:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003554:	4613      	mov	r3, r2
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4413      	add	r3, r2
 800355a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800355e:	4413      	add	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	33d8      	adds	r3, #216	@ 0xd8
 8003564:	443b      	add	r3, r7
 8003566:	3b60      	subs	r3, #96	@ 0x60
 8003568:	edd3 7a00 	vldr	s15, [r3]
 800356c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003576:	4613      	mov	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4413      	add	r3, r2
 800357c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003580:	4413      	add	r3, r2
 8003582:	3302      	adds	r3, #2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	3304      	adds	r3, #4
 800358a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 800358e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003592:	3301      	adds	r3, #1
 8003594:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003598:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800359c:	2b02      	cmp	r3, #2
 800359e:	ddc9      	ble.n	8003534 <KalmanFilter_TimeUpdate+0x390>
    for (int i = 0; i < 3; i++) {
 80035a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80035a4:	3301      	adds	r3, #1
 80035a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80035aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	ddbc      	ble.n	800352c <KalmanFilter_TimeUpdate+0x388>
        }
    }
}
 80035b2:	bf00      	nop
 80035b4:	bf00      	nop
 80035b6:	37d8      	adds	r7, #216	@ 0xd8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <KalmanFilter_MeasurementUpdate>:
 * @brief Measurement update step of Kalman filter (correction)
 * @param kf Pointer to Kalman filter structure
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 */
static void KalmanFilter_MeasurementUpdate(KalmanFilter_t *kf, float altitude, float accel) {
 80035bc:	b5b0      	push	{r4, r5, r7, lr}
 80035be:	b0f6      	sub	sp, #472	@ 0x1d8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80035c6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80035ca:	6018      	str	r0, [r3, #0]
 80035cc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80035d0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80035d4:	ed83 0a00 	vstr	s0, [r3]
 80035d8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80035dc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80035e0:	edc3 0a00 	vstr	s1, [r3]
    // In Mach transition region, only use acceleration measurement
    if (kf->in_mach_transition) {
 80035e4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80035e8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 826b 	beq.w	8003acc <KalmanFilter_MeasurementUpdate+0x510>
        // Only use acceleration measurement
        // H = [0 0 1]
        float H[1][3] = {{0.0f, 0.0f, 1.0f}};
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003606:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800360a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
        float z = accel;
 800360e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003612:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
        float y = z - kf->x[2];  // Innovation
 800361c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003620:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	edd3 7a02 	vldr	s15, [r3, #8]
 800362a:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 800362e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003632:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c

        // S = H*P*H' + R
        float HP[1][3] = {0};
 8003636:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	609a      	str	r2, [r3, #8]
        float S = 0.0f;
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

        for (int i = 0; i < 3; i++) {
 800364a:	2300      	movs	r3, #0
 800364c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8003650:	e044      	b.n	80036dc <KalmanFilter_MeasurementUpdate+0x120>
            HP[0][i] = H[0][0]*kf->P[0][i] + H[0][1]*kf->P[1][i] + H[0][2]*kf->P[2][i];
 8003652:	ed97 7a4e 	vldr	s14, [r7, #312]	@ 0x138
 8003656:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800365a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003664:	3302      	adds	r3, #2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	3304      	adds	r3, #4
 800366c:	edd3 7a00 	vldr	s15, [r3]
 8003670:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003674:	edd7 6a4f 	vldr	s13, [r7, #316]	@ 0x13c
 8003678:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800367c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003686:	3305      	adds	r3, #5
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	3304      	adds	r3, #4
 800368e:	edd3 7a00 	vldr	s15, [r3]
 8003692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003696:	ee37 7a27 	vadd.f32	s14, s14, s15
 800369a:	edd7 6a50 	vldr	s13, [r7, #320]	@ 0x140
 800369e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80036a2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80036ac:	3308      	adds	r3, #8
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	3304      	adds	r3, #4
 80036b4:	edd3 7a00 	vldr	s15, [r3]
 80036b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036c0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80036ca:	443b      	add	r3, r7
 80036cc:	3bac      	subs	r3, #172	@ 0xac
 80036ce:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 80036d2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80036d6:	3301      	adds	r3, #1
 80036d8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80036dc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	ddb6      	ble.n	8003652 <KalmanFilter_MeasurementUpdate+0x96>
        }

        S = HP[0][0]*H[0][0] + HP[0][1]*H[0][1] + HP[0][2]*H[0][2] + kf->measurement_noise_acc;
 80036e4:	ed97 7a4b 	vldr	s14, [r7, #300]	@ 0x12c
 80036e8:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 80036ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036f0:	edd7 6a4c 	vldr	s13, [r7, #304]	@ 0x130
 80036f4:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 80036f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003700:	edd7 6a4d 	vldr	s13, [r7, #308]	@ 0x134
 8003704:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8003708:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800370c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003710:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003714:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800371e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003722:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148

        // K = P*H'*S^-1
        float K[3] = {0};
 8003726:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	605a      	str	r2, [r3, #4]
 8003730:	609a      	str	r2, [r3, #8]
        float S_inv = 1.0f / S;
 8003732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003736:	ed97 7a52 	vldr	s14, [r7, #328]	@ 0x148
 800373a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800373e:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144

        for (int i = 0; i < 3; i++) {
 8003742:	2300      	movs	r3, #0
 8003744:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003748:	e04f      	b.n	80037ea <KalmanFilter_MeasurementUpdate+0x22e>
            K[i] = (kf->P[i][0]*H[0][0] + kf->P[i][1]*H[0][1] + kf->P[i][2]*H[0][2]) * S_inv;
 800374a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800374e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003752:	6819      	ldr	r1, [r3, #0]
 8003754:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8003758:	4613      	mov	r3, r2
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	4413      	add	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	330c      	adds	r3, #12
 8003764:	ed93 7a00 	vldr	s14, [r3]
 8003768:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 800376c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003770:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003774:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003778:	6819      	ldr	r1, [r3, #0]
 800377a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	4613      	mov	r3, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	3304      	adds	r3, #4
 800378c:	edd3 6a00 	vldr	s13, [r3]
 8003790:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 8003794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003798:	ee37 7a27 	vadd.f32	s14, s14, s15
 800379c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037a0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80037a4:	6819      	ldr	r1, [r3, #0]
 80037a6:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80037aa:	4613      	mov	r3, r2
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	3314      	adds	r3, #20
 80037b6:	edd3 6a00 	vldr	s13, [r3]
 80037ba:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 80037be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037c6:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 80037ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80037d8:	443b      	add	r3, r7
 80037da:	3bb8      	subs	r3, #184	@ 0xb8
 80037dc:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 80037e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80037e4:	3301      	adds	r3, #1
 80037e6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80037ea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	ddab      	ble.n	800374a <KalmanFilter_MeasurementUpdate+0x18e>
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 80037f2:	2300      	movs	r3, #0
 80037f4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 80037f8:	e029      	b.n	800384e <KalmanFilter_MeasurementUpdate+0x292>
            kf->x[i] += K[i] * y;
 80037fa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037fe:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	ed93 7a00 	vldr	s14, [r3]
 8003810:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800381a:	443b      	add	r3, r7
 800381c:	3bb8      	subs	r3, #184	@ 0xb8
 800381e:	edd3 6a00 	vldr	s13, [r3]
 8003822:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 8003826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800382a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800382e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003832:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003844:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003848:	3301      	adds	r3, #1
 800384a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 800384e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003852:	2b02      	cmp	r3, #2
 8003854:	ddd1      	ble.n	80037fa <KalmanFilter_MeasurementUpdate+0x23e>
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 8003856:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800385a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800385e:	4618      	mov	r0, r3
 8003860:	2324      	movs	r3, #36	@ 0x24
 8003862:	461a      	mov	r2, r3
 8003864:	2100      	movs	r1, #0
 8003866:	f009 fb4e 	bl	800cf06 <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 800386a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800386e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8003872:	4618      	mov	r0, r3
 8003874:	2324      	movs	r3, #36	@ 0x24
 8003876:	461a      	mov	r2, r3
 8003878:	2100      	movs	r1, #0
 800387a:	f009 fb44 	bl	800cf06 <memset>

        for (int i = 0; i < 3; i++) {
 800387e:	2300      	movs	r3, #0
 8003880:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003884:	e062      	b.n	800394c <KalmanFilter_MeasurementUpdate+0x390>
            for (int j = 0; j < 3; j++) {
 8003886:	2300      	movs	r3, #0
 8003888:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800388c:	e055      	b.n	800393a <KalmanFilter_MeasurementUpdate+0x37e>
                KH[i][j] = K[i] * H[0][j];
 800388e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003898:	443b      	add	r3, r7
 800389a:	3bb8      	subs	r3, #184	@ 0xb8
 800389c:	ed93 7a00 	vldr	s14, [r3]
 80038a0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80038aa:	443b      	add	r3, r7
 80038ac:	3ba0      	subs	r3, #160	@ 0xa0
 80038ae:	edd3 7a00 	vldr	s15, [r3]
 80038b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038ba:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80038be:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 80038c2:	4613      	mov	r3, r2
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	4413      	add	r3, r2
 80038c8:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	edc3 7a00 	vstr	s15, [r3]
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 80038d6:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 80038da:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80038de:	429a      	cmp	r2, r3
 80038e0:	d102      	bne.n	80038e8 <KalmanFilter_MeasurementUpdate+0x32c>
 80038e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80038e6:	e001      	b.n	80038ec <KalmanFilter_MeasurementUpdate+0x330>
 80038e8:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8003bd8 <KalmanFilter_MeasurementUpdate+0x61c>
 80038ec:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038f0:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80038f4:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 80038f8:	4613      	mov	r3, r2
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4413      	add	r3, r2
 80038fe:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	440b      	add	r3, r1
 8003908:	edd3 7a00 	vldr	s15, [r3]
 800390c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003910:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003914:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003918:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 800391c:	4613      	mov	r3, r2
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4413      	add	r3, r2
 8003922:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8003930:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003934:	3301      	adds	r3, #1
 8003936:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800393a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800393e:	2b02      	cmp	r3, #2
 8003940:	dda5      	ble.n	800388e <KalmanFilter_MeasurementUpdate+0x2d2>
        for (int i = 0; i < 3; i++) {
 8003942:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003946:	3301      	adds	r3, #1
 8003948:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800394c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003950:	2b02      	cmp	r3, #2
 8003952:	dd98      	ble.n	8003886 <KalmanFilter_MeasurementUpdate+0x2ca>
            }
        }

        for (int i = 0; i < 3; i++) {
 8003954:	2300      	movs	r3, #0
 8003956:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800395a:	e076      	b.n	8003a4a <KalmanFilter_MeasurementUpdate+0x48e>
            for (int j = 0; j < 3; j++) {
 800395c:	2300      	movs	r3, #0
 800395e:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003962:	e069      	b.n	8003a38 <KalmanFilter_MeasurementUpdate+0x47c>
                Pnew[i][j] = 0.0f;
 8003964:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003968:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 800396c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003970:	4613      	mov	r3, r2
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	4413      	add	r3, r2
 8003976:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003986:	2300      	movs	r3, #0
 8003988:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800398c:	e04b      	b.n	8003a26 <KalmanFilter_MeasurementUpdate+0x46a>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 800398e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003992:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003996:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 800399a:	4613      	mov	r3, r2
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	4413      	add	r3, r2
 80039a0:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	ed93 7a00 	vldr	s14, [r3]
 80039ae:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039b2:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 80039b6:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 80039ba:	4613      	mov	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	4413      	add	r3, r2
 80039c0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	edd3 6a00 	vldr	s13, [r3]
 80039ce:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039d2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80039d6:	6819      	ldr	r1, [r3, #0]
 80039d8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80039dc:	4613      	mov	r3, r2
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	4413      	add	r3, r2
 80039e2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80039e6:	4413      	add	r3, r2
 80039e8:	3302      	adds	r3, #2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	3304      	adds	r3, #4
 80039f0:	edd3 7a00 	vldr	s15, [r3]
 80039f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039fc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a00:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003a04:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003a08:	4613      	mov	r3, r2
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003a1c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003a20:	3301      	adds	r3, #1
 8003a22:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003a26:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	ddaf      	ble.n	800398e <KalmanFilter_MeasurementUpdate+0x3d2>
            for (int j = 0; j < 3; j++) {
 8003a2e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003a32:	3301      	adds	r3, #1
 8003a34:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003a38:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	dd91      	ble.n	8003964 <KalmanFilter_MeasurementUpdate+0x3a8>
        for (int i = 0; i < 3; i++) {
 8003a40:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003a44:	3301      	adds	r3, #1
 8003a46:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003a4a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	dd84      	ble.n	800395c <KalmanFilter_MeasurementUpdate+0x3a0>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8003a52:	2300      	movs	r3, #0
 8003a54:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003a58:	e032      	b.n	8003ac0 <KalmanFilter_MeasurementUpdate+0x504>
            for (int j = 0; j < 3; j++) {
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003a60:	e025      	b.n	8003aae <KalmanFilter_MeasurementUpdate+0x4f2>
                kf->P[i][j] = Pnew[i][j];
 8003a62:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a66:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003a6a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003a6e:	4613      	mov	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4413      	add	r3, r2
 8003a74:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	6819      	ldr	r1, [r3, #0]
 8003a80:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a84:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003a8e:	4613      	mov	r3, r2
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	4413      	add	r3, r2
 8003a94:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003a98:	4413      	add	r3, r2
 8003a9a:	3302      	adds	r3, #2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4403      	add	r3, r0
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 8003aa4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003aae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	ddd5      	ble.n	8003a62 <KalmanFilter_MeasurementUpdate+0x4a6>
        for (int i = 0; i < 3; i++) {
 8003ab6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003aba:	3301      	adds	r3, #1
 8003abc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003ac0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	ddc8      	ble.n	8003a5a <KalmanFilter_MeasurementUpdate+0x49e>
 8003ac8:	f000 bcc2 	b.w	8004450 <KalmanFilter_MeasurementUpdate+0xe94>
            }
        }
    } else {
        // Use both altitude and acceleration measurements
        // H = [1 0 0; 0 0 1]
        float H[2][3] = {
 8003acc:	4b43      	ldr	r3, [pc, #268]	@ (8003bdc <KalmanFilter_MeasurementUpdate+0x620>)
 8003ace:	f507 7484 	add.w	r4, r7, #264	@ 0x108
 8003ad2:	461d      	mov	r5, r3
 8003ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ad8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003adc:	e884 0003 	stmia.w	r4, {r0, r1}
            {1.0f, 0.0f, 0.0f},
            {0.0f, 0.0f, 1.0f}
        };

        float z[2] = {altitude, accel};
 8003ae0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ae4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003aee:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003af2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        float y[2] = {z[0] - kf->x[0], z[1] - kf->x[2]};  // Innovation
 8003afc:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8003b00:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b04:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	edd3 7a00 	vldr	s15, [r3]
 8003b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b12:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
 8003b16:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8003b1a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b1e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b2c:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

        // S = H*P*H' + R
        float HP[2][3] = {0};
 8003b30:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	611a      	str	r2, [r3, #16]
 8003b40:	615a      	str	r2, [r3, #20]
        float S[2][2] = {0};
 8003b42:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	6053      	str	r3, [r2, #4]
 8003b52:	6093      	str	r3, [r2, #8]
 8003b54:	60d3      	str	r3, [r2, #12]
        float R[2][2] = {
            {kf->measurement_noise_alt, 0.0f},
 8003b56:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b5a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
        float R[2][2] = {
 8003b62:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b66:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b70:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	605a      	str	r2, [r3, #4]
 8003b7a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b7e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	609a      	str	r2, [r3, #8]
            {0.0f, kf->measurement_noise_acc}
 8003b88:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b8c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
        float R[2][2] = {
 8003b94:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b98:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b9c:	60da      	str	r2, [r3, #12]
        };

        for (int i = 0; i < 2; i++) {
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003ba4:	e079      	b.n	8003c9a <KalmanFilter_MeasurementUpdate+0x6de>
            for (int j = 0; j < 3; j++) {
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003bac:	e06c      	b.n	8003c88 <KalmanFilter_MeasurementUpdate+0x6cc>
                HP[i][j] = 0.0f;
 8003bae:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003bc4:	443b      	add	r3, r7
 8003bc6:	3bf8      	subs	r3, #248	@ 0xf8
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003bd4:	e04f      	b.n	8003c76 <KalmanFilter_MeasurementUpdate+0x6ba>
 8003bd6:	bf00      	nop
 8003bd8:	00000000 	.word	0x00000000
 8003bdc:	080114c0 	.word	0x080114c0
 8003be0:	358637bd 	.word	0x358637bd
                    HP[i][j] += H[i][k] * kf->P[k][j];
 8003be4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003be8:	4613      	mov	r3, r2
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4413      	add	r3, r2
 8003bee:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003bfa:	443b      	add	r3, r7
 8003bfc:	3bf8      	subs	r3, #248	@ 0xf8
 8003bfe:	ed93 7a00 	vldr	s14, [r3]
 8003c02:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003c06:	4613      	mov	r3, r2
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003c18:	443b      	add	r3, r7
 8003c1a:	3bd0      	subs	r3, #208	@ 0xd0
 8003c1c:	edd3 6a00 	vldr	s13, [r3]
 8003c20:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c24:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003c28:	6819      	ldr	r1, [r3, #0]
 8003c2a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003c2e:	4613      	mov	r3, r2
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	4413      	add	r3, r2
 8003c34:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003c38:	4413      	add	r3, r2
 8003c3a:	3302      	adds	r3, #2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	3304      	adds	r3, #4
 8003c42:	edd3 7a00 	vldr	s15, [r3]
 8003c46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c4e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003c52:	4613      	mov	r3, r2
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	4413      	add	r3, r2
 8003c58:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003c64:	443b      	add	r3, r7
 8003c66:	3bf8      	subs	r3, #248	@ 0xf8
 8003c68:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003c6c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003c70:	3301      	adds	r3, #1
 8003c72:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003c76:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	ddb2      	ble.n	8003be4 <KalmanFilter_MeasurementUpdate+0x628>
            for (int j = 0; j < 3; j++) {
 8003c7e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003c82:	3301      	adds	r3, #1
 8003c84:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003c88:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	dd8e      	ble.n	8003bae <KalmanFilter_MeasurementUpdate+0x5f2>
        for (int i = 0; i < 2; i++) {
 8003c90:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003c94:	3301      	adds	r3, #1
 8003c96:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003c9a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	dd81      	ble.n	8003ba6 <KalmanFilter_MeasurementUpdate+0x5ea>
                }
            }
        }

        for (int i = 0; i < 2; i++) {
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003ca8:	e098      	b.n	8003ddc <KalmanFilter_MeasurementUpdate+0x820>
            for (int j = 0; j < 2; j++) {
 8003caa:	2300      	movs	r3, #0
 8003cac:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003cb0:	e08a      	b.n	8003dc8 <KalmanFilter_MeasurementUpdate+0x80c>
                S[i][j] = 0.0f;
 8003cb2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cb6:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003cba:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003cbe:	0059      	lsls	r1, r3, #1
 8003cc0:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003cc4:	440b      	add	r3, r1
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003cd6:	e042      	b.n	8003d5e <KalmanFilter_MeasurementUpdate+0x7a2>
                    S[i][j] += HP[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8003cd8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cdc:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003ce0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003ce4:	0059      	lsls	r1, r3, #1
 8003ce6:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003cea:	440b      	add	r3, r1
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	ed93 7a00 	vldr	s14, [r3]
 8003cf4:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003d0a:	443b      	add	r3, r7
 8003d0c:	3bf8      	subs	r3, #248	@ 0xf8
 8003d0e:	edd3 6a00 	vldr	s13, [r3]
 8003d12:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003d16:	4613      	mov	r3, r2
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003d28:	443b      	add	r3, r7
 8003d2a:	3bd0      	subs	r3, #208	@ 0xd0
 8003d2c:	edd3 7a00 	vldr	s15, [r3]
 8003d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d38:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d3c:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003d40:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003d44:	0059      	lsls	r1, r3, #1
 8003d46:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003d4a:	440b      	add	r3, r1
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003d54:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003d58:	3301      	adds	r3, #1
 8003d5a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003d5e:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	ddb8      	ble.n	8003cd8 <KalmanFilter_MeasurementUpdate+0x71c>
                }
                S[i][j] += R[i][j];
 8003d66:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d6a:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003d6e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003d72:	0059      	lsls	r1, r3, #1
 8003d74:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003d78:	440b      	add	r3, r1
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	ed93 7a00 	vldr	s14, [r3]
 8003d82:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d86:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8003d8a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003d8e:	0059      	lsls	r1, r3, #1
 8003d90:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003d94:	440b      	add	r3, r1
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	edd3 7a00 	vldr	s15, [r3]
 8003d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003da2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003da6:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003daa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003dae:	0059      	lsls	r1, r3, #1
 8003db0:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003db4:	440b      	add	r3, r1
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 8003dbe:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003dc8:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	f77f af70 	ble.w	8003cb2 <KalmanFilter_MeasurementUpdate+0x6f6>
        for (int i = 0; i < 2; i++) {
 8003dd2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003ddc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	f77f af62 	ble.w	8003caa <KalmanFilter_MeasurementUpdate+0x6ee>
            }
        }

        // Calculate S^-1 (inverse of 2x2 matrix)
        float det = S[0][0] * S[1][1] - S[0][1] * S[1][0];
 8003de6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dee:	ed93 7a00 	vldr	s14, [r3]
 8003df2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dfa:	edd3 7a03 	vldr	s15, [r3, #12]
 8003dfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e02:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e0a:	edd3 6a01 	vldr	s13, [r3, #4]
 8003e0e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e16:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e22:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
        if (fabsf(det) < 1e-6f) {
 8003e26:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 8003e2a:	eef0 7ae7 	vabs.f32	s15, s15
 8003e2e:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 8003be0 <KalmanFilter_MeasurementUpdate+0x624>
 8003e32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3a:	f100 8308 	bmi.w	800444e <KalmanFilter_MeasurementUpdate+0xe92>
            // Matrix is singular, skip update
            return;
        }

        float S_inv[2][2] = {
            {S[1][1] / det, -S[0][1] / det},
 8003e3e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e46:	edd3 6a03 	vldr	s13, [r3, #12]
 8003e4a:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003e52:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e56:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e5a:	edc3 7a00 	vstr	s15, [r3]
            {S[1][1] / det, -S[0][1] / det},
 8003e5e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e66:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e6a:	eef1 6a67 	vneg.f32	s13, s15
 8003e6e:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003e76:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e7a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e7e:	edc3 7a01 	vstr	s15, [r3, #4]
            {-S[1][0] / det, S[0][0] / det}
 8003e82:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e8e:	eef1 6a67 	vneg.f32	s13, s15
 8003e92:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003e9a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e9e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003ea2:	edc3 7a02 	vstr	s15, [r3, #8]
            {-S[1][0] / det, S[0][0] / det}
 8003ea6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003eae:	edd3 6a00 	vldr	s13, [r3]
 8003eb2:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003eba:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ebe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003ec2:	edc3 7a03 	vstr	s15, [r3, #12]
        };

        // K = P*H'*S^-1
        float PHt[3][2] = {0};
 8003ec6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003eca:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003ece:	461a      	mov	r2, r3
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	6053      	str	r3, [r2, #4]
 8003ed6:	6093      	str	r3, [r2, #8]
 8003ed8:	60d3      	str	r3, [r2, #12]
 8003eda:	6113      	str	r3, [r2, #16]
 8003edc:	6153      	str	r3, [r2, #20]
        float K[3][2] = {0};
 8003ede:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ee2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2300      	movs	r3, #0
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	6053      	str	r3, [r2, #4]
 8003eee:	6093      	str	r3, [r2, #8]
 8003ef0:	60d3      	str	r3, [r2, #12]
 8003ef2:	6113      	str	r3, [r2, #16]
 8003ef4:	6153      	str	r3, [r2, #20]

        for (int i = 0; i < 3; i++) {
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8003efc:	e06f      	b.n	8003fde <KalmanFilter_MeasurementUpdate+0xa22>
            for (int j = 0; j < 2; j++) {
 8003efe:	2300      	movs	r3, #0
 8003f00:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8003f04:	e062      	b.n	8003fcc <KalmanFilter_MeasurementUpdate+0xa10>
                PHt[i][j] = 0.0f;
 8003f06:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f0a:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8003f0e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003f12:	0059      	lsls	r1, r3, #1
 8003f14:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003f18:	440b      	add	r3, r1
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003f24:	2300      	movs	r3, #0
 8003f26:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8003f2a:	e046      	b.n	8003fba <KalmanFilter_MeasurementUpdate+0x9fe>
                    PHt[i][j] += kf->P[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8003f2c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f30:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8003f34:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003f38:	0059      	lsls	r1, r3, #1
 8003f3a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003f3e:	440b      	add	r3, r1
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	ed93 7a00 	vldr	s14, [r3]
 8003f48:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f4c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003f50:	6819      	ldr	r1, [r3, #0]
 8003f52:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003f56:	4613      	mov	r3, r2
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8003f60:	4413      	add	r3, r2
 8003f62:	3302      	adds	r3, #2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	440b      	add	r3, r1
 8003f68:	3304      	adds	r3, #4
 8003f6a:	edd3 6a00 	vldr	s13, [r3]
 8003f6e:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8003f72:	4613      	mov	r3, r2
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	4413      	add	r3, r2
 8003f78:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003f84:	443b      	add	r3, r7
 8003f86:	3bd0      	subs	r3, #208	@ 0xd0
 8003f88:	edd3 7a00 	vldr	s15, [r3]
 8003f8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f94:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f98:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8003f9c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003fa0:	0059      	lsls	r1, r3, #1
 8003fa2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003fa6:	440b      	add	r3, r1
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003fb0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8003fba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	ddb4      	ble.n	8003f2c <KalmanFilter_MeasurementUpdate+0x970>
            for (int j = 0; j < 2; j++) {
 8003fc2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8003fcc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	dd98      	ble.n	8003f06 <KalmanFilter_MeasurementUpdate+0x94a>
        for (int i = 0; i < 3; i++) {
 8003fd4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003fd8:	3301      	adds	r3, #1
 8003fda:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8003fde:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	dd8b      	ble.n	8003efe <KalmanFilter_MeasurementUpdate+0x942>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003fec:	e069      	b.n	80040c2 <KalmanFilter_MeasurementUpdate+0xb06>
            for (int j = 0; j < 2; j++) {
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003ff4:	e05c      	b.n	80040b0 <KalmanFilter_MeasurementUpdate+0xaf4>
                K[i][j] = 0.0f;
 8003ff6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ffa:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8003ffe:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004002:	0059      	lsls	r1, r3, #1
 8004004:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004008:	440b      	add	r3, r1
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 8004014:	2300      	movs	r3, #0
 8004016:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800401a:	e040      	b.n	800409e <KalmanFilter_MeasurementUpdate+0xae2>
                    K[i][j] += PHt[i][k] * S_inv[k][j];
 800401c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004020:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004024:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004028:	0059      	lsls	r1, r3, #1
 800402a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800402e:	440b      	add	r3, r1
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	ed93 7a00 	vldr	s14, [r3]
 8004038:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800403c:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8004040:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004044:	0059      	lsls	r1, r3, #1
 8004046:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800404a:	440b      	add	r3, r1
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	edd3 6a00 	vldr	s13, [r3]
 8004054:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004058:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 800405c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004060:	0059      	lsls	r1, r3, #1
 8004062:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004066:	440b      	add	r3, r1
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	edd3 7a00 	vldr	s15, [r3]
 8004070:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004078:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800407c:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004080:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004084:	0059      	lsls	r1, r3, #1
 8004086:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800408a:	440b      	add	r3, r1
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 8004094:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004098:	3301      	adds	r3, #1
 800409a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800409e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	ddba      	ble.n	800401c <KalmanFilter_MeasurementUpdate+0xa60>
            for (int j = 0; j < 2; j++) {
 80040a6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80040aa:	3301      	adds	r3, #1
 80040ac:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80040b0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	dd9e      	ble.n	8003ff6 <KalmanFilter_MeasurementUpdate+0xa3a>
        for (int i = 0; i < 3; i++) {
 80040b8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80040bc:	3301      	adds	r3, #1
 80040be:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80040c2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	dd91      	ble.n	8003fee <KalmanFilter_MeasurementUpdate+0xa32>
                }
            }
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 80040ca:	2300      	movs	r3, #0
 80040cc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80040d0:	e042      	b.n	8004158 <KalmanFilter_MeasurementUpdate+0xb9c>
            for (int j = 0; j < 2; j++) {
 80040d2:	2300      	movs	r3, #0
 80040d4:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80040d8:	e035      	b.n	8004146 <KalmanFilter_MeasurementUpdate+0xb8a>
                kf->x[i] += K[i][j] * y[j];
 80040da:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040de:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	ed93 7a00 	vldr	s14, [r3]
 80040f0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040f4:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80040f8:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80040fc:	0059      	lsls	r1, r3, #1
 80040fe:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004102:	440b      	add	r3, r1
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	edd3 6a00 	vldr	s13, [r3]
 800410c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004116:	443b      	add	r3, r7
 8004118:	3be0      	subs	r3, #224	@ 0xe0
 800411a:	edd3 7a00 	vldr	s15, [r3]
 800411e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004126:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800412a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 800413c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004140:	3301      	adds	r3, #1
 8004142:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8004146:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800414a:	2b01      	cmp	r3, #1
 800414c:	ddc5      	ble.n	80040da <KalmanFilter_MeasurementUpdate+0xb1e>
        for (int i = 0; i < 3; i++) {
 800414e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004152:	3301      	adds	r3, #1
 8004154:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004158:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800415c:	2b02      	cmp	r3, #2
 800415e:	ddb8      	ble.n	80040d2 <KalmanFilter_MeasurementUpdate+0xb16>
            }
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 8004160:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004164:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004168:	4618      	mov	r0, r3
 800416a:	2324      	movs	r3, #36	@ 0x24
 800416c:	461a      	mov	r2, r3
 800416e:	2100      	movs	r1, #0
 8004170:	f008 fec9 	bl	800cf06 <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 8004174:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004178:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800417c:	4618      	mov	r0, r3
 800417e:	2324      	movs	r3, #36	@ 0x24
 8004180:	461a      	mov	r2, r3
 8004182:	2100      	movs	r1, #0
 8004184:	f008 febf 	bl	800cf06 <memset>

        for (int i = 0; i < 3; i++) {
 8004188:	2300      	movs	r3, #0
 800418a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800418e:	e09e      	b.n	80042ce <KalmanFilter_MeasurementUpdate+0xd12>
            for (int j = 0; j < 3; j++) {
 8004190:	2300      	movs	r3, #0
 8004192:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004196:	e090      	b.n	80042ba <KalmanFilter_MeasurementUpdate+0xcfe>
                KH[i][j] = 0.0f;
 8004198:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800419c:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80041a0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80041a4:	4613      	mov	r3, r2
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	4413      	add	r3, r2
 80041aa:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 80041ba:	2300      	movs	r3, #0
 80041bc:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80041c0:	e045      	b.n	800424e <KalmanFilter_MeasurementUpdate+0xc92>
                    KH[i][j] += K[i][k] * H[k][j];
 80041c2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041c6:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80041ca:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80041ce:	4613      	mov	r3, r2
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	4413      	add	r3, r2
 80041d4:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	ed93 7a00 	vldr	s14, [r3]
 80041e2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041e6:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80041ea:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80041ee:	0059      	lsls	r1, r3, #1
 80041f0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80041f4:	440b      	add	r3, r1
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	edd3 6a00 	vldr	s13, [r3]
 80041fe:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8004202:	4613      	mov	r3, r2
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	4413      	add	r3, r2
 8004208:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800420c:	4413      	add	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004214:	443b      	add	r3, r7
 8004216:	3bd0      	subs	r3, #208	@ 0xd0
 8004218:	edd3 7a00 	vldr	s15, [r3]
 800421c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004224:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004228:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 800422c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004230:	4613      	mov	r3, r2
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	4413      	add	r3, r2
 8004236:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 8004244:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004248:	3301      	adds	r3, #1
 800424a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800424e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004252:	2b01      	cmp	r3, #1
 8004254:	ddb5      	ble.n	80041c2 <KalmanFilter_MeasurementUpdate+0xc06>
                }
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 8004256:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800425a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800425e:	429a      	cmp	r2, r3
 8004260:	d102      	bne.n	8004268 <KalmanFilter_MeasurementUpdate+0xcac>
 8004262:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004266:	e001      	b.n	800426c <KalmanFilter_MeasurementUpdate+0xcb0>
 8004268:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8004458 <KalmanFilter_MeasurementUpdate+0xe9c>
 800426c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004270:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004274:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004278:	4613      	mov	r3, r2
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	4413      	add	r3, r2
 800427e:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	edd3 7a00 	vldr	s15, [r3]
 800428c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004290:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004294:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8004298:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800429c:	4613      	mov	r3, r2
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	4413      	add	r3, r2
 80042a2:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 80042b0:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80042b4:	3301      	adds	r3, #1
 80042b6:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80042ba:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80042be:	2b02      	cmp	r3, #2
 80042c0:	f77f af6a 	ble.w	8004198 <KalmanFilter_MeasurementUpdate+0xbdc>
        for (int i = 0; i < 3; i++) {
 80042c4:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80042c8:	3301      	adds	r3, #1
 80042ca:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80042ce:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	f77f af5c 	ble.w	8004190 <KalmanFilter_MeasurementUpdate+0xbd4>
            }
        }

        for (int i = 0; i < 3; i++) {
 80042d8:	2300      	movs	r3, #0
 80042da:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80042de:	e076      	b.n	80043ce <KalmanFilter_MeasurementUpdate+0xe12>
            for (int j = 0; j < 3; j++) {
 80042e0:	2300      	movs	r3, #0
 80042e2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80042e6:	e069      	b.n	80043bc <KalmanFilter_MeasurementUpdate+0xe00>
                Pnew[i][j] = 0.0f;
 80042e8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042ec:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80042f0:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80042f4:	4613      	mov	r3, r2
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	4413      	add	r3, r2
 80042fa:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 800430a:	2300      	movs	r3, #0
 800430c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8004310:	e04b      	b.n	80043aa <KalmanFilter_MeasurementUpdate+0xdee>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 8004312:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004316:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 800431a:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 800431e:	4613      	mov	r3, r2
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	4413      	add	r3, r2
 8004324:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	ed93 7a00 	vldr	s14, [r3]
 8004332:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004336:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 800433a:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 800433e:	4613      	mov	r3, r2
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	4413      	add	r3, r2
 8004344:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8004348:	4413      	add	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	edd3 6a00 	vldr	s13, [r3]
 8004352:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004356:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800435a:	6819      	ldr	r1, [r3, #0]
 800435c:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8004360:	4613      	mov	r3, r2
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	4413      	add	r3, r2
 8004366:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 800436a:	4413      	add	r3, r2
 800436c:	3302      	adds	r3, #2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	3304      	adds	r3, #4
 8004374:	edd3 7a00 	vldr	s15, [r3]
 8004378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800437c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004380:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004384:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004388:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 800438c:	4613      	mov	r3, r2
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	4413      	add	r3, r2
 8004392:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 80043a0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80043a4:	3301      	adds	r3, #1
 80043a6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80043aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	ddaf      	ble.n	8004312 <KalmanFilter_MeasurementUpdate+0xd56>
            for (int j = 0; j < 3; j++) {
 80043b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80043b6:	3301      	adds	r3, #1
 80043b8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80043bc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	dd91      	ble.n	80042e8 <KalmanFilter_MeasurementUpdate+0xd2c>
        for (int i = 0; i < 3; i++) {
 80043c4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80043c8:	3301      	adds	r3, #1
 80043ca:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80043ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	dd84      	ble.n	80042e0 <KalmanFilter_MeasurementUpdate+0xd24>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 80043d6:	2300      	movs	r3, #0
 80043d8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80043dc:	e032      	b.n	8004444 <KalmanFilter_MeasurementUpdate+0xe88>
            for (int j = 0; j < 3; j++) {
 80043de:	2300      	movs	r3, #0
 80043e0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80043e4:	e025      	b.n	8004432 <KalmanFilter_MeasurementUpdate+0xe76>
                kf->P[i][j] = Pnew[i][j];
 80043e6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043ea:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80043ee:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80043f2:	4613      	mov	r3, r2
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	4413      	add	r3, r2
 80043f8:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80043fc:	4413      	add	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	6819      	ldr	r1, [r3, #0]
 8004404:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004408:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8004412:	4613      	mov	r3, r2
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	4413      	add	r3, r2
 8004418:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800441c:	4413      	add	r3, r2
 800441e:	3302      	adds	r3, #2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4403      	add	r3, r0
 8004424:	3304      	adds	r3, #4
 8004426:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 8004428:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800442c:	3301      	adds	r3, #1
 800442e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004432:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004436:	2b02      	cmp	r3, #2
 8004438:	ddd5      	ble.n	80043e6 <KalmanFilter_MeasurementUpdate+0xe2a>
        for (int i = 0; i < 3; i++) {
 800443a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800443e:	3301      	adds	r3, #1
 8004440:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004444:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004448:	2b02      	cmp	r3, #2
 800444a:	ddc8      	ble.n	80043de <KalmanFilter_MeasurementUpdate+0xe22>
 800444c:	e000      	b.n	8004450 <KalmanFilter_MeasurementUpdate+0xe94>
            return;
 800444e:	bf00      	nop
            }
        }
    }
}
 8004450:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8004454:	46bd      	mov	sp, r7
 8004456:	bdb0      	pop	{r4, r5, r7, pc}
 8004458:	00000000 	.word	0x00000000

0800445c <KalmanFilter_DetectApogee>:
/**
 * @brief Detect apogee based on velocity trend
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
static int KalmanFilter_DetectApogee(KalmanFilter_t *kf) {
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
    // Velocity is negative and magnitude is increasing
	if(kf->x[2] > 30.0){


	}
    if (kf->x[1] < 0.0f && kf->x[1] < kf->prev_velocity) {
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	edd3 7a01 	vldr	s15, [r3, #4]
 800446a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800446e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004472:	d517      	bpl.n	80044a4 <KalmanFilter_DetectApogee+0x48>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	ed93 7a01 	vldr	s14, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004480:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004488:	d50c      	bpl.n	80044a4 <KalmanFilter_DetectApogee+0x48>
        kf->apogee_counter++;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	641a      	str	r2, [r3, #64]	@ 0x40
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004498:	2b04      	cmp	r3, #4
 800449a:	dd06      	ble.n	80044aa <KalmanFilter_DetectApogee+0x4e>
            kf->apogee_detected = 1;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	63da      	str	r2, [r3, #60]	@ 0x3c
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 80044a2:	e002      	b.n	80044aa <KalmanFilter_DetectApogee+0x4e>
        }
    } else {
        kf->apogee_counter = 0;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    kf->prev_velocity = kf->x[1];
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	645a      	str	r2, [r3, #68]	@ 0x44
    return kf->apogee_detected;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <Kalman_Get_Velocity>:
float Kalman_Get_Velocity(KalmanFilter_t *kf){
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
	return kf->x[1];
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	ee07 3a90 	vmov	s15, r3
}
 80044d2:	eeb0 0a67 	vmov.f32	s0, s15
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <KalmanFilter_IsApogeeDetected>:
/**
 * @brief Check if apogee has been detected
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
int KalmanFilter_IsApogeeDetected(KalmanFilter_t *kf) {
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
    return kf->apogee_detected;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80044fe:	f003 f941 	bl	8007784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004502:	f000 f8af 	bl	8004664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004506:	f000 fa3f 	bl	8004988 <MX_GPIO_Init>
  MX_DMA_Init();
 800450a:	f000 fa15 	bl	8004938 <MX_DMA_Init>
  MX_I2C1_Init();
 800450e:	f000 f915 	bl	800473c <MX_I2C1_Init>
  MX_I2C3_Init();
 8004512:	f000 f941 	bl	8004798 <MX_I2C3_Init>
  MX_TIM2_Init();
 8004516:	f000 f96d 	bl	80047f4 <MX_TIM2_Init>
  MX_UART5_Init();
 800451a:	f000 f9b9 	bl	8004890 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800451e:	f000 f9e1 	bl	80048e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


	MX_TIM2_Init();
 8004522:	f000 f967 	bl	80047f4 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8004526:	4843      	ldr	r0, [pc, #268]	@ (8004634 <main+0x13c>)
 8004528:	f006 f84e 	bl	800a5c8 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800452c:	2200      	movs	r2, #0
 800452e:	2101      	movs	r1, #1
 8004530:	201c      	movs	r0, #28
 8004532:	f003 fabc 	bl	8007aae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004536:	201c      	movs	r0, #28
 8004538:	f003 fad5 	bl	8007ae6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 800453c:	2201      	movs	r2, #1
 800453e:	2100      	movs	r1, #0
 8004540:	2028      	movs	r0, #40	@ 0x28
 8004542:	f003 fab4 	bl	8007aae <HAL_NVIC_SetPriority>


	bme280_begin();
 8004546:	f000 fac5 	bl	8004ad4 <bme280_begin>
	bmi088_begin();
 800454a:	f000 fadb 	bl	8004b04 <bmi088_begin>
	HAL_Delay(1000);
 800454e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004552:	f003 f989 	bl	8007868 <HAL_Delay>
	bme280_config();
 8004556:	f7fc ff41 	bl	80013dc <bme280_config>
	bmi088_config();
 800455a:	f7fd fd23 	bl	8001fa4 <bmi088_config>
	if(is_BMI_ok){
 800455e:	4b36      	ldr	r3, [pc, #216]	@ (8004638 <main+0x140>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <main+0x72>
		  getOffset();
 8004566:	f7fe fb0d 	bl	8002b84 <getOffset>
	}

	bme280_update();
 800456a:	f7fd f8f3 	bl	8001754 <bme280_update>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800456e:	2028      	movs	r0, #40	@ 0x28
 8004570:	f003 fab9 	bl	8007ae6 <HAL_NVIC_EnableIRQ>
	BMI_sensor.rawDatas.isGyroUpdated = 0;
 8004574:	4b31      	ldr	r3, [pc, #196]	@ (800463c <main+0x144>)
 8004576:	2200      	movs	r2, #0
 8004578:	755a      	strb	r2, [r3, #21]
	BMI_sensor.rawDatas.isAccelUpdated = 0;
 800457a:	4b30      	ldr	r3, [pc, #192]	@ (800463c <main+0x144>)
 800457c:	2200      	movs	r2, #0
 800457e:	759a      	strb	r2, [r3, #22]

	getInitialQuaternion();
 8004580:	f001 ff38 	bl	80063f4 <getInitialQuaternion>

	//Lora Ayarı
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, SET);

	sensor_fusion_init(&BME280_sensor);
 8004584:	482e      	ldr	r0, [pc, #184]	@ (8004640 <main+0x148>)
 8004586:	f002 f9b7 	bl	80068f8 <sensor_fusion_init>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, usart1_rx_buffer, 36);
 800458a:	2224      	movs	r2, #36	@ 0x24
 800458c:	492d      	ldr	r1, [pc, #180]	@ (8004644 <main+0x14c>)
 800458e:	482e      	ldr	r0, [pc, #184]	@ (8004648 <main+0x150>)
 8004590:	f006 fd92 	bl	800b0b8 <HAL_UARTEx_ReceiveToIdle_DMA>
	flight_algorithm_set_parameters(50.0,2000.0,500.0,60.0);
 8004594:	eddf 1a2d 	vldr	s3, [pc, #180]	@ 800464c <main+0x154>
 8004598:	ed9f 1a2d 	vldr	s2, [pc, #180]	@ 8004650 <main+0x158>
 800459c:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8004654 <main+0x15c>
 80045a0:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8004658 <main+0x160>
 80045a4:	f7fe fd2c 	bl	8003000 <flight_algorithm_set_parameters>


	uart_handler_init();
 80045a8:	f002 ff2a 	bl	8007400 <uart_handler_init>
	flight_algorithm_init();
 80045ac:	f7fe fb74 	bl	8002c98 <flight_algorithm_init>
    /* USER CODE BEGIN 3 */




	bmi088_update();
 80045b0:	f7fd ff3e 	bl	8002430 <bmi088_update>
		  sensor_fusion_update_mahony(&BMI_sensor, &sensor_output);
 80045b4:	4929      	ldr	r1, [pc, #164]	@ (800465c <main+0x164>)
 80045b6:	4821      	ldr	r0, [pc, #132]	@ (800463c <main+0x144>)
 80045b8:	f002 faa4 	bl	8006b04 <sensor_fusion_update_mahony>
		  bme280_update();
 80045bc:	f7fd f8ca 	bl	8001754 <bme280_update>

		  // Process UART packets and handle mode changes
		  uart_handler_process_packets();
 80045c0:	f002 ff38 	bl	8007434 <uart_handler_process_packets>

		  // Clear command flag if it was set
		  if (uart_handler_command_ready()) {
 80045c4:	f003 f834 	bl	8007630 <uart_handler_command_ready>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d008      	beq.n	80045e0 <main+0xe8>
			  uart_handler_clear_command_flag();
 80045ce:	f003 f85d 	bl	800768c <uart_handler_clear_command_flag>
			  // Reset flight algorithm if switching to NORMAL mode
			  if (uart_handler_get_mode() == MODE_NORMAL) {
 80045d2:	f003 f821 	bl	8007618 <uart_handler_get_mode>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <main+0xe8>
				  flight_algorithm_reset();
 80045dc:	f7fe fb62 	bl	8002ca4 <flight_algorithm_reset>
			  }
		  }

		  if (tx_timer_flag) {
 80045e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004660 <main+0x168>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0e2      	beq.n	80045b0 <main+0xb8>
			tx_timer_flag = 0;
 80045ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004660 <main+0x168>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	701a      	strb	r2, [r3, #0]
			//IMU_visual();
			SystemMode_t current_mode = uart_handler_get_mode();
 80045f0:	f003 f812 	bl	8007618 <uart_handler_get_mode>
 80045f4:	4603      	mov	r3, r0
 80045f6:	71fb      	strb	r3, [r7, #7]

				switch (current_mode) {
 80045f8:	79fb      	ldrb	r3, [r7, #7]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d016      	beq.n	800462c <main+0x134>
 80045fe:	2b02      	cmp	r3, #2
 8004600:	dcd6      	bgt.n	80045b0 <main+0xb8>
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <main+0x114>
 8004606:	2b01      	cmp	r3, #1
 8004608:	d00b      	beq.n	8004622 <main+0x12a>
 800460a:	e012      	b.n	8004632 <main+0x13a>
					case MODE_NORMAL:
						sensor_fusion_update_kalman(&BME280_sensor, &BMI_sensor, &sensor_output);
 800460c:	4a13      	ldr	r2, [pc, #76]	@ (800465c <main+0x164>)
 800460e:	490b      	ldr	r1, [pc, #44]	@ (800463c <main+0x144>)
 8004610:	480b      	ldr	r0, [pc, #44]	@ (8004640 <main+0x148>)
 8004612:	f002 f9c5 	bl	80069a0 <sensor_fusion_update_kalman>
						flight_algorithm_update(&BME280_sensor, &BMI_sensor, &sensor_output);
 8004616:	4a11      	ldr	r2, [pc, #68]	@ (800465c <main+0x164>)
 8004618:	4908      	ldr	r1, [pc, #32]	@ (800463c <main+0x144>)
 800461a:	4809      	ldr	r0, [pc, #36]	@ (8004640 <main+0x148>)
 800461c:	f7fe fb92 	bl	8002d44 <flight_algorithm_update>
						break;
 8004620:	e007      	b.n	8004632 <main+0x13a>

					case MODE_SIT:
						test_modes_handle_sit(&BME280_sensor, &BMI_sensor);
 8004622:	4906      	ldr	r1, [pc, #24]	@ (800463c <main+0x144>)
 8004624:	4806      	ldr	r0, [pc, #24]	@ (8004640 <main+0x148>)
 8004626:	f002 fe0d 	bl	8007244 <test_modes_handle_sit>
						break;
 800462a:	e002      	b.n	8004632 <main+0x13a>

					case MODE_SUT:
						algorithm_update_sut();
 800462c:	f002 fe22 	bl	8007274 <algorithm_update_sut>
						break;
 8004630:	bf00      	nop
	bmi088_update();
 8004632:	e7bd      	b.n	80045b0 <main+0xb8>
 8004634:	2000035c 	.word	0x2000035c
 8004638:	200006c0 	.word	0x200006c0
 800463c:	20000538 	.word	0x20000538
 8004640:	200004f4 	.word	0x200004f4
 8004644:	20000674 	.word	0x20000674
 8004648:	200003ec 	.word	0x200003ec
 800464c:	42700000 	.word	0x42700000
 8004650:	43fa0000 	.word	0x43fa0000
 8004654:	44fa0000 	.word	0x44fa0000
 8004658:	42480000 	.word	0x42480000
 800465c:	20000648 	.word	0x20000648
 8004660:	200006c8 	.word	0x200006c8

08004664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b094      	sub	sp, #80	@ 0x50
 8004668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800466a:	f107 031c 	add.w	r3, r7, #28
 800466e:	2234      	movs	r2, #52	@ 0x34
 8004670:	2100      	movs	r1, #0
 8004672:	4618      	mov	r0, r3
 8004674:	f008 fc47 	bl	800cf06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004678:	f107 0308 	add.w	r3, r7, #8
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	609a      	str	r2, [r3, #8]
 8004684:	60da      	str	r2, [r3, #12]
 8004686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004688:	2300      	movs	r3, #0
 800468a:	607b      	str	r3, [r7, #4]
 800468c:	4b29      	ldr	r3, [pc, #164]	@ (8004734 <SystemClock_Config+0xd0>)
 800468e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004690:	4a28      	ldr	r2, [pc, #160]	@ (8004734 <SystemClock_Config+0xd0>)
 8004692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004696:	6413      	str	r3, [r2, #64]	@ 0x40
 8004698:	4b26      	ldr	r3, [pc, #152]	@ (8004734 <SystemClock_Config+0xd0>)
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a0:	607b      	str	r3, [r7, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046a4:	2300      	movs	r3, #0
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	4b23      	ldr	r3, [pc, #140]	@ (8004738 <SystemClock_Config+0xd4>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a22      	ldr	r2, [pc, #136]	@ (8004738 <SystemClock_Config+0xd4>)
 80046ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	4b20      	ldr	r3, [pc, #128]	@ (8004738 <SystemClock_Config+0xd4>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80046c0:	2301      	movs	r3, #1
 80046c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80046c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80046c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046ca:	2302      	movs	r3, #2
 80046cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80046ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80046d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80046d4:	2308      	movs	r3, #8
 80046d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80046d8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80046dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80046de:	2302      	movs	r3, #2
 80046e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80046e2:	2302      	movs	r3, #2
 80046e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80046e6:	2302      	movs	r3, #2
 80046e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046ea:	f107 031c 	add.w	r3, r7, #28
 80046ee:	4618      	mov	r0, r3
 80046f0:	f005 fc7c 	bl	8009fec <HAL_RCC_OscConfig>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80046fa:	f000 faaf 	bl	8004c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046fe:	230f      	movs	r3, #15
 8004700:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004702:	2302      	movs	r3, #2
 8004704:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004706:	2300      	movs	r3, #0
 8004708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800470a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800470e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004714:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004716:	f107 0308 	add.w	r3, r7, #8
 800471a:	2105      	movs	r1, #5
 800471c:	4618      	mov	r0, r3
 800471e:	f005 f91b 	bl	8009958 <HAL_RCC_ClockConfig>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8004728:	f000 fa98 	bl	8004c5c <Error_Handler>
  }
}
 800472c:	bf00      	nop
 800472e:	3750      	adds	r7, #80	@ 0x50
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40023800 	.word	0x40023800
 8004738:	40007000 	.word	0x40007000

0800473c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004740:	4b12      	ldr	r3, [pc, #72]	@ (800478c <MX_I2C1_Init+0x50>)
 8004742:	4a13      	ldr	r2, [pc, #76]	@ (8004790 <MX_I2C1_Init+0x54>)
 8004744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004746:	4b11      	ldr	r3, [pc, #68]	@ (800478c <MX_I2C1_Init+0x50>)
 8004748:	4a12      	ldr	r2, [pc, #72]	@ (8004794 <MX_I2C1_Init+0x58>)
 800474a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800474c:	4b0f      	ldr	r3, [pc, #60]	@ (800478c <MX_I2C1_Init+0x50>)
 800474e:	2200      	movs	r2, #0
 8004750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004752:	4b0e      	ldr	r3, [pc, #56]	@ (800478c <MX_I2C1_Init+0x50>)
 8004754:	2200      	movs	r2, #0
 8004756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004758:	4b0c      	ldr	r3, [pc, #48]	@ (800478c <MX_I2C1_Init+0x50>)
 800475a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800475e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004760:	4b0a      	ldr	r3, [pc, #40]	@ (800478c <MX_I2C1_Init+0x50>)
 8004762:	2200      	movs	r2, #0
 8004764:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004766:	4b09      	ldr	r3, [pc, #36]	@ (800478c <MX_I2C1_Init+0x50>)
 8004768:	2200      	movs	r2, #0
 800476a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800476c:	4b07      	ldr	r3, [pc, #28]	@ (800478c <MX_I2C1_Init+0x50>)
 800476e:	2200      	movs	r2, #0
 8004770:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004772:	4b06      	ldr	r3, [pc, #24]	@ (800478c <MX_I2C1_Init+0x50>)
 8004774:	2200      	movs	r2, #0
 8004776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004778:	4804      	ldr	r0, [pc, #16]	@ (800478c <MX_I2C1_Init+0x50>)
 800477a:	f004 f899 	bl	80088b0 <HAL_I2C_Init>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004784:	f000 fa6a 	bl	8004c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004788:	bf00      	nop
 800478a:	bd80      	pop	{r7, pc}
 800478c:	200002b4 	.word	0x200002b4
 8004790:	40005400 	.word	0x40005400
 8004794:	000186a0 	.word	0x000186a0

08004798 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800479c:	4b12      	ldr	r3, [pc, #72]	@ (80047e8 <MX_I2C3_Init+0x50>)
 800479e:	4a13      	ldr	r2, [pc, #76]	@ (80047ec <MX_I2C3_Init+0x54>)
 80047a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80047a2:	4b11      	ldr	r3, [pc, #68]	@ (80047e8 <MX_I2C3_Init+0x50>)
 80047a4:	4a12      	ldr	r2, [pc, #72]	@ (80047f0 <MX_I2C3_Init+0x58>)
 80047a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80047a8:	4b0f      	ldr	r3, [pc, #60]	@ (80047e8 <MX_I2C3_Init+0x50>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80047ae:	4b0e      	ldr	r3, [pc, #56]	@ (80047e8 <MX_I2C3_Init+0x50>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047b4:	4b0c      	ldr	r3, [pc, #48]	@ (80047e8 <MX_I2C3_Init+0x50>)
 80047b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80047ba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80047bc:	4b0a      	ldr	r3, [pc, #40]	@ (80047e8 <MX_I2C3_Init+0x50>)
 80047be:	2200      	movs	r2, #0
 80047c0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80047c2:	4b09      	ldr	r3, [pc, #36]	@ (80047e8 <MX_I2C3_Init+0x50>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80047c8:	4b07      	ldr	r3, [pc, #28]	@ (80047e8 <MX_I2C3_Init+0x50>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80047ce:	4b06      	ldr	r3, [pc, #24]	@ (80047e8 <MX_I2C3_Init+0x50>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80047d4:	4804      	ldr	r0, [pc, #16]	@ (80047e8 <MX_I2C3_Init+0x50>)
 80047d6:	f004 f86b 	bl	80088b0 <HAL_I2C_Init>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80047e0:	f000 fa3c 	bl	8004c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80047e4:	bf00      	nop
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	20000308 	.word	0x20000308
 80047ec:	40005c00 	.word	0x40005c00
 80047f0:	000186a0 	.word	0x000186a0

080047f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047fa:	f107 0308 	add.w	r3, r7, #8
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	605a      	str	r2, [r3, #4]
 8004804:	609a      	str	r2, [r3, #8]
 8004806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004808:	463b      	mov	r3, r7
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004810:	4b1e      	ldr	r3, [pc, #120]	@ (800488c <MX_TIM2_Init+0x98>)
 8004812:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004816:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 8004818:	4b1c      	ldr	r3, [pc, #112]	@ (800488c <MX_TIM2_Init+0x98>)
 800481a:	f242 3227 	movw	r2, #8999	@ 0x2327
 800481e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004820:	4b1a      	ldr	r3, [pc, #104]	@ (800488c <MX_TIM2_Init+0x98>)
 8004822:	2200      	movs	r2, #0
 8004824:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8004826:	4b19      	ldr	r3, [pc, #100]	@ (800488c <MX_TIM2_Init+0x98>)
 8004828:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800482c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800482e:	4b17      	ldr	r3, [pc, #92]	@ (800488c <MX_TIM2_Init+0x98>)
 8004830:	2200      	movs	r2, #0
 8004832:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004834:	4b15      	ldr	r3, [pc, #84]	@ (800488c <MX_TIM2_Init+0x98>)
 8004836:	2200      	movs	r2, #0
 8004838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800483a:	4814      	ldr	r0, [pc, #80]	@ (800488c <MX_TIM2_Init+0x98>)
 800483c:	f005 fe74 	bl	800a528 <HAL_TIM_Base_Init>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004846:	f000 fa09 	bl	8004c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800484a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800484e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004850:	f107 0308 	add.w	r3, r7, #8
 8004854:	4619      	mov	r1, r3
 8004856:	480d      	ldr	r0, [pc, #52]	@ (800488c <MX_TIM2_Init+0x98>)
 8004858:	f006 f816 	bl	800a888 <HAL_TIM_ConfigClockSource>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004862:	f000 f9fb 	bl	8004c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004866:	2300      	movs	r3, #0
 8004868:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800486a:	2300      	movs	r3, #0
 800486c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800486e:	463b      	mov	r3, r7
 8004870:	4619      	mov	r1, r3
 8004872:	4806      	ldr	r0, [pc, #24]	@ (800488c <MX_TIM2_Init+0x98>)
 8004874:	f006 fa38 	bl	800ace8 <HAL_TIMEx_MasterConfigSynchronization>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800487e:	f000 f9ed 	bl	8004c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004882:	bf00      	nop
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	2000035c 	.word	0x2000035c

08004890 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004894:	4b11      	ldr	r3, [pc, #68]	@ (80048dc <MX_UART5_Init+0x4c>)
 8004896:	4a12      	ldr	r2, [pc, #72]	@ (80048e0 <MX_UART5_Init+0x50>)
 8004898:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800489a:	4b10      	ldr	r3, [pc, #64]	@ (80048dc <MX_UART5_Init+0x4c>)
 800489c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80048a0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80048a2:	4b0e      	ldr	r3, [pc, #56]	@ (80048dc <MX_UART5_Init+0x4c>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80048a8:	4b0c      	ldr	r3, [pc, #48]	@ (80048dc <MX_UART5_Init+0x4c>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80048ae:	4b0b      	ldr	r3, [pc, #44]	@ (80048dc <MX_UART5_Init+0x4c>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80048b4:	4b09      	ldr	r3, [pc, #36]	@ (80048dc <MX_UART5_Init+0x4c>)
 80048b6:	220c      	movs	r2, #12
 80048b8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048ba:	4b08      	ldr	r3, [pc, #32]	@ (80048dc <MX_UART5_Init+0x4c>)
 80048bc:	2200      	movs	r2, #0
 80048be:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80048c0:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <MX_UART5_Init+0x4c>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80048c6:	4805      	ldr	r0, [pc, #20]	@ (80048dc <MX_UART5_Init+0x4c>)
 80048c8:	f006 fa9e 	bl	800ae08 <HAL_UART_Init>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80048d2:	f000 f9c3 	bl	8004c5c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	200003a4 	.word	0x200003a4
 80048e0:	40005000 	.word	0x40005000

080048e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80048e8:	4b11      	ldr	r3, [pc, #68]	@ (8004930 <MX_USART1_UART_Init+0x4c>)
 80048ea:	4a12      	ldr	r2, [pc, #72]	@ (8004934 <MX_USART1_UART_Init+0x50>)
 80048ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80048ee:	4b10      	ldr	r3, [pc, #64]	@ (8004930 <MX_USART1_UART_Init+0x4c>)
 80048f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80048f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004930 <MX_USART1_UART_Init+0x4c>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80048fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004930 <MX_USART1_UART_Init+0x4c>)
 80048fe:	2200      	movs	r2, #0
 8004900:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004902:	4b0b      	ldr	r3, [pc, #44]	@ (8004930 <MX_USART1_UART_Init+0x4c>)
 8004904:	2200      	movs	r2, #0
 8004906:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004908:	4b09      	ldr	r3, [pc, #36]	@ (8004930 <MX_USART1_UART_Init+0x4c>)
 800490a:	220c      	movs	r2, #12
 800490c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800490e:	4b08      	ldr	r3, [pc, #32]	@ (8004930 <MX_USART1_UART_Init+0x4c>)
 8004910:	2200      	movs	r2, #0
 8004912:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004914:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <MX_USART1_UART_Init+0x4c>)
 8004916:	2200      	movs	r2, #0
 8004918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800491a:	4805      	ldr	r0, [pc, #20]	@ (8004930 <MX_USART1_UART_Init+0x4c>)
 800491c:	f006 fa74 	bl	800ae08 <HAL_UART_Init>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004926:	f000 f999 	bl	8004c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800492a:	bf00      	nop
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	200003ec 	.word	0x200003ec
 8004934:	40011000 	.word	0x40011000

08004938 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800493e:	2300      	movs	r3, #0
 8004940:	607b      	str	r3, [r7, #4]
 8004942:	4b10      	ldr	r3, [pc, #64]	@ (8004984 <MX_DMA_Init+0x4c>)
 8004944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004946:	4a0f      	ldr	r2, [pc, #60]	@ (8004984 <MX_DMA_Init+0x4c>)
 8004948:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800494c:	6313      	str	r3, [r2, #48]	@ 0x30
 800494e:	4b0d      	ldr	r3, [pc, #52]	@ (8004984 <MX_DMA_Init+0x4c>)
 8004950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004956:	607b      	str	r3, [r7, #4]
 8004958:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800495a:	2200      	movs	r2, #0
 800495c:	2100      	movs	r1, #0
 800495e:	203a      	movs	r0, #58	@ 0x3a
 8004960:	f003 f8a5 	bl	8007aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004964:	203a      	movs	r0, #58	@ 0x3a
 8004966:	f003 f8be 	bl	8007ae6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800496a:	2200      	movs	r2, #0
 800496c:	2100      	movs	r1, #0
 800496e:	2046      	movs	r0, #70	@ 0x46
 8004970:	f003 f89d 	bl	8007aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8004974:	2046      	movs	r0, #70	@ 0x46
 8004976:	f003 f8b6 	bl	8007ae6 <HAL_NVIC_EnableIRQ>

}
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40023800 	.word	0x40023800

08004988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	@ 0x28
 800498c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800498e:	f107 0314 	add.w	r3, r7, #20
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	605a      	str	r2, [r3, #4]
 8004998:	609a      	str	r2, [r3, #8]
 800499a:	60da      	str	r2, [r3, #12]
 800499c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800499e:	2300      	movs	r3, #0
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	4b49      	ldr	r3, [pc, #292]	@ (8004ac8 <MX_GPIO_Init+0x140>)
 80049a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a6:	4a48      	ldr	r2, [pc, #288]	@ (8004ac8 <MX_GPIO_Init+0x140>)
 80049a8:	f043 0304 	orr.w	r3, r3, #4
 80049ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80049ae:	4b46      	ldr	r3, [pc, #280]	@ (8004ac8 <MX_GPIO_Init+0x140>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b2:	f003 0304 	and.w	r3, r3, #4
 80049b6:	613b      	str	r3, [r7, #16]
 80049b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	4b42      	ldr	r3, [pc, #264]	@ (8004ac8 <MX_GPIO_Init+0x140>)
 80049c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c2:	4a41      	ldr	r2, [pc, #260]	@ (8004ac8 <MX_GPIO_Init+0x140>)
 80049c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80049ca:	4b3f      	ldr	r3, [pc, #252]	@ (8004ac8 <MX_GPIO_Init+0x140>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049d6:	2300      	movs	r3, #0
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	4b3b      	ldr	r3, [pc, #236]	@ (8004ac8 <MX_GPIO_Init+0x140>)
 80049dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049de:	4a3a      	ldr	r2, [pc, #232]	@ (8004ac8 <MX_GPIO_Init+0x140>)
 80049e0:	f043 0302 	orr.w	r3, r3, #2
 80049e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80049e6:	4b38      	ldr	r3, [pc, #224]	@ (8004ac8 <MX_GPIO_Init+0x140>)
 80049e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	60bb      	str	r3, [r7, #8]
 80049f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	607b      	str	r3, [r7, #4]
 80049f6:	4b34      	ldr	r3, [pc, #208]	@ (8004ac8 <MX_GPIO_Init+0x140>)
 80049f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fa:	4a33      	ldr	r2, [pc, #204]	@ (8004ac8 <MX_GPIO_Init+0x140>)
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a02:	4b31      	ldr	r3, [pc, #196]	@ (8004ac8 <MX_GPIO_Init+0x140>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	607b      	str	r3, [r7, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a0e:	2300      	movs	r3, #0
 8004a10:	603b      	str	r3, [r7, #0]
 8004a12:	4b2d      	ldr	r3, [pc, #180]	@ (8004ac8 <MX_GPIO_Init+0x140>)
 8004a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a16:	4a2c      	ldr	r2, [pc, #176]	@ (8004ac8 <MX_GPIO_Init+0x140>)
 8004a18:	f043 0308 	orr.w	r3, r3, #8
 8004a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8004ac8 <MX_GPIO_Init+0x140>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a30:	4826      	ldr	r0, [pc, #152]	@ (8004acc <MX_GPIO_Init+0x144>)
 8004a32:	f003 ff0b 	bl	800884c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004a36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a3c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a46:	f107 0314 	add.w	r3, r7, #20
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	481f      	ldr	r0, [pc, #124]	@ (8004acc <MX_GPIO_Init+0x144>)
 8004a4e:	f003 fc75 	bl	800833c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004a52:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a60:	2300      	movs	r3, #0
 8004a62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a64:	f107 0314 	add.w	r3, r7, #20
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4818      	ldr	r0, [pc, #96]	@ (8004acc <MX_GPIO_Init+0x144>)
 8004a6c:	f003 fc66 	bl	800833c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004a70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a76:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a80:	f107 0314 	add.w	r3, r7, #20
 8004a84:	4619      	mov	r1, r3
 8004a86:	4812      	ldr	r0, [pc, #72]	@ (8004ad0 <MX_GPIO_Init+0x148>)
 8004a88:	f003 fc58 	bl	800833c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2100      	movs	r1, #0
 8004a90:	2028      	movs	r0, #40	@ 0x28
 8004a92:	f003 f80c 	bl	8007aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004a96:	2028      	movs	r0, #40	@ 0x28
 8004a98:	f003 f825 	bl	8007ae6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004aa2:	480a      	ldr	r0, [pc, #40]	@ (8004acc <MX_GPIO_Init+0x144>)
 8004aa4:	f003 fed2 	bl	800884c <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8004aa8:	2032      	movs	r0, #50	@ 0x32
 8004aaa:	f002 fedd 	bl	8007868 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004ab4:	4805      	ldr	r0, [pc, #20]	@ (8004acc <MX_GPIO_Init+0x144>)
 8004ab6:	f003 fec9 	bl	800884c <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8004aba:	2032      	movs	r0, #50	@ 0x32
 8004abc:	f002 fed4 	bl	8007868 <HAL_Delay>
/* USER CODE END MX_GPIO_Init_2 */
}
 8004ac0:	bf00      	nop
 8004ac2:	3728      	adds	r7, #40	@ 0x28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	40020400 	.word	0x40020400
 8004ad0:	40020000 	.word	0x40020000

08004ad4 <bme280_begin>:

/* USER CODE BEGIN 4 */
void bme280_begin()
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
	BME280_sensor.device_config.bme280_filter = 			BME280_FILTER_8;
 8004ad8:	4b08      	ldr	r3, [pc, #32]	@ (8004afc <bme280_begin+0x28>)
 8004ada:	2203      	movs	r2, #3
 8004adc:	711a      	strb	r2, [r3, #4]
	BME280_sensor.device_config.bme280_mode =				BME280_MODE_NORMAL;
 8004ade:	4b07      	ldr	r3, [pc, #28]	@ (8004afc <bme280_begin+0x28>)
 8004ae0:	2203      	movs	r2, #3
 8004ae2:	715a      	strb	r2, [r3, #5]
	BME280_sensor.device_config.bme280_output_speed =		BME280_OS_8;
 8004ae4:	4b05      	ldr	r3, [pc, #20]	@ (8004afc <bme280_begin+0x28>)
 8004ae6:	2204      	movs	r2, #4
 8004ae8:	719a      	strb	r2, [r3, #6]
	BME280_sensor.device_config.bme280_standby_time = 		BME280_STBY_20;
 8004aea:	4b04      	ldr	r3, [pc, #16]	@ (8004afc <bme280_begin+0x28>)
 8004aec:	2207      	movs	r2, #7
 8004aee:	71da      	strb	r2, [r3, #7]
	bme280_init(&BME280_sensor, &hi2c1);
 8004af0:	4903      	ldr	r1, [pc, #12]	@ (8004b00 <bme280_begin+0x2c>)
 8004af2:	4802      	ldr	r0, [pc, #8]	@ (8004afc <bme280_begin+0x28>)
 8004af4:	f7fc fdf6 	bl	80016e4 <bme280_init>

}
 8004af8:	bf00      	nop
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	200004f4 	.word	0x200004f4
 8004b00:	200002b4 	.word	0x200002b4

08004b04 <bmi088_begin>:

void bmi088_begin()
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
	//Acccel config
	BMI_sensor.deviceConfig.acc_bandwith = ACC_BWP_OSR4;
 8004b08:	4b0d      	ldr	r3, [pc, #52]	@ (8004b40 <bmi088_begin+0x3c>)
 8004b0a:	2208      	movs	r2, #8
 8004b0c:	765a      	strb	r2, [r3, #25]
	BMI_sensor.deviceConfig.acc_outputDateRate = ACC_ODR_200;
 8004b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b40 <bmi088_begin+0x3c>)
 8004b10:	2209      	movs	r2, #9
 8004b12:	769a      	strb	r2, [r3, #26]
	BMI_sensor.deviceConfig.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8004b14:	4b0a      	ldr	r3, [pc, #40]	@ (8004b40 <bmi088_begin+0x3c>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	75da      	strb	r2, [r3, #23]
	BMI_sensor.deviceConfig.acc_range = ACC_RANGE_12G;
 8004b1a:	4b09      	ldr	r3, [pc, #36]	@ (8004b40 <bmi088_begin+0x3c>)
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	761a      	strb	r2, [r3, #24]

	//Gyro config
	BMI_sensor.deviceConfig.gyro_bandWidth = GYRO_BW_116;
 8004b20:	4b07      	ldr	r3, [pc, #28]	@ (8004b40 <bmi088_begin+0x3c>)
 8004b22:	2202      	movs	r2, #2
 8004b24:	771a      	strb	r2, [r3, #28]
	BMI_sensor.deviceConfig.gyro_range = GYRO_RANGE_2000;
 8004b26:	4b06      	ldr	r3, [pc, #24]	@ (8004b40 <bmi088_begin+0x3c>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	775a      	strb	r2, [r3, #29]
	BMI_sensor.deviceConfig.gyro_powerMode = GYRO_LPM_NORMAL;
 8004b2c:	4b04      	ldr	r3, [pc, #16]	@ (8004b40 <bmi088_begin+0x3c>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	76da      	strb	r2, [r3, #27]
	bmi088_init(&BMI_sensor, &hi2c3);
 8004b32:	4904      	ldr	r1, [pc, #16]	@ (8004b44 <bmi088_begin+0x40>)
 8004b34:	4802      	ldr	r0, [pc, #8]	@ (8004b40 <bmi088_begin+0x3c>)
 8004b36:	f7fd fc1f 	bl	8002378 <bmi088_init>
}
 8004b3a:	bf00      	nop
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000538 	.word	0x20000538
 8004b44:	20000308 	.word	0x20000308

08004b48 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	80fb      	strh	r3, [r7, #6]

    if(GPIO_Pin == GPIO_PIN_13)
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b58:	d101      	bne.n	8004b5e <HAL_GPIO_EXTI_Callback+0x16>
    {
    	bmi088_getGyroDatas_INT();
 8004b5a:	f7fe f805 	bl	8002b68 <bmi088_getGyroDatas_INT>
    }
    if(GPIO_Pin == GPIO_PIN_12)
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b64:	d101      	bne.n	8004b6a <HAL_GPIO_EXTI_Callback+0x22>
    {
    	bmi088_getAccelDatas_INT();
 8004b66:	f7fd fff1 	bl	8002b4c <bmi088_getAccelDatas_INT>
    }
}
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1) {
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a0d      	ldr	r2, [pc, #52]	@ (8004bbc <HAL_UARTEx_RxEventCallback+0x48>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d114      	bne.n	8004bb4 <HAL_UARTEx_RxEventCallback+0x40>
        usart1_packet_ready = 1;
 8004b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc0 <HAL_UARTEx_RxEventCallback+0x4c>)
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	701a      	strb	r2, [r3, #0]
        usart1_packet_size = Size;
 8004b90:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc4 <HAL_UARTEx_RxEventCallback+0x50>)
 8004b92:	887b      	ldrh	r3, [r7, #2]
 8004b94:	8013      	strh	r3, [r2, #0]
        // RX DMA'yı tekrar başlat
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, usart1_rx_buffer, sizeof(usart1_rx_buffer));
 8004b96:	2224      	movs	r2, #36	@ 0x24
 8004b98:	490b      	ldr	r1, [pc, #44]	@ (8004bc8 <HAL_UARTEx_RxEventCallback+0x54>)
 8004b9a:	480c      	ldr	r0, [pc, #48]	@ (8004bcc <HAL_UARTEx_RxEventCallback+0x58>)
 8004b9c:	f006 fa8c 	bl	800b0b8 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT); // Half-transfer interrupt'ı devre dışı bırak
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bcc <HAL_UARTEx_RxEventCallback+0x58>)
 8004ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b08      	ldr	r3, [pc, #32]	@ (8004bcc <HAL_UARTEx_RxEventCallback+0x58>)
 8004baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0208 	bic.w	r2, r2, #8
 8004bb2:	601a      	str	r2, [r3, #0]
    }
}
 8004bb4:	bf00      	nop
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40011000 	.word	0x40011000
 8004bc0:	200006c4 	.word	0x200006c4
 8004bc4:	200006c6 	.word	0x200006c6
 8004bc8:	20000674 	.word	0x20000674
 8004bcc:	200003ec 	.word	0x200003ec

08004bd0 <HAL_TIM_PeriodElapsedCallback>:

// Timer 2 interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004be0:	d102      	bne.n	8004be8 <HAL_TIM_PeriodElapsedCallback+0x18>
        tx_timer_flag = 1;
 8004be2:	4b04      	ldr	r3, [pc, #16]	@ (8004bf4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8004be4:	2201      	movs	r2, #1
 8004be6:	701a      	strb	r2, [r3, #0]
    }
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	200006c8 	.word	0x200006c8

08004bf8 <HAL_UART_TxCpltCallback>:

// USART1 TX DMA tamam callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a05      	ldr	r2, [pc, #20]	@ (8004c1c <HAL_UART_TxCpltCallback+0x24>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d102      	bne.n	8004c10 <HAL_UART_TxCpltCallback+0x18>
        usart1_tx_busy = 0;
 8004c0a:	4b05      	ldr	r3, [pc, #20]	@ (8004c20 <HAL_UART_TxCpltCallback+0x28>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
    }
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	40011000 	.word	0x40011000
 8004c20:	200006c9 	.word	0x200006c9

08004c24 <uart1_send_packet_dma>:

// USART1 TX DMA başlatma fonksiyonu
void uart1_send_packet_dma(uint8_t *data, uint16_t size)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	807b      	strh	r3, [r7, #2]
    if (!usart1_tx_busy) {
 8004c30:	4b08      	ldr	r3, [pc, #32]	@ (8004c54 <uart1_send_packet_dma+0x30>)
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d108      	bne.n	8004c4c <uart1_send_packet_dma+0x28>
        usart1_tx_busy = 1;
 8004c3a:	4b06      	ldr	r3, [pc, #24]	@ (8004c54 <uart1_send_packet_dma+0x30>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_DMA(&huart1, data, size);
 8004c40:	887b      	ldrh	r3, [r7, #2]
 8004c42:	461a      	mov	r2, r3
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	4804      	ldr	r0, [pc, #16]	@ (8004c58 <uart1_send_packet_dma+0x34>)
 8004c48:	f006 f9ba 	bl	800afc0 <HAL_UART_Transmit_DMA>
    }
}
 8004c4c:	bf00      	nop
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	200006c9 	.word	0x200006c9
 8004c58:	200003ec 	.word	0x200003ec

08004c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c60:	b672      	cpsid	i
}
 8004c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004c64:	bf00      	nop
 8004c66:	e7fd      	b.n	8004c64 <Error_Handler+0x8>

08004c68 <check_sum_hesapla_sit>:
        check_sum += normal_paket[i];
    }
    return (unsigned char) (check_sum % 256);
}

unsigned char check_sum_hesapla_sit(int a){
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8004c74:	2300      	movs	r3, #0
 8004c76:	60bb      	str	r3, [r7, #8]
 8004c78:	e00a      	b.n	8004c90 <check_sum_hesapla_sit+0x28>
        check_sum += sit_paket[i];
 8004c7a:	4a0e      	ldr	r2, [pc, #56]	@ (8004cb4 <check_sum_hesapla_sit+0x4c>)
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4413      	add	r3, r2
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	60bb      	str	r3, [r7, #8]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	dbf0      	blt.n	8004c7a <check_sum_hesapla_sit+0x12>
    }
    return (unsigned char) (check_sum % 256);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	425a      	negs	r2, r3
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	bf58      	it	pl
 8004ca2:	4253      	negpl	r3, r2
 8004ca4:	b2db      	uxtb	r3, r3
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	200006cc 	.word	0x200006cc

08004cb8 <round2>:

// Float değerleri iki ondalık basamağa yuvarlamak için yardımcı fonksiyon
double round2(double value) {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	ed87 0b00 	vstr	d0, [r7]
    return round(value * 100.0) / 100.0;
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	4b10      	ldr	r3, [pc, #64]	@ (8004d08 <round2+0x50>)
 8004cc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ccc:	f7fb fcb4 	bl	8000638 <__aeabi_dmul>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	ec43 2b17 	vmov	d7, r2, r3
 8004cd8:	eeb0 0a47 	vmov.f32	s0, s14
 8004cdc:	eef0 0a67 	vmov.f32	s1, s15
 8004ce0:	f00a faea 	bl	800f2b8 <round>
 8004ce4:	ec51 0b10 	vmov	r0, r1, d0
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	4b06      	ldr	r3, [pc, #24]	@ (8004d08 <round2+0x50>)
 8004cee:	f7fb fdcd 	bl	800088c <__aeabi_ddiv>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	ec43 2b17 	vmov	d7, r2, r3
}
 8004cfa:	eeb0 0a47 	vmov.f32	s0, s14
 8004cfe:	eef0 0a67 	vmov.f32	s1, s15
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40590000 	.word	0x40590000

08004d0c <addDataPacketSit>:
  normal_paket[56] = check_sum_hesapla_normal(56); // Check_sum = check_sum_hesapla();
  normal_paket[57] = 0x0D; // Sabit
  normal_paket[58] = 0x0A;
}

void addDataPacketSit(BME_280_t* BME, bmi088_struct_t* BMI){
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08a      	sub	sp, #40	@ 0x28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  sit_paket[0] = 0xAB; // Sabit
 8004d16:	4b92      	ldr	r3, [pc, #584]	@ (8004f60 <addDataPacketSit+0x254>)
 8004d18:	22ab      	movs	r2, #171	@ 0xab
 8004d1a:	701a      	strb	r2, [r3, #0]

  FLOAT32_UINT8_DONUSTURUCU irtifa_float32_uint8_donusturucu;
  irtifa_float32_uint8_donusturucu.sayi = (float)round2(BME->base_altitude + BME->altitude); // Irtifa degerinin atamasini yapiyoruz.
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	edd3 7a08 	vldr	s15, [r3, #32]
 8004d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d2c:	ee17 0a90 	vmov	r0, s15
 8004d30:	f7fb fc2a 	bl	8000588 <__aeabi_f2d>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	ec43 2b10 	vmov	d0, r2, r3
 8004d3c:	f7ff ffbc 	bl	8004cb8 <round2>
 8004d40:	ec53 2b10 	vmov	r2, r3, d0
 8004d44:	4610      	mov	r0, r2
 8004d46:	4619      	mov	r1, r3
 8004d48:	f7fb ff4e 	bl	8000be8 <__aeabi_d2f>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sit_paket[1] = irtifa_float32_uint8_donusturucu.array[3];
 8004d50:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004d54:	4b82      	ldr	r3, [pc, #520]	@ (8004f60 <addDataPacketSit+0x254>)
 8004d56:	705a      	strb	r2, [r3, #1]
  sit_paket[2] = irtifa_float32_uint8_donusturucu.array[2];
 8004d58:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004d5c:	4b80      	ldr	r3, [pc, #512]	@ (8004f60 <addDataPacketSit+0x254>)
 8004d5e:	709a      	strb	r2, [r3, #2]
  sit_paket[3] = irtifa_float32_uint8_donusturucu.array[1];
 8004d60:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8004d64:	4b7e      	ldr	r3, [pc, #504]	@ (8004f60 <addDataPacketSit+0x254>)
 8004d66:	70da      	strb	r2, [r3, #3]
  sit_paket[4] = irtifa_float32_uint8_donusturucu.array[0];
 8004d68:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004d6c:	4b7c      	ldr	r3, [pc, #496]	@ (8004f60 <addDataPacketSit+0x254>)
 8004d6e:	711a      	strb	r2, [r3, #4]

  FLOAT32_UINT8_DONUSTURUCU basinc_float32_uint8_donusturucu;
  basinc_float32_uint8_donusturucu.sayi = (float)round2(BME->pressure); // Roket GPS Irtifa degerinin atamasini yapiyoruz.
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fb fc07 	bl	8000588 <__aeabi_f2d>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	ec43 2b10 	vmov	d0, r2, r3
 8004d82:	f7ff ff99 	bl	8004cb8 <round2>
 8004d86:	ec53 2b10 	vmov	r2, r3, d0
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	f7fb ff2b 	bl	8000be8 <__aeabi_d2f>
 8004d92:	4603      	mov	r3, r0
 8004d94:	623b      	str	r3, [r7, #32]
  sit_paket[5] = basinc_float32_uint8_donusturucu.array[3];
 8004d96:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004d9a:	4b71      	ldr	r3, [pc, #452]	@ (8004f60 <addDataPacketSit+0x254>)
 8004d9c:	715a      	strb	r2, [r3, #5]
  sit_paket[6] = basinc_float32_uint8_donusturucu.array[2];
 8004d9e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8004da2:	4b6f      	ldr	r3, [pc, #444]	@ (8004f60 <addDataPacketSit+0x254>)
 8004da4:	719a      	strb	r2, [r3, #6]
  sit_paket[7] = basinc_float32_uint8_donusturucu.array[1];
 8004da6:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8004daa:	4b6d      	ldr	r3, [pc, #436]	@ (8004f60 <addDataPacketSit+0x254>)
 8004dac:	71da      	strb	r2, [r3, #7]
  sit_paket[8] = basinc_float32_uint8_donusturucu.array[0];
 8004dae:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004db2:	4b6b      	ldr	r3, [pc, #428]	@ (8004f60 <addDataPacketSit+0x254>)
 8004db4:	721a      	strb	r2, [r3, #8]

  FLOAT32_UINT8_DONUSTURUCU ivme_x_float32_uint8_donusturucu;
  ivme_x_float32_uint8_donusturucu.sayi = (float)round2(BMI->acc_x); // Ivme X degerinin atamasini yapiyoruz.
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fb fbe3 	bl	8000588 <__aeabi_f2d>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	ec43 2b10 	vmov	d0, r2, r3
 8004dca:	f7ff ff75 	bl	8004cb8 <round2>
 8004dce:	ec53 2b10 	vmov	r2, r3, d0
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	f7fb ff07 	bl	8000be8 <__aeabi_d2f>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	61fb      	str	r3, [r7, #28]
  sit_paket[9] = ivme_x_float32_uint8_donusturucu.array[3];
 8004dde:	7ffa      	ldrb	r2, [r7, #31]
 8004de0:	4b5f      	ldr	r3, [pc, #380]	@ (8004f60 <addDataPacketSit+0x254>)
 8004de2:	725a      	strb	r2, [r3, #9]
  sit_paket[10] = ivme_x_float32_uint8_donusturucu.array[2];
 8004de4:	7fba      	ldrb	r2, [r7, #30]
 8004de6:	4b5e      	ldr	r3, [pc, #376]	@ (8004f60 <addDataPacketSit+0x254>)
 8004de8:	729a      	strb	r2, [r3, #10]
  sit_paket[11] = ivme_x_float32_uint8_donusturucu.array[1];
 8004dea:	7f7a      	ldrb	r2, [r7, #29]
 8004dec:	4b5c      	ldr	r3, [pc, #368]	@ (8004f60 <addDataPacketSit+0x254>)
 8004dee:	72da      	strb	r2, [r3, #11]
  sit_paket[12] = ivme_x_float32_uint8_donusturucu.array[0];
 8004df0:	7f3a      	ldrb	r2, [r7, #28]
 8004df2:	4b5b      	ldr	r3, [pc, #364]	@ (8004f60 <addDataPacketSit+0x254>)
 8004df4:	731a      	strb	r2, [r3, #12]

  FLOAT32_UINT8_DONUSTURUCU ivme_y_float32_uint8_donusturucu;
  ivme_y_float32_uint8_donusturucu.sayi = (float)round2(BMI->acc_y); // Ivme Y degerinin atamasini yapiyoruz.
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fb fbc3 	bl	8000588 <__aeabi_f2d>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	ec43 2b10 	vmov	d0, r2, r3
 8004e0a:	f7ff ff55 	bl	8004cb8 <round2>
 8004e0e:	ec53 2b10 	vmov	r2, r3, d0
 8004e12:	4610      	mov	r0, r2
 8004e14:	4619      	mov	r1, r3
 8004e16:	f7fb fee7 	bl	8000be8 <__aeabi_d2f>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	61bb      	str	r3, [r7, #24]
  sit_paket[13] = ivme_y_float32_uint8_donusturucu.array[3];
 8004e1e:	7efa      	ldrb	r2, [r7, #27]
 8004e20:	4b4f      	ldr	r3, [pc, #316]	@ (8004f60 <addDataPacketSit+0x254>)
 8004e22:	735a      	strb	r2, [r3, #13]
  sit_paket[14] = ivme_y_float32_uint8_donusturucu.array[2];
 8004e24:	7eba      	ldrb	r2, [r7, #26]
 8004e26:	4b4e      	ldr	r3, [pc, #312]	@ (8004f60 <addDataPacketSit+0x254>)
 8004e28:	739a      	strb	r2, [r3, #14]
  sit_paket[15] = ivme_y_float32_uint8_donusturucu.array[1];
 8004e2a:	7e7a      	ldrb	r2, [r7, #25]
 8004e2c:	4b4c      	ldr	r3, [pc, #304]	@ (8004f60 <addDataPacketSit+0x254>)
 8004e2e:	73da      	strb	r2, [r3, #15]
  sit_paket[16] = ivme_y_float32_uint8_donusturucu.array[0];
 8004e30:	7e3a      	ldrb	r2, [r7, #24]
 8004e32:	4b4b      	ldr	r3, [pc, #300]	@ (8004f60 <addDataPacketSit+0x254>)
 8004e34:	741a      	strb	r2, [r3, #16]

  FLOAT32_UINT8_DONUSTURUCU ivme_z_float32_uint8_donusturucu;
  ivme_z_float32_uint8_donusturucu.sayi = (float)round2(BMI->acc_z); // Ivme Z degerinin atamasini yapiyoruz.
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fb fba3 	bl	8000588 <__aeabi_f2d>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	ec43 2b10 	vmov	d0, r2, r3
 8004e4a:	f7ff ff35 	bl	8004cb8 <round2>
 8004e4e:	ec53 2b10 	vmov	r2, r3, d0
 8004e52:	4610      	mov	r0, r2
 8004e54:	4619      	mov	r1, r3
 8004e56:	f7fb fec7 	bl	8000be8 <__aeabi_d2f>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	617b      	str	r3, [r7, #20]
  sit_paket[17] = ivme_z_float32_uint8_donusturucu.array[3];
 8004e5e:	7dfa      	ldrb	r2, [r7, #23]
 8004e60:	4b3f      	ldr	r3, [pc, #252]	@ (8004f60 <addDataPacketSit+0x254>)
 8004e62:	745a      	strb	r2, [r3, #17]
  sit_paket[18] = ivme_z_float32_uint8_donusturucu.array[2];
 8004e64:	7dba      	ldrb	r2, [r7, #22]
 8004e66:	4b3e      	ldr	r3, [pc, #248]	@ (8004f60 <addDataPacketSit+0x254>)
 8004e68:	749a      	strb	r2, [r3, #18]
  sit_paket[19] = ivme_z_float32_uint8_donusturucu.array[1];
 8004e6a:	7d7a      	ldrb	r2, [r7, #21]
 8004e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8004f60 <addDataPacketSit+0x254>)
 8004e6e:	74da      	strb	r2, [r3, #19]
  sit_paket[20] = ivme_z_float32_uint8_donusturucu.array[0];
 8004e70:	7d3a      	ldrb	r2, [r7, #20]
 8004e72:	4b3b      	ldr	r3, [pc, #236]	@ (8004f60 <addDataPacketSit+0x254>)
 8004e74:	751a      	strb	r2, [r3, #20]

  FLOAT32_UINT8_DONUSTURUCU jiroskop_x_float32_uint8_donusturucu;
  jiroskop_x_float32_uint8_donusturucu.sayi = (float)round2(BMI->yaw); // Jiroskop X degerinin atamasini yapiyoruz.
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fb fb83 	bl	8000588 <__aeabi_f2d>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	ec43 2b10 	vmov	d0, r2, r3
 8004e8a:	f7ff ff15 	bl	8004cb8 <round2>
 8004e8e:	ec53 2b10 	vmov	r2, r3, d0
 8004e92:	4610      	mov	r0, r2
 8004e94:	4619      	mov	r1, r3
 8004e96:	f7fb fea7 	bl	8000be8 <__aeabi_d2f>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	613b      	str	r3, [r7, #16]
  sit_paket[21] = jiroskop_x_float32_uint8_donusturucu.array[3];
 8004e9e:	7cfa      	ldrb	r2, [r7, #19]
 8004ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8004f60 <addDataPacketSit+0x254>)
 8004ea2:	755a      	strb	r2, [r3, #21]
  sit_paket[22] = jiroskop_x_float32_uint8_donusturucu.array[2];
 8004ea4:	7cba      	ldrb	r2, [r7, #18]
 8004ea6:	4b2e      	ldr	r3, [pc, #184]	@ (8004f60 <addDataPacketSit+0x254>)
 8004ea8:	759a      	strb	r2, [r3, #22]
  sit_paket[23] = jiroskop_x_float32_uint8_donusturucu.array[1];
 8004eaa:	7c7a      	ldrb	r2, [r7, #17]
 8004eac:	4b2c      	ldr	r3, [pc, #176]	@ (8004f60 <addDataPacketSit+0x254>)
 8004eae:	75da      	strb	r2, [r3, #23]
  sit_paket[24] = jiroskop_x_float32_uint8_donusturucu.array[0];
 8004eb0:	7c3a      	ldrb	r2, [r7, #16]
 8004eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8004f60 <addDataPacketSit+0x254>)
 8004eb4:	761a      	strb	r2, [r3, #24]

  FLOAT32_UINT8_DONUSTURUCU jiroskop_y_float32_uint8_donusturucu;
  jiroskop_y_float32_uint8_donusturucu.sayi = (float)round2(BMI->pitch); // Jiroskop Y degerinin atamasini yapiyoruz.
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fb fb63 	bl	8000588 <__aeabi_f2d>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	ec43 2b10 	vmov	d0, r2, r3
 8004eca:	f7ff fef5 	bl	8004cb8 <round2>
 8004ece:	ec53 2b10 	vmov	r2, r3, d0
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	f7fb fe87 	bl	8000be8 <__aeabi_d2f>
 8004eda:	4603      	mov	r3, r0
 8004edc:	60fb      	str	r3, [r7, #12]
  sit_paket[25] = jiroskop_y_float32_uint8_donusturucu.array[3];
 8004ede:	7bfa      	ldrb	r2, [r7, #15]
 8004ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8004f60 <addDataPacketSit+0x254>)
 8004ee2:	765a      	strb	r2, [r3, #25]
  sit_paket[26] = jiroskop_y_float32_uint8_donusturucu.array[2];
 8004ee4:	7bba      	ldrb	r2, [r7, #14]
 8004ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f60 <addDataPacketSit+0x254>)
 8004ee8:	769a      	strb	r2, [r3, #26]
  sit_paket[27] = jiroskop_y_float32_uint8_donusturucu.array[1];
 8004eea:	7b7a      	ldrb	r2, [r7, #13]
 8004eec:	4b1c      	ldr	r3, [pc, #112]	@ (8004f60 <addDataPacketSit+0x254>)
 8004eee:	76da      	strb	r2, [r3, #27]
  sit_paket[28] = jiroskop_y_float32_uint8_donusturucu.array[0];
 8004ef0:	7b3a      	ldrb	r2, [r7, #12]
 8004ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f60 <addDataPacketSit+0x254>)
 8004ef4:	771a      	strb	r2, [r3, #28]
  FLOAT32_UINT8_DONUSTURUCU jiroskop_z_float32_uint8_donusturucu;
  jiroskop_z_float32_uint8_donusturucu.sayi = (float)round2(BMI->roll); // Jiroskop Z degerinin atamasini yapiyoruz.
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7fb fb43 	bl	8000588 <__aeabi_f2d>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	ec43 2b10 	vmov	d0, r2, r3
 8004f0a:	f7ff fed5 	bl	8004cb8 <round2>
 8004f0e:	ec53 2b10 	vmov	r2, r3, d0
 8004f12:	4610      	mov	r0, r2
 8004f14:	4619      	mov	r1, r3
 8004f16:	f7fb fe67 	bl	8000be8 <__aeabi_d2f>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	60bb      	str	r3, [r7, #8]
  sit_paket[29] = jiroskop_z_float32_uint8_donusturucu.array[3];
 8004f1e:	7afa      	ldrb	r2, [r7, #11]
 8004f20:	4b0f      	ldr	r3, [pc, #60]	@ (8004f60 <addDataPacketSit+0x254>)
 8004f22:	775a      	strb	r2, [r3, #29]
  sit_paket[30] = jiroskop_z_float32_uint8_donusturucu.array[2];
 8004f24:	7aba      	ldrb	r2, [r7, #10]
 8004f26:	4b0e      	ldr	r3, [pc, #56]	@ (8004f60 <addDataPacketSit+0x254>)
 8004f28:	779a      	strb	r2, [r3, #30]
  sit_paket[31] = jiroskop_z_float32_uint8_donusturucu.array[1];
 8004f2a:	7a7a      	ldrb	r2, [r7, #9]
 8004f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f60 <addDataPacketSit+0x254>)
 8004f2e:	77da      	strb	r2, [r3, #31]
  sit_paket[32] = jiroskop_z_float32_uint8_donusturucu.array[0];
 8004f30:	7a3a      	ldrb	r2, [r7, #8]
 8004f32:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <addDataPacketSit+0x254>)
 8004f34:	f883 2020 	strb.w	r2, [r3, #32]

  sit_paket[33] = check_sum_hesapla_sit(33); // Check_sum = check_sum_hesapla();
 8004f38:	2021      	movs	r0, #33	@ 0x21
 8004f3a:	f7ff fe95 	bl	8004c68 <check_sum_hesapla_sit>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	461a      	mov	r2, r3
 8004f42:	4b07      	ldr	r3, [pc, #28]	@ (8004f60 <addDataPacketSit+0x254>)
 8004f44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  sit_paket[34] = 0x0D;
 8004f48:	4b05      	ldr	r3, [pc, #20]	@ (8004f60 <addDataPacketSit+0x254>)
 8004f4a:	220d      	movs	r2, #13
 8004f4c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  sit_paket[35] = 0x0A;
 8004f50:	4b03      	ldr	r3, [pc, #12]	@ (8004f60 <addDataPacketSit+0x254>)
 8004f52:	220a      	movs	r2, #10
 8004f54:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

}
 8004f58:	bf00      	nop
 8004f5a:	3728      	adds	r7, #40	@ 0x28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	200006cc 	.word	0x200006cc

08004f64 <uint8_arrayi_float32_ye_donustur>:

float uint8_arrayi_float32_ye_donustur(uint8_t byte_array_u8[4]) {
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
    FLOAT32_UINT8_DONUSTURUCU float32_uint8_donusturucu;
    float32_uint8_donusturucu.array[0] = byte_array_u8[3];
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	78db      	ldrb	r3, [r3, #3]
 8004f70:	733b      	strb	r3, [r7, #12]
    float32_uint8_donusturucu.array[1] = byte_array_u8[2];
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	789b      	ldrb	r3, [r3, #2]
 8004f76:	737b      	strb	r3, [r7, #13]
    float32_uint8_donusturucu.array[2] = byte_array_u8[1];
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	785b      	ldrb	r3, [r3, #1]
 8004f7c:	73bb      	strb	r3, [r7, #14]
    float32_uint8_donusturucu.array[3] = byte_array_u8[0];
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	73fb      	strb	r3, [r7, #15]
    return float32_uint8_donusturucu.sayi;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	ee07 3a90 	vmov	s15, r3
}
 8004f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <ekf_predict>:
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++)
            P[i][j] = (i == j) ? 1e-3f : 0.0f;
}

void ekf_predict(float gx, float gy, float gz, float dt) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b09e      	sub	sp, #120	@ 0x78
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004fa2:	edc7 0a02 	vstr	s1, [r7, #8]
 8004fa6:	ed87 1a01 	vstr	s2, [r7, #4]
 8004faa:	edc7 1a00 	vstr	s3, [r7]

    // Gyro'dan omega matrisi
    float Omega[4][4] = {
 8004fae:	f04f 0300 	mov.w	r3, #0
 8004fb2:	623b      	str	r3, [r7, #32]
        {0, -gx, -gy, -gz},
 8004fb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fb8:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8004fbc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        {0, -gx, -gy, -gz},
 8004fc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004fc4:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8004fc8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        {0, -gx, -gy, -gz},
 8004fcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004fd0:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8004fd4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
        {gx,  0,  gz, -gy},
 8004fe6:	edd7 7a02 	vldr	s15, [r7, #8]
 8004fea:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8004fee:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	643b      	str	r3, [r7, #64]	@ 0x40
        {gy, -gz,  0,  gx},
 8004ff6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ffa:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8004ffe:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	657b      	str	r3, [r7, #84]	@ 0x54
        {gz,  gy, -gx,  0}
 8005014:	edd7 7a03 	vldr	s15, [r7, #12]
 8005018:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 800501c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	65fb      	str	r3, [r7, #92]	@ 0x5c
    };

    // dq = 0.5 * Omega * q
    float dq[4] = {0};
 8005026:	f107 0310 	add.w	r3, r7, #16
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	605a      	str	r2, [r3, #4]
 8005030:	609a      	str	r2, [r3, #8]
 8005032:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < 4; i++) {
 8005034:	2300      	movs	r3, #0
 8005036:	677b      	str	r3, [r7, #116]	@ 0x74
 8005038:	e043      	b.n	80050c2 <ekf_predict+0x12a>
        for (int j = 0; j < 4; j++) {
 800503a:	2300      	movs	r3, #0
 800503c:	673b      	str	r3, [r7, #112]	@ 0x70
 800503e:	e024      	b.n	800508a <ekf_predict+0xf2>
            dq[i] += Omega[i][j] * q[j];
 8005040:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	3378      	adds	r3, #120	@ 0x78
 8005046:	443b      	add	r3, r7
 8005048:	3b68      	subs	r3, #104	@ 0x68
 800504a:	ed93 7a00 	vldr	s14, [r3]
 800504e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005050:	009a      	lsls	r2, r3, #2
 8005052:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	3378      	adds	r3, #120	@ 0x78
 800505a:	443b      	add	r3, r7
 800505c:	3b58      	subs	r3, #88	@ 0x58
 800505e:	edd3 6a00 	vldr	s13, [r3]
 8005062:	4a5d      	ldr	r2, [pc, #372]	@ (80051d8 <ekf_predict+0x240>)
 8005064:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	edd3 7a00 	vldr	s15, [r3]
 800506e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005076:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	3378      	adds	r3, #120	@ 0x78
 800507c:	443b      	add	r3, r7
 800507e:	3b68      	subs	r3, #104	@ 0x68
 8005080:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 4; j++) {
 8005084:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005086:	3301      	adds	r3, #1
 8005088:	673b      	str	r3, [r7, #112]	@ 0x70
 800508a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800508c:	2b03      	cmp	r3, #3
 800508e:	ddd7      	ble.n	8005040 <ekf_predict+0xa8>
        }
        dq[i] *= 0.5f * dt;
 8005090:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	3378      	adds	r3, #120	@ 0x78
 8005096:	443b      	add	r3, r7
 8005098:	3b68      	subs	r3, #104	@ 0x68
 800509a:	ed93 7a00 	vldr	s14, [r3]
 800509e:	edd7 7a00 	vldr	s15, [r7]
 80050a2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80050a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80050aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	3378      	adds	r3, #120	@ 0x78
 80050b4:	443b      	add	r3, r7
 80050b6:	3b68      	subs	r3, #104	@ 0x68
 80050b8:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 80050bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050be:	3301      	adds	r3, #1
 80050c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80050c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	ddb8      	ble.n	800503a <ekf_predict+0xa2>
    }

    // q = q + dq
    for (int i = 0; i < 4; i++)
 80050c8:	2300      	movs	r3, #0
 80050ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050cc:	e017      	b.n	80050fe <ekf_predict+0x166>
        q[i] += dq[i];
 80050ce:	4a42      	ldr	r2, [pc, #264]	@ (80051d8 <ekf_predict+0x240>)
 80050d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	ed93 7a00 	vldr	s14, [r3]
 80050da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	3378      	adds	r3, #120	@ 0x78
 80050e0:	443b      	add	r3, r7
 80050e2:	3b68      	subs	r3, #104	@ 0x68
 80050e4:	edd3 7a00 	vldr	s15, [r3]
 80050e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050ec:	4a3a      	ldr	r2, [pc, #232]	@ (80051d8 <ekf_predict+0x240>)
 80050ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 80050f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050fa:	3301      	adds	r3, #1
 80050fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005100:	2b03      	cmp	r3, #3
 8005102:	dde4      	ble.n	80050ce <ekf_predict+0x136>

    // Normalize
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8005104:	4b34      	ldr	r3, [pc, #208]	@ (80051d8 <ekf_predict+0x240>)
 8005106:	ed93 7a00 	vldr	s14, [r3]
 800510a:	4b33      	ldr	r3, [pc, #204]	@ (80051d8 <ekf_predict+0x240>)
 800510c:	edd3 7a00 	vldr	s15, [r3]
 8005110:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005114:	4b30      	ldr	r3, [pc, #192]	@ (80051d8 <ekf_predict+0x240>)
 8005116:	edd3 6a01 	vldr	s13, [r3, #4]
 800511a:	4b2f      	ldr	r3, [pc, #188]	@ (80051d8 <ekf_predict+0x240>)
 800511c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005124:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005128:	4b2b      	ldr	r3, [pc, #172]	@ (80051d8 <ekf_predict+0x240>)
 800512a:	edd3 6a02 	vldr	s13, [r3, #8]
 800512e:	4b2a      	ldr	r3, [pc, #168]	@ (80051d8 <ekf_predict+0x240>)
 8005130:	edd3 7a02 	vldr	s15, [r3, #8]
 8005134:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005138:	ee37 7a27 	vadd.f32	s14, s14, s15
 800513c:	4b26      	ldr	r3, [pc, #152]	@ (80051d8 <ekf_predict+0x240>)
 800513e:	edd3 6a03 	vldr	s13, [r3, #12]
 8005142:	4b25      	ldr	r3, [pc, #148]	@ (80051d8 <ekf_predict+0x240>)
 8005144:	edd3 7a03 	vldr	s15, [r3, #12]
 8005148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800514c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005150:	eeb0 0a67 	vmov.f32	s0, s15
 8005154:	f009 ff46 	bl	800efe4 <sqrtf>
 8005158:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
    for (int i = 0; i < 4; i++)
 800515c:	2300      	movs	r3, #0
 800515e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005160:	e012      	b.n	8005188 <ekf_predict+0x1f0>
        q[i] /= norm;
 8005162:	4a1d      	ldr	r2, [pc, #116]	@ (80051d8 <ekf_predict+0x240>)
 8005164:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	edd3 6a00 	vldr	s13, [r3]
 800516e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8005172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005176:	4a18      	ldr	r2, [pc, #96]	@ (80051d8 <ekf_predict+0x240>)
 8005178:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8005182:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005184:	3301      	adds	r3, #1
 8005186:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005188:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800518a:	2b03      	cmp	r3, #3
 800518c:	dde9      	ble.n	8005162 <ekf_predict+0x1ca>

    // P = P + Q
    for (int i = 0; i < 4; i++)
 800518e:	2300      	movs	r3, #0
 8005190:	667b      	str	r3, [r7, #100]	@ 0x64
 8005192:	e018      	b.n	80051c6 <ekf_predict+0x22e>
        P[i][i] += Q_val;
 8005194:	4911      	ldr	r1, [pc, #68]	@ (80051dc <ekf_predict+0x244>)
 8005196:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005198:	4613      	mov	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	edd3 7a00 	vldr	s15, [r3]
 80051a6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80051e0 <ekf_predict+0x248>
 80051aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051ae:	490b      	ldr	r1, [pc, #44]	@ (80051dc <ekf_predict+0x244>)
 80051b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	440b      	add	r3, r1
 80051bc:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 80051c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051c2:	3301      	adds	r3, #1
 80051c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80051c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	dde3      	ble.n	8005194 <ekf_predict+0x1fc>
}
 80051cc:	bf00      	nop
 80051ce:	bf00      	nop
 80051d0:	3778      	adds	r7, #120	@ 0x78
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20000018 	.word	0x20000018
 80051dc:	200006f0 	.word	0x200006f0
 80051e0:	3727c5ac 	.word	0x3727c5ac

080051e4 <quaternionToYaw1>:

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
    return acosf(safeValue) * (180.0f / 3.14f);
}

float quaternionToYaw1(){
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 80051ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005294 <quaternionToYaw1+0xb0>)
 80051ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80051f0:	4b28      	ldr	r3, [pc, #160]	@ (8005294 <quaternionToYaw1+0xb0>)
 80051f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80051f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051fa:	4b26      	ldr	r3, [pc, #152]	@ (8005294 <quaternionToYaw1+0xb0>)
 80051fc:	edd3 6a00 	vldr	s13, [r3]
 8005200:	4b24      	ldr	r3, [pc, #144]	@ (8005294 <quaternionToYaw1+0xb0>)
 8005202:	edd3 7a03 	vldr	s15, [r3, #12]
 8005206:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800520a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800520e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8005212:	4b20      	ldr	r3, [pc, #128]	@ (8005294 <quaternionToYaw1+0xb0>)
 8005214:	ed93 7a00 	vldr	s14, [r3]
 8005218:	4b1e      	ldr	r3, [pc, #120]	@ (8005294 <quaternionToYaw1+0xb0>)
 800521a:	edd3 7a00 	vldr	s15, [r3]
 800521e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005222:	4b1c      	ldr	r3, [pc, #112]	@ (8005294 <quaternionToYaw1+0xb0>)
 8005224:	edd3 6a01 	vldr	s13, [r3, #4]
 8005228:	4b1a      	ldr	r3, [pc, #104]	@ (8005294 <quaternionToYaw1+0xb0>)
 800522a:	edd3 7a01 	vldr	s15, [r3, #4]
 800522e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005232:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005236:	4b17      	ldr	r3, [pc, #92]	@ (8005294 <quaternionToYaw1+0xb0>)
 8005238:	edd3 6a02 	vldr	s13, [r3, #8]
 800523c:	4b15      	ldr	r3, [pc, #84]	@ (8005294 <quaternionToYaw1+0xb0>)
 800523e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005242:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005246:	ee37 7a67 	vsub.f32	s14, s14, s15
 800524a:	4b12      	ldr	r3, [pc, #72]	@ (8005294 <quaternionToYaw1+0xb0>)
 800524c:	edd3 6a03 	vldr	s13, [r3, #12]
 8005250:	4b10      	ldr	r3, [pc, #64]	@ (8005294 <quaternionToYaw1+0xb0>)
 8005252:	edd3 7a03 	vldr	s15, [r3, #12]
 8005256:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800525a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800525e:	eef0 0a67 	vmov.f32	s1, s15
 8005262:	eeb0 0a46 	vmov.f32	s0, s12
 8005266:	f009 febb 	bl	800efe0 <atan2f>
 800526a:	eef0 7a40 	vmov.f32	s15, s0
 800526e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005298 <quaternionToYaw1+0xb4>
 8005272:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005276:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800529c <quaternionToYaw1+0xb8>
 800527a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800527e:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	ee07 3a90 	vmov	s15, r3
}
 8005288:	eeb0 0a67 	vmov.f32	s0, s15
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20000018 	.word	0x20000018
 8005298:	43340000 	.word	0x43340000
 800529c:	40490fd0 	.word	0x40490fd0

080052a0 <quaternionToPitch1>:

float quaternionToPitch1(){
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 80052a6:	4b17      	ldr	r3, [pc, #92]	@ (8005304 <quaternionToPitch1+0x64>)
 80052a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80052ac:	4b15      	ldr	r3, [pc, #84]	@ (8005304 <quaternionToPitch1+0x64>)
 80052ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80052b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052b6:	4b13      	ldr	r3, [pc, #76]	@ (8005304 <quaternionToPitch1+0x64>)
 80052b8:	edd3 6a00 	vldr	s13, [r3]
 80052bc:	4b11      	ldr	r3, [pc, #68]	@ (8005304 <quaternionToPitch1+0x64>)
 80052be:	edd3 7a02 	vldr	s15, [r3, #8]
 80052c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80052ce:	eeb0 0a67 	vmov.f32	s0, s15
 80052d2:	f009 fe59 	bl	800ef88 <asinf>
 80052d6:	eef0 7a40 	vmov.f32	s15, s0
 80052da:	eef1 7a67 	vneg.f32	s15, s15
 80052de:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005308 <quaternionToPitch1+0x68>
 80052e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80052e6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800530c <quaternionToPitch1+0x6c>
 80052ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052ee:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	ee07 3a90 	vmov	s15, r3
}
 80052f8:	eeb0 0a67 	vmov.f32	s0, s15
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000018 	.word	0x20000018
 8005308:	43340000 	.word	0x43340000
 800530c:	40490fd0 	.word	0x40490fd0

08005310 <quaternionToRoll1>:

float quaternionToRoll1(){
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 8005316:	4b2a      	ldr	r3, [pc, #168]	@ (80053c0 <quaternionToRoll1+0xb0>)
 8005318:	ed93 7a00 	vldr	s14, [r3]
 800531c:	4b28      	ldr	r3, [pc, #160]	@ (80053c0 <quaternionToRoll1+0xb0>)
 800531e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005322:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005326:	4b26      	ldr	r3, [pc, #152]	@ (80053c0 <quaternionToRoll1+0xb0>)
 8005328:	edd3 6a02 	vldr	s13, [r3, #8]
 800532c:	4b24      	ldr	r3, [pc, #144]	@ (80053c0 <quaternionToRoll1+0xb0>)
 800532e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005332:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005336:	ee77 7a27 	vadd.f32	s15, s14, s15
 800533a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800533e:	4b20      	ldr	r3, [pc, #128]	@ (80053c0 <quaternionToRoll1+0xb0>)
 8005340:	ed93 7a00 	vldr	s14, [r3]
 8005344:	4b1e      	ldr	r3, [pc, #120]	@ (80053c0 <quaternionToRoll1+0xb0>)
 8005346:	edd3 7a00 	vldr	s15, [r3]
 800534a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800534e:	4b1c      	ldr	r3, [pc, #112]	@ (80053c0 <quaternionToRoll1+0xb0>)
 8005350:	edd3 6a01 	vldr	s13, [r3, #4]
 8005354:	4b1a      	ldr	r3, [pc, #104]	@ (80053c0 <quaternionToRoll1+0xb0>)
 8005356:	edd3 7a01 	vldr	s15, [r3, #4]
 800535a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800535e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005362:	4b17      	ldr	r3, [pc, #92]	@ (80053c0 <quaternionToRoll1+0xb0>)
 8005364:	edd3 6a02 	vldr	s13, [r3, #8]
 8005368:	4b15      	ldr	r3, [pc, #84]	@ (80053c0 <quaternionToRoll1+0xb0>)
 800536a:	edd3 7a02 	vldr	s15, [r3, #8]
 800536e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005372:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005376:	4b12      	ldr	r3, [pc, #72]	@ (80053c0 <quaternionToRoll1+0xb0>)
 8005378:	edd3 6a03 	vldr	s13, [r3, #12]
 800537c:	4b10      	ldr	r3, [pc, #64]	@ (80053c0 <quaternionToRoll1+0xb0>)
 800537e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800538a:	eef0 0a67 	vmov.f32	s1, s15
 800538e:	eeb0 0a46 	vmov.f32	s0, s12
 8005392:	f009 fe25 	bl	800efe0 <atan2f>
 8005396:	eef0 7a40 	vmov.f32	s15, s0
 800539a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80053c4 <quaternionToRoll1+0xb4>
 800539e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80053a2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80053c8 <quaternionToRoll1+0xb8>
 80053a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053aa:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	ee07 3a90 	vmov	s15, r3
}
 80053b4:	eeb0 0a67 	vmov.f32	s0, s15
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	20000018 	.word	0x20000018
 80053c4:	43340000 	.word	0x43340000
 80053c8:	40490fd0 	.word	0x40490fd0

080053cc <UpdateMahonyGains>:

uint8_t Gain = 0;
uint8_t gyroOnlyMode = 0;


void UpdateMahonyGains(float ax, float ay, float az) {
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08c      	sub	sp, #48	@ 0x30
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	ed87 0a03 	vstr	s0, [r7, #12]
 80053d6:	edc7 0a02 	vstr	s1, [r7, #8]
 80053da:	ed87 1a01 	vstr	s2, [r7, #4]
    // Quaternion normalize edilmemişse gravity yön tahmini hatalı olur
    float norm_q = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 80053de:	4bd5      	ldr	r3, [pc, #852]	@ (8005734 <UpdateMahonyGains+0x368>)
 80053e0:	ed93 7a00 	vldr	s14, [r3]
 80053e4:	4bd3      	ldr	r3, [pc, #844]	@ (8005734 <UpdateMahonyGains+0x368>)
 80053e6:	edd3 7a00 	vldr	s15, [r3]
 80053ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053ee:	4bd1      	ldr	r3, [pc, #836]	@ (8005734 <UpdateMahonyGains+0x368>)
 80053f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80053f4:	4bcf      	ldr	r3, [pc, #828]	@ (8005734 <UpdateMahonyGains+0x368>)
 80053f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80053fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005402:	4bcc      	ldr	r3, [pc, #816]	@ (8005734 <UpdateMahonyGains+0x368>)
 8005404:	edd3 6a02 	vldr	s13, [r3, #8]
 8005408:	4bca      	ldr	r3, [pc, #808]	@ (8005734 <UpdateMahonyGains+0x368>)
 800540a:	edd3 7a02 	vldr	s15, [r3, #8]
 800540e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005412:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005416:	4bc7      	ldr	r3, [pc, #796]	@ (8005734 <UpdateMahonyGains+0x368>)
 8005418:	edd3 6a03 	vldr	s13, [r3, #12]
 800541c:	4bc5      	ldr	r3, [pc, #788]	@ (8005734 <UpdateMahonyGains+0x368>)
 800541e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800542a:	eeb0 0a67 	vmov.f32	s0, s15
 800542e:	f009 fdd9 	bl	800efe4 <sqrtf>
 8005432:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    if (norm_q == 0.0f) return; // Koruma
 8005436:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800543a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800543e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005442:	f000 8172 	beq.w	800572a <UpdateMahonyGains+0x35e>
    q[0] /= norm_q;
 8005446:	4bbb      	ldr	r3, [pc, #748]	@ (8005734 <UpdateMahonyGains+0x368>)
 8005448:	edd3 6a00 	vldr	s13, [r3]
 800544c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005454:	4bb7      	ldr	r3, [pc, #732]	@ (8005734 <UpdateMahonyGains+0x368>)
 8005456:	edc3 7a00 	vstr	s15, [r3]
    q[1] /= norm_q;
 800545a:	4bb6      	ldr	r3, [pc, #728]	@ (8005734 <UpdateMahonyGains+0x368>)
 800545c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005460:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005468:	4bb2      	ldr	r3, [pc, #712]	@ (8005734 <UpdateMahonyGains+0x368>)
 800546a:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] /= norm_q;
 800546e:	4bb1      	ldr	r3, [pc, #708]	@ (8005734 <UpdateMahonyGains+0x368>)
 8005470:	edd3 6a02 	vldr	s13, [r3, #8]
 8005474:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800547c:	4bad      	ldr	r3, [pc, #692]	@ (8005734 <UpdateMahonyGains+0x368>)
 800547e:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] /= norm_q;
 8005482:	4bac      	ldr	r3, [pc, #688]	@ (8005734 <UpdateMahonyGains+0x368>)
 8005484:	edd3 6a03 	vldr	s13, [r3, #12]
 8005488:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800548c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005490:	4ba8      	ldr	r3, [pc, #672]	@ (8005734 <UpdateMahonyGains+0x368>)
 8005492:	edc3 7a03 	vstr	s15, [r3, #12]

    // Gravity yön vektörü (tam vektör formu)
    float gx = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 8005496:	4ba7      	ldr	r3, [pc, #668]	@ (8005734 <UpdateMahonyGains+0x368>)
 8005498:	ed93 7a01 	vldr	s14, [r3, #4]
 800549c:	4ba5      	ldr	r3, [pc, #660]	@ (8005734 <UpdateMahonyGains+0x368>)
 800549e:	edd3 7a03 	vldr	s15, [r3, #12]
 80054a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054a6:	4ba3      	ldr	r3, [pc, #652]	@ (8005734 <UpdateMahonyGains+0x368>)
 80054a8:	edd3 6a00 	vldr	s13, [r3]
 80054ac:	4ba1      	ldr	r3, [pc, #644]	@ (8005734 <UpdateMahonyGains+0x368>)
 80054ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80054b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054be:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 80054c2:	4b9c      	ldr	r3, [pc, #624]	@ (8005734 <UpdateMahonyGains+0x368>)
 80054c4:	ed93 7a00 	vldr	s14, [r3]
 80054c8:	4b9a      	ldr	r3, [pc, #616]	@ (8005734 <UpdateMahonyGains+0x368>)
 80054ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80054ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054d2:	4b98      	ldr	r3, [pc, #608]	@ (8005734 <UpdateMahonyGains+0x368>)
 80054d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80054d8:	4b96      	ldr	r3, [pc, #600]	@ (8005734 <UpdateMahonyGains+0x368>)
 80054da:	edd3 7a03 	vldr	s15, [r3, #12]
 80054de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054ea:	edc7 7a08 	vstr	s15, [r7, #32]
    float gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 80054ee:	4b91      	ldr	r3, [pc, #580]	@ (8005734 <UpdateMahonyGains+0x368>)
 80054f0:	ed93 7a00 	vldr	s14, [r3]
 80054f4:	4b8f      	ldr	r3, [pc, #572]	@ (8005734 <UpdateMahonyGains+0x368>)
 80054f6:	edd3 7a00 	vldr	s15, [r3]
 80054fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054fe:	4b8d      	ldr	r3, [pc, #564]	@ (8005734 <UpdateMahonyGains+0x368>)
 8005500:	edd3 6a01 	vldr	s13, [r3, #4]
 8005504:	4b8b      	ldr	r3, [pc, #556]	@ (8005734 <UpdateMahonyGains+0x368>)
 8005506:	edd3 7a01 	vldr	s15, [r3, #4]
 800550a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800550e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005512:	4b88      	ldr	r3, [pc, #544]	@ (8005734 <UpdateMahonyGains+0x368>)
 8005514:	edd3 6a02 	vldr	s13, [r3, #8]
 8005518:	4b86      	ldr	r3, [pc, #536]	@ (8005734 <UpdateMahonyGains+0x368>)
 800551a:	edd3 7a02 	vldr	s15, [r3, #8]
 800551e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005522:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005526:	4b83      	ldr	r3, [pc, #524]	@ (8005734 <UpdateMahonyGains+0x368>)
 8005528:	edd3 6a03 	vldr	s13, [r3, #12]
 800552c:	4b81      	ldr	r3, [pc, #516]	@ (8005734 <UpdateMahonyGains+0x368>)
 800552e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800553a:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalize gravity tahmini
    float recipNormG = invSqrt(gx * gx + gy * gy + gz * gz);
 800553e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005542:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005546:	edd7 7a08 	vldr	s15, [r7, #32]
 800554a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800554e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005552:	edd7 7a07 	vldr	s15, [r7, #28]
 8005556:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800555a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800555e:	eeb0 0a67 	vmov.f32	s0, s15
 8005562:	f001 f885 	bl	8006670 <invSqrt>
 8005566:	ed87 0a06 	vstr	s0, [r7, #24]
    gx *= recipNormG;
 800556a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800556e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005576:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy *= recipNormG;
 800557a:	ed97 7a08 	vldr	s14, [r7, #32]
 800557e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005586:	edc7 7a08 	vstr	s15, [r7, #32]
    gz *= recipNormG;
 800558a:	ed97 7a07 	vldr	s14, [r7, #28]
 800558e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005596:	edc7 7a07 	vstr	s15, [r7, #28]

    // İvmeölçer zaten normalize edilmiş olarak gelmeli (gelmiyorsa normalize et!)
    float recipNormA = invSqrt(ax * ax + ay * ay + az * az);
 800559a:	edd7 7a03 	vldr	s15, [r7, #12]
 800559e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80055a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80055a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80055aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80055b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80055b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055ba:	eeb0 0a67 	vmov.f32	s0, s15
 80055be:	f001 f857 	bl	8006670 <invSqrt>
 80055c2:	ed87 0a05 	vstr	s0, [r7, #20]
    ax *= recipNormA;
 80055c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80055ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80055ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d2:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNormA;
 80055d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80055da:	edd7 7a05 	vldr	s15, [r7, #20]
 80055de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e2:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNormA;
 80055e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80055ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80055ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f2:	edc7 7a01 	vstr	s15, [r7, #4]

    // Dot product
    float dot = ax * gx + ay * gy + az * gz;
 80055f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80055fa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80055fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005602:	edd7 6a02 	vldr	s13, [r7, #8]
 8005606:	edd7 7a08 	vldr	s15, [r7, #32]
 800560a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800560e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005612:	edd7 6a01 	vldr	s13, [r7, #4]
 8005616:	edd7 7a07 	vldr	s15, [r7, #28]
 800561a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800561e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005622:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dot > 1.0f) dot = 1.0f;
 8005626:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800562a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800562e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005636:	dd02      	ble.n	800563e <UpdateMahonyGains+0x272>
 8005638:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800563c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dot < -1.0f) dot = -1.0f;
 800563e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005642:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800564a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800564e:	d501      	bpl.n	8005654 <UpdateMahonyGains+0x288>
 8005650:	4b39      	ldr	r3, [pc, #228]	@ (8005738 <UpdateMahonyGains+0x36c>)
 8005652:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Açı farkı (derece)
    float accErrorAngle = acosf(dot) * (180.0f / 3.1415926f);
 8005654:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8005658:	f009 fc6a 	bl	800ef30 <acosf>
 800565c:	eef0 7a40 	vmov.f32	s15, s0
 8005660:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800573c <UpdateMahonyGains+0x370>
 8005664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005668:	edc7 7a04 	vstr	s15, [r7, #16]

    // Duruma göre kazanç ayarla
    if (accErrorAngle > 30.0f) {
 800566c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005670:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8005674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567c:	dd0a      	ble.n	8005694 <UpdateMahonyGains+0x2c8>
        Gain = 1;
 800567e:	4b30      	ldr	r3, [pc, #192]	@ (8005740 <UpdateMahonyGains+0x374>)
 8005680:	2201      	movs	r2, #1
 8005682:	701a      	strb	r2, [r3, #0]
        twoKp = 0.2f;
 8005684:	4b2f      	ldr	r3, [pc, #188]	@ (8005744 <UpdateMahonyGains+0x378>)
 8005686:	4a30      	ldr	r2, [pc, #192]	@ (8005748 <UpdateMahonyGains+0x37c>)
 8005688:	601a      	str	r2, [r3, #0]
        twoKi = 0.0f;
 800568a:	4b30      	ldr	r3, [pc, #192]	@ (800574c <UpdateMahonyGains+0x380>)
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	e01d      	b.n	80056d0 <UpdateMahonyGains+0x304>
    } else if (accErrorAngle > 10.0f) {
 8005694:	edd7 7a04 	vldr	s15, [r7, #16]
 8005698:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800569c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a4:	dd0a      	ble.n	80056bc <UpdateMahonyGains+0x2f0>
        Gain = 2;
 80056a6:	4b26      	ldr	r3, [pc, #152]	@ (8005740 <UpdateMahonyGains+0x374>)
 80056a8:	2202      	movs	r2, #2
 80056aa:	701a      	strb	r2, [r3, #0]
        twoKp = 2.0f;
 80056ac:	4b25      	ldr	r3, [pc, #148]	@ (8005744 <UpdateMahonyGains+0x378>)
 80056ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80056b2:	601a      	str	r2, [r3, #0]
        twoKi = 0.01f;
 80056b4:	4b25      	ldr	r3, [pc, #148]	@ (800574c <UpdateMahonyGains+0x380>)
 80056b6:	4a26      	ldr	r2, [pc, #152]	@ (8005750 <UpdateMahonyGains+0x384>)
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	e009      	b.n	80056d0 <UpdateMahonyGains+0x304>
    } else {
        Gain = 3;
 80056bc:	4b20      	ldr	r3, [pc, #128]	@ (8005740 <UpdateMahonyGains+0x374>)
 80056be:	2203      	movs	r2, #3
 80056c0:	701a      	strb	r2, [r3, #0]
        twoKp = 8.0f;
 80056c2:	4b20      	ldr	r3, [pc, #128]	@ (8005744 <UpdateMahonyGains+0x378>)
 80056c4:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 80056c8:	601a      	str	r2, [r3, #0]
        twoKi = 0.05f;
 80056ca:	4b20      	ldr	r3, [pc, #128]	@ (800574c <UpdateMahonyGains+0x380>)
 80056cc:	4a21      	ldr	r2, [pc, #132]	@ (8005754 <UpdateMahonyGains+0x388>)
 80056ce:	601a      	str	r2, [r3, #0]
    }

    // Güvenlik: kazanç sınırla (opsiyonel ama önerilir)
    twoKp = fmaxf(TWO_KP_MIN, fminf(twoKp, TWO_KP_MAX));
 80056d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005744 <UpdateMahonyGains+0x378>)
 80056d2:	edd3 7a00 	vldr	s15, [r3]
 80056d6:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 80056da:	eeb0 0a67 	vmov.f32	s0, s15
 80056de:	f009 fcd4 	bl	800f08a <fminf>
 80056e2:	eef0 7a40 	vmov.f32	s15, s0
 80056e6:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8005758 <UpdateMahonyGains+0x38c>
 80056ea:	eeb0 0a67 	vmov.f32	s0, s15
 80056ee:	f009 fcaf 	bl	800f050 <fmaxf>
 80056f2:	eef0 7a40 	vmov.f32	s15, s0
 80056f6:	4b13      	ldr	r3, [pc, #76]	@ (8005744 <UpdateMahonyGains+0x378>)
 80056f8:	edc3 7a00 	vstr	s15, [r3]
    twoKi = fmaxf(TWO_KI_MIN, fminf(twoKi, TWO_KI_MAX));
 80056fc:	4b13      	ldr	r3, [pc, #76]	@ (800574c <UpdateMahonyGains+0x380>)
 80056fe:	edd3 7a00 	vldr	s15, [r3]
 8005702:	eddf 0a16 	vldr	s1, [pc, #88]	@ 800575c <UpdateMahonyGains+0x390>
 8005706:	eeb0 0a67 	vmov.f32	s0, s15
 800570a:	f009 fcbe 	bl	800f08a <fminf>
 800570e:	eef0 7a40 	vmov.f32	s15, s0
 8005712:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8005760 <UpdateMahonyGains+0x394>
 8005716:	eeb0 0a67 	vmov.f32	s0, s15
 800571a:	f009 fc99 	bl	800f050 <fmaxf>
 800571e:	eef0 7a40 	vmov.f32	s15, s0
 8005722:	4b0a      	ldr	r3, [pc, #40]	@ (800574c <UpdateMahonyGains+0x380>)
 8005724:	edc3 7a00 	vstr	s15, [r3]
 8005728:	e000      	b.n	800572c <UpdateMahonyGains+0x360>
    if (norm_q == 0.0f) return; // Koruma
 800572a:	bf00      	nop
}
 800572c:	3730      	adds	r7, #48	@ 0x30
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000028 	.word	0x20000028
 8005738:	bf800000 	.word	0xbf800000
 800573c:	42652ee2 	.word	0x42652ee2
 8005740:	2000073c 	.word	0x2000073c
 8005744:	20000038 	.word	0x20000038
 8005748:	3e4ccccd 	.word	0x3e4ccccd
 800574c:	2000003c 	.word	0x2000003c
 8005750:	3c23d70a 	.word	0x3c23d70a
 8005754:	3d4ccccd 	.word	0x3d4ccccd
 8005758:	3dcccccd 	.word	0x3dcccccd
 800575c:	3d4ccccd 	.word	0x3d4ccccd
 8005760:	00000000 	.word	0x00000000

08005764 <Orientation_Update>:





void Orientation_Update(float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 8005764:	b580      	push	{r7, lr}
 8005766:	b08a      	sub	sp, #40	@ 0x28
 8005768:	af00      	add	r7, sp, #0
 800576a:	ed87 0a07 	vstr	s0, [r7, #28]
 800576e:	edc7 0a06 	vstr	s1, [r7, #24]
 8005772:	ed87 1a05 	vstr	s2, [r7, #20]
 8005776:	edc7 1a04 	vstr	s3, [r7, #16]
 800577a:	ed87 2a03 	vstr	s4, [r7, #12]
 800577e:	edc7 2a02 	vstr	s5, [r7, #8]
 8005782:	ed87 3a01 	vstr	s6, [r7, #4]
	static float ax_f = 0, ay_f = 0, az_f = 0;
    const float alpha = 0.3f;
 8005786:	4b60      	ldr	r3, [pc, #384]	@ (8005908 <Orientation_Update+0x1a4>)
 8005788:	627b      	str	r3, [r7, #36]	@ 0x24

    // LPF filtre
    ax_f = alpha * ax + (1.0f - alpha) * ax_f;
 800578a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800578e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005792:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800579a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800579e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80057a2:	4b5a      	ldr	r3, [pc, #360]	@ (800590c <Orientation_Update+0x1a8>)
 80057a4:	edd3 7a00 	vldr	s15, [r3]
 80057a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057b0:	4b56      	ldr	r3, [pc, #344]	@ (800590c <Orientation_Update+0x1a8>)
 80057b2:	edc3 7a00 	vstr	s15, [r3]
    ay_f = alpha * ay + (1.0f - alpha) * ay_f;
 80057b6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80057ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80057be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057c6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80057ca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80057ce:	4b50      	ldr	r3, [pc, #320]	@ (8005910 <Orientation_Update+0x1ac>)
 80057d0:	edd3 7a00 	vldr	s15, [r3]
 80057d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057dc:	4b4c      	ldr	r3, [pc, #304]	@ (8005910 <Orientation_Update+0x1ac>)
 80057de:	edc3 7a00 	vstr	s15, [r3]
    az_f = alpha * az + (1.0f - alpha) * az_f;
 80057e2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80057e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80057ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057f2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80057f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80057fa:	4b46      	ldr	r3, [pc, #280]	@ (8005914 <Orientation_Update+0x1b0>)
 80057fc:	edd3 7a00 	vldr	s15, [r3]
 8005800:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005808:	4b42      	ldr	r3, [pc, #264]	@ (8005914 <Orientation_Update+0x1b0>)
 800580a:	edc3 7a00 	vstr	s15, [r3]

    // Kazançları güncelle
    UpdateMahonyGains(ax_f, ay_f, az_f);
 800580e:	4b3f      	ldr	r3, [pc, #252]	@ (800590c <Orientation_Update+0x1a8>)
 8005810:	edd3 7a00 	vldr	s15, [r3]
 8005814:	4b3e      	ldr	r3, [pc, #248]	@ (8005910 <Orientation_Update+0x1ac>)
 8005816:	ed93 7a00 	vldr	s14, [r3]
 800581a:	4b3e      	ldr	r3, [pc, #248]	@ (8005914 <Orientation_Update+0x1b0>)
 800581c:	edd3 6a00 	vldr	s13, [r3]
 8005820:	eeb0 1a66 	vmov.f32	s2, s13
 8005824:	eef0 0a47 	vmov.f32	s1, s14
 8005828:	eeb0 0a67 	vmov.f32	s0, s15
 800582c:	f7ff fdce 	bl	80053cc <UpdateMahonyGains>

    // Acc magnitude
    float accMag = sqrtf(ax_f*ax_f + ay_f*ay_f + az_f*az_f);
 8005830:	4b36      	ldr	r3, [pc, #216]	@ (800590c <Orientation_Update+0x1a8>)
 8005832:	ed93 7a00 	vldr	s14, [r3]
 8005836:	4b35      	ldr	r3, [pc, #212]	@ (800590c <Orientation_Update+0x1a8>)
 8005838:	edd3 7a00 	vldr	s15, [r3]
 800583c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005840:	4b33      	ldr	r3, [pc, #204]	@ (8005910 <Orientation_Update+0x1ac>)
 8005842:	edd3 6a00 	vldr	s13, [r3]
 8005846:	4b32      	ldr	r3, [pc, #200]	@ (8005910 <Orientation_Update+0x1ac>)
 8005848:	edd3 7a00 	vldr	s15, [r3]
 800584c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005850:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005854:	4b2f      	ldr	r3, [pc, #188]	@ (8005914 <Orientation_Update+0x1b0>)
 8005856:	edd3 6a00 	vldr	s13, [r3]
 800585a:	4b2e      	ldr	r3, [pc, #184]	@ (8005914 <Orientation_Update+0x1b0>)
 800585c:	edd3 7a00 	vldr	s15, [r3]
 8005860:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005868:	eeb0 0a67 	vmov.f32	s0, s15
 800586c:	f009 fbba 	bl	800efe4 <sqrtf>
 8005870:	ed87 0a08 	vstr	s0, [r7, #32]

    if (gyroOnlyMode) {
 8005874:	4b28      	ldr	r3, [pc, #160]	@ (8005918 <Orientation_Update+0x1b4>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00c      	beq.n	8005896 <Orientation_Update+0x132>
            if (accMag < ACC_THRESHOLD_LOW)
 800587c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005880:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800591c <Orientation_Update+0x1b8>
 8005884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800588c:	d50f      	bpl.n	80058ae <Orientation_Update+0x14a>
                gyroOnlyMode = 0;
 800588e:	4b22      	ldr	r3, [pc, #136]	@ (8005918 <Orientation_Update+0x1b4>)
 8005890:	2200      	movs	r2, #0
 8005892:	701a      	strb	r2, [r3, #0]
 8005894:	e00b      	b.n	80058ae <Orientation_Update+0x14a>
	} else {
		if (accMag > ACC_THRESHOLD_HIGH)
 8005896:	edd7 7a08 	vldr	s15, [r7, #32]
 800589a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005920 <Orientation_Update+0x1bc>
 800589e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a6:	dd02      	ble.n	80058ae <Orientation_Update+0x14a>
			gyroOnlyMode = 1;
 80058a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005918 <Orientation_Update+0x1b4>)
 80058aa:	2201      	movs	r2, #1
 80058ac:	701a      	strb	r2, [r3, #0]
	}



    // Filtre çağrısı
    if (gyroOnlyMode)
 80058ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005918 <Orientation_Update+0x1b4>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <Orientation_Update+0x168>
        updateQuaternion(gx, gy, gz, dt);
 80058b6:	edd7 1a01 	vldr	s3, [r7, #4]
 80058ba:	ed97 1a05 	vldr	s2, [r7, #20]
 80058be:	edd7 0a06 	vldr	s1, [r7, #24]
 80058c2:	ed97 0a07 	vldr	s0, [r7, #28]
 80058c6:	f000 f82d 	bl	8005924 <updateQuaternion>
    else
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
}
 80058ca:	e018      	b.n	80058fe <Orientation_Update+0x19a>
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
 80058cc:	4b0f      	ldr	r3, [pc, #60]	@ (800590c <Orientation_Update+0x1a8>)
 80058ce:	edd3 7a00 	vldr	s15, [r3]
 80058d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005910 <Orientation_Update+0x1ac>)
 80058d4:	ed93 7a00 	vldr	s14, [r3]
 80058d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005914 <Orientation_Update+0x1b0>)
 80058da:	edd3 6a00 	vldr	s13, [r3]
 80058de:	ed97 3a01 	vldr	s6, [r7, #4]
 80058e2:	eef0 2a66 	vmov.f32	s5, s13
 80058e6:	eeb0 2a47 	vmov.f32	s4, s14
 80058ea:	eef0 1a67 	vmov.f32	s3, s15
 80058ee:	ed97 1a05 	vldr	s2, [r7, #20]
 80058f2:	edd7 0a06 	vldr	s1, [r7, #24]
 80058f6:	ed97 0a07 	vldr	s0, [r7, #28]
 80058fa:	f000 f93b 	bl	8005b74 <MahonyAHRSupdateIMU>
}
 80058fe:	bf00      	nop
 8005900:	3728      	adds	r7, #40	@ 0x28
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	3e99999a 	.word	0x3e99999a
 800590c:	20000740 	.word	0x20000740
 8005910:	20000744 	.word	0x20000744
 8005914:	20000748 	.word	0x20000748
 8005918:	2000073d 	.word	0x2000073d
 800591c:	41d3d2db 	.word	0x41d3d2db
 8005920:	420172a2 	.word	0x420172a2

08005924 <updateQuaternion>:


void updateQuaternion(float gx, float gy, float gz, float dt) {
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	@ 0x28
 8005928:	af00      	add	r7, sp, #0
 800592a:	ed87 0a03 	vstr	s0, [r7, #12]
 800592e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005932:	ed87 1a01 	vstr	s2, [r7, #4]
 8005936:	edc7 1a00 	vstr	s3, [r7]
	gx = fminf(fmaxf(gx, -limit), limit);
	gy = fminf(fmaxf(gy, -limit), limit);
	gz = fminf(fmaxf(gz, -limit), limit);*/

    // Quaternion türevleri
    float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 800593a:	4b8c      	ldr	r3, [pc, #560]	@ (8005b6c <updateQuaternion+0x248>)
 800593c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005940:	eeb1 7a67 	vneg.f32	s14, s15
 8005944:	edd7 7a03 	vldr	s15, [r7, #12]
 8005948:	ee27 7a27 	vmul.f32	s14, s14, s15
 800594c:	4b87      	ldr	r3, [pc, #540]	@ (8005b6c <updateQuaternion+0x248>)
 800594e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005952:	edd7 7a02 	vldr	s15, [r7, #8]
 8005956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800595a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800595e:	4b83      	ldr	r3, [pc, #524]	@ (8005b6c <updateQuaternion+0x248>)
 8005960:	edd3 6a03 	vldr	s13, [r3, #12]
 8005964:	edd7 7a01 	vldr	s15, [r7, #4]
 8005968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800596c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005970:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005974:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005978:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float qDot2 = 0.5f * ( q[0] * gx + q[2] * gz - q[3] * gy);
 800597c:	4b7b      	ldr	r3, [pc, #492]	@ (8005b6c <updateQuaternion+0x248>)
 800597e:	ed93 7a00 	vldr	s14, [r3]
 8005982:	edd7 7a03 	vldr	s15, [r7, #12]
 8005986:	ee27 7a27 	vmul.f32	s14, s14, s15
 800598a:	4b78      	ldr	r3, [pc, #480]	@ (8005b6c <updateQuaternion+0x248>)
 800598c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005990:	edd7 7a01 	vldr	s15, [r7, #4]
 8005994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005998:	ee37 7a27 	vadd.f32	s14, s14, s15
 800599c:	4b73      	ldr	r3, [pc, #460]	@ (8005b6c <updateQuaternion+0x248>)
 800599e:	edd3 6a03 	vldr	s13, [r3, #12]
 80059a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80059a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059ae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80059b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059b6:	edc7 7a08 	vstr	s15, [r7, #32]
    float qDot3 = 0.5f * ( q[0] * gy - q[1] * gz + q[3] * gx);
 80059ba:	4b6c      	ldr	r3, [pc, #432]	@ (8005b6c <updateQuaternion+0x248>)
 80059bc:	ed93 7a00 	vldr	s14, [r3]
 80059c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80059c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059c8:	4b68      	ldr	r3, [pc, #416]	@ (8005b6c <updateQuaternion+0x248>)
 80059ca:	edd3 6a01 	vldr	s13, [r3, #4]
 80059ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80059d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059da:	4b64      	ldr	r3, [pc, #400]	@ (8005b6c <updateQuaternion+0x248>)
 80059dc:	edd3 6a03 	vldr	s13, [r3, #12]
 80059e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80059e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059ec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80059f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059f4:	edc7 7a07 	vstr	s15, [r7, #28]
    float qDot4 = 0.5f * ( q[0] * gz + q[1] * gy - q[2] * gx);
 80059f8:	4b5c      	ldr	r3, [pc, #368]	@ (8005b6c <updateQuaternion+0x248>)
 80059fa:	ed93 7a00 	vldr	s14, [r3]
 80059fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a06:	4b59      	ldr	r3, [pc, #356]	@ (8005b6c <updateQuaternion+0x248>)
 8005a08:	edd3 6a01 	vldr	s13, [r3, #4]
 8005a0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a18:	4b54      	ldr	r3, [pc, #336]	@ (8005b6c <updateQuaternion+0x248>)
 8005a1a:	edd3 6a02 	vldr	s13, [r3, #8]
 8005a1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a2a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005a2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a32:	edc7 7a06 	vstr	s15, [r7, #24]

    // Entegrasyon
    q[0] += qDot1 * dt;
 8005a36:	4b4d      	ldr	r3, [pc, #308]	@ (8005b6c <updateQuaternion+0x248>)
 8005a38:	ed93 7a00 	vldr	s14, [r3]
 8005a3c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005a40:	edd7 7a00 	vldr	s15, [r7]
 8005a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a4c:	4b47      	ldr	r3, [pc, #284]	@ (8005b6c <updateQuaternion+0x248>)
 8005a4e:	edc3 7a00 	vstr	s15, [r3]
    q[1] += qDot2 * dt;
 8005a52:	4b46      	ldr	r3, [pc, #280]	@ (8005b6c <updateQuaternion+0x248>)
 8005a54:	ed93 7a01 	vldr	s14, [r3, #4]
 8005a58:	edd7 6a08 	vldr	s13, [r7, #32]
 8005a5c:	edd7 7a00 	vldr	s15, [r7]
 8005a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a68:	4b40      	ldr	r3, [pc, #256]	@ (8005b6c <updateQuaternion+0x248>)
 8005a6a:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] += qDot3 * dt;
 8005a6e:	4b3f      	ldr	r3, [pc, #252]	@ (8005b6c <updateQuaternion+0x248>)
 8005a70:	ed93 7a02 	vldr	s14, [r3, #8]
 8005a74:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a78:	edd7 7a00 	vldr	s15, [r7]
 8005a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a84:	4b39      	ldr	r3, [pc, #228]	@ (8005b6c <updateQuaternion+0x248>)
 8005a86:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] += qDot4 * dt;
 8005a8a:	4b38      	ldr	r3, [pc, #224]	@ (8005b6c <updateQuaternion+0x248>)
 8005a8c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005a90:	edd7 6a06 	vldr	s13, [r7, #24]
 8005a94:	edd7 7a00 	vldr	s15, [r7]
 8005a98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aa0:	4b32      	ldr	r3, [pc, #200]	@ (8005b6c <updateQuaternion+0x248>)
 8005aa2:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalize et
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8005aa6:	4b31      	ldr	r3, [pc, #196]	@ (8005b6c <updateQuaternion+0x248>)
 8005aa8:	ed93 7a00 	vldr	s14, [r3]
 8005aac:	4b2f      	ldr	r3, [pc, #188]	@ (8005b6c <updateQuaternion+0x248>)
 8005aae:	edd3 7a00 	vldr	s15, [r3]
 8005ab2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8005b6c <updateQuaternion+0x248>)
 8005ab8:	edd3 6a01 	vldr	s13, [r3, #4]
 8005abc:	4b2b      	ldr	r3, [pc, #172]	@ (8005b6c <updateQuaternion+0x248>)
 8005abe:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ac6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005aca:	4b28      	ldr	r3, [pc, #160]	@ (8005b6c <updateQuaternion+0x248>)
 8005acc:	edd3 6a02 	vldr	s13, [r3, #8]
 8005ad0:	4b26      	ldr	r3, [pc, #152]	@ (8005b6c <updateQuaternion+0x248>)
 8005ad2:	edd3 7a02 	vldr	s15, [r3, #8]
 8005ad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ada:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ade:	4b23      	ldr	r3, [pc, #140]	@ (8005b6c <updateQuaternion+0x248>)
 8005ae0:	edd3 6a03 	vldr	s13, [r3, #12]
 8005ae4:	4b21      	ldr	r3, [pc, #132]	@ (8005b6c <updateQuaternion+0x248>)
 8005ae6:	edd3 7a03 	vldr	s15, [r3, #12]
 8005aea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005af2:	eeb0 0a67 	vmov.f32	s0, s15
 8005af6:	f009 fa75 	bl	800efe4 <sqrtf>
 8005afa:	ed87 0a05 	vstr	s0, [r7, #20]
    if (norm > 1e-6f) {
 8005afe:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b02:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8005b70 <updateQuaternion+0x24c>
 8005b06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0e:	dc00      	bgt.n	8005b12 <updateQuaternion+0x1ee>
        q[0] /= norm;
        q[1] /= norm;
        q[2] /= norm;
        q[3] /= norm;
    }
}
 8005b10:	e027      	b.n	8005b62 <updateQuaternion+0x23e>
        q[0] /= norm;
 8005b12:	4b16      	ldr	r3, [pc, #88]	@ (8005b6c <updateQuaternion+0x248>)
 8005b14:	edd3 6a00 	vldr	s13, [r3]
 8005b18:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b20:	4b12      	ldr	r3, [pc, #72]	@ (8005b6c <updateQuaternion+0x248>)
 8005b22:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= norm;
 8005b26:	4b11      	ldr	r3, [pc, #68]	@ (8005b6c <updateQuaternion+0x248>)
 8005b28:	edd3 6a01 	vldr	s13, [r3, #4]
 8005b2c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b34:	4b0d      	ldr	r3, [pc, #52]	@ (8005b6c <updateQuaternion+0x248>)
 8005b36:	edc3 7a01 	vstr	s15, [r3, #4]
        q[2] /= norm;
 8005b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b6c <updateQuaternion+0x248>)
 8005b3c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005b40:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b48:	4b08      	ldr	r3, [pc, #32]	@ (8005b6c <updateQuaternion+0x248>)
 8005b4a:	edc3 7a02 	vstr	s15, [r3, #8]
        q[3] /= norm;
 8005b4e:	4b07      	ldr	r3, [pc, #28]	@ (8005b6c <updateQuaternion+0x248>)
 8005b50:	edd3 6a03 	vldr	s13, [r3, #12]
 8005b54:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b5c:	4b03      	ldr	r3, [pc, #12]	@ (8005b6c <updateQuaternion+0x248>)
 8005b5e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8005b62:	bf00      	nop
 8005b64:	3728      	adds	r7, #40	@ 0x28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000028 	.word	0x20000028
 8005b70:	358637bd 	.word	0x358637bd

08005b74 <MahonyAHRSupdateIMU>:
        q[2] /= norm_q;
        q[3] /= norm_q;
    }
}

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax_f, float ay_f, float az_f, float dt) {
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b092      	sub	sp, #72	@ 0x48
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	ed87 0a07 	vstr	s0, [r7, #28]
 8005b7e:	edc7 0a06 	vstr	s1, [r7, #24]
 8005b82:	ed87 1a05 	vstr	s2, [r7, #20]
 8005b86:	edc7 1a04 	vstr	s3, [r7, #16]
 8005b8a:	ed87 2a03 	vstr	s4, [r7, #12]
 8005b8e:	edc7 2a02 	vstr	s5, [r7, #8]
 8005b92:	ed87 3a01 	vstr	s6, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
		if(!((ax_f == 0.0f) && (ay_f == 0.0f) && (az_f == 0.0f))) {
 8005b96:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba2:	d10e      	bne.n	8005bc2 <MahonyAHRSupdateIMU+0x4e>
 8005ba4:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ba8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb0:	d107      	bne.n	8005bc2 <MahonyAHRSupdateIMU+0x4e>
 8005bb2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bbe:	f000 8138 	beq.w	8005e32 <MahonyAHRSupdateIMU+0x2be>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax_f * ax_f + ay_f * ay_f + az_f * az_f);
 8005bc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8005bc6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005bca:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005bd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bda:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005be2:	eeb0 0a67 	vmov.f32	s0, s15
 8005be6:	f000 fd43 	bl	8006670 <invSqrt>
 8005bea:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax_f *= recipNorm;
 8005bee:	ed97 7a04 	vldr	s14, [r7, #16]
 8005bf2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bfa:	edc7 7a04 	vstr	s15, [r7, #16]
		ay_f *= recipNorm;
 8005bfe:	ed97 7a03 	vldr	s14, [r7, #12]
 8005c02:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c0a:	edc7 7a03 	vstr	s15, [r7, #12]
		az_f *= recipNorm;
 8005c0e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005c12:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1a:	edc7 7a02 	vstr	s15, [r7, #8]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8005c1e:	4b66      	ldr	r3, [pc, #408]	@ (8005db8 <MahonyAHRSupdateIMU+0x244>)
 8005c20:	ed93 7a01 	vldr	s14, [r3, #4]
 8005c24:	4b64      	ldr	r3, [pc, #400]	@ (8005db8 <MahonyAHRSupdateIMU+0x244>)
 8005c26:	edd3 7a03 	vldr	s15, [r3, #12]
 8005c2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c2e:	4b62      	ldr	r3, [pc, #392]	@ (8005db8 <MahonyAHRSupdateIMU+0x244>)
 8005c30:	edd3 6a00 	vldr	s13, [r3]
 8005c34:	4b60      	ldr	r3, [pc, #384]	@ (8005db8 <MahonyAHRSupdateIMU+0x244>)
 8005c36:	edd3 7a02 	vldr	s15, [r3, #8]
 8005c3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c42:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8005c46:	4b5c      	ldr	r3, [pc, #368]	@ (8005db8 <MahonyAHRSupdateIMU+0x244>)
 8005c48:	ed93 7a00 	vldr	s14, [r3]
 8005c4c:	4b5a      	ldr	r3, [pc, #360]	@ (8005db8 <MahonyAHRSupdateIMU+0x244>)
 8005c4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c56:	4b58      	ldr	r3, [pc, #352]	@ (8005db8 <MahonyAHRSupdateIMU+0x244>)
 8005c58:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c5c:	4b56      	ldr	r3, [pc, #344]	@ (8005db8 <MahonyAHRSupdateIMU+0x244>)
 8005c5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005c62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c6a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8005c6e:	4b52      	ldr	r3, [pc, #328]	@ (8005db8 <MahonyAHRSupdateIMU+0x244>)
 8005c70:	ed93 7a00 	vldr	s14, [r3]
 8005c74:	4b50      	ldr	r3, [pc, #320]	@ (8005db8 <MahonyAHRSupdateIMU+0x244>)
 8005c76:	edd3 7a00 	vldr	s15, [r3]
 8005c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005c82:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005c86:	4b4c      	ldr	r3, [pc, #304]	@ (8005db8 <MahonyAHRSupdateIMU+0x244>)
 8005c88:	edd3 6a03 	vldr	s13, [r3, #12]
 8005c8c:	4b4a      	ldr	r3, [pc, #296]	@ (8005db8 <MahonyAHRSupdateIMU+0x244>)
 8005c8e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005c92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c9a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay_f * halfvz - az_f * halfvy);
 8005c9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005ca2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005ca6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005caa:	edd7 6a02 	vldr	s13, [r7, #8]
 8005cae:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005cb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cba:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az_f * halfvx - ax_f * halfvz);
 8005cbe:	ed97 7a02 	vldr	s14, [r7, #8]
 8005cc2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8005cc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cca:	edd7 6a04 	vldr	s13, [r7, #16]
 8005cce:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005cd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cda:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax_f * halfvy - ay_f * halfvx);
 8005cde:	ed97 7a04 	vldr	s14, [r7, #16]
 8005ce2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005ce6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cea:	edd7 6a03 	vldr	s13, [r7, #12]
 8005cee:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8005cf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cfa:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8005cfe:	4b2f      	ldr	r3, [pc, #188]	@ (8005dbc <MahonyAHRSupdateIMU+0x248>)
 8005d00:	edd3 7a00 	vldr	s15, [r3]
 8005d04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d0c:	dd5e      	ble.n	8005dcc <MahonyAHRSupdateIMU+0x258>
			integralFBx += twoKi * halfex * dt;	// integral error scaled by Ki
 8005d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8005dbc <MahonyAHRSupdateIMU+0x248>)
 8005d10:	ed93 7a00 	vldr	s14, [r3]
 8005d14:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005d18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d24:	4b26      	ldr	r3, [pc, #152]	@ (8005dc0 <MahonyAHRSupdateIMU+0x24c>)
 8005d26:	edd3 7a00 	vldr	s15, [r3]
 8005d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d2e:	4b24      	ldr	r3, [pc, #144]	@ (8005dc0 <MahonyAHRSupdateIMU+0x24c>)
 8005d30:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * dt;
 8005d34:	4b21      	ldr	r3, [pc, #132]	@ (8005dbc <MahonyAHRSupdateIMU+0x248>)
 8005d36:	ed93 7a00 	vldr	s14, [r3]
 8005d3a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005d3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d42:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8005dc4 <MahonyAHRSupdateIMU+0x250>)
 8005d4c:	edd3 7a00 	vldr	s15, [r3]
 8005d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d54:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc4 <MahonyAHRSupdateIMU+0x250>)
 8005d56:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * dt;
 8005d5a:	4b18      	ldr	r3, [pc, #96]	@ (8005dbc <MahonyAHRSupdateIMU+0x248>)
 8005d5c:	ed93 7a00 	vldr	s14, [r3]
 8005d60:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005d64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d68:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d70:	4b15      	ldr	r3, [pc, #84]	@ (8005dc8 <MahonyAHRSupdateIMU+0x254>)
 8005d72:	edd3 7a00 	vldr	s15, [r3]
 8005d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d7a:	4b13      	ldr	r3, [pc, #76]	@ (8005dc8 <MahonyAHRSupdateIMU+0x254>)
 8005d7c:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8005d80:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc0 <MahonyAHRSupdateIMU+0x24c>)
 8005d82:	edd3 7a00 	vldr	s15, [r3]
 8005d86:	ed97 7a07 	vldr	s14, [r7, #28]
 8005d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d8e:	edc7 7a07 	vstr	s15, [r7, #28]
			gy += integralFBy;
 8005d92:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc4 <MahonyAHRSupdateIMU+0x250>)
 8005d94:	edd3 7a00 	vldr	s15, [r3]
 8005d98:	ed97 7a06 	vldr	s14, [r7, #24]
 8005d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005da0:	edc7 7a06 	vstr	s15, [r7, #24]
			gz += integralFBz;
 8005da4:	4b08      	ldr	r3, [pc, #32]	@ (8005dc8 <MahonyAHRSupdateIMU+0x254>)
 8005da6:	edd3 7a00 	vldr	s15, [r3]
 8005daa:	ed97 7a05 	vldr	s14, [r7, #20]
 8005dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005db2:	edc7 7a05 	vstr	s15, [r7, #20]
 8005db6:	e015      	b.n	8005de4 <MahonyAHRSupdateIMU+0x270>
 8005db8:	20000028 	.word	0x20000028
 8005dbc:	2000003c 	.word	0x2000003c
 8005dc0:	20000730 	.word	0x20000730
 8005dc4:	20000734 	.word	0x20000734
 8005dc8:	20000738 	.word	0x20000738
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8005dcc:	4b9a      	ldr	r3, [pc, #616]	@ (8006038 <MahonyAHRSupdateIMU+0x4c4>)
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8005dd4:	4b99      	ldr	r3, [pc, #612]	@ (800603c <MahonyAHRSupdateIMU+0x4c8>)
 8005dd6:	f04f 0200 	mov.w	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8005ddc:	4b98      	ldr	r3, [pc, #608]	@ (8006040 <MahonyAHRSupdateIMU+0x4cc>)
 8005dde:	f04f 0200 	mov.w	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8005de4:	4b97      	ldr	r3, [pc, #604]	@ (8006044 <MahonyAHRSupdateIMU+0x4d0>)
 8005de6:	ed93 7a00 	vldr	s14, [r3]
 8005dea:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df2:	ed97 7a07 	vldr	s14, [r7, #28]
 8005df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dfa:	edc7 7a07 	vstr	s15, [r7, #28]
		gy += twoKp * halfey;
 8005dfe:	4b91      	ldr	r3, [pc, #580]	@ (8006044 <MahonyAHRSupdateIMU+0x4d0>)
 8005e00:	ed93 7a00 	vldr	s14, [r3]
 8005e04:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0c:	ed97 7a06 	vldr	s14, [r7, #24]
 8005e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e14:	edc7 7a06 	vstr	s15, [r7, #24]
		gz += twoKp * halfez;
 8005e18:	4b8a      	ldr	r3, [pc, #552]	@ (8006044 <MahonyAHRSupdateIMU+0x4d0>)
 8005e1a:	ed93 7a00 	vldr	s14, [r3]
 8005e1e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e26:	ed97 7a05 	vldr	s14, [r7, #20]
 8005e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e2e:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * dt);		// pre-multiply common factors
 8005e32:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e36:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e46:	edc7 7a07 	vstr	s15, [r7, #28]
	gy *= (0.5f * dt);
 8005e4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e4e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e56:	ed97 7a06 	vldr	s14, [r7, #24]
 8005e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e5e:	edc7 7a06 	vstr	s15, [r7, #24]
	gz *= (0.5f * dt);
 8005e62:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e66:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e76:	edc7 7a05 	vstr	s15, [r7, #20]
	qa = q[0];
 8005e7a:	4b73      	ldr	r3, [pc, #460]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 8005e80:	4b71      	ldr	r3, [pc, #452]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8005e86:	4b70      	ldr	r3, [pc, #448]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8005e8c:	4b6e      	ldr	r3, [pc, #440]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005e8e:	ed93 7a00 	vldr	s14, [r3]
 8005e92:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005e96:	eef1 6a67 	vneg.f32	s13, s15
 8005e9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8005e9e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ea2:	ed97 6a08 	vldr	s12, [r7, #32]
 8005ea6:	edd7 7a06 	vldr	s15, [r7, #24]
 8005eaa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005eae:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005eb2:	4b65      	ldr	r3, [pc, #404]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005eb4:	ed93 6a03 	vldr	s12, [r3, #12]
 8005eb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ebc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005ec0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ec8:	4b5f      	ldr	r3, [pc, #380]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005eca:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8005ece:	4b5e      	ldr	r3, [pc, #376]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005ed0:	ed93 7a01 	vldr	s14, [r3, #4]
 8005ed4:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005ed8:	edd7 7a07 	vldr	s15, [r7, #28]
 8005edc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ee0:	ed97 6a08 	vldr	s12, [r7, #32]
 8005ee4:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ee8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005eec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005ef0:	4b55      	ldr	r3, [pc, #340]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005ef2:	ed93 6a03 	vldr	s12, [r3, #12]
 8005ef6:	edd7 7a06 	vldr	s15, [r7, #24]
 8005efa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005efe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005f02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f06:	4b50      	ldr	r3, [pc, #320]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005f08:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8005f0c:	4b4e      	ldr	r3, [pc, #312]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005f0e:	ed93 7a02 	vldr	s14, [r3, #8]
 8005f12:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005f16:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f1a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f1e:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8005f22:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f26:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005f2a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005f2e:	4b46      	ldr	r3, [pc, #280]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005f30:	ed93 6a03 	vldr	s12, [r3, #12]
 8005f34:	edd7 7a07 	vldr	s15, [r7, #28]
 8005f38:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005f3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f44:	4b40      	ldr	r3, [pc, #256]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005f46:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] += (qa * gz + qb * gy - qc * gx);
 8005f4a:	4b3f      	ldr	r3, [pc, #252]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005f4c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005f50:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005f54:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f5c:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8005f60:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f64:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005f68:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005f6c:	ed97 6a08 	vldr	s12, [r7, #32]
 8005f70:	edd7 7a07 	vldr	s15, [r7, #28]
 8005f74:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005f78:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f80:	4b31      	ldr	r3, [pc, #196]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005f82:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8005f86:	4b30      	ldr	r3, [pc, #192]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005f88:	ed93 7a00 	vldr	s14, [r3]
 8005f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005f8e:	edd3 7a00 	vldr	s15, [r3]
 8005f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f96:	4b2c      	ldr	r3, [pc, #176]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005f98:	edd3 6a01 	vldr	s13, [r3, #4]
 8005f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005f9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005fa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005faa:	4b27      	ldr	r3, [pc, #156]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005fac:	edd3 6a02 	vldr	s13, [r3, #8]
 8005fb0:	4b25      	ldr	r3, [pc, #148]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005fb2:	edd3 7a02 	vldr	s15, [r3, #8]
 8005fb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fbe:	4b22      	ldr	r3, [pc, #136]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005fc0:	edd3 6a03 	vldr	s13, [r3, #12]
 8005fc4:	4b20      	ldr	r3, [pc, #128]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005fc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8005fca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8005fd6:	f000 fb4b 	bl	8006670 <invSqrt>
 8005fda:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 8005fde:	4b1a      	ldr	r3, [pc, #104]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005fe0:	ed93 7a00 	vldr	s14, [r3]
 8005fe4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fec:	4b16      	ldr	r3, [pc, #88]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005fee:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8005ff2:	4b15      	ldr	r3, [pc, #84]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8005ff4:	ed93 7a01 	vldr	s14, [r3, #4]
 8005ff8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006000:	4b11      	ldr	r3, [pc, #68]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8006002:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] *= recipNorm;
 8006006:	4b10      	ldr	r3, [pc, #64]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8006008:	ed93 7a02 	vldr	s14, [r3, #8]
 800600c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006014:	4b0c      	ldr	r3, [pc, #48]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 8006016:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] *= recipNorm;
 800601a:	4b0b      	ldr	r3, [pc, #44]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 800601c:	ed93 7a03 	vldr	s14, [r3, #12]
 8006020:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006028:	4b07      	ldr	r3, [pc, #28]	@ (8006048 <MahonyAHRSupdateIMU+0x4d4>)
 800602a:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800602e:	bf00      	nop
 8006030:	3748      	adds	r7, #72	@ 0x48
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20000730 	.word	0x20000730
 800603c:	20000734 	.word	0x20000734
 8006040:	20000738 	.word	0x20000738
 8006044:	20000038 	.word	0x20000038
 8006048:	20000028 	.word	0x20000028

0800604c <quaternionToYawDegree>:

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
    return acosf(safeValue) * (180.0f / 3.14f);
}

float quaternionToYawDegree() {
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 8006052:	4b20      	ldr	r3, [pc, #128]	@ (80060d4 <quaternionToYawDegree+0x88>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	4b1e      	ldr	r3, [pc, #120]	@ (80060d4 <quaternionToYawDegree+0x88>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	613b      	str	r3, [r7, #16]
 800605e:	4b1d      	ldr	r3, [pc, #116]	@ (80060d4 <quaternionToYawDegree+0x88>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	4b1b      	ldr	r3, [pc, #108]	@ (80060d4 <quaternionToYawDegree+0x88>)
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	60bb      	str	r3, [r7, #8]
    float siny_cosp = 2.0f * (w * z + x * y);
 800606a:	ed97 7a05 	vldr	s14, [r7, #20]
 800606e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006072:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006076:	edd7 6a04 	vldr	s13, [r7, #16]
 800607a:	edd7 7a03 	vldr	s15, [r7, #12]
 800607e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006086:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800608a:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
 800608e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006092:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006096:	edd7 7a02 	vldr	s15, [r7, #8]
 800609a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800609e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060ae:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
 80060b2:	edd7 0a00 	vldr	s1, [r7]
 80060b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80060ba:	f008 ff91 	bl	800efe0 <atan2f>
 80060be:	eef0 7a40 	vmov.f32	s15, s0
 80060c2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80060d8 <quaternionToYawDegree+0x8c>
 80060c6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80060ca:	eeb0 0a67 	vmov.f32	s0, s15
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20000028 	.word	0x20000028
 80060d8:	42652ee0 	.word	0x42652ee0

080060dc <quaternionToPitchDegree>:

float quaternionToPitchDegree() {
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 80060e2:	4b22      	ldr	r3, [pc, #136]	@ (800616c <quaternionToPitchDegree+0x90>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	4b20      	ldr	r3, [pc, #128]	@ (800616c <quaternionToPitchDegree+0x90>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	613b      	str	r3, [r7, #16]
 80060ee:	4b1f      	ldr	r3, [pc, #124]	@ (800616c <quaternionToPitchDegree+0x90>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	4b1d      	ldr	r3, [pc, #116]	@ (800616c <quaternionToPitchDegree+0x90>)
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	60bb      	str	r3, [r7, #8]
    float sinp = 2.0f * (w * y - z * x);
 80060fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80060fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8006102:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006106:	edd7 6a02 	vldr	s13, [r7, #8]
 800610a:	edd7 7a04 	vldr	s15, [r7, #16]
 800610e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006112:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006116:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800611a:	edc7 7a01 	vstr	s15, [r7, #4]
    if (fabsf(sinp) >= 1.0f)
 800611e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006122:	eef0 7ae7 	vabs.f32	s15, s15
 8006126:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800612a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800612e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006132:	db0c      	blt.n	800614e <quaternionToPitchDegree+0x72>
        return (sinp > 0 ? 90.0f : -90.0f); // clamp
 8006134:	edd7 7a01 	vldr	s15, [r7, #4]
 8006138:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800613c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006140:	dd02      	ble.n	8006148 <quaternionToPitchDegree+0x6c>
 8006142:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8006170 <quaternionToPitchDegree+0x94>
 8006146:	e00c      	b.n	8006162 <quaternionToPitchDegree+0x86>
 8006148:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8006174 <quaternionToPitchDegree+0x98>
 800614c:	e009      	b.n	8006162 <quaternionToPitchDegree+0x86>
    else
        return asinf(sinp) * (180.0f / 3.14159265f);
 800614e:	ed97 0a01 	vldr	s0, [r7, #4]
 8006152:	f008 ff19 	bl	800ef88 <asinf>
 8006156:	eef0 7a40 	vmov.f32	s15, s0
 800615a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006178 <quaternionToPitchDegree+0x9c>
 800615e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006162:	eeb0 0a67 	vmov.f32	s0, s15
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	20000028 	.word	0x20000028
 8006170:	42b40000 	.word	0x42b40000
 8006174:	c2b40000 	.word	0xc2b40000
 8006178:	42652ee0 	.word	0x42652ee0

0800617c <quaternionToRollDegree>:

float quaternionToRollDegree(){
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 8006182:	4b20      	ldr	r3, [pc, #128]	@ (8006204 <quaternionToRollDegree+0x88>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	617b      	str	r3, [r7, #20]
 8006188:	4b1e      	ldr	r3, [pc, #120]	@ (8006204 <quaternionToRollDegree+0x88>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	613b      	str	r3, [r7, #16]
 800618e:	4b1d      	ldr	r3, [pc, #116]	@ (8006204 <quaternionToRollDegree+0x88>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	4b1b      	ldr	r3, [pc, #108]	@ (8006204 <quaternionToRollDegree+0x88>)
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	60bb      	str	r3, [r7, #8]
    float sinr_cosp = 2.0f * (w * x + y * z);
 800619a:	ed97 7a05 	vldr	s14, [r7, #20]
 800619e:	edd7 7a04 	vldr	s15, [r7, #16]
 80061a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061a6:	edd7 6a03 	vldr	s13, [r7, #12]
 80061aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80061ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80061ba:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosr_cosp = 1.0f - 2.0f * (x * x + y * y);
 80061be:	edd7 7a04 	vldr	s15, [r7, #16]
 80061c2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80061c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80061ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80061ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80061d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061de:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(sinr_cosp, cosr_cosp) * (180.0f / 3.14159265f);
 80061e2:	edd7 0a00 	vldr	s1, [r7]
 80061e6:	ed97 0a01 	vldr	s0, [r7, #4]
 80061ea:	f008 fef9 	bl	800efe0 <atan2f>
 80061ee:	eef0 7a40 	vmov.f32	s15, s0
 80061f2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006208 <quaternionToRollDegree+0x8c>
 80061f6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80061fa:	eeb0 0a67 	vmov.f32	s0, s15
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	20000028 	.word	0x20000028
 8006208:	42652ee0 	.word	0x42652ee0

0800620c <quaternionToYaw>:


float quaternionToYaw(){
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 8006212:	4b2a      	ldr	r3, [pc, #168]	@ (80062bc <quaternionToYaw+0xb0>)
 8006214:	ed93 7a01 	vldr	s14, [r3, #4]
 8006218:	4b28      	ldr	r3, [pc, #160]	@ (80062bc <quaternionToYaw+0xb0>)
 800621a:	edd3 7a02 	vldr	s15, [r3, #8]
 800621e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006222:	4b26      	ldr	r3, [pc, #152]	@ (80062bc <quaternionToYaw+0xb0>)
 8006224:	edd3 6a00 	vldr	s13, [r3]
 8006228:	4b24      	ldr	r3, [pc, #144]	@ (80062bc <quaternionToYaw+0xb0>)
 800622a:	edd3 7a03 	vldr	s15, [r3, #12]
 800622e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006236:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800623a:	4b20      	ldr	r3, [pc, #128]	@ (80062bc <quaternionToYaw+0xb0>)
 800623c:	ed93 7a00 	vldr	s14, [r3]
 8006240:	4b1e      	ldr	r3, [pc, #120]	@ (80062bc <quaternionToYaw+0xb0>)
 8006242:	edd3 7a00 	vldr	s15, [r3]
 8006246:	ee27 7a27 	vmul.f32	s14, s14, s15
 800624a:	4b1c      	ldr	r3, [pc, #112]	@ (80062bc <quaternionToYaw+0xb0>)
 800624c:	edd3 6a01 	vldr	s13, [r3, #4]
 8006250:	4b1a      	ldr	r3, [pc, #104]	@ (80062bc <quaternionToYaw+0xb0>)
 8006252:	edd3 7a01 	vldr	s15, [r3, #4]
 8006256:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800625a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800625e:	4b17      	ldr	r3, [pc, #92]	@ (80062bc <quaternionToYaw+0xb0>)
 8006260:	edd3 6a02 	vldr	s13, [r3, #8]
 8006264:	4b15      	ldr	r3, [pc, #84]	@ (80062bc <quaternionToYaw+0xb0>)
 8006266:	edd3 7a02 	vldr	s15, [r3, #8]
 800626a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800626e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006272:	4b12      	ldr	r3, [pc, #72]	@ (80062bc <quaternionToYaw+0xb0>)
 8006274:	edd3 6a03 	vldr	s13, [r3, #12]
 8006278:	4b10      	ldr	r3, [pc, #64]	@ (80062bc <quaternionToYaw+0xb0>)
 800627a:	edd3 7a03 	vldr	s15, [r3, #12]
 800627e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006286:	eef0 0a67 	vmov.f32	s1, s15
 800628a:	eeb0 0a46 	vmov.f32	s0, s12
 800628e:	f008 fea7 	bl	800efe0 <atan2f>
 8006292:	eef0 7a40 	vmov.f32	s15, s0
 8006296:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80062c0 <quaternionToYaw+0xb4>
 800629a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800629e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80062c4 <quaternionToYaw+0xb8>
 80062a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062a6:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	ee07 3a90 	vmov	s15, r3
}
 80062b0:	eeb0 0a67 	vmov.f32	s0, s15
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20000028 	.word	0x20000028
 80062c0:	43340000 	.word	0x43340000
 80062c4:	40490fd0 	.word	0x40490fd0

080062c8 <quaternionToPitch>:

float quaternionToPitch(){
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 80062ce:	4b17      	ldr	r3, [pc, #92]	@ (800632c <quaternionToPitch+0x64>)
 80062d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80062d4:	4b15      	ldr	r3, [pc, #84]	@ (800632c <quaternionToPitch+0x64>)
 80062d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80062da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062de:	4b13      	ldr	r3, [pc, #76]	@ (800632c <quaternionToPitch+0x64>)
 80062e0:	edd3 6a00 	vldr	s13, [r3]
 80062e4:	4b11      	ldr	r3, [pc, #68]	@ (800632c <quaternionToPitch+0x64>)
 80062e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80062ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80062f6:	eeb0 0a67 	vmov.f32	s0, s15
 80062fa:	f008 fe45 	bl	800ef88 <asinf>
 80062fe:	eef0 7a40 	vmov.f32	s15, s0
 8006302:	eef1 7a67 	vneg.f32	s15, s15
 8006306:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006330 <quaternionToPitch+0x68>
 800630a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800630e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006334 <quaternionToPitch+0x6c>
 8006312:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006316:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	ee07 3a90 	vmov	s15, r3
}
 8006320:	eeb0 0a67 	vmov.f32	s0, s15
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20000028 	.word	0x20000028
 8006330:	43340000 	.word	0x43340000
 8006334:	40490fd0 	.word	0x40490fd0

08006338 <quaternionToRoll>:

float quaternionToRoll(){
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 800633e:	4b2a      	ldr	r3, [pc, #168]	@ (80063e8 <quaternionToRoll+0xb0>)
 8006340:	ed93 7a00 	vldr	s14, [r3]
 8006344:	4b28      	ldr	r3, [pc, #160]	@ (80063e8 <quaternionToRoll+0xb0>)
 8006346:	edd3 7a01 	vldr	s15, [r3, #4]
 800634a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800634e:	4b26      	ldr	r3, [pc, #152]	@ (80063e8 <quaternionToRoll+0xb0>)
 8006350:	edd3 6a02 	vldr	s13, [r3, #8]
 8006354:	4b24      	ldr	r3, [pc, #144]	@ (80063e8 <quaternionToRoll+0xb0>)
 8006356:	edd3 7a03 	vldr	s15, [r3, #12]
 800635a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800635e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006362:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8006366:	4b20      	ldr	r3, [pc, #128]	@ (80063e8 <quaternionToRoll+0xb0>)
 8006368:	ed93 7a00 	vldr	s14, [r3]
 800636c:	4b1e      	ldr	r3, [pc, #120]	@ (80063e8 <quaternionToRoll+0xb0>)
 800636e:	edd3 7a00 	vldr	s15, [r3]
 8006372:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006376:	4b1c      	ldr	r3, [pc, #112]	@ (80063e8 <quaternionToRoll+0xb0>)
 8006378:	edd3 6a01 	vldr	s13, [r3, #4]
 800637c:	4b1a      	ldr	r3, [pc, #104]	@ (80063e8 <quaternionToRoll+0xb0>)
 800637e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006386:	ee37 7a67 	vsub.f32	s14, s14, s15
 800638a:	4b17      	ldr	r3, [pc, #92]	@ (80063e8 <quaternionToRoll+0xb0>)
 800638c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006390:	4b15      	ldr	r3, [pc, #84]	@ (80063e8 <quaternionToRoll+0xb0>)
 8006392:	edd3 7a02 	vldr	s15, [r3, #8]
 8006396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800639a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800639e:	4b12      	ldr	r3, [pc, #72]	@ (80063e8 <quaternionToRoll+0xb0>)
 80063a0:	edd3 6a03 	vldr	s13, [r3, #12]
 80063a4:	4b10      	ldr	r3, [pc, #64]	@ (80063e8 <quaternionToRoll+0xb0>)
 80063a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80063aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063b2:	eef0 0a67 	vmov.f32	s1, s15
 80063b6:	eeb0 0a46 	vmov.f32	s0, s12
 80063ba:	f008 fe11 	bl	800efe0 <atan2f>
 80063be:	eef0 7a40 	vmov.f32	s15, s0
 80063c2:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80063ec <quaternionToRoll+0xb4>
 80063c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80063ca:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80063f0 <quaternionToRoll+0xb8>
 80063ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063d2:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	ee07 3a90 	vmov	s15, r3
}
 80063dc:	eeb0 0a67 	vmov.f32	s0, s15
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20000028 	.word	0x20000028
 80063ec:	43340000 	.word	0x43340000
 80063f0:	40490fd0 	.word	0x40490fd0

080063f4 <getInitialQuaternion>:

void getInitialQuaternion() {
 80063f4:	b5b0      	push	{r4, r5, r7, lr}
 80063f6:	b092      	sub	sp, #72	@ 0x48
 80063f8:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.acc_z * BMI_sensor.acc_z + BMI_sensor.acc_x * BMI_sensor.acc_x + BMI_sensor.acc_y * BMI_sensor.acc_y);
 80063fa:	4b99      	ldr	r3, [pc, #612]	@ (8006660 <getInitialQuaternion+0x26c>)
 80063fc:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8006400:	4b97      	ldr	r3, [pc, #604]	@ (8006660 <getInitialQuaternion+0x26c>)
 8006402:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 8006406:	ee27 7a27 	vmul.f32	s14, s14, s15
 800640a:	4b95      	ldr	r3, [pc, #596]	@ (8006660 <getInitialQuaternion+0x26c>)
 800640c:	edd3 6a2f 	vldr	s13, [r3, #188]	@ 0xbc
 8006410:	4b93      	ldr	r3, [pc, #588]	@ (8006660 <getInitialQuaternion+0x26c>)
 8006412:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8006416:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800641a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800641e:	4b90      	ldr	r3, [pc, #576]	@ (8006660 <getInitialQuaternion+0x26c>)
 8006420:	edd3 6a30 	vldr	s13, [r3, #192]	@ 0xc0
 8006424:	4b8e      	ldr	r3, [pc, #568]	@ (8006660 <getInitialQuaternion+0x26c>)
 8006426:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 800642a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800642e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006432:	ee17 0a90 	vmov	r0, s15
 8006436:	f7fa f8a7 	bl	8000588 <__aeabi_f2d>
 800643a:	4602      	mov	r2, r0
 800643c:	460b      	mov	r3, r1
 800643e:	ec43 2b10 	vmov	d0, r2, r3
 8006442:	f008 fcf3 	bl	800ee2c <sqrt>
 8006446:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.acc_x;
 800644a:	4b85      	ldr	r3, [pc, #532]	@ (8006660 <getInitialQuaternion+0x26c>)
 800644c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006450:	4618      	mov	r0, r3
 8006452:	f7fa f899 	bl	8000588 <__aeabi_f2d>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)-BMI_sensor.acc_z;
 800645e:	4b80      	ldr	r3, [pc, #512]	@ (8006660 <getInitialQuaternion+0x26c>)
 8006460:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 8006464:	eef1 7a67 	vneg.f32	s15, s15
 8006468:	ee17 3a90 	vmov	r3, s15
 800646c:	4618      	mov	r0, r3
 800646e:	f7fa f88b 	bl	8000588 <__aeabi_f2d>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] = (double)BMI_sensor.acc_y;
 800647a:	4b79      	ldr	r3, [pc, #484]	@ (8006660 <getInitialQuaternion+0x26c>)
 800647c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006480:	4618      	mov	r0, r3
 8006482:	f7fa f881 	bl	8000588 <__aeabi_f2d>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    accel_temp[0] /= norm;
 800648e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006492:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006496:	f7fa f9f9 	bl	800088c <__aeabi_ddiv>
 800649a:	4602      	mov	r2, r0
 800649c:	460b      	mov	r3, r1
 800649e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 80064a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80064a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80064aa:	f7fa f9ef 	bl	800088c <__aeabi_ddiv>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 80064b6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80064ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80064be:	f7fa f9e5 	bl	800088c <__aeabi_ddiv>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 80064ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064ce:	f04f 0000 	mov.w	r0, #0
 80064d2:	4964      	ldr	r1, [pc, #400]	@ (8006664 <getInitialQuaternion+0x270>)
 80064d4:	f7f9 fef8 	bl	80002c8 <__aeabi_dsub>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	ec43 2b17 	vmov	d7, r2, r3
 80064e0:	eeb0 0a47 	vmov.f32	s0, s14
 80064e4:	eef0 0a67 	vmov.f32	s1, s15
 80064e8:	f008 fca0 	bl	800ee2c <sqrt>
 80064ec:	ec51 0b10 	vmov	r0, r1, d0
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	4b5c      	ldr	r3, [pc, #368]	@ (8006668 <getInitialQuaternion+0x274>)
 80064f6:	f7fa f89f 	bl	8000638 <__aeabi_dmul>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 8006502:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006506:	f04f 0000 	mov.w	r0, #0
 800650a:	4957      	ldr	r1, [pc, #348]	@ (8006668 <getInitialQuaternion+0x274>)
 800650c:	f7fa f9be 	bl	800088c <__aeabi_ddiv>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 8006518:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800651c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006520:	f7fa f88a 	bl	8000638 <__aeabi_dmul>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4610      	mov	r0, r2
 800652a:	4619      	mov	r1, r3
 800652c:	f04f 0200 	mov.w	r2, #0
 8006530:	4b4d      	ldr	r3, [pc, #308]	@ (8006668 <getInitialQuaternion+0x274>)
 8006532:	f7fa f881 	bl	8000638 <__aeabi_dmul>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 800653e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8006542:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006546:	f7fa f877 	bl	8000638 <__aeabi_dmul>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4610      	mov	r0, r2
 8006550:	4619      	mov	r1, r3
 8006552:	f04f 0200 	mov.w	r2, #0
 8006556:	4b44      	ldr	r3, [pc, #272]	@ (8006668 <getInitialQuaternion+0x274>)
 8006558:	f7fa f86e 	bl	8000638 <__aeabi_dmul>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	f04f 0300 	mov.w	r3, #0
 800656c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8006570:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006578:	f7fa f85e 	bl	8000638 <__aeabi_dmul>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	4614      	mov	r4, r2
 8006582:	461d      	mov	r5, r3
 8006584:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006588:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800658c:	f7fa f854 	bl	8000638 <__aeabi_dmul>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4620      	mov	r0, r4
 8006596:	4629      	mov	r1, r5
 8006598:	f7f9 fe98 	bl	80002cc <__adddf3>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4614      	mov	r4, r2
 80065a2:	461d      	mov	r5, r3
 80065a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80065a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80065ac:	f7fa f844 	bl	8000638 <__aeabi_dmul>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4620      	mov	r0, r4
 80065b6:	4629      	mov	r1, r5
 80065b8:	f7f9 fe88 	bl	80002cc <__adddf3>
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	4614      	mov	r4, r2
 80065c2:	461d      	mov	r5, r3
 80065c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80065c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065cc:	f7fa f834 	bl	8000638 <__aeabi_dmul>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4620      	mov	r0, r4
 80065d6:	4629      	mov	r1, r5
 80065d8:	f7f9 fe78 	bl	80002cc <__adddf3>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	ec43 2b17 	vmov	d7, r2, r3
 80065e4:	eeb0 0a47 	vmov.f32	s0, s14
 80065e8:	eef0 0a67 	vmov.f32	s1, s15
 80065ec:	f008 fc1e 	bl	800ee2c <sqrt>
 80065f0:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

    q[0] = q_temp[0] / norm;
 80065f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80065fc:	f7fa f946 	bl	800088c <__aeabi_ddiv>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4610      	mov	r0, r2
 8006606:	4619      	mov	r1, r3
 8006608:	f7fa faee 	bl	8000be8 <__aeabi_d2f>
 800660c:	4603      	mov	r3, r0
 800660e:	4a17      	ldr	r2, [pc, #92]	@ (800666c <getInitialQuaternion+0x278>)
 8006610:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 8006612:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006616:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800661a:	f7fa f937 	bl	800088c <__aeabi_ddiv>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	4610      	mov	r0, r2
 8006624:	4619      	mov	r1, r3
 8006626:	f7fa fadf 	bl	8000be8 <__aeabi_d2f>
 800662a:	4603      	mov	r3, r0
 800662c:	4a0f      	ldr	r2, [pc, #60]	@ (800666c <getInitialQuaternion+0x278>)
 800662e:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 8006630:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006634:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006638:	f7fa f928 	bl	800088c <__aeabi_ddiv>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4610      	mov	r0, r2
 8006642:	4619      	mov	r1, r3
 8006644:	f7fa fad0 	bl	8000be8 <__aeabi_d2f>
 8006648:	4603      	mov	r3, r0
 800664a:	4a08      	ldr	r2, [pc, #32]	@ (800666c <getInitialQuaternion+0x278>)
 800664c:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 800664e:	4b07      	ldr	r3, [pc, #28]	@ (800666c <getInitialQuaternion+0x278>)
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	60da      	str	r2, [r3, #12]
}
 8006656:	bf00      	nop
 8006658:	3748      	adds	r7, #72	@ 0x48
 800665a:	46bd      	mov	sp, r7
 800665c:	bdb0      	pop	{r4, r5, r7, pc}
 800665e:	bf00      	nop
 8006660:	20000538 	.word	0x20000538
 8006664:	3ff00000 	.word	0x3ff00000
 8006668:	3fe00000 	.word	0x3fe00000
 800666c:	20000028 	.word	0x20000028

08006670 <invSqrt>:

float invSqrt(float x) {
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800667a:	edd7 7a01 	vldr	s15, [r7, #4]
 800667e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006682:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006686:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800668e:	f107 0310 	add.w	r3, r7, #16
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	105a      	asrs	r2, r3, #1
 800669a:	4b12      	ldr	r3, [pc, #72]	@ (80066e4 <invSqrt+0x74>)
 800669c:	1a9b      	subs	r3, r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80066a0:	f107 030c 	add.w	r3, r7, #12
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80066a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80066ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80066b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80066b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066bc:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80066c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80066c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80066c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066cc:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	ee07 3a90 	vmov	s15, r3
}
 80066d6:	eeb0 0a67 	vmov.f32	s0, s15
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	5f3759df 	.word	0x5f3759df

080066e8 <calculate_accel_std_deviation>:
/**
 * @brief İvme değerlerinin standart sapmasını hesapla
 * @return Standart sapma değeri
 */
static float calculate_accel_std_deviation(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
    // Buffer dolmadıysa ve çok az veri varsa
    if (!accel_buffer_full && accel_buffer_index < 2) return 0.0f;
 80066ee:	4b3d      	ldr	r3, [pc, #244]	@ (80067e4 <calculate_accel_std_deviation+0xfc>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d106      	bne.n	8006704 <calculate_accel_std_deviation+0x1c>
 80066f6:	4b3c      	ldr	r3, [pc, #240]	@ (80067e8 <calculate_accel_std_deviation+0x100>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d802      	bhi.n	8006704 <calculate_accel_std_deviation+0x1c>
 80066fe:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80067ec <calculate_accel_std_deviation+0x104>
 8006702:	e069      	b.n	80067d8 <calculate_accel_std_deviation+0xf0>

    int count = accel_buffer_full ? ACCEL_BUFFER_SIZE : accel_buffer_index;
 8006704:	4b37      	ldr	r3, [pc, #220]	@ (80067e4 <calculate_accel_std_deviation+0xfc>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d102      	bne.n	8006712 <calculate_accel_std_deviation+0x2a>
 800670c:	4b36      	ldr	r3, [pc, #216]	@ (80067e8 <calculate_accel_std_deviation+0x100>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	e000      	b.n	8006714 <calculate_accel_std_deviation+0x2c>
 8006712:	2305      	movs	r3, #5
 8006714:	607b      	str	r3, [r7, #4]
    float sum = 0.0f;
 8006716:	f04f 0300 	mov.w	r3, #0
 800671a:	617b      	str	r3, [r7, #20]
    float mean = 0.0f;
 800671c:	f04f 0300 	mov.w	r3, #0
 8006720:	603b      	str	r3, [r7, #0]
    float variance = 0.0f;
 8006722:	f04f 0300 	mov.w	r3, #0
 8006726:	613b      	str	r3, [r7, #16]

    // Ortalama hesapla
    for (int i = 0; i < count; i++) {
 8006728:	2300      	movs	r3, #0
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	e00e      	b.n	800674c <calculate_accel_std_deviation+0x64>
        sum += accel_buffer[i];
 800672e:	4a30      	ldr	r2, [pc, #192]	@ (80067f0 <calculate_accel_std_deviation+0x108>)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	4413      	add	r3, r2
 8006736:	edd3 7a00 	vldr	s15, [r3]
 800673a:	ed97 7a05 	vldr	s14, [r7, #20]
 800673e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006742:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < count; i++) {
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	3301      	adds	r3, #1
 800674a:	60fb      	str	r3, [r7, #12]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	429a      	cmp	r2, r3
 8006752:	dbec      	blt.n	800672e <calculate_accel_std_deviation+0x46>
    }
    mean = sum / count;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800675e:	edd7 6a05 	vldr	s13, [r7, #20]
 8006762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006766:	edc7 7a00 	vstr	s15, [r7]

    // Varyans hesapla
    for (int i = 0; i < count; i++) {
 800676a:	2300      	movs	r3, #0
 800676c:	60bb      	str	r3, [r7, #8]
 800676e:	e01e      	b.n	80067ae <calculate_accel_std_deviation+0xc6>
        variance += (accel_buffer[i] - mean) * (accel_buffer[i] - mean);
 8006770:	4a1f      	ldr	r2, [pc, #124]	@ (80067f0 <calculate_accel_std_deviation+0x108>)
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	ed93 7a00 	vldr	s14, [r3]
 800677c:	edd7 7a00 	vldr	s15, [r7]
 8006780:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006784:	4a1a      	ldr	r2, [pc, #104]	@ (80067f0 <calculate_accel_std_deviation+0x108>)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	edd3 6a00 	vldr	s13, [r3]
 8006790:	edd7 7a00 	vldr	s15, [r7]
 8006794:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800679c:	ed97 7a04 	vldr	s14, [r7, #16]
 80067a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067a4:	edc7 7a04 	vstr	s15, [r7, #16]
    for (int i = 0; i < count; i++) {
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	3301      	adds	r3, #1
 80067ac:	60bb      	str	r3, [r7, #8]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	dbdc      	blt.n	8006770 <calculate_accel_std_deviation+0x88>
    }
    variance /= count;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	ee07 3a90 	vmov	s15, r3
 80067bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067c0:	edd7 6a04 	vldr	s13, [r7, #16]
 80067c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067c8:	edc7 7a04 	vstr	s15, [r7, #16]

    return sqrtf(variance);
 80067cc:	ed97 0a04 	vldr	s0, [r7, #16]
 80067d0:	f008 fc08 	bl	800efe4 <sqrtf>
 80067d4:	eef0 7a40 	vmov.f32	s15, s0
}
 80067d8:	eeb0 0a67 	vmov.f32	s0, s15
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	200007bd 	.word	0x200007bd
 80067e8:	200007bc 	.word	0x200007bc
 80067ec:	00000000 	.word	0x00000000
 80067f0:	200007a8 	.word	0x200007a8

080067f4 <detect_accel_failure>:
 * @brief İvme sensörünün arızalı olup olmadığını kontrol et
 * @param accel İvme değeri (m/s²)
 * @return 1: Arıza tespit edildi, 0: Arıza yok
 */
static uint8_t detect_accel_failure(float accel)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	ed87 0a01 	vstr	s0, [r7, #4]
    float accel_abs = fabsf(accel);
 80067fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8006802:	eef0 7ae7 	vabs.f32	s15, s15
 8006806:	edc7 7a05 	vstr	s15, [r7, #20]
    float max_accel, max_std;

    // Buffer güncelleme
    accel_buffer[accel_buffer_index] = accel_abs;
 800680a:	4b31      	ldr	r3, [pc, #196]	@ (80068d0 <detect_accel_failure+0xdc>)
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	4a31      	ldr	r2, [pc, #196]	@ (80068d4 <detect_accel_failure+0xe0>)
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	601a      	str	r2, [r3, #0]
    accel_buffer_index = (accel_buffer_index + 1) % ACCEL_BUFFER_SIZE;
 8006818:	4b2d      	ldr	r3, [pc, #180]	@ (80068d0 <detect_accel_failure+0xdc>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	4b2e      	ldr	r3, [pc, #184]	@ (80068d8 <detect_accel_failure+0xe4>)
 8006820:	fb83 1302 	smull	r1, r3, r3, r2
 8006824:	1059      	asrs	r1, r3, #1
 8006826:	17d3      	asrs	r3, r2, #31
 8006828:	1ac9      	subs	r1, r1, r3
 800682a:	460b      	mov	r3, r1
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	440b      	add	r3, r1
 8006830:	1ad1      	subs	r1, r2, r3
 8006832:	b2ca      	uxtb	r2, r1
 8006834:	4b26      	ldr	r3, [pc, #152]	@ (80068d0 <detect_accel_failure+0xdc>)
 8006836:	701a      	strb	r2, [r3, #0]
    if (accel_buffer_index == 0) {
 8006838:	4b25      	ldr	r3, [pc, #148]	@ (80068d0 <detect_accel_failure+0xdc>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d102      	bne.n	8006846 <detect_accel_failure+0x52>
        accel_buffer_full = 1;
 8006840:	4b26      	ldr	r3, [pc, #152]	@ (80068dc <detect_accel_failure+0xe8>)
 8006842:	2201      	movs	r2, #1
 8006844:	701a      	strb	r2, [r3, #0]
    }

    // Standart sapma hesapla
    float std_dev = calculate_accel_std_deviation();
 8006846:	f7ff ff4f 	bl	80066e8 <calculate_accel_std_deviation>
 800684a:	ed87 0a04 	vstr	s0, [r7, #16]

    // Uçuş başlangıç zamanını flight_algorithm'dan al
	uint32_t algorithm_start_time = flight_algorithm_get_start_time();
 800684e:	f7fc fbfd 	bl	800304c <flight_algorithm_get_start_time>
 8006852:	60f8      	str	r0, [r7, #12]

	// Uçuş başlamışsa flight_algorithm'dan gelen zamanı kullan
	if (algorithm_start_time > 0) {
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <detect_accel_failure+0x6c>
		flight_start_time = algorithm_start_time;
 800685a:	4a21      	ldr	r2, [pc, #132]	@ (80068e0 <detect_accel_failure+0xec>)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6013      	str	r3, [r2, #0]
	}

	// Uçuş fazına göre limit değerlerini belirle
	if (flight_start_time == 0) {
 8006860:	4b1f      	ldr	r3, [pc, #124]	@ (80068e0 <detect_accel_failure+0xec>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d104      	bne.n	8006872 <detect_accel_failure+0x7e>
		max_accel = 200.0f;  // Yer hazırlığında gerçekçi olmayan çok yüksek değer
 8006868:	4b1e      	ldr	r3, [pc, #120]	@ (80068e4 <detect_accel_failure+0xf0>)
 800686a:	61fb      	str	r3, [r7, #28]
		max_std = 100.0f;    // Yer hazırlığında çok yüksek standart sapma eşiği
 800686c:	4b1e      	ldr	r3, [pc, #120]	@ (80068e8 <detect_accel_failure+0xf4>)
 800686e:	61bb      	str	r3, [r7, #24]
 8006870:	e014      	b.n	800689c <detect_accel_failure+0xa8>
	}
	else {
		// *** UÇUŞ BAŞLADI - NORMAL ARIZA TESPİTİ ***
		uint32_t flight_elapsed_time = HAL_GetTick() - flight_start_time;
 8006872:	f000 ffed 	bl	8007850 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	4b19      	ldr	r3, [pc, #100]	@ (80068e0 <detect_accel_failure+0xec>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	60bb      	str	r3, [r7, #8]

		if (flight_elapsed_time < THRUST_PHASE_DURATION_MS) {
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8006886:	4293      	cmp	r3, r2
 8006888:	d804      	bhi.n	8006894 <detect_accel_failure+0xa0>
			// İtki fazı - Yüksek limitler
			max_accel = ACCEL_MAX_VALUE_THRUST;
 800688a:	4b18      	ldr	r3, [pc, #96]	@ (80068ec <detect_accel_failure+0xf8>)
 800688c:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_THRUST;
 800688e:	4b18      	ldr	r3, [pc, #96]	@ (80068f0 <detect_accel_failure+0xfc>)
 8006890:	61bb      	str	r3, [r7, #24]
 8006892:	e003      	b.n	800689c <detect_accel_failure+0xa8>
		} else {
			// Seyir fazı - Düşük limitler
			max_accel = ACCEL_MAX_VALUE_CRUISE;
 8006894:	4b16      	ldr	r3, [pc, #88]	@ (80068f0 <detect_accel_failure+0xfc>)
 8006896:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_CRUISE;
 8006898:	4b16      	ldr	r3, [pc, #88]	@ (80068f4 <detect_accel_failure+0x100>)
 800689a:	61bb      	str	r3, [r7, #24]
		}
	}

    // İvme değeri veya standart sapma limitler dışındaysa
    if (accel_abs > max_accel || std_dev > max_std) {
 800689c:	ed97 7a05 	vldr	s14, [r7, #20]
 80068a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80068a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ac:	dc08      	bgt.n	80068c0 <detect_accel_failure+0xcc>
 80068ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80068b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80068b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068be:	dd01      	ble.n	80068c4 <detect_accel_failure+0xd0>
        return 1;  // Arıza tespit edildi
 80068c0:	2301      	movs	r3, #1
 80068c2:	e000      	b.n	80068c6 <detect_accel_failure+0xd2>
    }

    return 0;  // Arıza yok
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3720      	adds	r7, #32
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	200007bc 	.word	0x200007bc
 80068d4:	200007a8 	.word	0x200007a8
 80068d8:	66666667 	.word	0x66666667
 80068dc:	200007bd 	.word	0x200007bd
 80068e0:	200007a4 	.word	0x200007a4
 80068e4:	43480000 	.word	0x43480000
 80068e8:	42c80000 	.word	0x42c80000
 80068ec:	43160000 	.word	0x43160000
 80068f0:	42480000 	.word	0x42480000
 80068f4:	41700000 	.word	0x41700000

080068f8 <sensor_fusion_init>:

/**
 * @brief Initialize the sensor fusion module
 */
void sensor_fusion_init(BME_280_t* BME)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
    KalmanFilter_Init(&kalman);
 8006900:	481b      	ldr	r0, [pc, #108]	@ (8006970 <sensor_fusion_init+0x78>)
 8006902:	f7fc fbaf 	bl	8003064 <KalmanFilter_Init>

    // Sensörlerinize göre gürültü değerlerini ayarlayın
    kalman.process_noise = 0.1f;         // Model gürültüsü
 8006906:	4b1a      	ldr	r3, [pc, #104]	@ (8006970 <sensor_fusion_init+0x78>)
 8006908:	4a1a      	ldr	r2, [pc, #104]	@ (8006974 <sensor_fusion_init+0x7c>)
 800690a:	631a      	str	r2, [r3, #48]	@ 0x30
    kalman.measurement_noise_alt = 0.005f;  // BME280 yükseklik gürültüsü
 800690c:	4b18      	ldr	r3, [pc, #96]	@ (8006970 <sensor_fusion_init+0x78>)
 800690e:	4a1a      	ldr	r2, [pc, #104]	@ (8006978 <sensor_fusion_init+0x80>)
 8006910:	635a      	str	r2, [r3, #52]	@ 0x34
    kalman.measurement_noise_acc = 5.0f;  // BMI088 ivme gürültüsü
 8006912:	4b17      	ldr	r3, [pc, #92]	@ (8006970 <sensor_fusion_init+0x78>)
 8006914:	4a19      	ldr	r2, [pc, #100]	@ (800697c <sensor_fusion_init+0x84>)
 8006916:	639a      	str	r2, [r3, #56]	@ 0x38


    // İvme arıza tespit değişkenlerini sıfırla
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8006918:	2300      	movs	r3, #0
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	e009      	b.n	8006932 <sensor_fusion_init+0x3a>
        accel_buffer[i] = 0.0f;
 800691e:	4a18      	ldr	r2, [pc, #96]	@ (8006980 <sensor_fusion_init+0x88>)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	f04f 0200 	mov.w	r2, #0
 800692a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	3301      	adds	r3, #1
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2b04      	cmp	r3, #4
 8006936:	ddf2      	ble.n	800691e <sensor_fusion_init+0x26>
    }
    accel_buffer_index = 0;
 8006938:	4b12      	ldr	r3, [pc, #72]	@ (8006984 <sensor_fusion_init+0x8c>)
 800693a:	2200      	movs	r2, #0
 800693c:	701a      	strb	r2, [r3, #0]
    accel_buffer_full = 0;
 800693e:	4b12      	ldr	r3, [pc, #72]	@ (8006988 <sensor_fusion_init+0x90>)
 8006940:	2200      	movs	r2, #0
 8006942:	701a      	strb	r2, [r3, #0]
    accel_failure_detected = 0;
 8006944:	4b11      	ldr	r3, [pc, #68]	@ (800698c <sensor_fusion_init+0x94>)
 8006946:	2200      	movs	r2, #0
 8006948:	701a      	strb	r2, [r3, #0]

    initialized = 1;
 800694a:	4b11      	ldr	r3, [pc, #68]	@ (8006990 <sensor_fusion_init+0x98>)
 800694c:	2201      	movs	r2, #1
 800694e:	701a      	strb	r2, [r3, #0]
    reference_altitude = BME->base_altitude;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006954:	4a0f      	ldr	r2, [pc, #60]	@ (8006994 <sensor_fusion_init+0x9c>)
 8006956:	6013      	str	r3, [r2, #0]
    last_kalman_update_time = HAL_GetTick();
 8006958:	f000 ff7a 	bl	8007850 <HAL_GetTick>
 800695c:	4603      	mov	r3, r0
 800695e:	4a0e      	ldr	r2, [pc, #56]	@ (8006998 <sensor_fusion_init+0xa0>)
 8006960:	6013      	str	r3, [r2, #0]
    flight_start_time = 0;
 8006962:	4b0e      	ldr	r3, [pc, #56]	@ (800699c <sensor_fusion_init+0xa4>)
 8006964:	2200      	movs	r2, #0
 8006966:	601a      	str	r2, [r3, #0]
}
 8006968:	bf00      	nop
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	2000074c 	.word	0x2000074c
 8006974:	3dcccccd 	.word	0x3dcccccd
 8006978:	3ba3d70a 	.word	0x3ba3d70a
 800697c:	40a00000 	.word	0x40a00000
 8006980:	200007a8 	.word	0x200007a8
 8006984:	200007bc 	.word	0x200007bc
 8006988:	200007bd 	.word	0x200007bd
 800698c:	200007be 	.word	0x200007be
 8006990:	20000798 	.word	0x20000798
 8006994:	2000079c 	.word	0x2000079c
 8006998:	200007a0 	.word	0x200007a0
 800699c:	200007a4 	.word	0x200007a4

080069a0 <sensor_fusion_update_kalman>:

/**
 * @brief Update sensor fusion with new measurements (Kalman filter)
 */
void sensor_fusion_update_kalman(BME_280_t* BME, bmi088_struct_t* BMI, sensor_fusion_t* sensor)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08a      	sub	sp, #40	@ 0x28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
    // Get current time for automatic delta calculation
    uint32_t current_time = HAL_GetTick();
 80069ac:	f000 ff50 	bl	8007850 <HAL_GetTick>
 80069b0:	6238      	str	r0, [r7, #32]

    // Calculate time difference in seconds
    float time_sec = (current_time - last_kalman_update_time) / 1000.0f;
 80069b2:	4b4b      	ldr	r3, [pc, #300]	@ (8006ae0 <sensor_fusion_update_kalman+0x140>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6a3a      	ldr	r2, [r7, #32]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	ee07 3a90 	vmov	s15, r3
 80069be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069c2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006ae4 <sensor_fusion_update_kalman+0x144>
 80069c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069ca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Update the last update time
    last_kalman_update_time = current_time;
 80069ce:	4a44      	ldr	r2, [pc, #272]	@ (8006ae0 <sensor_fusion_update_kalman+0x140>)
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	6013      	str	r3, [r2, #0]

    float altitude = BME->altitude;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	61fb      	str	r3, [r7, #28]

    // Ensure time is valid (never zero or negative)
    if (time_sec <= 0.001f) {
 80069da:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80069de:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006ae8 <sensor_fusion_update_kalman+0x148>
 80069e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ea:	d801      	bhi.n	80069f0 <sensor_fusion_update_kalman+0x50>
        time_sec = 0.01f; // Use default time step if invalid
 80069ec:	4b3f      	ldr	r3, [pc, #252]	@ (8006aec <sensor_fusion_update_kalman+0x14c>)
 80069ee:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calculate vertical acceleration by compensating for gravity using IMU orientation
    float angle_rad = BMI->angleZ * (M_PI / 180.0f);  // dereceyse radyana çevir
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7f9 fdc6 	bl	8000588 <__aeabi_f2d>
 80069fc:	a334      	add	r3, pc, #208	@ (adr r3, 8006ad0 <sensor_fusion_update_kalman+0x130>)
 80069fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a02:	f7f9 fe19 	bl	8000638 <__aeabi_dmul>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	f7fa f8eb 	bl	8000be8 <__aeabi_d2f>
 8006a12:	4603      	mov	r3, r0
 8006a14:	61bb      	str	r3, [r7, #24]

    // Yerçekimi ivmesinin lokal z eksenindeki bileşeni
    float g_local_z = 9.81f * cos(angle_rad);
 8006a16:	69b8      	ldr	r0, [r7, #24]
 8006a18:	f7f9 fdb6 	bl	8000588 <__aeabi_f2d>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	ec43 2b10 	vmov	d0, r2, r3
 8006a24:	f008 fa30 	bl	800ee88 <cos>
 8006a28:	ec51 0b10 	vmov	r0, r1, d0
 8006a2c:	a32a      	add	r3, pc, #168	@ (adr r3, 8006ad8 <sensor_fusion_update_kalman+0x138>)
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	f7f9 fe01 	bl	8000638 <__aeabi_dmul>
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	f7fa f8d3 	bl	8000be8 <__aeabi_d2f>
 8006a42:	4603      	mov	r3, r0
 8006a44:	617b      	str	r3, [r7, #20]

    // Gerçek ivmeyi hesapla:
    float accel_z_corrected = BMI->acc_z - g_local_z;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8006a4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006a50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a54:	edc7 7a04 	vstr	s15, [r7, #16]

    // İvme sensörü arıza tespiti
    accel_failure_detected = detect_accel_failure(accel_z_corrected);
 8006a58:	ed97 0a04 	vldr	s0, [r7, #16]
 8006a5c:	f7ff feca 	bl	80067f4 <detect_accel_failure>
 8006a60:	4603      	mov	r3, r0
 8006a62:	461a      	mov	r2, r3
 8006a64:	4b22      	ldr	r3, [pc, #136]	@ (8006af0 <sensor_fusion_update_kalman+0x150>)
 8006a66:	701a      	strb	r2, [r3, #0]

    // Arıza durumuna göre Kalman filtresi parametrelerini güncelle
    if (accel_failure_detected) {
 8006a68:	4b21      	ldr	r3, [pc, #132]	@ (8006af0 <sensor_fusion_update_kalman+0x150>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <sensor_fusion_update_kalman+0xd8>
        // Arıza tespit edildi - ivme sensörüne çok az güven
        kalman.measurement_noise_acc = 50.0f;
 8006a70:	4b20      	ldr	r3, [pc, #128]	@ (8006af4 <sensor_fusion_update_kalman+0x154>)
 8006a72:	4a21      	ldr	r2, [pc, #132]	@ (8006af8 <sensor_fusion_update_kalman+0x158>)
 8006a74:	639a      	str	r2, [r3, #56]	@ 0x38
 8006a76:	e002      	b.n	8006a7e <sensor_fusion_update_kalman+0xde>
    } else {
        // Normal durum - normal güven
        kalman.measurement_noise_acc = 0.3f;
 8006a78:	4b1e      	ldr	r3, [pc, #120]	@ (8006af4 <sensor_fusion_update_kalman+0x154>)
 8006a7a:	4a20      	ldr	r2, [pc, #128]	@ (8006afc <sensor_fusion_update_kalman+0x15c>)
 8006a7c:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Only update if initialized
    if (initialized) {
 8006a7e:	4b20      	ldr	r3, [pc, #128]	@ (8006b00 <sensor_fusion_update_kalman+0x160>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d020      	beq.n	8006ac8 <sensor_fusion_update_kalman+0x128>
        sensor->filtered_altitude = KalmanFilter_Update(&kalman, altitude, accel_z_corrected, time_sec);
 8006a86:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 8006a8a:	edd7 0a04 	vldr	s1, [r7, #16]
 8006a8e:	ed97 0a07 	vldr	s0, [r7, #28]
 8006a92:	4818      	ldr	r0, [pc, #96]	@ (8006af4 <sensor_fusion_update_kalman+0x154>)
 8006a94:	f7fc fb40 	bl	8003118 <KalmanFilter_Update>
 8006a98:	eef0 7a40 	vmov.f32	s15, s0
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	edc3 7a00 	vstr	s15, [r3]
        sensor->apogeeDetect = KalmanFilter_IsApogeeDetected(&kalman);
 8006aa2:	4814      	ldr	r0, [pc, #80]	@ (8006af4 <sensor_fusion_update_kalman+0x154>)
 8006aa4:	f7fd fd1c 	bl	80044e0 <KalmanFilter_IsApogeeDetected>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	761a      	strb	r2, [r3, #24]
        sensor->velocity = Kalman_Get_Velocity(&kalman);
 8006ab0:	4810      	ldr	r0, [pc, #64]	@ (8006af4 <sensor_fusion_update_kalman+0x154>)
 8006ab2:	f7fd fd06 	bl	80044c2 <Kalman_Get_Velocity>
 8006ab6:	eef0 7a40 	vmov.f32	s15, s0
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	edc3 7a01 	vstr	s15, [r3, #4]
            sensor->velocity = (sensor->filtered_altitude - prev_altitude) / time_sec;
        }
        prev_altitude = sensor->filtered_altitude;*/

        // Arıza durumunu sensor yapısına ekleyelim (telemetri için kullanılabilir)
        sensor->accel_failure = accel_failure_detected;
 8006ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8006af0 <sensor_fusion_update_kalman+0x150>)
 8006ac2:	781a      	ldrb	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	765a      	strb	r2, [r3, #25]
    }
}
 8006ac8:	bf00      	nop
 8006aca:	3728      	adds	r7, #40	@ 0x28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	a2529d39 	.word	0xa2529d39
 8006ad4:	3f91df46 	.word	0x3f91df46
 8006ad8:	60000000 	.word	0x60000000
 8006adc:	40239eb8 	.word	0x40239eb8
 8006ae0:	200007a0 	.word	0x200007a0
 8006ae4:	447a0000 	.word	0x447a0000
 8006ae8:	3a83126f 	.word	0x3a83126f
 8006aec:	3c23d70a 	.word	0x3c23d70a
 8006af0:	200007be 	.word	0x200007be
 8006af4:	2000074c 	.word	0x2000074c
 8006af8:	42480000 	.word	0x42480000
 8006afc:	3e99999a 	.word	0x3e99999a
 8006b00:	20000798 	.word	0x20000798

08006b04 <sensor_fusion_update_mahony>:

/**
 * @brief Update orientation using Mahony filter
 */
void sensor_fusion_update_mahony(bmi088_struct_t* BMI, sensor_fusion_t *sensor)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
		sensor->yaw = quaternionToYaw();
		sensor->pitch = quaternionToPitch();
		sensor->roll = quaternionToRoll();
		BMI->isUpdated = 0;
	}*/
}
 8006b0e:	bf00      	nop
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
	...

08006b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b22:	2300      	movs	r3, #0
 8006b24:	607b      	str	r3, [r7, #4]
 8006b26:	4b10      	ldr	r3, [pc, #64]	@ (8006b68 <HAL_MspInit+0x4c>)
 8006b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8006b68 <HAL_MspInit+0x4c>)
 8006b2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8006b32:	4b0d      	ldr	r3, [pc, #52]	@ (8006b68 <HAL_MspInit+0x4c>)
 8006b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b3a:	607b      	str	r3, [r7, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b3e:	2300      	movs	r3, #0
 8006b40:	603b      	str	r3, [r7, #0]
 8006b42:	4b09      	ldr	r3, [pc, #36]	@ (8006b68 <HAL_MspInit+0x4c>)
 8006b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b46:	4a08      	ldr	r2, [pc, #32]	@ (8006b68 <HAL_MspInit+0x4c>)
 8006b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b4e:	4b06      	ldr	r3, [pc, #24]	@ (8006b68 <HAL_MspInit+0x4c>)
 8006b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40023800 	.word	0x40023800

08006b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b08c      	sub	sp, #48	@ 0x30
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b74:	f107 031c 	add.w	r3, r7, #28
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	605a      	str	r2, [r3, #4]
 8006b7e:	609a      	str	r2, [r3, #8]
 8006b80:	60da      	str	r2, [r3, #12]
 8006b82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a42      	ldr	r2, [pc, #264]	@ (8006c94 <HAL_I2C_MspInit+0x128>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d12d      	bne.n	8006bea <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b8e:	2300      	movs	r3, #0
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	4b41      	ldr	r3, [pc, #260]	@ (8006c98 <HAL_I2C_MspInit+0x12c>)
 8006b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b96:	4a40      	ldr	r2, [pc, #256]	@ (8006c98 <HAL_I2C_MspInit+0x12c>)
 8006b98:	f043 0302 	orr.w	r3, r3, #2
 8006b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8006c98 <HAL_I2C_MspInit+0x12c>)
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	61bb      	str	r3, [r7, #24]
 8006ba8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006baa:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8006bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006bb0:	2312      	movs	r3, #18
 8006bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006bbc:	2304      	movs	r3, #4
 8006bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bc0:	f107 031c 	add.w	r3, r7, #28
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4835      	ldr	r0, [pc, #212]	@ (8006c9c <HAL_I2C_MspInit+0x130>)
 8006bc8:	f001 fbb8 	bl	800833c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006bcc:	2300      	movs	r3, #0
 8006bce:	617b      	str	r3, [r7, #20]
 8006bd0:	4b31      	ldr	r3, [pc, #196]	@ (8006c98 <HAL_I2C_MspInit+0x12c>)
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd4:	4a30      	ldr	r2, [pc, #192]	@ (8006c98 <HAL_I2C_MspInit+0x12c>)
 8006bd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006bda:	6413      	str	r3, [r2, #64]	@ 0x40
 8006bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8006c98 <HAL_I2C_MspInit+0x12c>)
 8006bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006be8:	e050      	b.n	8006c8c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a2c      	ldr	r2, [pc, #176]	@ (8006ca0 <HAL_I2C_MspInit+0x134>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d14b      	bne.n	8006c8c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	613b      	str	r3, [r7, #16]
 8006bf8:	4b27      	ldr	r3, [pc, #156]	@ (8006c98 <HAL_I2C_MspInit+0x12c>)
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bfc:	4a26      	ldr	r2, [pc, #152]	@ (8006c98 <HAL_I2C_MspInit+0x12c>)
 8006bfe:	f043 0304 	orr.w	r3, r3, #4
 8006c02:	6313      	str	r3, [r2, #48]	@ 0x30
 8006c04:	4b24      	ldr	r3, [pc, #144]	@ (8006c98 <HAL_I2C_MspInit+0x12c>)
 8006c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	613b      	str	r3, [r7, #16]
 8006c0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c10:	2300      	movs	r3, #0
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	4b20      	ldr	r3, [pc, #128]	@ (8006c98 <HAL_I2C_MspInit+0x12c>)
 8006c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c18:	4a1f      	ldr	r2, [pc, #124]	@ (8006c98 <HAL_I2C_MspInit+0x12c>)
 8006c1a:	f043 0301 	orr.w	r3, r3, #1
 8006c1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006c20:	4b1d      	ldr	r3, [pc, #116]	@ (8006c98 <HAL_I2C_MspInit+0x12c>)
 8006c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006c2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c32:	2312      	movs	r3, #18
 8006c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c36:	2301      	movs	r3, #1
 8006c38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006c3e:	2304      	movs	r3, #4
 8006c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c42:	f107 031c 	add.w	r3, r7, #28
 8006c46:	4619      	mov	r1, r3
 8006c48:	4816      	ldr	r0, [pc, #88]	@ (8006ca4 <HAL_I2C_MspInit+0x138>)
 8006c4a:	f001 fb77 	bl	800833c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006c4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c54:	2312      	movs	r3, #18
 8006c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006c60:	2304      	movs	r3, #4
 8006c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c64:	f107 031c 	add.w	r3, r7, #28
 8006c68:	4619      	mov	r1, r3
 8006c6a:	480f      	ldr	r0, [pc, #60]	@ (8006ca8 <HAL_I2C_MspInit+0x13c>)
 8006c6c:	f001 fb66 	bl	800833c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006c70:	2300      	movs	r3, #0
 8006c72:	60bb      	str	r3, [r7, #8]
 8006c74:	4b08      	ldr	r3, [pc, #32]	@ (8006c98 <HAL_I2C_MspInit+0x12c>)
 8006c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c78:	4a07      	ldr	r2, [pc, #28]	@ (8006c98 <HAL_I2C_MspInit+0x12c>)
 8006c7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006c7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c80:	4b05      	ldr	r3, [pc, #20]	@ (8006c98 <HAL_I2C_MspInit+0x12c>)
 8006c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c88:	60bb      	str	r3, [r7, #8]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
}
 8006c8c:	bf00      	nop
 8006c8e:	3730      	adds	r7, #48	@ 0x30
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	40005400 	.word	0x40005400
 8006c98:	40023800 	.word	0x40023800
 8006c9c:	40020400 	.word	0x40020400
 8006ca0:	40005c00 	.word	0x40005c00
 8006ca4:	40020800 	.word	0x40020800
 8006ca8:	40020000 	.word	0x40020000

08006cac <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a15      	ldr	r2, [pc, #84]	@ (8006d10 <HAL_I2C_MspDeInit+0x64>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d10f      	bne.n	8006cde <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8006cbe:	4b15      	ldr	r3, [pc, #84]	@ (8006d14 <HAL_I2C_MspDeInit+0x68>)
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc2:	4a14      	ldr	r2, [pc, #80]	@ (8006d14 <HAL_I2C_MspDeInit+0x68>)
 8006cc4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006cc8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8006cca:	2180      	movs	r1, #128	@ 0x80
 8006ccc:	4812      	ldr	r0, [pc, #72]	@ (8006d18 <HAL_I2C_MspDeInit+0x6c>)
 8006cce:	f001 fcc9 	bl	8008664 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8006cd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006cd6:	4810      	ldr	r0, [pc, #64]	@ (8006d18 <HAL_I2C_MspDeInit+0x6c>)
 8006cd8:	f001 fcc4 	bl	8008664 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8006cdc:	e014      	b.n	8006d08 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8006d1c <HAL_I2C_MspDeInit+0x70>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d10f      	bne.n	8006d08 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8006ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8006d14 <HAL_I2C_MspDeInit+0x68>)
 8006cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cec:	4a09      	ldr	r2, [pc, #36]	@ (8006d14 <HAL_I2C_MspDeInit+0x68>)
 8006cee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006cf2:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8006cf4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006cf8:	4809      	ldr	r0, [pc, #36]	@ (8006d20 <HAL_I2C_MspDeInit+0x74>)
 8006cfa:	f001 fcb3 	bl	8008664 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8006cfe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006d02:	4808      	ldr	r0, [pc, #32]	@ (8006d24 <HAL_I2C_MspDeInit+0x78>)
 8006d04:	f001 fcae 	bl	8008664 <HAL_GPIO_DeInit>
}
 8006d08:	bf00      	nop
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	40005400 	.word	0x40005400
 8006d14:	40023800 	.word	0x40023800
 8006d18:	40020400 	.word	0x40020400
 8006d1c:	40005c00 	.word	0x40005c00
 8006d20:	40020800 	.word	0x40020800
 8006d24:	40020000 	.word	0x40020000

08006d28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d38:	d115      	bne.n	8006d66 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d70 <HAL_TIM_Base_MspInit+0x48>)
 8006d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d42:	4a0b      	ldr	r2, [pc, #44]	@ (8006d70 <HAL_TIM_Base_MspInit+0x48>)
 8006d44:	f043 0301 	orr.w	r3, r3, #1
 8006d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d4a:	4b09      	ldr	r3, [pc, #36]	@ (8006d70 <HAL_TIM_Base_MspInit+0x48>)
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006d56:	2200      	movs	r2, #0
 8006d58:	2100      	movs	r1, #0
 8006d5a:	201c      	movs	r0, #28
 8006d5c:	f000 fea7 	bl	8007aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006d60:	201c      	movs	r0, #28
 8006d62:	f000 fec0 	bl	8007ae6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8006d66:	bf00      	nop
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	40023800 	.word	0x40023800

08006d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08e      	sub	sp, #56	@ 0x38
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	605a      	str	r2, [r3, #4]
 8006d86:	609a      	str	r2, [r3, #8]
 8006d88:	60da      	str	r2, [r3, #12]
 8006d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a83      	ldr	r2, [pc, #524]	@ (8006fa0 <HAL_UART_MspInit+0x22c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d14b      	bne.n	8006e2e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8006d96:	2300      	movs	r3, #0
 8006d98:	623b      	str	r3, [r7, #32]
 8006d9a:	4b82      	ldr	r3, [pc, #520]	@ (8006fa4 <HAL_UART_MspInit+0x230>)
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9e:	4a81      	ldr	r2, [pc, #516]	@ (8006fa4 <HAL_UART_MspInit+0x230>)
 8006da0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8006da6:	4b7f      	ldr	r3, [pc, #508]	@ (8006fa4 <HAL_UART_MspInit+0x230>)
 8006da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006daa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006dae:	623b      	str	r3, [r7, #32]
 8006db0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006db2:	2300      	movs	r3, #0
 8006db4:	61fb      	str	r3, [r7, #28]
 8006db6:	4b7b      	ldr	r3, [pc, #492]	@ (8006fa4 <HAL_UART_MspInit+0x230>)
 8006db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dba:	4a7a      	ldr	r2, [pc, #488]	@ (8006fa4 <HAL_UART_MspInit+0x230>)
 8006dbc:	f043 0304 	orr.w	r3, r3, #4
 8006dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8006dc2:	4b78      	ldr	r3, [pc, #480]	@ (8006fa4 <HAL_UART_MspInit+0x230>)
 8006dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc6:	f003 0304 	and.w	r3, r3, #4
 8006dca:	61fb      	str	r3, [r7, #28]
 8006dcc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006dce:	2300      	movs	r3, #0
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	4b74      	ldr	r3, [pc, #464]	@ (8006fa4 <HAL_UART_MspInit+0x230>)
 8006dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dd6:	4a73      	ldr	r2, [pc, #460]	@ (8006fa4 <HAL_UART_MspInit+0x230>)
 8006dd8:	f043 0308 	orr.w	r3, r3, #8
 8006ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8006dde:	4b71      	ldr	r3, [pc, #452]	@ (8006fa4 <HAL_UART_MspInit+0x230>)
 8006de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de2:	f003 0308 	and.w	r3, r3, #8
 8006de6:	61bb      	str	r3, [r7, #24]
 8006de8:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006dea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006dee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006df0:	2302      	movs	r3, #2
 8006df2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df4:	2300      	movs	r3, #0
 8006df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006dfc:	2308      	movs	r3, #8
 8006dfe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e04:	4619      	mov	r1, r3
 8006e06:	4868      	ldr	r0, [pc, #416]	@ (8006fa8 <HAL_UART_MspInit+0x234>)
 8006e08:	f001 fa98 	bl	800833c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006e0c:	2304      	movs	r3, #4
 8006e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e10:	2302      	movs	r3, #2
 8006e12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006e1c:	2308      	movs	r3, #8
 8006e1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e24:	4619      	mov	r1, r3
 8006e26:	4861      	ldr	r0, [pc, #388]	@ (8006fac <HAL_UART_MspInit+0x238>)
 8006e28:	f001 fa88 	bl	800833c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006e2c:	e0b4      	b.n	8006f98 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART1)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a5f      	ldr	r2, [pc, #380]	@ (8006fb0 <HAL_UART_MspInit+0x23c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	f040 80af 	bne.w	8006f98 <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	617b      	str	r3, [r7, #20]
 8006e3e:	4b59      	ldr	r3, [pc, #356]	@ (8006fa4 <HAL_UART_MspInit+0x230>)
 8006e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e42:	4a58      	ldr	r2, [pc, #352]	@ (8006fa4 <HAL_UART_MspInit+0x230>)
 8006e44:	f043 0310 	orr.w	r3, r3, #16
 8006e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8006e4a:	4b56      	ldr	r3, [pc, #344]	@ (8006fa4 <HAL_UART_MspInit+0x230>)
 8006e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e4e:	f003 0310 	and.w	r3, r3, #16
 8006e52:	617b      	str	r3, [r7, #20]
 8006e54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e56:	2300      	movs	r3, #0
 8006e58:	613b      	str	r3, [r7, #16]
 8006e5a:	4b52      	ldr	r3, [pc, #328]	@ (8006fa4 <HAL_UART_MspInit+0x230>)
 8006e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e5e:	4a51      	ldr	r2, [pc, #324]	@ (8006fa4 <HAL_UART_MspInit+0x230>)
 8006e60:	f043 0301 	orr.w	r3, r3, #1
 8006e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e66:	4b4f      	ldr	r3, [pc, #316]	@ (8006fa4 <HAL_UART_MspInit+0x230>)
 8006e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	613b      	str	r3, [r7, #16]
 8006e70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e72:	2300      	movs	r3, #0
 8006e74:	60fb      	str	r3, [r7, #12]
 8006e76:	4b4b      	ldr	r3, [pc, #300]	@ (8006fa4 <HAL_UART_MspInit+0x230>)
 8006e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e7a:	4a4a      	ldr	r2, [pc, #296]	@ (8006fa4 <HAL_UART_MspInit+0x230>)
 8006e7c:	f043 0302 	orr.w	r3, r3, #2
 8006e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e82:	4b48      	ldr	r3, [pc, #288]	@ (8006fa4 <HAL_UART_MspInit+0x230>)
 8006e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006e8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e94:	2302      	movs	r3, #2
 8006e96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006ea0:	2307      	movs	r3, #7
 8006ea2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ea4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	4842      	ldr	r0, [pc, #264]	@ (8006fb4 <HAL_UART_MspInit+0x240>)
 8006eac:	f001 fa46 	bl	800833c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006eb0:	2340      	movs	r3, #64	@ 0x40
 8006eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006ec0:	2307      	movs	r3, #7
 8006ec2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ec4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ec8:	4619      	mov	r1, r3
 8006eca:	483b      	ldr	r0, [pc, #236]	@ (8006fb8 <HAL_UART_MspInit+0x244>)
 8006ecc:	f001 fa36 	bl	800833c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006ed0:	4b3a      	ldr	r3, [pc, #232]	@ (8006fbc <HAL_UART_MspInit+0x248>)
 8006ed2:	4a3b      	ldr	r2, [pc, #236]	@ (8006fc0 <HAL_UART_MspInit+0x24c>)
 8006ed4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006ed6:	4b39      	ldr	r3, [pc, #228]	@ (8006fbc <HAL_UART_MspInit+0x248>)
 8006ed8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006edc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ede:	4b37      	ldr	r3, [pc, #220]	@ (8006fbc <HAL_UART_MspInit+0x248>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ee4:	4b35      	ldr	r3, [pc, #212]	@ (8006fbc <HAL_UART_MspInit+0x248>)
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006eea:	4b34      	ldr	r3, [pc, #208]	@ (8006fbc <HAL_UART_MspInit+0x248>)
 8006eec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006ef0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006ef2:	4b32      	ldr	r3, [pc, #200]	@ (8006fbc <HAL_UART_MspInit+0x248>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ef8:	4b30      	ldr	r3, [pc, #192]	@ (8006fbc <HAL_UART_MspInit+0x248>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006efe:	4b2f      	ldr	r3, [pc, #188]	@ (8006fbc <HAL_UART_MspInit+0x248>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006f04:	4b2d      	ldr	r3, [pc, #180]	@ (8006fbc <HAL_UART_MspInit+0x248>)
 8006f06:	2200      	movs	r2, #0
 8006f08:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8006fbc <HAL_UART_MspInit+0x248>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006f10:	482a      	ldr	r0, [pc, #168]	@ (8006fbc <HAL_UART_MspInit+0x248>)
 8006f12:	f000 fe11 	bl	8007b38 <HAL_DMA_Init>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 8006f1c:	f7fd fe9e 	bl	8004c5c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a26      	ldr	r2, [pc, #152]	@ (8006fbc <HAL_UART_MspInit+0x248>)
 8006f24:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006f26:	4a25      	ldr	r2, [pc, #148]	@ (8006fbc <HAL_UART_MspInit+0x248>)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006f2c:	4b25      	ldr	r3, [pc, #148]	@ (8006fc4 <HAL_UART_MspInit+0x250>)
 8006f2e:	4a26      	ldr	r2, [pc, #152]	@ (8006fc8 <HAL_UART_MspInit+0x254>)
 8006f30:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8006f32:	4b24      	ldr	r3, [pc, #144]	@ (8006fc4 <HAL_UART_MspInit+0x250>)
 8006f34:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006f38:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f3a:	4b22      	ldr	r3, [pc, #136]	@ (8006fc4 <HAL_UART_MspInit+0x250>)
 8006f3c:	2240      	movs	r2, #64	@ 0x40
 8006f3e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f40:	4b20      	ldr	r3, [pc, #128]	@ (8006fc4 <HAL_UART_MspInit+0x250>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006f46:	4b1f      	ldr	r3, [pc, #124]	@ (8006fc4 <HAL_UART_MspInit+0x250>)
 8006f48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006f4c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8006fc4 <HAL_UART_MspInit+0x250>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f54:	4b1b      	ldr	r3, [pc, #108]	@ (8006fc4 <HAL_UART_MspInit+0x250>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8006fc4 <HAL_UART_MspInit+0x250>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006f60:	4b18      	ldr	r3, [pc, #96]	@ (8006fc4 <HAL_UART_MspInit+0x250>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006f66:	4b17      	ldr	r3, [pc, #92]	@ (8006fc4 <HAL_UART_MspInit+0x250>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006f6c:	4815      	ldr	r0, [pc, #84]	@ (8006fc4 <HAL_UART_MspInit+0x250>)
 8006f6e:	f000 fde3 	bl	8007b38 <HAL_DMA_Init>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <HAL_UART_MspInit+0x208>
      Error_Handler();
 8006f78:	f7fd fe70 	bl	8004c5c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a11      	ldr	r2, [pc, #68]	@ (8006fc4 <HAL_UART_MspInit+0x250>)
 8006f80:	639a      	str	r2, [r3, #56]	@ 0x38
 8006f82:	4a10      	ldr	r2, [pc, #64]	@ (8006fc4 <HAL_UART_MspInit+0x250>)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006f88:	2200      	movs	r2, #0
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	2025      	movs	r0, #37	@ 0x25
 8006f8e:	f000 fd8e 	bl	8007aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006f92:	2025      	movs	r0, #37	@ 0x25
 8006f94:	f000 fda7 	bl	8007ae6 <HAL_NVIC_EnableIRQ>
}
 8006f98:	bf00      	nop
 8006f9a:	3738      	adds	r7, #56	@ 0x38
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	40005000 	.word	0x40005000
 8006fa4:	40023800 	.word	0x40023800
 8006fa8:	40020800 	.word	0x40020800
 8006fac:	40020c00 	.word	0x40020c00
 8006fb0:	40011000 	.word	0x40011000
 8006fb4:	40020000 	.word	0x40020000
 8006fb8:	40020400 	.word	0x40020400
 8006fbc:	20000434 	.word	0x20000434
 8006fc0:	40026440 	.word	0x40026440
 8006fc4:	20000494 	.word	0x20000494
 8006fc8:	400264b8 	.word	0x400264b8

08006fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006fd0:	bf00      	nop
 8006fd2:	e7fd      	b.n	8006fd0 <NMI_Handler+0x4>

08006fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006fd8:	bf00      	nop
 8006fda:	e7fd      	b.n	8006fd8 <HardFault_Handler+0x4>

08006fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006fe0:	bf00      	nop
 8006fe2:	e7fd      	b.n	8006fe0 <MemManage_Handler+0x4>

08006fe4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006fe8:	bf00      	nop
 8006fea:	e7fd      	b.n	8006fe8 <BusFault_Handler+0x4>

08006fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006fec:	b480      	push	{r7}
 8006fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006ff0:	bf00      	nop
 8006ff2:	e7fd      	b.n	8006ff0 <UsageFault_Handler+0x4>

08006ff4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006ff8:	bf00      	nop
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007002:	b480      	push	{r7}
 8007004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007006:	bf00      	nop
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007010:	b480      	push	{r7}
 8007012:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007014:	bf00      	nop
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007022:	f000 fc01 	bl	8007828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007026:	bf00      	nop
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007030:	4802      	ldr	r0, [pc, #8]	@ (800703c <TIM2_IRQHandler+0x10>)
 8007032:	f003 fb39 	bl	800a6a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007036:	bf00      	nop
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	2000035c 	.word	0x2000035c

08007040 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007044:	4802      	ldr	r0, [pc, #8]	@ (8007050 <USART1_IRQHandler+0x10>)
 8007046:	f004 f891 	bl	800b16c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800704a:	bf00      	nop
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	200003ec 	.word	0x200003ec

08007054 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8007058:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800705c:	f001 fc10 	bl	8008880 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007060:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007064:	f001 fc0c 	bl	8008880 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007068:	bf00      	nop
 800706a:	bd80      	pop	{r7, pc}

0800706c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007070:	4802      	ldr	r0, [pc, #8]	@ (800707c <DMA2_Stream2_IRQHandler+0x10>)
 8007072:	f000 fef9 	bl	8007e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007076:	bf00      	nop
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20000434 	.word	0x20000434

08007080 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007084:	4802      	ldr	r0, [pc, #8]	@ (8007090 <DMA2_Stream7_IRQHandler+0x10>)
 8007086:	f000 feef 	bl	8007e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800708a:	bf00      	nop
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20000494 	.word	0x20000494

08007094 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007094:	b480      	push	{r7}
 8007096:	af00      	add	r7, sp, #0
  return 1;
 8007098:	2301      	movs	r3, #1
}
 800709a:	4618      	mov	r0, r3
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <_kill>:

int _kill(int pid, int sig)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80070ae:	f005 ff7d 	bl	800cfac <__errno>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2216      	movs	r2, #22
 80070b6:	601a      	str	r2, [r3, #0]
  return -1;
 80070b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <_exit>:

void _exit (int status)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80070cc:	f04f 31ff 	mov.w	r1, #4294967295
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7ff ffe7 	bl	80070a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80070d6:	bf00      	nop
 80070d8:	e7fd      	b.n	80070d6 <_exit+0x12>

080070da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b086      	sub	sp, #24
 80070de:	af00      	add	r7, sp, #0
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070e6:	2300      	movs	r3, #0
 80070e8:	617b      	str	r3, [r7, #20]
 80070ea:	e00a      	b.n	8007102 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80070ec:	f3af 8000 	nop.w
 80070f0:	4601      	mov	r1, r0
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	1c5a      	adds	r2, r3, #1
 80070f6:	60ba      	str	r2, [r7, #8]
 80070f8:	b2ca      	uxtb	r2, r1
 80070fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	3301      	adds	r3, #1
 8007100:	617b      	str	r3, [r7, #20]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	429a      	cmp	r2, r3
 8007108:	dbf0      	blt.n	80070ec <_read+0x12>
  }

  return len;
 800710a:	687b      	ldr	r3, [r7, #4]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3718      	adds	r7, #24
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007120:	2300      	movs	r3, #0
 8007122:	617b      	str	r3, [r7, #20]
 8007124:	e009      	b.n	800713a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	60ba      	str	r2, [r7, #8]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	4618      	mov	r0, r3
 8007130:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	3301      	adds	r3, #1
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	429a      	cmp	r2, r3
 8007140:	dbf1      	blt.n	8007126 <_write+0x12>
  }
  return len;
 8007142:	687b      	ldr	r3, [r7, #4]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3718      	adds	r7, #24
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <_close>:

int _close(int file)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007154:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007158:	4618      	mov	r0, r3
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007174:	605a      	str	r2, [r3, #4]
  return 0;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <_isatty>:

int _isatty(int file)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800718c:	2301      	movs	r3, #1
}
 800718e:	4618      	mov	r0, r3
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800719a:	b480      	push	{r7}
 800719c:	b085      	sub	sp, #20
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3714      	adds	r7, #20
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80071bc:	4a14      	ldr	r2, [pc, #80]	@ (8007210 <_sbrk+0x5c>)
 80071be:	4b15      	ldr	r3, [pc, #84]	@ (8007214 <_sbrk+0x60>)
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80071c8:	4b13      	ldr	r3, [pc, #76]	@ (8007218 <_sbrk+0x64>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d102      	bne.n	80071d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80071d0:	4b11      	ldr	r3, [pc, #68]	@ (8007218 <_sbrk+0x64>)
 80071d2:	4a12      	ldr	r2, [pc, #72]	@ (800721c <_sbrk+0x68>)
 80071d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80071d6:	4b10      	ldr	r3, [pc, #64]	@ (8007218 <_sbrk+0x64>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4413      	add	r3, r2
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d207      	bcs.n	80071f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80071e4:	f005 fee2 	bl	800cfac <__errno>
 80071e8:	4603      	mov	r3, r0
 80071ea:	220c      	movs	r2, #12
 80071ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80071ee:	f04f 33ff 	mov.w	r3, #4294967295
 80071f2:	e009      	b.n	8007208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80071f4:	4b08      	ldr	r3, [pc, #32]	@ (8007218 <_sbrk+0x64>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80071fa:	4b07      	ldr	r3, [pc, #28]	@ (8007218 <_sbrk+0x64>)
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4413      	add	r3, r2
 8007202:	4a05      	ldr	r2, [pc, #20]	@ (8007218 <_sbrk+0x64>)
 8007204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007206:	68fb      	ldr	r3, [r7, #12]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	20020000 	.word	0x20020000
 8007214:	00000400 	.word	0x00000400
 8007218:	200007c0 	.word	0x200007c0
 800721c:	20000940 	.word	0x20000940

08007220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007220:	b480      	push	{r7}
 8007222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007224:	4b06      	ldr	r3, [pc, #24]	@ (8007240 <SystemInit+0x20>)
 8007226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800722a:	4a05      	ldr	r2, [pc, #20]	@ (8007240 <SystemInit+0x20>)
 800722c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007230:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007234:	bf00      	nop
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	e000ed00 	.word	0xe000ed00

08007244 <test_modes_handle_sit>:

/**
 * @brief Handle SIT (Sensor Interface Test) mode
 */
void test_modes_handle_sit(BME_280_t* bme, bmi088_struct_t* bmi)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
	addDataPacketSit(bme, bmi);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7fd fd5b 	bl	8004d0c <addDataPacketSit>
   // if (!usart1_tx_busy) {
       // uart1_send_packet_dma((uint8_t*)sit_paket, 36);
    	HAL_UART_Transmit(&huart1, (uint8_t*)sit_paket, 36, 100);
 8007256:	2364      	movs	r3, #100	@ 0x64
 8007258:	2224      	movs	r2, #36	@ 0x24
 800725a:	4904      	ldr	r1, [pc, #16]	@ (800726c <test_modes_handle_sit+0x28>)
 800725c:	4804      	ldr	r0, [pc, #16]	@ (8007270 <test_modes_handle_sit+0x2c>)
 800725e:	f003 fe23 	bl	800aea8 <HAL_UART_Transmit>
    //}
}
 8007262:	bf00      	nop
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	200006cc 	.word	0x200006cc
 8007270:	200003ec 	.word	0x200003ec

08007274 <algorithm_update_sut>:


void algorithm_update_sut(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08a      	sub	sp, #40	@ 0x28
 8007278:	af00      	add	r7, sp, #0
    // Check if SUT data is ready
    if (uart_handler_sut_data_ready()) {
 800727a:	f000 f9e5 	bl	8007648 <uart_handler_sut_data_ready>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d013      	beq.n	80072ac <algorithm_update_sut+0x38>
        uart_handler_clear_sut_flag();
 8007284:	f000 fa0e 	bl	80076a4 <uart_handler_clear_sut_flag>

        sut_data_t sut_data;
        if (uart_handler_get_sut_data(&sut_data)) {
 8007288:	1d3b      	adds	r3, r7, #4
 800728a:	4618      	mov	r0, r3
 800728c:	f000 f9e8 	bl	8007660 <uart_handler_get_sut_data>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00a      	beq.n	80072ac <algorithm_update_sut+0x38>
            // Process SUT data through test modes handler
            uint16_t status_bits = test_modes_handle_sut(&sut_data, &sensor_output);
 8007296:	1d3b      	adds	r3, r7, #4
 8007298:	4906      	ldr	r1, [pc, #24]	@ (80072b4 <algorithm_update_sut+0x40>)
 800729a:	4618      	mov	r0, r3
 800729c:	f000 f80c 	bl	80072b8 <test_modes_handle_sut>
 80072a0:	4603      	mov	r3, r0
 80072a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            uart_handler_send_status(status_bits);
 80072a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 fa08 	bl	80076bc <uart_handler_send_status>
        }
    }
}
 80072ac:	bf00      	nop
 80072ae:	3728      	adds	r7, #40	@ 0x28
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	20000648 	.word	0x20000648

080072b8 <test_modes_handle_sut>:

/**
 * @brief Handle SUT (System Under Test) mode
 */
uint16_t test_modes_handle_sut(sut_data_t* sut_data, sensor_fusion_t* sensor_output)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b0d8      	sub	sp, #352	@ 0x160
 80072bc:	af00      	add	r7, sp, #0
 80072be:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80072c2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80072c6:	6018      	str	r0, [r3, #0]
 80072c8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80072cc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80072d0:	6019      	str	r1, [r3, #0]
    // Convert SUT data to BME and BMI structures
    BME_280_t bme_sut = {0};
 80072d2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80072d6:	2244      	movs	r2, #68	@ 0x44
 80072d8:	2100      	movs	r1, #0
 80072da:	4618      	mov	r0, r3
 80072dc:	f005 fe13 	bl	800cf06 <memset>
    bmi088_struct_t bmi_sut = {0};
 80072e0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80072e4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80072e8:	4618      	mov	r0, r3
 80072ea:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80072ee:	461a      	mov	r2, r3
 80072f0:	2100      	movs	r1, #0
 80072f2:	f005 fe08 	bl	800cf06 <memset>

    // Fill BME data
    bme_sut.altitude = sut_data->altitude;
 80072f6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80072fa:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    bme_sut.pressure = sut_data->pressure;
 8007306:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800730a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    // Fill BMI data
    bmi_sut.acc_x = sut_data->acc_x;
 8007316:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800731a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689a      	ldr	r2, [r3, #8]
 8007322:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007326:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800732a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    bmi_sut.acc_y = sut_data->acc_y;
 800732e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007332:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68da      	ldr	r2, [r3, #12]
 800733a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800733e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8007342:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    bmi_sut.acc_z = sut_data->acc_z;
 8007346:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800734a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691a      	ldr	r2, [r3, #16]
 8007352:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007356:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800735a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    bmi_sut.gyro_x = sut_data->gyro_x;
 800735e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007362:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	4618      	mov	r0, r3
 800736c:	f7f9 f90c 	bl	8000588 <__aeabi_f2d>
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8007378:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 800737c:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    bmi_sut.angleY = sut_data->gyro_y;
 8007380:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007384:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699a      	ldr	r2, [r3, #24]
 800738c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007390:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8007394:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    bmi_sut.gyro_z = sut_data->gyro_z;
 8007398:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800739c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7f9 f8ef 	bl	8000588 <__aeabi_f2d>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 80073b2:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 80073b6:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

    // Process synthetic data through sensor fusion first
    //sensor_fusion_update_mahony(&bmi_sut, sensor_output);
	sensor_fusion_update_kalman(&bme_sut, &bmi_sut, sensor_output);
 80073ba:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80073be:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80073c2:	f107 0108 	add.w	r1, r7, #8
 80073c6:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	f7ff fae8 	bl	80069a0 <sensor_fusion_update_kalman>

    // Then run flight algorithm with fused data
    flight_algorithm_update(&bme_sut, &bmi_sut, sensor_output);
 80073d0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80073d4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80073d8:	f107 0108 	add.w	r1, r7, #8
 80073dc:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	f7fb fcaf 	bl	8002d44 <flight_algorithm_update>
    uint16_t status_bits = flight_algorithm_get_status_bits();
 80073e6:	f7fb fdff 	bl	8002fe8 <flight_algorithm_get_status_bits>
 80073ea:	4603      	mov	r3, r0
 80073ec:	f8a7 315e 	strh.w	r3, [r7, #350]	@ 0x15e

    return status_bits;
 80073f0:	f8b7 315e 	ldrh.w	r3, [r7, #350]	@ 0x15e
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <uart_handler_init>:

/**
 * @brief Initialize UART handler
 */
void uart_handler_init(void)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	af00      	add	r7, sp, #0
    current_mode = MODE_NORMAL;
 8007404:	4b07      	ldr	r3, [pc, #28]	@ (8007424 <uart_handler_init+0x24>)
 8007406:	2200      	movs	r2, #0
 8007408:	701a      	strb	r2, [r3, #0]
    command_packet_ready = 0;
 800740a:	4b07      	ldr	r3, [pc, #28]	@ (8007428 <uart_handler_init+0x28>)
 800740c:	2200      	movs	r2, #0
 800740e:	701a      	strb	r2, [r3, #0]
    sut_packet_ready = 0;
 8007410:	4b06      	ldr	r3, [pc, #24]	@ (800742c <uart_handler_init+0x2c>)
 8007412:	2200      	movs	r2, #0
 8007414:	701a      	strb	r2, [r3, #0]
    memset(&latest_sut_data, 0, sizeof(latest_sut_data));
 8007416:	2220      	movs	r2, #32
 8007418:	2100      	movs	r1, #0
 800741a:	4805      	ldr	r0, [pc, #20]	@ (8007430 <uart_handler_init+0x30>)
 800741c:	f005 fd73 	bl	800cf06 <memset>
}
 8007420:	bf00      	nop
 8007422:	bd80      	pop	{r7, pc}
 8007424:	200007c4 	.word	0x200007c4
 8007428:	200007c5 	.word	0x200007c5
 800742c:	200007c6 	.word	0x200007c6
 8007430:	200007c8 	.word	0x200007c8

08007434 <uart_handler_process_packets>:

/**
 * @brief Process incoming UART packets (call from main loop)
 */
void uart_handler_process_packets(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	af00      	add	r7, sp, #0
    if (usart1_packet_ready) {
 8007438:	4b14      	ldr	r3, [pc, #80]	@ (800748c <uart_handler_process_packets+0x58>)
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d021      	beq.n	8007486 <uart_handler_process_packets+0x52>
        usart1_packet_ready = 0; // Clear flag immediately
 8007442:	4b12      	ldr	r3, [pc, #72]	@ (800748c <uart_handler_process_packets+0x58>)
 8007444:	2200      	movs	r2, #0
 8007446:	701a      	strb	r2, [r3, #0]

        // Command packet (5 bytes with header 0xAA)
        if (usart1_rx_buffer[0] == CMD_HEADER && usart1_packet_size == 5) {
 8007448:	4b11      	ldr	r3, [pc, #68]	@ (8007490 <uart_handler_process_packets+0x5c>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2baa      	cmp	r3, #170	@ 0xaa
 800744e:	d10b      	bne.n	8007468 <uart_handler_process_packets+0x34>
 8007450:	4b10      	ldr	r3, [pc, #64]	@ (8007494 <uart_handler_process_packets+0x60>)
 8007452:	881b      	ldrh	r3, [r3, #0]
 8007454:	b29b      	uxth	r3, r3
 8007456:	2b05      	cmp	r3, #5
 8007458:	d106      	bne.n	8007468 <uart_handler_process_packets+0x34>
            command_packet_ready = 1;
 800745a:	4b0f      	ldr	r3, [pc, #60]	@ (8007498 <uart_handler_process_packets+0x64>)
 800745c:	2201      	movs	r2, #1
 800745e:	701a      	strb	r2, [r3, #0]
            process_command_packet(usart1_rx_buffer);
 8007460:	480b      	ldr	r0, [pc, #44]	@ (8007490 <uart_handler_process_packets+0x5c>)
 8007462:	f000 f81d 	bl	80074a0 <process_command_packet>
        else if (usart1_rx_buffer[0] == PACKET_HEADER && usart1_packet_size == 36) {
            sut_packet_ready = 1;
            process_sut_packet(usart1_rx_buffer);
        }
    }
}
 8007466:	e00e      	b.n	8007486 <uart_handler_process_packets+0x52>
        else if (usart1_rx_buffer[0] == PACKET_HEADER && usart1_packet_size == 36) {
 8007468:	4b09      	ldr	r3, [pc, #36]	@ (8007490 <uart_handler_process_packets+0x5c>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	2bab      	cmp	r3, #171	@ 0xab
 800746e:	d10a      	bne.n	8007486 <uart_handler_process_packets+0x52>
 8007470:	4b08      	ldr	r3, [pc, #32]	@ (8007494 <uart_handler_process_packets+0x60>)
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	b29b      	uxth	r3, r3
 8007476:	2b24      	cmp	r3, #36	@ 0x24
 8007478:	d105      	bne.n	8007486 <uart_handler_process_packets+0x52>
            sut_packet_ready = 1;
 800747a:	4b08      	ldr	r3, [pc, #32]	@ (800749c <uart_handler_process_packets+0x68>)
 800747c:	2201      	movs	r2, #1
 800747e:	701a      	strb	r2, [r3, #0]
            process_sut_packet(usart1_rx_buffer);
 8007480:	4803      	ldr	r0, [pc, #12]	@ (8007490 <uart_handler_process_packets+0x5c>)
 8007482:	f000 f843 	bl	800750c <process_sut_packet>
}
 8007486:	bf00      	nop
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	200006c4 	.word	0x200006c4
 8007490:	20000674 	.word	0x20000674
 8007494:	200006c6 	.word	0x200006c6
 8007498:	200007c5 	.word	0x200007c5
 800749c:	200007c6 	.word	0x200007c6

080074a0 <process_command_packet>:
/**
 * @brief Process command packet from buffer
 * @param buffer Pointer to received buffer
 */
void process_command_packet(uint8_t* buffer)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
    if (buffer[0] == CMD_HEADER) {
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	2baa      	cmp	r3, #170	@ 0xaa
 80074ae:	d124      	bne.n	80074fa <process_command_packet+0x5a>
        uint8_t command = buffer[1];
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	785b      	ldrb	r3, [r3, #1]
 80074b4:	73fb      	strb	r3, [r7, #15]
        //uint8_t checksum = buffer[2];
        uint8_t footer1 = buffer[3];
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	78db      	ldrb	r3, [r3, #3]
 80074ba:	73bb      	strb	r3, [r7, #14]
        uint8_t footer2 = buffer[4];
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	791b      	ldrb	r3, [r3, #4]
 80074c0:	737b      	strb	r3, [r7, #13]

        if (footer1 == CMD_FOOTER1 && footer2 == CMD_FOOTER2) {
 80074c2:	7bbb      	ldrb	r3, [r7, #14]
 80074c4:	2b0d      	cmp	r3, #13
 80074c6:	d118      	bne.n	80074fa <process_command_packet+0x5a>
 80074c8:	7b7b      	ldrb	r3, [r7, #13]
 80074ca:	2b0a      	cmp	r3, #10
 80074cc:	d115      	bne.n	80074fa <process_command_packet+0x5a>
            switch (command) {
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
 80074d0:	2b24      	cmp	r3, #36	@ 0x24
 80074d2:	d00e      	beq.n	80074f2 <process_command_packet+0x52>
 80074d4:	2b24      	cmp	r3, #36	@ 0x24
 80074d6:	dc10      	bgt.n	80074fa <process_command_packet+0x5a>
 80074d8:	2b20      	cmp	r3, #32
 80074da:	d002      	beq.n	80074e2 <process_command_packet+0x42>
 80074dc:	2b22      	cmp	r3, #34	@ 0x22
 80074de:	d004      	beq.n	80074ea <process_command_packet+0x4a>
                    current_mode = MODE_NORMAL;
                    break;
            }
        }
    }
}
 80074e0:	e00b      	b.n	80074fa <process_command_packet+0x5a>
                    current_mode = MODE_SIT;
 80074e2:	4b09      	ldr	r3, [pc, #36]	@ (8007508 <process_command_packet+0x68>)
 80074e4:	2201      	movs	r2, #1
 80074e6:	701a      	strb	r2, [r3, #0]
                    break;
 80074e8:	e007      	b.n	80074fa <process_command_packet+0x5a>
                    current_mode = MODE_SUT;
 80074ea:	4b07      	ldr	r3, [pc, #28]	@ (8007508 <process_command_packet+0x68>)
 80074ec:	2202      	movs	r2, #2
 80074ee:	701a      	strb	r2, [r3, #0]
                    break;
 80074f0:	e003      	b.n	80074fa <process_command_packet+0x5a>
                    current_mode = MODE_NORMAL;
 80074f2:	4b05      	ldr	r3, [pc, #20]	@ (8007508 <process_command_packet+0x68>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
                    break;
 80074f8:	bf00      	nop
}
 80074fa:	bf00      	nop
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	200007c4 	.word	0x200007c4

0800750c <process_sut_packet>:
/**
 * @brief Process SUT data packet from buffer
 * @param buffer Pointer to received buffer
 */
void process_sut_packet(uint8_t* buffer)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
    // Header, footer and checksum verification
    if (buffer[0] != PACKET_HEADER) return;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	2bab      	cmp	r3, #171	@ 0xab
 800751a:	d172      	bne.n	8007602 <process_sut_packet+0xf6>
    if (buffer[34] != CMD_FOOTER1 || buffer[35] != CMD_FOOTER2) return;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3322      	adds	r3, #34	@ 0x22
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	2b0d      	cmp	r3, #13
 8007524:	d16f      	bne.n	8007606 <process_sut_packet+0xfa>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3323      	adds	r3, #35	@ 0x23
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b0a      	cmp	r3, #10
 800752e:	d16a      	bne.n	8007606 <process_sut_packet+0xfa>

    uint8_t calculated_checksum = 0;
 8007530:	2300      	movs	r3, #0
 8007532:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 33; i++) {
 8007534:	2300      	movs	r3, #0
 8007536:	60bb      	str	r3, [r7, #8]
 8007538:	e009      	b.n	800754e <process_sut_packet+0x42>
        calculated_checksum += buffer[i];
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	4413      	add	r3, r2
 8007540:	781a      	ldrb	r2, [r3, #0]
 8007542:	7bfb      	ldrb	r3, [r7, #15]
 8007544:	4413      	add	r3, r2
 8007546:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 33; i++) {
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	3301      	adds	r3, #1
 800754c:	60bb      	str	r3, [r7, #8]
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2b20      	cmp	r3, #32
 8007552:	ddf2      	ble.n	800753a <process_sut_packet+0x2e>
    }
    calculated_checksum %= 256;
    if (calculated_checksum != buffer[33]) return;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	3321      	adds	r3, #33	@ 0x21
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	7bfa      	ldrb	r2, [r7, #15]
 800755c:	429a      	cmp	r2, r3
 800755e:	d154      	bne.n	800760a <process_sut_packet+0xfe>

    // Parse data
    latest_sut_data.altitude = uint8_arrayi_float32_ye_donustur(&buffer[1]);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3301      	adds	r3, #1
 8007564:	4618      	mov	r0, r3
 8007566:	f7fd fcfd 	bl	8004f64 <uint8_arrayi_float32_ye_donustur>
 800756a:	eef0 7a40 	vmov.f32	s15, s0
 800756e:	4b29      	ldr	r3, [pc, #164]	@ (8007614 <process_sut_packet+0x108>)
 8007570:	edc3 7a00 	vstr	s15, [r3]
    latest_sut_data.pressure = uint8_arrayi_float32_ye_donustur(&buffer[5]);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3305      	adds	r3, #5
 8007578:	4618      	mov	r0, r3
 800757a:	f7fd fcf3 	bl	8004f64 <uint8_arrayi_float32_ye_donustur>
 800757e:	eef0 7a40 	vmov.f32	s15, s0
 8007582:	4b24      	ldr	r3, [pc, #144]	@ (8007614 <process_sut_packet+0x108>)
 8007584:	edc3 7a01 	vstr	s15, [r3, #4]
    latest_sut_data.acc_x = uint8_arrayi_float32_ye_donustur(&buffer[9]);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3309      	adds	r3, #9
 800758c:	4618      	mov	r0, r3
 800758e:	f7fd fce9 	bl	8004f64 <uint8_arrayi_float32_ye_donustur>
 8007592:	eef0 7a40 	vmov.f32	s15, s0
 8007596:	4b1f      	ldr	r3, [pc, #124]	@ (8007614 <process_sut_packet+0x108>)
 8007598:	edc3 7a02 	vstr	s15, [r3, #8]
    latest_sut_data.acc_y = uint8_arrayi_float32_ye_donustur(&buffer[13]);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	330d      	adds	r3, #13
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fd fcdf 	bl	8004f64 <uint8_arrayi_float32_ye_donustur>
 80075a6:	eef0 7a40 	vmov.f32	s15, s0
 80075aa:	4b1a      	ldr	r3, [pc, #104]	@ (8007614 <process_sut_packet+0x108>)
 80075ac:	edc3 7a03 	vstr	s15, [r3, #12]
    latest_sut_data.acc_z = uint8_arrayi_float32_ye_donustur(&buffer[17]);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3311      	adds	r3, #17
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fd fcd5 	bl	8004f64 <uint8_arrayi_float32_ye_donustur>
 80075ba:	eef0 7a40 	vmov.f32	s15, s0
 80075be:	4b15      	ldr	r3, [pc, #84]	@ (8007614 <process_sut_packet+0x108>)
 80075c0:	edc3 7a04 	vstr	s15, [r3, #16]
    latest_sut_data.gyro_x = uint8_arrayi_float32_ye_donustur(&buffer[21]);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3315      	adds	r3, #21
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fd fccb 	bl	8004f64 <uint8_arrayi_float32_ye_donustur>
 80075ce:	eef0 7a40 	vmov.f32	s15, s0
 80075d2:	4b10      	ldr	r3, [pc, #64]	@ (8007614 <process_sut_packet+0x108>)
 80075d4:	edc3 7a05 	vstr	s15, [r3, #20]
    latest_sut_data.gyro_y = uint8_arrayi_float32_ye_donustur(&buffer[25]);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3319      	adds	r3, #25
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fd fcc1 	bl	8004f64 <uint8_arrayi_float32_ye_donustur>
 80075e2:	eef0 7a40 	vmov.f32	s15, s0
 80075e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007614 <process_sut_packet+0x108>)
 80075e8:	edc3 7a06 	vstr	s15, [r3, #24]
    latest_sut_data.gyro_z = uint8_arrayi_float32_ye_donustur(&buffer[29]);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	331d      	adds	r3, #29
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fd fcb7 	bl	8004f64 <uint8_arrayi_float32_ye_donustur>
 80075f6:	eef0 7a40 	vmov.f32	s15, s0
 80075fa:	4b06      	ldr	r3, [pc, #24]	@ (8007614 <process_sut_packet+0x108>)
 80075fc:	edc3 7a07 	vstr	s15, [r3, #28]
 8007600:	e004      	b.n	800760c <process_sut_packet+0x100>
    if (buffer[0] != PACKET_HEADER) return;
 8007602:	bf00      	nop
 8007604:	e002      	b.n	800760c <process_sut_packet+0x100>
    if (buffer[34] != CMD_FOOTER1 || buffer[35] != CMD_FOOTER2) return;
 8007606:	bf00      	nop
 8007608:	e000      	b.n	800760c <process_sut_packet+0x100>
    if (calculated_checksum != buffer[33]) return;
 800760a:	bf00      	nop
}
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	200007c8 	.word	0x200007c8

08007618 <uart_handler_get_mode>:

/**
 * @brief Get current system mode
 */
SystemMode_t uart_handler_get_mode(void)
{
 8007618:	b480      	push	{r7}
 800761a:	af00      	add	r7, sp, #0
    return current_mode;
 800761c:	4b03      	ldr	r3, [pc, #12]	@ (800762c <uart_handler_get_mode+0x14>)
 800761e:	781b      	ldrb	r3, [r3, #0]
}
 8007620:	4618      	mov	r0, r3
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	200007c4 	.word	0x200007c4

08007630 <uart_handler_command_ready>:

/**
 * @brief Check if command packet is ready
 */
uint8_t uart_handler_command_ready(void)
{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
    return command_packet_ready;
 8007634:	4b03      	ldr	r3, [pc, #12]	@ (8007644 <uart_handler_command_ready+0x14>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	b2db      	uxtb	r3, r3
}
 800763a:	4618      	mov	r0, r3
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	200007c5 	.word	0x200007c5

08007648 <uart_handler_sut_data_ready>:

/**
 * @brief Check if SUT data packet is ready
 */
uint8_t uart_handler_sut_data_ready(void)
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
    return sut_packet_ready;
 800764c:	4b03      	ldr	r3, [pc, #12]	@ (800765c <uart_handler_sut_data_ready+0x14>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	b2db      	uxtb	r3, r3
}
 8007652:	4618      	mov	r0, r3
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	200007c6 	.word	0x200007c6

08007660 <uart_handler_get_sut_data>:

/**
 * @brief Get the latest SUT data
 */
uint8_t uart_handler_get_sut_data(sut_data_t* data)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
    if (data == NULL) return 0;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <uart_handler_get_sut_data+0x12>
 800766e:	2300      	movs	r3, #0
 8007670:	e005      	b.n	800767e <uart_handler_get_sut_data+0x1e>

    memcpy(data, &latest_sut_data, sizeof(sut_data_t));
 8007672:	2220      	movs	r2, #32
 8007674:	4904      	ldr	r1, [pc, #16]	@ (8007688 <uart_handler_get_sut_data+0x28>)
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f005 fcc5 	bl	800d006 <memcpy>
    return 1;
 800767c:	2301      	movs	r3, #1
}
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	200007c8 	.word	0x200007c8

0800768c <uart_handler_clear_command_flag>:

/**
 * @brief Clear command ready flag
 */
void uart_handler_clear_command_flag(void)
{
 800768c:	b480      	push	{r7}
 800768e:	af00      	add	r7, sp, #0
    command_packet_ready = 0;
 8007690:	4b03      	ldr	r3, [pc, #12]	@ (80076a0 <uart_handler_clear_command_flag+0x14>)
 8007692:	2200      	movs	r2, #0
 8007694:	701a      	strb	r2, [r3, #0]
}
 8007696:	bf00      	nop
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	200007c5 	.word	0x200007c5

080076a4 <uart_handler_clear_sut_flag>:

/**
 * @brief Clear SUT data ready flag
 */
void uart_handler_clear_sut_flag(void)
{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0
    sut_packet_ready = 0;
 80076a8:	4b03      	ldr	r3, [pc, #12]	@ (80076b8 <uart_handler_clear_sut_flag+0x14>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	701a      	strb	r2, [r3, #0]
}
 80076ae:	bf00      	nop
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	200007c6 	.word	0x200007c6

080076bc <uart_handler_send_status>:

/**
 * @brief Send status packet (for SUT mode)
 */
void uart_handler_send_status(uint16_t status_bits)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	4603      	mov	r3, r0
 80076c4:	80fb      	strh	r3, [r7, #6]
    if (!usart1_tx_busy) {
 80076c6:	4b18      	ldr	r3, [pc, #96]	@ (8007728 <uart_handler_send_status+0x6c>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d127      	bne.n	8007720 <uart_handler_send_status+0x64>
        // Use static buffer for DMA safety
        status_packet_dma[0] = CMD_HEADER;
 80076d0:	4b16      	ldr	r3, [pc, #88]	@ (800772c <uart_handler_send_status+0x70>)
 80076d2:	22aa      	movs	r2, #170	@ 0xaa
 80076d4:	701a      	strb	r2, [r3, #0]
        status_packet_dma[1] = status_bits & 0xFF;         // Low byte of status
 80076d6:	88fb      	ldrh	r3, [r7, #6]
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	4b14      	ldr	r3, [pc, #80]	@ (800772c <uart_handler_send_status+0x70>)
 80076dc:	705a      	strb	r2, [r3, #1]
        status_packet_dma[2] = (status_bits >> 8) & 0xFF;  // High byte of status
 80076de:	88fb      	ldrh	r3, [r7, #6]
 80076e0:	0a1b      	lsrs	r3, r3, #8
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	4b11      	ldr	r3, [pc, #68]	@ (800772c <uart_handler_send_status+0x70>)
 80076e8:	709a      	strb	r2, [r3, #2]

        // Calculate checksum (only for header and status bytes)
        status_packet_dma[3] = (status_packet_dma[0] + status_packet_dma[1] + status_packet_dma[2]) % 256;
 80076ea:	4b10      	ldr	r3, [pc, #64]	@ (800772c <uart_handler_send_status+0x70>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	4b0e      	ldr	r3, [pc, #56]	@ (800772c <uart_handler_send_status+0x70>)
 80076f2:	785b      	ldrb	r3, [r3, #1]
 80076f4:	4413      	add	r3, r2
 80076f6:	4a0d      	ldr	r2, [pc, #52]	@ (800772c <uart_handler_send_status+0x70>)
 80076f8:	7892      	ldrb	r2, [r2, #2]
 80076fa:	4413      	add	r3, r2
 80076fc:	425a      	negs	r2, r3
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	b2d2      	uxtb	r2, r2
 8007702:	bf58      	it	pl
 8007704:	4253      	negpl	r3, r2
 8007706:	b2da      	uxtb	r2, r3
 8007708:	4b08      	ldr	r3, [pc, #32]	@ (800772c <uart_handler_send_status+0x70>)
 800770a:	70da      	strb	r2, [r3, #3]

        status_packet_dma[4] = CMD_FOOTER1;
 800770c:	4b07      	ldr	r3, [pc, #28]	@ (800772c <uart_handler_send_status+0x70>)
 800770e:	220d      	movs	r2, #13
 8007710:	711a      	strb	r2, [r3, #4]
        status_packet_dma[5] = CMD_FOOTER2;
 8007712:	4b06      	ldr	r3, [pc, #24]	@ (800772c <uart_handler_send_status+0x70>)
 8007714:	220a      	movs	r2, #10
 8007716:	715a      	strb	r2, [r3, #5]

        uart1_send_packet_dma(status_packet_dma, 6);
 8007718:	2106      	movs	r1, #6
 800771a:	4804      	ldr	r0, [pc, #16]	@ (800772c <uart_handler_send_status+0x70>)
 800771c:	f7fd fa82 	bl	8004c24 <uart1_send_packet_dma>
    }
}
 8007720:	bf00      	nop
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	200006c9 	.word	0x200006c9
 800772c:	200007e8 	.word	0x200007e8

08007730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007730:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007768 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007734:	f7ff fd74 	bl	8007220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007738:	480c      	ldr	r0, [pc, #48]	@ (800776c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800773a:	490d      	ldr	r1, [pc, #52]	@ (8007770 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800773c:	4a0d      	ldr	r2, [pc, #52]	@ (8007774 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800773e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007740:	e002      	b.n	8007748 <LoopCopyDataInit>

08007742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007746:	3304      	adds	r3, #4

08007748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800774a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800774c:	d3f9      	bcc.n	8007742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800774e:	4a0a      	ldr	r2, [pc, #40]	@ (8007778 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007750:	4c0a      	ldr	r4, [pc, #40]	@ (800777c <LoopFillZerobss+0x22>)
  movs r3, #0
 8007752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007754:	e001      	b.n	800775a <LoopFillZerobss>

08007756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007758:	3204      	adds	r2, #4

0800775a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800775a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800775c:	d3fb      	bcc.n	8007756 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800775e:	f005 fc2b 	bl	800cfb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007762:	f7fc fec9 	bl	80044f8 <main>
  bx  lr    
 8007766:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007768:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800776c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007770:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8007774:	08011ab8 	.word	0x08011ab8
  ldr r2, =_sbss
 8007778:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 800777c:	20000940 	.word	0x20000940

08007780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007780:	e7fe      	b.n	8007780 <ADC_IRQHandler>
	...

08007784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007788:	4b0e      	ldr	r3, [pc, #56]	@ (80077c4 <HAL_Init+0x40>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a0d      	ldr	r2, [pc, #52]	@ (80077c4 <HAL_Init+0x40>)
 800778e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007792:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007794:	4b0b      	ldr	r3, [pc, #44]	@ (80077c4 <HAL_Init+0x40>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a0a      	ldr	r2, [pc, #40]	@ (80077c4 <HAL_Init+0x40>)
 800779a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800779e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80077a0:	4b08      	ldr	r3, [pc, #32]	@ (80077c4 <HAL_Init+0x40>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a07      	ldr	r2, [pc, #28]	@ (80077c4 <HAL_Init+0x40>)
 80077a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80077ac:	2003      	movs	r0, #3
 80077ae:	f000 f973 	bl	8007a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80077b2:	200f      	movs	r0, #15
 80077b4:	f000 f808 	bl	80077c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80077b8:	f7ff f9b0 	bl	8006b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	40023c00 	.word	0x40023c00

080077c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80077d0:	4b12      	ldr	r3, [pc, #72]	@ (800781c <HAL_InitTick+0x54>)
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	4b12      	ldr	r3, [pc, #72]	@ (8007820 <HAL_InitTick+0x58>)
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	4619      	mov	r1, r3
 80077da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80077de:	fbb3 f3f1 	udiv	r3, r3, r1
 80077e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 f999 	bl	8007b1e <HAL_SYSTICK_Config>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e00e      	b.n	8007814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2b0f      	cmp	r3, #15
 80077fa:	d80a      	bhi.n	8007812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80077fc:	2200      	movs	r2, #0
 80077fe:	6879      	ldr	r1, [r7, #4]
 8007800:	f04f 30ff 	mov.w	r0, #4294967295
 8007804:	f000 f953 	bl	8007aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007808:	4a06      	ldr	r2, [pc, #24]	@ (8007824 <HAL_InitTick+0x5c>)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	e000      	b.n	8007814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	20000040 	.word	0x20000040
 8007820:	20000048 	.word	0x20000048
 8007824:	20000044 	.word	0x20000044

08007828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007828:	b480      	push	{r7}
 800782a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800782c:	4b06      	ldr	r3, [pc, #24]	@ (8007848 <HAL_IncTick+0x20>)
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	461a      	mov	r2, r3
 8007832:	4b06      	ldr	r3, [pc, #24]	@ (800784c <HAL_IncTick+0x24>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4413      	add	r3, r2
 8007838:	4a04      	ldr	r2, [pc, #16]	@ (800784c <HAL_IncTick+0x24>)
 800783a:	6013      	str	r3, [r2, #0]
}
 800783c:	bf00      	nop
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	20000048 	.word	0x20000048
 800784c:	200007f0 	.word	0x200007f0

08007850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007850:	b480      	push	{r7}
 8007852:	af00      	add	r7, sp, #0
  return uwTick;
 8007854:	4b03      	ldr	r3, [pc, #12]	@ (8007864 <HAL_GetTick+0x14>)
 8007856:	681b      	ldr	r3, [r3, #0]
}
 8007858:	4618      	mov	r0, r3
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	200007f0 	.word	0x200007f0

08007868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007870:	f7ff ffee 	bl	8007850 <HAL_GetTick>
 8007874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007880:	d005      	beq.n	800788e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007882:	4b0a      	ldr	r3, [pc, #40]	@ (80078ac <HAL_Delay+0x44>)
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	4413      	add	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800788e:	bf00      	nop
 8007890:	f7ff ffde 	bl	8007850 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	429a      	cmp	r2, r3
 800789e:	d8f7      	bhi.n	8007890 <HAL_Delay+0x28>
  {
  }
}
 80078a0:	bf00      	nop
 80078a2:	bf00      	nop
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	20000048 	.word	0x20000048

080078b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f003 0307 	and.w	r3, r3, #7
 80078be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078c0:	4b0c      	ldr	r3, [pc, #48]	@ (80078f4 <__NVIC_SetPriorityGrouping+0x44>)
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80078cc:	4013      	ands	r3, r2
 80078ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80078d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80078dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80078e2:	4a04      	ldr	r2, [pc, #16]	@ (80078f4 <__NVIC_SetPriorityGrouping+0x44>)
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	60d3      	str	r3, [r2, #12]
}
 80078e8:	bf00      	nop
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	e000ed00 	.word	0xe000ed00

080078f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80078f8:	b480      	push	{r7}
 80078fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80078fc:	4b04      	ldr	r3, [pc, #16]	@ (8007910 <__NVIC_GetPriorityGrouping+0x18>)
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	0a1b      	lsrs	r3, r3, #8
 8007902:	f003 0307 	and.w	r3, r3, #7
}
 8007906:	4618      	mov	r0, r3
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	e000ed00 	.word	0xe000ed00

08007914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800791e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007922:	2b00      	cmp	r3, #0
 8007924:	db0b      	blt.n	800793e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007926:	79fb      	ldrb	r3, [r7, #7]
 8007928:	f003 021f 	and.w	r2, r3, #31
 800792c:	4907      	ldr	r1, [pc, #28]	@ (800794c <__NVIC_EnableIRQ+0x38>)
 800792e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007932:	095b      	lsrs	r3, r3, #5
 8007934:	2001      	movs	r0, #1
 8007936:	fa00 f202 	lsl.w	r2, r0, r2
 800793a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	e000e100 	.word	0xe000e100

08007950 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	4603      	mov	r3, r0
 8007958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800795a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800795e:	2b00      	cmp	r3, #0
 8007960:	db12      	blt.n	8007988 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	f003 021f 	and.w	r2, r3, #31
 8007968:	490a      	ldr	r1, [pc, #40]	@ (8007994 <__NVIC_DisableIRQ+0x44>)
 800796a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800796e:	095b      	lsrs	r3, r3, #5
 8007970:	2001      	movs	r0, #1
 8007972:	fa00 f202 	lsl.w	r2, r0, r2
 8007976:	3320      	adds	r3, #32
 8007978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800797c:	f3bf 8f4f 	dsb	sy
}
 8007980:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007982:	f3bf 8f6f 	isb	sy
}
 8007986:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	e000e100 	.word	0xe000e100

08007998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	4603      	mov	r3, r0
 80079a0:	6039      	str	r1, [r7, #0]
 80079a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	db0a      	blt.n	80079c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	490c      	ldr	r1, [pc, #48]	@ (80079e4 <__NVIC_SetPriority+0x4c>)
 80079b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079b6:	0112      	lsls	r2, r2, #4
 80079b8:	b2d2      	uxtb	r2, r2
 80079ba:	440b      	add	r3, r1
 80079bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80079c0:	e00a      	b.n	80079d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	4908      	ldr	r1, [pc, #32]	@ (80079e8 <__NVIC_SetPriority+0x50>)
 80079c8:	79fb      	ldrb	r3, [r7, #7]
 80079ca:	f003 030f 	and.w	r3, r3, #15
 80079ce:	3b04      	subs	r3, #4
 80079d0:	0112      	lsls	r2, r2, #4
 80079d2:	b2d2      	uxtb	r2, r2
 80079d4:	440b      	add	r3, r1
 80079d6:	761a      	strb	r2, [r3, #24]
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	e000e100 	.word	0xe000e100
 80079e8:	e000ed00 	.word	0xe000ed00

080079ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b089      	sub	sp, #36	@ 0x24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f003 0307 	and.w	r3, r3, #7
 80079fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	f1c3 0307 	rsb	r3, r3, #7
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	bf28      	it	cs
 8007a0a:	2304      	movcs	r3, #4
 8007a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	3304      	adds	r3, #4
 8007a12:	2b06      	cmp	r3, #6
 8007a14:	d902      	bls.n	8007a1c <NVIC_EncodePriority+0x30>
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	3b03      	subs	r3, #3
 8007a1a:	e000      	b.n	8007a1e <NVIC_EncodePriority+0x32>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a20:	f04f 32ff 	mov.w	r2, #4294967295
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2a:	43da      	mvns	r2, r3
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	401a      	ands	r2, r3
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a34:	f04f 31ff 	mov.w	r1, #4294967295
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a3e:	43d9      	mvns	r1, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a44:	4313      	orrs	r3, r2
         );
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3724      	adds	r7, #36	@ 0x24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
	...

08007a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a64:	d301      	bcc.n	8007a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007a66:	2301      	movs	r3, #1
 8007a68:	e00f      	b.n	8007a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8007a94 <SysTick_Config+0x40>)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007a72:	210f      	movs	r1, #15
 8007a74:	f04f 30ff 	mov.w	r0, #4294967295
 8007a78:	f7ff ff8e 	bl	8007998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a7c:	4b05      	ldr	r3, [pc, #20]	@ (8007a94 <SysTick_Config+0x40>)
 8007a7e:	2200      	movs	r2, #0
 8007a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a82:	4b04      	ldr	r3, [pc, #16]	@ (8007a94 <SysTick_Config+0x40>)
 8007a84:	2207      	movs	r2, #7
 8007a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	e000e010 	.word	0xe000e010

08007a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7ff ff05 	bl	80078b0 <__NVIC_SetPriorityGrouping>
}
 8007aa6:	bf00      	nop
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b086      	sub	sp, #24
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	60b9      	str	r1, [r7, #8]
 8007ab8:	607a      	str	r2, [r7, #4]
 8007aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007abc:	2300      	movs	r3, #0
 8007abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ac0:	f7ff ff1a 	bl	80078f8 <__NVIC_GetPriorityGrouping>
 8007ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	68b9      	ldr	r1, [r7, #8]
 8007aca:	6978      	ldr	r0, [r7, #20]
 8007acc:	f7ff ff8e 	bl	80079ec <NVIC_EncodePriority>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7ff ff5d 	bl	8007998 <__NVIC_SetPriority>
}
 8007ade:	bf00      	nop
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b082      	sub	sp, #8
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	4603      	mov	r3, r0
 8007aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff ff0d 	bl	8007914 <__NVIC_EnableIRQ>
}
 8007afa:	bf00      	nop
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b082      	sub	sp, #8
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	4603      	mov	r3, r0
 8007b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7ff ff1d 	bl	8007950 <__NVIC_DisableIRQ>
}
 8007b16:	bf00      	nop
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b082      	sub	sp, #8
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7ff ff94 	bl	8007a54 <SysTick_Config>
 8007b2c:	4603      	mov	r3, r0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
	...

08007b38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007b40:	2300      	movs	r3, #0
 8007b42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007b44:	f7ff fe84 	bl	8007850 <HAL_GetTick>
 8007b48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e099      	b.n	8007c88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2202      	movs	r2, #2
 8007b58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f022 0201 	bic.w	r2, r2, #1
 8007b72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b74:	e00f      	b.n	8007b96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b76:	f7ff fe6b 	bl	8007850 <HAL_GetTick>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	2b05      	cmp	r3, #5
 8007b82:	d908      	bls.n	8007b96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2220      	movs	r2, #32
 8007b88:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2203      	movs	r2, #3
 8007b8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e078      	b.n	8007c88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1e8      	bne.n	8007b76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	4b38      	ldr	r3, [pc, #224]	@ (8007c90 <HAL_DMA_Init+0x158>)
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bec:	2b04      	cmp	r3, #4
 8007bee:	d107      	bne.n	8007c00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	f023 0307 	bic.w	r3, r3, #7
 8007c16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	d117      	bne.n	8007c5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00e      	beq.n	8007c5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fb01 	bl	8008244 <DMA_CheckFifoParam>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d008      	beq.n	8007c5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2240      	movs	r2, #64	@ 0x40
 8007c4c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007c56:	2301      	movs	r3, #1
 8007c58:	e016      	b.n	8007c88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fab8 	bl	80081d8 <DMA_CalcBaseAndBitshift>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c70:	223f      	movs	r2, #63	@ 0x3f
 8007c72:	409a      	lsls	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	f010803f 	.word	0xf010803f

08007c94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007caa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d101      	bne.n	8007cba <HAL_DMA_Start_IT+0x26>
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	e040      	b.n	8007d3c <HAL_DMA_Start_IT+0xa8>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d12f      	bne.n	8007d2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	68b9      	ldr	r1, [r7, #8]
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f000 fa4a 	bl	800817c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cec:	223f      	movs	r2, #63	@ 0x3f
 8007cee:	409a      	lsls	r2, r3
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f042 0216 	orr.w	r2, r2, #22
 8007d02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d007      	beq.n	8007d1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f042 0208 	orr.w	r2, r2, #8
 8007d1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0201 	orr.w	r2, r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	e005      	b.n	8007d3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d36:	2302      	movs	r3, #2
 8007d38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3718      	adds	r7, #24
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007d52:	f7ff fd7d 	bl	8007850 <HAL_GetTick>
 8007d56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d008      	beq.n	8007d76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2280      	movs	r2, #128	@ 0x80
 8007d68:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e052      	b.n	8007e1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 0216 	bic.w	r2, r2, #22
 8007d84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	695a      	ldr	r2, [r3, #20]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d103      	bne.n	8007da6 <HAL_DMA_Abort+0x62>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d007      	beq.n	8007db6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 0208 	bic.w	r2, r2, #8
 8007db4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 0201 	bic.w	r2, r2, #1
 8007dc4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007dc6:	e013      	b.n	8007df0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007dc8:	f7ff fd42 	bl	8007850 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	2b05      	cmp	r3, #5
 8007dd4:	d90c      	bls.n	8007df0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2220      	movs	r2, #32
 8007dda:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2203      	movs	r2, #3
 8007de0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e015      	b.n	8007e1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e4      	bne.n	8007dc8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e02:	223f      	movs	r2, #63	@ 0x3f
 8007e04:	409a      	lsls	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d004      	beq.n	8007e42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2280      	movs	r2, #128	@ 0x80
 8007e3c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e00c      	b.n	8007e5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2205      	movs	r2, #5
 8007e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f022 0201 	bic.w	r2, r2, #1
 8007e58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007e74:	4b8e      	ldr	r3, [pc, #568]	@ (80080b0 <HAL_DMA_IRQHandler+0x248>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a8e      	ldr	r2, [pc, #568]	@ (80080b4 <HAL_DMA_IRQHandler+0x24c>)
 8007e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e7e:	0a9b      	lsrs	r3, r3, #10
 8007e80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e92:	2208      	movs	r2, #8
 8007e94:	409a      	lsls	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	4013      	ands	r3, r2
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d01a      	beq.n	8007ed4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0304 	and.w	r3, r3, #4
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d013      	beq.n	8007ed4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f022 0204 	bic.w	r2, r2, #4
 8007eba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ec0:	2208      	movs	r2, #8
 8007ec2:	409a      	lsls	r2, r3
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ecc:	f043 0201 	orr.w	r2, r3, #1
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ed8:	2201      	movs	r2, #1
 8007eda:	409a      	lsls	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4013      	ands	r3, r2
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d012      	beq.n	8007f0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00b      	beq.n	8007f0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	409a      	lsls	r2, r3
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f02:	f043 0202 	orr.w	r2, r3, #2
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f0e:	2204      	movs	r2, #4
 8007f10:	409a      	lsls	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4013      	ands	r3, r2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d012      	beq.n	8007f40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00b      	beq.n	8007f40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f2c:	2204      	movs	r2, #4
 8007f2e:	409a      	lsls	r2, r3
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f38:	f043 0204 	orr.w	r2, r3, #4
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f44:	2210      	movs	r2, #16
 8007f46:	409a      	lsls	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d043      	beq.n	8007fd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0308 	and.w	r3, r3, #8
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d03c      	beq.n	8007fd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f62:	2210      	movs	r2, #16
 8007f64:	409a      	lsls	r2, r3
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d018      	beq.n	8007faa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d108      	bne.n	8007f98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d024      	beq.n	8007fd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	4798      	blx	r3
 8007f96:	e01f      	b.n	8007fd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d01b      	beq.n	8007fd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	4798      	blx	r3
 8007fa8:	e016      	b.n	8007fd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d107      	bne.n	8007fc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f022 0208 	bic.w	r2, r2, #8
 8007fc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fdc:	2220      	movs	r2, #32
 8007fde:	409a      	lsls	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 808f 	beq.w	8008108 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0310 	and.w	r3, r3, #16
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f000 8087 	beq.w	8008108 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ffe:	2220      	movs	r2, #32
 8008000:	409a      	lsls	r2, r3
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b05      	cmp	r3, #5
 8008010:	d136      	bne.n	8008080 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0216 	bic.w	r2, r2, #22
 8008020:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	695a      	ldr	r2, [r3, #20]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008030:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008036:	2b00      	cmp	r3, #0
 8008038:	d103      	bne.n	8008042 <HAL_DMA_IRQHandler+0x1da>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800803e:	2b00      	cmp	r3, #0
 8008040:	d007      	beq.n	8008052 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 0208 	bic.w	r2, r2, #8
 8008050:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008056:	223f      	movs	r2, #63	@ 0x3f
 8008058:	409a      	lsls	r2, r3
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008072:	2b00      	cmp	r3, #0
 8008074:	d07e      	beq.n	8008174 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	4798      	blx	r3
        }
        return;
 800807e:	e079      	b.n	8008174 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d01d      	beq.n	80080ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10d      	bne.n	80080b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d031      	beq.n	8008108 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	4798      	blx	r3
 80080ac:	e02c      	b.n	8008108 <HAL_DMA_IRQHandler+0x2a0>
 80080ae:	bf00      	nop
 80080b0:	20000040 	.word	0x20000040
 80080b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d023      	beq.n	8008108 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	4798      	blx	r3
 80080c8:	e01e      	b.n	8008108 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10f      	bne.n	80080f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f022 0210 	bic.w	r2, r2, #16
 80080e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800810c:	2b00      	cmp	r3, #0
 800810e:	d032      	beq.n	8008176 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b00      	cmp	r3, #0
 800811a:	d022      	beq.n	8008162 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2205      	movs	r2, #5
 8008120:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 0201 	bic.w	r2, r2, #1
 8008132:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	3301      	adds	r3, #1
 8008138:	60bb      	str	r3, [r7, #8]
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	429a      	cmp	r2, r3
 800813e:	d307      	bcc.n	8008150 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1f2      	bne.n	8008134 <HAL_DMA_IRQHandler+0x2cc>
 800814e:	e000      	b.n	8008152 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008150:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008166:	2b00      	cmp	r3, #0
 8008168:	d005      	beq.n	8008176 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	4798      	blx	r3
 8008172:	e000      	b.n	8008176 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008174:	bf00      	nop
    }
  }
}
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
 8008188:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008198:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	2b40      	cmp	r3, #64	@ 0x40
 80081a8:	d108      	bne.n	80081bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80081ba:	e007      	b.n	80081cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	60da      	str	r2, [r3, #12]
}
 80081cc:	bf00      	nop
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	3b10      	subs	r3, #16
 80081e8:	4a14      	ldr	r2, [pc, #80]	@ (800823c <DMA_CalcBaseAndBitshift+0x64>)
 80081ea:	fba2 2303 	umull	r2, r3, r2, r3
 80081ee:	091b      	lsrs	r3, r3, #4
 80081f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80081f2:	4a13      	ldr	r2, [pc, #76]	@ (8008240 <DMA_CalcBaseAndBitshift+0x68>)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4413      	add	r3, r2
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2b03      	cmp	r3, #3
 8008204:	d909      	bls.n	800821a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800820e:	f023 0303 	bic.w	r3, r3, #3
 8008212:	1d1a      	adds	r2, r3, #4
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	659a      	str	r2, [r3, #88]	@ 0x58
 8008218:	e007      	b.n	800822a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008222:	f023 0303 	bic.w	r3, r3, #3
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800822e:	4618      	mov	r0, r3
 8008230:	3714      	adds	r7, #20
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	aaaaaaab 	.word	0xaaaaaaab
 8008240:	080114f0 	.word	0x080114f0

08008244 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008254:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d11f      	bne.n	800829e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	2b03      	cmp	r3, #3
 8008262:	d856      	bhi.n	8008312 <DMA_CheckFifoParam+0xce>
 8008264:	a201      	add	r2, pc, #4	@ (adr r2, 800826c <DMA_CheckFifoParam+0x28>)
 8008266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826a:	bf00      	nop
 800826c:	0800827d 	.word	0x0800827d
 8008270:	0800828f 	.word	0x0800828f
 8008274:	0800827d 	.word	0x0800827d
 8008278:	08008313 	.word	0x08008313
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008280:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d046      	beq.n	8008316 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800828c:	e043      	b.n	8008316 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008292:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008296:	d140      	bne.n	800831a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800829c:	e03d      	b.n	800831a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082a6:	d121      	bne.n	80082ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	d837      	bhi.n	800831e <DMA_CheckFifoParam+0xda>
 80082ae:	a201      	add	r2, pc, #4	@ (adr r2, 80082b4 <DMA_CheckFifoParam+0x70>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	080082c5 	.word	0x080082c5
 80082b8:	080082cb 	.word	0x080082cb
 80082bc:	080082c5 	.word	0x080082c5
 80082c0:	080082dd 	.word	0x080082dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	73fb      	strb	r3, [r7, #15]
      break;
 80082c8:	e030      	b.n	800832c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d025      	beq.n	8008322 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082da:	e022      	b.n	8008322 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80082e4:	d11f      	bne.n	8008326 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80082ea:	e01c      	b.n	8008326 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d903      	bls.n	80082fa <DMA_CheckFifoParam+0xb6>
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	d003      	beq.n	8008300 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80082f8:	e018      	b.n	800832c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	73fb      	strb	r3, [r7, #15]
      break;
 80082fe:	e015      	b.n	800832c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008304:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00e      	beq.n	800832a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
      break;
 8008310:	e00b      	b.n	800832a <DMA_CheckFifoParam+0xe6>
      break;
 8008312:	bf00      	nop
 8008314:	e00a      	b.n	800832c <DMA_CheckFifoParam+0xe8>
      break;
 8008316:	bf00      	nop
 8008318:	e008      	b.n	800832c <DMA_CheckFifoParam+0xe8>
      break;
 800831a:	bf00      	nop
 800831c:	e006      	b.n	800832c <DMA_CheckFifoParam+0xe8>
      break;
 800831e:	bf00      	nop
 8008320:	e004      	b.n	800832c <DMA_CheckFifoParam+0xe8>
      break;
 8008322:	bf00      	nop
 8008324:	e002      	b.n	800832c <DMA_CheckFifoParam+0xe8>
      break;   
 8008326:	bf00      	nop
 8008328:	e000      	b.n	800832c <DMA_CheckFifoParam+0xe8>
      break;
 800832a:	bf00      	nop
    }
  } 
  
  return status; 
 800832c:	7bfb      	ldrb	r3, [r7, #15]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop

0800833c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800833c:	b480      	push	{r7}
 800833e:	b089      	sub	sp, #36	@ 0x24
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008346:	2300      	movs	r3, #0
 8008348:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800834a:	2300      	movs	r3, #0
 800834c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800834e:	2300      	movs	r3, #0
 8008350:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008352:	2300      	movs	r3, #0
 8008354:	61fb      	str	r3, [r7, #28]
 8008356:	e165      	b.n	8008624 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008358:	2201      	movs	r2, #1
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	fa02 f303 	lsl.w	r3, r2, r3
 8008360:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	4013      	ands	r3, r2
 800836a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	429a      	cmp	r2, r3
 8008372:	f040 8154 	bne.w	800861e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	f003 0303 	and.w	r3, r3, #3
 800837e:	2b01      	cmp	r3, #1
 8008380:	d005      	beq.n	800838e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800838a:	2b02      	cmp	r3, #2
 800838c:	d130      	bne.n	80083f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	005b      	lsls	r3, r3, #1
 8008398:	2203      	movs	r2, #3
 800839a:	fa02 f303 	lsl.w	r3, r2, r3
 800839e:	43db      	mvns	r3, r3
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	4013      	ands	r3, r2
 80083a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	68da      	ldr	r2, [r3, #12]
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	005b      	lsls	r3, r3, #1
 80083ae:	fa02 f303 	lsl.w	r3, r2, r3
 80083b2:	69ba      	ldr	r2, [r7, #24]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80083c4:	2201      	movs	r2, #1
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	fa02 f303 	lsl.w	r3, r2, r3
 80083cc:	43db      	mvns	r3, r3
 80083ce:	69ba      	ldr	r2, [r7, #24]
 80083d0:	4013      	ands	r3, r2
 80083d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	091b      	lsrs	r3, r3, #4
 80083da:	f003 0201 	and.w	r2, r3, #1
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	fa02 f303 	lsl.w	r3, r2, r3
 80083e4:	69ba      	ldr	r2, [r7, #24]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	69ba      	ldr	r2, [r7, #24]
 80083ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f003 0303 	and.w	r3, r3, #3
 80083f8:	2b03      	cmp	r3, #3
 80083fa:	d017      	beq.n	800842c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	005b      	lsls	r3, r3, #1
 8008406:	2203      	movs	r2, #3
 8008408:	fa02 f303 	lsl.w	r3, r2, r3
 800840c:	43db      	mvns	r3, r3
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	4013      	ands	r3, r2
 8008412:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	689a      	ldr	r2, [r3, #8]
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	005b      	lsls	r3, r3, #1
 800841c:	fa02 f303 	lsl.w	r3, r2, r3
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	4313      	orrs	r3, r2
 8008424:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	69ba      	ldr	r2, [r7, #24]
 800842a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f003 0303 	and.w	r3, r3, #3
 8008434:	2b02      	cmp	r3, #2
 8008436:	d123      	bne.n	8008480 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	08da      	lsrs	r2, r3, #3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	3208      	adds	r2, #8
 8008440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008444:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	f003 0307 	and.w	r3, r3, #7
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	220f      	movs	r2, #15
 8008450:	fa02 f303 	lsl.w	r3, r2, r3
 8008454:	43db      	mvns	r3, r3
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	4013      	ands	r3, r2
 800845a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	691a      	ldr	r2, [r3, #16]
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	f003 0307 	and.w	r3, r3, #7
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	fa02 f303 	lsl.w	r3, r2, r3
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	4313      	orrs	r3, r2
 8008470:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	08da      	lsrs	r2, r3, #3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	3208      	adds	r2, #8
 800847a:	69b9      	ldr	r1, [r7, #24]
 800847c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	005b      	lsls	r3, r3, #1
 800848a:	2203      	movs	r2, #3
 800848c:	fa02 f303 	lsl.w	r3, r2, r3
 8008490:	43db      	mvns	r3, r3
 8008492:	69ba      	ldr	r2, [r7, #24]
 8008494:	4013      	ands	r3, r2
 8008496:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	f003 0203 	and.w	r2, r3, #3
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	fa02 f303 	lsl.w	r3, r2, r3
 80084a8:	69ba      	ldr	r2, [r7, #24]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 80ae 	beq.w	800861e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084c2:	2300      	movs	r3, #0
 80084c4:	60fb      	str	r3, [r7, #12]
 80084c6:	4b5d      	ldr	r3, [pc, #372]	@ (800863c <HAL_GPIO_Init+0x300>)
 80084c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084ca:	4a5c      	ldr	r2, [pc, #368]	@ (800863c <HAL_GPIO_Init+0x300>)
 80084cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80084d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80084d2:	4b5a      	ldr	r3, [pc, #360]	@ (800863c <HAL_GPIO_Init+0x300>)
 80084d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80084de:	4a58      	ldr	r2, [pc, #352]	@ (8008640 <HAL_GPIO_Init+0x304>)
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	089b      	lsrs	r3, r3, #2
 80084e4:	3302      	adds	r3, #2
 80084e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	220f      	movs	r2, #15
 80084f6:	fa02 f303 	lsl.w	r3, r2, r3
 80084fa:	43db      	mvns	r3, r3
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	4013      	ands	r3, r2
 8008500:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a4f      	ldr	r2, [pc, #316]	@ (8008644 <HAL_GPIO_Init+0x308>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d025      	beq.n	8008556 <HAL_GPIO_Init+0x21a>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a4e      	ldr	r2, [pc, #312]	@ (8008648 <HAL_GPIO_Init+0x30c>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d01f      	beq.n	8008552 <HAL_GPIO_Init+0x216>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a4d      	ldr	r2, [pc, #308]	@ (800864c <HAL_GPIO_Init+0x310>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d019      	beq.n	800854e <HAL_GPIO_Init+0x212>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a4c      	ldr	r2, [pc, #304]	@ (8008650 <HAL_GPIO_Init+0x314>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d013      	beq.n	800854a <HAL_GPIO_Init+0x20e>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a4b      	ldr	r2, [pc, #300]	@ (8008654 <HAL_GPIO_Init+0x318>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d00d      	beq.n	8008546 <HAL_GPIO_Init+0x20a>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a4a      	ldr	r2, [pc, #296]	@ (8008658 <HAL_GPIO_Init+0x31c>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d007      	beq.n	8008542 <HAL_GPIO_Init+0x206>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a49      	ldr	r2, [pc, #292]	@ (800865c <HAL_GPIO_Init+0x320>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d101      	bne.n	800853e <HAL_GPIO_Init+0x202>
 800853a:	2306      	movs	r3, #6
 800853c:	e00c      	b.n	8008558 <HAL_GPIO_Init+0x21c>
 800853e:	2307      	movs	r3, #7
 8008540:	e00a      	b.n	8008558 <HAL_GPIO_Init+0x21c>
 8008542:	2305      	movs	r3, #5
 8008544:	e008      	b.n	8008558 <HAL_GPIO_Init+0x21c>
 8008546:	2304      	movs	r3, #4
 8008548:	e006      	b.n	8008558 <HAL_GPIO_Init+0x21c>
 800854a:	2303      	movs	r3, #3
 800854c:	e004      	b.n	8008558 <HAL_GPIO_Init+0x21c>
 800854e:	2302      	movs	r3, #2
 8008550:	e002      	b.n	8008558 <HAL_GPIO_Init+0x21c>
 8008552:	2301      	movs	r3, #1
 8008554:	e000      	b.n	8008558 <HAL_GPIO_Init+0x21c>
 8008556:	2300      	movs	r3, #0
 8008558:	69fa      	ldr	r2, [r7, #28]
 800855a:	f002 0203 	and.w	r2, r2, #3
 800855e:	0092      	lsls	r2, r2, #2
 8008560:	4093      	lsls	r3, r2
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	4313      	orrs	r3, r2
 8008566:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008568:	4935      	ldr	r1, [pc, #212]	@ (8008640 <HAL_GPIO_Init+0x304>)
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	089b      	lsrs	r3, r3, #2
 800856e:	3302      	adds	r3, #2
 8008570:	69ba      	ldr	r2, [r7, #24]
 8008572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008576:	4b3a      	ldr	r3, [pc, #232]	@ (8008660 <HAL_GPIO_Init+0x324>)
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	43db      	mvns	r3, r3
 8008580:	69ba      	ldr	r2, [r7, #24]
 8008582:	4013      	ands	r3, r2
 8008584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d003      	beq.n	800859a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008592:	69ba      	ldr	r2, [r7, #24]
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	4313      	orrs	r3, r2
 8008598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800859a:	4a31      	ldr	r2, [pc, #196]	@ (8008660 <HAL_GPIO_Init+0x324>)
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80085a0:	4b2f      	ldr	r3, [pc, #188]	@ (8008660 <HAL_GPIO_Init+0x324>)
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	43db      	mvns	r3, r3
 80085aa:	69ba      	ldr	r2, [r7, #24]
 80085ac:	4013      	ands	r3, r2
 80085ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d003      	beq.n	80085c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80085bc:	69ba      	ldr	r2, [r7, #24]
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80085c4:	4a26      	ldr	r2, [pc, #152]	@ (8008660 <HAL_GPIO_Init+0x324>)
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80085ca:	4b25      	ldr	r3, [pc, #148]	@ (8008660 <HAL_GPIO_Init+0x324>)
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	43db      	mvns	r3, r3
 80085d4:	69ba      	ldr	r2, [r7, #24]
 80085d6:	4013      	ands	r3, r2
 80085d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d003      	beq.n	80085ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80085ee:	4a1c      	ldr	r2, [pc, #112]	@ (8008660 <HAL_GPIO_Init+0x324>)
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80085f4:	4b1a      	ldr	r3, [pc, #104]	@ (8008660 <HAL_GPIO_Init+0x324>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	43db      	mvns	r3, r3
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	4013      	ands	r3, r2
 8008602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d003      	beq.n	8008618 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	4313      	orrs	r3, r2
 8008616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008618:	4a11      	ldr	r2, [pc, #68]	@ (8008660 <HAL_GPIO_Init+0x324>)
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	3301      	adds	r3, #1
 8008622:	61fb      	str	r3, [r7, #28]
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	2b0f      	cmp	r3, #15
 8008628:	f67f ae96 	bls.w	8008358 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800862c:	bf00      	nop
 800862e:	bf00      	nop
 8008630:	3724      	adds	r7, #36	@ 0x24
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	40023800 	.word	0x40023800
 8008640:	40013800 	.word	0x40013800
 8008644:	40020000 	.word	0x40020000
 8008648:	40020400 	.word	0x40020400
 800864c:	40020800 	.word	0x40020800
 8008650:	40020c00 	.word	0x40020c00
 8008654:	40021000 	.word	0x40021000
 8008658:	40021400 	.word	0x40021400
 800865c:	40021800 	.word	0x40021800
 8008660:	40013c00 	.word	0x40013c00

08008664 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800866e:	2300      	movs	r3, #0
 8008670:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8008672:	2300      	movs	r3, #0
 8008674:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8008676:	2300      	movs	r3, #0
 8008678:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800867a:	2300      	movs	r3, #0
 800867c:	617b      	str	r3, [r7, #20]
 800867e:	e0c7      	b.n	8008810 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008680:	2201      	movs	r2, #1
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	fa02 f303 	lsl.w	r3, r2, r3
 8008688:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	4013      	ands	r3, r2
 8008690:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	429a      	cmp	r2, r3
 8008698:	f040 80b7 	bne.w	800880a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800869c:	4a62      	ldr	r2, [pc, #392]	@ (8008828 <HAL_GPIO_DeInit+0x1c4>)
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	089b      	lsrs	r3, r3, #2
 80086a2:	3302      	adds	r3, #2
 80086a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086a8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f003 0303 	and.w	r3, r3, #3
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	220f      	movs	r2, #15
 80086b4:	fa02 f303 	lsl.w	r3, r2, r3
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	4013      	ands	r3, r2
 80086bc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a5a      	ldr	r2, [pc, #360]	@ (800882c <HAL_GPIO_DeInit+0x1c8>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d025      	beq.n	8008712 <HAL_GPIO_DeInit+0xae>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a59      	ldr	r2, [pc, #356]	@ (8008830 <HAL_GPIO_DeInit+0x1cc>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d01f      	beq.n	800870e <HAL_GPIO_DeInit+0xaa>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a58      	ldr	r2, [pc, #352]	@ (8008834 <HAL_GPIO_DeInit+0x1d0>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d019      	beq.n	800870a <HAL_GPIO_DeInit+0xa6>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a57      	ldr	r2, [pc, #348]	@ (8008838 <HAL_GPIO_DeInit+0x1d4>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d013      	beq.n	8008706 <HAL_GPIO_DeInit+0xa2>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a56      	ldr	r2, [pc, #344]	@ (800883c <HAL_GPIO_DeInit+0x1d8>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d00d      	beq.n	8008702 <HAL_GPIO_DeInit+0x9e>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a55      	ldr	r2, [pc, #340]	@ (8008840 <HAL_GPIO_DeInit+0x1dc>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d007      	beq.n	80086fe <HAL_GPIO_DeInit+0x9a>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a54      	ldr	r2, [pc, #336]	@ (8008844 <HAL_GPIO_DeInit+0x1e0>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d101      	bne.n	80086fa <HAL_GPIO_DeInit+0x96>
 80086f6:	2306      	movs	r3, #6
 80086f8:	e00c      	b.n	8008714 <HAL_GPIO_DeInit+0xb0>
 80086fa:	2307      	movs	r3, #7
 80086fc:	e00a      	b.n	8008714 <HAL_GPIO_DeInit+0xb0>
 80086fe:	2305      	movs	r3, #5
 8008700:	e008      	b.n	8008714 <HAL_GPIO_DeInit+0xb0>
 8008702:	2304      	movs	r3, #4
 8008704:	e006      	b.n	8008714 <HAL_GPIO_DeInit+0xb0>
 8008706:	2303      	movs	r3, #3
 8008708:	e004      	b.n	8008714 <HAL_GPIO_DeInit+0xb0>
 800870a:	2302      	movs	r3, #2
 800870c:	e002      	b.n	8008714 <HAL_GPIO_DeInit+0xb0>
 800870e:	2301      	movs	r3, #1
 8008710:	e000      	b.n	8008714 <HAL_GPIO_DeInit+0xb0>
 8008712:	2300      	movs	r3, #0
 8008714:	697a      	ldr	r2, [r7, #20]
 8008716:	f002 0203 	and.w	r2, r2, #3
 800871a:	0092      	lsls	r2, r2, #2
 800871c:	4093      	lsls	r3, r2
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	429a      	cmp	r2, r3
 8008722:	d132      	bne.n	800878a <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008724:	4b48      	ldr	r3, [pc, #288]	@ (8008848 <HAL_GPIO_DeInit+0x1e4>)
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	43db      	mvns	r3, r3
 800872c:	4946      	ldr	r1, [pc, #280]	@ (8008848 <HAL_GPIO_DeInit+0x1e4>)
 800872e:	4013      	ands	r3, r2
 8008730:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008732:	4b45      	ldr	r3, [pc, #276]	@ (8008848 <HAL_GPIO_DeInit+0x1e4>)
 8008734:	685a      	ldr	r2, [r3, #4]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	43db      	mvns	r3, r3
 800873a:	4943      	ldr	r1, [pc, #268]	@ (8008848 <HAL_GPIO_DeInit+0x1e4>)
 800873c:	4013      	ands	r3, r2
 800873e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008740:	4b41      	ldr	r3, [pc, #260]	@ (8008848 <HAL_GPIO_DeInit+0x1e4>)
 8008742:	68da      	ldr	r2, [r3, #12]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	43db      	mvns	r3, r3
 8008748:	493f      	ldr	r1, [pc, #252]	@ (8008848 <HAL_GPIO_DeInit+0x1e4>)
 800874a:	4013      	ands	r3, r2
 800874c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800874e:	4b3e      	ldr	r3, [pc, #248]	@ (8008848 <HAL_GPIO_DeInit+0x1e4>)
 8008750:	689a      	ldr	r2, [r3, #8]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	43db      	mvns	r3, r3
 8008756:	493c      	ldr	r1, [pc, #240]	@ (8008848 <HAL_GPIO_DeInit+0x1e4>)
 8008758:	4013      	ands	r3, r2
 800875a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f003 0303 	and.w	r3, r3, #3
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	220f      	movs	r2, #15
 8008766:	fa02 f303 	lsl.w	r3, r2, r3
 800876a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800876c:	4a2e      	ldr	r2, [pc, #184]	@ (8008828 <HAL_GPIO_DeInit+0x1c4>)
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	089b      	lsrs	r3, r3, #2
 8008772:	3302      	adds	r3, #2
 8008774:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	43da      	mvns	r2, r3
 800877c:	482a      	ldr	r0, [pc, #168]	@ (8008828 <HAL_GPIO_DeInit+0x1c4>)
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	089b      	lsrs	r3, r3, #2
 8008782:	400a      	ands	r2, r1
 8008784:	3302      	adds	r3, #2
 8008786:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	005b      	lsls	r3, r3, #1
 8008792:	2103      	movs	r1, #3
 8008794:	fa01 f303 	lsl.w	r3, r1, r3
 8008798:	43db      	mvns	r3, r3
 800879a:	401a      	ands	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	08da      	lsrs	r2, r3, #3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3208      	adds	r2, #8
 80087a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f003 0307 	and.w	r3, r3, #7
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	220f      	movs	r2, #15
 80087b6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ba:	43db      	mvns	r3, r3
 80087bc:	697a      	ldr	r2, [r7, #20]
 80087be:	08d2      	lsrs	r2, r2, #3
 80087c0:	4019      	ands	r1, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	3208      	adds	r2, #8
 80087c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68da      	ldr	r2, [r3, #12]
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	005b      	lsls	r3, r3, #1
 80087d2:	2103      	movs	r1, #3
 80087d4:	fa01 f303 	lsl.w	r3, r1, r3
 80087d8:	43db      	mvns	r3, r3
 80087da:	401a      	ands	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685a      	ldr	r2, [r3, #4]
 80087e4:	2101      	movs	r1, #1
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	fa01 f303 	lsl.w	r3, r1, r3
 80087ec:	43db      	mvns	r3, r3
 80087ee:	401a      	ands	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	689a      	ldr	r2, [r3, #8]
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	005b      	lsls	r3, r3, #1
 80087fc:	2103      	movs	r1, #3
 80087fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008802:	43db      	mvns	r3, r3
 8008804:	401a      	ands	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	3301      	adds	r3, #1
 800880e:	617b      	str	r3, [r7, #20]
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	2b0f      	cmp	r3, #15
 8008814:	f67f af34 	bls.w	8008680 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008818:	bf00      	nop
 800881a:	bf00      	nop
 800881c:	371c      	adds	r7, #28
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	40013800 	.word	0x40013800
 800882c:	40020000 	.word	0x40020000
 8008830:	40020400 	.word	0x40020400
 8008834:	40020800 	.word	0x40020800
 8008838:	40020c00 	.word	0x40020c00
 800883c:	40021000 	.word	0x40021000
 8008840:	40021400 	.word	0x40021400
 8008844:	40021800 	.word	0x40021800
 8008848:	40013c00 	.word	0x40013c00

0800884c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	460b      	mov	r3, r1
 8008856:	807b      	strh	r3, [r7, #2]
 8008858:	4613      	mov	r3, r2
 800885a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800885c:	787b      	ldrb	r3, [r7, #1]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d003      	beq.n	800886a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008862:	887a      	ldrh	r2, [r7, #2]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008868:	e003      	b.n	8008872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800886a:	887b      	ldrh	r3, [r7, #2]
 800886c:	041a      	lsls	r2, r3, #16
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	619a      	str	r2, [r3, #24]
}
 8008872:	bf00      	nop
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
	...

08008880 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	4603      	mov	r3, r0
 8008888:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800888a:	4b08      	ldr	r3, [pc, #32]	@ (80088ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800888c:	695a      	ldr	r2, [r3, #20]
 800888e:	88fb      	ldrh	r3, [r7, #6]
 8008890:	4013      	ands	r3, r2
 8008892:	2b00      	cmp	r3, #0
 8008894:	d006      	beq.n	80088a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008896:	4a05      	ldr	r2, [pc, #20]	@ (80088ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008898:	88fb      	ldrh	r3, [r7, #6]
 800889a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800889c:	88fb      	ldrh	r3, [r7, #6]
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fc f952 	bl	8004b48 <HAL_GPIO_EXTI_Callback>
  }
}
 80088a4:	bf00      	nop
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	40013c00 	.word	0x40013c00

080088b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e12b      	b.n	8008b1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d106      	bne.n	80088dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7fe f948 	bl	8006b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2224      	movs	r2, #36	@ 0x24
 80088e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f022 0201 	bic.w	r2, r2, #1
 80088f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008902:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008912:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008914:	f001 f912 	bl	8009b3c <HAL_RCC_GetPCLK1Freq>
 8008918:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	4a81      	ldr	r2, [pc, #516]	@ (8008b24 <HAL_I2C_Init+0x274>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d807      	bhi.n	8008934 <HAL_I2C_Init+0x84>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	4a80      	ldr	r2, [pc, #512]	@ (8008b28 <HAL_I2C_Init+0x278>)
 8008928:	4293      	cmp	r3, r2
 800892a:	bf94      	ite	ls
 800892c:	2301      	movls	r3, #1
 800892e:	2300      	movhi	r3, #0
 8008930:	b2db      	uxtb	r3, r3
 8008932:	e006      	b.n	8008942 <HAL_I2C_Init+0x92>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	4a7d      	ldr	r2, [pc, #500]	@ (8008b2c <HAL_I2C_Init+0x27c>)
 8008938:	4293      	cmp	r3, r2
 800893a:	bf94      	ite	ls
 800893c:	2301      	movls	r3, #1
 800893e:	2300      	movhi	r3, #0
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e0e7      	b.n	8008b1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	4a78      	ldr	r2, [pc, #480]	@ (8008b30 <HAL_I2C_Init+0x280>)
 800894e:	fba2 2303 	umull	r2, r3, r2, r3
 8008952:	0c9b      	lsrs	r3, r3, #18
 8008954:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	430a      	orrs	r2, r1
 8008968:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	6a1b      	ldr	r3, [r3, #32]
 8008970:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	4a6a      	ldr	r2, [pc, #424]	@ (8008b24 <HAL_I2C_Init+0x274>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d802      	bhi.n	8008984 <HAL_I2C_Init+0xd4>
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	3301      	adds	r3, #1
 8008982:	e009      	b.n	8008998 <HAL_I2C_Init+0xe8>
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800898a:	fb02 f303 	mul.w	r3, r2, r3
 800898e:	4a69      	ldr	r2, [pc, #420]	@ (8008b34 <HAL_I2C_Init+0x284>)
 8008990:	fba2 2303 	umull	r2, r3, r2, r3
 8008994:	099b      	lsrs	r3, r3, #6
 8008996:	3301      	adds	r3, #1
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	6812      	ldr	r2, [r2, #0]
 800899c:	430b      	orrs	r3, r1
 800899e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80089aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	495c      	ldr	r1, [pc, #368]	@ (8008b24 <HAL_I2C_Init+0x274>)
 80089b4:	428b      	cmp	r3, r1
 80089b6:	d819      	bhi.n	80089ec <HAL_I2C_Init+0x13c>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	1e59      	subs	r1, r3, #1
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80089c6:	1c59      	adds	r1, r3, #1
 80089c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80089cc:	400b      	ands	r3, r1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00a      	beq.n	80089e8 <HAL_I2C_Init+0x138>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	1e59      	subs	r1, r3, #1
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80089e0:	3301      	adds	r3, #1
 80089e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089e6:	e051      	b.n	8008a8c <HAL_I2C_Init+0x1dc>
 80089e8:	2304      	movs	r3, #4
 80089ea:	e04f      	b.n	8008a8c <HAL_I2C_Init+0x1dc>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d111      	bne.n	8008a18 <HAL_I2C_Init+0x168>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	1e58      	subs	r0, r3, #1
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6859      	ldr	r1, [r3, #4]
 80089fc:	460b      	mov	r3, r1
 80089fe:	005b      	lsls	r3, r3, #1
 8008a00:	440b      	add	r3, r1
 8008a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a06:	3301      	adds	r3, #1
 8008a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	bf0c      	ite	eq
 8008a10:	2301      	moveq	r3, #1
 8008a12:	2300      	movne	r3, #0
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	e012      	b.n	8008a3e <HAL_I2C_Init+0x18e>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	1e58      	subs	r0, r3, #1
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6859      	ldr	r1, [r3, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	440b      	add	r3, r1
 8008a26:	0099      	lsls	r1, r3, #2
 8008a28:	440b      	add	r3, r1
 8008a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a2e:	3301      	adds	r3, #1
 8008a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	bf0c      	ite	eq
 8008a38:	2301      	moveq	r3, #1
 8008a3a:	2300      	movne	r3, #0
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <HAL_I2C_Init+0x196>
 8008a42:	2301      	movs	r3, #1
 8008a44:	e022      	b.n	8008a8c <HAL_I2C_Init+0x1dc>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10e      	bne.n	8008a6c <HAL_I2C_Init+0x1bc>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	1e58      	subs	r0, r3, #1
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6859      	ldr	r1, [r3, #4]
 8008a56:	460b      	mov	r3, r1
 8008a58:	005b      	lsls	r3, r3, #1
 8008a5a:	440b      	add	r3, r1
 8008a5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a60:	3301      	adds	r3, #1
 8008a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a6a:	e00f      	b.n	8008a8c <HAL_I2C_Init+0x1dc>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	1e58      	subs	r0, r3, #1
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6859      	ldr	r1, [r3, #4]
 8008a74:	460b      	mov	r3, r1
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	440b      	add	r3, r1
 8008a7a:	0099      	lsls	r1, r3, #2
 8008a7c:	440b      	add	r3, r1
 8008a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a82:	3301      	adds	r3, #1
 8008a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a8c:	6879      	ldr	r1, [r7, #4]
 8008a8e:	6809      	ldr	r1, [r1, #0]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	69da      	ldr	r2, [r3, #28]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	430a      	orrs	r2, r1
 8008aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008aba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	6911      	ldr	r1, [r2, #16]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	68d2      	ldr	r2, [r2, #12]
 8008ac6:	4311      	orrs	r1, r2
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	6812      	ldr	r2, [r2, #0]
 8008acc:	430b      	orrs	r3, r1
 8008ace:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	695a      	ldr	r2, [r3, #20]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f042 0201 	orr.w	r2, r2, #1
 8008afa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2220      	movs	r2, #32
 8008b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	000186a0 	.word	0x000186a0
 8008b28:	001e847f 	.word	0x001e847f
 8008b2c:	003d08ff 	.word	0x003d08ff
 8008b30:	431bde83 	.word	0x431bde83
 8008b34:	10624dd3 	.word	0x10624dd3

08008b38 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e021      	b.n	8008b8e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2224      	movs	r2, #36	@ 0x24
 8008b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f022 0201 	bic.w	r2, r2, #1
 8008b60:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f7fe f8a2 	bl	8006cac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
	...

08008b98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b088      	sub	sp, #32
 8008b9c:	af02      	add	r7, sp, #8
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	4608      	mov	r0, r1
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	817b      	strh	r3, [r7, #10]
 8008baa:	460b      	mov	r3, r1
 8008bac:	813b      	strh	r3, [r7, #8]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008bb2:	f7fe fe4d 	bl	8007850 <HAL_GetTick>
 8008bb6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	2b20      	cmp	r3, #32
 8008bc2:	f040 80d9 	bne.w	8008d78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	2319      	movs	r3, #25
 8008bcc:	2201      	movs	r2, #1
 8008bce:	496d      	ldr	r1, [pc, #436]	@ (8008d84 <HAL_I2C_Mem_Write+0x1ec>)
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f000 fc8b 	bl	80094ec <I2C_WaitOnFlagUntilTimeout>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008bdc:	2302      	movs	r3, #2
 8008bde:	e0cc      	b.n	8008d7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d101      	bne.n	8008bee <HAL_I2C_Mem_Write+0x56>
 8008bea:	2302      	movs	r3, #2
 8008bec:	e0c5      	b.n	8008d7a <HAL_I2C_Mem_Write+0x1e2>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 0301 	and.w	r3, r3, #1
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d007      	beq.n	8008c14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f042 0201 	orr.w	r2, r2, #1
 8008c12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2221      	movs	r2, #33	@ 0x21
 8008c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2240      	movs	r2, #64	@ 0x40
 8008c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6a3a      	ldr	r2, [r7, #32]
 8008c3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	4a4d      	ldr	r2, [pc, #308]	@ (8008d88 <HAL_I2C_Mem_Write+0x1f0>)
 8008c54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008c56:	88f8      	ldrh	r0, [r7, #6]
 8008c58:	893a      	ldrh	r2, [r7, #8]
 8008c5a:	8979      	ldrh	r1, [r7, #10]
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	9301      	str	r3, [sp, #4]
 8008c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	4603      	mov	r3, r0
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f000 fac2 	bl	80091f0 <I2C_RequestMemoryWrite>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d052      	beq.n	8008d18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e081      	b.n	8008d7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f000 fd50 	bl	8009720 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00d      	beq.n	8008ca2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c8a:	2b04      	cmp	r3, #4
 8008c8c:	d107      	bne.n	8008c9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e06b      	b.n	8008d7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ca6:	781a      	ldrb	r2, [r3, #0]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb2:	1c5a      	adds	r2, r3, #1
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	695b      	ldr	r3, [r3, #20]
 8008cd8:	f003 0304 	and.w	r3, r3, #4
 8008cdc:	2b04      	cmp	r3, #4
 8008cde:	d11b      	bne.n	8008d18 <HAL_I2C_Mem_Write+0x180>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d017      	beq.n	8008d18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cec:	781a      	ldrb	r2, [r3, #0]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf8:	1c5a      	adds	r2, r3, #1
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d02:	3b01      	subs	r3, #1
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	3b01      	subs	r3, #1
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1aa      	bne.n	8008c76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d20:	697a      	ldr	r2, [r7, #20]
 8008d22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f000 fd43 	bl	80097b0 <I2C_WaitOnBTFFlagUntilTimeout>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00d      	beq.n	8008d4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d34:	2b04      	cmp	r3, #4
 8008d36:	d107      	bne.n	8008d48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e016      	b.n	8008d7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2220      	movs	r2, #32
 8008d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	e000      	b.n	8008d7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008d78:	2302      	movs	r3, #2
  }
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3718      	adds	r7, #24
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	00100002 	.word	0x00100002
 8008d88:	ffff0000 	.word	0xffff0000

08008d8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b08c      	sub	sp, #48	@ 0x30
 8008d90:	af02      	add	r7, sp, #8
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	4608      	mov	r0, r1
 8008d96:	4611      	mov	r1, r2
 8008d98:	461a      	mov	r2, r3
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	817b      	strh	r3, [r7, #10]
 8008d9e:	460b      	mov	r3, r1
 8008da0:	813b      	strh	r3, [r7, #8]
 8008da2:	4613      	mov	r3, r2
 8008da4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008da6:	f7fe fd53 	bl	8007850 <HAL_GetTick>
 8008daa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	2b20      	cmp	r3, #32
 8008db6:	f040 8214 	bne.w	80091e2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	2319      	movs	r3, #25
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	497b      	ldr	r1, [pc, #492]	@ (8008fb0 <HAL_I2C_Mem_Read+0x224>)
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f000 fb91 	bl	80094ec <I2C_WaitOnFlagUntilTimeout>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	e207      	b.n	80091e4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d101      	bne.n	8008de2 <HAL_I2C_Mem_Read+0x56>
 8008dde:	2302      	movs	r3, #2
 8008de0:	e200      	b.n	80091e4 <HAL_I2C_Mem_Read+0x458>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d007      	beq.n	8008e08 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f042 0201 	orr.w	r2, r2, #1
 8008e06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2222      	movs	r2, #34	@ 0x22
 8008e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2240      	movs	r2, #64	@ 0x40
 8008e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008e38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	4a5b      	ldr	r2, [pc, #364]	@ (8008fb4 <HAL_I2C_Mem_Read+0x228>)
 8008e48:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008e4a:	88f8      	ldrh	r0, [r7, #6]
 8008e4c:	893a      	ldrh	r2, [r7, #8]
 8008e4e:	8979      	ldrh	r1, [r7, #10]
 8008e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e52:	9301      	str	r3, [sp, #4]
 8008e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e56:	9300      	str	r3, [sp, #0]
 8008e58:	4603      	mov	r3, r0
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f000 fa5e 	bl	800931c <I2C_RequestMemoryRead>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e1bc      	b.n	80091e4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d113      	bne.n	8008e9a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e72:	2300      	movs	r3, #0
 8008e74:	623b      	str	r3, [r7, #32]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	623b      	str	r3, [r7, #32]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	623b      	str	r3, [r7, #32]
 8008e86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e96:	601a      	str	r2, [r3, #0]
 8008e98:	e190      	b.n	80091bc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d11b      	bne.n	8008eda <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008eb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	61fb      	str	r3, [r7, #28]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	695b      	ldr	r3, [r3, #20]
 8008ebc:	61fb      	str	r3, [r7, #28]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	61fb      	str	r3, [r7, #28]
 8008ec6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	e170      	b.n	80091bc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d11b      	bne.n	8008f1a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ef0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f02:	2300      	movs	r3, #0
 8008f04:	61bb      	str	r3, [r7, #24]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	695b      	ldr	r3, [r3, #20]
 8008f0c:	61bb      	str	r3, [r7, #24]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	61bb      	str	r3, [r7, #24]
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	e150      	b.n	80091bc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	617b      	str	r3, [r7, #20]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	695b      	ldr	r3, [r3, #20]
 8008f24:	617b      	str	r3, [r7, #20]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	617b      	str	r3, [r7, #20]
 8008f2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008f30:	e144      	b.n	80091bc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	f200 80f1 	bhi.w	800911e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d123      	bne.n	8008f8c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f46:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 fc79 	bl	8009840 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d001      	beq.n	8008f58 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	e145      	b.n	80091e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	691a      	ldr	r2, [r3, #16]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f62:	b2d2      	uxtb	r2, r2
 8008f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6a:	1c5a      	adds	r2, r3, #1
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f74:	3b01      	subs	r3, #1
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	3b01      	subs	r3, #1
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008f8a:	e117      	b.n	80091bc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d14e      	bne.n	8009032 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	4906      	ldr	r1, [pc, #24]	@ (8008fb8 <HAL_I2C_Mem_Read+0x22c>)
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 faa4 	bl	80094ec <I2C_WaitOnFlagUntilTimeout>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d008      	beq.n	8008fbc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e11a      	b.n	80091e4 <HAL_I2C_Mem_Read+0x458>
 8008fae:	bf00      	nop
 8008fb0:	00100002 	.word	0x00100002
 8008fb4:	ffff0000 	.word	0xffff0000
 8008fb8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008fca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	691a      	ldr	r2, [r3, #16]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd6:	b2d2      	uxtb	r2, r2
 8008fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	691a      	ldr	r2, [r3, #16]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009008:	b2d2      	uxtb	r2, r2
 800900a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009010:	1c5a      	adds	r2, r3, #1
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800901a:	3b01      	subs	r3, #1
 800901c:	b29a      	uxth	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009026:	b29b      	uxth	r3, r3
 8009028:	3b01      	subs	r3, #1
 800902a:	b29a      	uxth	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009030:	e0c4      	b.n	80091bc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009038:	2200      	movs	r2, #0
 800903a:	496c      	ldr	r1, [pc, #432]	@ (80091ec <HAL_I2C_Mem_Read+0x460>)
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 fa55 	bl	80094ec <I2C_WaitOnFlagUntilTimeout>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e0cb      	b.n	80091e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800905a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	691a      	ldr	r2, [r3, #16]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009066:	b2d2      	uxtb	r2, r2
 8009068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009078:	3b01      	subs	r3, #1
 800907a:	b29a      	uxth	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009084:	b29b      	uxth	r3, r3
 8009086:	3b01      	subs	r3, #1
 8009088:	b29a      	uxth	r2, r3
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800908e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009094:	2200      	movs	r2, #0
 8009096:	4955      	ldr	r1, [pc, #340]	@ (80091ec <HAL_I2C_Mem_Read+0x460>)
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f000 fa27 	bl	80094ec <I2C_WaitOnFlagUntilTimeout>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e09d      	b.n	80091e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	691a      	ldr	r2, [r3, #16]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c2:	b2d2      	uxtb	r2, r2
 80090c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ca:	1c5a      	adds	r2, r3, #1
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090d4:	3b01      	subs	r3, #1
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	3b01      	subs	r3, #1
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	691a      	ldr	r2, [r3, #16]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f4:	b2d2      	uxtb	r2, r2
 80090f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009106:	3b01      	subs	r3, #1
 8009108:	b29a      	uxth	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009112:	b29b      	uxth	r3, r3
 8009114:	3b01      	subs	r3, #1
 8009116:	b29a      	uxth	r2, r3
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800911c:	e04e      	b.n	80091bc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800911e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009120:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f000 fb8c 	bl	8009840 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	e058      	b.n	80091e4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	691a      	ldr	r2, [r3, #16]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800913c:	b2d2      	uxtb	r2, r2
 800913e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009144:	1c5a      	adds	r2, r3, #1
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800914e:	3b01      	subs	r3, #1
 8009150:	b29a      	uxth	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800915a:	b29b      	uxth	r3, r3
 800915c:	3b01      	subs	r3, #1
 800915e:	b29a      	uxth	r2, r3
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	695b      	ldr	r3, [r3, #20]
 800916a:	f003 0304 	and.w	r3, r3, #4
 800916e:	2b04      	cmp	r3, #4
 8009170:	d124      	bne.n	80091bc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009176:	2b03      	cmp	r3, #3
 8009178:	d107      	bne.n	800918a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009188:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	691a      	ldr	r2, [r3, #16]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009194:	b2d2      	uxtb	r2, r2
 8009196:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800919c:	1c5a      	adds	r2, r3, #1
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091a6:	3b01      	subs	r3, #1
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	3b01      	subs	r3, #1
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f47f aeb6 	bne.w	8008f32 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2220      	movs	r2, #32
 80091ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	e000      	b.n	80091e4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80091e2:	2302      	movs	r3, #2
  }
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3728      	adds	r7, #40	@ 0x28
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	00010004 	.word	0x00010004

080091f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b088      	sub	sp, #32
 80091f4:	af02      	add	r7, sp, #8
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	4608      	mov	r0, r1
 80091fa:	4611      	mov	r1, r2
 80091fc:	461a      	mov	r2, r3
 80091fe:	4603      	mov	r3, r0
 8009200:	817b      	strh	r3, [r7, #10]
 8009202:	460b      	mov	r3, r1
 8009204:	813b      	strh	r3, [r7, #8]
 8009206:	4613      	mov	r3, r2
 8009208:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009218:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800921a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	2200      	movs	r2, #0
 8009222:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f000 f960 	bl	80094ec <I2C_WaitOnFlagUntilTimeout>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00d      	beq.n	800924e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800923c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009240:	d103      	bne.n	800924a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009248:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e05f      	b.n	800930e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800924e:	897b      	ldrh	r3, [r7, #10]
 8009250:	b2db      	uxtb	r3, r3
 8009252:	461a      	mov	r2, r3
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800925c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800925e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009260:	6a3a      	ldr	r2, [r7, #32]
 8009262:	492d      	ldr	r1, [pc, #180]	@ (8009318 <I2C_RequestMemoryWrite+0x128>)
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f000 f9bb 	bl	80095e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d001      	beq.n	8009274 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	e04c      	b.n	800930e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009274:	2300      	movs	r3, #0
 8009276:	617b      	str	r3, [r7, #20]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	617b      	str	r3, [r7, #20]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	617b      	str	r3, [r7, #20]
 8009288:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800928a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800928c:	6a39      	ldr	r1, [r7, #32]
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f000 fa46 	bl	8009720 <I2C_WaitOnTXEFlagUntilTimeout>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00d      	beq.n	80092b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800929e:	2b04      	cmp	r3, #4
 80092a0:	d107      	bne.n	80092b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e02b      	b.n	800930e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80092b6:	88fb      	ldrh	r3, [r7, #6]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d105      	bne.n	80092c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80092bc:	893b      	ldrh	r3, [r7, #8]
 80092be:	b2da      	uxtb	r2, r3
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	611a      	str	r2, [r3, #16]
 80092c6:	e021      	b.n	800930c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80092c8:	893b      	ldrh	r3, [r7, #8]
 80092ca:	0a1b      	lsrs	r3, r3, #8
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80092d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092d8:	6a39      	ldr	r1, [r7, #32]
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f000 fa20 	bl	8009720 <I2C_WaitOnTXEFlagUntilTimeout>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00d      	beq.n	8009302 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ea:	2b04      	cmp	r3, #4
 80092ec:	d107      	bne.n	80092fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e005      	b.n	800930e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009302:	893b      	ldrh	r3, [r7, #8]
 8009304:	b2da      	uxtb	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	00010002 	.word	0x00010002

0800931c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b088      	sub	sp, #32
 8009320:	af02      	add	r7, sp, #8
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	4608      	mov	r0, r1
 8009326:	4611      	mov	r1, r2
 8009328:	461a      	mov	r2, r3
 800932a:	4603      	mov	r3, r0
 800932c:	817b      	strh	r3, [r7, #10]
 800932e:	460b      	mov	r3, r1
 8009330:	813b      	strh	r3, [r7, #8]
 8009332:	4613      	mov	r3, r2
 8009334:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009344:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009354:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	6a3b      	ldr	r3, [r7, #32]
 800935c:	2200      	movs	r2, #0
 800935e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f000 f8c2 	bl	80094ec <I2C_WaitOnFlagUntilTimeout>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00d      	beq.n	800938a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009378:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800937c:	d103      	bne.n	8009386 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009384:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009386:	2303      	movs	r3, #3
 8009388:	e0aa      	b.n	80094e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800938a:	897b      	ldrh	r3, [r7, #10]
 800938c:	b2db      	uxtb	r3, r3
 800938e:	461a      	mov	r2, r3
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009398:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800939a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939c:	6a3a      	ldr	r2, [r7, #32]
 800939e:	4952      	ldr	r1, [pc, #328]	@ (80094e8 <I2C_RequestMemoryRead+0x1cc>)
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 f91d 	bl	80095e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d001      	beq.n	80093b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e097      	b.n	80094e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093b0:	2300      	movs	r3, #0
 80093b2:	617b      	str	r3, [r7, #20]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	617b      	str	r3, [r7, #20]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	617b      	str	r3, [r7, #20]
 80093c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093c8:	6a39      	ldr	r1, [r7, #32]
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f000 f9a8 	bl	8009720 <I2C_WaitOnTXEFlagUntilTimeout>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00d      	beq.n	80093f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093da:	2b04      	cmp	r3, #4
 80093dc:	d107      	bne.n	80093ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e076      	b.n	80094e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80093f2:	88fb      	ldrh	r3, [r7, #6]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d105      	bne.n	8009404 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80093f8:	893b      	ldrh	r3, [r7, #8]
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	611a      	str	r2, [r3, #16]
 8009402:	e021      	b.n	8009448 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009404:	893b      	ldrh	r3, [r7, #8]
 8009406:	0a1b      	lsrs	r3, r3, #8
 8009408:	b29b      	uxth	r3, r3
 800940a:	b2da      	uxtb	r2, r3
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009414:	6a39      	ldr	r1, [r7, #32]
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f000 f982 	bl	8009720 <I2C_WaitOnTXEFlagUntilTimeout>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00d      	beq.n	800943e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009426:	2b04      	cmp	r3, #4
 8009428:	d107      	bne.n	800943a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009438:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	e050      	b.n	80094e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800943e:	893b      	ldrh	r3, [r7, #8]
 8009440:	b2da      	uxtb	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800944a:	6a39      	ldr	r1, [r7, #32]
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f000 f967 	bl	8009720 <I2C_WaitOnTXEFlagUntilTimeout>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00d      	beq.n	8009474 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800945c:	2b04      	cmp	r3, #4
 800945e:	d107      	bne.n	8009470 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800946e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	e035      	b.n	80094e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009482:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	6a3b      	ldr	r3, [r7, #32]
 800948a:	2200      	movs	r2, #0
 800948c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f000 f82b 	bl	80094ec <I2C_WaitOnFlagUntilTimeout>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00d      	beq.n	80094b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094aa:	d103      	bne.n	80094b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80094b4:	2303      	movs	r3, #3
 80094b6:	e013      	b.n	80094e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80094b8:	897b      	ldrh	r3, [r7, #10]
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	f043 0301 	orr.w	r3, r3, #1
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80094c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ca:	6a3a      	ldr	r2, [r7, #32]
 80094cc:	4906      	ldr	r1, [pc, #24]	@ (80094e8 <I2C_RequestMemoryRead+0x1cc>)
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f000 f886 	bl	80095e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d001      	beq.n	80094de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e000      	b.n	80094e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3718      	adds	r7, #24
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	00010002 	.word	0x00010002

080094ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	603b      	str	r3, [r7, #0]
 80094f8:	4613      	mov	r3, r2
 80094fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094fc:	e048      	b.n	8009590 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009504:	d044      	beq.n	8009590 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009506:	f7fe f9a3 	bl	8007850 <HAL_GetTick>
 800950a:	4602      	mov	r2, r0
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	429a      	cmp	r2, r3
 8009514:	d302      	bcc.n	800951c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d139      	bne.n	8009590 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	0c1b      	lsrs	r3, r3, #16
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b01      	cmp	r3, #1
 8009524:	d10d      	bne.n	8009542 <I2C_WaitOnFlagUntilTimeout+0x56>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	695b      	ldr	r3, [r3, #20]
 800952c:	43da      	mvns	r2, r3
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	4013      	ands	r3, r2
 8009532:	b29b      	uxth	r3, r3
 8009534:	2b00      	cmp	r3, #0
 8009536:	bf0c      	ite	eq
 8009538:	2301      	moveq	r3, #1
 800953a:	2300      	movne	r3, #0
 800953c:	b2db      	uxtb	r3, r3
 800953e:	461a      	mov	r2, r3
 8009540:	e00c      	b.n	800955c <I2C_WaitOnFlagUntilTimeout+0x70>
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	43da      	mvns	r2, r3
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	4013      	ands	r3, r2
 800954e:	b29b      	uxth	r3, r3
 8009550:	2b00      	cmp	r3, #0
 8009552:	bf0c      	ite	eq
 8009554:	2301      	moveq	r3, #1
 8009556:	2300      	movne	r3, #0
 8009558:	b2db      	uxtb	r3, r3
 800955a:	461a      	mov	r2, r3
 800955c:	79fb      	ldrb	r3, [r7, #7]
 800955e:	429a      	cmp	r2, r3
 8009560:	d116      	bne.n	8009590 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2220      	movs	r2, #32
 800956c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800957c:	f043 0220 	orr.w	r2, r3, #32
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e023      	b.n	80095d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	0c1b      	lsrs	r3, r3, #16
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b01      	cmp	r3, #1
 8009598:	d10d      	bne.n	80095b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	695b      	ldr	r3, [r3, #20]
 80095a0:	43da      	mvns	r2, r3
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	4013      	ands	r3, r2
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	bf0c      	ite	eq
 80095ac:	2301      	moveq	r3, #1
 80095ae:	2300      	movne	r3, #0
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	461a      	mov	r2, r3
 80095b4:	e00c      	b.n	80095d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	43da      	mvns	r2, r3
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	4013      	ands	r3, r2
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	bf0c      	ite	eq
 80095c8:	2301      	moveq	r3, #1
 80095ca:	2300      	movne	r3, #0
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	461a      	mov	r2, r3
 80095d0:	79fb      	ldrb	r3, [r7, #7]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d093      	beq.n	80094fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
 80095ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80095ee:	e071      	b.n	80096d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	695b      	ldr	r3, [r3, #20]
 80095f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095fe:	d123      	bne.n	8009648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800960e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009618:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2220      	movs	r2, #32
 8009624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009634:	f043 0204 	orr.w	r2, r3, #4
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	e067      	b.n	8009718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964e:	d041      	beq.n	80096d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009650:	f7fe f8fe 	bl	8007850 <HAL_GetTick>
 8009654:	4602      	mov	r2, r0
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	429a      	cmp	r2, r3
 800965e:	d302      	bcc.n	8009666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d136      	bne.n	80096d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	0c1b      	lsrs	r3, r3, #16
 800966a:	b2db      	uxtb	r3, r3
 800966c:	2b01      	cmp	r3, #1
 800966e:	d10c      	bne.n	800968a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	43da      	mvns	r2, r3
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	4013      	ands	r3, r2
 800967c:	b29b      	uxth	r3, r3
 800967e:	2b00      	cmp	r3, #0
 8009680:	bf14      	ite	ne
 8009682:	2301      	movne	r3, #1
 8009684:	2300      	moveq	r3, #0
 8009686:	b2db      	uxtb	r3, r3
 8009688:	e00b      	b.n	80096a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	43da      	mvns	r2, r3
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	4013      	ands	r3, r2
 8009696:	b29b      	uxth	r3, r3
 8009698:	2b00      	cmp	r3, #0
 800969a:	bf14      	ite	ne
 800969c:	2301      	movne	r3, #1
 800969e:	2300      	moveq	r3, #0
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d016      	beq.n	80096d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2220      	movs	r2, #32
 80096b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c0:	f043 0220 	orr.w	r2, r3, #32
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e021      	b.n	8009718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	0c1b      	lsrs	r3, r3, #16
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d10c      	bne.n	80096f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	695b      	ldr	r3, [r3, #20]
 80096e4:	43da      	mvns	r2, r3
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	4013      	ands	r3, r2
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	bf14      	ite	ne
 80096f0:	2301      	movne	r3, #1
 80096f2:	2300      	moveq	r3, #0
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	e00b      	b.n	8009710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	699b      	ldr	r3, [r3, #24]
 80096fe:	43da      	mvns	r2, r3
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	4013      	ands	r3, r2
 8009704:	b29b      	uxth	r3, r3
 8009706:	2b00      	cmp	r3, #0
 8009708:	bf14      	ite	ne
 800970a:	2301      	movne	r3, #1
 800970c:	2300      	moveq	r3, #0
 800970e:	b2db      	uxtb	r3, r3
 8009710:	2b00      	cmp	r3, #0
 8009712:	f47f af6d 	bne.w	80095f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800972c:	e034      	b.n	8009798 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f000 f8e3 	bl	80098fa <I2C_IsAcknowledgeFailed>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e034      	b.n	80097a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009744:	d028      	beq.n	8009798 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009746:	f7fe f883 	bl	8007850 <HAL_GetTick>
 800974a:	4602      	mov	r2, r0
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	429a      	cmp	r2, r3
 8009754:	d302      	bcc.n	800975c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d11d      	bne.n	8009798 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009766:	2b80      	cmp	r3, #128	@ 0x80
 8009768:	d016      	beq.n	8009798 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2200      	movs	r2, #0
 800976e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2220      	movs	r2, #32
 8009774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2200      	movs	r2, #0
 800977c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009784:	f043 0220 	orr.w	r2, r3, #32
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e007      	b.n	80097a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	695b      	ldr	r3, [r3, #20]
 800979e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097a2:	2b80      	cmp	r3, #128	@ 0x80
 80097a4:	d1c3      	bne.n	800972e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80097bc:	e034      	b.n	8009828 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f000 f89b 	bl	80098fa <I2C_IsAcknowledgeFailed>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e034      	b.n	8009838 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d4:	d028      	beq.n	8009828 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097d6:	f7fe f83b 	bl	8007850 <HAL_GetTick>
 80097da:	4602      	mov	r2, r0
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d302      	bcc.n	80097ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d11d      	bne.n	8009828 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	695b      	ldr	r3, [r3, #20]
 80097f2:	f003 0304 	and.w	r3, r3, #4
 80097f6:	2b04      	cmp	r3, #4
 80097f8:	d016      	beq.n	8009828 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2220      	movs	r2, #32
 8009804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009814:	f043 0220 	orr.w	r2, r3, #32
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2200      	movs	r2, #0
 8009820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	e007      	b.n	8009838 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	695b      	ldr	r3, [r3, #20]
 800982e:	f003 0304 	and.w	r3, r3, #4
 8009832:	2b04      	cmp	r3, #4
 8009834:	d1c3      	bne.n	80097be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800984c:	e049      	b.n	80098e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	695b      	ldr	r3, [r3, #20]
 8009854:	f003 0310 	and.w	r3, r3, #16
 8009858:	2b10      	cmp	r3, #16
 800985a:	d119      	bne.n	8009890 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f06f 0210 	mvn.w	r2, #16
 8009864:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2200      	movs	r2, #0
 800986a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2220      	movs	r2, #32
 8009870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	e030      	b.n	80098f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009890:	f7fd ffde 	bl	8007850 <HAL_GetTick>
 8009894:	4602      	mov	r2, r0
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	429a      	cmp	r2, r3
 800989e:	d302      	bcc.n	80098a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d11d      	bne.n	80098e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098b0:	2b40      	cmp	r3, #64	@ 0x40
 80098b2:	d016      	beq.n	80098e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2220      	movs	r2, #32
 80098be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ce:	f043 0220 	orr.w	r2, r3, #32
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e007      	b.n	80098f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	695b      	ldr	r3, [r3, #20]
 80098e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ec:	2b40      	cmp	r3, #64	@ 0x40
 80098ee:	d1ae      	bne.n	800984e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b083      	sub	sp, #12
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	695b      	ldr	r3, [r3, #20]
 8009908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800990c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009910:	d11b      	bne.n	800994a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800991a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2220      	movs	r2, #32
 8009926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009936:	f043 0204 	orr.w	r2, r3, #4
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	e000      	b.n	800994c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d101      	bne.n	800996c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	e0cc      	b.n	8009b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800996c:	4b68      	ldr	r3, [pc, #416]	@ (8009b10 <HAL_RCC_ClockConfig+0x1b8>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 030f 	and.w	r3, r3, #15
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	429a      	cmp	r2, r3
 8009978:	d90c      	bls.n	8009994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800997a:	4b65      	ldr	r3, [pc, #404]	@ (8009b10 <HAL_RCC_ClockConfig+0x1b8>)
 800997c:	683a      	ldr	r2, [r7, #0]
 800997e:	b2d2      	uxtb	r2, r2
 8009980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009982:	4b63      	ldr	r3, [pc, #396]	@ (8009b10 <HAL_RCC_ClockConfig+0x1b8>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 030f 	and.w	r3, r3, #15
 800998a:	683a      	ldr	r2, [r7, #0]
 800998c:	429a      	cmp	r2, r3
 800998e:	d001      	beq.n	8009994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	e0b8      	b.n	8009b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 0302 	and.w	r3, r3, #2
 800999c:	2b00      	cmp	r3, #0
 800999e:	d020      	beq.n	80099e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f003 0304 	and.w	r3, r3, #4
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d005      	beq.n	80099b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80099ac:	4b59      	ldr	r3, [pc, #356]	@ (8009b14 <HAL_RCC_ClockConfig+0x1bc>)
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	4a58      	ldr	r2, [pc, #352]	@ (8009b14 <HAL_RCC_ClockConfig+0x1bc>)
 80099b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80099b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f003 0308 	and.w	r3, r3, #8
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d005      	beq.n	80099d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80099c4:	4b53      	ldr	r3, [pc, #332]	@ (8009b14 <HAL_RCC_ClockConfig+0x1bc>)
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	4a52      	ldr	r2, [pc, #328]	@ (8009b14 <HAL_RCC_ClockConfig+0x1bc>)
 80099ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80099ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099d0:	4b50      	ldr	r3, [pc, #320]	@ (8009b14 <HAL_RCC_ClockConfig+0x1bc>)
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	494d      	ldr	r1, [pc, #308]	@ (8009b14 <HAL_RCC_ClockConfig+0x1bc>)
 80099de:	4313      	orrs	r3, r2
 80099e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 0301 	and.w	r3, r3, #1
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d044      	beq.n	8009a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d107      	bne.n	8009a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099f6:	4b47      	ldr	r3, [pc, #284]	@ (8009b14 <HAL_RCC_ClockConfig+0x1bc>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d119      	bne.n	8009a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	e07f      	b.n	8009b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d003      	beq.n	8009a16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d107      	bne.n	8009a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a16:	4b3f      	ldr	r3, [pc, #252]	@ (8009b14 <HAL_RCC_ClockConfig+0x1bc>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d109      	bne.n	8009a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e06f      	b.n	8009b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a26:	4b3b      	ldr	r3, [pc, #236]	@ (8009b14 <HAL_RCC_ClockConfig+0x1bc>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f003 0302 	and.w	r3, r3, #2
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d101      	bne.n	8009a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e067      	b.n	8009b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a36:	4b37      	ldr	r3, [pc, #220]	@ (8009b14 <HAL_RCC_ClockConfig+0x1bc>)
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	f023 0203 	bic.w	r2, r3, #3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	4934      	ldr	r1, [pc, #208]	@ (8009b14 <HAL_RCC_ClockConfig+0x1bc>)
 8009a44:	4313      	orrs	r3, r2
 8009a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009a48:	f7fd ff02 	bl	8007850 <HAL_GetTick>
 8009a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a4e:	e00a      	b.n	8009a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a50:	f7fd fefe 	bl	8007850 <HAL_GetTick>
 8009a54:	4602      	mov	r2, r0
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d901      	bls.n	8009a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009a62:	2303      	movs	r3, #3
 8009a64:	e04f      	b.n	8009b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a66:	4b2b      	ldr	r3, [pc, #172]	@ (8009b14 <HAL_RCC_ClockConfig+0x1bc>)
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	f003 020c 	and.w	r2, r3, #12
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d1eb      	bne.n	8009a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009a78:	4b25      	ldr	r3, [pc, #148]	@ (8009b10 <HAL_RCC_ClockConfig+0x1b8>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 030f 	and.w	r3, r3, #15
 8009a80:	683a      	ldr	r2, [r7, #0]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d20c      	bcs.n	8009aa0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a86:	4b22      	ldr	r3, [pc, #136]	@ (8009b10 <HAL_RCC_ClockConfig+0x1b8>)
 8009a88:	683a      	ldr	r2, [r7, #0]
 8009a8a:	b2d2      	uxtb	r2, r2
 8009a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a8e:	4b20      	ldr	r3, [pc, #128]	@ (8009b10 <HAL_RCC_ClockConfig+0x1b8>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f003 030f 	and.w	r3, r3, #15
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d001      	beq.n	8009aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e032      	b.n	8009b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 0304 	and.w	r3, r3, #4
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d008      	beq.n	8009abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009aac:	4b19      	ldr	r3, [pc, #100]	@ (8009b14 <HAL_RCC_ClockConfig+0x1bc>)
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	4916      	ldr	r1, [pc, #88]	@ (8009b14 <HAL_RCC_ClockConfig+0x1bc>)
 8009aba:	4313      	orrs	r3, r2
 8009abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f003 0308 	and.w	r3, r3, #8
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d009      	beq.n	8009ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009aca:	4b12      	ldr	r3, [pc, #72]	@ (8009b14 <HAL_RCC_ClockConfig+0x1bc>)
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	00db      	lsls	r3, r3, #3
 8009ad8:	490e      	ldr	r1, [pc, #56]	@ (8009b14 <HAL_RCC_ClockConfig+0x1bc>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009ade:	f000 f855 	bl	8009b8c <HAL_RCC_GetSysClockFreq>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8009b14 <HAL_RCC_ClockConfig+0x1bc>)
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	091b      	lsrs	r3, r3, #4
 8009aea:	f003 030f 	and.w	r3, r3, #15
 8009aee:	490a      	ldr	r1, [pc, #40]	@ (8009b18 <HAL_RCC_ClockConfig+0x1c0>)
 8009af0:	5ccb      	ldrb	r3, [r1, r3]
 8009af2:	fa22 f303 	lsr.w	r3, r2, r3
 8009af6:	4a09      	ldr	r2, [pc, #36]	@ (8009b1c <HAL_RCC_ClockConfig+0x1c4>)
 8009af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009afa:	4b09      	ldr	r3, [pc, #36]	@ (8009b20 <HAL_RCC_ClockConfig+0x1c8>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fd fe62 	bl	80077c8 <HAL_InitTick>

  return HAL_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	40023c00 	.word	0x40023c00
 8009b14:	40023800 	.word	0x40023800
 8009b18:	080114d8 	.word	0x080114d8
 8009b1c:	20000040 	.word	0x20000040
 8009b20:	20000044 	.word	0x20000044

08009b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b24:	b480      	push	{r7}
 8009b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009b28:	4b03      	ldr	r3, [pc, #12]	@ (8009b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	20000040 	.word	0x20000040

08009b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009b40:	f7ff fff0 	bl	8009b24 <HAL_RCC_GetHCLKFreq>
 8009b44:	4602      	mov	r2, r0
 8009b46:	4b05      	ldr	r3, [pc, #20]	@ (8009b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	0a9b      	lsrs	r3, r3, #10
 8009b4c:	f003 0307 	and.w	r3, r3, #7
 8009b50:	4903      	ldr	r1, [pc, #12]	@ (8009b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b52:	5ccb      	ldrb	r3, [r1, r3]
 8009b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	40023800 	.word	0x40023800
 8009b60:	080114e8 	.word	0x080114e8

08009b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009b68:	f7ff ffdc 	bl	8009b24 <HAL_RCC_GetHCLKFreq>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	4b05      	ldr	r3, [pc, #20]	@ (8009b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	0b5b      	lsrs	r3, r3, #13
 8009b74:	f003 0307 	and.w	r3, r3, #7
 8009b78:	4903      	ldr	r1, [pc, #12]	@ (8009b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b7a:	5ccb      	ldrb	r3, [r1, r3]
 8009b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	40023800 	.word	0x40023800
 8009b88:	080114e8 	.word	0x080114e8

08009b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b90:	b0ae      	sub	sp, #184	@ 0xb8
 8009b92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009b94:	2300      	movs	r3, #0
 8009b96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8009bac:	2300      	movs	r3, #0
 8009bae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009bb2:	4bcb      	ldr	r3, [pc, #812]	@ (8009ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	f003 030c 	and.w	r3, r3, #12
 8009bba:	2b0c      	cmp	r3, #12
 8009bbc:	f200 8206 	bhi.w	8009fcc <HAL_RCC_GetSysClockFreq+0x440>
 8009bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8009bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc6:	bf00      	nop
 8009bc8:	08009bfd 	.word	0x08009bfd
 8009bcc:	08009fcd 	.word	0x08009fcd
 8009bd0:	08009fcd 	.word	0x08009fcd
 8009bd4:	08009fcd 	.word	0x08009fcd
 8009bd8:	08009c05 	.word	0x08009c05
 8009bdc:	08009fcd 	.word	0x08009fcd
 8009be0:	08009fcd 	.word	0x08009fcd
 8009be4:	08009fcd 	.word	0x08009fcd
 8009be8:	08009c0d 	.word	0x08009c0d
 8009bec:	08009fcd 	.word	0x08009fcd
 8009bf0:	08009fcd 	.word	0x08009fcd
 8009bf4:	08009fcd 	.word	0x08009fcd
 8009bf8:	08009dfd 	.word	0x08009dfd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009bfc:	4bb9      	ldr	r3, [pc, #740]	@ (8009ee4 <HAL_RCC_GetSysClockFreq+0x358>)
 8009bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009c02:	e1e7      	b.n	8009fd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009c04:	4bb8      	ldr	r3, [pc, #736]	@ (8009ee8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8009c06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009c0a:	e1e3      	b.n	8009fd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009c0c:	4bb4      	ldr	r3, [pc, #720]	@ (8009ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009c18:	4bb1      	ldr	r3, [pc, #708]	@ (8009ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d071      	beq.n	8009d08 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c24:	4bae      	ldr	r3, [pc, #696]	@ (8009ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	099b      	lsrs	r3, r3, #6
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c30:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8009c34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c40:	2300      	movs	r3, #0
 8009c42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009c4a:	4622      	mov	r2, r4
 8009c4c:	462b      	mov	r3, r5
 8009c4e:	f04f 0000 	mov.w	r0, #0
 8009c52:	f04f 0100 	mov.w	r1, #0
 8009c56:	0159      	lsls	r1, r3, #5
 8009c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009c5c:	0150      	lsls	r0, r2, #5
 8009c5e:	4602      	mov	r2, r0
 8009c60:	460b      	mov	r3, r1
 8009c62:	4621      	mov	r1, r4
 8009c64:	1a51      	subs	r1, r2, r1
 8009c66:	6439      	str	r1, [r7, #64]	@ 0x40
 8009c68:	4629      	mov	r1, r5
 8009c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8009c6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c70:	f04f 0200 	mov.w	r2, #0
 8009c74:	f04f 0300 	mov.w	r3, #0
 8009c78:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	018b      	lsls	r3, r1, #6
 8009c80:	4641      	mov	r1, r8
 8009c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009c86:	4641      	mov	r1, r8
 8009c88:	018a      	lsls	r2, r1, #6
 8009c8a:	4641      	mov	r1, r8
 8009c8c:	1a51      	subs	r1, r2, r1
 8009c8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009c90:	4649      	mov	r1, r9
 8009c92:	eb63 0301 	sbc.w	r3, r3, r1
 8009c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c98:	f04f 0200 	mov.w	r2, #0
 8009c9c:	f04f 0300 	mov.w	r3, #0
 8009ca0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8009ca4:	4649      	mov	r1, r9
 8009ca6:	00cb      	lsls	r3, r1, #3
 8009ca8:	4641      	mov	r1, r8
 8009caa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009cae:	4641      	mov	r1, r8
 8009cb0:	00ca      	lsls	r2, r1, #3
 8009cb2:	4610      	mov	r0, r2
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	4622      	mov	r2, r4
 8009cba:	189b      	adds	r3, r3, r2
 8009cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cbe:	462b      	mov	r3, r5
 8009cc0:	460a      	mov	r2, r1
 8009cc2:	eb42 0303 	adc.w	r3, r2, r3
 8009cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cc8:	f04f 0200 	mov.w	r2, #0
 8009ccc:	f04f 0300 	mov.w	r3, #0
 8009cd0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009cd4:	4629      	mov	r1, r5
 8009cd6:	024b      	lsls	r3, r1, #9
 8009cd8:	4621      	mov	r1, r4
 8009cda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009cde:	4621      	mov	r1, r4
 8009ce0:	024a      	lsls	r2, r1, #9
 8009ce2:	4610      	mov	r0, r2
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cea:	2200      	movs	r2, #0
 8009cec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009cf0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009cf4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009cf8:	f7f7 f924 	bl	8000f44 <__aeabi_uldivmod>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	4613      	mov	r3, r2
 8009d02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d06:	e067      	b.n	8009dd8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d08:	4b75      	ldr	r3, [pc, #468]	@ (8009ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	099b      	lsrs	r3, r3, #6
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d14:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8009d18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009d22:	2300      	movs	r3, #0
 8009d24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009d26:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8009d2a:	4622      	mov	r2, r4
 8009d2c:	462b      	mov	r3, r5
 8009d2e:	f04f 0000 	mov.w	r0, #0
 8009d32:	f04f 0100 	mov.w	r1, #0
 8009d36:	0159      	lsls	r1, r3, #5
 8009d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009d3c:	0150      	lsls	r0, r2, #5
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	4621      	mov	r1, r4
 8009d44:	1a51      	subs	r1, r2, r1
 8009d46:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009d48:	4629      	mov	r1, r5
 8009d4a:	eb63 0301 	sbc.w	r3, r3, r1
 8009d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d50:	f04f 0200 	mov.w	r2, #0
 8009d54:	f04f 0300 	mov.w	r3, #0
 8009d58:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8009d5c:	4649      	mov	r1, r9
 8009d5e:	018b      	lsls	r3, r1, #6
 8009d60:	4641      	mov	r1, r8
 8009d62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009d66:	4641      	mov	r1, r8
 8009d68:	018a      	lsls	r2, r1, #6
 8009d6a:	4641      	mov	r1, r8
 8009d6c:	ebb2 0a01 	subs.w	sl, r2, r1
 8009d70:	4649      	mov	r1, r9
 8009d72:	eb63 0b01 	sbc.w	fp, r3, r1
 8009d76:	f04f 0200 	mov.w	r2, #0
 8009d7a:	f04f 0300 	mov.w	r3, #0
 8009d7e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009d82:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009d86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d8a:	4692      	mov	sl, r2
 8009d8c:	469b      	mov	fp, r3
 8009d8e:	4623      	mov	r3, r4
 8009d90:	eb1a 0303 	adds.w	r3, sl, r3
 8009d94:	623b      	str	r3, [r7, #32]
 8009d96:	462b      	mov	r3, r5
 8009d98:	eb4b 0303 	adc.w	r3, fp, r3
 8009d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d9e:	f04f 0200 	mov.w	r2, #0
 8009da2:	f04f 0300 	mov.w	r3, #0
 8009da6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009daa:	4629      	mov	r1, r5
 8009dac:	028b      	lsls	r3, r1, #10
 8009dae:	4621      	mov	r1, r4
 8009db0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009db4:	4621      	mov	r1, r4
 8009db6:	028a      	lsls	r2, r1, #10
 8009db8:	4610      	mov	r0, r2
 8009dba:	4619      	mov	r1, r3
 8009dbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	673b      	str	r3, [r7, #112]	@ 0x70
 8009dc4:	677a      	str	r2, [r7, #116]	@ 0x74
 8009dc6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8009dca:	f7f7 f8bb 	bl	8000f44 <__aeabi_uldivmod>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009dd8:	4b41      	ldr	r3, [pc, #260]	@ (8009ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	0c1b      	lsrs	r3, r3, #16
 8009dde:	f003 0303 	and.w	r3, r3, #3
 8009de2:	3301      	adds	r3, #1
 8009de4:	005b      	lsls	r3, r3, #1
 8009de6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8009dea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009dee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009df6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009dfa:	e0eb      	b.n	8009fd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009dfc:	4b38      	ldr	r3, [pc, #224]	@ (8009ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009e08:	4b35      	ldr	r3, [pc, #212]	@ (8009ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d06b      	beq.n	8009eec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e14:	4b32      	ldr	r3, [pc, #200]	@ (8009ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	099b      	lsrs	r3, r3, #6
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e26:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e28:	2300      	movs	r3, #0
 8009e2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e2c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8009e30:	4622      	mov	r2, r4
 8009e32:	462b      	mov	r3, r5
 8009e34:	f04f 0000 	mov.w	r0, #0
 8009e38:	f04f 0100 	mov.w	r1, #0
 8009e3c:	0159      	lsls	r1, r3, #5
 8009e3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e42:	0150      	lsls	r0, r2, #5
 8009e44:	4602      	mov	r2, r0
 8009e46:	460b      	mov	r3, r1
 8009e48:	4621      	mov	r1, r4
 8009e4a:	1a51      	subs	r1, r2, r1
 8009e4c:	61b9      	str	r1, [r7, #24]
 8009e4e:	4629      	mov	r1, r5
 8009e50:	eb63 0301 	sbc.w	r3, r3, r1
 8009e54:	61fb      	str	r3, [r7, #28]
 8009e56:	f04f 0200 	mov.w	r2, #0
 8009e5a:	f04f 0300 	mov.w	r3, #0
 8009e5e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8009e62:	4659      	mov	r1, fp
 8009e64:	018b      	lsls	r3, r1, #6
 8009e66:	4651      	mov	r1, sl
 8009e68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009e6c:	4651      	mov	r1, sl
 8009e6e:	018a      	lsls	r2, r1, #6
 8009e70:	4651      	mov	r1, sl
 8009e72:	ebb2 0801 	subs.w	r8, r2, r1
 8009e76:	4659      	mov	r1, fp
 8009e78:	eb63 0901 	sbc.w	r9, r3, r1
 8009e7c:	f04f 0200 	mov.w	r2, #0
 8009e80:	f04f 0300 	mov.w	r3, #0
 8009e84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e90:	4690      	mov	r8, r2
 8009e92:	4699      	mov	r9, r3
 8009e94:	4623      	mov	r3, r4
 8009e96:	eb18 0303 	adds.w	r3, r8, r3
 8009e9a:	613b      	str	r3, [r7, #16]
 8009e9c:	462b      	mov	r3, r5
 8009e9e:	eb49 0303 	adc.w	r3, r9, r3
 8009ea2:	617b      	str	r3, [r7, #20]
 8009ea4:	f04f 0200 	mov.w	r2, #0
 8009ea8:	f04f 0300 	mov.w	r3, #0
 8009eac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009eb0:	4629      	mov	r1, r5
 8009eb2:	024b      	lsls	r3, r1, #9
 8009eb4:	4621      	mov	r1, r4
 8009eb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009eba:	4621      	mov	r1, r4
 8009ebc:	024a      	lsls	r2, r1, #9
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009eca:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8009ecc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009ed0:	f7f7 f838 	bl	8000f44 <__aeabi_uldivmod>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	4613      	mov	r3, r2
 8009eda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ede:	e065      	b.n	8009fac <HAL_RCC_GetSysClockFreq+0x420>
 8009ee0:	40023800 	.word	0x40023800
 8009ee4:	00f42400 	.word	0x00f42400
 8009ee8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009eec:	4b3d      	ldr	r3, [pc, #244]	@ (8009fe4 <HAL_RCC_GetSysClockFreq+0x458>)
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	099b      	lsrs	r3, r3, #6
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009efc:	653b      	str	r3, [r7, #80]	@ 0x50
 8009efe:	2300      	movs	r3, #0
 8009f00:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f02:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8009f06:	4642      	mov	r2, r8
 8009f08:	464b      	mov	r3, r9
 8009f0a:	f04f 0000 	mov.w	r0, #0
 8009f0e:	f04f 0100 	mov.w	r1, #0
 8009f12:	0159      	lsls	r1, r3, #5
 8009f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f18:	0150      	lsls	r0, r2, #5
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	4641      	mov	r1, r8
 8009f20:	1a51      	subs	r1, r2, r1
 8009f22:	60b9      	str	r1, [r7, #8]
 8009f24:	4649      	mov	r1, r9
 8009f26:	eb63 0301 	sbc.w	r3, r3, r1
 8009f2a:	60fb      	str	r3, [r7, #12]
 8009f2c:	f04f 0200 	mov.w	r2, #0
 8009f30:	f04f 0300 	mov.w	r3, #0
 8009f34:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009f38:	4659      	mov	r1, fp
 8009f3a:	018b      	lsls	r3, r1, #6
 8009f3c:	4651      	mov	r1, sl
 8009f3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009f42:	4651      	mov	r1, sl
 8009f44:	018a      	lsls	r2, r1, #6
 8009f46:	4651      	mov	r1, sl
 8009f48:	1a54      	subs	r4, r2, r1
 8009f4a:	4659      	mov	r1, fp
 8009f4c:	eb63 0501 	sbc.w	r5, r3, r1
 8009f50:	f04f 0200 	mov.w	r2, #0
 8009f54:	f04f 0300 	mov.w	r3, #0
 8009f58:	00eb      	lsls	r3, r5, #3
 8009f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f5e:	00e2      	lsls	r2, r4, #3
 8009f60:	4614      	mov	r4, r2
 8009f62:	461d      	mov	r5, r3
 8009f64:	4643      	mov	r3, r8
 8009f66:	18e3      	adds	r3, r4, r3
 8009f68:	603b      	str	r3, [r7, #0]
 8009f6a:	464b      	mov	r3, r9
 8009f6c:	eb45 0303 	adc.w	r3, r5, r3
 8009f70:	607b      	str	r3, [r7, #4]
 8009f72:	f04f 0200 	mov.w	r2, #0
 8009f76:	f04f 0300 	mov.w	r3, #0
 8009f7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009f7e:	4629      	mov	r1, r5
 8009f80:	028b      	lsls	r3, r1, #10
 8009f82:	4621      	mov	r1, r4
 8009f84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009f88:	4621      	mov	r1, r4
 8009f8a:	028a      	lsls	r2, r1, #10
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	4619      	mov	r1, r3
 8009f90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f94:	2200      	movs	r2, #0
 8009f96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f98:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009f9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009f9e:	f7f6 ffd1 	bl	8000f44 <__aeabi_uldivmod>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009fac:	4b0d      	ldr	r3, [pc, #52]	@ (8009fe4 <HAL_RCC_GetSysClockFreq+0x458>)
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	0f1b      	lsrs	r3, r3, #28
 8009fb2:	f003 0307 	and.w	r3, r3, #7
 8009fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8009fba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009fbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009fca:	e003      	b.n	8009fd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009fcc:	4b06      	ldr	r3, [pc, #24]	@ (8009fe8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8009fce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009fd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009fd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	37b8      	adds	r7, #184	@ 0xb8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fe2:	bf00      	nop
 8009fe4:	40023800 	.word	0x40023800
 8009fe8:	00f42400 	.word	0x00f42400

08009fec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e28d      	b.n	800a51a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	2b00      	cmp	r3, #0
 800a008:	f000 8083 	beq.w	800a112 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a00c:	4b94      	ldr	r3, [pc, #592]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	f003 030c 	and.w	r3, r3, #12
 800a014:	2b04      	cmp	r3, #4
 800a016:	d019      	beq.n	800a04c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a018:	4b91      	ldr	r3, [pc, #580]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f003 030c 	and.w	r3, r3, #12
        || \
 800a020:	2b08      	cmp	r3, #8
 800a022:	d106      	bne.n	800a032 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a024:	4b8e      	ldr	r3, [pc, #568]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a02c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a030:	d00c      	beq.n	800a04c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a032:	4b8b      	ldr	r3, [pc, #556]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a03a:	2b0c      	cmp	r3, #12
 800a03c:	d112      	bne.n	800a064 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a03e:	4b88      	ldr	r3, [pc, #544]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a046:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a04a:	d10b      	bne.n	800a064 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a04c:	4b84      	ldr	r3, [pc, #528]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d05b      	beq.n	800a110 <HAL_RCC_OscConfig+0x124>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d157      	bne.n	800a110 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	e25a      	b.n	800a51a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a06c:	d106      	bne.n	800a07c <HAL_RCC_OscConfig+0x90>
 800a06e:	4b7c      	ldr	r3, [pc, #496]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a7b      	ldr	r2, [pc, #492]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a078:	6013      	str	r3, [r2, #0]
 800a07a:	e01d      	b.n	800a0b8 <HAL_RCC_OscConfig+0xcc>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a084:	d10c      	bne.n	800a0a0 <HAL_RCC_OscConfig+0xb4>
 800a086:	4b76      	ldr	r3, [pc, #472]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a75      	ldr	r2, [pc, #468]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a08c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a090:	6013      	str	r3, [r2, #0]
 800a092:	4b73      	ldr	r3, [pc, #460]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a72      	ldr	r2, [pc, #456]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a09c:	6013      	str	r3, [r2, #0]
 800a09e:	e00b      	b.n	800a0b8 <HAL_RCC_OscConfig+0xcc>
 800a0a0:	4b6f      	ldr	r3, [pc, #444]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a6e      	ldr	r2, [pc, #440]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a0a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0aa:	6013      	str	r3, [r2, #0]
 800a0ac:	4b6c      	ldr	r3, [pc, #432]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a6b      	ldr	r2, [pc, #428]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a0b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a0b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d013      	beq.n	800a0e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0c0:	f7fd fbc6 	bl	8007850 <HAL_GetTick>
 800a0c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0c6:	e008      	b.n	800a0da <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0c8:	f7fd fbc2 	bl	8007850 <HAL_GetTick>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	2b64      	cmp	r3, #100	@ 0x64
 800a0d4:	d901      	bls.n	800a0da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e21f      	b.n	800a51a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0da:	4b61      	ldr	r3, [pc, #388]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d0f0      	beq.n	800a0c8 <HAL_RCC_OscConfig+0xdc>
 800a0e6:	e014      	b.n	800a112 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0e8:	f7fd fbb2 	bl	8007850 <HAL_GetTick>
 800a0ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a0ee:	e008      	b.n	800a102 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0f0:	f7fd fbae 	bl	8007850 <HAL_GetTick>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	2b64      	cmp	r3, #100	@ 0x64
 800a0fc:	d901      	bls.n	800a102 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800a0fe:	2303      	movs	r3, #3
 800a100:	e20b      	b.n	800a51a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a102:	4b57      	ldr	r3, [pc, #348]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d1f0      	bne.n	800a0f0 <HAL_RCC_OscConfig+0x104>
 800a10e:	e000      	b.n	800a112 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 0302 	and.w	r3, r3, #2
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d06f      	beq.n	800a1fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a11e:	4b50      	ldr	r3, [pc, #320]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	f003 030c 	and.w	r3, r3, #12
 800a126:	2b00      	cmp	r3, #0
 800a128:	d017      	beq.n	800a15a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a12a:	4b4d      	ldr	r3, [pc, #308]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	f003 030c 	and.w	r3, r3, #12
        || \
 800a132:	2b08      	cmp	r3, #8
 800a134:	d105      	bne.n	800a142 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a136:	4b4a      	ldr	r3, [pc, #296]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00b      	beq.n	800a15a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a142:	4b47      	ldr	r3, [pc, #284]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a14a:	2b0c      	cmp	r3, #12
 800a14c:	d11c      	bne.n	800a188 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a14e:	4b44      	ldr	r3, [pc, #272]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a156:	2b00      	cmp	r3, #0
 800a158:	d116      	bne.n	800a188 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a15a:	4b41      	ldr	r3, [pc, #260]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f003 0302 	and.w	r3, r3, #2
 800a162:	2b00      	cmp	r3, #0
 800a164:	d005      	beq.n	800a172 <HAL_RCC_OscConfig+0x186>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d001      	beq.n	800a172 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e1d3      	b.n	800a51a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a172:	4b3b      	ldr	r3, [pc, #236]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	00db      	lsls	r3, r3, #3
 800a180:	4937      	ldr	r1, [pc, #220]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a182:	4313      	orrs	r3, r2
 800a184:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a186:	e03a      	b.n	800a1fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d020      	beq.n	800a1d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a190:	4b34      	ldr	r3, [pc, #208]	@ (800a264 <HAL_RCC_OscConfig+0x278>)
 800a192:	2201      	movs	r2, #1
 800a194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a196:	f7fd fb5b 	bl	8007850 <HAL_GetTick>
 800a19a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a19c:	e008      	b.n	800a1b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a19e:	f7fd fb57 	bl	8007850 <HAL_GetTick>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	d901      	bls.n	800a1b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e1b4      	b.n	800a51a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1b0:	4b2b      	ldr	r3, [pc, #172]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f003 0302 	and.w	r3, r3, #2
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d0f0      	beq.n	800a19e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1bc:	4b28      	ldr	r3, [pc, #160]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	691b      	ldr	r3, [r3, #16]
 800a1c8:	00db      	lsls	r3, r3, #3
 800a1ca:	4925      	ldr	r1, [pc, #148]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	600b      	str	r3, [r1, #0]
 800a1d0:	e015      	b.n	800a1fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a1d2:	4b24      	ldr	r3, [pc, #144]	@ (800a264 <HAL_RCC_OscConfig+0x278>)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1d8:	f7fd fb3a 	bl	8007850 <HAL_GetTick>
 800a1dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a1de:	e008      	b.n	800a1f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1e0:	f7fd fb36 	bl	8007850 <HAL_GetTick>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d901      	bls.n	800a1f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e193      	b.n	800a51a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a1f2:	4b1b      	ldr	r3, [pc, #108]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 0302 	and.w	r3, r3, #2
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d1f0      	bne.n	800a1e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 0308 	and.w	r3, r3, #8
 800a206:	2b00      	cmp	r3, #0
 800a208:	d036      	beq.n	800a278 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	695b      	ldr	r3, [r3, #20]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d016      	beq.n	800a240 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a212:	4b15      	ldr	r3, [pc, #84]	@ (800a268 <HAL_RCC_OscConfig+0x27c>)
 800a214:	2201      	movs	r2, #1
 800a216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a218:	f7fd fb1a 	bl	8007850 <HAL_GetTick>
 800a21c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a21e:	e008      	b.n	800a232 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a220:	f7fd fb16 	bl	8007850 <HAL_GetTick>
 800a224:	4602      	mov	r2, r0
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	d901      	bls.n	800a232 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800a22e:	2303      	movs	r3, #3
 800a230:	e173      	b.n	800a51a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a232:	4b0b      	ldr	r3, [pc, #44]	@ (800a260 <HAL_RCC_OscConfig+0x274>)
 800a234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a236:	f003 0302 	and.w	r3, r3, #2
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d0f0      	beq.n	800a220 <HAL_RCC_OscConfig+0x234>
 800a23e:	e01b      	b.n	800a278 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a240:	4b09      	ldr	r3, [pc, #36]	@ (800a268 <HAL_RCC_OscConfig+0x27c>)
 800a242:	2200      	movs	r2, #0
 800a244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a246:	f7fd fb03 	bl	8007850 <HAL_GetTick>
 800a24a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a24c:	e00e      	b.n	800a26c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a24e:	f7fd faff 	bl	8007850 <HAL_GetTick>
 800a252:	4602      	mov	r2, r0
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	1ad3      	subs	r3, r2, r3
 800a258:	2b02      	cmp	r3, #2
 800a25a:	d907      	bls.n	800a26c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800a25c:	2303      	movs	r3, #3
 800a25e:	e15c      	b.n	800a51a <HAL_RCC_OscConfig+0x52e>
 800a260:	40023800 	.word	0x40023800
 800a264:	42470000 	.word	0x42470000
 800a268:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a26c:	4b8a      	ldr	r3, [pc, #552]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a26e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a270:	f003 0302 	and.w	r3, r3, #2
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1ea      	bne.n	800a24e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f003 0304 	and.w	r3, r3, #4
 800a280:	2b00      	cmp	r3, #0
 800a282:	f000 8097 	beq.w	800a3b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a286:	2300      	movs	r3, #0
 800a288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a28a:	4b83      	ldr	r3, [pc, #524]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a28c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a28e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10f      	bne.n	800a2b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a296:	2300      	movs	r3, #0
 800a298:	60bb      	str	r3, [r7, #8]
 800a29a:	4b7f      	ldr	r3, [pc, #508]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a29c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a29e:	4a7e      	ldr	r2, [pc, #504]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a2a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2a4:	6413      	str	r3, [r2, #64]	@ 0x40
 800a2a6:	4b7c      	ldr	r3, [pc, #496]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a2a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2ae:	60bb      	str	r3, [r7, #8]
 800a2b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2b6:	4b79      	ldr	r3, [pc, #484]	@ (800a49c <HAL_RCC_OscConfig+0x4b0>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d118      	bne.n	800a2f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a2c2:	4b76      	ldr	r3, [pc, #472]	@ (800a49c <HAL_RCC_OscConfig+0x4b0>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a75      	ldr	r2, [pc, #468]	@ (800a49c <HAL_RCC_OscConfig+0x4b0>)
 800a2c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a2ce:	f7fd fabf 	bl	8007850 <HAL_GetTick>
 800a2d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2d4:	e008      	b.n	800a2e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2d6:	f7fd fabb 	bl	8007850 <HAL_GetTick>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	1ad3      	subs	r3, r2, r3
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	d901      	bls.n	800a2e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a2e4:	2303      	movs	r3, #3
 800a2e6:	e118      	b.n	800a51a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2e8:	4b6c      	ldr	r3, [pc, #432]	@ (800a49c <HAL_RCC_OscConfig+0x4b0>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d0f0      	beq.n	800a2d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d106      	bne.n	800a30a <HAL_RCC_OscConfig+0x31e>
 800a2fc:	4b66      	ldr	r3, [pc, #408]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a2fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a300:	4a65      	ldr	r2, [pc, #404]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a302:	f043 0301 	orr.w	r3, r3, #1
 800a306:	6713      	str	r3, [r2, #112]	@ 0x70
 800a308:	e01c      	b.n	800a344 <HAL_RCC_OscConfig+0x358>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	2b05      	cmp	r3, #5
 800a310:	d10c      	bne.n	800a32c <HAL_RCC_OscConfig+0x340>
 800a312:	4b61      	ldr	r3, [pc, #388]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a316:	4a60      	ldr	r2, [pc, #384]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a318:	f043 0304 	orr.w	r3, r3, #4
 800a31c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a31e:	4b5e      	ldr	r3, [pc, #376]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a322:	4a5d      	ldr	r2, [pc, #372]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a324:	f043 0301 	orr.w	r3, r3, #1
 800a328:	6713      	str	r3, [r2, #112]	@ 0x70
 800a32a:	e00b      	b.n	800a344 <HAL_RCC_OscConfig+0x358>
 800a32c:	4b5a      	ldr	r3, [pc, #360]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a32e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a330:	4a59      	ldr	r2, [pc, #356]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a332:	f023 0301 	bic.w	r3, r3, #1
 800a336:	6713      	str	r3, [r2, #112]	@ 0x70
 800a338:	4b57      	ldr	r3, [pc, #348]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a33a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a33c:	4a56      	ldr	r2, [pc, #344]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a33e:	f023 0304 	bic.w	r3, r3, #4
 800a342:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d015      	beq.n	800a378 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a34c:	f7fd fa80 	bl	8007850 <HAL_GetTick>
 800a350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a352:	e00a      	b.n	800a36a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a354:	f7fd fa7c 	bl	8007850 <HAL_GetTick>
 800a358:	4602      	mov	r2, r0
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	1ad3      	subs	r3, r2, r3
 800a35e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a362:	4293      	cmp	r3, r2
 800a364:	d901      	bls.n	800a36a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800a366:	2303      	movs	r3, #3
 800a368:	e0d7      	b.n	800a51a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a36a:	4b4b      	ldr	r3, [pc, #300]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a36c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a36e:	f003 0302 	and.w	r3, r3, #2
 800a372:	2b00      	cmp	r3, #0
 800a374:	d0ee      	beq.n	800a354 <HAL_RCC_OscConfig+0x368>
 800a376:	e014      	b.n	800a3a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a378:	f7fd fa6a 	bl	8007850 <HAL_GetTick>
 800a37c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a37e:	e00a      	b.n	800a396 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a380:	f7fd fa66 	bl	8007850 <HAL_GetTick>
 800a384:	4602      	mov	r2, r0
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a38e:	4293      	cmp	r3, r2
 800a390:	d901      	bls.n	800a396 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800a392:	2303      	movs	r3, #3
 800a394:	e0c1      	b.n	800a51a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a396:	4b40      	ldr	r3, [pc, #256]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a39a:	f003 0302 	and.w	r3, r3, #2
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1ee      	bne.n	800a380 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a3a2:	7dfb      	ldrb	r3, [r7, #23]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d105      	bne.n	800a3b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a3a8:	4b3b      	ldr	r3, [pc, #236]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a3aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ac:	4a3a      	ldr	r2, [pc, #232]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a3ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a3b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	699b      	ldr	r3, [r3, #24]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f000 80ad 	beq.w	800a518 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a3be:	4b36      	ldr	r3, [pc, #216]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	f003 030c 	and.w	r3, r3, #12
 800a3c6:	2b08      	cmp	r3, #8
 800a3c8:	d060      	beq.n	800a48c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	699b      	ldr	r3, [r3, #24]
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d145      	bne.n	800a45e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3d2:	4b33      	ldr	r3, [pc, #204]	@ (800a4a0 <HAL_RCC_OscConfig+0x4b4>)
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3d8:	f7fd fa3a 	bl	8007850 <HAL_GetTick>
 800a3dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3de:	e008      	b.n	800a3f2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3e0:	f7fd fa36 	bl	8007850 <HAL_GetTick>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	1ad3      	subs	r3, r2, r3
 800a3ea:	2b02      	cmp	r3, #2
 800a3ec:	d901      	bls.n	800a3f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	e093      	b.n	800a51a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3f2:	4b29      	ldr	r3, [pc, #164]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1f0      	bne.n	800a3e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	69da      	ldr	r2, [r3, #28]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a1b      	ldr	r3, [r3, #32]
 800a406:	431a      	orrs	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a40c:	019b      	lsls	r3, r3, #6
 800a40e:	431a      	orrs	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a414:	085b      	lsrs	r3, r3, #1
 800a416:	3b01      	subs	r3, #1
 800a418:	041b      	lsls	r3, r3, #16
 800a41a:	431a      	orrs	r2, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a420:	061b      	lsls	r3, r3, #24
 800a422:	431a      	orrs	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a428:	071b      	lsls	r3, r3, #28
 800a42a:	491b      	ldr	r1, [pc, #108]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a42c:	4313      	orrs	r3, r2
 800a42e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a430:	4b1b      	ldr	r3, [pc, #108]	@ (800a4a0 <HAL_RCC_OscConfig+0x4b4>)
 800a432:	2201      	movs	r2, #1
 800a434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a436:	f7fd fa0b 	bl	8007850 <HAL_GetTick>
 800a43a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a43c:	e008      	b.n	800a450 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a43e:	f7fd fa07 	bl	8007850 <HAL_GetTick>
 800a442:	4602      	mov	r2, r0
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	2b02      	cmp	r3, #2
 800a44a:	d901      	bls.n	800a450 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800a44c:	2303      	movs	r3, #3
 800a44e:	e064      	b.n	800a51a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a450:	4b11      	ldr	r3, [pc, #68]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d0f0      	beq.n	800a43e <HAL_RCC_OscConfig+0x452>
 800a45c:	e05c      	b.n	800a518 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a45e:	4b10      	ldr	r3, [pc, #64]	@ (800a4a0 <HAL_RCC_OscConfig+0x4b4>)
 800a460:	2200      	movs	r2, #0
 800a462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a464:	f7fd f9f4 	bl	8007850 <HAL_GetTick>
 800a468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a46a:	e008      	b.n	800a47e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a46c:	f7fd f9f0 	bl	8007850 <HAL_GetTick>
 800a470:	4602      	mov	r2, r0
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	2b02      	cmp	r3, #2
 800a478:	d901      	bls.n	800a47e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800a47a:	2303      	movs	r3, #3
 800a47c:	e04d      	b.n	800a51a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a47e:	4b06      	ldr	r3, [pc, #24]	@ (800a498 <HAL_RCC_OscConfig+0x4ac>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1f0      	bne.n	800a46c <HAL_RCC_OscConfig+0x480>
 800a48a:	e045      	b.n	800a518 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	699b      	ldr	r3, [r3, #24]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d107      	bne.n	800a4a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	e040      	b.n	800a51a <HAL_RCC_OscConfig+0x52e>
 800a498:	40023800 	.word	0x40023800
 800a49c:	40007000 	.word	0x40007000
 800a4a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a4a4:	4b1f      	ldr	r3, [pc, #124]	@ (800a524 <HAL_RCC_OscConfig+0x538>)
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	699b      	ldr	r3, [r3, #24]
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d030      	beq.n	800a514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d129      	bne.n	800a514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d122      	bne.n	800a514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a4da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d119      	bne.n	800a514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ea:	085b      	lsrs	r3, r3, #1
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d10f      	bne.n	800a514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a500:	429a      	cmp	r2, r3
 800a502:	d107      	bne.n	800a514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a50e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a510:	429a      	cmp	r2, r3
 800a512:	d001      	beq.n	800a518 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e000      	b.n	800a51a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3718      	adds	r7, #24
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	40023800 	.word	0x40023800

0800a528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d101      	bne.n	800a53a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	e041      	b.n	800a5be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b00      	cmp	r3, #0
 800a544:	d106      	bne.n	800a554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f7fc fbea 	bl	8006d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2202      	movs	r2, #2
 800a558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	3304      	adds	r3, #4
 800a564:	4619      	mov	r1, r3
 800a566:	4610      	mov	r0, r2
 800a568:	f000 fa7e 	bl	800aa68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
	...

0800a5c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d001      	beq.n	800a5e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e04e      	b.n	800a67e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68da      	ldr	r2, [r3, #12]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f042 0201 	orr.w	r2, r2, #1
 800a5f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a23      	ldr	r2, [pc, #140]	@ (800a68c <HAL_TIM_Base_Start_IT+0xc4>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d022      	beq.n	800a648 <HAL_TIM_Base_Start_IT+0x80>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a60a:	d01d      	beq.n	800a648 <HAL_TIM_Base_Start_IT+0x80>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a1f      	ldr	r2, [pc, #124]	@ (800a690 <HAL_TIM_Base_Start_IT+0xc8>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d018      	beq.n	800a648 <HAL_TIM_Base_Start_IT+0x80>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a1e      	ldr	r2, [pc, #120]	@ (800a694 <HAL_TIM_Base_Start_IT+0xcc>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d013      	beq.n	800a648 <HAL_TIM_Base_Start_IT+0x80>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a1c      	ldr	r2, [pc, #112]	@ (800a698 <HAL_TIM_Base_Start_IT+0xd0>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d00e      	beq.n	800a648 <HAL_TIM_Base_Start_IT+0x80>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a1b      	ldr	r2, [pc, #108]	@ (800a69c <HAL_TIM_Base_Start_IT+0xd4>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d009      	beq.n	800a648 <HAL_TIM_Base_Start_IT+0x80>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a19      	ldr	r2, [pc, #100]	@ (800a6a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d004      	beq.n	800a648 <HAL_TIM_Base_Start_IT+0x80>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a18      	ldr	r2, [pc, #96]	@ (800a6a4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d111      	bne.n	800a66c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	f003 0307 	and.w	r3, r3, #7
 800a652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2b06      	cmp	r3, #6
 800a658:	d010      	beq.n	800a67c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f042 0201 	orr.w	r2, r2, #1
 800a668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a66a:	e007      	b.n	800a67c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f042 0201 	orr.w	r2, r2, #1
 800a67a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	40010000 	.word	0x40010000
 800a690:	40000400 	.word	0x40000400
 800a694:	40000800 	.word	0x40000800
 800a698:	40000c00 	.word	0x40000c00
 800a69c:	40010400 	.word	0x40010400
 800a6a0:	40014000 	.word	0x40014000
 800a6a4:	40001800 	.word	0x40001800

0800a6a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	f003 0302 	and.w	r3, r3, #2
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d020      	beq.n	800a70c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f003 0302 	and.w	r3, r3, #2
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d01b      	beq.n	800a70c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f06f 0202 	mvn.w	r2, #2
 800a6dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	699b      	ldr	r3, [r3, #24]
 800a6ea:	f003 0303 	and.w	r3, r3, #3
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d003      	beq.n	800a6fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 f999 	bl	800aa2a <HAL_TIM_IC_CaptureCallback>
 800a6f8:	e005      	b.n	800a706 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f98b 	bl	800aa16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 f99c 	bl	800aa3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	f003 0304 	and.w	r3, r3, #4
 800a712:	2b00      	cmp	r3, #0
 800a714:	d020      	beq.n	800a758 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f003 0304 	and.w	r3, r3, #4
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d01b      	beq.n	800a758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f06f 0204 	mvn.w	r2, #4
 800a728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2202      	movs	r2, #2
 800a72e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	699b      	ldr	r3, [r3, #24]
 800a736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d003      	beq.n	800a746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f973 	bl	800aa2a <HAL_TIM_IC_CaptureCallback>
 800a744:	e005      	b.n	800a752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 f965 	bl	800aa16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 f976 	bl	800aa3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	f003 0308 	and.w	r3, r3, #8
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d020      	beq.n	800a7a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f003 0308 	and.w	r3, r3, #8
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d01b      	beq.n	800a7a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f06f 0208 	mvn.w	r2, #8
 800a774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2204      	movs	r2, #4
 800a77a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	69db      	ldr	r3, [r3, #28]
 800a782:	f003 0303 	and.w	r3, r3, #3
 800a786:	2b00      	cmp	r3, #0
 800a788:	d003      	beq.n	800a792 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 f94d 	bl	800aa2a <HAL_TIM_IC_CaptureCallback>
 800a790:	e005      	b.n	800a79e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 f93f 	bl	800aa16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 f950 	bl	800aa3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	f003 0310 	and.w	r3, r3, #16
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d020      	beq.n	800a7f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f003 0310 	and.w	r3, r3, #16
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d01b      	beq.n	800a7f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f06f 0210 	mvn.w	r2, #16
 800a7c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2208      	movs	r2, #8
 800a7c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	69db      	ldr	r3, [r3, #28]
 800a7ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d003      	beq.n	800a7de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 f927 	bl	800aa2a <HAL_TIM_IC_CaptureCallback>
 800a7dc:	e005      	b.n	800a7ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 f919 	bl	800aa16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 f92a 	bl	800aa3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00c      	beq.n	800a814 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f003 0301 	and.w	r3, r3, #1
 800a800:	2b00      	cmp	r3, #0
 800a802:	d007      	beq.n	800a814 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f06f 0201 	mvn.w	r2, #1
 800a80c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f7fa f9de 	bl	8004bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00c      	beq.n	800a838 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a824:	2b00      	cmp	r3, #0
 800a826:	d007      	beq.n	800a838 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 fade 	bl	800adf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00c      	beq.n	800a85c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d007      	beq.n	800a85c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 f8fb 	bl	800aa52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	f003 0320 	and.w	r3, r3, #32
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00c      	beq.n	800a880 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f003 0320 	and.w	r3, r3, #32
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d007      	beq.n	800a880 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f06f 0220 	mvn.w	r2, #32
 800a878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fab0 	bl	800ade0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a880:	bf00      	nop
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a892:	2300      	movs	r3, #0
 800a894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d101      	bne.n	800a8a4 <HAL_TIM_ConfigClockSource+0x1c>
 800a8a0:	2302      	movs	r3, #2
 800a8a2:	e0b4      	b.n	800aa0e <HAL_TIM_ConfigClockSource+0x186>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2202      	movs	r2, #2
 800a8b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a8c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a8ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	68ba      	ldr	r2, [r7, #8]
 800a8d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8dc:	d03e      	beq.n	800a95c <HAL_TIM_ConfigClockSource+0xd4>
 800a8de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8e2:	f200 8087 	bhi.w	800a9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8ea:	f000 8086 	beq.w	800a9fa <HAL_TIM_ConfigClockSource+0x172>
 800a8ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8f2:	d87f      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8f4:	2b70      	cmp	r3, #112	@ 0x70
 800a8f6:	d01a      	beq.n	800a92e <HAL_TIM_ConfigClockSource+0xa6>
 800a8f8:	2b70      	cmp	r3, #112	@ 0x70
 800a8fa:	d87b      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8fc:	2b60      	cmp	r3, #96	@ 0x60
 800a8fe:	d050      	beq.n	800a9a2 <HAL_TIM_ConfigClockSource+0x11a>
 800a900:	2b60      	cmp	r3, #96	@ 0x60
 800a902:	d877      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a904:	2b50      	cmp	r3, #80	@ 0x50
 800a906:	d03c      	beq.n	800a982 <HAL_TIM_ConfigClockSource+0xfa>
 800a908:	2b50      	cmp	r3, #80	@ 0x50
 800a90a:	d873      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a90c:	2b40      	cmp	r3, #64	@ 0x40
 800a90e:	d058      	beq.n	800a9c2 <HAL_TIM_ConfigClockSource+0x13a>
 800a910:	2b40      	cmp	r3, #64	@ 0x40
 800a912:	d86f      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a914:	2b30      	cmp	r3, #48	@ 0x30
 800a916:	d064      	beq.n	800a9e2 <HAL_TIM_ConfigClockSource+0x15a>
 800a918:	2b30      	cmp	r3, #48	@ 0x30
 800a91a:	d86b      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a91c:	2b20      	cmp	r3, #32
 800a91e:	d060      	beq.n	800a9e2 <HAL_TIM_ConfigClockSource+0x15a>
 800a920:	2b20      	cmp	r3, #32
 800a922:	d867      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a924:	2b00      	cmp	r3, #0
 800a926:	d05c      	beq.n	800a9e2 <HAL_TIM_ConfigClockSource+0x15a>
 800a928:	2b10      	cmp	r3, #16
 800a92a:	d05a      	beq.n	800a9e2 <HAL_TIM_ConfigClockSource+0x15a>
 800a92c:	e062      	b.n	800a9f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a93e:	f000 f9b3 	bl	800aca8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a950:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	609a      	str	r2, [r3, #8]
      break;
 800a95a:	e04f      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a96c:	f000 f99c 	bl	800aca8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	689a      	ldr	r2, [r3, #8]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a97e:	609a      	str	r2, [r3, #8]
      break;
 800a980:	e03c      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a98e:	461a      	mov	r2, r3
 800a990:	f000 f910 	bl	800abb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2150      	movs	r1, #80	@ 0x50
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 f969 	bl	800ac72 <TIM_ITRx_SetConfig>
      break;
 800a9a0:	e02c      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	f000 f92f 	bl	800ac12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2160      	movs	r1, #96	@ 0x60
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f000 f959 	bl	800ac72 <TIM_ITRx_SetConfig>
      break;
 800a9c0:	e01c      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	f000 f8f0 	bl	800abb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2140      	movs	r1, #64	@ 0x40
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 f949 	bl	800ac72 <TIM_ITRx_SetConfig>
      break;
 800a9e0:	e00c      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	f000 f940 	bl	800ac72 <TIM_ITRx_SetConfig>
      break;
 800a9f2:	e003      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a9f8:	e000      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a9fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}

0800aa16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa16:	b480      	push	{r7}
 800aa18:	b083      	sub	sp, #12
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa1e:	bf00      	nop
 800aa20:	370c      	adds	r7, #12
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr

0800aa2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa2a:	b480      	push	{r7}
 800aa2c:	b083      	sub	sp, #12
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa32:	bf00      	nop
 800aa34:	370c      	adds	r7, #12
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa3e:	b480      	push	{r7}
 800aa40:	b083      	sub	sp, #12
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa46:	bf00      	nop
 800aa48:	370c      	adds	r7, #12
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr

0800aa52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa52:	b480      	push	{r7}
 800aa54:	b083      	sub	sp, #12
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa5a:	bf00      	nop
 800aa5c:	370c      	adds	r7, #12
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr
	...

0800aa68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a43      	ldr	r2, [pc, #268]	@ (800ab88 <TIM_Base_SetConfig+0x120>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d013      	beq.n	800aaa8 <TIM_Base_SetConfig+0x40>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa86:	d00f      	beq.n	800aaa8 <TIM_Base_SetConfig+0x40>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a40      	ldr	r2, [pc, #256]	@ (800ab8c <TIM_Base_SetConfig+0x124>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d00b      	beq.n	800aaa8 <TIM_Base_SetConfig+0x40>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a3f      	ldr	r2, [pc, #252]	@ (800ab90 <TIM_Base_SetConfig+0x128>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d007      	beq.n	800aaa8 <TIM_Base_SetConfig+0x40>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a3e      	ldr	r2, [pc, #248]	@ (800ab94 <TIM_Base_SetConfig+0x12c>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d003      	beq.n	800aaa8 <TIM_Base_SetConfig+0x40>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a3d      	ldr	r2, [pc, #244]	@ (800ab98 <TIM_Base_SetConfig+0x130>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d108      	bne.n	800aaba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	4313      	orrs	r3, r2
 800aab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4a32      	ldr	r2, [pc, #200]	@ (800ab88 <TIM_Base_SetConfig+0x120>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d02b      	beq.n	800ab1a <TIM_Base_SetConfig+0xb2>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aac8:	d027      	beq.n	800ab1a <TIM_Base_SetConfig+0xb2>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a2f      	ldr	r2, [pc, #188]	@ (800ab8c <TIM_Base_SetConfig+0x124>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d023      	beq.n	800ab1a <TIM_Base_SetConfig+0xb2>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a2e      	ldr	r2, [pc, #184]	@ (800ab90 <TIM_Base_SetConfig+0x128>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d01f      	beq.n	800ab1a <TIM_Base_SetConfig+0xb2>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4a2d      	ldr	r2, [pc, #180]	@ (800ab94 <TIM_Base_SetConfig+0x12c>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d01b      	beq.n	800ab1a <TIM_Base_SetConfig+0xb2>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a2c      	ldr	r2, [pc, #176]	@ (800ab98 <TIM_Base_SetConfig+0x130>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d017      	beq.n	800ab1a <TIM_Base_SetConfig+0xb2>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a2b      	ldr	r2, [pc, #172]	@ (800ab9c <TIM_Base_SetConfig+0x134>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d013      	beq.n	800ab1a <TIM_Base_SetConfig+0xb2>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4a2a      	ldr	r2, [pc, #168]	@ (800aba0 <TIM_Base_SetConfig+0x138>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d00f      	beq.n	800ab1a <TIM_Base_SetConfig+0xb2>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a29      	ldr	r2, [pc, #164]	@ (800aba4 <TIM_Base_SetConfig+0x13c>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d00b      	beq.n	800ab1a <TIM_Base_SetConfig+0xb2>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4a28      	ldr	r2, [pc, #160]	@ (800aba8 <TIM_Base_SetConfig+0x140>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d007      	beq.n	800ab1a <TIM_Base_SetConfig+0xb2>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4a27      	ldr	r2, [pc, #156]	@ (800abac <TIM_Base_SetConfig+0x144>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d003      	beq.n	800ab1a <TIM_Base_SetConfig+0xb2>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a26      	ldr	r2, [pc, #152]	@ (800abb0 <TIM_Base_SetConfig+0x148>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d108      	bne.n	800ab2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	695b      	ldr	r3, [r3, #20]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	689a      	ldr	r2, [r3, #8]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a0e      	ldr	r2, [pc, #56]	@ (800ab88 <TIM_Base_SetConfig+0x120>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d003      	beq.n	800ab5a <TIM_Base_SetConfig+0xf2>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a10      	ldr	r2, [pc, #64]	@ (800ab98 <TIM_Base_SetConfig+0x130>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d103      	bne.n	800ab62 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	691a      	ldr	r2, [r3, #16]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f043 0204 	orr.w	r2, r3, #4
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2201      	movs	r2, #1
 800ab72:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	601a      	str	r2, [r3, #0]
}
 800ab7a:	bf00      	nop
 800ab7c:	3714      	adds	r7, #20
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop
 800ab88:	40010000 	.word	0x40010000
 800ab8c:	40000400 	.word	0x40000400
 800ab90:	40000800 	.word	0x40000800
 800ab94:	40000c00 	.word	0x40000c00
 800ab98:	40010400 	.word	0x40010400
 800ab9c:	40014000 	.word	0x40014000
 800aba0:	40014400 	.word	0x40014400
 800aba4:	40014800 	.word	0x40014800
 800aba8:	40001800 	.word	0x40001800
 800abac:	40001c00 	.word	0x40001c00
 800abb0:	40002000 	.word	0x40002000

0800abb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b087      	sub	sp, #28
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6a1b      	ldr	r3, [r3, #32]
 800abc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	f023 0201 	bic.w	r2, r3, #1
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	699b      	ldr	r3, [r3, #24]
 800abd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800abde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	011b      	lsls	r3, r3, #4
 800abe4:	693a      	ldr	r2, [r7, #16]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f023 030a 	bic.w	r3, r3, #10
 800abf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800abf2:	697a      	ldr	r2, [r7, #20]
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	693a      	ldr	r2, [r7, #16]
 800abfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	697a      	ldr	r2, [r7, #20]
 800ac04:	621a      	str	r2, [r3, #32]
}
 800ac06:	bf00      	nop
 800ac08:	371c      	adds	r7, #28
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr

0800ac12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac12:	b480      	push	{r7}
 800ac14:	b087      	sub	sp, #28
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	60f8      	str	r0, [r7, #12]
 800ac1a:	60b9      	str	r1, [r7, #8]
 800ac1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6a1b      	ldr	r3, [r3, #32]
 800ac28:	f023 0210 	bic.w	r2, r3, #16
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ac3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	031b      	lsls	r3, r3, #12
 800ac42:	693a      	ldr	r2, [r7, #16]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ac4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	011b      	lsls	r3, r3, #4
 800ac54:	697a      	ldr	r2, [r7, #20]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	697a      	ldr	r2, [r7, #20]
 800ac64:	621a      	str	r2, [r3, #32]
}
 800ac66:	bf00      	nop
 800ac68:	371c      	adds	r7, #28
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr

0800ac72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac72:	b480      	push	{r7}
 800ac74:	b085      	sub	sp, #20
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
 800ac7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac8a:	683a      	ldr	r2, [r7, #0]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	f043 0307 	orr.w	r3, r3, #7
 800ac94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	609a      	str	r2, [r3, #8]
}
 800ac9c:	bf00      	nop
 800ac9e:	3714      	adds	r7, #20
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b087      	sub	sp, #28
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	607a      	str	r2, [r7, #4]
 800acb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800acc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	021a      	lsls	r2, r3, #8
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	431a      	orrs	r2, r3
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	4313      	orrs	r3, r2
 800acd0:	697a      	ldr	r2, [r7, #20]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	697a      	ldr	r2, [r7, #20]
 800acda:	609a      	str	r2, [r3, #8]
}
 800acdc:	bf00      	nop
 800acde:	371c      	adds	r7, #28
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ace8:	b480      	push	{r7}
 800acea:	b085      	sub	sp, #20
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d101      	bne.n	800ad00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800acfc:	2302      	movs	r3, #2
 800acfe:	e05a      	b.n	800adb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2201      	movs	r2, #1
 800ad04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2202      	movs	r2, #2
 800ad0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a21      	ldr	r2, [pc, #132]	@ (800adc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d022      	beq.n	800ad8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad4c:	d01d      	beq.n	800ad8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a1d      	ldr	r2, [pc, #116]	@ (800adc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d018      	beq.n	800ad8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a1b      	ldr	r2, [pc, #108]	@ (800adcc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d013      	beq.n	800ad8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a1a      	ldr	r2, [pc, #104]	@ (800add0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d00e      	beq.n	800ad8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a18      	ldr	r2, [pc, #96]	@ (800add4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d009      	beq.n	800ad8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a17      	ldr	r2, [pc, #92]	@ (800add8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d004      	beq.n	800ad8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a15      	ldr	r2, [pc, #84]	@ (800addc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d10c      	bne.n	800ada4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	68ba      	ldr	r2, [r7, #8]
 800ada2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2201      	movs	r2, #1
 800ada8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3714      	adds	r7, #20
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	40010000 	.word	0x40010000
 800adc8:	40000400 	.word	0x40000400
 800adcc:	40000800 	.word	0x40000800
 800add0:	40000c00 	.word	0x40000c00
 800add4:	40010400 	.word	0x40010400
 800add8:	40014000 	.word	0x40014000
 800addc:	40001800 	.word	0x40001800

0800ade0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d101      	bne.n	800ae1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	e042      	b.n	800aea0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d106      	bne.n	800ae34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f7fb ffa0 	bl	8006d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2224      	movs	r2, #36	@ 0x24
 800ae38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	68da      	ldr	r2, [r3, #12]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ae4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f001 f879 	bl	800bf44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	691a      	ldr	r2, [r3, #16]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ae60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	695a      	ldr	r2, [r3, #20]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ae70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68da      	ldr	r2, [r3, #12]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ae80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2220      	movs	r2, #32
 800ae8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2220      	movs	r2, #32
 800ae94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ae9e:	2300      	movs	r3, #0
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3708      	adds	r7, #8
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b08a      	sub	sp, #40	@ 0x28
 800aeac:	af02      	add	r7, sp, #8
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	603b      	str	r3, [r7, #0]
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	2b20      	cmp	r3, #32
 800aec6:	d175      	bne.n	800afb4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d002      	beq.n	800aed4 <HAL_UART_Transmit+0x2c>
 800aece:	88fb      	ldrh	r3, [r7, #6]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d101      	bne.n	800aed8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	e06e      	b.n	800afb6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2200      	movs	r2, #0
 800aedc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2221      	movs	r2, #33	@ 0x21
 800aee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aee6:	f7fc fcb3 	bl	8007850 <HAL_GetTick>
 800aeea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	88fa      	ldrh	r2, [r7, #6]
 800aef0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	88fa      	ldrh	r2, [r7, #6]
 800aef6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af00:	d108      	bne.n	800af14 <HAL_UART_Transmit+0x6c>
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	691b      	ldr	r3, [r3, #16]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d104      	bne.n	800af14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800af0a:	2300      	movs	r3, #0
 800af0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	61bb      	str	r3, [r7, #24]
 800af12:	e003      	b.n	800af1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800af18:	2300      	movs	r3, #0
 800af1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800af1c:	e02e      	b.n	800af7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	2200      	movs	r2, #0
 800af26:	2180      	movs	r1, #128	@ 0x80
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f000 fd4a 	bl	800b9c2 <UART_WaitOnFlagUntilTimeout>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d005      	beq.n	800af40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2220      	movs	r2, #32
 800af38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800af3c:	2303      	movs	r3, #3
 800af3e:	e03a      	b.n	800afb6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d10b      	bne.n	800af5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	881b      	ldrh	r3, [r3, #0]
 800af4a:	461a      	mov	r2, r3
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800af56:	69bb      	ldr	r3, [r7, #24]
 800af58:	3302      	adds	r3, #2
 800af5a:	61bb      	str	r3, [r7, #24]
 800af5c:	e007      	b.n	800af6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	781a      	ldrb	r2, [r3, #0]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	3301      	adds	r3, #1
 800af6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800af72:	b29b      	uxth	r3, r3
 800af74:	3b01      	subs	r3, #1
 800af76:	b29a      	uxth	r2, r3
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800af80:	b29b      	uxth	r3, r3
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1cb      	bne.n	800af1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	2200      	movs	r2, #0
 800af8e:	2140      	movs	r1, #64	@ 0x40
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f000 fd16 	bl	800b9c2 <UART_WaitOnFlagUntilTimeout>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d005      	beq.n	800afa8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2220      	movs	r2, #32
 800afa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800afa4:	2303      	movs	r3, #3
 800afa6:	e006      	b.n	800afb6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2220      	movs	r2, #32
 800afac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800afb0:	2300      	movs	r3, #0
 800afb2:	e000      	b.n	800afb6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800afb4:	2302      	movs	r3, #2
  }
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3720      	adds	r7, #32
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
	...

0800afc0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b08c      	sub	sp, #48	@ 0x30
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	4613      	mov	r3, r2
 800afcc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	2b20      	cmp	r3, #32
 800afd8:	d162      	bne.n	800b0a0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d002      	beq.n	800afe6 <HAL_UART_Transmit_DMA+0x26>
 800afe0:	88fb      	ldrh	r3, [r7, #6]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d101      	bne.n	800afea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	e05b      	b.n	800b0a2 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800afea:	68ba      	ldr	r2, [r7, #8]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	88fa      	ldrh	r2, [r7, #6]
 800aff4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	88fa      	ldrh	r2, [r7, #6]
 800affa:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2200      	movs	r2, #0
 800b000:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2221      	movs	r2, #33	@ 0x21
 800b006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b00e:	4a27      	ldr	r2, [pc, #156]	@ (800b0ac <HAL_UART_Transmit_DMA+0xec>)
 800b010:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b016:	4a26      	ldr	r2, [pc, #152]	@ (800b0b0 <HAL_UART_Transmit_DMA+0xf0>)
 800b018:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b01e:	4a25      	ldr	r2, [pc, #148]	@ (800b0b4 <HAL_UART_Transmit_DMA+0xf4>)
 800b020:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b026:	2200      	movs	r2, #0
 800b028:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b02a:	f107 0308 	add.w	r3, r7, #8
 800b02e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b036:	6819      	ldr	r1, [r3, #0]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	3304      	adds	r3, #4
 800b03e:	461a      	mov	r2, r3
 800b040:	88fb      	ldrh	r3, [r7, #6]
 800b042:	f7fc fe27 	bl	8007c94 <HAL_DMA_Start_IT>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d008      	beq.n	800b05e <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2210      	movs	r2, #16
 800b050:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2220      	movs	r2, #32
 800b056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	e021      	b.n	800b0a2 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b066:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	3314      	adds	r3, #20
 800b06e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	e853 3f00 	ldrex	r3, [r3]
 800b076:	617b      	str	r3, [r7, #20]
   return(result);
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b07e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	3314      	adds	r3, #20
 800b086:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b088:	627a      	str	r2, [r7, #36]	@ 0x24
 800b08a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b08c:	6a39      	ldr	r1, [r7, #32]
 800b08e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b090:	e841 2300 	strex	r3, r2, [r1]
 800b094:	61fb      	str	r3, [r7, #28]
   return(result);
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d1e5      	bne.n	800b068 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 800b09c:	2300      	movs	r3, #0
 800b09e:	e000      	b.n	800b0a2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800b0a0:	2302      	movs	r3, #2
  }
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3730      	adds	r7, #48	@ 0x30
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	0800b711 	.word	0x0800b711
 800b0b0:	0800b7ab 	.word	0x0800b7ab
 800b0b4:	0800b92f 	.word	0x0800b92f

0800b0b8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b08c      	sub	sp, #48	@ 0x30
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	4613      	mov	r3, r2
 800b0c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	2b20      	cmp	r3, #32
 800b0d0:	d146      	bne.n	800b160 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d002      	beq.n	800b0de <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800b0d8:	88fb      	ldrh	r3, [r7, #6]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d101      	bne.n	800b0e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e03f      	b.n	800b162 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b0ee:	88fb      	ldrh	r3, [r7, #6]
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	68b9      	ldr	r1, [r7, #8]
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	f000 fcbd 	bl	800ba74 <UART_Start_Receive_DMA>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b104:	2b01      	cmp	r3, #1
 800b106:	d125      	bne.n	800b154 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b108:	2300      	movs	r3, #0
 800b10a:	613b      	str	r3, [r7, #16]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	613b      	str	r3, [r7, #16]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	613b      	str	r3, [r7, #16]
 800b11c:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	330c      	adds	r3, #12
 800b124:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	e853 3f00 	ldrex	r3, [r3]
 800b12c:	617b      	str	r3, [r7, #20]
   return(result);
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	f043 0310 	orr.w	r3, r3, #16
 800b134:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	330c      	adds	r3, #12
 800b13c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b13e:	627a      	str	r2, [r7, #36]	@ 0x24
 800b140:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b142:	6a39      	ldr	r1, [r7, #32]
 800b144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b146:	e841 2300 	strex	r3, r2, [r1]
 800b14a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d1e5      	bne.n	800b11e <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800b152:	e002      	b.n	800b15a <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800b154:	2301      	movs	r3, #1
 800b156:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800b15a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b15e:	e000      	b.n	800b162 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800b160:	2302      	movs	r3, #2
  }
}
 800b162:	4618      	mov	r0, r3
 800b164:	3730      	adds	r7, #48	@ 0x30
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
	...

0800b16c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b0ba      	sub	sp, #232	@ 0xe8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	695b      	ldr	r3, [r3, #20]
 800b18e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b192:	2300      	movs	r3, #0
 800b194:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b198:	2300      	movs	r3, #0
 800b19a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b19e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1a2:	f003 030f 	and.w	r3, r3, #15
 800b1a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b1aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d10f      	bne.n	800b1d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b1b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1b6:	f003 0320 	and.w	r3, r3, #32
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d009      	beq.n	800b1d2 <HAL_UART_IRQHandler+0x66>
 800b1be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1c2:	f003 0320 	and.w	r3, r3, #32
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d003      	beq.n	800b1d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 fdfc 	bl	800bdc8 <UART_Receive_IT>
      return;
 800b1d0:	e273      	b.n	800b6ba <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b1d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	f000 80de 	beq.w	800b398 <HAL_UART_IRQHandler+0x22c>
 800b1dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1e0:	f003 0301 	and.w	r3, r3, #1
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d106      	bne.n	800b1f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b1e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f000 80d1 	beq.w	800b398 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b1f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1fa:	f003 0301 	and.w	r3, r3, #1
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d00b      	beq.n	800b21a <HAL_UART_IRQHandler+0xae>
 800b202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d005      	beq.n	800b21a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b212:	f043 0201 	orr.w	r2, r3, #1
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b21a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b21e:	f003 0304 	and.w	r3, r3, #4
 800b222:	2b00      	cmp	r3, #0
 800b224:	d00b      	beq.n	800b23e <HAL_UART_IRQHandler+0xd2>
 800b226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b22a:	f003 0301 	and.w	r3, r3, #1
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d005      	beq.n	800b23e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b236:	f043 0202 	orr.w	r2, r3, #2
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b23e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b242:	f003 0302 	and.w	r3, r3, #2
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00b      	beq.n	800b262 <HAL_UART_IRQHandler+0xf6>
 800b24a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b24e:	f003 0301 	and.w	r3, r3, #1
 800b252:	2b00      	cmp	r3, #0
 800b254:	d005      	beq.n	800b262 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b25a:	f043 0204 	orr.w	r2, r3, #4
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b266:	f003 0308 	and.w	r3, r3, #8
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d011      	beq.n	800b292 <HAL_UART_IRQHandler+0x126>
 800b26e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b272:	f003 0320 	and.w	r3, r3, #32
 800b276:	2b00      	cmp	r3, #0
 800b278:	d105      	bne.n	800b286 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b27a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b27e:	f003 0301 	and.w	r3, r3, #1
 800b282:	2b00      	cmp	r3, #0
 800b284:	d005      	beq.n	800b292 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b28a:	f043 0208 	orr.w	r2, r3, #8
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b296:	2b00      	cmp	r3, #0
 800b298:	f000 820a 	beq.w	800b6b0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b29c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2a0:	f003 0320 	and.w	r3, r3, #32
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d008      	beq.n	800b2ba <HAL_UART_IRQHandler+0x14e>
 800b2a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2ac:	f003 0320 	and.w	r3, r3, #32
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d002      	beq.n	800b2ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fd87 	bl	800bdc8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	695b      	ldr	r3, [r3, #20]
 800b2c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2c4:	2b40      	cmp	r3, #64	@ 0x40
 800b2c6:	bf0c      	ite	eq
 800b2c8:	2301      	moveq	r3, #1
 800b2ca:	2300      	movne	r3, #0
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2d6:	f003 0308 	and.w	r3, r3, #8
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d103      	bne.n	800b2e6 <HAL_UART_IRQHandler+0x17a>
 800b2de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d04f      	beq.n	800b386 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 fc92 	bl	800bc10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	695b      	ldr	r3, [r3, #20]
 800b2f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2f6:	2b40      	cmp	r3, #64	@ 0x40
 800b2f8:	d141      	bne.n	800b37e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	3314      	adds	r3, #20
 800b300:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b304:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b308:	e853 3f00 	ldrex	r3, [r3]
 800b30c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b310:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b314:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b318:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	3314      	adds	r3, #20
 800b322:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b326:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b32a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b32e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b332:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b336:	e841 2300 	strex	r3, r2, [r1]
 800b33a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b33e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1d9      	bne.n	800b2fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d013      	beq.n	800b376 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b352:	4a8a      	ldr	r2, [pc, #552]	@ (800b57c <HAL_UART_IRQHandler+0x410>)
 800b354:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fc fd62 	bl	8007e24 <HAL_DMA_Abort_IT>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d016      	beq.n	800b394 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b36a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b370:	4610      	mov	r0, r2
 800b372:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b374:	e00e      	b.n	800b394 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 f9c0 	bl	800b6fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b37c:	e00a      	b.n	800b394 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f9bc 	bl	800b6fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b384:	e006      	b.n	800b394 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 f9b8 	bl	800b6fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2200      	movs	r2, #0
 800b390:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b392:	e18d      	b.n	800b6b0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b394:	bf00      	nop
    return;
 800b396:	e18b      	b.n	800b6b0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	f040 8167 	bne.w	800b670 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b3a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3a6:	f003 0310 	and.w	r3, r3, #16
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f000 8160 	beq.w	800b670 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800b3b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3b4:	f003 0310 	and.w	r3, r3, #16
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	f000 8159 	beq.w	800b670 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b3be:	2300      	movs	r3, #0
 800b3c0:	60bb      	str	r3, [r7, #8]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	60bb      	str	r3, [r7, #8]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	60bb      	str	r3, [r7, #8]
 800b3d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	695b      	ldr	r3, [r3, #20]
 800b3da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3de:	2b40      	cmp	r3, #64	@ 0x40
 800b3e0:	f040 80ce 	bne.w	800b580 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b3f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f000 80a9 	beq.w	800b54c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b3fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b402:	429a      	cmp	r2, r3
 800b404:	f080 80a2 	bcs.w	800b54c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b40e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b414:	69db      	ldr	r3, [r3, #28]
 800b416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b41a:	f000 8088 	beq.w	800b52e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	330c      	adds	r3, #12
 800b424:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b428:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b42c:	e853 3f00 	ldrex	r3, [r3]
 800b430:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b434:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b43c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	330c      	adds	r3, #12
 800b446:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b44a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b44e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b452:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b456:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b45a:	e841 2300 	strex	r3, r2, [r1]
 800b45e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b462:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1d9      	bne.n	800b41e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	3314      	adds	r3, #20
 800b470:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b472:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b474:	e853 3f00 	ldrex	r3, [r3]
 800b478:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b47a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b47c:	f023 0301 	bic.w	r3, r3, #1
 800b480:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	3314      	adds	r3, #20
 800b48a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b48e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b492:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b494:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b496:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b49a:	e841 2300 	strex	r3, r2, [r1]
 800b49e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b4a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d1e1      	bne.n	800b46a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	3314      	adds	r3, #20
 800b4ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b4b0:	e853 3f00 	ldrex	r3, [r3]
 800b4b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b4b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3314      	adds	r3, #20
 800b4c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b4ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b4cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b4d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b4d2:	e841 2300 	strex	r3, r2, [r1]
 800b4d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b4d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1e3      	bne.n	800b4a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2220      	movs	r2, #32
 800b4e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	330c      	adds	r3, #12
 800b4f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4f6:	e853 3f00 	ldrex	r3, [r3]
 800b4fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b4fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4fe:	f023 0310 	bic.w	r3, r3, #16
 800b502:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	330c      	adds	r3, #12
 800b50c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b510:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b512:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b514:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b516:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b518:	e841 2300 	strex	r3, r2, [r1]
 800b51c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b51e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b520:	2b00      	cmp	r3, #0
 800b522:	d1e3      	bne.n	800b4ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b528:	4618      	mov	r0, r3
 800b52a:	f7fc fc0b 	bl	8007d44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2202      	movs	r2, #2
 800b532:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	1ad3      	subs	r3, r2, r3
 800b540:	b29b      	uxth	r3, r3
 800b542:	4619      	mov	r1, r3
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7f9 fb15 	bl	8004b74 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b54a:	e0b3      	b.n	800b6b4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b550:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b554:	429a      	cmp	r2, r3
 800b556:	f040 80ad 	bne.w	800b6b4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b55e:	69db      	ldr	r3, [r3, #28]
 800b560:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b564:	f040 80a6 	bne.w	800b6b4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2202      	movs	r2, #2
 800b56c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b572:	4619      	mov	r1, r3
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f7f9 fafd 	bl	8004b74 <HAL_UARTEx_RxEventCallback>
      return;
 800b57a:	e09b      	b.n	800b6b4 <HAL_UART_IRQHandler+0x548>
 800b57c:	0800bcd7 	.word	0x0800bcd7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b588:	b29b      	uxth	r3, r3
 800b58a:	1ad3      	subs	r3, r2, r3
 800b58c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b594:	b29b      	uxth	r3, r3
 800b596:	2b00      	cmp	r3, #0
 800b598:	f000 808e 	beq.w	800b6b8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800b59c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f000 8089 	beq.w	800b6b8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	330c      	adds	r3, #12
 800b5ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b0:	e853 3f00 	ldrex	r3, [r3]
 800b5b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b5b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b5bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	330c      	adds	r3, #12
 800b5c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b5ca:	647a      	str	r2, [r7, #68]	@ 0x44
 800b5cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b5d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b5d2:	e841 2300 	strex	r3, r2, [r1]
 800b5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b5d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d1e3      	bne.n	800b5a6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	3314      	adds	r3, #20
 800b5e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e8:	e853 3f00 	ldrex	r3, [r3]
 800b5ec:	623b      	str	r3, [r7, #32]
   return(result);
 800b5ee:	6a3b      	ldr	r3, [r7, #32]
 800b5f0:	f023 0301 	bic.w	r3, r3, #1
 800b5f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	3314      	adds	r3, #20
 800b5fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b602:	633a      	str	r2, [r7, #48]	@ 0x30
 800b604:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b606:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b60a:	e841 2300 	strex	r3, r2, [r1]
 800b60e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b612:	2b00      	cmp	r3, #0
 800b614:	d1e3      	bne.n	800b5de <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2220      	movs	r2, #32
 800b61a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	330c      	adds	r3, #12
 800b62a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	e853 3f00 	ldrex	r3, [r3]
 800b632:	60fb      	str	r3, [r7, #12]
   return(result);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f023 0310 	bic.w	r3, r3, #16
 800b63a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	330c      	adds	r3, #12
 800b644:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b648:	61fa      	str	r2, [r7, #28]
 800b64a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b64c:	69b9      	ldr	r1, [r7, #24]
 800b64e:	69fa      	ldr	r2, [r7, #28]
 800b650:	e841 2300 	strex	r3, r2, [r1]
 800b654:	617b      	str	r3, [r7, #20]
   return(result);
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d1e3      	bne.n	800b624 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2202      	movs	r2, #2
 800b660:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b662:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b666:	4619      	mov	r1, r3
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f7f9 fa83 	bl	8004b74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b66e:	e023      	b.n	800b6b8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d009      	beq.n	800b690 <HAL_UART_IRQHandler+0x524>
 800b67c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b684:	2b00      	cmp	r3, #0
 800b686:	d003      	beq.n	800b690 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fb35 	bl	800bcf8 <UART_Transmit_IT>
    return;
 800b68e:	e014      	b.n	800b6ba <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d00e      	beq.n	800b6ba <HAL_UART_IRQHandler+0x54e>
 800b69c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d008      	beq.n	800b6ba <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 fb75 	bl	800bd98 <UART_EndTransmit_IT>
    return;
 800b6ae:	e004      	b.n	800b6ba <HAL_UART_IRQHandler+0x54e>
    return;
 800b6b0:	bf00      	nop
 800b6b2:	e002      	b.n	800b6ba <HAL_UART_IRQHandler+0x54e>
      return;
 800b6b4:	bf00      	nop
 800b6b6:	e000      	b.n	800b6ba <HAL_UART_IRQHandler+0x54e>
      return;
 800b6b8:	bf00      	nop
  }
}
 800b6ba:	37e8      	adds	r7, #232	@ 0xe8
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b6c8:	bf00      	nop
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b6dc:	bf00      	nop
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b6f0:	bf00      	nop
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b704:	bf00      	nop
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b090      	sub	sp, #64	@ 0x40
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b71c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d137      	bne.n	800b79c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b72c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b72e:	2200      	movs	r2, #0
 800b730:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	3314      	adds	r3, #20
 800b738:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b73c:	e853 3f00 	ldrex	r3, [r3]
 800b740:	623b      	str	r3, [r7, #32]
   return(result);
 800b742:	6a3b      	ldr	r3, [r7, #32]
 800b744:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b748:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b74a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	3314      	adds	r3, #20
 800b750:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b752:	633a      	str	r2, [r7, #48]	@ 0x30
 800b754:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b756:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b75a:	e841 2300 	strex	r3, r2, [r1]
 800b75e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1e5      	bne.n	800b732 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	330c      	adds	r3, #12
 800b76c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	e853 3f00 	ldrex	r3, [r3]
 800b774:	60fb      	str	r3, [r7, #12]
   return(result);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b77c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b77e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	330c      	adds	r3, #12
 800b784:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b786:	61fa      	str	r2, [r7, #28]
 800b788:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b78a:	69b9      	ldr	r1, [r7, #24]
 800b78c:	69fa      	ldr	r2, [r7, #28]
 800b78e:	e841 2300 	strex	r3, r2, [r1]
 800b792:	617b      	str	r3, [r7, #20]
   return(result);
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1e5      	bne.n	800b766 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b79a:	e002      	b.n	800b7a2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b79c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b79e:	f7f9 fa2b 	bl	8004bf8 <HAL_UART_TxCpltCallback>
}
 800b7a2:	bf00      	nop
 800b7a4:	3740      	adds	r7, #64	@ 0x40
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b084      	sub	sp, #16
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7b6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	f7ff ff81 	bl	800b6c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7be:	bf00      	nop
 800b7c0:	3710      	adds	r7, #16
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b09c      	sub	sp, #112	@ 0x70
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7d2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d172      	bne.n	800b8c8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b7e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	330c      	adds	r3, #12
 800b7ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7f2:	e853 3f00 	ldrex	r3, [r3]
 800b7f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b7f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b800:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	330c      	adds	r3, #12
 800b806:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b808:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b80a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b80e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b810:	e841 2300 	strex	r3, r2, [r1]
 800b814:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b816:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1e5      	bne.n	800b7e8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b81c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	3314      	adds	r3, #20
 800b822:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b826:	e853 3f00 	ldrex	r3, [r3]
 800b82a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b82c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b82e:	f023 0301 	bic.w	r3, r3, #1
 800b832:	667b      	str	r3, [r7, #100]	@ 0x64
 800b834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	3314      	adds	r3, #20
 800b83a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b83c:	647a      	str	r2, [r7, #68]	@ 0x44
 800b83e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b840:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b842:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b844:	e841 2300 	strex	r3, r2, [r1]
 800b848:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b84a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d1e5      	bne.n	800b81c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	3314      	adds	r3, #20
 800b856:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85a:	e853 3f00 	ldrex	r3, [r3]
 800b85e:	623b      	str	r3, [r7, #32]
   return(result);
 800b860:	6a3b      	ldr	r3, [r7, #32]
 800b862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b866:	663b      	str	r3, [r7, #96]	@ 0x60
 800b868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	3314      	adds	r3, #20
 800b86e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b870:	633a      	str	r2, [r7, #48]	@ 0x30
 800b872:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b874:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b878:	e841 2300 	strex	r3, r2, [r1]
 800b87c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b880:	2b00      	cmp	r3, #0
 800b882:	d1e5      	bne.n	800b850 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b884:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b886:	2220      	movs	r2, #32
 800b888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b88c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b88e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b890:	2b01      	cmp	r3, #1
 800b892:	d119      	bne.n	800b8c8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b894:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	330c      	adds	r3, #12
 800b89a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	e853 3f00 	ldrex	r3, [r3]
 800b8a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f023 0310 	bic.w	r3, r3, #16
 800b8aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b8ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	330c      	adds	r3, #12
 800b8b2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b8b4:	61fa      	str	r2, [r7, #28]
 800b8b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b8:	69b9      	ldr	r1, [r7, #24]
 800b8ba:	69fa      	ldr	r2, [r7, #28]
 800b8bc:	e841 2300 	strex	r3, r2, [r1]
 800b8c0:	617b      	str	r3, [r7, #20]
   return(result);
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d1e5      	bne.n	800b894 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d106      	bne.n	800b8e4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b8d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b8da:	4619      	mov	r1, r3
 800b8dc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b8de:	f7f9 f949 	bl	8004b74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b8e2:	e002      	b.n	800b8ea <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b8e4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b8e6:	f7ff fef5 	bl	800b6d4 <HAL_UART_RxCpltCallback>
}
 800b8ea:	bf00      	nop
 800b8ec:	3770      	adds	r7, #112	@ 0x70
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b084      	sub	sp, #16
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8fe:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2201      	movs	r2, #1
 800b904:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d108      	bne.n	800b920 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b912:	085b      	lsrs	r3, r3, #1
 800b914:	b29b      	uxth	r3, r3
 800b916:	4619      	mov	r1, r3
 800b918:	68f8      	ldr	r0, [r7, #12]
 800b91a:	f7f9 f92b 	bl	8004b74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b91e:	e002      	b.n	800b926 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f7ff fee1 	bl	800b6e8 <HAL_UART_RxHalfCpltCallback>
}
 800b926:	bf00      	nop
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b084      	sub	sp, #16
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b936:	2300      	movs	r3, #0
 800b938:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b93e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	695b      	ldr	r3, [r3, #20]
 800b946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b94a:	2b80      	cmp	r3, #128	@ 0x80
 800b94c:	bf0c      	ite	eq
 800b94e:	2301      	moveq	r3, #1
 800b950:	2300      	movne	r3, #0
 800b952:	b2db      	uxtb	r3, r3
 800b954:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	2b21      	cmp	r3, #33	@ 0x21
 800b960:	d108      	bne.n	800b974 <UART_DMAError+0x46>
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d005      	beq.n	800b974 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	2200      	movs	r2, #0
 800b96c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800b96e:	68b8      	ldr	r0, [r7, #8]
 800b970:	f000 f926 	bl	800bbc0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b97e:	2b40      	cmp	r3, #64	@ 0x40
 800b980:	bf0c      	ite	eq
 800b982:	2301      	moveq	r3, #1
 800b984:	2300      	movne	r3, #0
 800b986:	b2db      	uxtb	r3, r3
 800b988:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b990:	b2db      	uxtb	r3, r3
 800b992:	2b22      	cmp	r3, #34	@ 0x22
 800b994:	d108      	bne.n	800b9a8 <UART_DMAError+0x7a>
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d005      	beq.n	800b9a8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800b9a2:	68b8      	ldr	r0, [r7, #8]
 800b9a4:	f000 f934 	bl	800bc10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9ac:	f043 0210 	orr.w	r2, r3, #16
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b9b4:	68b8      	ldr	r0, [r7, #8]
 800b9b6:	f7ff fea1 	bl	800b6fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9ba:	bf00      	nop
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b086      	sub	sp, #24
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	60f8      	str	r0, [r7, #12]
 800b9ca:	60b9      	str	r1, [r7, #8]
 800b9cc:	603b      	str	r3, [r7, #0]
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9d2:	e03b      	b.n	800ba4c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9d4:	6a3b      	ldr	r3, [r7, #32]
 800b9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9da:	d037      	beq.n	800ba4c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9dc:	f7fb ff38 	bl	8007850 <HAL_GetTick>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	1ad3      	subs	r3, r2, r3
 800b9e6:	6a3a      	ldr	r2, [r7, #32]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d302      	bcc.n	800b9f2 <UART_WaitOnFlagUntilTimeout+0x30>
 800b9ec:	6a3b      	ldr	r3, [r7, #32]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d101      	bne.n	800b9f6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b9f2:	2303      	movs	r3, #3
 800b9f4:	e03a      	b.n	800ba6c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	f003 0304 	and.w	r3, r3, #4
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d023      	beq.n	800ba4c <UART_WaitOnFlagUntilTimeout+0x8a>
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	2b80      	cmp	r3, #128	@ 0x80
 800ba08:	d020      	beq.n	800ba4c <UART_WaitOnFlagUntilTimeout+0x8a>
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	2b40      	cmp	r3, #64	@ 0x40
 800ba0e:	d01d      	beq.n	800ba4c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f003 0308 	and.w	r3, r3, #8
 800ba1a:	2b08      	cmp	r3, #8
 800ba1c:	d116      	bne.n	800ba4c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800ba1e:	2300      	movs	r3, #0
 800ba20:	617b      	str	r3, [r7, #20]
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	617b      	str	r3, [r7, #20]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	617b      	str	r3, [r7, #20]
 800ba32:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f000 f8eb 	bl	800bc10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2208      	movs	r2, #8
 800ba3e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2200      	movs	r2, #0
 800ba44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e00f      	b.n	800ba6c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	4013      	ands	r3, r2
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	bf0c      	ite	eq
 800ba5c:	2301      	moveq	r3, #1
 800ba5e:	2300      	movne	r3, #0
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	461a      	mov	r2, r3
 800ba64:	79fb      	ldrb	r3, [r7, #7]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d0b4      	beq.n	800b9d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b098      	sub	sp, #96	@ 0x60
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	4613      	mov	r3, r2
 800ba80:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	88fa      	ldrh	r2, [r7, #6]
 800ba8c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2200      	movs	r2, #0
 800ba92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2222      	movs	r2, #34	@ 0x22
 800ba98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baa0:	4a44      	ldr	r2, [pc, #272]	@ (800bbb4 <UART_Start_Receive_DMA+0x140>)
 800baa2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baa8:	4a43      	ldr	r2, [pc, #268]	@ (800bbb8 <UART_Start_Receive_DMA+0x144>)
 800baaa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bab0:	4a42      	ldr	r2, [pc, #264]	@ (800bbbc <UART_Start_Receive_DMA+0x148>)
 800bab2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bab8:	2200      	movs	r2, #0
 800baba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800babc:	f107 0308 	add.w	r3, r7, #8
 800bac0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	3304      	adds	r3, #4
 800bacc:	4619      	mov	r1, r3
 800bace:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	88fb      	ldrh	r3, [r7, #6]
 800bad4:	f7fc f8de 	bl	8007c94 <HAL_DMA_Start_IT>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d008      	beq.n	800baf0 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2210      	movs	r2, #16
 800bae2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2220      	movs	r2, #32
 800bae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800baec:	2301      	movs	r3, #1
 800baee:	e05d      	b.n	800bbac <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800baf0:	2300      	movs	r3, #0
 800baf2:	613b      	str	r3, [r7, #16]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	613b      	str	r3, [r7, #16]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	613b      	str	r3, [r7, #16]
 800bb04:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d019      	beq.n	800bb42 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	330c      	adds	r3, #12
 800bb14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb18:	e853 3f00 	ldrex	r3, [r3]
 800bb1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bb1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb24:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	330c      	adds	r3, #12
 800bb2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bb2e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800bb30:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb32:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800bb34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb36:	e841 2300 	strex	r3, r2, [r1]
 800bb3a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800bb3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d1e5      	bne.n	800bb0e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	3314      	adds	r3, #20
 800bb48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb4c:	e853 3f00 	ldrex	r3, [r3]
 800bb50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bb52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb54:	f043 0301 	orr.w	r3, r3, #1
 800bb58:	657b      	str	r3, [r7, #84]	@ 0x54
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	3314      	adds	r3, #20
 800bb60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bb62:	63ba      	str	r2, [r7, #56]	@ 0x38
 800bb64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb66:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bb68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb6a:	e841 2300 	strex	r3, r2, [r1]
 800bb6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bb70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1e5      	bne.n	800bb42 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	3314      	adds	r3, #20
 800bb7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb7e:	69bb      	ldr	r3, [r7, #24]
 800bb80:	e853 3f00 	ldrex	r3, [r3]
 800bb84:	617b      	str	r3, [r7, #20]
   return(result);
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb8c:	653b      	str	r3, [r7, #80]	@ 0x50
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	3314      	adds	r3, #20
 800bb94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bb96:	627a      	str	r2, [r7, #36]	@ 0x24
 800bb98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb9a:	6a39      	ldr	r1, [r7, #32]
 800bb9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb9e:	e841 2300 	strex	r3, r2, [r1]
 800bba2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d1e5      	bne.n	800bb76 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800bbaa:	2300      	movs	r3, #0
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3760      	adds	r7, #96	@ 0x60
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	0800b7c7 	.word	0x0800b7c7
 800bbb8:	0800b8f3 	.word	0x0800b8f3
 800bbbc:	0800b92f 	.word	0x0800b92f

0800bbc0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b089      	sub	sp, #36	@ 0x24
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	330c      	adds	r3, #12
 800bbce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	e853 3f00 	ldrex	r3, [r3]
 800bbd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bbde:	61fb      	str	r3, [r7, #28]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	330c      	adds	r3, #12
 800bbe6:	69fa      	ldr	r2, [r7, #28]
 800bbe8:	61ba      	str	r2, [r7, #24]
 800bbea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbec:	6979      	ldr	r1, [r7, #20]
 800bbee:	69ba      	ldr	r2, [r7, #24]
 800bbf0:	e841 2300 	strex	r3, r2, [r1]
 800bbf4:	613b      	str	r3, [r7, #16]
   return(result);
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d1e5      	bne.n	800bbc8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2220      	movs	r2, #32
 800bc00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800bc04:	bf00      	nop
 800bc06:	3724      	adds	r7, #36	@ 0x24
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b095      	sub	sp, #84	@ 0x54
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	330c      	adds	r3, #12
 800bc1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc22:	e853 3f00 	ldrex	r3, [r3]
 800bc26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bc28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	330c      	adds	r3, #12
 800bc36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bc38:	643a      	str	r2, [r7, #64]	@ 0x40
 800bc3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bc3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc40:	e841 2300 	strex	r3, r2, [r1]
 800bc44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bc46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d1e5      	bne.n	800bc18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	3314      	adds	r3, #20
 800bc52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc54:	6a3b      	ldr	r3, [r7, #32]
 800bc56:	e853 3f00 	ldrex	r3, [r3]
 800bc5a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc5c:	69fb      	ldr	r3, [r7, #28]
 800bc5e:	f023 0301 	bic.w	r3, r3, #1
 800bc62:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	3314      	adds	r3, #20
 800bc6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bc6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc74:	e841 2300 	strex	r3, r2, [r1]
 800bc78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d1e5      	bne.n	800bc4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d119      	bne.n	800bcbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	330c      	adds	r3, #12
 800bc8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	e853 3f00 	ldrex	r3, [r3]
 800bc96:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	f023 0310 	bic.w	r3, r3, #16
 800bc9e:	647b      	str	r3, [r7, #68]	@ 0x44
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	330c      	adds	r3, #12
 800bca6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bca8:	61ba      	str	r2, [r7, #24]
 800bcaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcac:	6979      	ldr	r1, [r7, #20]
 800bcae:	69ba      	ldr	r2, [r7, #24]
 800bcb0:	e841 2300 	strex	r3, r2, [r1]
 800bcb4:	613b      	str	r3, [r7, #16]
   return(result);
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d1e5      	bne.n	800bc88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2220      	movs	r2, #32
 800bcc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bcca:	bf00      	nop
 800bccc:	3754      	adds	r7, #84	@ 0x54
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr

0800bcd6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b084      	sub	sp, #16
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bce2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2200      	movs	r2, #0
 800bce8:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bcea:	68f8      	ldr	r0, [r7, #12]
 800bcec:	f7ff fd06 	bl	800b6fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcf0:	bf00      	nop
 800bcf2:	3710      	adds	r7, #16
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	2b21      	cmp	r3, #33	@ 0x21
 800bd0a:	d13e      	bne.n	800bd8a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd14:	d114      	bne.n	800bd40 <UART_Transmit_IT+0x48>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	691b      	ldr	r3, [r3, #16]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d110      	bne.n	800bd40 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6a1b      	ldr	r3, [r3, #32]
 800bd22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	881b      	ldrh	r3, [r3, #0]
 800bd28:	461a      	mov	r2, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd32:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6a1b      	ldr	r3, [r3, #32]
 800bd38:	1c9a      	adds	r2, r3, #2
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	621a      	str	r2, [r3, #32]
 800bd3e:	e008      	b.n	800bd52 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6a1b      	ldr	r3, [r3, #32]
 800bd44:	1c59      	adds	r1, r3, #1
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	6211      	str	r1, [r2, #32]
 800bd4a:	781a      	ldrb	r2, [r3, #0]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	3b01      	subs	r3, #1
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	4619      	mov	r1, r3
 800bd60:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d10f      	bne.n	800bd86 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68da      	ldr	r2, [r3, #12]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bd74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	68da      	ldr	r2, [r3, #12]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bd84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bd86:	2300      	movs	r3, #0
 800bd88:	e000      	b.n	800bd8c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bd8a:	2302      	movs	r3, #2
  }
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3714      	adds	r7, #20
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	68da      	ldr	r2, [r3, #12]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bdae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2220      	movs	r2, #32
 800bdb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f7f8 ff1d 	bl	8004bf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bdbe:	2300      	movs	r3, #0
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b08c      	sub	sp, #48	@ 0x30
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	2b22      	cmp	r3, #34	@ 0x22
 800bde2:	f040 80aa 	bne.w	800bf3a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bdee:	d115      	bne.n	800be1c <UART_Receive_IT+0x54>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d111      	bne.n	800be1c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdfc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	b29b      	uxth	r3, r3
 800be06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be0a:	b29a      	uxth	r2, r3
 800be0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be14:	1c9a      	adds	r2, r3, #2
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	629a      	str	r2, [r3, #40]	@ 0x28
 800be1a:	e024      	b.n	800be66 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be2a:	d007      	beq.n	800be3c <UART_Receive_IT+0x74>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d10a      	bne.n	800be4a <UART_Receive_IT+0x82>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	691b      	ldr	r3, [r3, #16]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d106      	bne.n	800be4a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	b2da      	uxtb	r2, r3
 800be44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be46:	701a      	strb	r2, [r3, #0]
 800be48:	e008      	b.n	800be5c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	b2db      	uxtb	r3, r3
 800be52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be56:	b2da      	uxtb	r2, r3
 800be58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be5a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be60:	1c5a      	adds	r2, r3, #1
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	3b01      	subs	r3, #1
 800be6e:	b29b      	uxth	r3, r3
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	4619      	mov	r1, r3
 800be74:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800be76:	2b00      	cmp	r3, #0
 800be78:	d15d      	bne.n	800bf36 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	68da      	ldr	r2, [r3, #12]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f022 0220 	bic.w	r2, r2, #32
 800be88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68da      	ldr	r2, [r3, #12]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800be98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	695a      	ldr	r2, [r3, #20]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f022 0201 	bic.w	r2, r2, #1
 800bea8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2220      	movs	r2, #32
 800beae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2200      	movs	r2, #0
 800beb6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d135      	bne.n	800bf2c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	330c      	adds	r3, #12
 800becc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	e853 3f00 	ldrex	r3, [r3]
 800bed4:	613b      	str	r3, [r7, #16]
   return(result);
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	f023 0310 	bic.w	r3, r3, #16
 800bedc:	627b      	str	r3, [r7, #36]	@ 0x24
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	330c      	adds	r3, #12
 800bee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bee6:	623a      	str	r2, [r7, #32]
 800bee8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beea:	69f9      	ldr	r1, [r7, #28]
 800beec:	6a3a      	ldr	r2, [r7, #32]
 800beee:	e841 2300 	strex	r3, r2, [r1]
 800bef2:	61bb      	str	r3, [r7, #24]
   return(result);
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1e5      	bne.n	800bec6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f003 0310 	and.w	r3, r3, #16
 800bf04:	2b10      	cmp	r3, #16
 800bf06:	d10a      	bne.n	800bf1e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf08:	2300      	movs	r3, #0
 800bf0a:	60fb      	str	r3, [r7, #12]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	60fb      	str	r3, [r7, #12]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	60fb      	str	r3, [r7, #12]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bf22:	4619      	mov	r1, r3
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f7f8 fe25 	bl	8004b74 <HAL_UARTEx_RxEventCallback>
 800bf2a:	e002      	b.n	800bf32 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f7ff fbd1 	bl	800b6d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bf32:	2300      	movs	r3, #0
 800bf34:	e002      	b.n	800bf3c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bf36:	2300      	movs	r3, #0
 800bf38:	e000      	b.n	800bf3c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bf3a:	2302      	movs	r3, #2
  }
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3730      	adds	r7, #48	@ 0x30
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf48:	b0c0      	sub	sp, #256	@ 0x100
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	691b      	ldr	r3, [r3, #16]
 800bf58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bf5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf60:	68d9      	ldr	r1, [r3, #12]
 800bf62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	ea40 0301 	orr.w	r3, r0, r1
 800bf6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bf6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf72:	689a      	ldr	r2, [r3, #8]
 800bf74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf78:	691b      	ldr	r3, [r3, #16]
 800bf7a:	431a      	orrs	r2, r3
 800bf7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf80:	695b      	ldr	r3, [r3, #20]
 800bf82:	431a      	orrs	r2, r3
 800bf84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf88:	69db      	ldr	r3, [r3, #28]
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bf90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800bf9c:	f021 010c 	bic.w	r1, r1, #12
 800bfa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bfaa:	430b      	orrs	r3, r1
 800bfac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bfae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	695b      	ldr	r3, [r3, #20]
 800bfb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800bfba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfbe:	6999      	ldr	r1, [r3, #24]
 800bfc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	ea40 0301 	orr.w	r3, r0, r1
 800bfca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bfcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	4b8f      	ldr	r3, [pc, #572]	@ (800c210 <UART_SetConfig+0x2cc>)
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d005      	beq.n	800bfe4 <UART_SetConfig+0xa0>
 800bfd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	4b8d      	ldr	r3, [pc, #564]	@ (800c214 <UART_SetConfig+0x2d0>)
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d104      	bne.n	800bfee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bfe4:	f7fd fdbe 	bl	8009b64 <HAL_RCC_GetPCLK2Freq>
 800bfe8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800bfec:	e003      	b.n	800bff6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bfee:	f7fd fda5 	bl	8009b3c <HAL_RCC_GetPCLK1Freq>
 800bff2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bffa:	69db      	ldr	r3, [r3, #28]
 800bffc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c000:	f040 810c 	bne.w	800c21c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c008:	2200      	movs	r2, #0
 800c00a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c00e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c012:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c016:	4622      	mov	r2, r4
 800c018:	462b      	mov	r3, r5
 800c01a:	1891      	adds	r1, r2, r2
 800c01c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c01e:	415b      	adcs	r3, r3
 800c020:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c022:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c026:	4621      	mov	r1, r4
 800c028:	eb12 0801 	adds.w	r8, r2, r1
 800c02c:	4629      	mov	r1, r5
 800c02e:	eb43 0901 	adc.w	r9, r3, r1
 800c032:	f04f 0200 	mov.w	r2, #0
 800c036:	f04f 0300 	mov.w	r3, #0
 800c03a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c03e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c042:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c046:	4690      	mov	r8, r2
 800c048:	4699      	mov	r9, r3
 800c04a:	4623      	mov	r3, r4
 800c04c:	eb18 0303 	adds.w	r3, r8, r3
 800c050:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c054:	462b      	mov	r3, r5
 800c056:	eb49 0303 	adc.w	r3, r9, r3
 800c05a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c05e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	2200      	movs	r2, #0
 800c066:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c06a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c06e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c072:	460b      	mov	r3, r1
 800c074:	18db      	adds	r3, r3, r3
 800c076:	653b      	str	r3, [r7, #80]	@ 0x50
 800c078:	4613      	mov	r3, r2
 800c07a:	eb42 0303 	adc.w	r3, r2, r3
 800c07e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c080:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c084:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c088:	f7f4 ff5c 	bl	8000f44 <__aeabi_uldivmod>
 800c08c:	4602      	mov	r2, r0
 800c08e:	460b      	mov	r3, r1
 800c090:	4b61      	ldr	r3, [pc, #388]	@ (800c218 <UART_SetConfig+0x2d4>)
 800c092:	fba3 2302 	umull	r2, r3, r3, r2
 800c096:	095b      	lsrs	r3, r3, #5
 800c098:	011c      	lsls	r4, r3, #4
 800c09a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c0a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c0a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c0ac:	4642      	mov	r2, r8
 800c0ae:	464b      	mov	r3, r9
 800c0b0:	1891      	adds	r1, r2, r2
 800c0b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c0b4:	415b      	adcs	r3, r3
 800c0b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c0bc:	4641      	mov	r1, r8
 800c0be:	eb12 0a01 	adds.w	sl, r2, r1
 800c0c2:	4649      	mov	r1, r9
 800c0c4:	eb43 0b01 	adc.w	fp, r3, r1
 800c0c8:	f04f 0200 	mov.w	r2, #0
 800c0cc:	f04f 0300 	mov.w	r3, #0
 800c0d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c0d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c0d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c0dc:	4692      	mov	sl, r2
 800c0de:	469b      	mov	fp, r3
 800c0e0:	4643      	mov	r3, r8
 800c0e2:	eb1a 0303 	adds.w	r3, sl, r3
 800c0e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c0ea:	464b      	mov	r3, r9
 800c0ec:	eb4b 0303 	adc.w	r3, fp, r3
 800c0f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c0f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c100:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c104:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c108:	460b      	mov	r3, r1
 800c10a:	18db      	adds	r3, r3, r3
 800c10c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c10e:	4613      	mov	r3, r2
 800c110:	eb42 0303 	adc.w	r3, r2, r3
 800c114:	647b      	str	r3, [r7, #68]	@ 0x44
 800c116:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c11a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c11e:	f7f4 ff11 	bl	8000f44 <__aeabi_uldivmod>
 800c122:	4602      	mov	r2, r0
 800c124:	460b      	mov	r3, r1
 800c126:	4611      	mov	r1, r2
 800c128:	4b3b      	ldr	r3, [pc, #236]	@ (800c218 <UART_SetConfig+0x2d4>)
 800c12a:	fba3 2301 	umull	r2, r3, r3, r1
 800c12e:	095b      	lsrs	r3, r3, #5
 800c130:	2264      	movs	r2, #100	@ 0x64
 800c132:	fb02 f303 	mul.w	r3, r2, r3
 800c136:	1acb      	subs	r3, r1, r3
 800c138:	00db      	lsls	r3, r3, #3
 800c13a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c13e:	4b36      	ldr	r3, [pc, #216]	@ (800c218 <UART_SetConfig+0x2d4>)
 800c140:	fba3 2302 	umull	r2, r3, r3, r2
 800c144:	095b      	lsrs	r3, r3, #5
 800c146:	005b      	lsls	r3, r3, #1
 800c148:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c14c:	441c      	add	r4, r3
 800c14e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c152:	2200      	movs	r2, #0
 800c154:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c158:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c15c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c160:	4642      	mov	r2, r8
 800c162:	464b      	mov	r3, r9
 800c164:	1891      	adds	r1, r2, r2
 800c166:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c168:	415b      	adcs	r3, r3
 800c16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c16c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c170:	4641      	mov	r1, r8
 800c172:	1851      	adds	r1, r2, r1
 800c174:	6339      	str	r1, [r7, #48]	@ 0x30
 800c176:	4649      	mov	r1, r9
 800c178:	414b      	adcs	r3, r1
 800c17a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c17c:	f04f 0200 	mov.w	r2, #0
 800c180:	f04f 0300 	mov.w	r3, #0
 800c184:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c188:	4659      	mov	r1, fp
 800c18a:	00cb      	lsls	r3, r1, #3
 800c18c:	4651      	mov	r1, sl
 800c18e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c192:	4651      	mov	r1, sl
 800c194:	00ca      	lsls	r2, r1, #3
 800c196:	4610      	mov	r0, r2
 800c198:	4619      	mov	r1, r3
 800c19a:	4603      	mov	r3, r0
 800c19c:	4642      	mov	r2, r8
 800c19e:	189b      	adds	r3, r3, r2
 800c1a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c1a4:	464b      	mov	r3, r9
 800c1a6:	460a      	mov	r2, r1
 800c1a8:	eb42 0303 	adc.w	r3, r2, r3
 800c1ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c1b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c1bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c1c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	18db      	adds	r3, r3, r3
 800c1c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c1ca:	4613      	mov	r3, r2
 800c1cc:	eb42 0303 	adc.w	r3, r2, r3
 800c1d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c1d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c1d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c1da:	f7f4 feb3 	bl	8000f44 <__aeabi_uldivmod>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c218 <UART_SetConfig+0x2d4>)
 800c1e4:	fba3 1302 	umull	r1, r3, r3, r2
 800c1e8:	095b      	lsrs	r3, r3, #5
 800c1ea:	2164      	movs	r1, #100	@ 0x64
 800c1ec:	fb01 f303 	mul.w	r3, r1, r3
 800c1f0:	1ad3      	subs	r3, r2, r3
 800c1f2:	00db      	lsls	r3, r3, #3
 800c1f4:	3332      	adds	r3, #50	@ 0x32
 800c1f6:	4a08      	ldr	r2, [pc, #32]	@ (800c218 <UART_SetConfig+0x2d4>)
 800c1f8:	fba2 2303 	umull	r2, r3, r2, r3
 800c1fc:	095b      	lsrs	r3, r3, #5
 800c1fe:	f003 0207 	and.w	r2, r3, #7
 800c202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4422      	add	r2, r4
 800c20a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c20c:	e106      	b.n	800c41c <UART_SetConfig+0x4d8>
 800c20e:	bf00      	nop
 800c210:	40011000 	.word	0x40011000
 800c214:	40011400 	.word	0x40011400
 800c218:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c21c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c220:	2200      	movs	r2, #0
 800c222:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c226:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c22a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c22e:	4642      	mov	r2, r8
 800c230:	464b      	mov	r3, r9
 800c232:	1891      	adds	r1, r2, r2
 800c234:	6239      	str	r1, [r7, #32]
 800c236:	415b      	adcs	r3, r3
 800c238:	627b      	str	r3, [r7, #36]	@ 0x24
 800c23a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c23e:	4641      	mov	r1, r8
 800c240:	1854      	adds	r4, r2, r1
 800c242:	4649      	mov	r1, r9
 800c244:	eb43 0501 	adc.w	r5, r3, r1
 800c248:	f04f 0200 	mov.w	r2, #0
 800c24c:	f04f 0300 	mov.w	r3, #0
 800c250:	00eb      	lsls	r3, r5, #3
 800c252:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c256:	00e2      	lsls	r2, r4, #3
 800c258:	4614      	mov	r4, r2
 800c25a:	461d      	mov	r5, r3
 800c25c:	4643      	mov	r3, r8
 800c25e:	18e3      	adds	r3, r4, r3
 800c260:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c264:	464b      	mov	r3, r9
 800c266:	eb45 0303 	adc.w	r3, r5, r3
 800c26a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c26e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c27a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c27e:	f04f 0200 	mov.w	r2, #0
 800c282:	f04f 0300 	mov.w	r3, #0
 800c286:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c28a:	4629      	mov	r1, r5
 800c28c:	008b      	lsls	r3, r1, #2
 800c28e:	4621      	mov	r1, r4
 800c290:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c294:	4621      	mov	r1, r4
 800c296:	008a      	lsls	r2, r1, #2
 800c298:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c29c:	f7f4 fe52 	bl	8000f44 <__aeabi_uldivmod>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	4b60      	ldr	r3, [pc, #384]	@ (800c428 <UART_SetConfig+0x4e4>)
 800c2a6:	fba3 2302 	umull	r2, r3, r3, r2
 800c2aa:	095b      	lsrs	r3, r3, #5
 800c2ac:	011c      	lsls	r4, r3, #4
 800c2ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c2b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c2bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c2c0:	4642      	mov	r2, r8
 800c2c2:	464b      	mov	r3, r9
 800c2c4:	1891      	adds	r1, r2, r2
 800c2c6:	61b9      	str	r1, [r7, #24]
 800c2c8:	415b      	adcs	r3, r3
 800c2ca:	61fb      	str	r3, [r7, #28]
 800c2cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c2d0:	4641      	mov	r1, r8
 800c2d2:	1851      	adds	r1, r2, r1
 800c2d4:	6139      	str	r1, [r7, #16]
 800c2d6:	4649      	mov	r1, r9
 800c2d8:	414b      	adcs	r3, r1
 800c2da:	617b      	str	r3, [r7, #20]
 800c2dc:	f04f 0200 	mov.w	r2, #0
 800c2e0:	f04f 0300 	mov.w	r3, #0
 800c2e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c2e8:	4659      	mov	r1, fp
 800c2ea:	00cb      	lsls	r3, r1, #3
 800c2ec:	4651      	mov	r1, sl
 800c2ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c2f2:	4651      	mov	r1, sl
 800c2f4:	00ca      	lsls	r2, r1, #3
 800c2f6:	4610      	mov	r0, r2
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	4642      	mov	r2, r8
 800c2fe:	189b      	adds	r3, r3, r2
 800c300:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c304:	464b      	mov	r3, r9
 800c306:	460a      	mov	r2, r1
 800c308:	eb42 0303 	adc.w	r3, r2, r3
 800c30c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c31a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c31c:	f04f 0200 	mov.w	r2, #0
 800c320:	f04f 0300 	mov.w	r3, #0
 800c324:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c328:	4649      	mov	r1, r9
 800c32a:	008b      	lsls	r3, r1, #2
 800c32c:	4641      	mov	r1, r8
 800c32e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c332:	4641      	mov	r1, r8
 800c334:	008a      	lsls	r2, r1, #2
 800c336:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c33a:	f7f4 fe03 	bl	8000f44 <__aeabi_uldivmod>
 800c33e:	4602      	mov	r2, r0
 800c340:	460b      	mov	r3, r1
 800c342:	4611      	mov	r1, r2
 800c344:	4b38      	ldr	r3, [pc, #224]	@ (800c428 <UART_SetConfig+0x4e4>)
 800c346:	fba3 2301 	umull	r2, r3, r3, r1
 800c34a:	095b      	lsrs	r3, r3, #5
 800c34c:	2264      	movs	r2, #100	@ 0x64
 800c34e:	fb02 f303 	mul.w	r3, r2, r3
 800c352:	1acb      	subs	r3, r1, r3
 800c354:	011b      	lsls	r3, r3, #4
 800c356:	3332      	adds	r3, #50	@ 0x32
 800c358:	4a33      	ldr	r2, [pc, #204]	@ (800c428 <UART_SetConfig+0x4e4>)
 800c35a:	fba2 2303 	umull	r2, r3, r2, r3
 800c35e:	095b      	lsrs	r3, r3, #5
 800c360:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c364:	441c      	add	r4, r3
 800c366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c36a:	2200      	movs	r2, #0
 800c36c:	673b      	str	r3, [r7, #112]	@ 0x70
 800c36e:	677a      	str	r2, [r7, #116]	@ 0x74
 800c370:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c374:	4642      	mov	r2, r8
 800c376:	464b      	mov	r3, r9
 800c378:	1891      	adds	r1, r2, r2
 800c37a:	60b9      	str	r1, [r7, #8]
 800c37c:	415b      	adcs	r3, r3
 800c37e:	60fb      	str	r3, [r7, #12]
 800c380:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c384:	4641      	mov	r1, r8
 800c386:	1851      	adds	r1, r2, r1
 800c388:	6039      	str	r1, [r7, #0]
 800c38a:	4649      	mov	r1, r9
 800c38c:	414b      	adcs	r3, r1
 800c38e:	607b      	str	r3, [r7, #4]
 800c390:	f04f 0200 	mov.w	r2, #0
 800c394:	f04f 0300 	mov.w	r3, #0
 800c398:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c39c:	4659      	mov	r1, fp
 800c39e:	00cb      	lsls	r3, r1, #3
 800c3a0:	4651      	mov	r1, sl
 800c3a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c3a6:	4651      	mov	r1, sl
 800c3a8:	00ca      	lsls	r2, r1, #3
 800c3aa:	4610      	mov	r0, r2
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	4642      	mov	r2, r8
 800c3b2:	189b      	adds	r3, r3, r2
 800c3b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c3b6:	464b      	mov	r3, r9
 800c3b8:	460a      	mov	r2, r1
 800c3ba:	eb42 0303 	adc.w	r3, r2, r3
 800c3be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c3c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	663b      	str	r3, [r7, #96]	@ 0x60
 800c3ca:	667a      	str	r2, [r7, #100]	@ 0x64
 800c3cc:	f04f 0200 	mov.w	r2, #0
 800c3d0:	f04f 0300 	mov.w	r3, #0
 800c3d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c3d8:	4649      	mov	r1, r9
 800c3da:	008b      	lsls	r3, r1, #2
 800c3dc:	4641      	mov	r1, r8
 800c3de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c3e2:	4641      	mov	r1, r8
 800c3e4:	008a      	lsls	r2, r1, #2
 800c3e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c3ea:	f7f4 fdab 	bl	8000f44 <__aeabi_uldivmod>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	4b0d      	ldr	r3, [pc, #52]	@ (800c428 <UART_SetConfig+0x4e4>)
 800c3f4:	fba3 1302 	umull	r1, r3, r3, r2
 800c3f8:	095b      	lsrs	r3, r3, #5
 800c3fa:	2164      	movs	r1, #100	@ 0x64
 800c3fc:	fb01 f303 	mul.w	r3, r1, r3
 800c400:	1ad3      	subs	r3, r2, r3
 800c402:	011b      	lsls	r3, r3, #4
 800c404:	3332      	adds	r3, #50	@ 0x32
 800c406:	4a08      	ldr	r2, [pc, #32]	@ (800c428 <UART_SetConfig+0x4e4>)
 800c408:	fba2 2303 	umull	r2, r3, r2, r3
 800c40c:	095b      	lsrs	r3, r3, #5
 800c40e:	f003 020f 	and.w	r2, r3, #15
 800c412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4422      	add	r2, r4
 800c41a:	609a      	str	r2, [r3, #8]
}
 800c41c:	bf00      	nop
 800c41e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c422:	46bd      	mov	sp, r7
 800c424:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c428:	51eb851f 	.word	0x51eb851f

0800c42c <__cvt>:
 800c42c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c430:	ec57 6b10 	vmov	r6, r7, d0
 800c434:	2f00      	cmp	r7, #0
 800c436:	460c      	mov	r4, r1
 800c438:	4619      	mov	r1, r3
 800c43a:	463b      	mov	r3, r7
 800c43c:	bfbb      	ittet	lt
 800c43e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c442:	461f      	movlt	r7, r3
 800c444:	2300      	movge	r3, #0
 800c446:	232d      	movlt	r3, #45	@ 0x2d
 800c448:	700b      	strb	r3, [r1, #0]
 800c44a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c44c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c450:	4691      	mov	r9, r2
 800c452:	f023 0820 	bic.w	r8, r3, #32
 800c456:	bfbc      	itt	lt
 800c458:	4632      	movlt	r2, r6
 800c45a:	4616      	movlt	r6, r2
 800c45c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c460:	d005      	beq.n	800c46e <__cvt+0x42>
 800c462:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c466:	d100      	bne.n	800c46a <__cvt+0x3e>
 800c468:	3401      	adds	r4, #1
 800c46a:	2102      	movs	r1, #2
 800c46c:	e000      	b.n	800c470 <__cvt+0x44>
 800c46e:	2103      	movs	r1, #3
 800c470:	ab03      	add	r3, sp, #12
 800c472:	9301      	str	r3, [sp, #4]
 800c474:	ab02      	add	r3, sp, #8
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	ec47 6b10 	vmov	d0, r6, r7
 800c47c:	4653      	mov	r3, sl
 800c47e:	4622      	mov	r2, r4
 800c480:	f000 fe5a 	bl	800d138 <_dtoa_r>
 800c484:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c488:	4605      	mov	r5, r0
 800c48a:	d119      	bne.n	800c4c0 <__cvt+0x94>
 800c48c:	f019 0f01 	tst.w	r9, #1
 800c490:	d00e      	beq.n	800c4b0 <__cvt+0x84>
 800c492:	eb00 0904 	add.w	r9, r0, r4
 800c496:	2200      	movs	r2, #0
 800c498:	2300      	movs	r3, #0
 800c49a:	4630      	mov	r0, r6
 800c49c:	4639      	mov	r1, r7
 800c49e:	f7f4 fb33 	bl	8000b08 <__aeabi_dcmpeq>
 800c4a2:	b108      	cbz	r0, 800c4a8 <__cvt+0x7c>
 800c4a4:	f8cd 900c 	str.w	r9, [sp, #12]
 800c4a8:	2230      	movs	r2, #48	@ 0x30
 800c4aa:	9b03      	ldr	r3, [sp, #12]
 800c4ac:	454b      	cmp	r3, r9
 800c4ae:	d31e      	bcc.n	800c4ee <__cvt+0xc2>
 800c4b0:	9b03      	ldr	r3, [sp, #12]
 800c4b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c4b4:	1b5b      	subs	r3, r3, r5
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	6013      	str	r3, [r2, #0]
 800c4ba:	b004      	add	sp, #16
 800c4bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c4c4:	eb00 0904 	add.w	r9, r0, r4
 800c4c8:	d1e5      	bne.n	800c496 <__cvt+0x6a>
 800c4ca:	7803      	ldrb	r3, [r0, #0]
 800c4cc:	2b30      	cmp	r3, #48	@ 0x30
 800c4ce:	d10a      	bne.n	800c4e6 <__cvt+0xba>
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	4639      	mov	r1, r7
 800c4d8:	f7f4 fb16 	bl	8000b08 <__aeabi_dcmpeq>
 800c4dc:	b918      	cbnz	r0, 800c4e6 <__cvt+0xba>
 800c4de:	f1c4 0401 	rsb	r4, r4, #1
 800c4e2:	f8ca 4000 	str.w	r4, [sl]
 800c4e6:	f8da 3000 	ldr.w	r3, [sl]
 800c4ea:	4499      	add	r9, r3
 800c4ec:	e7d3      	b.n	800c496 <__cvt+0x6a>
 800c4ee:	1c59      	adds	r1, r3, #1
 800c4f0:	9103      	str	r1, [sp, #12]
 800c4f2:	701a      	strb	r2, [r3, #0]
 800c4f4:	e7d9      	b.n	800c4aa <__cvt+0x7e>

0800c4f6 <__exponent>:
 800c4f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4f8:	2900      	cmp	r1, #0
 800c4fa:	bfba      	itte	lt
 800c4fc:	4249      	neglt	r1, r1
 800c4fe:	232d      	movlt	r3, #45	@ 0x2d
 800c500:	232b      	movge	r3, #43	@ 0x2b
 800c502:	2909      	cmp	r1, #9
 800c504:	7002      	strb	r2, [r0, #0]
 800c506:	7043      	strb	r3, [r0, #1]
 800c508:	dd29      	ble.n	800c55e <__exponent+0x68>
 800c50a:	f10d 0307 	add.w	r3, sp, #7
 800c50e:	461d      	mov	r5, r3
 800c510:	270a      	movs	r7, #10
 800c512:	461a      	mov	r2, r3
 800c514:	fbb1 f6f7 	udiv	r6, r1, r7
 800c518:	fb07 1416 	mls	r4, r7, r6, r1
 800c51c:	3430      	adds	r4, #48	@ 0x30
 800c51e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c522:	460c      	mov	r4, r1
 800c524:	2c63      	cmp	r4, #99	@ 0x63
 800c526:	f103 33ff 	add.w	r3, r3, #4294967295
 800c52a:	4631      	mov	r1, r6
 800c52c:	dcf1      	bgt.n	800c512 <__exponent+0x1c>
 800c52e:	3130      	adds	r1, #48	@ 0x30
 800c530:	1e94      	subs	r4, r2, #2
 800c532:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c536:	1c41      	adds	r1, r0, #1
 800c538:	4623      	mov	r3, r4
 800c53a:	42ab      	cmp	r3, r5
 800c53c:	d30a      	bcc.n	800c554 <__exponent+0x5e>
 800c53e:	f10d 0309 	add.w	r3, sp, #9
 800c542:	1a9b      	subs	r3, r3, r2
 800c544:	42ac      	cmp	r4, r5
 800c546:	bf88      	it	hi
 800c548:	2300      	movhi	r3, #0
 800c54a:	3302      	adds	r3, #2
 800c54c:	4403      	add	r3, r0
 800c54e:	1a18      	subs	r0, r3, r0
 800c550:	b003      	add	sp, #12
 800c552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c554:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c558:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c55c:	e7ed      	b.n	800c53a <__exponent+0x44>
 800c55e:	2330      	movs	r3, #48	@ 0x30
 800c560:	3130      	adds	r1, #48	@ 0x30
 800c562:	7083      	strb	r3, [r0, #2]
 800c564:	70c1      	strb	r1, [r0, #3]
 800c566:	1d03      	adds	r3, r0, #4
 800c568:	e7f1      	b.n	800c54e <__exponent+0x58>
	...

0800c56c <_printf_float>:
 800c56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c570:	b08d      	sub	sp, #52	@ 0x34
 800c572:	460c      	mov	r4, r1
 800c574:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c578:	4616      	mov	r6, r2
 800c57a:	461f      	mov	r7, r3
 800c57c:	4605      	mov	r5, r0
 800c57e:	f000 fccb 	bl	800cf18 <_localeconv_r>
 800c582:	6803      	ldr	r3, [r0, #0]
 800c584:	9304      	str	r3, [sp, #16]
 800c586:	4618      	mov	r0, r3
 800c588:	f7f3 fe92 	bl	80002b0 <strlen>
 800c58c:	2300      	movs	r3, #0
 800c58e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c590:	f8d8 3000 	ldr.w	r3, [r8]
 800c594:	9005      	str	r0, [sp, #20]
 800c596:	3307      	adds	r3, #7
 800c598:	f023 0307 	bic.w	r3, r3, #7
 800c59c:	f103 0208 	add.w	r2, r3, #8
 800c5a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c5a4:	f8d4 b000 	ldr.w	fp, [r4]
 800c5a8:	f8c8 2000 	str.w	r2, [r8]
 800c5ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c5b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c5b4:	9307      	str	r3, [sp, #28]
 800c5b6:	f8cd 8018 	str.w	r8, [sp, #24]
 800c5ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c5be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5c2:	4b9c      	ldr	r3, [pc, #624]	@ (800c834 <_printf_float+0x2c8>)
 800c5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c5c8:	f7f4 fad0 	bl	8000b6c <__aeabi_dcmpun>
 800c5cc:	bb70      	cbnz	r0, 800c62c <_printf_float+0xc0>
 800c5ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5d2:	4b98      	ldr	r3, [pc, #608]	@ (800c834 <_printf_float+0x2c8>)
 800c5d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c5d8:	f7f4 faaa 	bl	8000b30 <__aeabi_dcmple>
 800c5dc:	bb30      	cbnz	r0, 800c62c <_printf_float+0xc0>
 800c5de:	2200      	movs	r2, #0
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	4640      	mov	r0, r8
 800c5e4:	4649      	mov	r1, r9
 800c5e6:	f7f4 fa99 	bl	8000b1c <__aeabi_dcmplt>
 800c5ea:	b110      	cbz	r0, 800c5f2 <_printf_float+0x86>
 800c5ec:	232d      	movs	r3, #45	@ 0x2d
 800c5ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c5f2:	4a91      	ldr	r2, [pc, #580]	@ (800c838 <_printf_float+0x2cc>)
 800c5f4:	4b91      	ldr	r3, [pc, #580]	@ (800c83c <_printf_float+0x2d0>)
 800c5f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c5fa:	bf94      	ite	ls
 800c5fc:	4690      	movls	r8, r2
 800c5fe:	4698      	movhi	r8, r3
 800c600:	2303      	movs	r3, #3
 800c602:	6123      	str	r3, [r4, #16]
 800c604:	f02b 0304 	bic.w	r3, fp, #4
 800c608:	6023      	str	r3, [r4, #0]
 800c60a:	f04f 0900 	mov.w	r9, #0
 800c60e:	9700      	str	r7, [sp, #0]
 800c610:	4633      	mov	r3, r6
 800c612:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c614:	4621      	mov	r1, r4
 800c616:	4628      	mov	r0, r5
 800c618:	f000 f9d2 	bl	800c9c0 <_printf_common>
 800c61c:	3001      	adds	r0, #1
 800c61e:	f040 808d 	bne.w	800c73c <_printf_float+0x1d0>
 800c622:	f04f 30ff 	mov.w	r0, #4294967295
 800c626:	b00d      	add	sp, #52	@ 0x34
 800c628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c62c:	4642      	mov	r2, r8
 800c62e:	464b      	mov	r3, r9
 800c630:	4640      	mov	r0, r8
 800c632:	4649      	mov	r1, r9
 800c634:	f7f4 fa9a 	bl	8000b6c <__aeabi_dcmpun>
 800c638:	b140      	cbz	r0, 800c64c <_printf_float+0xe0>
 800c63a:	464b      	mov	r3, r9
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	bfbc      	itt	lt
 800c640:	232d      	movlt	r3, #45	@ 0x2d
 800c642:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c646:	4a7e      	ldr	r2, [pc, #504]	@ (800c840 <_printf_float+0x2d4>)
 800c648:	4b7e      	ldr	r3, [pc, #504]	@ (800c844 <_printf_float+0x2d8>)
 800c64a:	e7d4      	b.n	800c5f6 <_printf_float+0x8a>
 800c64c:	6863      	ldr	r3, [r4, #4]
 800c64e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c652:	9206      	str	r2, [sp, #24]
 800c654:	1c5a      	adds	r2, r3, #1
 800c656:	d13b      	bne.n	800c6d0 <_printf_float+0x164>
 800c658:	2306      	movs	r3, #6
 800c65a:	6063      	str	r3, [r4, #4]
 800c65c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c660:	2300      	movs	r3, #0
 800c662:	6022      	str	r2, [r4, #0]
 800c664:	9303      	str	r3, [sp, #12]
 800c666:	ab0a      	add	r3, sp, #40	@ 0x28
 800c668:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c66c:	ab09      	add	r3, sp, #36	@ 0x24
 800c66e:	9300      	str	r3, [sp, #0]
 800c670:	6861      	ldr	r1, [r4, #4]
 800c672:	ec49 8b10 	vmov	d0, r8, r9
 800c676:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c67a:	4628      	mov	r0, r5
 800c67c:	f7ff fed6 	bl	800c42c <__cvt>
 800c680:	9b06      	ldr	r3, [sp, #24]
 800c682:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c684:	2b47      	cmp	r3, #71	@ 0x47
 800c686:	4680      	mov	r8, r0
 800c688:	d129      	bne.n	800c6de <_printf_float+0x172>
 800c68a:	1cc8      	adds	r0, r1, #3
 800c68c:	db02      	blt.n	800c694 <_printf_float+0x128>
 800c68e:	6863      	ldr	r3, [r4, #4]
 800c690:	4299      	cmp	r1, r3
 800c692:	dd41      	ble.n	800c718 <_printf_float+0x1ac>
 800c694:	f1aa 0a02 	sub.w	sl, sl, #2
 800c698:	fa5f fa8a 	uxtb.w	sl, sl
 800c69c:	3901      	subs	r1, #1
 800c69e:	4652      	mov	r2, sl
 800c6a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c6a4:	9109      	str	r1, [sp, #36]	@ 0x24
 800c6a6:	f7ff ff26 	bl	800c4f6 <__exponent>
 800c6aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c6ac:	1813      	adds	r3, r2, r0
 800c6ae:	2a01      	cmp	r2, #1
 800c6b0:	4681      	mov	r9, r0
 800c6b2:	6123      	str	r3, [r4, #16]
 800c6b4:	dc02      	bgt.n	800c6bc <_printf_float+0x150>
 800c6b6:	6822      	ldr	r2, [r4, #0]
 800c6b8:	07d2      	lsls	r2, r2, #31
 800c6ba:	d501      	bpl.n	800c6c0 <_printf_float+0x154>
 800c6bc:	3301      	adds	r3, #1
 800c6be:	6123      	str	r3, [r4, #16]
 800c6c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d0a2      	beq.n	800c60e <_printf_float+0xa2>
 800c6c8:	232d      	movs	r3, #45	@ 0x2d
 800c6ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6ce:	e79e      	b.n	800c60e <_printf_float+0xa2>
 800c6d0:	9a06      	ldr	r2, [sp, #24]
 800c6d2:	2a47      	cmp	r2, #71	@ 0x47
 800c6d4:	d1c2      	bne.n	800c65c <_printf_float+0xf0>
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1c0      	bne.n	800c65c <_printf_float+0xf0>
 800c6da:	2301      	movs	r3, #1
 800c6dc:	e7bd      	b.n	800c65a <_printf_float+0xee>
 800c6de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c6e2:	d9db      	bls.n	800c69c <_printf_float+0x130>
 800c6e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c6e8:	d118      	bne.n	800c71c <_printf_float+0x1b0>
 800c6ea:	2900      	cmp	r1, #0
 800c6ec:	6863      	ldr	r3, [r4, #4]
 800c6ee:	dd0b      	ble.n	800c708 <_printf_float+0x19c>
 800c6f0:	6121      	str	r1, [r4, #16]
 800c6f2:	b913      	cbnz	r3, 800c6fa <_printf_float+0x18e>
 800c6f4:	6822      	ldr	r2, [r4, #0]
 800c6f6:	07d0      	lsls	r0, r2, #31
 800c6f8:	d502      	bpl.n	800c700 <_printf_float+0x194>
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	440b      	add	r3, r1
 800c6fe:	6123      	str	r3, [r4, #16]
 800c700:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c702:	f04f 0900 	mov.w	r9, #0
 800c706:	e7db      	b.n	800c6c0 <_printf_float+0x154>
 800c708:	b913      	cbnz	r3, 800c710 <_printf_float+0x1a4>
 800c70a:	6822      	ldr	r2, [r4, #0]
 800c70c:	07d2      	lsls	r2, r2, #31
 800c70e:	d501      	bpl.n	800c714 <_printf_float+0x1a8>
 800c710:	3302      	adds	r3, #2
 800c712:	e7f4      	b.n	800c6fe <_printf_float+0x192>
 800c714:	2301      	movs	r3, #1
 800c716:	e7f2      	b.n	800c6fe <_printf_float+0x192>
 800c718:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c71c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c71e:	4299      	cmp	r1, r3
 800c720:	db05      	blt.n	800c72e <_printf_float+0x1c2>
 800c722:	6823      	ldr	r3, [r4, #0]
 800c724:	6121      	str	r1, [r4, #16]
 800c726:	07d8      	lsls	r0, r3, #31
 800c728:	d5ea      	bpl.n	800c700 <_printf_float+0x194>
 800c72a:	1c4b      	adds	r3, r1, #1
 800c72c:	e7e7      	b.n	800c6fe <_printf_float+0x192>
 800c72e:	2900      	cmp	r1, #0
 800c730:	bfd4      	ite	le
 800c732:	f1c1 0202 	rsble	r2, r1, #2
 800c736:	2201      	movgt	r2, #1
 800c738:	4413      	add	r3, r2
 800c73a:	e7e0      	b.n	800c6fe <_printf_float+0x192>
 800c73c:	6823      	ldr	r3, [r4, #0]
 800c73e:	055a      	lsls	r2, r3, #21
 800c740:	d407      	bmi.n	800c752 <_printf_float+0x1e6>
 800c742:	6923      	ldr	r3, [r4, #16]
 800c744:	4642      	mov	r2, r8
 800c746:	4631      	mov	r1, r6
 800c748:	4628      	mov	r0, r5
 800c74a:	47b8      	blx	r7
 800c74c:	3001      	adds	r0, #1
 800c74e:	d12b      	bne.n	800c7a8 <_printf_float+0x23c>
 800c750:	e767      	b.n	800c622 <_printf_float+0xb6>
 800c752:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c756:	f240 80dd 	bls.w	800c914 <_printf_float+0x3a8>
 800c75a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c75e:	2200      	movs	r2, #0
 800c760:	2300      	movs	r3, #0
 800c762:	f7f4 f9d1 	bl	8000b08 <__aeabi_dcmpeq>
 800c766:	2800      	cmp	r0, #0
 800c768:	d033      	beq.n	800c7d2 <_printf_float+0x266>
 800c76a:	4a37      	ldr	r2, [pc, #220]	@ (800c848 <_printf_float+0x2dc>)
 800c76c:	2301      	movs	r3, #1
 800c76e:	4631      	mov	r1, r6
 800c770:	4628      	mov	r0, r5
 800c772:	47b8      	blx	r7
 800c774:	3001      	adds	r0, #1
 800c776:	f43f af54 	beq.w	800c622 <_printf_float+0xb6>
 800c77a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c77e:	4543      	cmp	r3, r8
 800c780:	db02      	blt.n	800c788 <_printf_float+0x21c>
 800c782:	6823      	ldr	r3, [r4, #0]
 800c784:	07d8      	lsls	r0, r3, #31
 800c786:	d50f      	bpl.n	800c7a8 <_printf_float+0x23c>
 800c788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c78c:	4631      	mov	r1, r6
 800c78e:	4628      	mov	r0, r5
 800c790:	47b8      	blx	r7
 800c792:	3001      	adds	r0, #1
 800c794:	f43f af45 	beq.w	800c622 <_printf_float+0xb6>
 800c798:	f04f 0900 	mov.w	r9, #0
 800c79c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c7a0:	f104 0a1a 	add.w	sl, r4, #26
 800c7a4:	45c8      	cmp	r8, r9
 800c7a6:	dc09      	bgt.n	800c7bc <_printf_float+0x250>
 800c7a8:	6823      	ldr	r3, [r4, #0]
 800c7aa:	079b      	lsls	r3, r3, #30
 800c7ac:	f100 8103 	bmi.w	800c9b6 <_printf_float+0x44a>
 800c7b0:	68e0      	ldr	r0, [r4, #12]
 800c7b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7b4:	4298      	cmp	r0, r3
 800c7b6:	bfb8      	it	lt
 800c7b8:	4618      	movlt	r0, r3
 800c7ba:	e734      	b.n	800c626 <_printf_float+0xba>
 800c7bc:	2301      	movs	r3, #1
 800c7be:	4652      	mov	r2, sl
 800c7c0:	4631      	mov	r1, r6
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	47b8      	blx	r7
 800c7c6:	3001      	adds	r0, #1
 800c7c8:	f43f af2b 	beq.w	800c622 <_printf_float+0xb6>
 800c7cc:	f109 0901 	add.w	r9, r9, #1
 800c7d0:	e7e8      	b.n	800c7a4 <_printf_float+0x238>
 800c7d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	dc39      	bgt.n	800c84c <_printf_float+0x2e0>
 800c7d8:	4a1b      	ldr	r2, [pc, #108]	@ (800c848 <_printf_float+0x2dc>)
 800c7da:	2301      	movs	r3, #1
 800c7dc:	4631      	mov	r1, r6
 800c7de:	4628      	mov	r0, r5
 800c7e0:	47b8      	blx	r7
 800c7e2:	3001      	adds	r0, #1
 800c7e4:	f43f af1d 	beq.w	800c622 <_printf_float+0xb6>
 800c7e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c7ec:	ea59 0303 	orrs.w	r3, r9, r3
 800c7f0:	d102      	bne.n	800c7f8 <_printf_float+0x28c>
 800c7f2:	6823      	ldr	r3, [r4, #0]
 800c7f4:	07d9      	lsls	r1, r3, #31
 800c7f6:	d5d7      	bpl.n	800c7a8 <_printf_float+0x23c>
 800c7f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7fc:	4631      	mov	r1, r6
 800c7fe:	4628      	mov	r0, r5
 800c800:	47b8      	blx	r7
 800c802:	3001      	adds	r0, #1
 800c804:	f43f af0d 	beq.w	800c622 <_printf_float+0xb6>
 800c808:	f04f 0a00 	mov.w	sl, #0
 800c80c:	f104 0b1a 	add.w	fp, r4, #26
 800c810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c812:	425b      	negs	r3, r3
 800c814:	4553      	cmp	r3, sl
 800c816:	dc01      	bgt.n	800c81c <_printf_float+0x2b0>
 800c818:	464b      	mov	r3, r9
 800c81a:	e793      	b.n	800c744 <_printf_float+0x1d8>
 800c81c:	2301      	movs	r3, #1
 800c81e:	465a      	mov	r2, fp
 800c820:	4631      	mov	r1, r6
 800c822:	4628      	mov	r0, r5
 800c824:	47b8      	blx	r7
 800c826:	3001      	adds	r0, #1
 800c828:	f43f aefb 	beq.w	800c622 <_printf_float+0xb6>
 800c82c:	f10a 0a01 	add.w	sl, sl, #1
 800c830:	e7ee      	b.n	800c810 <_printf_float+0x2a4>
 800c832:	bf00      	nop
 800c834:	7fefffff 	.word	0x7fefffff
 800c838:	080114f8 	.word	0x080114f8
 800c83c:	080114fc 	.word	0x080114fc
 800c840:	08011500 	.word	0x08011500
 800c844:	08011504 	.word	0x08011504
 800c848:	08011508 	.word	0x08011508
 800c84c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c84e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c852:	4553      	cmp	r3, sl
 800c854:	bfa8      	it	ge
 800c856:	4653      	movge	r3, sl
 800c858:	2b00      	cmp	r3, #0
 800c85a:	4699      	mov	r9, r3
 800c85c:	dc36      	bgt.n	800c8cc <_printf_float+0x360>
 800c85e:	f04f 0b00 	mov.w	fp, #0
 800c862:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c866:	f104 021a 	add.w	r2, r4, #26
 800c86a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c86c:	9306      	str	r3, [sp, #24]
 800c86e:	eba3 0309 	sub.w	r3, r3, r9
 800c872:	455b      	cmp	r3, fp
 800c874:	dc31      	bgt.n	800c8da <_printf_float+0x36e>
 800c876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c878:	459a      	cmp	sl, r3
 800c87a:	dc3a      	bgt.n	800c8f2 <_printf_float+0x386>
 800c87c:	6823      	ldr	r3, [r4, #0]
 800c87e:	07da      	lsls	r2, r3, #31
 800c880:	d437      	bmi.n	800c8f2 <_printf_float+0x386>
 800c882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c884:	ebaa 0903 	sub.w	r9, sl, r3
 800c888:	9b06      	ldr	r3, [sp, #24]
 800c88a:	ebaa 0303 	sub.w	r3, sl, r3
 800c88e:	4599      	cmp	r9, r3
 800c890:	bfa8      	it	ge
 800c892:	4699      	movge	r9, r3
 800c894:	f1b9 0f00 	cmp.w	r9, #0
 800c898:	dc33      	bgt.n	800c902 <_printf_float+0x396>
 800c89a:	f04f 0800 	mov.w	r8, #0
 800c89e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8a2:	f104 0b1a 	add.w	fp, r4, #26
 800c8a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8a8:	ebaa 0303 	sub.w	r3, sl, r3
 800c8ac:	eba3 0309 	sub.w	r3, r3, r9
 800c8b0:	4543      	cmp	r3, r8
 800c8b2:	f77f af79 	ble.w	800c7a8 <_printf_float+0x23c>
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	465a      	mov	r2, fp
 800c8ba:	4631      	mov	r1, r6
 800c8bc:	4628      	mov	r0, r5
 800c8be:	47b8      	blx	r7
 800c8c0:	3001      	adds	r0, #1
 800c8c2:	f43f aeae 	beq.w	800c622 <_printf_float+0xb6>
 800c8c6:	f108 0801 	add.w	r8, r8, #1
 800c8ca:	e7ec      	b.n	800c8a6 <_printf_float+0x33a>
 800c8cc:	4642      	mov	r2, r8
 800c8ce:	4631      	mov	r1, r6
 800c8d0:	4628      	mov	r0, r5
 800c8d2:	47b8      	blx	r7
 800c8d4:	3001      	adds	r0, #1
 800c8d6:	d1c2      	bne.n	800c85e <_printf_float+0x2f2>
 800c8d8:	e6a3      	b.n	800c622 <_printf_float+0xb6>
 800c8da:	2301      	movs	r3, #1
 800c8dc:	4631      	mov	r1, r6
 800c8de:	4628      	mov	r0, r5
 800c8e0:	9206      	str	r2, [sp, #24]
 800c8e2:	47b8      	blx	r7
 800c8e4:	3001      	adds	r0, #1
 800c8e6:	f43f ae9c 	beq.w	800c622 <_printf_float+0xb6>
 800c8ea:	9a06      	ldr	r2, [sp, #24]
 800c8ec:	f10b 0b01 	add.w	fp, fp, #1
 800c8f0:	e7bb      	b.n	800c86a <_printf_float+0x2fe>
 800c8f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8f6:	4631      	mov	r1, r6
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	47b8      	blx	r7
 800c8fc:	3001      	adds	r0, #1
 800c8fe:	d1c0      	bne.n	800c882 <_printf_float+0x316>
 800c900:	e68f      	b.n	800c622 <_printf_float+0xb6>
 800c902:	9a06      	ldr	r2, [sp, #24]
 800c904:	464b      	mov	r3, r9
 800c906:	4442      	add	r2, r8
 800c908:	4631      	mov	r1, r6
 800c90a:	4628      	mov	r0, r5
 800c90c:	47b8      	blx	r7
 800c90e:	3001      	adds	r0, #1
 800c910:	d1c3      	bne.n	800c89a <_printf_float+0x32e>
 800c912:	e686      	b.n	800c622 <_printf_float+0xb6>
 800c914:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c918:	f1ba 0f01 	cmp.w	sl, #1
 800c91c:	dc01      	bgt.n	800c922 <_printf_float+0x3b6>
 800c91e:	07db      	lsls	r3, r3, #31
 800c920:	d536      	bpl.n	800c990 <_printf_float+0x424>
 800c922:	2301      	movs	r3, #1
 800c924:	4642      	mov	r2, r8
 800c926:	4631      	mov	r1, r6
 800c928:	4628      	mov	r0, r5
 800c92a:	47b8      	blx	r7
 800c92c:	3001      	adds	r0, #1
 800c92e:	f43f ae78 	beq.w	800c622 <_printf_float+0xb6>
 800c932:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c936:	4631      	mov	r1, r6
 800c938:	4628      	mov	r0, r5
 800c93a:	47b8      	blx	r7
 800c93c:	3001      	adds	r0, #1
 800c93e:	f43f ae70 	beq.w	800c622 <_printf_float+0xb6>
 800c942:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c946:	2200      	movs	r2, #0
 800c948:	2300      	movs	r3, #0
 800c94a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c94e:	f7f4 f8db 	bl	8000b08 <__aeabi_dcmpeq>
 800c952:	b9c0      	cbnz	r0, 800c986 <_printf_float+0x41a>
 800c954:	4653      	mov	r3, sl
 800c956:	f108 0201 	add.w	r2, r8, #1
 800c95a:	4631      	mov	r1, r6
 800c95c:	4628      	mov	r0, r5
 800c95e:	47b8      	blx	r7
 800c960:	3001      	adds	r0, #1
 800c962:	d10c      	bne.n	800c97e <_printf_float+0x412>
 800c964:	e65d      	b.n	800c622 <_printf_float+0xb6>
 800c966:	2301      	movs	r3, #1
 800c968:	465a      	mov	r2, fp
 800c96a:	4631      	mov	r1, r6
 800c96c:	4628      	mov	r0, r5
 800c96e:	47b8      	blx	r7
 800c970:	3001      	adds	r0, #1
 800c972:	f43f ae56 	beq.w	800c622 <_printf_float+0xb6>
 800c976:	f108 0801 	add.w	r8, r8, #1
 800c97a:	45d0      	cmp	r8, sl
 800c97c:	dbf3      	blt.n	800c966 <_printf_float+0x3fa>
 800c97e:	464b      	mov	r3, r9
 800c980:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c984:	e6df      	b.n	800c746 <_printf_float+0x1da>
 800c986:	f04f 0800 	mov.w	r8, #0
 800c98a:	f104 0b1a 	add.w	fp, r4, #26
 800c98e:	e7f4      	b.n	800c97a <_printf_float+0x40e>
 800c990:	2301      	movs	r3, #1
 800c992:	4642      	mov	r2, r8
 800c994:	e7e1      	b.n	800c95a <_printf_float+0x3ee>
 800c996:	2301      	movs	r3, #1
 800c998:	464a      	mov	r2, r9
 800c99a:	4631      	mov	r1, r6
 800c99c:	4628      	mov	r0, r5
 800c99e:	47b8      	blx	r7
 800c9a0:	3001      	adds	r0, #1
 800c9a2:	f43f ae3e 	beq.w	800c622 <_printf_float+0xb6>
 800c9a6:	f108 0801 	add.w	r8, r8, #1
 800c9aa:	68e3      	ldr	r3, [r4, #12]
 800c9ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c9ae:	1a5b      	subs	r3, r3, r1
 800c9b0:	4543      	cmp	r3, r8
 800c9b2:	dcf0      	bgt.n	800c996 <_printf_float+0x42a>
 800c9b4:	e6fc      	b.n	800c7b0 <_printf_float+0x244>
 800c9b6:	f04f 0800 	mov.w	r8, #0
 800c9ba:	f104 0919 	add.w	r9, r4, #25
 800c9be:	e7f4      	b.n	800c9aa <_printf_float+0x43e>

0800c9c0 <_printf_common>:
 800c9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9c4:	4616      	mov	r6, r2
 800c9c6:	4698      	mov	r8, r3
 800c9c8:	688a      	ldr	r2, [r1, #8]
 800c9ca:	690b      	ldr	r3, [r1, #16]
 800c9cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	bfb8      	it	lt
 800c9d4:	4613      	movlt	r3, r2
 800c9d6:	6033      	str	r3, [r6, #0]
 800c9d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c9dc:	4607      	mov	r7, r0
 800c9de:	460c      	mov	r4, r1
 800c9e0:	b10a      	cbz	r2, 800c9e6 <_printf_common+0x26>
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	6033      	str	r3, [r6, #0]
 800c9e6:	6823      	ldr	r3, [r4, #0]
 800c9e8:	0699      	lsls	r1, r3, #26
 800c9ea:	bf42      	ittt	mi
 800c9ec:	6833      	ldrmi	r3, [r6, #0]
 800c9ee:	3302      	addmi	r3, #2
 800c9f0:	6033      	strmi	r3, [r6, #0]
 800c9f2:	6825      	ldr	r5, [r4, #0]
 800c9f4:	f015 0506 	ands.w	r5, r5, #6
 800c9f8:	d106      	bne.n	800ca08 <_printf_common+0x48>
 800c9fa:	f104 0a19 	add.w	sl, r4, #25
 800c9fe:	68e3      	ldr	r3, [r4, #12]
 800ca00:	6832      	ldr	r2, [r6, #0]
 800ca02:	1a9b      	subs	r3, r3, r2
 800ca04:	42ab      	cmp	r3, r5
 800ca06:	dc26      	bgt.n	800ca56 <_printf_common+0x96>
 800ca08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ca0c:	6822      	ldr	r2, [r4, #0]
 800ca0e:	3b00      	subs	r3, #0
 800ca10:	bf18      	it	ne
 800ca12:	2301      	movne	r3, #1
 800ca14:	0692      	lsls	r2, r2, #26
 800ca16:	d42b      	bmi.n	800ca70 <_printf_common+0xb0>
 800ca18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ca1c:	4641      	mov	r1, r8
 800ca1e:	4638      	mov	r0, r7
 800ca20:	47c8      	blx	r9
 800ca22:	3001      	adds	r0, #1
 800ca24:	d01e      	beq.n	800ca64 <_printf_common+0xa4>
 800ca26:	6823      	ldr	r3, [r4, #0]
 800ca28:	6922      	ldr	r2, [r4, #16]
 800ca2a:	f003 0306 	and.w	r3, r3, #6
 800ca2e:	2b04      	cmp	r3, #4
 800ca30:	bf02      	ittt	eq
 800ca32:	68e5      	ldreq	r5, [r4, #12]
 800ca34:	6833      	ldreq	r3, [r6, #0]
 800ca36:	1aed      	subeq	r5, r5, r3
 800ca38:	68a3      	ldr	r3, [r4, #8]
 800ca3a:	bf0c      	ite	eq
 800ca3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca40:	2500      	movne	r5, #0
 800ca42:	4293      	cmp	r3, r2
 800ca44:	bfc4      	itt	gt
 800ca46:	1a9b      	subgt	r3, r3, r2
 800ca48:	18ed      	addgt	r5, r5, r3
 800ca4a:	2600      	movs	r6, #0
 800ca4c:	341a      	adds	r4, #26
 800ca4e:	42b5      	cmp	r5, r6
 800ca50:	d11a      	bne.n	800ca88 <_printf_common+0xc8>
 800ca52:	2000      	movs	r0, #0
 800ca54:	e008      	b.n	800ca68 <_printf_common+0xa8>
 800ca56:	2301      	movs	r3, #1
 800ca58:	4652      	mov	r2, sl
 800ca5a:	4641      	mov	r1, r8
 800ca5c:	4638      	mov	r0, r7
 800ca5e:	47c8      	blx	r9
 800ca60:	3001      	adds	r0, #1
 800ca62:	d103      	bne.n	800ca6c <_printf_common+0xac>
 800ca64:	f04f 30ff 	mov.w	r0, #4294967295
 800ca68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca6c:	3501      	adds	r5, #1
 800ca6e:	e7c6      	b.n	800c9fe <_printf_common+0x3e>
 800ca70:	18e1      	adds	r1, r4, r3
 800ca72:	1c5a      	adds	r2, r3, #1
 800ca74:	2030      	movs	r0, #48	@ 0x30
 800ca76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ca7a:	4422      	add	r2, r4
 800ca7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ca80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ca84:	3302      	adds	r3, #2
 800ca86:	e7c7      	b.n	800ca18 <_printf_common+0x58>
 800ca88:	2301      	movs	r3, #1
 800ca8a:	4622      	mov	r2, r4
 800ca8c:	4641      	mov	r1, r8
 800ca8e:	4638      	mov	r0, r7
 800ca90:	47c8      	blx	r9
 800ca92:	3001      	adds	r0, #1
 800ca94:	d0e6      	beq.n	800ca64 <_printf_common+0xa4>
 800ca96:	3601      	adds	r6, #1
 800ca98:	e7d9      	b.n	800ca4e <_printf_common+0x8e>
	...

0800ca9c <_printf_i>:
 800ca9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800caa0:	7e0f      	ldrb	r7, [r1, #24]
 800caa2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800caa4:	2f78      	cmp	r7, #120	@ 0x78
 800caa6:	4691      	mov	r9, r2
 800caa8:	4680      	mov	r8, r0
 800caaa:	460c      	mov	r4, r1
 800caac:	469a      	mov	sl, r3
 800caae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cab2:	d807      	bhi.n	800cac4 <_printf_i+0x28>
 800cab4:	2f62      	cmp	r7, #98	@ 0x62
 800cab6:	d80a      	bhi.n	800cace <_printf_i+0x32>
 800cab8:	2f00      	cmp	r7, #0
 800caba:	f000 80d2 	beq.w	800cc62 <_printf_i+0x1c6>
 800cabe:	2f58      	cmp	r7, #88	@ 0x58
 800cac0:	f000 80b9 	beq.w	800cc36 <_printf_i+0x19a>
 800cac4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cac8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cacc:	e03a      	b.n	800cb44 <_printf_i+0xa8>
 800cace:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cad2:	2b15      	cmp	r3, #21
 800cad4:	d8f6      	bhi.n	800cac4 <_printf_i+0x28>
 800cad6:	a101      	add	r1, pc, #4	@ (adr r1, 800cadc <_printf_i+0x40>)
 800cad8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cadc:	0800cb35 	.word	0x0800cb35
 800cae0:	0800cb49 	.word	0x0800cb49
 800cae4:	0800cac5 	.word	0x0800cac5
 800cae8:	0800cac5 	.word	0x0800cac5
 800caec:	0800cac5 	.word	0x0800cac5
 800caf0:	0800cac5 	.word	0x0800cac5
 800caf4:	0800cb49 	.word	0x0800cb49
 800caf8:	0800cac5 	.word	0x0800cac5
 800cafc:	0800cac5 	.word	0x0800cac5
 800cb00:	0800cac5 	.word	0x0800cac5
 800cb04:	0800cac5 	.word	0x0800cac5
 800cb08:	0800cc49 	.word	0x0800cc49
 800cb0c:	0800cb73 	.word	0x0800cb73
 800cb10:	0800cc03 	.word	0x0800cc03
 800cb14:	0800cac5 	.word	0x0800cac5
 800cb18:	0800cac5 	.word	0x0800cac5
 800cb1c:	0800cc6b 	.word	0x0800cc6b
 800cb20:	0800cac5 	.word	0x0800cac5
 800cb24:	0800cb73 	.word	0x0800cb73
 800cb28:	0800cac5 	.word	0x0800cac5
 800cb2c:	0800cac5 	.word	0x0800cac5
 800cb30:	0800cc0b 	.word	0x0800cc0b
 800cb34:	6833      	ldr	r3, [r6, #0]
 800cb36:	1d1a      	adds	r2, r3, #4
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	6032      	str	r2, [r6, #0]
 800cb3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cb44:	2301      	movs	r3, #1
 800cb46:	e09d      	b.n	800cc84 <_printf_i+0x1e8>
 800cb48:	6833      	ldr	r3, [r6, #0]
 800cb4a:	6820      	ldr	r0, [r4, #0]
 800cb4c:	1d19      	adds	r1, r3, #4
 800cb4e:	6031      	str	r1, [r6, #0]
 800cb50:	0606      	lsls	r6, r0, #24
 800cb52:	d501      	bpl.n	800cb58 <_printf_i+0xbc>
 800cb54:	681d      	ldr	r5, [r3, #0]
 800cb56:	e003      	b.n	800cb60 <_printf_i+0xc4>
 800cb58:	0645      	lsls	r5, r0, #25
 800cb5a:	d5fb      	bpl.n	800cb54 <_printf_i+0xb8>
 800cb5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cb60:	2d00      	cmp	r5, #0
 800cb62:	da03      	bge.n	800cb6c <_printf_i+0xd0>
 800cb64:	232d      	movs	r3, #45	@ 0x2d
 800cb66:	426d      	negs	r5, r5
 800cb68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb6c:	4859      	ldr	r0, [pc, #356]	@ (800ccd4 <_printf_i+0x238>)
 800cb6e:	230a      	movs	r3, #10
 800cb70:	e011      	b.n	800cb96 <_printf_i+0xfa>
 800cb72:	6821      	ldr	r1, [r4, #0]
 800cb74:	6833      	ldr	r3, [r6, #0]
 800cb76:	0608      	lsls	r0, r1, #24
 800cb78:	f853 5b04 	ldr.w	r5, [r3], #4
 800cb7c:	d402      	bmi.n	800cb84 <_printf_i+0xe8>
 800cb7e:	0649      	lsls	r1, r1, #25
 800cb80:	bf48      	it	mi
 800cb82:	b2ad      	uxthmi	r5, r5
 800cb84:	2f6f      	cmp	r7, #111	@ 0x6f
 800cb86:	4853      	ldr	r0, [pc, #332]	@ (800ccd4 <_printf_i+0x238>)
 800cb88:	6033      	str	r3, [r6, #0]
 800cb8a:	bf14      	ite	ne
 800cb8c:	230a      	movne	r3, #10
 800cb8e:	2308      	moveq	r3, #8
 800cb90:	2100      	movs	r1, #0
 800cb92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cb96:	6866      	ldr	r6, [r4, #4]
 800cb98:	60a6      	str	r6, [r4, #8]
 800cb9a:	2e00      	cmp	r6, #0
 800cb9c:	bfa2      	ittt	ge
 800cb9e:	6821      	ldrge	r1, [r4, #0]
 800cba0:	f021 0104 	bicge.w	r1, r1, #4
 800cba4:	6021      	strge	r1, [r4, #0]
 800cba6:	b90d      	cbnz	r5, 800cbac <_printf_i+0x110>
 800cba8:	2e00      	cmp	r6, #0
 800cbaa:	d04b      	beq.n	800cc44 <_printf_i+0x1a8>
 800cbac:	4616      	mov	r6, r2
 800cbae:	fbb5 f1f3 	udiv	r1, r5, r3
 800cbb2:	fb03 5711 	mls	r7, r3, r1, r5
 800cbb6:	5dc7      	ldrb	r7, [r0, r7]
 800cbb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cbbc:	462f      	mov	r7, r5
 800cbbe:	42bb      	cmp	r3, r7
 800cbc0:	460d      	mov	r5, r1
 800cbc2:	d9f4      	bls.n	800cbae <_printf_i+0x112>
 800cbc4:	2b08      	cmp	r3, #8
 800cbc6:	d10b      	bne.n	800cbe0 <_printf_i+0x144>
 800cbc8:	6823      	ldr	r3, [r4, #0]
 800cbca:	07df      	lsls	r7, r3, #31
 800cbcc:	d508      	bpl.n	800cbe0 <_printf_i+0x144>
 800cbce:	6923      	ldr	r3, [r4, #16]
 800cbd0:	6861      	ldr	r1, [r4, #4]
 800cbd2:	4299      	cmp	r1, r3
 800cbd4:	bfde      	ittt	le
 800cbd6:	2330      	movle	r3, #48	@ 0x30
 800cbd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cbdc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cbe0:	1b92      	subs	r2, r2, r6
 800cbe2:	6122      	str	r2, [r4, #16]
 800cbe4:	f8cd a000 	str.w	sl, [sp]
 800cbe8:	464b      	mov	r3, r9
 800cbea:	aa03      	add	r2, sp, #12
 800cbec:	4621      	mov	r1, r4
 800cbee:	4640      	mov	r0, r8
 800cbf0:	f7ff fee6 	bl	800c9c0 <_printf_common>
 800cbf4:	3001      	adds	r0, #1
 800cbf6:	d14a      	bne.n	800cc8e <_printf_i+0x1f2>
 800cbf8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbfc:	b004      	add	sp, #16
 800cbfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc02:	6823      	ldr	r3, [r4, #0]
 800cc04:	f043 0320 	orr.w	r3, r3, #32
 800cc08:	6023      	str	r3, [r4, #0]
 800cc0a:	4833      	ldr	r0, [pc, #204]	@ (800ccd8 <_printf_i+0x23c>)
 800cc0c:	2778      	movs	r7, #120	@ 0x78
 800cc0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cc12:	6823      	ldr	r3, [r4, #0]
 800cc14:	6831      	ldr	r1, [r6, #0]
 800cc16:	061f      	lsls	r7, r3, #24
 800cc18:	f851 5b04 	ldr.w	r5, [r1], #4
 800cc1c:	d402      	bmi.n	800cc24 <_printf_i+0x188>
 800cc1e:	065f      	lsls	r7, r3, #25
 800cc20:	bf48      	it	mi
 800cc22:	b2ad      	uxthmi	r5, r5
 800cc24:	6031      	str	r1, [r6, #0]
 800cc26:	07d9      	lsls	r1, r3, #31
 800cc28:	bf44      	itt	mi
 800cc2a:	f043 0320 	orrmi.w	r3, r3, #32
 800cc2e:	6023      	strmi	r3, [r4, #0]
 800cc30:	b11d      	cbz	r5, 800cc3a <_printf_i+0x19e>
 800cc32:	2310      	movs	r3, #16
 800cc34:	e7ac      	b.n	800cb90 <_printf_i+0xf4>
 800cc36:	4827      	ldr	r0, [pc, #156]	@ (800ccd4 <_printf_i+0x238>)
 800cc38:	e7e9      	b.n	800cc0e <_printf_i+0x172>
 800cc3a:	6823      	ldr	r3, [r4, #0]
 800cc3c:	f023 0320 	bic.w	r3, r3, #32
 800cc40:	6023      	str	r3, [r4, #0]
 800cc42:	e7f6      	b.n	800cc32 <_printf_i+0x196>
 800cc44:	4616      	mov	r6, r2
 800cc46:	e7bd      	b.n	800cbc4 <_printf_i+0x128>
 800cc48:	6833      	ldr	r3, [r6, #0]
 800cc4a:	6825      	ldr	r5, [r4, #0]
 800cc4c:	6961      	ldr	r1, [r4, #20]
 800cc4e:	1d18      	adds	r0, r3, #4
 800cc50:	6030      	str	r0, [r6, #0]
 800cc52:	062e      	lsls	r6, r5, #24
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	d501      	bpl.n	800cc5c <_printf_i+0x1c0>
 800cc58:	6019      	str	r1, [r3, #0]
 800cc5a:	e002      	b.n	800cc62 <_printf_i+0x1c6>
 800cc5c:	0668      	lsls	r0, r5, #25
 800cc5e:	d5fb      	bpl.n	800cc58 <_printf_i+0x1bc>
 800cc60:	8019      	strh	r1, [r3, #0]
 800cc62:	2300      	movs	r3, #0
 800cc64:	6123      	str	r3, [r4, #16]
 800cc66:	4616      	mov	r6, r2
 800cc68:	e7bc      	b.n	800cbe4 <_printf_i+0x148>
 800cc6a:	6833      	ldr	r3, [r6, #0]
 800cc6c:	1d1a      	adds	r2, r3, #4
 800cc6e:	6032      	str	r2, [r6, #0]
 800cc70:	681e      	ldr	r6, [r3, #0]
 800cc72:	6862      	ldr	r2, [r4, #4]
 800cc74:	2100      	movs	r1, #0
 800cc76:	4630      	mov	r0, r6
 800cc78:	f7f3 faca 	bl	8000210 <memchr>
 800cc7c:	b108      	cbz	r0, 800cc82 <_printf_i+0x1e6>
 800cc7e:	1b80      	subs	r0, r0, r6
 800cc80:	6060      	str	r0, [r4, #4]
 800cc82:	6863      	ldr	r3, [r4, #4]
 800cc84:	6123      	str	r3, [r4, #16]
 800cc86:	2300      	movs	r3, #0
 800cc88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc8c:	e7aa      	b.n	800cbe4 <_printf_i+0x148>
 800cc8e:	6923      	ldr	r3, [r4, #16]
 800cc90:	4632      	mov	r2, r6
 800cc92:	4649      	mov	r1, r9
 800cc94:	4640      	mov	r0, r8
 800cc96:	47d0      	blx	sl
 800cc98:	3001      	adds	r0, #1
 800cc9a:	d0ad      	beq.n	800cbf8 <_printf_i+0x15c>
 800cc9c:	6823      	ldr	r3, [r4, #0]
 800cc9e:	079b      	lsls	r3, r3, #30
 800cca0:	d413      	bmi.n	800ccca <_printf_i+0x22e>
 800cca2:	68e0      	ldr	r0, [r4, #12]
 800cca4:	9b03      	ldr	r3, [sp, #12]
 800cca6:	4298      	cmp	r0, r3
 800cca8:	bfb8      	it	lt
 800ccaa:	4618      	movlt	r0, r3
 800ccac:	e7a6      	b.n	800cbfc <_printf_i+0x160>
 800ccae:	2301      	movs	r3, #1
 800ccb0:	4632      	mov	r2, r6
 800ccb2:	4649      	mov	r1, r9
 800ccb4:	4640      	mov	r0, r8
 800ccb6:	47d0      	blx	sl
 800ccb8:	3001      	adds	r0, #1
 800ccba:	d09d      	beq.n	800cbf8 <_printf_i+0x15c>
 800ccbc:	3501      	adds	r5, #1
 800ccbe:	68e3      	ldr	r3, [r4, #12]
 800ccc0:	9903      	ldr	r1, [sp, #12]
 800ccc2:	1a5b      	subs	r3, r3, r1
 800ccc4:	42ab      	cmp	r3, r5
 800ccc6:	dcf2      	bgt.n	800ccae <_printf_i+0x212>
 800ccc8:	e7eb      	b.n	800cca2 <_printf_i+0x206>
 800ccca:	2500      	movs	r5, #0
 800cccc:	f104 0619 	add.w	r6, r4, #25
 800ccd0:	e7f5      	b.n	800ccbe <_printf_i+0x222>
 800ccd2:	bf00      	nop
 800ccd4:	0801150a 	.word	0x0801150a
 800ccd8:	0801151b 	.word	0x0801151b

0800ccdc <std>:
 800ccdc:	2300      	movs	r3, #0
 800ccde:	b510      	push	{r4, lr}
 800cce0:	4604      	mov	r4, r0
 800cce2:	e9c0 3300 	strd	r3, r3, [r0]
 800cce6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ccea:	6083      	str	r3, [r0, #8]
 800ccec:	8181      	strh	r1, [r0, #12]
 800ccee:	6643      	str	r3, [r0, #100]	@ 0x64
 800ccf0:	81c2      	strh	r2, [r0, #14]
 800ccf2:	6183      	str	r3, [r0, #24]
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	2208      	movs	r2, #8
 800ccf8:	305c      	adds	r0, #92	@ 0x5c
 800ccfa:	f000 f904 	bl	800cf06 <memset>
 800ccfe:	4b0d      	ldr	r3, [pc, #52]	@ (800cd34 <std+0x58>)
 800cd00:	6263      	str	r3, [r4, #36]	@ 0x24
 800cd02:	4b0d      	ldr	r3, [pc, #52]	@ (800cd38 <std+0x5c>)
 800cd04:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cd06:	4b0d      	ldr	r3, [pc, #52]	@ (800cd3c <std+0x60>)
 800cd08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cd0a:	4b0d      	ldr	r3, [pc, #52]	@ (800cd40 <std+0x64>)
 800cd0c:	6323      	str	r3, [r4, #48]	@ 0x30
 800cd0e:	4b0d      	ldr	r3, [pc, #52]	@ (800cd44 <std+0x68>)
 800cd10:	6224      	str	r4, [r4, #32]
 800cd12:	429c      	cmp	r4, r3
 800cd14:	d006      	beq.n	800cd24 <std+0x48>
 800cd16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cd1a:	4294      	cmp	r4, r2
 800cd1c:	d002      	beq.n	800cd24 <std+0x48>
 800cd1e:	33d0      	adds	r3, #208	@ 0xd0
 800cd20:	429c      	cmp	r4, r3
 800cd22:	d105      	bne.n	800cd30 <std+0x54>
 800cd24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cd28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd2c:	f000 b968 	b.w	800d000 <__retarget_lock_init_recursive>
 800cd30:	bd10      	pop	{r4, pc}
 800cd32:	bf00      	nop
 800cd34:	0800ce61 	.word	0x0800ce61
 800cd38:	0800ce83 	.word	0x0800ce83
 800cd3c:	0800cebb 	.word	0x0800cebb
 800cd40:	0800cedf 	.word	0x0800cedf
 800cd44:	200007f4 	.word	0x200007f4

0800cd48 <stdio_exit_handler>:
 800cd48:	4a02      	ldr	r2, [pc, #8]	@ (800cd54 <stdio_exit_handler+0xc>)
 800cd4a:	4903      	ldr	r1, [pc, #12]	@ (800cd58 <stdio_exit_handler+0x10>)
 800cd4c:	4803      	ldr	r0, [pc, #12]	@ (800cd5c <stdio_exit_handler+0x14>)
 800cd4e:	f000 b869 	b.w	800ce24 <_fwalk_sglue>
 800cd52:	bf00      	nop
 800cd54:	2000004c 	.word	0x2000004c
 800cd58:	0800e6cd 	.word	0x0800e6cd
 800cd5c:	2000005c 	.word	0x2000005c

0800cd60 <cleanup_stdio>:
 800cd60:	6841      	ldr	r1, [r0, #4]
 800cd62:	4b0c      	ldr	r3, [pc, #48]	@ (800cd94 <cleanup_stdio+0x34>)
 800cd64:	4299      	cmp	r1, r3
 800cd66:	b510      	push	{r4, lr}
 800cd68:	4604      	mov	r4, r0
 800cd6a:	d001      	beq.n	800cd70 <cleanup_stdio+0x10>
 800cd6c:	f001 fcae 	bl	800e6cc <_fflush_r>
 800cd70:	68a1      	ldr	r1, [r4, #8]
 800cd72:	4b09      	ldr	r3, [pc, #36]	@ (800cd98 <cleanup_stdio+0x38>)
 800cd74:	4299      	cmp	r1, r3
 800cd76:	d002      	beq.n	800cd7e <cleanup_stdio+0x1e>
 800cd78:	4620      	mov	r0, r4
 800cd7a:	f001 fca7 	bl	800e6cc <_fflush_r>
 800cd7e:	68e1      	ldr	r1, [r4, #12]
 800cd80:	4b06      	ldr	r3, [pc, #24]	@ (800cd9c <cleanup_stdio+0x3c>)
 800cd82:	4299      	cmp	r1, r3
 800cd84:	d004      	beq.n	800cd90 <cleanup_stdio+0x30>
 800cd86:	4620      	mov	r0, r4
 800cd88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd8c:	f001 bc9e 	b.w	800e6cc <_fflush_r>
 800cd90:	bd10      	pop	{r4, pc}
 800cd92:	bf00      	nop
 800cd94:	200007f4 	.word	0x200007f4
 800cd98:	2000085c 	.word	0x2000085c
 800cd9c:	200008c4 	.word	0x200008c4

0800cda0 <global_stdio_init.part.0>:
 800cda0:	b510      	push	{r4, lr}
 800cda2:	4b0b      	ldr	r3, [pc, #44]	@ (800cdd0 <global_stdio_init.part.0+0x30>)
 800cda4:	4c0b      	ldr	r4, [pc, #44]	@ (800cdd4 <global_stdio_init.part.0+0x34>)
 800cda6:	4a0c      	ldr	r2, [pc, #48]	@ (800cdd8 <global_stdio_init.part.0+0x38>)
 800cda8:	601a      	str	r2, [r3, #0]
 800cdaa:	4620      	mov	r0, r4
 800cdac:	2200      	movs	r2, #0
 800cdae:	2104      	movs	r1, #4
 800cdb0:	f7ff ff94 	bl	800ccdc <std>
 800cdb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cdb8:	2201      	movs	r2, #1
 800cdba:	2109      	movs	r1, #9
 800cdbc:	f7ff ff8e 	bl	800ccdc <std>
 800cdc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cdc4:	2202      	movs	r2, #2
 800cdc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdca:	2112      	movs	r1, #18
 800cdcc:	f7ff bf86 	b.w	800ccdc <std>
 800cdd0:	2000092c 	.word	0x2000092c
 800cdd4:	200007f4 	.word	0x200007f4
 800cdd8:	0800cd49 	.word	0x0800cd49

0800cddc <__sfp_lock_acquire>:
 800cddc:	4801      	ldr	r0, [pc, #4]	@ (800cde4 <__sfp_lock_acquire+0x8>)
 800cdde:	f000 b910 	b.w	800d002 <__retarget_lock_acquire_recursive>
 800cde2:	bf00      	nop
 800cde4:	20000935 	.word	0x20000935

0800cde8 <__sfp_lock_release>:
 800cde8:	4801      	ldr	r0, [pc, #4]	@ (800cdf0 <__sfp_lock_release+0x8>)
 800cdea:	f000 b90b 	b.w	800d004 <__retarget_lock_release_recursive>
 800cdee:	bf00      	nop
 800cdf0:	20000935 	.word	0x20000935

0800cdf4 <__sinit>:
 800cdf4:	b510      	push	{r4, lr}
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	f7ff fff0 	bl	800cddc <__sfp_lock_acquire>
 800cdfc:	6a23      	ldr	r3, [r4, #32]
 800cdfe:	b11b      	cbz	r3, 800ce08 <__sinit+0x14>
 800ce00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce04:	f7ff bff0 	b.w	800cde8 <__sfp_lock_release>
 800ce08:	4b04      	ldr	r3, [pc, #16]	@ (800ce1c <__sinit+0x28>)
 800ce0a:	6223      	str	r3, [r4, #32]
 800ce0c:	4b04      	ldr	r3, [pc, #16]	@ (800ce20 <__sinit+0x2c>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d1f5      	bne.n	800ce00 <__sinit+0xc>
 800ce14:	f7ff ffc4 	bl	800cda0 <global_stdio_init.part.0>
 800ce18:	e7f2      	b.n	800ce00 <__sinit+0xc>
 800ce1a:	bf00      	nop
 800ce1c:	0800cd61 	.word	0x0800cd61
 800ce20:	2000092c 	.word	0x2000092c

0800ce24 <_fwalk_sglue>:
 800ce24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce28:	4607      	mov	r7, r0
 800ce2a:	4688      	mov	r8, r1
 800ce2c:	4614      	mov	r4, r2
 800ce2e:	2600      	movs	r6, #0
 800ce30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce34:	f1b9 0901 	subs.w	r9, r9, #1
 800ce38:	d505      	bpl.n	800ce46 <_fwalk_sglue+0x22>
 800ce3a:	6824      	ldr	r4, [r4, #0]
 800ce3c:	2c00      	cmp	r4, #0
 800ce3e:	d1f7      	bne.n	800ce30 <_fwalk_sglue+0xc>
 800ce40:	4630      	mov	r0, r6
 800ce42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce46:	89ab      	ldrh	r3, [r5, #12]
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d907      	bls.n	800ce5c <_fwalk_sglue+0x38>
 800ce4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce50:	3301      	adds	r3, #1
 800ce52:	d003      	beq.n	800ce5c <_fwalk_sglue+0x38>
 800ce54:	4629      	mov	r1, r5
 800ce56:	4638      	mov	r0, r7
 800ce58:	47c0      	blx	r8
 800ce5a:	4306      	orrs	r6, r0
 800ce5c:	3568      	adds	r5, #104	@ 0x68
 800ce5e:	e7e9      	b.n	800ce34 <_fwalk_sglue+0x10>

0800ce60 <__sread>:
 800ce60:	b510      	push	{r4, lr}
 800ce62:	460c      	mov	r4, r1
 800ce64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce68:	f000 f87c 	bl	800cf64 <_read_r>
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	bfab      	itete	ge
 800ce70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ce72:	89a3      	ldrhlt	r3, [r4, #12]
 800ce74:	181b      	addge	r3, r3, r0
 800ce76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ce7a:	bfac      	ite	ge
 800ce7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ce7e:	81a3      	strhlt	r3, [r4, #12]
 800ce80:	bd10      	pop	{r4, pc}

0800ce82 <__swrite>:
 800ce82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce86:	461f      	mov	r7, r3
 800ce88:	898b      	ldrh	r3, [r1, #12]
 800ce8a:	05db      	lsls	r3, r3, #23
 800ce8c:	4605      	mov	r5, r0
 800ce8e:	460c      	mov	r4, r1
 800ce90:	4616      	mov	r6, r2
 800ce92:	d505      	bpl.n	800cea0 <__swrite+0x1e>
 800ce94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce98:	2302      	movs	r3, #2
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f000 f850 	bl	800cf40 <_lseek_r>
 800cea0:	89a3      	ldrh	r3, [r4, #12]
 800cea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cea6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ceaa:	81a3      	strh	r3, [r4, #12]
 800ceac:	4632      	mov	r2, r6
 800ceae:	463b      	mov	r3, r7
 800ceb0:	4628      	mov	r0, r5
 800ceb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb6:	f000 b867 	b.w	800cf88 <_write_r>

0800ceba <__sseek>:
 800ceba:	b510      	push	{r4, lr}
 800cebc:	460c      	mov	r4, r1
 800cebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cec2:	f000 f83d 	bl	800cf40 <_lseek_r>
 800cec6:	1c43      	adds	r3, r0, #1
 800cec8:	89a3      	ldrh	r3, [r4, #12]
 800ceca:	bf15      	itete	ne
 800cecc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cece:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ced2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ced6:	81a3      	strheq	r3, [r4, #12]
 800ced8:	bf18      	it	ne
 800ceda:	81a3      	strhne	r3, [r4, #12]
 800cedc:	bd10      	pop	{r4, pc}

0800cede <__sclose>:
 800cede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cee2:	f000 b81d 	b.w	800cf20 <_close_r>

0800cee6 <memcmp>:
 800cee6:	b510      	push	{r4, lr}
 800cee8:	3901      	subs	r1, #1
 800ceea:	4402      	add	r2, r0
 800ceec:	4290      	cmp	r0, r2
 800ceee:	d101      	bne.n	800cef4 <memcmp+0xe>
 800cef0:	2000      	movs	r0, #0
 800cef2:	e005      	b.n	800cf00 <memcmp+0x1a>
 800cef4:	7803      	ldrb	r3, [r0, #0]
 800cef6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cefa:	42a3      	cmp	r3, r4
 800cefc:	d001      	beq.n	800cf02 <memcmp+0x1c>
 800cefe:	1b18      	subs	r0, r3, r4
 800cf00:	bd10      	pop	{r4, pc}
 800cf02:	3001      	adds	r0, #1
 800cf04:	e7f2      	b.n	800ceec <memcmp+0x6>

0800cf06 <memset>:
 800cf06:	4402      	add	r2, r0
 800cf08:	4603      	mov	r3, r0
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d100      	bne.n	800cf10 <memset+0xa>
 800cf0e:	4770      	bx	lr
 800cf10:	f803 1b01 	strb.w	r1, [r3], #1
 800cf14:	e7f9      	b.n	800cf0a <memset+0x4>
	...

0800cf18 <_localeconv_r>:
 800cf18:	4800      	ldr	r0, [pc, #0]	@ (800cf1c <_localeconv_r+0x4>)
 800cf1a:	4770      	bx	lr
 800cf1c:	20000198 	.word	0x20000198

0800cf20 <_close_r>:
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	4d06      	ldr	r5, [pc, #24]	@ (800cf3c <_close_r+0x1c>)
 800cf24:	2300      	movs	r3, #0
 800cf26:	4604      	mov	r4, r0
 800cf28:	4608      	mov	r0, r1
 800cf2a:	602b      	str	r3, [r5, #0]
 800cf2c:	f7fa f90e 	bl	800714c <_close>
 800cf30:	1c43      	adds	r3, r0, #1
 800cf32:	d102      	bne.n	800cf3a <_close_r+0x1a>
 800cf34:	682b      	ldr	r3, [r5, #0]
 800cf36:	b103      	cbz	r3, 800cf3a <_close_r+0x1a>
 800cf38:	6023      	str	r3, [r4, #0]
 800cf3a:	bd38      	pop	{r3, r4, r5, pc}
 800cf3c:	20000930 	.word	0x20000930

0800cf40 <_lseek_r>:
 800cf40:	b538      	push	{r3, r4, r5, lr}
 800cf42:	4d07      	ldr	r5, [pc, #28]	@ (800cf60 <_lseek_r+0x20>)
 800cf44:	4604      	mov	r4, r0
 800cf46:	4608      	mov	r0, r1
 800cf48:	4611      	mov	r1, r2
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	602a      	str	r2, [r5, #0]
 800cf4e:	461a      	mov	r2, r3
 800cf50:	f7fa f923 	bl	800719a <_lseek>
 800cf54:	1c43      	adds	r3, r0, #1
 800cf56:	d102      	bne.n	800cf5e <_lseek_r+0x1e>
 800cf58:	682b      	ldr	r3, [r5, #0]
 800cf5a:	b103      	cbz	r3, 800cf5e <_lseek_r+0x1e>
 800cf5c:	6023      	str	r3, [r4, #0]
 800cf5e:	bd38      	pop	{r3, r4, r5, pc}
 800cf60:	20000930 	.word	0x20000930

0800cf64 <_read_r>:
 800cf64:	b538      	push	{r3, r4, r5, lr}
 800cf66:	4d07      	ldr	r5, [pc, #28]	@ (800cf84 <_read_r+0x20>)
 800cf68:	4604      	mov	r4, r0
 800cf6a:	4608      	mov	r0, r1
 800cf6c:	4611      	mov	r1, r2
 800cf6e:	2200      	movs	r2, #0
 800cf70:	602a      	str	r2, [r5, #0]
 800cf72:	461a      	mov	r2, r3
 800cf74:	f7fa f8b1 	bl	80070da <_read>
 800cf78:	1c43      	adds	r3, r0, #1
 800cf7a:	d102      	bne.n	800cf82 <_read_r+0x1e>
 800cf7c:	682b      	ldr	r3, [r5, #0]
 800cf7e:	b103      	cbz	r3, 800cf82 <_read_r+0x1e>
 800cf80:	6023      	str	r3, [r4, #0]
 800cf82:	bd38      	pop	{r3, r4, r5, pc}
 800cf84:	20000930 	.word	0x20000930

0800cf88 <_write_r>:
 800cf88:	b538      	push	{r3, r4, r5, lr}
 800cf8a:	4d07      	ldr	r5, [pc, #28]	@ (800cfa8 <_write_r+0x20>)
 800cf8c:	4604      	mov	r4, r0
 800cf8e:	4608      	mov	r0, r1
 800cf90:	4611      	mov	r1, r2
 800cf92:	2200      	movs	r2, #0
 800cf94:	602a      	str	r2, [r5, #0]
 800cf96:	461a      	mov	r2, r3
 800cf98:	f7fa f8bc 	bl	8007114 <_write>
 800cf9c:	1c43      	adds	r3, r0, #1
 800cf9e:	d102      	bne.n	800cfa6 <_write_r+0x1e>
 800cfa0:	682b      	ldr	r3, [r5, #0]
 800cfa2:	b103      	cbz	r3, 800cfa6 <_write_r+0x1e>
 800cfa4:	6023      	str	r3, [r4, #0]
 800cfa6:	bd38      	pop	{r3, r4, r5, pc}
 800cfa8:	20000930 	.word	0x20000930

0800cfac <__errno>:
 800cfac:	4b01      	ldr	r3, [pc, #4]	@ (800cfb4 <__errno+0x8>)
 800cfae:	6818      	ldr	r0, [r3, #0]
 800cfb0:	4770      	bx	lr
 800cfb2:	bf00      	nop
 800cfb4:	20000058 	.word	0x20000058

0800cfb8 <__libc_init_array>:
 800cfb8:	b570      	push	{r4, r5, r6, lr}
 800cfba:	4d0d      	ldr	r5, [pc, #52]	@ (800cff0 <__libc_init_array+0x38>)
 800cfbc:	4c0d      	ldr	r4, [pc, #52]	@ (800cff4 <__libc_init_array+0x3c>)
 800cfbe:	1b64      	subs	r4, r4, r5
 800cfc0:	10a4      	asrs	r4, r4, #2
 800cfc2:	2600      	movs	r6, #0
 800cfc4:	42a6      	cmp	r6, r4
 800cfc6:	d109      	bne.n	800cfdc <__libc_init_array+0x24>
 800cfc8:	4d0b      	ldr	r5, [pc, #44]	@ (800cff8 <__libc_init_array+0x40>)
 800cfca:	4c0c      	ldr	r4, [pc, #48]	@ (800cffc <__libc_init_array+0x44>)
 800cfcc:	f004 fa6c 	bl	80114a8 <_init>
 800cfd0:	1b64      	subs	r4, r4, r5
 800cfd2:	10a4      	asrs	r4, r4, #2
 800cfd4:	2600      	movs	r6, #0
 800cfd6:	42a6      	cmp	r6, r4
 800cfd8:	d105      	bne.n	800cfe6 <__libc_init_array+0x2e>
 800cfda:	bd70      	pop	{r4, r5, r6, pc}
 800cfdc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfe0:	4798      	blx	r3
 800cfe2:	3601      	adds	r6, #1
 800cfe4:	e7ee      	b.n	800cfc4 <__libc_init_array+0xc>
 800cfe6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfea:	4798      	blx	r3
 800cfec:	3601      	adds	r6, #1
 800cfee:	e7f2      	b.n	800cfd6 <__libc_init_array+0x1e>
 800cff0:	08011ab0 	.word	0x08011ab0
 800cff4:	08011ab0 	.word	0x08011ab0
 800cff8:	08011ab0 	.word	0x08011ab0
 800cffc:	08011ab4 	.word	0x08011ab4

0800d000 <__retarget_lock_init_recursive>:
 800d000:	4770      	bx	lr

0800d002 <__retarget_lock_acquire_recursive>:
 800d002:	4770      	bx	lr

0800d004 <__retarget_lock_release_recursive>:
 800d004:	4770      	bx	lr

0800d006 <memcpy>:
 800d006:	440a      	add	r2, r1
 800d008:	4291      	cmp	r1, r2
 800d00a:	f100 33ff 	add.w	r3, r0, #4294967295
 800d00e:	d100      	bne.n	800d012 <memcpy+0xc>
 800d010:	4770      	bx	lr
 800d012:	b510      	push	{r4, lr}
 800d014:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d018:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d01c:	4291      	cmp	r1, r2
 800d01e:	d1f9      	bne.n	800d014 <memcpy+0xe>
 800d020:	bd10      	pop	{r4, pc}

0800d022 <quorem>:
 800d022:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d026:	6903      	ldr	r3, [r0, #16]
 800d028:	690c      	ldr	r4, [r1, #16]
 800d02a:	42a3      	cmp	r3, r4
 800d02c:	4607      	mov	r7, r0
 800d02e:	db7e      	blt.n	800d12e <quorem+0x10c>
 800d030:	3c01      	subs	r4, #1
 800d032:	f101 0814 	add.w	r8, r1, #20
 800d036:	00a3      	lsls	r3, r4, #2
 800d038:	f100 0514 	add.w	r5, r0, #20
 800d03c:	9300      	str	r3, [sp, #0]
 800d03e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d042:	9301      	str	r3, [sp, #4]
 800d044:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d048:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d04c:	3301      	adds	r3, #1
 800d04e:	429a      	cmp	r2, r3
 800d050:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d054:	fbb2 f6f3 	udiv	r6, r2, r3
 800d058:	d32e      	bcc.n	800d0b8 <quorem+0x96>
 800d05a:	f04f 0a00 	mov.w	sl, #0
 800d05e:	46c4      	mov	ip, r8
 800d060:	46ae      	mov	lr, r5
 800d062:	46d3      	mov	fp, sl
 800d064:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d068:	b298      	uxth	r0, r3
 800d06a:	fb06 a000 	mla	r0, r6, r0, sl
 800d06e:	0c02      	lsrs	r2, r0, #16
 800d070:	0c1b      	lsrs	r3, r3, #16
 800d072:	fb06 2303 	mla	r3, r6, r3, r2
 800d076:	f8de 2000 	ldr.w	r2, [lr]
 800d07a:	b280      	uxth	r0, r0
 800d07c:	b292      	uxth	r2, r2
 800d07e:	1a12      	subs	r2, r2, r0
 800d080:	445a      	add	r2, fp
 800d082:	f8de 0000 	ldr.w	r0, [lr]
 800d086:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d090:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d094:	b292      	uxth	r2, r2
 800d096:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d09a:	45e1      	cmp	r9, ip
 800d09c:	f84e 2b04 	str.w	r2, [lr], #4
 800d0a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d0a4:	d2de      	bcs.n	800d064 <quorem+0x42>
 800d0a6:	9b00      	ldr	r3, [sp, #0]
 800d0a8:	58eb      	ldr	r3, [r5, r3]
 800d0aa:	b92b      	cbnz	r3, 800d0b8 <quorem+0x96>
 800d0ac:	9b01      	ldr	r3, [sp, #4]
 800d0ae:	3b04      	subs	r3, #4
 800d0b0:	429d      	cmp	r5, r3
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	d32f      	bcc.n	800d116 <quorem+0xf4>
 800d0b6:	613c      	str	r4, [r7, #16]
 800d0b8:	4638      	mov	r0, r7
 800d0ba:	f001 f97b 	bl	800e3b4 <__mcmp>
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	db25      	blt.n	800d10e <quorem+0xec>
 800d0c2:	4629      	mov	r1, r5
 800d0c4:	2000      	movs	r0, #0
 800d0c6:	f858 2b04 	ldr.w	r2, [r8], #4
 800d0ca:	f8d1 c000 	ldr.w	ip, [r1]
 800d0ce:	fa1f fe82 	uxth.w	lr, r2
 800d0d2:	fa1f f38c 	uxth.w	r3, ip
 800d0d6:	eba3 030e 	sub.w	r3, r3, lr
 800d0da:	4403      	add	r3, r0
 800d0dc:	0c12      	lsrs	r2, r2, #16
 800d0de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d0e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0ec:	45c1      	cmp	r9, r8
 800d0ee:	f841 3b04 	str.w	r3, [r1], #4
 800d0f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d0f6:	d2e6      	bcs.n	800d0c6 <quorem+0xa4>
 800d0f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d0fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d100:	b922      	cbnz	r2, 800d10c <quorem+0xea>
 800d102:	3b04      	subs	r3, #4
 800d104:	429d      	cmp	r5, r3
 800d106:	461a      	mov	r2, r3
 800d108:	d30b      	bcc.n	800d122 <quorem+0x100>
 800d10a:	613c      	str	r4, [r7, #16]
 800d10c:	3601      	adds	r6, #1
 800d10e:	4630      	mov	r0, r6
 800d110:	b003      	add	sp, #12
 800d112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d116:	6812      	ldr	r2, [r2, #0]
 800d118:	3b04      	subs	r3, #4
 800d11a:	2a00      	cmp	r2, #0
 800d11c:	d1cb      	bne.n	800d0b6 <quorem+0x94>
 800d11e:	3c01      	subs	r4, #1
 800d120:	e7c6      	b.n	800d0b0 <quorem+0x8e>
 800d122:	6812      	ldr	r2, [r2, #0]
 800d124:	3b04      	subs	r3, #4
 800d126:	2a00      	cmp	r2, #0
 800d128:	d1ef      	bne.n	800d10a <quorem+0xe8>
 800d12a:	3c01      	subs	r4, #1
 800d12c:	e7ea      	b.n	800d104 <quorem+0xe2>
 800d12e:	2000      	movs	r0, #0
 800d130:	e7ee      	b.n	800d110 <quorem+0xee>
 800d132:	0000      	movs	r0, r0
 800d134:	0000      	movs	r0, r0
	...

0800d138 <_dtoa_r>:
 800d138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13c:	69c7      	ldr	r7, [r0, #28]
 800d13e:	b099      	sub	sp, #100	@ 0x64
 800d140:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d144:	ec55 4b10 	vmov	r4, r5, d0
 800d148:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d14a:	9109      	str	r1, [sp, #36]	@ 0x24
 800d14c:	4683      	mov	fp, r0
 800d14e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d150:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d152:	b97f      	cbnz	r7, 800d174 <_dtoa_r+0x3c>
 800d154:	2010      	movs	r0, #16
 800d156:	f000 fdfd 	bl	800dd54 <malloc>
 800d15a:	4602      	mov	r2, r0
 800d15c:	f8cb 001c 	str.w	r0, [fp, #28]
 800d160:	b920      	cbnz	r0, 800d16c <_dtoa_r+0x34>
 800d162:	4ba7      	ldr	r3, [pc, #668]	@ (800d400 <_dtoa_r+0x2c8>)
 800d164:	21ef      	movs	r1, #239	@ 0xef
 800d166:	48a7      	ldr	r0, [pc, #668]	@ (800d404 <_dtoa_r+0x2cc>)
 800d168:	f001 fae8 	bl	800e73c <__assert_func>
 800d16c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d170:	6007      	str	r7, [r0, #0]
 800d172:	60c7      	str	r7, [r0, #12]
 800d174:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d178:	6819      	ldr	r1, [r3, #0]
 800d17a:	b159      	cbz	r1, 800d194 <_dtoa_r+0x5c>
 800d17c:	685a      	ldr	r2, [r3, #4]
 800d17e:	604a      	str	r2, [r1, #4]
 800d180:	2301      	movs	r3, #1
 800d182:	4093      	lsls	r3, r2
 800d184:	608b      	str	r3, [r1, #8]
 800d186:	4658      	mov	r0, fp
 800d188:	f000 feda 	bl	800df40 <_Bfree>
 800d18c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d190:	2200      	movs	r2, #0
 800d192:	601a      	str	r2, [r3, #0]
 800d194:	1e2b      	subs	r3, r5, #0
 800d196:	bfb9      	ittee	lt
 800d198:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d19c:	9303      	strlt	r3, [sp, #12]
 800d19e:	2300      	movge	r3, #0
 800d1a0:	6033      	strge	r3, [r6, #0]
 800d1a2:	9f03      	ldr	r7, [sp, #12]
 800d1a4:	4b98      	ldr	r3, [pc, #608]	@ (800d408 <_dtoa_r+0x2d0>)
 800d1a6:	bfbc      	itt	lt
 800d1a8:	2201      	movlt	r2, #1
 800d1aa:	6032      	strlt	r2, [r6, #0]
 800d1ac:	43bb      	bics	r3, r7
 800d1ae:	d112      	bne.n	800d1d6 <_dtoa_r+0x9e>
 800d1b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d1b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d1b6:	6013      	str	r3, [r2, #0]
 800d1b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d1bc:	4323      	orrs	r3, r4
 800d1be:	f000 854d 	beq.w	800dc5c <_dtoa_r+0xb24>
 800d1c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d1c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d41c <_dtoa_r+0x2e4>
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	f000 854f 	beq.w	800dc6c <_dtoa_r+0xb34>
 800d1ce:	f10a 0303 	add.w	r3, sl, #3
 800d1d2:	f000 bd49 	b.w	800dc68 <_dtoa_r+0xb30>
 800d1d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	ec51 0b17 	vmov	r0, r1, d7
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d1e6:	f7f3 fc8f 	bl	8000b08 <__aeabi_dcmpeq>
 800d1ea:	4680      	mov	r8, r0
 800d1ec:	b158      	cbz	r0, 800d206 <_dtoa_r+0xce>
 800d1ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	6013      	str	r3, [r2, #0]
 800d1f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d1f6:	b113      	cbz	r3, 800d1fe <_dtoa_r+0xc6>
 800d1f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d1fa:	4b84      	ldr	r3, [pc, #528]	@ (800d40c <_dtoa_r+0x2d4>)
 800d1fc:	6013      	str	r3, [r2, #0]
 800d1fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d420 <_dtoa_r+0x2e8>
 800d202:	f000 bd33 	b.w	800dc6c <_dtoa_r+0xb34>
 800d206:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d20a:	aa16      	add	r2, sp, #88	@ 0x58
 800d20c:	a917      	add	r1, sp, #92	@ 0x5c
 800d20e:	4658      	mov	r0, fp
 800d210:	f001 f980 	bl	800e514 <__d2b>
 800d214:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d218:	4681      	mov	r9, r0
 800d21a:	2e00      	cmp	r6, #0
 800d21c:	d077      	beq.n	800d30e <_dtoa_r+0x1d6>
 800d21e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d220:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d22c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d230:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d234:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d238:	4619      	mov	r1, r3
 800d23a:	2200      	movs	r2, #0
 800d23c:	4b74      	ldr	r3, [pc, #464]	@ (800d410 <_dtoa_r+0x2d8>)
 800d23e:	f7f3 f843 	bl	80002c8 <__aeabi_dsub>
 800d242:	a369      	add	r3, pc, #420	@ (adr r3, 800d3e8 <_dtoa_r+0x2b0>)
 800d244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d248:	f7f3 f9f6 	bl	8000638 <__aeabi_dmul>
 800d24c:	a368      	add	r3, pc, #416	@ (adr r3, 800d3f0 <_dtoa_r+0x2b8>)
 800d24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d252:	f7f3 f83b 	bl	80002cc <__adddf3>
 800d256:	4604      	mov	r4, r0
 800d258:	4630      	mov	r0, r6
 800d25a:	460d      	mov	r5, r1
 800d25c:	f7f3 f982 	bl	8000564 <__aeabi_i2d>
 800d260:	a365      	add	r3, pc, #404	@ (adr r3, 800d3f8 <_dtoa_r+0x2c0>)
 800d262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d266:	f7f3 f9e7 	bl	8000638 <__aeabi_dmul>
 800d26a:	4602      	mov	r2, r0
 800d26c:	460b      	mov	r3, r1
 800d26e:	4620      	mov	r0, r4
 800d270:	4629      	mov	r1, r5
 800d272:	f7f3 f82b 	bl	80002cc <__adddf3>
 800d276:	4604      	mov	r4, r0
 800d278:	460d      	mov	r5, r1
 800d27a:	f7f3 fc8d 	bl	8000b98 <__aeabi_d2iz>
 800d27e:	2200      	movs	r2, #0
 800d280:	4607      	mov	r7, r0
 800d282:	2300      	movs	r3, #0
 800d284:	4620      	mov	r0, r4
 800d286:	4629      	mov	r1, r5
 800d288:	f7f3 fc48 	bl	8000b1c <__aeabi_dcmplt>
 800d28c:	b140      	cbz	r0, 800d2a0 <_dtoa_r+0x168>
 800d28e:	4638      	mov	r0, r7
 800d290:	f7f3 f968 	bl	8000564 <__aeabi_i2d>
 800d294:	4622      	mov	r2, r4
 800d296:	462b      	mov	r3, r5
 800d298:	f7f3 fc36 	bl	8000b08 <__aeabi_dcmpeq>
 800d29c:	b900      	cbnz	r0, 800d2a0 <_dtoa_r+0x168>
 800d29e:	3f01      	subs	r7, #1
 800d2a0:	2f16      	cmp	r7, #22
 800d2a2:	d851      	bhi.n	800d348 <_dtoa_r+0x210>
 800d2a4:	4b5b      	ldr	r3, [pc, #364]	@ (800d414 <_dtoa_r+0x2dc>)
 800d2a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d2b2:	f7f3 fc33 	bl	8000b1c <__aeabi_dcmplt>
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	d048      	beq.n	800d34c <_dtoa_r+0x214>
 800d2ba:	3f01      	subs	r7, #1
 800d2bc:	2300      	movs	r3, #0
 800d2be:	9312      	str	r3, [sp, #72]	@ 0x48
 800d2c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d2c2:	1b9b      	subs	r3, r3, r6
 800d2c4:	1e5a      	subs	r2, r3, #1
 800d2c6:	bf44      	itt	mi
 800d2c8:	f1c3 0801 	rsbmi	r8, r3, #1
 800d2cc:	2300      	movmi	r3, #0
 800d2ce:	9208      	str	r2, [sp, #32]
 800d2d0:	bf54      	ite	pl
 800d2d2:	f04f 0800 	movpl.w	r8, #0
 800d2d6:	9308      	strmi	r3, [sp, #32]
 800d2d8:	2f00      	cmp	r7, #0
 800d2da:	db39      	blt.n	800d350 <_dtoa_r+0x218>
 800d2dc:	9b08      	ldr	r3, [sp, #32]
 800d2de:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d2e0:	443b      	add	r3, r7
 800d2e2:	9308      	str	r3, [sp, #32]
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2ea:	2b09      	cmp	r3, #9
 800d2ec:	d864      	bhi.n	800d3b8 <_dtoa_r+0x280>
 800d2ee:	2b05      	cmp	r3, #5
 800d2f0:	bfc4      	itt	gt
 800d2f2:	3b04      	subgt	r3, #4
 800d2f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d2f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2f8:	f1a3 0302 	sub.w	r3, r3, #2
 800d2fc:	bfcc      	ite	gt
 800d2fe:	2400      	movgt	r4, #0
 800d300:	2401      	movle	r4, #1
 800d302:	2b03      	cmp	r3, #3
 800d304:	d863      	bhi.n	800d3ce <_dtoa_r+0x296>
 800d306:	e8df f003 	tbb	[pc, r3]
 800d30a:	372a      	.short	0x372a
 800d30c:	5535      	.short	0x5535
 800d30e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d312:	441e      	add	r6, r3
 800d314:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d318:	2b20      	cmp	r3, #32
 800d31a:	bfc1      	itttt	gt
 800d31c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d320:	409f      	lslgt	r7, r3
 800d322:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d326:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d32a:	bfd6      	itet	le
 800d32c:	f1c3 0320 	rsble	r3, r3, #32
 800d330:	ea47 0003 	orrgt.w	r0, r7, r3
 800d334:	fa04 f003 	lslle.w	r0, r4, r3
 800d338:	f7f3 f904 	bl	8000544 <__aeabi_ui2d>
 800d33c:	2201      	movs	r2, #1
 800d33e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d342:	3e01      	subs	r6, #1
 800d344:	9214      	str	r2, [sp, #80]	@ 0x50
 800d346:	e777      	b.n	800d238 <_dtoa_r+0x100>
 800d348:	2301      	movs	r3, #1
 800d34a:	e7b8      	b.n	800d2be <_dtoa_r+0x186>
 800d34c:	9012      	str	r0, [sp, #72]	@ 0x48
 800d34e:	e7b7      	b.n	800d2c0 <_dtoa_r+0x188>
 800d350:	427b      	negs	r3, r7
 800d352:	930a      	str	r3, [sp, #40]	@ 0x28
 800d354:	2300      	movs	r3, #0
 800d356:	eba8 0807 	sub.w	r8, r8, r7
 800d35a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d35c:	e7c4      	b.n	800d2e8 <_dtoa_r+0x1b0>
 800d35e:	2300      	movs	r3, #0
 800d360:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d362:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d364:	2b00      	cmp	r3, #0
 800d366:	dc35      	bgt.n	800d3d4 <_dtoa_r+0x29c>
 800d368:	2301      	movs	r3, #1
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	9307      	str	r3, [sp, #28]
 800d36e:	461a      	mov	r2, r3
 800d370:	920e      	str	r2, [sp, #56]	@ 0x38
 800d372:	e00b      	b.n	800d38c <_dtoa_r+0x254>
 800d374:	2301      	movs	r3, #1
 800d376:	e7f3      	b.n	800d360 <_dtoa_r+0x228>
 800d378:	2300      	movs	r3, #0
 800d37a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d37c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d37e:	18fb      	adds	r3, r7, r3
 800d380:	9300      	str	r3, [sp, #0]
 800d382:	3301      	adds	r3, #1
 800d384:	2b01      	cmp	r3, #1
 800d386:	9307      	str	r3, [sp, #28]
 800d388:	bfb8      	it	lt
 800d38a:	2301      	movlt	r3, #1
 800d38c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d390:	2100      	movs	r1, #0
 800d392:	2204      	movs	r2, #4
 800d394:	f102 0514 	add.w	r5, r2, #20
 800d398:	429d      	cmp	r5, r3
 800d39a:	d91f      	bls.n	800d3dc <_dtoa_r+0x2a4>
 800d39c:	6041      	str	r1, [r0, #4]
 800d39e:	4658      	mov	r0, fp
 800d3a0:	f000 fd8e 	bl	800dec0 <_Balloc>
 800d3a4:	4682      	mov	sl, r0
 800d3a6:	2800      	cmp	r0, #0
 800d3a8:	d13c      	bne.n	800d424 <_dtoa_r+0x2ec>
 800d3aa:	4b1b      	ldr	r3, [pc, #108]	@ (800d418 <_dtoa_r+0x2e0>)
 800d3ac:	4602      	mov	r2, r0
 800d3ae:	f240 11af 	movw	r1, #431	@ 0x1af
 800d3b2:	e6d8      	b.n	800d166 <_dtoa_r+0x2e>
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	e7e0      	b.n	800d37a <_dtoa_r+0x242>
 800d3b8:	2401      	movs	r4, #1
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3be:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d3c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d3c4:	9300      	str	r3, [sp, #0]
 800d3c6:	9307      	str	r3, [sp, #28]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	2312      	movs	r3, #18
 800d3cc:	e7d0      	b.n	800d370 <_dtoa_r+0x238>
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3d2:	e7f5      	b.n	800d3c0 <_dtoa_r+0x288>
 800d3d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3d6:	9300      	str	r3, [sp, #0]
 800d3d8:	9307      	str	r3, [sp, #28]
 800d3da:	e7d7      	b.n	800d38c <_dtoa_r+0x254>
 800d3dc:	3101      	adds	r1, #1
 800d3de:	0052      	lsls	r2, r2, #1
 800d3e0:	e7d8      	b.n	800d394 <_dtoa_r+0x25c>
 800d3e2:	bf00      	nop
 800d3e4:	f3af 8000 	nop.w
 800d3e8:	636f4361 	.word	0x636f4361
 800d3ec:	3fd287a7 	.word	0x3fd287a7
 800d3f0:	8b60c8b3 	.word	0x8b60c8b3
 800d3f4:	3fc68a28 	.word	0x3fc68a28
 800d3f8:	509f79fb 	.word	0x509f79fb
 800d3fc:	3fd34413 	.word	0x3fd34413
 800d400:	08011539 	.word	0x08011539
 800d404:	08011550 	.word	0x08011550
 800d408:	7ff00000 	.word	0x7ff00000
 800d40c:	08011509 	.word	0x08011509
 800d410:	3ff80000 	.word	0x3ff80000
 800d414:	08011648 	.word	0x08011648
 800d418:	080115a8 	.word	0x080115a8
 800d41c:	08011535 	.word	0x08011535
 800d420:	08011508 	.word	0x08011508
 800d424:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d428:	6018      	str	r0, [r3, #0]
 800d42a:	9b07      	ldr	r3, [sp, #28]
 800d42c:	2b0e      	cmp	r3, #14
 800d42e:	f200 80a4 	bhi.w	800d57a <_dtoa_r+0x442>
 800d432:	2c00      	cmp	r4, #0
 800d434:	f000 80a1 	beq.w	800d57a <_dtoa_r+0x442>
 800d438:	2f00      	cmp	r7, #0
 800d43a:	dd33      	ble.n	800d4a4 <_dtoa_r+0x36c>
 800d43c:	4bad      	ldr	r3, [pc, #692]	@ (800d6f4 <_dtoa_r+0x5bc>)
 800d43e:	f007 020f 	and.w	r2, r7, #15
 800d442:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d446:	ed93 7b00 	vldr	d7, [r3]
 800d44a:	05f8      	lsls	r0, r7, #23
 800d44c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d450:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d454:	d516      	bpl.n	800d484 <_dtoa_r+0x34c>
 800d456:	4ba8      	ldr	r3, [pc, #672]	@ (800d6f8 <_dtoa_r+0x5c0>)
 800d458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d45c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d460:	f7f3 fa14 	bl	800088c <__aeabi_ddiv>
 800d464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d468:	f004 040f 	and.w	r4, r4, #15
 800d46c:	2603      	movs	r6, #3
 800d46e:	4da2      	ldr	r5, [pc, #648]	@ (800d6f8 <_dtoa_r+0x5c0>)
 800d470:	b954      	cbnz	r4, 800d488 <_dtoa_r+0x350>
 800d472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d47a:	f7f3 fa07 	bl	800088c <__aeabi_ddiv>
 800d47e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d482:	e028      	b.n	800d4d6 <_dtoa_r+0x39e>
 800d484:	2602      	movs	r6, #2
 800d486:	e7f2      	b.n	800d46e <_dtoa_r+0x336>
 800d488:	07e1      	lsls	r1, r4, #31
 800d48a:	d508      	bpl.n	800d49e <_dtoa_r+0x366>
 800d48c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d490:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d494:	f7f3 f8d0 	bl	8000638 <__aeabi_dmul>
 800d498:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d49c:	3601      	adds	r6, #1
 800d49e:	1064      	asrs	r4, r4, #1
 800d4a0:	3508      	adds	r5, #8
 800d4a2:	e7e5      	b.n	800d470 <_dtoa_r+0x338>
 800d4a4:	f000 80d2 	beq.w	800d64c <_dtoa_r+0x514>
 800d4a8:	427c      	negs	r4, r7
 800d4aa:	4b92      	ldr	r3, [pc, #584]	@ (800d6f4 <_dtoa_r+0x5bc>)
 800d4ac:	4d92      	ldr	r5, [pc, #584]	@ (800d6f8 <_dtoa_r+0x5c0>)
 800d4ae:	f004 020f 	and.w	r2, r4, #15
 800d4b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4be:	f7f3 f8bb 	bl	8000638 <__aeabi_dmul>
 800d4c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4c6:	1124      	asrs	r4, r4, #4
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	2602      	movs	r6, #2
 800d4cc:	2c00      	cmp	r4, #0
 800d4ce:	f040 80b2 	bne.w	800d636 <_dtoa_r+0x4fe>
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d1d3      	bne.n	800d47e <_dtoa_r+0x346>
 800d4d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d4d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	f000 80b7 	beq.w	800d650 <_dtoa_r+0x518>
 800d4e2:	4b86      	ldr	r3, [pc, #536]	@ (800d6fc <_dtoa_r+0x5c4>)
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	4629      	mov	r1, r5
 800d4ea:	f7f3 fb17 	bl	8000b1c <__aeabi_dcmplt>
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	f000 80ae 	beq.w	800d650 <_dtoa_r+0x518>
 800d4f4:	9b07      	ldr	r3, [sp, #28]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	f000 80aa 	beq.w	800d650 <_dtoa_r+0x518>
 800d4fc:	9b00      	ldr	r3, [sp, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	dd37      	ble.n	800d572 <_dtoa_r+0x43a>
 800d502:	1e7b      	subs	r3, r7, #1
 800d504:	9304      	str	r3, [sp, #16]
 800d506:	4620      	mov	r0, r4
 800d508:	4b7d      	ldr	r3, [pc, #500]	@ (800d700 <_dtoa_r+0x5c8>)
 800d50a:	2200      	movs	r2, #0
 800d50c:	4629      	mov	r1, r5
 800d50e:	f7f3 f893 	bl	8000638 <__aeabi_dmul>
 800d512:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d516:	9c00      	ldr	r4, [sp, #0]
 800d518:	3601      	adds	r6, #1
 800d51a:	4630      	mov	r0, r6
 800d51c:	f7f3 f822 	bl	8000564 <__aeabi_i2d>
 800d520:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d524:	f7f3 f888 	bl	8000638 <__aeabi_dmul>
 800d528:	4b76      	ldr	r3, [pc, #472]	@ (800d704 <_dtoa_r+0x5cc>)
 800d52a:	2200      	movs	r2, #0
 800d52c:	f7f2 fece 	bl	80002cc <__adddf3>
 800d530:	4605      	mov	r5, r0
 800d532:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d536:	2c00      	cmp	r4, #0
 800d538:	f040 808d 	bne.w	800d656 <_dtoa_r+0x51e>
 800d53c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d540:	4b71      	ldr	r3, [pc, #452]	@ (800d708 <_dtoa_r+0x5d0>)
 800d542:	2200      	movs	r2, #0
 800d544:	f7f2 fec0 	bl	80002c8 <__aeabi_dsub>
 800d548:	4602      	mov	r2, r0
 800d54a:	460b      	mov	r3, r1
 800d54c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d550:	462a      	mov	r2, r5
 800d552:	4633      	mov	r3, r6
 800d554:	f7f3 fb00 	bl	8000b58 <__aeabi_dcmpgt>
 800d558:	2800      	cmp	r0, #0
 800d55a:	f040 828b 	bne.w	800da74 <_dtoa_r+0x93c>
 800d55e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d562:	462a      	mov	r2, r5
 800d564:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d568:	f7f3 fad8 	bl	8000b1c <__aeabi_dcmplt>
 800d56c:	2800      	cmp	r0, #0
 800d56e:	f040 8128 	bne.w	800d7c2 <_dtoa_r+0x68a>
 800d572:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d576:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d57a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	f2c0 815a 	blt.w	800d836 <_dtoa_r+0x6fe>
 800d582:	2f0e      	cmp	r7, #14
 800d584:	f300 8157 	bgt.w	800d836 <_dtoa_r+0x6fe>
 800d588:	4b5a      	ldr	r3, [pc, #360]	@ (800d6f4 <_dtoa_r+0x5bc>)
 800d58a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d58e:	ed93 7b00 	vldr	d7, [r3]
 800d592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d594:	2b00      	cmp	r3, #0
 800d596:	ed8d 7b00 	vstr	d7, [sp]
 800d59a:	da03      	bge.n	800d5a4 <_dtoa_r+0x46c>
 800d59c:	9b07      	ldr	r3, [sp, #28]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	f340 8101 	ble.w	800d7a6 <_dtoa_r+0x66e>
 800d5a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d5a8:	4656      	mov	r6, sl
 800d5aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	4629      	mov	r1, r5
 800d5b2:	f7f3 f96b 	bl	800088c <__aeabi_ddiv>
 800d5b6:	f7f3 faef 	bl	8000b98 <__aeabi_d2iz>
 800d5ba:	4680      	mov	r8, r0
 800d5bc:	f7f2 ffd2 	bl	8000564 <__aeabi_i2d>
 800d5c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5c4:	f7f3 f838 	bl	8000638 <__aeabi_dmul>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	4629      	mov	r1, r5
 800d5d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d5d4:	f7f2 fe78 	bl	80002c8 <__aeabi_dsub>
 800d5d8:	f806 4b01 	strb.w	r4, [r6], #1
 800d5dc:	9d07      	ldr	r5, [sp, #28]
 800d5de:	eba6 040a 	sub.w	r4, r6, sl
 800d5e2:	42a5      	cmp	r5, r4
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	460b      	mov	r3, r1
 800d5e8:	f040 8117 	bne.w	800d81a <_dtoa_r+0x6e2>
 800d5ec:	f7f2 fe6e 	bl	80002cc <__adddf3>
 800d5f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5f4:	4604      	mov	r4, r0
 800d5f6:	460d      	mov	r5, r1
 800d5f8:	f7f3 faae 	bl	8000b58 <__aeabi_dcmpgt>
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	f040 80f9 	bne.w	800d7f4 <_dtoa_r+0x6bc>
 800d602:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d606:	4620      	mov	r0, r4
 800d608:	4629      	mov	r1, r5
 800d60a:	f7f3 fa7d 	bl	8000b08 <__aeabi_dcmpeq>
 800d60e:	b118      	cbz	r0, 800d618 <_dtoa_r+0x4e0>
 800d610:	f018 0f01 	tst.w	r8, #1
 800d614:	f040 80ee 	bne.w	800d7f4 <_dtoa_r+0x6bc>
 800d618:	4649      	mov	r1, r9
 800d61a:	4658      	mov	r0, fp
 800d61c:	f000 fc90 	bl	800df40 <_Bfree>
 800d620:	2300      	movs	r3, #0
 800d622:	7033      	strb	r3, [r6, #0]
 800d624:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d626:	3701      	adds	r7, #1
 800d628:	601f      	str	r7, [r3, #0]
 800d62a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	f000 831d 	beq.w	800dc6c <_dtoa_r+0xb34>
 800d632:	601e      	str	r6, [r3, #0]
 800d634:	e31a      	b.n	800dc6c <_dtoa_r+0xb34>
 800d636:	07e2      	lsls	r2, r4, #31
 800d638:	d505      	bpl.n	800d646 <_dtoa_r+0x50e>
 800d63a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d63e:	f7f2 fffb 	bl	8000638 <__aeabi_dmul>
 800d642:	3601      	adds	r6, #1
 800d644:	2301      	movs	r3, #1
 800d646:	1064      	asrs	r4, r4, #1
 800d648:	3508      	adds	r5, #8
 800d64a:	e73f      	b.n	800d4cc <_dtoa_r+0x394>
 800d64c:	2602      	movs	r6, #2
 800d64e:	e742      	b.n	800d4d6 <_dtoa_r+0x39e>
 800d650:	9c07      	ldr	r4, [sp, #28]
 800d652:	9704      	str	r7, [sp, #16]
 800d654:	e761      	b.n	800d51a <_dtoa_r+0x3e2>
 800d656:	4b27      	ldr	r3, [pc, #156]	@ (800d6f4 <_dtoa_r+0x5bc>)
 800d658:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d65a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d65e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d662:	4454      	add	r4, sl
 800d664:	2900      	cmp	r1, #0
 800d666:	d053      	beq.n	800d710 <_dtoa_r+0x5d8>
 800d668:	4928      	ldr	r1, [pc, #160]	@ (800d70c <_dtoa_r+0x5d4>)
 800d66a:	2000      	movs	r0, #0
 800d66c:	f7f3 f90e 	bl	800088c <__aeabi_ddiv>
 800d670:	4633      	mov	r3, r6
 800d672:	462a      	mov	r2, r5
 800d674:	f7f2 fe28 	bl	80002c8 <__aeabi_dsub>
 800d678:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d67c:	4656      	mov	r6, sl
 800d67e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d682:	f7f3 fa89 	bl	8000b98 <__aeabi_d2iz>
 800d686:	4605      	mov	r5, r0
 800d688:	f7f2 ff6c 	bl	8000564 <__aeabi_i2d>
 800d68c:	4602      	mov	r2, r0
 800d68e:	460b      	mov	r3, r1
 800d690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d694:	f7f2 fe18 	bl	80002c8 <__aeabi_dsub>
 800d698:	3530      	adds	r5, #48	@ 0x30
 800d69a:	4602      	mov	r2, r0
 800d69c:	460b      	mov	r3, r1
 800d69e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d6a2:	f806 5b01 	strb.w	r5, [r6], #1
 800d6a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d6aa:	f7f3 fa37 	bl	8000b1c <__aeabi_dcmplt>
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	d171      	bne.n	800d796 <_dtoa_r+0x65e>
 800d6b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6b6:	4911      	ldr	r1, [pc, #68]	@ (800d6fc <_dtoa_r+0x5c4>)
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	f7f2 fe05 	bl	80002c8 <__aeabi_dsub>
 800d6be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d6c2:	f7f3 fa2b 	bl	8000b1c <__aeabi_dcmplt>
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	f040 8095 	bne.w	800d7f6 <_dtoa_r+0x6be>
 800d6cc:	42a6      	cmp	r6, r4
 800d6ce:	f43f af50 	beq.w	800d572 <_dtoa_r+0x43a>
 800d6d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d6d6:	4b0a      	ldr	r3, [pc, #40]	@ (800d700 <_dtoa_r+0x5c8>)
 800d6d8:	2200      	movs	r2, #0
 800d6da:	f7f2 ffad 	bl	8000638 <__aeabi_dmul>
 800d6de:	4b08      	ldr	r3, [pc, #32]	@ (800d700 <_dtoa_r+0x5c8>)
 800d6e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6ea:	f7f2 ffa5 	bl	8000638 <__aeabi_dmul>
 800d6ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6f2:	e7c4      	b.n	800d67e <_dtoa_r+0x546>
 800d6f4:	08011648 	.word	0x08011648
 800d6f8:	08011620 	.word	0x08011620
 800d6fc:	3ff00000 	.word	0x3ff00000
 800d700:	40240000 	.word	0x40240000
 800d704:	401c0000 	.word	0x401c0000
 800d708:	40140000 	.word	0x40140000
 800d70c:	3fe00000 	.word	0x3fe00000
 800d710:	4631      	mov	r1, r6
 800d712:	4628      	mov	r0, r5
 800d714:	f7f2 ff90 	bl	8000638 <__aeabi_dmul>
 800d718:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d71c:	9415      	str	r4, [sp, #84]	@ 0x54
 800d71e:	4656      	mov	r6, sl
 800d720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d724:	f7f3 fa38 	bl	8000b98 <__aeabi_d2iz>
 800d728:	4605      	mov	r5, r0
 800d72a:	f7f2 ff1b 	bl	8000564 <__aeabi_i2d>
 800d72e:	4602      	mov	r2, r0
 800d730:	460b      	mov	r3, r1
 800d732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d736:	f7f2 fdc7 	bl	80002c8 <__aeabi_dsub>
 800d73a:	3530      	adds	r5, #48	@ 0x30
 800d73c:	f806 5b01 	strb.w	r5, [r6], #1
 800d740:	4602      	mov	r2, r0
 800d742:	460b      	mov	r3, r1
 800d744:	42a6      	cmp	r6, r4
 800d746:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d74a:	f04f 0200 	mov.w	r2, #0
 800d74e:	d124      	bne.n	800d79a <_dtoa_r+0x662>
 800d750:	4bac      	ldr	r3, [pc, #688]	@ (800da04 <_dtoa_r+0x8cc>)
 800d752:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d756:	f7f2 fdb9 	bl	80002cc <__adddf3>
 800d75a:	4602      	mov	r2, r0
 800d75c:	460b      	mov	r3, r1
 800d75e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d762:	f7f3 f9f9 	bl	8000b58 <__aeabi_dcmpgt>
 800d766:	2800      	cmp	r0, #0
 800d768:	d145      	bne.n	800d7f6 <_dtoa_r+0x6be>
 800d76a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d76e:	49a5      	ldr	r1, [pc, #660]	@ (800da04 <_dtoa_r+0x8cc>)
 800d770:	2000      	movs	r0, #0
 800d772:	f7f2 fda9 	bl	80002c8 <__aeabi_dsub>
 800d776:	4602      	mov	r2, r0
 800d778:	460b      	mov	r3, r1
 800d77a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d77e:	f7f3 f9cd 	bl	8000b1c <__aeabi_dcmplt>
 800d782:	2800      	cmp	r0, #0
 800d784:	f43f aef5 	beq.w	800d572 <_dtoa_r+0x43a>
 800d788:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d78a:	1e73      	subs	r3, r6, #1
 800d78c:	9315      	str	r3, [sp, #84]	@ 0x54
 800d78e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d792:	2b30      	cmp	r3, #48	@ 0x30
 800d794:	d0f8      	beq.n	800d788 <_dtoa_r+0x650>
 800d796:	9f04      	ldr	r7, [sp, #16]
 800d798:	e73e      	b.n	800d618 <_dtoa_r+0x4e0>
 800d79a:	4b9b      	ldr	r3, [pc, #620]	@ (800da08 <_dtoa_r+0x8d0>)
 800d79c:	f7f2 ff4c 	bl	8000638 <__aeabi_dmul>
 800d7a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7a4:	e7bc      	b.n	800d720 <_dtoa_r+0x5e8>
 800d7a6:	d10c      	bne.n	800d7c2 <_dtoa_r+0x68a>
 800d7a8:	4b98      	ldr	r3, [pc, #608]	@ (800da0c <_dtoa_r+0x8d4>)
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7b0:	f7f2 ff42 	bl	8000638 <__aeabi_dmul>
 800d7b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7b8:	f7f3 f9c4 	bl	8000b44 <__aeabi_dcmpge>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	f000 8157 	beq.w	800da70 <_dtoa_r+0x938>
 800d7c2:	2400      	movs	r4, #0
 800d7c4:	4625      	mov	r5, r4
 800d7c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7c8:	43db      	mvns	r3, r3
 800d7ca:	9304      	str	r3, [sp, #16]
 800d7cc:	4656      	mov	r6, sl
 800d7ce:	2700      	movs	r7, #0
 800d7d0:	4621      	mov	r1, r4
 800d7d2:	4658      	mov	r0, fp
 800d7d4:	f000 fbb4 	bl	800df40 <_Bfree>
 800d7d8:	2d00      	cmp	r5, #0
 800d7da:	d0dc      	beq.n	800d796 <_dtoa_r+0x65e>
 800d7dc:	b12f      	cbz	r7, 800d7ea <_dtoa_r+0x6b2>
 800d7de:	42af      	cmp	r7, r5
 800d7e0:	d003      	beq.n	800d7ea <_dtoa_r+0x6b2>
 800d7e2:	4639      	mov	r1, r7
 800d7e4:	4658      	mov	r0, fp
 800d7e6:	f000 fbab 	bl	800df40 <_Bfree>
 800d7ea:	4629      	mov	r1, r5
 800d7ec:	4658      	mov	r0, fp
 800d7ee:	f000 fba7 	bl	800df40 <_Bfree>
 800d7f2:	e7d0      	b.n	800d796 <_dtoa_r+0x65e>
 800d7f4:	9704      	str	r7, [sp, #16]
 800d7f6:	4633      	mov	r3, r6
 800d7f8:	461e      	mov	r6, r3
 800d7fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7fe:	2a39      	cmp	r2, #57	@ 0x39
 800d800:	d107      	bne.n	800d812 <_dtoa_r+0x6da>
 800d802:	459a      	cmp	sl, r3
 800d804:	d1f8      	bne.n	800d7f8 <_dtoa_r+0x6c0>
 800d806:	9a04      	ldr	r2, [sp, #16]
 800d808:	3201      	adds	r2, #1
 800d80a:	9204      	str	r2, [sp, #16]
 800d80c:	2230      	movs	r2, #48	@ 0x30
 800d80e:	f88a 2000 	strb.w	r2, [sl]
 800d812:	781a      	ldrb	r2, [r3, #0]
 800d814:	3201      	adds	r2, #1
 800d816:	701a      	strb	r2, [r3, #0]
 800d818:	e7bd      	b.n	800d796 <_dtoa_r+0x65e>
 800d81a:	4b7b      	ldr	r3, [pc, #492]	@ (800da08 <_dtoa_r+0x8d0>)
 800d81c:	2200      	movs	r2, #0
 800d81e:	f7f2 ff0b 	bl	8000638 <__aeabi_dmul>
 800d822:	2200      	movs	r2, #0
 800d824:	2300      	movs	r3, #0
 800d826:	4604      	mov	r4, r0
 800d828:	460d      	mov	r5, r1
 800d82a:	f7f3 f96d 	bl	8000b08 <__aeabi_dcmpeq>
 800d82e:	2800      	cmp	r0, #0
 800d830:	f43f aebb 	beq.w	800d5aa <_dtoa_r+0x472>
 800d834:	e6f0      	b.n	800d618 <_dtoa_r+0x4e0>
 800d836:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d838:	2a00      	cmp	r2, #0
 800d83a:	f000 80db 	beq.w	800d9f4 <_dtoa_r+0x8bc>
 800d83e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d840:	2a01      	cmp	r2, #1
 800d842:	f300 80bf 	bgt.w	800d9c4 <_dtoa_r+0x88c>
 800d846:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d848:	2a00      	cmp	r2, #0
 800d84a:	f000 80b7 	beq.w	800d9bc <_dtoa_r+0x884>
 800d84e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d852:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d854:	4646      	mov	r6, r8
 800d856:	9a08      	ldr	r2, [sp, #32]
 800d858:	2101      	movs	r1, #1
 800d85a:	441a      	add	r2, r3
 800d85c:	4658      	mov	r0, fp
 800d85e:	4498      	add	r8, r3
 800d860:	9208      	str	r2, [sp, #32]
 800d862:	f000 fc21 	bl	800e0a8 <__i2b>
 800d866:	4605      	mov	r5, r0
 800d868:	b15e      	cbz	r6, 800d882 <_dtoa_r+0x74a>
 800d86a:	9b08      	ldr	r3, [sp, #32]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	dd08      	ble.n	800d882 <_dtoa_r+0x74a>
 800d870:	42b3      	cmp	r3, r6
 800d872:	9a08      	ldr	r2, [sp, #32]
 800d874:	bfa8      	it	ge
 800d876:	4633      	movge	r3, r6
 800d878:	eba8 0803 	sub.w	r8, r8, r3
 800d87c:	1af6      	subs	r6, r6, r3
 800d87e:	1ad3      	subs	r3, r2, r3
 800d880:	9308      	str	r3, [sp, #32]
 800d882:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d884:	b1f3      	cbz	r3, 800d8c4 <_dtoa_r+0x78c>
 800d886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d888:	2b00      	cmp	r3, #0
 800d88a:	f000 80b7 	beq.w	800d9fc <_dtoa_r+0x8c4>
 800d88e:	b18c      	cbz	r4, 800d8b4 <_dtoa_r+0x77c>
 800d890:	4629      	mov	r1, r5
 800d892:	4622      	mov	r2, r4
 800d894:	4658      	mov	r0, fp
 800d896:	f000 fcc7 	bl	800e228 <__pow5mult>
 800d89a:	464a      	mov	r2, r9
 800d89c:	4601      	mov	r1, r0
 800d89e:	4605      	mov	r5, r0
 800d8a0:	4658      	mov	r0, fp
 800d8a2:	f000 fc17 	bl	800e0d4 <__multiply>
 800d8a6:	4649      	mov	r1, r9
 800d8a8:	9004      	str	r0, [sp, #16]
 800d8aa:	4658      	mov	r0, fp
 800d8ac:	f000 fb48 	bl	800df40 <_Bfree>
 800d8b0:	9b04      	ldr	r3, [sp, #16]
 800d8b2:	4699      	mov	r9, r3
 800d8b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8b6:	1b1a      	subs	r2, r3, r4
 800d8b8:	d004      	beq.n	800d8c4 <_dtoa_r+0x78c>
 800d8ba:	4649      	mov	r1, r9
 800d8bc:	4658      	mov	r0, fp
 800d8be:	f000 fcb3 	bl	800e228 <__pow5mult>
 800d8c2:	4681      	mov	r9, r0
 800d8c4:	2101      	movs	r1, #1
 800d8c6:	4658      	mov	r0, fp
 800d8c8:	f000 fbee 	bl	800e0a8 <__i2b>
 800d8cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f000 81cf 	beq.w	800dc74 <_dtoa_r+0xb3c>
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	4601      	mov	r1, r0
 800d8da:	4658      	mov	r0, fp
 800d8dc:	f000 fca4 	bl	800e228 <__pow5mult>
 800d8e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	4604      	mov	r4, r0
 800d8e6:	f300 8095 	bgt.w	800da14 <_dtoa_r+0x8dc>
 800d8ea:	9b02      	ldr	r3, [sp, #8]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	f040 8087 	bne.w	800da00 <_dtoa_r+0x8c8>
 800d8f2:	9b03      	ldr	r3, [sp, #12]
 800d8f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f040 8089 	bne.w	800da10 <_dtoa_r+0x8d8>
 800d8fe:	9b03      	ldr	r3, [sp, #12]
 800d900:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d904:	0d1b      	lsrs	r3, r3, #20
 800d906:	051b      	lsls	r3, r3, #20
 800d908:	b12b      	cbz	r3, 800d916 <_dtoa_r+0x7de>
 800d90a:	9b08      	ldr	r3, [sp, #32]
 800d90c:	3301      	adds	r3, #1
 800d90e:	9308      	str	r3, [sp, #32]
 800d910:	f108 0801 	add.w	r8, r8, #1
 800d914:	2301      	movs	r3, #1
 800d916:	930a      	str	r3, [sp, #40]	@ 0x28
 800d918:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	f000 81b0 	beq.w	800dc80 <_dtoa_r+0xb48>
 800d920:	6923      	ldr	r3, [r4, #16]
 800d922:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d926:	6918      	ldr	r0, [r3, #16]
 800d928:	f000 fb72 	bl	800e010 <__hi0bits>
 800d92c:	f1c0 0020 	rsb	r0, r0, #32
 800d930:	9b08      	ldr	r3, [sp, #32]
 800d932:	4418      	add	r0, r3
 800d934:	f010 001f 	ands.w	r0, r0, #31
 800d938:	d077      	beq.n	800da2a <_dtoa_r+0x8f2>
 800d93a:	f1c0 0320 	rsb	r3, r0, #32
 800d93e:	2b04      	cmp	r3, #4
 800d940:	dd6b      	ble.n	800da1a <_dtoa_r+0x8e2>
 800d942:	9b08      	ldr	r3, [sp, #32]
 800d944:	f1c0 001c 	rsb	r0, r0, #28
 800d948:	4403      	add	r3, r0
 800d94a:	4480      	add	r8, r0
 800d94c:	4406      	add	r6, r0
 800d94e:	9308      	str	r3, [sp, #32]
 800d950:	f1b8 0f00 	cmp.w	r8, #0
 800d954:	dd05      	ble.n	800d962 <_dtoa_r+0x82a>
 800d956:	4649      	mov	r1, r9
 800d958:	4642      	mov	r2, r8
 800d95a:	4658      	mov	r0, fp
 800d95c:	f000 fcbe 	bl	800e2dc <__lshift>
 800d960:	4681      	mov	r9, r0
 800d962:	9b08      	ldr	r3, [sp, #32]
 800d964:	2b00      	cmp	r3, #0
 800d966:	dd05      	ble.n	800d974 <_dtoa_r+0x83c>
 800d968:	4621      	mov	r1, r4
 800d96a:	461a      	mov	r2, r3
 800d96c:	4658      	mov	r0, fp
 800d96e:	f000 fcb5 	bl	800e2dc <__lshift>
 800d972:	4604      	mov	r4, r0
 800d974:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d976:	2b00      	cmp	r3, #0
 800d978:	d059      	beq.n	800da2e <_dtoa_r+0x8f6>
 800d97a:	4621      	mov	r1, r4
 800d97c:	4648      	mov	r0, r9
 800d97e:	f000 fd19 	bl	800e3b4 <__mcmp>
 800d982:	2800      	cmp	r0, #0
 800d984:	da53      	bge.n	800da2e <_dtoa_r+0x8f6>
 800d986:	1e7b      	subs	r3, r7, #1
 800d988:	9304      	str	r3, [sp, #16]
 800d98a:	4649      	mov	r1, r9
 800d98c:	2300      	movs	r3, #0
 800d98e:	220a      	movs	r2, #10
 800d990:	4658      	mov	r0, fp
 800d992:	f000 faf7 	bl	800df84 <__multadd>
 800d996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d998:	4681      	mov	r9, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	f000 8172 	beq.w	800dc84 <_dtoa_r+0xb4c>
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	4629      	mov	r1, r5
 800d9a4:	220a      	movs	r2, #10
 800d9a6:	4658      	mov	r0, fp
 800d9a8:	f000 faec 	bl	800df84 <__multadd>
 800d9ac:	9b00      	ldr	r3, [sp, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	4605      	mov	r5, r0
 800d9b2:	dc67      	bgt.n	800da84 <_dtoa_r+0x94c>
 800d9b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9b6:	2b02      	cmp	r3, #2
 800d9b8:	dc41      	bgt.n	800da3e <_dtoa_r+0x906>
 800d9ba:	e063      	b.n	800da84 <_dtoa_r+0x94c>
 800d9bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d9be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d9c2:	e746      	b.n	800d852 <_dtoa_r+0x71a>
 800d9c4:	9b07      	ldr	r3, [sp, #28]
 800d9c6:	1e5c      	subs	r4, r3, #1
 800d9c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9ca:	42a3      	cmp	r3, r4
 800d9cc:	bfbf      	itttt	lt
 800d9ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d9d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d9d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d9d4:	1ae3      	sublt	r3, r4, r3
 800d9d6:	bfb4      	ite	lt
 800d9d8:	18d2      	addlt	r2, r2, r3
 800d9da:	1b1c      	subge	r4, r3, r4
 800d9dc:	9b07      	ldr	r3, [sp, #28]
 800d9de:	bfbc      	itt	lt
 800d9e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d9e2:	2400      	movlt	r4, #0
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	bfb5      	itete	lt
 800d9e8:	eba8 0603 	sublt.w	r6, r8, r3
 800d9ec:	9b07      	ldrge	r3, [sp, #28]
 800d9ee:	2300      	movlt	r3, #0
 800d9f0:	4646      	movge	r6, r8
 800d9f2:	e730      	b.n	800d856 <_dtoa_r+0x71e>
 800d9f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d9f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d9f8:	4646      	mov	r6, r8
 800d9fa:	e735      	b.n	800d868 <_dtoa_r+0x730>
 800d9fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d9fe:	e75c      	b.n	800d8ba <_dtoa_r+0x782>
 800da00:	2300      	movs	r3, #0
 800da02:	e788      	b.n	800d916 <_dtoa_r+0x7de>
 800da04:	3fe00000 	.word	0x3fe00000
 800da08:	40240000 	.word	0x40240000
 800da0c:	40140000 	.word	0x40140000
 800da10:	9b02      	ldr	r3, [sp, #8]
 800da12:	e780      	b.n	800d916 <_dtoa_r+0x7de>
 800da14:	2300      	movs	r3, #0
 800da16:	930a      	str	r3, [sp, #40]	@ 0x28
 800da18:	e782      	b.n	800d920 <_dtoa_r+0x7e8>
 800da1a:	d099      	beq.n	800d950 <_dtoa_r+0x818>
 800da1c:	9a08      	ldr	r2, [sp, #32]
 800da1e:	331c      	adds	r3, #28
 800da20:	441a      	add	r2, r3
 800da22:	4498      	add	r8, r3
 800da24:	441e      	add	r6, r3
 800da26:	9208      	str	r2, [sp, #32]
 800da28:	e792      	b.n	800d950 <_dtoa_r+0x818>
 800da2a:	4603      	mov	r3, r0
 800da2c:	e7f6      	b.n	800da1c <_dtoa_r+0x8e4>
 800da2e:	9b07      	ldr	r3, [sp, #28]
 800da30:	9704      	str	r7, [sp, #16]
 800da32:	2b00      	cmp	r3, #0
 800da34:	dc20      	bgt.n	800da78 <_dtoa_r+0x940>
 800da36:	9300      	str	r3, [sp, #0]
 800da38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da3a:	2b02      	cmp	r3, #2
 800da3c:	dd1e      	ble.n	800da7c <_dtoa_r+0x944>
 800da3e:	9b00      	ldr	r3, [sp, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	f47f aec0 	bne.w	800d7c6 <_dtoa_r+0x68e>
 800da46:	4621      	mov	r1, r4
 800da48:	2205      	movs	r2, #5
 800da4a:	4658      	mov	r0, fp
 800da4c:	f000 fa9a 	bl	800df84 <__multadd>
 800da50:	4601      	mov	r1, r0
 800da52:	4604      	mov	r4, r0
 800da54:	4648      	mov	r0, r9
 800da56:	f000 fcad 	bl	800e3b4 <__mcmp>
 800da5a:	2800      	cmp	r0, #0
 800da5c:	f77f aeb3 	ble.w	800d7c6 <_dtoa_r+0x68e>
 800da60:	4656      	mov	r6, sl
 800da62:	2331      	movs	r3, #49	@ 0x31
 800da64:	f806 3b01 	strb.w	r3, [r6], #1
 800da68:	9b04      	ldr	r3, [sp, #16]
 800da6a:	3301      	adds	r3, #1
 800da6c:	9304      	str	r3, [sp, #16]
 800da6e:	e6ae      	b.n	800d7ce <_dtoa_r+0x696>
 800da70:	9c07      	ldr	r4, [sp, #28]
 800da72:	9704      	str	r7, [sp, #16]
 800da74:	4625      	mov	r5, r4
 800da76:	e7f3      	b.n	800da60 <_dtoa_r+0x928>
 800da78:	9b07      	ldr	r3, [sp, #28]
 800da7a:	9300      	str	r3, [sp, #0]
 800da7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da7e:	2b00      	cmp	r3, #0
 800da80:	f000 8104 	beq.w	800dc8c <_dtoa_r+0xb54>
 800da84:	2e00      	cmp	r6, #0
 800da86:	dd05      	ble.n	800da94 <_dtoa_r+0x95c>
 800da88:	4629      	mov	r1, r5
 800da8a:	4632      	mov	r2, r6
 800da8c:	4658      	mov	r0, fp
 800da8e:	f000 fc25 	bl	800e2dc <__lshift>
 800da92:	4605      	mov	r5, r0
 800da94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da96:	2b00      	cmp	r3, #0
 800da98:	d05a      	beq.n	800db50 <_dtoa_r+0xa18>
 800da9a:	6869      	ldr	r1, [r5, #4]
 800da9c:	4658      	mov	r0, fp
 800da9e:	f000 fa0f 	bl	800dec0 <_Balloc>
 800daa2:	4606      	mov	r6, r0
 800daa4:	b928      	cbnz	r0, 800dab2 <_dtoa_r+0x97a>
 800daa6:	4b84      	ldr	r3, [pc, #528]	@ (800dcb8 <_dtoa_r+0xb80>)
 800daa8:	4602      	mov	r2, r0
 800daaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800daae:	f7ff bb5a 	b.w	800d166 <_dtoa_r+0x2e>
 800dab2:	692a      	ldr	r2, [r5, #16]
 800dab4:	3202      	adds	r2, #2
 800dab6:	0092      	lsls	r2, r2, #2
 800dab8:	f105 010c 	add.w	r1, r5, #12
 800dabc:	300c      	adds	r0, #12
 800dabe:	f7ff faa2 	bl	800d006 <memcpy>
 800dac2:	2201      	movs	r2, #1
 800dac4:	4631      	mov	r1, r6
 800dac6:	4658      	mov	r0, fp
 800dac8:	f000 fc08 	bl	800e2dc <__lshift>
 800dacc:	f10a 0301 	add.w	r3, sl, #1
 800dad0:	9307      	str	r3, [sp, #28]
 800dad2:	9b00      	ldr	r3, [sp, #0]
 800dad4:	4453      	add	r3, sl
 800dad6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dad8:	9b02      	ldr	r3, [sp, #8]
 800dada:	f003 0301 	and.w	r3, r3, #1
 800dade:	462f      	mov	r7, r5
 800dae0:	930a      	str	r3, [sp, #40]	@ 0x28
 800dae2:	4605      	mov	r5, r0
 800dae4:	9b07      	ldr	r3, [sp, #28]
 800dae6:	4621      	mov	r1, r4
 800dae8:	3b01      	subs	r3, #1
 800daea:	4648      	mov	r0, r9
 800daec:	9300      	str	r3, [sp, #0]
 800daee:	f7ff fa98 	bl	800d022 <quorem>
 800daf2:	4639      	mov	r1, r7
 800daf4:	9002      	str	r0, [sp, #8]
 800daf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dafa:	4648      	mov	r0, r9
 800dafc:	f000 fc5a 	bl	800e3b4 <__mcmp>
 800db00:	462a      	mov	r2, r5
 800db02:	9008      	str	r0, [sp, #32]
 800db04:	4621      	mov	r1, r4
 800db06:	4658      	mov	r0, fp
 800db08:	f000 fc70 	bl	800e3ec <__mdiff>
 800db0c:	68c2      	ldr	r2, [r0, #12]
 800db0e:	4606      	mov	r6, r0
 800db10:	bb02      	cbnz	r2, 800db54 <_dtoa_r+0xa1c>
 800db12:	4601      	mov	r1, r0
 800db14:	4648      	mov	r0, r9
 800db16:	f000 fc4d 	bl	800e3b4 <__mcmp>
 800db1a:	4602      	mov	r2, r0
 800db1c:	4631      	mov	r1, r6
 800db1e:	4658      	mov	r0, fp
 800db20:	920e      	str	r2, [sp, #56]	@ 0x38
 800db22:	f000 fa0d 	bl	800df40 <_Bfree>
 800db26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db2a:	9e07      	ldr	r6, [sp, #28]
 800db2c:	ea43 0102 	orr.w	r1, r3, r2
 800db30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db32:	4319      	orrs	r1, r3
 800db34:	d110      	bne.n	800db58 <_dtoa_r+0xa20>
 800db36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800db3a:	d029      	beq.n	800db90 <_dtoa_r+0xa58>
 800db3c:	9b08      	ldr	r3, [sp, #32]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	dd02      	ble.n	800db48 <_dtoa_r+0xa10>
 800db42:	9b02      	ldr	r3, [sp, #8]
 800db44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800db48:	9b00      	ldr	r3, [sp, #0]
 800db4a:	f883 8000 	strb.w	r8, [r3]
 800db4e:	e63f      	b.n	800d7d0 <_dtoa_r+0x698>
 800db50:	4628      	mov	r0, r5
 800db52:	e7bb      	b.n	800dacc <_dtoa_r+0x994>
 800db54:	2201      	movs	r2, #1
 800db56:	e7e1      	b.n	800db1c <_dtoa_r+0x9e4>
 800db58:	9b08      	ldr	r3, [sp, #32]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	db04      	blt.n	800db68 <_dtoa_r+0xa30>
 800db5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db60:	430b      	orrs	r3, r1
 800db62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800db64:	430b      	orrs	r3, r1
 800db66:	d120      	bne.n	800dbaa <_dtoa_r+0xa72>
 800db68:	2a00      	cmp	r2, #0
 800db6a:	dded      	ble.n	800db48 <_dtoa_r+0xa10>
 800db6c:	4649      	mov	r1, r9
 800db6e:	2201      	movs	r2, #1
 800db70:	4658      	mov	r0, fp
 800db72:	f000 fbb3 	bl	800e2dc <__lshift>
 800db76:	4621      	mov	r1, r4
 800db78:	4681      	mov	r9, r0
 800db7a:	f000 fc1b 	bl	800e3b4 <__mcmp>
 800db7e:	2800      	cmp	r0, #0
 800db80:	dc03      	bgt.n	800db8a <_dtoa_r+0xa52>
 800db82:	d1e1      	bne.n	800db48 <_dtoa_r+0xa10>
 800db84:	f018 0f01 	tst.w	r8, #1
 800db88:	d0de      	beq.n	800db48 <_dtoa_r+0xa10>
 800db8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800db8e:	d1d8      	bne.n	800db42 <_dtoa_r+0xa0a>
 800db90:	9a00      	ldr	r2, [sp, #0]
 800db92:	2339      	movs	r3, #57	@ 0x39
 800db94:	7013      	strb	r3, [r2, #0]
 800db96:	4633      	mov	r3, r6
 800db98:	461e      	mov	r6, r3
 800db9a:	3b01      	subs	r3, #1
 800db9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dba0:	2a39      	cmp	r2, #57	@ 0x39
 800dba2:	d052      	beq.n	800dc4a <_dtoa_r+0xb12>
 800dba4:	3201      	adds	r2, #1
 800dba6:	701a      	strb	r2, [r3, #0]
 800dba8:	e612      	b.n	800d7d0 <_dtoa_r+0x698>
 800dbaa:	2a00      	cmp	r2, #0
 800dbac:	dd07      	ble.n	800dbbe <_dtoa_r+0xa86>
 800dbae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dbb2:	d0ed      	beq.n	800db90 <_dtoa_r+0xa58>
 800dbb4:	9a00      	ldr	r2, [sp, #0]
 800dbb6:	f108 0301 	add.w	r3, r8, #1
 800dbba:	7013      	strb	r3, [r2, #0]
 800dbbc:	e608      	b.n	800d7d0 <_dtoa_r+0x698>
 800dbbe:	9b07      	ldr	r3, [sp, #28]
 800dbc0:	9a07      	ldr	r2, [sp, #28]
 800dbc2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dbc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d028      	beq.n	800dc1e <_dtoa_r+0xae6>
 800dbcc:	4649      	mov	r1, r9
 800dbce:	2300      	movs	r3, #0
 800dbd0:	220a      	movs	r2, #10
 800dbd2:	4658      	mov	r0, fp
 800dbd4:	f000 f9d6 	bl	800df84 <__multadd>
 800dbd8:	42af      	cmp	r7, r5
 800dbda:	4681      	mov	r9, r0
 800dbdc:	f04f 0300 	mov.w	r3, #0
 800dbe0:	f04f 020a 	mov.w	r2, #10
 800dbe4:	4639      	mov	r1, r7
 800dbe6:	4658      	mov	r0, fp
 800dbe8:	d107      	bne.n	800dbfa <_dtoa_r+0xac2>
 800dbea:	f000 f9cb 	bl	800df84 <__multadd>
 800dbee:	4607      	mov	r7, r0
 800dbf0:	4605      	mov	r5, r0
 800dbf2:	9b07      	ldr	r3, [sp, #28]
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	9307      	str	r3, [sp, #28]
 800dbf8:	e774      	b.n	800dae4 <_dtoa_r+0x9ac>
 800dbfa:	f000 f9c3 	bl	800df84 <__multadd>
 800dbfe:	4629      	mov	r1, r5
 800dc00:	4607      	mov	r7, r0
 800dc02:	2300      	movs	r3, #0
 800dc04:	220a      	movs	r2, #10
 800dc06:	4658      	mov	r0, fp
 800dc08:	f000 f9bc 	bl	800df84 <__multadd>
 800dc0c:	4605      	mov	r5, r0
 800dc0e:	e7f0      	b.n	800dbf2 <_dtoa_r+0xaba>
 800dc10:	9b00      	ldr	r3, [sp, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	bfcc      	ite	gt
 800dc16:	461e      	movgt	r6, r3
 800dc18:	2601      	movle	r6, #1
 800dc1a:	4456      	add	r6, sl
 800dc1c:	2700      	movs	r7, #0
 800dc1e:	4649      	mov	r1, r9
 800dc20:	2201      	movs	r2, #1
 800dc22:	4658      	mov	r0, fp
 800dc24:	f000 fb5a 	bl	800e2dc <__lshift>
 800dc28:	4621      	mov	r1, r4
 800dc2a:	4681      	mov	r9, r0
 800dc2c:	f000 fbc2 	bl	800e3b4 <__mcmp>
 800dc30:	2800      	cmp	r0, #0
 800dc32:	dcb0      	bgt.n	800db96 <_dtoa_r+0xa5e>
 800dc34:	d102      	bne.n	800dc3c <_dtoa_r+0xb04>
 800dc36:	f018 0f01 	tst.w	r8, #1
 800dc3a:	d1ac      	bne.n	800db96 <_dtoa_r+0xa5e>
 800dc3c:	4633      	mov	r3, r6
 800dc3e:	461e      	mov	r6, r3
 800dc40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc44:	2a30      	cmp	r2, #48	@ 0x30
 800dc46:	d0fa      	beq.n	800dc3e <_dtoa_r+0xb06>
 800dc48:	e5c2      	b.n	800d7d0 <_dtoa_r+0x698>
 800dc4a:	459a      	cmp	sl, r3
 800dc4c:	d1a4      	bne.n	800db98 <_dtoa_r+0xa60>
 800dc4e:	9b04      	ldr	r3, [sp, #16]
 800dc50:	3301      	adds	r3, #1
 800dc52:	9304      	str	r3, [sp, #16]
 800dc54:	2331      	movs	r3, #49	@ 0x31
 800dc56:	f88a 3000 	strb.w	r3, [sl]
 800dc5a:	e5b9      	b.n	800d7d0 <_dtoa_r+0x698>
 800dc5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dc5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dcbc <_dtoa_r+0xb84>
 800dc62:	b11b      	cbz	r3, 800dc6c <_dtoa_r+0xb34>
 800dc64:	f10a 0308 	add.w	r3, sl, #8
 800dc68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dc6a:	6013      	str	r3, [r2, #0]
 800dc6c:	4650      	mov	r0, sl
 800dc6e:	b019      	add	sp, #100	@ 0x64
 800dc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	f77f ae37 	ble.w	800d8ea <_dtoa_r+0x7b2>
 800dc7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc80:	2001      	movs	r0, #1
 800dc82:	e655      	b.n	800d930 <_dtoa_r+0x7f8>
 800dc84:	9b00      	ldr	r3, [sp, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	f77f aed6 	ble.w	800da38 <_dtoa_r+0x900>
 800dc8c:	4656      	mov	r6, sl
 800dc8e:	4621      	mov	r1, r4
 800dc90:	4648      	mov	r0, r9
 800dc92:	f7ff f9c6 	bl	800d022 <quorem>
 800dc96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dc9a:	f806 8b01 	strb.w	r8, [r6], #1
 800dc9e:	9b00      	ldr	r3, [sp, #0]
 800dca0:	eba6 020a 	sub.w	r2, r6, sl
 800dca4:	4293      	cmp	r3, r2
 800dca6:	ddb3      	ble.n	800dc10 <_dtoa_r+0xad8>
 800dca8:	4649      	mov	r1, r9
 800dcaa:	2300      	movs	r3, #0
 800dcac:	220a      	movs	r2, #10
 800dcae:	4658      	mov	r0, fp
 800dcb0:	f000 f968 	bl	800df84 <__multadd>
 800dcb4:	4681      	mov	r9, r0
 800dcb6:	e7ea      	b.n	800dc8e <_dtoa_r+0xb56>
 800dcb8:	080115a8 	.word	0x080115a8
 800dcbc:	0801152c 	.word	0x0801152c

0800dcc0 <_free_r>:
 800dcc0:	b538      	push	{r3, r4, r5, lr}
 800dcc2:	4605      	mov	r5, r0
 800dcc4:	2900      	cmp	r1, #0
 800dcc6:	d041      	beq.n	800dd4c <_free_r+0x8c>
 800dcc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dccc:	1f0c      	subs	r4, r1, #4
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	bfb8      	it	lt
 800dcd2:	18e4      	addlt	r4, r4, r3
 800dcd4:	f000 f8e8 	bl	800dea8 <__malloc_lock>
 800dcd8:	4a1d      	ldr	r2, [pc, #116]	@ (800dd50 <_free_r+0x90>)
 800dcda:	6813      	ldr	r3, [r2, #0]
 800dcdc:	b933      	cbnz	r3, 800dcec <_free_r+0x2c>
 800dcde:	6063      	str	r3, [r4, #4]
 800dce0:	6014      	str	r4, [r2, #0]
 800dce2:	4628      	mov	r0, r5
 800dce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dce8:	f000 b8e4 	b.w	800deb4 <__malloc_unlock>
 800dcec:	42a3      	cmp	r3, r4
 800dcee:	d908      	bls.n	800dd02 <_free_r+0x42>
 800dcf0:	6820      	ldr	r0, [r4, #0]
 800dcf2:	1821      	adds	r1, r4, r0
 800dcf4:	428b      	cmp	r3, r1
 800dcf6:	bf01      	itttt	eq
 800dcf8:	6819      	ldreq	r1, [r3, #0]
 800dcfa:	685b      	ldreq	r3, [r3, #4]
 800dcfc:	1809      	addeq	r1, r1, r0
 800dcfe:	6021      	streq	r1, [r4, #0]
 800dd00:	e7ed      	b.n	800dcde <_free_r+0x1e>
 800dd02:	461a      	mov	r2, r3
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	b10b      	cbz	r3, 800dd0c <_free_r+0x4c>
 800dd08:	42a3      	cmp	r3, r4
 800dd0a:	d9fa      	bls.n	800dd02 <_free_r+0x42>
 800dd0c:	6811      	ldr	r1, [r2, #0]
 800dd0e:	1850      	adds	r0, r2, r1
 800dd10:	42a0      	cmp	r0, r4
 800dd12:	d10b      	bne.n	800dd2c <_free_r+0x6c>
 800dd14:	6820      	ldr	r0, [r4, #0]
 800dd16:	4401      	add	r1, r0
 800dd18:	1850      	adds	r0, r2, r1
 800dd1a:	4283      	cmp	r3, r0
 800dd1c:	6011      	str	r1, [r2, #0]
 800dd1e:	d1e0      	bne.n	800dce2 <_free_r+0x22>
 800dd20:	6818      	ldr	r0, [r3, #0]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	6053      	str	r3, [r2, #4]
 800dd26:	4408      	add	r0, r1
 800dd28:	6010      	str	r0, [r2, #0]
 800dd2a:	e7da      	b.n	800dce2 <_free_r+0x22>
 800dd2c:	d902      	bls.n	800dd34 <_free_r+0x74>
 800dd2e:	230c      	movs	r3, #12
 800dd30:	602b      	str	r3, [r5, #0]
 800dd32:	e7d6      	b.n	800dce2 <_free_r+0x22>
 800dd34:	6820      	ldr	r0, [r4, #0]
 800dd36:	1821      	adds	r1, r4, r0
 800dd38:	428b      	cmp	r3, r1
 800dd3a:	bf04      	itt	eq
 800dd3c:	6819      	ldreq	r1, [r3, #0]
 800dd3e:	685b      	ldreq	r3, [r3, #4]
 800dd40:	6063      	str	r3, [r4, #4]
 800dd42:	bf04      	itt	eq
 800dd44:	1809      	addeq	r1, r1, r0
 800dd46:	6021      	streq	r1, [r4, #0]
 800dd48:	6054      	str	r4, [r2, #4]
 800dd4a:	e7ca      	b.n	800dce2 <_free_r+0x22>
 800dd4c:	bd38      	pop	{r3, r4, r5, pc}
 800dd4e:	bf00      	nop
 800dd50:	2000093c 	.word	0x2000093c

0800dd54 <malloc>:
 800dd54:	4b02      	ldr	r3, [pc, #8]	@ (800dd60 <malloc+0xc>)
 800dd56:	4601      	mov	r1, r0
 800dd58:	6818      	ldr	r0, [r3, #0]
 800dd5a:	f000 b825 	b.w	800dda8 <_malloc_r>
 800dd5e:	bf00      	nop
 800dd60:	20000058 	.word	0x20000058

0800dd64 <sbrk_aligned>:
 800dd64:	b570      	push	{r4, r5, r6, lr}
 800dd66:	4e0f      	ldr	r6, [pc, #60]	@ (800dda4 <sbrk_aligned+0x40>)
 800dd68:	460c      	mov	r4, r1
 800dd6a:	6831      	ldr	r1, [r6, #0]
 800dd6c:	4605      	mov	r5, r0
 800dd6e:	b911      	cbnz	r1, 800dd76 <sbrk_aligned+0x12>
 800dd70:	f000 fcd4 	bl	800e71c <_sbrk_r>
 800dd74:	6030      	str	r0, [r6, #0]
 800dd76:	4621      	mov	r1, r4
 800dd78:	4628      	mov	r0, r5
 800dd7a:	f000 fccf 	bl	800e71c <_sbrk_r>
 800dd7e:	1c43      	adds	r3, r0, #1
 800dd80:	d103      	bne.n	800dd8a <sbrk_aligned+0x26>
 800dd82:	f04f 34ff 	mov.w	r4, #4294967295
 800dd86:	4620      	mov	r0, r4
 800dd88:	bd70      	pop	{r4, r5, r6, pc}
 800dd8a:	1cc4      	adds	r4, r0, #3
 800dd8c:	f024 0403 	bic.w	r4, r4, #3
 800dd90:	42a0      	cmp	r0, r4
 800dd92:	d0f8      	beq.n	800dd86 <sbrk_aligned+0x22>
 800dd94:	1a21      	subs	r1, r4, r0
 800dd96:	4628      	mov	r0, r5
 800dd98:	f000 fcc0 	bl	800e71c <_sbrk_r>
 800dd9c:	3001      	adds	r0, #1
 800dd9e:	d1f2      	bne.n	800dd86 <sbrk_aligned+0x22>
 800dda0:	e7ef      	b.n	800dd82 <sbrk_aligned+0x1e>
 800dda2:	bf00      	nop
 800dda4:	20000938 	.word	0x20000938

0800dda8 <_malloc_r>:
 800dda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddac:	1ccd      	adds	r5, r1, #3
 800ddae:	f025 0503 	bic.w	r5, r5, #3
 800ddb2:	3508      	adds	r5, #8
 800ddb4:	2d0c      	cmp	r5, #12
 800ddb6:	bf38      	it	cc
 800ddb8:	250c      	movcc	r5, #12
 800ddba:	2d00      	cmp	r5, #0
 800ddbc:	4606      	mov	r6, r0
 800ddbe:	db01      	blt.n	800ddc4 <_malloc_r+0x1c>
 800ddc0:	42a9      	cmp	r1, r5
 800ddc2:	d904      	bls.n	800ddce <_malloc_r+0x26>
 800ddc4:	230c      	movs	r3, #12
 800ddc6:	6033      	str	r3, [r6, #0]
 800ddc8:	2000      	movs	r0, #0
 800ddca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dea4 <_malloc_r+0xfc>
 800ddd2:	f000 f869 	bl	800dea8 <__malloc_lock>
 800ddd6:	f8d8 3000 	ldr.w	r3, [r8]
 800ddda:	461c      	mov	r4, r3
 800dddc:	bb44      	cbnz	r4, 800de30 <_malloc_r+0x88>
 800ddde:	4629      	mov	r1, r5
 800dde0:	4630      	mov	r0, r6
 800dde2:	f7ff ffbf 	bl	800dd64 <sbrk_aligned>
 800dde6:	1c43      	adds	r3, r0, #1
 800dde8:	4604      	mov	r4, r0
 800ddea:	d158      	bne.n	800de9e <_malloc_r+0xf6>
 800ddec:	f8d8 4000 	ldr.w	r4, [r8]
 800ddf0:	4627      	mov	r7, r4
 800ddf2:	2f00      	cmp	r7, #0
 800ddf4:	d143      	bne.n	800de7e <_malloc_r+0xd6>
 800ddf6:	2c00      	cmp	r4, #0
 800ddf8:	d04b      	beq.n	800de92 <_malloc_r+0xea>
 800ddfa:	6823      	ldr	r3, [r4, #0]
 800ddfc:	4639      	mov	r1, r7
 800ddfe:	4630      	mov	r0, r6
 800de00:	eb04 0903 	add.w	r9, r4, r3
 800de04:	f000 fc8a 	bl	800e71c <_sbrk_r>
 800de08:	4581      	cmp	r9, r0
 800de0a:	d142      	bne.n	800de92 <_malloc_r+0xea>
 800de0c:	6821      	ldr	r1, [r4, #0]
 800de0e:	1a6d      	subs	r5, r5, r1
 800de10:	4629      	mov	r1, r5
 800de12:	4630      	mov	r0, r6
 800de14:	f7ff ffa6 	bl	800dd64 <sbrk_aligned>
 800de18:	3001      	adds	r0, #1
 800de1a:	d03a      	beq.n	800de92 <_malloc_r+0xea>
 800de1c:	6823      	ldr	r3, [r4, #0]
 800de1e:	442b      	add	r3, r5
 800de20:	6023      	str	r3, [r4, #0]
 800de22:	f8d8 3000 	ldr.w	r3, [r8]
 800de26:	685a      	ldr	r2, [r3, #4]
 800de28:	bb62      	cbnz	r2, 800de84 <_malloc_r+0xdc>
 800de2a:	f8c8 7000 	str.w	r7, [r8]
 800de2e:	e00f      	b.n	800de50 <_malloc_r+0xa8>
 800de30:	6822      	ldr	r2, [r4, #0]
 800de32:	1b52      	subs	r2, r2, r5
 800de34:	d420      	bmi.n	800de78 <_malloc_r+0xd0>
 800de36:	2a0b      	cmp	r2, #11
 800de38:	d917      	bls.n	800de6a <_malloc_r+0xc2>
 800de3a:	1961      	adds	r1, r4, r5
 800de3c:	42a3      	cmp	r3, r4
 800de3e:	6025      	str	r5, [r4, #0]
 800de40:	bf18      	it	ne
 800de42:	6059      	strne	r1, [r3, #4]
 800de44:	6863      	ldr	r3, [r4, #4]
 800de46:	bf08      	it	eq
 800de48:	f8c8 1000 	streq.w	r1, [r8]
 800de4c:	5162      	str	r2, [r4, r5]
 800de4e:	604b      	str	r3, [r1, #4]
 800de50:	4630      	mov	r0, r6
 800de52:	f000 f82f 	bl	800deb4 <__malloc_unlock>
 800de56:	f104 000b 	add.w	r0, r4, #11
 800de5a:	1d23      	adds	r3, r4, #4
 800de5c:	f020 0007 	bic.w	r0, r0, #7
 800de60:	1ac2      	subs	r2, r0, r3
 800de62:	bf1c      	itt	ne
 800de64:	1a1b      	subne	r3, r3, r0
 800de66:	50a3      	strne	r3, [r4, r2]
 800de68:	e7af      	b.n	800ddca <_malloc_r+0x22>
 800de6a:	6862      	ldr	r2, [r4, #4]
 800de6c:	42a3      	cmp	r3, r4
 800de6e:	bf0c      	ite	eq
 800de70:	f8c8 2000 	streq.w	r2, [r8]
 800de74:	605a      	strne	r2, [r3, #4]
 800de76:	e7eb      	b.n	800de50 <_malloc_r+0xa8>
 800de78:	4623      	mov	r3, r4
 800de7a:	6864      	ldr	r4, [r4, #4]
 800de7c:	e7ae      	b.n	800dddc <_malloc_r+0x34>
 800de7e:	463c      	mov	r4, r7
 800de80:	687f      	ldr	r7, [r7, #4]
 800de82:	e7b6      	b.n	800ddf2 <_malloc_r+0x4a>
 800de84:	461a      	mov	r2, r3
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	42a3      	cmp	r3, r4
 800de8a:	d1fb      	bne.n	800de84 <_malloc_r+0xdc>
 800de8c:	2300      	movs	r3, #0
 800de8e:	6053      	str	r3, [r2, #4]
 800de90:	e7de      	b.n	800de50 <_malloc_r+0xa8>
 800de92:	230c      	movs	r3, #12
 800de94:	6033      	str	r3, [r6, #0]
 800de96:	4630      	mov	r0, r6
 800de98:	f000 f80c 	bl	800deb4 <__malloc_unlock>
 800de9c:	e794      	b.n	800ddc8 <_malloc_r+0x20>
 800de9e:	6005      	str	r5, [r0, #0]
 800dea0:	e7d6      	b.n	800de50 <_malloc_r+0xa8>
 800dea2:	bf00      	nop
 800dea4:	2000093c 	.word	0x2000093c

0800dea8 <__malloc_lock>:
 800dea8:	4801      	ldr	r0, [pc, #4]	@ (800deb0 <__malloc_lock+0x8>)
 800deaa:	f7ff b8aa 	b.w	800d002 <__retarget_lock_acquire_recursive>
 800deae:	bf00      	nop
 800deb0:	20000934 	.word	0x20000934

0800deb4 <__malloc_unlock>:
 800deb4:	4801      	ldr	r0, [pc, #4]	@ (800debc <__malloc_unlock+0x8>)
 800deb6:	f7ff b8a5 	b.w	800d004 <__retarget_lock_release_recursive>
 800deba:	bf00      	nop
 800debc:	20000934 	.word	0x20000934

0800dec0 <_Balloc>:
 800dec0:	b570      	push	{r4, r5, r6, lr}
 800dec2:	69c6      	ldr	r6, [r0, #28]
 800dec4:	4604      	mov	r4, r0
 800dec6:	460d      	mov	r5, r1
 800dec8:	b976      	cbnz	r6, 800dee8 <_Balloc+0x28>
 800deca:	2010      	movs	r0, #16
 800decc:	f7ff ff42 	bl	800dd54 <malloc>
 800ded0:	4602      	mov	r2, r0
 800ded2:	61e0      	str	r0, [r4, #28]
 800ded4:	b920      	cbnz	r0, 800dee0 <_Balloc+0x20>
 800ded6:	4b18      	ldr	r3, [pc, #96]	@ (800df38 <_Balloc+0x78>)
 800ded8:	4818      	ldr	r0, [pc, #96]	@ (800df3c <_Balloc+0x7c>)
 800deda:	216b      	movs	r1, #107	@ 0x6b
 800dedc:	f000 fc2e 	bl	800e73c <__assert_func>
 800dee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dee4:	6006      	str	r6, [r0, #0]
 800dee6:	60c6      	str	r6, [r0, #12]
 800dee8:	69e6      	ldr	r6, [r4, #28]
 800deea:	68f3      	ldr	r3, [r6, #12]
 800deec:	b183      	cbz	r3, 800df10 <_Balloc+0x50>
 800deee:	69e3      	ldr	r3, [r4, #28]
 800def0:	68db      	ldr	r3, [r3, #12]
 800def2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800def6:	b9b8      	cbnz	r0, 800df28 <_Balloc+0x68>
 800def8:	2101      	movs	r1, #1
 800defa:	fa01 f605 	lsl.w	r6, r1, r5
 800defe:	1d72      	adds	r2, r6, #5
 800df00:	0092      	lsls	r2, r2, #2
 800df02:	4620      	mov	r0, r4
 800df04:	f000 fc38 	bl	800e778 <_calloc_r>
 800df08:	b160      	cbz	r0, 800df24 <_Balloc+0x64>
 800df0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df0e:	e00e      	b.n	800df2e <_Balloc+0x6e>
 800df10:	2221      	movs	r2, #33	@ 0x21
 800df12:	2104      	movs	r1, #4
 800df14:	4620      	mov	r0, r4
 800df16:	f000 fc2f 	bl	800e778 <_calloc_r>
 800df1a:	69e3      	ldr	r3, [r4, #28]
 800df1c:	60f0      	str	r0, [r6, #12]
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d1e4      	bne.n	800deee <_Balloc+0x2e>
 800df24:	2000      	movs	r0, #0
 800df26:	bd70      	pop	{r4, r5, r6, pc}
 800df28:	6802      	ldr	r2, [r0, #0]
 800df2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800df2e:	2300      	movs	r3, #0
 800df30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800df34:	e7f7      	b.n	800df26 <_Balloc+0x66>
 800df36:	bf00      	nop
 800df38:	08011539 	.word	0x08011539
 800df3c:	080115b9 	.word	0x080115b9

0800df40 <_Bfree>:
 800df40:	b570      	push	{r4, r5, r6, lr}
 800df42:	69c6      	ldr	r6, [r0, #28]
 800df44:	4605      	mov	r5, r0
 800df46:	460c      	mov	r4, r1
 800df48:	b976      	cbnz	r6, 800df68 <_Bfree+0x28>
 800df4a:	2010      	movs	r0, #16
 800df4c:	f7ff ff02 	bl	800dd54 <malloc>
 800df50:	4602      	mov	r2, r0
 800df52:	61e8      	str	r0, [r5, #28]
 800df54:	b920      	cbnz	r0, 800df60 <_Bfree+0x20>
 800df56:	4b09      	ldr	r3, [pc, #36]	@ (800df7c <_Bfree+0x3c>)
 800df58:	4809      	ldr	r0, [pc, #36]	@ (800df80 <_Bfree+0x40>)
 800df5a:	218f      	movs	r1, #143	@ 0x8f
 800df5c:	f000 fbee 	bl	800e73c <__assert_func>
 800df60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df64:	6006      	str	r6, [r0, #0]
 800df66:	60c6      	str	r6, [r0, #12]
 800df68:	b13c      	cbz	r4, 800df7a <_Bfree+0x3a>
 800df6a:	69eb      	ldr	r3, [r5, #28]
 800df6c:	6862      	ldr	r2, [r4, #4]
 800df6e:	68db      	ldr	r3, [r3, #12]
 800df70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df74:	6021      	str	r1, [r4, #0]
 800df76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df7a:	bd70      	pop	{r4, r5, r6, pc}
 800df7c:	08011539 	.word	0x08011539
 800df80:	080115b9 	.word	0x080115b9

0800df84 <__multadd>:
 800df84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df88:	690d      	ldr	r5, [r1, #16]
 800df8a:	4607      	mov	r7, r0
 800df8c:	460c      	mov	r4, r1
 800df8e:	461e      	mov	r6, r3
 800df90:	f101 0c14 	add.w	ip, r1, #20
 800df94:	2000      	movs	r0, #0
 800df96:	f8dc 3000 	ldr.w	r3, [ip]
 800df9a:	b299      	uxth	r1, r3
 800df9c:	fb02 6101 	mla	r1, r2, r1, r6
 800dfa0:	0c1e      	lsrs	r6, r3, #16
 800dfa2:	0c0b      	lsrs	r3, r1, #16
 800dfa4:	fb02 3306 	mla	r3, r2, r6, r3
 800dfa8:	b289      	uxth	r1, r1
 800dfaa:	3001      	adds	r0, #1
 800dfac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dfb0:	4285      	cmp	r5, r0
 800dfb2:	f84c 1b04 	str.w	r1, [ip], #4
 800dfb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dfba:	dcec      	bgt.n	800df96 <__multadd+0x12>
 800dfbc:	b30e      	cbz	r6, 800e002 <__multadd+0x7e>
 800dfbe:	68a3      	ldr	r3, [r4, #8]
 800dfc0:	42ab      	cmp	r3, r5
 800dfc2:	dc19      	bgt.n	800dff8 <__multadd+0x74>
 800dfc4:	6861      	ldr	r1, [r4, #4]
 800dfc6:	4638      	mov	r0, r7
 800dfc8:	3101      	adds	r1, #1
 800dfca:	f7ff ff79 	bl	800dec0 <_Balloc>
 800dfce:	4680      	mov	r8, r0
 800dfd0:	b928      	cbnz	r0, 800dfde <__multadd+0x5a>
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	4b0c      	ldr	r3, [pc, #48]	@ (800e008 <__multadd+0x84>)
 800dfd6:	480d      	ldr	r0, [pc, #52]	@ (800e00c <__multadd+0x88>)
 800dfd8:	21ba      	movs	r1, #186	@ 0xba
 800dfda:	f000 fbaf 	bl	800e73c <__assert_func>
 800dfde:	6922      	ldr	r2, [r4, #16]
 800dfe0:	3202      	adds	r2, #2
 800dfe2:	f104 010c 	add.w	r1, r4, #12
 800dfe6:	0092      	lsls	r2, r2, #2
 800dfe8:	300c      	adds	r0, #12
 800dfea:	f7ff f80c 	bl	800d006 <memcpy>
 800dfee:	4621      	mov	r1, r4
 800dff0:	4638      	mov	r0, r7
 800dff2:	f7ff ffa5 	bl	800df40 <_Bfree>
 800dff6:	4644      	mov	r4, r8
 800dff8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dffc:	3501      	adds	r5, #1
 800dffe:	615e      	str	r6, [r3, #20]
 800e000:	6125      	str	r5, [r4, #16]
 800e002:	4620      	mov	r0, r4
 800e004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e008:	080115a8 	.word	0x080115a8
 800e00c:	080115b9 	.word	0x080115b9

0800e010 <__hi0bits>:
 800e010:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e014:	4603      	mov	r3, r0
 800e016:	bf36      	itet	cc
 800e018:	0403      	lslcc	r3, r0, #16
 800e01a:	2000      	movcs	r0, #0
 800e01c:	2010      	movcc	r0, #16
 800e01e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e022:	bf3c      	itt	cc
 800e024:	021b      	lslcc	r3, r3, #8
 800e026:	3008      	addcc	r0, #8
 800e028:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e02c:	bf3c      	itt	cc
 800e02e:	011b      	lslcc	r3, r3, #4
 800e030:	3004      	addcc	r0, #4
 800e032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e036:	bf3c      	itt	cc
 800e038:	009b      	lslcc	r3, r3, #2
 800e03a:	3002      	addcc	r0, #2
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	db05      	blt.n	800e04c <__hi0bits+0x3c>
 800e040:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e044:	f100 0001 	add.w	r0, r0, #1
 800e048:	bf08      	it	eq
 800e04a:	2020      	moveq	r0, #32
 800e04c:	4770      	bx	lr

0800e04e <__lo0bits>:
 800e04e:	6803      	ldr	r3, [r0, #0]
 800e050:	4602      	mov	r2, r0
 800e052:	f013 0007 	ands.w	r0, r3, #7
 800e056:	d00b      	beq.n	800e070 <__lo0bits+0x22>
 800e058:	07d9      	lsls	r1, r3, #31
 800e05a:	d421      	bmi.n	800e0a0 <__lo0bits+0x52>
 800e05c:	0798      	lsls	r0, r3, #30
 800e05e:	bf49      	itett	mi
 800e060:	085b      	lsrmi	r3, r3, #1
 800e062:	089b      	lsrpl	r3, r3, #2
 800e064:	2001      	movmi	r0, #1
 800e066:	6013      	strmi	r3, [r2, #0]
 800e068:	bf5c      	itt	pl
 800e06a:	6013      	strpl	r3, [r2, #0]
 800e06c:	2002      	movpl	r0, #2
 800e06e:	4770      	bx	lr
 800e070:	b299      	uxth	r1, r3
 800e072:	b909      	cbnz	r1, 800e078 <__lo0bits+0x2a>
 800e074:	0c1b      	lsrs	r3, r3, #16
 800e076:	2010      	movs	r0, #16
 800e078:	b2d9      	uxtb	r1, r3
 800e07a:	b909      	cbnz	r1, 800e080 <__lo0bits+0x32>
 800e07c:	3008      	adds	r0, #8
 800e07e:	0a1b      	lsrs	r3, r3, #8
 800e080:	0719      	lsls	r1, r3, #28
 800e082:	bf04      	itt	eq
 800e084:	091b      	lsreq	r3, r3, #4
 800e086:	3004      	addeq	r0, #4
 800e088:	0799      	lsls	r1, r3, #30
 800e08a:	bf04      	itt	eq
 800e08c:	089b      	lsreq	r3, r3, #2
 800e08e:	3002      	addeq	r0, #2
 800e090:	07d9      	lsls	r1, r3, #31
 800e092:	d403      	bmi.n	800e09c <__lo0bits+0x4e>
 800e094:	085b      	lsrs	r3, r3, #1
 800e096:	f100 0001 	add.w	r0, r0, #1
 800e09a:	d003      	beq.n	800e0a4 <__lo0bits+0x56>
 800e09c:	6013      	str	r3, [r2, #0]
 800e09e:	4770      	bx	lr
 800e0a0:	2000      	movs	r0, #0
 800e0a2:	4770      	bx	lr
 800e0a4:	2020      	movs	r0, #32
 800e0a6:	4770      	bx	lr

0800e0a8 <__i2b>:
 800e0a8:	b510      	push	{r4, lr}
 800e0aa:	460c      	mov	r4, r1
 800e0ac:	2101      	movs	r1, #1
 800e0ae:	f7ff ff07 	bl	800dec0 <_Balloc>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	b928      	cbnz	r0, 800e0c2 <__i2b+0x1a>
 800e0b6:	4b05      	ldr	r3, [pc, #20]	@ (800e0cc <__i2b+0x24>)
 800e0b8:	4805      	ldr	r0, [pc, #20]	@ (800e0d0 <__i2b+0x28>)
 800e0ba:	f240 1145 	movw	r1, #325	@ 0x145
 800e0be:	f000 fb3d 	bl	800e73c <__assert_func>
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	6144      	str	r4, [r0, #20]
 800e0c6:	6103      	str	r3, [r0, #16]
 800e0c8:	bd10      	pop	{r4, pc}
 800e0ca:	bf00      	nop
 800e0cc:	080115a8 	.word	0x080115a8
 800e0d0:	080115b9 	.word	0x080115b9

0800e0d4 <__multiply>:
 800e0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d8:	4614      	mov	r4, r2
 800e0da:	690a      	ldr	r2, [r1, #16]
 800e0dc:	6923      	ldr	r3, [r4, #16]
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	bfa8      	it	ge
 800e0e2:	4623      	movge	r3, r4
 800e0e4:	460f      	mov	r7, r1
 800e0e6:	bfa4      	itt	ge
 800e0e8:	460c      	movge	r4, r1
 800e0ea:	461f      	movge	r7, r3
 800e0ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e0f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e0f4:	68a3      	ldr	r3, [r4, #8]
 800e0f6:	6861      	ldr	r1, [r4, #4]
 800e0f8:	eb0a 0609 	add.w	r6, sl, r9
 800e0fc:	42b3      	cmp	r3, r6
 800e0fe:	b085      	sub	sp, #20
 800e100:	bfb8      	it	lt
 800e102:	3101      	addlt	r1, #1
 800e104:	f7ff fedc 	bl	800dec0 <_Balloc>
 800e108:	b930      	cbnz	r0, 800e118 <__multiply+0x44>
 800e10a:	4602      	mov	r2, r0
 800e10c:	4b44      	ldr	r3, [pc, #272]	@ (800e220 <__multiply+0x14c>)
 800e10e:	4845      	ldr	r0, [pc, #276]	@ (800e224 <__multiply+0x150>)
 800e110:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e114:	f000 fb12 	bl	800e73c <__assert_func>
 800e118:	f100 0514 	add.w	r5, r0, #20
 800e11c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e120:	462b      	mov	r3, r5
 800e122:	2200      	movs	r2, #0
 800e124:	4543      	cmp	r3, r8
 800e126:	d321      	bcc.n	800e16c <__multiply+0x98>
 800e128:	f107 0114 	add.w	r1, r7, #20
 800e12c:	f104 0214 	add.w	r2, r4, #20
 800e130:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e134:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e138:	9302      	str	r3, [sp, #8]
 800e13a:	1b13      	subs	r3, r2, r4
 800e13c:	3b15      	subs	r3, #21
 800e13e:	f023 0303 	bic.w	r3, r3, #3
 800e142:	3304      	adds	r3, #4
 800e144:	f104 0715 	add.w	r7, r4, #21
 800e148:	42ba      	cmp	r2, r7
 800e14a:	bf38      	it	cc
 800e14c:	2304      	movcc	r3, #4
 800e14e:	9301      	str	r3, [sp, #4]
 800e150:	9b02      	ldr	r3, [sp, #8]
 800e152:	9103      	str	r1, [sp, #12]
 800e154:	428b      	cmp	r3, r1
 800e156:	d80c      	bhi.n	800e172 <__multiply+0x9e>
 800e158:	2e00      	cmp	r6, #0
 800e15a:	dd03      	ble.n	800e164 <__multiply+0x90>
 800e15c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e160:	2b00      	cmp	r3, #0
 800e162:	d05b      	beq.n	800e21c <__multiply+0x148>
 800e164:	6106      	str	r6, [r0, #16]
 800e166:	b005      	add	sp, #20
 800e168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e16c:	f843 2b04 	str.w	r2, [r3], #4
 800e170:	e7d8      	b.n	800e124 <__multiply+0x50>
 800e172:	f8b1 a000 	ldrh.w	sl, [r1]
 800e176:	f1ba 0f00 	cmp.w	sl, #0
 800e17a:	d024      	beq.n	800e1c6 <__multiply+0xf2>
 800e17c:	f104 0e14 	add.w	lr, r4, #20
 800e180:	46a9      	mov	r9, r5
 800e182:	f04f 0c00 	mov.w	ip, #0
 800e186:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e18a:	f8d9 3000 	ldr.w	r3, [r9]
 800e18e:	fa1f fb87 	uxth.w	fp, r7
 800e192:	b29b      	uxth	r3, r3
 800e194:	fb0a 330b 	mla	r3, sl, fp, r3
 800e198:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e19c:	f8d9 7000 	ldr.w	r7, [r9]
 800e1a0:	4463      	add	r3, ip
 800e1a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e1a6:	fb0a c70b 	mla	r7, sl, fp, ip
 800e1aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e1b4:	4572      	cmp	r2, lr
 800e1b6:	f849 3b04 	str.w	r3, [r9], #4
 800e1ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e1be:	d8e2      	bhi.n	800e186 <__multiply+0xb2>
 800e1c0:	9b01      	ldr	r3, [sp, #4]
 800e1c2:	f845 c003 	str.w	ip, [r5, r3]
 800e1c6:	9b03      	ldr	r3, [sp, #12]
 800e1c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e1cc:	3104      	adds	r1, #4
 800e1ce:	f1b9 0f00 	cmp.w	r9, #0
 800e1d2:	d021      	beq.n	800e218 <__multiply+0x144>
 800e1d4:	682b      	ldr	r3, [r5, #0]
 800e1d6:	f104 0c14 	add.w	ip, r4, #20
 800e1da:	46ae      	mov	lr, r5
 800e1dc:	f04f 0a00 	mov.w	sl, #0
 800e1e0:	f8bc b000 	ldrh.w	fp, [ip]
 800e1e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e1e8:	fb09 770b 	mla	r7, r9, fp, r7
 800e1ec:	4457      	add	r7, sl
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e1f4:	f84e 3b04 	str.w	r3, [lr], #4
 800e1f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e1fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e200:	f8be 3000 	ldrh.w	r3, [lr]
 800e204:	fb09 330a 	mla	r3, r9, sl, r3
 800e208:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e20c:	4562      	cmp	r2, ip
 800e20e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e212:	d8e5      	bhi.n	800e1e0 <__multiply+0x10c>
 800e214:	9f01      	ldr	r7, [sp, #4]
 800e216:	51eb      	str	r3, [r5, r7]
 800e218:	3504      	adds	r5, #4
 800e21a:	e799      	b.n	800e150 <__multiply+0x7c>
 800e21c:	3e01      	subs	r6, #1
 800e21e:	e79b      	b.n	800e158 <__multiply+0x84>
 800e220:	080115a8 	.word	0x080115a8
 800e224:	080115b9 	.word	0x080115b9

0800e228 <__pow5mult>:
 800e228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e22c:	4615      	mov	r5, r2
 800e22e:	f012 0203 	ands.w	r2, r2, #3
 800e232:	4607      	mov	r7, r0
 800e234:	460e      	mov	r6, r1
 800e236:	d007      	beq.n	800e248 <__pow5mult+0x20>
 800e238:	4c25      	ldr	r4, [pc, #148]	@ (800e2d0 <__pow5mult+0xa8>)
 800e23a:	3a01      	subs	r2, #1
 800e23c:	2300      	movs	r3, #0
 800e23e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e242:	f7ff fe9f 	bl	800df84 <__multadd>
 800e246:	4606      	mov	r6, r0
 800e248:	10ad      	asrs	r5, r5, #2
 800e24a:	d03d      	beq.n	800e2c8 <__pow5mult+0xa0>
 800e24c:	69fc      	ldr	r4, [r7, #28]
 800e24e:	b97c      	cbnz	r4, 800e270 <__pow5mult+0x48>
 800e250:	2010      	movs	r0, #16
 800e252:	f7ff fd7f 	bl	800dd54 <malloc>
 800e256:	4602      	mov	r2, r0
 800e258:	61f8      	str	r0, [r7, #28]
 800e25a:	b928      	cbnz	r0, 800e268 <__pow5mult+0x40>
 800e25c:	4b1d      	ldr	r3, [pc, #116]	@ (800e2d4 <__pow5mult+0xac>)
 800e25e:	481e      	ldr	r0, [pc, #120]	@ (800e2d8 <__pow5mult+0xb0>)
 800e260:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e264:	f000 fa6a 	bl	800e73c <__assert_func>
 800e268:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e26c:	6004      	str	r4, [r0, #0]
 800e26e:	60c4      	str	r4, [r0, #12]
 800e270:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e274:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e278:	b94c      	cbnz	r4, 800e28e <__pow5mult+0x66>
 800e27a:	f240 2171 	movw	r1, #625	@ 0x271
 800e27e:	4638      	mov	r0, r7
 800e280:	f7ff ff12 	bl	800e0a8 <__i2b>
 800e284:	2300      	movs	r3, #0
 800e286:	f8c8 0008 	str.w	r0, [r8, #8]
 800e28a:	4604      	mov	r4, r0
 800e28c:	6003      	str	r3, [r0, #0]
 800e28e:	f04f 0900 	mov.w	r9, #0
 800e292:	07eb      	lsls	r3, r5, #31
 800e294:	d50a      	bpl.n	800e2ac <__pow5mult+0x84>
 800e296:	4631      	mov	r1, r6
 800e298:	4622      	mov	r2, r4
 800e29a:	4638      	mov	r0, r7
 800e29c:	f7ff ff1a 	bl	800e0d4 <__multiply>
 800e2a0:	4631      	mov	r1, r6
 800e2a2:	4680      	mov	r8, r0
 800e2a4:	4638      	mov	r0, r7
 800e2a6:	f7ff fe4b 	bl	800df40 <_Bfree>
 800e2aa:	4646      	mov	r6, r8
 800e2ac:	106d      	asrs	r5, r5, #1
 800e2ae:	d00b      	beq.n	800e2c8 <__pow5mult+0xa0>
 800e2b0:	6820      	ldr	r0, [r4, #0]
 800e2b2:	b938      	cbnz	r0, 800e2c4 <__pow5mult+0x9c>
 800e2b4:	4622      	mov	r2, r4
 800e2b6:	4621      	mov	r1, r4
 800e2b8:	4638      	mov	r0, r7
 800e2ba:	f7ff ff0b 	bl	800e0d4 <__multiply>
 800e2be:	6020      	str	r0, [r4, #0]
 800e2c0:	f8c0 9000 	str.w	r9, [r0]
 800e2c4:	4604      	mov	r4, r0
 800e2c6:	e7e4      	b.n	800e292 <__pow5mult+0x6a>
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2ce:	bf00      	nop
 800e2d0:	08011614 	.word	0x08011614
 800e2d4:	08011539 	.word	0x08011539
 800e2d8:	080115b9 	.word	0x080115b9

0800e2dc <__lshift>:
 800e2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2e0:	460c      	mov	r4, r1
 800e2e2:	6849      	ldr	r1, [r1, #4]
 800e2e4:	6923      	ldr	r3, [r4, #16]
 800e2e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e2ea:	68a3      	ldr	r3, [r4, #8]
 800e2ec:	4607      	mov	r7, r0
 800e2ee:	4691      	mov	r9, r2
 800e2f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e2f4:	f108 0601 	add.w	r6, r8, #1
 800e2f8:	42b3      	cmp	r3, r6
 800e2fa:	db0b      	blt.n	800e314 <__lshift+0x38>
 800e2fc:	4638      	mov	r0, r7
 800e2fe:	f7ff fddf 	bl	800dec0 <_Balloc>
 800e302:	4605      	mov	r5, r0
 800e304:	b948      	cbnz	r0, 800e31a <__lshift+0x3e>
 800e306:	4602      	mov	r2, r0
 800e308:	4b28      	ldr	r3, [pc, #160]	@ (800e3ac <__lshift+0xd0>)
 800e30a:	4829      	ldr	r0, [pc, #164]	@ (800e3b0 <__lshift+0xd4>)
 800e30c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e310:	f000 fa14 	bl	800e73c <__assert_func>
 800e314:	3101      	adds	r1, #1
 800e316:	005b      	lsls	r3, r3, #1
 800e318:	e7ee      	b.n	800e2f8 <__lshift+0x1c>
 800e31a:	2300      	movs	r3, #0
 800e31c:	f100 0114 	add.w	r1, r0, #20
 800e320:	f100 0210 	add.w	r2, r0, #16
 800e324:	4618      	mov	r0, r3
 800e326:	4553      	cmp	r3, sl
 800e328:	db33      	blt.n	800e392 <__lshift+0xb6>
 800e32a:	6920      	ldr	r0, [r4, #16]
 800e32c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e330:	f104 0314 	add.w	r3, r4, #20
 800e334:	f019 091f 	ands.w	r9, r9, #31
 800e338:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e33c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e340:	d02b      	beq.n	800e39a <__lshift+0xbe>
 800e342:	f1c9 0e20 	rsb	lr, r9, #32
 800e346:	468a      	mov	sl, r1
 800e348:	2200      	movs	r2, #0
 800e34a:	6818      	ldr	r0, [r3, #0]
 800e34c:	fa00 f009 	lsl.w	r0, r0, r9
 800e350:	4310      	orrs	r0, r2
 800e352:	f84a 0b04 	str.w	r0, [sl], #4
 800e356:	f853 2b04 	ldr.w	r2, [r3], #4
 800e35a:	459c      	cmp	ip, r3
 800e35c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e360:	d8f3      	bhi.n	800e34a <__lshift+0x6e>
 800e362:	ebac 0304 	sub.w	r3, ip, r4
 800e366:	3b15      	subs	r3, #21
 800e368:	f023 0303 	bic.w	r3, r3, #3
 800e36c:	3304      	adds	r3, #4
 800e36e:	f104 0015 	add.w	r0, r4, #21
 800e372:	4584      	cmp	ip, r0
 800e374:	bf38      	it	cc
 800e376:	2304      	movcc	r3, #4
 800e378:	50ca      	str	r2, [r1, r3]
 800e37a:	b10a      	cbz	r2, 800e380 <__lshift+0xa4>
 800e37c:	f108 0602 	add.w	r6, r8, #2
 800e380:	3e01      	subs	r6, #1
 800e382:	4638      	mov	r0, r7
 800e384:	612e      	str	r6, [r5, #16]
 800e386:	4621      	mov	r1, r4
 800e388:	f7ff fdda 	bl	800df40 <_Bfree>
 800e38c:	4628      	mov	r0, r5
 800e38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e392:	f842 0f04 	str.w	r0, [r2, #4]!
 800e396:	3301      	adds	r3, #1
 800e398:	e7c5      	b.n	800e326 <__lshift+0x4a>
 800e39a:	3904      	subs	r1, #4
 800e39c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e3a4:	459c      	cmp	ip, r3
 800e3a6:	d8f9      	bhi.n	800e39c <__lshift+0xc0>
 800e3a8:	e7ea      	b.n	800e380 <__lshift+0xa4>
 800e3aa:	bf00      	nop
 800e3ac:	080115a8 	.word	0x080115a8
 800e3b0:	080115b9 	.word	0x080115b9

0800e3b4 <__mcmp>:
 800e3b4:	690a      	ldr	r2, [r1, #16]
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	6900      	ldr	r0, [r0, #16]
 800e3ba:	1a80      	subs	r0, r0, r2
 800e3bc:	b530      	push	{r4, r5, lr}
 800e3be:	d10e      	bne.n	800e3de <__mcmp+0x2a>
 800e3c0:	3314      	adds	r3, #20
 800e3c2:	3114      	adds	r1, #20
 800e3c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e3c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e3cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e3d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e3d4:	4295      	cmp	r5, r2
 800e3d6:	d003      	beq.n	800e3e0 <__mcmp+0x2c>
 800e3d8:	d205      	bcs.n	800e3e6 <__mcmp+0x32>
 800e3da:	f04f 30ff 	mov.w	r0, #4294967295
 800e3de:	bd30      	pop	{r4, r5, pc}
 800e3e0:	42a3      	cmp	r3, r4
 800e3e2:	d3f3      	bcc.n	800e3cc <__mcmp+0x18>
 800e3e4:	e7fb      	b.n	800e3de <__mcmp+0x2a>
 800e3e6:	2001      	movs	r0, #1
 800e3e8:	e7f9      	b.n	800e3de <__mcmp+0x2a>
	...

0800e3ec <__mdiff>:
 800e3ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f0:	4689      	mov	r9, r1
 800e3f2:	4606      	mov	r6, r0
 800e3f4:	4611      	mov	r1, r2
 800e3f6:	4648      	mov	r0, r9
 800e3f8:	4614      	mov	r4, r2
 800e3fa:	f7ff ffdb 	bl	800e3b4 <__mcmp>
 800e3fe:	1e05      	subs	r5, r0, #0
 800e400:	d112      	bne.n	800e428 <__mdiff+0x3c>
 800e402:	4629      	mov	r1, r5
 800e404:	4630      	mov	r0, r6
 800e406:	f7ff fd5b 	bl	800dec0 <_Balloc>
 800e40a:	4602      	mov	r2, r0
 800e40c:	b928      	cbnz	r0, 800e41a <__mdiff+0x2e>
 800e40e:	4b3f      	ldr	r3, [pc, #252]	@ (800e50c <__mdiff+0x120>)
 800e410:	f240 2137 	movw	r1, #567	@ 0x237
 800e414:	483e      	ldr	r0, [pc, #248]	@ (800e510 <__mdiff+0x124>)
 800e416:	f000 f991 	bl	800e73c <__assert_func>
 800e41a:	2301      	movs	r3, #1
 800e41c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e420:	4610      	mov	r0, r2
 800e422:	b003      	add	sp, #12
 800e424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e428:	bfbc      	itt	lt
 800e42a:	464b      	movlt	r3, r9
 800e42c:	46a1      	movlt	r9, r4
 800e42e:	4630      	mov	r0, r6
 800e430:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e434:	bfba      	itte	lt
 800e436:	461c      	movlt	r4, r3
 800e438:	2501      	movlt	r5, #1
 800e43a:	2500      	movge	r5, #0
 800e43c:	f7ff fd40 	bl	800dec0 <_Balloc>
 800e440:	4602      	mov	r2, r0
 800e442:	b918      	cbnz	r0, 800e44c <__mdiff+0x60>
 800e444:	4b31      	ldr	r3, [pc, #196]	@ (800e50c <__mdiff+0x120>)
 800e446:	f240 2145 	movw	r1, #581	@ 0x245
 800e44a:	e7e3      	b.n	800e414 <__mdiff+0x28>
 800e44c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e450:	6926      	ldr	r6, [r4, #16]
 800e452:	60c5      	str	r5, [r0, #12]
 800e454:	f109 0310 	add.w	r3, r9, #16
 800e458:	f109 0514 	add.w	r5, r9, #20
 800e45c:	f104 0e14 	add.w	lr, r4, #20
 800e460:	f100 0b14 	add.w	fp, r0, #20
 800e464:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e468:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e46c:	9301      	str	r3, [sp, #4]
 800e46e:	46d9      	mov	r9, fp
 800e470:	f04f 0c00 	mov.w	ip, #0
 800e474:	9b01      	ldr	r3, [sp, #4]
 800e476:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e47a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e47e:	9301      	str	r3, [sp, #4]
 800e480:	fa1f f38a 	uxth.w	r3, sl
 800e484:	4619      	mov	r1, r3
 800e486:	b283      	uxth	r3, r0
 800e488:	1acb      	subs	r3, r1, r3
 800e48a:	0c00      	lsrs	r0, r0, #16
 800e48c:	4463      	add	r3, ip
 800e48e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e492:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e496:	b29b      	uxth	r3, r3
 800e498:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e49c:	4576      	cmp	r6, lr
 800e49e:	f849 3b04 	str.w	r3, [r9], #4
 800e4a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e4a6:	d8e5      	bhi.n	800e474 <__mdiff+0x88>
 800e4a8:	1b33      	subs	r3, r6, r4
 800e4aa:	3b15      	subs	r3, #21
 800e4ac:	f023 0303 	bic.w	r3, r3, #3
 800e4b0:	3415      	adds	r4, #21
 800e4b2:	3304      	adds	r3, #4
 800e4b4:	42a6      	cmp	r6, r4
 800e4b6:	bf38      	it	cc
 800e4b8:	2304      	movcc	r3, #4
 800e4ba:	441d      	add	r5, r3
 800e4bc:	445b      	add	r3, fp
 800e4be:	461e      	mov	r6, r3
 800e4c0:	462c      	mov	r4, r5
 800e4c2:	4544      	cmp	r4, r8
 800e4c4:	d30e      	bcc.n	800e4e4 <__mdiff+0xf8>
 800e4c6:	f108 0103 	add.w	r1, r8, #3
 800e4ca:	1b49      	subs	r1, r1, r5
 800e4cc:	f021 0103 	bic.w	r1, r1, #3
 800e4d0:	3d03      	subs	r5, #3
 800e4d2:	45a8      	cmp	r8, r5
 800e4d4:	bf38      	it	cc
 800e4d6:	2100      	movcc	r1, #0
 800e4d8:	440b      	add	r3, r1
 800e4da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e4de:	b191      	cbz	r1, 800e506 <__mdiff+0x11a>
 800e4e0:	6117      	str	r7, [r2, #16]
 800e4e2:	e79d      	b.n	800e420 <__mdiff+0x34>
 800e4e4:	f854 1b04 	ldr.w	r1, [r4], #4
 800e4e8:	46e6      	mov	lr, ip
 800e4ea:	0c08      	lsrs	r0, r1, #16
 800e4ec:	fa1c fc81 	uxtah	ip, ip, r1
 800e4f0:	4471      	add	r1, lr
 800e4f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e4f6:	b289      	uxth	r1, r1
 800e4f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e4fc:	f846 1b04 	str.w	r1, [r6], #4
 800e500:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e504:	e7dd      	b.n	800e4c2 <__mdiff+0xd6>
 800e506:	3f01      	subs	r7, #1
 800e508:	e7e7      	b.n	800e4da <__mdiff+0xee>
 800e50a:	bf00      	nop
 800e50c:	080115a8 	.word	0x080115a8
 800e510:	080115b9 	.word	0x080115b9

0800e514 <__d2b>:
 800e514:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e518:	460f      	mov	r7, r1
 800e51a:	2101      	movs	r1, #1
 800e51c:	ec59 8b10 	vmov	r8, r9, d0
 800e520:	4616      	mov	r6, r2
 800e522:	f7ff fccd 	bl	800dec0 <_Balloc>
 800e526:	4604      	mov	r4, r0
 800e528:	b930      	cbnz	r0, 800e538 <__d2b+0x24>
 800e52a:	4602      	mov	r2, r0
 800e52c:	4b23      	ldr	r3, [pc, #140]	@ (800e5bc <__d2b+0xa8>)
 800e52e:	4824      	ldr	r0, [pc, #144]	@ (800e5c0 <__d2b+0xac>)
 800e530:	f240 310f 	movw	r1, #783	@ 0x30f
 800e534:	f000 f902 	bl	800e73c <__assert_func>
 800e538:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e53c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e540:	b10d      	cbz	r5, 800e546 <__d2b+0x32>
 800e542:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e546:	9301      	str	r3, [sp, #4]
 800e548:	f1b8 0300 	subs.w	r3, r8, #0
 800e54c:	d023      	beq.n	800e596 <__d2b+0x82>
 800e54e:	4668      	mov	r0, sp
 800e550:	9300      	str	r3, [sp, #0]
 800e552:	f7ff fd7c 	bl	800e04e <__lo0bits>
 800e556:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e55a:	b1d0      	cbz	r0, 800e592 <__d2b+0x7e>
 800e55c:	f1c0 0320 	rsb	r3, r0, #32
 800e560:	fa02 f303 	lsl.w	r3, r2, r3
 800e564:	430b      	orrs	r3, r1
 800e566:	40c2      	lsrs	r2, r0
 800e568:	6163      	str	r3, [r4, #20]
 800e56a:	9201      	str	r2, [sp, #4]
 800e56c:	9b01      	ldr	r3, [sp, #4]
 800e56e:	61a3      	str	r3, [r4, #24]
 800e570:	2b00      	cmp	r3, #0
 800e572:	bf0c      	ite	eq
 800e574:	2201      	moveq	r2, #1
 800e576:	2202      	movne	r2, #2
 800e578:	6122      	str	r2, [r4, #16]
 800e57a:	b1a5      	cbz	r5, 800e5a6 <__d2b+0x92>
 800e57c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e580:	4405      	add	r5, r0
 800e582:	603d      	str	r5, [r7, #0]
 800e584:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e588:	6030      	str	r0, [r6, #0]
 800e58a:	4620      	mov	r0, r4
 800e58c:	b003      	add	sp, #12
 800e58e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e592:	6161      	str	r1, [r4, #20]
 800e594:	e7ea      	b.n	800e56c <__d2b+0x58>
 800e596:	a801      	add	r0, sp, #4
 800e598:	f7ff fd59 	bl	800e04e <__lo0bits>
 800e59c:	9b01      	ldr	r3, [sp, #4]
 800e59e:	6163      	str	r3, [r4, #20]
 800e5a0:	3020      	adds	r0, #32
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	e7e8      	b.n	800e578 <__d2b+0x64>
 800e5a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e5aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e5ae:	6038      	str	r0, [r7, #0]
 800e5b0:	6918      	ldr	r0, [r3, #16]
 800e5b2:	f7ff fd2d 	bl	800e010 <__hi0bits>
 800e5b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e5ba:	e7e5      	b.n	800e588 <__d2b+0x74>
 800e5bc:	080115a8 	.word	0x080115a8
 800e5c0:	080115b9 	.word	0x080115b9

0800e5c4 <__sflush_r>:
 800e5c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5cc:	0716      	lsls	r6, r2, #28
 800e5ce:	4605      	mov	r5, r0
 800e5d0:	460c      	mov	r4, r1
 800e5d2:	d454      	bmi.n	800e67e <__sflush_r+0xba>
 800e5d4:	684b      	ldr	r3, [r1, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	dc02      	bgt.n	800e5e0 <__sflush_r+0x1c>
 800e5da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	dd48      	ble.n	800e672 <__sflush_r+0xae>
 800e5e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e5e2:	2e00      	cmp	r6, #0
 800e5e4:	d045      	beq.n	800e672 <__sflush_r+0xae>
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e5ec:	682f      	ldr	r7, [r5, #0]
 800e5ee:	6a21      	ldr	r1, [r4, #32]
 800e5f0:	602b      	str	r3, [r5, #0]
 800e5f2:	d030      	beq.n	800e656 <__sflush_r+0x92>
 800e5f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e5f6:	89a3      	ldrh	r3, [r4, #12]
 800e5f8:	0759      	lsls	r1, r3, #29
 800e5fa:	d505      	bpl.n	800e608 <__sflush_r+0x44>
 800e5fc:	6863      	ldr	r3, [r4, #4]
 800e5fe:	1ad2      	subs	r2, r2, r3
 800e600:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e602:	b10b      	cbz	r3, 800e608 <__sflush_r+0x44>
 800e604:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e606:	1ad2      	subs	r2, r2, r3
 800e608:	2300      	movs	r3, #0
 800e60a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e60c:	6a21      	ldr	r1, [r4, #32]
 800e60e:	4628      	mov	r0, r5
 800e610:	47b0      	blx	r6
 800e612:	1c43      	adds	r3, r0, #1
 800e614:	89a3      	ldrh	r3, [r4, #12]
 800e616:	d106      	bne.n	800e626 <__sflush_r+0x62>
 800e618:	6829      	ldr	r1, [r5, #0]
 800e61a:	291d      	cmp	r1, #29
 800e61c:	d82b      	bhi.n	800e676 <__sflush_r+0xb2>
 800e61e:	4a2a      	ldr	r2, [pc, #168]	@ (800e6c8 <__sflush_r+0x104>)
 800e620:	410a      	asrs	r2, r1
 800e622:	07d6      	lsls	r6, r2, #31
 800e624:	d427      	bmi.n	800e676 <__sflush_r+0xb2>
 800e626:	2200      	movs	r2, #0
 800e628:	6062      	str	r2, [r4, #4]
 800e62a:	04d9      	lsls	r1, r3, #19
 800e62c:	6922      	ldr	r2, [r4, #16]
 800e62e:	6022      	str	r2, [r4, #0]
 800e630:	d504      	bpl.n	800e63c <__sflush_r+0x78>
 800e632:	1c42      	adds	r2, r0, #1
 800e634:	d101      	bne.n	800e63a <__sflush_r+0x76>
 800e636:	682b      	ldr	r3, [r5, #0]
 800e638:	b903      	cbnz	r3, 800e63c <__sflush_r+0x78>
 800e63a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e63c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e63e:	602f      	str	r7, [r5, #0]
 800e640:	b1b9      	cbz	r1, 800e672 <__sflush_r+0xae>
 800e642:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e646:	4299      	cmp	r1, r3
 800e648:	d002      	beq.n	800e650 <__sflush_r+0x8c>
 800e64a:	4628      	mov	r0, r5
 800e64c:	f7ff fb38 	bl	800dcc0 <_free_r>
 800e650:	2300      	movs	r3, #0
 800e652:	6363      	str	r3, [r4, #52]	@ 0x34
 800e654:	e00d      	b.n	800e672 <__sflush_r+0xae>
 800e656:	2301      	movs	r3, #1
 800e658:	4628      	mov	r0, r5
 800e65a:	47b0      	blx	r6
 800e65c:	4602      	mov	r2, r0
 800e65e:	1c50      	adds	r0, r2, #1
 800e660:	d1c9      	bne.n	800e5f6 <__sflush_r+0x32>
 800e662:	682b      	ldr	r3, [r5, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d0c6      	beq.n	800e5f6 <__sflush_r+0x32>
 800e668:	2b1d      	cmp	r3, #29
 800e66a:	d001      	beq.n	800e670 <__sflush_r+0xac>
 800e66c:	2b16      	cmp	r3, #22
 800e66e:	d11e      	bne.n	800e6ae <__sflush_r+0xea>
 800e670:	602f      	str	r7, [r5, #0]
 800e672:	2000      	movs	r0, #0
 800e674:	e022      	b.n	800e6bc <__sflush_r+0xf8>
 800e676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e67a:	b21b      	sxth	r3, r3
 800e67c:	e01b      	b.n	800e6b6 <__sflush_r+0xf2>
 800e67e:	690f      	ldr	r7, [r1, #16]
 800e680:	2f00      	cmp	r7, #0
 800e682:	d0f6      	beq.n	800e672 <__sflush_r+0xae>
 800e684:	0793      	lsls	r3, r2, #30
 800e686:	680e      	ldr	r6, [r1, #0]
 800e688:	bf08      	it	eq
 800e68a:	694b      	ldreq	r3, [r1, #20]
 800e68c:	600f      	str	r7, [r1, #0]
 800e68e:	bf18      	it	ne
 800e690:	2300      	movne	r3, #0
 800e692:	eba6 0807 	sub.w	r8, r6, r7
 800e696:	608b      	str	r3, [r1, #8]
 800e698:	f1b8 0f00 	cmp.w	r8, #0
 800e69c:	dde9      	ble.n	800e672 <__sflush_r+0xae>
 800e69e:	6a21      	ldr	r1, [r4, #32]
 800e6a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e6a2:	4643      	mov	r3, r8
 800e6a4:	463a      	mov	r2, r7
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	47b0      	blx	r6
 800e6aa:	2800      	cmp	r0, #0
 800e6ac:	dc08      	bgt.n	800e6c0 <__sflush_r+0xfc>
 800e6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6b6:	81a3      	strh	r3, [r4, #12]
 800e6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6c0:	4407      	add	r7, r0
 800e6c2:	eba8 0800 	sub.w	r8, r8, r0
 800e6c6:	e7e7      	b.n	800e698 <__sflush_r+0xd4>
 800e6c8:	dfbffffe 	.word	0xdfbffffe

0800e6cc <_fflush_r>:
 800e6cc:	b538      	push	{r3, r4, r5, lr}
 800e6ce:	690b      	ldr	r3, [r1, #16]
 800e6d0:	4605      	mov	r5, r0
 800e6d2:	460c      	mov	r4, r1
 800e6d4:	b913      	cbnz	r3, 800e6dc <_fflush_r+0x10>
 800e6d6:	2500      	movs	r5, #0
 800e6d8:	4628      	mov	r0, r5
 800e6da:	bd38      	pop	{r3, r4, r5, pc}
 800e6dc:	b118      	cbz	r0, 800e6e6 <_fflush_r+0x1a>
 800e6de:	6a03      	ldr	r3, [r0, #32]
 800e6e0:	b90b      	cbnz	r3, 800e6e6 <_fflush_r+0x1a>
 800e6e2:	f7fe fb87 	bl	800cdf4 <__sinit>
 800e6e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d0f3      	beq.n	800e6d6 <_fflush_r+0xa>
 800e6ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e6f0:	07d0      	lsls	r0, r2, #31
 800e6f2:	d404      	bmi.n	800e6fe <_fflush_r+0x32>
 800e6f4:	0599      	lsls	r1, r3, #22
 800e6f6:	d402      	bmi.n	800e6fe <_fflush_r+0x32>
 800e6f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6fa:	f7fe fc82 	bl	800d002 <__retarget_lock_acquire_recursive>
 800e6fe:	4628      	mov	r0, r5
 800e700:	4621      	mov	r1, r4
 800e702:	f7ff ff5f 	bl	800e5c4 <__sflush_r>
 800e706:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e708:	07da      	lsls	r2, r3, #31
 800e70a:	4605      	mov	r5, r0
 800e70c:	d4e4      	bmi.n	800e6d8 <_fflush_r+0xc>
 800e70e:	89a3      	ldrh	r3, [r4, #12]
 800e710:	059b      	lsls	r3, r3, #22
 800e712:	d4e1      	bmi.n	800e6d8 <_fflush_r+0xc>
 800e714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e716:	f7fe fc75 	bl	800d004 <__retarget_lock_release_recursive>
 800e71a:	e7dd      	b.n	800e6d8 <_fflush_r+0xc>

0800e71c <_sbrk_r>:
 800e71c:	b538      	push	{r3, r4, r5, lr}
 800e71e:	4d06      	ldr	r5, [pc, #24]	@ (800e738 <_sbrk_r+0x1c>)
 800e720:	2300      	movs	r3, #0
 800e722:	4604      	mov	r4, r0
 800e724:	4608      	mov	r0, r1
 800e726:	602b      	str	r3, [r5, #0]
 800e728:	f7f8 fd44 	bl	80071b4 <_sbrk>
 800e72c:	1c43      	adds	r3, r0, #1
 800e72e:	d102      	bne.n	800e736 <_sbrk_r+0x1a>
 800e730:	682b      	ldr	r3, [r5, #0]
 800e732:	b103      	cbz	r3, 800e736 <_sbrk_r+0x1a>
 800e734:	6023      	str	r3, [r4, #0]
 800e736:	bd38      	pop	{r3, r4, r5, pc}
 800e738:	20000930 	.word	0x20000930

0800e73c <__assert_func>:
 800e73c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e73e:	4614      	mov	r4, r2
 800e740:	461a      	mov	r2, r3
 800e742:	4b09      	ldr	r3, [pc, #36]	@ (800e768 <__assert_func+0x2c>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	4605      	mov	r5, r0
 800e748:	68d8      	ldr	r0, [r3, #12]
 800e74a:	b954      	cbnz	r4, 800e762 <__assert_func+0x26>
 800e74c:	4b07      	ldr	r3, [pc, #28]	@ (800e76c <__assert_func+0x30>)
 800e74e:	461c      	mov	r4, r3
 800e750:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e754:	9100      	str	r1, [sp, #0]
 800e756:	462b      	mov	r3, r5
 800e758:	4905      	ldr	r1, [pc, #20]	@ (800e770 <__assert_func+0x34>)
 800e75a:	f000 f841 	bl	800e7e0 <fiprintf>
 800e75e:	f000 f851 	bl	800e804 <abort>
 800e762:	4b04      	ldr	r3, [pc, #16]	@ (800e774 <__assert_func+0x38>)
 800e764:	e7f4      	b.n	800e750 <__assert_func+0x14>
 800e766:	bf00      	nop
 800e768:	20000058 	.word	0x20000058
 800e76c:	08011755 	.word	0x08011755
 800e770:	08011727 	.word	0x08011727
 800e774:	0801171a 	.word	0x0801171a

0800e778 <_calloc_r>:
 800e778:	b570      	push	{r4, r5, r6, lr}
 800e77a:	fba1 5402 	umull	r5, r4, r1, r2
 800e77e:	b93c      	cbnz	r4, 800e790 <_calloc_r+0x18>
 800e780:	4629      	mov	r1, r5
 800e782:	f7ff fb11 	bl	800dda8 <_malloc_r>
 800e786:	4606      	mov	r6, r0
 800e788:	b928      	cbnz	r0, 800e796 <_calloc_r+0x1e>
 800e78a:	2600      	movs	r6, #0
 800e78c:	4630      	mov	r0, r6
 800e78e:	bd70      	pop	{r4, r5, r6, pc}
 800e790:	220c      	movs	r2, #12
 800e792:	6002      	str	r2, [r0, #0]
 800e794:	e7f9      	b.n	800e78a <_calloc_r+0x12>
 800e796:	462a      	mov	r2, r5
 800e798:	4621      	mov	r1, r4
 800e79a:	f7fe fbb4 	bl	800cf06 <memset>
 800e79e:	e7f5      	b.n	800e78c <_calloc_r+0x14>

0800e7a0 <__ascii_mbtowc>:
 800e7a0:	b082      	sub	sp, #8
 800e7a2:	b901      	cbnz	r1, 800e7a6 <__ascii_mbtowc+0x6>
 800e7a4:	a901      	add	r1, sp, #4
 800e7a6:	b142      	cbz	r2, 800e7ba <__ascii_mbtowc+0x1a>
 800e7a8:	b14b      	cbz	r3, 800e7be <__ascii_mbtowc+0x1e>
 800e7aa:	7813      	ldrb	r3, [r2, #0]
 800e7ac:	600b      	str	r3, [r1, #0]
 800e7ae:	7812      	ldrb	r2, [r2, #0]
 800e7b0:	1e10      	subs	r0, r2, #0
 800e7b2:	bf18      	it	ne
 800e7b4:	2001      	movne	r0, #1
 800e7b6:	b002      	add	sp, #8
 800e7b8:	4770      	bx	lr
 800e7ba:	4610      	mov	r0, r2
 800e7bc:	e7fb      	b.n	800e7b6 <__ascii_mbtowc+0x16>
 800e7be:	f06f 0001 	mvn.w	r0, #1
 800e7c2:	e7f8      	b.n	800e7b6 <__ascii_mbtowc+0x16>

0800e7c4 <__ascii_wctomb>:
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	4608      	mov	r0, r1
 800e7c8:	b141      	cbz	r1, 800e7dc <__ascii_wctomb+0x18>
 800e7ca:	2aff      	cmp	r2, #255	@ 0xff
 800e7cc:	d904      	bls.n	800e7d8 <__ascii_wctomb+0x14>
 800e7ce:	228a      	movs	r2, #138	@ 0x8a
 800e7d0:	601a      	str	r2, [r3, #0]
 800e7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800e7d6:	4770      	bx	lr
 800e7d8:	700a      	strb	r2, [r1, #0]
 800e7da:	2001      	movs	r0, #1
 800e7dc:	4770      	bx	lr
	...

0800e7e0 <fiprintf>:
 800e7e0:	b40e      	push	{r1, r2, r3}
 800e7e2:	b503      	push	{r0, r1, lr}
 800e7e4:	4601      	mov	r1, r0
 800e7e6:	ab03      	add	r3, sp, #12
 800e7e8:	4805      	ldr	r0, [pc, #20]	@ (800e800 <fiprintf+0x20>)
 800e7ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7ee:	6800      	ldr	r0, [r0, #0]
 800e7f0:	9301      	str	r3, [sp, #4]
 800e7f2:	f000 f837 	bl	800e864 <_vfiprintf_r>
 800e7f6:	b002      	add	sp, #8
 800e7f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7fc:	b003      	add	sp, #12
 800e7fe:	4770      	bx	lr
 800e800:	20000058 	.word	0x20000058

0800e804 <abort>:
 800e804:	b508      	push	{r3, lr}
 800e806:	2006      	movs	r0, #6
 800e808:	f000 fa00 	bl	800ec0c <raise>
 800e80c:	2001      	movs	r0, #1
 800e80e:	f7f8 fc59 	bl	80070c4 <_exit>

0800e812 <__sfputc_r>:
 800e812:	6893      	ldr	r3, [r2, #8]
 800e814:	3b01      	subs	r3, #1
 800e816:	2b00      	cmp	r3, #0
 800e818:	b410      	push	{r4}
 800e81a:	6093      	str	r3, [r2, #8]
 800e81c:	da08      	bge.n	800e830 <__sfputc_r+0x1e>
 800e81e:	6994      	ldr	r4, [r2, #24]
 800e820:	42a3      	cmp	r3, r4
 800e822:	db01      	blt.n	800e828 <__sfputc_r+0x16>
 800e824:	290a      	cmp	r1, #10
 800e826:	d103      	bne.n	800e830 <__sfputc_r+0x1e>
 800e828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e82c:	f000 b932 	b.w	800ea94 <__swbuf_r>
 800e830:	6813      	ldr	r3, [r2, #0]
 800e832:	1c58      	adds	r0, r3, #1
 800e834:	6010      	str	r0, [r2, #0]
 800e836:	7019      	strb	r1, [r3, #0]
 800e838:	4608      	mov	r0, r1
 800e83a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e83e:	4770      	bx	lr

0800e840 <__sfputs_r>:
 800e840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e842:	4606      	mov	r6, r0
 800e844:	460f      	mov	r7, r1
 800e846:	4614      	mov	r4, r2
 800e848:	18d5      	adds	r5, r2, r3
 800e84a:	42ac      	cmp	r4, r5
 800e84c:	d101      	bne.n	800e852 <__sfputs_r+0x12>
 800e84e:	2000      	movs	r0, #0
 800e850:	e007      	b.n	800e862 <__sfputs_r+0x22>
 800e852:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e856:	463a      	mov	r2, r7
 800e858:	4630      	mov	r0, r6
 800e85a:	f7ff ffda 	bl	800e812 <__sfputc_r>
 800e85e:	1c43      	adds	r3, r0, #1
 800e860:	d1f3      	bne.n	800e84a <__sfputs_r+0xa>
 800e862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e864 <_vfiprintf_r>:
 800e864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e868:	460d      	mov	r5, r1
 800e86a:	b09d      	sub	sp, #116	@ 0x74
 800e86c:	4614      	mov	r4, r2
 800e86e:	4698      	mov	r8, r3
 800e870:	4606      	mov	r6, r0
 800e872:	b118      	cbz	r0, 800e87c <_vfiprintf_r+0x18>
 800e874:	6a03      	ldr	r3, [r0, #32]
 800e876:	b90b      	cbnz	r3, 800e87c <_vfiprintf_r+0x18>
 800e878:	f7fe fabc 	bl	800cdf4 <__sinit>
 800e87c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e87e:	07d9      	lsls	r1, r3, #31
 800e880:	d405      	bmi.n	800e88e <_vfiprintf_r+0x2a>
 800e882:	89ab      	ldrh	r3, [r5, #12]
 800e884:	059a      	lsls	r2, r3, #22
 800e886:	d402      	bmi.n	800e88e <_vfiprintf_r+0x2a>
 800e888:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e88a:	f7fe fbba 	bl	800d002 <__retarget_lock_acquire_recursive>
 800e88e:	89ab      	ldrh	r3, [r5, #12]
 800e890:	071b      	lsls	r3, r3, #28
 800e892:	d501      	bpl.n	800e898 <_vfiprintf_r+0x34>
 800e894:	692b      	ldr	r3, [r5, #16]
 800e896:	b99b      	cbnz	r3, 800e8c0 <_vfiprintf_r+0x5c>
 800e898:	4629      	mov	r1, r5
 800e89a:	4630      	mov	r0, r6
 800e89c:	f000 f938 	bl	800eb10 <__swsetup_r>
 800e8a0:	b170      	cbz	r0, 800e8c0 <_vfiprintf_r+0x5c>
 800e8a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8a4:	07dc      	lsls	r4, r3, #31
 800e8a6:	d504      	bpl.n	800e8b2 <_vfiprintf_r+0x4e>
 800e8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ac:	b01d      	add	sp, #116	@ 0x74
 800e8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b2:	89ab      	ldrh	r3, [r5, #12]
 800e8b4:	0598      	lsls	r0, r3, #22
 800e8b6:	d4f7      	bmi.n	800e8a8 <_vfiprintf_r+0x44>
 800e8b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e8ba:	f7fe fba3 	bl	800d004 <__retarget_lock_release_recursive>
 800e8be:	e7f3      	b.n	800e8a8 <_vfiprintf_r+0x44>
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8c4:	2320      	movs	r3, #32
 800e8c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e8ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8ce:	2330      	movs	r3, #48	@ 0x30
 800e8d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ea80 <_vfiprintf_r+0x21c>
 800e8d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e8d8:	f04f 0901 	mov.w	r9, #1
 800e8dc:	4623      	mov	r3, r4
 800e8de:	469a      	mov	sl, r3
 800e8e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8e4:	b10a      	cbz	r2, 800e8ea <_vfiprintf_r+0x86>
 800e8e6:	2a25      	cmp	r2, #37	@ 0x25
 800e8e8:	d1f9      	bne.n	800e8de <_vfiprintf_r+0x7a>
 800e8ea:	ebba 0b04 	subs.w	fp, sl, r4
 800e8ee:	d00b      	beq.n	800e908 <_vfiprintf_r+0xa4>
 800e8f0:	465b      	mov	r3, fp
 800e8f2:	4622      	mov	r2, r4
 800e8f4:	4629      	mov	r1, r5
 800e8f6:	4630      	mov	r0, r6
 800e8f8:	f7ff ffa2 	bl	800e840 <__sfputs_r>
 800e8fc:	3001      	adds	r0, #1
 800e8fe:	f000 80a7 	beq.w	800ea50 <_vfiprintf_r+0x1ec>
 800e902:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e904:	445a      	add	r2, fp
 800e906:	9209      	str	r2, [sp, #36]	@ 0x24
 800e908:	f89a 3000 	ldrb.w	r3, [sl]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	f000 809f 	beq.w	800ea50 <_vfiprintf_r+0x1ec>
 800e912:	2300      	movs	r3, #0
 800e914:	f04f 32ff 	mov.w	r2, #4294967295
 800e918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e91c:	f10a 0a01 	add.w	sl, sl, #1
 800e920:	9304      	str	r3, [sp, #16]
 800e922:	9307      	str	r3, [sp, #28]
 800e924:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e928:	931a      	str	r3, [sp, #104]	@ 0x68
 800e92a:	4654      	mov	r4, sl
 800e92c:	2205      	movs	r2, #5
 800e92e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e932:	4853      	ldr	r0, [pc, #332]	@ (800ea80 <_vfiprintf_r+0x21c>)
 800e934:	f7f1 fc6c 	bl	8000210 <memchr>
 800e938:	9a04      	ldr	r2, [sp, #16]
 800e93a:	b9d8      	cbnz	r0, 800e974 <_vfiprintf_r+0x110>
 800e93c:	06d1      	lsls	r1, r2, #27
 800e93e:	bf44      	itt	mi
 800e940:	2320      	movmi	r3, #32
 800e942:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e946:	0713      	lsls	r3, r2, #28
 800e948:	bf44      	itt	mi
 800e94a:	232b      	movmi	r3, #43	@ 0x2b
 800e94c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e950:	f89a 3000 	ldrb.w	r3, [sl]
 800e954:	2b2a      	cmp	r3, #42	@ 0x2a
 800e956:	d015      	beq.n	800e984 <_vfiprintf_r+0x120>
 800e958:	9a07      	ldr	r2, [sp, #28]
 800e95a:	4654      	mov	r4, sl
 800e95c:	2000      	movs	r0, #0
 800e95e:	f04f 0c0a 	mov.w	ip, #10
 800e962:	4621      	mov	r1, r4
 800e964:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e968:	3b30      	subs	r3, #48	@ 0x30
 800e96a:	2b09      	cmp	r3, #9
 800e96c:	d94b      	bls.n	800ea06 <_vfiprintf_r+0x1a2>
 800e96e:	b1b0      	cbz	r0, 800e99e <_vfiprintf_r+0x13a>
 800e970:	9207      	str	r2, [sp, #28]
 800e972:	e014      	b.n	800e99e <_vfiprintf_r+0x13a>
 800e974:	eba0 0308 	sub.w	r3, r0, r8
 800e978:	fa09 f303 	lsl.w	r3, r9, r3
 800e97c:	4313      	orrs	r3, r2
 800e97e:	9304      	str	r3, [sp, #16]
 800e980:	46a2      	mov	sl, r4
 800e982:	e7d2      	b.n	800e92a <_vfiprintf_r+0xc6>
 800e984:	9b03      	ldr	r3, [sp, #12]
 800e986:	1d19      	adds	r1, r3, #4
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	9103      	str	r1, [sp, #12]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	bfbb      	ittet	lt
 800e990:	425b      	neglt	r3, r3
 800e992:	f042 0202 	orrlt.w	r2, r2, #2
 800e996:	9307      	strge	r3, [sp, #28]
 800e998:	9307      	strlt	r3, [sp, #28]
 800e99a:	bfb8      	it	lt
 800e99c:	9204      	strlt	r2, [sp, #16]
 800e99e:	7823      	ldrb	r3, [r4, #0]
 800e9a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e9a2:	d10a      	bne.n	800e9ba <_vfiprintf_r+0x156>
 800e9a4:	7863      	ldrb	r3, [r4, #1]
 800e9a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9a8:	d132      	bne.n	800ea10 <_vfiprintf_r+0x1ac>
 800e9aa:	9b03      	ldr	r3, [sp, #12]
 800e9ac:	1d1a      	adds	r2, r3, #4
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	9203      	str	r2, [sp, #12]
 800e9b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e9b6:	3402      	adds	r4, #2
 800e9b8:	9305      	str	r3, [sp, #20]
 800e9ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ea90 <_vfiprintf_r+0x22c>
 800e9be:	7821      	ldrb	r1, [r4, #0]
 800e9c0:	2203      	movs	r2, #3
 800e9c2:	4650      	mov	r0, sl
 800e9c4:	f7f1 fc24 	bl	8000210 <memchr>
 800e9c8:	b138      	cbz	r0, 800e9da <_vfiprintf_r+0x176>
 800e9ca:	9b04      	ldr	r3, [sp, #16]
 800e9cc:	eba0 000a 	sub.w	r0, r0, sl
 800e9d0:	2240      	movs	r2, #64	@ 0x40
 800e9d2:	4082      	lsls	r2, r0
 800e9d4:	4313      	orrs	r3, r2
 800e9d6:	3401      	adds	r4, #1
 800e9d8:	9304      	str	r3, [sp, #16]
 800e9da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9de:	4829      	ldr	r0, [pc, #164]	@ (800ea84 <_vfiprintf_r+0x220>)
 800e9e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e9e4:	2206      	movs	r2, #6
 800e9e6:	f7f1 fc13 	bl	8000210 <memchr>
 800e9ea:	2800      	cmp	r0, #0
 800e9ec:	d03f      	beq.n	800ea6e <_vfiprintf_r+0x20a>
 800e9ee:	4b26      	ldr	r3, [pc, #152]	@ (800ea88 <_vfiprintf_r+0x224>)
 800e9f0:	bb1b      	cbnz	r3, 800ea3a <_vfiprintf_r+0x1d6>
 800e9f2:	9b03      	ldr	r3, [sp, #12]
 800e9f4:	3307      	adds	r3, #7
 800e9f6:	f023 0307 	bic.w	r3, r3, #7
 800e9fa:	3308      	adds	r3, #8
 800e9fc:	9303      	str	r3, [sp, #12]
 800e9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea00:	443b      	add	r3, r7
 800ea02:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea04:	e76a      	b.n	800e8dc <_vfiprintf_r+0x78>
 800ea06:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea0a:	460c      	mov	r4, r1
 800ea0c:	2001      	movs	r0, #1
 800ea0e:	e7a8      	b.n	800e962 <_vfiprintf_r+0xfe>
 800ea10:	2300      	movs	r3, #0
 800ea12:	3401      	adds	r4, #1
 800ea14:	9305      	str	r3, [sp, #20]
 800ea16:	4619      	mov	r1, r3
 800ea18:	f04f 0c0a 	mov.w	ip, #10
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea22:	3a30      	subs	r2, #48	@ 0x30
 800ea24:	2a09      	cmp	r2, #9
 800ea26:	d903      	bls.n	800ea30 <_vfiprintf_r+0x1cc>
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d0c6      	beq.n	800e9ba <_vfiprintf_r+0x156>
 800ea2c:	9105      	str	r1, [sp, #20]
 800ea2e:	e7c4      	b.n	800e9ba <_vfiprintf_r+0x156>
 800ea30:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea34:	4604      	mov	r4, r0
 800ea36:	2301      	movs	r3, #1
 800ea38:	e7f0      	b.n	800ea1c <_vfiprintf_r+0x1b8>
 800ea3a:	ab03      	add	r3, sp, #12
 800ea3c:	9300      	str	r3, [sp, #0]
 800ea3e:	462a      	mov	r2, r5
 800ea40:	4b12      	ldr	r3, [pc, #72]	@ (800ea8c <_vfiprintf_r+0x228>)
 800ea42:	a904      	add	r1, sp, #16
 800ea44:	4630      	mov	r0, r6
 800ea46:	f7fd fd91 	bl	800c56c <_printf_float>
 800ea4a:	4607      	mov	r7, r0
 800ea4c:	1c78      	adds	r0, r7, #1
 800ea4e:	d1d6      	bne.n	800e9fe <_vfiprintf_r+0x19a>
 800ea50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea52:	07d9      	lsls	r1, r3, #31
 800ea54:	d405      	bmi.n	800ea62 <_vfiprintf_r+0x1fe>
 800ea56:	89ab      	ldrh	r3, [r5, #12]
 800ea58:	059a      	lsls	r2, r3, #22
 800ea5a:	d402      	bmi.n	800ea62 <_vfiprintf_r+0x1fe>
 800ea5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea5e:	f7fe fad1 	bl	800d004 <__retarget_lock_release_recursive>
 800ea62:	89ab      	ldrh	r3, [r5, #12]
 800ea64:	065b      	lsls	r3, r3, #25
 800ea66:	f53f af1f 	bmi.w	800e8a8 <_vfiprintf_r+0x44>
 800ea6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea6c:	e71e      	b.n	800e8ac <_vfiprintf_r+0x48>
 800ea6e:	ab03      	add	r3, sp, #12
 800ea70:	9300      	str	r3, [sp, #0]
 800ea72:	462a      	mov	r2, r5
 800ea74:	4b05      	ldr	r3, [pc, #20]	@ (800ea8c <_vfiprintf_r+0x228>)
 800ea76:	a904      	add	r1, sp, #16
 800ea78:	4630      	mov	r0, r6
 800ea7a:	f7fe f80f 	bl	800ca9c <_printf_i>
 800ea7e:	e7e4      	b.n	800ea4a <_vfiprintf_r+0x1e6>
 800ea80:	08011857 	.word	0x08011857
 800ea84:	08011861 	.word	0x08011861
 800ea88:	0800c56d 	.word	0x0800c56d
 800ea8c:	0800e841 	.word	0x0800e841
 800ea90:	0801185d 	.word	0x0801185d

0800ea94 <__swbuf_r>:
 800ea94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea96:	460e      	mov	r6, r1
 800ea98:	4614      	mov	r4, r2
 800ea9a:	4605      	mov	r5, r0
 800ea9c:	b118      	cbz	r0, 800eaa6 <__swbuf_r+0x12>
 800ea9e:	6a03      	ldr	r3, [r0, #32]
 800eaa0:	b90b      	cbnz	r3, 800eaa6 <__swbuf_r+0x12>
 800eaa2:	f7fe f9a7 	bl	800cdf4 <__sinit>
 800eaa6:	69a3      	ldr	r3, [r4, #24]
 800eaa8:	60a3      	str	r3, [r4, #8]
 800eaaa:	89a3      	ldrh	r3, [r4, #12]
 800eaac:	071a      	lsls	r2, r3, #28
 800eaae:	d501      	bpl.n	800eab4 <__swbuf_r+0x20>
 800eab0:	6923      	ldr	r3, [r4, #16]
 800eab2:	b943      	cbnz	r3, 800eac6 <__swbuf_r+0x32>
 800eab4:	4621      	mov	r1, r4
 800eab6:	4628      	mov	r0, r5
 800eab8:	f000 f82a 	bl	800eb10 <__swsetup_r>
 800eabc:	b118      	cbz	r0, 800eac6 <__swbuf_r+0x32>
 800eabe:	f04f 37ff 	mov.w	r7, #4294967295
 800eac2:	4638      	mov	r0, r7
 800eac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eac6:	6823      	ldr	r3, [r4, #0]
 800eac8:	6922      	ldr	r2, [r4, #16]
 800eaca:	1a98      	subs	r0, r3, r2
 800eacc:	6963      	ldr	r3, [r4, #20]
 800eace:	b2f6      	uxtb	r6, r6
 800ead0:	4283      	cmp	r3, r0
 800ead2:	4637      	mov	r7, r6
 800ead4:	dc05      	bgt.n	800eae2 <__swbuf_r+0x4e>
 800ead6:	4621      	mov	r1, r4
 800ead8:	4628      	mov	r0, r5
 800eada:	f7ff fdf7 	bl	800e6cc <_fflush_r>
 800eade:	2800      	cmp	r0, #0
 800eae0:	d1ed      	bne.n	800eabe <__swbuf_r+0x2a>
 800eae2:	68a3      	ldr	r3, [r4, #8]
 800eae4:	3b01      	subs	r3, #1
 800eae6:	60a3      	str	r3, [r4, #8]
 800eae8:	6823      	ldr	r3, [r4, #0]
 800eaea:	1c5a      	adds	r2, r3, #1
 800eaec:	6022      	str	r2, [r4, #0]
 800eaee:	701e      	strb	r6, [r3, #0]
 800eaf0:	6962      	ldr	r2, [r4, #20]
 800eaf2:	1c43      	adds	r3, r0, #1
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d004      	beq.n	800eb02 <__swbuf_r+0x6e>
 800eaf8:	89a3      	ldrh	r3, [r4, #12]
 800eafa:	07db      	lsls	r3, r3, #31
 800eafc:	d5e1      	bpl.n	800eac2 <__swbuf_r+0x2e>
 800eafe:	2e0a      	cmp	r6, #10
 800eb00:	d1df      	bne.n	800eac2 <__swbuf_r+0x2e>
 800eb02:	4621      	mov	r1, r4
 800eb04:	4628      	mov	r0, r5
 800eb06:	f7ff fde1 	bl	800e6cc <_fflush_r>
 800eb0a:	2800      	cmp	r0, #0
 800eb0c:	d0d9      	beq.n	800eac2 <__swbuf_r+0x2e>
 800eb0e:	e7d6      	b.n	800eabe <__swbuf_r+0x2a>

0800eb10 <__swsetup_r>:
 800eb10:	b538      	push	{r3, r4, r5, lr}
 800eb12:	4b29      	ldr	r3, [pc, #164]	@ (800ebb8 <__swsetup_r+0xa8>)
 800eb14:	4605      	mov	r5, r0
 800eb16:	6818      	ldr	r0, [r3, #0]
 800eb18:	460c      	mov	r4, r1
 800eb1a:	b118      	cbz	r0, 800eb24 <__swsetup_r+0x14>
 800eb1c:	6a03      	ldr	r3, [r0, #32]
 800eb1e:	b90b      	cbnz	r3, 800eb24 <__swsetup_r+0x14>
 800eb20:	f7fe f968 	bl	800cdf4 <__sinit>
 800eb24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb28:	0719      	lsls	r1, r3, #28
 800eb2a:	d422      	bmi.n	800eb72 <__swsetup_r+0x62>
 800eb2c:	06da      	lsls	r2, r3, #27
 800eb2e:	d407      	bmi.n	800eb40 <__swsetup_r+0x30>
 800eb30:	2209      	movs	r2, #9
 800eb32:	602a      	str	r2, [r5, #0]
 800eb34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb38:	81a3      	strh	r3, [r4, #12]
 800eb3a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb3e:	e033      	b.n	800eba8 <__swsetup_r+0x98>
 800eb40:	0758      	lsls	r0, r3, #29
 800eb42:	d512      	bpl.n	800eb6a <__swsetup_r+0x5a>
 800eb44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb46:	b141      	cbz	r1, 800eb5a <__swsetup_r+0x4a>
 800eb48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb4c:	4299      	cmp	r1, r3
 800eb4e:	d002      	beq.n	800eb56 <__swsetup_r+0x46>
 800eb50:	4628      	mov	r0, r5
 800eb52:	f7ff f8b5 	bl	800dcc0 <_free_r>
 800eb56:	2300      	movs	r3, #0
 800eb58:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb5a:	89a3      	ldrh	r3, [r4, #12]
 800eb5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eb60:	81a3      	strh	r3, [r4, #12]
 800eb62:	2300      	movs	r3, #0
 800eb64:	6063      	str	r3, [r4, #4]
 800eb66:	6923      	ldr	r3, [r4, #16]
 800eb68:	6023      	str	r3, [r4, #0]
 800eb6a:	89a3      	ldrh	r3, [r4, #12]
 800eb6c:	f043 0308 	orr.w	r3, r3, #8
 800eb70:	81a3      	strh	r3, [r4, #12]
 800eb72:	6923      	ldr	r3, [r4, #16]
 800eb74:	b94b      	cbnz	r3, 800eb8a <__swsetup_r+0x7a>
 800eb76:	89a3      	ldrh	r3, [r4, #12]
 800eb78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eb7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eb80:	d003      	beq.n	800eb8a <__swsetup_r+0x7a>
 800eb82:	4621      	mov	r1, r4
 800eb84:	4628      	mov	r0, r5
 800eb86:	f000 f883 	bl	800ec90 <__smakebuf_r>
 800eb8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb8e:	f013 0201 	ands.w	r2, r3, #1
 800eb92:	d00a      	beq.n	800ebaa <__swsetup_r+0x9a>
 800eb94:	2200      	movs	r2, #0
 800eb96:	60a2      	str	r2, [r4, #8]
 800eb98:	6962      	ldr	r2, [r4, #20]
 800eb9a:	4252      	negs	r2, r2
 800eb9c:	61a2      	str	r2, [r4, #24]
 800eb9e:	6922      	ldr	r2, [r4, #16]
 800eba0:	b942      	cbnz	r2, 800ebb4 <__swsetup_r+0xa4>
 800eba2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800eba6:	d1c5      	bne.n	800eb34 <__swsetup_r+0x24>
 800eba8:	bd38      	pop	{r3, r4, r5, pc}
 800ebaa:	0799      	lsls	r1, r3, #30
 800ebac:	bf58      	it	pl
 800ebae:	6962      	ldrpl	r2, [r4, #20]
 800ebb0:	60a2      	str	r2, [r4, #8]
 800ebb2:	e7f4      	b.n	800eb9e <__swsetup_r+0x8e>
 800ebb4:	2000      	movs	r0, #0
 800ebb6:	e7f7      	b.n	800eba8 <__swsetup_r+0x98>
 800ebb8:	20000058 	.word	0x20000058

0800ebbc <_raise_r>:
 800ebbc:	291f      	cmp	r1, #31
 800ebbe:	b538      	push	{r3, r4, r5, lr}
 800ebc0:	4605      	mov	r5, r0
 800ebc2:	460c      	mov	r4, r1
 800ebc4:	d904      	bls.n	800ebd0 <_raise_r+0x14>
 800ebc6:	2316      	movs	r3, #22
 800ebc8:	6003      	str	r3, [r0, #0]
 800ebca:	f04f 30ff 	mov.w	r0, #4294967295
 800ebce:	bd38      	pop	{r3, r4, r5, pc}
 800ebd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ebd2:	b112      	cbz	r2, 800ebda <_raise_r+0x1e>
 800ebd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ebd8:	b94b      	cbnz	r3, 800ebee <_raise_r+0x32>
 800ebda:	4628      	mov	r0, r5
 800ebdc:	f000 f830 	bl	800ec40 <_getpid_r>
 800ebe0:	4622      	mov	r2, r4
 800ebe2:	4601      	mov	r1, r0
 800ebe4:	4628      	mov	r0, r5
 800ebe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebea:	f000 b817 	b.w	800ec1c <_kill_r>
 800ebee:	2b01      	cmp	r3, #1
 800ebf0:	d00a      	beq.n	800ec08 <_raise_r+0x4c>
 800ebf2:	1c59      	adds	r1, r3, #1
 800ebf4:	d103      	bne.n	800ebfe <_raise_r+0x42>
 800ebf6:	2316      	movs	r3, #22
 800ebf8:	6003      	str	r3, [r0, #0]
 800ebfa:	2001      	movs	r0, #1
 800ebfc:	e7e7      	b.n	800ebce <_raise_r+0x12>
 800ebfe:	2100      	movs	r1, #0
 800ec00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ec04:	4620      	mov	r0, r4
 800ec06:	4798      	blx	r3
 800ec08:	2000      	movs	r0, #0
 800ec0a:	e7e0      	b.n	800ebce <_raise_r+0x12>

0800ec0c <raise>:
 800ec0c:	4b02      	ldr	r3, [pc, #8]	@ (800ec18 <raise+0xc>)
 800ec0e:	4601      	mov	r1, r0
 800ec10:	6818      	ldr	r0, [r3, #0]
 800ec12:	f7ff bfd3 	b.w	800ebbc <_raise_r>
 800ec16:	bf00      	nop
 800ec18:	20000058 	.word	0x20000058

0800ec1c <_kill_r>:
 800ec1c:	b538      	push	{r3, r4, r5, lr}
 800ec1e:	4d07      	ldr	r5, [pc, #28]	@ (800ec3c <_kill_r+0x20>)
 800ec20:	2300      	movs	r3, #0
 800ec22:	4604      	mov	r4, r0
 800ec24:	4608      	mov	r0, r1
 800ec26:	4611      	mov	r1, r2
 800ec28:	602b      	str	r3, [r5, #0]
 800ec2a:	f7f8 fa3b 	bl	80070a4 <_kill>
 800ec2e:	1c43      	adds	r3, r0, #1
 800ec30:	d102      	bne.n	800ec38 <_kill_r+0x1c>
 800ec32:	682b      	ldr	r3, [r5, #0]
 800ec34:	b103      	cbz	r3, 800ec38 <_kill_r+0x1c>
 800ec36:	6023      	str	r3, [r4, #0]
 800ec38:	bd38      	pop	{r3, r4, r5, pc}
 800ec3a:	bf00      	nop
 800ec3c:	20000930 	.word	0x20000930

0800ec40 <_getpid_r>:
 800ec40:	f7f8 ba28 	b.w	8007094 <_getpid>

0800ec44 <__swhatbuf_r>:
 800ec44:	b570      	push	{r4, r5, r6, lr}
 800ec46:	460c      	mov	r4, r1
 800ec48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec4c:	2900      	cmp	r1, #0
 800ec4e:	b096      	sub	sp, #88	@ 0x58
 800ec50:	4615      	mov	r5, r2
 800ec52:	461e      	mov	r6, r3
 800ec54:	da0d      	bge.n	800ec72 <__swhatbuf_r+0x2e>
 800ec56:	89a3      	ldrh	r3, [r4, #12]
 800ec58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ec5c:	f04f 0100 	mov.w	r1, #0
 800ec60:	bf14      	ite	ne
 800ec62:	2340      	movne	r3, #64	@ 0x40
 800ec64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ec68:	2000      	movs	r0, #0
 800ec6a:	6031      	str	r1, [r6, #0]
 800ec6c:	602b      	str	r3, [r5, #0]
 800ec6e:	b016      	add	sp, #88	@ 0x58
 800ec70:	bd70      	pop	{r4, r5, r6, pc}
 800ec72:	466a      	mov	r2, sp
 800ec74:	f000 f848 	bl	800ed08 <_fstat_r>
 800ec78:	2800      	cmp	r0, #0
 800ec7a:	dbec      	blt.n	800ec56 <__swhatbuf_r+0x12>
 800ec7c:	9901      	ldr	r1, [sp, #4]
 800ec7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ec82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ec86:	4259      	negs	r1, r3
 800ec88:	4159      	adcs	r1, r3
 800ec8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec8e:	e7eb      	b.n	800ec68 <__swhatbuf_r+0x24>

0800ec90 <__smakebuf_r>:
 800ec90:	898b      	ldrh	r3, [r1, #12]
 800ec92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec94:	079d      	lsls	r5, r3, #30
 800ec96:	4606      	mov	r6, r0
 800ec98:	460c      	mov	r4, r1
 800ec9a:	d507      	bpl.n	800ecac <__smakebuf_r+0x1c>
 800ec9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800eca0:	6023      	str	r3, [r4, #0]
 800eca2:	6123      	str	r3, [r4, #16]
 800eca4:	2301      	movs	r3, #1
 800eca6:	6163      	str	r3, [r4, #20]
 800eca8:	b003      	add	sp, #12
 800ecaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecac:	ab01      	add	r3, sp, #4
 800ecae:	466a      	mov	r2, sp
 800ecb0:	f7ff ffc8 	bl	800ec44 <__swhatbuf_r>
 800ecb4:	9f00      	ldr	r7, [sp, #0]
 800ecb6:	4605      	mov	r5, r0
 800ecb8:	4639      	mov	r1, r7
 800ecba:	4630      	mov	r0, r6
 800ecbc:	f7ff f874 	bl	800dda8 <_malloc_r>
 800ecc0:	b948      	cbnz	r0, 800ecd6 <__smakebuf_r+0x46>
 800ecc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecc6:	059a      	lsls	r2, r3, #22
 800ecc8:	d4ee      	bmi.n	800eca8 <__smakebuf_r+0x18>
 800ecca:	f023 0303 	bic.w	r3, r3, #3
 800ecce:	f043 0302 	orr.w	r3, r3, #2
 800ecd2:	81a3      	strh	r3, [r4, #12]
 800ecd4:	e7e2      	b.n	800ec9c <__smakebuf_r+0xc>
 800ecd6:	89a3      	ldrh	r3, [r4, #12]
 800ecd8:	6020      	str	r0, [r4, #0]
 800ecda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ecde:	81a3      	strh	r3, [r4, #12]
 800ece0:	9b01      	ldr	r3, [sp, #4]
 800ece2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ece6:	b15b      	cbz	r3, 800ed00 <__smakebuf_r+0x70>
 800ece8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecec:	4630      	mov	r0, r6
 800ecee:	f000 f81d 	bl	800ed2c <_isatty_r>
 800ecf2:	b128      	cbz	r0, 800ed00 <__smakebuf_r+0x70>
 800ecf4:	89a3      	ldrh	r3, [r4, #12]
 800ecf6:	f023 0303 	bic.w	r3, r3, #3
 800ecfa:	f043 0301 	orr.w	r3, r3, #1
 800ecfe:	81a3      	strh	r3, [r4, #12]
 800ed00:	89a3      	ldrh	r3, [r4, #12]
 800ed02:	431d      	orrs	r5, r3
 800ed04:	81a5      	strh	r5, [r4, #12]
 800ed06:	e7cf      	b.n	800eca8 <__smakebuf_r+0x18>

0800ed08 <_fstat_r>:
 800ed08:	b538      	push	{r3, r4, r5, lr}
 800ed0a:	4d07      	ldr	r5, [pc, #28]	@ (800ed28 <_fstat_r+0x20>)
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	4604      	mov	r4, r0
 800ed10:	4608      	mov	r0, r1
 800ed12:	4611      	mov	r1, r2
 800ed14:	602b      	str	r3, [r5, #0]
 800ed16:	f7f8 fa25 	bl	8007164 <_fstat>
 800ed1a:	1c43      	adds	r3, r0, #1
 800ed1c:	d102      	bne.n	800ed24 <_fstat_r+0x1c>
 800ed1e:	682b      	ldr	r3, [r5, #0]
 800ed20:	b103      	cbz	r3, 800ed24 <_fstat_r+0x1c>
 800ed22:	6023      	str	r3, [r4, #0]
 800ed24:	bd38      	pop	{r3, r4, r5, pc}
 800ed26:	bf00      	nop
 800ed28:	20000930 	.word	0x20000930

0800ed2c <_isatty_r>:
 800ed2c:	b538      	push	{r3, r4, r5, lr}
 800ed2e:	4d06      	ldr	r5, [pc, #24]	@ (800ed48 <_isatty_r+0x1c>)
 800ed30:	2300      	movs	r3, #0
 800ed32:	4604      	mov	r4, r0
 800ed34:	4608      	mov	r0, r1
 800ed36:	602b      	str	r3, [r5, #0]
 800ed38:	f7f8 fa24 	bl	8007184 <_isatty>
 800ed3c:	1c43      	adds	r3, r0, #1
 800ed3e:	d102      	bne.n	800ed46 <_isatty_r+0x1a>
 800ed40:	682b      	ldr	r3, [r5, #0]
 800ed42:	b103      	cbz	r3, 800ed46 <_isatty_r+0x1a>
 800ed44:	6023      	str	r3, [r4, #0]
 800ed46:	bd38      	pop	{r3, r4, r5, pc}
 800ed48:	20000930 	.word	0x20000930

0800ed4c <pow>:
 800ed4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed4e:	ed2d 8b02 	vpush	{d8}
 800ed52:	eeb0 8a40 	vmov.f32	s16, s0
 800ed56:	eef0 8a60 	vmov.f32	s17, s1
 800ed5a:	ec55 4b11 	vmov	r4, r5, d1
 800ed5e:	f000 fc77 	bl	800f650 <__ieee754_pow>
 800ed62:	4622      	mov	r2, r4
 800ed64:	462b      	mov	r3, r5
 800ed66:	4620      	mov	r0, r4
 800ed68:	4629      	mov	r1, r5
 800ed6a:	ec57 6b10 	vmov	r6, r7, d0
 800ed6e:	f7f1 fefd 	bl	8000b6c <__aeabi_dcmpun>
 800ed72:	2800      	cmp	r0, #0
 800ed74:	d13b      	bne.n	800edee <pow+0xa2>
 800ed76:	ec51 0b18 	vmov	r0, r1, d8
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	f7f1 fec3 	bl	8000b08 <__aeabi_dcmpeq>
 800ed82:	b1b8      	cbz	r0, 800edb4 <pow+0x68>
 800ed84:	2200      	movs	r2, #0
 800ed86:	2300      	movs	r3, #0
 800ed88:	4620      	mov	r0, r4
 800ed8a:	4629      	mov	r1, r5
 800ed8c:	f7f1 febc 	bl	8000b08 <__aeabi_dcmpeq>
 800ed90:	2800      	cmp	r0, #0
 800ed92:	d146      	bne.n	800ee22 <pow+0xd6>
 800ed94:	ec45 4b10 	vmov	d0, r4, r5
 800ed98:	f000 f949 	bl	800f02e <finite>
 800ed9c:	b338      	cbz	r0, 800edee <pow+0xa2>
 800ed9e:	2200      	movs	r2, #0
 800eda0:	2300      	movs	r3, #0
 800eda2:	4620      	mov	r0, r4
 800eda4:	4629      	mov	r1, r5
 800eda6:	f7f1 feb9 	bl	8000b1c <__aeabi_dcmplt>
 800edaa:	b300      	cbz	r0, 800edee <pow+0xa2>
 800edac:	f7fe f8fe 	bl	800cfac <__errno>
 800edb0:	2322      	movs	r3, #34	@ 0x22
 800edb2:	e01b      	b.n	800edec <pow+0xa0>
 800edb4:	ec47 6b10 	vmov	d0, r6, r7
 800edb8:	f000 f939 	bl	800f02e <finite>
 800edbc:	b9e0      	cbnz	r0, 800edf8 <pow+0xac>
 800edbe:	eeb0 0a48 	vmov.f32	s0, s16
 800edc2:	eef0 0a68 	vmov.f32	s1, s17
 800edc6:	f000 f932 	bl	800f02e <finite>
 800edca:	b1a8      	cbz	r0, 800edf8 <pow+0xac>
 800edcc:	ec45 4b10 	vmov	d0, r4, r5
 800edd0:	f000 f92d 	bl	800f02e <finite>
 800edd4:	b180      	cbz	r0, 800edf8 <pow+0xac>
 800edd6:	4632      	mov	r2, r6
 800edd8:	463b      	mov	r3, r7
 800edda:	4630      	mov	r0, r6
 800eddc:	4639      	mov	r1, r7
 800edde:	f7f1 fec5 	bl	8000b6c <__aeabi_dcmpun>
 800ede2:	2800      	cmp	r0, #0
 800ede4:	d0e2      	beq.n	800edac <pow+0x60>
 800ede6:	f7fe f8e1 	bl	800cfac <__errno>
 800edea:	2321      	movs	r3, #33	@ 0x21
 800edec:	6003      	str	r3, [r0, #0]
 800edee:	ecbd 8b02 	vpop	{d8}
 800edf2:	ec47 6b10 	vmov	d0, r6, r7
 800edf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edf8:	2200      	movs	r2, #0
 800edfa:	2300      	movs	r3, #0
 800edfc:	4630      	mov	r0, r6
 800edfe:	4639      	mov	r1, r7
 800ee00:	f7f1 fe82 	bl	8000b08 <__aeabi_dcmpeq>
 800ee04:	2800      	cmp	r0, #0
 800ee06:	d0f2      	beq.n	800edee <pow+0xa2>
 800ee08:	eeb0 0a48 	vmov.f32	s0, s16
 800ee0c:	eef0 0a68 	vmov.f32	s1, s17
 800ee10:	f000 f90d 	bl	800f02e <finite>
 800ee14:	2800      	cmp	r0, #0
 800ee16:	d0ea      	beq.n	800edee <pow+0xa2>
 800ee18:	ec45 4b10 	vmov	d0, r4, r5
 800ee1c:	f000 f907 	bl	800f02e <finite>
 800ee20:	e7c3      	b.n	800edaa <pow+0x5e>
 800ee22:	4f01      	ldr	r7, [pc, #4]	@ (800ee28 <pow+0xdc>)
 800ee24:	2600      	movs	r6, #0
 800ee26:	e7e2      	b.n	800edee <pow+0xa2>
 800ee28:	3ff00000 	.word	0x3ff00000

0800ee2c <sqrt>:
 800ee2c:	b538      	push	{r3, r4, r5, lr}
 800ee2e:	ed2d 8b02 	vpush	{d8}
 800ee32:	ec55 4b10 	vmov	r4, r5, d0
 800ee36:	f000 f961 	bl	800f0fc <__ieee754_sqrt>
 800ee3a:	4622      	mov	r2, r4
 800ee3c:	462b      	mov	r3, r5
 800ee3e:	4620      	mov	r0, r4
 800ee40:	4629      	mov	r1, r5
 800ee42:	eeb0 8a40 	vmov.f32	s16, s0
 800ee46:	eef0 8a60 	vmov.f32	s17, s1
 800ee4a:	f7f1 fe8f 	bl	8000b6c <__aeabi_dcmpun>
 800ee4e:	b990      	cbnz	r0, 800ee76 <sqrt+0x4a>
 800ee50:	2200      	movs	r2, #0
 800ee52:	2300      	movs	r3, #0
 800ee54:	4620      	mov	r0, r4
 800ee56:	4629      	mov	r1, r5
 800ee58:	f7f1 fe60 	bl	8000b1c <__aeabi_dcmplt>
 800ee5c:	b158      	cbz	r0, 800ee76 <sqrt+0x4a>
 800ee5e:	f7fe f8a5 	bl	800cfac <__errno>
 800ee62:	2321      	movs	r3, #33	@ 0x21
 800ee64:	6003      	str	r3, [r0, #0]
 800ee66:	2200      	movs	r2, #0
 800ee68:	2300      	movs	r3, #0
 800ee6a:	4610      	mov	r0, r2
 800ee6c:	4619      	mov	r1, r3
 800ee6e:	f7f1 fd0d 	bl	800088c <__aeabi_ddiv>
 800ee72:	ec41 0b18 	vmov	d8, r0, r1
 800ee76:	eeb0 0a48 	vmov.f32	s0, s16
 800ee7a:	eef0 0a68 	vmov.f32	s1, s17
 800ee7e:	ecbd 8b02 	vpop	{d8}
 800ee82:	bd38      	pop	{r3, r4, r5, pc}
 800ee84:	0000      	movs	r0, r0
	...

0800ee88 <cos>:
 800ee88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee8a:	ec53 2b10 	vmov	r2, r3, d0
 800ee8e:	4826      	ldr	r0, [pc, #152]	@ (800ef28 <cos+0xa0>)
 800ee90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ee94:	4281      	cmp	r1, r0
 800ee96:	d806      	bhi.n	800eea6 <cos+0x1e>
 800ee98:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800ef20 <cos+0x98>
 800ee9c:	b005      	add	sp, #20
 800ee9e:	f85d eb04 	ldr.w	lr, [sp], #4
 800eea2:	f000 ba51 	b.w	800f348 <__kernel_cos>
 800eea6:	4821      	ldr	r0, [pc, #132]	@ (800ef2c <cos+0xa4>)
 800eea8:	4281      	cmp	r1, r0
 800eeaa:	d908      	bls.n	800eebe <cos+0x36>
 800eeac:	4610      	mov	r0, r2
 800eeae:	4619      	mov	r1, r3
 800eeb0:	f7f1 fa0a 	bl	80002c8 <__aeabi_dsub>
 800eeb4:	ec41 0b10 	vmov	d0, r0, r1
 800eeb8:	b005      	add	sp, #20
 800eeba:	f85d fb04 	ldr.w	pc, [sp], #4
 800eebe:	4668      	mov	r0, sp
 800eec0:	f001 f90a 	bl	80100d8 <__ieee754_rem_pio2>
 800eec4:	f000 0003 	and.w	r0, r0, #3
 800eec8:	2801      	cmp	r0, #1
 800eeca:	d00b      	beq.n	800eee4 <cos+0x5c>
 800eecc:	2802      	cmp	r0, #2
 800eece:	d015      	beq.n	800eefc <cos+0x74>
 800eed0:	b9d8      	cbnz	r0, 800ef0a <cos+0x82>
 800eed2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eed6:	ed9d 0b00 	vldr	d0, [sp]
 800eeda:	f000 fa35 	bl	800f348 <__kernel_cos>
 800eede:	ec51 0b10 	vmov	r0, r1, d0
 800eee2:	e7e7      	b.n	800eeb4 <cos+0x2c>
 800eee4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eee8:	ed9d 0b00 	vldr	d0, [sp]
 800eeec:	f000 faf4 	bl	800f4d8 <__kernel_sin>
 800eef0:	ec53 2b10 	vmov	r2, r3, d0
 800eef4:	4610      	mov	r0, r2
 800eef6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800eefa:	e7db      	b.n	800eeb4 <cos+0x2c>
 800eefc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ef00:	ed9d 0b00 	vldr	d0, [sp]
 800ef04:	f000 fa20 	bl	800f348 <__kernel_cos>
 800ef08:	e7f2      	b.n	800eef0 <cos+0x68>
 800ef0a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ef0e:	ed9d 0b00 	vldr	d0, [sp]
 800ef12:	2001      	movs	r0, #1
 800ef14:	f000 fae0 	bl	800f4d8 <__kernel_sin>
 800ef18:	e7e1      	b.n	800eede <cos+0x56>
 800ef1a:	bf00      	nop
 800ef1c:	f3af 8000 	nop.w
	...
 800ef28:	3fe921fb 	.word	0x3fe921fb
 800ef2c:	7fefffff 	.word	0x7fefffff

0800ef30 <acosf>:
 800ef30:	b508      	push	{r3, lr}
 800ef32:	ed2d 8b02 	vpush	{d8}
 800ef36:	eeb0 8a40 	vmov.f32	s16, s0
 800ef3a:	f001 fad1 	bl	80104e0 <__ieee754_acosf>
 800ef3e:	eeb4 8a48 	vcmp.f32	s16, s16
 800ef42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef46:	eef0 8a40 	vmov.f32	s17, s0
 800ef4a:	d615      	bvs.n	800ef78 <acosf+0x48>
 800ef4c:	eeb0 0a48 	vmov.f32	s0, s16
 800ef50:	f000 f866 	bl	800f020 <fabsf>
 800ef54:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ef58:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ef5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef60:	dd0a      	ble.n	800ef78 <acosf+0x48>
 800ef62:	f7fe f823 	bl	800cfac <__errno>
 800ef66:	ecbd 8b02 	vpop	{d8}
 800ef6a:	2321      	movs	r3, #33	@ 0x21
 800ef6c:	6003      	str	r3, [r0, #0]
 800ef6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ef72:	4804      	ldr	r0, [pc, #16]	@ (800ef84 <acosf+0x54>)
 800ef74:	f000 b866 	b.w	800f044 <nanf>
 800ef78:	eeb0 0a68 	vmov.f32	s0, s17
 800ef7c:	ecbd 8b02 	vpop	{d8}
 800ef80:	bd08      	pop	{r3, pc}
 800ef82:	bf00      	nop
 800ef84:	08011755 	.word	0x08011755

0800ef88 <asinf>:
 800ef88:	b508      	push	{r3, lr}
 800ef8a:	ed2d 8b02 	vpush	{d8}
 800ef8e:	eeb0 8a40 	vmov.f32	s16, s0
 800ef92:	f001 fb9d 	bl	80106d0 <__ieee754_asinf>
 800ef96:	eeb4 8a48 	vcmp.f32	s16, s16
 800ef9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef9e:	eef0 8a40 	vmov.f32	s17, s0
 800efa2:	d615      	bvs.n	800efd0 <asinf+0x48>
 800efa4:	eeb0 0a48 	vmov.f32	s0, s16
 800efa8:	f000 f83a 	bl	800f020 <fabsf>
 800efac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800efb0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800efb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efb8:	dd0a      	ble.n	800efd0 <asinf+0x48>
 800efba:	f7fd fff7 	bl	800cfac <__errno>
 800efbe:	ecbd 8b02 	vpop	{d8}
 800efc2:	2321      	movs	r3, #33	@ 0x21
 800efc4:	6003      	str	r3, [r0, #0]
 800efc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800efca:	4804      	ldr	r0, [pc, #16]	@ (800efdc <asinf+0x54>)
 800efcc:	f000 b83a 	b.w	800f044 <nanf>
 800efd0:	eeb0 0a68 	vmov.f32	s0, s17
 800efd4:	ecbd 8b02 	vpop	{d8}
 800efd8:	bd08      	pop	{r3, pc}
 800efda:	bf00      	nop
 800efdc:	08011755 	.word	0x08011755

0800efe0 <atan2f>:
 800efe0:	f001 bc5c 	b.w	801089c <__ieee754_atan2f>

0800efe4 <sqrtf>:
 800efe4:	b508      	push	{r3, lr}
 800efe6:	ed2d 8b02 	vpush	{d8}
 800efea:	eeb0 8a40 	vmov.f32	s16, s0
 800efee:	f000 f95f 	bl	800f2b0 <__ieee754_sqrtf>
 800eff2:	eeb4 8a48 	vcmp.f32	s16, s16
 800eff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800effa:	d60c      	bvs.n	800f016 <sqrtf+0x32>
 800effc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f01c <sqrtf+0x38>
 800f000:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f008:	d505      	bpl.n	800f016 <sqrtf+0x32>
 800f00a:	f7fd ffcf 	bl	800cfac <__errno>
 800f00e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f012:	2321      	movs	r3, #33	@ 0x21
 800f014:	6003      	str	r3, [r0, #0]
 800f016:	ecbd 8b02 	vpop	{d8}
 800f01a:	bd08      	pop	{r3, pc}
 800f01c:	00000000 	.word	0x00000000

0800f020 <fabsf>:
 800f020:	ee10 3a10 	vmov	r3, s0
 800f024:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f028:	ee00 3a10 	vmov	s0, r3
 800f02c:	4770      	bx	lr

0800f02e <finite>:
 800f02e:	b082      	sub	sp, #8
 800f030:	ed8d 0b00 	vstr	d0, [sp]
 800f034:	9801      	ldr	r0, [sp, #4]
 800f036:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f03a:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f03e:	0fc0      	lsrs	r0, r0, #31
 800f040:	b002      	add	sp, #8
 800f042:	4770      	bx	lr

0800f044 <nanf>:
 800f044:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f04c <nanf+0x8>
 800f048:	4770      	bx	lr
 800f04a:	bf00      	nop
 800f04c:	7fc00000 	.word	0x7fc00000

0800f050 <fmaxf>:
 800f050:	b508      	push	{r3, lr}
 800f052:	ed2d 8b02 	vpush	{d8}
 800f056:	eeb0 8a40 	vmov.f32	s16, s0
 800f05a:	eef0 8a60 	vmov.f32	s17, s1
 800f05e:	f000 f831 	bl	800f0c4 <__fpclassifyf>
 800f062:	b930      	cbnz	r0, 800f072 <fmaxf+0x22>
 800f064:	eeb0 8a68 	vmov.f32	s16, s17
 800f068:	eeb0 0a48 	vmov.f32	s0, s16
 800f06c:	ecbd 8b02 	vpop	{d8}
 800f070:	bd08      	pop	{r3, pc}
 800f072:	eeb0 0a68 	vmov.f32	s0, s17
 800f076:	f000 f825 	bl	800f0c4 <__fpclassifyf>
 800f07a:	2800      	cmp	r0, #0
 800f07c:	d0f4      	beq.n	800f068 <fmaxf+0x18>
 800f07e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f086:	dded      	ble.n	800f064 <fmaxf+0x14>
 800f088:	e7ee      	b.n	800f068 <fmaxf+0x18>

0800f08a <fminf>:
 800f08a:	b508      	push	{r3, lr}
 800f08c:	ed2d 8b02 	vpush	{d8}
 800f090:	eeb0 8a40 	vmov.f32	s16, s0
 800f094:	eef0 8a60 	vmov.f32	s17, s1
 800f098:	f000 f814 	bl	800f0c4 <__fpclassifyf>
 800f09c:	b930      	cbnz	r0, 800f0ac <fminf+0x22>
 800f09e:	eeb0 8a68 	vmov.f32	s16, s17
 800f0a2:	eeb0 0a48 	vmov.f32	s0, s16
 800f0a6:	ecbd 8b02 	vpop	{d8}
 800f0aa:	bd08      	pop	{r3, pc}
 800f0ac:	eeb0 0a68 	vmov.f32	s0, s17
 800f0b0:	f000 f808 	bl	800f0c4 <__fpclassifyf>
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	d0f4      	beq.n	800f0a2 <fminf+0x18>
 800f0b8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0c0:	d5ed      	bpl.n	800f09e <fminf+0x14>
 800f0c2:	e7ee      	b.n	800f0a2 <fminf+0x18>

0800f0c4 <__fpclassifyf>:
 800f0c4:	ee10 3a10 	vmov	r3, s0
 800f0c8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800f0cc:	d00d      	beq.n	800f0ea <__fpclassifyf+0x26>
 800f0ce:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800f0d2:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800f0d6:	d30a      	bcc.n	800f0ee <__fpclassifyf+0x2a>
 800f0d8:	4b07      	ldr	r3, [pc, #28]	@ (800f0f8 <__fpclassifyf+0x34>)
 800f0da:	1e42      	subs	r2, r0, #1
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d908      	bls.n	800f0f2 <__fpclassifyf+0x2e>
 800f0e0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800f0e4:	4258      	negs	r0, r3
 800f0e6:	4158      	adcs	r0, r3
 800f0e8:	4770      	bx	lr
 800f0ea:	2002      	movs	r0, #2
 800f0ec:	4770      	bx	lr
 800f0ee:	2004      	movs	r0, #4
 800f0f0:	4770      	bx	lr
 800f0f2:	2003      	movs	r0, #3
 800f0f4:	4770      	bx	lr
 800f0f6:	bf00      	nop
 800f0f8:	007ffffe 	.word	0x007ffffe

0800f0fc <__ieee754_sqrt>:
 800f0fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f100:	4a68      	ldr	r2, [pc, #416]	@ (800f2a4 <__ieee754_sqrt+0x1a8>)
 800f102:	ec55 4b10 	vmov	r4, r5, d0
 800f106:	43aa      	bics	r2, r5
 800f108:	462b      	mov	r3, r5
 800f10a:	4621      	mov	r1, r4
 800f10c:	d110      	bne.n	800f130 <__ieee754_sqrt+0x34>
 800f10e:	4622      	mov	r2, r4
 800f110:	4620      	mov	r0, r4
 800f112:	4629      	mov	r1, r5
 800f114:	f7f1 fa90 	bl	8000638 <__aeabi_dmul>
 800f118:	4602      	mov	r2, r0
 800f11a:	460b      	mov	r3, r1
 800f11c:	4620      	mov	r0, r4
 800f11e:	4629      	mov	r1, r5
 800f120:	f7f1 f8d4 	bl	80002cc <__adddf3>
 800f124:	4604      	mov	r4, r0
 800f126:	460d      	mov	r5, r1
 800f128:	ec45 4b10 	vmov	d0, r4, r5
 800f12c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f130:	2d00      	cmp	r5, #0
 800f132:	dc0e      	bgt.n	800f152 <__ieee754_sqrt+0x56>
 800f134:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f138:	4322      	orrs	r2, r4
 800f13a:	d0f5      	beq.n	800f128 <__ieee754_sqrt+0x2c>
 800f13c:	b19d      	cbz	r5, 800f166 <__ieee754_sqrt+0x6a>
 800f13e:	4622      	mov	r2, r4
 800f140:	4620      	mov	r0, r4
 800f142:	4629      	mov	r1, r5
 800f144:	f7f1 f8c0 	bl	80002c8 <__aeabi_dsub>
 800f148:	4602      	mov	r2, r0
 800f14a:	460b      	mov	r3, r1
 800f14c:	f7f1 fb9e 	bl	800088c <__aeabi_ddiv>
 800f150:	e7e8      	b.n	800f124 <__ieee754_sqrt+0x28>
 800f152:	152a      	asrs	r2, r5, #20
 800f154:	d115      	bne.n	800f182 <__ieee754_sqrt+0x86>
 800f156:	2000      	movs	r0, #0
 800f158:	e009      	b.n	800f16e <__ieee754_sqrt+0x72>
 800f15a:	0acb      	lsrs	r3, r1, #11
 800f15c:	3a15      	subs	r2, #21
 800f15e:	0549      	lsls	r1, r1, #21
 800f160:	2b00      	cmp	r3, #0
 800f162:	d0fa      	beq.n	800f15a <__ieee754_sqrt+0x5e>
 800f164:	e7f7      	b.n	800f156 <__ieee754_sqrt+0x5a>
 800f166:	462a      	mov	r2, r5
 800f168:	e7fa      	b.n	800f160 <__ieee754_sqrt+0x64>
 800f16a:	005b      	lsls	r3, r3, #1
 800f16c:	3001      	adds	r0, #1
 800f16e:	02dc      	lsls	r4, r3, #11
 800f170:	d5fb      	bpl.n	800f16a <__ieee754_sqrt+0x6e>
 800f172:	1e44      	subs	r4, r0, #1
 800f174:	1b12      	subs	r2, r2, r4
 800f176:	f1c0 0420 	rsb	r4, r0, #32
 800f17a:	fa21 f404 	lsr.w	r4, r1, r4
 800f17e:	4323      	orrs	r3, r4
 800f180:	4081      	lsls	r1, r0
 800f182:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f186:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800f18a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f18e:	07d2      	lsls	r2, r2, #31
 800f190:	bf5c      	itt	pl
 800f192:	005b      	lslpl	r3, r3, #1
 800f194:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f198:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f19c:	bf58      	it	pl
 800f19e:	0049      	lslpl	r1, r1, #1
 800f1a0:	2600      	movs	r6, #0
 800f1a2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f1a6:	106d      	asrs	r5, r5, #1
 800f1a8:	0049      	lsls	r1, r1, #1
 800f1aa:	2016      	movs	r0, #22
 800f1ac:	4632      	mov	r2, r6
 800f1ae:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f1b2:	1917      	adds	r7, r2, r4
 800f1b4:	429f      	cmp	r7, r3
 800f1b6:	bfde      	ittt	le
 800f1b8:	193a      	addle	r2, r7, r4
 800f1ba:	1bdb      	suble	r3, r3, r7
 800f1bc:	1936      	addle	r6, r6, r4
 800f1be:	0fcf      	lsrs	r7, r1, #31
 800f1c0:	3801      	subs	r0, #1
 800f1c2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f1c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f1ca:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f1ce:	d1f0      	bne.n	800f1b2 <__ieee754_sqrt+0xb6>
 800f1d0:	4604      	mov	r4, r0
 800f1d2:	2720      	movs	r7, #32
 800f1d4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	eb00 0e0c 	add.w	lr, r0, ip
 800f1de:	db02      	blt.n	800f1e6 <__ieee754_sqrt+0xea>
 800f1e0:	d113      	bne.n	800f20a <__ieee754_sqrt+0x10e>
 800f1e2:	458e      	cmp	lr, r1
 800f1e4:	d811      	bhi.n	800f20a <__ieee754_sqrt+0x10e>
 800f1e6:	f1be 0f00 	cmp.w	lr, #0
 800f1ea:	eb0e 000c 	add.w	r0, lr, ip
 800f1ee:	da42      	bge.n	800f276 <__ieee754_sqrt+0x17a>
 800f1f0:	2800      	cmp	r0, #0
 800f1f2:	db40      	blt.n	800f276 <__ieee754_sqrt+0x17a>
 800f1f4:	f102 0801 	add.w	r8, r2, #1
 800f1f8:	1a9b      	subs	r3, r3, r2
 800f1fa:	458e      	cmp	lr, r1
 800f1fc:	bf88      	it	hi
 800f1fe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f202:	eba1 010e 	sub.w	r1, r1, lr
 800f206:	4464      	add	r4, ip
 800f208:	4642      	mov	r2, r8
 800f20a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f20e:	3f01      	subs	r7, #1
 800f210:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f214:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f218:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f21c:	d1dc      	bne.n	800f1d8 <__ieee754_sqrt+0xdc>
 800f21e:	4319      	orrs	r1, r3
 800f220:	d01b      	beq.n	800f25a <__ieee754_sqrt+0x15e>
 800f222:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800f2a8 <__ieee754_sqrt+0x1ac>
 800f226:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f2ac <__ieee754_sqrt+0x1b0>
 800f22a:	e9da 0100 	ldrd	r0, r1, [sl]
 800f22e:	e9db 2300 	ldrd	r2, r3, [fp]
 800f232:	f7f1 f849 	bl	80002c8 <__aeabi_dsub>
 800f236:	e9da 8900 	ldrd	r8, r9, [sl]
 800f23a:	4602      	mov	r2, r0
 800f23c:	460b      	mov	r3, r1
 800f23e:	4640      	mov	r0, r8
 800f240:	4649      	mov	r1, r9
 800f242:	f7f1 fc75 	bl	8000b30 <__aeabi_dcmple>
 800f246:	b140      	cbz	r0, 800f25a <__ieee754_sqrt+0x15e>
 800f248:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f24c:	e9da 0100 	ldrd	r0, r1, [sl]
 800f250:	e9db 2300 	ldrd	r2, r3, [fp]
 800f254:	d111      	bne.n	800f27a <__ieee754_sqrt+0x17e>
 800f256:	3601      	adds	r6, #1
 800f258:	463c      	mov	r4, r7
 800f25a:	1072      	asrs	r2, r6, #1
 800f25c:	0863      	lsrs	r3, r4, #1
 800f25e:	07f1      	lsls	r1, r6, #31
 800f260:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f264:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f268:	bf48      	it	mi
 800f26a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f26e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f272:	4618      	mov	r0, r3
 800f274:	e756      	b.n	800f124 <__ieee754_sqrt+0x28>
 800f276:	4690      	mov	r8, r2
 800f278:	e7be      	b.n	800f1f8 <__ieee754_sqrt+0xfc>
 800f27a:	f7f1 f827 	bl	80002cc <__adddf3>
 800f27e:	e9da 8900 	ldrd	r8, r9, [sl]
 800f282:	4602      	mov	r2, r0
 800f284:	460b      	mov	r3, r1
 800f286:	4640      	mov	r0, r8
 800f288:	4649      	mov	r1, r9
 800f28a:	f7f1 fc47 	bl	8000b1c <__aeabi_dcmplt>
 800f28e:	b120      	cbz	r0, 800f29a <__ieee754_sqrt+0x19e>
 800f290:	1ca0      	adds	r0, r4, #2
 800f292:	bf08      	it	eq
 800f294:	3601      	addeq	r6, #1
 800f296:	3402      	adds	r4, #2
 800f298:	e7df      	b.n	800f25a <__ieee754_sqrt+0x15e>
 800f29a:	1c63      	adds	r3, r4, #1
 800f29c:	f023 0401 	bic.w	r4, r3, #1
 800f2a0:	e7db      	b.n	800f25a <__ieee754_sqrt+0x15e>
 800f2a2:	bf00      	nop
 800f2a4:	7ff00000 	.word	0x7ff00000
 800f2a8:	20000220 	.word	0x20000220
 800f2ac:	20000218 	.word	0x20000218

0800f2b0 <__ieee754_sqrtf>:
 800f2b0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f2b4:	4770      	bx	lr
	...

0800f2b8 <round>:
 800f2b8:	ec51 0b10 	vmov	r0, r1, d0
 800f2bc:	b570      	push	{r4, r5, r6, lr}
 800f2be:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f2c2:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800f2c6:	2a13      	cmp	r2, #19
 800f2c8:	460b      	mov	r3, r1
 800f2ca:	4605      	mov	r5, r0
 800f2cc:	dc1b      	bgt.n	800f306 <round+0x4e>
 800f2ce:	2a00      	cmp	r2, #0
 800f2d0:	da0b      	bge.n	800f2ea <round+0x32>
 800f2d2:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800f2d6:	3201      	adds	r2, #1
 800f2d8:	bf04      	itt	eq
 800f2da:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800f2de:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	4610      	mov	r0, r2
 800f2e8:	e015      	b.n	800f316 <round+0x5e>
 800f2ea:	4c15      	ldr	r4, [pc, #84]	@ (800f340 <round+0x88>)
 800f2ec:	4114      	asrs	r4, r2
 800f2ee:	ea04 0601 	and.w	r6, r4, r1
 800f2f2:	4306      	orrs	r6, r0
 800f2f4:	d00f      	beq.n	800f316 <round+0x5e>
 800f2f6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800f2fa:	fa41 f202 	asr.w	r2, r1, r2
 800f2fe:	4413      	add	r3, r2
 800f300:	ea23 0304 	bic.w	r3, r3, r4
 800f304:	e7ed      	b.n	800f2e2 <round+0x2a>
 800f306:	2a33      	cmp	r2, #51	@ 0x33
 800f308:	dd08      	ble.n	800f31c <round+0x64>
 800f30a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800f30e:	d102      	bne.n	800f316 <round+0x5e>
 800f310:	4602      	mov	r2, r0
 800f312:	f7f0 ffdb 	bl	80002cc <__adddf3>
 800f316:	ec41 0b10 	vmov	d0, r0, r1
 800f31a:	bd70      	pop	{r4, r5, r6, pc}
 800f31c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800f320:	f04f 34ff 	mov.w	r4, #4294967295
 800f324:	40f4      	lsrs	r4, r6
 800f326:	4204      	tst	r4, r0
 800f328:	d0f5      	beq.n	800f316 <round+0x5e>
 800f32a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800f32e:	2201      	movs	r2, #1
 800f330:	408a      	lsls	r2, r1
 800f332:	1952      	adds	r2, r2, r5
 800f334:	bf28      	it	cs
 800f336:	3301      	addcs	r3, #1
 800f338:	ea22 0204 	bic.w	r2, r2, r4
 800f33c:	e7d2      	b.n	800f2e4 <round+0x2c>
 800f33e:	bf00      	nop
 800f340:	000fffff 	.word	0x000fffff
 800f344:	00000000 	.word	0x00000000

0800f348 <__kernel_cos>:
 800f348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f34c:	ec57 6b10 	vmov	r6, r7, d0
 800f350:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f354:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800f358:	ed8d 1b00 	vstr	d1, [sp]
 800f35c:	d206      	bcs.n	800f36c <__kernel_cos+0x24>
 800f35e:	4630      	mov	r0, r6
 800f360:	4639      	mov	r1, r7
 800f362:	f7f1 fc19 	bl	8000b98 <__aeabi_d2iz>
 800f366:	2800      	cmp	r0, #0
 800f368:	f000 8088 	beq.w	800f47c <__kernel_cos+0x134>
 800f36c:	4632      	mov	r2, r6
 800f36e:	463b      	mov	r3, r7
 800f370:	4630      	mov	r0, r6
 800f372:	4639      	mov	r1, r7
 800f374:	f7f1 f960 	bl	8000638 <__aeabi_dmul>
 800f378:	4b51      	ldr	r3, [pc, #324]	@ (800f4c0 <__kernel_cos+0x178>)
 800f37a:	2200      	movs	r2, #0
 800f37c:	4604      	mov	r4, r0
 800f37e:	460d      	mov	r5, r1
 800f380:	f7f1 f95a 	bl	8000638 <__aeabi_dmul>
 800f384:	a340      	add	r3, pc, #256	@ (adr r3, 800f488 <__kernel_cos+0x140>)
 800f386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f38a:	4682      	mov	sl, r0
 800f38c:	468b      	mov	fp, r1
 800f38e:	4620      	mov	r0, r4
 800f390:	4629      	mov	r1, r5
 800f392:	f7f1 f951 	bl	8000638 <__aeabi_dmul>
 800f396:	a33e      	add	r3, pc, #248	@ (adr r3, 800f490 <__kernel_cos+0x148>)
 800f398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39c:	f7f0 ff96 	bl	80002cc <__adddf3>
 800f3a0:	4622      	mov	r2, r4
 800f3a2:	462b      	mov	r3, r5
 800f3a4:	f7f1 f948 	bl	8000638 <__aeabi_dmul>
 800f3a8:	a33b      	add	r3, pc, #236	@ (adr r3, 800f498 <__kernel_cos+0x150>)
 800f3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ae:	f7f0 ff8b 	bl	80002c8 <__aeabi_dsub>
 800f3b2:	4622      	mov	r2, r4
 800f3b4:	462b      	mov	r3, r5
 800f3b6:	f7f1 f93f 	bl	8000638 <__aeabi_dmul>
 800f3ba:	a339      	add	r3, pc, #228	@ (adr r3, 800f4a0 <__kernel_cos+0x158>)
 800f3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c0:	f7f0 ff84 	bl	80002cc <__adddf3>
 800f3c4:	4622      	mov	r2, r4
 800f3c6:	462b      	mov	r3, r5
 800f3c8:	f7f1 f936 	bl	8000638 <__aeabi_dmul>
 800f3cc:	a336      	add	r3, pc, #216	@ (adr r3, 800f4a8 <__kernel_cos+0x160>)
 800f3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d2:	f7f0 ff79 	bl	80002c8 <__aeabi_dsub>
 800f3d6:	4622      	mov	r2, r4
 800f3d8:	462b      	mov	r3, r5
 800f3da:	f7f1 f92d 	bl	8000638 <__aeabi_dmul>
 800f3de:	a334      	add	r3, pc, #208	@ (adr r3, 800f4b0 <__kernel_cos+0x168>)
 800f3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e4:	f7f0 ff72 	bl	80002cc <__adddf3>
 800f3e8:	4622      	mov	r2, r4
 800f3ea:	462b      	mov	r3, r5
 800f3ec:	f7f1 f924 	bl	8000638 <__aeabi_dmul>
 800f3f0:	4622      	mov	r2, r4
 800f3f2:	462b      	mov	r3, r5
 800f3f4:	f7f1 f920 	bl	8000638 <__aeabi_dmul>
 800f3f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3fc:	4604      	mov	r4, r0
 800f3fe:	460d      	mov	r5, r1
 800f400:	4630      	mov	r0, r6
 800f402:	4639      	mov	r1, r7
 800f404:	f7f1 f918 	bl	8000638 <__aeabi_dmul>
 800f408:	460b      	mov	r3, r1
 800f40a:	4602      	mov	r2, r0
 800f40c:	4629      	mov	r1, r5
 800f40e:	4620      	mov	r0, r4
 800f410:	f7f0 ff5a 	bl	80002c8 <__aeabi_dsub>
 800f414:	4b2b      	ldr	r3, [pc, #172]	@ (800f4c4 <__kernel_cos+0x17c>)
 800f416:	4598      	cmp	r8, r3
 800f418:	4606      	mov	r6, r0
 800f41a:	460f      	mov	r7, r1
 800f41c:	d810      	bhi.n	800f440 <__kernel_cos+0xf8>
 800f41e:	4602      	mov	r2, r0
 800f420:	460b      	mov	r3, r1
 800f422:	4650      	mov	r0, sl
 800f424:	4659      	mov	r1, fp
 800f426:	f7f0 ff4f 	bl	80002c8 <__aeabi_dsub>
 800f42a:	460b      	mov	r3, r1
 800f42c:	4926      	ldr	r1, [pc, #152]	@ (800f4c8 <__kernel_cos+0x180>)
 800f42e:	4602      	mov	r2, r0
 800f430:	2000      	movs	r0, #0
 800f432:	f7f0 ff49 	bl	80002c8 <__aeabi_dsub>
 800f436:	ec41 0b10 	vmov	d0, r0, r1
 800f43a:	b003      	add	sp, #12
 800f43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f440:	4b22      	ldr	r3, [pc, #136]	@ (800f4cc <__kernel_cos+0x184>)
 800f442:	4921      	ldr	r1, [pc, #132]	@ (800f4c8 <__kernel_cos+0x180>)
 800f444:	4598      	cmp	r8, r3
 800f446:	bf8c      	ite	hi
 800f448:	4d21      	ldrhi	r5, [pc, #132]	@ (800f4d0 <__kernel_cos+0x188>)
 800f44a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800f44e:	2400      	movs	r4, #0
 800f450:	4622      	mov	r2, r4
 800f452:	462b      	mov	r3, r5
 800f454:	2000      	movs	r0, #0
 800f456:	f7f0 ff37 	bl	80002c8 <__aeabi_dsub>
 800f45a:	4622      	mov	r2, r4
 800f45c:	4680      	mov	r8, r0
 800f45e:	4689      	mov	r9, r1
 800f460:	462b      	mov	r3, r5
 800f462:	4650      	mov	r0, sl
 800f464:	4659      	mov	r1, fp
 800f466:	f7f0 ff2f 	bl	80002c8 <__aeabi_dsub>
 800f46a:	4632      	mov	r2, r6
 800f46c:	463b      	mov	r3, r7
 800f46e:	f7f0 ff2b 	bl	80002c8 <__aeabi_dsub>
 800f472:	4602      	mov	r2, r0
 800f474:	460b      	mov	r3, r1
 800f476:	4640      	mov	r0, r8
 800f478:	4649      	mov	r1, r9
 800f47a:	e7da      	b.n	800f432 <__kernel_cos+0xea>
 800f47c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800f4b8 <__kernel_cos+0x170>
 800f480:	e7db      	b.n	800f43a <__kernel_cos+0xf2>
 800f482:	bf00      	nop
 800f484:	f3af 8000 	nop.w
 800f488:	be8838d4 	.word	0xbe8838d4
 800f48c:	bda8fae9 	.word	0xbda8fae9
 800f490:	bdb4b1c4 	.word	0xbdb4b1c4
 800f494:	3e21ee9e 	.word	0x3e21ee9e
 800f498:	809c52ad 	.word	0x809c52ad
 800f49c:	3e927e4f 	.word	0x3e927e4f
 800f4a0:	19cb1590 	.word	0x19cb1590
 800f4a4:	3efa01a0 	.word	0x3efa01a0
 800f4a8:	16c15177 	.word	0x16c15177
 800f4ac:	3f56c16c 	.word	0x3f56c16c
 800f4b0:	5555554c 	.word	0x5555554c
 800f4b4:	3fa55555 	.word	0x3fa55555
 800f4b8:	00000000 	.word	0x00000000
 800f4bc:	3ff00000 	.word	0x3ff00000
 800f4c0:	3fe00000 	.word	0x3fe00000
 800f4c4:	3fd33332 	.word	0x3fd33332
 800f4c8:	3ff00000 	.word	0x3ff00000
 800f4cc:	3fe90000 	.word	0x3fe90000
 800f4d0:	3fd20000 	.word	0x3fd20000
 800f4d4:	00000000 	.word	0x00000000

0800f4d8 <__kernel_sin>:
 800f4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4dc:	ec55 4b10 	vmov	r4, r5, d0
 800f4e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f4e4:	b085      	sub	sp, #20
 800f4e6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800f4ea:	ed8d 1b02 	vstr	d1, [sp, #8]
 800f4ee:	4680      	mov	r8, r0
 800f4f0:	d205      	bcs.n	800f4fe <__kernel_sin+0x26>
 800f4f2:	4620      	mov	r0, r4
 800f4f4:	4629      	mov	r1, r5
 800f4f6:	f7f1 fb4f 	bl	8000b98 <__aeabi_d2iz>
 800f4fa:	2800      	cmp	r0, #0
 800f4fc:	d052      	beq.n	800f5a4 <__kernel_sin+0xcc>
 800f4fe:	4622      	mov	r2, r4
 800f500:	462b      	mov	r3, r5
 800f502:	4620      	mov	r0, r4
 800f504:	4629      	mov	r1, r5
 800f506:	f7f1 f897 	bl	8000638 <__aeabi_dmul>
 800f50a:	4682      	mov	sl, r0
 800f50c:	468b      	mov	fp, r1
 800f50e:	4602      	mov	r2, r0
 800f510:	460b      	mov	r3, r1
 800f512:	4620      	mov	r0, r4
 800f514:	4629      	mov	r1, r5
 800f516:	f7f1 f88f 	bl	8000638 <__aeabi_dmul>
 800f51a:	a342      	add	r3, pc, #264	@ (adr r3, 800f624 <__kernel_sin+0x14c>)
 800f51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f520:	e9cd 0100 	strd	r0, r1, [sp]
 800f524:	4650      	mov	r0, sl
 800f526:	4659      	mov	r1, fp
 800f528:	f7f1 f886 	bl	8000638 <__aeabi_dmul>
 800f52c:	a33f      	add	r3, pc, #252	@ (adr r3, 800f62c <__kernel_sin+0x154>)
 800f52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f532:	f7f0 fec9 	bl	80002c8 <__aeabi_dsub>
 800f536:	4652      	mov	r2, sl
 800f538:	465b      	mov	r3, fp
 800f53a:	f7f1 f87d 	bl	8000638 <__aeabi_dmul>
 800f53e:	a33d      	add	r3, pc, #244	@ (adr r3, 800f634 <__kernel_sin+0x15c>)
 800f540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f544:	f7f0 fec2 	bl	80002cc <__adddf3>
 800f548:	4652      	mov	r2, sl
 800f54a:	465b      	mov	r3, fp
 800f54c:	f7f1 f874 	bl	8000638 <__aeabi_dmul>
 800f550:	a33a      	add	r3, pc, #232	@ (adr r3, 800f63c <__kernel_sin+0x164>)
 800f552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f556:	f7f0 feb7 	bl	80002c8 <__aeabi_dsub>
 800f55a:	4652      	mov	r2, sl
 800f55c:	465b      	mov	r3, fp
 800f55e:	f7f1 f86b 	bl	8000638 <__aeabi_dmul>
 800f562:	a338      	add	r3, pc, #224	@ (adr r3, 800f644 <__kernel_sin+0x16c>)
 800f564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f568:	f7f0 feb0 	bl	80002cc <__adddf3>
 800f56c:	4606      	mov	r6, r0
 800f56e:	460f      	mov	r7, r1
 800f570:	f1b8 0f00 	cmp.w	r8, #0
 800f574:	d11b      	bne.n	800f5ae <__kernel_sin+0xd6>
 800f576:	4602      	mov	r2, r0
 800f578:	460b      	mov	r3, r1
 800f57a:	4650      	mov	r0, sl
 800f57c:	4659      	mov	r1, fp
 800f57e:	f7f1 f85b 	bl	8000638 <__aeabi_dmul>
 800f582:	a325      	add	r3, pc, #148	@ (adr r3, 800f618 <__kernel_sin+0x140>)
 800f584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f588:	f7f0 fe9e 	bl	80002c8 <__aeabi_dsub>
 800f58c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f590:	f7f1 f852 	bl	8000638 <__aeabi_dmul>
 800f594:	4602      	mov	r2, r0
 800f596:	460b      	mov	r3, r1
 800f598:	4620      	mov	r0, r4
 800f59a:	4629      	mov	r1, r5
 800f59c:	f7f0 fe96 	bl	80002cc <__adddf3>
 800f5a0:	4604      	mov	r4, r0
 800f5a2:	460d      	mov	r5, r1
 800f5a4:	ec45 4b10 	vmov	d0, r4, r5
 800f5a8:	b005      	add	sp, #20
 800f5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5b2:	4b1b      	ldr	r3, [pc, #108]	@ (800f620 <__kernel_sin+0x148>)
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	f7f1 f83f 	bl	8000638 <__aeabi_dmul>
 800f5ba:	4632      	mov	r2, r6
 800f5bc:	4680      	mov	r8, r0
 800f5be:	4689      	mov	r9, r1
 800f5c0:	463b      	mov	r3, r7
 800f5c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5c6:	f7f1 f837 	bl	8000638 <__aeabi_dmul>
 800f5ca:	4602      	mov	r2, r0
 800f5cc:	460b      	mov	r3, r1
 800f5ce:	4640      	mov	r0, r8
 800f5d0:	4649      	mov	r1, r9
 800f5d2:	f7f0 fe79 	bl	80002c8 <__aeabi_dsub>
 800f5d6:	4652      	mov	r2, sl
 800f5d8:	465b      	mov	r3, fp
 800f5da:	f7f1 f82d 	bl	8000638 <__aeabi_dmul>
 800f5de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f5e2:	f7f0 fe71 	bl	80002c8 <__aeabi_dsub>
 800f5e6:	a30c      	add	r3, pc, #48	@ (adr r3, 800f618 <__kernel_sin+0x140>)
 800f5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ec:	4606      	mov	r6, r0
 800f5ee:	460f      	mov	r7, r1
 800f5f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5f4:	f7f1 f820 	bl	8000638 <__aeabi_dmul>
 800f5f8:	4602      	mov	r2, r0
 800f5fa:	460b      	mov	r3, r1
 800f5fc:	4630      	mov	r0, r6
 800f5fe:	4639      	mov	r1, r7
 800f600:	f7f0 fe64 	bl	80002cc <__adddf3>
 800f604:	4602      	mov	r2, r0
 800f606:	460b      	mov	r3, r1
 800f608:	4620      	mov	r0, r4
 800f60a:	4629      	mov	r1, r5
 800f60c:	f7f0 fe5c 	bl	80002c8 <__aeabi_dsub>
 800f610:	e7c6      	b.n	800f5a0 <__kernel_sin+0xc8>
 800f612:	bf00      	nop
 800f614:	f3af 8000 	nop.w
 800f618:	55555549 	.word	0x55555549
 800f61c:	3fc55555 	.word	0x3fc55555
 800f620:	3fe00000 	.word	0x3fe00000
 800f624:	5acfd57c 	.word	0x5acfd57c
 800f628:	3de5d93a 	.word	0x3de5d93a
 800f62c:	8a2b9ceb 	.word	0x8a2b9ceb
 800f630:	3e5ae5e6 	.word	0x3e5ae5e6
 800f634:	57b1fe7d 	.word	0x57b1fe7d
 800f638:	3ec71de3 	.word	0x3ec71de3
 800f63c:	19c161d5 	.word	0x19c161d5
 800f640:	3f2a01a0 	.word	0x3f2a01a0
 800f644:	1110f8a6 	.word	0x1110f8a6
 800f648:	3f811111 	.word	0x3f811111
 800f64c:	00000000 	.word	0x00000000

0800f650 <__ieee754_pow>:
 800f650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f654:	b091      	sub	sp, #68	@ 0x44
 800f656:	ed8d 1b00 	vstr	d1, [sp]
 800f65a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800f65e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800f662:	ea5a 0001 	orrs.w	r0, sl, r1
 800f666:	ec57 6b10 	vmov	r6, r7, d0
 800f66a:	d113      	bne.n	800f694 <__ieee754_pow+0x44>
 800f66c:	19b3      	adds	r3, r6, r6
 800f66e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800f672:	4152      	adcs	r2, r2
 800f674:	4298      	cmp	r0, r3
 800f676:	4b98      	ldr	r3, [pc, #608]	@ (800f8d8 <__ieee754_pow+0x288>)
 800f678:	4193      	sbcs	r3, r2
 800f67a:	f080 84ea 	bcs.w	8010052 <__ieee754_pow+0xa02>
 800f67e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f682:	4630      	mov	r0, r6
 800f684:	4639      	mov	r1, r7
 800f686:	f7f0 fe21 	bl	80002cc <__adddf3>
 800f68a:	ec41 0b10 	vmov	d0, r0, r1
 800f68e:	b011      	add	sp, #68	@ 0x44
 800f690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f694:	4a91      	ldr	r2, [pc, #580]	@ (800f8dc <__ieee754_pow+0x28c>)
 800f696:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f69a:	4590      	cmp	r8, r2
 800f69c:	463d      	mov	r5, r7
 800f69e:	4633      	mov	r3, r6
 800f6a0:	d806      	bhi.n	800f6b0 <__ieee754_pow+0x60>
 800f6a2:	d101      	bne.n	800f6a8 <__ieee754_pow+0x58>
 800f6a4:	2e00      	cmp	r6, #0
 800f6a6:	d1ea      	bne.n	800f67e <__ieee754_pow+0x2e>
 800f6a8:	4592      	cmp	sl, r2
 800f6aa:	d801      	bhi.n	800f6b0 <__ieee754_pow+0x60>
 800f6ac:	d10e      	bne.n	800f6cc <__ieee754_pow+0x7c>
 800f6ae:	b169      	cbz	r1, 800f6cc <__ieee754_pow+0x7c>
 800f6b0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800f6b4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800f6b8:	431d      	orrs	r5, r3
 800f6ba:	d1e0      	bne.n	800f67e <__ieee754_pow+0x2e>
 800f6bc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f6c0:	18db      	adds	r3, r3, r3
 800f6c2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800f6c6:	4152      	adcs	r2, r2
 800f6c8:	429d      	cmp	r5, r3
 800f6ca:	e7d4      	b.n	800f676 <__ieee754_pow+0x26>
 800f6cc:	2d00      	cmp	r5, #0
 800f6ce:	46c3      	mov	fp, r8
 800f6d0:	da3a      	bge.n	800f748 <__ieee754_pow+0xf8>
 800f6d2:	4a83      	ldr	r2, [pc, #524]	@ (800f8e0 <__ieee754_pow+0x290>)
 800f6d4:	4592      	cmp	sl, r2
 800f6d6:	d84d      	bhi.n	800f774 <__ieee754_pow+0x124>
 800f6d8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800f6dc:	4592      	cmp	sl, r2
 800f6de:	f240 84c7 	bls.w	8010070 <__ieee754_pow+0xa20>
 800f6e2:	ea4f 522a 	mov.w	r2, sl, asr #20
 800f6e6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800f6ea:	2a14      	cmp	r2, #20
 800f6ec:	dd0f      	ble.n	800f70e <__ieee754_pow+0xbe>
 800f6ee:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800f6f2:	fa21 f402 	lsr.w	r4, r1, r2
 800f6f6:	fa04 f202 	lsl.w	r2, r4, r2
 800f6fa:	428a      	cmp	r2, r1
 800f6fc:	f040 84b8 	bne.w	8010070 <__ieee754_pow+0xa20>
 800f700:	f004 0401 	and.w	r4, r4, #1
 800f704:	f1c4 0402 	rsb	r4, r4, #2
 800f708:	2900      	cmp	r1, #0
 800f70a:	d158      	bne.n	800f7be <__ieee754_pow+0x16e>
 800f70c:	e00e      	b.n	800f72c <__ieee754_pow+0xdc>
 800f70e:	2900      	cmp	r1, #0
 800f710:	d154      	bne.n	800f7bc <__ieee754_pow+0x16c>
 800f712:	f1c2 0214 	rsb	r2, r2, #20
 800f716:	fa4a f402 	asr.w	r4, sl, r2
 800f71a:	fa04 f202 	lsl.w	r2, r4, r2
 800f71e:	4552      	cmp	r2, sl
 800f720:	f040 84a3 	bne.w	801006a <__ieee754_pow+0xa1a>
 800f724:	f004 0401 	and.w	r4, r4, #1
 800f728:	f1c4 0402 	rsb	r4, r4, #2
 800f72c:	4a6d      	ldr	r2, [pc, #436]	@ (800f8e4 <__ieee754_pow+0x294>)
 800f72e:	4592      	cmp	sl, r2
 800f730:	d12e      	bne.n	800f790 <__ieee754_pow+0x140>
 800f732:	f1b9 0f00 	cmp.w	r9, #0
 800f736:	f280 8494 	bge.w	8010062 <__ieee754_pow+0xa12>
 800f73a:	496a      	ldr	r1, [pc, #424]	@ (800f8e4 <__ieee754_pow+0x294>)
 800f73c:	4632      	mov	r2, r6
 800f73e:	463b      	mov	r3, r7
 800f740:	2000      	movs	r0, #0
 800f742:	f7f1 f8a3 	bl	800088c <__aeabi_ddiv>
 800f746:	e7a0      	b.n	800f68a <__ieee754_pow+0x3a>
 800f748:	2400      	movs	r4, #0
 800f74a:	bbc1      	cbnz	r1, 800f7be <__ieee754_pow+0x16e>
 800f74c:	4a63      	ldr	r2, [pc, #396]	@ (800f8dc <__ieee754_pow+0x28c>)
 800f74e:	4592      	cmp	sl, r2
 800f750:	d1ec      	bne.n	800f72c <__ieee754_pow+0xdc>
 800f752:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800f756:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800f75a:	431a      	orrs	r2, r3
 800f75c:	f000 8479 	beq.w	8010052 <__ieee754_pow+0xa02>
 800f760:	4b61      	ldr	r3, [pc, #388]	@ (800f8e8 <__ieee754_pow+0x298>)
 800f762:	4598      	cmp	r8, r3
 800f764:	d908      	bls.n	800f778 <__ieee754_pow+0x128>
 800f766:	f1b9 0f00 	cmp.w	r9, #0
 800f76a:	f2c0 8476 	blt.w	801005a <__ieee754_pow+0xa0a>
 800f76e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f772:	e78a      	b.n	800f68a <__ieee754_pow+0x3a>
 800f774:	2402      	movs	r4, #2
 800f776:	e7e8      	b.n	800f74a <__ieee754_pow+0xfa>
 800f778:	f1b9 0f00 	cmp.w	r9, #0
 800f77c:	f04f 0000 	mov.w	r0, #0
 800f780:	f04f 0100 	mov.w	r1, #0
 800f784:	da81      	bge.n	800f68a <__ieee754_pow+0x3a>
 800f786:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f78a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f78e:	e77c      	b.n	800f68a <__ieee754_pow+0x3a>
 800f790:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800f794:	d106      	bne.n	800f7a4 <__ieee754_pow+0x154>
 800f796:	4632      	mov	r2, r6
 800f798:	463b      	mov	r3, r7
 800f79a:	4630      	mov	r0, r6
 800f79c:	4639      	mov	r1, r7
 800f79e:	f7f0 ff4b 	bl	8000638 <__aeabi_dmul>
 800f7a2:	e772      	b.n	800f68a <__ieee754_pow+0x3a>
 800f7a4:	4a51      	ldr	r2, [pc, #324]	@ (800f8ec <__ieee754_pow+0x29c>)
 800f7a6:	4591      	cmp	r9, r2
 800f7a8:	d109      	bne.n	800f7be <__ieee754_pow+0x16e>
 800f7aa:	2d00      	cmp	r5, #0
 800f7ac:	db07      	blt.n	800f7be <__ieee754_pow+0x16e>
 800f7ae:	ec47 6b10 	vmov	d0, r6, r7
 800f7b2:	b011      	add	sp, #68	@ 0x44
 800f7b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b8:	f7ff bca0 	b.w	800f0fc <__ieee754_sqrt>
 800f7bc:	2400      	movs	r4, #0
 800f7be:	ec47 6b10 	vmov	d0, r6, r7
 800f7c2:	9302      	str	r3, [sp, #8]
 800f7c4:	f000 fe84 	bl	80104d0 <fabs>
 800f7c8:	9b02      	ldr	r3, [sp, #8]
 800f7ca:	ec51 0b10 	vmov	r0, r1, d0
 800f7ce:	bb53      	cbnz	r3, 800f826 <__ieee754_pow+0x1d6>
 800f7d0:	4b44      	ldr	r3, [pc, #272]	@ (800f8e4 <__ieee754_pow+0x294>)
 800f7d2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800f7d6:	429a      	cmp	r2, r3
 800f7d8:	d002      	beq.n	800f7e0 <__ieee754_pow+0x190>
 800f7da:	f1b8 0f00 	cmp.w	r8, #0
 800f7de:	d122      	bne.n	800f826 <__ieee754_pow+0x1d6>
 800f7e0:	f1b9 0f00 	cmp.w	r9, #0
 800f7e4:	da05      	bge.n	800f7f2 <__ieee754_pow+0x1a2>
 800f7e6:	4602      	mov	r2, r0
 800f7e8:	460b      	mov	r3, r1
 800f7ea:	2000      	movs	r0, #0
 800f7ec:	493d      	ldr	r1, [pc, #244]	@ (800f8e4 <__ieee754_pow+0x294>)
 800f7ee:	f7f1 f84d 	bl	800088c <__aeabi_ddiv>
 800f7f2:	2d00      	cmp	r5, #0
 800f7f4:	f6bf af49 	bge.w	800f68a <__ieee754_pow+0x3a>
 800f7f8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800f7fc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800f800:	ea58 0804 	orrs.w	r8, r8, r4
 800f804:	d108      	bne.n	800f818 <__ieee754_pow+0x1c8>
 800f806:	4602      	mov	r2, r0
 800f808:	460b      	mov	r3, r1
 800f80a:	4610      	mov	r0, r2
 800f80c:	4619      	mov	r1, r3
 800f80e:	f7f0 fd5b 	bl	80002c8 <__aeabi_dsub>
 800f812:	4602      	mov	r2, r0
 800f814:	460b      	mov	r3, r1
 800f816:	e794      	b.n	800f742 <__ieee754_pow+0xf2>
 800f818:	2c01      	cmp	r4, #1
 800f81a:	f47f af36 	bne.w	800f68a <__ieee754_pow+0x3a>
 800f81e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f822:	4619      	mov	r1, r3
 800f824:	e731      	b.n	800f68a <__ieee754_pow+0x3a>
 800f826:	0feb      	lsrs	r3, r5, #31
 800f828:	3b01      	subs	r3, #1
 800f82a:	ea53 0204 	orrs.w	r2, r3, r4
 800f82e:	d102      	bne.n	800f836 <__ieee754_pow+0x1e6>
 800f830:	4632      	mov	r2, r6
 800f832:	463b      	mov	r3, r7
 800f834:	e7e9      	b.n	800f80a <__ieee754_pow+0x1ba>
 800f836:	3c01      	subs	r4, #1
 800f838:	431c      	orrs	r4, r3
 800f83a:	d016      	beq.n	800f86a <__ieee754_pow+0x21a>
 800f83c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800f8c8 <__ieee754_pow+0x278>
 800f840:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800f844:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f848:	f240 8112 	bls.w	800fa70 <__ieee754_pow+0x420>
 800f84c:	4b28      	ldr	r3, [pc, #160]	@ (800f8f0 <__ieee754_pow+0x2a0>)
 800f84e:	459a      	cmp	sl, r3
 800f850:	4b25      	ldr	r3, [pc, #148]	@ (800f8e8 <__ieee754_pow+0x298>)
 800f852:	d916      	bls.n	800f882 <__ieee754_pow+0x232>
 800f854:	4598      	cmp	r8, r3
 800f856:	d80b      	bhi.n	800f870 <__ieee754_pow+0x220>
 800f858:	f1b9 0f00 	cmp.w	r9, #0
 800f85c:	da0b      	bge.n	800f876 <__ieee754_pow+0x226>
 800f85e:	2000      	movs	r0, #0
 800f860:	b011      	add	sp, #68	@ 0x44
 800f862:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f866:	f001 ba43 	b.w	8010cf0 <__math_oflow>
 800f86a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800f8d0 <__ieee754_pow+0x280>
 800f86e:	e7e7      	b.n	800f840 <__ieee754_pow+0x1f0>
 800f870:	f1b9 0f00 	cmp.w	r9, #0
 800f874:	dcf3      	bgt.n	800f85e <__ieee754_pow+0x20e>
 800f876:	2000      	movs	r0, #0
 800f878:	b011      	add	sp, #68	@ 0x44
 800f87a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f87e:	f001 ba2f 	b.w	8010ce0 <__math_uflow>
 800f882:	4598      	cmp	r8, r3
 800f884:	d20c      	bcs.n	800f8a0 <__ieee754_pow+0x250>
 800f886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f88a:	2200      	movs	r2, #0
 800f88c:	2300      	movs	r3, #0
 800f88e:	f7f1 f945 	bl	8000b1c <__aeabi_dcmplt>
 800f892:	3800      	subs	r0, #0
 800f894:	bf18      	it	ne
 800f896:	2001      	movne	r0, #1
 800f898:	f1b9 0f00 	cmp.w	r9, #0
 800f89c:	daec      	bge.n	800f878 <__ieee754_pow+0x228>
 800f89e:	e7df      	b.n	800f860 <__ieee754_pow+0x210>
 800f8a0:	4b10      	ldr	r3, [pc, #64]	@ (800f8e4 <__ieee754_pow+0x294>)
 800f8a2:	4598      	cmp	r8, r3
 800f8a4:	f04f 0200 	mov.w	r2, #0
 800f8a8:	d924      	bls.n	800f8f4 <__ieee754_pow+0x2a4>
 800f8aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	f7f1 f934 	bl	8000b1c <__aeabi_dcmplt>
 800f8b4:	3800      	subs	r0, #0
 800f8b6:	bf18      	it	ne
 800f8b8:	2001      	movne	r0, #1
 800f8ba:	f1b9 0f00 	cmp.w	r9, #0
 800f8be:	dccf      	bgt.n	800f860 <__ieee754_pow+0x210>
 800f8c0:	e7da      	b.n	800f878 <__ieee754_pow+0x228>
 800f8c2:	bf00      	nop
 800f8c4:	f3af 8000 	nop.w
 800f8c8:	00000000 	.word	0x00000000
 800f8cc:	3ff00000 	.word	0x3ff00000
 800f8d0:	00000000 	.word	0x00000000
 800f8d4:	bff00000 	.word	0xbff00000
 800f8d8:	fff00000 	.word	0xfff00000
 800f8dc:	7ff00000 	.word	0x7ff00000
 800f8e0:	433fffff 	.word	0x433fffff
 800f8e4:	3ff00000 	.word	0x3ff00000
 800f8e8:	3fefffff 	.word	0x3fefffff
 800f8ec:	3fe00000 	.word	0x3fe00000
 800f8f0:	43f00000 	.word	0x43f00000
 800f8f4:	4b5a      	ldr	r3, [pc, #360]	@ (800fa60 <__ieee754_pow+0x410>)
 800f8f6:	f7f0 fce7 	bl	80002c8 <__aeabi_dsub>
 800f8fa:	a351      	add	r3, pc, #324	@ (adr r3, 800fa40 <__ieee754_pow+0x3f0>)
 800f8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f900:	4604      	mov	r4, r0
 800f902:	460d      	mov	r5, r1
 800f904:	f7f0 fe98 	bl	8000638 <__aeabi_dmul>
 800f908:	a34f      	add	r3, pc, #316	@ (adr r3, 800fa48 <__ieee754_pow+0x3f8>)
 800f90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f90e:	4606      	mov	r6, r0
 800f910:	460f      	mov	r7, r1
 800f912:	4620      	mov	r0, r4
 800f914:	4629      	mov	r1, r5
 800f916:	f7f0 fe8f 	bl	8000638 <__aeabi_dmul>
 800f91a:	4b52      	ldr	r3, [pc, #328]	@ (800fa64 <__ieee754_pow+0x414>)
 800f91c:	4682      	mov	sl, r0
 800f91e:	468b      	mov	fp, r1
 800f920:	2200      	movs	r2, #0
 800f922:	4620      	mov	r0, r4
 800f924:	4629      	mov	r1, r5
 800f926:	f7f0 fe87 	bl	8000638 <__aeabi_dmul>
 800f92a:	4602      	mov	r2, r0
 800f92c:	460b      	mov	r3, r1
 800f92e:	a148      	add	r1, pc, #288	@ (adr r1, 800fa50 <__ieee754_pow+0x400>)
 800f930:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f934:	f7f0 fcc8 	bl	80002c8 <__aeabi_dsub>
 800f938:	4622      	mov	r2, r4
 800f93a:	462b      	mov	r3, r5
 800f93c:	f7f0 fe7c 	bl	8000638 <__aeabi_dmul>
 800f940:	4602      	mov	r2, r0
 800f942:	460b      	mov	r3, r1
 800f944:	2000      	movs	r0, #0
 800f946:	4948      	ldr	r1, [pc, #288]	@ (800fa68 <__ieee754_pow+0x418>)
 800f948:	f7f0 fcbe 	bl	80002c8 <__aeabi_dsub>
 800f94c:	4622      	mov	r2, r4
 800f94e:	4680      	mov	r8, r0
 800f950:	4689      	mov	r9, r1
 800f952:	462b      	mov	r3, r5
 800f954:	4620      	mov	r0, r4
 800f956:	4629      	mov	r1, r5
 800f958:	f7f0 fe6e 	bl	8000638 <__aeabi_dmul>
 800f95c:	4602      	mov	r2, r0
 800f95e:	460b      	mov	r3, r1
 800f960:	4640      	mov	r0, r8
 800f962:	4649      	mov	r1, r9
 800f964:	f7f0 fe68 	bl	8000638 <__aeabi_dmul>
 800f968:	a33b      	add	r3, pc, #236	@ (adr r3, 800fa58 <__ieee754_pow+0x408>)
 800f96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96e:	f7f0 fe63 	bl	8000638 <__aeabi_dmul>
 800f972:	4602      	mov	r2, r0
 800f974:	460b      	mov	r3, r1
 800f976:	4650      	mov	r0, sl
 800f978:	4659      	mov	r1, fp
 800f97a:	f7f0 fca5 	bl	80002c8 <__aeabi_dsub>
 800f97e:	4602      	mov	r2, r0
 800f980:	460b      	mov	r3, r1
 800f982:	4680      	mov	r8, r0
 800f984:	4689      	mov	r9, r1
 800f986:	4630      	mov	r0, r6
 800f988:	4639      	mov	r1, r7
 800f98a:	f7f0 fc9f 	bl	80002cc <__adddf3>
 800f98e:	2400      	movs	r4, #0
 800f990:	4632      	mov	r2, r6
 800f992:	463b      	mov	r3, r7
 800f994:	4620      	mov	r0, r4
 800f996:	460d      	mov	r5, r1
 800f998:	f7f0 fc96 	bl	80002c8 <__aeabi_dsub>
 800f99c:	4602      	mov	r2, r0
 800f99e:	460b      	mov	r3, r1
 800f9a0:	4640      	mov	r0, r8
 800f9a2:	4649      	mov	r1, r9
 800f9a4:	f7f0 fc90 	bl	80002c8 <__aeabi_dsub>
 800f9a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	9304      	str	r3, [sp, #16]
 800f9b4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f9b8:	4606      	mov	r6, r0
 800f9ba:	460f      	mov	r7, r1
 800f9bc:	4652      	mov	r2, sl
 800f9be:	465b      	mov	r3, fp
 800f9c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9c4:	f7f0 fc80 	bl	80002c8 <__aeabi_dsub>
 800f9c8:	4622      	mov	r2, r4
 800f9ca:	462b      	mov	r3, r5
 800f9cc:	f7f0 fe34 	bl	8000638 <__aeabi_dmul>
 800f9d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9d4:	4680      	mov	r8, r0
 800f9d6:	4689      	mov	r9, r1
 800f9d8:	4630      	mov	r0, r6
 800f9da:	4639      	mov	r1, r7
 800f9dc:	f7f0 fe2c 	bl	8000638 <__aeabi_dmul>
 800f9e0:	4602      	mov	r2, r0
 800f9e2:	460b      	mov	r3, r1
 800f9e4:	4640      	mov	r0, r8
 800f9e6:	4649      	mov	r1, r9
 800f9e8:	f7f0 fc70 	bl	80002cc <__adddf3>
 800f9ec:	4652      	mov	r2, sl
 800f9ee:	465b      	mov	r3, fp
 800f9f0:	4606      	mov	r6, r0
 800f9f2:	460f      	mov	r7, r1
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	4629      	mov	r1, r5
 800f9f8:	f7f0 fe1e 	bl	8000638 <__aeabi_dmul>
 800f9fc:	460b      	mov	r3, r1
 800f9fe:	4602      	mov	r2, r0
 800fa00:	4680      	mov	r8, r0
 800fa02:	4689      	mov	r9, r1
 800fa04:	4630      	mov	r0, r6
 800fa06:	4639      	mov	r1, r7
 800fa08:	f7f0 fc60 	bl	80002cc <__adddf3>
 800fa0c:	4b17      	ldr	r3, [pc, #92]	@ (800fa6c <__ieee754_pow+0x41c>)
 800fa0e:	4299      	cmp	r1, r3
 800fa10:	4604      	mov	r4, r0
 800fa12:	460d      	mov	r5, r1
 800fa14:	468a      	mov	sl, r1
 800fa16:	468b      	mov	fp, r1
 800fa18:	f340 82ef 	ble.w	800fffa <__ieee754_pow+0x9aa>
 800fa1c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800fa20:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800fa24:	4303      	orrs	r3, r0
 800fa26:	f000 81e8 	beq.w	800fdfa <__ieee754_pow+0x7aa>
 800fa2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa2e:	2200      	movs	r2, #0
 800fa30:	2300      	movs	r3, #0
 800fa32:	f7f1 f873 	bl	8000b1c <__aeabi_dcmplt>
 800fa36:	3800      	subs	r0, #0
 800fa38:	bf18      	it	ne
 800fa3a:	2001      	movne	r0, #1
 800fa3c:	e710      	b.n	800f860 <__ieee754_pow+0x210>
 800fa3e:	bf00      	nop
 800fa40:	60000000 	.word	0x60000000
 800fa44:	3ff71547 	.word	0x3ff71547
 800fa48:	f85ddf44 	.word	0xf85ddf44
 800fa4c:	3e54ae0b 	.word	0x3e54ae0b
 800fa50:	55555555 	.word	0x55555555
 800fa54:	3fd55555 	.word	0x3fd55555
 800fa58:	652b82fe 	.word	0x652b82fe
 800fa5c:	3ff71547 	.word	0x3ff71547
 800fa60:	3ff00000 	.word	0x3ff00000
 800fa64:	3fd00000 	.word	0x3fd00000
 800fa68:	3fe00000 	.word	0x3fe00000
 800fa6c:	408fffff 	.word	0x408fffff
 800fa70:	4bd5      	ldr	r3, [pc, #852]	@ (800fdc8 <__ieee754_pow+0x778>)
 800fa72:	402b      	ands	r3, r5
 800fa74:	2200      	movs	r2, #0
 800fa76:	b92b      	cbnz	r3, 800fa84 <__ieee754_pow+0x434>
 800fa78:	4bd4      	ldr	r3, [pc, #848]	@ (800fdcc <__ieee754_pow+0x77c>)
 800fa7a:	f7f0 fddd 	bl	8000638 <__aeabi_dmul>
 800fa7e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800fa82:	468b      	mov	fp, r1
 800fa84:	ea4f 532b 	mov.w	r3, fp, asr #20
 800fa88:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fa8c:	4413      	add	r3, r2
 800fa8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa90:	4bcf      	ldr	r3, [pc, #828]	@ (800fdd0 <__ieee754_pow+0x780>)
 800fa92:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800fa96:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800fa9a:	459b      	cmp	fp, r3
 800fa9c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800faa0:	dd08      	ble.n	800fab4 <__ieee754_pow+0x464>
 800faa2:	4bcc      	ldr	r3, [pc, #816]	@ (800fdd4 <__ieee754_pow+0x784>)
 800faa4:	459b      	cmp	fp, r3
 800faa6:	f340 81a5 	ble.w	800fdf4 <__ieee754_pow+0x7a4>
 800faaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800faac:	3301      	adds	r3, #1
 800faae:	930a      	str	r3, [sp, #40]	@ 0x28
 800fab0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800fab4:	f04f 0a00 	mov.w	sl, #0
 800fab8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800fabc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fabe:	4bc6      	ldr	r3, [pc, #792]	@ (800fdd8 <__ieee754_pow+0x788>)
 800fac0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fac4:	ed93 7b00 	vldr	d7, [r3]
 800fac8:	4629      	mov	r1, r5
 800faca:	ec53 2b17 	vmov	r2, r3, d7
 800face:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fad2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fad6:	f7f0 fbf7 	bl	80002c8 <__aeabi_dsub>
 800fada:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fade:	4606      	mov	r6, r0
 800fae0:	460f      	mov	r7, r1
 800fae2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fae6:	f7f0 fbf1 	bl	80002cc <__adddf3>
 800faea:	4602      	mov	r2, r0
 800faec:	460b      	mov	r3, r1
 800faee:	2000      	movs	r0, #0
 800faf0:	49ba      	ldr	r1, [pc, #744]	@ (800fddc <__ieee754_pow+0x78c>)
 800faf2:	f7f0 fecb 	bl	800088c <__aeabi_ddiv>
 800faf6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800fafa:	4602      	mov	r2, r0
 800fafc:	460b      	mov	r3, r1
 800fafe:	4630      	mov	r0, r6
 800fb00:	4639      	mov	r1, r7
 800fb02:	f7f0 fd99 	bl	8000638 <__aeabi_dmul>
 800fb06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fb0a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800fb0e:	106d      	asrs	r5, r5, #1
 800fb10:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800fb14:	f04f 0b00 	mov.w	fp, #0
 800fb18:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800fb1c:	4661      	mov	r1, ip
 800fb1e:	2200      	movs	r2, #0
 800fb20:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800fb24:	4658      	mov	r0, fp
 800fb26:	46e1      	mov	r9, ip
 800fb28:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800fb2c:	4614      	mov	r4, r2
 800fb2e:	461d      	mov	r5, r3
 800fb30:	f7f0 fd82 	bl	8000638 <__aeabi_dmul>
 800fb34:	4602      	mov	r2, r0
 800fb36:	460b      	mov	r3, r1
 800fb38:	4630      	mov	r0, r6
 800fb3a:	4639      	mov	r1, r7
 800fb3c:	f7f0 fbc4 	bl	80002c8 <__aeabi_dsub>
 800fb40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fb44:	4606      	mov	r6, r0
 800fb46:	460f      	mov	r7, r1
 800fb48:	4620      	mov	r0, r4
 800fb4a:	4629      	mov	r1, r5
 800fb4c:	f7f0 fbbc 	bl	80002c8 <__aeabi_dsub>
 800fb50:	4602      	mov	r2, r0
 800fb52:	460b      	mov	r3, r1
 800fb54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fb58:	f7f0 fbb6 	bl	80002c8 <__aeabi_dsub>
 800fb5c:	465a      	mov	r2, fp
 800fb5e:	464b      	mov	r3, r9
 800fb60:	f7f0 fd6a 	bl	8000638 <__aeabi_dmul>
 800fb64:	4602      	mov	r2, r0
 800fb66:	460b      	mov	r3, r1
 800fb68:	4630      	mov	r0, r6
 800fb6a:	4639      	mov	r1, r7
 800fb6c:	f7f0 fbac 	bl	80002c8 <__aeabi_dsub>
 800fb70:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fb74:	f7f0 fd60 	bl	8000638 <__aeabi_dmul>
 800fb78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fb80:	4610      	mov	r0, r2
 800fb82:	4619      	mov	r1, r3
 800fb84:	f7f0 fd58 	bl	8000638 <__aeabi_dmul>
 800fb88:	a37d      	add	r3, pc, #500	@ (adr r3, 800fd80 <__ieee754_pow+0x730>)
 800fb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb8e:	4604      	mov	r4, r0
 800fb90:	460d      	mov	r5, r1
 800fb92:	f7f0 fd51 	bl	8000638 <__aeabi_dmul>
 800fb96:	a37c      	add	r3, pc, #496	@ (adr r3, 800fd88 <__ieee754_pow+0x738>)
 800fb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9c:	f7f0 fb96 	bl	80002cc <__adddf3>
 800fba0:	4622      	mov	r2, r4
 800fba2:	462b      	mov	r3, r5
 800fba4:	f7f0 fd48 	bl	8000638 <__aeabi_dmul>
 800fba8:	a379      	add	r3, pc, #484	@ (adr r3, 800fd90 <__ieee754_pow+0x740>)
 800fbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbae:	f7f0 fb8d 	bl	80002cc <__adddf3>
 800fbb2:	4622      	mov	r2, r4
 800fbb4:	462b      	mov	r3, r5
 800fbb6:	f7f0 fd3f 	bl	8000638 <__aeabi_dmul>
 800fbba:	a377      	add	r3, pc, #476	@ (adr r3, 800fd98 <__ieee754_pow+0x748>)
 800fbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc0:	f7f0 fb84 	bl	80002cc <__adddf3>
 800fbc4:	4622      	mov	r2, r4
 800fbc6:	462b      	mov	r3, r5
 800fbc8:	f7f0 fd36 	bl	8000638 <__aeabi_dmul>
 800fbcc:	a374      	add	r3, pc, #464	@ (adr r3, 800fda0 <__ieee754_pow+0x750>)
 800fbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd2:	f7f0 fb7b 	bl	80002cc <__adddf3>
 800fbd6:	4622      	mov	r2, r4
 800fbd8:	462b      	mov	r3, r5
 800fbda:	f7f0 fd2d 	bl	8000638 <__aeabi_dmul>
 800fbde:	a372      	add	r3, pc, #456	@ (adr r3, 800fda8 <__ieee754_pow+0x758>)
 800fbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe4:	f7f0 fb72 	bl	80002cc <__adddf3>
 800fbe8:	4622      	mov	r2, r4
 800fbea:	4606      	mov	r6, r0
 800fbec:	460f      	mov	r7, r1
 800fbee:	462b      	mov	r3, r5
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	4629      	mov	r1, r5
 800fbf4:	f7f0 fd20 	bl	8000638 <__aeabi_dmul>
 800fbf8:	4602      	mov	r2, r0
 800fbfa:	460b      	mov	r3, r1
 800fbfc:	4630      	mov	r0, r6
 800fbfe:	4639      	mov	r1, r7
 800fc00:	f7f0 fd1a 	bl	8000638 <__aeabi_dmul>
 800fc04:	465a      	mov	r2, fp
 800fc06:	4604      	mov	r4, r0
 800fc08:	460d      	mov	r5, r1
 800fc0a:	464b      	mov	r3, r9
 800fc0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fc10:	f7f0 fb5c 	bl	80002cc <__adddf3>
 800fc14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fc18:	f7f0 fd0e 	bl	8000638 <__aeabi_dmul>
 800fc1c:	4622      	mov	r2, r4
 800fc1e:	462b      	mov	r3, r5
 800fc20:	f7f0 fb54 	bl	80002cc <__adddf3>
 800fc24:	465a      	mov	r2, fp
 800fc26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fc2a:	464b      	mov	r3, r9
 800fc2c:	4658      	mov	r0, fp
 800fc2e:	4649      	mov	r1, r9
 800fc30:	f7f0 fd02 	bl	8000638 <__aeabi_dmul>
 800fc34:	4b6a      	ldr	r3, [pc, #424]	@ (800fde0 <__ieee754_pow+0x790>)
 800fc36:	2200      	movs	r2, #0
 800fc38:	4606      	mov	r6, r0
 800fc3a:	460f      	mov	r7, r1
 800fc3c:	f7f0 fb46 	bl	80002cc <__adddf3>
 800fc40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fc44:	f7f0 fb42 	bl	80002cc <__adddf3>
 800fc48:	46d8      	mov	r8, fp
 800fc4a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800fc4e:	460d      	mov	r5, r1
 800fc50:	465a      	mov	r2, fp
 800fc52:	460b      	mov	r3, r1
 800fc54:	4640      	mov	r0, r8
 800fc56:	4649      	mov	r1, r9
 800fc58:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800fc5c:	f7f0 fcec 	bl	8000638 <__aeabi_dmul>
 800fc60:	465c      	mov	r4, fp
 800fc62:	4680      	mov	r8, r0
 800fc64:	4689      	mov	r9, r1
 800fc66:	4b5e      	ldr	r3, [pc, #376]	@ (800fde0 <__ieee754_pow+0x790>)
 800fc68:	2200      	movs	r2, #0
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	4629      	mov	r1, r5
 800fc6e:	f7f0 fb2b 	bl	80002c8 <__aeabi_dsub>
 800fc72:	4632      	mov	r2, r6
 800fc74:	463b      	mov	r3, r7
 800fc76:	f7f0 fb27 	bl	80002c8 <__aeabi_dsub>
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fc82:	f7f0 fb21 	bl	80002c8 <__aeabi_dsub>
 800fc86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc8a:	f7f0 fcd5 	bl	8000638 <__aeabi_dmul>
 800fc8e:	4622      	mov	r2, r4
 800fc90:	4606      	mov	r6, r0
 800fc92:	460f      	mov	r7, r1
 800fc94:	462b      	mov	r3, r5
 800fc96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc9a:	f7f0 fccd 	bl	8000638 <__aeabi_dmul>
 800fc9e:	4602      	mov	r2, r0
 800fca0:	460b      	mov	r3, r1
 800fca2:	4630      	mov	r0, r6
 800fca4:	4639      	mov	r1, r7
 800fca6:	f7f0 fb11 	bl	80002cc <__adddf3>
 800fcaa:	4606      	mov	r6, r0
 800fcac:	460f      	mov	r7, r1
 800fcae:	4602      	mov	r2, r0
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	4640      	mov	r0, r8
 800fcb4:	4649      	mov	r1, r9
 800fcb6:	f7f0 fb09 	bl	80002cc <__adddf3>
 800fcba:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800fcbe:	a33c      	add	r3, pc, #240	@ (adr r3, 800fdb0 <__ieee754_pow+0x760>)
 800fcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc4:	4658      	mov	r0, fp
 800fcc6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800fcca:	460d      	mov	r5, r1
 800fccc:	f7f0 fcb4 	bl	8000638 <__aeabi_dmul>
 800fcd0:	465c      	mov	r4, fp
 800fcd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fcd6:	4642      	mov	r2, r8
 800fcd8:	464b      	mov	r3, r9
 800fcda:	4620      	mov	r0, r4
 800fcdc:	4629      	mov	r1, r5
 800fcde:	f7f0 faf3 	bl	80002c8 <__aeabi_dsub>
 800fce2:	4602      	mov	r2, r0
 800fce4:	460b      	mov	r3, r1
 800fce6:	4630      	mov	r0, r6
 800fce8:	4639      	mov	r1, r7
 800fcea:	f7f0 faed 	bl	80002c8 <__aeabi_dsub>
 800fcee:	a332      	add	r3, pc, #200	@ (adr r3, 800fdb8 <__ieee754_pow+0x768>)
 800fcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf4:	f7f0 fca0 	bl	8000638 <__aeabi_dmul>
 800fcf8:	a331      	add	r3, pc, #196	@ (adr r3, 800fdc0 <__ieee754_pow+0x770>)
 800fcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfe:	4606      	mov	r6, r0
 800fd00:	460f      	mov	r7, r1
 800fd02:	4620      	mov	r0, r4
 800fd04:	4629      	mov	r1, r5
 800fd06:	f7f0 fc97 	bl	8000638 <__aeabi_dmul>
 800fd0a:	4602      	mov	r2, r0
 800fd0c:	460b      	mov	r3, r1
 800fd0e:	4630      	mov	r0, r6
 800fd10:	4639      	mov	r1, r7
 800fd12:	f7f0 fadb 	bl	80002cc <__adddf3>
 800fd16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fd18:	4b32      	ldr	r3, [pc, #200]	@ (800fde4 <__ieee754_pow+0x794>)
 800fd1a:	4413      	add	r3, r2
 800fd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd20:	f7f0 fad4 	bl	80002cc <__adddf3>
 800fd24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fd28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fd2a:	f7f0 fc1b 	bl	8000564 <__aeabi_i2d>
 800fd2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fd30:	4b2d      	ldr	r3, [pc, #180]	@ (800fde8 <__ieee754_pow+0x798>)
 800fd32:	4413      	add	r3, r2
 800fd34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fd38:	4606      	mov	r6, r0
 800fd3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd3e:	460f      	mov	r7, r1
 800fd40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd44:	f7f0 fac2 	bl	80002cc <__adddf3>
 800fd48:	4642      	mov	r2, r8
 800fd4a:	464b      	mov	r3, r9
 800fd4c:	f7f0 fabe 	bl	80002cc <__adddf3>
 800fd50:	4632      	mov	r2, r6
 800fd52:	463b      	mov	r3, r7
 800fd54:	f7f0 faba 	bl	80002cc <__adddf3>
 800fd58:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800fd5c:	4632      	mov	r2, r6
 800fd5e:	463b      	mov	r3, r7
 800fd60:	4658      	mov	r0, fp
 800fd62:	460d      	mov	r5, r1
 800fd64:	f7f0 fab0 	bl	80002c8 <__aeabi_dsub>
 800fd68:	4642      	mov	r2, r8
 800fd6a:	464b      	mov	r3, r9
 800fd6c:	f7f0 faac 	bl	80002c8 <__aeabi_dsub>
 800fd70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd74:	f7f0 faa8 	bl	80002c8 <__aeabi_dsub>
 800fd78:	465c      	mov	r4, fp
 800fd7a:	4602      	mov	r2, r0
 800fd7c:	e036      	b.n	800fdec <__ieee754_pow+0x79c>
 800fd7e:	bf00      	nop
 800fd80:	4a454eef 	.word	0x4a454eef
 800fd84:	3fca7e28 	.word	0x3fca7e28
 800fd88:	93c9db65 	.word	0x93c9db65
 800fd8c:	3fcd864a 	.word	0x3fcd864a
 800fd90:	a91d4101 	.word	0xa91d4101
 800fd94:	3fd17460 	.word	0x3fd17460
 800fd98:	518f264d 	.word	0x518f264d
 800fd9c:	3fd55555 	.word	0x3fd55555
 800fda0:	db6fabff 	.word	0xdb6fabff
 800fda4:	3fdb6db6 	.word	0x3fdb6db6
 800fda8:	33333303 	.word	0x33333303
 800fdac:	3fe33333 	.word	0x3fe33333
 800fdb0:	e0000000 	.word	0xe0000000
 800fdb4:	3feec709 	.word	0x3feec709
 800fdb8:	dc3a03fd 	.word	0xdc3a03fd
 800fdbc:	3feec709 	.word	0x3feec709
 800fdc0:	145b01f5 	.word	0x145b01f5
 800fdc4:	be3e2fe0 	.word	0xbe3e2fe0
 800fdc8:	7ff00000 	.word	0x7ff00000
 800fdcc:	43400000 	.word	0x43400000
 800fdd0:	0003988e 	.word	0x0003988e
 800fdd4:	000bb679 	.word	0x000bb679
 800fdd8:	08011888 	.word	0x08011888
 800fddc:	3ff00000 	.word	0x3ff00000
 800fde0:	40080000 	.word	0x40080000
 800fde4:	08011868 	.word	0x08011868
 800fde8:	08011878 	.word	0x08011878
 800fdec:	460b      	mov	r3, r1
 800fdee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fdf2:	e5d7      	b.n	800f9a4 <__ieee754_pow+0x354>
 800fdf4:	f04f 0a01 	mov.w	sl, #1
 800fdf8:	e65e      	b.n	800fab8 <__ieee754_pow+0x468>
 800fdfa:	a3b4      	add	r3, pc, #720	@ (adr r3, 80100cc <__ieee754_pow+0xa7c>)
 800fdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe00:	4630      	mov	r0, r6
 800fe02:	4639      	mov	r1, r7
 800fe04:	f7f0 fa62 	bl	80002cc <__adddf3>
 800fe08:	4642      	mov	r2, r8
 800fe0a:	e9cd 0100 	strd	r0, r1, [sp]
 800fe0e:	464b      	mov	r3, r9
 800fe10:	4620      	mov	r0, r4
 800fe12:	4629      	mov	r1, r5
 800fe14:	f7f0 fa58 	bl	80002c8 <__aeabi_dsub>
 800fe18:	4602      	mov	r2, r0
 800fe1a:	460b      	mov	r3, r1
 800fe1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe20:	f7f0 fe9a 	bl	8000b58 <__aeabi_dcmpgt>
 800fe24:	2800      	cmp	r0, #0
 800fe26:	f47f ae00 	bne.w	800fa2a <__ieee754_pow+0x3da>
 800fe2a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800fe2e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fe32:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800fe36:	fa43 fa0a 	asr.w	sl, r3, sl
 800fe3a:	44da      	add	sl, fp
 800fe3c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800fe40:	489d      	ldr	r0, [pc, #628]	@ (80100b8 <__ieee754_pow+0xa68>)
 800fe42:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800fe46:	4108      	asrs	r0, r1
 800fe48:	ea00 030a 	and.w	r3, r0, sl
 800fe4c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800fe50:	f1c1 0114 	rsb	r1, r1, #20
 800fe54:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800fe58:	fa4a fa01 	asr.w	sl, sl, r1
 800fe5c:	f1bb 0f00 	cmp.w	fp, #0
 800fe60:	4640      	mov	r0, r8
 800fe62:	4649      	mov	r1, r9
 800fe64:	f04f 0200 	mov.w	r2, #0
 800fe68:	bfb8      	it	lt
 800fe6a:	f1ca 0a00 	rsblt	sl, sl, #0
 800fe6e:	f7f0 fa2b 	bl	80002c8 <__aeabi_dsub>
 800fe72:	4680      	mov	r8, r0
 800fe74:	4689      	mov	r9, r1
 800fe76:	4632      	mov	r2, r6
 800fe78:	463b      	mov	r3, r7
 800fe7a:	4640      	mov	r0, r8
 800fe7c:	4649      	mov	r1, r9
 800fe7e:	f7f0 fa25 	bl	80002cc <__adddf3>
 800fe82:	2400      	movs	r4, #0
 800fe84:	a37c      	add	r3, pc, #496	@ (adr r3, 8010078 <__ieee754_pow+0xa28>)
 800fe86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	460d      	mov	r5, r1
 800fe8e:	f7f0 fbd3 	bl	8000638 <__aeabi_dmul>
 800fe92:	4642      	mov	r2, r8
 800fe94:	e9cd 0100 	strd	r0, r1, [sp]
 800fe98:	464b      	mov	r3, r9
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	4629      	mov	r1, r5
 800fe9e:	f7f0 fa13 	bl	80002c8 <__aeabi_dsub>
 800fea2:	4602      	mov	r2, r0
 800fea4:	460b      	mov	r3, r1
 800fea6:	4630      	mov	r0, r6
 800fea8:	4639      	mov	r1, r7
 800feaa:	f7f0 fa0d 	bl	80002c8 <__aeabi_dsub>
 800feae:	a374      	add	r3, pc, #464	@ (adr r3, 8010080 <__ieee754_pow+0xa30>)
 800feb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb4:	f7f0 fbc0 	bl	8000638 <__aeabi_dmul>
 800feb8:	a373      	add	r3, pc, #460	@ (adr r3, 8010088 <__ieee754_pow+0xa38>)
 800feba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800febe:	4680      	mov	r8, r0
 800fec0:	4689      	mov	r9, r1
 800fec2:	4620      	mov	r0, r4
 800fec4:	4629      	mov	r1, r5
 800fec6:	f7f0 fbb7 	bl	8000638 <__aeabi_dmul>
 800feca:	4602      	mov	r2, r0
 800fecc:	460b      	mov	r3, r1
 800fece:	4640      	mov	r0, r8
 800fed0:	4649      	mov	r1, r9
 800fed2:	f7f0 f9fb 	bl	80002cc <__adddf3>
 800fed6:	4604      	mov	r4, r0
 800fed8:	460d      	mov	r5, r1
 800feda:	4602      	mov	r2, r0
 800fedc:	460b      	mov	r3, r1
 800fede:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fee2:	f7f0 f9f3 	bl	80002cc <__adddf3>
 800fee6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800feea:	4680      	mov	r8, r0
 800feec:	4689      	mov	r9, r1
 800feee:	f7f0 f9eb 	bl	80002c8 <__aeabi_dsub>
 800fef2:	4602      	mov	r2, r0
 800fef4:	460b      	mov	r3, r1
 800fef6:	4620      	mov	r0, r4
 800fef8:	4629      	mov	r1, r5
 800fefa:	f7f0 f9e5 	bl	80002c8 <__aeabi_dsub>
 800fefe:	4642      	mov	r2, r8
 800ff00:	4606      	mov	r6, r0
 800ff02:	460f      	mov	r7, r1
 800ff04:	464b      	mov	r3, r9
 800ff06:	4640      	mov	r0, r8
 800ff08:	4649      	mov	r1, r9
 800ff0a:	f7f0 fb95 	bl	8000638 <__aeabi_dmul>
 800ff0e:	a360      	add	r3, pc, #384	@ (adr r3, 8010090 <__ieee754_pow+0xa40>)
 800ff10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff14:	4604      	mov	r4, r0
 800ff16:	460d      	mov	r5, r1
 800ff18:	f7f0 fb8e 	bl	8000638 <__aeabi_dmul>
 800ff1c:	a35e      	add	r3, pc, #376	@ (adr r3, 8010098 <__ieee754_pow+0xa48>)
 800ff1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff22:	f7f0 f9d1 	bl	80002c8 <__aeabi_dsub>
 800ff26:	4622      	mov	r2, r4
 800ff28:	462b      	mov	r3, r5
 800ff2a:	f7f0 fb85 	bl	8000638 <__aeabi_dmul>
 800ff2e:	a35c      	add	r3, pc, #368	@ (adr r3, 80100a0 <__ieee754_pow+0xa50>)
 800ff30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff34:	f7f0 f9ca 	bl	80002cc <__adddf3>
 800ff38:	4622      	mov	r2, r4
 800ff3a:	462b      	mov	r3, r5
 800ff3c:	f7f0 fb7c 	bl	8000638 <__aeabi_dmul>
 800ff40:	a359      	add	r3, pc, #356	@ (adr r3, 80100a8 <__ieee754_pow+0xa58>)
 800ff42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff46:	f7f0 f9bf 	bl	80002c8 <__aeabi_dsub>
 800ff4a:	4622      	mov	r2, r4
 800ff4c:	462b      	mov	r3, r5
 800ff4e:	f7f0 fb73 	bl	8000638 <__aeabi_dmul>
 800ff52:	a357      	add	r3, pc, #348	@ (adr r3, 80100b0 <__ieee754_pow+0xa60>)
 800ff54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff58:	f7f0 f9b8 	bl	80002cc <__adddf3>
 800ff5c:	4622      	mov	r2, r4
 800ff5e:	462b      	mov	r3, r5
 800ff60:	f7f0 fb6a 	bl	8000638 <__aeabi_dmul>
 800ff64:	4602      	mov	r2, r0
 800ff66:	460b      	mov	r3, r1
 800ff68:	4640      	mov	r0, r8
 800ff6a:	4649      	mov	r1, r9
 800ff6c:	f7f0 f9ac 	bl	80002c8 <__aeabi_dsub>
 800ff70:	4604      	mov	r4, r0
 800ff72:	460d      	mov	r5, r1
 800ff74:	4602      	mov	r2, r0
 800ff76:	460b      	mov	r3, r1
 800ff78:	4640      	mov	r0, r8
 800ff7a:	4649      	mov	r1, r9
 800ff7c:	f7f0 fb5c 	bl	8000638 <__aeabi_dmul>
 800ff80:	2200      	movs	r2, #0
 800ff82:	e9cd 0100 	strd	r0, r1, [sp]
 800ff86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ff8a:	4620      	mov	r0, r4
 800ff8c:	4629      	mov	r1, r5
 800ff8e:	f7f0 f99b 	bl	80002c8 <__aeabi_dsub>
 800ff92:	4602      	mov	r2, r0
 800ff94:	460b      	mov	r3, r1
 800ff96:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff9a:	f7f0 fc77 	bl	800088c <__aeabi_ddiv>
 800ff9e:	4632      	mov	r2, r6
 800ffa0:	4604      	mov	r4, r0
 800ffa2:	460d      	mov	r5, r1
 800ffa4:	463b      	mov	r3, r7
 800ffa6:	4640      	mov	r0, r8
 800ffa8:	4649      	mov	r1, r9
 800ffaa:	f7f0 fb45 	bl	8000638 <__aeabi_dmul>
 800ffae:	4632      	mov	r2, r6
 800ffb0:	463b      	mov	r3, r7
 800ffb2:	f7f0 f98b 	bl	80002cc <__adddf3>
 800ffb6:	4602      	mov	r2, r0
 800ffb8:	460b      	mov	r3, r1
 800ffba:	4620      	mov	r0, r4
 800ffbc:	4629      	mov	r1, r5
 800ffbe:	f7f0 f983 	bl	80002c8 <__aeabi_dsub>
 800ffc2:	4642      	mov	r2, r8
 800ffc4:	464b      	mov	r3, r9
 800ffc6:	f7f0 f97f 	bl	80002c8 <__aeabi_dsub>
 800ffca:	460b      	mov	r3, r1
 800ffcc:	4602      	mov	r2, r0
 800ffce:	493b      	ldr	r1, [pc, #236]	@ (80100bc <__ieee754_pow+0xa6c>)
 800ffd0:	2000      	movs	r0, #0
 800ffd2:	f7f0 f979 	bl	80002c8 <__aeabi_dsub>
 800ffd6:	ec41 0b10 	vmov	d0, r0, r1
 800ffda:	ee10 3a90 	vmov	r3, s1
 800ffde:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ffe2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ffe6:	da30      	bge.n	801004a <__ieee754_pow+0x9fa>
 800ffe8:	4650      	mov	r0, sl
 800ffea:	f000 fdcd 	bl	8010b88 <scalbn>
 800ffee:	ec51 0b10 	vmov	r0, r1, d0
 800fff2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fff6:	f7ff bbd2 	b.w	800f79e <__ieee754_pow+0x14e>
 800fffa:	4c31      	ldr	r4, [pc, #196]	@ (80100c0 <__ieee754_pow+0xa70>)
 800fffc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010000:	42a3      	cmp	r3, r4
 8010002:	d91a      	bls.n	801003a <__ieee754_pow+0x9ea>
 8010004:	4b2f      	ldr	r3, [pc, #188]	@ (80100c4 <__ieee754_pow+0xa74>)
 8010006:	440b      	add	r3, r1
 8010008:	4303      	orrs	r3, r0
 801000a:	d009      	beq.n	8010020 <__ieee754_pow+0x9d0>
 801000c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010010:	2200      	movs	r2, #0
 8010012:	2300      	movs	r3, #0
 8010014:	f7f0 fd82 	bl	8000b1c <__aeabi_dcmplt>
 8010018:	3800      	subs	r0, #0
 801001a:	bf18      	it	ne
 801001c:	2001      	movne	r0, #1
 801001e:	e42b      	b.n	800f878 <__ieee754_pow+0x228>
 8010020:	4642      	mov	r2, r8
 8010022:	464b      	mov	r3, r9
 8010024:	f7f0 f950 	bl	80002c8 <__aeabi_dsub>
 8010028:	4632      	mov	r2, r6
 801002a:	463b      	mov	r3, r7
 801002c:	f7f0 fd8a 	bl	8000b44 <__aeabi_dcmpge>
 8010030:	2800      	cmp	r0, #0
 8010032:	d1eb      	bne.n	801000c <__ieee754_pow+0x9bc>
 8010034:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80100d4 <__ieee754_pow+0xa84>
 8010038:	e6f7      	b.n	800fe2a <__ieee754_pow+0x7da>
 801003a:	469a      	mov	sl, r3
 801003c:	4b22      	ldr	r3, [pc, #136]	@ (80100c8 <__ieee754_pow+0xa78>)
 801003e:	459a      	cmp	sl, r3
 8010040:	f63f aef3 	bhi.w	800fe2a <__ieee754_pow+0x7da>
 8010044:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010048:	e715      	b.n	800fe76 <__ieee754_pow+0x826>
 801004a:	ec51 0b10 	vmov	r0, r1, d0
 801004e:	4619      	mov	r1, r3
 8010050:	e7cf      	b.n	800fff2 <__ieee754_pow+0x9a2>
 8010052:	491a      	ldr	r1, [pc, #104]	@ (80100bc <__ieee754_pow+0xa6c>)
 8010054:	2000      	movs	r0, #0
 8010056:	f7ff bb18 	b.w	800f68a <__ieee754_pow+0x3a>
 801005a:	2000      	movs	r0, #0
 801005c:	2100      	movs	r1, #0
 801005e:	f7ff bb14 	b.w	800f68a <__ieee754_pow+0x3a>
 8010062:	4630      	mov	r0, r6
 8010064:	4639      	mov	r1, r7
 8010066:	f7ff bb10 	b.w	800f68a <__ieee754_pow+0x3a>
 801006a:	460c      	mov	r4, r1
 801006c:	f7ff bb5e 	b.w	800f72c <__ieee754_pow+0xdc>
 8010070:	2400      	movs	r4, #0
 8010072:	f7ff bb49 	b.w	800f708 <__ieee754_pow+0xb8>
 8010076:	bf00      	nop
 8010078:	00000000 	.word	0x00000000
 801007c:	3fe62e43 	.word	0x3fe62e43
 8010080:	fefa39ef 	.word	0xfefa39ef
 8010084:	3fe62e42 	.word	0x3fe62e42
 8010088:	0ca86c39 	.word	0x0ca86c39
 801008c:	be205c61 	.word	0xbe205c61
 8010090:	72bea4d0 	.word	0x72bea4d0
 8010094:	3e663769 	.word	0x3e663769
 8010098:	c5d26bf1 	.word	0xc5d26bf1
 801009c:	3ebbbd41 	.word	0x3ebbbd41
 80100a0:	af25de2c 	.word	0xaf25de2c
 80100a4:	3f11566a 	.word	0x3f11566a
 80100a8:	16bebd93 	.word	0x16bebd93
 80100ac:	3f66c16c 	.word	0x3f66c16c
 80100b0:	5555553e 	.word	0x5555553e
 80100b4:	3fc55555 	.word	0x3fc55555
 80100b8:	fff00000 	.word	0xfff00000
 80100bc:	3ff00000 	.word	0x3ff00000
 80100c0:	4090cbff 	.word	0x4090cbff
 80100c4:	3f6f3400 	.word	0x3f6f3400
 80100c8:	3fe00000 	.word	0x3fe00000
 80100cc:	652b82fe 	.word	0x652b82fe
 80100d0:	3c971547 	.word	0x3c971547
 80100d4:	4090cc00 	.word	0x4090cc00

080100d8 <__ieee754_rem_pio2>:
 80100d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100dc:	ec57 6b10 	vmov	r6, r7, d0
 80100e0:	4bc5      	ldr	r3, [pc, #788]	@ (80103f8 <__ieee754_rem_pio2+0x320>)
 80100e2:	b08d      	sub	sp, #52	@ 0x34
 80100e4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80100e8:	4598      	cmp	r8, r3
 80100ea:	4604      	mov	r4, r0
 80100ec:	9704      	str	r7, [sp, #16]
 80100ee:	d807      	bhi.n	8010100 <__ieee754_rem_pio2+0x28>
 80100f0:	2200      	movs	r2, #0
 80100f2:	2300      	movs	r3, #0
 80100f4:	ed80 0b00 	vstr	d0, [r0]
 80100f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80100fc:	2500      	movs	r5, #0
 80100fe:	e028      	b.n	8010152 <__ieee754_rem_pio2+0x7a>
 8010100:	4bbe      	ldr	r3, [pc, #760]	@ (80103fc <__ieee754_rem_pio2+0x324>)
 8010102:	4598      	cmp	r8, r3
 8010104:	d878      	bhi.n	80101f8 <__ieee754_rem_pio2+0x120>
 8010106:	9b04      	ldr	r3, [sp, #16]
 8010108:	4dbd      	ldr	r5, [pc, #756]	@ (8010400 <__ieee754_rem_pio2+0x328>)
 801010a:	2b00      	cmp	r3, #0
 801010c:	4630      	mov	r0, r6
 801010e:	a3ac      	add	r3, pc, #688	@ (adr r3, 80103c0 <__ieee754_rem_pio2+0x2e8>)
 8010110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010114:	4639      	mov	r1, r7
 8010116:	dd38      	ble.n	801018a <__ieee754_rem_pio2+0xb2>
 8010118:	f7f0 f8d6 	bl	80002c8 <__aeabi_dsub>
 801011c:	45a8      	cmp	r8, r5
 801011e:	4606      	mov	r6, r0
 8010120:	460f      	mov	r7, r1
 8010122:	d01a      	beq.n	801015a <__ieee754_rem_pio2+0x82>
 8010124:	a3a8      	add	r3, pc, #672	@ (adr r3, 80103c8 <__ieee754_rem_pio2+0x2f0>)
 8010126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801012a:	f7f0 f8cd 	bl	80002c8 <__aeabi_dsub>
 801012e:	4602      	mov	r2, r0
 8010130:	460b      	mov	r3, r1
 8010132:	4680      	mov	r8, r0
 8010134:	4689      	mov	r9, r1
 8010136:	4630      	mov	r0, r6
 8010138:	4639      	mov	r1, r7
 801013a:	f7f0 f8c5 	bl	80002c8 <__aeabi_dsub>
 801013e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80103c8 <__ieee754_rem_pio2+0x2f0>)
 8010140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010144:	f7f0 f8c0 	bl	80002c8 <__aeabi_dsub>
 8010148:	e9c4 8900 	strd	r8, r9, [r4]
 801014c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010150:	2501      	movs	r5, #1
 8010152:	4628      	mov	r0, r5
 8010154:	b00d      	add	sp, #52	@ 0x34
 8010156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801015a:	a39d      	add	r3, pc, #628	@ (adr r3, 80103d0 <__ieee754_rem_pio2+0x2f8>)
 801015c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010160:	f7f0 f8b2 	bl	80002c8 <__aeabi_dsub>
 8010164:	a39c      	add	r3, pc, #624	@ (adr r3, 80103d8 <__ieee754_rem_pio2+0x300>)
 8010166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801016a:	4606      	mov	r6, r0
 801016c:	460f      	mov	r7, r1
 801016e:	f7f0 f8ab 	bl	80002c8 <__aeabi_dsub>
 8010172:	4602      	mov	r2, r0
 8010174:	460b      	mov	r3, r1
 8010176:	4680      	mov	r8, r0
 8010178:	4689      	mov	r9, r1
 801017a:	4630      	mov	r0, r6
 801017c:	4639      	mov	r1, r7
 801017e:	f7f0 f8a3 	bl	80002c8 <__aeabi_dsub>
 8010182:	a395      	add	r3, pc, #596	@ (adr r3, 80103d8 <__ieee754_rem_pio2+0x300>)
 8010184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010188:	e7dc      	b.n	8010144 <__ieee754_rem_pio2+0x6c>
 801018a:	f7f0 f89f 	bl	80002cc <__adddf3>
 801018e:	45a8      	cmp	r8, r5
 8010190:	4606      	mov	r6, r0
 8010192:	460f      	mov	r7, r1
 8010194:	d018      	beq.n	80101c8 <__ieee754_rem_pio2+0xf0>
 8010196:	a38c      	add	r3, pc, #560	@ (adr r3, 80103c8 <__ieee754_rem_pio2+0x2f0>)
 8010198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801019c:	f7f0 f896 	bl	80002cc <__adddf3>
 80101a0:	4602      	mov	r2, r0
 80101a2:	460b      	mov	r3, r1
 80101a4:	4680      	mov	r8, r0
 80101a6:	4689      	mov	r9, r1
 80101a8:	4630      	mov	r0, r6
 80101aa:	4639      	mov	r1, r7
 80101ac:	f7f0 f88c 	bl	80002c8 <__aeabi_dsub>
 80101b0:	a385      	add	r3, pc, #532	@ (adr r3, 80103c8 <__ieee754_rem_pio2+0x2f0>)
 80101b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b6:	f7f0 f889 	bl	80002cc <__adddf3>
 80101ba:	f04f 35ff 	mov.w	r5, #4294967295
 80101be:	e9c4 8900 	strd	r8, r9, [r4]
 80101c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80101c6:	e7c4      	b.n	8010152 <__ieee754_rem_pio2+0x7a>
 80101c8:	a381      	add	r3, pc, #516	@ (adr r3, 80103d0 <__ieee754_rem_pio2+0x2f8>)
 80101ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ce:	f7f0 f87d 	bl	80002cc <__adddf3>
 80101d2:	a381      	add	r3, pc, #516	@ (adr r3, 80103d8 <__ieee754_rem_pio2+0x300>)
 80101d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d8:	4606      	mov	r6, r0
 80101da:	460f      	mov	r7, r1
 80101dc:	f7f0 f876 	bl	80002cc <__adddf3>
 80101e0:	4602      	mov	r2, r0
 80101e2:	460b      	mov	r3, r1
 80101e4:	4680      	mov	r8, r0
 80101e6:	4689      	mov	r9, r1
 80101e8:	4630      	mov	r0, r6
 80101ea:	4639      	mov	r1, r7
 80101ec:	f7f0 f86c 	bl	80002c8 <__aeabi_dsub>
 80101f0:	a379      	add	r3, pc, #484	@ (adr r3, 80103d8 <__ieee754_rem_pio2+0x300>)
 80101f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f6:	e7de      	b.n	80101b6 <__ieee754_rem_pio2+0xde>
 80101f8:	4b82      	ldr	r3, [pc, #520]	@ (8010404 <__ieee754_rem_pio2+0x32c>)
 80101fa:	4598      	cmp	r8, r3
 80101fc:	f200 80d1 	bhi.w	80103a2 <__ieee754_rem_pio2+0x2ca>
 8010200:	f000 f966 	bl	80104d0 <fabs>
 8010204:	ec57 6b10 	vmov	r6, r7, d0
 8010208:	a375      	add	r3, pc, #468	@ (adr r3, 80103e0 <__ieee754_rem_pio2+0x308>)
 801020a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801020e:	4630      	mov	r0, r6
 8010210:	4639      	mov	r1, r7
 8010212:	f7f0 fa11 	bl	8000638 <__aeabi_dmul>
 8010216:	4b7c      	ldr	r3, [pc, #496]	@ (8010408 <__ieee754_rem_pio2+0x330>)
 8010218:	2200      	movs	r2, #0
 801021a:	f7f0 f857 	bl	80002cc <__adddf3>
 801021e:	f7f0 fcbb 	bl	8000b98 <__aeabi_d2iz>
 8010222:	4605      	mov	r5, r0
 8010224:	f7f0 f99e 	bl	8000564 <__aeabi_i2d>
 8010228:	4602      	mov	r2, r0
 801022a:	460b      	mov	r3, r1
 801022c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010230:	a363      	add	r3, pc, #396	@ (adr r3, 80103c0 <__ieee754_rem_pio2+0x2e8>)
 8010232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010236:	f7f0 f9ff 	bl	8000638 <__aeabi_dmul>
 801023a:	4602      	mov	r2, r0
 801023c:	460b      	mov	r3, r1
 801023e:	4630      	mov	r0, r6
 8010240:	4639      	mov	r1, r7
 8010242:	f7f0 f841 	bl	80002c8 <__aeabi_dsub>
 8010246:	a360      	add	r3, pc, #384	@ (adr r3, 80103c8 <__ieee754_rem_pio2+0x2f0>)
 8010248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024c:	4682      	mov	sl, r0
 801024e:	468b      	mov	fp, r1
 8010250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010254:	f7f0 f9f0 	bl	8000638 <__aeabi_dmul>
 8010258:	2d1f      	cmp	r5, #31
 801025a:	4606      	mov	r6, r0
 801025c:	460f      	mov	r7, r1
 801025e:	dc0c      	bgt.n	801027a <__ieee754_rem_pio2+0x1a2>
 8010260:	4b6a      	ldr	r3, [pc, #424]	@ (801040c <__ieee754_rem_pio2+0x334>)
 8010262:	1e6a      	subs	r2, r5, #1
 8010264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010268:	4543      	cmp	r3, r8
 801026a:	d006      	beq.n	801027a <__ieee754_rem_pio2+0x1a2>
 801026c:	4632      	mov	r2, r6
 801026e:	463b      	mov	r3, r7
 8010270:	4650      	mov	r0, sl
 8010272:	4659      	mov	r1, fp
 8010274:	f7f0 f828 	bl	80002c8 <__aeabi_dsub>
 8010278:	e00e      	b.n	8010298 <__ieee754_rem_pio2+0x1c0>
 801027a:	463b      	mov	r3, r7
 801027c:	4632      	mov	r2, r6
 801027e:	4650      	mov	r0, sl
 8010280:	4659      	mov	r1, fp
 8010282:	f7f0 f821 	bl	80002c8 <__aeabi_dsub>
 8010286:	ea4f 5328 	mov.w	r3, r8, asr #20
 801028a:	9305      	str	r3, [sp, #20]
 801028c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010290:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010294:	2b10      	cmp	r3, #16
 8010296:	dc02      	bgt.n	801029e <__ieee754_rem_pio2+0x1c6>
 8010298:	e9c4 0100 	strd	r0, r1, [r4]
 801029c:	e039      	b.n	8010312 <__ieee754_rem_pio2+0x23a>
 801029e:	a34c      	add	r3, pc, #304	@ (adr r3, 80103d0 <__ieee754_rem_pio2+0x2f8>)
 80102a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102a8:	f7f0 f9c6 	bl	8000638 <__aeabi_dmul>
 80102ac:	4606      	mov	r6, r0
 80102ae:	460f      	mov	r7, r1
 80102b0:	4602      	mov	r2, r0
 80102b2:	460b      	mov	r3, r1
 80102b4:	4650      	mov	r0, sl
 80102b6:	4659      	mov	r1, fp
 80102b8:	f7f0 f806 	bl	80002c8 <__aeabi_dsub>
 80102bc:	4602      	mov	r2, r0
 80102be:	460b      	mov	r3, r1
 80102c0:	4680      	mov	r8, r0
 80102c2:	4689      	mov	r9, r1
 80102c4:	4650      	mov	r0, sl
 80102c6:	4659      	mov	r1, fp
 80102c8:	f7ef fffe 	bl	80002c8 <__aeabi_dsub>
 80102cc:	4632      	mov	r2, r6
 80102ce:	463b      	mov	r3, r7
 80102d0:	f7ef fffa 	bl	80002c8 <__aeabi_dsub>
 80102d4:	a340      	add	r3, pc, #256	@ (adr r3, 80103d8 <__ieee754_rem_pio2+0x300>)
 80102d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102da:	4606      	mov	r6, r0
 80102dc:	460f      	mov	r7, r1
 80102de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102e2:	f7f0 f9a9 	bl	8000638 <__aeabi_dmul>
 80102e6:	4632      	mov	r2, r6
 80102e8:	463b      	mov	r3, r7
 80102ea:	f7ef ffed 	bl	80002c8 <__aeabi_dsub>
 80102ee:	4602      	mov	r2, r0
 80102f0:	460b      	mov	r3, r1
 80102f2:	4606      	mov	r6, r0
 80102f4:	460f      	mov	r7, r1
 80102f6:	4640      	mov	r0, r8
 80102f8:	4649      	mov	r1, r9
 80102fa:	f7ef ffe5 	bl	80002c8 <__aeabi_dsub>
 80102fe:	9a05      	ldr	r2, [sp, #20]
 8010300:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010304:	1ad3      	subs	r3, r2, r3
 8010306:	2b31      	cmp	r3, #49	@ 0x31
 8010308:	dc20      	bgt.n	801034c <__ieee754_rem_pio2+0x274>
 801030a:	e9c4 0100 	strd	r0, r1, [r4]
 801030e:	46c2      	mov	sl, r8
 8010310:	46cb      	mov	fp, r9
 8010312:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010316:	4650      	mov	r0, sl
 8010318:	4642      	mov	r2, r8
 801031a:	464b      	mov	r3, r9
 801031c:	4659      	mov	r1, fp
 801031e:	f7ef ffd3 	bl	80002c8 <__aeabi_dsub>
 8010322:	463b      	mov	r3, r7
 8010324:	4632      	mov	r2, r6
 8010326:	f7ef ffcf 	bl	80002c8 <__aeabi_dsub>
 801032a:	9b04      	ldr	r3, [sp, #16]
 801032c:	2b00      	cmp	r3, #0
 801032e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010332:	f6bf af0e 	bge.w	8010152 <__ieee754_rem_pio2+0x7a>
 8010336:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801033a:	6063      	str	r3, [r4, #4]
 801033c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010340:	f8c4 8000 	str.w	r8, [r4]
 8010344:	60a0      	str	r0, [r4, #8]
 8010346:	60e3      	str	r3, [r4, #12]
 8010348:	426d      	negs	r5, r5
 801034a:	e702      	b.n	8010152 <__ieee754_rem_pio2+0x7a>
 801034c:	a326      	add	r3, pc, #152	@ (adr r3, 80103e8 <__ieee754_rem_pio2+0x310>)
 801034e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010356:	f7f0 f96f 	bl	8000638 <__aeabi_dmul>
 801035a:	4606      	mov	r6, r0
 801035c:	460f      	mov	r7, r1
 801035e:	4602      	mov	r2, r0
 8010360:	460b      	mov	r3, r1
 8010362:	4640      	mov	r0, r8
 8010364:	4649      	mov	r1, r9
 8010366:	f7ef ffaf 	bl	80002c8 <__aeabi_dsub>
 801036a:	4602      	mov	r2, r0
 801036c:	460b      	mov	r3, r1
 801036e:	4682      	mov	sl, r0
 8010370:	468b      	mov	fp, r1
 8010372:	4640      	mov	r0, r8
 8010374:	4649      	mov	r1, r9
 8010376:	f7ef ffa7 	bl	80002c8 <__aeabi_dsub>
 801037a:	4632      	mov	r2, r6
 801037c:	463b      	mov	r3, r7
 801037e:	f7ef ffa3 	bl	80002c8 <__aeabi_dsub>
 8010382:	a31b      	add	r3, pc, #108	@ (adr r3, 80103f0 <__ieee754_rem_pio2+0x318>)
 8010384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010388:	4606      	mov	r6, r0
 801038a:	460f      	mov	r7, r1
 801038c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010390:	f7f0 f952 	bl	8000638 <__aeabi_dmul>
 8010394:	4632      	mov	r2, r6
 8010396:	463b      	mov	r3, r7
 8010398:	f7ef ff96 	bl	80002c8 <__aeabi_dsub>
 801039c:	4606      	mov	r6, r0
 801039e:	460f      	mov	r7, r1
 80103a0:	e764      	b.n	801026c <__ieee754_rem_pio2+0x194>
 80103a2:	4b1b      	ldr	r3, [pc, #108]	@ (8010410 <__ieee754_rem_pio2+0x338>)
 80103a4:	4598      	cmp	r8, r3
 80103a6:	d935      	bls.n	8010414 <__ieee754_rem_pio2+0x33c>
 80103a8:	4632      	mov	r2, r6
 80103aa:	463b      	mov	r3, r7
 80103ac:	4630      	mov	r0, r6
 80103ae:	4639      	mov	r1, r7
 80103b0:	f7ef ff8a 	bl	80002c8 <__aeabi_dsub>
 80103b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80103b8:	e9c4 0100 	strd	r0, r1, [r4]
 80103bc:	e69e      	b.n	80100fc <__ieee754_rem_pio2+0x24>
 80103be:	bf00      	nop
 80103c0:	54400000 	.word	0x54400000
 80103c4:	3ff921fb 	.word	0x3ff921fb
 80103c8:	1a626331 	.word	0x1a626331
 80103cc:	3dd0b461 	.word	0x3dd0b461
 80103d0:	1a600000 	.word	0x1a600000
 80103d4:	3dd0b461 	.word	0x3dd0b461
 80103d8:	2e037073 	.word	0x2e037073
 80103dc:	3ba3198a 	.word	0x3ba3198a
 80103e0:	6dc9c883 	.word	0x6dc9c883
 80103e4:	3fe45f30 	.word	0x3fe45f30
 80103e8:	2e000000 	.word	0x2e000000
 80103ec:	3ba3198a 	.word	0x3ba3198a
 80103f0:	252049c1 	.word	0x252049c1
 80103f4:	397b839a 	.word	0x397b839a
 80103f8:	3fe921fb 	.word	0x3fe921fb
 80103fc:	4002d97b 	.word	0x4002d97b
 8010400:	3ff921fb 	.word	0x3ff921fb
 8010404:	413921fb 	.word	0x413921fb
 8010408:	3fe00000 	.word	0x3fe00000
 801040c:	08011898 	.word	0x08011898
 8010410:	7fefffff 	.word	0x7fefffff
 8010414:	ea4f 5528 	mov.w	r5, r8, asr #20
 8010418:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801041c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8010420:	4630      	mov	r0, r6
 8010422:	460f      	mov	r7, r1
 8010424:	f7f0 fbb8 	bl	8000b98 <__aeabi_d2iz>
 8010428:	f7f0 f89c 	bl	8000564 <__aeabi_i2d>
 801042c:	4602      	mov	r2, r0
 801042e:	460b      	mov	r3, r1
 8010430:	4630      	mov	r0, r6
 8010432:	4639      	mov	r1, r7
 8010434:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010438:	f7ef ff46 	bl	80002c8 <__aeabi_dsub>
 801043c:	4b22      	ldr	r3, [pc, #136]	@ (80104c8 <__ieee754_rem_pio2+0x3f0>)
 801043e:	2200      	movs	r2, #0
 8010440:	f7f0 f8fa 	bl	8000638 <__aeabi_dmul>
 8010444:	460f      	mov	r7, r1
 8010446:	4606      	mov	r6, r0
 8010448:	f7f0 fba6 	bl	8000b98 <__aeabi_d2iz>
 801044c:	f7f0 f88a 	bl	8000564 <__aeabi_i2d>
 8010450:	4602      	mov	r2, r0
 8010452:	460b      	mov	r3, r1
 8010454:	4630      	mov	r0, r6
 8010456:	4639      	mov	r1, r7
 8010458:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801045c:	f7ef ff34 	bl	80002c8 <__aeabi_dsub>
 8010460:	4b19      	ldr	r3, [pc, #100]	@ (80104c8 <__ieee754_rem_pio2+0x3f0>)
 8010462:	2200      	movs	r2, #0
 8010464:	f7f0 f8e8 	bl	8000638 <__aeabi_dmul>
 8010468:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801046c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8010470:	f04f 0803 	mov.w	r8, #3
 8010474:	2600      	movs	r6, #0
 8010476:	2700      	movs	r7, #0
 8010478:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801047c:	4632      	mov	r2, r6
 801047e:	463b      	mov	r3, r7
 8010480:	46c2      	mov	sl, r8
 8010482:	f108 38ff 	add.w	r8, r8, #4294967295
 8010486:	f7f0 fb3f 	bl	8000b08 <__aeabi_dcmpeq>
 801048a:	2800      	cmp	r0, #0
 801048c:	d1f4      	bne.n	8010478 <__ieee754_rem_pio2+0x3a0>
 801048e:	4b0f      	ldr	r3, [pc, #60]	@ (80104cc <__ieee754_rem_pio2+0x3f4>)
 8010490:	9301      	str	r3, [sp, #4]
 8010492:	2302      	movs	r3, #2
 8010494:	9300      	str	r3, [sp, #0]
 8010496:	462a      	mov	r2, r5
 8010498:	4653      	mov	r3, sl
 801049a:	4621      	mov	r1, r4
 801049c:	a806      	add	r0, sp, #24
 801049e:	f000 fc2f 	bl	8010d00 <__kernel_rem_pio2>
 80104a2:	9b04      	ldr	r3, [sp, #16]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	4605      	mov	r5, r0
 80104a8:	f6bf ae53 	bge.w	8010152 <__ieee754_rem_pio2+0x7a>
 80104ac:	e9d4 2100 	ldrd	r2, r1, [r4]
 80104b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80104b4:	e9c4 2300 	strd	r2, r3, [r4]
 80104b8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80104bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80104c0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80104c4:	e740      	b.n	8010348 <__ieee754_rem_pio2+0x270>
 80104c6:	bf00      	nop
 80104c8:	41700000 	.word	0x41700000
 80104cc:	08011918 	.word	0x08011918

080104d0 <fabs>:
 80104d0:	ec51 0b10 	vmov	r0, r1, d0
 80104d4:	4602      	mov	r2, r0
 80104d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80104da:	ec43 2b10 	vmov	d0, r2, r3
 80104de:	4770      	bx	lr

080104e0 <__ieee754_acosf>:
 80104e0:	b508      	push	{r3, lr}
 80104e2:	ee10 3a10 	vmov	r3, s0
 80104e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80104ea:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80104ee:	ed2d 8b0c 	vpush	{d8-d13}
 80104f2:	d10a      	bne.n	801050a <__ieee754_acosf+0x2a>
 80104f4:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 801068c <__ieee754_acosf+0x1ac>
 80104f8:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8010690 <__ieee754_acosf+0x1b0>
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	bfc8      	it	gt
 8010500:	eeb0 0a67 	vmovgt.f32	s0, s15
 8010504:	ecbd 8b0c 	vpop	{d8-d13}
 8010508:	bd08      	pop	{r3, pc}
 801050a:	d904      	bls.n	8010516 <__ieee754_acosf+0x36>
 801050c:	ee30 8a40 	vsub.f32	s16, s0, s0
 8010510:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010514:	e7f6      	b.n	8010504 <__ieee754_acosf+0x24>
 8010516:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 801051a:	d23c      	bcs.n	8010596 <__ieee754_acosf+0xb6>
 801051c:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8010520:	f240 80b1 	bls.w	8010686 <__ieee754_acosf+0x1a6>
 8010524:	ee60 7a00 	vmul.f32	s15, s0, s0
 8010528:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8010694 <__ieee754_acosf+0x1b4>
 801052c:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8010698 <__ieee754_acosf+0x1b8>
 8010530:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 801069c <__ieee754_acosf+0x1bc>
 8010534:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010538:	eddf 6a59 	vldr	s13, [pc, #356]	@ 80106a0 <__ieee754_acosf+0x1c0>
 801053c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010540:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80106a4 <__ieee754_acosf+0x1c4>
 8010544:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010548:	eddf 6a57 	vldr	s13, [pc, #348]	@ 80106a8 <__ieee754_acosf+0x1c8>
 801054c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010550:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 80106ac <__ieee754_acosf+0x1cc>
 8010554:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010558:	eddf 6a55 	vldr	s13, [pc, #340]	@ 80106b0 <__ieee754_acosf+0x1d0>
 801055c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8010560:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80106b4 <__ieee754_acosf+0x1d4>
 8010564:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010568:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 80106b8 <__ieee754_acosf+0x1d8>
 801056c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010570:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010574:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010578:	ee27 7a27 	vmul.f32	s14, s14, s15
 801057c:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 80106bc <__ieee754_acosf+0x1dc>
 8010580:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8010584:	eee0 7a46 	vfms.f32	s15, s0, s12
 8010588:	ee70 7a67 	vsub.f32	s15, s0, s15
 801058c:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 80106c0 <__ieee754_acosf+0x1e0>
 8010590:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010594:	e7b6      	b.n	8010504 <__ieee754_acosf+0x24>
 8010596:	2b00      	cmp	r3, #0
 8010598:	eddf da3e 	vldr	s27, [pc, #248]	@ 8010694 <__ieee754_acosf+0x1b4>
 801059c:	eddf ca3e 	vldr	s25, [pc, #248]	@ 8010698 <__ieee754_acosf+0x1b8>
 80105a0:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 80106a0 <__ieee754_acosf+0x1c0>
 80105a4:	eddf ba3f 	vldr	s23, [pc, #252]	@ 80106a4 <__ieee754_acosf+0x1c4>
 80105a8:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 80106a8 <__ieee754_acosf+0x1c8>
 80105ac:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 80106ac <__ieee754_acosf+0x1cc>
 80105b0:	ed9f da3f 	vldr	s26, [pc, #252]	@ 80106b0 <__ieee754_acosf+0x1d0>
 80105b4:	eddf aa39 	vldr	s21, [pc, #228]	@ 801069c <__ieee754_acosf+0x1bc>
 80105b8:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 80106b4 <__ieee754_acosf+0x1d4>
 80105bc:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 80106b8 <__ieee754_acosf+0x1d8>
 80105c0:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 80105c4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80105c8:	da28      	bge.n	801061c <__ieee754_acosf+0x13c>
 80105ca:	ee30 8a09 	vadd.f32	s16, s0, s18
 80105ce:	ee28 0a27 	vmul.f32	s0, s16, s15
 80105d2:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80105d6:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80105da:	eeac ca80 	vfma.f32	s24, s25, s0
 80105de:	eeaa aa80 	vfma.f32	s20, s21, s0
 80105e2:	eeec ba00 	vfma.f32	s23, s24, s0
 80105e6:	eeea 9a00 	vfma.f32	s19, s20, s0
 80105ea:	eeab ba80 	vfma.f32	s22, s23, s0
 80105ee:	eea9 9a80 	vfma.f32	s18, s19, s0
 80105f2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80105f6:	ee68 8a80 	vmul.f32	s17, s17, s0
 80105fa:	f7fe fe59 	bl	800f2b0 <__ieee754_sqrtf>
 80105fe:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8010602:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80106c4 <__ieee754_acosf+0x1e4>
 8010606:	eee0 7a07 	vfma.f32	s15, s0, s14
 801060a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801060e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010612:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 80106c8 <__ieee754_acosf+0x1e8>
 8010616:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801061a:	e773      	b.n	8010504 <__ieee754_acosf+0x24>
 801061c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8010620:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010624:	eeb0 0a48 	vmov.f32	s0, s16
 8010628:	f7fe fe42 	bl	800f2b0 <__ieee754_sqrtf>
 801062c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8010630:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8010634:	eeac ca88 	vfma.f32	s24, s25, s16
 8010638:	eeaa aa88 	vfma.f32	s20, s21, s16
 801063c:	eeec ba08 	vfma.f32	s23, s24, s16
 8010640:	ee10 3a10 	vmov	r3, s0
 8010644:	eeab ba88 	vfma.f32	s22, s23, s16
 8010648:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801064c:	f023 030f 	bic.w	r3, r3, #15
 8010650:	eeea 9a08 	vfma.f32	s19, s20, s16
 8010654:	ee07 3a90 	vmov	s15, r3
 8010658:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801065c:	eeb0 6a48 	vmov.f32	s12, s16
 8010660:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8010664:	eea9 9a88 	vfma.f32	s18, s19, s16
 8010668:	ee70 6a27 	vadd.f32	s13, s0, s15
 801066c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8010670:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8010674:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8010678:	eea0 7a26 	vfma.f32	s14, s0, s13
 801067c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8010680:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010684:	e73e      	b.n	8010504 <__ieee754_acosf+0x24>
 8010686:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80106cc <__ieee754_acosf+0x1ec>
 801068a:	e73b      	b.n	8010504 <__ieee754_acosf+0x24>
 801068c:	40490fdb 	.word	0x40490fdb
 8010690:	00000000 	.word	0x00000000
 8010694:	3811ef08 	.word	0x3811ef08
 8010698:	3a4f7f04 	.word	0x3a4f7f04
 801069c:	bf303361 	.word	0xbf303361
 80106a0:	bd241146 	.word	0xbd241146
 80106a4:	3e4e0aa8 	.word	0x3e4e0aa8
 80106a8:	bea6b090 	.word	0xbea6b090
 80106ac:	3e2aaaab 	.word	0x3e2aaaab
 80106b0:	3d9dc62e 	.word	0x3d9dc62e
 80106b4:	4001572d 	.word	0x4001572d
 80106b8:	c019d139 	.word	0xc019d139
 80106bc:	33a22168 	.word	0x33a22168
 80106c0:	3fc90fda 	.word	0x3fc90fda
 80106c4:	b3a22168 	.word	0xb3a22168
 80106c8:	40490fda 	.word	0x40490fda
 80106cc:	3fc90fdb 	.word	0x3fc90fdb

080106d0 <__ieee754_asinf>:
 80106d0:	b538      	push	{r3, r4, r5, lr}
 80106d2:	ee10 5a10 	vmov	r5, s0
 80106d6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80106da:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 80106de:	ed2d 8b04 	vpush	{d8-d9}
 80106e2:	d10c      	bne.n	80106fe <__ieee754_asinf+0x2e>
 80106e4:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 801085c <__ieee754_asinf+0x18c>
 80106e8:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8010860 <__ieee754_asinf+0x190>
 80106ec:	ee60 7a27 	vmul.f32	s15, s0, s15
 80106f0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80106f4:	eeb0 0a67 	vmov.f32	s0, s15
 80106f8:	ecbd 8b04 	vpop	{d8-d9}
 80106fc:	bd38      	pop	{r3, r4, r5, pc}
 80106fe:	d904      	bls.n	801070a <__ieee754_asinf+0x3a>
 8010700:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010704:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010708:	e7f6      	b.n	80106f8 <__ieee754_asinf+0x28>
 801070a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801070e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8010712:	d20b      	bcs.n	801072c <__ieee754_asinf+0x5c>
 8010714:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8010718:	d252      	bcs.n	80107c0 <__ieee754_asinf+0xf0>
 801071a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8010864 <__ieee754_asinf+0x194>
 801071e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8010722:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801072a:	dce5      	bgt.n	80106f8 <__ieee754_asinf+0x28>
 801072c:	f7fe fc78 	bl	800f020 <fabsf>
 8010730:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8010734:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010738:	ee28 8a27 	vmul.f32	s16, s16, s15
 801073c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8010868 <__ieee754_asinf+0x198>
 8010740:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 801086c <__ieee754_asinf+0x19c>
 8010744:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8010870 <__ieee754_asinf+0x1a0>
 8010748:	eea8 7a27 	vfma.f32	s14, s16, s15
 801074c:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8010874 <__ieee754_asinf+0x1a4>
 8010750:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010754:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8010878 <__ieee754_asinf+0x1a8>
 8010758:	eea7 7a88 	vfma.f32	s14, s15, s16
 801075c:	eddf 7a47 	vldr	s15, [pc, #284]	@ 801087c <__ieee754_asinf+0x1ac>
 8010760:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010764:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8010880 <__ieee754_asinf+0x1b0>
 8010768:	eea7 9a88 	vfma.f32	s18, s15, s16
 801076c:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8010884 <__ieee754_asinf+0x1b4>
 8010770:	eee8 7a07 	vfma.f32	s15, s16, s14
 8010774:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8010888 <__ieee754_asinf+0x1b8>
 8010778:	eea7 7a88 	vfma.f32	s14, s15, s16
 801077c:	eddf 7a43 	vldr	s15, [pc, #268]	@ 801088c <__ieee754_asinf+0x1bc>
 8010780:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010784:	eeb0 0a48 	vmov.f32	s0, s16
 8010788:	eee7 8a88 	vfma.f32	s17, s15, s16
 801078c:	f7fe fd90 	bl	800f2b0 <__ieee754_sqrtf>
 8010790:	4b3f      	ldr	r3, [pc, #252]	@ (8010890 <__ieee754_asinf+0x1c0>)
 8010792:	ee29 9a08 	vmul.f32	s18, s18, s16
 8010796:	429c      	cmp	r4, r3
 8010798:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801079c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80107a0:	d93d      	bls.n	801081e <__ieee754_asinf+0x14e>
 80107a2:	eea0 0a06 	vfma.f32	s0, s0, s12
 80107a6:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8010894 <__ieee754_asinf+0x1c4>
 80107aa:	eee0 7a26 	vfma.f32	s15, s0, s13
 80107ae:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8010860 <__ieee754_asinf+0x190>
 80107b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80107b6:	2d00      	cmp	r5, #0
 80107b8:	bfd8      	it	le
 80107ba:	eeb1 0a40 	vnegle.f32	s0, s0
 80107be:	e79b      	b.n	80106f8 <__ieee754_asinf+0x28>
 80107c0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80107c4:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801086c <__ieee754_asinf+0x19c>
 80107c8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8010868 <__ieee754_asinf+0x198>
 80107cc:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8010880 <__ieee754_asinf+0x1b0>
 80107d0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80107d4:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8010874 <__ieee754_asinf+0x1a4>
 80107d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80107dc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8010878 <__ieee754_asinf+0x1a8>
 80107e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80107e4:	eddf 6a25 	vldr	s13, [pc, #148]	@ 801087c <__ieee754_asinf+0x1ac>
 80107e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80107ec:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8010870 <__ieee754_asinf+0x1a0>
 80107f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80107f4:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8010884 <__ieee754_asinf+0x1b4>
 80107f8:	eee7 6a86 	vfma.f32	s13, s15, s12
 80107fc:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8010888 <__ieee754_asinf+0x1b8>
 8010800:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010804:	eddf 6a21 	vldr	s13, [pc, #132]	@ 801088c <__ieee754_asinf+0x1bc>
 8010808:	eee6 6a27 	vfma.f32	s13, s12, s15
 801080c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010810:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8010814:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8010818:	eea0 0a27 	vfma.f32	s0, s0, s15
 801081c:	e76c      	b.n	80106f8 <__ieee754_asinf+0x28>
 801081e:	ee10 3a10 	vmov	r3, s0
 8010822:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8010826:	f023 030f 	bic.w	r3, r3, #15
 801082a:	ee07 3a10 	vmov	s14, r3
 801082e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8010832:	ee70 5a00 	vadd.f32	s11, s0, s0
 8010836:	ee30 0a07 	vadd.f32	s0, s0, s14
 801083a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801085c <__ieee754_asinf+0x18c>
 801083e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8010842:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8010898 <__ieee754_asinf+0x1c8>
 8010846:	eee5 7a66 	vfms.f32	s15, s10, s13
 801084a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801084e:	eeb0 6a40 	vmov.f32	s12, s0
 8010852:	eea7 6a66 	vfms.f32	s12, s14, s13
 8010856:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801085a:	e7aa      	b.n	80107b2 <__ieee754_asinf+0xe2>
 801085c:	b33bbd2e 	.word	0xb33bbd2e
 8010860:	3fc90fdb 	.word	0x3fc90fdb
 8010864:	7149f2ca 	.word	0x7149f2ca
 8010868:	3a4f7f04 	.word	0x3a4f7f04
 801086c:	3811ef08 	.word	0x3811ef08
 8010870:	3e2aaaab 	.word	0x3e2aaaab
 8010874:	bd241146 	.word	0xbd241146
 8010878:	3e4e0aa8 	.word	0x3e4e0aa8
 801087c:	bea6b090 	.word	0xbea6b090
 8010880:	3d9dc62e 	.word	0x3d9dc62e
 8010884:	bf303361 	.word	0xbf303361
 8010888:	4001572d 	.word	0x4001572d
 801088c:	c019d139 	.word	0xc019d139
 8010890:	3f799999 	.word	0x3f799999
 8010894:	333bbd2e 	.word	0x333bbd2e
 8010898:	3f490fdb 	.word	0x3f490fdb

0801089c <__ieee754_atan2f>:
 801089c:	ee10 2a90 	vmov	r2, s1
 80108a0:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80108a4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80108a8:	b510      	push	{r4, lr}
 80108aa:	eef0 7a40 	vmov.f32	s15, s0
 80108ae:	d806      	bhi.n	80108be <__ieee754_atan2f+0x22>
 80108b0:	ee10 0a10 	vmov	r0, s0
 80108b4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80108b8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80108bc:	d904      	bls.n	80108c8 <__ieee754_atan2f+0x2c>
 80108be:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80108c2:	eeb0 0a67 	vmov.f32	s0, s15
 80108c6:	bd10      	pop	{r4, pc}
 80108c8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80108cc:	d103      	bne.n	80108d6 <__ieee754_atan2f+0x3a>
 80108ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108d2:	f000 b883 	b.w	80109dc <atanf>
 80108d6:	1794      	asrs	r4, r2, #30
 80108d8:	f004 0402 	and.w	r4, r4, #2
 80108dc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80108e0:	b943      	cbnz	r3, 80108f4 <__ieee754_atan2f+0x58>
 80108e2:	2c02      	cmp	r4, #2
 80108e4:	d05e      	beq.n	80109a4 <__ieee754_atan2f+0x108>
 80108e6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80109b8 <__ieee754_atan2f+0x11c>
 80108ea:	2c03      	cmp	r4, #3
 80108ec:	bf08      	it	eq
 80108ee:	eef0 7a47 	vmoveq.f32	s15, s14
 80108f2:	e7e6      	b.n	80108c2 <__ieee754_atan2f+0x26>
 80108f4:	b941      	cbnz	r1, 8010908 <__ieee754_atan2f+0x6c>
 80108f6:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80109bc <__ieee754_atan2f+0x120>
 80108fa:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80109c0 <__ieee754_atan2f+0x124>
 80108fe:	2800      	cmp	r0, #0
 8010900:	bfb8      	it	lt
 8010902:	eef0 7a47 	vmovlt.f32	s15, s14
 8010906:	e7dc      	b.n	80108c2 <__ieee754_atan2f+0x26>
 8010908:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801090c:	d110      	bne.n	8010930 <__ieee754_atan2f+0x94>
 801090e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010912:	f104 34ff 	add.w	r4, r4, #4294967295
 8010916:	d107      	bne.n	8010928 <__ieee754_atan2f+0x8c>
 8010918:	2c02      	cmp	r4, #2
 801091a:	d846      	bhi.n	80109aa <__ieee754_atan2f+0x10e>
 801091c:	4b29      	ldr	r3, [pc, #164]	@ (80109c4 <__ieee754_atan2f+0x128>)
 801091e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010922:	edd3 7a00 	vldr	s15, [r3]
 8010926:	e7cc      	b.n	80108c2 <__ieee754_atan2f+0x26>
 8010928:	2c02      	cmp	r4, #2
 801092a:	d841      	bhi.n	80109b0 <__ieee754_atan2f+0x114>
 801092c:	4b26      	ldr	r3, [pc, #152]	@ (80109c8 <__ieee754_atan2f+0x12c>)
 801092e:	e7f6      	b.n	801091e <__ieee754_atan2f+0x82>
 8010930:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010934:	d0df      	beq.n	80108f6 <__ieee754_atan2f+0x5a>
 8010936:	1a5b      	subs	r3, r3, r1
 8010938:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 801093c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010940:	da1a      	bge.n	8010978 <__ieee754_atan2f+0xdc>
 8010942:	2a00      	cmp	r2, #0
 8010944:	da01      	bge.n	801094a <__ieee754_atan2f+0xae>
 8010946:	313c      	adds	r1, #60	@ 0x3c
 8010948:	db19      	blt.n	801097e <__ieee754_atan2f+0xe2>
 801094a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801094e:	f7fe fb67 	bl	800f020 <fabsf>
 8010952:	f000 f843 	bl	80109dc <atanf>
 8010956:	eef0 7a40 	vmov.f32	s15, s0
 801095a:	2c01      	cmp	r4, #1
 801095c:	d012      	beq.n	8010984 <__ieee754_atan2f+0xe8>
 801095e:	2c02      	cmp	r4, #2
 8010960:	d017      	beq.n	8010992 <__ieee754_atan2f+0xf6>
 8010962:	2c00      	cmp	r4, #0
 8010964:	d0ad      	beq.n	80108c2 <__ieee754_atan2f+0x26>
 8010966:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80109cc <__ieee754_atan2f+0x130>
 801096a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801096e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80109d0 <__ieee754_atan2f+0x134>
 8010972:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010976:	e7a4      	b.n	80108c2 <__ieee754_atan2f+0x26>
 8010978:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80109bc <__ieee754_atan2f+0x120>
 801097c:	e7ed      	b.n	801095a <__ieee754_atan2f+0xbe>
 801097e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80109d4 <__ieee754_atan2f+0x138>
 8010982:	e7ea      	b.n	801095a <__ieee754_atan2f+0xbe>
 8010984:	ee17 3a90 	vmov	r3, s15
 8010988:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801098c:	ee07 3a90 	vmov	s15, r3
 8010990:	e797      	b.n	80108c2 <__ieee754_atan2f+0x26>
 8010992:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80109cc <__ieee754_atan2f+0x130>
 8010996:	ee77 7a87 	vadd.f32	s15, s15, s14
 801099a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80109d0 <__ieee754_atan2f+0x134>
 801099e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80109a2:	e78e      	b.n	80108c2 <__ieee754_atan2f+0x26>
 80109a4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80109d0 <__ieee754_atan2f+0x134>
 80109a8:	e78b      	b.n	80108c2 <__ieee754_atan2f+0x26>
 80109aa:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80109d8 <__ieee754_atan2f+0x13c>
 80109ae:	e788      	b.n	80108c2 <__ieee754_atan2f+0x26>
 80109b0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80109d4 <__ieee754_atan2f+0x138>
 80109b4:	e785      	b.n	80108c2 <__ieee754_atan2f+0x26>
 80109b6:	bf00      	nop
 80109b8:	c0490fdb 	.word	0xc0490fdb
 80109bc:	3fc90fdb 	.word	0x3fc90fdb
 80109c0:	bfc90fdb 	.word	0xbfc90fdb
 80109c4:	08011a2c 	.word	0x08011a2c
 80109c8:	08011a20 	.word	0x08011a20
 80109cc:	33bbbd2e 	.word	0x33bbbd2e
 80109d0:	40490fdb 	.word	0x40490fdb
 80109d4:	00000000 	.word	0x00000000
 80109d8:	3f490fdb 	.word	0x3f490fdb

080109dc <atanf>:
 80109dc:	b538      	push	{r3, r4, r5, lr}
 80109de:	ee10 5a10 	vmov	r5, s0
 80109e2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80109e6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80109ea:	eef0 7a40 	vmov.f32	s15, s0
 80109ee:	d310      	bcc.n	8010a12 <atanf+0x36>
 80109f0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80109f4:	d904      	bls.n	8010a00 <atanf+0x24>
 80109f6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80109fa:	eeb0 0a67 	vmov.f32	s0, s15
 80109fe:	bd38      	pop	{r3, r4, r5, pc}
 8010a00:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8010b38 <atanf+0x15c>
 8010a04:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8010b3c <atanf+0x160>
 8010a08:	2d00      	cmp	r5, #0
 8010a0a:	bfc8      	it	gt
 8010a0c:	eef0 7a47 	vmovgt.f32	s15, s14
 8010a10:	e7f3      	b.n	80109fa <atanf+0x1e>
 8010a12:	4b4b      	ldr	r3, [pc, #300]	@ (8010b40 <atanf+0x164>)
 8010a14:	429c      	cmp	r4, r3
 8010a16:	d810      	bhi.n	8010a3a <atanf+0x5e>
 8010a18:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8010a1c:	d20a      	bcs.n	8010a34 <atanf+0x58>
 8010a1e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8010b44 <atanf+0x168>
 8010a22:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010a2a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a32:	dce2      	bgt.n	80109fa <atanf+0x1e>
 8010a34:	f04f 33ff 	mov.w	r3, #4294967295
 8010a38:	e013      	b.n	8010a62 <atanf+0x86>
 8010a3a:	f7fe faf1 	bl	800f020 <fabsf>
 8010a3e:	4b42      	ldr	r3, [pc, #264]	@ (8010b48 <atanf+0x16c>)
 8010a40:	429c      	cmp	r4, r3
 8010a42:	d84f      	bhi.n	8010ae4 <atanf+0x108>
 8010a44:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8010a48:	429c      	cmp	r4, r3
 8010a4a:	d841      	bhi.n	8010ad0 <atanf+0xf4>
 8010a4c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8010a50:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010a54:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010a58:	2300      	movs	r3, #0
 8010a5a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010a5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010a62:	1c5a      	adds	r2, r3, #1
 8010a64:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010a68:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8010b4c <atanf+0x170>
 8010a6c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8010b50 <atanf+0x174>
 8010a70:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8010b54 <atanf+0x178>
 8010a74:	ee66 6a06 	vmul.f32	s13, s12, s12
 8010a78:	eee6 5a87 	vfma.f32	s11, s13, s14
 8010a7c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8010b58 <atanf+0x17c>
 8010a80:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010a84:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8010b5c <atanf+0x180>
 8010a88:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010a8c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010b60 <atanf+0x184>
 8010a90:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010a94:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010b64 <atanf+0x188>
 8010a98:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010a9c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8010b68 <atanf+0x18c>
 8010aa0:	eea6 5a87 	vfma.f32	s10, s13, s14
 8010aa4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010b6c <atanf+0x190>
 8010aa8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010aac:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8010b70 <atanf+0x194>
 8010ab0:	eea7 5a26 	vfma.f32	s10, s14, s13
 8010ab4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8010b74 <atanf+0x198>
 8010ab8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010abc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010ac0:	eea5 7a86 	vfma.f32	s14, s11, s12
 8010ac4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010ac8:	d121      	bne.n	8010b0e <atanf+0x132>
 8010aca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010ace:	e794      	b.n	80109fa <atanf+0x1e>
 8010ad0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010ad4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010ad8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010adc:	2301      	movs	r3, #1
 8010ade:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010ae2:	e7be      	b.n	8010a62 <atanf+0x86>
 8010ae4:	4b24      	ldr	r3, [pc, #144]	@ (8010b78 <atanf+0x19c>)
 8010ae6:	429c      	cmp	r4, r3
 8010ae8:	d80b      	bhi.n	8010b02 <atanf+0x126>
 8010aea:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8010aee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010af2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010af6:	2302      	movs	r3, #2
 8010af8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010afc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010b00:	e7af      	b.n	8010a62 <atanf+0x86>
 8010b02:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010b06:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010b0a:	2303      	movs	r3, #3
 8010b0c:	e7a9      	b.n	8010a62 <atanf+0x86>
 8010b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8010b7c <atanf+0x1a0>)
 8010b10:	491b      	ldr	r1, [pc, #108]	@ (8010b80 <atanf+0x1a4>)
 8010b12:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010b16:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010b1a:	edd3 6a00 	vldr	s13, [r3]
 8010b1e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010b22:	2d00      	cmp	r5, #0
 8010b24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010b28:	edd2 7a00 	vldr	s15, [r2]
 8010b2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010b30:	bfb8      	it	lt
 8010b32:	eef1 7a67 	vneglt.f32	s15, s15
 8010b36:	e760      	b.n	80109fa <atanf+0x1e>
 8010b38:	bfc90fdb 	.word	0xbfc90fdb
 8010b3c:	3fc90fdb 	.word	0x3fc90fdb
 8010b40:	3edfffff 	.word	0x3edfffff
 8010b44:	7149f2ca 	.word	0x7149f2ca
 8010b48:	3f97ffff 	.word	0x3f97ffff
 8010b4c:	3c8569d7 	.word	0x3c8569d7
 8010b50:	3d4bda59 	.word	0x3d4bda59
 8010b54:	bd6ef16b 	.word	0xbd6ef16b
 8010b58:	3d886b35 	.word	0x3d886b35
 8010b5c:	3dba2e6e 	.word	0x3dba2e6e
 8010b60:	3e124925 	.word	0x3e124925
 8010b64:	3eaaaaab 	.word	0x3eaaaaab
 8010b68:	bd15a221 	.word	0xbd15a221
 8010b6c:	bd9d8795 	.word	0xbd9d8795
 8010b70:	bde38e38 	.word	0xbde38e38
 8010b74:	be4ccccd 	.word	0xbe4ccccd
 8010b78:	401bffff 	.word	0x401bffff
 8010b7c:	08011a48 	.word	0x08011a48
 8010b80:	08011a38 	.word	0x08011a38
 8010b84:	00000000 	.word	0x00000000

08010b88 <scalbn>:
 8010b88:	b570      	push	{r4, r5, r6, lr}
 8010b8a:	ec55 4b10 	vmov	r4, r5, d0
 8010b8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010b92:	4606      	mov	r6, r0
 8010b94:	462b      	mov	r3, r5
 8010b96:	b991      	cbnz	r1, 8010bbe <scalbn+0x36>
 8010b98:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010b9c:	4323      	orrs	r3, r4
 8010b9e:	d03d      	beq.n	8010c1c <scalbn+0x94>
 8010ba0:	4b35      	ldr	r3, [pc, #212]	@ (8010c78 <scalbn+0xf0>)
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	4629      	mov	r1, r5
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	f7ef fd46 	bl	8000638 <__aeabi_dmul>
 8010bac:	4b33      	ldr	r3, [pc, #204]	@ (8010c7c <scalbn+0xf4>)
 8010bae:	429e      	cmp	r6, r3
 8010bb0:	4604      	mov	r4, r0
 8010bb2:	460d      	mov	r5, r1
 8010bb4:	da0f      	bge.n	8010bd6 <scalbn+0x4e>
 8010bb6:	a328      	add	r3, pc, #160	@ (adr r3, 8010c58 <scalbn+0xd0>)
 8010bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bbc:	e01e      	b.n	8010bfc <scalbn+0x74>
 8010bbe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010bc2:	4291      	cmp	r1, r2
 8010bc4:	d10b      	bne.n	8010bde <scalbn+0x56>
 8010bc6:	4622      	mov	r2, r4
 8010bc8:	4620      	mov	r0, r4
 8010bca:	4629      	mov	r1, r5
 8010bcc:	f7ef fb7e 	bl	80002cc <__adddf3>
 8010bd0:	4604      	mov	r4, r0
 8010bd2:	460d      	mov	r5, r1
 8010bd4:	e022      	b.n	8010c1c <scalbn+0x94>
 8010bd6:	460b      	mov	r3, r1
 8010bd8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010bdc:	3936      	subs	r1, #54	@ 0x36
 8010bde:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010be2:	4296      	cmp	r6, r2
 8010be4:	dd0d      	ble.n	8010c02 <scalbn+0x7a>
 8010be6:	2d00      	cmp	r5, #0
 8010be8:	a11d      	add	r1, pc, #116	@ (adr r1, 8010c60 <scalbn+0xd8>)
 8010bea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bee:	da02      	bge.n	8010bf6 <scalbn+0x6e>
 8010bf0:	a11d      	add	r1, pc, #116	@ (adr r1, 8010c68 <scalbn+0xe0>)
 8010bf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bf6:	a31a      	add	r3, pc, #104	@ (adr r3, 8010c60 <scalbn+0xd8>)
 8010bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bfc:	f7ef fd1c 	bl	8000638 <__aeabi_dmul>
 8010c00:	e7e6      	b.n	8010bd0 <scalbn+0x48>
 8010c02:	1872      	adds	r2, r6, r1
 8010c04:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010c08:	428a      	cmp	r2, r1
 8010c0a:	dcec      	bgt.n	8010be6 <scalbn+0x5e>
 8010c0c:	2a00      	cmp	r2, #0
 8010c0e:	dd08      	ble.n	8010c22 <scalbn+0x9a>
 8010c10:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010c14:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010c18:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010c1c:	ec45 4b10 	vmov	d0, r4, r5
 8010c20:	bd70      	pop	{r4, r5, r6, pc}
 8010c22:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010c26:	da08      	bge.n	8010c3a <scalbn+0xb2>
 8010c28:	2d00      	cmp	r5, #0
 8010c2a:	a10b      	add	r1, pc, #44	@ (adr r1, 8010c58 <scalbn+0xd0>)
 8010c2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c30:	dac1      	bge.n	8010bb6 <scalbn+0x2e>
 8010c32:	a10f      	add	r1, pc, #60	@ (adr r1, 8010c70 <scalbn+0xe8>)
 8010c34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c38:	e7bd      	b.n	8010bb6 <scalbn+0x2e>
 8010c3a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010c3e:	3236      	adds	r2, #54	@ 0x36
 8010c40:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010c44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010c48:	4620      	mov	r0, r4
 8010c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8010c80 <scalbn+0xf8>)
 8010c4c:	4629      	mov	r1, r5
 8010c4e:	2200      	movs	r2, #0
 8010c50:	e7d4      	b.n	8010bfc <scalbn+0x74>
 8010c52:	bf00      	nop
 8010c54:	f3af 8000 	nop.w
 8010c58:	c2f8f359 	.word	0xc2f8f359
 8010c5c:	01a56e1f 	.word	0x01a56e1f
 8010c60:	8800759c 	.word	0x8800759c
 8010c64:	7e37e43c 	.word	0x7e37e43c
 8010c68:	8800759c 	.word	0x8800759c
 8010c6c:	fe37e43c 	.word	0xfe37e43c
 8010c70:	c2f8f359 	.word	0xc2f8f359
 8010c74:	81a56e1f 	.word	0x81a56e1f
 8010c78:	43500000 	.word	0x43500000
 8010c7c:	ffff3cb0 	.word	0xffff3cb0
 8010c80:	3c900000 	.word	0x3c900000

08010c84 <with_errno>:
 8010c84:	b510      	push	{r4, lr}
 8010c86:	ed2d 8b02 	vpush	{d8}
 8010c8a:	eeb0 8a40 	vmov.f32	s16, s0
 8010c8e:	eef0 8a60 	vmov.f32	s17, s1
 8010c92:	4604      	mov	r4, r0
 8010c94:	f7fc f98a 	bl	800cfac <__errno>
 8010c98:	eeb0 0a48 	vmov.f32	s0, s16
 8010c9c:	eef0 0a68 	vmov.f32	s1, s17
 8010ca0:	ecbd 8b02 	vpop	{d8}
 8010ca4:	6004      	str	r4, [r0, #0]
 8010ca6:	bd10      	pop	{r4, pc}

08010ca8 <xflow>:
 8010ca8:	4603      	mov	r3, r0
 8010caa:	b507      	push	{r0, r1, r2, lr}
 8010cac:	ec51 0b10 	vmov	r0, r1, d0
 8010cb0:	b183      	cbz	r3, 8010cd4 <xflow+0x2c>
 8010cb2:	4602      	mov	r2, r0
 8010cb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010cb8:	e9cd 2300 	strd	r2, r3, [sp]
 8010cbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010cc0:	f7ef fcba 	bl	8000638 <__aeabi_dmul>
 8010cc4:	ec41 0b10 	vmov	d0, r0, r1
 8010cc8:	2022      	movs	r0, #34	@ 0x22
 8010cca:	b003      	add	sp, #12
 8010ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010cd0:	f7ff bfd8 	b.w	8010c84 <with_errno>
 8010cd4:	4602      	mov	r2, r0
 8010cd6:	460b      	mov	r3, r1
 8010cd8:	e7ee      	b.n	8010cb8 <xflow+0x10>
 8010cda:	0000      	movs	r0, r0
 8010cdc:	0000      	movs	r0, r0
	...

08010ce0 <__math_uflow>:
 8010ce0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010ce8 <__math_uflow+0x8>
 8010ce4:	f7ff bfe0 	b.w	8010ca8 <xflow>
 8010ce8:	00000000 	.word	0x00000000
 8010cec:	10000000 	.word	0x10000000

08010cf0 <__math_oflow>:
 8010cf0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010cf8 <__math_oflow+0x8>
 8010cf4:	f7ff bfd8 	b.w	8010ca8 <xflow>
 8010cf8:	00000000 	.word	0x00000000
 8010cfc:	70000000 	.word	0x70000000

08010d00 <__kernel_rem_pio2>:
 8010d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d04:	ed2d 8b02 	vpush	{d8}
 8010d08:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8010d0c:	f112 0f14 	cmn.w	r2, #20
 8010d10:	9306      	str	r3, [sp, #24]
 8010d12:	9104      	str	r1, [sp, #16]
 8010d14:	4bbe      	ldr	r3, [pc, #760]	@ (8011010 <__kernel_rem_pio2+0x310>)
 8010d16:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8010d18:	9008      	str	r0, [sp, #32]
 8010d1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d1e:	9300      	str	r3, [sp, #0]
 8010d20:	9b06      	ldr	r3, [sp, #24]
 8010d22:	f103 33ff 	add.w	r3, r3, #4294967295
 8010d26:	bfa8      	it	ge
 8010d28:	1ed4      	subge	r4, r2, #3
 8010d2a:	9305      	str	r3, [sp, #20]
 8010d2c:	bfb2      	itee	lt
 8010d2e:	2400      	movlt	r4, #0
 8010d30:	2318      	movge	r3, #24
 8010d32:	fb94 f4f3 	sdivge	r4, r4, r3
 8010d36:	f06f 0317 	mvn.w	r3, #23
 8010d3a:	fb04 3303 	mla	r3, r4, r3, r3
 8010d3e:	eb03 0b02 	add.w	fp, r3, r2
 8010d42:	9b00      	ldr	r3, [sp, #0]
 8010d44:	9a05      	ldr	r2, [sp, #20]
 8010d46:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8011000 <__kernel_rem_pio2+0x300>
 8010d4a:	eb03 0802 	add.w	r8, r3, r2
 8010d4e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010d50:	1aa7      	subs	r7, r4, r2
 8010d52:	ae20      	add	r6, sp, #128	@ 0x80
 8010d54:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010d58:	2500      	movs	r5, #0
 8010d5a:	4545      	cmp	r5, r8
 8010d5c:	dd13      	ble.n	8010d86 <__kernel_rem_pio2+0x86>
 8010d5e:	9b06      	ldr	r3, [sp, #24]
 8010d60:	aa20      	add	r2, sp, #128	@ 0x80
 8010d62:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010d66:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8010d6a:	f04f 0800 	mov.w	r8, #0
 8010d6e:	9b00      	ldr	r3, [sp, #0]
 8010d70:	4598      	cmp	r8, r3
 8010d72:	dc31      	bgt.n	8010dd8 <__kernel_rem_pio2+0xd8>
 8010d74:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8011000 <__kernel_rem_pio2+0x300>
 8010d78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010d7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d80:	462f      	mov	r7, r5
 8010d82:	2600      	movs	r6, #0
 8010d84:	e01b      	b.n	8010dbe <__kernel_rem_pio2+0xbe>
 8010d86:	42ef      	cmn	r7, r5
 8010d88:	d407      	bmi.n	8010d9a <__kernel_rem_pio2+0x9a>
 8010d8a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010d8e:	f7ef fbe9 	bl	8000564 <__aeabi_i2d>
 8010d92:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010d96:	3501      	adds	r5, #1
 8010d98:	e7df      	b.n	8010d5a <__kernel_rem_pio2+0x5a>
 8010d9a:	ec51 0b18 	vmov	r0, r1, d8
 8010d9e:	e7f8      	b.n	8010d92 <__kernel_rem_pio2+0x92>
 8010da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010da4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010da8:	f7ef fc46 	bl	8000638 <__aeabi_dmul>
 8010dac:	4602      	mov	r2, r0
 8010dae:	460b      	mov	r3, r1
 8010db0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010db4:	f7ef fa8a 	bl	80002cc <__adddf3>
 8010db8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010dbc:	3601      	adds	r6, #1
 8010dbe:	9b05      	ldr	r3, [sp, #20]
 8010dc0:	429e      	cmp	r6, r3
 8010dc2:	f1a7 0708 	sub.w	r7, r7, #8
 8010dc6:	ddeb      	ble.n	8010da0 <__kernel_rem_pio2+0xa0>
 8010dc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010dcc:	f108 0801 	add.w	r8, r8, #1
 8010dd0:	ecaa 7b02 	vstmia	sl!, {d7}
 8010dd4:	3508      	adds	r5, #8
 8010dd6:	e7ca      	b.n	8010d6e <__kernel_rem_pio2+0x6e>
 8010dd8:	9b00      	ldr	r3, [sp, #0]
 8010dda:	f8dd 8000 	ldr.w	r8, [sp]
 8010dde:	aa0c      	add	r2, sp, #48	@ 0x30
 8010de0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010de4:	930a      	str	r3, [sp, #40]	@ 0x28
 8010de6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010de8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010dec:	9309      	str	r3, [sp, #36]	@ 0x24
 8010dee:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8010df2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010df4:	ab98      	add	r3, sp, #608	@ 0x260
 8010df6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010dfa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8010dfe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010e02:	ac0c      	add	r4, sp, #48	@ 0x30
 8010e04:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010e06:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8010e0a:	46a1      	mov	r9, r4
 8010e0c:	46c2      	mov	sl, r8
 8010e0e:	f1ba 0f00 	cmp.w	sl, #0
 8010e12:	f1a5 0508 	sub.w	r5, r5, #8
 8010e16:	dc77      	bgt.n	8010f08 <__kernel_rem_pio2+0x208>
 8010e18:	4658      	mov	r0, fp
 8010e1a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8010e1e:	f7ff feb3 	bl	8010b88 <scalbn>
 8010e22:	ec57 6b10 	vmov	r6, r7, d0
 8010e26:	2200      	movs	r2, #0
 8010e28:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8010e2c:	4630      	mov	r0, r6
 8010e2e:	4639      	mov	r1, r7
 8010e30:	f7ef fc02 	bl	8000638 <__aeabi_dmul>
 8010e34:	ec41 0b10 	vmov	d0, r0, r1
 8010e38:	f000 faba 	bl	80113b0 <floor>
 8010e3c:	4b75      	ldr	r3, [pc, #468]	@ (8011014 <__kernel_rem_pio2+0x314>)
 8010e3e:	ec51 0b10 	vmov	r0, r1, d0
 8010e42:	2200      	movs	r2, #0
 8010e44:	f7ef fbf8 	bl	8000638 <__aeabi_dmul>
 8010e48:	4602      	mov	r2, r0
 8010e4a:	460b      	mov	r3, r1
 8010e4c:	4630      	mov	r0, r6
 8010e4e:	4639      	mov	r1, r7
 8010e50:	f7ef fa3a 	bl	80002c8 <__aeabi_dsub>
 8010e54:	460f      	mov	r7, r1
 8010e56:	4606      	mov	r6, r0
 8010e58:	f7ef fe9e 	bl	8000b98 <__aeabi_d2iz>
 8010e5c:	9002      	str	r0, [sp, #8]
 8010e5e:	f7ef fb81 	bl	8000564 <__aeabi_i2d>
 8010e62:	4602      	mov	r2, r0
 8010e64:	460b      	mov	r3, r1
 8010e66:	4630      	mov	r0, r6
 8010e68:	4639      	mov	r1, r7
 8010e6a:	f7ef fa2d 	bl	80002c8 <__aeabi_dsub>
 8010e6e:	f1bb 0f00 	cmp.w	fp, #0
 8010e72:	4606      	mov	r6, r0
 8010e74:	460f      	mov	r7, r1
 8010e76:	dd6c      	ble.n	8010f52 <__kernel_rem_pio2+0x252>
 8010e78:	f108 31ff 	add.w	r1, r8, #4294967295
 8010e7c:	ab0c      	add	r3, sp, #48	@ 0x30
 8010e7e:	9d02      	ldr	r5, [sp, #8]
 8010e80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010e84:	f1cb 0018 	rsb	r0, fp, #24
 8010e88:	fa43 f200 	asr.w	r2, r3, r0
 8010e8c:	4415      	add	r5, r2
 8010e8e:	4082      	lsls	r2, r0
 8010e90:	1a9b      	subs	r3, r3, r2
 8010e92:	aa0c      	add	r2, sp, #48	@ 0x30
 8010e94:	9502      	str	r5, [sp, #8]
 8010e96:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010e9a:	f1cb 0217 	rsb	r2, fp, #23
 8010e9e:	fa43 f902 	asr.w	r9, r3, r2
 8010ea2:	f1b9 0f00 	cmp.w	r9, #0
 8010ea6:	dd64      	ble.n	8010f72 <__kernel_rem_pio2+0x272>
 8010ea8:	9b02      	ldr	r3, [sp, #8]
 8010eaa:	2200      	movs	r2, #0
 8010eac:	3301      	adds	r3, #1
 8010eae:	9302      	str	r3, [sp, #8]
 8010eb0:	4615      	mov	r5, r2
 8010eb2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8010eb6:	4590      	cmp	r8, r2
 8010eb8:	f300 80b8 	bgt.w	801102c <__kernel_rem_pio2+0x32c>
 8010ebc:	f1bb 0f00 	cmp.w	fp, #0
 8010ec0:	dd07      	ble.n	8010ed2 <__kernel_rem_pio2+0x1d2>
 8010ec2:	f1bb 0f01 	cmp.w	fp, #1
 8010ec6:	f000 80bf 	beq.w	8011048 <__kernel_rem_pio2+0x348>
 8010eca:	f1bb 0f02 	cmp.w	fp, #2
 8010ece:	f000 80c6 	beq.w	801105e <__kernel_rem_pio2+0x35e>
 8010ed2:	f1b9 0f02 	cmp.w	r9, #2
 8010ed6:	d14c      	bne.n	8010f72 <__kernel_rem_pio2+0x272>
 8010ed8:	4632      	mov	r2, r6
 8010eda:	463b      	mov	r3, r7
 8010edc:	494e      	ldr	r1, [pc, #312]	@ (8011018 <__kernel_rem_pio2+0x318>)
 8010ede:	2000      	movs	r0, #0
 8010ee0:	f7ef f9f2 	bl	80002c8 <__aeabi_dsub>
 8010ee4:	4606      	mov	r6, r0
 8010ee6:	460f      	mov	r7, r1
 8010ee8:	2d00      	cmp	r5, #0
 8010eea:	d042      	beq.n	8010f72 <__kernel_rem_pio2+0x272>
 8010eec:	4658      	mov	r0, fp
 8010eee:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8011008 <__kernel_rem_pio2+0x308>
 8010ef2:	f7ff fe49 	bl	8010b88 <scalbn>
 8010ef6:	4630      	mov	r0, r6
 8010ef8:	4639      	mov	r1, r7
 8010efa:	ec53 2b10 	vmov	r2, r3, d0
 8010efe:	f7ef f9e3 	bl	80002c8 <__aeabi_dsub>
 8010f02:	4606      	mov	r6, r0
 8010f04:	460f      	mov	r7, r1
 8010f06:	e034      	b.n	8010f72 <__kernel_rem_pio2+0x272>
 8010f08:	4b44      	ldr	r3, [pc, #272]	@ (801101c <__kernel_rem_pio2+0x31c>)
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f10:	f7ef fb92 	bl	8000638 <__aeabi_dmul>
 8010f14:	f7ef fe40 	bl	8000b98 <__aeabi_d2iz>
 8010f18:	f7ef fb24 	bl	8000564 <__aeabi_i2d>
 8010f1c:	4b40      	ldr	r3, [pc, #256]	@ (8011020 <__kernel_rem_pio2+0x320>)
 8010f1e:	2200      	movs	r2, #0
 8010f20:	4606      	mov	r6, r0
 8010f22:	460f      	mov	r7, r1
 8010f24:	f7ef fb88 	bl	8000638 <__aeabi_dmul>
 8010f28:	4602      	mov	r2, r0
 8010f2a:	460b      	mov	r3, r1
 8010f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f30:	f7ef f9ca 	bl	80002c8 <__aeabi_dsub>
 8010f34:	f7ef fe30 	bl	8000b98 <__aeabi_d2iz>
 8010f38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010f3c:	f849 0b04 	str.w	r0, [r9], #4
 8010f40:	4639      	mov	r1, r7
 8010f42:	4630      	mov	r0, r6
 8010f44:	f7ef f9c2 	bl	80002cc <__adddf3>
 8010f48:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f50:	e75d      	b.n	8010e0e <__kernel_rem_pio2+0x10e>
 8010f52:	d107      	bne.n	8010f64 <__kernel_rem_pio2+0x264>
 8010f54:	f108 33ff 	add.w	r3, r8, #4294967295
 8010f58:	aa0c      	add	r2, sp, #48	@ 0x30
 8010f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f5e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8010f62:	e79e      	b.n	8010ea2 <__kernel_rem_pio2+0x1a2>
 8010f64:	4b2f      	ldr	r3, [pc, #188]	@ (8011024 <__kernel_rem_pio2+0x324>)
 8010f66:	2200      	movs	r2, #0
 8010f68:	f7ef fdec 	bl	8000b44 <__aeabi_dcmpge>
 8010f6c:	2800      	cmp	r0, #0
 8010f6e:	d143      	bne.n	8010ff8 <__kernel_rem_pio2+0x2f8>
 8010f70:	4681      	mov	r9, r0
 8010f72:	2200      	movs	r2, #0
 8010f74:	2300      	movs	r3, #0
 8010f76:	4630      	mov	r0, r6
 8010f78:	4639      	mov	r1, r7
 8010f7a:	f7ef fdc5 	bl	8000b08 <__aeabi_dcmpeq>
 8010f7e:	2800      	cmp	r0, #0
 8010f80:	f000 80bf 	beq.w	8011102 <__kernel_rem_pio2+0x402>
 8010f84:	f108 33ff 	add.w	r3, r8, #4294967295
 8010f88:	2200      	movs	r2, #0
 8010f8a:	9900      	ldr	r1, [sp, #0]
 8010f8c:	428b      	cmp	r3, r1
 8010f8e:	da6e      	bge.n	801106e <__kernel_rem_pio2+0x36e>
 8010f90:	2a00      	cmp	r2, #0
 8010f92:	f000 8089 	beq.w	80110a8 <__kernel_rem_pio2+0x3a8>
 8010f96:	f108 38ff 	add.w	r8, r8, #4294967295
 8010f9a:	ab0c      	add	r3, sp, #48	@ 0x30
 8010f9c:	f1ab 0b18 	sub.w	fp, fp, #24
 8010fa0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d0f6      	beq.n	8010f96 <__kernel_rem_pio2+0x296>
 8010fa8:	4658      	mov	r0, fp
 8010faa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8011008 <__kernel_rem_pio2+0x308>
 8010fae:	f7ff fdeb 	bl	8010b88 <scalbn>
 8010fb2:	f108 0301 	add.w	r3, r8, #1
 8010fb6:	00da      	lsls	r2, r3, #3
 8010fb8:	9205      	str	r2, [sp, #20]
 8010fba:	ec55 4b10 	vmov	r4, r5, d0
 8010fbe:	aa70      	add	r2, sp, #448	@ 0x1c0
 8010fc0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801101c <__kernel_rem_pio2+0x31c>
 8010fc4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8010fc8:	4646      	mov	r6, r8
 8010fca:	f04f 0a00 	mov.w	sl, #0
 8010fce:	2e00      	cmp	r6, #0
 8010fd0:	f280 80cf 	bge.w	8011172 <__kernel_rem_pio2+0x472>
 8010fd4:	4644      	mov	r4, r8
 8010fd6:	2c00      	cmp	r4, #0
 8010fd8:	f2c0 80fd 	blt.w	80111d6 <__kernel_rem_pio2+0x4d6>
 8010fdc:	4b12      	ldr	r3, [pc, #72]	@ (8011028 <__kernel_rem_pio2+0x328>)
 8010fde:	461f      	mov	r7, r3
 8010fe0:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010fe2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010fe6:	9306      	str	r3, [sp, #24]
 8010fe8:	f04f 0a00 	mov.w	sl, #0
 8010fec:	f04f 0b00 	mov.w	fp, #0
 8010ff0:	2600      	movs	r6, #0
 8010ff2:	eba8 0504 	sub.w	r5, r8, r4
 8010ff6:	e0e2      	b.n	80111be <__kernel_rem_pio2+0x4be>
 8010ff8:	f04f 0902 	mov.w	r9, #2
 8010ffc:	e754      	b.n	8010ea8 <__kernel_rem_pio2+0x1a8>
 8010ffe:	bf00      	nop
	...
 801100c:	3ff00000 	.word	0x3ff00000
 8011010:	08011a98 	.word	0x08011a98
 8011014:	40200000 	.word	0x40200000
 8011018:	3ff00000 	.word	0x3ff00000
 801101c:	3e700000 	.word	0x3e700000
 8011020:	41700000 	.word	0x41700000
 8011024:	3fe00000 	.word	0x3fe00000
 8011028:	08011a58 	.word	0x08011a58
 801102c:	f854 3b04 	ldr.w	r3, [r4], #4
 8011030:	b945      	cbnz	r5, 8011044 <__kernel_rem_pio2+0x344>
 8011032:	b123      	cbz	r3, 801103e <__kernel_rem_pio2+0x33e>
 8011034:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8011038:	f844 3c04 	str.w	r3, [r4, #-4]
 801103c:	2301      	movs	r3, #1
 801103e:	3201      	adds	r2, #1
 8011040:	461d      	mov	r5, r3
 8011042:	e738      	b.n	8010eb6 <__kernel_rem_pio2+0x1b6>
 8011044:	1acb      	subs	r3, r1, r3
 8011046:	e7f7      	b.n	8011038 <__kernel_rem_pio2+0x338>
 8011048:	f108 32ff 	add.w	r2, r8, #4294967295
 801104c:	ab0c      	add	r3, sp, #48	@ 0x30
 801104e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011052:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011056:	a90c      	add	r1, sp, #48	@ 0x30
 8011058:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801105c:	e739      	b.n	8010ed2 <__kernel_rem_pio2+0x1d2>
 801105e:	f108 32ff 	add.w	r2, r8, #4294967295
 8011062:	ab0c      	add	r3, sp, #48	@ 0x30
 8011064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011068:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801106c:	e7f3      	b.n	8011056 <__kernel_rem_pio2+0x356>
 801106e:	a90c      	add	r1, sp, #48	@ 0x30
 8011070:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011074:	3b01      	subs	r3, #1
 8011076:	430a      	orrs	r2, r1
 8011078:	e787      	b.n	8010f8a <__kernel_rem_pio2+0x28a>
 801107a:	3401      	adds	r4, #1
 801107c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011080:	2a00      	cmp	r2, #0
 8011082:	d0fa      	beq.n	801107a <__kernel_rem_pio2+0x37a>
 8011084:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011086:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801108a:	eb0d 0503 	add.w	r5, sp, r3
 801108e:	9b06      	ldr	r3, [sp, #24]
 8011090:	aa20      	add	r2, sp, #128	@ 0x80
 8011092:	4443      	add	r3, r8
 8011094:	f108 0701 	add.w	r7, r8, #1
 8011098:	3d98      	subs	r5, #152	@ 0x98
 801109a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801109e:	4444      	add	r4, r8
 80110a0:	42bc      	cmp	r4, r7
 80110a2:	da04      	bge.n	80110ae <__kernel_rem_pio2+0x3ae>
 80110a4:	46a0      	mov	r8, r4
 80110a6:	e6a2      	b.n	8010dee <__kernel_rem_pio2+0xee>
 80110a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80110aa:	2401      	movs	r4, #1
 80110ac:	e7e6      	b.n	801107c <__kernel_rem_pio2+0x37c>
 80110ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110b0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80110b4:	f7ef fa56 	bl	8000564 <__aeabi_i2d>
 80110b8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8011380 <__kernel_rem_pio2+0x680>
 80110bc:	e8e6 0102 	strd	r0, r1, [r6], #8
 80110c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80110c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80110c8:	46b2      	mov	sl, r6
 80110ca:	f04f 0800 	mov.w	r8, #0
 80110ce:	9b05      	ldr	r3, [sp, #20]
 80110d0:	4598      	cmp	r8, r3
 80110d2:	dd05      	ble.n	80110e0 <__kernel_rem_pio2+0x3e0>
 80110d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80110d8:	3701      	adds	r7, #1
 80110da:	eca5 7b02 	vstmia	r5!, {d7}
 80110de:	e7df      	b.n	80110a0 <__kernel_rem_pio2+0x3a0>
 80110e0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80110e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80110e8:	f7ef faa6 	bl	8000638 <__aeabi_dmul>
 80110ec:	4602      	mov	r2, r0
 80110ee:	460b      	mov	r3, r1
 80110f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110f4:	f7ef f8ea 	bl	80002cc <__adddf3>
 80110f8:	f108 0801 	add.w	r8, r8, #1
 80110fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011100:	e7e5      	b.n	80110ce <__kernel_rem_pio2+0x3ce>
 8011102:	f1cb 0000 	rsb	r0, fp, #0
 8011106:	ec47 6b10 	vmov	d0, r6, r7
 801110a:	f7ff fd3d 	bl	8010b88 <scalbn>
 801110e:	ec55 4b10 	vmov	r4, r5, d0
 8011112:	4b9d      	ldr	r3, [pc, #628]	@ (8011388 <__kernel_rem_pio2+0x688>)
 8011114:	2200      	movs	r2, #0
 8011116:	4620      	mov	r0, r4
 8011118:	4629      	mov	r1, r5
 801111a:	f7ef fd13 	bl	8000b44 <__aeabi_dcmpge>
 801111e:	b300      	cbz	r0, 8011162 <__kernel_rem_pio2+0x462>
 8011120:	4b9a      	ldr	r3, [pc, #616]	@ (801138c <__kernel_rem_pio2+0x68c>)
 8011122:	2200      	movs	r2, #0
 8011124:	4620      	mov	r0, r4
 8011126:	4629      	mov	r1, r5
 8011128:	f7ef fa86 	bl	8000638 <__aeabi_dmul>
 801112c:	f7ef fd34 	bl	8000b98 <__aeabi_d2iz>
 8011130:	4606      	mov	r6, r0
 8011132:	f7ef fa17 	bl	8000564 <__aeabi_i2d>
 8011136:	4b94      	ldr	r3, [pc, #592]	@ (8011388 <__kernel_rem_pio2+0x688>)
 8011138:	2200      	movs	r2, #0
 801113a:	f7ef fa7d 	bl	8000638 <__aeabi_dmul>
 801113e:	460b      	mov	r3, r1
 8011140:	4602      	mov	r2, r0
 8011142:	4629      	mov	r1, r5
 8011144:	4620      	mov	r0, r4
 8011146:	f7ef f8bf 	bl	80002c8 <__aeabi_dsub>
 801114a:	f7ef fd25 	bl	8000b98 <__aeabi_d2iz>
 801114e:	ab0c      	add	r3, sp, #48	@ 0x30
 8011150:	f10b 0b18 	add.w	fp, fp, #24
 8011154:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011158:	f108 0801 	add.w	r8, r8, #1
 801115c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8011160:	e722      	b.n	8010fa8 <__kernel_rem_pio2+0x2a8>
 8011162:	4620      	mov	r0, r4
 8011164:	4629      	mov	r1, r5
 8011166:	f7ef fd17 	bl	8000b98 <__aeabi_d2iz>
 801116a:	ab0c      	add	r3, sp, #48	@ 0x30
 801116c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011170:	e71a      	b.n	8010fa8 <__kernel_rem_pio2+0x2a8>
 8011172:	ab0c      	add	r3, sp, #48	@ 0x30
 8011174:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011178:	f7ef f9f4 	bl	8000564 <__aeabi_i2d>
 801117c:	4622      	mov	r2, r4
 801117e:	462b      	mov	r3, r5
 8011180:	f7ef fa5a 	bl	8000638 <__aeabi_dmul>
 8011184:	4652      	mov	r2, sl
 8011186:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801118a:	465b      	mov	r3, fp
 801118c:	4620      	mov	r0, r4
 801118e:	4629      	mov	r1, r5
 8011190:	f7ef fa52 	bl	8000638 <__aeabi_dmul>
 8011194:	3e01      	subs	r6, #1
 8011196:	4604      	mov	r4, r0
 8011198:	460d      	mov	r5, r1
 801119a:	e718      	b.n	8010fce <__kernel_rem_pio2+0x2ce>
 801119c:	9906      	ldr	r1, [sp, #24]
 801119e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80111a2:	9106      	str	r1, [sp, #24]
 80111a4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80111a8:	f7ef fa46 	bl	8000638 <__aeabi_dmul>
 80111ac:	4602      	mov	r2, r0
 80111ae:	460b      	mov	r3, r1
 80111b0:	4650      	mov	r0, sl
 80111b2:	4659      	mov	r1, fp
 80111b4:	f7ef f88a 	bl	80002cc <__adddf3>
 80111b8:	3601      	adds	r6, #1
 80111ba:	4682      	mov	sl, r0
 80111bc:	468b      	mov	fp, r1
 80111be:	9b00      	ldr	r3, [sp, #0]
 80111c0:	429e      	cmp	r6, r3
 80111c2:	dc01      	bgt.n	80111c8 <__kernel_rem_pio2+0x4c8>
 80111c4:	42b5      	cmp	r5, r6
 80111c6:	dae9      	bge.n	801119c <__kernel_rem_pio2+0x49c>
 80111c8:	ab48      	add	r3, sp, #288	@ 0x120
 80111ca:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80111ce:	e9c5 ab00 	strd	sl, fp, [r5]
 80111d2:	3c01      	subs	r4, #1
 80111d4:	e6ff      	b.n	8010fd6 <__kernel_rem_pio2+0x2d6>
 80111d6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80111d8:	2b02      	cmp	r3, #2
 80111da:	dc0b      	bgt.n	80111f4 <__kernel_rem_pio2+0x4f4>
 80111dc:	2b00      	cmp	r3, #0
 80111de:	dc39      	bgt.n	8011254 <__kernel_rem_pio2+0x554>
 80111e0:	d05d      	beq.n	801129e <__kernel_rem_pio2+0x59e>
 80111e2:	9b02      	ldr	r3, [sp, #8]
 80111e4:	f003 0007 	and.w	r0, r3, #7
 80111e8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80111ec:	ecbd 8b02 	vpop	{d8}
 80111f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111f4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80111f6:	2b03      	cmp	r3, #3
 80111f8:	d1f3      	bne.n	80111e2 <__kernel_rem_pio2+0x4e2>
 80111fa:	9b05      	ldr	r3, [sp, #20]
 80111fc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011200:	eb0d 0403 	add.w	r4, sp, r3
 8011204:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8011208:	4625      	mov	r5, r4
 801120a:	46c2      	mov	sl, r8
 801120c:	f1ba 0f00 	cmp.w	sl, #0
 8011210:	f1a5 0508 	sub.w	r5, r5, #8
 8011214:	dc6b      	bgt.n	80112ee <__kernel_rem_pio2+0x5ee>
 8011216:	4645      	mov	r5, r8
 8011218:	2d01      	cmp	r5, #1
 801121a:	f1a4 0408 	sub.w	r4, r4, #8
 801121e:	f300 8087 	bgt.w	8011330 <__kernel_rem_pio2+0x630>
 8011222:	9c05      	ldr	r4, [sp, #20]
 8011224:	ab48      	add	r3, sp, #288	@ 0x120
 8011226:	441c      	add	r4, r3
 8011228:	2000      	movs	r0, #0
 801122a:	2100      	movs	r1, #0
 801122c:	f1b8 0f01 	cmp.w	r8, #1
 8011230:	f300 809c 	bgt.w	801136c <__kernel_rem_pio2+0x66c>
 8011234:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8011238:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801123c:	f1b9 0f00 	cmp.w	r9, #0
 8011240:	f040 80a6 	bne.w	8011390 <__kernel_rem_pio2+0x690>
 8011244:	9b04      	ldr	r3, [sp, #16]
 8011246:	e9c3 7800 	strd	r7, r8, [r3]
 801124a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801124e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011252:	e7c6      	b.n	80111e2 <__kernel_rem_pio2+0x4e2>
 8011254:	9d05      	ldr	r5, [sp, #20]
 8011256:	ab48      	add	r3, sp, #288	@ 0x120
 8011258:	441d      	add	r5, r3
 801125a:	4644      	mov	r4, r8
 801125c:	2000      	movs	r0, #0
 801125e:	2100      	movs	r1, #0
 8011260:	2c00      	cmp	r4, #0
 8011262:	da35      	bge.n	80112d0 <__kernel_rem_pio2+0x5d0>
 8011264:	f1b9 0f00 	cmp.w	r9, #0
 8011268:	d038      	beq.n	80112dc <__kernel_rem_pio2+0x5dc>
 801126a:	4602      	mov	r2, r0
 801126c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011270:	9c04      	ldr	r4, [sp, #16]
 8011272:	e9c4 2300 	strd	r2, r3, [r4]
 8011276:	4602      	mov	r2, r0
 8011278:	460b      	mov	r3, r1
 801127a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801127e:	f7ef f823 	bl	80002c8 <__aeabi_dsub>
 8011282:	ad4a      	add	r5, sp, #296	@ 0x128
 8011284:	2401      	movs	r4, #1
 8011286:	45a0      	cmp	r8, r4
 8011288:	da2b      	bge.n	80112e2 <__kernel_rem_pio2+0x5e2>
 801128a:	f1b9 0f00 	cmp.w	r9, #0
 801128e:	d002      	beq.n	8011296 <__kernel_rem_pio2+0x596>
 8011290:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011294:	4619      	mov	r1, r3
 8011296:	9b04      	ldr	r3, [sp, #16]
 8011298:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801129c:	e7a1      	b.n	80111e2 <__kernel_rem_pio2+0x4e2>
 801129e:	9c05      	ldr	r4, [sp, #20]
 80112a0:	ab48      	add	r3, sp, #288	@ 0x120
 80112a2:	441c      	add	r4, r3
 80112a4:	2000      	movs	r0, #0
 80112a6:	2100      	movs	r1, #0
 80112a8:	f1b8 0f00 	cmp.w	r8, #0
 80112ac:	da09      	bge.n	80112c2 <__kernel_rem_pio2+0x5c2>
 80112ae:	f1b9 0f00 	cmp.w	r9, #0
 80112b2:	d002      	beq.n	80112ba <__kernel_rem_pio2+0x5ba>
 80112b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80112b8:	4619      	mov	r1, r3
 80112ba:	9b04      	ldr	r3, [sp, #16]
 80112bc:	e9c3 0100 	strd	r0, r1, [r3]
 80112c0:	e78f      	b.n	80111e2 <__kernel_rem_pio2+0x4e2>
 80112c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80112c6:	f7ef f801 	bl	80002cc <__adddf3>
 80112ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80112ce:	e7eb      	b.n	80112a8 <__kernel_rem_pio2+0x5a8>
 80112d0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80112d4:	f7ee fffa 	bl	80002cc <__adddf3>
 80112d8:	3c01      	subs	r4, #1
 80112da:	e7c1      	b.n	8011260 <__kernel_rem_pio2+0x560>
 80112dc:	4602      	mov	r2, r0
 80112de:	460b      	mov	r3, r1
 80112e0:	e7c6      	b.n	8011270 <__kernel_rem_pio2+0x570>
 80112e2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80112e6:	f7ee fff1 	bl	80002cc <__adddf3>
 80112ea:	3401      	adds	r4, #1
 80112ec:	e7cb      	b.n	8011286 <__kernel_rem_pio2+0x586>
 80112ee:	ed95 7b00 	vldr	d7, [r5]
 80112f2:	ed8d 7b00 	vstr	d7, [sp]
 80112f6:	ed95 7b02 	vldr	d7, [r5, #8]
 80112fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80112fe:	ec53 2b17 	vmov	r2, r3, d7
 8011302:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011306:	f7ee ffe1 	bl	80002cc <__adddf3>
 801130a:	4602      	mov	r2, r0
 801130c:	460b      	mov	r3, r1
 801130e:	4606      	mov	r6, r0
 8011310:	460f      	mov	r7, r1
 8011312:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011316:	f7ee ffd7 	bl	80002c8 <__aeabi_dsub>
 801131a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801131e:	f7ee ffd5 	bl	80002cc <__adddf3>
 8011322:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011326:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801132a:	e9c5 6700 	strd	r6, r7, [r5]
 801132e:	e76d      	b.n	801120c <__kernel_rem_pio2+0x50c>
 8011330:	ed94 7b00 	vldr	d7, [r4]
 8011334:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8011338:	ec51 0b17 	vmov	r0, r1, d7
 801133c:	4652      	mov	r2, sl
 801133e:	465b      	mov	r3, fp
 8011340:	ed8d 7b00 	vstr	d7, [sp]
 8011344:	f7ee ffc2 	bl	80002cc <__adddf3>
 8011348:	4602      	mov	r2, r0
 801134a:	460b      	mov	r3, r1
 801134c:	4606      	mov	r6, r0
 801134e:	460f      	mov	r7, r1
 8011350:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011354:	f7ee ffb8 	bl	80002c8 <__aeabi_dsub>
 8011358:	4652      	mov	r2, sl
 801135a:	465b      	mov	r3, fp
 801135c:	f7ee ffb6 	bl	80002cc <__adddf3>
 8011360:	3d01      	subs	r5, #1
 8011362:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011366:	e9c4 6700 	strd	r6, r7, [r4]
 801136a:	e755      	b.n	8011218 <__kernel_rem_pio2+0x518>
 801136c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011370:	f7ee ffac 	bl	80002cc <__adddf3>
 8011374:	f108 38ff 	add.w	r8, r8, #4294967295
 8011378:	e758      	b.n	801122c <__kernel_rem_pio2+0x52c>
 801137a:	bf00      	nop
 801137c:	f3af 8000 	nop.w
	...
 8011388:	41700000 	.word	0x41700000
 801138c:	3e700000 	.word	0x3e700000
 8011390:	9b04      	ldr	r3, [sp, #16]
 8011392:	9a04      	ldr	r2, [sp, #16]
 8011394:	601f      	str	r7, [r3, #0]
 8011396:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801139a:	605c      	str	r4, [r3, #4]
 801139c:	609d      	str	r5, [r3, #8]
 801139e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80113a2:	60d3      	str	r3, [r2, #12]
 80113a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80113a8:	6110      	str	r0, [r2, #16]
 80113aa:	6153      	str	r3, [r2, #20]
 80113ac:	e719      	b.n	80111e2 <__kernel_rem_pio2+0x4e2>
 80113ae:	bf00      	nop

080113b0 <floor>:
 80113b0:	ec51 0b10 	vmov	r0, r1, d0
 80113b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80113b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113bc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80113c0:	2e13      	cmp	r6, #19
 80113c2:	460c      	mov	r4, r1
 80113c4:	4605      	mov	r5, r0
 80113c6:	4680      	mov	r8, r0
 80113c8:	dc34      	bgt.n	8011434 <floor+0x84>
 80113ca:	2e00      	cmp	r6, #0
 80113cc:	da17      	bge.n	80113fe <floor+0x4e>
 80113ce:	a332      	add	r3, pc, #200	@ (adr r3, 8011498 <floor+0xe8>)
 80113d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d4:	f7ee ff7a 	bl	80002cc <__adddf3>
 80113d8:	2200      	movs	r2, #0
 80113da:	2300      	movs	r3, #0
 80113dc:	f7ef fbbc 	bl	8000b58 <__aeabi_dcmpgt>
 80113e0:	b150      	cbz	r0, 80113f8 <floor+0x48>
 80113e2:	2c00      	cmp	r4, #0
 80113e4:	da55      	bge.n	8011492 <floor+0xe2>
 80113e6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80113ea:	432c      	orrs	r4, r5
 80113ec:	2500      	movs	r5, #0
 80113ee:	42ac      	cmp	r4, r5
 80113f0:	4c2b      	ldr	r4, [pc, #172]	@ (80114a0 <floor+0xf0>)
 80113f2:	bf08      	it	eq
 80113f4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80113f8:	4621      	mov	r1, r4
 80113fa:	4628      	mov	r0, r5
 80113fc:	e023      	b.n	8011446 <floor+0x96>
 80113fe:	4f29      	ldr	r7, [pc, #164]	@ (80114a4 <floor+0xf4>)
 8011400:	4137      	asrs	r7, r6
 8011402:	ea01 0307 	and.w	r3, r1, r7
 8011406:	4303      	orrs	r3, r0
 8011408:	d01d      	beq.n	8011446 <floor+0x96>
 801140a:	a323      	add	r3, pc, #140	@ (adr r3, 8011498 <floor+0xe8>)
 801140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011410:	f7ee ff5c 	bl	80002cc <__adddf3>
 8011414:	2200      	movs	r2, #0
 8011416:	2300      	movs	r3, #0
 8011418:	f7ef fb9e 	bl	8000b58 <__aeabi_dcmpgt>
 801141c:	2800      	cmp	r0, #0
 801141e:	d0eb      	beq.n	80113f8 <floor+0x48>
 8011420:	2c00      	cmp	r4, #0
 8011422:	bfbe      	ittt	lt
 8011424:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8011428:	4133      	asrlt	r3, r6
 801142a:	18e4      	addlt	r4, r4, r3
 801142c:	ea24 0407 	bic.w	r4, r4, r7
 8011430:	2500      	movs	r5, #0
 8011432:	e7e1      	b.n	80113f8 <floor+0x48>
 8011434:	2e33      	cmp	r6, #51	@ 0x33
 8011436:	dd0a      	ble.n	801144e <floor+0x9e>
 8011438:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801143c:	d103      	bne.n	8011446 <floor+0x96>
 801143e:	4602      	mov	r2, r0
 8011440:	460b      	mov	r3, r1
 8011442:	f7ee ff43 	bl	80002cc <__adddf3>
 8011446:	ec41 0b10 	vmov	d0, r0, r1
 801144a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801144e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8011452:	f04f 37ff 	mov.w	r7, #4294967295
 8011456:	40df      	lsrs	r7, r3
 8011458:	4207      	tst	r7, r0
 801145a:	d0f4      	beq.n	8011446 <floor+0x96>
 801145c:	a30e      	add	r3, pc, #56	@ (adr r3, 8011498 <floor+0xe8>)
 801145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011462:	f7ee ff33 	bl	80002cc <__adddf3>
 8011466:	2200      	movs	r2, #0
 8011468:	2300      	movs	r3, #0
 801146a:	f7ef fb75 	bl	8000b58 <__aeabi_dcmpgt>
 801146e:	2800      	cmp	r0, #0
 8011470:	d0c2      	beq.n	80113f8 <floor+0x48>
 8011472:	2c00      	cmp	r4, #0
 8011474:	da0a      	bge.n	801148c <floor+0xdc>
 8011476:	2e14      	cmp	r6, #20
 8011478:	d101      	bne.n	801147e <floor+0xce>
 801147a:	3401      	adds	r4, #1
 801147c:	e006      	b.n	801148c <floor+0xdc>
 801147e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8011482:	2301      	movs	r3, #1
 8011484:	40b3      	lsls	r3, r6
 8011486:	441d      	add	r5, r3
 8011488:	4545      	cmp	r5, r8
 801148a:	d3f6      	bcc.n	801147a <floor+0xca>
 801148c:	ea25 0507 	bic.w	r5, r5, r7
 8011490:	e7b2      	b.n	80113f8 <floor+0x48>
 8011492:	2500      	movs	r5, #0
 8011494:	462c      	mov	r4, r5
 8011496:	e7af      	b.n	80113f8 <floor+0x48>
 8011498:	8800759c 	.word	0x8800759c
 801149c:	7e37e43c 	.word	0x7e37e43c
 80114a0:	bff00000 	.word	0xbff00000
 80114a4:	000fffff 	.word	0x000fffff

080114a8 <_init>:
 80114a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114aa:	bf00      	nop
 80114ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114ae:	bc08      	pop	{r3}
 80114b0:	469e      	mov	lr, r3
 80114b2:	4770      	bx	lr

080114b4 <_fini>:
 80114b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114b6:	bf00      	nop
 80114b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114ba:	bc08      	pop	{r3}
 80114bc:	469e      	mov	lr, r3
 80114be:	4770      	bx	lr
