
SkyLord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001573c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  08015910  08015910  00016910  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016130  08016130  00018214  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016130  08016130  00017130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016138  08016138  00018214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016138  08016138  00017138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801613c  0801613c  0001713c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  08016140  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001794  20000214  08016354  00018214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019a8  08016354  000189a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00018214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d144  00000000  00000000  00018244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000410f  00000000  00000000  00035388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  00039498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001155  00000000  00000000  0003aab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000277bc  00000000  00000000  0003bc05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ead6  00000000  00000000  000633c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5d1c  00000000  00000000  00081e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00167bb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bc8  00000000  00000000  00167bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0016f7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000214 	.word	0x20000214
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080158f4 	.word	0x080158f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000218 	.word	0x20000218
 800020c:	080158f4 	.word	0x080158f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	@ 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000f02:	f000 ba09 	b.w	8001318 <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000f98:	f000 b9be 	b.w	8001318 <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	468e      	mov	lr, r1
 8001028:	4604      	mov	r4, r0
 800102a:	4688      	mov	r8, r1
 800102c:	2b00      	cmp	r3, #0
 800102e:	d14a      	bne.n	80010c6 <__udivmoddi4+0xa6>
 8001030:	428a      	cmp	r2, r1
 8001032:	4617      	mov	r7, r2
 8001034:	d962      	bls.n	80010fc <__udivmoddi4+0xdc>
 8001036:	fab2 f682 	clz	r6, r2
 800103a:	b14e      	cbz	r6, 8001050 <__udivmoddi4+0x30>
 800103c:	f1c6 0320 	rsb	r3, r6, #32
 8001040:	fa01 f806 	lsl.w	r8, r1, r6
 8001044:	fa20 f303 	lsr.w	r3, r0, r3
 8001048:	40b7      	lsls	r7, r6
 800104a:	ea43 0808 	orr.w	r8, r3, r8
 800104e:	40b4      	lsls	r4, r6
 8001050:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001054:	fa1f fc87 	uxth.w	ip, r7
 8001058:	fbb8 f1fe 	udiv	r1, r8, lr
 800105c:	0c23      	lsrs	r3, r4, #16
 800105e:	fb0e 8811 	mls	r8, lr, r1, r8
 8001062:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001066:	fb01 f20c 	mul.w	r2, r1, ip
 800106a:	429a      	cmp	r2, r3
 800106c:	d909      	bls.n	8001082 <__udivmoddi4+0x62>
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8001074:	f080 80ea 	bcs.w	800124c <__udivmoddi4+0x22c>
 8001078:	429a      	cmp	r2, r3
 800107a:	f240 80e7 	bls.w	800124c <__udivmoddi4+0x22c>
 800107e:	3902      	subs	r1, #2
 8001080:	443b      	add	r3, r7
 8001082:	1a9a      	subs	r2, r3, r2
 8001084:	b2a3      	uxth	r3, r4
 8001086:	fbb2 f0fe 	udiv	r0, r2, lr
 800108a:	fb0e 2210 	mls	r2, lr, r0, r2
 800108e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001092:	fb00 fc0c 	mul.w	ip, r0, ip
 8001096:	459c      	cmp	ip, r3
 8001098:	d909      	bls.n	80010ae <__udivmoddi4+0x8e>
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80010a0:	f080 80d6 	bcs.w	8001250 <__udivmoddi4+0x230>
 80010a4:	459c      	cmp	ip, r3
 80010a6:	f240 80d3 	bls.w	8001250 <__udivmoddi4+0x230>
 80010aa:	443b      	add	r3, r7
 80010ac:	3802      	subs	r0, #2
 80010ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80010b2:	eba3 030c 	sub.w	r3, r3, ip
 80010b6:	2100      	movs	r1, #0
 80010b8:	b11d      	cbz	r5, 80010c2 <__udivmoddi4+0xa2>
 80010ba:	40f3      	lsrs	r3, r6
 80010bc:	2200      	movs	r2, #0
 80010be:	e9c5 3200 	strd	r3, r2, [r5]
 80010c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c6:	428b      	cmp	r3, r1
 80010c8:	d905      	bls.n	80010d6 <__udivmoddi4+0xb6>
 80010ca:	b10d      	cbz	r5, 80010d0 <__udivmoddi4+0xb0>
 80010cc:	e9c5 0100 	strd	r0, r1, [r5]
 80010d0:	2100      	movs	r1, #0
 80010d2:	4608      	mov	r0, r1
 80010d4:	e7f5      	b.n	80010c2 <__udivmoddi4+0xa2>
 80010d6:	fab3 f183 	clz	r1, r3
 80010da:	2900      	cmp	r1, #0
 80010dc:	d146      	bne.n	800116c <__udivmoddi4+0x14c>
 80010de:	4573      	cmp	r3, lr
 80010e0:	d302      	bcc.n	80010e8 <__udivmoddi4+0xc8>
 80010e2:	4282      	cmp	r2, r0
 80010e4:	f200 8105 	bhi.w	80012f2 <__udivmoddi4+0x2d2>
 80010e8:	1a84      	subs	r4, r0, r2
 80010ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80010ee:	2001      	movs	r0, #1
 80010f0:	4690      	mov	r8, r2
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	d0e5      	beq.n	80010c2 <__udivmoddi4+0xa2>
 80010f6:	e9c5 4800 	strd	r4, r8, [r5]
 80010fa:	e7e2      	b.n	80010c2 <__udivmoddi4+0xa2>
 80010fc:	2a00      	cmp	r2, #0
 80010fe:	f000 8090 	beq.w	8001222 <__udivmoddi4+0x202>
 8001102:	fab2 f682 	clz	r6, r2
 8001106:	2e00      	cmp	r6, #0
 8001108:	f040 80a4 	bne.w	8001254 <__udivmoddi4+0x234>
 800110c:	1a8a      	subs	r2, r1, r2
 800110e:	0c03      	lsrs	r3, r0, #16
 8001110:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001114:	b280      	uxth	r0, r0
 8001116:	b2bc      	uxth	r4, r7
 8001118:	2101      	movs	r1, #1
 800111a:	fbb2 fcfe 	udiv	ip, r2, lr
 800111e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001126:	fb04 f20c 	mul.w	r2, r4, ip
 800112a:	429a      	cmp	r2, r3
 800112c:	d907      	bls.n	800113e <__udivmoddi4+0x11e>
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8001134:	d202      	bcs.n	800113c <__udivmoddi4+0x11c>
 8001136:	429a      	cmp	r2, r3
 8001138:	f200 80e0 	bhi.w	80012fc <__udivmoddi4+0x2dc>
 800113c:	46c4      	mov	ip, r8
 800113e:	1a9b      	subs	r3, r3, r2
 8001140:	fbb3 f2fe 	udiv	r2, r3, lr
 8001144:	fb0e 3312 	mls	r3, lr, r2, r3
 8001148:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800114c:	fb02 f404 	mul.w	r4, r2, r4
 8001150:	429c      	cmp	r4, r3
 8001152:	d907      	bls.n	8001164 <__udivmoddi4+0x144>
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800115a:	d202      	bcs.n	8001162 <__udivmoddi4+0x142>
 800115c:	429c      	cmp	r4, r3
 800115e:	f200 80ca 	bhi.w	80012f6 <__udivmoddi4+0x2d6>
 8001162:	4602      	mov	r2, r0
 8001164:	1b1b      	subs	r3, r3, r4
 8001166:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800116a:	e7a5      	b.n	80010b8 <__udivmoddi4+0x98>
 800116c:	f1c1 0620 	rsb	r6, r1, #32
 8001170:	408b      	lsls	r3, r1
 8001172:	fa22 f706 	lsr.w	r7, r2, r6
 8001176:	431f      	orrs	r7, r3
 8001178:	fa0e f401 	lsl.w	r4, lr, r1
 800117c:	fa20 f306 	lsr.w	r3, r0, r6
 8001180:	fa2e fe06 	lsr.w	lr, lr, r6
 8001184:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001188:	4323      	orrs	r3, r4
 800118a:	fa00 f801 	lsl.w	r8, r0, r1
 800118e:	fa1f fc87 	uxth.w	ip, r7
 8001192:	fbbe f0f9 	udiv	r0, lr, r9
 8001196:	0c1c      	lsrs	r4, r3, #16
 8001198:	fb09 ee10 	mls	lr, r9, r0, lr
 800119c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80011a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80011a4:	45a6      	cmp	lr, r4
 80011a6:	fa02 f201 	lsl.w	r2, r2, r1
 80011aa:	d909      	bls.n	80011c0 <__udivmoddi4+0x1a0>
 80011ac:	193c      	adds	r4, r7, r4
 80011ae:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80011b2:	f080 809c 	bcs.w	80012ee <__udivmoddi4+0x2ce>
 80011b6:	45a6      	cmp	lr, r4
 80011b8:	f240 8099 	bls.w	80012ee <__udivmoddi4+0x2ce>
 80011bc:	3802      	subs	r0, #2
 80011be:	443c      	add	r4, r7
 80011c0:	eba4 040e 	sub.w	r4, r4, lr
 80011c4:	fa1f fe83 	uxth.w	lr, r3
 80011c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80011cc:	fb09 4413 	mls	r4, r9, r3, r4
 80011d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80011d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80011d8:	45a4      	cmp	ip, r4
 80011da:	d908      	bls.n	80011ee <__udivmoddi4+0x1ce>
 80011dc:	193c      	adds	r4, r7, r4
 80011de:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80011e2:	f080 8082 	bcs.w	80012ea <__udivmoddi4+0x2ca>
 80011e6:	45a4      	cmp	ip, r4
 80011e8:	d97f      	bls.n	80012ea <__udivmoddi4+0x2ca>
 80011ea:	3b02      	subs	r3, #2
 80011ec:	443c      	add	r4, r7
 80011ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80011f2:	eba4 040c 	sub.w	r4, r4, ip
 80011f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80011fa:	4564      	cmp	r4, ip
 80011fc:	4673      	mov	r3, lr
 80011fe:	46e1      	mov	r9, ip
 8001200:	d362      	bcc.n	80012c8 <__udivmoddi4+0x2a8>
 8001202:	d05f      	beq.n	80012c4 <__udivmoddi4+0x2a4>
 8001204:	b15d      	cbz	r5, 800121e <__udivmoddi4+0x1fe>
 8001206:	ebb8 0203 	subs.w	r2, r8, r3
 800120a:	eb64 0409 	sbc.w	r4, r4, r9
 800120e:	fa04 f606 	lsl.w	r6, r4, r6
 8001212:	fa22 f301 	lsr.w	r3, r2, r1
 8001216:	431e      	orrs	r6, r3
 8001218:	40cc      	lsrs	r4, r1
 800121a:	e9c5 6400 	strd	r6, r4, [r5]
 800121e:	2100      	movs	r1, #0
 8001220:	e74f      	b.n	80010c2 <__udivmoddi4+0xa2>
 8001222:	fbb1 fcf2 	udiv	ip, r1, r2
 8001226:	0c01      	lsrs	r1, r0, #16
 8001228:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800122c:	b280      	uxth	r0, r0
 800122e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001232:	463b      	mov	r3, r7
 8001234:	4638      	mov	r0, r7
 8001236:	463c      	mov	r4, r7
 8001238:	46b8      	mov	r8, r7
 800123a:	46be      	mov	lr, r7
 800123c:	2620      	movs	r6, #32
 800123e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001242:	eba2 0208 	sub.w	r2, r2, r8
 8001246:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800124a:	e766      	b.n	800111a <__udivmoddi4+0xfa>
 800124c:	4601      	mov	r1, r0
 800124e:	e718      	b.n	8001082 <__udivmoddi4+0x62>
 8001250:	4610      	mov	r0, r2
 8001252:	e72c      	b.n	80010ae <__udivmoddi4+0x8e>
 8001254:	f1c6 0220 	rsb	r2, r6, #32
 8001258:	fa2e f302 	lsr.w	r3, lr, r2
 800125c:	40b7      	lsls	r7, r6
 800125e:	40b1      	lsls	r1, r6
 8001260:	fa20 f202 	lsr.w	r2, r0, r2
 8001264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001268:	430a      	orrs	r2, r1
 800126a:	fbb3 f8fe 	udiv	r8, r3, lr
 800126e:	b2bc      	uxth	r4, r7
 8001270:	fb0e 3318 	mls	r3, lr, r8, r3
 8001274:	0c11      	lsrs	r1, r2, #16
 8001276:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800127a:	fb08 f904 	mul.w	r9, r8, r4
 800127e:	40b0      	lsls	r0, r6
 8001280:	4589      	cmp	r9, r1
 8001282:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001286:	b280      	uxth	r0, r0
 8001288:	d93e      	bls.n	8001308 <__udivmoddi4+0x2e8>
 800128a:	1879      	adds	r1, r7, r1
 800128c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8001290:	d201      	bcs.n	8001296 <__udivmoddi4+0x276>
 8001292:	4589      	cmp	r9, r1
 8001294:	d81f      	bhi.n	80012d6 <__udivmoddi4+0x2b6>
 8001296:	eba1 0109 	sub.w	r1, r1, r9
 800129a:	fbb1 f9fe 	udiv	r9, r1, lr
 800129e:	fb09 f804 	mul.w	r8, r9, r4
 80012a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80012a6:	b292      	uxth	r2, r2
 80012a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012ac:	4542      	cmp	r2, r8
 80012ae:	d229      	bcs.n	8001304 <__udivmoddi4+0x2e4>
 80012b0:	18ba      	adds	r2, r7, r2
 80012b2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80012b6:	d2c4      	bcs.n	8001242 <__udivmoddi4+0x222>
 80012b8:	4542      	cmp	r2, r8
 80012ba:	d2c2      	bcs.n	8001242 <__udivmoddi4+0x222>
 80012bc:	f1a9 0102 	sub.w	r1, r9, #2
 80012c0:	443a      	add	r2, r7
 80012c2:	e7be      	b.n	8001242 <__udivmoddi4+0x222>
 80012c4:	45f0      	cmp	r8, lr
 80012c6:	d29d      	bcs.n	8001204 <__udivmoddi4+0x1e4>
 80012c8:	ebbe 0302 	subs.w	r3, lr, r2
 80012cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80012d0:	3801      	subs	r0, #1
 80012d2:	46e1      	mov	r9, ip
 80012d4:	e796      	b.n	8001204 <__udivmoddi4+0x1e4>
 80012d6:	eba7 0909 	sub.w	r9, r7, r9
 80012da:	4449      	add	r1, r9
 80012dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80012e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80012e4:	fb09 f804 	mul.w	r8, r9, r4
 80012e8:	e7db      	b.n	80012a2 <__udivmoddi4+0x282>
 80012ea:	4673      	mov	r3, lr
 80012ec:	e77f      	b.n	80011ee <__udivmoddi4+0x1ce>
 80012ee:	4650      	mov	r0, sl
 80012f0:	e766      	b.n	80011c0 <__udivmoddi4+0x1a0>
 80012f2:	4608      	mov	r0, r1
 80012f4:	e6fd      	b.n	80010f2 <__udivmoddi4+0xd2>
 80012f6:	443b      	add	r3, r7
 80012f8:	3a02      	subs	r2, #2
 80012fa:	e733      	b.n	8001164 <__udivmoddi4+0x144>
 80012fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8001300:	443b      	add	r3, r7
 8001302:	e71c      	b.n	800113e <__udivmoddi4+0x11e>
 8001304:	4649      	mov	r1, r9
 8001306:	e79c      	b.n	8001242 <__udivmoddi4+0x222>
 8001308:	eba1 0109 	sub.w	r1, r1, r9
 800130c:	46c4      	mov	ip, r8
 800130e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001312:	fb09 f804 	mul.w	r8, r9, r4
 8001316:	e7c4      	b.n	80012a2 <__udivmoddi4+0x282>

08001318 <__aeabi_idiv0>:
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop

0800131c <bme280_getVals>:
static uint8_t bme_started_flag = 0;
static uint8_t last_measuring = 1;


void bme280_getVals()
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af04      	add	r7, sp, #16
	uint8_t status;
    HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 8001322:	4b3c      	ldr	r3, [pc, #240]	@ (8001414 <bme280_getVals+0xf8>)
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	2364      	movs	r3, #100	@ 0x64
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	2301      	movs	r3, #1
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	f107 030d 	add.w	r3, r7, #13
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	22f3      	movs	r2, #243	@ 0xf3
 8001338:	21ec      	movs	r1, #236	@ 0xec
 800133a:	f009 fbb5 	bl	800aaa8 <HAL_I2C_Mem_Read>
 800133e:	4603      	mov	r3, r0
 8001340:	73fb      	strb	r3, [r7, #15]
    BME->isUpdated = 0;
 8001342:	4b35      	ldr	r3, [pc, #212]	@ (8001418 <bme280_getVals+0xfc>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    uint8_t current_measuring = ((status & (0x01 << 3)) == 0);
 800134c:	7b7b      	ldrb	r3, [r7, #13]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b00      	cmp	r3, #0
 8001354:	bf0c      	ite	eq
 8001356:	2301      	moveq	r3, #1
 8001358:	2300      	movne	r3, #0
 800135a:	b2db      	uxtb	r3, r3
 800135c:	73bb      	strb	r3, [r7, #14]

    if ((last_measuring == 1) && (current_measuring == 0)) {
 800135e:	4b2f      	ldr	r3, [pc, #188]	@ (800141c <bme280_getVals+0x100>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d14f      	bne.n	8001406 <bme280_getVals+0xea>
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d14c      	bne.n	8001406 <bme280_getVals+0xea>
        uint8_t data[8];
        retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, data, 8, 20);
 800136c:	4b29      	ldr	r3, [pc, #164]	@ (8001414 <bme280_getVals+0xf8>)
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	2314      	movs	r3, #20
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	2308      	movs	r3, #8
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2301      	movs	r3, #1
 800137e:	22f7      	movs	r2, #247	@ 0xf7
 8001380:	21ec      	movs	r1, #236	@ 0xec
 8001382:	f009 fb91 	bl	800aaa8 <HAL_I2C_Mem_Read>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]
        if (retVal == HAL_OK && memcmp(data, BME->lastReadings, 8) != 0) {
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d13a      	bne.n	8001406 <bme280_getVals+0xea>
 8001390:	4b21      	ldr	r3, [pc, #132]	@ (8001418 <bme280_getVals+0xfc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	2208      	movs	r2, #8
 800139c:	4618      	mov	r0, r3
 800139e:	f00e fe53 	bl	8010048 <memcmp>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d02e      	beq.n	8001406 <bme280_getVals+0xea>
            memcpy(BME->lastReadings, data, 8);
 80013a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <bme280_getVals+0xfc>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3334      	adds	r3, #52	@ 0x34
 80013ae:	461a      	mov	r2, r3
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	cb03      	ldmia	r3!, {r0, r1}
 80013b4:	6010      	str	r0, [r2, #0]
 80013b6:	6051      	str	r1, [r2, #4]
            BME->isUpdated = 1;
 80013b8:	4b17      	ldr	r3, [pc, #92]	@ (8001418 <bme280_getVals+0xfc>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2201      	movs	r2, #1
 80013be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            BME->adcVals.ut = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | ((int32_t)data[5] >> 4);
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	031a      	lsls	r2, r3, #12
 80013c6:	7a3b      	ldrb	r3, [r7, #8]
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	431a      	orrs	r2, r3
 80013cc:	7a7b      	ldrb	r3, [r7, #9]
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	4619      	mov	r1, r3
 80013d4:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <bme280_getVals+0xfc>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	609a      	str	r2, [r3, #8]
            BME->adcVals.up = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((int32_t)data[2] >> 4);
 80013dc:	793b      	ldrb	r3, [r7, #4]
 80013de:	031a      	lsls	r2, r3, #12
 80013e0:	797b      	ldrb	r3, [r7, #5]
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	431a      	orrs	r2, r3
 80013e6:	79bb      	ldrb	r3, [r7, #6]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	4619      	mov	r1, r3
 80013ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <bme280_getVals+0xfc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	60da      	str	r2, [r3, #12]
            BME->adcVals.uh = ((int32_t)data[6] << 8) | ((int32_t)data[7]);
 80013f6:	7abb      	ldrb	r3, [r7, #10]
 80013f8:	021a      	lsls	r2, r3, #8
 80013fa:	7afb      	ldrb	r3, [r7, #11]
 80013fc:	4619      	mov	r1, r3
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <bme280_getVals+0xfc>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	611a      	str	r2, [r3, #16]
        }
    }
    last_measuring = current_measuring;
 8001406:	4a05      	ldr	r2, [pc, #20]	@ (800141c <bme280_getVals+0x100>)
 8001408:	7bbb      	ldrb	r3, [r7, #14]
 800140a:	7013      	strb	r3, [r2, #0]
    UNUSED(retVal);
}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000230 	.word	0x20000230
 8001418:	20000234 	.word	0x20000234
 800141c:	20000000 	.word	0x20000000

08001420 <bme280_calculate_altitude>:



void bme280_calculate_altitude() {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
    // Standard sea level pressure in hPa
    float p_seaLevel = 1013.25;
 8001426:	4b24      	ldr	r3, [pc, #144]	@ (80014b8 <bme280_calculate_altitude+0x98>)
 8001428:	607b      	str	r3, [r7, #4]

    // Calculate altitude from pressure using barometric formula
    float rawAltitude = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 800142a:	4b24      	ldr	r3, [pc, #144]	@ (80014bc <bme280_calculate_altitude+0x9c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001432:	edd7 7a01 	vldr	s15, [r7, #4]
 8001436:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800143a:	ee16 0a90 	vmov	r0, s13
 800143e:	f7ff f8a3 	bl	8000588 <__aeabi_f2d>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 80014a8 <bme280_calculate_altitude+0x88>
 800144a:	ec43 2b10 	vmov	d0, r2, r3
 800144e:	f011 ff31 	bl	80132b4 <pow>
 8001452:	ec53 2b10 	vmov	r2, r3, d0
 8001456:	f04f 0000 	mov.w	r0, #0
 800145a:	4919      	ldr	r1, [pc, #100]	@ (80014c0 <bme280_calculate_altitude+0xa0>)
 800145c:	f7fe ff34 	bl	80002c8 <__aeabi_dsub>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	a311      	add	r3, pc, #68	@ (adr r3, 80014b0 <bme280_calculate_altitude+0x90>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	f7ff f8e3 	bl	8000638 <__aeabi_dmul>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff fbd5 	bl	8000c28 <__aeabi_d2f>
 800147e:	4603      	mov	r3, r0
 8001480:	603b      	str	r3, [r7, #0]

    // Apply base altitude correction
    BME->altitude = rawAltitude - BME->base_altitude;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <bme280_calculate_altitude+0x9c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <bme280_calculate_altitude+0x9c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	ed97 7a00 	vldr	s14, [r7]
 8001492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001496:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	f3af 8000 	nop.w
 80014a8:	ccd9456c 	.word	0xccd9456c
 80014ac:	3fc85b95 	.word	0x3fc85b95
 80014b0:	00000000 	.word	0x00000000
 80014b4:	40e5a540 	.word	0x40e5a540
 80014b8:	447d5000 	.word	0x447d5000
 80014bc:	20000234 	.word	0x20000234
 80014c0:	3ff00000 	.word	0x3ff00000

080014c4 <bme280_config>:

void bme280_config()
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08e      	sub	sp, #56	@ 0x38
 80014c8:	af04      	add	r7, sp, #16
    uint8_t params[25];
    HAL_StatusTypeDef retVal;

    BME->base_altitude = 0.0;
 80014ca:	4b96      	ldr	r3, [pc, #600]	@ (8001724 <bme280_config+0x260>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset and initialize I2C
    HAL_I2C_DeInit(I2C_);
 80014d4:	4b94      	ldr	r3, [pc, #592]	@ (8001728 <bme280_config+0x264>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f009 f9bb 	bl	800a854 <HAL_I2C_DeInit>
    HAL_Delay(5);
 80014de:	2005      	movs	r0, #5
 80014e0:	f007 fbb4 	bl	8008c4c <HAL_Delay>
    HAL_I2C_Init(I2C_);
 80014e4:	4b90      	ldr	r3, [pc, #576]	@ (8001728 <bme280_config+0x264>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f009 f86f 	bl	800a5cc <HAL_I2C_Init>
    HAL_Delay(5);
 80014ee:	2005      	movs	r0, #5
 80014f0:	f007 fbac 	bl	8008c4c <HAL_Delay>

    // Read calibration parameters
    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 80014f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001728 <bme280_config+0x264>)
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	23c8      	movs	r3, #200	@ 0xc8
 80014fa:	9302      	str	r3, [sp, #8]
 80014fc:	2319      	movs	r3, #25
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2301      	movs	r3, #1
 8001506:	2288      	movs	r2, #136	@ 0x88
 8001508:	21ec      	movs	r1, #236	@ 0xec
 800150a:	f009 facd 	bl	800aaa8 <HAL_I2C_Mem_Read>
 800150e:	4603      	mov	r3, r0
 8001510:	77fb      	strb	r3, [r7, #31]

    BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 8001512:	793b      	ldrb	r3, [r7, #4]
 8001514:	4619      	mov	r1, r3
 8001516:	797b      	ldrb	r3, [r7, #5]
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	b29a      	uxth	r2, r3
 800151c:	4b81      	ldr	r3, [pc, #516]	@ (8001724 <bme280_config+0x260>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	b292      	uxth	r2, r2
 8001526:	801a      	strh	r2, [r3, #0]
    BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 8001528:	79bb      	ldrb	r3, [r7, #6]
 800152a:	b219      	sxth	r1, r3
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	b21b      	sxth	r3, r3
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	b21a      	sxth	r2, r3
 8001534:	4b7b      	ldr	r3, [pc, #492]	@ (8001724 <bme280_config+0x260>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	b212      	sxth	r2, r2
 800153e:	805a      	strh	r2, [r3, #2]
    BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001540:	7a3b      	ldrb	r3, [r7, #8]
 8001542:	b219      	sxth	r1, r3
 8001544:	7a7b      	ldrb	r3, [r7, #9]
 8001546:	b21b      	sxth	r3, r3
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	b21a      	sxth	r2, r3
 800154c:	4b75      	ldr	r3, [pc, #468]	@ (8001724 <bme280_config+0x260>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	b212      	sxth	r2, r2
 8001556:	809a      	strh	r2, [r3, #4]
    BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 8001558:	7abb      	ldrb	r3, [r7, #10]
 800155a:	b21a      	sxth	r2, r3
 800155c:	7afb      	ldrb	r3, [r7, #11]
 800155e:	b21b      	sxth	r3, r3
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b21b      	sxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b21a      	sxth	r2, r3
 8001568:	4b6e      	ldr	r3, [pc, #440]	@ (8001724 <bme280_config+0x260>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	b292      	uxth	r2, r2
 8001570:	80da      	strh	r2, [r3, #6]
    BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001572:	7b3b      	ldrb	r3, [r7, #12]
 8001574:	b219      	sxth	r1, r3
 8001576:	7b7b      	ldrb	r3, [r7, #13]
 8001578:	b21b      	sxth	r3, r3
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	b21a      	sxth	r2, r3
 800157e:	4b69      	ldr	r3, [pc, #420]	@ (8001724 <bme280_config+0x260>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	b212      	sxth	r2, r2
 8001588:	811a      	strh	r2, [r3, #8]
    BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800158a:	7bbb      	ldrb	r3, [r7, #14]
 800158c:	b219      	sxth	r1, r3
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	b21b      	sxth	r3, r3
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	4b63      	ldr	r3, [pc, #396]	@ (8001724 <bme280_config+0x260>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	b212      	sxth	r2, r2
 80015a0:	815a      	strh	r2, [r3, #10]
    BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 80015a2:	7c3b      	ldrb	r3, [r7, #16]
 80015a4:	b219      	sxth	r1, r3
 80015a6:	7c7b      	ldrb	r3, [r7, #17]
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001724 <bme280_config+0x260>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	b212      	sxth	r2, r2
 80015b8:	819a      	strh	r2, [r3, #12]
    BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 80015ba:	7cbb      	ldrb	r3, [r7, #18]
 80015bc:	b219      	sxth	r1, r3
 80015be:	7cfb      	ldrb	r3, [r7, #19]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	4b57      	ldr	r3, [pc, #348]	@ (8001724 <bme280_config+0x260>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	b212      	sxth	r2, r2
 80015d0:	81da      	strh	r2, [r3, #14]
    BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 80015d2:	7d3b      	ldrb	r3, [r7, #20]
 80015d4:	b219      	sxth	r1, r3
 80015d6:	7d7b      	ldrb	r3, [r7, #21]
 80015d8:	b21b      	sxth	r3, r3
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	b21a      	sxth	r2, r3
 80015de:	4b51      	ldr	r3, [pc, #324]	@ (8001724 <bme280_config+0x260>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	b212      	sxth	r2, r2
 80015e8:	821a      	strh	r2, [r3, #16]
    BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 80015ea:	7dbb      	ldrb	r3, [r7, #22]
 80015ec:	b219      	sxth	r1, r3
 80015ee:	7dfb      	ldrb	r3, [r7, #23]
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001724 <bme280_config+0x260>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	b212      	sxth	r2, r2
 8001600:	825a      	strh	r2, [r3, #18]
    BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 8001602:	7e3b      	ldrb	r3, [r7, #24]
 8001604:	b219      	sxth	r1, r3
 8001606:	7e7b      	ldrb	r3, [r7, #25]
 8001608:	b21b      	sxth	r3, r3
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	b21a      	sxth	r2, r3
 800160e:	4b45      	ldr	r3, [pc, #276]	@ (8001724 <bme280_config+0x260>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	b212      	sxth	r2, r2
 8001618:	829a      	strh	r2, [r3, #20]
    BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 800161a:	7ebb      	ldrb	r3, [r7, #26]
 800161c:	b219      	sxth	r1, r3
 800161e:	7efb      	ldrb	r3, [r7, #27]
 8001620:	b21b      	sxth	r3, r3
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	b21a      	sxth	r2, r3
 8001626:	4b3f      	ldr	r3, [pc, #252]	@ (8001724 <bme280_config+0x260>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	b212      	sxth	r2, r2
 8001630:	82da      	strh	r2, [r3, #22]
    BME->parameters->dig_H1 = params[24];
 8001632:	4b3c      	ldr	r3, [pc, #240]	@ (8001724 <bme280_config+0x260>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	7f3a      	ldrb	r2, [r7, #28]
 800163a:	761a      	strb	r2, [r3, #24]

    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 800163c:	4b3a      	ldr	r3, [pc, #232]	@ (8001728 <bme280_config+0x264>)
 800163e:	6818      	ldr	r0, [r3, #0]
 8001640:	2332      	movs	r3, #50	@ 0x32
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	2307      	movs	r3, #7
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	2301      	movs	r3, #1
 800164e:	22e1      	movs	r2, #225	@ 0xe1
 8001650:	21ec      	movs	r1, #236	@ 0xec
 8001652:	f009 fa29 	bl	800aaa8 <HAL_I2C_Mem_Read>
 8001656:	4603      	mov	r3, r0
 8001658:	77fb      	strb	r3, [r7, #31]
    BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800165a:	793b      	ldrb	r3, [r7, #4]
 800165c:	b219      	sxth	r1, r3
 800165e:	797b      	ldrb	r3, [r7, #5]
 8001660:	b21b      	sxth	r3, r3
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	b21a      	sxth	r2, r3
 8001666:	4b2f      	ldr	r3, [pc, #188]	@ (8001724 <bme280_config+0x260>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	b212      	sxth	r2, r2
 8001670:	835a      	strh	r2, [r3, #26]
    BME->parameters->dig_H3 = params[2];
 8001672:	4b2c      	ldr	r3, [pc, #176]	@ (8001724 <bme280_config+0x260>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	79ba      	ldrb	r2, [r7, #6]
 800167a:	771a      	strb	r2, [r3, #28]
    BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800167c:	7a3b      	ldrb	r3, [r7, #8]
 800167e:	b21b      	sxth	r3, r3
 8001680:	f003 030f 	and.w	r3, r3, #15
 8001684:	b219      	sxth	r1, r3
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	b21b      	sxth	r3, r3
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	b21a      	sxth	r2, r3
 800168e:	4b25      	ldr	r3, [pc, #148]	@ (8001724 <bme280_config+0x260>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	b212      	sxth	r2, r2
 8001698:	83da      	strh	r2, [r3, #30]
    BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 800169a:	7a3b      	ldrb	r3, [r7, #8]
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	b219      	sxth	r1, r3
 80016a2:	7a7b      	ldrb	r3, [r7, #9]
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001724 <bme280_config+0x260>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	b212      	sxth	r2, r2
 80016b4:	841a      	strh	r2, [r3, #32]
    BME->parameters->dig_H6 = params[6];
 80016b6:	7aba      	ldrb	r2, [r7, #10]
 80016b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <bme280_config+0x260>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b252      	sxtb	r2, r2
 80016c0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    uint8_t data_ctrl = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_output_speed;
 80016c8:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <bme280_config+0x260>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	799b      	ldrb	r3, [r3, #6]
 80016ce:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 80016d0:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <bme280_config+0x264>)
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	2332      	movs	r3, #50	@ 0x32
 80016d6:	9302      	str	r3, [sp, #8]
 80016d8:	2301      	movs	r3, #1
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	1cfb      	adds	r3, r7, #3
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2301      	movs	r3, #1
 80016e2:	22f2      	movs	r2, #242	@ 0xf2
 80016e4:	21ec      	movs	r1, #236	@ 0xec
 80016e6:	f009 f8e5 	bl	800a8b4 <HAL_I2C_Mem_Write>
 80016ea:	4603      	mov	r3, r0
 80016ec:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);
 80016f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <bme280_config+0x260>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	795b      	ldrb	r3, [r3, #5]
 80016f8:	b25a      	sxtb	r2, r3
 80016fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <bme280_config+0x260>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	799b      	ldrb	r3, [r3, #6]
 8001700:	b25b      	sxtb	r3, r3
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	b25b      	sxtb	r3, r3
 8001706:	4313      	orrs	r3, r2
 8001708:	b25a      	sxtb	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <bme280_config+0x260>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	799b      	ldrb	r3, [r3, #6]
 8001710:	b25b      	sxtb	r3, r3
 8001712:	015b      	lsls	r3, r3, #5
 8001714:	b25b      	sxtb	r3, r3
 8001716:	4313      	orrs	r3, r2
 8001718:	b25b      	sxtb	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800171e:	4b02      	ldr	r3, [pc, #8]	@ (8001728 <bme280_config+0x264>)
 8001720:	6818      	ldr	r0, [r3, #0]
 8001722:	e003      	b.n	800172c <bme280_config+0x268>
 8001724:	20000234 	.word	0x20000234
 8001728:	20000230 	.word	0x20000230
 800172c:	2332      	movs	r3, #50	@ 0x32
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	2301      	movs	r3, #1
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	1cfb      	adds	r3, r7, #3
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2301      	movs	r3, #1
 800173a:	22f4      	movs	r2, #244	@ 0xf4
 800173c:	21ec      	movs	r1, #236	@ 0xec
 800173e:	f009 f8b9 	bl	800a8b4 <HAL_I2C_Mem_Write>
 8001742:	4603      	mov	r3, r0
 8001744:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	70fb      	strb	r3, [r7, #3]
    data_ctrl = (BME->device_config.bme280_standby_time << 5) | (BME->device_config.bme280_filter << 2);
 800174a:	4b26      	ldr	r3, [pc, #152]	@ (80017e4 <bme280_config+0x320>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	79db      	ldrb	r3, [r3, #7]
 8001750:	b25b      	sxtb	r3, r3
 8001752:	015b      	lsls	r3, r3, #5
 8001754:	b25a      	sxtb	r2, r3
 8001756:	4b23      	ldr	r3, [pc, #140]	@ (80017e4 <bme280_config+0x320>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	791b      	ldrb	r3, [r3, #4]
 800175c:	b25b      	sxtb	r3, r3
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	b25b      	sxtb	r3, r3
 8001762:	4313      	orrs	r3, r2
 8001764:	b25b      	sxtb	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800176a:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <bme280_config+0x324>)
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	2332      	movs	r3, #50	@ 0x32
 8001770:	9302      	str	r3, [sp, #8]
 8001772:	2301      	movs	r3, #1
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	1cfb      	adds	r3, r7, #3
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2301      	movs	r3, #1
 800177c:	22f5      	movs	r2, #245	@ 0xf5
 800177e:	21ec      	movs	r1, #236	@ 0xec
 8001780:	f009 f898 	bl	800a8b4 <HAL_I2C_Mem_Write>
 8001784:	4603      	mov	r3, r0
 8001786:	77fb      	strb	r3, [r7, #31]

    // Take base altitude readings
    float base = 0.0;
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_Delay(100);
 800178e:	2064      	movs	r0, #100	@ 0x64
 8001790:	f007 fa5c 	bl	8008c4c <HAL_Delay>

    for(int i = 0; i < 50; i++) {
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
 8001798:	e011      	b.n	80017be <bme280_config+0x2fa>
        bme280_update();
 800179a:	f000 f861 	bl	8001860 <bme280_update>
        base += BME->altitude;
 800179e:	4b11      	ldr	r3, [pc, #68]	@ (80017e4 <bme280_config+0x320>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80017a6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80017aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        HAL_Delay(30);
 80017b2:	201e      	movs	r0, #30
 80017b4:	f007 fa4a 	bl	8008c4c <HAL_Delay>
    for(int i = 0; i < 50; i++) {
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	3301      	adds	r3, #1
 80017bc:	623b      	str	r3, [r7, #32]
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	2b31      	cmp	r3, #49	@ 0x31
 80017c2:	ddea      	ble.n	800179a <bme280_config+0x2d6>
    }
    BME->base_altitude = (base / 50.0);
 80017c4:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <bme280_config+0x320>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80017cc:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80017ec <bme280_config+0x328>
 80017d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017d4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bme280_update();
 80017d8:	f000 f842 	bl	8001860 <bme280_update>

    UNUSED(retVal);
}
 80017dc:	bf00      	nop
 80017de:	3728      	adds	r7, #40	@ 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000234 	.word	0x20000234
 80017e8:	20000230 	.word	0x20000230
 80017ec:	42480000 	.word	0x42480000

080017f0 <bme280_init>:

void bme280_init(BME_280_t* BME_sensor, I2C_HandleTypeDef* I2C_bme)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af04      	add	r7, sp, #16
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
    BME = BME_sensor;
 80017fa:	4a14      	ldr	r2, [pc, #80]	@ (800184c <bme280_init+0x5c>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6013      	str	r3, [r2, #0]
    I2C_ = I2C_bme;
 8001800:	4a13      	ldr	r2, [pc, #76]	@ (8001850 <bme280_init+0x60>)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	6013      	str	r3, [r2, #0]
    BME->parameters = &bme_params;
 8001806:	4b11      	ldr	r3, [pc, #68]	@ (800184c <bme280_init+0x5c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a12      	ldr	r2, [pc, #72]	@ (8001854 <bme280_init+0x64>)
 800180c:	601a      	str	r2, [r3, #0]
    bme_started_flag = 0;
 800180e:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <bme280_init+0x68>)
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]

    // Check BME280 ID
    uint8_t buf[1];
    HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8001814:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <bme280_init+0x60>)
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	2332      	movs	r3, #50	@ 0x32
 800181a:	9302      	str	r3, [sp, #8]
 800181c:	2301      	movs	r3, #1
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2301      	movs	r3, #1
 8001828:	22d0      	movs	r2, #208	@ 0xd0
 800182a:	21ec      	movs	r1, #236	@ 0xec
 800182c:	f009 f93c 	bl	800aaa8 <HAL_I2C_Mem_Read>
    if(*buf == 0x60)
 8001830:	7b3b      	ldrb	r3, [r7, #12]
 8001832:	2b60      	cmp	r3, #96	@ 0x60
 8001834:	d103      	bne.n	800183e <bme280_init+0x4e>
        is_BME_ok = 1;
 8001836:	4b09      	ldr	r3, [pc, #36]	@ (800185c <bme280_init+0x6c>)
 8001838:	2201      	movs	r2, #1
 800183a:	601a      	str	r2, [r3, #0]
    else
        is_BME_ok = 0;
}
 800183c:	e002      	b.n	8001844 <bme280_init+0x54>
        is_BME_ok = 0;
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <bme280_init+0x6c>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000234 	.word	0x20000234
 8001850:	20000230 	.word	0x20000230
 8001854:	200016b4 	.word	0x200016b4
 8001858:	20000238 	.word	0x20000238
 800185c:	200016d8 	.word	0x200016d8

08001860 <bme280_update>:

void bme280_update() {
 8001860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001864:	b0d2      	sub	sp, #328	@ 0x148
 8001866:	af00      	add	r7, sp, #0
    int32_t var1_t, var2_t, T, adc_T;
    bme280_getVals();
 8001868:	f7ff fd58 	bl	800131c <bme280_getVals>

    if(BME->isUpdated == 1){
 800186c:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <bme280_update+0x88>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001874:	2b01      	cmp	r3, #1
 8001876:	f040 840d 	bne.w	8002094 <bme280_update+0x834>

    	if (!bme_started_flag) {
 800187a:	4b1c      	ldr	r3, [pc, #112]	@ (80018ec <bme280_update+0x8c>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d112      	bne.n	80018a8 <bme280_update+0x48>
    	    bme_started_flag = 1;
 8001882:	4a1a      	ldr	r2, [pc, #104]	@ (80018ec <bme280_update+0x8c>)
 8001884:	2301      	movs	r3, #1
 8001886:	7013      	strb	r3, [r2, #0]
    	    BME->lastTime = HAL_GetTick();
 8001888:	f007 f9d4 	bl	8008c34 <HAL_GetTick>
 800188c:	ee07 0a90 	vmov	s15, r0
 8001890:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <bme280_update+0x88>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001898:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	    BME->deltaTime1 = 0.0f;
 800189c:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <bme280_update+0x88>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a6:	e041      	b.n	800192c <bme280_update+0xcc>
    	} else {
    	    uint32_t now = HAL_GetTick();
 80018a8:	f007 f9c4 	bl	8008c34 <HAL_GetTick>
 80018ac:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    	    BME->deltaTime1 = (now > BME->lastTime) ? (now - BME->lastTime) : 0.0f;
 80018b0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018bc:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <bme280_update+0x88>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80018c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018cc:	dd12      	ble.n	80018f4 <bme280_update+0x94>
 80018ce:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80018d2:	ee07 3a90 	vmov	s15, r3
 80018d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018da:	4b03      	ldr	r3, [pc, #12]	@ (80018e8 <bme280_update+0x88>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80018e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e6:	e007      	b.n	80018f8 <bme280_update+0x98>
 80018e8:	20000234 	.word	0x20000234
 80018ec:	20000238 	.word	0x20000238
 80018f0:	00000000 	.word	0x00000000
 80018f4:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 80018f0 <bme280_update+0x90>
 80018f8:	4bda      	ldr	r3, [pc, #872]	@ (8001c64 <bme280_update+0x404>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->deltaTime1 = BME->deltaTime1 / 1000.0f;
 8001900:	4bd8      	ldr	r3, [pc, #864]	@ (8001c64 <bme280_update+0x404>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001908:	4bd6      	ldr	r3, [pc, #856]	@ (8001c64 <bme280_update+0x404>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8001c68 <bme280_update+0x408>
 8001910:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001914:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->lastTime = now;
 8001918:	4bd2      	ldr	r3, [pc, #840]	@ (8001c64 <bme280_update+0x404>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001920:	ee07 2a90 	vmov	s15, r2
 8001924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001928:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	}

        //For temperature
        adc_T = BME->adcVals.ut;
 800192c:	4bcd      	ldr	r3, [pc, #820]	@ (8001c64 <bme280_update+0x404>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 8001936:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800193a:	10da      	asrs	r2, r3, #3
 800193c:	4bc9      	ldr	r3, [pc, #804]	@ (8001c64 <bme280_update+0x404>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	1ad2      	subs	r2, r2, r3
 8001948:	4bc6      	ldr	r3, [pc, #792]	@ (8001c64 <bme280_update+0x404>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	12db      	asrs	r3, r3, #11
 8001958:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 800195c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001960:	111a      	asrs	r2, r3, #4
 8001962:	4bc0      	ldr	r3, [pc, #768]	@ (8001c64 <bme280_update+0x404>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	1ad1      	subs	r1, r2, r3
 800196c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001970:	111a      	asrs	r2, r3, #4
 8001972:	4bbc      	ldr	r3, [pc, #752]	@ (8001c64 <bme280_update+0x404>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	131a      	asrs	r2, r3, #12
 8001982:	4bb8      	ldr	r3, [pc, #736]	@ (8001c64 <bme280_update+0x404>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800198c:	fb02 f303 	mul.w	r3, r2, r3
 8001990:	139b      	asrs	r3, r3, #14
 8001992:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        int32_t t_fine = var1_t + var2_t;
 8001996:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800199a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800199e:	4413      	add	r3, r2
 80019a0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        T = (t_fine * 5 + 128) >> 8;
 80019a4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	3380      	adds	r3, #128	@ 0x80
 80019b0:	121b      	asrs	r3, r3, #8
 80019b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        BME->temperature = (float)T / 100.0;
 80019b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80019ba:	ee07 3a90 	vmov	s15, r3
 80019be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c2:	4ba8      	ldr	r3, [pc, #672]	@ (8001c64 <bme280_update+0x404>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001c6c <bme280_update+0x40c>
 80019ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ce:	edc3 7a05 	vstr	s15, [r3, #20]

        //For pressure
        int64_t var1_p, var2_p, P, adc_P;
        adc_P = (int64_t)BME->adcVals.up;
 80019d2:	4ba4      	ldr	r3, [pc, #656]	@ (8001c64 <bme280_update+0x404>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	17da      	asrs	r2, r3, #31
 80019da:	653b      	str	r3, [r7, #80]	@ 0x50
 80019dc:	657a      	str	r2, [r7, #84]	@ 0x54
 80019de:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80019e2:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
        var1_p = ((int64_t)t_fine) - 128000;
 80019e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80019ea:	17da      	asrs	r2, r3, #31
 80019ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80019f0:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80019f4:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80019f8:	460b      	mov	r3, r1
 80019fa:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 80019fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a00:	4613      	mov	r3, r2
 8001a02:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8001a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001a0c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 8001a10:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a14:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a18:	fb03 f102 	mul.w	r1, r3, r2
 8001a1c:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a20:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	18ca      	adds	r2, r1, r3
 8001a2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a2e:	fba3 4503 	umull	r4, r5, r3, r3
 8001a32:	1953      	adds	r3, r2, r5
 8001a34:	461d      	mov	r5, r3
 8001a36:	4b8b      	ldr	r3, [pc, #556]	@ (8001c64 <bme280_update+0x404>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	17da      	asrs	r2, r3, #31
 8001a44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001a48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001a4c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001a50:	4603      	mov	r3, r0
 8001a52:	fb03 f205 	mul.w	r2, r3, r5
 8001a56:	460b      	mov	r3, r1
 8001a58:	fb04 f303 	mul.w	r3, r4, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4602      	mov	r2, r0
 8001a60:	fba4 1202 	umull	r1, r2, r4, r2
 8001a64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a68:	460a      	mov	r2, r1
 8001a6a:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a6e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a72:	4413      	add	r3, r2
 8001a74:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a78:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001a7c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8001a80:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001a84:	4b77      	ldr	r3, [pc, #476]	@ (8001c64 <bme280_update+0x404>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	17da      	asrs	r2, r3, #31
 8001a92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001a96:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001a9a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a9e:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001aa2:	462a      	mov	r2, r5
 8001aa4:	fb02 f203 	mul.w	r2, r2, r3
 8001aa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001aac:	4621      	mov	r1, r4
 8001aae:	fb01 f303 	mul.w	r3, r1, r3
 8001ab2:	441a      	add	r2, r3
 8001ab4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ab8:	4621      	mov	r1, r4
 8001aba:	fba3 ab01 	umull	sl, fp, r3, r1
 8001abe:	eb02 030b 	add.w	r3, r2, fp
 8001ac2:	469b      	mov	fp, r3
 8001ac4:	f04f 0000 	mov.w	r0, #0
 8001ac8:	f04f 0100 	mov.w	r1, #0
 8001acc:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001ad0:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001ad4:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001ad8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001adc:	1814      	adds	r4, r2, r0
 8001ade:	643c      	str	r4, [r7, #64]	@ 0x40
 8001ae0:	414b      	adcs	r3, r1
 8001ae2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ae4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001ae8:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 8001aec:	4b5d      	ldr	r3, [pc, #372]	@ (8001c64 <bme280_update+0x404>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	17da      	asrs	r2, r3, #31
 8001afa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001afe:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001b02:	f04f 0000 	mov.w	r0, #0
 8001b06:	f04f 0100 	mov.w	r1, #0
 8001b0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001b0e:	00d9      	lsls	r1, r3, #3
 8001b10:	2000      	movs	r0, #0
 8001b12:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001b16:	1814      	adds	r4, r2, r0
 8001b18:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001b1a:	414b      	adcs	r3, r1
 8001b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b1e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001b22:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001b26:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001b2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b2e:	fb03 f102 	mul.w	r1, r3, r2
 8001b32:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001b36:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	18ca      	adds	r2, r1, r3
 8001b40:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b44:	fba3 8903 	umull	r8, r9, r3, r3
 8001b48:	eb02 0309 	add.w	r3, r2, r9
 8001b4c:	4699      	mov	r9, r3
 8001b4e:	4b45      	ldr	r3, [pc, #276]	@ (8001c64 <bme280_update+0x404>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	17da      	asrs	r2, r3, #31
 8001b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001b64:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001b68:	4603      	mov	r3, r0
 8001b6a:	fb03 f209 	mul.w	r2, r3, r9
 8001b6e:	460b      	mov	r3, r1
 8001b70:	fb08 f303 	mul.w	r3, r8, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	4602      	mov	r2, r0
 8001b78:	fba8 1202 	umull	r1, r2, r8, r2
 8001b7c:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001b80:	460a      	mov	r2, r1
 8001b82:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001b86:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001b90:	f04f 0000 	mov.w	r0, #0
 8001b94:	f04f 0100 	mov.w	r1, #0
 8001b98:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001b9c:	4623      	mov	r3, r4
 8001b9e:	0a18      	lsrs	r0, r3, #8
 8001ba0:	462b      	mov	r3, r5
 8001ba2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001ba6:	462b      	mov	r3, r5
 8001ba8:	1219      	asrs	r1, r3, #8
 8001baa:	4b2e      	ldr	r3, [pc, #184]	@ (8001c64 <bme280_update+0x404>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	17da      	asrs	r2, r3, #31
 8001bb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001bbc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001bc0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001bc4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001bc8:	464a      	mov	r2, r9
 8001bca:	fb02 f203 	mul.w	r2, r2, r3
 8001bce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001bd2:	4644      	mov	r4, r8
 8001bd4:	fb04 f303 	mul.w	r3, r4, r3
 8001bd8:	441a      	add	r2, r3
 8001bda:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001bde:	4644      	mov	r4, r8
 8001be0:	fba3 4304 	umull	r4, r3, r3, r4
 8001be4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001be8:	4623      	mov	r3, r4
 8001bea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001bf2:	18d3      	adds	r3, r2, r3
 8001bf4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001c04:	464c      	mov	r4, r9
 8001c06:	0323      	lsls	r3, r4, #12
 8001c08:	4644      	mov	r4, r8
 8001c0a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001c0e:	4644      	mov	r4, r8
 8001c10:	0322      	lsls	r2, r4, #12
 8001c12:	1884      	adds	r4, r0, r2
 8001c14:	633c      	str	r4, [r7, #48]	@ 0x30
 8001c16:	eb41 0303 	adc.w	r3, r1, r3
 8001c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c1c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001c20:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
        var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8001c24:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c28:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001c2c:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001c30:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001c34:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <bme280_update+0x404>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	88db      	ldrh	r3, [r3, #6]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001c44:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001c48:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001c4c:	462b      	mov	r3, r5
 8001c4e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001c52:	4642      	mov	r2, r8
 8001c54:	fb02 f203 	mul.w	r2, r2, r3
 8001c58:	464b      	mov	r3, r9
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	fb01 f303 	mul.w	r3, r1, r3
 8001c60:	4413      	add	r3, r2
 8001c62:	e005      	b.n	8001c70 <bme280_update+0x410>
 8001c64:	20000234 	.word	0x20000234
 8001c68:	447a0000 	.word	0x447a0000
 8001c6c:	42c80000 	.word	0x42c80000
 8001c70:	4622      	mov	r2, r4
 8001c72:	4641      	mov	r1, r8
 8001c74:	fba2 1201 	umull	r1, r2, r2, r1
 8001c78:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001c7c:	460a      	mov	r2, r1
 8001c7e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001c82:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001c86:	4413      	add	r3, r2
 8001c88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001c98:	4629      	mov	r1, r5
 8001c9a:	104a      	asrs	r2, r1, #1
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	17cb      	asrs	r3, r1, #31
 8001ca0:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        if(var1_p == 0)
 8001ca4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	d106      	bne.n	8001cba <bme280_update+0x45a>
        {
            P = 0;
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8001cb8:	e14b      	b.n	8001f52 <bme280_update+0x6f2>
        }
        else
        {
            P = 1048576 - adc_P;
 8001cba:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 8001cc4:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001cc6:	eb61 0303 	sbc.w	r3, r1, r3
 8001cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ccc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001cd0:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
            P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001cd4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001cd8:	f04f 0000 	mov.w	r0, #0
 8001cdc:	f04f 0100 	mov.w	r1, #0
 8001ce0:	07d9      	lsls	r1, r3, #31
 8001ce2:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001ce6:	07d0      	lsls	r0, r2, #31
 8001ce8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001cec:	1a84      	subs	r4, r0, r2
 8001cee:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8001cf2:	eb61 0303 	sbc.w	r3, r1, r3
 8001cf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001cfa:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001cfe:	4622      	mov	r2, r4
 8001d00:	462b      	mov	r3, r5
 8001d02:	1891      	adds	r1, r2, r2
 8001d04:	6239      	str	r1, [r7, #32]
 8001d06:	415b      	adcs	r3, r3
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d0e:	4621      	mov	r1, r4
 8001d10:	1851      	adds	r1, r2, r1
 8001d12:	61b9      	str	r1, [r7, #24]
 8001d14:	4629      	mov	r1, r5
 8001d16:	414b      	adcs	r3, r1
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001d26:	4649      	mov	r1, r9
 8001d28:	018b      	lsls	r3, r1, #6
 8001d2a:	4641      	mov	r1, r8
 8001d2c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d30:	4641      	mov	r1, r8
 8001d32:	018a      	lsls	r2, r1, #6
 8001d34:	4641      	mov	r1, r8
 8001d36:	1889      	adds	r1, r1, r2
 8001d38:	6139      	str	r1, [r7, #16]
 8001d3a:	4649      	mov	r1, r9
 8001d3c:	eb43 0101 	adc.w	r1, r3, r1
 8001d40:	6179      	str	r1, [r7, #20]
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001d4e:	4649      	mov	r1, r9
 8001d50:	008b      	lsls	r3, r1, #2
 8001d52:	4641      	mov	r1, r8
 8001d54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d58:	4641      	mov	r1, r8
 8001d5a:	008a      	lsls	r2, r1, #2
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4603      	mov	r3, r0
 8001d62:	4622      	mov	r2, r4
 8001d64:	189b      	adds	r3, r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	462a      	mov	r2, r5
 8001d6c:	eb42 0303 	adc.w	r3, r2, r3
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001d7e:	4649      	mov	r1, r9
 8001d80:	008b      	lsls	r3, r1, #2
 8001d82:	4641      	mov	r1, r8
 8001d84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d88:	4641      	mov	r1, r8
 8001d8a:	008a      	lsls	r2, r1, #2
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4603      	mov	r3, r0
 8001d92:	4622      	mov	r2, r4
 8001d94:	189b      	adds	r3, r3, r2
 8001d96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d9a:	462b      	mov	r3, r5
 8001d9c:	460a      	mov	r2, r1
 8001d9e:	eb42 0303 	adc.w	r3, r2, r3
 8001da2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001da6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001daa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001dae:	f7ff f899 	bl	8000ee4 <__aeabi_ldivmod>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
            var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001dba:	4bb9      	ldr	r3, [pc, #740]	@ (80020a0 <bme280_update+0x840>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	17da      	asrs	r2, r3, #31
 8001dc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001dca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001dcc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001dd0:	f04f 0000 	mov.w	r0, #0
 8001dd4:	f04f 0100 	mov.w	r1, #0
 8001dd8:	0b50      	lsrs	r0, r2, #13
 8001dda:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001dde:	1359      	asrs	r1, r3, #13
 8001de0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001de4:	462b      	mov	r3, r5
 8001de6:	fb00 f203 	mul.w	r2, r0, r3
 8001dea:	4623      	mov	r3, r4
 8001dec:	fb03 f301 	mul.w	r3, r3, r1
 8001df0:	4413      	add	r3, r2
 8001df2:	4622      	mov	r2, r4
 8001df4:	fba2 1200 	umull	r1, r2, r2, r0
 8001df8:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001dfc:	460a      	mov	r2, r1
 8001dfe:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001e02:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001e06:	4413      	add	r3, r2
 8001e08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001e0c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001e10:	f04f 0000 	mov.w	r0, #0
 8001e14:	f04f 0100 	mov.w	r1, #0
 8001e18:	0b50      	lsrs	r0, r2, #13
 8001e1a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001e1e:	1359      	asrs	r1, r3, #13
 8001e20:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001e24:	462b      	mov	r3, r5
 8001e26:	fb00 f203 	mul.w	r2, r0, r3
 8001e2a:	4623      	mov	r3, r4
 8001e2c:	fb03 f301 	mul.w	r3, r3, r1
 8001e30:	4413      	add	r3, r2
 8001e32:	4622      	mov	r2, r4
 8001e34:	fba2 1200 	umull	r1, r2, r2, r0
 8001e38:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001e3c:	460a      	mov	r2, r1
 8001e3e:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001e42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001e46:	4413      	add	r3, r2
 8001e48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001e58:	4621      	mov	r1, r4
 8001e5a:	0e4a      	lsrs	r2, r1, #25
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001e62:	4629      	mov	r1, r5
 8001e64:	164b      	asrs	r3, r1, #25
 8001e66:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 8001e6a:	4b8d      	ldr	r3, [pc, #564]	@ (80020a0 <bme280_update+0x840>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	17da      	asrs	r2, r3, #31
 8001e78:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e7a:	677a      	str	r2, [r7, #116]	@ 0x74
 8001e7c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001e80:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001e84:	462a      	mov	r2, r5
 8001e86:	fb02 f203 	mul.w	r2, r2, r3
 8001e8a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001e8e:	4621      	mov	r1, r4
 8001e90:	fb01 f303 	mul.w	r3, r1, r3
 8001e94:	4413      	add	r3, r2
 8001e96:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	fba2 1201 	umull	r1, r2, r2, r1
 8001ea0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001eaa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001eae:	4413      	add	r3, r2
 8001eb0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	0cca      	lsrs	r2, r1, #19
 8001ec4:	4629      	mov	r1, r5
 8001ec6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001eca:	4629      	mov	r1, r5
 8001ecc:	14cb      	asrs	r3, r1, #19
 8001ece:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
            P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 8001ed2:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001ed6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001eda:	1884      	adds	r4, r0, r2
 8001edc:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001ede:	eb41 0303 	adc.w	r3, r1, r3
 8001ee2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001ee4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001ee8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001eec:	4621      	mov	r1, r4
 8001eee:	1889      	adds	r1, r1, r2
 8001ef0:	6639      	str	r1, [r7, #96]	@ 0x60
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	eb43 0101 	adc.w	r1, r3, r1
 8001ef8:	6679      	str	r1, [r7, #100]	@ 0x64
 8001efa:	f04f 0000 	mov.w	r0, #0
 8001efe:	f04f 0100 	mov.w	r1, #0
 8001f02:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001f06:	4623      	mov	r3, r4
 8001f08:	0a18      	lsrs	r0, r3, #8
 8001f0a:	462b      	mov	r3, r5
 8001f0c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001f10:	462b      	mov	r3, r5
 8001f12:	1219      	asrs	r1, r3, #8
 8001f14:	4b62      	ldr	r3, [pc, #392]	@ (80020a0 <bme280_update+0x840>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	17da      	asrs	r2, r3, #31
 8001f22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001f24:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001f32:	464c      	mov	r4, r9
 8001f34:	0123      	lsls	r3, r4, #4
 8001f36:	4644      	mov	r4, r8
 8001f38:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001f3c:	4644      	mov	r4, r8
 8001f3e:	0122      	lsls	r2, r4, #4
 8001f40:	1884      	adds	r4, r0, r2
 8001f42:	603c      	str	r4, [r7, #0]
 8001f44:	eb41 0303 	adc.w	r3, r1, r3
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001f4e:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
        }

        BME->pressure = ((float)P / 256.0 / 100.0);
 8001f52:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001f56:	f7fe ff87 	bl	8000e68 <__aeabi_l2f>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fb13 	bl	8000588 <__aeabi_f2d>
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	4b4f      	ldr	r3, [pc, #316]	@ (80020a4 <bme280_update+0x844>)
 8001f68:	f7fe fc90 	bl	800088c <__aeabi_ddiv>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4610      	mov	r0, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	4b4b      	ldr	r3, [pc, #300]	@ (80020a8 <bme280_update+0x848>)
 8001f7a:	f7fe fc87 	bl	800088c <__aeabi_ddiv>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4947      	ldr	r1, [pc, #284]	@ (80020a0 <bme280_update+0x840>)
 8001f84:	680c      	ldr	r4, [r1, #0]
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7fe fe4d 	bl	8000c28 <__aeabi_d2f>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	61a3      	str	r3, [r4, #24]

        //for humidity
        uint32_t var_h, adc_H;
        adc_H = BME->adcVals.uh;
 8001f92:	4b43      	ldr	r3, [pc, #268]	@ (80020a0 <bme280_update+0x840>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

        var_h = (t_fine - ((int32_t)76800));
 8001f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001fa0:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001fa4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8001fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001fac:	039a      	lsls	r2, r3, #14
 8001fae:	4b3c      	ldr	r3, [pc, #240]	@ (80020a0 <bme280_update+0x840>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001fb8:	051b      	lsls	r3, r3, #20
 8001fba:	1ad2      	subs	r2, r2, r3
 8001fbc:	4b38      	ldr	r3, [pc, #224]	@ (80020a0 <bme280_update+0x840>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001fcc:	fb01 f303 	mul.w	r3, r1, r3
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001fd6:	0bdb      	lsrs	r3, r3, #15
 8001fd8:	4a31      	ldr	r2, [pc, #196]	@ (80020a0 <bme280_update+0x840>)
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	6812      	ldr	r2, [r2, #0]
 8001fde:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001fe8:	fb01 f202 	mul.w	r2, r1, r2
 8001fec:	0a92      	lsrs	r2, r2, #10
 8001fee:	492c      	ldr	r1, [pc, #176]	@ (80020a0 <bme280_update+0x840>)
 8001ff0:	6809      	ldr	r1, [r1, #0]
 8001ff2:	6809      	ldr	r1, [r1, #0]
 8001ff4:	7f09      	ldrb	r1, [r1, #28]
 8001ff6:	4608      	mov	r0, r1
 8001ff8:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001ffc:	fb00 f101 	mul.w	r1, r0, r1
 8002000:	0ac9      	lsrs	r1, r1, #11
 8002002:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8002006:	fb01 f202 	mul.w	r2, r1, r2
 800200a:	0a92      	lsrs	r2, r2, #10
 800200c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8002010:	4923      	ldr	r1, [pc, #140]	@ (80020a0 <bme280_update+0x840>)
 8002012:	6809      	ldr	r1, [r1, #0]
 8002014:	6809      	ldr	r1, [r1, #0]
 8002016:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800201a:	fb01 f202 	mul.w	r2, r1, r2
 800201e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002022:	0b92      	lsrs	r2, r2, #14
 8002024:	fb02 f303 	mul.w	r3, r2, r3
 8002028:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 800202c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002030:	0bdb      	lsrs	r3, r3, #15
 8002032:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002036:	0bd2      	lsrs	r2, r2, #15
 8002038:	fb02 f303 	mul.w	r3, r2, r3
 800203c:	09db      	lsrs	r3, r3, #7
 800203e:	4a18      	ldr	r2, [pc, #96]	@ (80020a0 <bme280_update+0x840>)
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	7e12      	ldrb	r2, [r2, #24]
 8002046:	fb02 f303 	mul.w	r3, r2, r3
 800204a:	091b      	lsrs	r3, r3, #4
 800204c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h < 0 ? 0 : var_h);
        var_h = (var_h > 419430400 ? 419430400 : var_h);
 8002056:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800205a:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800205e:	bf28      	it	cs
 8002060:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 8002064:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 8002068:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800206c:	0b1b      	lsrs	r3, r3, #12
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002076:	4b0a      	ldr	r3, [pc, #40]	@ (80020a0 <bme280_update+0x840>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80020ac <bme280_update+0x84c>
 800207e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002082:	edc3 7a07 	vstr	s15, [r3, #28]

        // Calculate raw altitude (no filtering)
        bme280_calculate_altitude();
 8002086:	f7ff f9cb 	bl	8001420 <bme280_calculate_altitude>
        BME->isUpdated = 0;
 800208a:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <bme280_update+0x840>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
}
 8002094:	bf00      	nop
 8002096:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800209a:	46bd      	mov	sp, r7
 800209c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020a0:	20000234 	.word	0x20000234
 80020a4:	40700000 	.word	0x40700000
 80020a8:	40590000 	.word	0x40590000
 80020ac:	44800000 	.word	0x44800000

080020b0 <bmi088_init>:
	HAL_I2C_Init(BMI_I2c);

}
*/
uint8_t bmi088_init(bmi088_struct_t* BMI)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af04      	add	r7, sp, #16
 80020b6:	6078      	str	r0, [r7, #4]
	//quaternionSet_zero();
	uint8_t ret_val = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]
	BMI->flags.isGyroUpdated = 0;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
	BMI->flags.isAccelUpdated = 0;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	705a      	strb	r2, [r3, #1]
	is_time_updated = 0;
 80020c8:	4b23      	ldr	r3, [pc, #140]	@ (8002158 <bmi088_init+0xa8>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
	is_starded = 0;
 80020ce:	4b23      	ldr	r3, [pc, #140]	@ (800215c <bmi088_init+0xac>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	733b      	strb	r3, [r7, #12]

	if(BMI->device_config.offsets == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <bmi088_init+0x40>
	{
		BMI->device_config.offsets = calloc(sizeof(*BMI->device_config.offsets), 1);
 80020e0:	2101      	movs	r1, #1
 80020e2:	2018      	movs	r0, #24
 80020e4:	f00c f872 	bl	800e1cc <calloc>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	615a      	str	r2, [r3, #20]

	}

	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68d8      	ldr	r0, [r3, #12]
 80020f4:	2332      	movs	r3, #50	@ 0x32
 80020f6:	9302      	str	r3, [sp, #8]
 80020f8:	2301      	movs	r3, #1
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	f107 030c 	add.w	r3, r7, #12
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	2301      	movs	r3, #1
 8002104:	2200      	movs	r2, #0
 8002106:	2130      	movs	r1, #48	@ 0x30
 8002108:	f008 fcce 	bl	800aaa8 <HAL_I2C_Mem_Read>
 800210c:	4603      	mov	r3, r0
 800210e:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &buf[1], 1, 50);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68d8      	ldr	r0, [r3, #12]
 8002114:	2332      	movs	r3, #50	@ 0x32
 8002116:	9302      	str	r3, [sp, #8]
 8002118:	2301      	movs	r3, #1
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	f107 030c 	add.w	r3, r7, #12
 8002120:	3301      	adds	r3, #1
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2301      	movs	r3, #1
 8002126:	2200      	movs	r2, #0
 8002128:	21d0      	movs	r1, #208	@ 0xd0
 800212a:	f008 fcbd 	bl	800aaa8 <HAL_I2C_Mem_Read>
 800212e:	4603      	mov	r3, r0
 8002130:	73bb      	strb	r3, [r7, #14]
	UNUSED(ret);
	if(!(buf[0] == 0x1E))
 8002132:	7b3b      	ldrb	r3, [r7, #12]
 8002134:	2b1e      	cmp	r3, #30
 8002136:	d003      	beq.n	8002140 <bmi088_init+0x90>
	{
		ret_val = ret_val | 0x01;
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
	}
	if(!(buf[1] == 0x0F))
 8002140:	7b7b      	ldrb	r3, [r7, #13]
 8002142:	2b0f      	cmp	r3, #15
 8002144:	d003      	beq.n	800214e <bmi088_init+0x9e>
	{
		ret_val = ret_val | 0x02;
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	f043 0302 	orr.w	r3, r3, #2
 800214c:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000239 	.word	0x20000239
 800215c:	2000023a 	.word	0x2000023a

08002160 <bmi088_config>:

void bmi088_config(bmi088_struct_t* BMI)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af04      	add	r7, sp, #16
 8002166:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(BMI->device_config.acc_IRQ);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800216e:	4618      	mov	r0, r3
 8002170:	f007 fadf 	bl	8009732 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BMI->device_config.gyro_IRQ);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800217a:	4618      	mov	r0, r3
 800217c:	f007 fad9 	bl	8009732 <HAL_NVIC_DisableIRQ>

	HAL_StatusTypeDef retVal = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 8002184:	2301      	movs	r3, #1
 8002186:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68d8      	ldr	r0, [r3, #12]
 800218c:	2364      	movs	r3, #100	@ 0x64
 800218e:	9302      	str	r3, [sp, #8]
 8002190:	2301      	movs	r3, #1
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2301      	movs	r3, #1
 800219c:	227c      	movs	r2, #124	@ 0x7c
 800219e:	2130      	movs	r1, #48	@ 0x30
 80021a0:	f008 fb88 	bl	800a8b4 <HAL_I2C_Mem_Write>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68d8      	ldr	r0, [r3, #12]
 80021b6:	2364      	movs	r3, #100	@ 0x64
 80021b8:	9302      	str	r3, [sp, #8]
 80021ba:	2301      	movs	r3, #1
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	f107 030c 	add.w	r3, r7, #12
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2301      	movs	r3, #1
 80021c6:	227d      	movs	r2, #125	@ 0x7d
 80021c8:	2130      	movs	r1, #48	@ 0x30
 80021ca:	f008 fb73 	bl	800a8b4 <HAL_I2C_Mem_Write>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461a      	mov	r2, r3
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 80021d8:	2014      	movs	r0, #20
 80021da:	f006 fd37 	bl	8008c4c <HAL_Delay>

	buf[0] = ACC_RESET;
 80021de:	23b6      	movs	r3, #182	@ 0xb6
 80021e0:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68d8      	ldr	r0, [r3, #12]
 80021e6:	2364      	movs	r3, #100	@ 0x64
 80021e8:	9302      	str	r3, [sp, #8]
 80021ea:	2301      	movs	r3, #1
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	f107 030c 	add.w	r3, r7, #12
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	2301      	movs	r3, #1
 80021f6:	227e      	movs	r2, #126	@ 0x7e
 80021f8:	2130      	movs	r1, #48	@ 0x30
 80021fa:	f008 fb5b 	bl	800a8b4 <HAL_I2C_Mem_Write>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	4313      	orrs	r3, r2
 8002206:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <bmi088_config+0xb4>
 800220e:	4bb4      	ldr	r3, [pc, #720]	@ (80024e0 <bmi088_config+0x380>)
 8002210:	22a1      	movs	r2, #161	@ 0xa1
 8002212:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002214:	200a      	movs	r0, #10
 8002216:	f006 fd19 	bl	8008c4c <HAL_Delay>

	buf[0] = FIFO_RESET;
 800221a:	23b0      	movs	r3, #176	@ 0xb0
 800221c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68d8      	ldr	r0, [r3, #12]
 8002222:	2364      	movs	r3, #100	@ 0x64
 8002224:	9302      	str	r3, [sp, #8]
 8002226:	2301      	movs	r3, #1
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	f107 030c 	add.w	r3, r7, #12
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	2301      	movs	r3, #1
 8002232:	227e      	movs	r2, #126	@ 0x7e
 8002234:	2130      	movs	r1, #48	@ 0x30
 8002236:	f008 fb3d 	bl	800a8b4 <HAL_I2C_Mem_Write>
 800223a:	4603      	mov	r3, r0
 800223c:	461a      	mov	r2, r3
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	4313      	orrs	r3, r2
 8002242:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <bmi088_config+0xf0>
 800224a:	4ba5      	ldr	r3, [pc, #660]	@ (80024e0 <bmi088_config+0x380>)
 800224c:	22a6      	movs	r2, #166	@ 0xa6
 800224e:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002250:	200a      	movs	r0, #10
 8002252:	f006 fcfb 	bl	8008c4c <HAL_Delay>

	buf[0] = GYRO_RESET;
 8002256:	23b6      	movs	r3, #182	@ 0xb6
 8002258:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68d8      	ldr	r0, [r3, #12]
 800225e:	2364      	movs	r3, #100	@ 0x64
 8002260:	9302      	str	r3, [sp, #8]
 8002262:	2301      	movs	r3, #1
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	f107 030c 	add.w	r3, r7, #12
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2301      	movs	r3, #1
 800226e:	2214      	movs	r2, #20
 8002270:	21d0      	movs	r1, #208	@ 0xd0
 8002272:	f008 fb1f 	bl	800a8b4 <HAL_I2C_Mem_Write>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	4313      	orrs	r3, r2
 800227e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <bmi088_config+0x12c>
 8002286:	4b96      	ldr	r3, [pc, #600]	@ (80024e0 <bmi088_config+0x380>)
 8002288:	22ab      	movs	r2, #171	@ 0xab
 800228a:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 800228c:	200a      	movs	r0, #10
 800228e:	f006 fcdd 	bl	8008c4c <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->device_config.gyro_range;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7a9b      	ldrb	r3, [r3, #10]
 8002296:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68d8      	ldr	r0, [r3, #12]
 800229c:	2364      	movs	r3, #100	@ 0x64
 800229e:	9302      	str	r3, [sp, #8]
 80022a0:	2301      	movs	r3, #1
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2301      	movs	r3, #1
 80022ac:	220f      	movs	r2, #15
 80022ae:	21d0      	movs	r1, #208	@ 0xd0
 80022b0:	f008 fb00 	bl	800a8b4 <HAL_I2C_Mem_Write>
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <bmi088_config+0x16a>
 80022c4:	4b86      	ldr	r3, [pc, #536]	@ (80024e0 <bmi088_config+0x380>)
 80022c6:	22b1      	movs	r2, #177	@ 0xb1
 80022c8:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_bandWidth;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7a5b      	ldrb	r3, [r3, #9]
 80022ce:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68d8      	ldr	r0, [r3, #12]
 80022d4:	2314      	movs	r3, #20
 80022d6:	9302      	str	r3, [sp, #8]
 80022d8:	2301      	movs	r3, #1
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	f107 030c 	add.w	r3, r7, #12
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	2301      	movs	r3, #1
 80022e4:	2210      	movs	r2, #16
 80022e6:	21d0      	movs	r1, #208	@ 0xd0
 80022e8:	f008 fae4 	bl	800a8b4 <HAL_I2C_Mem_Write>
 80022ec:	4603      	mov	r3, r0
 80022ee:	461a      	mov	r2, r3
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <bmi088_config+0x1a2>
 80022fc:	4b78      	ldr	r3, [pc, #480]	@ (80024e0 <bmi088_config+0x380>)
 80022fe:	22b5      	movs	r2, #181	@ 0xb5
 8002300:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_powerMode;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7a1b      	ldrb	r3, [r3, #8]
 8002306:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68d8      	ldr	r0, [r3, #12]
 800230c:	2314      	movs	r3, #20
 800230e:	9302      	str	r3, [sp, #8]
 8002310:	2301      	movs	r3, #1
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	2301      	movs	r3, #1
 800231c:	2211      	movs	r2, #17
 800231e:	21d0      	movs	r1, #208	@ 0xd0
 8002320:	f008 fac8 	bl	800a8b4 <HAL_I2C_Mem_Write>
 8002324:	4603      	mov	r3, r0
 8002326:	461a      	mov	r2, r3
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	4313      	orrs	r3, r2
 800232c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <bmi088_config+0x1da>
 8002334:	4b6a      	ldr	r3, [pc, #424]	@ (80024e0 <bmi088_config+0x380>)
 8002336:	22b9      	movs	r2, #185	@ 0xb9
 8002338:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 800233a:	2014      	movs	r0, #20
 800233c:	f006 fc86 	bl	8008c4c <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 8002340:	2380      	movs	r3, #128	@ 0x80
 8002342:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68d8      	ldr	r0, [r3, #12]
 8002348:	2314      	movs	r3, #20
 800234a:	9302      	str	r3, [sp, #8]
 800234c:	2301      	movs	r3, #1
 800234e:	9301      	str	r3, [sp, #4]
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	2301      	movs	r3, #1
 8002358:	2215      	movs	r2, #21
 800235a:	21d0      	movs	r1, #208	@ 0xd0
 800235c:	f008 faaa 	bl	800a8b4 <HAL_I2C_Mem_Write>
 8002360:	4603      	mov	r3, r0
 8002362:	461a      	mov	r2, r3
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	4313      	orrs	r3, r2
 8002368:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <bmi088_config+0x216>
 8002370:	4b5b      	ldr	r3, [pc, #364]	@ (80024e0 <bmi088_config+0x380>)
 8002372:	22bf      	movs	r2, #191	@ 0xbf
 8002374:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0) | (GYRO_INT_ACT_HIGH << 2);
 8002376:	2305      	movs	r3, #5
 8002378:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68d8      	ldr	r0, [r3, #12]
 800237e:	2314      	movs	r3, #20
 8002380:	9302      	str	r3, [sp, #8]
 8002382:	2301      	movs	r3, #1
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	f107 030c 	add.w	r3, r7, #12
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	2301      	movs	r3, #1
 800238e:	2216      	movs	r2, #22
 8002390:	21d0      	movs	r1, #208	@ 0xd0
 8002392:	f008 fa8f 	bl	800a8b4 <HAL_I2C_Mem_Write>
 8002396:	4603      	mov	r3, r0
 8002398:	461a      	mov	r2, r3
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	4313      	orrs	r3, r2
 800239e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <bmi088_config+0x24c>
 80023a6:	4b4e      	ldr	r3, [pc, #312]	@ (80024e0 <bmi088_config+0x380>)
 80023a8:	22c3      	movs	r2, #195	@ 0xc3
 80023aa:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_BOTH;
 80023ac:	2381      	movs	r3, #129	@ 0x81
 80023ae:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68d8      	ldr	r0, [r3, #12]
 80023b4:	2314      	movs	r3, #20
 80023b6:	9302      	str	r3, [sp, #8]
 80023b8:	2301      	movs	r3, #1
 80023ba:	9301      	str	r3, [sp, #4]
 80023bc:	f107 030c 	add.w	r3, r7, #12
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	2301      	movs	r3, #1
 80023c4:	2218      	movs	r2, #24
 80023c6:	21d0      	movs	r1, #208	@ 0xd0
 80023c8:	f008 fa74 	bl	800a8b4 <HAL_I2C_Mem_Write>
 80023cc:	4603      	mov	r3, r0
 80023ce:	461a      	mov	r2, r3
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <bmi088_config+0x282>
 80023dc:	4b40      	ldr	r3, [pc, #256]	@ (80024e0 <bmi088_config+0x380>)
 80023de:	22c7      	movs	r2, #199	@ 0xc7
 80023e0:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 80023e2:	2304      	movs	r3, #4
 80023e4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68d8      	ldr	r0, [r3, #12]
 80023ea:	2314      	movs	r3, #20
 80023ec:	9302      	str	r3, [sp, #8]
 80023ee:	2301      	movs	r3, #1
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	f107 030c 	add.w	r3, r7, #12
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2301      	movs	r3, #1
 80023fa:	227d      	movs	r2, #125	@ 0x7d
 80023fc:	2130      	movs	r1, #48	@ 0x30
 80023fe:	f008 fa59 	bl	800a8b4 <HAL_I2C_Mem_Write>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	4313      	orrs	r3, r2
 800240a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <bmi088_config+0x2b8>
 8002412:	4b33      	ldr	r3, [pc, #204]	@ (80024e0 <bmi088_config+0x380>)
 8002414:	22cc      	movs	r2, #204	@ 0xcc
 8002416:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8002418:	2008      	movs	r0, #8
 800241a:	f006 fc17 	bl	8008c4c <HAL_Delay>

	buf[0] = BMI->device_config.acc_powerMode;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	791b      	ldrb	r3, [r3, #4]
 8002422:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68d8      	ldr	r0, [r3, #12]
 8002428:	2314      	movs	r3, #20
 800242a:	9302      	str	r3, [sp, #8]
 800242c:	2301      	movs	r3, #1
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	2301      	movs	r3, #1
 8002438:	227c      	movs	r2, #124	@ 0x7c
 800243a:	2130      	movs	r1, #48	@ 0x30
 800243c:	f008 fa3a 	bl	800a8b4 <HAL_I2C_Mem_Write>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	4313      	orrs	r3, r2
 8002448:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <bmi088_config+0x2f6>
 8002450:	4b23      	ldr	r3, [pc, #140]	@ (80024e0 <bmi088_config+0x380>)
 8002452:	22d1      	movs	r2, #209	@ 0xd1
 8002454:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8002456:	2008      	movs	r0, #8
 8002458:	f006 fbf8 	bl	8008c4c <HAL_Delay>

	buf[0] = (BMI->device_config.acc_bandwith << 4) | BMI->device_config.acc_outputDateRate;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	799b      	ldrb	r3, [r3, #6]
 8002460:	b25b      	sxtb	r3, r3
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	b25a      	sxtb	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	79db      	ldrb	r3, [r3, #7]
 800246a:	b25b      	sxtb	r3, r3
 800246c:	4313      	orrs	r3, r2
 800246e:	b25b      	sxtb	r3, r3
 8002470:	b2db      	uxtb	r3, r3
 8002472:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68d8      	ldr	r0, [r3, #12]
 8002478:	2314      	movs	r3, #20
 800247a:	9302      	str	r3, [sp, #8]
 800247c:	2301      	movs	r3, #1
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	f107 030c 	add.w	r3, r7, #12
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2301      	movs	r3, #1
 8002488:	2240      	movs	r2, #64	@ 0x40
 800248a:	2130      	movs	r1, #48	@ 0x30
 800248c:	f008 fa12 	bl	800a8b4 <HAL_I2C_Mem_Write>
 8002490:	4603      	mov	r3, r0
 8002492:	461a      	mov	r2, r3
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	4313      	orrs	r3, r2
 8002498:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <bmi088_config+0x346>
 80024a0:	4b0f      	ldr	r3, [pc, #60]	@ (80024e0 <bmi088_config+0x380>)
 80024a2:	22d6      	movs	r2, #214	@ 0xd6
 80024a4:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.acc_range;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	795b      	ldrb	r3, [r3, #5]
 80024aa:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68d8      	ldr	r0, [r3, #12]
 80024b0:	2314      	movs	r3, #20
 80024b2:	9302      	str	r3, [sp, #8]
 80024b4:	2301      	movs	r3, #1
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	f107 030c 	add.w	r3, r7, #12
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	2301      	movs	r3, #1
 80024c0:	2241      	movs	r2, #65	@ 0x41
 80024c2:	2130      	movs	r1, #48	@ 0x30
 80024c4:	f008 f9f6 	bl	800a8b4 <HAL_I2C_Mem_Write>
 80024c8:	4603      	mov	r3, r0
 80024ca:	461a      	mov	r2, r3
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <bmi088_config+0x384>
 80024d8:	4b01      	ldr	r3, [pc, #4]	@ (80024e0 <bmi088_config+0x380>)
 80024da:	22da      	movs	r2, #218	@ 0xda
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e001      	b.n	80024e4 <bmi088_config+0x384>
 80024e0:	2000023c 	.word	0x2000023c

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 80024e4:	230a      	movs	r3, #10
 80024e6:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68d8      	ldr	r0, [r3, #12]
 80024ec:	2314      	movs	r3, #20
 80024ee:	9302      	str	r3, [sp, #8]
 80024f0:	2301      	movs	r3, #1
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	f107 030c 	add.w	r3, r7, #12
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2301      	movs	r3, #1
 80024fc:	2253      	movs	r2, #83	@ 0x53
 80024fe:	2130      	movs	r1, #48	@ 0x30
 8002500:	f008 f9d8 	bl	800a8b4 <HAL_I2C_Mem_Write>
 8002504:	4603      	mov	r3, r0
 8002506:	461a      	mov	r2, r3
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	4313      	orrs	r3, r2
 800250c:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 800250e:	2304      	movs	r3, #4
 8002510:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68d8      	ldr	r0, [r3, #12]
 8002516:	2314      	movs	r3, #20
 8002518:	9302      	str	r3, [sp, #8]
 800251a:	2301      	movs	r3, #1
 800251c:	9301      	str	r3, [sp, #4]
 800251e:	f107 030c 	add.w	r3, r7, #12
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	2301      	movs	r3, #1
 8002526:	2258      	movs	r2, #88	@ 0x58
 8002528:	2130      	movs	r1, #48	@ 0x30
 800252a:	f008 f9c3 	bl	800a8b4 <HAL_I2C_Mem_Write>
 800252e:	4603      	mov	r3, r0
 8002530:	461a      	mov	r2, r3
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	4313      	orrs	r3, r2
 8002536:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(BMI->device_config.acc_IRQ);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800253e:	4618      	mov	r0, r3
 8002540:	f007 f8e9 	bl	8009716 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BMI->device_config.gyro_IRQ);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800254a:	4618      	mov	r0, r3
 800254c:	f007 f8e3 	bl	8009716 <HAL_NVIC_EnableIRQ>
	HAL_Delay(70);
 8002550:	2046      	movs	r0, #70	@ 0x46
 8002552:	f006 fb7b 	bl	8008c4c <HAL_Delay>
}
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop

08002560 <bmi088_update>:


void bmi088_update(bmi088_struct_t* BMI)
{
 8002560:	b5b0      	push	{r4, r5, r7, lr}
 8002562:	b092      	sub	sp, #72	@ 0x48
 8002564:	af04      	add	r7, sp, #16
 8002566:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret_val = HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		if(BMI->flags.isAccelUpdated)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	785b      	ldrb	r3, [r3, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8211 	beq.w	800299a <bmi088_update+0x43a>
		{
			uint8_t raw_accel[9];
			uint8_t	raw_temp[2];

			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_accel, 9, 20);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68d8      	ldr	r0, [r3, #12]
 800257c:	2314      	movs	r3, #20
 800257e:	9302      	str	r3, [sp, #8]
 8002580:	2309      	movs	r3, #9
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	2301      	movs	r3, #1
 800258c:	2212      	movs	r2, #18
 800258e:	2130      	movs	r1, #48	@ 0x30
 8002590:	f008 fa8a 	bl	800aaa8 <HAL_I2C_Mem_Read>
 8002594:	4603      	mov	r3, r0
 8002596:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, raw_temp, 2, 20);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68d8      	ldr	r0, [r3, #12]
 800259e:	2314      	movs	r3, #20
 80025a0:	9302      	str	r3, [sp, #8]
 80025a2:	2302      	movs	r3, #2
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	f107 0310 	add.w	r3, r7, #16
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2301      	movs	r3, #1
 80025ae:	2222      	movs	r2, #34	@ 0x22
 80025b0:	2130      	movs	r1, #48	@ 0x30
 80025b2:	f008 fa79 	bl	800aaa8 <HAL_I2C_Mem_Read>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			uint16_t Temp_uint11 = (raw_temp[0] << 3) | (raw_temp[1] >> 5);
 80025bc:	7c3b      	ldrb	r3, [r7, #16]
 80025be:	b21b      	sxth	r3, r3
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	b21a      	sxth	r2, r3
 80025c4:	7c7b      	ldrb	r3, [r7, #17]
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	4313      	orrs	r3, r2
 80025ce:	b21b      	sxth	r3, r3
 80025d0:	86bb      	strh	r3, [r7, #52]	@ 0x34
			int16_t Temp_int11 = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	867b      	strh	r3, [r7, #50]	@ 0x32
			if (Temp_uint11 > 1023){
 80025d6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80025d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025dc:	d305      	bcc.n	80025ea <bmi088_update+0x8a>
				Temp_int11 = Temp_uint11 - 2048;
 80025de:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80025e0:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	867b      	strh	r3, [r7, #50]	@ 0x32
 80025e8:	e023      	b.n	8002632 <bmi088_update+0xd2>
			}
			else{
				Temp_int11 = Temp_uint11;
 80025ea:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80025ec:	867b      	strh	r3, [r7, #50]	@ 0x32
				BMI->datas.temp = (float)Temp_int11 * 0.125 + 23.0;
 80025ee:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025fa:	ee17 0a90 	vmov	r0, s15
 80025fe:	f7fd ffc3 	bl	8000588 <__aeabi_f2d>
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800260a:	f7fe f815 	bl	8000638 <__aeabi_dmul>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4610      	mov	r0, r2
 8002614:	4619      	mov	r1, r3
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	4bd1      	ldr	r3, [pc, #836]	@ (8002960 <bmi088_update+0x400>)
 800261c:	f7fd fe56 	bl	80002cc <__adddf3>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4610      	mov	r0, r2
 8002626:	4619      	mov	r1, r3
 8002628:	f7fe fafe 	bl	8000c28 <__aeabi_d2f>
 800262c:	4602      	mov	r2, r0
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			uint32_t sensorTime = (raw_accel[8] << 16) | (raw_accel[7] << 8) | raw_accel[6];
 8002632:	7f3b      	ldrb	r3, [r7, #28]
 8002634:	041a      	lsls	r2, r3, #16
 8002636:	7efb      	ldrb	r3, [r7, #27]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	4313      	orrs	r3, r2
 800263c:	7eba      	ldrb	r2, [r7, #26]
 800263e:	4313      	orrs	r3, r2
 8002640:	62fb      	str	r3, [r7, #44]	@ 0x2c

			BMI->datas.current_time= (float)sensorTime * 39.0625 / 1000000.0;
 8002642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002644:	ee07 3a90 	vmov	s15, r3
 8002648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800264c:	ee17 0a90 	vmov	r0, s15
 8002650:	f7fd ff9a 	bl	8000588 <__aeabi_f2d>
 8002654:	a3ba      	add	r3, pc, #744	@ (adr r3, 8002940 <bmi088_update+0x3e0>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	f7fd ffed 	bl	8000638 <__aeabi_dmul>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4610      	mov	r0, r2
 8002664:	4619      	mov	r1, r3
 8002666:	a3b8      	add	r3, pc, #736	@ (adr r3, 8002948 <bmi088_update+0x3e8>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fe f90e 	bl	800088c <__aeabi_ddiv>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe fad6 	bl	8000c28 <__aeabi_d2f>
 800267c:	4602      	mov	r2, r0
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	669a      	str	r2, [r3, #104]	@ 0x68

			int16_t acc_z_16 = (raw_accel[5] << 8) | raw_accel[4];
 8002682:	7e7b      	ldrb	r3, [r7, #25]
 8002684:	b21b      	sxth	r3, r3
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	b21a      	sxth	r2, r3
 800268a:	7e3b      	ldrb	r3, [r7, #24]
 800268c:	b21b      	sxth	r3, r3
 800268e:	4313      	orrs	r3, r2
 8002690:	857b      	strh	r3, [r7, #42]	@ 0x2a
			int16_t acc_y_16 = (raw_accel[3] << 8) | raw_accel[2];
 8002692:	7dfb      	ldrb	r3, [r7, #23]
 8002694:	b21b      	sxth	r3, r3
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	b21a      	sxth	r2, r3
 800269a:	7dbb      	ldrb	r3, [r7, #22]
 800269c:	b21b      	sxth	r3, r3
 800269e:	4313      	orrs	r3, r2
 80026a0:	853b      	strh	r3, [r7, #40]	@ 0x28
			int16_t acc_x_16 = (raw_accel[1] << 8) | raw_accel[0];
 80026a2:	7d7b      	ldrb	r3, [r7, #21]
 80026a4:	b21b      	sxth	r3, r3
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	b21a      	sxth	r2, r3
 80026aa:	7d3b      	ldrb	r3, [r7, #20]
 80026ac:	b21b      	sxth	r3, r3
 80026ae:	4313      	orrs	r3, r2
 80026b0:	84fb      	strh	r3, [r7, #38]	@ 0x26

			BMI->datas.acc_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Z_OFFSET)*9.81/1000;
 80026b2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80026b6:	ee07 3a90 	vmov	s15, r3
 80026ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026be:	ee17 0a90 	vmov	r0, s15
 80026c2:	f7fd ff61 	bl	8000588 <__aeabi_f2d>
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	4ba6      	ldr	r3, [pc, #664]	@ (8002964 <bmi088_update+0x404>)
 80026cc:	f7fe f8de 	bl	800088c <__aeabi_ddiv>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	4ba2      	ldr	r3, [pc, #648]	@ (8002968 <bmi088_update+0x408>)
 80026de:	f7fd ffab 	bl	8000638 <__aeabi_dmul>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4610      	mov	r0, r2
 80026e8:	4619      	mov	r1, r3
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	4b9f      	ldr	r3, [pc, #636]	@ (800296c <bmi088_update+0x40c>)
 80026f0:	f7fd ffa2 	bl	8000638 <__aeabi_dmul>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4614      	mov	r4, r2
 80026fa:	461d      	mov	r5, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	795b      	ldrb	r3, [r3, #5]
 8002700:	3301      	adds	r3, #1
 8002702:	ee07 3a90 	vmov	s15, r3
 8002706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800270a:	ee17 0a90 	vmov	r0, s15
 800270e:	f7fd ff3b 	bl	8000588 <__aeabi_f2d>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	ec43 2b11 	vmov	d1, r2, r3
 800271a:	ed9f 0b8d 	vldr	d0, [pc, #564]	@ 8002950 <bmi088_update+0x3f0>
 800271e:	f010 fdc9 	bl	80132b4 <pow>
 8002722:	ec53 2b10 	vmov	r2, r3, d0
 8002726:	4620      	mov	r0, r4
 8002728:	4629      	mov	r1, r5
 800272a:	f7fd ff85 	bl	8000638 <__aeabi_dmul>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	4b8d      	ldr	r3, [pc, #564]	@ (8002970 <bmi088_update+0x410>)
 800273c:	f7fd fdc4 	bl	80002c8 <__aeabi_dsub>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4610      	mov	r0, r2
 8002746:	4619      	mov	r1, r3
 8002748:	a383      	add	r3, pc, #524	@ (adr r3, 8002958 <bmi088_update+0x3f8>)
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	f7fd ff73 	bl	8000638 <__aeabi_dmul>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4610      	mov	r0, r2
 8002758:	4619      	mov	r1, r3
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	4b82      	ldr	r3, [pc, #520]	@ (8002968 <bmi088_update+0x408>)
 8002760:	f7fe f894 	bl	800088c <__aeabi_ddiv>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	f7fe fa5c 	bl	8000c28 <__aeabi_d2f>
 8002770:	4602      	mov	r2, r0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	661a      	str	r2, [r3, #96]	@ 0x60
			BMI->datas.acc_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Y_OFFSET)*9.81/1000;
 8002776:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002782:	ee17 0a90 	vmov	r0, s15
 8002786:	f7fd feff 	bl	8000588 <__aeabi_f2d>
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	4b75      	ldr	r3, [pc, #468]	@ (8002964 <bmi088_update+0x404>)
 8002790:	f7fe f87c 	bl	800088c <__aeabi_ddiv>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	4b71      	ldr	r3, [pc, #452]	@ (8002968 <bmi088_update+0x408>)
 80027a2:	f7fd ff49 	bl	8000638 <__aeabi_dmul>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	4b6e      	ldr	r3, [pc, #440]	@ (800296c <bmi088_update+0x40c>)
 80027b4:	f7fd ff40 	bl	8000638 <__aeabi_dmul>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4614      	mov	r4, r2
 80027be:	461d      	mov	r5, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	795b      	ldrb	r3, [r3, #5]
 80027c4:	3301      	adds	r3, #1
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ce:	ee17 0a90 	vmov	r0, s15
 80027d2:	f7fd fed9 	bl	8000588 <__aeabi_f2d>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	ec43 2b11 	vmov	d1, r2, r3
 80027de:	ed9f 0b5c 	vldr	d0, [pc, #368]	@ 8002950 <bmi088_update+0x3f0>
 80027e2:	f010 fd67 	bl	80132b4 <pow>
 80027e6:	ec53 2b10 	vmov	r2, r3, d0
 80027ea:	4620      	mov	r0, r4
 80027ec:	4629      	mov	r1, r5
 80027ee:	f7fd ff23 	bl	8000638 <__aeabi_dmul>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4610      	mov	r0, r2
 80027f8:	4619      	mov	r1, r3
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002974 <bmi088_update+0x414>)
 8002800:	f7fd fd64 	bl	80002cc <__adddf3>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	a352      	add	r3, pc, #328	@ (adr r3, 8002958 <bmi088_update+0x3f8>)
 800280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002812:	f7fd ff11 	bl	8000638 <__aeabi_dmul>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	4b51      	ldr	r3, [pc, #324]	@ (8002968 <bmi088_update+0x408>)
 8002824:	f7fe f832 	bl	800088c <__aeabi_ddiv>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	f7fe f9fa 	bl	8000c28 <__aeabi_d2f>
 8002834:	4602      	mov	r2, r0
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	65da      	str	r2, [r3, #92]	@ 0x5c
			BMI->datas.acc_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_X_OFFSET)*9.81/1000;
 800283a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800283e:	ee07 3a90 	vmov	s15, r3
 8002842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002846:	ee17 0a90 	vmov	r0, s15
 800284a:	f7fd fe9d 	bl	8000588 <__aeabi_f2d>
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	4b44      	ldr	r3, [pc, #272]	@ (8002964 <bmi088_update+0x404>)
 8002854:	f7fe f81a 	bl	800088c <__aeabi_ddiv>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	4b40      	ldr	r3, [pc, #256]	@ (8002968 <bmi088_update+0x408>)
 8002866:	f7fd fee7 	bl	8000638 <__aeabi_dmul>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	4b3d      	ldr	r3, [pc, #244]	@ (800296c <bmi088_update+0x40c>)
 8002878:	f7fd fede 	bl	8000638 <__aeabi_dmul>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4614      	mov	r4, r2
 8002882:	461d      	mov	r5, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	795b      	ldrb	r3, [r3, #5]
 8002888:	3301      	adds	r3, #1
 800288a:	ee07 3a90 	vmov	s15, r3
 800288e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002892:	ee17 0a90 	vmov	r0, s15
 8002896:	f7fd fe77 	bl	8000588 <__aeabi_f2d>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	ec43 2b11 	vmov	d1, r2, r3
 80028a2:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 8002950 <bmi088_update+0x3f0>
 80028a6:	f010 fd05 	bl	80132b4 <pow>
 80028aa:	ec53 2b10 	vmov	r2, r3, d0
 80028ae:	4620      	mov	r0, r4
 80028b0:	4629      	mov	r1, r5
 80028b2:	f7fd fec1 	bl	8000638 <__aeabi_dmul>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002970 <bmi088_update+0x410>)
 80028c4:	f7fd fd02 	bl	80002cc <__adddf3>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4610      	mov	r0, r2
 80028ce:	4619      	mov	r1, r3
 80028d0:	a321      	add	r3, pc, #132	@ (adr r3, 8002958 <bmi088_update+0x3f8>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd feaf 	bl	8000638 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	4b20      	ldr	r3, [pc, #128]	@ (8002968 <bmi088_update+0x408>)
 80028e8:	f7fd ffd0 	bl	800088c <__aeabi_ddiv>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4610      	mov	r0, r2
 80028f2:	4619      	mov	r1, r3
 80028f4:	f7fe f998 	bl	8000c28 <__aeabi_d2f>
 80028f8:	4602      	mov	r2, r0
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	659a      	str	r2, [r3, #88]	@ 0x58

			if(is_starded)
 80028fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002978 <bmi088_update+0x418>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d03c      	beq.n	8002980 <bmi088_update+0x420>
			{
				BMI->datas.delta_time = BMI->datas.current_time - BMI->datas.last_time < 0 ? 0.0 : BMI->datas.current_time - BMI->datas.last_time;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8002912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002916:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800291a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291e:	d502      	bpl.n	8002926 <bmi088_update+0x3c6>
 8002920:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800297c <bmi088_update+0x41c>
 8002924:	e007      	b.n	8002936 <bmi088_update+0x3d6>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8002932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
 800293c:	e023      	b.n	8002986 <bmi088_update+0x426>
 800293e:	bf00      	nop
 8002940:	00000000 	.word	0x00000000
 8002944:	40438800 	.word	0x40438800
 8002948:	00000000 	.word	0x00000000
 800294c:	412e8480 	.word	0x412e8480
 8002950:	00000000 	.word	0x00000000
 8002954:	40000000 	.word	0x40000000
 8002958:	51eb851f 	.word	0x51eb851f
 800295c:	40239eb8 	.word	0x40239eb8
 8002960:	40370000 	.word	0x40370000
 8002964:	40e00000 	.word	0x40e00000
 8002968:	408f4000 	.word	0x408f4000
 800296c:	3ff80000 	.word	0x3ff80000
 8002970:	40100000 	.word	0x40100000
 8002974:	402e0000 	.word	0x402e0000
 8002978:	2000023a 	.word	0x2000023a
 800297c:	00000000 	.word	0x00000000
			}
			else
			{
				is_starded = 1;
 8002980:	4bcf      	ldr	r3, [pc, #828]	@ (8002cc0 <bmi088_update+0x760>)
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
			}

			BMI->datas.last_time = BMI->datas.current_time;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	66da      	str	r2, [r3, #108]	@ 0x6c
			BMI->flags.isAccelUpdated = 0;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	705a      	strb	r2, [r3, #1]
			is_time_updated = 1;
 8002994:	4bcb      	ldr	r3, [pc, #812]	@ (8002cc4 <bmi088_update+0x764>)
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->flags.isGyroUpdated && is_time_updated)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 81b2 	beq.w	8002d08 <bmi088_update+0x7a8>
 80029a4:	4bc7      	ldr	r3, [pc, #796]	@ (8002cc4 <bmi088_update+0x764>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 81ad 	beq.w	8002d08 <bmi088_update+0x7a8>
		{
			if(is_starded){
 80029ae:	4bc4      	ldr	r3, [pc, #784]	@ (8002cc0 <bmi088_update+0x760>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 81a0 	beq.w	8002cf8 <bmi088_update+0x798>
				uint8_t	raw_gyro[6];
				ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_gyro, 6, 10);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68d8      	ldr	r0, [r3, #12]
 80029bc:	230a      	movs	r3, #10
 80029be:	9302      	str	r3, [sp, #8]
 80029c0:	2306      	movs	r3, #6
 80029c2:	9301      	str	r3, [sp, #4]
 80029c4:	f107 0308 	add.w	r3, r7, #8
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	2301      	movs	r3, #1
 80029cc:	2202      	movs	r2, #2
 80029ce:	21d0      	movs	r1, #208	@ 0xd0
 80029d0:	f008 f86a 	bl	800aaa8 <HAL_I2C_Mem_Read>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

				if(ret_val)
 80029da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f040 8191 	bne.w	8002d06 <bmi088_update+0x7a6>
					return;

				int16_t gyro_x_16 = (raw_gyro[1] << 8) | raw_gyro[0];
 80029e4:	7a7b      	ldrb	r3, [r7, #9]
 80029e6:	b21b      	sxth	r3, r3
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	b21a      	sxth	r2, r3
 80029ec:	7a3b      	ldrb	r3, [r7, #8]
 80029ee:	b21b      	sxth	r3, r3
 80029f0:	4313      	orrs	r3, r2
 80029f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
				int16_t gyro_y_16 = (raw_gyro[3] << 8) | raw_gyro[2];
 80029f4:	7afb      	ldrb	r3, [r7, #11]
 80029f6:	b21b      	sxth	r3, r3
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	b21a      	sxth	r2, r3
 80029fc:	7abb      	ldrb	r3, [r7, #10]
 80029fe:	b21b      	sxth	r3, r3
 8002a00:	4313      	orrs	r3, r2
 8002a02:	847b      	strh	r3, [r7, #34]	@ 0x22
				int16_t gyro_z_16 = (raw_gyro[5] << 8) | raw_gyro[4];
 8002a04:	7b7b      	ldrb	r3, [r7, #13]
 8002a06:	b21b      	sxth	r3, r3
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	b21a      	sxth	r2, r3
 8002a0c:	7b3b      	ldrb	r3, [r7, #12]
 8002a0e:	b21b      	sxth	r3, r3
 8002a10:	4313      	orrs	r3, r2
 8002a12:	843b      	strh	r3, [r7, #32]

				BMI->datas.gyro_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[0]) * DEG_TO_RAD;
 8002a14:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002a18:	ee07 3a90 	vmov	s15, r3
 8002a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a20:	ee17 0a90 	vmov	r0, s15
 8002a24:	f7fd fdb0 	bl	8000588 <__aeabi_f2d>
 8002a28:	a3a1      	add	r3, pc, #644	@ (adr r3, 8002cb0 <bmi088_update+0x750>)
 8002a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2e:	f7fd ff2d 	bl	800088c <__aeabi_ddiv>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4614      	mov	r4, r2
 8002a38:	461d      	mov	r5, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	7a9b      	ldrb	r3, [r3, #10]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002a44:	4113      	asrs	r3, r2
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4e:	ee17 0a90 	vmov	r0, s15
 8002a52:	f7fd fd99 	bl	8000588 <__aeabi_f2d>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	f7fd fdeb 	bl	8000638 <__aeabi_dmul>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4614      	mov	r4, r2
 8002a68:	461d      	mov	r5, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fd89 	bl	8000588 <__aeabi_f2d>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	f7fd fc23 	bl	80002c8 <__aeabi_dsub>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4610      	mov	r0, r2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	a38b      	add	r3, pc, #556	@ (adr r3, 8002cb8 <bmi088_update+0x758>)
 8002a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a90:	f7fd fdd2 	bl	8000638 <__aeabi_dmul>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4610      	mov	r0, r2
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f7fe f8c4 	bl	8000c28 <__aeabi_d2f>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	619a      	str	r2, [r3, #24]
				BMI->datas.gyro_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[1]) * DEG_TO_RAD;
 8002aa6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab2:	ee17 0a90 	vmov	r0, s15
 8002ab6:	f7fd fd67 	bl	8000588 <__aeabi_f2d>
 8002aba:	a37d      	add	r3, pc, #500	@ (adr r3, 8002cb0 <bmi088_update+0x750>)
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	f7fd fee4 	bl	800088c <__aeabi_ddiv>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4614      	mov	r4, r2
 8002aca:	461d      	mov	r5, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7a9b      	ldrb	r3, [r3, #10]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002ad6:	4113      	asrs	r3, r2
 8002ad8:	ee07 3a90 	vmov	s15, r3
 8002adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae0:	ee17 0a90 	vmov	r0, s15
 8002ae4:	f7fd fd50 	bl	8000588 <__aeabi_f2d>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4620      	mov	r0, r4
 8002aee:	4629      	mov	r1, r5
 8002af0:	f7fd fda2 	bl	8000638 <__aeabi_dmul>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4614      	mov	r4, r2
 8002afa:	461d      	mov	r5, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fd fd40 	bl	8000588 <__aeabi_f2d>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	4629      	mov	r1, r5
 8002b10:	f7fd fbda 	bl	80002c8 <__aeabi_dsub>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	a366      	add	r3, pc, #408	@ (adr r3, 8002cb8 <bmi088_update+0x758>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	f7fd fd89 	bl	8000638 <__aeabi_dmul>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f7fe f87b 	bl	8000c28 <__aeabi_d2f>
 8002b32:	4602      	mov	r2, r0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	61da      	str	r2, [r3, #28]
				BMI->datas.gyro_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[2]) * DEG_TO_RAD;
 8002b38:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002b3c:	ee07 3a90 	vmov	s15, r3
 8002b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b44:	ee17 0a90 	vmov	r0, s15
 8002b48:	f7fd fd1e 	bl	8000588 <__aeabi_f2d>
 8002b4c:	a358      	add	r3, pc, #352	@ (adr r3, 8002cb0 <bmi088_update+0x750>)
 8002b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b52:	f7fd fe9b 	bl	800088c <__aeabi_ddiv>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4614      	mov	r4, r2
 8002b5c:	461d      	mov	r5, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	7a9b      	ldrb	r3, [r3, #10]
 8002b62:	461a      	mov	r2, r3
 8002b64:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002b68:	4113      	asrs	r3, r2
 8002b6a:	ee07 3a90 	vmov	s15, r3
 8002b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b72:	ee17 0a90 	vmov	r0, s15
 8002b76:	f7fd fd07 	bl	8000588 <__aeabi_f2d>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4620      	mov	r0, r4
 8002b80:	4629      	mov	r1, r5
 8002b82:	f7fd fd59 	bl	8000638 <__aeabi_dmul>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4614      	mov	r4, r2
 8002b8c:	461d      	mov	r5, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fd fcf7 	bl	8000588 <__aeabi_f2d>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	f7fd fb91 	bl	80002c8 <__aeabi_dsub>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	a342      	add	r3, pc, #264	@ (adr r3, 8002cb8 <bmi088_update+0x758>)
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f7fd fd40 	bl	8000638 <__aeabi_dmul>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f7fe f832 	bl	8000c28 <__aeabi_d2f>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	621a      	str	r2, [r3, #32]

				Orientation_Update(BMI->datas.gyro_y, -BMI->datas.gyro_x, BMI->datas.gyro_z,BMI->datas.acc_y,-BMI->datas.acc_x,BMI->datas.acc_z, BMI->datas.delta_time);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002bd6:	eef1 6a67 	vneg.f32	s13, s15
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	ed93 6a08 	vldr	s12, [r3, #32]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	edd3 5a17 	vldr	s11, [r3, #92]	@ 0x5c
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002bec:	eef1 7a67 	vneg.f32	s15, s15
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	ed93 5a18 	vldr	s10, [r3, #96]	@ 0x60
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	edd3 4a1c 	vldr	s9, [r3, #112]	@ 0x70
 8002bfc:	eeb0 3a64 	vmov.f32	s6, s9
 8002c00:	eef0 2a45 	vmov.f32	s5, s10
 8002c04:	eeb0 2a67 	vmov.f32	s4, s15
 8002c08:	eef0 1a65 	vmov.f32	s3, s11
 8002c0c:	eeb0 1a46 	vmov.f32	s2, s12
 8002c10:	eef0 0a66 	vmov.f32	s1, s13
 8002c14:	eeb0 0a47 	vmov.f32	s0, s14
 8002c18:	f003 fd82 	bl	8006720 <Orientation_Update>
				BMI->datas.yaw = quaternionToYaw();
 8002c1c:	f004 fb1c 	bl	8007258 <quaternionToYaw>
 8002c20:	eef0 7a40 	vmov.f32	s15, s0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				BMI->datas.pitch = quaternionToPitch();
 8002c2a:	f004 fb73 	bl	8007314 <quaternionToPitch>
 8002c2e:	eef0 7a40 	vmov.f32	s15, s0
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
				BMI->datas.roll = quaternionToRoll();
 8002c38:	f004 fba4 	bl	8007384 <quaternionToRoll>
 8002c3c:	eef0 7a40 	vmov.f32	s15, s0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
				BMI->datas.theta = quaternionToThetaZ();
 8002c46:	f004 f9df 	bl	8007008 <quaternionToThetaZ>
 8002c4a:	eef0 7a40 	vmov.f32	s15, s0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				BMI->datas.angle_x = quaternionToYawDegree1();
 8002c54:	f003 fb50 	bl	80062f8 <quaternionToYawDegree1>
 8002c58:	eef0 7a40 	vmov.f32	s15, s0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
				BMI->datas.angle_y = quaternionToPitchDegree();
 8002c62:	f004 fa61 	bl	8007128 <quaternionToPitchDegree>
 8002c66:	eef0 7a40 	vmov.f32	s15, s0
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
				BMI->datas.angle_z = quaternionToRollDegree();
 8002c70:	f004 faaa 	bl	80071c8 <quaternionToRollDegree>
 8002c74:	eef0 7a40 	vmov.f32	s15, s0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

				ekf_predict(BMI->datas.gyro_y,-BMI->datas.gyro_x,BMI->datas.gyro_z,BMI->datas.delta_time);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c8a:	eef1 7a67 	vneg.f32	s15, s15
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	ed93 6a1c 	vldr	s12, [r3, #112]	@ 0x70
 8002c9a:	eef0 1a46 	vmov.f32	s3, s12
 8002c9e:	eeb0 1a66 	vmov.f32	s2, s13
 8002ca2:	eef0 0a67 	vmov.f32	s1, s15
 8002ca6:	eeb0 0a47 	vmov.f32	s0, s14
 8002caa:	f003 f90b 	bl	8005ec4 <ekf_predict>
 8002cae:	e00b      	b.n	8002cc8 <bmi088_update+0x768>
 8002cb0:	00000000 	.word	0x00000000
 8002cb4:	40dfffc0 	.word	0x40dfffc0
 8002cb8:	a0000000 	.word	0xa0000000
 8002cbc:	3f91df46 	.word	0x3f91df46
 8002cc0:	2000023a 	.word	0x2000023a
 8002cc4:	20000239 	.word	0x20000239
				BMI->datas.yaw1 = quaternionToYaw1();
 8002cc8:	f003 fa22 	bl	8006110 <quaternionToYaw1>
 8002ccc:	eef0 7a40 	vmov.f32	s15, s0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
				BMI->datas.pitch1 = quaternionToPitch1();
 8002cd6:	f003 fa79 	bl	80061cc <quaternionToPitch1>
 8002cda:	eef0 7a40 	vmov.f32	s15, s0
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
				BMI->datas.roll1 = quaternionToRoll1();
 8002ce4:	f003 faaa 	bl	800623c <quaternionToRoll1>
 8002ce8:	eef0 7a40 	vmov.f32	s15, s0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
				is_gyro_renewed = 1;
 8002cf2:	4b07      	ldr	r3, [pc, #28]	@ (8002d10 <bmi088_update+0x7b0>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	701a      	strb	r2, [r3, #0]
			}
			BMI->flags.isGyroUpdated = 0;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]
			is_time_updated = 0;
 8002cfe:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <bmi088_update+0x7b4>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	e000      	b.n	8002d08 <bmi088_update+0x7a8>
					return;
 8002d06:	bf00      	nop
		}
}
 8002d08:	3738      	adds	r7, #56	@ 0x38
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	2000023b 	.word	0x2000023b
 8002d14:	20000239 	.word	0x20000239

08002d18 <bmi088_set_accel_INT>:


void bmi088_set_accel_INT(bmi088_struct_t* BMI)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelUpdated = 1;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	705a      	strb	r2, [r3, #1]
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <bmi088_set_gyro_INT>:

void bmi088_set_gyro_INT(bmi088_struct_t* BMI)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroUpdated = 1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <get_offset>:
	HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void get_offset(bmi088_struct_t* BMI)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
	int offsetCounter = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		bmi088_update(BMI);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff fc01 	bl	8002560 <bmi088_update>
		if(is_gyro_renewed == 1)
 8002d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8002e1c <get_offset+0xd0>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d1f8      	bne.n	8002d58 <get_offset+0xc>
		{
			if(offsetCounter < 1000)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d6c:	da2d      	bge.n	8002dca <get_offset+0x7e>
			{
				BMI->device_config.offsets->gyro_offset[0] += BMI->datas.gyro_x;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	ed93 7a00 	vldr	s14, [r3]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d84:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] += BMI->datas.gyro_y;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9e:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] += BMI->datas.gyro_z;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	ed93 7a02 	vldr	s14, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	edd3 7a08 	vldr	s15, [r3, #32]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002db8:	edc3 7a02 	vstr	s15, [r3, #8]
				offsetCounter++;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	60fb      	str	r3, [r7, #12]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
				//quaternionSet_zero();
				break;
				//Error_Handler();
			}
			is_gyro_renewed = 0;
 8002dc2:	4b16      	ldr	r3, [pc, #88]	@ (8002e1c <get_offset+0xd0>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	e7c6      	b.n	8002d58 <get_offset+0xc>
				BMI->device_config.offsets->gyro_offset[0] /= 1000.0;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	ed93 7a00 	vldr	s14, [r3]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002e20 <get_offset+0xd4>
 8002dda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dde:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] /= 1000.0;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	ed93 7a01 	vldr	s14, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002e20 <get_offset+0xd4>
 8002df2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002df6:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002e20 <get_offset+0xd4>
 8002e0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e0e:	edc3 7a02 	vstr	s15, [r3, #8]
				break;
 8002e12:	bf00      	nop
		}

	}
}
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	2000023b 	.word	0x2000023b
 8002e20:	447a0000 	.word	0x447a0000

08002e24 <flight_algorithm_init>:

/**
 * @brief Initialize the flight algorithm
 */
void flight_algorithm_init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
    flight_algorithm_reset();
 8002e28:	f000 f802 	bl	8002e30 <flight_algorithm_reset>
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <flight_algorithm_reset>:

/**
 * @brief Reset flight algorithm to initial state
 */
void flight_algorithm_reset(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
    current_phase = PHASE_IDLE;
 8002e34:	4b18      	ldr	r3, [pc, #96]	@ (8002e98 <flight_algorithm_reset+0x68>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	701a      	strb	r2, [r3, #0]
    is_rising = 0;
 8002e3a:	4b18      	ldr	r3, [pc, #96]	@ (8002e9c <flight_algorithm_reset+0x6c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
    is_stabilized = 1;
 8002e40:	4b17      	ldr	r3, [pc, #92]	@ (8002ea0 <flight_algorithm_reset+0x70>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
    is_armed = 0;
 8002e46:	4b17      	ldr	r3, [pc, #92]	@ (8002ea4 <flight_algorithm_reset+0x74>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	701a      	strb	r2, [r3, #0]
    drogue_deployed = 0;
 8002e4c:	4b16      	ldr	r3, [pc, #88]	@ (8002ea8 <flight_algorithm_reset+0x78>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
    main_deployed = 0;
 8002e52:	4b16      	ldr	r3, [pc, #88]	@ (8002eac <flight_algorithm_reset+0x7c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	701a      	strb	r2, [r3, #0]
    altitude_decrease_count = 0;
 8002e58:	4b15      	ldr	r3, [pc, #84]	@ (8002eb0 <flight_algorithm_reset+0x80>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
    status_bits = 0;
 8002e5e:	4b15      	ldr	r3, [pc, #84]	@ (8002eb4 <flight_algorithm_reset+0x84>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	801a      	strh	r2, [r3, #0]
    prev_altitude = 0.0f;
 8002e64:	4b14      	ldr	r3, [pc, #80]	@ (8002eb8 <flight_algorithm_reset+0x88>)
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
    flight_start_time = 0;
 8002e6c:	4b13      	ldr	r3, [pc, #76]	@ (8002ebc <flight_algorithm_reset+0x8c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
    deployed_velocity = 1;
 8002e72:	4b13      	ldr	r3, [pc, #76]	@ (8002ec0 <flight_algorithm_reset+0x90>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
    deployed_angle = 1;
 8002e78:	4b12      	ldr	r3, [pc, #72]	@ (8002ec4 <flight_algorithm_reset+0x94>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
    apogee_counter = 0;
 8002e7e:	4b12      	ldr	r3, [pc, #72]	@ (8002ec8 <flight_algorithm_reset+0x98>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
    prev_velocity = 0;
 8002e84:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <flight_algorithm_reset+0x9c>)
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20000240 	.word	0x20000240
 8002e9c:	20000241 	.word	0x20000241
 8002ea0:	20000014 	.word	0x20000014
 8002ea4:	20000242 	.word	0x20000242
 8002ea8:	20000243 	.word	0x20000243
 8002eac:	20000244 	.word	0x20000244
 8002eb0:	20000254 	.word	0x20000254
 8002eb4:	2000025c 	.word	0x2000025c
 8002eb8:	20000258 	.word	0x20000258
 8002ebc:	20000250 	.word	0x20000250
 8002ec0:	20000016 	.word	0x20000016
 8002ec4:	20000015 	.word	0x20000015
 8002ec8:	20000248 	.word	0x20000248
 8002ecc:	2000024c 	.word	0x2000024c

08002ed0 <flight_algorithm_update>:

/**
 * @brief Update flight algorithm with sensor data
 */
void flight_algorithm_update(BME_280_t* bme, bmi088_struct_t* bmi, sensor_fusion_t* sensor_fusion)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
    // Calculate key metrics
    float total_acceleration = calculate_total_acceleration(bmi);
 8002edc:	68b8      	ldr	r0, [r7, #8]
 8002ede:	f000 f921 	bl	8003124 <calculate_total_acceleration>
 8002ee2:	ed87 0a05 	vstr	s0, [r7, #20]

    // Status bits are cumulative - once set they remain set
    // Each phase builds on the previous phase's status bits

    // State machine for flight phases
    switch (current_phase) {
 8002ee6:	4b7e      	ldr	r3, [pc, #504]	@ (80030e0 <flight_algorithm_update+0x210>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	f200 80ed 	bhi.w	80030ca <flight_algorithm_update+0x1fa>
 8002ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef8 <flight_algorithm_update+0x28>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	08002f0d 	.word	0x08002f0d
 8002efc:	08002f49 	.word	0x08002f49
 8002f00:	08002f7b 	.word	0x08002f7b
 8002f04:	080030cb 	.word	0x080030cb
 8002f08:	080030cb 	.word	0x080030cb
        case PHASE_IDLE:
            // Detect launch using acceleration threshold
            if (total_acceleration > launch_accel_threshold) {
 8002f0c:	4b75      	ldr	r3, [pc, #468]	@ (80030e4 <flight_algorithm_update+0x214>)
 8002f0e:	edd3 7a00 	vldr	s15, [r3]
 8002f12:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1e:	dc00      	bgt.n	8002f22 <flight_algorithm_update+0x52>
                current_phase = PHASE_BOOST;
                is_rising = 1;
                flight_start_time = HAL_GetTick();
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
            }
            break;
 8002f20:	e0d3      	b.n	80030ca <flight_algorithm_update+0x1fa>
                current_phase = PHASE_BOOST;
 8002f22:	4b6f      	ldr	r3, [pc, #444]	@ (80030e0 <flight_algorithm_update+0x210>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	701a      	strb	r2, [r3, #0]
                is_rising = 1;
 8002f28:	4b6f      	ldr	r3, [pc, #444]	@ (80030e8 <flight_algorithm_update+0x218>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
                flight_start_time = HAL_GetTick();
 8002f2e:	f005 fe81 	bl	8008c34 <HAL_GetTick>
 8002f32:	4603      	mov	r3, r0
 8002f34:	4a6d      	ldr	r2, [pc, #436]	@ (80030ec <flight_algorithm_update+0x21c>)
 8002f36:	6013      	str	r3, [r2, #0]
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
 8002f38:	4b6d      	ldr	r3, [pc, #436]	@ (80030f0 <flight_algorithm_update+0x220>)
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	4b6b      	ldr	r3, [pc, #428]	@ (80030f0 <flight_algorithm_update+0x220>)
 8002f44:	801a      	strh	r2, [r3, #0]
            break;
 8002f46:	e0c0      	b.n	80030ca <flight_algorithm_update+0x1fa>

        case PHASE_BOOST:
            // After boost phase (typically 3-5 seconds)
            if (HAL_GetTick() - flight_start_time > 7000) {
 8002f48:	f005 fe74 	bl	8008c34 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b67      	ldr	r3, [pc, #412]	@ (80030ec <flight_algorithm_update+0x21c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	f240 80b3 	bls.w	80030c4 <flight_algorithm_update+0x1f4>
                current_phase = PHASE_COAST;
 8002f5e:	4b60      	ldr	r3, [pc, #384]	@ (80030e0 <flight_algorithm_update+0x210>)
 8002f60:	2202      	movs	r2, #2
 8002f62:	701a      	strb	r2, [r3, #0]
                is_stabilized = 1;
 8002f64:	4b63      	ldr	r3, [pc, #396]	@ (80030f4 <flight_algorithm_update+0x224>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0002; // Set Bit 1: Motor burn prevention period ended
 8002f6a:	4b61      	ldr	r3, [pc, #388]	@ (80030f0 <flight_algorithm_update+0x220>)
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	f043 0302 	orr.w	r3, r3, #2
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	4b5e      	ldr	r3, [pc, #376]	@ (80030f0 <flight_algorithm_update+0x220>)
 8002f76:	801a      	strh	r2, [r3, #0]
            }
            break;
 8002f78:	e0a4      	b.n	80030c4 <flight_algorithm_update+0x1f4>

        case PHASE_COAST:
            // Check minimum arming altitude
            if (bme->altitude > min_arming_altitude) {
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002f80:	4b5d      	ldr	r3, [pc, #372]	@ (80030f8 <flight_algorithm_update+0x228>)
 8002f82:	edd3 7a00 	vldr	s15, [r3]
 8002f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8e:	dd09      	ble.n	8002fa4 <flight_algorithm_update+0xd4>
                is_armed = 1;
 8002f90:	4b5a      	ldr	r3, [pc, #360]	@ (80030fc <flight_algorithm_update+0x22c>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0004; // Set Bit 2: Minimum altitude threshold exceeded
 8002f96:	4b56      	ldr	r3, [pc, #344]	@ (80030f0 <flight_algorithm_update+0x220>)
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	f043 0304 	orr.w	r3, r3, #4
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	4b53      	ldr	r3, [pc, #332]	@ (80030f0 <flight_algorithm_update+0x220>)
 8002fa2:	801a      	strh	r2, [r3, #0]
            }

            // Check if angle exceeds threshold
            if (is_armed && (fabs(bmi->datas.angle_y) > max_angle_threshold) && deployed_angle) {
 8002fa4:	4b55      	ldr	r3, [pc, #340]	@ (80030fc <flight_algorithm_update+0x22c>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d01f      	beq.n	8002fec <flight_algorithm_update+0x11c>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002fb2:	eeb0 7ae7 	vabs.f32	s14, s15
 8002fb6:	4b52      	ldr	r3, [pc, #328]	@ (8003100 <flight_algorithm_update+0x230>)
 8002fb8:	edd3 7a00 	vldr	s15, [r3]
 8002fbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc4:	dd12      	ble.n	8002fec <flight_algorithm_update+0x11c>
 8002fc6:	4b4f      	ldr	r3, [pc, #316]	@ (8003104 <flight_algorithm_update+0x234>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00e      	beq.n	8002fec <flight_algorithm_update+0x11c>
                drogue_deployed = 1;
 8002fce:	4b4e      	ldr	r3, [pc, #312]	@ (8003108 <flight_algorithm_update+0x238>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	701a      	strb	r2, [r3, #0]
                deployed_angle = 0;
 8002fd4:	4b4b      	ldr	r3, [pc, #300]	@ (8003104 <flight_algorithm_update+0x234>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0008; // Set Bit 3: Rocket body angle exceeds threshold
 8002fda:	4b45      	ldr	r3, [pc, #276]	@ (80030f0 <flight_algorithm_update+0x220>)
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	f043 0308 	orr.w	r3, r3, #8
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	4b42      	ldr	r3, [pc, #264]	@ (80030f0 <flight_algorithm_update+0x220>)
 8002fe6:	801a      	strh	r2, [r3, #0]
                deploy_drogue_parachute();
 8002fe8:	f000 f906 	bl	80031f8 <deploy_drogue_parachute>
                drogue_deployed = 1;
                deployed_velocity = 0;
                // deploy_drogue_parachute(); // Actual deployment command
            }*/

            if (is_armed && sensor_fusion->velocity < 0.0f && sensor_fusion->velocity < prev_velocity && deployed_velocity) {
 8002fec:	4b43      	ldr	r3, [pc, #268]	@ (80030fc <flight_algorithm_update+0x22c>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d036      	beq.n	8003062 <flight_algorithm_update+0x192>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ffa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003002:	d52e      	bpl.n	8003062 <flight_algorithm_update+0x192>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	ed93 7a01 	vldr	s14, [r3, #4]
 800300a:	4b40      	ldr	r3, [pc, #256]	@ (800310c <flight_algorithm_update+0x23c>)
 800300c:	edd3 7a00 	vldr	s15, [r3]
 8003010:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003018:	d523      	bpl.n	8003062 <flight_algorithm_update+0x192>
 800301a:	4b3d      	ldr	r3, [pc, #244]	@ (8003110 <flight_algorithm_update+0x240>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d01f      	beq.n	8003062 <flight_algorithm_update+0x192>
                apogee_counter++;
 8003022:	4b3c      	ldr	r3, [pc, #240]	@ (8003114 <flight_algorithm_update+0x244>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3301      	adds	r3, #1
 8003028:	4a3a      	ldr	r2, [pc, #232]	@ (8003114 <flight_algorithm_update+0x244>)
 800302a:	6013      	str	r3, [r2, #0]
                if (apogee_counter >= 9) {  // Confirm apogee after 5 consecutive samples
 800302c:	4b39      	ldr	r3, [pc, #228]	@ (8003114 <flight_algorithm_update+0x244>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b08      	cmp	r3, #8
 8003032:	dd19      	ble.n	8003068 <flight_algorithm_update+0x198>
                    status_bits |= 0x0010; // Set Bit 4: Rocket altitude started decreasing
 8003034:	4b2e      	ldr	r3, [pc, #184]	@ (80030f0 <flight_algorithm_update+0x220>)
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	f043 0310 	orr.w	r3, r3, #16
 800303c:	b29a      	uxth	r2, r3
 800303e:	4b2c      	ldr	r3, [pc, #176]	@ (80030f0 <flight_algorithm_update+0x220>)
 8003040:	801a      	strh	r2, [r3, #0]
                    status_bits |= 0x0020; // Set Bit 5: Drag parachute deployment command generated
 8003042:	4b2b      	ldr	r3, [pc, #172]	@ (80030f0 <flight_algorithm_update+0x220>)
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	f043 0320 	orr.w	r3, r3, #32
 800304a:	b29a      	uxth	r2, r3
 800304c:	4b28      	ldr	r3, [pc, #160]	@ (80030f0 <flight_algorithm_update+0x220>)
 800304e:	801a      	strh	r2, [r3, #0]
                    drogue_deployed = 1;
 8003050:	4b2d      	ldr	r3, [pc, #180]	@ (8003108 <flight_algorithm_update+0x238>)
 8003052:	2201      	movs	r2, #1
 8003054:	701a      	strb	r2, [r3, #0]
                    deployed_velocity = 0;
 8003056:	4b2e      	ldr	r3, [pc, #184]	@ (8003110 <flight_algorithm_update+0x240>)
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]
                    deploy_drogue_parachute();
 800305c:	f000 f8cc 	bl	80031f8 <deploy_drogue_parachute>
                if (apogee_counter >= 9) {  // Confirm apogee after 5 consecutive samples
 8003060:	e002      	b.n	8003068 <flight_algorithm_update+0x198>
                }
            } else {
                apogee_counter = 0;
 8003062:	4b2c      	ldr	r3, [pc, #176]	@ (8003114 <flight_algorithm_update+0x244>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
            }
            prev_velocity = sensor_fusion->velocity;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	4a27      	ldr	r2, [pc, #156]	@ (800310c <flight_algorithm_update+0x23c>)
 800306e:	6013      	str	r3, [r2, #0]

            // Deploy main parachute at designated altitude
            if (drogue_deployed && bme->altitude < main_chute_altitude) {
 8003070:	4b25      	ldr	r3, [pc, #148]	@ (8003108 <flight_algorithm_update+0x238>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d027      	beq.n	80030c8 <flight_algorithm_update+0x1f8>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	ed93 7a08 	vldr	s14, [r3, #32]
 800307e:	4b26      	ldr	r3, [pc, #152]	@ (8003118 <flight_algorithm_update+0x248>)
 8003080:	edd3 7a00 	vldr	s15, [r3]
 8003084:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308c:	d400      	bmi.n	8003090 <flight_algorithm_update+0x1c0>
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
                main_deployed = 1;
                drogue_deployed = 0;
                deploy_main_parachute();
            }
            break;
 800308e:	e01b      	b.n	80030c8 <flight_algorithm_update+0x1f8>
                current_phase = PHASE_MAIN_DESCENT;
 8003090:	4b13      	ldr	r3, [pc, #76]	@ (80030e0 <flight_algorithm_update+0x210>)
 8003092:	2203      	movs	r2, #3
 8003094:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0040; // Set Bit 6: Rocket altitude below specified altitude
 8003096:	4b16      	ldr	r3, [pc, #88]	@ (80030f0 <flight_algorithm_update+0x220>)
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800309e:	b29a      	uxth	r2, r3
 80030a0:	4b13      	ldr	r3, [pc, #76]	@ (80030f0 <flight_algorithm_update+0x220>)
 80030a2:	801a      	strh	r2, [r3, #0]
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
 80030a4:	4b12      	ldr	r3, [pc, #72]	@ (80030f0 <flight_algorithm_update+0x220>)
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	4b10      	ldr	r3, [pc, #64]	@ (80030f0 <flight_algorithm_update+0x220>)
 80030b0:	801a      	strh	r2, [r3, #0]
                main_deployed = 1;
 80030b2:	4b1a      	ldr	r3, [pc, #104]	@ (800311c <flight_algorithm_update+0x24c>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
                drogue_deployed = 0;
 80030b8:	4b13      	ldr	r3, [pc, #76]	@ (8003108 <flight_algorithm_update+0x238>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	701a      	strb	r2, [r3, #0]
                deploy_main_parachute();
 80030be:	f000 f8f3 	bl	80032a8 <deploy_main_parachute>
            break;
 80030c2:	e001      	b.n	80030c8 <flight_algorithm_update+0x1f8>
            break;
 80030c4:	bf00      	nop
 80030c6:	e000      	b.n	80030ca <flight_algorithm_update+0x1fa>
            break;
 80030c8:	bf00      	nop

        case PHASE_LANDED:
            // No additional status bits to set after landing
            break;
    }
    deploy_parachute_update();
 80030ca:	f000 f8b1 	bl	8003230 <deploy_parachute_update>
    prev_altitude = bme->altitude;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	4a13      	ldr	r2, [pc, #76]	@ (8003120 <flight_algorithm_update+0x250>)
 80030d4:	6013      	str	r3, [r2, #0]
}
 80030d6:	bf00      	nop
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000240 	.word	0x20000240
 80030e4:	20000004 	.word	0x20000004
 80030e8:	20000241 	.word	0x20000241
 80030ec:	20000250 	.word	0x20000250
 80030f0:	2000025c 	.word	0x2000025c
 80030f4:	20000014 	.word	0x20000014
 80030f8:	20000008 	.word	0x20000008
 80030fc:	20000242 	.word	0x20000242
 8003100:	20000010 	.word	0x20000010
 8003104:	20000015 	.word	0x20000015
 8003108:	20000243 	.word	0x20000243
 800310c:	2000024c 	.word	0x2000024c
 8003110:	20000016 	.word	0x20000016
 8003114:	20000248 	.word	0x20000248
 8003118:	2000000c 	.word	0x2000000c
 800311c:	20000244 	.word	0x20000244
 8003120:	20000258 	.word	0x20000258

08003124 <calculate_total_acceleration>:

/**
 * @brief Calculate total acceleration magnitude
 */
static float calculate_total_acceleration(bmi088_struct_t* bmi)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003138:	ee27 7a27 	vmul.f32	s14, s14, s15
                 (bmi->datas.acc_y * bmi->datas.acc_y) +
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8003148:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 800314c:	ee37 7a27 	vadd.f32	s14, s14, s15
                 (bmi->datas.acc_z * bmi->datas.acc_z));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800315c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 8003160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003164:	eeb0 0a67 	vmov.f32	s0, s15
 8003168:	f010 f886 	bl	8013278 <sqrtf>
 800316c:	eef0 7a40 	vmov.f32	s15, s0
}
 8003170:	eeb0 0a67 	vmov.f32	s0, s15
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <flight_algorithm_get_status_bits>:

/**
 * @brief Get the current status bits
 */
uint16_t flight_algorithm_get_status_bits(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
    return status_bits;
 8003180:	4b03      	ldr	r3, [pc, #12]	@ (8003190 <flight_algorithm_get_status_bits+0x14>)
 8003182:	881b      	ldrh	r3, [r3, #0]
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	2000025c 	.word	0x2000025c

08003194 <flight_algorithm_set_parameters>:
 */
void flight_algorithm_set_parameters(float launch_accel_threshold_param,
                                   float min_arming_altitude_param,
                                   float main_chute_altitude_param,
                                   float max_angle_threshold_param)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	ed87 0a03 	vstr	s0, [r7, #12]
 800319e:	edc7 0a02 	vstr	s1, [r7, #8]
 80031a2:	ed87 1a01 	vstr	s2, [r7, #4]
 80031a6:	edc7 1a00 	vstr	s3, [r7]
    launch_accel_threshold = launch_accel_threshold_param;
 80031aa:	4a09      	ldr	r2, [pc, #36]	@ (80031d0 <flight_algorithm_set_parameters+0x3c>)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6013      	str	r3, [r2, #0]
    min_arming_altitude = min_arming_altitude_param;
 80031b0:	4a08      	ldr	r2, [pc, #32]	@ (80031d4 <flight_algorithm_set_parameters+0x40>)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	6013      	str	r3, [r2, #0]
    main_chute_altitude = main_chute_altitude_param;
 80031b6:	4a08      	ldr	r2, [pc, #32]	@ (80031d8 <flight_algorithm_set_parameters+0x44>)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6013      	str	r3, [r2, #0]
    max_angle_threshold = max_angle_threshold_param;
 80031bc:	4a07      	ldr	r2, [pc, #28]	@ (80031dc <flight_algorithm_set_parameters+0x48>)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6013      	str	r3, [r2, #0]
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000004 	.word	0x20000004
 80031d4:	20000008 	.word	0x20000008
 80031d8:	2000000c 	.word	0x2000000c
 80031dc:	20000010 	.word	0x20000010

080031e0 <flight_algorithm_get_start_time>:

uint32_t flight_algorithm_get_start_time(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
    return flight_start_time;
 80031e4:	4b03      	ldr	r3, [pc, #12]	@ (80031f4 <flight_algorithm_get_start_time+0x14>)
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000250 	.word	0x20000250

080031f8 <deploy_drogue_parachute>:

void deploy_drogue_parachute(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
    if (!drogue_pulse_active) {
 80031fc:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <deploy_drogue_parachute+0x2c>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10c      	bne.n	800321e <deploy_drogue_parachute+0x26>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8003204:	2201      	movs	r2, #1
 8003206:	2140      	movs	r1, #64	@ 0x40
 8003208:	4807      	ldr	r0, [pc, #28]	@ (8003228 <deploy_drogue_parachute+0x30>)
 800320a:	f007 f9ad 	bl	800a568 <HAL_GPIO_WritePin>
        drogue_pulse_start_time = HAL_GetTick();
 800320e:	f005 fd11 	bl	8008c34 <HAL_GetTick>
 8003212:	4603      	mov	r3, r0
 8003214:	4a05      	ldr	r2, [pc, #20]	@ (800322c <deploy_drogue_parachute+0x34>)
 8003216:	6013      	str	r3, [r2, #0]
        drogue_pulse_active = 1;
 8003218:	4b02      	ldr	r3, [pc, #8]	@ (8003224 <deploy_drogue_parachute+0x2c>)
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]
    }
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	2000025e 	.word	0x2000025e
 8003228:	40020800 	.word	0x40020800
 800322c:	20000260 	.word	0x20000260

08003230 <deploy_parachute_update>:

void deploy_parachute_update(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
    if (drogue_pulse_active && (HAL_GetTick() - drogue_pulse_start_time >= 1000)) {
 8003234:	4b16      	ldr	r3, [pc, #88]	@ (8003290 <deploy_parachute_update+0x60>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d010      	beq.n	800325e <deploy_parachute_update+0x2e>
 800323c:	f005 fcfa 	bl	8008c34 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	4b14      	ldr	r3, [pc, #80]	@ (8003294 <deploy_parachute_update+0x64>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800324c:	d307      	bcc.n	800325e <deploy_parachute_update+0x2e>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800324e:	2200      	movs	r2, #0
 8003250:	2140      	movs	r1, #64	@ 0x40
 8003252:	4811      	ldr	r0, [pc, #68]	@ (8003298 <deploy_parachute_update+0x68>)
 8003254:	f007 f988 	bl	800a568 <HAL_GPIO_WritePin>
        drogue_pulse_active = 0;
 8003258:	4b0d      	ldr	r3, [pc, #52]	@ (8003290 <deploy_parachute_update+0x60>)
 800325a:	2200      	movs	r2, #0
 800325c:	701a      	strb	r2, [r3, #0]
    }
    if (main_pulse_active && (HAL_GetTick() - main_pulse_start_time >= 1000)) {
 800325e:	4b0f      	ldr	r3, [pc, #60]	@ (800329c <deploy_parachute_update+0x6c>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d011      	beq.n	800328a <deploy_parachute_update+0x5a>
 8003266:	f005 fce5 	bl	8008c34 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	4b0c      	ldr	r3, [pc, #48]	@ (80032a0 <deploy_parachute_update+0x70>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003276:	d308      	bcc.n	800328a <deploy_parachute_update+0x5a>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8003278:	2200      	movs	r2, #0
 800327a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800327e:	4809      	ldr	r0, [pc, #36]	@ (80032a4 <deploy_parachute_update+0x74>)
 8003280:	f007 f972 	bl	800a568 <HAL_GPIO_WritePin>
        main_pulse_active = 0;
 8003284:	4b05      	ldr	r3, [pc, #20]	@ (800329c <deploy_parachute_update+0x6c>)
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
    }
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	2000025e 	.word	0x2000025e
 8003294:	20000260 	.word	0x20000260
 8003298:	40020800 	.word	0x40020800
 800329c:	20000264 	.word	0x20000264
 80032a0:	20000268 	.word	0x20000268
 80032a4:	40020000 	.word	0x40020000

080032a8 <deploy_main_parachute>:

void deploy_main_parachute(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
    if (!main_pulse_active) {
 80032ac:	4b09      	ldr	r3, [pc, #36]	@ (80032d4 <deploy_main_parachute+0x2c>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10d      	bne.n	80032d0 <deploy_main_parachute+0x28>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80032b4:	2201      	movs	r2, #1
 80032b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80032ba:	4807      	ldr	r0, [pc, #28]	@ (80032d8 <deploy_main_parachute+0x30>)
 80032bc:	f007 f954 	bl	800a568 <HAL_GPIO_WritePin>
        main_pulse_start_time = HAL_GetTick();
 80032c0:	f005 fcb8 	bl	8008c34 <HAL_GetTick>
 80032c4:	4603      	mov	r3, r0
 80032c6:	4a05      	ldr	r2, [pc, #20]	@ (80032dc <deploy_main_parachute+0x34>)
 80032c8:	6013      	str	r3, [r2, #0]
        main_pulse_active = 1;
 80032ca:	4b02      	ldr	r3, [pc, #8]	@ (80032d4 <deploy_main_parachute+0x2c>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]
    }
}
 80032d0:	bf00      	nop
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20000264 	.word	0x20000264
 80032d8:	40020000 	.word	0x40020000
 80032dc:	20000268 	.word	0x20000268

080032e0 <KalmanFilter_Init>:

/**
 * @brief Initialize the Kalman filter
 * @param kf Pointer to Kalman filter structure
 */
void KalmanFilter_Init(KalmanFilter_t *kf) {
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
    // Initialize state vector
    kf->x[0] = 0.0f;  // Altitude
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f04f 0200 	mov.w	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
    kf->x[1] = 0.0f;  // Velocity
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	605a      	str	r2, [r3, #4]
    kf->x[2] = 0.0f;  // Acceleration
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	609a      	str	r2, [r3, #8]

    // Initialize covariance matrix with initial uncertainty
    for (int i = 0; i < 3; i++) {
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	e01f      	b.n	8003346 <KalmanFilter_Init+0x66>
        for (int j = 0; j < 3; j++) {
 8003306:	2300      	movs	r3, #0
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	e016      	b.n	800333a <KalmanFilter_Init+0x5a>
            kf->P[i][j] = (i == j) ? 100.0f : 0.0f;
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	429a      	cmp	r2, r3
 8003312:	d101      	bne.n	8003318 <KalmanFilter_Init+0x38>
 8003314:	491b      	ldr	r1, [pc, #108]	@ (8003384 <KalmanFilter_Init+0xa4>)
 8003316:	e001      	b.n	800331c <KalmanFilter_Init+0x3c>
 8003318:	f04f 0100 	mov.w	r1, #0
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4613      	mov	r3, r2
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	4413      	add	r3, r2
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	4413      	add	r3, r2
 800332a:	3302      	adds	r3, #2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4403      	add	r3, r0
 8003330:	3304      	adds	r3, #4
 8003332:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 3; j++) {
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	3301      	adds	r3, #1
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b02      	cmp	r3, #2
 800333e:	dde5      	ble.n	800330c <KalmanFilter_Init+0x2c>
    for (int i = 0; i < 3; i++) {
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	3301      	adds	r3, #1
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b02      	cmp	r3, #2
 800334a:	dddc      	ble.n	8003306 <KalmanFilter_Init+0x26>
        }
    }

    // Set noise parameters - these can be tuned
    kf->process_noise = 0.01f;         // Process noise
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a0e      	ldr	r2, [pc, #56]	@ (8003388 <KalmanFilter_Init+0xa8>)
 8003350:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->measurement_noise_alt = 0.005f;  // Altitude measurement noise
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a0d      	ldr	r2, [pc, #52]	@ (800338c <KalmanFilter_Init+0xac>)
 8003356:	635a      	str	r2, [r3, #52]	@ 0x34
    kf->measurement_noise_acc = 5.0f;  // Acceleration measurement noise
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a0d      	ldr	r2, [pc, #52]	@ (8003390 <KalmanFilter_Init+0xb0>)
 800335c:	639a      	str	r2, [r3, #56]	@ 0x38

    // Initialize apogee detection variables
    kf->apogee_detected = 0;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	63da      	str	r2, [r3, #60]	@ 0x3c
    kf->apogee_counter = 0;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	641a      	str	r2, [r3, #64]	@ 0x40
    kf->prev_velocity = 0.0f;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	645a      	str	r2, [r3, #68]	@ 0x44

    // Mach transition control
    kf->in_mach_transition = 0;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	42c80000 	.word	0x42c80000
 8003388:	3c23d70a 	.word	0x3c23d70a
 800338c:	3ba3d70a 	.word	0x3ba3d70a
 8003390:	40a00000 	.word	0x40a00000

08003394 <KalmanFilter_Update>:
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 * @param dt Time step (seconds)
 * @return Filtered altitude
 */
float KalmanFilter_Update(KalmanFilter_t *kf, float altitude, float accel, float dt) {
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	ed87 0a02 	vstr	s0, [r7, #8]
 80033a0:	edc7 0a01 	vstr	s1, [r7, #4]
 80033a4:	ed87 1a00 	vstr	s2, [r7]
    // Check for Mach transition region (approximately 300-350 m/s)
    // Skip barometer readings in this region due to pressure anomalies
    if (fabsf(kf->x[1]) > 300.0f && fabsf(kf->x[1]) < 350.0f) {
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80033ae:	eef0 7ae7 	vabs.f32	s15, s15
 80033b2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003418 <KalmanFilter_Update+0x84>
 80033b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033be:	dd0f      	ble.n	80033e0 <KalmanFilter_Update+0x4c>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80033c6:	eef0 7ae7 	vabs.f32	s15, s15
 80033ca:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800341c <KalmanFilter_Update+0x88>
 80033ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d6:	d503      	bpl.n	80033e0 <KalmanFilter_Update+0x4c>
        kf->in_mach_transition = 1;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	649a      	str	r2, [r3, #72]	@ 0x48
 80033de:	e002      	b.n	80033e6 <KalmanFilter_Update+0x52>
    } else {
        kf->in_mach_transition = 0;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // Time update (prediction)
    KalmanFilter_TimeUpdate(kf, dt);
 80033e6:	ed97 0a00 	vldr	s0, [r7]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f818 	bl	8003420 <KalmanFilter_TimeUpdate>

    // Measurement update (correction)
    KalmanFilter_MeasurementUpdate(kf, altitude, accel);
 80033f0:	edd7 0a01 	vldr	s1, [r7, #4]
 80033f4:	ed97 0a02 	vldr	s0, [r7, #8]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 fa1d 	bl	8003838 <KalmanFilter_MeasurementUpdate>

    // Check for apogee
    KalmanFilter_DetectApogee(kf);
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f001 f96a 	bl	80046d8 <KalmanFilter_DetectApogee>

    // Return filtered altitude
    return kf->x[0];
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	ee07 3a90 	vmov	s15, r3
}
 800340c:	eeb0 0a67 	vmov.f32	s0, s15
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	43960000 	.word	0x43960000
 800341c:	43af0000 	.word	0x43af0000

08003420 <KalmanFilter_TimeUpdate>:
/**
 * @brief Time update step of Kalman filter (prediction)
 * @param kf Pointer to Kalman filter structure
 * @param dt Time step (seconds)
 */
static void KalmanFilter_TimeUpdate(KalmanFilter_t *kf, float dt) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b0b6      	sub	sp, #216	@ 0xd8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	ed87 0a00 	vstr	s0, [r7]
    float dt2 = dt * dt;
 800342c:	edd7 7a00 	vldr	s15, [r7]
 8003430:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003434:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
    float dt3 = dt2 * dt;
 8003438:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800343c:	edd7 7a00 	vldr	s15, [r7]
 8003440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003444:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
    float dt4 = dt2 * dt2;
 8003448:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800344c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003450:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac

    // State transition matrix F = [1 dt dt²/2; 0 1 dt; 0 0 1]
    // State prediction: x = F*x
    float x0_new = kf->x[0] + kf->x[1] * dt + kf->x[2] * dt2 / 2.0f;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	ed93 7a00 	vldr	s14, [r3]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003460:	edd7 7a00 	vldr	s15, [r7]
 8003464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003468:	ee37 7a27 	vadd.f32	s14, s14, s15
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003472:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003476:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800347a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800347e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003486:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
    float x1_new = kf->x[1] + kf->x[2] * dt;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	edd3 6a02 	vldr	s13, [r3, #8]
 8003496:	edd7 7a00 	vldr	s15, [r7]
 800349a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800349e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034a2:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
    float x2_new = kf->x[2];  // Acceleration assumed constant
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    kf->x[0] = x0_new;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80034b4:	601a      	str	r2, [r3, #0]
    kf->x[1] = x1_new;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80034bc:	605a      	str	r2, [r3, #4]
    kf->x[2] = x2_new;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80034c4:	609a      	str	r2, [r3, #8]

    // Process noise covariance Q
    float q = kf->process_noise;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    float Q[3][3] = {
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80034ce:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80034d2:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80034d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80034da:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80034de:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80034e2:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80034e6:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80034ea:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80034ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80034f2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80034f6:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80034fa:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80034fe:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003502:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003506:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800350a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800350e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003512:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
        {dt3/2.0f * q, dt2 * q, dt * q},
 8003516:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800351a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800351e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003522:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003526:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800352a:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
        {dt3/2.0f * q, dt2 * q, dt * q},
 800352e:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003532:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003536:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800353a:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
        {dt3/2.0f * q, dt2 * q, dt * q},
 800353e:	ed97 7a00 	vldr	s14, [r7]
 8003542:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003546:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800354a:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
        {dt2/2.0f * q, dt * q, q}
 800354e:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003552:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003556:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800355a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800355e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003562:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
        {dt2/2.0f * q, dt * q, q}
 8003566:	ed97 7a00 	vldr	s14, [r7]
 800356a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800356e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003572:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 8003576:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800357a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    };

    // State transition matrix F
    float F[3][3] = {
 800357e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003582:	657b      	str	r3, [r7, #84]	@ 0x54
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	65bb      	str	r3, [r7, #88]	@ 0x58
        {1.0f, dt, dt2/2.0f},
 8003588:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800358c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003590:	eec7 7a26 	vdiv.f32	s15, s14, s13
    float F[3][3] = {
 8003594:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	663b      	str	r3, [r7, #96]	@ 0x60
 800359e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80035a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80035b4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80035b8:	677b      	str	r3, [r7, #116]	@ 0x74
        {0.0f, 1.0f, dt},
        {0.0f, 0.0f, 1.0f}
    };

    // Temporary matrices for calculation
    float FP[3][3] = {0};
 80035ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80035be:	2224      	movs	r2, #36	@ 0x24
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f00c fd50 	bl	8010068 <memset>
    float FPFT[3][3] = {0};
 80035c8:	f107 030c 	add.w	r3, r7, #12
 80035cc:	2224      	movs	r2, #36	@ 0x24
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f00c fd49 	bl	8010068 <memset>

    // P = F*P*F' + Q
    // Step 1: FP = F*P
    for (int i = 0; i < 3; i++) {
 80035d6:	2300      	movs	r3, #0
 80035d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80035dc:	e06a      	b.n	80036b4 <KalmanFilter_TimeUpdate+0x294>
        for (int j = 0; j < 3; j++) {
 80035de:	2300      	movs	r3, #0
 80035e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035e4:	e05d      	b.n	80036a2 <KalmanFilter_TimeUpdate+0x282>
            FP[i][j] = 0.0f;
 80035e6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80035ea:	4613      	mov	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4413      	add	r3, r2
 80035f0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	33d8      	adds	r3, #216	@ 0xd8
 80035fa:	443b      	add	r3, r7
 80035fc:	3ba8      	subs	r3, #168	@ 0xa8
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 8003604:	2300      	movs	r3, #0
 8003606:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800360a:	e041      	b.n	8003690 <KalmanFilter_TimeUpdate+0x270>
                FP[i][j] += F[i][k] * kf->P[k][j];
 800360c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003610:	4613      	mov	r3, r2
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	4413      	add	r3, r2
 8003616:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	33d8      	adds	r3, #216	@ 0xd8
 8003620:	443b      	add	r3, r7
 8003622:	3ba8      	subs	r3, #168	@ 0xa8
 8003624:	ed93 7a00 	vldr	s14, [r3]
 8003628:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	33d8      	adds	r3, #216	@ 0xd8
 800363c:	443b      	add	r3, r7
 800363e:	3b84      	subs	r3, #132	@ 0x84
 8003640:	edd3 6a00 	vldr	s13, [r3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800364a:	4613      	mov	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4413      	add	r3, r2
 8003650:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003654:	4413      	add	r3, r2
 8003656:	3302      	adds	r3, #2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	3304      	adds	r3, #4
 800365e:	edd3 7a00 	vldr	s15, [r3]
 8003662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800366a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800366e:	4613      	mov	r3, r2
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	4413      	add	r3, r2
 8003674:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	33d8      	adds	r3, #216	@ 0xd8
 800367e:	443b      	add	r3, r7
 8003680:	3ba8      	subs	r3, #168	@ 0xa8
 8003682:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 8003686:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800368a:	3301      	adds	r3, #1
 800368c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003690:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003694:	2b02      	cmp	r3, #2
 8003696:	ddb9      	ble.n	800360c <KalmanFilter_TimeUpdate+0x1ec>
        for (int j = 0; j < 3; j++) {
 8003698:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800369c:	3301      	adds	r3, #1
 800369e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	dd9d      	ble.n	80035e6 <KalmanFilter_TimeUpdate+0x1c6>
    for (int i = 0; i < 3; i++) {
 80036aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036ae:	3301      	adds	r3, #1
 80036b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80036b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	dd90      	ble.n	80035de <KalmanFilter_TimeUpdate+0x1be>
            }
        }
    }

    // Step 2: FPFT = FP*F'
    for (int i = 0; i < 3; i++) {
 80036bc:	2300      	movs	r3, #0
 80036be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036c2:	e069      	b.n	8003798 <KalmanFilter_TimeUpdate+0x378>
        for (int j = 0; j < 3; j++) {
 80036c4:	2300      	movs	r3, #0
 80036c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036ca:	e05c      	b.n	8003786 <KalmanFilter_TimeUpdate+0x366>
            FPFT[i][j] = 0.0f;
 80036cc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80036d0:	4613      	mov	r3, r2
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	4413      	add	r3, r2
 80036d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	33d8      	adds	r3, #216	@ 0xd8
 80036e0:	443b      	add	r3, r7
 80036e2:	3bcc      	subs	r3, #204	@ 0xcc
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 80036ea:	2300      	movs	r3, #0
 80036ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036f0:	e040      	b.n	8003774 <KalmanFilter_TimeUpdate+0x354>
                FPFT[i][j] += FP[i][k] * F[j][k];  // F'[k][j] = F[j][k]
 80036f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80036f6:	4613      	mov	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4413      	add	r3, r2
 80036fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	33d8      	adds	r3, #216	@ 0xd8
 8003706:	443b      	add	r3, r7
 8003708:	3bcc      	subs	r3, #204	@ 0xcc
 800370a:	ed93 7a00 	vldr	s14, [r3]
 800370e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003712:	4613      	mov	r3, r2
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	4413      	add	r3, r2
 8003718:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	33d8      	adds	r3, #216	@ 0xd8
 8003722:	443b      	add	r3, r7
 8003724:	3ba8      	subs	r3, #168	@ 0xa8
 8003726:	edd3 6a00 	vldr	s13, [r3]
 800372a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800372e:	4613      	mov	r3, r2
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	4413      	add	r3, r2
 8003734:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	33d8      	adds	r3, #216	@ 0xd8
 800373e:	443b      	add	r3, r7
 8003740:	3b84      	subs	r3, #132	@ 0x84
 8003742:	edd3 7a00 	vldr	s15, [r3]
 8003746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800374a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800374e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800375c:	4413      	add	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	33d8      	adds	r3, #216	@ 0xd8
 8003762:	443b      	add	r3, r7
 8003764:	3bcc      	subs	r3, #204	@ 0xcc
 8003766:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 800376a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800376e:	3301      	adds	r3, #1
 8003770:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003774:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003778:	2b02      	cmp	r3, #2
 800377a:	ddba      	ble.n	80036f2 <KalmanFilter_TimeUpdate+0x2d2>
        for (int j = 0; j < 3; j++) {
 800377c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003780:	3301      	adds	r3, #1
 8003782:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003786:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800378a:	2b02      	cmp	r3, #2
 800378c:	dd9e      	ble.n	80036cc <KalmanFilter_TimeUpdate+0x2ac>
    for (int i = 0; i < 3; i++) {
 800378e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003792:	3301      	adds	r3, #1
 8003794:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003798:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800379c:	2b02      	cmp	r3, #2
 800379e:	dd91      	ble.n	80036c4 <KalmanFilter_TimeUpdate+0x2a4>
            }
        }
    }

    // Step 3: P = FPFT + Q
    for (int i = 0; i < 3; i++) {
 80037a0:	2300      	movs	r3, #0
 80037a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80037a6:	e03e      	b.n	8003826 <KalmanFilter_TimeUpdate+0x406>
        for (int j = 0; j < 3; j++) {
 80037a8:	2300      	movs	r3, #0
 80037aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037ae:	e031      	b.n	8003814 <KalmanFilter_TimeUpdate+0x3f4>
            kf->P[i][j] = FPFT[i][j] + Q[i][j];
 80037b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80037b4:	4613      	mov	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	4413      	add	r3, r2
 80037ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	33d8      	adds	r3, #216	@ 0xd8
 80037c4:	443b      	add	r3, r7
 80037c6:	3bcc      	subs	r3, #204	@ 0xcc
 80037c8:	ed93 7a00 	vldr	s14, [r3]
 80037cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80037d0:	4613      	mov	r3, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4413      	add	r3, r2
 80037d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	33d8      	adds	r3, #216	@ 0xd8
 80037e0:	443b      	add	r3, r7
 80037e2:	3b60      	subs	r3, #96	@ 0x60
 80037e4:	edd3 7a00 	vldr	s15, [r3]
 80037e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80037f2:	4613      	mov	r3, r2
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4413      	add	r3, r2
 80037f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037fc:	4413      	add	r3, r2
 80037fe:	3302      	adds	r3, #2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	3304      	adds	r3, #4
 8003806:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 800380a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800380e:	3301      	adds	r3, #1
 8003810:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003814:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003818:	2b02      	cmp	r3, #2
 800381a:	ddc9      	ble.n	80037b0 <KalmanFilter_TimeUpdate+0x390>
    for (int i = 0; i < 3; i++) {
 800381c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003820:	3301      	adds	r3, #1
 8003822:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003826:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800382a:	2b02      	cmp	r3, #2
 800382c:	ddbc      	ble.n	80037a8 <KalmanFilter_TimeUpdate+0x388>
        }
    }
}
 800382e:	bf00      	nop
 8003830:	bf00      	nop
 8003832:	37d8      	adds	r7, #216	@ 0xd8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <KalmanFilter_MeasurementUpdate>:
 * @brief Measurement update step of Kalman filter (correction)
 * @param kf Pointer to Kalman filter structure
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 */
static void KalmanFilter_MeasurementUpdate(KalmanFilter_t *kf, float altitude, float accel) {
 8003838:	b5b0      	push	{r4, r5, r7, lr}
 800383a:	b0f6      	sub	sp, #472	@ 0x1d8
 800383c:	af00      	add	r7, sp, #0
 800383e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003842:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003846:	6018      	str	r0, [r3, #0]
 8003848:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800384c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003850:	ed83 0a00 	vstr	s0, [r3]
 8003854:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003858:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800385c:	edc3 0a00 	vstr	s1, [r3]
    // In Mach transition region, only use acceleration measurement
    if (kf->in_mach_transition) {
 8003860:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003864:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 826b 	beq.w	8003d48 <KalmanFilter_MeasurementUpdate+0x510>
        // Only use acceleration measurement
        // H = [0 0 1]
        float H[1][3] = {{0.0f, 0.0f, 1.0f}};
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003882:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003886:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
        float z = accel;
 800388a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800388e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
        float y = z - kf->x[2];  // Innovation
 8003898:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800389c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80038a6:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 80038aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038ae:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c

        // S = H*P*H' + R
        float HP[1][3] = {0};
 80038b2:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	605a      	str	r2, [r3, #4]
 80038bc:	609a      	str	r2, [r3, #8]
        float S = 0.0f;
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

        for (int i = 0; i < 3; i++) {
 80038c6:	2300      	movs	r3, #0
 80038c8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80038cc:	e044      	b.n	8003958 <KalmanFilter_MeasurementUpdate+0x120>
            HP[0][i] = H[0][0]*kf->P[0][i] + H[0][1]*kf->P[1][i] + H[0][2]*kf->P[2][i];
 80038ce:	ed97 7a4e 	vldr	s14, [r7, #312]	@ 0x138
 80038d2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038d6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80038e0:	3302      	adds	r3, #2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	3304      	adds	r3, #4
 80038e8:	edd3 7a00 	vldr	s15, [r3]
 80038ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038f0:	edd7 6a4f 	vldr	s13, [r7, #316]	@ 0x13c
 80038f4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038f8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003902:	3305      	adds	r3, #5
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	3304      	adds	r3, #4
 800390a:	edd3 7a00 	vldr	s15, [r3]
 800390e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003912:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003916:	edd7 6a50 	vldr	s13, [r7, #320]	@ 0x140
 800391a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800391e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003928:	3308      	adds	r3, #8
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	3304      	adds	r3, #4
 8003930:	edd3 7a00 	vldr	s15, [r3]
 8003934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800393c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003946:	443b      	add	r3, r7
 8003948:	3bac      	subs	r3, #172	@ 0xac
 800394a:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 800394e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003952:	3301      	adds	r3, #1
 8003954:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8003958:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800395c:	2b02      	cmp	r3, #2
 800395e:	ddb6      	ble.n	80038ce <KalmanFilter_MeasurementUpdate+0x96>
        }

        S = HP[0][0]*H[0][0] + HP[0][1]*H[0][1] + HP[0][2]*H[0][2] + kf->measurement_noise_acc;
 8003960:	ed97 7a4b 	vldr	s14, [r7, #300]	@ 0x12c
 8003964:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 8003968:	ee27 7a27 	vmul.f32	s14, s14, s15
 800396c:	edd7 6a4c 	vldr	s13, [r7, #304]	@ 0x130
 8003970:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 8003974:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003978:	ee37 7a27 	vadd.f32	s14, s14, s15
 800397c:	edd7 6a4d 	vldr	s13, [r7, #308]	@ 0x134
 8003980:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8003984:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003988:	ee37 7a27 	vadd.f32	s14, s14, s15
 800398c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003990:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800399a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800399e:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148

        // K = P*H'*S^-1
        float K[3] = {0};
 80039a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	605a      	str	r2, [r3, #4]
 80039ac:	609a      	str	r2, [r3, #8]
        float S_inv = 1.0f / S;
 80039ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039b2:	ed97 7a52 	vldr	s14, [r7, #328]	@ 0x148
 80039b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ba:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144

        for (int i = 0; i < 3; i++) {
 80039be:	2300      	movs	r3, #0
 80039c0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80039c4:	e04f      	b.n	8003a66 <KalmanFilter_MeasurementUpdate+0x22e>
            K[i] = (kf->P[i][0]*H[0][0] + kf->P[i][1]*H[0][1] + kf->P[i][2]*H[0][2]) * S_inv;
 80039c6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039ca:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80039ce:	6819      	ldr	r1, [r3, #0]
 80039d0:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80039d4:	4613      	mov	r3, r2
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	330c      	adds	r3, #12
 80039e0:	ed93 7a00 	vldr	s14, [r3]
 80039e4:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 80039e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039ec:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039f0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80039f4:	6819      	ldr	r1, [r3, #0]
 80039f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	4613      	mov	r3, r2
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	3304      	adds	r3, #4
 8003a08:	edd3 6a00 	vldr	s13, [r3]
 8003a0c:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 8003a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a18:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a1c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003a20:	6819      	ldr	r1, [r3, #0]
 8003a22:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8003a26:	4613      	mov	r3, r2
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	3314      	adds	r3, #20
 8003a32:	edd3 6a00 	vldr	s13, [r3]
 8003a36:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8003a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a42:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 8003a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a4a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003a54:	443b      	add	r3, r7
 8003a56:	3bb8      	subs	r3, #184	@ 0xb8
 8003a58:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003a5c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003a60:	3301      	adds	r3, #1
 8003a62:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003a66:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	ddab      	ble.n	80039c6 <KalmanFilter_MeasurementUpdate+0x18e>
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003a74:	e029      	b.n	8003aca <KalmanFilter_MeasurementUpdate+0x292>
            kf->x[i] += K[i] * y;
 8003a76:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a7a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	ed93 7a00 	vldr	s14, [r3]
 8003a8c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003a96:	443b      	add	r3, r7
 8003a98:	3bb8      	subs	r3, #184	@ 0xb8
 8003a9a:	edd3 6a00 	vldr	s13, [r3]
 8003a9e:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 8003aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aaa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003aae:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003ac0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003aca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	ddd1      	ble.n	8003a76 <KalmanFilter_MeasurementUpdate+0x23e>
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 8003ad2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ad6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003ada:	4618      	mov	r0, r3
 8003adc:	2324      	movs	r3, #36	@ 0x24
 8003ade:	461a      	mov	r2, r3
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	f00c fac1 	bl	8010068 <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 8003ae6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003aea:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8003aee:	4618      	mov	r0, r3
 8003af0:	2324      	movs	r3, #36	@ 0x24
 8003af2:	461a      	mov	r2, r3
 8003af4:	2100      	movs	r1, #0
 8003af6:	f00c fab7 	bl	8010068 <memset>

        for (int i = 0; i < 3; i++) {
 8003afa:	2300      	movs	r3, #0
 8003afc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003b00:	e062      	b.n	8003bc8 <KalmanFilter_MeasurementUpdate+0x390>
            for (int j = 0; j < 3; j++) {
 8003b02:	2300      	movs	r3, #0
 8003b04:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003b08:	e055      	b.n	8003bb6 <KalmanFilter_MeasurementUpdate+0x37e>
                KH[i][j] = K[i] * H[0][j];
 8003b0a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003b14:	443b      	add	r3, r7
 8003b16:	3bb8      	subs	r3, #184	@ 0xb8
 8003b18:	ed93 7a00 	vldr	s14, [r3]
 8003b1c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003b26:	443b      	add	r3, r7
 8003b28:	3ba0      	subs	r3, #160	@ 0xa0
 8003b2a:	edd3 7a00 	vldr	s15, [r3]
 8003b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b32:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b36:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003b3a:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003b3e:	4613      	mov	r3, r2
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	4413      	add	r3, r2
 8003b44:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	edc3 7a00 	vstr	s15, [r3]
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 8003b52:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003b56:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d102      	bne.n	8003b64 <KalmanFilter_MeasurementUpdate+0x32c>
 8003b5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b62:	e001      	b.n	8003b68 <KalmanFilter_MeasurementUpdate+0x330>
 8003b64:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8003e54 <KalmanFilter_MeasurementUpdate+0x61c>
 8003b68:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b6c:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003b70:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003b74:	4613      	mov	r3, r2
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	4413      	add	r3, r2
 8003b7a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	edd3 7a00 	vldr	s15, [r3]
 8003b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b8c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b90:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003b94:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003b98:	4613      	mov	r3, r2
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8003bac:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003bb6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	dda5      	ble.n	8003b0a <KalmanFilter_MeasurementUpdate+0x2d2>
        for (int i = 0; i < 3; i++) {
 8003bbe:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003bc8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	dd98      	ble.n	8003b02 <KalmanFilter_MeasurementUpdate+0x2ca>
            }
        }

        for (int i = 0; i < 3; i++) {
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003bd6:	e076      	b.n	8003cc6 <KalmanFilter_MeasurementUpdate+0x48e>
            for (int j = 0; j < 3; j++) {
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003bde:	e069      	b.n	8003cb4 <KalmanFilter_MeasurementUpdate+0x47c>
                Pnew[i][j] = 0.0f;
 8003be0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003be4:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003be8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003bec:	4613      	mov	r3, r2
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003c02:	2300      	movs	r3, #0
 8003c04:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003c08:	e04b      	b.n	8003ca2 <KalmanFilter_MeasurementUpdate+0x46a>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 8003c0a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c0e:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003c12:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003c16:	4613      	mov	r3, r2
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	ed93 7a00 	vldr	s14, [r3]
 8003c2a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c2e:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003c32:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003c36:	4613      	mov	r3, r2
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	edd3 6a00 	vldr	s13, [r3]
 8003c4a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c4e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003c52:	6819      	ldr	r1, [r3, #0]
 8003c54:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003c58:	4613      	mov	r3, r2
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003c62:	4413      	add	r3, r2
 8003c64:	3302      	adds	r3, #2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	edd3 7a00 	vldr	s15, [r3]
 8003c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c78:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c7c:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003c80:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003c84:	4613      	mov	r3, r2
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	4413      	add	r3, r2
 8003c8a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003c98:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003ca2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	ddaf      	ble.n	8003c0a <KalmanFilter_MeasurementUpdate+0x3d2>
            for (int j = 0; j < 3; j++) {
 8003caa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003cae:	3301      	adds	r3, #1
 8003cb0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003cb4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	dd91      	ble.n	8003be0 <KalmanFilter_MeasurementUpdate+0x3a8>
        for (int i = 0; i < 3; i++) {
 8003cbc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003cc6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	dd84      	ble.n	8003bd8 <KalmanFilter_MeasurementUpdate+0x3a0>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003cd4:	e032      	b.n	8003d3c <KalmanFilter_MeasurementUpdate+0x504>
            for (int j = 0; j < 3; j++) {
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003cdc:	e025      	b.n	8003d2a <KalmanFilter_MeasurementUpdate+0x4f2>
                kf->P[i][j] = Pnew[i][j];
 8003cde:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ce2:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003ce6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003cea:	4613      	mov	r3, r2
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	4413      	add	r3, r2
 8003cf0:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	6819      	ldr	r1, [r3, #0]
 8003cfc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d00:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	4413      	add	r3, r2
 8003d10:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003d14:	4413      	add	r3, r2
 8003d16:	3302      	adds	r3, #2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4403      	add	r3, r0
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 8003d20:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003d24:	3301      	adds	r3, #1
 8003d26:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003d2a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	ddd5      	ble.n	8003cde <KalmanFilter_MeasurementUpdate+0x4a6>
        for (int i = 0; i < 3; i++) {
 8003d32:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003d36:	3301      	adds	r3, #1
 8003d38:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003d3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	ddc8      	ble.n	8003cd6 <KalmanFilter_MeasurementUpdate+0x49e>
 8003d44:	f000 bcc2 	b.w	80046cc <KalmanFilter_MeasurementUpdate+0xe94>
            }
        }
    } else {
        // Use both altitude and acceleration measurements
        // H = [1 0 0; 0 0 1]
        float H[2][3] = {
 8003d48:	4b43      	ldr	r3, [pc, #268]	@ (8003e58 <KalmanFilter_MeasurementUpdate+0x620>)
 8003d4a:	f507 7484 	add.w	r4, r7, #264	@ 0x108
 8003d4e:	461d      	mov	r5, r3
 8003d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003d58:	e884 0003 	stmia.w	r4, {r0, r1}
            {1.0f, 0.0f, 0.0f},
            {0.0f, 0.0f, 1.0f}
        };

        float z[2] = {altitude, accel};
 8003d5c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d60:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d6a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d6e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        float y[2] = {z[0] - kf->x[0], z[1] - kf->x[2]};  // Innovation
 8003d78:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8003d7c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d80:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	edd3 7a00 	vldr	s15, [r3]
 8003d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d8e:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
 8003d92:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8003d96:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d9a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	edd3 7a02 	vldr	s15, [r3, #8]
 8003da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003da8:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

        // S = H*P*H' + R
        float HP[2][3] = {0};
 8003dac:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	611a      	str	r2, [r3, #16]
 8003dbc:	615a      	str	r2, [r3, #20]
        float S[2][2] = {0};
 8003dbe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	2300      	movs	r3, #0
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	6053      	str	r3, [r2, #4]
 8003dce:	6093      	str	r3, [r2, #8]
 8003dd0:	60d3      	str	r3, [r2, #12]
        float R[2][2] = {
            {kf->measurement_noise_alt, 0.0f},
 8003dd2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dd6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
        float R[2][2] = {
 8003dde:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003de2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dfa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	609a      	str	r2, [r3, #8]
            {0.0f, kf->measurement_noise_acc}
 8003e04:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e08:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
        float R[2][2] = {
 8003e10:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e14:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003e18:	60da      	str	r2, [r3, #12]
        };

        for (int i = 0; i < 2; i++) {
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003e20:	e079      	b.n	8003f16 <KalmanFilter_MeasurementUpdate+0x6de>
            for (int j = 0; j < 3; j++) {
 8003e22:	2300      	movs	r3, #0
 8003e24:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003e28:	e06c      	b.n	8003f04 <KalmanFilter_MeasurementUpdate+0x6cc>
                HP[i][j] = 0.0f;
 8003e2a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003e2e:	4613      	mov	r3, r2
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	4413      	add	r3, r2
 8003e34:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003e40:	443b      	add	r3, r7
 8003e42:	3bf8      	subs	r3, #248	@ 0xf8
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003e50:	e04f      	b.n	8003ef2 <KalmanFilter_MeasurementUpdate+0x6ba>
 8003e52:	bf00      	nop
 8003e54:	00000000 	.word	0x00000000
 8003e58:	08015910 	.word	0x08015910
 8003e5c:	358637bd 	.word	0x358637bd
                    HP[i][j] += H[i][k] * kf->P[k][j];
 8003e60:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003e64:	4613      	mov	r3, r2
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4413      	add	r3, r2
 8003e6a:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003e76:	443b      	add	r3, r7
 8003e78:	3bf8      	subs	r3, #248	@ 0xf8
 8003e7a:	ed93 7a00 	vldr	s14, [r3]
 8003e7e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003e82:	4613      	mov	r3, r2
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	4413      	add	r3, r2
 8003e88:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003e94:	443b      	add	r3, r7
 8003e96:	3bd0      	subs	r3, #208	@ 0xd0
 8003e98:	edd3 6a00 	vldr	s13, [r3]
 8003e9c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ea0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003ea4:	6819      	ldr	r1, [r3, #0]
 8003ea6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003eaa:	4613      	mov	r3, r2
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	4413      	add	r3, r2
 8003eb0:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3302      	adds	r3, #2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	edd3 7a00 	vldr	s15, [r3]
 8003ec2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eca:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003ece:	4613      	mov	r3, r2
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003ee0:	443b      	add	r3, r7
 8003ee2:	3bf8      	subs	r3, #248	@ 0xf8
 8003ee4:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003ee8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003eec:	3301      	adds	r3, #1
 8003eee:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003ef2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	ddb2      	ble.n	8003e60 <KalmanFilter_MeasurementUpdate+0x628>
            for (int j = 0; j < 3; j++) {
 8003efa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003efe:	3301      	adds	r3, #1
 8003f00:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003f04:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	dd8e      	ble.n	8003e2a <KalmanFilter_MeasurementUpdate+0x5f2>
        for (int i = 0; i < 2; i++) {
 8003f0c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003f10:	3301      	adds	r3, #1
 8003f12:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003f16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	dd81      	ble.n	8003e22 <KalmanFilter_MeasurementUpdate+0x5ea>
                }
            }
        }

        for (int i = 0; i < 2; i++) {
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003f24:	e098      	b.n	8004058 <KalmanFilter_MeasurementUpdate+0x820>
            for (int j = 0; j < 2; j++) {
 8003f26:	2300      	movs	r3, #0
 8003f28:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003f2c:	e08a      	b.n	8004044 <KalmanFilter_MeasurementUpdate+0x80c>
                S[i][j] = 0.0f;
 8003f2e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f32:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003f36:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f3a:	0059      	lsls	r1, r3, #1
 8003f3c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003f40:	440b      	add	r3, r1
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003f52:	e042      	b.n	8003fda <KalmanFilter_MeasurementUpdate+0x7a2>
                    S[i][j] += HP[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8003f54:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f58:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003f5c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f60:	0059      	lsls	r1, r3, #1
 8003f62:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003f66:	440b      	add	r3, r1
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	ed93 7a00 	vldr	s14, [r3]
 8003f70:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8003f74:	4613      	mov	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	4413      	add	r3, r2
 8003f7a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003f86:	443b      	add	r3, r7
 8003f88:	3bf8      	subs	r3, #248	@ 0xf8
 8003f8a:	edd3 6a00 	vldr	s13, [r3]
 8003f8e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003f92:	4613      	mov	r3, r2
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	4413      	add	r3, r2
 8003f98:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003fa4:	443b      	add	r3, r7
 8003fa6:	3bd0      	subs	r3, #208	@ 0xd0
 8003fa8:	edd3 7a00 	vldr	s15, [r3]
 8003fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fb4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fb8:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003fbc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003fc0:	0059      	lsls	r1, r3, #1
 8003fc2:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003fc6:	440b      	add	r3, r1
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003fd0:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003fda:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	ddb8      	ble.n	8003f54 <KalmanFilter_MeasurementUpdate+0x71c>
                }
                S[i][j] += R[i][j];
 8003fe2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fe6:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003fea:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003fee:	0059      	lsls	r1, r3, #1
 8003ff0:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003ff4:	440b      	add	r3, r1
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	ed93 7a00 	vldr	s14, [r3]
 8003ffe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004002:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8004006:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800400a:	0059      	lsls	r1, r3, #1
 800400c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004010:	440b      	add	r3, r1
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	edd3 7a00 	vldr	s15, [r3]
 800401a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800401e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004022:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8004026:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800402a:	0059      	lsls	r1, r3, #1
 800402c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004030:	440b      	add	r3, r1
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 800403a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800403e:	3301      	adds	r3, #1
 8004040:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004044:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004048:	2b01      	cmp	r3, #1
 800404a:	f77f af70 	ble.w	8003f2e <KalmanFilter_MeasurementUpdate+0x6f6>
        for (int i = 0; i < 2; i++) {
 800404e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004052:	3301      	adds	r3, #1
 8004054:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004058:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800405c:	2b01      	cmp	r3, #1
 800405e:	f77f af62 	ble.w	8003f26 <KalmanFilter_MeasurementUpdate+0x6ee>
            }
        }

        // Calculate S^-1 (inverse of 2x2 matrix)
        float det = S[0][0] * S[1][1] - S[0][1] * S[1][0];
 8004062:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800406a:	ed93 7a00 	vldr	s14, [r3]
 800406e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004076:	edd3 7a03 	vldr	s15, [r3, #12]
 800407a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800407e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004086:	edd3 6a01 	vldr	s13, [r3, #4]
 800408a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800408e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004092:	edd3 7a02 	vldr	s15, [r3, #8]
 8004096:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800409a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800409e:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
        if (fabsf(det) < 1e-6f) {
 80040a2:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 80040a6:	eef0 7ae7 	vabs.f32	s15, s15
 80040aa:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 8003e5c <KalmanFilter_MeasurementUpdate+0x624>
 80040ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b6:	f100 8308 	bmi.w	80046ca <KalmanFilter_MeasurementUpdate+0xe92>
            // Matrix is singular, skip update
            return;
        }

        float S_inv[2][2] = {
            {S[1][1] / det, -S[0][1] / det},
 80040ba:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040c2:	edd3 6a03 	vldr	s13, [r3, #12]
 80040c6:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 80040ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 80040ce:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040d2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80040d6:	edc3 7a00 	vstr	s15, [r3]
            {S[1][1] / det, -S[0][1] / det},
 80040da:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80040e6:	eef1 6a67 	vneg.f32	s13, s15
 80040ea:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 80040ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 80040f2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80040fa:	edc3 7a01 	vstr	s15, [r3, #4]
            {-S[1][0] / det, S[0][0] / det}
 80040fe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004106:	edd3 7a02 	vldr	s15, [r3, #8]
 800410a:	eef1 6a67 	vneg.f32	s13, s15
 800410e:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8004112:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8004116:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800411a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800411e:	edc3 7a02 	vstr	s15, [r3, #8]
            {-S[1][0] / det, S[0][0] / det}
 8004122:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800412a:	edd3 6a00 	vldr	s13, [r3]
 800412e:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8004132:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8004136:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800413a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800413e:	edc3 7a03 	vstr	s15, [r3, #12]
        };

        // K = P*H'*S^-1
        float PHt[3][2] = {0};
 8004142:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004146:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800414a:	461a      	mov	r2, r3
 800414c:	2300      	movs	r3, #0
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	6053      	str	r3, [r2, #4]
 8004152:	6093      	str	r3, [r2, #8]
 8004154:	60d3      	str	r3, [r2, #12]
 8004156:	6113      	str	r3, [r2, #16]
 8004158:	6153      	str	r3, [r2, #20]
        float K[3][2] = {0};
 800415a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800415e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004162:	461a      	mov	r2, r3
 8004164:	2300      	movs	r3, #0
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	6053      	str	r3, [r2, #4]
 800416a:	6093      	str	r3, [r2, #8]
 800416c:	60d3      	str	r3, [r2, #12]
 800416e:	6113      	str	r3, [r2, #16]
 8004170:	6153      	str	r3, [r2, #20]

        for (int i = 0; i < 3; i++) {
 8004172:	2300      	movs	r3, #0
 8004174:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8004178:	e06f      	b.n	800425a <KalmanFilter_MeasurementUpdate+0xa22>
            for (int j = 0; j < 2; j++) {
 800417a:	2300      	movs	r3, #0
 800417c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8004180:	e062      	b.n	8004248 <KalmanFilter_MeasurementUpdate+0xa10>
                PHt[i][j] = 0.0f;
 8004182:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004186:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 800418a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800418e:	0059      	lsls	r1, r3, #1
 8004190:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004194:	440b      	add	r3, r1
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 80041a0:	2300      	movs	r3, #0
 80041a2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80041a6:	e046      	b.n	8004236 <KalmanFilter_MeasurementUpdate+0x9fe>
                    PHt[i][j] += kf->P[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 80041a8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041ac:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 80041b0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80041b4:	0059      	lsls	r1, r3, #1
 80041b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80041ba:	440b      	add	r3, r1
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	ed93 7a00 	vldr	s14, [r3]
 80041c4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041c8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80041cc:	6819      	ldr	r1, [r3, #0]
 80041ce:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80041d2:	4613      	mov	r3, r2
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	4413      	add	r3, r2
 80041d8:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80041dc:	4413      	add	r3, r2
 80041de:	3302      	adds	r3, #2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	3304      	adds	r3, #4
 80041e6:	edd3 6a00 	vldr	s13, [r3]
 80041ea:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 80041ee:	4613      	mov	r3, r2
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	4413      	add	r3, r2
 80041f4:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004200:	443b      	add	r3, r7
 8004202:	3bd0      	subs	r3, #208	@ 0xd0
 8004204:	edd3 7a00 	vldr	s15, [r3]
 8004208:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800420c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004210:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004214:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8004218:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800421c:	0059      	lsls	r1, r3, #1
 800421e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004222:	440b      	add	r3, r1
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 800422c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004230:	3301      	adds	r3, #1
 8004232:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8004236:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800423a:	2b02      	cmp	r3, #2
 800423c:	ddb4      	ble.n	80041a8 <KalmanFilter_MeasurementUpdate+0x970>
            for (int j = 0; j < 2; j++) {
 800423e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004242:	3301      	adds	r3, #1
 8004244:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8004248:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800424c:	2b01      	cmp	r3, #1
 800424e:	dd98      	ble.n	8004182 <KalmanFilter_MeasurementUpdate+0x94a>
        for (int i = 0; i < 3; i++) {
 8004250:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004254:	3301      	adds	r3, #1
 8004256:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800425a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800425e:	2b02      	cmp	r3, #2
 8004260:	dd8b      	ble.n	800417a <KalmanFilter_MeasurementUpdate+0x942>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8004262:	2300      	movs	r3, #0
 8004264:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004268:	e069      	b.n	800433e <KalmanFilter_MeasurementUpdate+0xb06>
            for (int j = 0; j < 2; j++) {
 800426a:	2300      	movs	r3, #0
 800426c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004270:	e05c      	b.n	800432c <KalmanFilter_MeasurementUpdate+0xaf4>
                K[i][j] = 0.0f;
 8004272:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004276:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 800427a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800427e:	0059      	lsls	r1, r3, #1
 8004280:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004284:	440b      	add	r3, r1
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 8004290:	2300      	movs	r3, #0
 8004292:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004296:	e040      	b.n	800431a <KalmanFilter_MeasurementUpdate+0xae2>
                    K[i][j] += PHt[i][k] * S_inv[k][j];
 8004298:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800429c:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80042a0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80042a4:	0059      	lsls	r1, r3, #1
 80042a6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80042aa:	440b      	add	r3, r1
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	ed93 7a00 	vldr	s14, [r3]
 80042b4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042b8:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 80042bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80042c0:	0059      	lsls	r1, r3, #1
 80042c2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80042c6:	440b      	add	r3, r1
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	edd3 6a00 	vldr	s13, [r3]
 80042d0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042d4:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 80042d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80042dc:	0059      	lsls	r1, r3, #1
 80042de:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80042e2:	440b      	add	r3, r1
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	edd3 7a00 	vldr	s15, [r3]
 80042ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042f4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042f8:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80042fc:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004300:	0059      	lsls	r1, r3, #1
 8004302:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004306:	440b      	add	r3, r1
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 8004310:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004314:	3301      	adds	r3, #1
 8004316:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800431a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800431e:	2b01      	cmp	r3, #1
 8004320:	ddba      	ble.n	8004298 <KalmanFilter_MeasurementUpdate+0xa60>
            for (int j = 0; j < 2; j++) {
 8004322:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004326:	3301      	adds	r3, #1
 8004328:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800432c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004330:	2b01      	cmp	r3, #1
 8004332:	dd9e      	ble.n	8004272 <KalmanFilter_MeasurementUpdate+0xa3a>
        for (int i = 0; i < 3; i++) {
 8004334:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004338:	3301      	adds	r3, #1
 800433a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800433e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004342:	2b02      	cmp	r3, #2
 8004344:	dd91      	ble.n	800426a <KalmanFilter_MeasurementUpdate+0xa32>
                }
            }
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 8004346:	2300      	movs	r3, #0
 8004348:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800434c:	e042      	b.n	80043d4 <KalmanFilter_MeasurementUpdate+0xb9c>
            for (int j = 0; j < 2; j++) {
 800434e:	2300      	movs	r3, #0
 8004350:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8004354:	e035      	b.n	80043c2 <KalmanFilter_MeasurementUpdate+0xb8a>
                kf->x[i] += K[i][j] * y[j];
 8004356:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800435a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	ed93 7a00 	vldr	s14, [r3]
 800436c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004370:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004374:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004378:	0059      	lsls	r1, r3, #1
 800437a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800437e:	440b      	add	r3, r1
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	edd3 6a00 	vldr	s13, [r3]
 8004388:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004392:	443b      	add	r3, r7
 8004394:	3be0      	subs	r3, #224	@ 0xe0
 8004396:	edd3 7a00 	vldr	s15, [r3]
 800439a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800439e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043a2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043a6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 80043b8:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80043bc:	3301      	adds	r3, #1
 80043be:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80043c2:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	ddc5      	ble.n	8004356 <KalmanFilter_MeasurementUpdate+0xb1e>
        for (int i = 0; i < 3; i++) {
 80043ca:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80043ce:	3301      	adds	r3, #1
 80043d0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80043d4:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80043d8:	2b02      	cmp	r3, #2
 80043da:	ddb8      	ble.n	800434e <KalmanFilter_MeasurementUpdate+0xb16>
            }
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 80043dc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043e0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80043e4:	4618      	mov	r0, r3
 80043e6:	2324      	movs	r3, #36	@ 0x24
 80043e8:	461a      	mov	r2, r3
 80043ea:	2100      	movs	r1, #0
 80043ec:	f00b fe3c 	bl	8010068 <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 80043f0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043f4:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80043f8:	4618      	mov	r0, r3
 80043fa:	2324      	movs	r3, #36	@ 0x24
 80043fc:	461a      	mov	r2, r3
 80043fe:	2100      	movs	r1, #0
 8004400:	f00b fe32 	bl	8010068 <memset>

        for (int i = 0; i < 3; i++) {
 8004404:	2300      	movs	r3, #0
 8004406:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800440a:	e09e      	b.n	800454a <KalmanFilter_MeasurementUpdate+0xd12>
            for (int j = 0; j < 3; j++) {
 800440c:	2300      	movs	r3, #0
 800440e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004412:	e090      	b.n	8004536 <KalmanFilter_MeasurementUpdate+0xcfe>
                KH[i][j] = 0.0f;
 8004414:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004418:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 800441c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004420:	4613      	mov	r3, r2
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	4413      	add	r3, r2
 8004426:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 8004436:	2300      	movs	r3, #0
 8004438:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800443c:	e045      	b.n	80044ca <KalmanFilter_MeasurementUpdate+0xc92>
                    KH[i][j] += K[i][k] * H[k][j];
 800443e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004442:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004446:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800444a:	4613      	mov	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	ed93 7a00 	vldr	s14, [r3]
 800445e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004462:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004466:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800446a:	0059      	lsls	r1, r3, #1
 800446c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004470:	440b      	add	r3, r1
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	edd3 6a00 	vldr	s13, [r3]
 800447a:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 800447e:	4613      	mov	r3, r2
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	4413      	add	r3, r2
 8004484:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004490:	443b      	add	r3, r7
 8004492:	3bd0      	subs	r3, #208	@ 0xd0
 8004494:	edd3 7a00 	vldr	s15, [r3]
 8004498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800449c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044a0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80044a4:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80044a8:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80044ac:	4613      	mov	r3, r2
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	4413      	add	r3, r2
 80044b2:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 80044c0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80044c4:	3301      	adds	r3, #1
 80044c6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80044ca:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	ddb5      	ble.n	800443e <KalmanFilter_MeasurementUpdate+0xc06>
                }
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 80044d2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80044d6:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80044da:	429a      	cmp	r2, r3
 80044dc:	d102      	bne.n	80044e4 <KalmanFilter_MeasurementUpdate+0xcac>
 80044de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044e2:	e001      	b.n	80044e8 <KalmanFilter_MeasurementUpdate+0xcb0>
 80044e4:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 80046d4 <KalmanFilter_MeasurementUpdate+0xe9c>
 80044e8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80044ec:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80044f0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80044f4:	4613      	mov	r3, r2
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4413      	add	r3, r2
 80044fa:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	edd3 7a00 	vldr	s15, [r3]
 8004508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800450c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004510:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8004514:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004518:	4613      	mov	r3, r2
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	4413      	add	r3, r2
 800451e:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 800452c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004530:	3301      	adds	r3, #1
 8004532:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004536:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800453a:	2b02      	cmp	r3, #2
 800453c:	f77f af6a 	ble.w	8004414 <KalmanFilter_MeasurementUpdate+0xbdc>
        for (int i = 0; i < 3; i++) {
 8004540:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8004544:	3301      	adds	r3, #1
 8004546:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800454a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800454e:	2b02      	cmp	r3, #2
 8004550:	f77f af5c 	ble.w	800440c <KalmanFilter_MeasurementUpdate+0xbd4>
            }
        }

        for (int i = 0; i < 3; i++) {
 8004554:	2300      	movs	r3, #0
 8004556:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800455a:	e076      	b.n	800464a <KalmanFilter_MeasurementUpdate+0xe12>
            for (int j = 0; j < 3; j++) {
 800455c:	2300      	movs	r3, #0
 800455e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8004562:	e069      	b.n	8004638 <KalmanFilter_MeasurementUpdate+0xe00>
                Pnew[i][j] = 0.0f;
 8004564:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004568:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 800456c:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004570:	4613      	mov	r3, r2
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	4413      	add	r3, r2
 8004576:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8004586:	2300      	movs	r3, #0
 8004588:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800458c:	e04b      	b.n	8004626 <KalmanFilter_MeasurementUpdate+0xdee>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 800458e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004592:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004596:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 800459a:	4613      	mov	r3, r2
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	4413      	add	r3, r2
 80045a0:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	ed93 7a00 	vldr	s14, [r3]
 80045ae:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80045b2:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 80045b6:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80045ba:	4613      	mov	r3, r2
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	4413      	add	r3, r2
 80045c0:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	edd3 6a00 	vldr	s13, [r3]
 80045ce:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80045d2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80045d6:	6819      	ldr	r1, [r3, #0]
 80045d8:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80045dc:	4613      	mov	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	4413      	add	r3, r2
 80045e2:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80045e6:	4413      	add	r3, r2
 80045e8:	3302      	adds	r3, #2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	3304      	adds	r3, #4
 80045f0:	edd3 7a00 	vldr	s15, [r3]
 80045f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045fc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004600:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004604:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004608:	4613      	mov	r3, r2
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	4413      	add	r3, r2
 800460e:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 800461c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004620:	3301      	adds	r3, #1
 8004622:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8004626:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800462a:	2b02      	cmp	r3, #2
 800462c:	ddaf      	ble.n	800458e <KalmanFilter_MeasurementUpdate+0xd56>
            for (int j = 0; j < 3; j++) {
 800462e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004632:	3301      	adds	r3, #1
 8004634:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8004638:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800463c:	2b02      	cmp	r3, #2
 800463e:	dd91      	ble.n	8004564 <KalmanFilter_MeasurementUpdate+0xd2c>
        for (int i = 0; i < 3; i++) {
 8004640:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004644:	3301      	adds	r3, #1
 8004646:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800464a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800464e:	2b02      	cmp	r3, #2
 8004650:	dd84      	ble.n	800455c <KalmanFilter_MeasurementUpdate+0xd24>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8004652:	2300      	movs	r3, #0
 8004654:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004658:	e032      	b.n	80046c0 <KalmanFilter_MeasurementUpdate+0xe88>
            for (int j = 0; j < 3; j++) {
 800465a:	2300      	movs	r3, #0
 800465c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004660:	e025      	b.n	80046ae <KalmanFilter_MeasurementUpdate+0xe76>
                kf->P[i][j] = Pnew[i][j];
 8004662:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004666:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 800466a:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 800466e:	4613      	mov	r3, r2
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	4413      	add	r3, r2
 8004674:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	6819      	ldr	r1, [r3, #0]
 8004680:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004684:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 800468e:	4613      	mov	r3, r2
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	4413      	add	r3, r2
 8004694:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8004698:	4413      	add	r3, r2
 800469a:	3302      	adds	r3, #2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4403      	add	r3, r0
 80046a0:	3304      	adds	r3, #4
 80046a2:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 80046a4:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80046a8:	3301      	adds	r3, #1
 80046aa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80046ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	ddd5      	ble.n	8004662 <KalmanFilter_MeasurementUpdate+0xe2a>
        for (int i = 0; i < 3; i++) {
 80046b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80046ba:	3301      	adds	r3, #1
 80046bc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80046c0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	ddc8      	ble.n	800465a <KalmanFilter_MeasurementUpdate+0xe22>
 80046c8:	e000      	b.n	80046cc <KalmanFilter_MeasurementUpdate+0xe94>
            return;
 80046ca:	bf00      	nop
            }
        }
    }
}
 80046cc:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bdb0      	pop	{r4, r5, r7, pc}
 80046d4:	00000000 	.word	0x00000000

080046d8 <KalmanFilter_DetectApogee>:
/**
 * @brief Detect apogee based on velocity trend
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
static int KalmanFilter_DetectApogee(KalmanFilter_t *kf) {
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
    // Velocity is negative and magnitude is increasing
	if(kf->x[2] > 30.0){


	}
    if (kf->x[1] < 0.0f && kf->x[1] < kf->prev_velocity) {
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80046e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ee:	d517      	bpl.n	8004720 <KalmanFilter_DetectApogee+0x48>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80046fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004704:	d50c      	bpl.n	8004720 <KalmanFilter_DetectApogee+0x48>
        kf->apogee_counter++;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	641a      	str	r2, [r3, #64]	@ 0x40
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004714:	2b04      	cmp	r3, #4
 8004716:	dd06      	ble.n	8004726 <KalmanFilter_DetectApogee+0x4e>
            kf->apogee_detected = 1;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	63da      	str	r2, [r3, #60]	@ 0x3c
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 800471e:	e002      	b.n	8004726 <KalmanFilter_DetectApogee+0x4e>
        }
    } else {
        kf->apogee_counter = 0;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    kf->prev_velocity = kf->x[1];
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	645a      	str	r2, [r3, #68]	@ 0x44
    return kf->apogee_detected;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <Kalman_Get_Velocity>:
float Kalman_Get_Velocity(KalmanFilter_t *kf){
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
	return kf->x[1];
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	ee07 3a90 	vmov	s15, r3
}
 800474e:	eeb0 0a67 	vmov.f32	s0, s15
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <KalmanFilter_IsApogeeDetected>:
/**
 * @brief Check if apogee has been detected
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
int KalmanFilter_IsApogeeDetected(KalmanFilter_t *kf) {
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
    return kf->apogee_detected;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <L86_GNSS_Init>:
static void get_GNRMC_data(gps_data_t *gps_data_);
static void get_GPGGA_data(gps_data_t *gps_data_);
static void format_data(gps_data_t *gps_data_);

void L86_GNSS_Init(UART_HandleTypeDef *huart_gnss_, L86_GNSS_BAUD_RATE baud_rate)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
	huart_gnss = huart_gnss_;
 800477e:	4a09      	ldr	r2, [pc, #36]	@ (80047a4 <L86_GNSS_Init+0x30>)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6013      	str	r3, [r2, #0]
	set_baud_rate(baud_rate);
 8004784:	6838      	ldr	r0, [r7, #0]
 8004786:	f000 f84f 	bl	8004828 <set_baud_rate>
	HAL_UART_Receive_DMA(huart_gnss, (uint8_t *)gnss_rx_buffer, BUFFER_SIZE * 2);
 800478a:	4b06      	ldr	r3, [pc, #24]	@ (80047a4 <L86_GNSS_Init+0x30>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8004792:	4905      	ldr	r1, [pc, #20]	@ (80047a8 <L86_GNSS_Init+0x34>)
 8004794:	4618      	mov	r0, r3
 8004796:	f008 fb4f 	bl	800ce38 <HAL_UART_Receive_DMA>
}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	2000026c 	.word	0x2000026c
 80047a8:	20000270 	.word	0x20000270

080047ac <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 80047b4:	4b06      	ldr	r3, [pc, #24]	@ (80047d0 <HAL_UART_RxHalfCpltCallback+0x24>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d104      	bne.n	80047c8 <HAL_UART_RxHalfCpltCallback+0x1c>
	{
		process_data(gnss_rx_buffer, BUFFER_SIZE);
 80047be:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80047c2:	4804      	ldr	r0, [pc, #16]	@ (80047d4 <HAL_UART_RxHalfCpltCallback+0x28>)
 80047c4:	f000 f8c4 	bl	8004950 <process_data>
	}
}
 80047c8:	bf00      	nop
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	2000026c 	.word	0x2000026c
 80047d4:	20000270 	.word	0x20000270

080047d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 80047e0:	4b06      	ldr	r3, [pc, #24]	@ (80047fc <HAL_UART_RxCpltCallback+0x24>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d104      	bne.n	80047f4 <HAL_UART_RxCpltCallback+0x1c>
	{
		process_data(&gnss_rx_buffer[BUFFER_SIZE], BUFFER_SIZE);
 80047ea:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80047ee:	4804      	ldr	r0, [pc, #16]	@ (8004800 <HAL_UART_RxCpltCallback+0x28>)
 80047f0:	f000 f8ae 	bl	8004950 <process_data>
	}
}
 80047f4:	bf00      	nop
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	2000026c 	.word	0x2000026c
 8004800:	20000720 	.word	0x20000720

08004804 <L86_GNSS_Update>:

void L86_GNSS_Update(gps_data_t *gps_data_)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	get_GNRMC_data(gps_data_);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f8b1 	bl	8004974 <get_GNRMC_data>
	get_GPGGA_data(gps_data_);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f932 	bl	8004a7c <get_GPGGA_data>
	format_data(gps_data_);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f9a1 	bl	8004b60 <format_data>
}
 800481e:	bf00      	nop
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <set_baud_rate>:

	HAL_UART_Transmit(huart_Seri_Port, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
}

static void set_baud_rate(L86_GNSS_BAUD_RATE baud_rate)
{
 8004828:	b590      	push	{r4, r7, lr}
 800482a:	b093      	sub	sp, #76	@ 0x4c
 800482c:	af02      	add	r7, sp, #8
 800482e:	6078      	str	r0, [r7, #4]
	char commend_buffer[COMMEND_BUFFER_SIZE];

	memset(commend_buffer, 0, COMMEND_BUFFER_SIZE);
 8004830:	f107 030c 	add.w	r3, r7, #12
 8004834:	2232      	movs	r2, #50	@ 0x32
 8004836:	2100      	movs	r1, #0
 8004838:	4618      	mov	r0, r3
 800483a:	f00b fc15 	bl	8010068 <memset>
	snprintf(commend_buffer, COMMEND_BUFFER_SIZE, "PMTK251,%ul", baud_rate);
 800483e:	f107 000c 	add.w	r0, r7, #12
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a2e      	ldr	r2, [pc, #184]	@ (8004900 <set_baud_rate+0xd8>)
 8004846:	2132      	movs	r1, #50	@ 0x32
 8004848:	f00a fbe2 	bl	800f010 <sniprintf>
	uint8_t checksum = calculate_checksum(commend_buffer);
 800484c:	f107 030c 	add.w	r3, r7, #12
 8004850:	4618      	mov	r0, r3
 8004852:	f000 f85d 	bl	8004910 <calculate_checksum>
 8004856:	4603      	mov	r3, r0
 8004858:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	memset(commend_buffer, 0, COMMEND_BUFFER_SIZE);
 800485c:	f107 030c 	add.w	r3, r7, #12
 8004860:	2232      	movs	r2, #50	@ 0x32
 8004862:	2100      	movs	r1, #0
 8004864:	4618      	mov	r0, r3
 8004866:	f00b fbff 	bl	8010068 <memset>
	snprintf(commend_buffer, COMMEND_BUFFER_SIZE, "$PMTK251,%ul*%02X\r\n", baud_rate, checksum);
 800486a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800486e:	f107 000c 	add.w	r0, r7, #12
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a23      	ldr	r2, [pc, #140]	@ (8004904 <set_baud_rate+0xdc>)
 8004878:	2132      	movs	r1, #50	@ 0x32
 800487a:	f00a fbc9 	bl	800f010 <sniprintf>

	HAL_UART_Transmit(huart_gnss, (uint8_t *)commend_buffer, strlen(commend_buffer), 100);
 800487e:	4b22      	ldr	r3, [pc, #136]	@ (8004908 <set_baud_rate+0xe0>)
 8004880:	681c      	ldr	r4, [r3, #0]
 8004882:	f107 030c 	add.w	r3, r7, #12
 8004886:	4618      	mov	r0, r3
 8004888:	f7fb fd12 	bl	80002b0 <strlen>
 800488c:	4603      	mov	r3, r0
 800488e:	b29a      	uxth	r2, r3
 8004890:	f107 010c 	add.w	r1, r7, #12
 8004894:	2364      	movs	r3, #100	@ 0x64
 8004896:	4620      	mov	r0, r4
 8004898:	f008 f9c6 	bl	800cc28 <HAL_UART_Transmit>
	HAL_Delay(100);
 800489c:	2064      	movs	r0, #100	@ 0x64
 800489e:	f004 f9d5 	bl	8008c4c <HAL_Delay>

	HAL_UART_DeInit(huart_gnss);
 80048a2:	4b19      	ldr	r3, [pc, #100]	@ (8004908 <set_baud_rate+0xe0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f008 f98c 	bl	800cbc4 <HAL_UART_DeInit>
	huart_gnss->Instance = UART5;
 80048ac:	4b16      	ldr	r3, [pc, #88]	@ (8004908 <set_baud_rate+0xe0>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a16      	ldr	r2, [pc, #88]	@ (800490c <set_baud_rate+0xe4>)
 80048b2:	601a      	str	r2, [r3, #0]
	huart_gnss->Init.BaudRate = baud_rate;
 80048b4:	4b14      	ldr	r3, [pc, #80]	@ (8004908 <set_baud_rate+0xe0>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	605a      	str	r2, [r3, #4]
	huart_gnss->Init.WordLength = UART_WORDLENGTH_8B;
 80048bc:	4b12      	ldr	r3, [pc, #72]	@ (8004908 <set_baud_rate+0xe0>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2200      	movs	r2, #0
 80048c2:	609a      	str	r2, [r3, #8]
	huart_gnss->Init.StopBits = UART_STOPBITS_1;
 80048c4:	4b10      	ldr	r3, [pc, #64]	@ (8004908 <set_baud_rate+0xe0>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2200      	movs	r2, #0
 80048ca:	60da      	str	r2, [r3, #12]
	huart_gnss->Init.Parity = UART_PARITY_NONE;
 80048cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004908 <set_baud_rate+0xe0>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2200      	movs	r2, #0
 80048d2:	611a      	str	r2, [r3, #16]
	huart_gnss->Init.Mode = UART_MODE_TX_RX;
 80048d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004908 <set_baud_rate+0xe0>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	220c      	movs	r2, #12
 80048da:	615a      	str	r2, [r3, #20]
	huart_gnss->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004908 <set_baud_rate+0xe0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2200      	movs	r2, #0
 80048e2:	619a      	str	r2, [r3, #24]
	huart_gnss->Init.OverSampling = UART_OVERSAMPLING_16;
 80048e4:	4b08      	ldr	r3, [pc, #32]	@ (8004908 <set_baud_rate+0xe0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2200      	movs	r2, #0
 80048ea:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(huart_gnss);
 80048ec:	4b06      	ldr	r3, [pc, #24]	@ (8004908 <set_baud_rate+0xe0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f008 f917 	bl	800cb24 <HAL_UART_Init>
}
 80048f6:	bf00      	nop
 80048f8:	3744      	adds	r7, #68	@ 0x44
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd90      	pop	{r4, r7, pc}
 80048fe:	bf00      	nop
 8004900:	080159ec 	.word	0x080159ec
 8004904:	080159f8 	.word	0x080159f8
 8004908:	2000026c 	.word	0x2000026c
 800490c:	40005000 	.word	0x40005000

08004910 <calculate_checksum>:

static uint8_t calculate_checksum(const char *data)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
    uint8_t check_sum = 0;
 8004918:	2300      	movs	r3, #0
 800491a:	73fb      	strb	r3, [r7, #15]
    int i = 0;
 800491c:	2300      	movs	r3, #0
 800491e:	60bb      	str	r3, [r7, #8]
	while(data[i] != '\0')
 8004920:	e009      	b.n	8004936 <calculate_checksum+0x26>
	{
        check_sum ^= data[i];
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	4413      	add	r3, r2
 8004928:	781a      	ldrb	r2, [r3, #0]
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	4053      	eors	r3, r2
 800492e:	73fb      	strb	r3, [r7, #15]
        i++;
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	3301      	adds	r3, #1
 8004934:	60bb      	str	r3, [r7, #8]
	while(data[i] != '\0')
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	4413      	add	r3, r2
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1ef      	bne.n	8004922 <calculate_checksum+0x12>
	}
	return check_sum;
 8004942:	7bfb      	ldrb	r3, [r7, #15]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <process_data>:

static void process_data(char *rx_buffer, uint16_t buffer_size)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	460b      	mov	r3, r1
 800495a:	807b      	strh	r3, [r7, #2]
	memcpy(gps_buffer, rx_buffer, buffer_size);
 800495c:	887b      	ldrh	r3, [r7, #2]
 800495e:	461a      	mov	r2, r3
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	4803      	ldr	r0, [pc, #12]	@ (8004970 <process_data+0x20>)
 8004964:	f00b fc38 	bl	80101d8 <memcpy>
}
 8004968:	bf00      	nop
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20000bd0 	.word	0x20000bd0

08004974 <get_GNRMC_data>:

static void get_GNRMC_data(gps_data_t *gps_data_)
{
 8004974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004976:	b08d      	sub	sp, #52	@ 0x34
 8004978:	af08      	add	r7, sp, #32
 800497a:	60f8      	str	r0, [r7, #12]
	gps_GNRMC_start_point = strstr(gps_buffer, "GNRMC");
 800497c:	4937      	ldr	r1, [pc, #220]	@ (8004a5c <get_GNRMC_data+0xe8>)
 800497e:	4838      	ldr	r0, [pc, #224]	@ (8004a60 <get_GNRMC_data+0xec>)
 8004980:	f00b fb8c 	bl	801009c <strstr>
 8004984:	4603      	mov	r3, r0
 8004986:	4a37      	ldr	r2, [pc, #220]	@ (8004a64 <get_GNRMC_data+0xf0>)
 8004988:	6013      	str	r3, [r2, #0]

	if(gps_GNRMC_start_point != NULL && *(gps_GNRMC_start_point + 17) == VALID)
 800498a:	4b36      	ldr	r3, [pc, #216]	@ (8004a64 <get_GNRMC_data+0xf0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d009      	beq.n	80049a6 <get_GNRMC_data+0x32>
 8004992:	4b34      	ldr	r3, [pc, #208]	@ (8004a64 <get_GNRMC_data+0xf0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3311      	adds	r3, #17
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	2b41      	cmp	r3, #65	@ 0x41
 800499c:	d103      	bne.n	80049a6 <get_GNRMC_data+0x32>
	{
		is_data_valid = 1;
 800499e:	4b32      	ldr	r3, [pc, #200]	@ (8004a68 <get_GNRMC_data+0xf4>)
 80049a0:	2201      	movs	r2, #1
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	e005      	b.n	80049b2 <get_GNRMC_data+0x3e>
	}
	else
	{
		is_data_valid = 0;
 80049a6:	4b30      	ldr	r3, [pc, #192]	@ (8004a68 <get_GNRMC_data+0xf4>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	701a      	strb	r2, [r3, #0]
		gps_data_->is_valid = INVALID;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2256      	movs	r2, #86	@ 0x56
 80049b0:	711a      	strb	r2, [r3, #4]
	}

	if(is_data_valid == 1)
 80049b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004a68 <get_GNRMC_data+0xf4>)
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d148      	bne.n	8004a4c <get_GNRMC_data+0xd8>
	{
		memset(current_data, 0, DATA_SIZE);
 80049ba:	2278      	movs	r2, #120	@ 0x78
 80049bc:	2100      	movs	r1, #0
 80049be:	482b      	ldr	r0, [pc, #172]	@ (8004a6c <get_GNRMC_data+0xf8>)
 80049c0:	f00b fb52 	bl	8010068 <memset>
		counter = 0;
 80049c4:	4b2a      	ldr	r3, [pc, #168]	@ (8004a70 <get_GNRMC_data+0xfc>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	701a      	strb	r2, [r3, #0]
		current_char = gps_GNRMC_start_point;
 80049ca:	4b26      	ldr	r3, [pc, #152]	@ (8004a64 <get_GNRMC_data+0xf0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a29      	ldr	r2, [pc, #164]	@ (8004a74 <get_GNRMC_data+0x100>)
 80049d0:	6013      	str	r3, [r2, #0]
		while(*current_char != '*')
 80049d2:	e011      	b.n	80049f8 <get_GNRMC_data+0x84>
		{
			current_data[counter] = *current_char;
 80049d4:	4b27      	ldr	r3, [pc, #156]	@ (8004a74 <get_GNRMC_data+0x100>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a25      	ldr	r2, [pc, #148]	@ (8004a70 <get_GNRMC_data+0xfc>)
 80049da:	7812      	ldrb	r2, [r2, #0]
 80049dc:	7819      	ldrb	r1, [r3, #0]
 80049de:	4b23      	ldr	r3, [pc, #140]	@ (8004a6c <get_GNRMC_data+0xf8>)
 80049e0:	5499      	strb	r1, [r3, r2]
			counter++;
 80049e2:	4b23      	ldr	r3, [pc, #140]	@ (8004a70 <get_GNRMC_data+0xfc>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	3301      	adds	r3, #1
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	4b21      	ldr	r3, [pc, #132]	@ (8004a70 <get_GNRMC_data+0xfc>)
 80049ec:	701a      	strb	r2, [r3, #0]
			current_char++;
 80049ee:	4b21      	ldr	r3, [pc, #132]	@ (8004a74 <get_GNRMC_data+0x100>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3301      	adds	r3, #1
 80049f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004a74 <get_GNRMC_data+0x100>)
 80049f6:	6013      	str	r3, [r2, #0]
		while(*current_char != '*')
 80049f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004a74 <get_GNRMC_data+0x100>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a00:	d1e8      	bne.n	80049d4 <get_GNRMC_data+0x60>
		}

		sscanf(current_data, "GNRMC,%f,%c,%f,%c,%f,%c,%f,%f,%lu,,,%c",
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	60bb      	str	r3, [r7, #8]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f103 0c04 	add.w	ip, r3, #4
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3308      	adds	r3, #8
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	320c      	adds	r2, #12
 8004a14:	68f9      	ldr	r1, [r7, #12]
 8004a16:	3110      	adds	r1, #16
 8004a18:	6079      	str	r1, [r7, #4]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	3014      	adds	r0, #20
 8004a1e:	68fc      	ldr	r4, [r7, #12]
 8004a20:	3418      	adds	r4, #24
 8004a22:	68fd      	ldr	r5, [r7, #12]
 8004a24:	351c      	adds	r5, #28
 8004a26:	68fe      	ldr	r6, [r7, #12]
 8004a28:	3620      	adds	r6, #32
 8004a2a:	68f9      	ldr	r1, [r7, #12]
 8004a2c:	3124      	adds	r1, #36	@ 0x24
 8004a2e:	9107      	str	r1, [sp, #28]
 8004a30:	9606      	str	r6, [sp, #24]
 8004a32:	9505      	str	r5, [sp, #20]
 8004a34:	9404      	str	r4, [sp, #16]
 8004a36:	9003      	str	r0, [sp, #12]
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	9102      	str	r1, [sp, #8]
 8004a3c:	9201      	str	r2, [sp, #4]
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	4663      	mov	r3, ip
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	490c      	ldr	r1, [pc, #48]	@ (8004a78 <get_GNRMC_data+0x104>)
 8004a46:	4809      	ldr	r0, [pc, #36]	@ (8004a6c <get_GNRMC_data+0xf8>)
 8004a48:	f00a fb46 	bl	800f0d8 <siscanf>
				&gps_data_->non_fixed_time, &gps_data_->is_valid, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
				&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->speed_over_ground, &gps_data_->course_over_ground,
				&gps_data_->non_fixed_date ,&gps_data_->positioning_mode);
	}

	gps_GNRMC_start_point = NULL;
 8004a4c:	4b05      	ldr	r3, [pc, #20]	@ (8004a64 <get_GNRMC_data+0xf0>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
}
 8004a52:	bf00      	nop
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	08015a0c 	.word	0x08015a0c
 8004a60:	20000bd0 	.word	0x20000bd0
 8004a64:	20001080 	.word	0x20001080
 8004a68:	20001088 	.word	0x20001088
 8004a6c:	20001090 	.word	0x20001090
 8004a70:	20001108 	.word	0x20001108
 8004a74:	2000108c 	.word	0x2000108c
 8004a78:	08015a14 	.word	0x08015a14

08004a7c <get_GPGGA_data>:

static void get_GPGGA_data(gps_data_t *gps_data_)
{
 8004a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a7e:	b08d      	sub	sp, #52	@ 0x34
 8004a80:	af08      	add	r7, sp, #32
 8004a82:	60f8      	str	r0, [r7, #12]
	gps_GPGGA_start_point = strstr(gps_buffer, "GPGGA");
 8004a84:	492f      	ldr	r1, [pc, #188]	@ (8004b44 <get_GPGGA_data+0xc8>)
 8004a86:	4830      	ldr	r0, [pc, #192]	@ (8004b48 <get_GPGGA_data+0xcc>)
 8004a88:	f00b fb08 	bl	801009c <strstr>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	4a2f      	ldr	r2, [pc, #188]	@ (8004b4c <get_GPGGA_data+0xd0>)
 8004a90:	6013      	str	r3, [r2, #0]

	if(gps_GPGGA_start_point != NULL)
 8004a92:	4b2e      	ldr	r3, [pc, #184]	@ (8004b4c <get_GPGGA_data+0xd0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d04f      	beq.n	8004b3a <get_GPGGA_data+0xbe>
	{
		if(gps_data_->is_valid == VALID)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	791b      	ldrb	r3, [r3, #4]
 8004a9e:	2b41      	cmp	r3, #65	@ 0x41
 8004aa0:	d148      	bne.n	8004b34 <get_GPGGA_data+0xb8>
		{
			memset(current_data, 0, DATA_SIZE);
 8004aa2:	2278      	movs	r2, #120	@ 0x78
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	482a      	ldr	r0, [pc, #168]	@ (8004b50 <get_GPGGA_data+0xd4>)
 8004aa8:	f00b fade 	bl	8010068 <memset>
			counter = 0;
 8004aac:	4b29      	ldr	r3, [pc, #164]	@ (8004b54 <get_GPGGA_data+0xd8>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	701a      	strb	r2, [r3, #0]
			current_char = gps_GPGGA_start_point;
 8004ab2:	4b26      	ldr	r3, [pc, #152]	@ (8004b4c <get_GPGGA_data+0xd0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a28      	ldr	r2, [pc, #160]	@ (8004b58 <get_GPGGA_data+0xdc>)
 8004ab8:	6013      	str	r3, [r2, #0]
			while(*(current_char) != '*')
 8004aba:	e011      	b.n	8004ae0 <get_GPGGA_data+0x64>
			{
				current_data[counter] = *current_char;
 8004abc:	4b26      	ldr	r3, [pc, #152]	@ (8004b58 <get_GPGGA_data+0xdc>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a24      	ldr	r2, [pc, #144]	@ (8004b54 <get_GPGGA_data+0xd8>)
 8004ac2:	7812      	ldrb	r2, [r2, #0]
 8004ac4:	7819      	ldrb	r1, [r3, #0]
 8004ac6:	4b22      	ldr	r3, [pc, #136]	@ (8004b50 <get_GPGGA_data+0xd4>)
 8004ac8:	5499      	strb	r1, [r3, r2]
				counter++;
 8004aca:	4b22      	ldr	r3, [pc, #136]	@ (8004b54 <get_GPGGA_data+0xd8>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	4b20      	ldr	r3, [pc, #128]	@ (8004b54 <get_GPGGA_data+0xd8>)
 8004ad4:	701a      	strb	r2, [r3, #0]
				current_char++;
 8004ad6:	4b20      	ldr	r3, [pc, #128]	@ (8004b58 <get_GPGGA_data+0xdc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3301      	adds	r3, #1
 8004adc:	4a1e      	ldr	r2, [pc, #120]	@ (8004b58 <get_GPGGA_data+0xdc>)
 8004ade:	6013      	str	r3, [r2, #0]
			while(*(current_char) != '*')
 8004ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b58 <get_GPGGA_data+0xdc>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ae8:	d1e8      	bne.n	8004abc <get_GPGGA_data+0x40>
			}

			sscanf(current_data, "GPGGA,%f,%f,%c,%f,%c,%u,%u,%f,%f,M,%f,M,,",
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	60bb      	str	r3, [r7, #8]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f103 0c08 	add.w	ip, r3, #8
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	330c      	adds	r3, #12
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	3210      	adds	r2, #16
 8004afc:	68f9      	ldr	r1, [r7, #12]
 8004afe:	3114      	adds	r1, #20
 8004b00:	6079      	str	r1, [r7, #4]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	3025      	adds	r0, #37	@ 0x25
 8004b06:	68fc      	ldr	r4, [r7, #12]
 8004b08:	3426      	adds	r4, #38	@ 0x26
 8004b0a:	68fd      	ldr	r5, [r7, #12]
 8004b0c:	3528      	adds	r5, #40	@ 0x28
 8004b0e:	68fe      	ldr	r6, [r7, #12]
 8004b10:	362c      	adds	r6, #44	@ 0x2c
 8004b12:	68f9      	ldr	r1, [r7, #12]
 8004b14:	3130      	adds	r1, #48	@ 0x30
 8004b16:	9107      	str	r1, [sp, #28]
 8004b18:	9606      	str	r6, [sp, #24]
 8004b1a:	9505      	str	r5, [sp, #20]
 8004b1c:	9404      	str	r4, [sp, #16]
 8004b1e:	9003      	str	r0, [sp, #12]
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	9102      	str	r1, [sp, #8]
 8004b24:	9201      	str	r2, [sp, #4]
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	4663      	mov	r3, ip
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	490b      	ldr	r1, [pc, #44]	@ (8004b5c <get_GPGGA_data+0xe0>)
 8004b2e:	4808      	ldr	r0, [pc, #32]	@ (8004b50 <get_GPGGA_data+0xd4>)
 8004b30:	f00a fad2 	bl	800f0d8 <siscanf>
					&gps_data_->non_fixed_time, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
					&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->fix_status, &gps_data_->satellites_in_use,
					&gps_data_->HDOP, &gps_data_->altitude, &gps_data_->geoid_height);
		}

		gps_GPGGA_start_point = NULL;
 8004b34:	4b05      	ldr	r3, [pc, #20]	@ (8004b4c <get_GPGGA_data+0xd0>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
	}
}
 8004b3a:	bf00      	nop
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b42:	bf00      	nop
 8004b44:	08015a3c 	.word	0x08015a3c
 8004b48:	20000bd0 	.word	0x20000bd0
 8004b4c:	20001084 	.word	0x20001084
 8004b50:	20001090 	.word	0x20001090
 8004b54:	20001108 	.word	0x20001108
 8004b58:	2000108c 	.word	0x2000108c
 8004b5c:	08015a44 	.word	0x08015a44

08004b60 <format_data>:

static void format_data(gps_data_t *gps_data_)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
	if(gps_data_->is_valid == VALID)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	791b      	ldrb	r3, [r3, #4]
 8004b6c:	2b41      	cmp	r3, #65	@ 0x41
 8004b6e:	f040 8154 	bne.w	8004e1a <format_data+0x2ba>
	{
		// format latitude
		non_formatted_latitude = gps_data_->non_fixed_latitude;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	4aab      	ldr	r2, [pc, #684]	@ (8004e24 <format_data+0x2c4>)
 8004b78:	6013      	str	r3, [r2, #0]
		gps_data_->latitude = (float)floor(non_formatted_latitude / 100);
 8004b7a:	4baa      	ldr	r3, [pc, #680]	@ (8004e24 <format_data+0x2c4>)
 8004b7c:	edd3 7a00 	vldr	s15, [r3]
 8004b80:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8004e28 <format_data+0x2c8>
 8004b84:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004b88:	ee16 0a90 	vmov	r0, s13
 8004b8c:	f7fb fcfc 	bl	8000588 <__aeabi_f2d>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	ec43 2b10 	vmov	d0, r2, r3
 8004b98:	f00e ffe6 	bl	8013b68 <floor>
 8004b9c:	ec53 2b10 	vmov	r2, r3, d0
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	f7fc f840 	bl	8000c28 <__aeabi_d2f>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	635a      	str	r2, [r3, #52]	@ 0x34
		non_formatted_latitude -= gps_data_->latitude * 100;
 8004bae:	4b9d      	ldr	r3, [pc, #628]	@ (8004e24 <format_data+0x2c4>)
 8004bb0:	ed93 7a00 	vldr	s14, [r3]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004bba:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8004e28 <format_data+0x2c8>
 8004bbe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bc6:	4b97      	ldr	r3, [pc, #604]	@ (8004e24 <format_data+0x2c4>)
 8004bc8:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_latitude /= 60;
 8004bcc:	4b95      	ldr	r3, [pc, #596]	@ (8004e24 <format_data+0x2c4>)
 8004bce:	ed93 7a00 	vldr	s14, [r3]
 8004bd2:	eddf 6a96 	vldr	s13, [pc, #600]	@ 8004e2c <format_data+0x2cc>
 8004bd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bda:	4b92      	ldr	r3, [pc, #584]	@ (8004e24 <format_data+0x2c4>)
 8004bdc:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->latitude += non_formatted_latitude;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8004be6:	4b8f      	ldr	r3, [pc, #572]	@ (8004e24 <format_data+0x2c4>)
 8004be8:	edd3 7a00 	vldr	s15, [r3]
 8004bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

		// format langitude
		non_formatted_longitude = gps_data_->non_fixed_longitude;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	4a8d      	ldr	r2, [pc, #564]	@ (8004e30 <format_data+0x2d0>)
 8004bfc:	6013      	str	r3, [r2, #0]
		gps_data_->longitude = (float)floor(non_formatted_longitude / 100);
 8004bfe:	4b8c      	ldr	r3, [pc, #560]	@ (8004e30 <format_data+0x2d0>)
 8004c00:	edd3 7a00 	vldr	s15, [r3]
 8004c04:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8004e28 <format_data+0x2c8>
 8004c08:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004c0c:	ee16 0a90 	vmov	r0, s13
 8004c10:	f7fb fcba 	bl	8000588 <__aeabi_f2d>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	ec43 2b10 	vmov	d0, r2, r3
 8004c1c:	f00e ffa4 	bl	8013b68 <floor>
 8004c20:	ec53 2b10 	vmov	r2, r3, d0
 8004c24:	4610      	mov	r0, r2
 8004c26:	4619      	mov	r1, r3
 8004c28:	f7fb fffe 	bl	8000c28 <__aeabi_d2f>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	639a      	str	r2, [r3, #56]	@ 0x38
		non_formatted_longitude -= gps_data_->longitude * 100;
 8004c32:	4b7f      	ldr	r3, [pc, #508]	@ (8004e30 <format_data+0x2d0>)
 8004c34:	ed93 7a00 	vldr	s14, [r3]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004c3e:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8004e28 <format_data+0x2c8>
 8004c42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c4a:	4b79      	ldr	r3, [pc, #484]	@ (8004e30 <format_data+0x2d0>)
 8004c4c:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_longitude /= 60;
 8004c50:	4b77      	ldr	r3, [pc, #476]	@ (8004e30 <format_data+0x2d0>)
 8004c52:	ed93 7a00 	vldr	s14, [r3]
 8004c56:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8004e2c <format_data+0x2cc>
 8004c5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c5e:	4b74      	ldr	r3, [pc, #464]	@ (8004e30 <format_data+0x2d0>)
 8004c60:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->longitude += non_formatted_longitude;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004c6a:	4b71      	ldr	r3, [pc, #452]	@ (8004e30 <format_data+0x2d0>)
 8004c6c:	edd3 7a00 	vldr	s15, [r3]
 8004c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

		// format time
		non_formatted_time = gps_data_->non_fixed_time;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a6d      	ldr	r2, [pc, #436]	@ (8004e34 <format_data+0x2d4>)
 8004c80:	6013      	str	r3, [r2, #0]
		gps_data_->time[0] = (uint8_t)floor(non_formatted_time / 10000);
 8004c82:	4b6c      	ldr	r3, [pc, #432]	@ (8004e34 <format_data+0x2d4>)
 8004c84:	edd3 7a00 	vldr	s15, [r3]
 8004c88:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8004e38 <format_data+0x2d8>
 8004c8c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004c90:	ee16 0a90 	vmov	r0, s13
 8004c94:	f7fb fc78 	bl	8000588 <__aeabi_f2d>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	ec43 2b10 	vmov	d0, r2, r3
 8004ca0:	f00e ff62 	bl	8013b68 <floor>
 8004ca4:	ec53 2b10 	vmov	r2, r3, d0
 8004ca8:	4610      	mov	r0, r2
 8004caa:	4619      	mov	r1, r3
 8004cac:	f7fb ff9c 	bl	8000be8 <__aeabi_d2uiz>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		non_formatted_time -= gps_data_->time[0] * 10000;
 8004cba:	4b5e      	ldr	r3, [pc, #376]	@ (8004e34 <format_data+0x2d4>)
 8004cbc:	ed93 7a00 	vldr	s14, [r3]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004ccc:	fb02 f303 	mul.w	r3, r2, r3
 8004cd0:	ee07 3a90 	vmov	s15, r3
 8004cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cdc:	4b55      	ldr	r3, [pc, #340]	@ (8004e34 <format_data+0x2d4>)
 8004cde:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[0] += 3;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ce8:	3303      	adds	r3, #3
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		if(gps_data_->time[0] >= 24)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cf8:	2b17      	cmp	r3, #23
 8004cfa:	d907      	bls.n	8004d0c <format_data+0x1ac>
		{
			gps_data_->time[0] -= 24;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d02:	3b18      	subs	r3, #24
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		}
		gps_data_->time[1] = (uint8_t)floor(non_formatted_time / 100);
 8004d0c:	4b49      	ldr	r3, [pc, #292]	@ (8004e34 <format_data+0x2d4>)
 8004d0e:	edd3 7a00 	vldr	s15, [r3]
 8004d12:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8004e28 <format_data+0x2c8>
 8004d16:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004d1a:	ee16 0a90 	vmov	r0, s13
 8004d1e:	f7fb fc33 	bl	8000588 <__aeabi_f2d>
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	ec43 2b10 	vmov	d0, r2, r3
 8004d2a:	f00e ff1d 	bl	8013b68 <floor>
 8004d2e:	ec53 2b10 	vmov	r2, r3, d0
 8004d32:	4610      	mov	r0, r2
 8004d34:	4619      	mov	r1, r3
 8004d36:	f7fb ff57 	bl	8000be8 <__aeabi_d2uiz>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		non_formatted_time-= gps_data_->time[1] * 100;
 8004d44:	4b3b      	ldr	r3, [pc, #236]	@ (8004e34 <format_data+0x2d4>)
 8004d46:	ed93 7a00 	vldr	s14, [r3]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d50:	461a      	mov	r2, r3
 8004d52:	2364      	movs	r3, #100	@ 0x64
 8004d54:	fb02 f303 	mul.w	r3, r2, r3
 8004d58:	ee07 3a90 	vmov	s15, r3
 8004d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d64:	4b33      	ldr	r3, [pc, #204]	@ (8004e34 <format_data+0x2d4>)
 8004d66:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[2] = (uint8_t)floor(non_formatted_time);
 8004d6a:	4b32      	ldr	r3, [pc, #200]	@ (8004e34 <format_data+0x2d4>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fb fc0a 	bl	8000588 <__aeabi_f2d>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	ec43 2b10 	vmov	d0, r2, r3
 8004d7c:	f00e fef4 	bl	8013b68 <floor>
 8004d80:	ec53 2b10 	vmov	r2, r3, d0
 8004d84:	4610      	mov	r0, r2
 8004d86:	4619      	mov	r1, r3
 8004d88:	f7fb ff2e 	bl	8000be8 <__aeabi_d2uiz>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

		// format date
		non_formatted_date = gps_data_->non_fixed_date;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	4a28      	ldr	r2, [pc, #160]	@ (8004e3c <format_data+0x2dc>)
 8004d9c:	6013      	str	r3, [r2, #0]
		gps_data_->date[0] = (uint8_t)(non_formatted_date / 10000);
 8004d9e:	4b27      	ldr	r3, [pc, #156]	@ (8004e3c <format_data+0x2dc>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a27      	ldr	r2, [pc, #156]	@ (8004e40 <format_data+0x2e0>)
 8004da4:	fba2 2303 	umull	r2, r3, r2, r3
 8004da8:	0b5b      	lsrs	r3, r3, #13
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
		non_formatted_date -= gps_data_->date[0] * 10000;
 8004db2:	4b22      	ldr	r3, [pc, #136]	@ (8004e3c <format_data+0x2dc>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004dc2:	fb01 f202 	mul.w	r2, r1, r2
 8004dc6:	1a9b      	subs	r3, r3, r2
 8004dc8:	4a1c      	ldr	r2, [pc, #112]	@ (8004e3c <format_data+0x2dc>)
 8004dca:	6013      	str	r3, [r2, #0]
		gps_data_->date[1] = (uint8_t)(non_formatted_date / 100);
 8004dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8004e3c <format_data+0x2dc>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8004e44 <format_data+0x2e4>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		non_formatted_date -= gps_data_->date[1] * 100;
 8004de0:	4b16      	ldr	r3, [pc, #88]	@ (8004e3c <format_data+0x2dc>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8004dea:	4611      	mov	r1, r2
 8004dec:	2264      	movs	r2, #100	@ 0x64
 8004dee:	fb01 f202 	mul.w	r2, r1, r2
 8004df2:	1a9b      	subs	r3, r3, r2
 8004df4:	4a11      	ldr	r2, [pc, #68]	@ (8004e3c <format_data+0x2dc>)
 8004df6:	6013      	str	r3, [r2, #0]
		gps_data_->date[2] = (uint8_t)(non_formatted_date);
 8004df8:	4b10      	ldr	r3, [pc, #64]	@ (8004e3c <format_data+0x2dc>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

		// format height
		gps_data_->orthometric_height = gps_data_->altitude - gps_data_->geoid_height;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	}
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	2000110c 	.word	0x2000110c
 8004e28:	42c80000 	.word	0x42c80000
 8004e2c:	42700000 	.word	0x42700000
 8004e30:	20001110 	.word	0x20001110
 8004e34:	20001114 	.word	0x20001114
 8004e38:	461c4000 	.word	0x461c4000
 8004e3c:	20001118 	.word	0x20001118
 8004e40:	d1b71759 	.word	0xd1b71759
 8004e44:	51eb851f 	.word	0x51eb851f

08004e48 <send_command>:
#include "lora.h"
#include "main.h"



static void send_command(uint8_t header, uint8_t addresses, uint8_t dataLength, uint8_t *data) {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	603b      	str	r3, [r7, #0]
 8004e50:	4603      	mov	r3, r0
 8004e52:	71fb      	strb	r3, [r7, #7]
 8004e54:	460b      	mov	r3, r1
 8004e56:	71bb      	strb	r3, [r7, #6]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	717b      	strb	r3, [r7, #5]
    uint8_t command[12];
    command[0] = header;
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	723b      	strb	r3, [r7, #8]
    command[1] = addresses;
 8004e60:	79bb      	ldrb	r3, [r7, #6]
 8004e62:	727b      	strb	r3, [r7, #9]
    command[2] = dataLength;
 8004e64:	797b      	ldrb	r3, [r7, #5]
 8004e66:	72bb      	strb	r3, [r7, #10]
    for (int i = 0; i < 9; i++) {
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	e00c      	b.n	8004e88 <send_command+0x40>
        command[3 + i] = data[i];
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	441a      	add	r2, r3
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	3303      	adds	r3, #3
 8004e78:	7812      	ldrb	r2, [r2, #0]
 8004e7a:	3318      	adds	r3, #24
 8004e7c:	443b      	add	r3, r7
 8004e7e:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < 9; i++) {
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	3301      	adds	r3, #1
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	ddef      	ble.n	8004e6e <send_command+0x26>
    }

    HAL_UART_Transmit(&huart2, command, 12, 100);
 8004e8e:	f107 0108 	add.w	r1, r7, #8
 8004e92:	2364      	movs	r3, #100	@ 0x64
 8004e94:	220c      	movs	r2, #12
 8004e96:	4803      	ldr	r0, [pc, #12]	@ (8004ea4 <send_command+0x5c>)
 8004e98:	f007 fec6 	bl	800cc28 <HAL_UART_Transmit>
}
 8004e9c:	bf00      	nop
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	20001434 	.word	0x20001434

08004ea8 <lora_activate>:

void lora_activate()
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, RESET);
 8004eac:	2200      	movs	r2, #0
 8004eae:	2101      	movs	r1, #1
 8004eb0:	4804      	ldr	r0, [pc, #16]	@ (8004ec4 <lora_activate+0x1c>)
 8004eb2:	f005 fb59 	bl	800a568 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, RESET);
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2102      	movs	r1, #2
 8004eba:	4802      	ldr	r0, [pc, #8]	@ (8004ec4 <lora_activate+0x1c>)
 8004ebc:	f005 fb54 	bl	800a568 <HAL_GPIO_WritePin>
}
 8004ec0:	bf00      	nop
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40020000 	.word	0x40020000

08004ec8 <lora_deactivate>:

void lora_deactivate()
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, SET);
 8004ecc:	2201      	movs	r2, #1
 8004ece:	2101      	movs	r1, #1
 8004ed0:	4804      	ldr	r0, [pc, #16]	@ (8004ee4 <lora_deactivate+0x1c>)
 8004ed2:	f005 fb49 	bl	800a568 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, SET);
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	2102      	movs	r1, #2
 8004eda:	4802      	ldr	r0, [pc, #8]	@ (8004ee4 <lora_deactivate+0x1c>)
 8004edc:	f005 fb44 	bl	800a568 <HAL_GPIO_WritePin>
}
 8004ee0:	bf00      	nop
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40020000 	.word	0x40020000

08004ee8 <lora_configure>:

void lora_configure(lorastruct *config)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
	uint8_t data[9];

    //default values of lora
    config->netId = (uint8_t) 0x00;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	725a      	strb	r2, [r3, #9]
    config->serialParity = LORA_PARITY_8N1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	745a      	strb	r2, [r3, #17]
    config->ambientNoise = LORA_RSSI_AMBIENT_NOISE_DISABLE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	729a      	strb	r2, [r3, #10]
    config->RSSI = LORA_RSSI_DISABLE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	72da      	strb	r2, [r3, #11]
    config->transmissonMode = LORA_TRANSMISSION_TRANSPARENT;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	731a      	strb	r2, [r3, #12]
    config->repeater = LORA_REPEATER_DISABLE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	735a      	strb	r2, [r3, #13]
    config->LBT = LORA_LBT_DISABLE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	739a      	strb	r2, [r3, #14]
    config->worMode = LORA_WOR_TRANSMITTER;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2208      	movs	r2, #8
 8004f1e:	73da      	strb	r2, [r3, #15]
    config->worCycle = LORA_WOR_4000;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2207      	movs	r2, #7
 8004f24:	741a      	strb	r2, [r3, #16]

    // Lora address
    data[0] = config->loraAddress.address8[1];
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	79db      	ldrb	r3, [r3, #7]
 8004f2a:	733b      	strb	r3, [r7, #12]
    data[1] = config->loraAddress.address8[0];
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	799b      	ldrb	r3, [r3, #6]
 8004f30:	737b      	strb	r3, [r7, #13]

    // Lora netid
    data[2] = config->netId;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	7a5b      	ldrb	r3, [r3, #9]
 8004f36:	73bb      	strb	r3, [r7, #14]

    // Lora baud rate, parite, air rate
    data[3] = config->baudRate | config->serialParity | config->airRate;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	781a      	ldrb	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	7c5b      	ldrb	r3, [r3, #17]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	785b      	ldrb	r3, [r3, #1]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	73fb      	strb	r3, [r7, #15]

    // packet size, ambient noise, reserve ve power
    data[4] = config->packetSize | config->ambientNoise | LORA_STATUS_LOG_DISABLE | config->power;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	789a      	ldrb	r2, [r3, #2]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	7a9b      	ldrb	r3, [r3, #10]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	78db      	ldrb	r3, [r3, #3]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	743b      	strb	r3, [r7, #16]

    // channel
    //frequency range restriction
    if(config->channel > 83)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	7a1b      	ldrb	r3, [r3, #8]
 8004f68:	2b53      	cmp	r3, #83	@ 0x53
 8004f6a:	d902      	bls.n	8004f72 <lora_configure+0x8a>
    	config->channel = 83;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2253      	movs	r2, #83	@ 0x53
 8004f70:	721a      	strb	r2, [r3, #8]
    else if(config->channel < 0)
    	config->channel = 0;

    data[5] = config->channel;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	7a1b      	ldrb	r3, [r3, #8]
 8004f76:	747b      	strb	r3, [r7, #17]

    // RSSI, transmission mode, repeater, LBT, worTransceiver ve worCycle
    data[6] = config->RSSI | config->transmissonMode | config->repeater | config->LBT | config->worMode | config->worCycle;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	7ada      	ldrb	r2, [r3, #11]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	7b1b      	ldrb	r3, [r3, #12]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	7b5b      	ldrb	r3, [r3, #13]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	7b9b      	ldrb	r3, [r3, #14]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	7bdb      	ldrb	r3, [r3, #15]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	7c1b      	ldrb	r3, [r3, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	74bb      	strb	r3, [r7, #18]

    // key
    data[7] = config->loraKey.key8[1];
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	795b      	ldrb	r3, [r3, #5]
 8004faa:	74fb      	strb	r3, [r7, #19]
    data[8] = config->loraKey.key8[0];
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	791b      	ldrb	r3, [r3, #4]
 8004fb0:	753b      	strb	r3, [r7, #20]


    send_command(0xC0, 0x00, 0x09, data);
 8004fb2:	f107 030c 	add.w	r3, r7, #12
 8004fb6:	2209      	movs	r2, #9
 8004fb8:	2100      	movs	r1, #0
 8004fba:	20c0      	movs	r0, #192	@ 0xc0
 8004fbc:	f7ff ff44 	bl	8004e48 <send_command>
		}
	}
	else {
		int x =10;
	}*/
}
 8004fc0:	bf00      	nop
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004fce:	f003 fdcb 	bl	8008b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004fd2:	f000 f8db 	bl	800518c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004fd6:	f000 fb89 	bl	80056ec <MX_GPIO_Init>
  MX_DMA_Init();
 8004fda:	f000 fb39 	bl	8005650 <MX_DMA_Init>
  MX_I2C1_Init();
 8004fde:	f000 f9e5 	bl	80053ac <MX_I2C1_Init>
  MX_I2C3_Init();
 8004fe2:	f000 fa11 	bl	8005408 <MX_I2C3_Init>
  MX_TIM2_Init();
 8004fe6:	f000 fa3d 	bl	8005464 <MX_TIM2_Init>
  MX_UART5_Init();
 8004fea:	f000 fab3 	bl	8005554 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8004fee:	f000 fadb 	bl	80055a8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8004ff2:	f000 f937 	bl	8005264 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004ff6:	f000 f987 	bl	8005308 <MX_ADC2_Init>
  MX_UART4_Init();
 8004ffa:	f000 fa81 	bl	8005500 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8004ffe:	f000 fafd 	bl	80055fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	MX_TIM2_Init();
 8005002:	f000 fa2f 	bl	8005464 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8005006:	4850      	ldr	r0, [pc, #320]	@ (8005148 <main+0x180>)
 8005008:	f007 f96c 	bl	800c2e4 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800500c:	2200      	movs	r2, #0
 800500e:	2101      	movs	r1, #1
 8005010:	201c      	movs	r0, #28
 8005012:	f004 fb64 	bl	80096de <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005016:	201c      	movs	r0, #28
 8005018:	f004 fb7d 	bl	8009716 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 800501c:	2201      	movs	r2, #1
 800501e:	2100      	movs	r1, #0
 8005020:	2028      	movs	r0, #40	@ 0x28
 8005022:	f004 fb5c 	bl	80096de <HAL_NVIC_SetPriority>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buffer, 2);
 8005026:	2202      	movs	r2, #2
 8005028:	4948      	ldr	r1, [pc, #288]	@ (800514c <main+0x184>)
 800502a:	4849      	ldr	r0, [pc, #292]	@ (8005150 <main+0x188>)
 800502c:	f003 fe76 	bl	8008d1c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buffer, 2);
 8005030:	2202      	movs	r2, #2
 8005032:	4948      	ldr	r1, [pc, #288]	@ (8005154 <main+0x18c>)
 8005034:	4848      	ldr	r0, [pc, #288]	@ (8005158 <main+0x190>)
 8005036:	f003 fe71 	bl	8008d1c <HAL_ADC_Start_DMA>

	bme280_begin();
 800503a:	f000 fc3d 	bl	80058b8 <bme280_begin>
	HAL_Delay(1000);
 800503e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005042:	f003 fe03 	bl	8008c4c <HAL_Delay>
	bme280_config();
 8005046:	f7fc fa3d 	bl	80014c4 <bme280_config>

	bmi_imu_init();
 800504a:	f000 fc4d 	bl	80058e8 <bmi_imu_init>
    bmi088_config(&BMI_sensor);
 800504e:	4843      	ldr	r0, [pc, #268]	@ (800515c <main+0x194>)
 8005050:	f7fd f886 	bl	8002160 <bmi088_config>
    get_offset(&BMI_sensor);
 8005054:	4841      	ldr	r0, [pc, #260]	@ (800515c <main+0x194>)
 8005056:	f7fd fe79 	bl	8002d4c <get_offset>
	bme280_update();
 800505a:	f7fc fc01 	bl	8001860 <bme280_update>
    lora_deactivate();
 800505e:	f7ff ff33 	bl	8004ec8 <lora_deactivate>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005062:	2028      	movs	r0, #40	@ 0x28
 8005064:	f004 fb57 	bl	8009716 <HAL_NVIC_EnableIRQ>
	getInitialQuaternion();
 8005068:	f002 f9ea 	bl	8007440 <getInitialQuaternion>

	loraBegin();
 800506c:	f000 fd32 	bl	8005ad4 <loraBegin>
    lora_activate();
 8005070:	f7ff ff1a 	bl	8004ea8 <lora_activate>


	sensor_fusion_init(&BME280_sensor);
 8005074:	483a      	ldr	r0, [pc, #232]	@ (8005160 <main+0x198>)
 8005076:	f002 fc63 	bl	8007940 <sensor_fusion_init>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart4, usart4_rx_buffer, 36);
 800507a:	2224      	movs	r2, #36	@ 0x24
 800507c:	4939      	ldr	r1, [pc, #228]	@ (8005164 <main+0x19c>)
 800507e:	483a      	ldr	r0, [pc, #232]	@ (8005168 <main+0x1a0>)
 8005080:	f007 feff 	bl	800ce82 <HAL_UARTEx_ReceiveToIdle_DMA>
	flight_algorithm_set_parameters(10.0,2000.0,500.0,60.0);
 8005084:	eddf 1a39 	vldr	s3, [pc, #228]	@ 800516c <main+0x1a4>
 8005088:	ed9f 1a39 	vldr	s2, [pc, #228]	@ 8005170 <main+0x1a8>
 800508c:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8005174 <main+0x1ac>
 8005090:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8005094:	f7fe f87e 	bl	8003194 <flight_algorithm_set_parameters>


	uart_handler_init();
 8005098:	f003 fba4 	bl	80087e4 <uart_handler_init>
	flight_algorithm_init();
 800509c:	f7fd fec2 	bl	8002e24 <flight_algorithm_init>

	HAL_UART_Init(&huart5);
 80050a0:	4835      	ldr	r0, [pc, #212]	@ (8005178 <main+0x1b0>)
 80050a2:	f007 fd3f 	bl	800cb24 <HAL_UART_Init>
	HAL_DMA_Init(&hdma_uart5_rx);
 80050a6:	4835      	ldr	r0, [pc, #212]	@ (800517c <main+0x1b4>)
 80050a8:	f004 fb5e 	bl	8009768 <HAL_DMA_Init>
	L86_GNSS_Init(&huart5, BAUD_RATE_57600);
 80050ac:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 80050b0:	4831      	ldr	r0, [pc, #196]	@ (8005178 <main+0x1b0>)
 80050b2:	f7ff fb5f 	bl	8004774 <L86_GNSS_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  bmi088_update(&BMI_sensor);
 80050b6:	4829      	ldr	r0, [pc, #164]	@ (800515c <main+0x194>)
 80050b8:	f7fd fa52 	bl	8002560 <bmi088_update>
		  sensor_fusion_update_mahony(&BMI_sensor, &sensor_output);
 80050bc:	4930      	ldr	r1, [pc, #192]	@ (8005180 <main+0x1b8>)
 80050be:	4827      	ldr	r0, [pc, #156]	@ (800515c <main+0x194>)
 80050c0:	f002 fd44 	bl	8007b4c <sensor_fusion_update_mahony>
		  bme280_update();
 80050c4:	f7fc fbcc 	bl	8001860 <bme280_update>

		  // Process UART packets and handle mode changes
		  uart_handler_process_packets();
 80050c8:	f003 fba6 	bl	8008818 <uart_handler_process_packets>

		  // Clear command flag if it was set
		  if (uart_handler_command_ready()) {
 80050cc:	f003 fca2 	bl	8008a14 <uart_handler_command_ready>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d008      	beq.n	80050e8 <main+0x120>
			  uart_handler_clear_command_flag();
 80050d6:	f003 fccb 	bl	8008a70 <uart_handler_clear_command_flag>
			  // Reset flight algorithm if switching to NORMAL mode
			  if (uart_handler_get_mode() == MODE_NORMAL) {
 80050da:	f003 fc8f 	bl	80089fc <uart_handler_get_mode>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <main+0x120>
				  flight_algorithm_reset();
 80050e4:	f7fd fea4 	bl	8002e30 <flight_algorithm_reset>
			  }
		  }

		  if (tx_timer_flag) {
 80050e8:	4b26      	ldr	r3, [pc, #152]	@ (8005184 <main+0x1bc>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0e1      	beq.n	80050b6 <main+0xee>
			tx_timer_flag = 0;
 80050f2:	4b24      	ldr	r3, [pc, #144]	@ (8005184 <main+0x1bc>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]
			//read_ADC();
			L86_GNSS_Update(&gnss_data);
 80050f8:	4823      	ldr	r0, [pc, #140]	@ (8005188 <main+0x1c0>)
 80050fa:	f7ff fb83 	bl	8004804 <L86_GNSS_Update>
			HSD_StatusCheck();
 80050fe:	f000 fcb3 	bl	8005a68 <HSD_StatusCheck>
		    //IMU_visual();
			SystemMode_t current_mode = uart_handler_get_mode();
 8005102:	f003 fc7b 	bl	80089fc <uart_handler_get_mode>
 8005106:	4603      	mov	r3, r0
 8005108:	71fb      	strb	r3, [r7, #7]

				switch (current_mode) {
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	2b02      	cmp	r3, #2
 800510e:	d016      	beq.n	800513e <main+0x176>
 8005110:	2b02      	cmp	r3, #2
 8005112:	dcd0      	bgt.n	80050b6 <main+0xee>
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <main+0x156>
 8005118:	2b01      	cmp	r3, #1
 800511a:	d00b      	beq.n	8005134 <main+0x16c>
 800511c:	e012      	b.n	8005144 <main+0x17c>
					case MODE_NORMAL:
						sensor_fusion_update_kalman(&BME280_sensor, &BMI_sensor, &sensor_output);
 800511e:	4a18      	ldr	r2, [pc, #96]	@ (8005180 <main+0x1b8>)
 8005120:	490e      	ldr	r1, [pc, #56]	@ (800515c <main+0x194>)
 8005122:	480f      	ldr	r0, [pc, #60]	@ (8005160 <main+0x198>)
 8005124:	f002 fc60 	bl	80079e8 <sensor_fusion_update_kalman>
						flight_algorithm_update(&BME280_sensor, &BMI_sensor, &sensor_output);
 8005128:	4a15      	ldr	r2, [pc, #84]	@ (8005180 <main+0x1b8>)
 800512a:	490c      	ldr	r1, [pc, #48]	@ (800515c <main+0x194>)
 800512c:	480c      	ldr	r0, [pc, #48]	@ (8005160 <main+0x198>)
 800512e:	f7fd fecf 	bl	8002ed0 <flight_algorithm_update>
						//addDataPacketNormal(&BME280_sensor, &BMI_sensor);
				    	//HAL_UART_Transmit(&huart2, (uint8_t*)normal_paket, 59, 100);
						//uint16_t status_bits = flight_algorithm_get_status_bits();
						//uart_handler_send_status(status_bits);
						break;
 8005132:	e007      	b.n	8005144 <main+0x17c>

					case MODE_SIT:
						test_modes_handle_sit(&BME280_sensor, &BMI_sensor);
 8005134:	4909      	ldr	r1, [pc, #36]	@ (800515c <main+0x194>)
 8005136:	480a      	ldr	r0, [pc, #40]	@ (8005160 <main+0x198>)
 8005138:	f003 fad0 	bl	80086dc <test_modes_handle_sit>
						break;
 800513c:	e002      	b.n	8005144 <main+0x17c>

					case MODE_SUT:
						algorithm_update_sut();
 800513e:	f003 fae7 	bl	8008710 <algorithm_update_sut>
						break;
 8005142:	bf00      	nop
	  	  bmi088_update(&BMI_sensor);
 8005144:	e7b7      	b.n	80050b6 <main+0xee>
 8005146:	bf00      	nop
 8005148:	20001314 	.word	0x20001314
 800514c:	200016e4 	.word	0x200016e4
 8005150:	2000111c 	.word	0x2000111c
 8005154:	200016e8 	.word	0x200016e8
 8005158:	20001164 	.word	0x20001164
 800515c:	200015e0 	.word	0x200015e0
 8005160:	2000159c 	.word	0x2000159c
 8005164:	20001690 	.word	0x20001690
 8005168:	2000135c 	.word	0x2000135c
 800516c:	42700000 	.word	0x42700000
 8005170:	43fa0000 	.word	0x43fa0000
 8005174:	44fa0000 	.word	0x44fa0000
 8005178:	200013a4 	.word	0x200013a4
 800517c:	2000153c 	.word	0x2000153c
 8005180:	20001660 	.word	0x20001660
 8005184:	200016e0 	.word	0x200016e0
 8005188:	200016ec 	.word	0x200016ec

0800518c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b094      	sub	sp, #80	@ 0x50
 8005190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005192:	f107 031c 	add.w	r3, r7, #28
 8005196:	2234      	movs	r2, #52	@ 0x34
 8005198:	2100      	movs	r1, #0
 800519a:	4618      	mov	r0, r3
 800519c:	f00a ff64 	bl	8010068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051a0:	f107 0308 	add.w	r3, r7, #8
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	605a      	str	r2, [r3, #4]
 80051aa:	609a      	str	r2, [r3, #8]
 80051ac:	60da      	str	r2, [r3, #12]
 80051ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80051b0:	2300      	movs	r3, #0
 80051b2:	607b      	str	r3, [r7, #4]
 80051b4:	4b29      	ldr	r3, [pc, #164]	@ (800525c <SystemClock_Config+0xd0>)
 80051b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b8:	4a28      	ldr	r2, [pc, #160]	@ (800525c <SystemClock_Config+0xd0>)
 80051ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051be:	6413      	str	r3, [r2, #64]	@ 0x40
 80051c0:	4b26      	ldr	r3, [pc, #152]	@ (800525c <SystemClock_Config+0xd0>)
 80051c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051c8:	607b      	str	r3, [r7, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80051cc:	2300      	movs	r3, #0
 80051ce:	603b      	str	r3, [r7, #0]
 80051d0:	4b23      	ldr	r3, [pc, #140]	@ (8005260 <SystemClock_Config+0xd4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a22      	ldr	r2, [pc, #136]	@ (8005260 <SystemClock_Config+0xd4>)
 80051d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	4b20      	ldr	r3, [pc, #128]	@ (8005260 <SystemClock_Config+0xd4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80051e4:	603b      	str	r3, [r7, #0]
 80051e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80051e8:	2301      	movs	r3, #1
 80051ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80051ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80051f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051f2:	2302      	movs	r3, #2
 80051f4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80051f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80051fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80051fc:	2308      	movs	r3, #8
 80051fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005200:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8005204:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005206:	2302      	movs	r3, #2
 8005208:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800520a:	2302      	movs	r3, #2
 800520c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800520e:	2302      	movs	r3, #2
 8005210:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005212:	f107 031c 	add.w	r3, r7, #28
 8005216:	4618      	mov	r0, r3
 8005218:	f006 fd76 	bl	800bd08 <HAL_RCC_OscConfig>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005222:	f000 fcb7 	bl	8005b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005226:	230f      	movs	r3, #15
 8005228:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800522a:	2302      	movs	r3, #2
 800522c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800522e:	2300      	movs	r3, #0
 8005230:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005232:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005236:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005238:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800523c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800523e:	f107 0308 	add.w	r3, r7, #8
 8005242:	2105      	movs	r1, #5
 8005244:	4618      	mov	r0, r3
 8005246:	f006 fa15 	bl	800b674 <HAL_RCC_ClockConfig>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8005250:	f000 fca0 	bl	8005b94 <Error_Handler>
  }
}
 8005254:	bf00      	nop
 8005256:	3750      	adds	r7, #80	@ 0x50
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40023800 	.word	0x40023800
 8005260:	40007000 	.word	0x40007000

08005264 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800526a:	463b      	mov	r3, r7
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	605a      	str	r2, [r3, #4]
 8005272:	609a      	str	r2, [r3, #8]
 8005274:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005276:	4b21      	ldr	r3, [pc, #132]	@ (80052fc <MX_ADC1_Init+0x98>)
 8005278:	4a21      	ldr	r2, [pc, #132]	@ (8005300 <MX_ADC1_Init+0x9c>)
 800527a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800527c:	4b1f      	ldr	r3, [pc, #124]	@ (80052fc <MX_ADC1_Init+0x98>)
 800527e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005282:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005284:	4b1d      	ldr	r3, [pc, #116]	@ (80052fc <MX_ADC1_Init+0x98>)
 8005286:	2200      	movs	r2, #0
 8005288:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800528a:	4b1c      	ldr	r3, [pc, #112]	@ (80052fc <MX_ADC1_Init+0x98>)
 800528c:	2200      	movs	r2, #0
 800528e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005290:	4b1a      	ldr	r3, [pc, #104]	@ (80052fc <MX_ADC1_Init+0x98>)
 8005292:	2201      	movs	r2, #1
 8005294:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005296:	4b19      	ldr	r3, [pc, #100]	@ (80052fc <MX_ADC1_Init+0x98>)
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800529e:	4b17      	ldr	r3, [pc, #92]	@ (80052fc <MX_ADC1_Init+0x98>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80052a4:	4b15      	ldr	r3, [pc, #84]	@ (80052fc <MX_ADC1_Init+0x98>)
 80052a6:	4a17      	ldr	r2, [pc, #92]	@ (8005304 <MX_ADC1_Init+0xa0>)
 80052a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80052aa:	4b14      	ldr	r3, [pc, #80]	@ (80052fc <MX_ADC1_Init+0x98>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80052b0:	4b12      	ldr	r3, [pc, #72]	@ (80052fc <MX_ADC1_Init+0x98>)
 80052b2:	2201      	movs	r2, #1
 80052b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80052b6:	4b11      	ldr	r3, [pc, #68]	@ (80052fc <MX_ADC1_Init+0x98>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80052be:	4b0f      	ldr	r3, [pc, #60]	@ (80052fc <MX_ADC1_Init+0x98>)
 80052c0:	2201      	movs	r2, #1
 80052c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80052c4:	480d      	ldr	r0, [pc, #52]	@ (80052fc <MX_ADC1_Init+0x98>)
 80052c6:	f003 fce5 	bl	8008c94 <HAL_ADC_Init>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80052d0:	f000 fc60 	bl	8005b94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80052d4:	2309      	movs	r3, #9
 80052d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80052d8:	2301      	movs	r3, #1
 80052da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80052dc:	2307      	movs	r3, #7
 80052de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80052e0:	463b      	mov	r3, r7
 80052e2:	4619      	mov	r1, r3
 80052e4:	4805      	ldr	r0, [pc, #20]	@ (80052fc <MX_ADC1_Init+0x98>)
 80052e6:	f003 fe4b 	bl	8008f80 <HAL_ADC_ConfigChannel>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80052f0:	f000 fc50 	bl	8005b94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80052f4:	bf00      	nop
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	2000111c 	.word	0x2000111c
 8005300:	40012000 	.word	0x40012000
 8005304:	0f000001 	.word	0x0f000001

08005308 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800530e:	463b      	mov	r3, r7
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	605a      	str	r2, [r3, #4]
 8005316:	609a      	str	r2, [r3, #8]
 8005318:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800531a:	4b21      	ldr	r3, [pc, #132]	@ (80053a0 <MX_ADC2_Init+0x98>)
 800531c:	4a21      	ldr	r2, [pc, #132]	@ (80053a4 <MX_ADC2_Init+0x9c>)
 800531e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005320:	4b1f      	ldr	r3, [pc, #124]	@ (80053a0 <MX_ADC2_Init+0x98>)
 8005322:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005326:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005328:	4b1d      	ldr	r3, [pc, #116]	@ (80053a0 <MX_ADC2_Init+0x98>)
 800532a:	2200      	movs	r2, #0
 800532c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800532e:	4b1c      	ldr	r3, [pc, #112]	@ (80053a0 <MX_ADC2_Init+0x98>)
 8005330:	2200      	movs	r2, #0
 8005332:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005334:	4b1a      	ldr	r3, [pc, #104]	@ (80053a0 <MX_ADC2_Init+0x98>)
 8005336:	2201      	movs	r2, #1
 8005338:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800533a:	4b19      	ldr	r3, [pc, #100]	@ (80053a0 <MX_ADC2_Init+0x98>)
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005342:	4b17      	ldr	r3, [pc, #92]	@ (80053a0 <MX_ADC2_Init+0x98>)
 8005344:	2200      	movs	r2, #0
 8005346:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005348:	4b15      	ldr	r3, [pc, #84]	@ (80053a0 <MX_ADC2_Init+0x98>)
 800534a:	4a17      	ldr	r2, [pc, #92]	@ (80053a8 <MX_ADC2_Init+0xa0>)
 800534c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800534e:	4b14      	ldr	r3, [pc, #80]	@ (80053a0 <MX_ADC2_Init+0x98>)
 8005350:	2200      	movs	r2, #0
 8005352:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8005354:	4b12      	ldr	r3, [pc, #72]	@ (80053a0 <MX_ADC2_Init+0x98>)
 8005356:	2201      	movs	r2, #1
 8005358:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800535a:	4b11      	ldr	r3, [pc, #68]	@ (80053a0 <MX_ADC2_Init+0x98>)
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005362:	4b0f      	ldr	r3, [pc, #60]	@ (80053a0 <MX_ADC2_Init+0x98>)
 8005364:	2201      	movs	r2, #1
 8005366:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005368:	480d      	ldr	r0, [pc, #52]	@ (80053a0 <MX_ADC2_Init+0x98>)
 800536a:	f003 fc93 	bl	8008c94 <HAL_ADC_Init>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005374:	f000 fc0e 	bl	8005b94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005378:	2308      	movs	r3, #8
 800537a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800537c:	2301      	movs	r3, #1
 800537e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8005380:	2307      	movs	r3, #7
 8005382:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005384:	463b      	mov	r3, r7
 8005386:	4619      	mov	r1, r3
 8005388:	4805      	ldr	r0, [pc, #20]	@ (80053a0 <MX_ADC2_Init+0x98>)
 800538a:	f003 fdf9 	bl	8008f80 <HAL_ADC_ConfigChannel>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005394:	f000 fbfe 	bl	8005b94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005398:	bf00      	nop
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20001164 	.word	0x20001164
 80053a4:	40012100 	.word	0x40012100
 80053a8:	0f000001 	.word	0x0f000001

080053ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80053b0:	4b12      	ldr	r3, [pc, #72]	@ (80053fc <MX_I2C1_Init+0x50>)
 80053b2:	4a13      	ldr	r2, [pc, #76]	@ (8005400 <MX_I2C1_Init+0x54>)
 80053b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80053b6:	4b11      	ldr	r3, [pc, #68]	@ (80053fc <MX_I2C1_Init+0x50>)
 80053b8:	4a12      	ldr	r2, [pc, #72]	@ (8005404 <MX_I2C1_Init+0x58>)
 80053ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80053bc:	4b0f      	ldr	r3, [pc, #60]	@ (80053fc <MX_I2C1_Init+0x50>)
 80053be:	2200      	movs	r2, #0
 80053c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80053c2:	4b0e      	ldr	r3, [pc, #56]	@ (80053fc <MX_I2C1_Init+0x50>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80053c8:	4b0c      	ldr	r3, [pc, #48]	@ (80053fc <MX_I2C1_Init+0x50>)
 80053ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80053ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80053d0:	4b0a      	ldr	r3, [pc, #40]	@ (80053fc <MX_I2C1_Init+0x50>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80053d6:	4b09      	ldr	r3, [pc, #36]	@ (80053fc <MX_I2C1_Init+0x50>)
 80053d8:	2200      	movs	r2, #0
 80053da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80053dc:	4b07      	ldr	r3, [pc, #28]	@ (80053fc <MX_I2C1_Init+0x50>)
 80053de:	2200      	movs	r2, #0
 80053e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80053e2:	4b06      	ldr	r3, [pc, #24]	@ (80053fc <MX_I2C1_Init+0x50>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80053e8:	4804      	ldr	r0, [pc, #16]	@ (80053fc <MX_I2C1_Init+0x50>)
 80053ea:	f005 f8ef 	bl	800a5cc <HAL_I2C_Init>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80053f4:	f000 fbce 	bl	8005b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80053f8:	bf00      	nop
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	2000126c 	.word	0x2000126c
 8005400:	40005400 	.word	0x40005400
 8005404:	000186a0 	.word	0x000186a0

08005408 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800540c:	4b12      	ldr	r3, [pc, #72]	@ (8005458 <MX_I2C3_Init+0x50>)
 800540e:	4a13      	ldr	r2, [pc, #76]	@ (800545c <MX_I2C3_Init+0x54>)
 8005410:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005412:	4b11      	ldr	r3, [pc, #68]	@ (8005458 <MX_I2C3_Init+0x50>)
 8005414:	4a12      	ldr	r2, [pc, #72]	@ (8005460 <MX_I2C3_Init+0x58>)
 8005416:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005418:	4b0f      	ldr	r3, [pc, #60]	@ (8005458 <MX_I2C3_Init+0x50>)
 800541a:	2200      	movs	r2, #0
 800541c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800541e:	4b0e      	ldr	r3, [pc, #56]	@ (8005458 <MX_I2C3_Init+0x50>)
 8005420:	2200      	movs	r2, #0
 8005422:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005424:	4b0c      	ldr	r3, [pc, #48]	@ (8005458 <MX_I2C3_Init+0x50>)
 8005426:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800542a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800542c:	4b0a      	ldr	r3, [pc, #40]	@ (8005458 <MX_I2C3_Init+0x50>)
 800542e:	2200      	movs	r2, #0
 8005430:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005432:	4b09      	ldr	r3, [pc, #36]	@ (8005458 <MX_I2C3_Init+0x50>)
 8005434:	2200      	movs	r2, #0
 8005436:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005438:	4b07      	ldr	r3, [pc, #28]	@ (8005458 <MX_I2C3_Init+0x50>)
 800543a:	2200      	movs	r2, #0
 800543c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800543e:	4b06      	ldr	r3, [pc, #24]	@ (8005458 <MX_I2C3_Init+0x50>)
 8005440:	2200      	movs	r2, #0
 8005442:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005444:	4804      	ldr	r0, [pc, #16]	@ (8005458 <MX_I2C3_Init+0x50>)
 8005446:	f005 f8c1 	bl	800a5cc <HAL_I2C_Init>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005450:	f000 fba0 	bl	8005b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005454:	bf00      	nop
 8005456:	bd80      	pop	{r7, pc}
 8005458:	200012c0 	.word	0x200012c0
 800545c:	40005c00 	.word	0x40005c00
 8005460:	000186a0 	.word	0x000186a0

08005464 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800546a:	f107 0308 	add.w	r3, r7, #8
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	605a      	str	r2, [r3, #4]
 8005474:	609a      	str	r2, [r3, #8]
 8005476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005478:	463b      	mov	r3, r7
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005480:	4b1e      	ldr	r3, [pc, #120]	@ (80054fc <MX_TIM2_Init+0x98>)
 8005482:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005486:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 8005488:	4b1c      	ldr	r3, [pc, #112]	@ (80054fc <MX_TIM2_Init+0x98>)
 800548a:	f242 3227 	movw	r2, #8999	@ 0x2327
 800548e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005490:	4b1a      	ldr	r3, [pc, #104]	@ (80054fc <MX_TIM2_Init+0x98>)
 8005492:	2200      	movs	r2, #0
 8005494:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8005496:	4b19      	ldr	r3, [pc, #100]	@ (80054fc <MX_TIM2_Init+0x98>)
 8005498:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800549c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800549e:	4b17      	ldr	r3, [pc, #92]	@ (80054fc <MX_TIM2_Init+0x98>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054a4:	4b15      	ldr	r3, [pc, #84]	@ (80054fc <MX_TIM2_Init+0x98>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80054aa:	4814      	ldr	r0, [pc, #80]	@ (80054fc <MX_TIM2_Init+0x98>)
 80054ac:	f006 feca 	bl	800c244 <HAL_TIM_Base_Init>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80054b6:	f000 fb6d 	bl	8005b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80054ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80054be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80054c0:	f107 0308 	add.w	r3, r7, #8
 80054c4:	4619      	mov	r1, r3
 80054c6:	480d      	ldr	r0, [pc, #52]	@ (80054fc <MX_TIM2_Init+0x98>)
 80054c8:	f007 f86c 	bl	800c5a4 <HAL_TIM_ConfigClockSource>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80054d2:	f000 fb5f 	bl	8005b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054d6:	2300      	movs	r3, #0
 80054d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054da:	2300      	movs	r3, #0
 80054dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80054de:	463b      	mov	r3, r7
 80054e0:	4619      	mov	r1, r3
 80054e2:	4806      	ldr	r0, [pc, #24]	@ (80054fc <MX_TIM2_Init+0x98>)
 80054e4:	f007 fa8e 	bl	800ca04 <HAL_TIMEx_MasterConfigSynchronization>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80054ee:	f000 fb51 	bl	8005b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80054f2:	bf00      	nop
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20001314 	.word	0x20001314

08005500 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005504:	4b11      	ldr	r3, [pc, #68]	@ (800554c <MX_UART4_Init+0x4c>)
 8005506:	4a12      	ldr	r2, [pc, #72]	@ (8005550 <MX_UART4_Init+0x50>)
 8005508:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800550a:	4b10      	ldr	r3, [pc, #64]	@ (800554c <MX_UART4_Init+0x4c>)
 800550c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005510:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005512:	4b0e      	ldr	r3, [pc, #56]	@ (800554c <MX_UART4_Init+0x4c>)
 8005514:	2200      	movs	r2, #0
 8005516:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005518:	4b0c      	ldr	r3, [pc, #48]	@ (800554c <MX_UART4_Init+0x4c>)
 800551a:	2200      	movs	r2, #0
 800551c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800551e:	4b0b      	ldr	r3, [pc, #44]	@ (800554c <MX_UART4_Init+0x4c>)
 8005520:	2200      	movs	r2, #0
 8005522:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005524:	4b09      	ldr	r3, [pc, #36]	@ (800554c <MX_UART4_Init+0x4c>)
 8005526:	220c      	movs	r2, #12
 8005528:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800552a:	4b08      	ldr	r3, [pc, #32]	@ (800554c <MX_UART4_Init+0x4c>)
 800552c:	2200      	movs	r2, #0
 800552e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005530:	4b06      	ldr	r3, [pc, #24]	@ (800554c <MX_UART4_Init+0x4c>)
 8005532:	2200      	movs	r2, #0
 8005534:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005536:	4805      	ldr	r0, [pc, #20]	@ (800554c <MX_UART4_Init+0x4c>)
 8005538:	f007 faf4 	bl	800cb24 <HAL_UART_Init>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8005542:	f000 fb27 	bl	8005b94 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005546:	bf00      	nop
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	2000135c 	.word	0x2000135c
 8005550:	40004c00 	.word	0x40004c00

08005554 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005558:	4b11      	ldr	r3, [pc, #68]	@ (80055a0 <MX_UART5_Init+0x4c>)
 800555a:	4a12      	ldr	r2, [pc, #72]	@ (80055a4 <MX_UART5_Init+0x50>)
 800555c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800555e:	4b10      	ldr	r3, [pc, #64]	@ (80055a0 <MX_UART5_Init+0x4c>)
 8005560:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8005564:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005566:	4b0e      	ldr	r3, [pc, #56]	@ (80055a0 <MX_UART5_Init+0x4c>)
 8005568:	2200      	movs	r2, #0
 800556a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800556c:	4b0c      	ldr	r3, [pc, #48]	@ (80055a0 <MX_UART5_Init+0x4c>)
 800556e:	2200      	movs	r2, #0
 8005570:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005572:	4b0b      	ldr	r3, [pc, #44]	@ (80055a0 <MX_UART5_Init+0x4c>)
 8005574:	2200      	movs	r2, #0
 8005576:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005578:	4b09      	ldr	r3, [pc, #36]	@ (80055a0 <MX_UART5_Init+0x4c>)
 800557a:	220c      	movs	r2, #12
 800557c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800557e:	4b08      	ldr	r3, [pc, #32]	@ (80055a0 <MX_UART5_Init+0x4c>)
 8005580:	2200      	movs	r2, #0
 8005582:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005584:	4b06      	ldr	r3, [pc, #24]	@ (80055a0 <MX_UART5_Init+0x4c>)
 8005586:	2200      	movs	r2, #0
 8005588:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800558a:	4805      	ldr	r0, [pc, #20]	@ (80055a0 <MX_UART5_Init+0x4c>)
 800558c:	f007 faca 	bl	800cb24 <HAL_UART_Init>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8005596:	f000 fafd 	bl	8005b94 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800559a:	bf00      	nop
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	200013a4 	.word	0x200013a4
 80055a4:	40005000 	.word	0x40005000

080055a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80055ac:	4b11      	ldr	r3, [pc, #68]	@ (80055f4 <MX_USART1_UART_Init+0x4c>)
 80055ae:	4a12      	ldr	r2, [pc, #72]	@ (80055f8 <MX_USART1_UART_Init+0x50>)
 80055b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80055b2:	4b10      	ldr	r3, [pc, #64]	@ (80055f4 <MX_USART1_UART_Init+0x4c>)
 80055b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80055b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80055ba:	4b0e      	ldr	r3, [pc, #56]	@ (80055f4 <MX_USART1_UART_Init+0x4c>)
 80055bc:	2200      	movs	r2, #0
 80055be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80055c0:	4b0c      	ldr	r3, [pc, #48]	@ (80055f4 <MX_USART1_UART_Init+0x4c>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80055c6:	4b0b      	ldr	r3, [pc, #44]	@ (80055f4 <MX_USART1_UART_Init+0x4c>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80055cc:	4b09      	ldr	r3, [pc, #36]	@ (80055f4 <MX_USART1_UART_Init+0x4c>)
 80055ce:	220c      	movs	r2, #12
 80055d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055d2:	4b08      	ldr	r3, [pc, #32]	@ (80055f4 <MX_USART1_UART_Init+0x4c>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80055d8:	4b06      	ldr	r3, [pc, #24]	@ (80055f4 <MX_USART1_UART_Init+0x4c>)
 80055da:	2200      	movs	r2, #0
 80055dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80055de:	4805      	ldr	r0, [pc, #20]	@ (80055f4 <MX_USART1_UART_Init+0x4c>)
 80055e0:	f007 faa0 	bl	800cb24 <HAL_UART_Init>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80055ea:	f000 fad3 	bl	8005b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80055ee:	bf00      	nop
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	200013ec 	.word	0x200013ec
 80055f8:	40011000 	.word	0x40011000

080055fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005600:	4b11      	ldr	r3, [pc, #68]	@ (8005648 <MX_USART2_UART_Init+0x4c>)
 8005602:	4a12      	ldr	r2, [pc, #72]	@ (800564c <MX_USART2_UART_Init+0x50>)
 8005604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005606:	4b10      	ldr	r3, [pc, #64]	@ (8005648 <MX_USART2_UART_Init+0x4c>)
 8005608:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800560c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800560e:	4b0e      	ldr	r3, [pc, #56]	@ (8005648 <MX_USART2_UART_Init+0x4c>)
 8005610:	2200      	movs	r2, #0
 8005612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005614:	4b0c      	ldr	r3, [pc, #48]	@ (8005648 <MX_USART2_UART_Init+0x4c>)
 8005616:	2200      	movs	r2, #0
 8005618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800561a:	4b0b      	ldr	r3, [pc, #44]	@ (8005648 <MX_USART2_UART_Init+0x4c>)
 800561c:	2200      	movs	r2, #0
 800561e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005620:	4b09      	ldr	r3, [pc, #36]	@ (8005648 <MX_USART2_UART_Init+0x4c>)
 8005622:	220c      	movs	r2, #12
 8005624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005626:	4b08      	ldr	r3, [pc, #32]	@ (8005648 <MX_USART2_UART_Init+0x4c>)
 8005628:	2200      	movs	r2, #0
 800562a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800562c:	4b06      	ldr	r3, [pc, #24]	@ (8005648 <MX_USART2_UART_Init+0x4c>)
 800562e:	2200      	movs	r2, #0
 8005630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005632:	4805      	ldr	r0, [pc, #20]	@ (8005648 <MX_USART2_UART_Init+0x4c>)
 8005634:	f007 fa76 	bl	800cb24 <HAL_UART_Init>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800563e:	f000 faa9 	bl	8005b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005642:	bf00      	nop
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20001434 	.word	0x20001434
 800564c:	40004400 	.word	0x40004400

08005650 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005656:	2300      	movs	r3, #0
 8005658:	607b      	str	r3, [r7, #4]
 800565a:	4b23      	ldr	r3, [pc, #140]	@ (80056e8 <MX_DMA_Init+0x98>)
 800565c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565e:	4a22      	ldr	r2, [pc, #136]	@ (80056e8 <MX_DMA_Init+0x98>)
 8005660:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005664:	6313      	str	r3, [r2, #48]	@ 0x30
 8005666:	4b20      	ldr	r3, [pc, #128]	@ (80056e8 <MX_DMA_Init+0x98>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800566e:	607b      	str	r3, [r7, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005672:	2300      	movs	r3, #0
 8005674:	603b      	str	r3, [r7, #0]
 8005676:	4b1c      	ldr	r3, [pc, #112]	@ (80056e8 <MX_DMA_Init+0x98>)
 8005678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800567a:	4a1b      	ldr	r2, [pc, #108]	@ (80056e8 <MX_DMA_Init+0x98>)
 800567c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005680:	6313      	str	r3, [r2, #48]	@ 0x30
 8005682:	4b19      	ldr	r3, [pc, #100]	@ (80056e8 <MX_DMA_Init+0x98>)
 8005684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005686:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800568a:	603b      	str	r3, [r7, #0]
 800568c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800568e:	2200      	movs	r2, #0
 8005690:	2100      	movs	r1, #0
 8005692:	200b      	movs	r0, #11
 8005694:	f004 f823 	bl	80096de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005698:	200b      	movs	r0, #11
 800569a:	f004 f83c 	bl	8009716 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800569e:	2200      	movs	r2, #0
 80056a0:	2100      	movs	r1, #0
 80056a2:	200d      	movs	r0, #13
 80056a4:	f004 f81b 	bl	80096de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80056a8:	200d      	movs	r0, #13
 80056aa:	f004 f834 	bl	8009716 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80056ae:	2200      	movs	r2, #0
 80056b0:	2100      	movs	r1, #0
 80056b2:	200f      	movs	r0, #15
 80056b4:	f004 f813 	bl	80096de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80056b8:	200f      	movs	r0, #15
 80056ba:	f004 f82c 	bl	8009716 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80056be:	2200      	movs	r2, #0
 80056c0:	2100      	movs	r1, #0
 80056c2:	2038      	movs	r0, #56	@ 0x38
 80056c4:	f004 f80b 	bl	80096de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80056c8:	2038      	movs	r0, #56	@ 0x38
 80056ca:	f004 f824 	bl	8009716 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80056ce:	2200      	movs	r2, #0
 80056d0:	2100      	movs	r1, #0
 80056d2:	203b      	movs	r0, #59	@ 0x3b
 80056d4:	f004 f803 	bl	80096de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80056d8:	203b      	movs	r0, #59	@ 0x3b
 80056da:	f004 f81c 	bl	8009716 <HAL_NVIC_EnableIRQ>

}
 80056de:	bf00      	nop
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	40023800 	.word	0x40023800

080056ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08a      	sub	sp, #40	@ 0x28
 80056f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f2:	f107 0314 	add.w	r3, r7, #20
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	605a      	str	r2, [r3, #4]
 80056fc:	609a      	str	r2, [r3, #8]
 80056fe:	60da      	str	r2, [r3, #12]
 8005700:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005702:	2300      	movs	r3, #0
 8005704:	613b      	str	r3, [r7, #16]
 8005706:	4b68      	ldr	r3, [pc, #416]	@ (80058a8 <MX_GPIO_Init+0x1bc>)
 8005708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570a:	4a67      	ldr	r2, [pc, #412]	@ (80058a8 <MX_GPIO_Init+0x1bc>)
 800570c:	f043 0304 	orr.w	r3, r3, #4
 8005710:	6313      	str	r3, [r2, #48]	@ 0x30
 8005712:	4b65      	ldr	r3, [pc, #404]	@ (80058a8 <MX_GPIO_Init+0x1bc>)
 8005714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	613b      	str	r3, [r7, #16]
 800571c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	4b61      	ldr	r3, [pc, #388]	@ (80058a8 <MX_GPIO_Init+0x1bc>)
 8005724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005726:	4a60      	ldr	r2, [pc, #384]	@ (80058a8 <MX_GPIO_Init+0x1bc>)
 8005728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800572c:	6313      	str	r3, [r2, #48]	@ 0x30
 800572e:	4b5e      	ldr	r3, [pc, #376]	@ (80058a8 <MX_GPIO_Init+0x1bc>)
 8005730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800573a:	2300      	movs	r3, #0
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	4b5a      	ldr	r3, [pc, #360]	@ (80058a8 <MX_GPIO_Init+0x1bc>)
 8005740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005742:	4a59      	ldr	r2, [pc, #356]	@ (80058a8 <MX_GPIO_Init+0x1bc>)
 8005744:	f043 0301 	orr.w	r3, r3, #1
 8005748:	6313      	str	r3, [r2, #48]	@ 0x30
 800574a:	4b57      	ldr	r3, [pc, #348]	@ (80058a8 <MX_GPIO_Init+0x1bc>)
 800574c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	60bb      	str	r3, [r7, #8]
 8005754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005756:	2300      	movs	r3, #0
 8005758:	607b      	str	r3, [r7, #4]
 800575a:	4b53      	ldr	r3, [pc, #332]	@ (80058a8 <MX_GPIO_Init+0x1bc>)
 800575c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575e:	4a52      	ldr	r2, [pc, #328]	@ (80058a8 <MX_GPIO_Init+0x1bc>)
 8005760:	f043 0302 	orr.w	r3, r3, #2
 8005764:	6313      	str	r3, [r2, #48]	@ 0x30
 8005766:	4b50      	ldr	r3, [pc, #320]	@ (80058a8 <MX_GPIO_Init+0x1bc>)
 8005768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	607b      	str	r3, [r7, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005772:	2300      	movs	r3, #0
 8005774:	603b      	str	r3, [r7, #0]
 8005776:	4b4c      	ldr	r3, [pc, #304]	@ (80058a8 <MX_GPIO_Init+0x1bc>)
 8005778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577a:	4a4b      	ldr	r2, [pc, #300]	@ (80058a8 <MX_GPIO_Init+0x1bc>)
 800577c:	f043 0308 	orr.w	r3, r3, #8
 8005780:	6313      	str	r3, [r2, #48]	@ 0x30
 8005782:	4b49      	ldr	r3, [pc, #292]	@ (80058a8 <MX_GPIO_Init+0x1bc>)
 8005784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	603b      	str	r3, [r7, #0]
 800578c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RF_M0_Pin|RF_M1_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 800578e:	2200      	movs	r2, #0
 8005790:	f640 0103 	movw	r1, #2051	@ 0x803
 8005794:	4845      	ldr	r0, [pc, #276]	@ (80058ac <MX_GPIO_Init+0x1c0>)
 8005796:	f004 fee7 	bl	800a568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SGU_LED2_Pin|SGU_LED1_Pin, GPIO_PIN_RESET);
 800579a:	2200      	movs	r2, #0
 800579c:	f240 4104 	movw	r1, #1028	@ 0x404
 80057a0:	4843      	ldr	r0, [pc, #268]	@ (80058b0 <MX_GPIO_Init+0x1c4>)
 80057a2:	f004 fee1 	bl	800a568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80057a6:	2201      	movs	r2, #1
 80057a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80057ac:	4840      	ldr	r0, [pc, #256]	@ (80058b0 <MX_GPIO_Init+0x1c4>)
 80057ae:	f004 fedb 	bl	800a568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|MCU_LED_Pin, GPIO_PIN_RESET);
 80057b2:	2200      	movs	r2, #0
 80057b4:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80057b8:	483e      	ldr	r0, [pc, #248]	@ (80058b4 <MX_GPIO_Init+0x1c8>)
 80057ba:	f004 fed5 	bl	800a568 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STATUS1_Pin STATUS2_Pin */
  GPIO_InitStruct.Pin = STATUS1_Pin|STATUS2_Pin;
 80057be:	2321      	movs	r3, #33	@ 0x21
 80057c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057c2:	2300      	movs	r3, #0
 80057c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057ca:	f107 0314 	add.w	r3, r7, #20
 80057ce:	4619      	mov	r1, r3
 80057d0:	4838      	ldr	r0, [pc, #224]	@ (80058b4 <MX_GPIO_Init+0x1c8>)
 80057d2:	f004 fc29 	bl	800a028 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_M0_Pin RF_M1_Pin PA11 */
  GPIO_InitStruct.Pin = RF_M0_Pin|RF_M1_Pin|GPIO_PIN_11;
 80057d6:	f640 0303 	movw	r3, #2051	@ 0x803
 80057da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057dc:	2301      	movs	r3, #1
 80057de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057e4:	2300      	movs	r3, #0
 80057e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057e8:	f107 0314 	add.w	r3, r7, #20
 80057ec:	4619      	mov	r1, r3
 80057ee:	482f      	ldr	r0, [pc, #188]	@ (80058ac <MX_GPIO_Init+0x1c0>)
 80057f0:	f004 fc1a 	bl	800a028 <HAL_GPIO_Init>

  /*Configure GPIO pins : SGU_LED2_Pin SGU_LED1_Pin PB14 */
  GPIO_InitStruct.Pin = SGU_LED2_Pin|SGU_LED1_Pin|GPIO_PIN_14;
 80057f4:	f244 4304 	movw	r3, #17412	@ 0x4404
 80057f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057fa:	2301      	movs	r3, #1
 80057fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005802:	2300      	movs	r3, #0
 8005804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005806:	f107 0314 	add.w	r3, r7, #20
 800580a:	4619      	mov	r1, r3
 800580c:	4828      	ldr	r0, [pc, #160]	@ (80058b0 <MX_GPIO_Init+0x1c4>)
 800580e:	f004 fc0b 	bl	800a028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005812:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005818:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800581c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800581e:	2300      	movs	r3, #0
 8005820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005822:	f107 0314 	add.w	r3, r7, #20
 8005826:	4619      	mov	r1, r3
 8005828:	4821      	ldr	r0, [pc, #132]	@ (80058b0 <MX_GPIO_Init+0x1c4>)
 800582a:	f004 fbfd 	bl	800a028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 MCU_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|MCU_LED_Pin;
 800582e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8005832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005834:	2301      	movs	r3, #1
 8005836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005838:	2300      	movs	r3, #0
 800583a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800583c:	2300      	movs	r3, #0
 800583e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005840:	f107 0314 	add.w	r3, r7, #20
 8005844:	4619      	mov	r1, r3
 8005846:	481b      	ldr	r0, [pc, #108]	@ (80058b4 <MX_GPIO_Init+0x1c8>)
 8005848:	f004 fbee 	bl	800a028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800584c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005852:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005858:	2300      	movs	r3, #0
 800585a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800585c:	f107 0314 	add.w	r3, r7, #20
 8005860:	4619      	mov	r1, r3
 8005862:	4812      	ldr	r0, [pc, #72]	@ (80058ac <MX_GPIO_Init+0x1c0>)
 8005864:	f004 fbe0 	bl	800a028 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005868:	2200      	movs	r2, #0
 800586a:	2100      	movs	r1, #0
 800586c:	2028      	movs	r0, #40	@ 0x28
 800586e:	f003 ff36 	bl	80096de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005872:	2028      	movs	r0, #40	@ 0x28
 8005874:	f003 ff4f 	bl	8009716 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8005878:	2200      	movs	r2, #0
 800587a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800587e:	480c      	ldr	r0, [pc, #48]	@ (80058b0 <MX_GPIO_Init+0x1c4>)
 8005880:	f004 fe72 	bl	800a568 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8005884:	2032      	movs	r0, #50	@ 0x32
 8005886:	f003 f9e1 	bl	8008c4c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800588a:	2201      	movs	r2, #1
 800588c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005890:	4807      	ldr	r0, [pc, #28]	@ (80058b0 <MX_GPIO_Init+0x1c4>)
 8005892:	f004 fe69 	bl	800a568 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8005896:	2032      	movs	r0, #50	@ 0x32
 8005898:	f003 f9d8 	bl	8008c4c <HAL_Delay>
  L86_GPIO_Init();
 800589c:	f000 f94e 	bl	8005b3c <L86_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 80058a0:	bf00      	nop
 80058a2:	3728      	adds	r7, #40	@ 0x28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40023800 	.word	0x40023800
 80058ac:	40020000 	.word	0x40020000
 80058b0:	40020400 	.word	0x40020400
 80058b4:	40020800 	.word	0x40020800

080058b8 <bme280_begin>:

/* USER CODE BEGIN 4 */
void bme280_begin()
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
	BME280_sensor.device_config.bme280_filter = 			BME280_FILTER_8;
 80058bc:	4b08      	ldr	r3, [pc, #32]	@ (80058e0 <bme280_begin+0x28>)
 80058be:	2203      	movs	r2, #3
 80058c0:	711a      	strb	r2, [r3, #4]
	BME280_sensor.device_config.bme280_mode =				BME280_MODE_NORMAL;
 80058c2:	4b07      	ldr	r3, [pc, #28]	@ (80058e0 <bme280_begin+0x28>)
 80058c4:	2203      	movs	r2, #3
 80058c6:	715a      	strb	r2, [r3, #5]
	BME280_sensor.device_config.bme280_output_speed =		BME280_OS_8;
 80058c8:	4b05      	ldr	r3, [pc, #20]	@ (80058e0 <bme280_begin+0x28>)
 80058ca:	2204      	movs	r2, #4
 80058cc:	719a      	strb	r2, [r3, #6]
	BME280_sensor.device_config.bme280_standby_time = 		BME280_STBY_20;
 80058ce:	4b04      	ldr	r3, [pc, #16]	@ (80058e0 <bme280_begin+0x28>)
 80058d0:	2207      	movs	r2, #7
 80058d2:	71da      	strb	r2, [r3, #7]
	bme280_init(&BME280_sensor, &hi2c1);
 80058d4:	4903      	ldr	r1, [pc, #12]	@ (80058e4 <bme280_begin+0x2c>)
 80058d6:	4802      	ldr	r0, [pc, #8]	@ (80058e0 <bme280_begin+0x28>)
 80058d8:	f7fb ff8a 	bl	80017f0 <bme280_init>

}
 80058dc:	bf00      	nop
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	2000159c 	.word	0x2000159c
 80058e4:	2000126c 	.word	0x2000126c

080058e8 <bmi_imu_init>:

//BMI sensor struct filled with configuration settings. Then called bmi088_init function.
uint8_t bmi_imu_init(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
	//Acc config
	BMI_sensor.device_config.acc_bandwith = ACC_BWP_OSR4;
 80058ec:	4b13      	ldr	r3, [pc, #76]	@ (800593c <bmi_imu_init+0x54>)
 80058ee:	2208      	movs	r2, #8
 80058f0:	719a      	strb	r2, [r3, #6]
	BMI_sensor.device_config.acc_outputDateRate = ACC_ODR_200;
 80058f2:	4b12      	ldr	r3, [pc, #72]	@ (800593c <bmi_imu_init+0x54>)
 80058f4:	2209      	movs	r2, #9
 80058f6:	71da      	strb	r2, [r3, #7]
	BMI_sensor.device_config.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 80058f8:	4b10      	ldr	r3, [pc, #64]	@ (800593c <bmi_imu_init+0x54>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	711a      	strb	r2, [r3, #4]
	BMI_sensor.device_config.acc_range = ACC_RANGE_24G;
 80058fe:	4b0f      	ldr	r3, [pc, #60]	@ (800593c <bmi_imu_init+0x54>)
 8005900:	2203      	movs	r2, #3
 8005902:	715a      	strb	r2, [r3, #5]

	// Gyro config
	BMI_sensor.device_config.gyro_bandWidth = GYRO_BW_116;
 8005904:	4b0d      	ldr	r3, [pc, #52]	@ (800593c <bmi_imu_init+0x54>)
 8005906:	2202      	movs	r2, #2
 8005908:	725a      	strb	r2, [r3, #9]
	BMI_sensor.device_config.gyro_range = GYRO_RANGE_2000;
 800590a:	4b0c      	ldr	r3, [pc, #48]	@ (800593c <bmi_imu_init+0x54>)
 800590c:	2200      	movs	r2, #0
 800590e:	729a      	strb	r2, [r3, #10]
	BMI_sensor.device_config.gyro_powerMode = GYRO_LPM_NORMAL;
 8005910:	4b0a      	ldr	r3, [pc, #40]	@ (800593c <bmi_imu_init+0x54>)
 8005912:	2200      	movs	r2, #0
 8005914:	721a      	strb	r2, [r3, #8]

	BMI_sensor.device_config.acc_IRQ = EXTI15_10_IRQn;
 8005916:	4b09      	ldr	r3, [pc, #36]	@ (800593c <bmi_imu_init+0x54>)
 8005918:	2228      	movs	r2, #40	@ 0x28
 800591a:	741a      	strb	r2, [r3, #16]
	BMI_sensor.device_config.gyro_IRQ = EXTI15_10_IRQn;
 800591c:	4b07      	ldr	r3, [pc, #28]	@ (800593c <bmi_imu_init+0x54>)
 800591e:	2228      	movs	r2, #40	@ 0x28
 8005920:	745a      	strb	r2, [r3, #17]
	BMI_sensor.device_config.BMI_I2c = &IMU_I2C_HNDLR;
 8005922:	4b06      	ldr	r3, [pc, #24]	@ (800593c <bmi_imu_init+0x54>)
 8005924:	4a06      	ldr	r2, [pc, #24]	@ (8005940 <bmi_imu_init+0x58>)
 8005926:	60da      	str	r2, [r3, #12]
	BMI_sensor.device_config.offsets = NULL;	//Offset datas stored in backup sram for saving them unwanted reset.
 8005928:	4b04      	ldr	r3, [pc, #16]	@ (800593c <bmi_imu_init+0x54>)
 800592a:	2200      	movs	r2, #0
 800592c:	615a      	str	r2, [r3, #20]

	return	bmi088_init(&BMI_sensor);
 800592e:	4803      	ldr	r0, [pc, #12]	@ (800593c <bmi_imu_init+0x54>)
 8005930:	f7fc fbbe 	bl	80020b0 <bmi088_init>
 8005934:	4603      	mov	r3, r0
}
 8005936:	4618      	mov	r0, r3
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	200015e0 	.word	0x200015e0
 8005940:	200012c0 	.word	0x200012c0

08005944 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	4603      	mov	r3, r0
 800594c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_12)
 800594e:	88fb      	ldrh	r3, [r7, #6]
 8005950:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005954:	d102      	bne.n	800595c <HAL_GPIO_EXTI_Callback+0x18>
	{
		bmi088_set_accel_INT(&BMI_sensor);
 8005956:	4807      	ldr	r0, [pc, #28]	@ (8005974 <HAL_GPIO_EXTI_Callback+0x30>)
 8005958:	f7fd f9de 	bl	8002d18 <bmi088_set_accel_INT>
	}
	if(GPIO_Pin == GPIO_PIN_13)
 800595c:	88fb      	ldrh	r3, [r7, #6]
 800595e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005962:	d102      	bne.n	800596a <HAL_GPIO_EXTI_Callback+0x26>
	{
		bmi088_set_gyro_INT(&BMI_sensor);
 8005964:	4803      	ldr	r0, [pc, #12]	@ (8005974 <HAL_GPIO_EXTI_Callback+0x30>)
 8005966:	f7fd f9e4 	bl	8002d32 <bmi088_set_gyro_INT>
	}
}
 800596a:	bf00      	nop
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	200015e0 	.word	0x200015e0

08005978 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == UART4) {
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a0d      	ldr	r2, [pc, #52]	@ (80059c0 <HAL_UARTEx_RxEventCallback+0x48>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d114      	bne.n	80059b8 <HAL_UARTEx_RxEventCallback+0x40>
        usart4_packet_ready = 1;
 800598e:	4b0d      	ldr	r3, [pc, #52]	@ (80059c4 <HAL_UARTEx_RxEventCallback+0x4c>)
 8005990:	2201      	movs	r2, #1
 8005992:	701a      	strb	r2, [r3, #0]
        usart4_packet_size = Size;
 8005994:	4a0c      	ldr	r2, [pc, #48]	@ (80059c8 <HAL_UARTEx_RxEventCallback+0x50>)
 8005996:	887b      	ldrh	r3, [r7, #2]
 8005998:	8013      	strh	r3, [r2, #0]
        // RX DMA'yı tekrar başlat
        HAL_UARTEx_ReceiveToIdle_DMA(&huart4, usart4_rx_buffer, sizeof(usart4_rx_buffer));
 800599a:	2224      	movs	r2, #36	@ 0x24
 800599c:	490b      	ldr	r1, [pc, #44]	@ (80059cc <HAL_UARTEx_RxEventCallback+0x54>)
 800599e:	480c      	ldr	r0, [pc, #48]	@ (80059d0 <HAL_UARTEx_RxEventCallback+0x58>)
 80059a0:	f007 fa6f 	bl	800ce82 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart4.hdmarx, DMA_IT_HT); // Half-transfer interrupt'ı devre dışı bırak
 80059a4:	4b0a      	ldr	r3, [pc, #40]	@ (80059d0 <HAL_UARTEx_RxEventCallback+0x58>)
 80059a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	4b08      	ldr	r3, [pc, #32]	@ (80059d0 <HAL_UARTEx_RxEventCallback+0x58>)
 80059ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0208 	bic.w	r2, r2, #8
 80059b6:	601a      	str	r2, [r3, #0]
    }
}
 80059b8:	bf00      	nop
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40004c00 	.word	0x40004c00
 80059c4:	200016dc 	.word	0x200016dc
 80059c8:	200016de 	.word	0x200016de
 80059cc:	20001690 	.word	0x20001690
 80059d0:	2000135c 	.word	0x2000135c

080059d4 <HAL_TIM_PeriodElapsedCallback>:

// Timer 2 interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e4:	d106      	bne.n	80059f4 <HAL_TIM_PeriodElapsedCallback+0x20>
        tx_timer_flag++;
 80059e6:	4b06      	ldr	r3, [pc, #24]	@ (8005a00 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	3301      	adds	r3, #1
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	4b03      	ldr	r3, [pc, #12]	@ (8005a00 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80059f2:	701a      	strb	r2, [r3, #0]
    }
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	200016e0 	.word	0x200016e0

08005a04 <HAL_UART_TxCpltCallback>:

// USART1 TX DMA tamam callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a05      	ldr	r2, [pc, #20]	@ (8005a28 <HAL_UART_TxCpltCallback+0x24>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d102      	bne.n	8005a1c <HAL_UART_TxCpltCallback+0x18>
        usart4_tx_busy = 0;
 8005a16:	4b05      	ldr	r3, [pc, #20]	@ (8005a2c <HAL_UART_TxCpltCallback+0x28>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
    }
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	40004c00 	.word	0x40004c00
 8005a2c:	200016e1 	.word	0x200016e1

08005a30 <uart4_send_packet_dma>:

// USART1 TX DMA başlatma fonksiyonu
void uart4_send_packet_dma(uint8_t *data, uint16_t size)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	807b      	strh	r3, [r7, #2]
    if (!usart4_tx_busy) {
 8005a3c:	4b08      	ldr	r3, [pc, #32]	@ (8005a60 <uart4_send_packet_dma+0x30>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d108      	bne.n	8005a58 <uart4_send_packet_dma+0x28>
        usart4_tx_busy = 1;
 8005a46:	4b06      	ldr	r3, [pc, #24]	@ (8005a60 <uart4_send_packet_dma+0x30>)
 8005a48:	2201      	movs	r2, #1
 8005a4a:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_DMA(&huart4, data, size);
 8005a4c:	887b      	ldrh	r3, [r7, #2]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	4804      	ldr	r0, [pc, #16]	@ (8005a64 <uart4_send_packet_dma+0x34>)
 8005a54:	f007 f974 	bl	800cd40 <HAL_UART_Transmit_DMA>
    }
}
 8005a58:	bf00      	nop
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	200016e1 	.word	0x200016e1
 8005a64:	2000135c 	.word	0x2000135c

08005a68 <HSD_StatusCheck>:
	// Voltaj
	sprintf(uart_buffer,"Akim: %u  | Voltaj: %u \r\n", v_current_raw, v_voltage_raw);
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
}

void HSD_StatusCheck(){
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
	// PC0 pinini oku
	GPIO_PinState pc0_state = HAL_GPIO_ReadPin(STATUS1_GPIO_Port, STATUS1_Pin);
 8005a6e:	2101      	movs	r1, #1
 8005a70:	4816      	ldr	r0, [pc, #88]	@ (8005acc <HSD_StatusCheck+0x64>)
 8005a72:	f004 fd61 	bl	800a538 <HAL_GPIO_ReadPin>
 8005a76:	4603      	mov	r3, r0
 8005a78:	71fb      	strb	r3, [r7, #7]
	if (pc0_state == GPIO_PIN_RESET) { // low ise
 8005a7a:	79fb      	ldrb	r3, [r7, #7]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d106      	bne.n	8005a8e <HSD_StatusCheck+0x26>
		HAL_GPIO_WritePin(SGU_LED1_GPIO_Port, SGU_LED1_Pin, GPIO_PIN_SET); // PB10 LED yak
 8005a80:	2201      	movs	r2, #1
 8005a82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a86:	4812      	ldr	r0, [pc, #72]	@ (8005ad0 <HSD_StatusCheck+0x68>)
 8005a88:	f004 fd6e 	bl	800a568 <HAL_GPIO_WritePin>
 8005a8c:	e005      	b.n	8005a9a <HSD_StatusCheck+0x32>
	} else {
		HAL_GPIO_WritePin(SGU_LED1_GPIO_Port, SGU_LED1_Pin, GPIO_PIN_RESET); // değilse söndür
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a94:	480e      	ldr	r0, [pc, #56]	@ (8005ad0 <HSD_StatusCheck+0x68>)
 8005a96:	f004 fd67 	bl	800a568 <HAL_GPIO_WritePin>
	}

	// PC5 pinini oku
	GPIO_PinState pc5_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8005a9a:	2120      	movs	r1, #32
 8005a9c:	480b      	ldr	r0, [pc, #44]	@ (8005acc <HSD_StatusCheck+0x64>)
 8005a9e:	f004 fd4b 	bl	800a538 <HAL_GPIO_ReadPin>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	71bb      	strb	r3, [r7, #6]
	if (pc5_state == GPIO_PIN_RESET) { // low ise
 8005aa6:	79bb      	ldrb	r3, [r7, #6]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d105      	bne.n	8005ab8 <HSD_StatusCheck+0x50>
		HAL_GPIO_WritePin(SGU_LED2_GPIO_Port, SGU_LED2_Pin, GPIO_PIN_SET); // PB2 LED yak
 8005aac:	2201      	movs	r2, #1
 8005aae:	2104      	movs	r1, #4
 8005ab0:	4807      	ldr	r0, [pc, #28]	@ (8005ad0 <HSD_StatusCheck+0x68>)
 8005ab2:	f004 fd59 	bl	800a568 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(SGU_LED2_GPIO_Port, SGU_LED2_Pin, GPIO_PIN_RESET); // değilse söndür
	}
}
 8005ab6:	e004      	b.n	8005ac2 <HSD_StatusCheck+0x5a>
		HAL_GPIO_WritePin(SGU_LED2_GPIO_Port, SGU_LED2_Pin, GPIO_PIN_RESET); // değilse söndür
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2104      	movs	r1, #4
 8005abc:	4804      	ldr	r0, [pc, #16]	@ (8005ad0 <HSD_StatusCheck+0x68>)
 8005abe:	f004 fd53 	bl	800a568 <HAL_GPIO_WritePin>
}
 8005ac2:	bf00      	nop
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	40020800 	.word	0x40020800
 8005ad0:	40020400 	.word	0x40020400

08005ad4 <loraBegin>:

void loraBegin()
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8005ad8:	2064      	movs	r0, #100	@ 0x64
 8005ada:	f003 f8b7 	bl	8008c4c <HAL_Delay>

	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, RESET);
 8005ade:	2200      	movs	r2, #0
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	4814      	ldr	r0, [pc, #80]	@ (8005b34 <loraBegin+0x60>)
 8005ae4:	f004 fd40 	bl	800a568 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, SET);
 8005ae8:	2201      	movs	r2, #1
 8005aea:	2102      	movs	r1, #2
 8005aec:	4811      	ldr	r0, [pc, #68]	@ (8005b34 <loraBegin+0x60>)
 8005aee:	f004 fd3b 	bl	800a568 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005af2:	2064      	movs	r0, #100	@ 0x64
 8005af4:	f003 f8aa 	bl	8008c4c <HAL_Delay>

    e22_lora.baudRate = LORA_BAUD_115200;
 8005af8:	4b0f      	ldr	r3, [pc, #60]	@ (8005b38 <loraBegin+0x64>)
 8005afa:	22e0      	movs	r2, #224	@ 0xe0
 8005afc:	701a      	strb	r2, [r3, #0]
    e22_lora.airRate = LORA_AIR_RATE_2_4k;
 8005afe:	4b0e      	ldr	r3, [pc, #56]	@ (8005b38 <loraBegin+0x64>)
 8005b00:	2202      	movs	r2, #2
 8005b02:	705a      	strb	r2, [r3, #1]
    e22_lora.packetSize = LORA_SUB_PACKET_64_BYTES;
 8005b04:	4b0c      	ldr	r3, [pc, #48]	@ (8005b38 <loraBegin+0x64>)
 8005b06:	2280      	movs	r2, #128	@ 0x80
 8005b08:	709a      	strb	r2, [r3, #2]
    e22_lora.power = LORA_POWER_37dbm;
 8005b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b38 <loraBegin+0x64>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	70da      	strb	r2, [r3, #3]
    e22_lora.loraAddress.address16 = 0x0000;
 8005b10:	4b09      	ldr	r3, [pc, #36]	@ (8005b38 <loraBegin+0x64>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	80da      	strh	r2, [r3, #6]
    e22_lora.loraKey.key16 = 0x0000;
 8005b16:	4b08      	ldr	r3, [pc, #32]	@ (8005b38 <loraBegin+0x64>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	809a      	strh	r2, [r3, #4]

    e22_lora.channel = ROCKET_TELEM_FREQ;
 8005b1c:	4b06      	ldr	r3, [pc, #24]	@ (8005b38 <loraBegin+0x64>)
 8005b1e:	2219      	movs	r2, #25
 8005b20:	721a      	strb	r2, [r3, #8]

    lora_configure(&e22_lora);
 8005b22:	4805      	ldr	r0, [pc, #20]	@ (8005b38 <loraBegin+0x64>)
 8005b24:	f7ff f9e0 	bl	8004ee8 <lora_configure>
    HAL_Delay(1000);
 8005b28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005b2c:	f003 f88e 	bl	8008c4c <HAL_Delay>
}
 8005b30:	bf00      	nop
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40020000 	.word	0x40020000
 8005b38:	2000167c 	.word	0x2000167c

08005b3c <L86_GPIO_Init>:

static void L86_GPIO_Init(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08a      	sub	sp, #40	@ 0x28
 8005b40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct_UART5_TX;
	GPIO_InitTypeDef GPIO_InitStruct_UART5_RX;

	GPIO_InitStruct_UART5_TX.Pin = L86_TX_Pin;
 8005b42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b46:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct_UART5_TX.Mode = GPIO_MODE_AF_PP;
 8005b48:	2302      	movs	r3, #2
 8005b4a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct_UART5_TX.Pull = GPIO_NOPULL;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct_UART5_TX.Speed = GPIO_SPEED_FREQ_LOW;
 8005b50:	2300      	movs	r3, #0
 8005b52:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct_UART5_TX.Alternate = GPIO_AF8_UART5;
 8005b54:	2308      	movs	r3, #8
 8005b56:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(L86_TX_GPIO_Port, &GPIO_InitStruct_UART5_TX);
 8005b58:	f107 0314 	add.w	r3, r7, #20
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	480b      	ldr	r0, [pc, #44]	@ (8005b8c <L86_GPIO_Init+0x50>)
 8005b60:	f004 fa62 	bl	800a028 <HAL_GPIO_Init>

	 GPIO_InitStruct_UART5_RX.Pin = L86_RX_Pin;
 8005b64:	2304      	movs	r3, #4
 8005b66:	603b      	str	r3, [r7, #0]
	 GPIO_InitStruct_UART5_RX.Mode = GPIO_MODE_AF_PP;
 8005b68:	2302      	movs	r3, #2
 8005b6a:	607b      	str	r3, [r7, #4]
	 GPIO_InitStruct_UART5_RX.Pull = GPIO_NOPULL;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60bb      	str	r3, [r7, #8]
	 GPIO_InitStruct_UART5_RX.Speed = GPIO_SPEED_FREQ_LOW;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]
	 GPIO_InitStruct_UART5_RX.Alternate = GPIO_AF8_UART5;
 8005b74:	2308      	movs	r3, #8
 8005b76:	613b      	str	r3, [r7, #16]
	 HAL_GPIO_Init(L86_RX_GPIO_Port, &GPIO_InitStruct_UART5_RX);
 8005b78:	463b      	mov	r3, r7
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4804      	ldr	r0, [pc, #16]	@ (8005b90 <L86_GPIO_Init+0x54>)
 8005b7e:	f004 fa53 	bl	800a028 <HAL_GPIO_Init>
}
 8005b82:	bf00      	nop
 8005b84:	3728      	adds	r7, #40	@ 0x28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40020800 	.word	0x40020800
 8005b90:	40020c00 	.word	0x40020c00

08005b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b98:	b672      	cpsid	i
}
 8005b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005b9c:	bf00      	nop
 8005b9e:	e7fd      	b.n	8005b9c <Error_Handler+0x8>

08005ba0 <check_sum_hesapla_sit>:
        check_sum += normal_paket[i];
    }
    return (unsigned char) (check_sum % 256);
}

unsigned char check_sum_hesapla_sit(int a){
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8005bac:	2300      	movs	r3, #0
 8005bae:	60bb      	str	r3, [r7, #8]
 8005bb0:	e00a      	b.n	8005bc8 <check_sum_hesapla_sit+0x28>
        check_sum += sit_paket[i];
 8005bb2:	4a0e      	ldr	r2, [pc, #56]	@ (8005bec <check_sum_hesapla_sit+0x4c>)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	60bb      	str	r3, [r7, #8]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	dbf0      	blt.n	8005bb2 <check_sum_hesapla_sit+0x12>
    }
    return (unsigned char) (check_sum % 256);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	425a      	negs	r2, r3
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	bf58      	it	pl
 8005bda:	4253      	negpl	r3, r2
 8005bdc:	b2db      	uxtb	r3, r3
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	20001734 	.word	0x20001734

08005bf0 <round2>:

// Float değerleri iki ondalık basamağa yuvarlamak için yardımcı fonksiyon
double round2(double value) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	ed87 0b00 	vstr	d0, [r7]
    return round(value * 100.0) / 100.0;
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	4b10      	ldr	r3, [pc, #64]	@ (8005c40 <round2+0x50>)
 8005c00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c04:	f7fa fd18 	bl	8000638 <__aeabi_dmul>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	ec43 2b17 	vmov	d7, r2, r3
 8005c10:	eeb0 0a47 	vmov.f32	s0, s14
 8005c14:	eef0 0a67 	vmov.f32	s1, s15
 8005c18:	f00e f822 	bl	8013c60 <round>
 8005c1c:	ec51 0b10 	vmov	r0, r1, d0
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	4b06      	ldr	r3, [pc, #24]	@ (8005c40 <round2+0x50>)
 8005c26:	f7fa fe31 	bl	800088c <__aeabi_ddiv>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	ec43 2b17 	vmov	d7, r2, r3
}
 8005c32:	eeb0 0a47 	vmov.f32	s0, s14
 8005c36:	eef0 0a67 	vmov.f32	s1, s15
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	40590000 	.word	0x40590000

08005c44 <addDataPacketSit>:
  normal_paket[56] = check_sum_hesapla_normal(56); // Check_sum = check_sum_hesapla();
  normal_paket[57] = 0x0D; // Sabit
  normal_paket[58] = 0x0A;
}

void addDataPacketSit(BME_280_t* BME, bmi088_struct_t* BMI){
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08a      	sub	sp, #40	@ 0x28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  sit_paket[0] = 0xAB; // Sabit
 8005c4e:	4b8f      	ldr	r3, [pc, #572]	@ (8005e8c <addDataPacketSit+0x248>)
 8005c50:	22ab      	movs	r2, #171	@ 0xab
 8005c52:	701a      	strb	r2, [r3, #0]

  FLOAT32_UINT8_DONUSTURUCU irtifa_float32_uint8_donusturucu;
  irtifa_float32_uint8_donusturucu.sayi = (float)round2(BME->base_altitude + BME->altitude); // Irtifa degerinin atamasini yapiyoruz.
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	edd3 7a08 	vldr	s15, [r3, #32]
 8005c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c64:	ee17 0a90 	vmov	r0, s15
 8005c68:	f7fa fc8e 	bl	8000588 <__aeabi_f2d>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	ec43 2b10 	vmov	d0, r2, r3
 8005c74:	f7ff ffbc 	bl	8005bf0 <round2>
 8005c78:	ec53 2b10 	vmov	r2, r3, d0
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	4619      	mov	r1, r3
 8005c80:	f7fa ffd2 	bl	8000c28 <__aeabi_d2f>
 8005c84:	4603      	mov	r3, r0
 8005c86:	627b      	str	r3, [r7, #36]	@ 0x24
  sit_paket[1] = irtifa_float32_uint8_donusturucu.array[3];
 8005c88:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005c8c:	4b7f      	ldr	r3, [pc, #508]	@ (8005e8c <addDataPacketSit+0x248>)
 8005c8e:	705a      	strb	r2, [r3, #1]
  sit_paket[2] = irtifa_float32_uint8_donusturucu.array[2];
 8005c90:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005c94:	4b7d      	ldr	r3, [pc, #500]	@ (8005e8c <addDataPacketSit+0x248>)
 8005c96:	709a      	strb	r2, [r3, #2]
  sit_paket[3] = irtifa_float32_uint8_donusturucu.array[1];
 8005c98:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8005c9c:	4b7b      	ldr	r3, [pc, #492]	@ (8005e8c <addDataPacketSit+0x248>)
 8005c9e:	70da      	strb	r2, [r3, #3]
  sit_paket[4] = irtifa_float32_uint8_donusturucu.array[0];
 8005ca0:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005ca4:	4b79      	ldr	r3, [pc, #484]	@ (8005e8c <addDataPacketSit+0x248>)
 8005ca6:	711a      	strb	r2, [r3, #4]

  FLOAT32_UINT8_DONUSTURUCU basinc_float32_uint8_donusturucu;
  basinc_float32_uint8_donusturucu.sayi = (float)round2(BME->pressure); // Roket GPS Irtifa degerinin atamasini yapiyoruz.
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fa fc6b 	bl	8000588 <__aeabi_f2d>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	ec43 2b10 	vmov	d0, r2, r3
 8005cba:	f7ff ff99 	bl	8005bf0 <round2>
 8005cbe:	ec53 2b10 	vmov	r2, r3, d0
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	f7fa ffaf 	bl	8000c28 <__aeabi_d2f>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	623b      	str	r3, [r7, #32]
  sit_paket[5] = basinc_float32_uint8_donusturucu.array[3];
 8005cce:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005cd2:	4b6e      	ldr	r3, [pc, #440]	@ (8005e8c <addDataPacketSit+0x248>)
 8005cd4:	715a      	strb	r2, [r3, #5]
  sit_paket[6] = basinc_float32_uint8_donusturucu.array[2];
 8005cd6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8005cda:	4b6c      	ldr	r3, [pc, #432]	@ (8005e8c <addDataPacketSit+0x248>)
 8005cdc:	719a      	strb	r2, [r3, #6]
  sit_paket[7] = basinc_float32_uint8_donusturucu.array[1];
 8005cde:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8005ce2:	4b6a      	ldr	r3, [pc, #424]	@ (8005e8c <addDataPacketSit+0x248>)
 8005ce4:	71da      	strb	r2, [r3, #7]
  sit_paket[8] = basinc_float32_uint8_donusturucu.array[0];
 8005ce6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005cea:	4b68      	ldr	r3, [pc, #416]	@ (8005e8c <addDataPacketSit+0x248>)
 8005cec:	721a      	strb	r2, [r3, #8]

  FLOAT32_UINT8_DONUSTURUCU ivme_x_float32_uint8_donusturucu;
  ivme_x_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.acc_x); // Ivme X degerinin atamasini yapiyoruz.
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fa fc48 	bl	8000588 <__aeabi_f2d>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	ec43 2b10 	vmov	d0, r2, r3
 8005d00:	f7ff ff76 	bl	8005bf0 <round2>
 8005d04:	ec53 2b10 	vmov	r2, r3, d0
 8005d08:	4610      	mov	r0, r2
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	f7fa ff8c 	bl	8000c28 <__aeabi_d2f>
 8005d10:	4603      	mov	r3, r0
 8005d12:	61fb      	str	r3, [r7, #28]
  sit_paket[9] = ivme_x_float32_uint8_donusturucu.array[3];
 8005d14:	7ffa      	ldrb	r2, [r7, #31]
 8005d16:	4b5d      	ldr	r3, [pc, #372]	@ (8005e8c <addDataPacketSit+0x248>)
 8005d18:	725a      	strb	r2, [r3, #9]
  sit_paket[10] = ivme_x_float32_uint8_donusturucu.array[2];
 8005d1a:	7fba      	ldrb	r2, [r7, #30]
 8005d1c:	4b5b      	ldr	r3, [pc, #364]	@ (8005e8c <addDataPacketSit+0x248>)
 8005d1e:	729a      	strb	r2, [r3, #10]
  sit_paket[11] = ivme_x_float32_uint8_donusturucu.array[1];
 8005d20:	7f7a      	ldrb	r2, [r7, #29]
 8005d22:	4b5a      	ldr	r3, [pc, #360]	@ (8005e8c <addDataPacketSit+0x248>)
 8005d24:	72da      	strb	r2, [r3, #11]
  sit_paket[12] = ivme_x_float32_uint8_donusturucu.array[0];
 8005d26:	7f3a      	ldrb	r2, [r7, #28]
 8005d28:	4b58      	ldr	r3, [pc, #352]	@ (8005e8c <addDataPacketSit+0x248>)
 8005d2a:	731a      	strb	r2, [r3, #12]

  FLOAT32_UINT8_DONUSTURUCU ivme_y_float32_uint8_donusturucu;
  ivme_y_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.acc_y); // Ivme Y degerinin atamasini yapiyoruz.
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7fa fc29 	bl	8000588 <__aeabi_f2d>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	ec43 2b10 	vmov	d0, r2, r3
 8005d3e:	f7ff ff57 	bl	8005bf0 <round2>
 8005d42:	ec53 2b10 	vmov	r2, r3, d0
 8005d46:	4610      	mov	r0, r2
 8005d48:	4619      	mov	r1, r3
 8005d4a:	f7fa ff6d 	bl	8000c28 <__aeabi_d2f>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	61bb      	str	r3, [r7, #24]
  sit_paket[13] = ivme_y_float32_uint8_donusturucu.array[3];
 8005d52:	7efa      	ldrb	r2, [r7, #27]
 8005d54:	4b4d      	ldr	r3, [pc, #308]	@ (8005e8c <addDataPacketSit+0x248>)
 8005d56:	735a      	strb	r2, [r3, #13]
  sit_paket[14] = ivme_y_float32_uint8_donusturucu.array[2];
 8005d58:	7eba      	ldrb	r2, [r7, #26]
 8005d5a:	4b4c      	ldr	r3, [pc, #304]	@ (8005e8c <addDataPacketSit+0x248>)
 8005d5c:	739a      	strb	r2, [r3, #14]
  sit_paket[15] = ivme_y_float32_uint8_donusturucu.array[1];
 8005d5e:	7e7a      	ldrb	r2, [r7, #25]
 8005d60:	4b4a      	ldr	r3, [pc, #296]	@ (8005e8c <addDataPacketSit+0x248>)
 8005d62:	73da      	strb	r2, [r3, #15]
  sit_paket[16] = ivme_y_float32_uint8_donusturucu.array[0];
 8005d64:	7e3a      	ldrb	r2, [r7, #24]
 8005d66:	4b49      	ldr	r3, [pc, #292]	@ (8005e8c <addDataPacketSit+0x248>)
 8005d68:	741a      	strb	r2, [r3, #16]

  FLOAT32_UINT8_DONUSTURUCU ivme_z_float32_uint8_donusturucu;
  ivme_z_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.acc_z); // Ivme Z degerinin atamasini yapiyoruz.
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fa fc0a 	bl	8000588 <__aeabi_f2d>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	ec43 2b10 	vmov	d0, r2, r3
 8005d7c:	f7ff ff38 	bl	8005bf0 <round2>
 8005d80:	ec53 2b10 	vmov	r2, r3, d0
 8005d84:	4610      	mov	r0, r2
 8005d86:	4619      	mov	r1, r3
 8005d88:	f7fa ff4e 	bl	8000c28 <__aeabi_d2f>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	617b      	str	r3, [r7, #20]
  sit_paket[17] = ivme_z_float32_uint8_donusturucu.array[3];
 8005d90:	7dfa      	ldrb	r2, [r7, #23]
 8005d92:	4b3e      	ldr	r3, [pc, #248]	@ (8005e8c <addDataPacketSit+0x248>)
 8005d94:	745a      	strb	r2, [r3, #17]
  sit_paket[18] = ivme_z_float32_uint8_donusturucu.array[2];
 8005d96:	7dba      	ldrb	r2, [r7, #22]
 8005d98:	4b3c      	ldr	r3, [pc, #240]	@ (8005e8c <addDataPacketSit+0x248>)
 8005d9a:	749a      	strb	r2, [r3, #18]
  sit_paket[19] = ivme_z_float32_uint8_donusturucu.array[1];
 8005d9c:	7d7a      	ldrb	r2, [r7, #21]
 8005d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8005e8c <addDataPacketSit+0x248>)
 8005da0:	74da      	strb	r2, [r3, #19]
  sit_paket[20] = ivme_z_float32_uint8_donusturucu.array[0];
 8005da2:	7d3a      	ldrb	r2, [r7, #20]
 8005da4:	4b39      	ldr	r3, [pc, #228]	@ (8005e8c <addDataPacketSit+0x248>)
 8005da6:	751a      	strb	r2, [r3, #20]

  FLOAT32_UINT8_DONUSTURUCU jiroskop_x_float32_uint8_donusturucu;
  jiroskop_x_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.angle_x); // Jiroskop X degerinin atamasini yapiyoruz.
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fa fbeb 	bl	8000588 <__aeabi_f2d>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	ec43 2b10 	vmov	d0, r2, r3
 8005dba:	f7ff ff19 	bl	8005bf0 <round2>
 8005dbe:	ec53 2b10 	vmov	r2, r3, d0
 8005dc2:	4610      	mov	r0, r2
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	f7fa ff2f 	bl	8000c28 <__aeabi_d2f>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	613b      	str	r3, [r7, #16]
  sit_paket[21] = jiroskop_x_float32_uint8_donusturucu.array[3];
 8005dce:	7cfa      	ldrb	r2, [r7, #19]
 8005dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8005e8c <addDataPacketSit+0x248>)
 8005dd2:	755a      	strb	r2, [r3, #21]
  sit_paket[22] = jiroskop_x_float32_uint8_donusturucu.array[2];
 8005dd4:	7cba      	ldrb	r2, [r7, #18]
 8005dd6:	4b2d      	ldr	r3, [pc, #180]	@ (8005e8c <addDataPacketSit+0x248>)
 8005dd8:	759a      	strb	r2, [r3, #22]
  sit_paket[23] = jiroskop_x_float32_uint8_donusturucu.array[1];
 8005dda:	7c7a      	ldrb	r2, [r7, #17]
 8005ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8005e8c <addDataPacketSit+0x248>)
 8005dde:	75da      	strb	r2, [r3, #23]
  sit_paket[24] = jiroskop_x_float32_uint8_donusturucu.array[0];
 8005de0:	7c3a      	ldrb	r2, [r7, #16]
 8005de2:	4b2a      	ldr	r3, [pc, #168]	@ (8005e8c <addDataPacketSit+0x248>)
 8005de4:	761a      	strb	r2, [r3, #24]

  FLOAT32_UINT8_DONUSTURUCU jiroskop_y_float32_uint8_donusturucu;
  jiroskop_y_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.angle_y); // Jiroskop Y degerinin atamasini yapiyoruz.
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fa fbcc 	bl	8000588 <__aeabi_f2d>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	ec43 2b10 	vmov	d0, r2, r3
 8005df8:	f7ff fefa 	bl	8005bf0 <round2>
 8005dfc:	ec53 2b10 	vmov	r2, r3, d0
 8005e00:	4610      	mov	r0, r2
 8005e02:	4619      	mov	r1, r3
 8005e04:	f7fa ff10 	bl	8000c28 <__aeabi_d2f>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	60fb      	str	r3, [r7, #12]
  sit_paket[25] = jiroskop_y_float32_uint8_donusturucu.array[3];
 8005e0c:	7bfa      	ldrb	r2, [r7, #15]
 8005e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8005e8c <addDataPacketSit+0x248>)
 8005e10:	765a      	strb	r2, [r3, #25]
  sit_paket[26] = jiroskop_y_float32_uint8_donusturucu.array[2];
 8005e12:	7bba      	ldrb	r2, [r7, #14]
 8005e14:	4b1d      	ldr	r3, [pc, #116]	@ (8005e8c <addDataPacketSit+0x248>)
 8005e16:	769a      	strb	r2, [r3, #26]
  sit_paket[27] = jiroskop_y_float32_uint8_donusturucu.array[1];
 8005e18:	7b7a      	ldrb	r2, [r7, #13]
 8005e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8005e8c <addDataPacketSit+0x248>)
 8005e1c:	76da      	strb	r2, [r3, #27]
  sit_paket[28] = jiroskop_y_float32_uint8_donusturucu.array[0];
 8005e1e:	7b3a      	ldrb	r2, [r7, #12]
 8005e20:	4b1a      	ldr	r3, [pc, #104]	@ (8005e8c <addDataPacketSit+0x248>)
 8005e22:	771a      	strb	r2, [r3, #28]
  FLOAT32_UINT8_DONUSTURUCU jiroskop_z_float32_uint8_donusturucu;
  jiroskop_z_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.angle_z); // Jiroskop Z degerinin atamasini yapiyoruz.
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fa fbad 	bl	8000588 <__aeabi_f2d>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	ec43 2b10 	vmov	d0, r2, r3
 8005e36:	f7ff fedb 	bl	8005bf0 <round2>
 8005e3a:	ec53 2b10 	vmov	r2, r3, d0
 8005e3e:	4610      	mov	r0, r2
 8005e40:	4619      	mov	r1, r3
 8005e42:	f7fa fef1 	bl	8000c28 <__aeabi_d2f>
 8005e46:	4603      	mov	r3, r0
 8005e48:	60bb      	str	r3, [r7, #8]
  sit_paket[29] = jiroskop_z_float32_uint8_donusturucu.array[3];
 8005e4a:	7afa      	ldrb	r2, [r7, #11]
 8005e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e8c <addDataPacketSit+0x248>)
 8005e4e:	775a      	strb	r2, [r3, #29]
  sit_paket[30] = jiroskop_z_float32_uint8_donusturucu.array[2];
 8005e50:	7aba      	ldrb	r2, [r7, #10]
 8005e52:	4b0e      	ldr	r3, [pc, #56]	@ (8005e8c <addDataPacketSit+0x248>)
 8005e54:	779a      	strb	r2, [r3, #30]
  sit_paket[31] = jiroskop_z_float32_uint8_donusturucu.array[1];
 8005e56:	7a7a      	ldrb	r2, [r7, #9]
 8005e58:	4b0c      	ldr	r3, [pc, #48]	@ (8005e8c <addDataPacketSit+0x248>)
 8005e5a:	77da      	strb	r2, [r3, #31]
  sit_paket[32] = jiroskop_z_float32_uint8_donusturucu.array[0];
 8005e5c:	7a3a      	ldrb	r2, [r7, #8]
 8005e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e8c <addDataPacketSit+0x248>)
 8005e60:	f883 2020 	strb.w	r2, [r3, #32]

  sit_paket[33] = check_sum_hesapla_sit(33); // Check_sum = check_sum_hesapla();
 8005e64:	2021      	movs	r0, #33	@ 0x21
 8005e66:	f7ff fe9b 	bl	8005ba0 <check_sum_hesapla_sit>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	4b07      	ldr	r3, [pc, #28]	@ (8005e8c <addDataPacketSit+0x248>)
 8005e70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  sit_paket[34] = 0x0D;
 8005e74:	4b05      	ldr	r3, [pc, #20]	@ (8005e8c <addDataPacketSit+0x248>)
 8005e76:	220d      	movs	r2, #13
 8005e78:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  sit_paket[35] = 0x0A;
 8005e7c:	4b03      	ldr	r3, [pc, #12]	@ (8005e8c <addDataPacketSit+0x248>)
 8005e7e:	220a      	movs	r2, #10
 8005e80:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

}
 8005e84:	bf00      	nop
 8005e86:	3728      	adds	r7, #40	@ 0x28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	20001734 	.word	0x20001734

08005e90 <uint8_arrayi_float32_ye_donustur>:

float uint8_arrayi_float32_ye_donustur(uint8_t byte_array_u8[4]) {
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
    FLOAT32_UINT8_DONUSTURUCU float32_uint8_donusturucu;
    float32_uint8_donusturucu.array[0] = byte_array_u8[3];
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	78db      	ldrb	r3, [r3, #3]
 8005e9c:	733b      	strb	r3, [r7, #12]
    float32_uint8_donusturucu.array[1] = byte_array_u8[2];
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	789b      	ldrb	r3, [r3, #2]
 8005ea2:	737b      	strb	r3, [r7, #13]
    float32_uint8_donusturucu.array[2] = byte_array_u8[1];
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	73bb      	strb	r3, [r7, #14]
    float32_uint8_donusturucu.array[3] = byte_array_u8[0];
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	73fb      	strb	r3, [r7, #15]
    return float32_uint8_donusturucu.sayi;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	ee07 3a90 	vmov	s15, r3
}
 8005eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <ekf_predict>:
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++)
            P[i][j] = (i == j) ? 1e-3f : 0.0f;
}

void ekf_predict(float gx, float gy, float gz, float dt) {
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b09e      	sub	sp, #120	@ 0x78
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	ed87 0a03 	vstr	s0, [r7, #12]
 8005ece:	edc7 0a02 	vstr	s1, [r7, #8]
 8005ed2:	ed87 1a01 	vstr	s2, [r7, #4]
 8005ed6:	edc7 1a00 	vstr	s3, [r7]

    // Gyro'dan omega matrisi
    float Omega[4][4] = {
 8005eda:	f04f 0300 	mov.w	r3, #0
 8005ede:	623b      	str	r3, [r7, #32]
        {0, -gx, -gy, -gz},
 8005ee0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ee4:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005ee8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        {0, -gx, -gy, -gz},
 8005eec:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ef0:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005ef4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        {0, -gx, -gy, -gz},
 8005ef8:	edd7 7a01 	vldr	s15, [r7, #4]
 8005efc:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005f00:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f08:	f04f 0300 	mov.w	r3, #0
 8005f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	63bb      	str	r3, [r7, #56]	@ 0x38
        {gx,  0,  gz, -gy},
 8005f12:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f16:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005f1a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	643b      	str	r3, [r7, #64]	@ 0x40
        {gy, -gz,  0,  gx},
 8005f22:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f26:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005f2a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8005f2e:	f04f 0300 	mov.w	r3, #0
 8005f32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	657b      	str	r3, [r7, #84]	@ 0x54
        {gz,  gy, -gx,  0}
 8005f40:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f44:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005f48:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
    };

    // dq = 0.5 * Omega * q
    float dq[4] = {0};
 8005f52:	f107 0310 	add.w	r3, r7, #16
 8005f56:	2200      	movs	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	605a      	str	r2, [r3, #4]
 8005f5c:	609a      	str	r2, [r3, #8]
 8005f5e:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < 4; i++) {
 8005f60:	2300      	movs	r3, #0
 8005f62:	677b      	str	r3, [r7, #116]	@ 0x74
 8005f64:	e043      	b.n	8005fee <ekf_predict+0x12a>
        for (int j = 0; j < 4; j++) {
 8005f66:	2300      	movs	r3, #0
 8005f68:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f6a:	e024      	b.n	8005fb6 <ekf_predict+0xf2>
            dq[i] += Omega[i][j] * q[j];
 8005f6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	3378      	adds	r3, #120	@ 0x78
 8005f72:	443b      	add	r3, r7
 8005f74:	3b68      	subs	r3, #104	@ 0x68
 8005f76:	ed93 7a00 	vldr	s14, [r3]
 8005f7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f7c:	009a      	lsls	r2, r3, #2
 8005f7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	3378      	adds	r3, #120	@ 0x78
 8005f86:	443b      	add	r3, r7
 8005f88:	3b58      	subs	r3, #88	@ 0x58
 8005f8a:	edd3 6a00 	vldr	s13, [r3]
 8005f8e:	4a5d      	ldr	r2, [pc, #372]	@ (8006104 <ekf_predict+0x240>)
 8005f90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	edd3 7a00 	vldr	s15, [r3]
 8005f9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	3378      	adds	r3, #120	@ 0x78
 8005fa8:	443b      	add	r3, r7
 8005faa:	3b68      	subs	r3, #104	@ 0x68
 8005fac:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 4; j++) {
 8005fb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	ddd7      	ble.n	8005f6c <ekf_predict+0xa8>
        }
        dq[i] *= 0.5f * dt;
 8005fbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	3378      	adds	r3, #120	@ 0x78
 8005fc2:	443b      	add	r3, r7
 8005fc4:	3b68      	subs	r3, #104	@ 0x68
 8005fc6:	ed93 7a00 	vldr	s14, [r3]
 8005fca:	edd7 7a00 	vldr	s15, [r7]
 8005fce:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8005fd2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	3378      	adds	r3, #120	@ 0x78
 8005fe0:	443b      	add	r3, r7
 8005fe2:	3b68      	subs	r3, #104	@ 0x68
 8005fe4:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 8005fe8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fea:	3301      	adds	r3, #1
 8005fec:	677b      	str	r3, [r7, #116]	@ 0x74
 8005fee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ff0:	2b03      	cmp	r3, #3
 8005ff2:	ddb8      	ble.n	8005f66 <ekf_predict+0xa2>
    }

    // q = q + dq
    for (int i = 0; i < 4; i++)
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ff8:	e017      	b.n	800602a <ekf_predict+0x166>
        q[i] += dq[i];
 8005ffa:	4a42      	ldr	r2, [pc, #264]	@ (8006104 <ekf_predict+0x240>)
 8005ffc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	ed93 7a00 	vldr	s14, [r3]
 8006006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	3378      	adds	r3, #120	@ 0x78
 800600c:	443b      	add	r3, r7
 800600e:	3b68      	subs	r3, #104	@ 0x68
 8006010:	edd3 7a00 	vldr	s15, [r3]
 8006014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006018:	4a3a      	ldr	r2, [pc, #232]	@ (8006104 <ekf_predict+0x240>)
 800601a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8006024:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006026:	3301      	adds	r3, #1
 8006028:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800602a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800602c:	2b03      	cmp	r3, #3
 800602e:	dde4      	ble.n	8005ffa <ekf_predict+0x136>

    // Normalize
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8006030:	4b34      	ldr	r3, [pc, #208]	@ (8006104 <ekf_predict+0x240>)
 8006032:	ed93 7a00 	vldr	s14, [r3]
 8006036:	4b33      	ldr	r3, [pc, #204]	@ (8006104 <ekf_predict+0x240>)
 8006038:	edd3 7a00 	vldr	s15, [r3]
 800603c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006040:	4b30      	ldr	r3, [pc, #192]	@ (8006104 <ekf_predict+0x240>)
 8006042:	edd3 6a01 	vldr	s13, [r3, #4]
 8006046:	4b2f      	ldr	r3, [pc, #188]	@ (8006104 <ekf_predict+0x240>)
 8006048:	edd3 7a01 	vldr	s15, [r3, #4]
 800604c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006054:	4b2b      	ldr	r3, [pc, #172]	@ (8006104 <ekf_predict+0x240>)
 8006056:	edd3 6a02 	vldr	s13, [r3, #8]
 800605a:	4b2a      	ldr	r3, [pc, #168]	@ (8006104 <ekf_predict+0x240>)
 800605c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006064:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006068:	4b26      	ldr	r3, [pc, #152]	@ (8006104 <ekf_predict+0x240>)
 800606a:	edd3 6a03 	vldr	s13, [r3, #12]
 800606e:	4b25      	ldr	r3, [pc, #148]	@ (8006104 <ekf_predict+0x240>)
 8006070:	edd3 7a03 	vldr	s15, [r3, #12]
 8006074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800607c:	eeb0 0a67 	vmov.f32	s0, s15
 8006080:	f00d f8fa 	bl	8013278 <sqrtf>
 8006084:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
    for (int i = 0; i < 4; i++)
 8006088:	2300      	movs	r3, #0
 800608a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800608c:	e012      	b.n	80060b4 <ekf_predict+0x1f0>
        q[i] /= norm;
 800608e:	4a1d      	ldr	r2, [pc, #116]	@ (8006104 <ekf_predict+0x240>)
 8006090:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	edd3 6a00 	vldr	s13, [r3]
 800609a:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800609e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060a2:	4a18      	ldr	r2, [pc, #96]	@ (8006104 <ekf_predict+0x240>)
 80060a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 80060ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060b0:	3301      	adds	r3, #1
 80060b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	dde9      	ble.n	800608e <ekf_predict+0x1ca>

    // P = P + Q
    for (int i = 0; i < 4; i++)
 80060ba:	2300      	movs	r3, #0
 80060bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80060be:	e018      	b.n	80060f2 <ekf_predict+0x22e>
        P[i][i] += Q_val;
 80060c0:	4911      	ldr	r1, [pc, #68]	@ (8006108 <ekf_predict+0x244>)
 80060c2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	440b      	add	r3, r1
 80060ce:	edd3 7a00 	vldr	s15, [r3]
 80060d2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800610c <ekf_predict+0x248>
 80060d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060da:	490b      	ldr	r1, [pc, #44]	@ (8006108 <ekf_predict+0x244>)
 80060dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80060de:	4613      	mov	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	440b      	add	r3, r1
 80060e8:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 80060ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060ee:	3301      	adds	r3, #1
 80060f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80060f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	dde3      	ble.n	80060c0 <ekf_predict+0x1fc>
}
 80060f8:	bf00      	nop
 80060fa:	bf00      	nop
 80060fc:	3778      	adds	r7, #120	@ 0x78
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20000018 	.word	0x20000018
 8006108:	20001758 	.word	0x20001758
 800610c:	3727c5ac 	.word	0x3727c5ac

08006110 <quaternionToYaw1>:

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
    return acosf(safeValue) * (180.0f / 3.14f);
}

float quaternionToYaw1(){
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 8006116:	4b2a      	ldr	r3, [pc, #168]	@ (80061c0 <quaternionToYaw1+0xb0>)
 8006118:	ed93 7a01 	vldr	s14, [r3, #4]
 800611c:	4b28      	ldr	r3, [pc, #160]	@ (80061c0 <quaternionToYaw1+0xb0>)
 800611e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006122:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006126:	4b26      	ldr	r3, [pc, #152]	@ (80061c0 <quaternionToYaw1+0xb0>)
 8006128:	edd3 6a00 	vldr	s13, [r3]
 800612c:	4b24      	ldr	r3, [pc, #144]	@ (80061c0 <quaternionToYaw1+0xb0>)
 800612e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006132:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800613a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800613e:	4b20      	ldr	r3, [pc, #128]	@ (80061c0 <quaternionToYaw1+0xb0>)
 8006140:	ed93 7a00 	vldr	s14, [r3]
 8006144:	4b1e      	ldr	r3, [pc, #120]	@ (80061c0 <quaternionToYaw1+0xb0>)
 8006146:	edd3 7a00 	vldr	s15, [r3]
 800614a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800614e:	4b1c      	ldr	r3, [pc, #112]	@ (80061c0 <quaternionToYaw1+0xb0>)
 8006150:	edd3 6a01 	vldr	s13, [r3, #4]
 8006154:	4b1a      	ldr	r3, [pc, #104]	@ (80061c0 <quaternionToYaw1+0xb0>)
 8006156:	edd3 7a01 	vldr	s15, [r3, #4]
 800615a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800615e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006162:	4b17      	ldr	r3, [pc, #92]	@ (80061c0 <quaternionToYaw1+0xb0>)
 8006164:	edd3 6a02 	vldr	s13, [r3, #8]
 8006168:	4b15      	ldr	r3, [pc, #84]	@ (80061c0 <quaternionToYaw1+0xb0>)
 800616a:	edd3 7a02 	vldr	s15, [r3, #8]
 800616e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006172:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006176:	4b12      	ldr	r3, [pc, #72]	@ (80061c0 <quaternionToYaw1+0xb0>)
 8006178:	edd3 6a03 	vldr	s13, [r3, #12]
 800617c:	4b10      	ldr	r3, [pc, #64]	@ (80061c0 <quaternionToYaw1+0xb0>)
 800617e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800618a:	eef0 0a67 	vmov.f32	s1, s15
 800618e:	eeb0 0a46 	vmov.f32	s0, s12
 8006192:	f00d f86f 	bl	8013274 <atan2f>
 8006196:	eef0 7a40 	vmov.f32	s15, s0
 800619a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80061c4 <quaternionToYaw1+0xb4>
 800619e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80061a2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80061c8 <quaternionToYaw1+0xb8>
 80061a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061aa:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	ee07 3a90 	vmov	s15, r3
}
 80061b4:	eeb0 0a67 	vmov.f32	s0, s15
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000018 	.word	0x20000018
 80061c4:	43340000 	.word	0x43340000
 80061c8:	40490fd0 	.word	0x40490fd0

080061cc <quaternionToPitch1>:

float quaternionToPitch1(){
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 80061d2:	4b17      	ldr	r3, [pc, #92]	@ (8006230 <quaternionToPitch1+0x64>)
 80061d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80061d8:	4b15      	ldr	r3, [pc, #84]	@ (8006230 <quaternionToPitch1+0x64>)
 80061da:	edd3 7a03 	vldr	s15, [r3, #12]
 80061de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061e2:	4b13      	ldr	r3, [pc, #76]	@ (8006230 <quaternionToPitch1+0x64>)
 80061e4:	edd3 6a00 	vldr	s13, [r3]
 80061e8:	4b11      	ldr	r3, [pc, #68]	@ (8006230 <quaternionToPitch1+0x64>)
 80061ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80061ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80061fa:	eeb0 0a67 	vmov.f32	s0, s15
 80061fe:	f00d f80d 	bl	801321c <asinf>
 8006202:	eef0 7a40 	vmov.f32	s15, s0
 8006206:	eef1 7a67 	vneg.f32	s15, s15
 800620a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006234 <quaternionToPitch1+0x68>
 800620e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006212:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006238 <quaternionToPitch1+0x6c>
 8006216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800621a:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	ee07 3a90 	vmov	s15, r3
}
 8006224:	eeb0 0a67 	vmov.f32	s0, s15
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20000018 	.word	0x20000018
 8006234:	43340000 	.word	0x43340000
 8006238:	40490fd0 	.word	0x40490fd0

0800623c <quaternionToRoll1>:

float quaternionToRoll1(){
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 8006242:	4b2a      	ldr	r3, [pc, #168]	@ (80062ec <quaternionToRoll1+0xb0>)
 8006244:	ed93 7a00 	vldr	s14, [r3]
 8006248:	4b28      	ldr	r3, [pc, #160]	@ (80062ec <quaternionToRoll1+0xb0>)
 800624a:	edd3 7a01 	vldr	s15, [r3, #4]
 800624e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006252:	4b26      	ldr	r3, [pc, #152]	@ (80062ec <quaternionToRoll1+0xb0>)
 8006254:	edd3 6a02 	vldr	s13, [r3, #8]
 8006258:	4b24      	ldr	r3, [pc, #144]	@ (80062ec <quaternionToRoll1+0xb0>)
 800625a:	edd3 7a03 	vldr	s15, [r3, #12]
 800625e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006266:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800626a:	4b20      	ldr	r3, [pc, #128]	@ (80062ec <quaternionToRoll1+0xb0>)
 800626c:	ed93 7a00 	vldr	s14, [r3]
 8006270:	4b1e      	ldr	r3, [pc, #120]	@ (80062ec <quaternionToRoll1+0xb0>)
 8006272:	edd3 7a00 	vldr	s15, [r3]
 8006276:	ee27 7a27 	vmul.f32	s14, s14, s15
 800627a:	4b1c      	ldr	r3, [pc, #112]	@ (80062ec <quaternionToRoll1+0xb0>)
 800627c:	edd3 6a01 	vldr	s13, [r3, #4]
 8006280:	4b1a      	ldr	r3, [pc, #104]	@ (80062ec <quaternionToRoll1+0xb0>)
 8006282:	edd3 7a01 	vldr	s15, [r3, #4]
 8006286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800628a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800628e:	4b17      	ldr	r3, [pc, #92]	@ (80062ec <quaternionToRoll1+0xb0>)
 8006290:	edd3 6a02 	vldr	s13, [r3, #8]
 8006294:	4b15      	ldr	r3, [pc, #84]	@ (80062ec <quaternionToRoll1+0xb0>)
 8006296:	edd3 7a02 	vldr	s15, [r3, #8]
 800629a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800629e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062a2:	4b12      	ldr	r3, [pc, #72]	@ (80062ec <quaternionToRoll1+0xb0>)
 80062a4:	edd3 6a03 	vldr	s13, [r3, #12]
 80062a8:	4b10      	ldr	r3, [pc, #64]	@ (80062ec <quaternionToRoll1+0xb0>)
 80062aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80062ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062b6:	eef0 0a67 	vmov.f32	s1, s15
 80062ba:	eeb0 0a46 	vmov.f32	s0, s12
 80062be:	f00c ffd9 	bl	8013274 <atan2f>
 80062c2:	eef0 7a40 	vmov.f32	s15, s0
 80062c6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80062f0 <quaternionToRoll1+0xb4>
 80062ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80062ce:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80062f4 <quaternionToRoll1+0xb8>
 80062d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062d6:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	ee07 3a90 	vmov	s15, r3
}
 80062e0:	eeb0 0a67 	vmov.f32	s0, s15
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	20000018 	.word	0x20000018
 80062f0:	43340000 	.word	0x43340000
 80062f4:	40490fd0 	.word	0x40490fd0

080062f8 <quaternionToYawDegree1>:

float quaternionToYawDegree1(){
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 80062fe:	4b20      	ldr	r3, [pc, #128]	@ (8006380 <quaternionToYawDegree1+0x88>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	4b1e      	ldr	r3, [pc, #120]	@ (8006380 <quaternionToYawDegree1+0x88>)
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	613b      	str	r3, [r7, #16]
 800630a:	4b1d      	ldr	r3, [pc, #116]	@ (8006380 <quaternionToYawDegree1+0x88>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	4b1b      	ldr	r3, [pc, #108]	@ (8006380 <quaternionToYawDegree1+0x88>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	60bb      	str	r3, [r7, #8]
    float siny_cosp = 2.0f * (w * z + x * y);
 8006316:	ed97 7a05 	vldr	s14, [r7, #20]
 800631a:	edd7 7a02 	vldr	s15, [r7, #8]
 800631e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006322:	edd7 6a04 	vldr	s13, [r7, #16]
 8006326:	edd7 7a03 	vldr	s15, [r7, #12]
 800632a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800632e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006332:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006336:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
 800633a:	edd7 7a03 	vldr	s15, [r7, #12]
 800633e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006342:	edd7 7a02 	vldr	s15, [r7, #8]
 8006346:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800634a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800634e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006352:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800635a:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
 800635e:	edd7 0a00 	vldr	s1, [r7]
 8006362:	ed97 0a01 	vldr	s0, [r7, #4]
 8006366:	f00c ff85 	bl	8013274 <atan2f>
 800636a:	eef0 7a40 	vmov.f32	s15, s0
 800636e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006384 <quaternionToYawDegree1+0x8c>
 8006372:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006376:	eeb0 0a67 	vmov.f32	s0, s15
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	20000018 	.word	0x20000018
 8006384:	42652ee0 	.word	0x42652ee0

08006388 <UpdateMahonyGains>:

uint8_t Gain = 0;
uint8_t gyroOnlyMode = 0;


void UpdateMahonyGains(float ax, float ay, float az) {
 8006388:	b580      	push	{r7, lr}
 800638a:	b08c      	sub	sp, #48	@ 0x30
 800638c:	af00      	add	r7, sp, #0
 800638e:	ed87 0a03 	vstr	s0, [r7, #12]
 8006392:	edc7 0a02 	vstr	s1, [r7, #8]
 8006396:	ed87 1a01 	vstr	s2, [r7, #4]
    // Quaternion normalize edilmemişse gravity yön tahmini hatalı olur
    float norm_q = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 800639a:	4bd5      	ldr	r3, [pc, #852]	@ (80066f0 <UpdateMahonyGains+0x368>)
 800639c:	ed93 7a00 	vldr	s14, [r3]
 80063a0:	4bd3      	ldr	r3, [pc, #844]	@ (80066f0 <UpdateMahonyGains+0x368>)
 80063a2:	edd3 7a00 	vldr	s15, [r3]
 80063a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063aa:	4bd1      	ldr	r3, [pc, #836]	@ (80066f0 <UpdateMahonyGains+0x368>)
 80063ac:	edd3 6a01 	vldr	s13, [r3, #4]
 80063b0:	4bcf      	ldr	r3, [pc, #828]	@ (80066f0 <UpdateMahonyGains+0x368>)
 80063b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80063b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063be:	4bcc      	ldr	r3, [pc, #816]	@ (80066f0 <UpdateMahonyGains+0x368>)
 80063c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80063c4:	4bca      	ldr	r3, [pc, #808]	@ (80066f0 <UpdateMahonyGains+0x368>)
 80063c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80063ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063d2:	4bc7      	ldr	r3, [pc, #796]	@ (80066f0 <UpdateMahonyGains+0x368>)
 80063d4:	edd3 6a03 	vldr	s13, [r3, #12]
 80063d8:	4bc5      	ldr	r3, [pc, #788]	@ (80066f0 <UpdateMahonyGains+0x368>)
 80063da:	edd3 7a03 	vldr	s15, [r3, #12]
 80063de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063e6:	eeb0 0a67 	vmov.f32	s0, s15
 80063ea:	f00c ff45 	bl	8013278 <sqrtf>
 80063ee:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    if (norm_q == 0.0f) return; // Koruma
 80063f2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80063f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80063fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063fe:	f000 8172 	beq.w	80066e6 <UpdateMahonyGains+0x35e>
    q[0] /= norm_q;
 8006402:	4bbb      	ldr	r3, [pc, #748]	@ (80066f0 <UpdateMahonyGains+0x368>)
 8006404:	edd3 6a00 	vldr	s13, [r3]
 8006408:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800640c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006410:	4bb7      	ldr	r3, [pc, #732]	@ (80066f0 <UpdateMahonyGains+0x368>)
 8006412:	edc3 7a00 	vstr	s15, [r3]
    q[1] /= norm_q;
 8006416:	4bb6      	ldr	r3, [pc, #728]	@ (80066f0 <UpdateMahonyGains+0x368>)
 8006418:	edd3 6a01 	vldr	s13, [r3, #4]
 800641c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8006420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006424:	4bb2      	ldr	r3, [pc, #712]	@ (80066f0 <UpdateMahonyGains+0x368>)
 8006426:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] /= norm_q;
 800642a:	4bb1      	ldr	r3, [pc, #708]	@ (80066f0 <UpdateMahonyGains+0x368>)
 800642c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006430:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8006434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006438:	4bad      	ldr	r3, [pc, #692]	@ (80066f0 <UpdateMahonyGains+0x368>)
 800643a:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] /= norm_q;
 800643e:	4bac      	ldr	r3, [pc, #688]	@ (80066f0 <UpdateMahonyGains+0x368>)
 8006440:	edd3 6a03 	vldr	s13, [r3, #12]
 8006444:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8006448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800644c:	4ba8      	ldr	r3, [pc, #672]	@ (80066f0 <UpdateMahonyGains+0x368>)
 800644e:	edc3 7a03 	vstr	s15, [r3, #12]

    // Gravity yön vektörü (tam vektör formu)
    float gx = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 8006452:	4ba7      	ldr	r3, [pc, #668]	@ (80066f0 <UpdateMahonyGains+0x368>)
 8006454:	ed93 7a01 	vldr	s14, [r3, #4]
 8006458:	4ba5      	ldr	r3, [pc, #660]	@ (80066f0 <UpdateMahonyGains+0x368>)
 800645a:	edd3 7a03 	vldr	s15, [r3, #12]
 800645e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006462:	4ba3      	ldr	r3, [pc, #652]	@ (80066f0 <UpdateMahonyGains+0x368>)
 8006464:	edd3 6a00 	vldr	s13, [r3]
 8006468:	4ba1      	ldr	r3, [pc, #644]	@ (80066f0 <UpdateMahonyGains+0x368>)
 800646a:	edd3 7a02 	vldr	s15, [r3, #8]
 800646e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006476:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800647a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 800647e:	4b9c      	ldr	r3, [pc, #624]	@ (80066f0 <UpdateMahonyGains+0x368>)
 8006480:	ed93 7a00 	vldr	s14, [r3]
 8006484:	4b9a      	ldr	r3, [pc, #616]	@ (80066f0 <UpdateMahonyGains+0x368>)
 8006486:	edd3 7a01 	vldr	s15, [r3, #4]
 800648a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800648e:	4b98      	ldr	r3, [pc, #608]	@ (80066f0 <UpdateMahonyGains+0x368>)
 8006490:	edd3 6a02 	vldr	s13, [r3, #8]
 8006494:	4b96      	ldr	r3, [pc, #600]	@ (80066f0 <UpdateMahonyGains+0x368>)
 8006496:	edd3 7a03 	vldr	s15, [r3, #12]
 800649a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800649e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80064a6:	edc7 7a08 	vstr	s15, [r7, #32]
    float gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 80064aa:	4b91      	ldr	r3, [pc, #580]	@ (80066f0 <UpdateMahonyGains+0x368>)
 80064ac:	ed93 7a00 	vldr	s14, [r3]
 80064b0:	4b8f      	ldr	r3, [pc, #572]	@ (80066f0 <UpdateMahonyGains+0x368>)
 80064b2:	edd3 7a00 	vldr	s15, [r3]
 80064b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064ba:	4b8d      	ldr	r3, [pc, #564]	@ (80066f0 <UpdateMahonyGains+0x368>)
 80064bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80064c0:	4b8b      	ldr	r3, [pc, #556]	@ (80066f0 <UpdateMahonyGains+0x368>)
 80064c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80064c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064ce:	4b88      	ldr	r3, [pc, #544]	@ (80066f0 <UpdateMahonyGains+0x368>)
 80064d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80064d4:	4b86      	ldr	r3, [pc, #536]	@ (80066f0 <UpdateMahonyGains+0x368>)
 80064d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80064da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064e2:	4b83      	ldr	r3, [pc, #524]	@ (80066f0 <UpdateMahonyGains+0x368>)
 80064e4:	edd3 6a03 	vldr	s13, [r3, #12]
 80064e8:	4b81      	ldr	r3, [pc, #516]	@ (80066f0 <UpdateMahonyGains+0x368>)
 80064ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80064ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064f6:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalize gravity tahmini
    float recipNormG = invSqrt(gx * gx + gy * gy + gz * gz);
 80064fa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80064fe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006502:	edd7 7a08 	vldr	s15, [r7, #32]
 8006506:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800650a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800650e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006512:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800651a:	eeb0 0a67 	vmov.f32	s0, s15
 800651e:	f001 f8cb 	bl	80076b8 <invSqrt>
 8006522:	ed87 0a06 	vstr	s0, [r7, #24]
    gx *= recipNormG;
 8006526:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800652a:	edd7 7a06 	vldr	s15, [r7, #24]
 800652e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006532:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy *= recipNormG;
 8006536:	ed97 7a08 	vldr	s14, [r7, #32]
 800653a:	edd7 7a06 	vldr	s15, [r7, #24]
 800653e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006542:	edc7 7a08 	vstr	s15, [r7, #32]
    gz *= recipNormG;
 8006546:	ed97 7a07 	vldr	s14, [r7, #28]
 800654a:	edd7 7a06 	vldr	s15, [r7, #24]
 800654e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006552:	edc7 7a07 	vstr	s15, [r7, #28]

    // İvmeölçer zaten normalize edilmiş olarak gelmeli (gelmiyorsa normalize et!)
    float recipNormA = invSqrt(ax * ax + ay * ay + az * az);
 8006556:	edd7 7a03 	vldr	s15, [r7, #12]
 800655a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800655e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006562:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006566:	ee37 7a27 	vadd.f32	s14, s14, s15
 800656a:	edd7 7a01 	vldr	s15, [r7, #4]
 800656e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006576:	eeb0 0a67 	vmov.f32	s0, s15
 800657a:	f001 f89d 	bl	80076b8 <invSqrt>
 800657e:	ed87 0a05 	vstr	s0, [r7, #20]
    ax *= recipNormA;
 8006582:	ed97 7a03 	vldr	s14, [r7, #12]
 8006586:	edd7 7a05 	vldr	s15, [r7, #20]
 800658a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800658e:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNormA;
 8006592:	ed97 7a02 	vldr	s14, [r7, #8]
 8006596:	edd7 7a05 	vldr	s15, [r7, #20]
 800659a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800659e:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNormA;
 80065a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80065a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80065aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ae:	edc7 7a01 	vstr	s15, [r7, #4]

    // Dot product
    float dot = ax * gx + ay * gy + az * gz;
 80065b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80065b6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80065ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065be:	edd7 6a02 	vldr	s13, [r7, #8]
 80065c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80065c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065ce:	edd7 6a01 	vldr	s13, [r7, #4]
 80065d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80065d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065de:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dot > 1.0f) dot = 1.0f;
 80065e2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80065e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f2:	dd02      	ble.n	80065fa <UpdateMahonyGains+0x272>
 80065f4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80065f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dot < -1.0f) dot = -1.0f;
 80065fa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80065fe:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8006602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800660a:	d501      	bpl.n	8006610 <UpdateMahonyGains+0x288>
 800660c:	4b39      	ldr	r3, [pc, #228]	@ (80066f4 <UpdateMahonyGains+0x36c>)
 800660e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Açı farkı (derece)
    float accErrorAngle = acosf(dot) * (180.0f / 3.1415926f);
 8006610:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8006614:	f00c fdd6 	bl	80131c4 <acosf>
 8006618:	eef0 7a40 	vmov.f32	s15, s0
 800661c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80066f8 <UpdateMahonyGains+0x370>
 8006620:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006624:	edc7 7a04 	vstr	s15, [r7, #16]

    // Duruma göre kazanç ayarla
    if (accErrorAngle > 30.0f) {
 8006628:	edd7 7a04 	vldr	s15, [r7, #16]
 800662c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8006630:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006638:	dd0a      	ble.n	8006650 <UpdateMahonyGains+0x2c8>
        Gain = 1;
 800663a:	4b30      	ldr	r3, [pc, #192]	@ (80066fc <UpdateMahonyGains+0x374>)
 800663c:	2201      	movs	r2, #1
 800663e:	701a      	strb	r2, [r3, #0]
        twoKp = 0.2f;
 8006640:	4b2f      	ldr	r3, [pc, #188]	@ (8006700 <UpdateMahonyGains+0x378>)
 8006642:	4a30      	ldr	r2, [pc, #192]	@ (8006704 <UpdateMahonyGains+0x37c>)
 8006644:	601a      	str	r2, [r3, #0]
        twoKi = 0.0f;
 8006646:	4b30      	ldr	r3, [pc, #192]	@ (8006708 <UpdateMahonyGains+0x380>)
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	e01d      	b.n	800668c <UpdateMahonyGains+0x304>
    } else if (accErrorAngle > 10.0f) {
 8006650:	edd7 7a04 	vldr	s15, [r7, #16]
 8006654:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8006658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800665c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006660:	dd0a      	ble.n	8006678 <UpdateMahonyGains+0x2f0>
        Gain = 2;
 8006662:	4b26      	ldr	r3, [pc, #152]	@ (80066fc <UpdateMahonyGains+0x374>)
 8006664:	2202      	movs	r2, #2
 8006666:	701a      	strb	r2, [r3, #0]
        twoKp = 2.0f;
 8006668:	4b25      	ldr	r3, [pc, #148]	@ (8006700 <UpdateMahonyGains+0x378>)
 800666a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800666e:	601a      	str	r2, [r3, #0]
        twoKi = 0.01f;
 8006670:	4b25      	ldr	r3, [pc, #148]	@ (8006708 <UpdateMahonyGains+0x380>)
 8006672:	4a26      	ldr	r2, [pc, #152]	@ (800670c <UpdateMahonyGains+0x384>)
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	e009      	b.n	800668c <UpdateMahonyGains+0x304>
    } else {
        Gain = 3;
 8006678:	4b20      	ldr	r3, [pc, #128]	@ (80066fc <UpdateMahonyGains+0x374>)
 800667a:	2203      	movs	r2, #3
 800667c:	701a      	strb	r2, [r3, #0]
        twoKp = 8.0f;
 800667e:	4b20      	ldr	r3, [pc, #128]	@ (8006700 <UpdateMahonyGains+0x378>)
 8006680:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8006684:	601a      	str	r2, [r3, #0]
        twoKi = 0.05f;
 8006686:	4b20      	ldr	r3, [pc, #128]	@ (8006708 <UpdateMahonyGains+0x380>)
 8006688:	4a21      	ldr	r2, [pc, #132]	@ (8006710 <UpdateMahonyGains+0x388>)
 800668a:	601a      	str	r2, [r3, #0]
    }

    // Güvenlik: kazanç sınırla (opsiyonel ama önerilir)
    twoKp = fmaxf(TWO_KP_MIN, fminf(twoKp, TWO_KP_MAX));
 800668c:	4b1c      	ldr	r3, [pc, #112]	@ (8006700 <UpdateMahonyGains+0x378>)
 800668e:	edd3 7a00 	vldr	s15, [r3]
 8006692:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 8006696:	eeb0 0a67 	vmov.f32	s0, s15
 800669a:	f00d fb44 	bl	8013d26 <fminf>
 800669e:	eef0 7a40 	vmov.f32	s15, s0
 80066a2:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8006714 <UpdateMahonyGains+0x38c>
 80066a6:	eeb0 0a67 	vmov.f32	s0, s15
 80066aa:	f00d fb1f 	bl	8013cec <fmaxf>
 80066ae:	eef0 7a40 	vmov.f32	s15, s0
 80066b2:	4b13      	ldr	r3, [pc, #76]	@ (8006700 <UpdateMahonyGains+0x378>)
 80066b4:	edc3 7a00 	vstr	s15, [r3]
    twoKi = fmaxf(TWO_KI_MIN, fminf(twoKi, TWO_KI_MAX));
 80066b8:	4b13      	ldr	r3, [pc, #76]	@ (8006708 <UpdateMahonyGains+0x380>)
 80066ba:	edd3 7a00 	vldr	s15, [r3]
 80066be:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8006718 <UpdateMahonyGains+0x390>
 80066c2:	eeb0 0a67 	vmov.f32	s0, s15
 80066c6:	f00d fb2e 	bl	8013d26 <fminf>
 80066ca:	eef0 7a40 	vmov.f32	s15, s0
 80066ce:	eddf 0a13 	vldr	s1, [pc, #76]	@ 800671c <UpdateMahonyGains+0x394>
 80066d2:	eeb0 0a67 	vmov.f32	s0, s15
 80066d6:	f00d fb09 	bl	8013cec <fmaxf>
 80066da:	eef0 7a40 	vmov.f32	s15, s0
 80066de:	4b0a      	ldr	r3, [pc, #40]	@ (8006708 <UpdateMahonyGains+0x380>)
 80066e0:	edc3 7a00 	vstr	s15, [r3]
 80066e4:	e000      	b.n	80066e8 <UpdateMahonyGains+0x360>
    if (norm_q == 0.0f) return; // Koruma
 80066e6:	bf00      	nop
}
 80066e8:	3730      	adds	r7, #48	@ 0x30
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20000028 	.word	0x20000028
 80066f4:	bf800000 	.word	0xbf800000
 80066f8:	42652ee2 	.word	0x42652ee2
 80066fc:	200017a4 	.word	0x200017a4
 8006700:	20000038 	.word	0x20000038
 8006704:	3e4ccccd 	.word	0x3e4ccccd
 8006708:	2000003c 	.word	0x2000003c
 800670c:	3c23d70a 	.word	0x3c23d70a
 8006710:	3d4ccccd 	.word	0x3d4ccccd
 8006714:	3dcccccd 	.word	0x3dcccccd
 8006718:	3d4ccccd 	.word	0x3d4ccccd
 800671c:	00000000 	.word	0x00000000

08006720 <Orientation_Update>:





void Orientation_Update(float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 8006720:	b580      	push	{r7, lr}
 8006722:	b08a      	sub	sp, #40	@ 0x28
 8006724:	af00      	add	r7, sp, #0
 8006726:	ed87 0a07 	vstr	s0, [r7, #28]
 800672a:	edc7 0a06 	vstr	s1, [r7, #24]
 800672e:	ed87 1a05 	vstr	s2, [r7, #20]
 8006732:	edc7 1a04 	vstr	s3, [r7, #16]
 8006736:	ed87 2a03 	vstr	s4, [r7, #12]
 800673a:	edc7 2a02 	vstr	s5, [r7, #8]
 800673e:	ed87 3a01 	vstr	s6, [r7, #4]
	static float ax_f = 0, ay_f = 0, az_f = 0;
    const float alpha = 0.3f;
 8006742:	4b60      	ldr	r3, [pc, #384]	@ (80068c4 <Orientation_Update+0x1a4>)
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24

    // LPF filtre
    ax_f = alpha * ax + (1.0f - alpha) * ax_f;
 8006746:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800674a:	edd7 7a04 	vldr	s15, [r7, #16]
 800674e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006756:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800675a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800675e:	4b5a      	ldr	r3, [pc, #360]	@ (80068c8 <Orientation_Update+0x1a8>)
 8006760:	edd3 7a00 	vldr	s15, [r3]
 8006764:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800676c:	4b56      	ldr	r3, [pc, #344]	@ (80068c8 <Orientation_Update+0x1a8>)
 800676e:	edc3 7a00 	vstr	s15, [r3]
    ay_f = alpha * ay + (1.0f - alpha) * ay_f;
 8006772:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8006776:	edd7 7a03 	vldr	s15, [r7, #12]
 800677a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800677e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006782:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006786:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800678a:	4b50      	ldr	r3, [pc, #320]	@ (80068cc <Orientation_Update+0x1ac>)
 800678c:	edd3 7a00 	vldr	s15, [r3]
 8006790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006798:	4b4c      	ldr	r3, [pc, #304]	@ (80068cc <Orientation_Update+0x1ac>)
 800679a:	edc3 7a00 	vstr	s15, [r3]
    az_f = alpha * az + (1.0f - alpha) * az_f;
 800679e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80067a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80067a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067ae:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80067b2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80067b6:	4b46      	ldr	r3, [pc, #280]	@ (80068d0 <Orientation_Update+0x1b0>)
 80067b8:	edd3 7a00 	vldr	s15, [r3]
 80067bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067c4:	4b42      	ldr	r3, [pc, #264]	@ (80068d0 <Orientation_Update+0x1b0>)
 80067c6:	edc3 7a00 	vstr	s15, [r3]

    // Kazançları güncelle
    UpdateMahonyGains(ax_f, ay_f, az_f);
 80067ca:	4b3f      	ldr	r3, [pc, #252]	@ (80068c8 <Orientation_Update+0x1a8>)
 80067cc:	edd3 7a00 	vldr	s15, [r3]
 80067d0:	4b3e      	ldr	r3, [pc, #248]	@ (80068cc <Orientation_Update+0x1ac>)
 80067d2:	ed93 7a00 	vldr	s14, [r3]
 80067d6:	4b3e      	ldr	r3, [pc, #248]	@ (80068d0 <Orientation_Update+0x1b0>)
 80067d8:	edd3 6a00 	vldr	s13, [r3]
 80067dc:	eeb0 1a66 	vmov.f32	s2, s13
 80067e0:	eef0 0a47 	vmov.f32	s1, s14
 80067e4:	eeb0 0a67 	vmov.f32	s0, s15
 80067e8:	f7ff fdce 	bl	8006388 <UpdateMahonyGains>

    // Acc magnitude
    float accMag = sqrtf(ax_f*ax_f + ay_f*ay_f + az_f*az_f);
 80067ec:	4b36      	ldr	r3, [pc, #216]	@ (80068c8 <Orientation_Update+0x1a8>)
 80067ee:	ed93 7a00 	vldr	s14, [r3]
 80067f2:	4b35      	ldr	r3, [pc, #212]	@ (80068c8 <Orientation_Update+0x1a8>)
 80067f4:	edd3 7a00 	vldr	s15, [r3]
 80067f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067fc:	4b33      	ldr	r3, [pc, #204]	@ (80068cc <Orientation_Update+0x1ac>)
 80067fe:	edd3 6a00 	vldr	s13, [r3]
 8006802:	4b32      	ldr	r3, [pc, #200]	@ (80068cc <Orientation_Update+0x1ac>)
 8006804:	edd3 7a00 	vldr	s15, [r3]
 8006808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800680c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006810:	4b2f      	ldr	r3, [pc, #188]	@ (80068d0 <Orientation_Update+0x1b0>)
 8006812:	edd3 6a00 	vldr	s13, [r3]
 8006816:	4b2e      	ldr	r3, [pc, #184]	@ (80068d0 <Orientation_Update+0x1b0>)
 8006818:	edd3 7a00 	vldr	s15, [r3]
 800681c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006824:	eeb0 0a67 	vmov.f32	s0, s15
 8006828:	f00c fd26 	bl	8013278 <sqrtf>
 800682c:	ed87 0a08 	vstr	s0, [r7, #32]

    if (gyroOnlyMode) {
 8006830:	4b28      	ldr	r3, [pc, #160]	@ (80068d4 <Orientation_Update+0x1b4>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00c      	beq.n	8006852 <Orientation_Update+0x132>
            if (accMag < ACC_THRESHOLD_LOW)
 8006838:	edd7 7a08 	vldr	s15, [r7, #32]
 800683c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80068d8 <Orientation_Update+0x1b8>
 8006840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006848:	d50f      	bpl.n	800686a <Orientation_Update+0x14a>
                gyroOnlyMode = 0;
 800684a:	4b22      	ldr	r3, [pc, #136]	@ (80068d4 <Orientation_Update+0x1b4>)
 800684c:	2200      	movs	r2, #0
 800684e:	701a      	strb	r2, [r3, #0]
 8006850:	e00b      	b.n	800686a <Orientation_Update+0x14a>
	} else {
		if (accMag > ACC_THRESHOLD_HIGH)
 8006852:	edd7 7a08 	vldr	s15, [r7, #32]
 8006856:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80068dc <Orientation_Update+0x1bc>
 800685a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800685e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006862:	dd02      	ble.n	800686a <Orientation_Update+0x14a>
			gyroOnlyMode = 1;
 8006864:	4b1b      	ldr	r3, [pc, #108]	@ (80068d4 <Orientation_Update+0x1b4>)
 8006866:	2201      	movs	r2, #1
 8006868:	701a      	strb	r2, [r3, #0]
	}



    // Filtre çağrısı
    if (gyroOnlyMode)
 800686a:	4b1a      	ldr	r3, [pc, #104]	@ (80068d4 <Orientation_Update+0x1b4>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00a      	beq.n	8006888 <Orientation_Update+0x168>
        updateQuaternion(gx, gy, gz, dt);
 8006872:	edd7 1a01 	vldr	s3, [r7, #4]
 8006876:	ed97 1a05 	vldr	s2, [r7, #20]
 800687a:	edd7 0a06 	vldr	s1, [r7, #24]
 800687e:	ed97 0a07 	vldr	s0, [r7, #28]
 8006882:	f000 f82d 	bl	80068e0 <updateQuaternion>
    else
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
}
 8006886:	e018      	b.n	80068ba <Orientation_Update+0x19a>
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
 8006888:	4b0f      	ldr	r3, [pc, #60]	@ (80068c8 <Orientation_Update+0x1a8>)
 800688a:	edd3 7a00 	vldr	s15, [r3]
 800688e:	4b0f      	ldr	r3, [pc, #60]	@ (80068cc <Orientation_Update+0x1ac>)
 8006890:	ed93 7a00 	vldr	s14, [r3]
 8006894:	4b0e      	ldr	r3, [pc, #56]	@ (80068d0 <Orientation_Update+0x1b0>)
 8006896:	edd3 6a00 	vldr	s13, [r3]
 800689a:	ed97 3a01 	vldr	s6, [r7, #4]
 800689e:	eef0 2a66 	vmov.f32	s5, s13
 80068a2:	eeb0 2a47 	vmov.f32	s4, s14
 80068a6:	eef0 1a67 	vmov.f32	s3, s15
 80068aa:	ed97 1a05 	vldr	s2, [r7, #20]
 80068ae:	edd7 0a06 	vldr	s1, [r7, #24]
 80068b2:	ed97 0a07 	vldr	s0, [r7, #28]
 80068b6:	f000 f93b 	bl	8006b30 <MahonyAHRSupdateIMU>
}
 80068ba:	bf00      	nop
 80068bc:	3728      	adds	r7, #40	@ 0x28
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	3e99999a 	.word	0x3e99999a
 80068c8:	200017a8 	.word	0x200017a8
 80068cc:	200017ac 	.word	0x200017ac
 80068d0:	200017b0 	.word	0x200017b0
 80068d4:	200017a5 	.word	0x200017a5
 80068d8:	41d3d2db 	.word	0x41d3d2db
 80068dc:	420172a2 	.word	0x420172a2

080068e0 <updateQuaternion>:


void updateQuaternion(float gx, float gy, float gz, float dt) {
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08a      	sub	sp, #40	@ 0x28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80068ea:	edc7 0a02 	vstr	s1, [r7, #8]
 80068ee:	ed87 1a01 	vstr	s2, [r7, #4]
 80068f2:	edc7 1a00 	vstr	s3, [r7]

    // Quaternion türevleri
    float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 80068f6:	4b8c      	ldr	r3, [pc, #560]	@ (8006b28 <updateQuaternion+0x248>)
 80068f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80068fc:	eeb1 7a67 	vneg.f32	s14, s15
 8006900:	edd7 7a03 	vldr	s15, [r7, #12]
 8006904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006908:	4b87      	ldr	r3, [pc, #540]	@ (8006b28 <updateQuaternion+0x248>)
 800690a:	edd3 6a02 	vldr	s13, [r3, #8]
 800690e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006912:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006916:	ee37 7a67 	vsub.f32	s14, s14, s15
 800691a:	4b83      	ldr	r3, [pc, #524]	@ (8006b28 <updateQuaternion+0x248>)
 800691c:	edd3 6a03 	vldr	s13, [r3, #12]
 8006920:	edd7 7a01 	vldr	s15, [r7, #4]
 8006924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006928:	ee77 7a67 	vsub.f32	s15, s14, s15
 800692c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006934:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float qDot2 = 0.5f * ( q[0] * gx + q[2] * gz - q[3] * gy);
 8006938:	4b7b      	ldr	r3, [pc, #492]	@ (8006b28 <updateQuaternion+0x248>)
 800693a:	ed93 7a00 	vldr	s14, [r3]
 800693e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006942:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006946:	4b78      	ldr	r3, [pc, #480]	@ (8006b28 <updateQuaternion+0x248>)
 8006948:	edd3 6a02 	vldr	s13, [r3, #8]
 800694c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006954:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006958:	4b73      	ldr	r3, [pc, #460]	@ (8006b28 <updateQuaternion+0x248>)
 800695a:	edd3 6a03 	vldr	s13, [r3, #12]
 800695e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006962:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800696a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800696e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006972:	edc7 7a08 	vstr	s15, [r7, #32]
    float qDot3 = 0.5f * ( q[0] * gy - q[1] * gz + q[3] * gx);
 8006976:	4b6c      	ldr	r3, [pc, #432]	@ (8006b28 <updateQuaternion+0x248>)
 8006978:	ed93 7a00 	vldr	s14, [r3]
 800697c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006980:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006984:	4b68      	ldr	r3, [pc, #416]	@ (8006b28 <updateQuaternion+0x248>)
 8006986:	edd3 6a01 	vldr	s13, [r3, #4]
 800698a:	edd7 7a01 	vldr	s15, [r7, #4]
 800698e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006992:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006996:	4b64      	ldr	r3, [pc, #400]	@ (8006b28 <updateQuaternion+0x248>)
 8006998:	edd3 6a03 	vldr	s13, [r3, #12]
 800699c:	edd7 7a03 	vldr	s15, [r7, #12]
 80069a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069a8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80069ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80069b0:	edc7 7a07 	vstr	s15, [r7, #28]
    float qDot4 = 0.5f * ( q[0] * gz + q[1] * gy - q[2] * gx);
 80069b4:	4b5c      	ldr	r3, [pc, #368]	@ (8006b28 <updateQuaternion+0x248>)
 80069b6:	ed93 7a00 	vldr	s14, [r3]
 80069ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80069be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069c2:	4b59      	ldr	r3, [pc, #356]	@ (8006b28 <updateQuaternion+0x248>)
 80069c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80069c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80069cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069d4:	4b54      	ldr	r3, [pc, #336]	@ (8006b28 <updateQuaternion+0x248>)
 80069d6:	edd3 6a02 	vldr	s13, [r3, #8]
 80069da:	edd7 7a03 	vldr	s15, [r7, #12]
 80069de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069e6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80069ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80069ee:	edc7 7a06 	vstr	s15, [r7, #24]

    // Entegrasyon
    q[0] += qDot1 * dt;
 80069f2:	4b4d      	ldr	r3, [pc, #308]	@ (8006b28 <updateQuaternion+0x248>)
 80069f4:	ed93 7a00 	vldr	s14, [r3]
 80069f8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80069fc:	edd7 7a00 	vldr	s15, [r7]
 8006a00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a08:	4b47      	ldr	r3, [pc, #284]	@ (8006b28 <updateQuaternion+0x248>)
 8006a0a:	edc3 7a00 	vstr	s15, [r3]
    q[1] += qDot2 * dt;
 8006a0e:	4b46      	ldr	r3, [pc, #280]	@ (8006b28 <updateQuaternion+0x248>)
 8006a10:	ed93 7a01 	vldr	s14, [r3, #4]
 8006a14:	edd7 6a08 	vldr	s13, [r7, #32]
 8006a18:	edd7 7a00 	vldr	s15, [r7]
 8006a1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a24:	4b40      	ldr	r3, [pc, #256]	@ (8006b28 <updateQuaternion+0x248>)
 8006a26:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] += qDot3 * dt;
 8006a2a:	4b3f      	ldr	r3, [pc, #252]	@ (8006b28 <updateQuaternion+0x248>)
 8006a2c:	ed93 7a02 	vldr	s14, [r3, #8]
 8006a30:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a34:	edd7 7a00 	vldr	s15, [r7]
 8006a38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a40:	4b39      	ldr	r3, [pc, #228]	@ (8006b28 <updateQuaternion+0x248>)
 8006a42:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] += qDot4 * dt;
 8006a46:	4b38      	ldr	r3, [pc, #224]	@ (8006b28 <updateQuaternion+0x248>)
 8006a48:	ed93 7a03 	vldr	s14, [r3, #12]
 8006a4c:	edd7 6a06 	vldr	s13, [r7, #24]
 8006a50:	edd7 7a00 	vldr	s15, [r7]
 8006a54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a5c:	4b32      	ldr	r3, [pc, #200]	@ (8006b28 <updateQuaternion+0x248>)
 8006a5e:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalize et
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8006a62:	4b31      	ldr	r3, [pc, #196]	@ (8006b28 <updateQuaternion+0x248>)
 8006a64:	ed93 7a00 	vldr	s14, [r3]
 8006a68:	4b2f      	ldr	r3, [pc, #188]	@ (8006b28 <updateQuaternion+0x248>)
 8006a6a:	edd3 7a00 	vldr	s15, [r3]
 8006a6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a72:	4b2d      	ldr	r3, [pc, #180]	@ (8006b28 <updateQuaternion+0x248>)
 8006a74:	edd3 6a01 	vldr	s13, [r3, #4]
 8006a78:	4b2b      	ldr	r3, [pc, #172]	@ (8006b28 <updateQuaternion+0x248>)
 8006a7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8006a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a86:	4b28      	ldr	r3, [pc, #160]	@ (8006b28 <updateQuaternion+0x248>)
 8006a88:	edd3 6a02 	vldr	s13, [r3, #8]
 8006a8c:	4b26      	ldr	r3, [pc, #152]	@ (8006b28 <updateQuaternion+0x248>)
 8006a8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a9a:	4b23      	ldr	r3, [pc, #140]	@ (8006b28 <updateQuaternion+0x248>)
 8006a9c:	edd3 6a03 	vldr	s13, [r3, #12]
 8006aa0:	4b21      	ldr	r3, [pc, #132]	@ (8006b28 <updateQuaternion+0x248>)
 8006aa2:	edd3 7a03 	vldr	s15, [r3, #12]
 8006aa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006aae:	eeb0 0a67 	vmov.f32	s0, s15
 8006ab2:	f00c fbe1 	bl	8013278 <sqrtf>
 8006ab6:	ed87 0a05 	vstr	s0, [r7, #20]
    if (norm > 1e-6f) {
 8006aba:	edd7 7a05 	vldr	s15, [r7, #20]
 8006abe:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8006b2c <updateQuaternion+0x24c>
 8006ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aca:	dc00      	bgt.n	8006ace <updateQuaternion+0x1ee>
        q[0] /= norm;
        q[1] /= norm;
        q[2] /= norm;
        q[3] /= norm;
    }
}
 8006acc:	e027      	b.n	8006b1e <updateQuaternion+0x23e>
        q[0] /= norm;
 8006ace:	4b16      	ldr	r3, [pc, #88]	@ (8006b28 <updateQuaternion+0x248>)
 8006ad0:	edd3 6a00 	vldr	s13, [r3]
 8006ad4:	ed97 7a05 	vldr	s14, [r7, #20]
 8006ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006adc:	4b12      	ldr	r3, [pc, #72]	@ (8006b28 <updateQuaternion+0x248>)
 8006ade:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= norm;
 8006ae2:	4b11      	ldr	r3, [pc, #68]	@ (8006b28 <updateQuaternion+0x248>)
 8006ae4:	edd3 6a01 	vldr	s13, [r3, #4]
 8006ae8:	ed97 7a05 	vldr	s14, [r7, #20]
 8006aec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006af0:	4b0d      	ldr	r3, [pc, #52]	@ (8006b28 <updateQuaternion+0x248>)
 8006af2:	edc3 7a01 	vstr	s15, [r3, #4]
        q[2] /= norm;
 8006af6:	4b0c      	ldr	r3, [pc, #48]	@ (8006b28 <updateQuaternion+0x248>)
 8006af8:	edd3 6a02 	vldr	s13, [r3, #8]
 8006afc:	ed97 7a05 	vldr	s14, [r7, #20]
 8006b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b04:	4b08      	ldr	r3, [pc, #32]	@ (8006b28 <updateQuaternion+0x248>)
 8006b06:	edc3 7a02 	vstr	s15, [r3, #8]
        q[3] /= norm;
 8006b0a:	4b07      	ldr	r3, [pc, #28]	@ (8006b28 <updateQuaternion+0x248>)
 8006b0c:	edd3 6a03 	vldr	s13, [r3, #12]
 8006b10:	ed97 7a05 	vldr	s14, [r7, #20]
 8006b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b18:	4b03      	ldr	r3, [pc, #12]	@ (8006b28 <updateQuaternion+0x248>)
 8006b1a:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8006b1e:	bf00      	nop
 8006b20:	3728      	adds	r7, #40	@ 0x28
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20000028 	.word	0x20000028
 8006b2c:	358637bd 	.word	0x358637bd

08006b30 <MahonyAHRSupdateIMU>:
        q[2] /= norm_q;
        q[3] /= norm_q;
    }
}

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax_f, float ay_f, float az_f, float dt) {
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b092      	sub	sp, #72	@ 0x48
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	ed87 0a07 	vstr	s0, [r7, #28]
 8006b3a:	edc7 0a06 	vstr	s1, [r7, #24]
 8006b3e:	ed87 1a05 	vstr	s2, [r7, #20]
 8006b42:	edc7 1a04 	vstr	s3, [r7, #16]
 8006b46:	ed87 2a03 	vstr	s4, [r7, #12]
 8006b4a:	edc7 2a02 	vstr	s5, [r7, #8]
 8006b4e:	ed87 3a01 	vstr	s6, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
		if(!((ax_f == 0.0f) && (ay_f == 0.0f) && (az_f == 0.0f))) {
 8006b52:	edd7 7a04 	vldr	s15, [r7, #16]
 8006b56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b5e:	d10e      	bne.n	8006b7e <MahonyAHRSupdateIMU+0x4e>
 8006b60:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b6c:	d107      	bne.n	8006b7e <MahonyAHRSupdateIMU+0x4e>
 8006b6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006b72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b7a:	f000 8138 	beq.w	8006dee <MahonyAHRSupdateIMU+0x2be>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax_f * ax_f + ay_f * ay_f + az_f * az_f);
 8006b7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006b82:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006b86:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006b8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b92:	edd7 7a02 	vldr	s15, [r7, #8]
 8006b96:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8006ba2:	f000 fd89 	bl	80076b8 <invSqrt>
 8006ba6:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax_f *= recipNorm;
 8006baa:	ed97 7a04 	vldr	s14, [r7, #16]
 8006bae:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb6:	edc7 7a04 	vstr	s15, [r7, #16]
		ay_f *= recipNorm;
 8006bba:	ed97 7a03 	vldr	s14, [r7, #12]
 8006bbe:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc6:	edc7 7a03 	vstr	s15, [r7, #12]
		az_f *= recipNorm;
 8006bca:	ed97 7a02 	vldr	s14, [r7, #8]
 8006bce:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd6:	edc7 7a02 	vstr	s15, [r7, #8]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8006bda:	4b66      	ldr	r3, [pc, #408]	@ (8006d74 <MahonyAHRSupdateIMU+0x244>)
 8006bdc:	ed93 7a01 	vldr	s14, [r3, #4]
 8006be0:	4b64      	ldr	r3, [pc, #400]	@ (8006d74 <MahonyAHRSupdateIMU+0x244>)
 8006be2:	edd3 7a03 	vldr	s15, [r3, #12]
 8006be6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bea:	4b62      	ldr	r3, [pc, #392]	@ (8006d74 <MahonyAHRSupdateIMU+0x244>)
 8006bec:	edd3 6a00 	vldr	s13, [r3]
 8006bf0:	4b60      	ldr	r3, [pc, #384]	@ (8006d74 <MahonyAHRSupdateIMU+0x244>)
 8006bf2:	edd3 7a02 	vldr	s15, [r3, #8]
 8006bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bfe:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8006c02:	4b5c      	ldr	r3, [pc, #368]	@ (8006d74 <MahonyAHRSupdateIMU+0x244>)
 8006c04:	ed93 7a00 	vldr	s14, [r3]
 8006c08:	4b5a      	ldr	r3, [pc, #360]	@ (8006d74 <MahonyAHRSupdateIMU+0x244>)
 8006c0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8006c0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c12:	4b58      	ldr	r3, [pc, #352]	@ (8006d74 <MahonyAHRSupdateIMU+0x244>)
 8006c14:	edd3 6a02 	vldr	s13, [r3, #8]
 8006c18:	4b56      	ldr	r3, [pc, #344]	@ (8006d74 <MahonyAHRSupdateIMU+0x244>)
 8006c1a:	edd3 7a03 	vldr	s15, [r3, #12]
 8006c1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c26:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8006c2a:	4b52      	ldr	r3, [pc, #328]	@ (8006d74 <MahonyAHRSupdateIMU+0x244>)
 8006c2c:	ed93 7a00 	vldr	s14, [r3]
 8006c30:	4b50      	ldr	r3, [pc, #320]	@ (8006d74 <MahonyAHRSupdateIMU+0x244>)
 8006c32:	edd3 7a00 	vldr	s15, [r3]
 8006c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c3a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006c3e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006c42:	4b4c      	ldr	r3, [pc, #304]	@ (8006d74 <MahonyAHRSupdateIMU+0x244>)
 8006c44:	edd3 6a03 	vldr	s13, [r3, #12]
 8006c48:	4b4a      	ldr	r3, [pc, #296]	@ (8006d74 <MahonyAHRSupdateIMU+0x244>)
 8006c4a:	edd3 7a03 	vldr	s15, [r3, #12]
 8006c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c56:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay_f * halfvz - az_f * halfvy);
 8006c5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8006c5e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8006c62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c66:	edd7 6a02 	vldr	s13, [r7, #8]
 8006c6a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8006c6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c76:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az_f * halfvx - ax_f * halfvz);
 8006c7a:	ed97 7a02 	vldr	s14, [r7, #8]
 8006c7e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8006c82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c86:	edd7 6a04 	vldr	s13, [r7, #16]
 8006c8a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8006c8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c96:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax_f * halfvy - ay_f * halfvx);
 8006c9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8006c9e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8006ca2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ca6:	edd7 6a03 	vldr	s13, [r7, #12]
 8006caa:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8006cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cb6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8006cba:	4b2f      	ldr	r3, [pc, #188]	@ (8006d78 <MahonyAHRSupdateIMU+0x248>)
 8006cbc:	edd3 7a00 	vldr	s15, [r3]
 8006cc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc8:	dd5e      	ble.n	8006d88 <MahonyAHRSupdateIMU+0x258>
			integralFBx += twoKi * halfex * dt;	// integral error scaled by Ki
 8006cca:	4b2b      	ldr	r3, [pc, #172]	@ (8006d78 <MahonyAHRSupdateIMU+0x248>)
 8006ccc:	ed93 7a00 	vldr	s14, [r3]
 8006cd0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006cd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006cd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8006cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ce0:	4b26      	ldr	r3, [pc, #152]	@ (8006d7c <MahonyAHRSupdateIMU+0x24c>)
 8006ce2:	edd3 7a00 	vldr	s15, [r3]
 8006ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cea:	4b24      	ldr	r3, [pc, #144]	@ (8006d7c <MahonyAHRSupdateIMU+0x24c>)
 8006cec:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * dt;
 8006cf0:	4b21      	ldr	r3, [pc, #132]	@ (8006d78 <MahonyAHRSupdateIMU+0x248>)
 8006cf2:	ed93 7a00 	vldr	s14, [r3]
 8006cf6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8006cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006cfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d06:	4b1e      	ldr	r3, [pc, #120]	@ (8006d80 <MahonyAHRSupdateIMU+0x250>)
 8006d08:	edd3 7a00 	vldr	s15, [r3]
 8006d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d10:	4b1b      	ldr	r3, [pc, #108]	@ (8006d80 <MahonyAHRSupdateIMU+0x250>)
 8006d12:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * dt;
 8006d16:	4b18      	ldr	r3, [pc, #96]	@ (8006d78 <MahonyAHRSupdateIMU+0x248>)
 8006d18:	ed93 7a00 	vldr	s14, [r3]
 8006d1c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006d20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d24:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d2c:	4b15      	ldr	r3, [pc, #84]	@ (8006d84 <MahonyAHRSupdateIMU+0x254>)
 8006d2e:	edd3 7a00 	vldr	s15, [r3]
 8006d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d36:	4b13      	ldr	r3, [pc, #76]	@ (8006d84 <MahonyAHRSupdateIMU+0x254>)
 8006d38:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8006d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8006d7c <MahonyAHRSupdateIMU+0x24c>)
 8006d3e:	edd3 7a00 	vldr	s15, [r3]
 8006d42:	ed97 7a07 	vldr	s14, [r7, #28]
 8006d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d4a:	edc7 7a07 	vstr	s15, [r7, #28]
			gy += integralFBy;
 8006d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d80 <MahonyAHRSupdateIMU+0x250>)
 8006d50:	edd3 7a00 	vldr	s15, [r3]
 8006d54:	ed97 7a06 	vldr	s14, [r7, #24]
 8006d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d5c:	edc7 7a06 	vstr	s15, [r7, #24]
			gz += integralFBz;
 8006d60:	4b08      	ldr	r3, [pc, #32]	@ (8006d84 <MahonyAHRSupdateIMU+0x254>)
 8006d62:	edd3 7a00 	vldr	s15, [r3]
 8006d66:	ed97 7a05 	vldr	s14, [r7, #20]
 8006d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d6e:	edc7 7a05 	vstr	s15, [r7, #20]
 8006d72:	e015      	b.n	8006da0 <MahonyAHRSupdateIMU+0x270>
 8006d74:	20000028 	.word	0x20000028
 8006d78:	2000003c 	.word	0x2000003c
 8006d7c:	20001798 	.word	0x20001798
 8006d80:	2000179c 	.word	0x2000179c
 8006d84:	200017a0 	.word	0x200017a0
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8006d88:	4b9a      	ldr	r3, [pc, #616]	@ (8006ff4 <MahonyAHRSupdateIMU+0x4c4>)
 8006d8a:	f04f 0200 	mov.w	r2, #0
 8006d8e:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8006d90:	4b99      	ldr	r3, [pc, #612]	@ (8006ff8 <MahonyAHRSupdateIMU+0x4c8>)
 8006d92:	f04f 0200 	mov.w	r2, #0
 8006d96:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8006d98:	4b98      	ldr	r3, [pc, #608]	@ (8006ffc <MahonyAHRSupdateIMU+0x4cc>)
 8006d9a:	f04f 0200 	mov.w	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8006da0:	4b97      	ldr	r3, [pc, #604]	@ (8007000 <MahonyAHRSupdateIMU+0x4d0>)
 8006da2:	ed93 7a00 	vldr	s14, [r3]
 8006da6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dae:	ed97 7a07 	vldr	s14, [r7, #28]
 8006db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006db6:	edc7 7a07 	vstr	s15, [r7, #28]
		gy += twoKp * halfey;
 8006dba:	4b91      	ldr	r3, [pc, #580]	@ (8007000 <MahonyAHRSupdateIMU+0x4d0>)
 8006dbc:	ed93 7a00 	vldr	s14, [r3]
 8006dc0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8006dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc8:	ed97 7a06 	vldr	s14, [r7, #24]
 8006dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dd0:	edc7 7a06 	vstr	s15, [r7, #24]
		gz += twoKp * halfez;
 8006dd4:	4b8a      	ldr	r3, [pc, #552]	@ (8007000 <MahonyAHRSupdateIMU+0x4d0>)
 8006dd6:	ed93 7a00 	vldr	s14, [r3]
 8006dda:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de2:	ed97 7a05 	vldr	s14, [r7, #20]
 8006de6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dea:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * dt);		// pre-multiply common factors
 8006dee:	edd7 7a01 	vldr	s15, [r7, #4]
 8006df2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006df6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006dfa:	ed97 7a07 	vldr	s14, [r7, #28]
 8006dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e02:	edc7 7a07 	vstr	s15, [r7, #28]
	gy *= (0.5f * dt);
 8006e06:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e0a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e12:	ed97 7a06 	vldr	s14, [r7, #24]
 8006e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e1a:	edc7 7a06 	vstr	s15, [r7, #24]
	gz *= (0.5f * dt);
 8006e1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e22:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006e26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e2a:	ed97 7a05 	vldr	s14, [r7, #20]
 8006e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e32:	edc7 7a05 	vstr	s15, [r7, #20]
	qa = q[0];
 8006e36:	4b73      	ldr	r3, [pc, #460]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 8006e3c:	4b71      	ldr	r3, [pc, #452]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8006e42:	4b70      	ldr	r3, [pc, #448]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8006e48:	4b6e      	ldr	r3, [pc, #440]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006e4a:	ed93 7a00 	vldr	s14, [r3]
 8006e4e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006e52:	eef1 6a67 	vneg.f32	s13, s15
 8006e56:	edd7 7a07 	vldr	s15, [r7, #28]
 8006e5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006e5e:	ed97 6a08 	vldr	s12, [r7, #32]
 8006e62:	edd7 7a06 	vldr	s15, [r7, #24]
 8006e66:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006e6a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006e6e:	4b65      	ldr	r3, [pc, #404]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006e70:	ed93 6a03 	vldr	s12, [r3, #12]
 8006e74:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006e7c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006e80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e84:	4b5f      	ldr	r3, [pc, #380]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006e86:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8006e8a:	4b5e      	ldr	r3, [pc, #376]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006e8c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006e90:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006e94:	edd7 7a07 	vldr	s15, [r7, #28]
 8006e98:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006e9c:	ed97 6a08 	vldr	s12, [r7, #32]
 8006ea0:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ea4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006ea8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006eac:	4b55      	ldr	r3, [pc, #340]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006eae:	ed93 6a03 	vldr	s12, [r3, #12]
 8006eb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8006eb6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006eba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ec2:	4b50      	ldr	r3, [pc, #320]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006ec4:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8006ec8:	4b4e      	ldr	r3, [pc, #312]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006eca:	ed93 7a02 	vldr	s14, [r3, #8]
 8006ece:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006ed2:	edd7 7a06 	vldr	s15, [r7, #24]
 8006ed6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006eda:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8006ede:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ee2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006ee6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006eea:	4b46      	ldr	r3, [pc, #280]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006eec:	ed93 6a03 	vldr	s12, [r3, #12]
 8006ef0:	edd7 7a07 	vldr	s15, [r7, #28]
 8006ef4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006ef8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f00:	4b40      	ldr	r3, [pc, #256]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006f02:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] += (qa * gz + qb * gy - qc * gx);
 8006f06:	4b3f      	ldr	r3, [pc, #252]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006f08:	ed93 7a03 	vldr	s14, [r3, #12]
 8006f0c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006f10:	edd7 7a05 	vldr	s15, [r7, #20]
 8006f14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006f18:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8006f1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006f20:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006f24:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006f28:	ed97 6a08 	vldr	s12, [r7, #32]
 8006f2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8006f30:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006f34:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f3c:	4b31      	ldr	r3, [pc, #196]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006f3e:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8006f42:	4b30      	ldr	r3, [pc, #192]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006f44:	ed93 7a00 	vldr	s14, [r3]
 8006f48:	4b2e      	ldr	r3, [pc, #184]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006f4a:	edd3 7a00 	vldr	s15, [r3]
 8006f4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f52:	4b2c      	ldr	r3, [pc, #176]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006f54:	edd3 6a01 	vldr	s13, [r3, #4]
 8006f58:	4b2a      	ldr	r3, [pc, #168]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006f5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8006f5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f66:	4b27      	ldr	r3, [pc, #156]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006f68:	edd3 6a02 	vldr	s13, [r3, #8]
 8006f6c:	4b25      	ldr	r3, [pc, #148]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006f6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006f72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f7a:	4b22      	ldr	r3, [pc, #136]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006f7c:	edd3 6a03 	vldr	s13, [r3, #12]
 8006f80:	4b20      	ldr	r3, [pc, #128]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006f82:	edd3 7a03 	vldr	s15, [r3, #12]
 8006f86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8006f92:	f000 fb91 	bl	80076b8 <invSqrt>
 8006f96:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 8006f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006f9c:	ed93 7a00 	vldr	s14, [r3]
 8006fa0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa8:	4b16      	ldr	r3, [pc, #88]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006faa:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8006fae:	4b15      	ldr	r3, [pc, #84]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006fb0:	ed93 7a01 	vldr	s14, [r3, #4]
 8006fb4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fbc:	4b11      	ldr	r3, [pc, #68]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006fbe:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] *= recipNorm;
 8006fc2:	4b10      	ldr	r3, [pc, #64]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006fc4:	ed93 7a02 	vldr	s14, [r3, #8]
 8006fc8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006fd2:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] *= recipNorm;
 8006fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006fd8:	ed93 7a03 	vldr	s14, [r3, #12]
 8006fdc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe4:	4b07      	ldr	r3, [pc, #28]	@ (8007004 <MahonyAHRSupdateIMU+0x4d4>)
 8006fe6:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8006fea:	bf00      	nop
 8006fec:	3748      	adds	r7, #72	@ 0x48
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20001798 	.word	0x20001798
 8006ff8:	2000179c 	.word	0x2000179c
 8006ffc:	200017a0 	.word	0x200017a0
 8007000:	20000038 	.word	0x20000038
 8007004:	20000028 	.word	0x20000028

08007008 <quaternionToThetaZ>:


float quaternionToThetaZ() {
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
    float r13 = 2 * q[1] * q[3] + 2 * q[2] * q[0];
 800700e:	4b44      	ldr	r3, [pc, #272]	@ (8007120 <quaternionToThetaZ+0x118>)
 8007010:	edd3 7a01 	vldr	s15, [r3, #4]
 8007014:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007018:	4b41      	ldr	r3, [pc, #260]	@ (8007120 <quaternionToThetaZ+0x118>)
 800701a:	edd3 7a03 	vldr	s15, [r3, #12]
 800701e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007022:	4b3f      	ldr	r3, [pc, #252]	@ (8007120 <quaternionToThetaZ+0x118>)
 8007024:	edd3 7a02 	vldr	s15, [r3, #8]
 8007028:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800702c:	4b3c      	ldr	r3, [pc, #240]	@ (8007120 <quaternionToThetaZ+0x118>)
 800702e:	edd3 7a00 	vldr	s15, [r3]
 8007032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800703a:	edc7 7a05 	vstr	s15, [r7, #20]
    float r23 = 2 * q[2] * q[3] - 2 * q[1] * q[0];
 800703e:	4b38      	ldr	r3, [pc, #224]	@ (8007120 <quaternionToThetaZ+0x118>)
 8007040:	edd3 7a02 	vldr	s15, [r3, #8]
 8007044:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007048:	4b35      	ldr	r3, [pc, #212]	@ (8007120 <quaternionToThetaZ+0x118>)
 800704a:	edd3 7a03 	vldr	s15, [r3, #12]
 800704e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007052:	4b33      	ldr	r3, [pc, #204]	@ (8007120 <quaternionToThetaZ+0x118>)
 8007054:	edd3 7a01 	vldr	s15, [r3, #4]
 8007058:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800705c:	4b30      	ldr	r3, [pc, #192]	@ (8007120 <quaternionToThetaZ+0x118>)
 800705e:	edd3 7a00 	vldr	s15, [r3]
 8007062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800706a:	edc7 7a04 	vstr	s15, [r7, #16]
    float r33 = 1 - 2 * q[1] * q[1] - 2 * q[2] * q[2];
 800706e:	4b2c      	ldr	r3, [pc, #176]	@ (8007120 <quaternionToThetaZ+0x118>)
 8007070:	edd3 7a01 	vldr	s15, [r3, #4]
 8007074:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007078:	4b29      	ldr	r3, [pc, #164]	@ (8007120 <quaternionToThetaZ+0x118>)
 800707a:	edd3 7a01 	vldr	s15, [r3, #4]
 800707e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007082:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007086:	ee37 7a67 	vsub.f32	s14, s14, s15
 800708a:	4b25      	ldr	r3, [pc, #148]	@ (8007120 <quaternionToThetaZ+0x118>)
 800708c:	edd3 7a02 	vldr	s15, [r3, #8]
 8007090:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007094:	4b22      	ldr	r3, [pc, #136]	@ (8007120 <quaternionToThetaZ+0x118>)
 8007096:	edd3 7a02 	vldr	s15, [r3, #8]
 800709a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800709e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070a2:	edc7 7a03 	vstr	s15, [r7, #12]

    float dotProduct = r33;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	60bb      	str	r3, [r7, #8]
    float magnitude = sqrtf(r13 * r13 + r23 * r23 + r33 * r33);
 80070aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80070ae:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80070b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80070b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80070ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80070be:	edd7 7a03 	vldr	s15, [r7, #12]
 80070c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80070c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070ca:	eeb0 0a67 	vmov.f32	s0, s15
 80070ce:	f00c f8d3 	bl	8013278 <sqrtf>
 80070d2:	ed87 0a01 	vstr	s0, [r7, #4]

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
 80070d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80070da:	edd7 7a01 	vldr	s15, [r7, #4]
 80070de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80070e2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80070e6:	eeb0 0a66 	vmov.f32	s0, s13
 80070ea:	f00c fe1c 	bl	8013d26 <fminf>
 80070ee:	eef0 7a40 	vmov.f32	s15, s0
 80070f2:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80070f6:	eeb0 0a67 	vmov.f32	s0, s15
 80070fa:	f00c fdf7 	bl	8013cec <fmaxf>
 80070fe:	ed87 0a00 	vstr	s0, [r7]
    return acosf(safeValue) * (180.0f / 3.14f);
 8007102:	ed97 0a00 	vldr	s0, [r7]
 8007106:	f00c f85d 	bl	80131c4 <acosf>
 800710a:	eef0 7a40 	vmov.f32	s15, s0
 800710e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8007124 <quaternionToThetaZ+0x11c>
 8007112:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007116:	eeb0 0a67 	vmov.f32	s0, s15
 800711a:	3718      	adds	r7, #24
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	20000028 	.word	0x20000028
 8007124:	42654ca3 	.word	0x42654ca3

08007128 <quaternionToPitchDegree>:
    float siny_cosp = 2.0f * (w * z + x * y);
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
}

float quaternionToPitchDegree() {
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 800712e:	4b22      	ldr	r3, [pc, #136]	@ (80071b8 <quaternionToPitchDegree+0x90>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	617b      	str	r3, [r7, #20]
 8007134:	4b20      	ldr	r3, [pc, #128]	@ (80071b8 <quaternionToPitchDegree+0x90>)
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	613b      	str	r3, [r7, #16]
 800713a:	4b1f      	ldr	r3, [pc, #124]	@ (80071b8 <quaternionToPitchDegree+0x90>)
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	4b1d      	ldr	r3, [pc, #116]	@ (80071b8 <quaternionToPitchDegree+0x90>)
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	60bb      	str	r3, [r7, #8]
    float sinp = 2.0f * (w * y - z * x);
 8007146:	ed97 7a05 	vldr	s14, [r7, #20]
 800714a:	edd7 7a03 	vldr	s15, [r7, #12]
 800714e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007152:	edd7 6a02 	vldr	s13, [r7, #8]
 8007156:	edd7 7a04 	vldr	s15, [r7, #16]
 800715a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800715e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007162:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007166:	edc7 7a01 	vstr	s15, [r7, #4]
    if (fabsf(sinp) >= 1.0f)
 800716a:	edd7 7a01 	vldr	s15, [r7, #4]
 800716e:	eef0 7ae7 	vabs.f32	s15, s15
 8007172:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800717a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800717e:	db0c      	blt.n	800719a <quaternionToPitchDegree+0x72>
        return (sinp > 0 ? 90.0f : -90.0f); // clamp
 8007180:	edd7 7a01 	vldr	s15, [r7, #4]
 8007184:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800718c:	dd02      	ble.n	8007194 <quaternionToPitchDegree+0x6c>
 800718e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80071bc <quaternionToPitchDegree+0x94>
 8007192:	e00c      	b.n	80071ae <quaternionToPitchDegree+0x86>
 8007194:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80071c0 <quaternionToPitchDegree+0x98>
 8007198:	e009      	b.n	80071ae <quaternionToPitchDegree+0x86>
    else
        return asinf(sinp) * (180.0f / 3.14159265f);
 800719a:	ed97 0a01 	vldr	s0, [r7, #4]
 800719e:	f00c f83d 	bl	801321c <asinf>
 80071a2:	eef0 7a40 	vmov.f32	s15, s0
 80071a6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80071c4 <quaternionToPitchDegree+0x9c>
 80071aa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80071ae:	eeb0 0a67 	vmov.f32	s0, s15
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	20000028 	.word	0x20000028
 80071bc:	42b40000 	.word	0x42b40000
 80071c0:	c2b40000 	.word	0xc2b40000
 80071c4:	42652ee0 	.word	0x42652ee0

080071c8 <quaternionToRollDegree>:

float quaternionToRollDegree(){
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 80071ce:	4b20      	ldr	r3, [pc, #128]	@ (8007250 <quaternionToRollDegree+0x88>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	617b      	str	r3, [r7, #20]
 80071d4:	4b1e      	ldr	r3, [pc, #120]	@ (8007250 <quaternionToRollDegree+0x88>)
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	613b      	str	r3, [r7, #16]
 80071da:	4b1d      	ldr	r3, [pc, #116]	@ (8007250 <quaternionToRollDegree+0x88>)
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	4b1b      	ldr	r3, [pc, #108]	@ (8007250 <quaternionToRollDegree+0x88>)
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	60bb      	str	r3, [r7, #8]
    float sinr_cosp = 2.0f * (w * x + y * z);
 80071e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80071ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80071ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80071f2:	edd7 6a03 	vldr	s13, [r7, #12]
 80071f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80071fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80071fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007202:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007206:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosr_cosp = 1.0f - 2.0f * (x * x + y * y);
 800720a:	edd7 7a04 	vldr	s15, [r7, #16]
 800720e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007212:	edd7 7a03 	vldr	s15, [r7, #12]
 8007216:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800721a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800721e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007222:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800722a:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(sinr_cosp, cosr_cosp) * (180.0f / 3.14159265f);
 800722e:	edd7 0a00 	vldr	s1, [r7]
 8007232:	ed97 0a01 	vldr	s0, [r7, #4]
 8007236:	f00c f81d 	bl	8013274 <atan2f>
 800723a:	eef0 7a40 	vmov.f32	s15, s0
 800723e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8007254 <quaternionToRollDegree+0x8c>
 8007242:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007246:	eeb0 0a67 	vmov.f32	s0, s15
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20000028 	.word	0x20000028
 8007254:	42652ee0 	.word	0x42652ee0

08007258 <quaternionToYaw>:


float quaternionToYaw(){
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 800725e:	4b2a      	ldr	r3, [pc, #168]	@ (8007308 <quaternionToYaw+0xb0>)
 8007260:	ed93 7a01 	vldr	s14, [r3, #4]
 8007264:	4b28      	ldr	r3, [pc, #160]	@ (8007308 <quaternionToYaw+0xb0>)
 8007266:	edd3 7a02 	vldr	s15, [r3, #8]
 800726a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800726e:	4b26      	ldr	r3, [pc, #152]	@ (8007308 <quaternionToYaw+0xb0>)
 8007270:	edd3 6a00 	vldr	s13, [r3]
 8007274:	4b24      	ldr	r3, [pc, #144]	@ (8007308 <quaternionToYaw+0xb0>)
 8007276:	edd3 7a03 	vldr	s15, [r3, #12]
 800727a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800727e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007282:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8007286:	4b20      	ldr	r3, [pc, #128]	@ (8007308 <quaternionToYaw+0xb0>)
 8007288:	ed93 7a00 	vldr	s14, [r3]
 800728c:	4b1e      	ldr	r3, [pc, #120]	@ (8007308 <quaternionToYaw+0xb0>)
 800728e:	edd3 7a00 	vldr	s15, [r3]
 8007292:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007296:	4b1c      	ldr	r3, [pc, #112]	@ (8007308 <quaternionToYaw+0xb0>)
 8007298:	edd3 6a01 	vldr	s13, [r3, #4]
 800729c:	4b1a      	ldr	r3, [pc, #104]	@ (8007308 <quaternionToYaw+0xb0>)
 800729e:	edd3 7a01 	vldr	s15, [r3, #4]
 80072a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80072a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80072aa:	4b17      	ldr	r3, [pc, #92]	@ (8007308 <quaternionToYaw+0xb0>)
 80072ac:	edd3 6a02 	vldr	s13, [r3, #8]
 80072b0:	4b15      	ldr	r3, [pc, #84]	@ (8007308 <quaternionToYaw+0xb0>)
 80072b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80072b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80072ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80072be:	4b12      	ldr	r3, [pc, #72]	@ (8007308 <quaternionToYaw+0xb0>)
 80072c0:	edd3 6a03 	vldr	s13, [r3, #12]
 80072c4:	4b10      	ldr	r3, [pc, #64]	@ (8007308 <quaternionToYaw+0xb0>)
 80072c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80072ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80072ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072d2:	eef0 0a67 	vmov.f32	s1, s15
 80072d6:	eeb0 0a46 	vmov.f32	s0, s12
 80072da:	f00b ffcb 	bl	8013274 <atan2f>
 80072de:	eef0 7a40 	vmov.f32	s15, s0
 80072e2:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800730c <quaternionToYaw+0xb4>
 80072e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80072ea:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007310 <quaternionToYaw+0xb8>
 80072ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072f2:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	ee07 3a90 	vmov	s15, r3
}
 80072fc:	eeb0 0a67 	vmov.f32	s0, s15
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000028 	.word	0x20000028
 800730c:	43340000 	.word	0x43340000
 8007310:	40490fd0 	.word	0x40490fd0

08007314 <quaternionToPitch>:

float quaternionToPitch(){
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 800731a:	4b17      	ldr	r3, [pc, #92]	@ (8007378 <quaternionToPitch+0x64>)
 800731c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007320:	4b15      	ldr	r3, [pc, #84]	@ (8007378 <quaternionToPitch+0x64>)
 8007322:	edd3 7a03 	vldr	s15, [r3, #12]
 8007326:	ee27 7a27 	vmul.f32	s14, s14, s15
 800732a:	4b13      	ldr	r3, [pc, #76]	@ (8007378 <quaternionToPitch+0x64>)
 800732c:	edd3 6a00 	vldr	s13, [r3]
 8007330:	4b11      	ldr	r3, [pc, #68]	@ (8007378 <quaternionToPitch+0x64>)
 8007332:	edd3 7a02 	vldr	s15, [r3, #8]
 8007336:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800733a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800733e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007342:	eeb0 0a67 	vmov.f32	s0, s15
 8007346:	f00b ff69 	bl	801321c <asinf>
 800734a:	eef0 7a40 	vmov.f32	s15, s0
 800734e:	eef1 7a67 	vneg.f32	s15, s15
 8007352:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800737c <quaternionToPitch+0x68>
 8007356:	ee27 7a87 	vmul.f32	s14, s15, s14
 800735a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007380 <quaternionToPitch+0x6c>
 800735e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007362:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	ee07 3a90 	vmov	s15, r3
}
 800736c:	eeb0 0a67 	vmov.f32	s0, s15
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	20000028 	.word	0x20000028
 800737c:	43340000 	.word	0x43340000
 8007380:	40490fd0 	.word	0x40490fd0

08007384 <quaternionToRoll>:

float quaternionToRoll(){
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 800738a:	4b2a      	ldr	r3, [pc, #168]	@ (8007434 <quaternionToRoll+0xb0>)
 800738c:	ed93 7a00 	vldr	s14, [r3]
 8007390:	4b28      	ldr	r3, [pc, #160]	@ (8007434 <quaternionToRoll+0xb0>)
 8007392:	edd3 7a01 	vldr	s15, [r3, #4]
 8007396:	ee27 7a27 	vmul.f32	s14, s14, s15
 800739a:	4b26      	ldr	r3, [pc, #152]	@ (8007434 <quaternionToRoll+0xb0>)
 800739c:	edd3 6a02 	vldr	s13, [r3, #8]
 80073a0:	4b24      	ldr	r3, [pc, #144]	@ (8007434 <quaternionToRoll+0xb0>)
 80073a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80073a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073ae:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80073b2:	4b20      	ldr	r3, [pc, #128]	@ (8007434 <quaternionToRoll+0xb0>)
 80073b4:	ed93 7a00 	vldr	s14, [r3]
 80073b8:	4b1e      	ldr	r3, [pc, #120]	@ (8007434 <quaternionToRoll+0xb0>)
 80073ba:	edd3 7a00 	vldr	s15, [r3]
 80073be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80073c2:	4b1c      	ldr	r3, [pc, #112]	@ (8007434 <quaternionToRoll+0xb0>)
 80073c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80073c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007434 <quaternionToRoll+0xb0>)
 80073ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80073ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80073d6:	4b17      	ldr	r3, [pc, #92]	@ (8007434 <quaternionToRoll+0xb0>)
 80073d8:	edd3 6a02 	vldr	s13, [r3, #8]
 80073dc:	4b15      	ldr	r3, [pc, #84]	@ (8007434 <quaternionToRoll+0xb0>)
 80073de:	edd3 7a02 	vldr	s15, [r3, #8]
 80073e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80073ea:	4b12      	ldr	r3, [pc, #72]	@ (8007434 <quaternionToRoll+0xb0>)
 80073ec:	edd3 6a03 	vldr	s13, [r3, #12]
 80073f0:	4b10      	ldr	r3, [pc, #64]	@ (8007434 <quaternionToRoll+0xb0>)
 80073f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80073f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073fe:	eef0 0a67 	vmov.f32	s1, s15
 8007402:	eeb0 0a46 	vmov.f32	s0, s12
 8007406:	f00b ff35 	bl	8013274 <atan2f>
 800740a:	eef0 7a40 	vmov.f32	s15, s0
 800740e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8007438 <quaternionToRoll+0xb4>
 8007412:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007416:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800743c <quaternionToRoll+0xb8>
 800741a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800741e:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	ee07 3a90 	vmov	s15, r3
}
 8007428:	eeb0 0a67 	vmov.f32	s0, s15
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20000028 	.word	0x20000028
 8007438:	43340000 	.word	0x43340000
 800743c:	40490fd0 	.word	0x40490fd0

08007440 <getInitialQuaternion>:

void getInitialQuaternion() {
 8007440:	b5b0      	push	{r4, r5, r7, lr}
 8007442:	b092      	sub	sp, #72	@ 0x48
 8007444:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.datas.acc_z * BMI_sensor.datas.acc_z + BMI_sensor.datas.acc_x * BMI_sensor.datas.acc_x + BMI_sensor.datas.acc_y * BMI_sensor.datas.acc_y);
 8007446:	4b98      	ldr	r3, [pc, #608]	@ (80076a8 <getInitialQuaternion+0x268>)
 8007448:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 800744c:	4b96      	ldr	r3, [pc, #600]	@ (80076a8 <getInitialQuaternion+0x268>)
 800744e:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8007452:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007456:	4b94      	ldr	r3, [pc, #592]	@ (80076a8 <getInitialQuaternion+0x268>)
 8007458:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800745c:	4b92      	ldr	r3, [pc, #584]	@ (80076a8 <getInitialQuaternion+0x268>)
 800745e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8007462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007466:	ee37 7a27 	vadd.f32	s14, s14, s15
 800746a:	4b8f      	ldr	r3, [pc, #572]	@ (80076a8 <getInitialQuaternion+0x268>)
 800746c:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8007470:	4b8d      	ldr	r3, [pc, #564]	@ (80076a8 <getInitialQuaternion+0x268>)
 8007472:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8007476:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800747a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800747e:	ee17 0a90 	vmov	r0, s15
 8007482:	f7f9 f881 	bl	8000588 <__aeabi_f2d>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	ec43 2b10 	vmov	d0, r2, r3
 800748e:	f00b ff81 	bl	8013394 <sqrt>
 8007492:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.datas.acc_y;
 8007496:	4b84      	ldr	r3, [pc, #528]	@ (80076a8 <getInitialQuaternion+0x268>)
 8007498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800749a:	4618      	mov	r0, r3
 800749c:	f7f9 f874 	bl	8000588 <__aeabi_f2d>
 80074a0:	4602      	mov	r2, r0
 80074a2:	460b      	mov	r3, r1
 80074a4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)-BMI_sensor.datas.acc_z;
 80074a8:	4b7f      	ldr	r3, [pc, #508]	@ (80076a8 <getInitialQuaternion+0x268>)
 80074aa:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80074ae:	eef1 7a67 	vneg.f32	s15, s15
 80074b2:	ee17 3a90 	vmov	r3, s15
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7f9 f866 	bl	8000588 <__aeabi_f2d>
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] = (double)BMI_sensor.datas.acc_x;
 80074c4:	4b78      	ldr	r3, [pc, #480]	@ (80076a8 <getInitialQuaternion+0x268>)
 80074c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7f9 f85d 	bl	8000588 <__aeabi_f2d>
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    accel_temp[0] /= norm;
 80074d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80074da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80074de:	f7f9 f9d5 	bl	800088c <__aeabi_ddiv>
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 80074ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80074ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80074f2:	f7f9 f9cb 	bl	800088c <__aeabi_ddiv>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 80074fe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007502:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007506:	f7f9 f9c1 	bl	800088c <__aeabi_ddiv>
 800750a:	4602      	mov	r2, r0
 800750c:	460b      	mov	r3, r1
 800750e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 8007512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007516:	f04f 0000 	mov.w	r0, #0
 800751a:	4964      	ldr	r1, [pc, #400]	@ (80076ac <getInitialQuaternion+0x26c>)
 800751c:	f7f8 fed4 	bl	80002c8 <__aeabi_dsub>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	ec43 2b17 	vmov	d7, r2, r3
 8007528:	eeb0 0a47 	vmov.f32	s0, s14
 800752c:	eef0 0a67 	vmov.f32	s1, s15
 8007530:	f00b ff30 	bl	8013394 <sqrt>
 8007534:	ec51 0b10 	vmov	r0, r1, d0
 8007538:	f04f 0200 	mov.w	r2, #0
 800753c:	4b5c      	ldr	r3, [pc, #368]	@ (80076b0 <getInitialQuaternion+0x270>)
 800753e:	f7f9 f87b 	bl	8000638 <__aeabi_dmul>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 800754a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800754e:	f04f 0000 	mov.w	r0, #0
 8007552:	4957      	ldr	r1, [pc, #348]	@ (80076b0 <getInitialQuaternion+0x270>)
 8007554:	f7f9 f99a 	bl	800088c <__aeabi_ddiv>
 8007558:	4602      	mov	r2, r0
 800755a:	460b      	mov	r3, r1
 800755c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 8007560:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007564:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007568:	f7f9 f866 	bl	8000638 <__aeabi_dmul>
 800756c:	4602      	mov	r2, r0
 800756e:	460b      	mov	r3, r1
 8007570:	4610      	mov	r0, r2
 8007572:	4619      	mov	r1, r3
 8007574:	f04f 0200 	mov.w	r2, #0
 8007578:	4b4d      	ldr	r3, [pc, #308]	@ (80076b0 <getInitialQuaternion+0x270>)
 800757a:	f7f9 f85d 	bl	8000638 <__aeabi_dmul>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 8007586:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800758a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800758e:	f7f9 f853 	bl	8000638 <__aeabi_dmul>
 8007592:	4602      	mov	r2, r0
 8007594:	460b      	mov	r3, r1
 8007596:	4610      	mov	r0, r2
 8007598:	4619      	mov	r1, r3
 800759a:	f04f 0200 	mov.w	r2, #0
 800759e:	4b44      	ldr	r3, [pc, #272]	@ (80076b0 <getInitialQuaternion+0x270>)
 80075a0:	f7f9 f84a 	bl	8000638 <__aeabi_dmul>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 80075ac:	f04f 0200 	mov.w	r2, #0
 80075b0:	f04f 0300 	mov.w	r3, #0
 80075b4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 80075b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c0:	f7f9 f83a 	bl	8000638 <__aeabi_dmul>
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	4614      	mov	r4, r2
 80075ca:	461d      	mov	r5, r3
 80075cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075d4:	f7f9 f830 	bl	8000638 <__aeabi_dmul>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	4620      	mov	r0, r4
 80075de:	4629      	mov	r1, r5
 80075e0:	f7f8 fe74 	bl	80002cc <__adddf3>
 80075e4:	4602      	mov	r2, r0
 80075e6:	460b      	mov	r3, r1
 80075e8:	4614      	mov	r4, r2
 80075ea:	461d      	mov	r5, r3
 80075ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80075f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80075f4:	f7f9 f820 	bl	8000638 <__aeabi_dmul>
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	4620      	mov	r0, r4
 80075fe:	4629      	mov	r1, r5
 8007600:	f7f8 fe64 	bl	80002cc <__adddf3>
 8007604:	4602      	mov	r2, r0
 8007606:	460b      	mov	r3, r1
 8007608:	4614      	mov	r4, r2
 800760a:	461d      	mov	r5, r3
 800760c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007610:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007614:	f7f9 f810 	bl	8000638 <__aeabi_dmul>
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	4620      	mov	r0, r4
 800761e:	4629      	mov	r1, r5
 8007620:	f7f8 fe54 	bl	80002cc <__adddf3>
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	ec43 2b17 	vmov	d7, r2, r3
 800762c:	eeb0 0a47 	vmov.f32	s0, s14
 8007630:	eef0 0a67 	vmov.f32	s1, s15
 8007634:	f00b feae 	bl	8013394 <sqrt>
 8007638:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

    q[0] = q_temp[0] / norm;
 800763c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007640:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007644:	f7f9 f922 	bl	800088c <__aeabi_ddiv>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4610      	mov	r0, r2
 800764e:	4619      	mov	r1, r3
 8007650:	f7f9 faea 	bl	8000c28 <__aeabi_d2f>
 8007654:	4603      	mov	r3, r0
 8007656:	4a17      	ldr	r2, [pc, #92]	@ (80076b4 <getInitialQuaternion+0x274>)
 8007658:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 800765a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800765e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007662:	f7f9 f913 	bl	800088c <__aeabi_ddiv>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	4610      	mov	r0, r2
 800766c:	4619      	mov	r1, r3
 800766e:	f7f9 fadb 	bl	8000c28 <__aeabi_d2f>
 8007672:	4603      	mov	r3, r0
 8007674:	4a0f      	ldr	r2, [pc, #60]	@ (80076b4 <getInitialQuaternion+0x274>)
 8007676:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 8007678:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800767c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007680:	f7f9 f904 	bl	800088c <__aeabi_ddiv>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	4610      	mov	r0, r2
 800768a:	4619      	mov	r1, r3
 800768c:	f7f9 facc 	bl	8000c28 <__aeabi_d2f>
 8007690:	4603      	mov	r3, r0
 8007692:	4a08      	ldr	r2, [pc, #32]	@ (80076b4 <getInitialQuaternion+0x274>)
 8007694:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 8007696:	4b07      	ldr	r3, [pc, #28]	@ (80076b4 <getInitialQuaternion+0x274>)
 8007698:	f04f 0200 	mov.w	r2, #0
 800769c:	60da      	str	r2, [r3, #12]
}
 800769e:	bf00      	nop
 80076a0:	3748      	adds	r7, #72	@ 0x48
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bdb0      	pop	{r4, r5, r7, pc}
 80076a6:	bf00      	nop
 80076a8:	200015e0 	.word	0x200015e0
 80076ac:	3ff00000 	.word	0x3ff00000
 80076b0:	3fe00000 	.word	0x3fe00000
 80076b4:	20000028 	.word	0x20000028

080076b8 <invSqrt>:

float invSqrt(float x) {
 80076b8:	b480      	push	{r7}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80076c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80076c6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80076ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076ce:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80076d6:	f107 0310 	add.w	r3, r7, #16
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	105a      	asrs	r2, r3, #1
 80076e2:	4b12      	ldr	r3, [pc, #72]	@ (800772c <invSqrt+0x74>)
 80076e4:	1a9b      	subs	r3, r3, r2
 80076e6:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80076e8:	f107 030c 	add.w	r3, r7, #12
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80076f0:	ed97 7a04 	vldr	s14, [r7, #16]
 80076f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80076f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80076fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8007700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007704:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8007708:	ee37 7a67 	vsub.f32	s14, s14, s15
 800770c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007714:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	ee07 3a90 	vmov	s15, r3
}
 800771e:	eeb0 0a67 	vmov.f32	s0, s15
 8007722:	371c      	adds	r7, #28
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	5f3759df 	.word	0x5f3759df

08007730 <calculate_accel_std_deviation>:
/**
 * @brief İvme değerlerinin standart sapmasını hesapla
 * @return Standart sapma değeri
 */
static float calculate_accel_std_deviation(void)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
    // Buffer dolmadıysa ve çok az veri varsa
    if (!accel_buffer_full && accel_buffer_index < 2) return 0.0f;
 8007736:	4b3d      	ldr	r3, [pc, #244]	@ (800782c <calculate_accel_std_deviation+0xfc>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d106      	bne.n	800774c <calculate_accel_std_deviation+0x1c>
 800773e:	4b3c      	ldr	r3, [pc, #240]	@ (8007830 <calculate_accel_std_deviation+0x100>)
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d802      	bhi.n	800774c <calculate_accel_std_deviation+0x1c>
 8007746:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8007834 <calculate_accel_std_deviation+0x104>
 800774a:	e069      	b.n	8007820 <calculate_accel_std_deviation+0xf0>

    int count = accel_buffer_full ? ACCEL_BUFFER_SIZE : accel_buffer_index;
 800774c:	4b37      	ldr	r3, [pc, #220]	@ (800782c <calculate_accel_std_deviation+0xfc>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d102      	bne.n	800775a <calculate_accel_std_deviation+0x2a>
 8007754:	4b36      	ldr	r3, [pc, #216]	@ (8007830 <calculate_accel_std_deviation+0x100>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	e000      	b.n	800775c <calculate_accel_std_deviation+0x2c>
 800775a:	2305      	movs	r3, #5
 800775c:	607b      	str	r3, [r7, #4]
    float sum = 0.0f;
 800775e:	f04f 0300 	mov.w	r3, #0
 8007762:	617b      	str	r3, [r7, #20]
    float mean = 0.0f;
 8007764:	f04f 0300 	mov.w	r3, #0
 8007768:	603b      	str	r3, [r7, #0]
    float variance = 0.0f;
 800776a:	f04f 0300 	mov.w	r3, #0
 800776e:	613b      	str	r3, [r7, #16]

    // Ortalama hesapla
    for (int i = 0; i < count; i++) {
 8007770:	2300      	movs	r3, #0
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	e00e      	b.n	8007794 <calculate_accel_std_deviation+0x64>
        sum += accel_buffer[i];
 8007776:	4a30      	ldr	r2, [pc, #192]	@ (8007838 <calculate_accel_std_deviation+0x108>)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	edd3 7a00 	vldr	s15, [r3]
 8007782:	ed97 7a05 	vldr	s14, [r7, #20]
 8007786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800778a:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < count; i++) {
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3301      	adds	r3, #1
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	429a      	cmp	r2, r3
 800779a:	dbec      	blt.n	8007776 <calculate_accel_std_deviation+0x46>
    }
    mean = sum / count;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	ee07 3a90 	vmov	s15, r3
 80077a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077a6:	edd7 6a05 	vldr	s13, [r7, #20]
 80077aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ae:	edc7 7a00 	vstr	s15, [r7]

    // Varyans hesapla
    for (int i = 0; i < count; i++) {
 80077b2:	2300      	movs	r3, #0
 80077b4:	60bb      	str	r3, [r7, #8]
 80077b6:	e01e      	b.n	80077f6 <calculate_accel_std_deviation+0xc6>
        variance += (accel_buffer[i] - mean) * (accel_buffer[i] - mean);
 80077b8:	4a1f      	ldr	r2, [pc, #124]	@ (8007838 <calculate_accel_std_deviation+0x108>)
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	ed93 7a00 	vldr	s14, [r3]
 80077c4:	edd7 7a00 	vldr	s15, [r7]
 80077c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80077cc:	4a1a      	ldr	r2, [pc, #104]	@ (8007838 <calculate_accel_std_deviation+0x108>)
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4413      	add	r3, r2
 80077d4:	edd3 6a00 	vldr	s13, [r3]
 80077d8:	edd7 7a00 	vldr	s15, [r7]
 80077dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80077e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80077e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077ec:	edc7 7a04 	vstr	s15, [r7, #16]
    for (int i = 0; i < count; i++) {
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	3301      	adds	r3, #1
 80077f4:	60bb      	str	r3, [r7, #8]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	dbdc      	blt.n	80077b8 <calculate_accel_std_deviation+0x88>
    }
    variance /= count;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	ee07 3a90 	vmov	s15, r3
 8007804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007808:	edd7 6a04 	vldr	s13, [r7, #16]
 800780c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007810:	edc7 7a04 	vstr	s15, [r7, #16]

    return sqrtf(variance);
 8007814:	ed97 0a04 	vldr	s0, [r7, #16]
 8007818:	f00b fd2e 	bl	8013278 <sqrtf>
 800781c:	eef0 7a40 	vmov.f32	s15, s0
}
 8007820:	eeb0 0a67 	vmov.f32	s0, s15
 8007824:	3718      	adds	r7, #24
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	20001825 	.word	0x20001825
 8007830:	20001824 	.word	0x20001824
 8007834:	00000000 	.word	0x00000000
 8007838:	20001810 	.word	0x20001810

0800783c <detect_accel_failure>:
 * @brief İvme sensörünün arızalı olup olmadığını kontrol et
 * @param accel İvme değeri (m/s²)
 * @return 1: Arıza tespit edildi, 0: Arıza yok
 */
static uint8_t detect_accel_failure(float accel)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b088      	sub	sp, #32
 8007840:	af00      	add	r7, sp, #0
 8007842:	ed87 0a01 	vstr	s0, [r7, #4]
    float accel_abs = fabsf(accel);
 8007846:	edd7 7a01 	vldr	s15, [r7, #4]
 800784a:	eef0 7ae7 	vabs.f32	s15, s15
 800784e:	edc7 7a05 	vstr	s15, [r7, #20]
    float max_accel, max_std;

    // Buffer güncelleme
    accel_buffer[accel_buffer_index] = accel_abs;
 8007852:	4b31      	ldr	r3, [pc, #196]	@ (8007918 <detect_accel_failure+0xdc>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	4a31      	ldr	r2, [pc, #196]	@ (800791c <detect_accel_failure+0xe0>)
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	601a      	str	r2, [r3, #0]
    accel_buffer_index = (accel_buffer_index + 1) % ACCEL_BUFFER_SIZE;
 8007860:	4b2d      	ldr	r3, [pc, #180]	@ (8007918 <detect_accel_failure+0xdc>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	1c5a      	adds	r2, r3, #1
 8007866:	4b2e      	ldr	r3, [pc, #184]	@ (8007920 <detect_accel_failure+0xe4>)
 8007868:	fb83 1302 	smull	r1, r3, r3, r2
 800786c:	1059      	asrs	r1, r3, #1
 800786e:	17d3      	asrs	r3, r2, #31
 8007870:	1ac9      	subs	r1, r1, r3
 8007872:	460b      	mov	r3, r1
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	440b      	add	r3, r1
 8007878:	1ad1      	subs	r1, r2, r3
 800787a:	b2ca      	uxtb	r2, r1
 800787c:	4b26      	ldr	r3, [pc, #152]	@ (8007918 <detect_accel_failure+0xdc>)
 800787e:	701a      	strb	r2, [r3, #0]
    if (accel_buffer_index == 0) {
 8007880:	4b25      	ldr	r3, [pc, #148]	@ (8007918 <detect_accel_failure+0xdc>)
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d102      	bne.n	800788e <detect_accel_failure+0x52>
        accel_buffer_full = 1;
 8007888:	4b26      	ldr	r3, [pc, #152]	@ (8007924 <detect_accel_failure+0xe8>)
 800788a:	2201      	movs	r2, #1
 800788c:	701a      	strb	r2, [r3, #0]
    }

    // Standart sapma hesapla
    float std_dev = calculate_accel_std_deviation();
 800788e:	f7ff ff4f 	bl	8007730 <calculate_accel_std_deviation>
 8007892:	ed87 0a04 	vstr	s0, [r7, #16]

    // Uçuş başlangıç zamanını flight_algorithm'dan al
	uint32_t algorithm_start_time = flight_algorithm_get_start_time();
 8007896:	f7fb fca3 	bl	80031e0 <flight_algorithm_get_start_time>
 800789a:	60f8      	str	r0, [r7, #12]

	// Uçuş başlamışsa flight_algorithm'dan gelen zamanı kullan
	if (algorithm_start_time > 0) {
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <detect_accel_failure+0x6c>
		flight_start_time = algorithm_start_time;
 80078a2:	4a21      	ldr	r2, [pc, #132]	@ (8007928 <detect_accel_failure+0xec>)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6013      	str	r3, [r2, #0]
	}

	// Uçuş fazına göre limit değerlerini belirle
	if (flight_start_time == 0) {
 80078a8:	4b1f      	ldr	r3, [pc, #124]	@ (8007928 <detect_accel_failure+0xec>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d104      	bne.n	80078ba <detect_accel_failure+0x7e>
		max_accel = 200.0f;  // Yer hazırlığında gerçekçi olmayan çok yüksek değer
 80078b0:	4b1e      	ldr	r3, [pc, #120]	@ (800792c <detect_accel_failure+0xf0>)
 80078b2:	61fb      	str	r3, [r7, #28]
		max_std = 100.0f;    // Yer hazırlığında çok yüksek standart sapma eşiği
 80078b4:	4b1e      	ldr	r3, [pc, #120]	@ (8007930 <detect_accel_failure+0xf4>)
 80078b6:	61bb      	str	r3, [r7, #24]
 80078b8:	e014      	b.n	80078e4 <detect_accel_failure+0xa8>
	}
	else {
		// *** UÇUŞ BAŞLADI - NORMAL ARIZA TESPİTİ ***
		uint32_t flight_elapsed_time = HAL_GetTick() - flight_start_time;
 80078ba:	f001 f9bb 	bl	8008c34 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	4b19      	ldr	r3, [pc, #100]	@ (8007928 <detect_accel_failure+0xec>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	60bb      	str	r3, [r7, #8]

		if (flight_elapsed_time < THRUST_PHASE_DURATION_MS) {
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d804      	bhi.n	80078dc <detect_accel_failure+0xa0>
			// İtki fazı - Yüksek limitler
			max_accel = ACCEL_MAX_VALUE_THRUST;
 80078d2:	4b18      	ldr	r3, [pc, #96]	@ (8007934 <detect_accel_failure+0xf8>)
 80078d4:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_THRUST;
 80078d6:	4b18      	ldr	r3, [pc, #96]	@ (8007938 <detect_accel_failure+0xfc>)
 80078d8:	61bb      	str	r3, [r7, #24]
 80078da:	e003      	b.n	80078e4 <detect_accel_failure+0xa8>
		} else {
			// Seyir fazı - Düşük limitler
			max_accel = ACCEL_MAX_VALUE_CRUISE;
 80078dc:	4b16      	ldr	r3, [pc, #88]	@ (8007938 <detect_accel_failure+0xfc>)
 80078de:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_CRUISE;
 80078e0:	4b16      	ldr	r3, [pc, #88]	@ (800793c <detect_accel_failure+0x100>)
 80078e2:	61bb      	str	r3, [r7, #24]
		}
	}

    // İvme değeri veya standart sapma limitler dışındaysa
    if (accel_abs > max_accel || std_dev > max_std) {
 80078e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80078e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80078ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80078f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f4:	dc08      	bgt.n	8007908 <detect_accel_failure+0xcc>
 80078f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80078fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80078fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007906:	dd01      	ble.n	800790c <detect_accel_failure+0xd0>
        return 1;  // Arıza tespit edildi
 8007908:	2301      	movs	r3, #1
 800790a:	e000      	b.n	800790e <detect_accel_failure+0xd2>
    }

    return 0;  // Arıza yok
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3720      	adds	r7, #32
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20001824 	.word	0x20001824
 800791c:	20001810 	.word	0x20001810
 8007920:	66666667 	.word	0x66666667
 8007924:	20001825 	.word	0x20001825
 8007928:	2000180c 	.word	0x2000180c
 800792c:	43480000 	.word	0x43480000
 8007930:	42c80000 	.word	0x42c80000
 8007934:	43160000 	.word	0x43160000
 8007938:	42480000 	.word	0x42480000
 800793c:	41700000 	.word	0x41700000

08007940 <sensor_fusion_init>:

/**
 * @brief Initialize the sensor fusion module
 */
void sensor_fusion_init(BME_280_t* BME)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
    KalmanFilter_Init(&kalman);
 8007948:	481b      	ldr	r0, [pc, #108]	@ (80079b8 <sensor_fusion_init+0x78>)
 800794a:	f7fb fcc9 	bl	80032e0 <KalmanFilter_Init>

    // Sensörlerinize göre gürültü değerlerini ayarlayın
    kalman.process_noise = 0.1f;         // Model gürültüsü
 800794e:	4b1a      	ldr	r3, [pc, #104]	@ (80079b8 <sensor_fusion_init+0x78>)
 8007950:	4a1a      	ldr	r2, [pc, #104]	@ (80079bc <sensor_fusion_init+0x7c>)
 8007952:	631a      	str	r2, [r3, #48]	@ 0x30
    kalman.measurement_noise_alt = 0.005f;  // BME280 yükseklik gürültüsü
 8007954:	4b18      	ldr	r3, [pc, #96]	@ (80079b8 <sensor_fusion_init+0x78>)
 8007956:	4a1a      	ldr	r2, [pc, #104]	@ (80079c0 <sensor_fusion_init+0x80>)
 8007958:	635a      	str	r2, [r3, #52]	@ 0x34
    kalman.measurement_noise_acc = 5.0f;  // BMI088 ivme gürültüsü
 800795a:	4b17      	ldr	r3, [pc, #92]	@ (80079b8 <sensor_fusion_init+0x78>)
 800795c:	4a19      	ldr	r2, [pc, #100]	@ (80079c4 <sensor_fusion_init+0x84>)
 800795e:	639a      	str	r2, [r3, #56]	@ 0x38


    // İvme arıza tespit değişkenlerini sıfırla
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8007960:	2300      	movs	r3, #0
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	e009      	b.n	800797a <sensor_fusion_init+0x3a>
        accel_buffer[i] = 0.0f;
 8007966:	4a18      	ldr	r2, [pc, #96]	@ (80079c8 <sensor_fusion_init+0x88>)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	f04f 0200 	mov.w	r2, #0
 8007972:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	3301      	adds	r3, #1
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2b04      	cmp	r3, #4
 800797e:	ddf2      	ble.n	8007966 <sensor_fusion_init+0x26>
    }
    accel_buffer_index = 0;
 8007980:	4b12      	ldr	r3, [pc, #72]	@ (80079cc <sensor_fusion_init+0x8c>)
 8007982:	2200      	movs	r2, #0
 8007984:	701a      	strb	r2, [r3, #0]
    accel_buffer_full = 0;
 8007986:	4b12      	ldr	r3, [pc, #72]	@ (80079d0 <sensor_fusion_init+0x90>)
 8007988:	2200      	movs	r2, #0
 800798a:	701a      	strb	r2, [r3, #0]
    accel_failure_detected = 0;
 800798c:	4b11      	ldr	r3, [pc, #68]	@ (80079d4 <sensor_fusion_init+0x94>)
 800798e:	2200      	movs	r2, #0
 8007990:	701a      	strb	r2, [r3, #0]

    initialized = 1;
 8007992:	4b11      	ldr	r3, [pc, #68]	@ (80079d8 <sensor_fusion_init+0x98>)
 8007994:	2201      	movs	r2, #1
 8007996:	701a      	strb	r2, [r3, #0]
    reference_altitude = BME->base_altitude;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800799c:	4a0f      	ldr	r2, [pc, #60]	@ (80079dc <sensor_fusion_init+0x9c>)
 800799e:	6013      	str	r3, [r2, #0]
    last_kalman_update_time = HAL_GetTick();
 80079a0:	f001 f948 	bl	8008c34 <HAL_GetTick>
 80079a4:	4603      	mov	r3, r0
 80079a6:	4a0e      	ldr	r2, [pc, #56]	@ (80079e0 <sensor_fusion_init+0xa0>)
 80079a8:	6013      	str	r3, [r2, #0]
    flight_start_time = 0;
 80079aa:	4b0e      	ldr	r3, [pc, #56]	@ (80079e4 <sensor_fusion_init+0xa4>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	601a      	str	r2, [r3, #0]
}
 80079b0:	bf00      	nop
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	200017b4 	.word	0x200017b4
 80079bc:	3dcccccd 	.word	0x3dcccccd
 80079c0:	3ba3d70a 	.word	0x3ba3d70a
 80079c4:	40a00000 	.word	0x40a00000
 80079c8:	20001810 	.word	0x20001810
 80079cc:	20001824 	.word	0x20001824
 80079d0:	20001825 	.word	0x20001825
 80079d4:	20001826 	.word	0x20001826
 80079d8:	20001800 	.word	0x20001800
 80079dc:	20001804 	.word	0x20001804
 80079e0:	20001808 	.word	0x20001808
 80079e4:	2000180c 	.word	0x2000180c

080079e8 <sensor_fusion_update_kalman>:

/**
 * @brief Update sensor fusion with new measurements (Kalman filter)
 */
void sensor_fusion_update_kalman(BME_280_t* BME, bmi088_struct_t* BMI, sensor_fusion_t* sensor)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b08a      	sub	sp, #40	@ 0x28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
    // Get current time for automatic delta calculation
    uint32_t current_time = HAL_GetTick();
 80079f4:	f001 f91e 	bl	8008c34 <HAL_GetTick>
 80079f8:	6238      	str	r0, [r7, #32]

    // Calculate time difference in seconds
    float time_sec = (current_time - last_kalman_update_time) / 1000.0f;
 80079fa:	4b4b      	ldr	r3, [pc, #300]	@ (8007b28 <sensor_fusion_update_kalman+0x140>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6a3a      	ldr	r2, [r7, #32]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	ee07 3a90 	vmov	s15, r3
 8007a06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a0a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007b2c <sensor_fusion_update_kalman+0x144>
 8007a0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a12:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Update the last update time
    last_kalman_update_time = current_time;
 8007a16:	4a44      	ldr	r2, [pc, #272]	@ (8007b28 <sensor_fusion_update_kalman+0x140>)
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	6013      	str	r3, [r2, #0]

    float altitude = BME->altitude;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	61fb      	str	r3, [r7, #28]

    // Ensure time is valid (never zero or negative)
    if (time_sec <= 0.001f) {
 8007a22:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8007a26:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8007b30 <sensor_fusion_update_kalman+0x148>
 8007a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a32:	d801      	bhi.n	8007a38 <sensor_fusion_update_kalman+0x50>
        time_sec = 0.01f; // Use default time step if invalid
 8007a34:	4b3f      	ldr	r3, [pc, #252]	@ (8007b34 <sensor_fusion_update_kalman+0x14c>)
 8007a36:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calculate vertical acceleration by compensating for gravity using IMU orientation
    float angle_rad = BMI->datas.theta * (M_PI / 180.0f);  // dereceyse radyana çevir
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7f8 fda3 	bl	8000588 <__aeabi_f2d>
 8007a42:	a335      	add	r3, pc, #212	@ (adr r3, 8007b18 <sensor_fusion_update_kalman+0x130>)
 8007a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a48:	f7f8 fdf6 	bl	8000638 <__aeabi_dmul>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4610      	mov	r0, r2
 8007a52:	4619      	mov	r1, r3
 8007a54:	f7f9 f8e8 	bl	8000c28 <__aeabi_d2f>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	61bb      	str	r3, [r7, #24]

    // Yerçekimi ivmesinin lokal z eksenindeki bileşeni
    float g_local_z = 9.81f * cos(angle_rad);
 8007a5c:	69b8      	ldr	r0, [r7, #24]
 8007a5e:	f7f8 fd93 	bl	8000588 <__aeabi_f2d>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	ec43 2b10 	vmov	d0, r2, r3
 8007a6a:	f00b fcc9 	bl	8013400 <cos>
 8007a6e:	ec51 0b10 	vmov	r0, r1, d0
 8007a72:	a32b      	add	r3, pc, #172	@ (adr r3, 8007b20 <sensor_fusion_update_kalman+0x138>)
 8007a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a78:	f7f8 fdde 	bl	8000638 <__aeabi_dmul>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	4610      	mov	r0, r2
 8007a82:	4619      	mov	r1, r3
 8007a84:	f7f9 f8d0 	bl	8000c28 <__aeabi_d2f>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	617b      	str	r3, [r7, #20]

    // Gerçek ivmeyi hesapla:
    float accel_z_corrected = BMI->datas.acc_z - g_local_z;
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8007a92:	edd7 7a05 	vldr	s15, [r7, #20]
 8007a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a9a:	edc7 7a04 	vstr	s15, [r7, #16]

    // İvme sensörü arıza tespiti
    accel_failure_detected = detect_accel_failure(accel_z_corrected);
 8007a9e:	ed97 0a04 	vldr	s0, [r7, #16]
 8007aa2:	f7ff fecb 	bl	800783c <detect_accel_failure>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	4b23      	ldr	r3, [pc, #140]	@ (8007b38 <sensor_fusion_update_kalman+0x150>)
 8007aac:	701a      	strb	r2, [r3, #0]

    // Arıza durumuna göre Kalman filtresi parametrelerini güncelle
    if (accel_failure_detected) {
 8007aae:	4b22      	ldr	r3, [pc, #136]	@ (8007b38 <sensor_fusion_update_kalman+0x150>)
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d003      	beq.n	8007abe <sensor_fusion_update_kalman+0xd6>
        // Arıza tespit edildi - ivme sensörüne çok az güven
        kalman.measurement_noise_acc = 50.0f;
 8007ab6:	4b21      	ldr	r3, [pc, #132]	@ (8007b3c <sensor_fusion_update_kalman+0x154>)
 8007ab8:	4a21      	ldr	r2, [pc, #132]	@ (8007b40 <sensor_fusion_update_kalman+0x158>)
 8007aba:	639a      	str	r2, [r3, #56]	@ 0x38
 8007abc:	e002      	b.n	8007ac4 <sensor_fusion_update_kalman+0xdc>
    } else {
        // Normal durum - normal güven
        kalman.measurement_noise_acc = 0.3f;
 8007abe:	4b1f      	ldr	r3, [pc, #124]	@ (8007b3c <sensor_fusion_update_kalman+0x154>)
 8007ac0:	4a20      	ldr	r2, [pc, #128]	@ (8007b44 <sensor_fusion_update_kalman+0x15c>)
 8007ac2:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Only update if initialized
    if (initialized) {
 8007ac4:	4b20      	ldr	r3, [pc, #128]	@ (8007b48 <sensor_fusion_update_kalman+0x160>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d020      	beq.n	8007b0e <sensor_fusion_update_kalman+0x126>
        sensor->filtered_altitude = KalmanFilter_Update(&kalman, altitude, accel_z_corrected, time_sec);
 8007acc:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 8007ad0:	edd7 0a04 	vldr	s1, [r7, #16]
 8007ad4:	ed97 0a07 	vldr	s0, [r7, #28]
 8007ad8:	4818      	ldr	r0, [pc, #96]	@ (8007b3c <sensor_fusion_update_kalman+0x154>)
 8007ada:	f7fb fc5b 	bl	8003394 <KalmanFilter_Update>
 8007ade:	eef0 7a40 	vmov.f32	s15, s0
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	edc3 7a00 	vstr	s15, [r3]
        sensor->apogeeDetect = KalmanFilter_IsApogeeDetected(&kalman);
 8007ae8:	4814      	ldr	r0, [pc, #80]	@ (8007b3c <sensor_fusion_update_kalman+0x154>)
 8007aea:	f7fc fe37 	bl	800475c <KalmanFilter_IsApogeeDetected>
 8007aee:	4603      	mov	r3, r0
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	761a      	strb	r2, [r3, #24]
        sensor->velocity = Kalman_Get_Velocity(&kalman);
 8007af6:	4811      	ldr	r0, [pc, #68]	@ (8007b3c <sensor_fusion_update_kalman+0x154>)
 8007af8:	f7fc fe21 	bl	800473e <Kalman_Get_Velocity>
 8007afc:	eef0 7a40 	vmov.f32	s15, s0
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	edc3 7a01 	vstr	s15, [r3, #4]
            sensor->velocity = (sensor->filtered_altitude - prev_altitude) / time_sec;
        }
        prev_altitude = sensor->filtered_altitude;*/

        // Arıza durumunu sensor yapısına ekleyelim (telemetri için kullanılabilir)
        sensor->accel_failure = accel_failure_detected;
 8007b06:	4b0c      	ldr	r3, [pc, #48]	@ (8007b38 <sensor_fusion_update_kalman+0x150>)
 8007b08:	781a      	ldrb	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	765a      	strb	r2, [r3, #25]
    }
}
 8007b0e:	bf00      	nop
 8007b10:	3728      	adds	r7, #40	@ 0x28
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	a2529d39 	.word	0xa2529d39
 8007b1c:	3f91df46 	.word	0x3f91df46
 8007b20:	60000000 	.word	0x60000000
 8007b24:	40239eb8 	.word	0x40239eb8
 8007b28:	20001808 	.word	0x20001808
 8007b2c:	447a0000 	.word	0x447a0000
 8007b30:	3a83126f 	.word	0x3a83126f
 8007b34:	3c23d70a 	.word	0x3c23d70a
 8007b38:	20001826 	.word	0x20001826
 8007b3c:	200017b4 	.word	0x200017b4
 8007b40:	42480000 	.word	0x42480000
 8007b44:	3e99999a 	.word	0x3e99999a
 8007b48:	20001800 	.word	0x20001800

08007b4c <sensor_fusion_update_mahony>:

/**
 * @brief Update orientation using Mahony filter
 */
void sensor_fusion_update_mahony(bmi088_struct_t* BMI, sensor_fusion_t *sensor)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
		sensor->yaw = quaternionToYaw();
		sensor->pitch = quaternionToPitch();
		sensor->roll = quaternionToRoll();
		BMI->isUpdated = 0;
	}*/
}
 8007b56:	bf00      	nop
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
	...

08007b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	607b      	str	r3, [r7, #4]
 8007b6e:	4b10      	ldr	r3, [pc, #64]	@ (8007bb0 <HAL_MspInit+0x4c>)
 8007b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b72:	4a0f      	ldr	r2, [pc, #60]	@ (8007bb0 <HAL_MspInit+0x4c>)
 8007b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb0 <HAL_MspInit+0x4c>)
 8007b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b82:	607b      	str	r3, [r7, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b86:	2300      	movs	r3, #0
 8007b88:	603b      	str	r3, [r7, #0]
 8007b8a:	4b09      	ldr	r3, [pc, #36]	@ (8007bb0 <HAL_MspInit+0x4c>)
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b8e:	4a08      	ldr	r2, [pc, #32]	@ (8007bb0 <HAL_MspInit+0x4c>)
 8007b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b96:	4b06      	ldr	r3, [pc, #24]	@ (8007bb0 <HAL_MspInit+0x4c>)
 8007b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b9e:	603b      	str	r3, [r7, #0]
 8007ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007ba2:	bf00      	nop
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	40023800 	.word	0x40023800

08007bb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b08c      	sub	sp, #48	@ 0x30
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bbc:	f107 031c 	add.w	r3, r7, #28
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	605a      	str	r2, [r3, #4]
 8007bc6:	609a      	str	r2, [r3, #8]
 8007bc8:	60da      	str	r2, [r3, #12]
 8007bca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a5e      	ldr	r2, [pc, #376]	@ (8007d4c <HAL_ADC_MspInit+0x198>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d158      	bne.n	8007c88 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	61bb      	str	r3, [r7, #24]
 8007bda:	4b5d      	ldr	r3, [pc, #372]	@ (8007d50 <HAL_ADC_MspInit+0x19c>)
 8007bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bde:	4a5c      	ldr	r2, [pc, #368]	@ (8007d50 <HAL_ADC_MspInit+0x19c>)
 8007be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8007be6:	4b5a      	ldr	r3, [pc, #360]	@ (8007d50 <HAL_ADC_MspInit+0x19c>)
 8007be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bee:	61bb      	str	r3, [r7, #24]
 8007bf0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	617b      	str	r3, [r7, #20]
 8007bf6:	4b56      	ldr	r3, [pc, #344]	@ (8007d50 <HAL_ADC_MspInit+0x19c>)
 8007bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bfa:	4a55      	ldr	r2, [pc, #340]	@ (8007d50 <HAL_ADC_MspInit+0x19c>)
 8007bfc:	f043 0302 	orr.w	r3, r3, #2
 8007c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8007c02:	4b53      	ldr	r3, [pc, #332]	@ (8007d50 <HAL_ADC_MspInit+0x19c>)
 8007c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c06:	f003 0302 	and.w	r3, r3, #2
 8007c0a:	617b      	str	r3, [r7, #20]
 8007c0c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007c0e:	2302      	movs	r3, #2
 8007c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c12:	2303      	movs	r3, #3
 8007c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c1a:	f107 031c 	add.w	r3, r7, #28
 8007c1e:	4619      	mov	r1, r3
 8007c20:	484c      	ldr	r0, [pc, #304]	@ (8007d54 <HAL_ADC_MspInit+0x1a0>)
 8007c22:	f002 fa01 	bl	800a028 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8007c26:	4b4c      	ldr	r3, [pc, #304]	@ (8007d58 <HAL_ADC_MspInit+0x1a4>)
 8007c28:	4a4c      	ldr	r2, [pc, #304]	@ (8007d5c <HAL_ADC_MspInit+0x1a8>)
 8007c2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8007c2c:	4b4a      	ldr	r3, [pc, #296]	@ (8007d58 <HAL_ADC_MspInit+0x1a4>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007c32:	4b49      	ldr	r3, [pc, #292]	@ (8007d58 <HAL_ADC_MspInit+0x1a4>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c38:	4b47      	ldr	r3, [pc, #284]	@ (8007d58 <HAL_ADC_MspInit+0x1a4>)
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007c3e:	4b46      	ldr	r3, [pc, #280]	@ (8007d58 <HAL_ADC_MspInit+0x1a4>)
 8007c40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007c44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007c46:	4b44      	ldr	r3, [pc, #272]	@ (8007d58 <HAL_ADC_MspInit+0x1a4>)
 8007c48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007c4e:	4b42      	ldr	r3, [pc, #264]	@ (8007d58 <HAL_ADC_MspInit+0x1a4>)
 8007c50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007c54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007c56:	4b40      	ldr	r3, [pc, #256]	@ (8007d58 <HAL_ADC_MspInit+0x1a4>)
 8007c58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c5c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007c5e:	4b3e      	ldr	r3, [pc, #248]	@ (8007d58 <HAL_ADC_MspInit+0x1a4>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007c64:	4b3c      	ldr	r3, [pc, #240]	@ (8007d58 <HAL_ADC_MspInit+0x1a4>)
 8007c66:	2200      	movs	r2, #0
 8007c68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007c6a:	483b      	ldr	r0, [pc, #236]	@ (8007d58 <HAL_ADC_MspInit+0x1a4>)
 8007c6c:	f001 fd7c 	bl	8009768 <HAL_DMA_Init>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8007c76:	f7fd ff8d 	bl	8005b94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a36      	ldr	r2, [pc, #216]	@ (8007d58 <HAL_ADC_MspInit+0x1a4>)
 8007c7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007c80:	4a35      	ldr	r2, [pc, #212]	@ (8007d58 <HAL_ADC_MspInit+0x1a4>)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8007c86:	e05d      	b.n	8007d44 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a34      	ldr	r2, [pc, #208]	@ (8007d60 <HAL_ADC_MspInit+0x1ac>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d158      	bne.n	8007d44 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007c92:	2300      	movs	r3, #0
 8007c94:	613b      	str	r3, [r7, #16]
 8007c96:	4b2e      	ldr	r3, [pc, #184]	@ (8007d50 <HAL_ADC_MspInit+0x19c>)
 8007c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c9a:	4a2d      	ldr	r2, [pc, #180]	@ (8007d50 <HAL_ADC_MspInit+0x19c>)
 8007c9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8007ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8007d50 <HAL_ADC_MspInit+0x19c>)
 8007ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ca6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007caa:	613b      	str	r3, [r7, #16]
 8007cac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60fb      	str	r3, [r7, #12]
 8007cb2:	4b27      	ldr	r3, [pc, #156]	@ (8007d50 <HAL_ADC_MspInit+0x19c>)
 8007cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb6:	4a26      	ldr	r2, [pc, #152]	@ (8007d50 <HAL_ADC_MspInit+0x19c>)
 8007cb8:	f043 0302 	orr.w	r3, r3, #2
 8007cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8007cbe:	4b24      	ldr	r3, [pc, #144]	@ (8007d50 <HAL_ADC_MspInit+0x19c>)
 8007cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cc2:	f003 0302 	and.w	r3, r3, #2
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cd6:	f107 031c 	add.w	r3, r7, #28
 8007cda:	4619      	mov	r1, r3
 8007cdc:	481d      	ldr	r0, [pc, #116]	@ (8007d54 <HAL_ADC_MspInit+0x1a0>)
 8007cde:	f002 f9a3 	bl	800a028 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream3;
 8007ce2:	4b20      	ldr	r3, [pc, #128]	@ (8007d64 <HAL_ADC_MspInit+0x1b0>)
 8007ce4:	4a20      	ldr	r2, [pc, #128]	@ (8007d68 <HAL_ADC_MspInit+0x1b4>)
 8007ce6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8007ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8007d64 <HAL_ADC_MspInit+0x1b0>)
 8007cea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007cee:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8007d64 <HAL_ADC_MspInit+0x1b0>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8007cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8007d64 <HAL_ADC_MspInit+0x1b0>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8007cfc:	4b19      	ldr	r3, [pc, #100]	@ (8007d64 <HAL_ADC_MspInit+0x1b0>)
 8007cfe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007d02:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007d04:	4b17      	ldr	r3, [pc, #92]	@ (8007d64 <HAL_ADC_MspInit+0x1b0>)
 8007d06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d0a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007d0c:	4b15      	ldr	r3, [pc, #84]	@ (8007d64 <HAL_ADC_MspInit+0x1b0>)
 8007d0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007d12:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8007d14:	4b13      	ldr	r3, [pc, #76]	@ (8007d64 <HAL_ADC_MspInit+0x1b0>)
 8007d16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d1a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8007d1c:	4b11      	ldr	r3, [pc, #68]	@ (8007d64 <HAL_ADC_MspInit+0x1b0>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007d22:	4b10      	ldr	r3, [pc, #64]	@ (8007d64 <HAL_ADC_MspInit+0x1b0>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8007d28:	480e      	ldr	r0, [pc, #56]	@ (8007d64 <HAL_ADC_MspInit+0x1b0>)
 8007d2a:	f001 fd1d 	bl	8009768 <HAL_DMA_Init>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8007d34:	f7fd ff2e 	bl	8005b94 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8007d64 <HAL_ADC_MspInit+0x1b0>)
 8007d3c:	639a      	str	r2, [r3, #56]	@ 0x38
 8007d3e:	4a09      	ldr	r2, [pc, #36]	@ (8007d64 <HAL_ADC_MspInit+0x1b0>)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8007d44:	bf00      	nop
 8007d46:	3730      	adds	r7, #48	@ 0x30
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	40012000 	.word	0x40012000
 8007d50:	40023800 	.word	0x40023800
 8007d54:	40020400 	.word	0x40020400
 8007d58:	200011ac 	.word	0x200011ac
 8007d5c:	40026410 	.word	0x40026410
 8007d60:	40012100 	.word	0x40012100
 8007d64:	2000120c 	.word	0x2000120c
 8007d68:	40026458 	.word	0x40026458

08007d6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b08c      	sub	sp, #48	@ 0x30
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d74:	f107 031c 	add.w	r3, r7, #28
 8007d78:	2200      	movs	r2, #0
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	605a      	str	r2, [r3, #4]
 8007d7e:	609a      	str	r2, [r3, #8]
 8007d80:	60da      	str	r2, [r3, #12]
 8007d82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a42      	ldr	r2, [pc, #264]	@ (8007e94 <HAL_I2C_MspInit+0x128>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d12d      	bne.n	8007dea <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d8e:	2300      	movs	r3, #0
 8007d90:	61bb      	str	r3, [r7, #24]
 8007d92:	4b41      	ldr	r3, [pc, #260]	@ (8007e98 <HAL_I2C_MspInit+0x12c>)
 8007d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d96:	4a40      	ldr	r2, [pc, #256]	@ (8007e98 <HAL_I2C_MspInit+0x12c>)
 8007d98:	f043 0302 	orr.w	r3, r3, #2
 8007d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d9e:	4b3e      	ldr	r3, [pc, #248]	@ (8007e98 <HAL_I2C_MspInit+0x12c>)
 8007da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	61bb      	str	r3, [r7, #24]
 8007da8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8007daa:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8007dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007db0:	2312      	movs	r3, #18
 8007db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007db4:	2300      	movs	r3, #0
 8007db6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007db8:	2303      	movs	r3, #3
 8007dba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007dbc:	2304      	movs	r3, #4
 8007dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007dc0:	f107 031c 	add.w	r3, r7, #28
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4835      	ldr	r0, [pc, #212]	@ (8007e9c <HAL_I2C_MspInit+0x130>)
 8007dc8:	f002 f92e 	bl	800a028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007dcc:	2300      	movs	r3, #0
 8007dce:	617b      	str	r3, [r7, #20]
 8007dd0:	4b31      	ldr	r3, [pc, #196]	@ (8007e98 <HAL_I2C_MspInit+0x12c>)
 8007dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd4:	4a30      	ldr	r2, [pc, #192]	@ (8007e98 <HAL_I2C_MspInit+0x12c>)
 8007dd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007dda:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8007e98 <HAL_I2C_MspInit+0x12c>)
 8007dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007de4:	617b      	str	r3, [r7, #20]
 8007de6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8007de8:	e050      	b.n	8007e8c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a2c      	ldr	r2, [pc, #176]	@ (8007ea0 <HAL_I2C_MspInit+0x134>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d14b      	bne.n	8007e8c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007df4:	2300      	movs	r3, #0
 8007df6:	613b      	str	r3, [r7, #16]
 8007df8:	4b27      	ldr	r3, [pc, #156]	@ (8007e98 <HAL_I2C_MspInit+0x12c>)
 8007dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dfc:	4a26      	ldr	r2, [pc, #152]	@ (8007e98 <HAL_I2C_MspInit+0x12c>)
 8007dfe:	f043 0304 	orr.w	r3, r3, #4
 8007e02:	6313      	str	r3, [r2, #48]	@ 0x30
 8007e04:	4b24      	ldr	r3, [pc, #144]	@ (8007e98 <HAL_I2C_MspInit+0x12c>)
 8007e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e08:	f003 0304 	and.w	r3, r3, #4
 8007e0c:	613b      	str	r3, [r7, #16]
 8007e0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e10:	2300      	movs	r3, #0
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	4b20      	ldr	r3, [pc, #128]	@ (8007e98 <HAL_I2C_MspInit+0x12c>)
 8007e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e18:	4a1f      	ldr	r2, [pc, #124]	@ (8007e98 <HAL_I2C_MspInit+0x12c>)
 8007e1a:	f043 0301 	orr.w	r3, r3, #1
 8007e1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007e20:	4b1d      	ldr	r3, [pc, #116]	@ (8007e98 <HAL_I2C_MspInit+0x12c>)
 8007e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	60fb      	str	r3, [r7, #12]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007e2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007e32:	2312      	movs	r3, #18
 8007e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e36:	2301      	movs	r3, #1
 8007e38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007e3e:	2304      	movs	r3, #4
 8007e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e42:	f107 031c 	add.w	r3, r7, #28
 8007e46:	4619      	mov	r1, r3
 8007e48:	4816      	ldr	r0, [pc, #88]	@ (8007ea4 <HAL_I2C_MspInit+0x138>)
 8007e4a:	f002 f8ed 	bl	800a028 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007e4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007e54:	2312      	movs	r3, #18
 8007e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007e60:	2304      	movs	r3, #4
 8007e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e64:	f107 031c 	add.w	r3, r7, #28
 8007e68:	4619      	mov	r1, r3
 8007e6a:	480f      	ldr	r0, [pc, #60]	@ (8007ea8 <HAL_I2C_MspInit+0x13c>)
 8007e6c:	f002 f8dc 	bl	800a028 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007e70:	2300      	movs	r3, #0
 8007e72:	60bb      	str	r3, [r7, #8]
 8007e74:	4b08      	ldr	r3, [pc, #32]	@ (8007e98 <HAL_I2C_MspInit+0x12c>)
 8007e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e78:	4a07      	ldr	r2, [pc, #28]	@ (8007e98 <HAL_I2C_MspInit+0x12c>)
 8007e7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007e7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e80:	4b05      	ldr	r3, [pc, #20]	@ (8007e98 <HAL_I2C_MspInit+0x12c>)
 8007e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e88:	60bb      	str	r3, [r7, #8]
 8007e8a:	68bb      	ldr	r3, [r7, #8]
}
 8007e8c:	bf00      	nop
 8007e8e:	3730      	adds	r7, #48	@ 0x30
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	40005400 	.word	0x40005400
 8007e98:	40023800 	.word	0x40023800
 8007e9c:	40020400 	.word	0x40020400
 8007ea0:	40005c00 	.word	0x40005c00
 8007ea4:	40020800 	.word	0x40020800
 8007ea8:	40020000 	.word	0x40020000

08007eac <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a15      	ldr	r2, [pc, #84]	@ (8007f10 <HAL_I2C_MspDeInit+0x64>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d10f      	bne.n	8007ede <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8007ebe:	4b15      	ldr	r3, [pc, #84]	@ (8007f14 <HAL_I2C_MspDeInit+0x68>)
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec2:	4a14      	ldr	r2, [pc, #80]	@ (8007f14 <HAL_I2C_MspDeInit+0x68>)
 8007ec4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ec8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8007eca:	2180      	movs	r1, #128	@ 0x80
 8007ecc:	4812      	ldr	r0, [pc, #72]	@ (8007f18 <HAL_I2C_MspDeInit+0x6c>)
 8007ece:	f002 fa3f 	bl	800a350 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8007ed2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007ed6:	4810      	ldr	r0, [pc, #64]	@ (8007f18 <HAL_I2C_MspDeInit+0x6c>)
 8007ed8:	f002 fa3a 	bl	800a350 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8007edc:	e014      	b.n	8007f08 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a0e      	ldr	r2, [pc, #56]	@ (8007f1c <HAL_I2C_MspDeInit+0x70>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d10f      	bne.n	8007f08 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8007ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8007f14 <HAL_I2C_MspDeInit+0x68>)
 8007eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eec:	4a09      	ldr	r2, [pc, #36]	@ (8007f14 <HAL_I2C_MspDeInit+0x68>)
 8007eee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007ef2:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8007ef4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007ef8:	4809      	ldr	r0, [pc, #36]	@ (8007f20 <HAL_I2C_MspDeInit+0x74>)
 8007efa:	f002 fa29 	bl	800a350 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8007efe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007f02:	4808      	ldr	r0, [pc, #32]	@ (8007f24 <HAL_I2C_MspDeInit+0x78>)
 8007f04:	f002 fa24 	bl	800a350 <HAL_GPIO_DeInit>
}
 8007f08:	bf00      	nop
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	40005400 	.word	0x40005400
 8007f14:	40023800 	.word	0x40023800
 8007f18:	40020400 	.word	0x40020400
 8007f1c:	40005c00 	.word	0x40005c00
 8007f20:	40020800 	.word	0x40020800
 8007f24:	40020000 	.word	0x40020000

08007f28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f38:	d115      	bne.n	8007f66 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	60fb      	str	r3, [r7, #12]
 8007f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8007f70 <HAL_TIM_Base_MspInit+0x48>)
 8007f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f42:	4a0b      	ldr	r2, [pc, #44]	@ (8007f70 <HAL_TIM_Base_MspInit+0x48>)
 8007f44:	f043 0301 	orr.w	r3, r3, #1
 8007f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f4a:	4b09      	ldr	r3, [pc, #36]	@ (8007f70 <HAL_TIM_Base_MspInit+0x48>)
 8007f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007f56:	2200      	movs	r2, #0
 8007f58:	2100      	movs	r1, #0
 8007f5a:	201c      	movs	r0, #28
 8007f5c:	f001 fbbf 	bl	80096de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007f60:	201c      	movs	r0, #28
 8007f62:	f001 fbd8 	bl	8009716 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8007f66:	bf00      	nop
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	40023800 	.word	0x40023800

08007f74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b092      	sub	sp, #72	@ 0x48
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f7c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	605a      	str	r2, [r3, #4]
 8007f86:	609a      	str	r2, [r3, #8]
 8007f88:	60da      	str	r2, [r3, #12]
 8007f8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a90      	ldr	r2, [pc, #576]	@ (80081d4 <HAL_UART_MspInit+0x260>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	f040 8094 	bne.w	80080c0 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007f98:	2300      	movs	r3, #0
 8007f9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f9c:	4b8e      	ldr	r3, [pc, #568]	@ (80081d8 <HAL_UART_MspInit+0x264>)
 8007f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa0:	4a8d      	ldr	r2, [pc, #564]	@ (80081d8 <HAL_UART_MspInit+0x264>)
 8007fa2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007fa6:	6413      	str	r3, [r2, #64]	@ 0x40
 8007fa8:	4b8b      	ldr	r3, [pc, #556]	@ (80081d8 <HAL_UART_MspInit+0x264>)
 8007faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007fb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fb8:	4b87      	ldr	r3, [pc, #540]	@ (80081d8 <HAL_UART_MspInit+0x264>)
 8007fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fbc:	4a86      	ldr	r2, [pc, #536]	@ (80081d8 <HAL_UART_MspInit+0x264>)
 8007fbe:	f043 0304 	orr.w	r3, r3, #4
 8007fc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8007fc4:	4b84      	ldr	r3, [pc, #528]	@ (80081d8 <HAL_UART_MspInit+0x264>)
 8007fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fc8:	f003 0304 	and.w	r3, r3, #4
 8007fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007fd0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007fd4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007fe2:	2308      	movs	r3, #8
 8007fe4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007fe6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007fea:	4619      	mov	r1, r3
 8007fec:	487b      	ldr	r0, [pc, #492]	@ (80081dc <HAL_UART_MspInit+0x268>)
 8007fee:	f002 f81b 	bl	800a028 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8007ff2:	4b7b      	ldr	r3, [pc, #492]	@ (80081e0 <HAL_UART_MspInit+0x26c>)
 8007ff4:	4a7b      	ldr	r2, [pc, #492]	@ (80081e4 <HAL_UART_MspInit+0x270>)
 8007ff6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8007ff8:	4b79      	ldr	r3, [pc, #484]	@ (80081e0 <HAL_UART_MspInit+0x26c>)
 8007ffa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007ffe:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008000:	4b77      	ldr	r3, [pc, #476]	@ (80081e0 <HAL_UART_MspInit+0x26c>)
 8008002:	2200      	movs	r2, #0
 8008004:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008006:	4b76      	ldr	r3, [pc, #472]	@ (80081e0 <HAL_UART_MspInit+0x26c>)
 8008008:	2200      	movs	r2, #0
 800800a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800800c:	4b74      	ldr	r3, [pc, #464]	@ (80081e0 <HAL_UART_MspInit+0x26c>)
 800800e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008012:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008014:	4b72      	ldr	r3, [pc, #456]	@ (80081e0 <HAL_UART_MspInit+0x26c>)
 8008016:	2200      	movs	r2, #0
 8008018:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800801a:	4b71      	ldr	r3, [pc, #452]	@ (80081e0 <HAL_UART_MspInit+0x26c>)
 800801c:	2200      	movs	r2, #0
 800801e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8008020:	4b6f      	ldr	r3, [pc, #444]	@ (80081e0 <HAL_UART_MspInit+0x26c>)
 8008022:	2200      	movs	r2, #0
 8008024:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8008026:	4b6e      	ldr	r3, [pc, #440]	@ (80081e0 <HAL_UART_MspInit+0x26c>)
 8008028:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800802c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800802e:	4b6c      	ldr	r3, [pc, #432]	@ (80081e0 <HAL_UART_MspInit+0x26c>)
 8008030:	2200      	movs	r2, #0
 8008032:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8008034:	486a      	ldr	r0, [pc, #424]	@ (80081e0 <HAL_UART_MspInit+0x26c>)
 8008036:	f001 fb97 	bl	8009768 <HAL_DMA_Init>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8008040:	f7fd fda8 	bl	8005b94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a66      	ldr	r2, [pc, #408]	@ (80081e0 <HAL_UART_MspInit+0x26c>)
 8008048:	63da      	str	r2, [r3, #60]	@ 0x3c
 800804a:	4a65      	ldr	r2, [pc, #404]	@ (80081e0 <HAL_UART_MspInit+0x26c>)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8008050:	4b65      	ldr	r3, [pc, #404]	@ (80081e8 <HAL_UART_MspInit+0x274>)
 8008052:	4a66      	ldr	r2, [pc, #408]	@ (80081ec <HAL_UART_MspInit+0x278>)
 8008054:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8008056:	4b64      	ldr	r3, [pc, #400]	@ (80081e8 <HAL_UART_MspInit+0x274>)
 8008058:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800805c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800805e:	4b62      	ldr	r3, [pc, #392]	@ (80081e8 <HAL_UART_MspInit+0x274>)
 8008060:	2240      	movs	r2, #64	@ 0x40
 8008062:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008064:	4b60      	ldr	r3, [pc, #384]	@ (80081e8 <HAL_UART_MspInit+0x274>)
 8008066:	2200      	movs	r2, #0
 8008068:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800806a:	4b5f      	ldr	r3, [pc, #380]	@ (80081e8 <HAL_UART_MspInit+0x274>)
 800806c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008070:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008072:	4b5d      	ldr	r3, [pc, #372]	@ (80081e8 <HAL_UART_MspInit+0x274>)
 8008074:	2200      	movs	r2, #0
 8008076:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008078:	4b5b      	ldr	r3, [pc, #364]	@ (80081e8 <HAL_UART_MspInit+0x274>)
 800807a:	2200      	movs	r2, #0
 800807c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800807e:	4b5a      	ldr	r3, [pc, #360]	@ (80081e8 <HAL_UART_MspInit+0x274>)
 8008080:	2200      	movs	r2, #0
 8008082:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8008084:	4b58      	ldr	r3, [pc, #352]	@ (80081e8 <HAL_UART_MspInit+0x274>)
 8008086:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800808a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800808c:	4b56      	ldr	r3, [pc, #344]	@ (80081e8 <HAL_UART_MspInit+0x274>)
 800808e:	2200      	movs	r2, #0
 8008090:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8008092:	4855      	ldr	r0, [pc, #340]	@ (80081e8 <HAL_UART_MspInit+0x274>)
 8008094:	f001 fb68 	bl	8009768 <HAL_DMA_Init>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800809e:	f7fd fd79 	bl	8005b94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a50      	ldr	r2, [pc, #320]	@ (80081e8 <HAL_UART_MspInit+0x274>)
 80080a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80080a8:	4a4f      	ldr	r2, [pc, #316]	@ (80081e8 <HAL_UART_MspInit+0x274>)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80080ae:	2200      	movs	r2, #0
 80080b0:	2100      	movs	r1, #0
 80080b2:	2034      	movs	r0, #52	@ 0x34
 80080b4:	f001 fb13 	bl	80096de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80080b8:	2034      	movs	r0, #52	@ 0x34
 80080ba:	f001 fb2c 	bl	8009716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80080be:	e121      	b.n	8008304 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==UART5)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a4a      	ldr	r2, [pc, #296]	@ (80081f0 <HAL_UART_MspInit+0x27c>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	f040 809a 	bne.w	8008200 <HAL_UART_MspInit+0x28c>
    __HAL_RCC_UART5_CLK_ENABLE();
 80080cc:	2300      	movs	r3, #0
 80080ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080d0:	4b41      	ldr	r3, [pc, #260]	@ (80081d8 <HAL_UART_MspInit+0x264>)
 80080d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080d4:	4a40      	ldr	r2, [pc, #256]	@ (80081d8 <HAL_UART_MspInit+0x264>)
 80080d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080da:	6413      	str	r3, [r2, #64]	@ 0x40
 80080dc:	4b3e      	ldr	r3, [pc, #248]	@ (80081d8 <HAL_UART_MspInit+0x264>)
 80080de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80080e8:	2300      	movs	r3, #0
 80080ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80080ec:	4b3a      	ldr	r3, [pc, #232]	@ (80081d8 <HAL_UART_MspInit+0x264>)
 80080ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080f0:	4a39      	ldr	r2, [pc, #228]	@ (80081d8 <HAL_UART_MspInit+0x264>)
 80080f2:	f043 0304 	orr.w	r3, r3, #4
 80080f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80080f8:	4b37      	ldr	r3, [pc, #220]	@ (80081d8 <HAL_UART_MspInit+0x264>)
 80080fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	627b      	str	r3, [r7, #36]	@ 0x24
 8008102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008104:	2300      	movs	r3, #0
 8008106:	623b      	str	r3, [r7, #32]
 8008108:	4b33      	ldr	r3, [pc, #204]	@ (80081d8 <HAL_UART_MspInit+0x264>)
 800810a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800810c:	4a32      	ldr	r2, [pc, #200]	@ (80081d8 <HAL_UART_MspInit+0x264>)
 800810e:	f043 0308 	orr.w	r3, r3, #8
 8008112:	6313      	str	r3, [r2, #48]	@ 0x30
 8008114:	4b30      	ldr	r3, [pc, #192]	@ (80081d8 <HAL_UART_MspInit+0x264>)
 8008116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008118:	f003 0308 	and.w	r3, r3, #8
 800811c:	623b      	str	r3, [r7, #32]
 800811e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008124:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008126:	2302      	movs	r3, #2
 8008128:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800812a:	2300      	movs	r3, #0
 800812c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800812e:	2303      	movs	r3, #3
 8008130:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8008132:	2308      	movs	r3, #8
 8008134:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008136:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800813a:	4619      	mov	r1, r3
 800813c:	4827      	ldr	r0, [pc, #156]	@ (80081dc <HAL_UART_MspInit+0x268>)
 800813e:	f001 ff73 	bl	800a028 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008142:	2304      	movs	r3, #4
 8008144:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008146:	2302      	movs	r3, #2
 8008148:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800814a:	2300      	movs	r3, #0
 800814c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800814e:	2303      	movs	r3, #3
 8008150:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8008152:	2308      	movs	r3, #8
 8008154:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008156:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800815a:	4619      	mov	r1, r3
 800815c:	4825      	ldr	r0, [pc, #148]	@ (80081f4 <HAL_UART_MspInit+0x280>)
 800815e:	f001 ff63 	bl	800a028 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8008162:	4b25      	ldr	r3, [pc, #148]	@ (80081f8 <HAL_UART_MspInit+0x284>)
 8008164:	4a25      	ldr	r2, [pc, #148]	@ (80081fc <HAL_UART_MspInit+0x288>)
 8008166:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8008168:	4b23      	ldr	r3, [pc, #140]	@ (80081f8 <HAL_UART_MspInit+0x284>)
 800816a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800816e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008170:	4b21      	ldr	r3, [pc, #132]	@ (80081f8 <HAL_UART_MspInit+0x284>)
 8008172:	2200      	movs	r2, #0
 8008174:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008176:	4b20      	ldr	r3, [pc, #128]	@ (80081f8 <HAL_UART_MspInit+0x284>)
 8008178:	2200      	movs	r2, #0
 800817a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800817c:	4b1e      	ldr	r3, [pc, #120]	@ (80081f8 <HAL_UART_MspInit+0x284>)
 800817e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008182:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008184:	4b1c      	ldr	r3, [pc, #112]	@ (80081f8 <HAL_UART_MspInit+0x284>)
 8008186:	2200      	movs	r2, #0
 8008188:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800818a:	4b1b      	ldr	r3, [pc, #108]	@ (80081f8 <HAL_UART_MspInit+0x284>)
 800818c:	2200      	movs	r2, #0
 800818e:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8008190:	4b19      	ldr	r3, [pc, #100]	@ (80081f8 <HAL_UART_MspInit+0x284>)
 8008192:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008196:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008198:	4b17      	ldr	r3, [pc, #92]	@ (80081f8 <HAL_UART_MspInit+0x284>)
 800819a:	2200      	movs	r2, #0
 800819c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800819e:	4b16      	ldr	r3, [pc, #88]	@ (80081f8 <HAL_UART_MspInit+0x284>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80081a4:	4814      	ldr	r0, [pc, #80]	@ (80081f8 <HAL_UART_MspInit+0x284>)
 80081a6:	f001 fadf 	bl	8009768 <HAL_DMA_Init>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <HAL_UART_MspInit+0x240>
      Error_Handler();
 80081b0:	f7fd fcf0 	bl	8005b94 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a10      	ldr	r2, [pc, #64]	@ (80081f8 <HAL_UART_MspInit+0x284>)
 80081b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80081ba:	4a0f      	ldr	r2, [pc, #60]	@ (80081f8 <HAL_UART_MspInit+0x284>)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80081c0:	2200      	movs	r2, #0
 80081c2:	2100      	movs	r1, #0
 80081c4:	2035      	movs	r0, #53	@ 0x35
 80081c6:	f001 fa8a 	bl	80096de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80081ca:	2035      	movs	r0, #53	@ 0x35
 80081cc:	f001 faa3 	bl	8009716 <HAL_NVIC_EnableIRQ>
}
 80081d0:	e098      	b.n	8008304 <HAL_UART_MspInit+0x390>
 80081d2:	bf00      	nop
 80081d4:	40004c00 	.word	0x40004c00
 80081d8:	40023800 	.word	0x40023800
 80081dc:	40020800 	.word	0x40020800
 80081e0:	2000147c 	.word	0x2000147c
 80081e4:	40026040 	.word	0x40026040
 80081e8:	200014dc 	.word	0x200014dc
 80081ec:	40026070 	.word	0x40026070
 80081f0:	40005000 	.word	0x40005000
 80081f4:	40020c00 	.word	0x40020c00
 80081f8:	2000153c 	.word	0x2000153c
 80081fc:	40026010 	.word	0x40026010
  else if(huart->Instance==USART1)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a41      	ldr	r2, [pc, #260]	@ (800830c <HAL_UART_MspInit+0x398>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d14b      	bne.n	80082a2 <HAL_UART_MspInit+0x32e>
    __HAL_RCC_USART1_CLK_ENABLE();
 800820a:	2300      	movs	r3, #0
 800820c:	61fb      	str	r3, [r7, #28]
 800820e:	4b40      	ldr	r3, [pc, #256]	@ (8008310 <HAL_UART_MspInit+0x39c>)
 8008210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008212:	4a3f      	ldr	r2, [pc, #252]	@ (8008310 <HAL_UART_MspInit+0x39c>)
 8008214:	f043 0310 	orr.w	r3, r3, #16
 8008218:	6453      	str	r3, [r2, #68]	@ 0x44
 800821a:	4b3d      	ldr	r3, [pc, #244]	@ (8008310 <HAL_UART_MspInit+0x39c>)
 800821c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800821e:	f003 0310 	and.w	r3, r3, #16
 8008222:	61fb      	str	r3, [r7, #28]
 8008224:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008226:	2300      	movs	r3, #0
 8008228:	61bb      	str	r3, [r7, #24]
 800822a:	4b39      	ldr	r3, [pc, #228]	@ (8008310 <HAL_UART_MspInit+0x39c>)
 800822c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800822e:	4a38      	ldr	r2, [pc, #224]	@ (8008310 <HAL_UART_MspInit+0x39c>)
 8008230:	f043 0301 	orr.w	r3, r3, #1
 8008234:	6313      	str	r3, [r2, #48]	@ 0x30
 8008236:	4b36      	ldr	r3, [pc, #216]	@ (8008310 <HAL_UART_MspInit+0x39c>)
 8008238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	61bb      	str	r3, [r7, #24]
 8008240:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008242:	2300      	movs	r3, #0
 8008244:	617b      	str	r3, [r7, #20]
 8008246:	4b32      	ldr	r3, [pc, #200]	@ (8008310 <HAL_UART_MspInit+0x39c>)
 8008248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800824a:	4a31      	ldr	r2, [pc, #196]	@ (8008310 <HAL_UART_MspInit+0x39c>)
 800824c:	f043 0302 	orr.w	r3, r3, #2
 8008250:	6313      	str	r3, [r2, #48]	@ 0x30
 8008252:	4b2f      	ldr	r3, [pc, #188]	@ (8008310 <HAL_UART_MspInit+0x39c>)
 8008254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	617b      	str	r3, [r7, #20]
 800825c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800825e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008262:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008264:	2302      	movs	r3, #2
 8008266:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008268:	2300      	movs	r3, #0
 800826a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800826c:	2303      	movs	r3, #3
 800826e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008270:	2307      	movs	r3, #7
 8008272:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008274:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008278:	4619      	mov	r1, r3
 800827a:	4826      	ldr	r0, [pc, #152]	@ (8008314 <HAL_UART_MspInit+0x3a0>)
 800827c:	f001 fed4 	bl	800a028 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008280:	2340      	movs	r3, #64	@ 0x40
 8008282:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008284:	2302      	movs	r3, #2
 8008286:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008288:	2300      	movs	r3, #0
 800828a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800828c:	2303      	movs	r3, #3
 800828e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008290:	2307      	movs	r3, #7
 8008292:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008294:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008298:	4619      	mov	r1, r3
 800829a:	481f      	ldr	r0, [pc, #124]	@ (8008318 <HAL_UART_MspInit+0x3a4>)
 800829c:	f001 fec4 	bl	800a028 <HAL_GPIO_Init>
}
 80082a0:	e030      	b.n	8008304 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART2)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a1d      	ldr	r2, [pc, #116]	@ (800831c <HAL_UART_MspInit+0x3a8>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d12b      	bne.n	8008304 <HAL_UART_MspInit+0x390>
    __HAL_RCC_USART2_CLK_ENABLE();
 80082ac:	2300      	movs	r3, #0
 80082ae:	613b      	str	r3, [r7, #16]
 80082b0:	4b17      	ldr	r3, [pc, #92]	@ (8008310 <HAL_UART_MspInit+0x39c>)
 80082b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b4:	4a16      	ldr	r2, [pc, #88]	@ (8008310 <HAL_UART_MspInit+0x39c>)
 80082b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80082bc:	4b14      	ldr	r3, [pc, #80]	@ (8008310 <HAL_UART_MspInit+0x39c>)
 80082be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082c4:	613b      	str	r3, [r7, #16]
 80082c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082c8:	2300      	movs	r3, #0
 80082ca:	60fb      	str	r3, [r7, #12]
 80082cc:	4b10      	ldr	r3, [pc, #64]	@ (8008310 <HAL_UART_MspInit+0x39c>)
 80082ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d0:	4a0f      	ldr	r2, [pc, #60]	@ (8008310 <HAL_UART_MspInit+0x39c>)
 80082d2:	f043 0301 	orr.w	r3, r3, #1
 80082d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80082d8:	4b0d      	ldr	r3, [pc, #52]	@ (8008310 <HAL_UART_MspInit+0x39c>)
 80082da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	60fb      	str	r3, [r7, #12]
 80082e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80082e4:	230c      	movs	r3, #12
 80082e6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082e8:	2302      	movs	r3, #2
 80082ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ec:	2300      	movs	r3, #0
 80082ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082f0:	2303      	movs	r3, #3
 80082f2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80082f4:	2307      	movs	r3, #7
 80082f6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80082fc:	4619      	mov	r1, r3
 80082fe:	4805      	ldr	r0, [pc, #20]	@ (8008314 <HAL_UART_MspInit+0x3a0>)
 8008300:	f001 fe92 	bl	800a028 <HAL_GPIO_Init>
}
 8008304:	bf00      	nop
 8008306:	3748      	adds	r7, #72	@ 0x48
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	40011000 	.word	0x40011000
 8008310:	40023800 	.word	0x40023800
 8008314:	40020000 	.word	0x40020000
 8008318:	40020400 	.word	0x40020400
 800831c:	40004400 	.word	0x40004400

08008320 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a30      	ldr	r2, [pc, #192]	@ (80083f0 <HAL_UART_MspDeInit+0xd0>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d118      	bne.n	8008364 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8008332:	4b30      	ldr	r3, [pc, #192]	@ (80083f4 <HAL_UART_MspDeInit+0xd4>)
 8008334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008336:	4a2f      	ldr	r2, [pc, #188]	@ (80083f4 <HAL_UART_MspDeInit+0xd4>)
 8008338:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800833c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 800833e:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8008342:	482d      	ldr	r0, [pc, #180]	@ (80083f8 <HAL_UART_MspDeInit+0xd8>)
 8008344:	f002 f804 	bl	800a350 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800834c:	4618      	mov	r0, r3
 800834e:	f001 fab9 	bl	80098c4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008356:	4618      	mov	r0, r3
 8008358:	f001 fab4 	bl	80098c4 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 800835c:	2034      	movs	r0, #52	@ 0x34
 800835e:	f001 f9e8 	bl	8009732 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8008362:	e040      	b.n	80083e6 <HAL_UART_MspDeInit+0xc6>
  else if(huart->Instance==UART5)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a24      	ldr	r2, [pc, #144]	@ (80083fc <HAL_UART_MspDeInit+0xdc>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d117      	bne.n	800839e <HAL_UART_MspDeInit+0x7e>
    __HAL_RCC_UART5_CLK_DISABLE();
 800836e:	4b21      	ldr	r3, [pc, #132]	@ (80083f4 <HAL_UART_MspDeInit+0xd4>)
 8008370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008372:	4a20      	ldr	r2, [pc, #128]	@ (80083f4 <HAL_UART_MspDeInit+0xd4>)
 8008374:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008378:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 800837a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800837e:	481e      	ldr	r0, [pc, #120]	@ (80083f8 <HAL_UART_MspDeInit+0xd8>)
 8008380:	f001 ffe6 	bl	800a350 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8008384:	2104      	movs	r1, #4
 8008386:	481e      	ldr	r0, [pc, #120]	@ (8008400 <HAL_UART_MspDeInit+0xe0>)
 8008388:	f001 ffe2 	bl	800a350 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008390:	4618      	mov	r0, r3
 8008392:	f001 fa97 	bl	80098c4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8008396:	2035      	movs	r0, #53	@ 0x35
 8008398:	f001 f9cb 	bl	8009732 <HAL_NVIC_DisableIRQ>
}
 800839c:	e023      	b.n	80083e6 <HAL_UART_MspDeInit+0xc6>
  else if(huart->Instance==USART1)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a18      	ldr	r2, [pc, #96]	@ (8008404 <HAL_UART_MspDeInit+0xe4>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d10f      	bne.n	80083c8 <HAL_UART_MspDeInit+0xa8>
    __HAL_RCC_USART1_CLK_DISABLE();
 80083a8:	4b12      	ldr	r3, [pc, #72]	@ (80083f4 <HAL_UART_MspDeInit+0xd4>)
 80083aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ac:	4a11      	ldr	r2, [pc, #68]	@ (80083f4 <HAL_UART_MspDeInit+0xd4>)
 80083ae:	f023 0310 	bic.w	r3, r3, #16
 80083b2:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 80083b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80083b8:	4813      	ldr	r0, [pc, #76]	@ (8008408 <HAL_UART_MspDeInit+0xe8>)
 80083ba:	f001 ffc9 	bl	800a350 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80083be:	2140      	movs	r1, #64	@ 0x40
 80083c0:	4812      	ldr	r0, [pc, #72]	@ (800840c <HAL_UART_MspDeInit+0xec>)
 80083c2:	f001 ffc5 	bl	800a350 <HAL_GPIO_DeInit>
}
 80083c6:	e00e      	b.n	80083e6 <HAL_UART_MspDeInit+0xc6>
  else if(huart->Instance==USART2)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a10      	ldr	r2, [pc, #64]	@ (8008410 <HAL_UART_MspDeInit+0xf0>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d109      	bne.n	80083e6 <HAL_UART_MspDeInit+0xc6>
    __HAL_RCC_USART2_CLK_DISABLE();
 80083d2:	4b08      	ldr	r3, [pc, #32]	@ (80083f4 <HAL_UART_MspDeInit+0xd4>)
 80083d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d6:	4a07      	ldr	r2, [pc, #28]	@ (80083f4 <HAL_UART_MspDeInit+0xd4>)
 80083d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80083dc:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80083de:	210c      	movs	r1, #12
 80083e0:	4809      	ldr	r0, [pc, #36]	@ (8008408 <HAL_UART_MspDeInit+0xe8>)
 80083e2:	f001 ffb5 	bl	800a350 <HAL_GPIO_DeInit>
}
 80083e6:	bf00      	nop
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	40004c00 	.word	0x40004c00
 80083f4:	40023800 	.word	0x40023800
 80083f8:	40020800 	.word	0x40020800
 80083fc:	40005000 	.word	0x40005000
 8008400:	40020c00 	.word	0x40020c00
 8008404:	40011000 	.word	0x40011000
 8008408:	40020000 	.word	0x40020000
 800840c:	40020400 	.word	0x40020400
 8008410:	40004400 	.word	0x40004400

08008414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008414:	b480      	push	{r7}
 8008416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008418:	bf00      	nop
 800841a:	e7fd      	b.n	8008418 <NMI_Handler+0x4>

0800841c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800841c:	b480      	push	{r7}
 800841e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008420:	bf00      	nop
 8008422:	e7fd      	b.n	8008420 <HardFault_Handler+0x4>

08008424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008424:	b480      	push	{r7}
 8008426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008428:	bf00      	nop
 800842a:	e7fd      	b.n	8008428 <MemManage_Handler+0x4>

0800842c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800842c:	b480      	push	{r7}
 800842e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008430:	bf00      	nop
 8008432:	e7fd      	b.n	8008430 <BusFault_Handler+0x4>

08008434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008434:	b480      	push	{r7}
 8008436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008438:	bf00      	nop
 800843a:	e7fd      	b.n	8008438 <UsageFault_Handler+0x4>

0800843c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800843c:	b480      	push	{r7}
 800843e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008440:	bf00      	nop
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800844a:	b480      	push	{r7}
 800844c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800844e:	bf00      	nop
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008458:	b480      	push	{r7}
 800845a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800845c:	bf00      	nop
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800846a:	f000 fbcf 	bl	8008c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800846e:	bf00      	nop
 8008470:	bd80      	pop	{r7, pc}
	...

08008474 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8008478:	4802      	ldr	r0, [pc, #8]	@ (8008484 <DMA1_Stream0_IRQHandler+0x10>)
 800847a:	f001 fb6b 	bl	8009b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800847e:	bf00      	nop
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	2000153c 	.word	0x2000153c

08008488 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800848c:	4802      	ldr	r0, [pc, #8]	@ (8008498 <DMA1_Stream2_IRQHandler+0x10>)
 800848e:	f001 fb61 	bl	8009b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8008492:	bf00      	nop
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	2000147c 	.word	0x2000147c

0800849c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80084a0:	4802      	ldr	r0, [pc, #8]	@ (80084ac <DMA1_Stream4_IRQHandler+0x10>)
 80084a2:	f001 fb57 	bl	8009b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80084a6:	bf00      	nop
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	200014dc 	.word	0x200014dc

080084b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80084b4:	4802      	ldr	r0, [pc, #8]	@ (80084c0 <TIM2_IRQHandler+0x10>)
 80084b6:	f003 ff85 	bl	800c3c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80084ba:	bf00      	nop
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	20001314 	.word	0x20001314

080084c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80084c8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80084cc:	f002 f866 	bl	800a59c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80084d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80084d4:	f002 f862 	bl	800a59c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80084d8:	bf00      	nop
 80084da:	bd80      	pop	{r7, pc}

080084dc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80084e0:	4802      	ldr	r0, [pc, #8]	@ (80084ec <UART4_IRQHandler+0x10>)
 80084e2:	f004 fd27 	bl	800cf34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80084e6:	bf00      	nop
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	2000135c 	.word	0x2000135c

080084f0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80084f4:	4802      	ldr	r0, [pc, #8]	@ (8008500 <UART5_IRQHandler+0x10>)
 80084f6:	f004 fd1d 	bl	800cf34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80084fa:	bf00      	nop
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	200013a4 	.word	0x200013a4

08008504 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008508:	4802      	ldr	r0, [pc, #8]	@ (8008514 <DMA2_Stream0_IRQHandler+0x10>)
 800850a:	f001 fb23 	bl	8009b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800850e:	bf00      	nop
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	200011ac 	.word	0x200011ac

08008518 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800851c:	4802      	ldr	r0, [pc, #8]	@ (8008528 <DMA2_Stream3_IRQHandler+0x10>)
 800851e:	f001 fb19 	bl	8009b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8008522:	bf00      	nop
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	2000120c 	.word	0x2000120c

0800852c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800852c:	b480      	push	{r7}
 800852e:	af00      	add	r7, sp, #0
  return 1;
 8008530:	2301      	movs	r3, #1
}
 8008532:	4618      	mov	r0, r3
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <_kill>:

int _kill(int pid, int sig)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008546:	f007 fe05 	bl	8010154 <__errno>
 800854a:	4603      	mov	r3, r0
 800854c:	2216      	movs	r2, #22
 800854e:	601a      	str	r2, [r3, #0]
  return -1;
 8008550:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008554:	4618      	mov	r0, r3
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <_exit>:

void _exit (int status)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008564:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff ffe7 	bl	800853c <_kill>
  while (1) {}    /* Make sure we hang here */
 800856e:	bf00      	nop
 8008570:	e7fd      	b.n	800856e <_exit+0x12>

08008572 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b086      	sub	sp, #24
 8008576:	af00      	add	r7, sp, #0
 8008578:	60f8      	str	r0, [r7, #12]
 800857a:	60b9      	str	r1, [r7, #8]
 800857c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800857e:	2300      	movs	r3, #0
 8008580:	617b      	str	r3, [r7, #20]
 8008582:	e00a      	b.n	800859a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008584:	f3af 8000 	nop.w
 8008588:	4601      	mov	r1, r0
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	1c5a      	adds	r2, r3, #1
 800858e:	60ba      	str	r2, [r7, #8]
 8008590:	b2ca      	uxtb	r2, r1
 8008592:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	3301      	adds	r3, #1
 8008598:	617b      	str	r3, [r7, #20]
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	429a      	cmp	r2, r3
 80085a0:	dbf0      	blt.n	8008584 <_read+0x12>
  }

  return len;
 80085a2:	687b      	ldr	r3, [r7, #4]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3718      	adds	r7, #24
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80085b8:	2300      	movs	r3, #0
 80085ba:	617b      	str	r3, [r7, #20]
 80085bc:	e009      	b.n	80085d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	1c5a      	adds	r2, r3, #1
 80085c2:	60ba      	str	r2, [r7, #8]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	3301      	adds	r3, #1
 80085d0:	617b      	str	r3, [r7, #20]
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	dbf1      	blt.n	80085be <_write+0x12>
  }
  return len;
 80085da:	687b      	ldr	r3, [r7, #4]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3718      	adds	r7, #24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <_close>:

int _close(int file)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80085ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800860c:	605a      	str	r2, [r3, #4]
  return 0;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <_isatty>:

int _isatty(int file)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008624:	2301      	movs	r3, #1
}
 8008626:	4618      	mov	r0, r3
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008632:	b480      	push	{r7}
 8008634:	b085      	sub	sp, #20
 8008636:	af00      	add	r7, sp, #0
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	60b9      	str	r1, [r7, #8]
 800863c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008654:	4a14      	ldr	r2, [pc, #80]	@ (80086a8 <_sbrk+0x5c>)
 8008656:	4b15      	ldr	r3, [pc, #84]	@ (80086ac <_sbrk+0x60>)
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008660:	4b13      	ldr	r3, [pc, #76]	@ (80086b0 <_sbrk+0x64>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d102      	bne.n	800866e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008668:	4b11      	ldr	r3, [pc, #68]	@ (80086b0 <_sbrk+0x64>)
 800866a:	4a12      	ldr	r2, [pc, #72]	@ (80086b4 <_sbrk+0x68>)
 800866c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800866e:	4b10      	ldr	r3, [pc, #64]	@ (80086b0 <_sbrk+0x64>)
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4413      	add	r3, r2
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	429a      	cmp	r2, r3
 800867a:	d207      	bcs.n	800868c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800867c:	f007 fd6a 	bl	8010154 <__errno>
 8008680:	4603      	mov	r3, r0
 8008682:	220c      	movs	r2, #12
 8008684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008686:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800868a:	e009      	b.n	80086a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800868c:	4b08      	ldr	r3, [pc, #32]	@ (80086b0 <_sbrk+0x64>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008692:	4b07      	ldr	r3, [pc, #28]	@ (80086b0 <_sbrk+0x64>)
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4413      	add	r3, r2
 800869a:	4a05      	ldr	r2, [pc, #20]	@ (80086b0 <_sbrk+0x64>)
 800869c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800869e:	68fb      	ldr	r3, [r7, #12]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3718      	adds	r7, #24
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	20020000 	.word	0x20020000
 80086ac:	00000400 	.word	0x00000400
 80086b0:	20001828 	.word	0x20001828
 80086b4:	200019a8 	.word	0x200019a8

080086b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80086bc:	4b06      	ldr	r3, [pc, #24]	@ (80086d8 <SystemInit+0x20>)
 80086be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086c2:	4a05      	ldr	r2, [pc, #20]	@ (80086d8 <SystemInit+0x20>)
 80086c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80086c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80086cc:	bf00      	nop
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	e000ed00 	.word	0xe000ed00

080086dc <test_modes_handle_sit>:

/**
 * @brief Handle SIT (Sensor Interface Test) mode
 */
void test_modes_handle_sit(BME_280_t* bme, bmi088_struct_t* bmi)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
	addDataPacketSit(bme, bmi);
 80086e6:	6839      	ldr	r1, [r7, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7fd faab 	bl	8005c44 <addDataPacketSit>
    if (!usart4_tx_busy) {
 80086ee:	4b06      	ldr	r3, [pc, #24]	@ (8008708 <test_modes_handle_sit+0x2c>)
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d103      	bne.n	8008700 <test_modes_handle_sit+0x24>
        uart4_send_packet_dma((uint8_t*)sit_paket, 36);
 80086f8:	2124      	movs	r1, #36	@ 0x24
 80086fa:	4804      	ldr	r0, [pc, #16]	@ (800870c <test_modes_handle_sit+0x30>)
 80086fc:	f7fd f998 	bl	8005a30 <uart4_send_packet_dma>
    	//HAL_UART_Transmit(&huart4, (uint8_t*)sit_paket, 36, 100);
    }
}
 8008700:	bf00      	nop
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	200016e1 	.word	0x200016e1
 800870c:	20001734 	.word	0x20001734

08008710 <algorithm_update_sut>:


void algorithm_update_sut(void)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b08a      	sub	sp, #40	@ 0x28
 8008714:	af00      	add	r7, sp, #0
    // Check if SUT data is ready
    if (uart_handler_sut_data_ready()) {
 8008716:	f000 f989 	bl	8008a2c <uart_handler_sut_data_ready>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d013      	beq.n	8008748 <algorithm_update_sut+0x38>
        uart_handler_clear_sut_flag();
 8008720:	f000 f9b2 	bl	8008a88 <uart_handler_clear_sut_flag>

        sut_data_t sut_data;
        if (uart_handler_get_sut_data(&sut_data)) {
 8008724:	1d3b      	adds	r3, r7, #4
 8008726:	4618      	mov	r0, r3
 8008728:	f000 f98c 	bl	8008a44 <uart_handler_get_sut_data>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00a      	beq.n	8008748 <algorithm_update_sut+0x38>
            // Process SUT data through test modes handler
            uint16_t status_bits = test_modes_handle_sut(&sut_data, &sensor_output);
 8008732:	1d3b      	adds	r3, r7, #4
 8008734:	4906      	ldr	r1, [pc, #24]	@ (8008750 <algorithm_update_sut+0x40>)
 8008736:	4618      	mov	r0, r3
 8008738:	f000 f80c 	bl	8008754 <test_modes_handle_sut>
 800873c:	4603      	mov	r3, r0
 800873e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            uart_handler_send_status(status_bits);
 8008740:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008742:	4618      	mov	r0, r3
 8008744:	f000 f9ac 	bl	8008aa0 <uart_handler_send_status>
        }
    }
}
 8008748:	bf00      	nop
 800874a:	3728      	adds	r7, #40	@ 0x28
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	20001660 	.word	0x20001660

08008754 <test_modes_handle_sut>:

/**
 * @brief Handle SUT (System Under Test) mode
 */
uint16_t test_modes_handle_sut(sut_data_t* sut_data, sensor_fusion_t* sensor_output)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b0b4      	sub	sp, #208	@ 0xd0
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
    // Convert SUT data to BME and BMI structures
    BME_280_t bme_sut = {0};
 800875e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8008762:	2244      	movs	r2, #68	@ 0x44
 8008764:	2100      	movs	r1, #0
 8008766:	4618      	mov	r0, r3
 8008768:	f007 fc7e 	bl	8010068 <memset>
    bmi088_struct_t bmi_sut = {0};
 800876c:	f107 0308 	add.w	r3, r7, #8
 8008770:	2280      	movs	r2, #128	@ 0x80
 8008772:	2100      	movs	r1, #0
 8008774:	4618      	mov	r0, r3
 8008776:	f007 fc77 	bl	8010068 <memset>

    // Fill BME data
    bme_sut.altitude = sut_data->altitude;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    bme_sut.pressure = sut_data->pressure;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    // Fill BMI data
    bmi_sut.datas.acc_x = sut_data->acc_x;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	663b      	str	r3, [r7, #96]	@ 0x60
    bmi_sut.datas.acc_y = sut_data->acc_y;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	667b      	str	r3, [r7, #100]	@ 0x64
    bmi_sut.datas.acc_z = sut_data->acc_z;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	66bb      	str	r3, [r7, #104]	@ 0x68
    bmi_sut.datas.gyro_x = sut_data->gyro_x;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	695b      	ldr	r3, [r3, #20]
 80087a0:	623b      	str	r3, [r7, #32]
    bmi_sut.datas.angle_y = sut_data->gyro_y;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	633b      	str	r3, [r7, #48]	@ 0x30
    bmi_sut.datas.gyro_z = sut_data->gyro_z;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	69db      	ldr	r3, [r3, #28]
 80087ac:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Process synthetic data through sensor fusion first
    //sensor_fusion_update_mahony(&bmi_sut, sensor_output);
	sensor_fusion_update_kalman(&bme_sut, &bmi_sut, sensor_output);
 80087ae:	f107 0108 	add.w	r1, r7, #8
 80087b2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff f915 	bl	80079e8 <sensor_fusion_update_kalman>

    // Then run flight algorithm with fused data
    flight_algorithm_update(&bme_sut, &bmi_sut, sensor_output);
 80087be:	f107 0108 	add.w	r1, r7, #8
 80087c2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7fa fb81 	bl	8002ed0 <flight_algorithm_update>
    uint16_t status_bits = flight_algorithm_get_status_bits();
 80087ce:	f7fa fcd5 	bl	800317c <flight_algorithm_get_status_bits>
 80087d2:	4603      	mov	r3, r0
 80087d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce

    return status_bits;
 80087d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
}
 80087dc:	4618      	mov	r0, r3
 80087de:	37d0      	adds	r7, #208	@ 0xd0
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <uart_handler_init>:

/**
 * @brief Initialize UART handler
 */
void uart_handler_init(void)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	af00      	add	r7, sp, #0
    current_mode = MODE_NORMAL;
 80087e8:	4b07      	ldr	r3, [pc, #28]	@ (8008808 <uart_handler_init+0x24>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	701a      	strb	r2, [r3, #0]
    command_packet_ready = 0;
 80087ee:	4b07      	ldr	r3, [pc, #28]	@ (800880c <uart_handler_init+0x28>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	701a      	strb	r2, [r3, #0]
    sut_packet_ready = 0;
 80087f4:	4b06      	ldr	r3, [pc, #24]	@ (8008810 <uart_handler_init+0x2c>)
 80087f6:	2200      	movs	r2, #0
 80087f8:	701a      	strb	r2, [r3, #0]
    memset(&latest_sut_data, 0, sizeof(latest_sut_data));
 80087fa:	2220      	movs	r2, #32
 80087fc:	2100      	movs	r1, #0
 80087fe:	4805      	ldr	r0, [pc, #20]	@ (8008814 <uart_handler_init+0x30>)
 8008800:	f007 fc32 	bl	8010068 <memset>
}
 8008804:	bf00      	nop
 8008806:	bd80      	pop	{r7, pc}
 8008808:	2000182c 	.word	0x2000182c
 800880c:	2000182d 	.word	0x2000182d
 8008810:	2000182e 	.word	0x2000182e
 8008814:	20001830 	.word	0x20001830

08008818 <uart_handler_process_packets>:

/**
 * @brief Process incoming UART packets (call from main loop)
 */
void uart_handler_process_packets(void)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	af00      	add	r7, sp, #0
    if (usart4_packet_ready) {
 800881c:	4b14      	ldr	r3, [pc, #80]	@ (8008870 <uart_handler_process_packets+0x58>)
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d021      	beq.n	800886a <uart_handler_process_packets+0x52>
        usart4_packet_ready = 0; // Clear flag immediately
 8008826:	4b12      	ldr	r3, [pc, #72]	@ (8008870 <uart_handler_process_packets+0x58>)
 8008828:	2200      	movs	r2, #0
 800882a:	701a      	strb	r2, [r3, #0]

        // Command packet (5 bytes with header 0xAA)
        if (usart4_rx_buffer[0] == CMD_HEADER && usart4_packet_size == 5) {
 800882c:	4b11      	ldr	r3, [pc, #68]	@ (8008874 <uart_handler_process_packets+0x5c>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	2baa      	cmp	r3, #170	@ 0xaa
 8008832:	d10b      	bne.n	800884c <uart_handler_process_packets+0x34>
 8008834:	4b10      	ldr	r3, [pc, #64]	@ (8008878 <uart_handler_process_packets+0x60>)
 8008836:	881b      	ldrh	r3, [r3, #0]
 8008838:	b29b      	uxth	r3, r3
 800883a:	2b05      	cmp	r3, #5
 800883c:	d106      	bne.n	800884c <uart_handler_process_packets+0x34>
            command_packet_ready = 1;
 800883e:	4b0f      	ldr	r3, [pc, #60]	@ (800887c <uart_handler_process_packets+0x64>)
 8008840:	2201      	movs	r2, #1
 8008842:	701a      	strb	r2, [r3, #0]
            process_command_packet(usart4_rx_buffer);
 8008844:	480b      	ldr	r0, [pc, #44]	@ (8008874 <uart_handler_process_packets+0x5c>)
 8008846:	f000 f81d 	bl	8008884 <process_command_packet>
        else if (usart4_rx_buffer[0] == PACKET_HEADER && usart4_packet_size == 36) {
            sut_packet_ready = 1;
            process_sut_packet(usart4_rx_buffer);
        }
    }
}
 800884a:	e00e      	b.n	800886a <uart_handler_process_packets+0x52>
        else if (usart4_rx_buffer[0] == PACKET_HEADER && usart4_packet_size == 36) {
 800884c:	4b09      	ldr	r3, [pc, #36]	@ (8008874 <uart_handler_process_packets+0x5c>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2bab      	cmp	r3, #171	@ 0xab
 8008852:	d10a      	bne.n	800886a <uart_handler_process_packets+0x52>
 8008854:	4b08      	ldr	r3, [pc, #32]	@ (8008878 <uart_handler_process_packets+0x60>)
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	b29b      	uxth	r3, r3
 800885a:	2b24      	cmp	r3, #36	@ 0x24
 800885c:	d105      	bne.n	800886a <uart_handler_process_packets+0x52>
            sut_packet_ready = 1;
 800885e:	4b08      	ldr	r3, [pc, #32]	@ (8008880 <uart_handler_process_packets+0x68>)
 8008860:	2201      	movs	r2, #1
 8008862:	701a      	strb	r2, [r3, #0]
            process_sut_packet(usart4_rx_buffer);
 8008864:	4803      	ldr	r0, [pc, #12]	@ (8008874 <uart_handler_process_packets+0x5c>)
 8008866:	f000 f843 	bl	80088f0 <process_sut_packet>
}
 800886a:	bf00      	nop
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	200016dc 	.word	0x200016dc
 8008874:	20001690 	.word	0x20001690
 8008878:	200016de 	.word	0x200016de
 800887c:	2000182d 	.word	0x2000182d
 8008880:	2000182e 	.word	0x2000182e

08008884 <process_command_packet>:
/**
 * @brief Process command packet from buffer
 * @param buffer Pointer to received buffer
 */
void process_command_packet(uint8_t* buffer)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
    if (buffer[0] == CMD_HEADER) {
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	2baa      	cmp	r3, #170	@ 0xaa
 8008892:	d124      	bne.n	80088de <process_command_packet+0x5a>
        uint8_t command = buffer[1];
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	785b      	ldrb	r3, [r3, #1]
 8008898:	73fb      	strb	r3, [r7, #15]
        //uint8_t checksum = buffer[2];
        uint8_t footer1 = buffer[3];
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	78db      	ldrb	r3, [r3, #3]
 800889e:	73bb      	strb	r3, [r7, #14]
        uint8_t footer2 = buffer[4];
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	791b      	ldrb	r3, [r3, #4]
 80088a4:	737b      	strb	r3, [r7, #13]

        if (footer1 == CMD_FOOTER1 && footer2 == CMD_FOOTER2) {
 80088a6:	7bbb      	ldrb	r3, [r7, #14]
 80088a8:	2b0d      	cmp	r3, #13
 80088aa:	d118      	bne.n	80088de <process_command_packet+0x5a>
 80088ac:	7b7b      	ldrb	r3, [r7, #13]
 80088ae:	2b0a      	cmp	r3, #10
 80088b0:	d115      	bne.n	80088de <process_command_packet+0x5a>
            switch (command) {
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
 80088b4:	2b24      	cmp	r3, #36	@ 0x24
 80088b6:	d00e      	beq.n	80088d6 <process_command_packet+0x52>
 80088b8:	2b24      	cmp	r3, #36	@ 0x24
 80088ba:	dc10      	bgt.n	80088de <process_command_packet+0x5a>
 80088bc:	2b20      	cmp	r3, #32
 80088be:	d002      	beq.n	80088c6 <process_command_packet+0x42>
 80088c0:	2b22      	cmp	r3, #34	@ 0x22
 80088c2:	d004      	beq.n	80088ce <process_command_packet+0x4a>
                    current_mode = MODE_NORMAL;
                    break;
            }
        }
    }
}
 80088c4:	e00b      	b.n	80088de <process_command_packet+0x5a>
                    current_mode = MODE_SIT;
 80088c6:	4b09      	ldr	r3, [pc, #36]	@ (80088ec <process_command_packet+0x68>)
 80088c8:	2201      	movs	r2, #1
 80088ca:	701a      	strb	r2, [r3, #0]
                    break;
 80088cc:	e007      	b.n	80088de <process_command_packet+0x5a>
                    current_mode = MODE_SUT;
 80088ce:	4b07      	ldr	r3, [pc, #28]	@ (80088ec <process_command_packet+0x68>)
 80088d0:	2202      	movs	r2, #2
 80088d2:	701a      	strb	r2, [r3, #0]
                    break;
 80088d4:	e003      	b.n	80088de <process_command_packet+0x5a>
                    current_mode = MODE_NORMAL;
 80088d6:	4b05      	ldr	r3, [pc, #20]	@ (80088ec <process_command_packet+0x68>)
 80088d8:	2200      	movs	r2, #0
 80088da:	701a      	strb	r2, [r3, #0]
                    break;
 80088dc:	bf00      	nop
}
 80088de:	bf00      	nop
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	2000182c 	.word	0x2000182c

080088f0 <process_sut_packet>:
/**
 * @brief Process SUT data packet from buffer
 * @param buffer Pointer to received buffer
 */
void process_sut_packet(uint8_t* buffer)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
    // Header, footer and checksum verification
    if (buffer[0] != PACKET_HEADER) return;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	2bab      	cmp	r3, #171	@ 0xab
 80088fe:	d172      	bne.n	80089e6 <process_sut_packet+0xf6>
    if (buffer[34] != CMD_FOOTER1 || buffer[35] != CMD_FOOTER2) return;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	3322      	adds	r3, #34	@ 0x22
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	2b0d      	cmp	r3, #13
 8008908:	d16f      	bne.n	80089ea <process_sut_packet+0xfa>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	3323      	adds	r3, #35	@ 0x23
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	2b0a      	cmp	r3, #10
 8008912:	d16a      	bne.n	80089ea <process_sut_packet+0xfa>

    uint8_t calculated_checksum = 0;
 8008914:	2300      	movs	r3, #0
 8008916:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 33; i++) {
 8008918:	2300      	movs	r3, #0
 800891a:	60bb      	str	r3, [r7, #8]
 800891c:	e009      	b.n	8008932 <process_sut_packet+0x42>
        calculated_checksum += buffer[i];
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	4413      	add	r3, r2
 8008924:	781a      	ldrb	r2, [r3, #0]
 8008926:	7bfb      	ldrb	r3, [r7, #15]
 8008928:	4413      	add	r3, r2
 800892a:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 33; i++) {
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	3301      	adds	r3, #1
 8008930:	60bb      	str	r3, [r7, #8]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	2b20      	cmp	r3, #32
 8008936:	ddf2      	ble.n	800891e <process_sut_packet+0x2e>
    }
    calculated_checksum %= 256;
    if (calculated_checksum != buffer[33]) return;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3321      	adds	r3, #33	@ 0x21
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	7bfa      	ldrb	r2, [r7, #15]
 8008940:	429a      	cmp	r2, r3
 8008942:	d154      	bne.n	80089ee <process_sut_packet+0xfe>

    // Parse data
    latest_sut_data.altitude = uint8_arrayi_float32_ye_donustur(&buffer[1]);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	3301      	adds	r3, #1
 8008948:	4618      	mov	r0, r3
 800894a:	f7fd faa1 	bl	8005e90 <uint8_arrayi_float32_ye_donustur>
 800894e:	eef0 7a40 	vmov.f32	s15, s0
 8008952:	4b29      	ldr	r3, [pc, #164]	@ (80089f8 <process_sut_packet+0x108>)
 8008954:	edc3 7a00 	vstr	s15, [r3]
    latest_sut_data.pressure = uint8_arrayi_float32_ye_donustur(&buffer[5]);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	3305      	adds	r3, #5
 800895c:	4618      	mov	r0, r3
 800895e:	f7fd fa97 	bl	8005e90 <uint8_arrayi_float32_ye_donustur>
 8008962:	eef0 7a40 	vmov.f32	s15, s0
 8008966:	4b24      	ldr	r3, [pc, #144]	@ (80089f8 <process_sut_packet+0x108>)
 8008968:	edc3 7a01 	vstr	s15, [r3, #4]
    latest_sut_data.acc_x = uint8_arrayi_float32_ye_donustur(&buffer[9]);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	3309      	adds	r3, #9
 8008970:	4618      	mov	r0, r3
 8008972:	f7fd fa8d 	bl	8005e90 <uint8_arrayi_float32_ye_donustur>
 8008976:	eef0 7a40 	vmov.f32	s15, s0
 800897a:	4b1f      	ldr	r3, [pc, #124]	@ (80089f8 <process_sut_packet+0x108>)
 800897c:	edc3 7a02 	vstr	s15, [r3, #8]
    latest_sut_data.acc_y = uint8_arrayi_float32_ye_donustur(&buffer[13]);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	330d      	adds	r3, #13
 8008984:	4618      	mov	r0, r3
 8008986:	f7fd fa83 	bl	8005e90 <uint8_arrayi_float32_ye_donustur>
 800898a:	eef0 7a40 	vmov.f32	s15, s0
 800898e:	4b1a      	ldr	r3, [pc, #104]	@ (80089f8 <process_sut_packet+0x108>)
 8008990:	edc3 7a03 	vstr	s15, [r3, #12]
    latest_sut_data.acc_z = uint8_arrayi_float32_ye_donustur(&buffer[17]);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	3311      	adds	r3, #17
 8008998:	4618      	mov	r0, r3
 800899a:	f7fd fa79 	bl	8005e90 <uint8_arrayi_float32_ye_donustur>
 800899e:	eef0 7a40 	vmov.f32	s15, s0
 80089a2:	4b15      	ldr	r3, [pc, #84]	@ (80089f8 <process_sut_packet+0x108>)
 80089a4:	edc3 7a04 	vstr	s15, [r3, #16]
    latest_sut_data.gyro_x = uint8_arrayi_float32_ye_donustur(&buffer[21]);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3315      	adds	r3, #21
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fd fa6f 	bl	8005e90 <uint8_arrayi_float32_ye_donustur>
 80089b2:	eef0 7a40 	vmov.f32	s15, s0
 80089b6:	4b10      	ldr	r3, [pc, #64]	@ (80089f8 <process_sut_packet+0x108>)
 80089b8:	edc3 7a05 	vstr	s15, [r3, #20]
    latest_sut_data.gyro_y = uint8_arrayi_float32_ye_donustur(&buffer[25]);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	3319      	adds	r3, #25
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fd fa65 	bl	8005e90 <uint8_arrayi_float32_ye_donustur>
 80089c6:	eef0 7a40 	vmov.f32	s15, s0
 80089ca:	4b0b      	ldr	r3, [pc, #44]	@ (80089f8 <process_sut_packet+0x108>)
 80089cc:	edc3 7a06 	vstr	s15, [r3, #24]
    latest_sut_data.gyro_z = uint8_arrayi_float32_ye_donustur(&buffer[29]);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	331d      	adds	r3, #29
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fd fa5b 	bl	8005e90 <uint8_arrayi_float32_ye_donustur>
 80089da:	eef0 7a40 	vmov.f32	s15, s0
 80089de:	4b06      	ldr	r3, [pc, #24]	@ (80089f8 <process_sut_packet+0x108>)
 80089e0:	edc3 7a07 	vstr	s15, [r3, #28]
 80089e4:	e004      	b.n	80089f0 <process_sut_packet+0x100>
    if (buffer[0] != PACKET_HEADER) return;
 80089e6:	bf00      	nop
 80089e8:	e002      	b.n	80089f0 <process_sut_packet+0x100>
    if (buffer[34] != CMD_FOOTER1 || buffer[35] != CMD_FOOTER2) return;
 80089ea:	bf00      	nop
 80089ec:	e000      	b.n	80089f0 <process_sut_packet+0x100>
    if (calculated_checksum != buffer[33]) return;
 80089ee:	bf00      	nop
}
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	20001830 	.word	0x20001830

080089fc <uart_handler_get_mode>:

/**
 * @brief Get current system mode
 */
SystemMode_t uart_handler_get_mode(void)
{
 80089fc:	b480      	push	{r7}
 80089fe:	af00      	add	r7, sp, #0
    return current_mode;
 8008a00:	4b03      	ldr	r3, [pc, #12]	@ (8008a10 <uart_handler_get_mode+0x14>)
 8008a02:	781b      	ldrb	r3, [r3, #0]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	2000182c 	.word	0x2000182c

08008a14 <uart_handler_command_ready>:

/**
 * @brief Check if command packet is ready
 */
uint8_t uart_handler_command_ready(void)
{
 8008a14:	b480      	push	{r7}
 8008a16:	af00      	add	r7, sp, #0
    return command_packet_ready;
 8008a18:	4b03      	ldr	r3, [pc, #12]	@ (8008a28 <uart_handler_command_ready+0x14>)
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	b2db      	uxtb	r3, r3
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	2000182d 	.word	0x2000182d

08008a2c <uart_handler_sut_data_ready>:

/**
 * @brief Check if SUT data packet is ready
 */
uint8_t uart_handler_sut_data_ready(void)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	af00      	add	r7, sp, #0
    return sut_packet_ready;
 8008a30:	4b03      	ldr	r3, [pc, #12]	@ (8008a40 <uart_handler_sut_data_ready+0x14>)
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	b2db      	uxtb	r3, r3
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr
 8008a40:	2000182e 	.word	0x2000182e

08008a44 <uart_handler_get_sut_data>:

/**
 * @brief Get the latest SUT data
 */
uint8_t uart_handler_get_sut_data(sut_data_t* data)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
    if (data == NULL) return 0;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <uart_handler_get_sut_data+0x12>
 8008a52:	2300      	movs	r3, #0
 8008a54:	e005      	b.n	8008a62 <uart_handler_get_sut_data+0x1e>

    memcpy(data, &latest_sut_data, sizeof(sut_data_t));
 8008a56:	2220      	movs	r2, #32
 8008a58:	4904      	ldr	r1, [pc, #16]	@ (8008a6c <uart_handler_get_sut_data+0x28>)
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f007 fbbc 	bl	80101d8 <memcpy>
    return 1;
 8008a60:	2301      	movs	r3, #1
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20001830 	.word	0x20001830

08008a70 <uart_handler_clear_command_flag>:

/**
 * @brief Clear command ready flag
 */
void uart_handler_clear_command_flag(void)
{
 8008a70:	b480      	push	{r7}
 8008a72:	af00      	add	r7, sp, #0
    command_packet_ready = 0;
 8008a74:	4b03      	ldr	r3, [pc, #12]	@ (8008a84 <uart_handler_clear_command_flag+0x14>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	701a      	strb	r2, [r3, #0]
}
 8008a7a:	bf00      	nop
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	2000182d 	.word	0x2000182d

08008a88 <uart_handler_clear_sut_flag>:

/**
 * @brief Clear SUT data ready flag
 */
void uart_handler_clear_sut_flag(void)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	af00      	add	r7, sp, #0
    sut_packet_ready = 0;
 8008a8c:	4b03      	ldr	r3, [pc, #12]	@ (8008a9c <uart_handler_clear_sut_flag+0x14>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	701a      	strb	r2, [r3, #0]
}
 8008a92:	bf00      	nop
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr
 8008a9c:	2000182e 	.word	0x2000182e

08008aa0 <uart_handler_send_status>:

/**
 * @brief Send status packet (for SUT mode)
 */
void uart_handler_send_status(uint16_t status_bits)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	80fb      	strh	r3, [r7, #6]
    if (!usart4_tx_busy) {
 8008aaa:	4b18      	ldr	r3, [pc, #96]	@ (8008b0c <uart_handler_send_status+0x6c>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d127      	bne.n	8008b04 <uart_handler_send_status+0x64>
        // Use static buffer for DMA safety
        status_packet_dma[0] = 0xAA;
 8008ab4:	4b16      	ldr	r3, [pc, #88]	@ (8008b10 <uart_handler_send_status+0x70>)
 8008ab6:	22aa      	movs	r2, #170	@ 0xaa
 8008ab8:	701a      	strb	r2, [r3, #0]
        status_packet_dma[1] = status_bits & 0xFF;         // Low byte of status
 8008aba:	88fb      	ldrh	r3, [r7, #6]
 8008abc:	b2da      	uxtb	r2, r3
 8008abe:	4b14      	ldr	r3, [pc, #80]	@ (8008b10 <uart_handler_send_status+0x70>)
 8008ac0:	705a      	strb	r2, [r3, #1]
        status_packet_dma[2] = (status_bits >> 8) & 0xFF;  // High byte of status
 8008ac2:	88fb      	ldrh	r3, [r7, #6]
 8008ac4:	0a1b      	lsrs	r3, r3, #8
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	4b11      	ldr	r3, [pc, #68]	@ (8008b10 <uart_handler_send_status+0x70>)
 8008acc:	709a      	strb	r2, [r3, #2]

        // Calculate checksum (only for header and status bytes)
        status_packet_dma[3] = (status_packet_dma[0] + status_packet_dma[1] + status_packet_dma[2]) % 256;
 8008ace:	4b10      	ldr	r3, [pc, #64]	@ (8008b10 <uart_handler_send_status+0x70>)
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8008b10 <uart_handler_send_status+0x70>)
 8008ad6:	785b      	ldrb	r3, [r3, #1]
 8008ad8:	4413      	add	r3, r2
 8008ada:	4a0d      	ldr	r2, [pc, #52]	@ (8008b10 <uart_handler_send_status+0x70>)
 8008adc:	7892      	ldrb	r2, [r2, #2]
 8008ade:	4413      	add	r3, r2
 8008ae0:	425a      	negs	r2, r3
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	b2d2      	uxtb	r2, r2
 8008ae6:	bf58      	it	pl
 8008ae8:	4253      	negpl	r3, r2
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	4b08      	ldr	r3, [pc, #32]	@ (8008b10 <uart_handler_send_status+0x70>)
 8008aee:	70da      	strb	r2, [r3, #3]

        status_packet_dma[4] = 0x0D;
 8008af0:	4b07      	ldr	r3, [pc, #28]	@ (8008b10 <uart_handler_send_status+0x70>)
 8008af2:	220d      	movs	r2, #13
 8008af4:	711a      	strb	r2, [r3, #4]
        status_packet_dma[5] = 0x0A;
 8008af6:	4b06      	ldr	r3, [pc, #24]	@ (8008b10 <uart_handler_send_status+0x70>)
 8008af8:	220a      	movs	r2, #10
 8008afa:	715a      	strb	r2, [r3, #5]

        uart4_send_packet_dma(status_packet_dma, 6);
 8008afc:	2106      	movs	r1, #6
 8008afe:	4804      	ldr	r0, [pc, #16]	@ (8008b10 <uart_handler_send_status+0x70>)
 8008b00:	f7fc ff96 	bl	8005a30 <uart4_send_packet_dma>
    }
}
 8008b04:	bf00      	nop
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	200016e1 	.word	0x200016e1
 8008b10:	20001850 	.word	0x20001850

08008b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008b4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008b18:	f7ff fdce 	bl	80086b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008b1c:	480c      	ldr	r0, [pc, #48]	@ (8008b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008b1e:	490d      	ldr	r1, [pc, #52]	@ (8008b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008b20:	4a0d      	ldr	r2, [pc, #52]	@ (8008b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008b24:	e002      	b.n	8008b2c <LoopCopyDataInit>

08008b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008b2a:	3304      	adds	r3, #4

08008b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008b30:	d3f9      	bcc.n	8008b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008b32:	4a0a      	ldr	r2, [pc, #40]	@ (8008b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008b34:	4c0a      	ldr	r4, [pc, #40]	@ (8008b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008b38:	e001      	b.n	8008b3e <LoopFillZerobss>

08008b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b3c:	3204      	adds	r2, #4

08008b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008b40:	d3fb      	bcc.n	8008b3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8008b42:	f007 fb0d 	bl	8010160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008b46:	f7fc fa3f 	bl	8004fc8 <main>
  bx  lr    
 8008b4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008b54:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8008b58:	08016140 	.word	0x08016140
  ldr r2, =_sbss
 8008b5c:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8008b60:	200019a8 	.word	0x200019a8

08008b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008b64:	e7fe      	b.n	8008b64 <ADC_IRQHandler>
	...

08008b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8008ba8 <HAL_Init+0x40>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a0d      	ldr	r2, [pc, #52]	@ (8008ba8 <HAL_Init+0x40>)
 8008b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008b78:	4b0b      	ldr	r3, [pc, #44]	@ (8008ba8 <HAL_Init+0x40>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8008ba8 <HAL_Init+0x40>)
 8008b7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008b84:	4b08      	ldr	r3, [pc, #32]	@ (8008ba8 <HAL_Init+0x40>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a07      	ldr	r2, [pc, #28]	@ (8008ba8 <HAL_Init+0x40>)
 8008b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008b90:	2003      	movs	r0, #3
 8008b92:	f000 fd99 	bl	80096c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008b96:	200f      	movs	r0, #15
 8008b98:	f000 f808 	bl	8008bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008b9c:	f7fe ffe2 	bl	8007b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	40023c00 	.word	0x40023c00

08008bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008bb4:	4b12      	ldr	r3, [pc, #72]	@ (8008c00 <HAL_InitTick+0x54>)
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	4b12      	ldr	r3, [pc, #72]	@ (8008c04 <HAL_InitTick+0x58>)
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 fdbf 	bl	800974e <HAL_SYSTICK_Config>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e00e      	b.n	8008bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b0f      	cmp	r3, #15
 8008bde:	d80a      	bhi.n	8008bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008be0:	2200      	movs	r2, #0
 8008be2:	6879      	ldr	r1, [r7, #4]
 8008be4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008be8:	f000 fd79 	bl	80096de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008bec:	4a06      	ldr	r2, [pc, #24]	@ (8008c08 <HAL_InitTick+0x5c>)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	e000      	b.n	8008bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	20000040 	.word	0x20000040
 8008c04:	20000048 	.word	0x20000048
 8008c08:	20000044 	.word	0x20000044

08008c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008c10:	4b06      	ldr	r3, [pc, #24]	@ (8008c2c <HAL_IncTick+0x20>)
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	461a      	mov	r2, r3
 8008c16:	4b06      	ldr	r3, [pc, #24]	@ (8008c30 <HAL_IncTick+0x24>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	4a04      	ldr	r2, [pc, #16]	@ (8008c30 <HAL_IncTick+0x24>)
 8008c1e:	6013      	str	r3, [r2, #0]
}
 8008c20:	bf00      	nop
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	20000048 	.word	0x20000048
 8008c30:	20001858 	.word	0x20001858

08008c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c34:	b480      	push	{r7}
 8008c36:	af00      	add	r7, sp, #0
  return uwTick;
 8008c38:	4b03      	ldr	r3, [pc, #12]	@ (8008c48 <HAL_GetTick+0x14>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	20001858 	.word	0x20001858

08008c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008c54:	f7ff ffee 	bl	8008c34 <HAL_GetTick>
 8008c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c64:	d005      	beq.n	8008c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008c66:	4b0a      	ldr	r3, [pc, #40]	@ (8008c90 <HAL_Delay+0x44>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	4413      	add	r3, r2
 8008c70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008c72:	bf00      	nop
 8008c74:	f7ff ffde 	bl	8008c34 <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d8f7      	bhi.n	8008c74 <HAL_Delay+0x28>
  {
  }
}
 8008c84:	bf00      	nop
 8008c86:	bf00      	nop
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	20000048 	.word	0x20000048

08008c94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e033      	b.n	8008d12 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d109      	bne.n	8008cc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7fe ff7e 	bl	8007bb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cca:	f003 0310 	and.w	r3, r3, #16
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d118      	bne.n	8008d04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cd6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008cda:	f023 0302 	bic.w	r3, r3, #2
 8008cde:	f043 0202 	orr.w	r2, r3, #2
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fa7c 	bl	80091e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cf6:	f023 0303 	bic.w	r3, r3, #3
 8008cfa:	f043 0201 	orr.w	r2, r3, #1
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	641a      	str	r2, [r3, #64]	@ 0x40
 8008d02:	e001      	b.n	8008d08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b088      	sub	sp, #32
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d101      	bne.n	8008d3e <HAL_ADC_Start_DMA+0x22>
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	e0eb      	b.n	8008f16 <HAL_ADC_Start_DMA+0x1fa>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	f003 0301 	and.w	r3, r3, #1
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d018      	beq.n	8008d86 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	689a      	ldr	r2, [r3, #8]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f042 0201 	orr.w	r2, r2, #1
 8008d62:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008d64:	4b6e      	ldr	r3, [pc, #440]	@ (8008f20 <HAL_ADC_Start_DMA+0x204>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a6e      	ldr	r2, [pc, #440]	@ (8008f24 <HAL_ADC_Start_DMA+0x208>)
 8008d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d6e:	0c9a      	lsrs	r2, r3, #18
 8008d70:	4613      	mov	r3, r2
 8008d72:	005b      	lsls	r3, r3, #1
 8008d74:	4413      	add	r3, r2
 8008d76:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8008d78:	e002      	b.n	8008d80 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1f9      	bne.n	8008d7a <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d94:	d107      	bne.n	8008da6 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	689a      	ldr	r2, [r3, #8]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008da4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	f040 80a3 	bne.w	8008efc <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dba:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008dbe:	f023 0301 	bic.w	r3, r3, #1
 8008dc2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d007      	beq.n	8008de8 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ddc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8008de0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008df4:	d106      	bne.n	8008e04 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dfa:	f023 0206 	bic.w	r2, r3, #6
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	645a      	str	r2, [r3, #68]	@ 0x44
 8008e02:	e002      	b.n	8008e0a <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008e12:	4b45      	ldr	r3, [pc, #276]	@ (8008f28 <HAL_ADC_Start_DMA+0x20c>)
 8008e14:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e1a:	4a44      	ldr	r2, [pc, #272]	@ (8008f2c <HAL_ADC_Start_DMA+0x210>)
 8008e1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e22:	4a43      	ldr	r2, [pc, #268]	@ (8008f30 <HAL_ADC_Start_DMA+0x214>)
 8008e24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e2a:	4a42      	ldr	r2, [pc, #264]	@ (8008f34 <HAL_ADC_Start_DMA+0x218>)
 8008e2c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8008e36:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	685a      	ldr	r2, [r3, #4]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8008e46:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	689a      	ldr	r2, [r3, #8]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e56:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	334c      	adds	r3, #76	@ 0x4c
 8008e62:	4619      	mov	r1, r3
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f000 fd8a 	bl	8009980 <HAL_DMA_Start_IT>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	f003 031f 	and.w	r3, r3, #31
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d12a      	bne.n	8008ed2 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a2d      	ldr	r2, [pc, #180]	@ (8008f38 <HAL_ADC_Start_DMA+0x21c>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d015      	beq.n	8008eb2 <HAL_ADC_Start_DMA+0x196>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a2c      	ldr	r2, [pc, #176]	@ (8008f3c <HAL_ADC_Start_DMA+0x220>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d105      	bne.n	8008e9c <HAL_ADC_Start_DMA+0x180>
 8008e90:	4b25      	ldr	r3, [pc, #148]	@ (8008f28 <HAL_ADC_Start_DMA+0x20c>)
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	f003 031f 	and.w	r3, r3, #31
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00a      	beq.n	8008eb2 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a27      	ldr	r2, [pc, #156]	@ (8008f40 <HAL_ADC_Start_DMA+0x224>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d136      	bne.n	8008f14 <HAL_ADC_Start_DMA+0x1f8>
 8008ea6:	4b20      	ldr	r3, [pc, #128]	@ (8008f28 <HAL_ADC_Start_DMA+0x20c>)
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	f003 0310 	and.w	r3, r3, #16
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d130      	bne.n	8008f14 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d129      	bne.n	8008f14 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	689a      	ldr	r2, [r3, #8]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008ece:	609a      	str	r2, [r3, #8]
 8008ed0:	e020      	b.n	8008f14 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a18      	ldr	r2, [pc, #96]	@ (8008f38 <HAL_ADC_Start_DMA+0x21c>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d11b      	bne.n	8008f14 <HAL_ADC_Start_DMA+0x1f8>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d114      	bne.n	8008f14 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	689a      	ldr	r2, [r3, #8]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008ef8:	609a      	str	r2, [r3, #8]
 8008efa:	e00b      	b.n	8008f14 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f00:	f043 0210 	orr.w	r2, r3, #16
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f0c:	f043 0201 	orr.w	r2, r3, #1
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8008f14:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3720      	adds	r7, #32
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	20000040 	.word	0x20000040
 8008f24:	431bde83 	.word	0x431bde83
 8008f28:	40012300 	.word	0x40012300
 8008f2c:	080093dd 	.word	0x080093dd
 8008f30:	08009497 	.word	0x08009497
 8008f34:	080094b3 	.word	0x080094b3
 8008f38:	40012000 	.word	0x40012000
 8008f3c:	40012100 	.word	0x40012100
 8008f40:	40012200 	.word	0x40012200

08008f44 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8008f4c:	bf00      	nop
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008f74:	bf00      	nop
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d101      	bne.n	8008f9c <HAL_ADC_ConfigChannel+0x1c>
 8008f98:	2302      	movs	r3, #2
 8008f9a:	e113      	b.n	80091c4 <HAL_ADC_ConfigChannel+0x244>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b09      	cmp	r3, #9
 8008faa:	d925      	bls.n	8008ff8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68d9      	ldr	r1, [r3, #12]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	461a      	mov	r2, r3
 8008fba:	4613      	mov	r3, r2
 8008fbc:	005b      	lsls	r3, r3, #1
 8008fbe:	4413      	add	r3, r2
 8008fc0:	3b1e      	subs	r3, #30
 8008fc2:	2207      	movs	r2, #7
 8008fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc8:	43da      	mvns	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	400a      	ands	r2, r1
 8008fd0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68d9      	ldr	r1, [r3, #12]
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	689a      	ldr	r2, [r3, #8]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	005b      	lsls	r3, r3, #1
 8008fe8:	4403      	add	r3, r0
 8008fea:	3b1e      	subs	r3, #30
 8008fec:	409a      	lsls	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	430a      	orrs	r2, r1
 8008ff4:	60da      	str	r2, [r3, #12]
 8008ff6:	e022      	b.n	800903e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6919      	ldr	r1, [r3, #16]
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	b29b      	uxth	r3, r3
 8009004:	461a      	mov	r2, r3
 8009006:	4613      	mov	r3, r2
 8009008:	005b      	lsls	r3, r3, #1
 800900a:	4413      	add	r3, r2
 800900c:	2207      	movs	r2, #7
 800900e:	fa02 f303 	lsl.w	r3, r2, r3
 8009012:	43da      	mvns	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	400a      	ands	r2, r1
 800901a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6919      	ldr	r1, [r3, #16]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	689a      	ldr	r2, [r3, #8]
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	b29b      	uxth	r3, r3
 800902c:	4618      	mov	r0, r3
 800902e:	4603      	mov	r3, r0
 8009030:	005b      	lsls	r3, r3, #1
 8009032:	4403      	add	r3, r0
 8009034:	409a      	lsls	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	430a      	orrs	r2, r1
 800903c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	2b06      	cmp	r3, #6
 8009044:	d824      	bhi.n	8009090 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	4613      	mov	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	3b05      	subs	r3, #5
 8009058:	221f      	movs	r2, #31
 800905a:	fa02 f303 	lsl.w	r3, r2, r3
 800905e:	43da      	mvns	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	400a      	ands	r2, r1
 8009066:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	b29b      	uxth	r3, r3
 8009074:	4618      	mov	r0, r3
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	685a      	ldr	r2, [r3, #4]
 800907a:	4613      	mov	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	4413      	add	r3, r2
 8009080:	3b05      	subs	r3, #5
 8009082:	fa00 f203 	lsl.w	r2, r0, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	430a      	orrs	r2, r1
 800908c:	635a      	str	r2, [r3, #52]	@ 0x34
 800908e:	e04c      	b.n	800912a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	2b0c      	cmp	r3, #12
 8009096:	d824      	bhi.n	80090e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	685a      	ldr	r2, [r3, #4]
 80090a2:	4613      	mov	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	4413      	add	r3, r2
 80090a8:	3b23      	subs	r3, #35	@ 0x23
 80090aa:	221f      	movs	r2, #31
 80090ac:	fa02 f303 	lsl.w	r3, r2, r3
 80090b0:	43da      	mvns	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	400a      	ands	r2, r1
 80090b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	4618      	mov	r0, r3
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	4613      	mov	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	4413      	add	r3, r2
 80090d2:	3b23      	subs	r3, #35	@ 0x23
 80090d4:	fa00 f203 	lsl.w	r2, r0, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	430a      	orrs	r2, r1
 80090de:	631a      	str	r2, [r3, #48]	@ 0x30
 80090e0:	e023      	b.n	800912a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	4613      	mov	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	4413      	add	r3, r2
 80090f2:	3b41      	subs	r3, #65	@ 0x41
 80090f4:	221f      	movs	r2, #31
 80090f6:	fa02 f303 	lsl.w	r3, r2, r3
 80090fa:	43da      	mvns	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	400a      	ands	r2, r1
 8009102:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	b29b      	uxth	r3, r3
 8009110:	4618      	mov	r0, r3
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	685a      	ldr	r2, [r3, #4]
 8009116:	4613      	mov	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	3b41      	subs	r3, #65	@ 0x41
 800911e:	fa00 f203 	lsl.w	r2, r0, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	430a      	orrs	r2, r1
 8009128:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800912a:	4b29      	ldr	r3, [pc, #164]	@ (80091d0 <HAL_ADC_ConfigChannel+0x250>)
 800912c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a28      	ldr	r2, [pc, #160]	@ (80091d4 <HAL_ADC_ConfigChannel+0x254>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d10f      	bne.n	8009158 <HAL_ADC_ConfigChannel+0x1d8>
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b12      	cmp	r3, #18
 800913e:	d10b      	bne.n	8009158 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a1d      	ldr	r2, [pc, #116]	@ (80091d4 <HAL_ADC_ConfigChannel+0x254>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d12b      	bne.n	80091ba <HAL_ADC_ConfigChannel+0x23a>
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a1c      	ldr	r2, [pc, #112]	@ (80091d8 <HAL_ADC_ConfigChannel+0x258>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d003      	beq.n	8009174 <HAL_ADC_ConfigChannel+0x1f4>
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b11      	cmp	r3, #17
 8009172:	d122      	bne.n	80091ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a11      	ldr	r2, [pc, #68]	@ (80091d8 <HAL_ADC_ConfigChannel+0x258>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d111      	bne.n	80091ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009196:	4b11      	ldr	r3, [pc, #68]	@ (80091dc <HAL_ADC_ConfigChannel+0x25c>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a11      	ldr	r2, [pc, #68]	@ (80091e0 <HAL_ADC_ConfigChannel+0x260>)
 800919c:	fba2 2303 	umull	r2, r3, r2, r3
 80091a0:	0c9a      	lsrs	r2, r3, #18
 80091a2:	4613      	mov	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80091ac:	e002      	b.n	80091b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	3b01      	subs	r3, #1
 80091b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1f9      	bne.n	80091ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	40012300 	.word	0x40012300
 80091d4:	40012000 	.word	0x40012000
 80091d8:	10000012 	.word	0x10000012
 80091dc:	20000040 	.word	0x20000040
 80091e0:	431bde83 	.word	0x431bde83

080091e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80091ec:	4b79      	ldr	r3, [pc, #484]	@ (80093d4 <ADC_Init+0x1f0>)
 80091ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	431a      	orrs	r2, r3
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009218:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6859      	ldr	r1, [r3, #4]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	021a      	lsls	r2, r3, #8
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	430a      	orrs	r2, r1
 800922c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	685a      	ldr	r2, [r3, #4]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800923c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	6859      	ldr	r1, [r3, #4]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	689a      	ldr	r2, [r3, #8]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	430a      	orrs	r2, r1
 800924e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	689a      	ldr	r2, [r3, #8]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800925e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6899      	ldr	r1, [r3, #8]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	68da      	ldr	r2, [r3, #12]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	430a      	orrs	r2, r1
 8009270:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009276:	4a58      	ldr	r2, [pc, #352]	@ (80093d8 <ADC_Init+0x1f4>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d022      	beq.n	80092c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689a      	ldr	r2, [r3, #8]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800928a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6899      	ldr	r1, [r3, #8]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	430a      	orrs	r2, r1
 800929c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	689a      	ldr	r2, [r3, #8]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80092ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	6899      	ldr	r1, [r3, #8]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	430a      	orrs	r2, r1
 80092be:	609a      	str	r2, [r3, #8]
 80092c0:	e00f      	b.n	80092e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	689a      	ldr	r2, [r3, #8]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80092d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	689a      	ldr	r2, [r3, #8]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80092e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	689a      	ldr	r2, [r3, #8]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f022 0202 	bic.w	r2, r2, #2
 80092f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	6899      	ldr	r1, [r3, #8]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	7e1b      	ldrb	r3, [r3, #24]
 80092fc:	005a      	lsls	r2, r3, #1
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	430a      	orrs	r2, r1
 8009304:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d01b      	beq.n	8009348 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	685a      	ldr	r2, [r3, #4]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800931e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685a      	ldr	r2, [r3, #4]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800932e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	6859      	ldr	r1, [r3, #4]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800933a:	3b01      	subs	r3, #1
 800933c:	035a      	lsls	r2, r3, #13
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	430a      	orrs	r2, r1
 8009344:	605a      	str	r2, [r3, #4]
 8009346:	e007      	b.n	8009358 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009356:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8009366:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	3b01      	subs	r3, #1
 8009374:	051a      	lsls	r2, r3, #20
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	430a      	orrs	r2, r1
 800937c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	689a      	ldr	r2, [r3, #8]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800938c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6899      	ldr	r1, [r3, #8]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800939a:	025a      	lsls	r2, r3, #9
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	430a      	orrs	r2, r1
 80093a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	689a      	ldr	r2, [r3, #8]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6899      	ldr	r1, [r3, #8]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	029a      	lsls	r2, r3, #10
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	430a      	orrs	r2, r1
 80093c6:	609a      	str	r2, [r3, #8]
}
 80093c8:	bf00      	nop
 80093ca:	3714      	adds	r7, #20
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	40012300 	.word	0x40012300
 80093d8:	0f000001 	.word	0x0f000001

080093dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d13c      	bne.n	8009470 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800940c:	2b00      	cmp	r3, #0
 800940e:	d12b      	bne.n	8009468 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009414:	2b00      	cmp	r3, #0
 8009416:	d127      	bne.n	8009468 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800941e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009422:	2b00      	cmp	r3, #0
 8009424:	d006      	beq.n	8009434 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8009430:	2b00      	cmp	r3, #0
 8009432:	d119      	bne.n	8009468 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	685a      	ldr	r2, [r3, #4]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f022 0220 	bic.w	r2, r2, #32
 8009442:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009448:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009454:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009458:	2b00      	cmp	r3, #0
 800945a:	d105      	bne.n	8009468 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009460:	f043 0201 	orr.w	r2, r3, #1
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f7ff fd6b 	bl	8008f44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800946e:	e00e      	b.n	800948e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009474:	f003 0310 	and.w	r3, r3, #16
 8009478:	2b00      	cmp	r3, #0
 800947a:	d003      	beq.n	8009484 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f7ff fd75 	bl	8008f6c <HAL_ADC_ErrorCallback>
}
 8009482:	e004      	b.n	800948e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	4798      	blx	r3
}
 800948e:	bf00      	nop
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b084      	sub	sp, #16
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f7ff fd57 	bl	8008f58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80094aa:	bf00      	nop
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094be:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2240      	movs	r2, #64	@ 0x40
 80094c4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ca:	f043 0204 	orr.w	r2, r3, #4
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f7ff fd4a 	bl	8008f6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80094d8:	bf00      	nop
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f003 0307 	and.w	r3, r3, #7
 80094ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80094f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009524 <__NVIC_SetPriorityGrouping+0x44>)
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80094fc:	4013      	ands	r3, r2
 80094fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009508:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800950c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009512:	4a04      	ldr	r2, [pc, #16]	@ (8009524 <__NVIC_SetPriorityGrouping+0x44>)
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	60d3      	str	r3, [r2, #12]
}
 8009518:	bf00      	nop
 800951a:	3714      	adds	r7, #20
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	e000ed00 	.word	0xe000ed00

08009528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009528:	b480      	push	{r7}
 800952a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800952c:	4b04      	ldr	r3, [pc, #16]	@ (8009540 <__NVIC_GetPriorityGrouping+0x18>)
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	0a1b      	lsrs	r3, r3, #8
 8009532:	f003 0307 	and.w	r3, r3, #7
}
 8009536:	4618      	mov	r0, r3
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr
 8009540:	e000ed00 	.word	0xe000ed00

08009544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	4603      	mov	r3, r0
 800954c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800954e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009552:	2b00      	cmp	r3, #0
 8009554:	db0b      	blt.n	800956e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009556:	79fb      	ldrb	r3, [r7, #7]
 8009558:	f003 021f 	and.w	r2, r3, #31
 800955c:	4907      	ldr	r1, [pc, #28]	@ (800957c <__NVIC_EnableIRQ+0x38>)
 800955e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009562:	095b      	lsrs	r3, r3, #5
 8009564:	2001      	movs	r0, #1
 8009566:	fa00 f202 	lsl.w	r2, r0, r2
 800956a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800956e:	bf00      	nop
 8009570:	370c      	adds	r7, #12
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	e000e100 	.word	0xe000e100

08009580 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	4603      	mov	r3, r0
 8009588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800958a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800958e:	2b00      	cmp	r3, #0
 8009590:	db12      	blt.n	80095b8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009592:	79fb      	ldrb	r3, [r7, #7]
 8009594:	f003 021f 	and.w	r2, r3, #31
 8009598:	490a      	ldr	r1, [pc, #40]	@ (80095c4 <__NVIC_DisableIRQ+0x44>)
 800959a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800959e:	095b      	lsrs	r3, r3, #5
 80095a0:	2001      	movs	r0, #1
 80095a2:	fa00 f202 	lsl.w	r2, r0, r2
 80095a6:	3320      	adds	r3, #32
 80095a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80095ac:	f3bf 8f4f 	dsb	sy
}
 80095b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80095b2:	f3bf 8f6f 	isb	sy
}
 80095b6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	e000e100 	.word	0xe000e100

080095c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4603      	mov	r3, r0
 80095d0:	6039      	str	r1, [r7, #0]
 80095d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80095d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	db0a      	blt.n	80095f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	490c      	ldr	r1, [pc, #48]	@ (8009614 <__NVIC_SetPriority+0x4c>)
 80095e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095e6:	0112      	lsls	r2, r2, #4
 80095e8:	b2d2      	uxtb	r2, r2
 80095ea:	440b      	add	r3, r1
 80095ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80095f0:	e00a      	b.n	8009608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	b2da      	uxtb	r2, r3
 80095f6:	4908      	ldr	r1, [pc, #32]	@ (8009618 <__NVIC_SetPriority+0x50>)
 80095f8:	79fb      	ldrb	r3, [r7, #7]
 80095fa:	f003 030f 	and.w	r3, r3, #15
 80095fe:	3b04      	subs	r3, #4
 8009600:	0112      	lsls	r2, r2, #4
 8009602:	b2d2      	uxtb	r2, r2
 8009604:	440b      	add	r3, r1
 8009606:	761a      	strb	r2, [r3, #24]
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr
 8009614:	e000e100 	.word	0xe000e100
 8009618:	e000ed00 	.word	0xe000ed00

0800961c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800961c:	b480      	push	{r7}
 800961e:	b089      	sub	sp, #36	@ 0x24
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f003 0307 	and.w	r3, r3, #7
 800962e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	f1c3 0307 	rsb	r3, r3, #7
 8009636:	2b04      	cmp	r3, #4
 8009638:	bf28      	it	cs
 800963a:	2304      	movcs	r3, #4
 800963c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	3304      	adds	r3, #4
 8009642:	2b06      	cmp	r3, #6
 8009644:	d902      	bls.n	800964c <NVIC_EncodePriority+0x30>
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	3b03      	subs	r3, #3
 800964a:	e000      	b.n	800964e <NVIC_EncodePriority+0x32>
 800964c:	2300      	movs	r3, #0
 800964e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009650:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	fa02 f303 	lsl.w	r3, r2, r3
 800965a:	43da      	mvns	r2, r3
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	401a      	ands	r2, r3
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009664:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	fa01 f303 	lsl.w	r3, r1, r3
 800966e:	43d9      	mvns	r1, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009674:	4313      	orrs	r3, r2
         );
}
 8009676:	4618      	mov	r0, r3
 8009678:	3724      	adds	r7, #36	@ 0x24
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
	...

08009684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	3b01      	subs	r3, #1
 8009690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009694:	d301      	bcc.n	800969a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009696:	2301      	movs	r3, #1
 8009698:	e00f      	b.n	80096ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800969a:	4a0a      	ldr	r2, [pc, #40]	@ (80096c4 <SysTick_Config+0x40>)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	3b01      	subs	r3, #1
 80096a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80096a2:	210f      	movs	r1, #15
 80096a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096a8:	f7ff ff8e 	bl	80095c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80096ac:	4b05      	ldr	r3, [pc, #20]	@ (80096c4 <SysTick_Config+0x40>)
 80096ae:	2200      	movs	r2, #0
 80096b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80096b2:	4b04      	ldr	r3, [pc, #16]	@ (80096c4 <SysTick_Config+0x40>)
 80096b4:	2207      	movs	r2, #7
 80096b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	e000e010 	.word	0xe000e010

080096c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f7ff ff05 	bl	80094e0 <__NVIC_SetPriorityGrouping>
}
 80096d6:	bf00      	nop
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80096de:	b580      	push	{r7, lr}
 80096e0:	b086      	sub	sp, #24
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	4603      	mov	r3, r0
 80096e6:	60b9      	str	r1, [r7, #8]
 80096e8:	607a      	str	r2, [r7, #4]
 80096ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80096ec:	2300      	movs	r3, #0
 80096ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80096f0:	f7ff ff1a 	bl	8009528 <__NVIC_GetPriorityGrouping>
 80096f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	68b9      	ldr	r1, [r7, #8]
 80096fa:	6978      	ldr	r0, [r7, #20]
 80096fc:	f7ff ff8e 	bl	800961c <NVIC_EncodePriority>
 8009700:	4602      	mov	r2, r0
 8009702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009706:	4611      	mov	r1, r2
 8009708:	4618      	mov	r0, r3
 800970a:	f7ff ff5d 	bl	80095c8 <__NVIC_SetPriority>
}
 800970e:	bf00      	nop
 8009710:	3718      	adds	r7, #24
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b082      	sub	sp, #8
 800971a:	af00      	add	r7, sp, #0
 800971c:	4603      	mov	r3, r0
 800971e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009724:	4618      	mov	r0, r3
 8009726:	f7ff ff0d 	bl	8009544 <__NVIC_EnableIRQ>
}
 800972a:	bf00      	nop
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b082      	sub	sp, #8
 8009736:	af00      	add	r7, sp, #0
 8009738:	4603      	mov	r3, r0
 800973a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800973c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009740:	4618      	mov	r0, r3
 8009742:	f7ff ff1d 	bl	8009580 <__NVIC_DisableIRQ>
}
 8009746:	bf00      	nop
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b082      	sub	sp, #8
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7ff ff94 	bl	8009684 <SysTick_Config>
 800975c:	4603      	mov	r3, r0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
	...

08009768 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009770:	2300      	movs	r3, #0
 8009772:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009774:	f7ff fa5e 	bl	8008c34 <HAL_GetTick>
 8009778:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d101      	bne.n	8009784 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e099      	b.n	80098b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2202      	movs	r2, #2
 8009788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f022 0201 	bic.w	r2, r2, #1
 80097a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80097a4:	e00f      	b.n	80097c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80097a6:	f7ff fa45 	bl	8008c34 <HAL_GetTick>
 80097aa:	4602      	mov	r2, r0
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	2b05      	cmp	r3, #5
 80097b2:	d908      	bls.n	80097c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2220      	movs	r2, #32
 80097b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2203      	movs	r2, #3
 80097be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80097c2:	2303      	movs	r3, #3
 80097c4:	e078      	b.n	80098b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 0301 	and.w	r3, r3, #1
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1e8      	bne.n	80097a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	4b38      	ldr	r3, [pc, #224]	@ (80098c0 <HAL_DMA_Init+0x158>)
 80097e0:	4013      	ands	r3, r2
 80097e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	685a      	ldr	r2, [r3, #4]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80097f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800980a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6a1b      	ldr	r3, [r3, #32]
 8009810:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	4313      	orrs	r3, r2
 8009816:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800981c:	2b04      	cmp	r3, #4
 800981e:	d107      	bne.n	8009830 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009828:	4313      	orrs	r3, r2
 800982a:	697a      	ldr	r2, [r7, #20]
 800982c:	4313      	orrs	r3, r2
 800982e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	697a      	ldr	r2, [r7, #20]
 8009836:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	f023 0307 	bic.w	r3, r3, #7
 8009846:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	4313      	orrs	r3, r2
 8009850:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009856:	2b04      	cmp	r3, #4
 8009858:	d117      	bne.n	800988a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800985e:	697a      	ldr	r2, [r7, #20]
 8009860:	4313      	orrs	r3, r2
 8009862:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00e      	beq.n	800988a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fb5f 	bl	8009f30 <DMA_CheckFifoParam>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d008      	beq.n	800988a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2240      	movs	r2, #64	@ 0x40
 800987c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8009886:	2301      	movs	r3, #1
 8009888:	e016      	b.n	80098b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	697a      	ldr	r2, [r7, #20]
 8009890:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fb16 	bl	8009ec4 <DMA_CalcBaseAndBitshift>
 8009898:	4603      	mov	r3, r0
 800989a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098a0:	223f      	movs	r2, #63	@ 0x3f
 80098a2:	409a      	lsls	r2, r3
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3718      	adds	r7, #24
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	f010803f 	.word	0xf010803f

080098c4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d101      	bne.n	80098d6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e050      	b.n	8009978 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b02      	cmp	r3, #2
 80098e0:	d101      	bne.n	80098e6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80098e2:	2302      	movs	r3, #2
 80098e4:	e048      	b.n	8009978 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f022 0201 	bic.w	r2, r2, #1
 80098f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2200      	movs	r2, #0
 80098fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2200      	movs	r2, #0
 8009904:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2200      	movs	r2, #0
 800990c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2200      	movs	r2, #0
 8009914:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2200      	movs	r2, #0
 800991c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2221      	movs	r2, #33	@ 0x21
 8009924:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 facc 	bl	8009ec4 <DMA_CalcBaseAndBitshift>
 800992c:	4603      	mov	r3, r0
 800992e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009958:	223f      	movs	r2, #63	@ 0x3f
 800995a:	409a      	lsls	r2, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
 800998c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800998e:	2300      	movs	r3, #0
 8009990:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009996:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d101      	bne.n	80099a6 <HAL_DMA_Start_IT+0x26>
 80099a2:	2302      	movs	r3, #2
 80099a4:	e040      	b.n	8009a28 <HAL_DMA_Start_IT+0xa8>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2201      	movs	r2, #1
 80099aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d12f      	bne.n	8009a1a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2202      	movs	r2, #2
 80099be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	68b9      	ldr	r1, [r7, #8]
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f000 fa4a 	bl	8009e68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099d8:	223f      	movs	r2, #63	@ 0x3f
 80099da:	409a      	lsls	r2, r3
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f042 0216 	orr.w	r2, r2, #22
 80099ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d007      	beq.n	8009a08 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f042 0208 	orr.w	r2, r2, #8
 8009a06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f042 0201 	orr.w	r2, r2, #1
 8009a16:	601a      	str	r2, [r3, #0]
 8009a18:	e005      	b.n	8009a26 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009a22:	2302      	movs	r3, #2
 8009a24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3718      	adds	r7, #24
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009a3e:	f7ff f8f9 	bl	8008c34 <HAL_GetTick>
 8009a42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d008      	beq.n	8009a62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2280      	movs	r2, #128	@ 0x80
 8009a54:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e052      	b.n	8009b08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f022 0216 	bic.w	r2, r2, #22
 8009a70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	695a      	ldr	r2, [r3, #20]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d103      	bne.n	8009a92 <HAL_DMA_Abort+0x62>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d007      	beq.n	8009aa2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f022 0208 	bic.w	r2, r2, #8
 8009aa0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f022 0201 	bic.w	r2, r2, #1
 8009ab0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009ab2:	e013      	b.n	8009adc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009ab4:	f7ff f8be 	bl	8008c34 <HAL_GetTick>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	1ad3      	subs	r3, r2, r3
 8009abe:	2b05      	cmp	r3, #5
 8009ac0:	d90c      	bls.n	8009adc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2220      	movs	r2, #32
 8009ac6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2203      	movs	r2, #3
 8009acc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	e015      	b.n	8009b08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f003 0301 	and.w	r3, r3, #1
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1e4      	bne.n	8009ab4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009aee:	223f      	movs	r2, #63	@ 0x3f
 8009af0:	409a      	lsls	r2, r3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2201      	movs	r2, #1
 8009afa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d004      	beq.n	8009b2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2280      	movs	r2, #128	@ 0x80
 8009b28:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e00c      	b.n	8009b48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2205      	movs	r2, #5
 8009b32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f022 0201 	bic.w	r2, r2, #1
 8009b44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b086      	sub	sp, #24
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009b60:	4b8e      	ldr	r3, [pc, #568]	@ (8009d9c <HAL_DMA_IRQHandler+0x248>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a8e      	ldr	r2, [pc, #568]	@ (8009da0 <HAL_DMA_IRQHandler+0x24c>)
 8009b66:	fba2 2303 	umull	r2, r3, r2, r3
 8009b6a:	0a9b      	lsrs	r3, r3, #10
 8009b6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b7e:	2208      	movs	r2, #8
 8009b80:	409a      	lsls	r2, r3
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	4013      	ands	r3, r2
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d01a      	beq.n	8009bc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f003 0304 	and.w	r3, r3, #4
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d013      	beq.n	8009bc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f022 0204 	bic.w	r2, r2, #4
 8009ba6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bac:	2208      	movs	r2, #8
 8009bae:	409a      	lsls	r2, r3
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bb8:	f043 0201 	orr.w	r2, r3, #1
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	409a      	lsls	r2, r3
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	4013      	ands	r3, r2
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d012      	beq.n	8009bf6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00b      	beq.n	8009bf6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009be2:	2201      	movs	r2, #1
 8009be4:	409a      	lsls	r2, r3
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bee:	f043 0202 	orr.w	r2, r3, #2
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bfa:	2204      	movs	r2, #4
 8009bfc:	409a      	lsls	r2, r3
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	4013      	ands	r3, r2
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d012      	beq.n	8009c2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f003 0302 	and.w	r3, r3, #2
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00b      	beq.n	8009c2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c18:	2204      	movs	r2, #4
 8009c1a:	409a      	lsls	r2, r3
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c24:	f043 0204 	orr.w	r2, r3, #4
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c30:	2210      	movs	r2, #16
 8009c32:	409a      	lsls	r2, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	4013      	ands	r3, r2
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d043      	beq.n	8009cc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f003 0308 	and.w	r3, r3, #8
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d03c      	beq.n	8009cc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c4e:	2210      	movs	r2, #16
 8009c50:	409a      	lsls	r2, r3
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d018      	beq.n	8009c96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d108      	bne.n	8009c84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d024      	beq.n	8009cc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	4798      	blx	r3
 8009c82:	e01f      	b.n	8009cc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d01b      	beq.n	8009cc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	4798      	blx	r3
 8009c94:	e016      	b.n	8009cc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d107      	bne.n	8009cb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f022 0208 	bic.w	r2, r2, #8
 8009cb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d003      	beq.n	8009cc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009cc8:	2220      	movs	r2, #32
 8009cca:	409a      	lsls	r2, r3
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4013      	ands	r3, r2
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f000 808f 	beq.w	8009df4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 0310 	and.w	r3, r3, #16
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 8087 	beq.w	8009df4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009cea:	2220      	movs	r2, #32
 8009cec:	409a      	lsls	r2, r3
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	2b05      	cmp	r3, #5
 8009cfc:	d136      	bne.n	8009d6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f022 0216 	bic.w	r2, r2, #22
 8009d0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	695a      	ldr	r2, [r3, #20]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009d1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d103      	bne.n	8009d2e <HAL_DMA_IRQHandler+0x1da>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d007      	beq.n	8009d3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f022 0208 	bic.w	r2, r2, #8
 8009d3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d42:	223f      	movs	r2, #63	@ 0x3f
 8009d44:	409a      	lsls	r2, r3
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d07e      	beq.n	8009e60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	4798      	blx	r3
        }
        return;
 8009d6a:	e079      	b.n	8009e60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d01d      	beq.n	8009db6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d10d      	bne.n	8009da4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d031      	beq.n	8009df4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	4798      	blx	r3
 8009d98:	e02c      	b.n	8009df4 <HAL_DMA_IRQHandler+0x2a0>
 8009d9a:	bf00      	nop
 8009d9c:	20000040 	.word	0x20000040
 8009da0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d023      	beq.n	8009df4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	4798      	blx	r3
 8009db4:	e01e      	b.n	8009df4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10f      	bne.n	8009de4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f022 0210 	bic.w	r2, r2, #16
 8009dd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d003      	beq.n	8009df4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d032      	beq.n	8009e62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e00:	f003 0301 	and.w	r3, r3, #1
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d022      	beq.n	8009e4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2205      	movs	r2, #5
 8009e0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f022 0201 	bic.w	r2, r2, #1
 8009e1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	3301      	adds	r3, #1
 8009e24:	60bb      	str	r3, [r7, #8]
 8009e26:	697a      	ldr	r2, [r7, #20]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d307      	bcc.n	8009e3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1f2      	bne.n	8009e20 <HAL_DMA_IRQHandler+0x2cc>
 8009e3a:	e000      	b.n	8009e3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8009e3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d005      	beq.n	8009e62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	4798      	blx	r3
 8009e5e:	e000      	b.n	8009e62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8009e60:	bf00      	nop
    }
  }
}
 8009e62:	3718      	adds	r7, #24
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
 8009e74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009e84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	683a      	ldr	r2, [r7, #0]
 8009e8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	2b40      	cmp	r3, #64	@ 0x40
 8009e94:	d108      	bne.n	8009ea8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009ea6:	e007      	b.n	8009eb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	60da      	str	r2, [r3, #12]
}
 8009eb8:	bf00      	nop
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	3b10      	subs	r3, #16
 8009ed4:	4a14      	ldr	r2, [pc, #80]	@ (8009f28 <DMA_CalcBaseAndBitshift+0x64>)
 8009ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8009eda:	091b      	lsrs	r3, r3, #4
 8009edc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009ede:	4a13      	ldr	r2, [pc, #76]	@ (8009f2c <DMA_CalcBaseAndBitshift+0x68>)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2b03      	cmp	r3, #3
 8009ef0:	d909      	bls.n	8009f06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8009efa:	f023 0303 	bic.w	r3, r3, #3
 8009efe:	1d1a      	adds	r2, r3, #4
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	659a      	str	r2, [r3, #88]	@ 0x58
 8009f04:	e007      	b.n	8009f16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8009f0e:	f023 0303 	bic.w	r3, r3, #3
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	aaaaaaab 	.word	0xaaaaaaab
 8009f2c:	08015a94 	.word	0x08015a94

08009f30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d11f      	bne.n	8009f8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	2b03      	cmp	r3, #3
 8009f4e:	d856      	bhi.n	8009ffe <DMA_CheckFifoParam+0xce>
 8009f50:	a201      	add	r2, pc, #4	@ (adr r2, 8009f58 <DMA_CheckFifoParam+0x28>)
 8009f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f56:	bf00      	nop
 8009f58:	08009f69 	.word	0x08009f69
 8009f5c:	08009f7b 	.word	0x08009f7b
 8009f60:	08009f69 	.word	0x08009f69
 8009f64:	08009fff 	.word	0x08009fff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d046      	beq.n	800a002 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f78:	e043      	b.n	800a002 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f7e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009f82:	d140      	bne.n	800a006 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f88:	e03d      	b.n	800a006 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f92:	d121      	bne.n	8009fd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	2b03      	cmp	r3, #3
 8009f98:	d837      	bhi.n	800a00a <DMA_CheckFifoParam+0xda>
 8009f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8009fa0 <DMA_CheckFifoParam+0x70>)
 8009f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa0:	08009fb1 	.word	0x08009fb1
 8009fa4:	08009fb7 	.word	0x08009fb7
 8009fa8:	08009fb1 	.word	0x08009fb1
 8009fac:	08009fc9 	.word	0x08009fc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8009fb4:	e030      	b.n	800a018 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d025      	beq.n	800a00e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009fc6:	e022      	b.n	800a00e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fcc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009fd0:	d11f      	bne.n	800a012 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009fd6:	e01c      	b.n	800a012 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	2b02      	cmp	r3, #2
 8009fdc:	d903      	bls.n	8009fe6 <DMA_CheckFifoParam+0xb6>
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	2b03      	cmp	r3, #3
 8009fe2:	d003      	beq.n	8009fec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009fe4:	e018      	b.n	800a018 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8009fea:	e015      	b.n	800a018 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ff0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00e      	beq.n	800a016 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8009ffc:	e00b      	b.n	800a016 <DMA_CheckFifoParam+0xe6>
      break;
 8009ffe:	bf00      	nop
 800a000:	e00a      	b.n	800a018 <DMA_CheckFifoParam+0xe8>
      break;
 800a002:	bf00      	nop
 800a004:	e008      	b.n	800a018 <DMA_CheckFifoParam+0xe8>
      break;
 800a006:	bf00      	nop
 800a008:	e006      	b.n	800a018 <DMA_CheckFifoParam+0xe8>
      break;
 800a00a:	bf00      	nop
 800a00c:	e004      	b.n	800a018 <DMA_CheckFifoParam+0xe8>
      break;
 800a00e:	bf00      	nop
 800a010:	e002      	b.n	800a018 <DMA_CheckFifoParam+0xe8>
      break;   
 800a012:	bf00      	nop
 800a014:	e000      	b.n	800a018 <DMA_CheckFifoParam+0xe8>
      break;
 800a016:	bf00      	nop
    }
  } 
  
  return status; 
 800a018:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3714      	adds	r7, #20
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop

0800a028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a028:	b480      	push	{r7}
 800a02a:	b089      	sub	sp, #36	@ 0x24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a032:	2300      	movs	r3, #0
 800a034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a036:	2300      	movs	r3, #0
 800a038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a03a:	2300      	movs	r3, #0
 800a03c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a03e:	2300      	movs	r3, #0
 800a040:	61fb      	str	r3, [r7, #28]
 800a042:	e165      	b.n	800a310 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a044:	2201      	movs	r2, #1
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	fa02 f303 	lsl.w	r3, r2, r3
 800a04c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	697a      	ldr	r2, [r7, #20]
 800a054:	4013      	ands	r3, r2
 800a056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a058:	693a      	ldr	r2, [r7, #16]
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	f040 8154 	bne.w	800a30a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	f003 0303 	and.w	r3, r3, #3
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d005      	beq.n	800a07a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a076:	2b02      	cmp	r3, #2
 800a078:	d130      	bne.n	800a0dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	005b      	lsls	r3, r3, #1
 800a084:	2203      	movs	r2, #3
 800a086:	fa02 f303 	lsl.w	r3, r2, r3
 800a08a:	43db      	mvns	r3, r3
 800a08c:	69ba      	ldr	r2, [r7, #24]
 800a08e:	4013      	ands	r3, r2
 800a090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	68da      	ldr	r2, [r3, #12]
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	005b      	lsls	r3, r3, #1
 800a09a:	fa02 f303 	lsl.w	r3, r2, r3
 800a09e:	69ba      	ldr	r2, [r7, #24]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	69ba      	ldr	r2, [r7, #24]
 800a0a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b8:	43db      	mvns	r3, r3
 800a0ba:	69ba      	ldr	r2, [r7, #24]
 800a0bc:	4013      	ands	r3, r2
 800a0be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	091b      	lsrs	r3, r3, #4
 800a0c6:	f003 0201 	and.w	r2, r3, #1
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d0:	69ba      	ldr	r2, [r7, #24]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	69ba      	ldr	r2, [r7, #24]
 800a0da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	f003 0303 	and.w	r3, r3, #3
 800a0e4:	2b03      	cmp	r3, #3
 800a0e6:	d017      	beq.n	800a118 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	005b      	lsls	r3, r3, #1
 800a0f2:	2203      	movs	r2, #3
 800a0f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f8:	43db      	mvns	r3, r3
 800a0fa:	69ba      	ldr	r2, [r7, #24]
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	689a      	ldr	r2, [r3, #8]
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	005b      	lsls	r3, r3, #1
 800a108:	fa02 f303 	lsl.w	r3, r2, r3
 800a10c:	69ba      	ldr	r2, [r7, #24]
 800a10e:	4313      	orrs	r3, r2
 800a110:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	69ba      	ldr	r2, [r7, #24]
 800a116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	f003 0303 	and.w	r3, r3, #3
 800a120:	2b02      	cmp	r3, #2
 800a122:	d123      	bne.n	800a16c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	08da      	lsrs	r2, r3, #3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	3208      	adds	r2, #8
 800a12c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a130:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	f003 0307 	and.w	r3, r3, #7
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	220f      	movs	r2, #15
 800a13c:	fa02 f303 	lsl.w	r3, r2, r3
 800a140:	43db      	mvns	r3, r3
 800a142:	69ba      	ldr	r2, [r7, #24]
 800a144:	4013      	ands	r3, r2
 800a146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	691a      	ldr	r2, [r3, #16]
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	f003 0307 	and.w	r3, r3, #7
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	fa02 f303 	lsl.w	r3, r2, r3
 800a158:	69ba      	ldr	r2, [r7, #24]
 800a15a:	4313      	orrs	r3, r2
 800a15c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	08da      	lsrs	r2, r3, #3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	3208      	adds	r2, #8
 800a166:	69b9      	ldr	r1, [r7, #24]
 800a168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	005b      	lsls	r3, r3, #1
 800a176:	2203      	movs	r2, #3
 800a178:	fa02 f303 	lsl.w	r3, r2, r3
 800a17c:	43db      	mvns	r3, r3
 800a17e:	69ba      	ldr	r2, [r7, #24]
 800a180:	4013      	ands	r3, r2
 800a182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	f003 0203 	and.w	r2, r3, #3
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	005b      	lsls	r3, r3, #1
 800a190:	fa02 f303 	lsl.w	r3, r2, r3
 800a194:	69ba      	ldr	r2, [r7, #24]
 800a196:	4313      	orrs	r3, r2
 800a198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	69ba      	ldr	r2, [r7, #24]
 800a19e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f000 80ae 	beq.w	800a30a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	60fb      	str	r3, [r7, #12]
 800a1b2:	4b5d      	ldr	r3, [pc, #372]	@ (800a328 <HAL_GPIO_Init+0x300>)
 800a1b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1b6:	4a5c      	ldr	r2, [pc, #368]	@ (800a328 <HAL_GPIO_Init+0x300>)
 800a1b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a1bc:	6453      	str	r3, [r2, #68]	@ 0x44
 800a1be:	4b5a      	ldr	r3, [pc, #360]	@ (800a328 <HAL_GPIO_Init+0x300>)
 800a1c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a1c6:	60fb      	str	r3, [r7, #12]
 800a1c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a1ca:	4a58      	ldr	r2, [pc, #352]	@ (800a32c <HAL_GPIO_Init+0x304>)
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	089b      	lsrs	r3, r3, #2
 800a1d0:	3302      	adds	r3, #2
 800a1d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	f003 0303 	and.w	r3, r3, #3
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	220f      	movs	r2, #15
 800a1e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e6:	43db      	mvns	r3, r3
 800a1e8:	69ba      	ldr	r2, [r7, #24]
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a4f      	ldr	r2, [pc, #316]	@ (800a330 <HAL_GPIO_Init+0x308>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d025      	beq.n	800a242 <HAL_GPIO_Init+0x21a>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4a4e      	ldr	r2, [pc, #312]	@ (800a334 <HAL_GPIO_Init+0x30c>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d01f      	beq.n	800a23e <HAL_GPIO_Init+0x216>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a4d      	ldr	r2, [pc, #308]	@ (800a338 <HAL_GPIO_Init+0x310>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d019      	beq.n	800a23a <HAL_GPIO_Init+0x212>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4a4c      	ldr	r2, [pc, #304]	@ (800a33c <HAL_GPIO_Init+0x314>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d013      	beq.n	800a236 <HAL_GPIO_Init+0x20e>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4a4b      	ldr	r2, [pc, #300]	@ (800a340 <HAL_GPIO_Init+0x318>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d00d      	beq.n	800a232 <HAL_GPIO_Init+0x20a>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4a4a      	ldr	r2, [pc, #296]	@ (800a344 <HAL_GPIO_Init+0x31c>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d007      	beq.n	800a22e <HAL_GPIO_Init+0x206>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a49      	ldr	r2, [pc, #292]	@ (800a348 <HAL_GPIO_Init+0x320>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d101      	bne.n	800a22a <HAL_GPIO_Init+0x202>
 800a226:	2306      	movs	r3, #6
 800a228:	e00c      	b.n	800a244 <HAL_GPIO_Init+0x21c>
 800a22a:	2307      	movs	r3, #7
 800a22c:	e00a      	b.n	800a244 <HAL_GPIO_Init+0x21c>
 800a22e:	2305      	movs	r3, #5
 800a230:	e008      	b.n	800a244 <HAL_GPIO_Init+0x21c>
 800a232:	2304      	movs	r3, #4
 800a234:	e006      	b.n	800a244 <HAL_GPIO_Init+0x21c>
 800a236:	2303      	movs	r3, #3
 800a238:	e004      	b.n	800a244 <HAL_GPIO_Init+0x21c>
 800a23a:	2302      	movs	r3, #2
 800a23c:	e002      	b.n	800a244 <HAL_GPIO_Init+0x21c>
 800a23e:	2301      	movs	r3, #1
 800a240:	e000      	b.n	800a244 <HAL_GPIO_Init+0x21c>
 800a242:	2300      	movs	r3, #0
 800a244:	69fa      	ldr	r2, [r7, #28]
 800a246:	f002 0203 	and.w	r2, r2, #3
 800a24a:	0092      	lsls	r2, r2, #2
 800a24c:	4093      	lsls	r3, r2
 800a24e:	69ba      	ldr	r2, [r7, #24]
 800a250:	4313      	orrs	r3, r2
 800a252:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a254:	4935      	ldr	r1, [pc, #212]	@ (800a32c <HAL_GPIO_Init+0x304>)
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	089b      	lsrs	r3, r3, #2
 800a25a:	3302      	adds	r3, #2
 800a25c:	69ba      	ldr	r2, [r7, #24]
 800a25e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a262:	4b3a      	ldr	r3, [pc, #232]	@ (800a34c <HAL_GPIO_Init+0x324>)
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	43db      	mvns	r3, r3
 800a26c:	69ba      	ldr	r2, [r7, #24]
 800a26e:	4013      	ands	r3, r2
 800a270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d003      	beq.n	800a286 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800a27e:	69ba      	ldr	r2, [r7, #24]
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	4313      	orrs	r3, r2
 800a284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a286:	4a31      	ldr	r2, [pc, #196]	@ (800a34c <HAL_GPIO_Init+0x324>)
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a28c:	4b2f      	ldr	r3, [pc, #188]	@ (800a34c <HAL_GPIO_Init+0x324>)
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	43db      	mvns	r3, r3
 800a296:	69ba      	ldr	r2, [r7, #24]
 800a298:	4013      	ands	r3, r2
 800a29a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d003      	beq.n	800a2b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800a2a8:	69ba      	ldr	r2, [r7, #24]
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a2b0:	4a26      	ldr	r2, [pc, #152]	@ (800a34c <HAL_GPIO_Init+0x324>)
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a2b6:	4b25      	ldr	r3, [pc, #148]	@ (800a34c <HAL_GPIO_Init+0x324>)
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	43db      	mvns	r3, r3
 800a2c0:	69ba      	ldr	r2, [r7, #24]
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d003      	beq.n	800a2da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800a2d2:	69ba      	ldr	r2, [r7, #24]
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a2da:	4a1c      	ldr	r2, [pc, #112]	@ (800a34c <HAL_GPIO_Init+0x324>)
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a2e0:	4b1a      	ldr	r3, [pc, #104]	@ (800a34c <HAL_GPIO_Init+0x324>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	43db      	mvns	r3, r3
 800a2ea:	69ba      	ldr	r2, [r7, #24]
 800a2ec:	4013      	ands	r3, r2
 800a2ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d003      	beq.n	800a304 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a2fc:	69ba      	ldr	r2, [r7, #24]
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	4313      	orrs	r3, r2
 800a302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a304:	4a11      	ldr	r2, [pc, #68]	@ (800a34c <HAL_GPIO_Init+0x324>)
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	3301      	adds	r3, #1
 800a30e:	61fb      	str	r3, [r7, #28]
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	2b0f      	cmp	r3, #15
 800a314:	f67f ae96 	bls.w	800a044 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a318:	bf00      	nop
 800a31a:	bf00      	nop
 800a31c:	3724      	adds	r7, #36	@ 0x24
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	40023800 	.word	0x40023800
 800a32c:	40013800 	.word	0x40013800
 800a330:	40020000 	.word	0x40020000
 800a334:	40020400 	.word	0x40020400
 800a338:	40020800 	.word	0x40020800
 800a33c:	40020c00 	.word	0x40020c00
 800a340:	40021000 	.word	0x40021000
 800a344:	40021400 	.word	0x40021400
 800a348:	40021800 	.word	0x40021800
 800a34c:	40013c00 	.word	0x40013c00

0800a350 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a350:	b480      	push	{r7}
 800a352:	b087      	sub	sp, #28
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a35a:	2300      	movs	r3, #0
 800a35c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800a35e:	2300      	movs	r3, #0
 800a360:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800a362:	2300      	movs	r3, #0
 800a364:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a366:	2300      	movs	r3, #0
 800a368:	617b      	str	r3, [r7, #20]
 800a36a:	e0c7      	b.n	800a4fc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a36c:	2201      	movs	r2, #1
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	fa02 f303 	lsl.w	r3, r2, r3
 800a374:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800a376:	683a      	ldr	r2, [r7, #0]
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	4013      	ands	r3, r2
 800a37c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	429a      	cmp	r2, r3
 800a384:	f040 80b7 	bne.w	800a4f6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800a388:	4a62      	ldr	r2, [pc, #392]	@ (800a514 <HAL_GPIO_DeInit+0x1c4>)
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	089b      	lsrs	r3, r3, #2
 800a38e:	3302      	adds	r3, #2
 800a390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a394:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	f003 0303 	and.w	r3, r3, #3
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	220f      	movs	r2, #15
 800a3a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	4a5a      	ldr	r2, [pc, #360]	@ (800a518 <HAL_GPIO_DeInit+0x1c8>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d025      	beq.n	800a3fe <HAL_GPIO_DeInit+0xae>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4a59      	ldr	r2, [pc, #356]	@ (800a51c <HAL_GPIO_DeInit+0x1cc>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d01f      	beq.n	800a3fa <HAL_GPIO_DeInit+0xaa>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4a58      	ldr	r2, [pc, #352]	@ (800a520 <HAL_GPIO_DeInit+0x1d0>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d019      	beq.n	800a3f6 <HAL_GPIO_DeInit+0xa6>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	4a57      	ldr	r2, [pc, #348]	@ (800a524 <HAL_GPIO_DeInit+0x1d4>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d013      	beq.n	800a3f2 <HAL_GPIO_DeInit+0xa2>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4a56      	ldr	r2, [pc, #344]	@ (800a528 <HAL_GPIO_DeInit+0x1d8>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d00d      	beq.n	800a3ee <HAL_GPIO_DeInit+0x9e>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4a55      	ldr	r2, [pc, #340]	@ (800a52c <HAL_GPIO_DeInit+0x1dc>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d007      	beq.n	800a3ea <HAL_GPIO_DeInit+0x9a>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4a54      	ldr	r2, [pc, #336]	@ (800a530 <HAL_GPIO_DeInit+0x1e0>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d101      	bne.n	800a3e6 <HAL_GPIO_DeInit+0x96>
 800a3e2:	2306      	movs	r3, #6
 800a3e4:	e00c      	b.n	800a400 <HAL_GPIO_DeInit+0xb0>
 800a3e6:	2307      	movs	r3, #7
 800a3e8:	e00a      	b.n	800a400 <HAL_GPIO_DeInit+0xb0>
 800a3ea:	2305      	movs	r3, #5
 800a3ec:	e008      	b.n	800a400 <HAL_GPIO_DeInit+0xb0>
 800a3ee:	2304      	movs	r3, #4
 800a3f0:	e006      	b.n	800a400 <HAL_GPIO_DeInit+0xb0>
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	e004      	b.n	800a400 <HAL_GPIO_DeInit+0xb0>
 800a3f6:	2302      	movs	r3, #2
 800a3f8:	e002      	b.n	800a400 <HAL_GPIO_DeInit+0xb0>
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e000      	b.n	800a400 <HAL_GPIO_DeInit+0xb0>
 800a3fe:	2300      	movs	r3, #0
 800a400:	697a      	ldr	r2, [r7, #20]
 800a402:	f002 0203 	and.w	r2, r2, #3
 800a406:	0092      	lsls	r2, r2, #2
 800a408:	4093      	lsls	r3, r2
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d132      	bne.n	800a476 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a410:	4b48      	ldr	r3, [pc, #288]	@ (800a534 <HAL_GPIO_DeInit+0x1e4>)
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	43db      	mvns	r3, r3
 800a418:	4946      	ldr	r1, [pc, #280]	@ (800a534 <HAL_GPIO_DeInit+0x1e4>)
 800a41a:	4013      	ands	r3, r2
 800a41c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a41e:	4b45      	ldr	r3, [pc, #276]	@ (800a534 <HAL_GPIO_DeInit+0x1e4>)
 800a420:	685a      	ldr	r2, [r3, #4]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	43db      	mvns	r3, r3
 800a426:	4943      	ldr	r1, [pc, #268]	@ (800a534 <HAL_GPIO_DeInit+0x1e4>)
 800a428:	4013      	ands	r3, r2
 800a42a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a42c:	4b41      	ldr	r3, [pc, #260]	@ (800a534 <HAL_GPIO_DeInit+0x1e4>)
 800a42e:	68da      	ldr	r2, [r3, #12]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	43db      	mvns	r3, r3
 800a434:	493f      	ldr	r1, [pc, #252]	@ (800a534 <HAL_GPIO_DeInit+0x1e4>)
 800a436:	4013      	ands	r3, r2
 800a438:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a43a:	4b3e      	ldr	r3, [pc, #248]	@ (800a534 <HAL_GPIO_DeInit+0x1e4>)
 800a43c:	689a      	ldr	r2, [r3, #8]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	43db      	mvns	r3, r3
 800a442:	493c      	ldr	r1, [pc, #240]	@ (800a534 <HAL_GPIO_DeInit+0x1e4>)
 800a444:	4013      	ands	r3, r2
 800a446:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	f003 0303 	and.w	r3, r3, #3
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	220f      	movs	r2, #15
 800a452:	fa02 f303 	lsl.w	r3, r2, r3
 800a456:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a458:	4a2e      	ldr	r2, [pc, #184]	@ (800a514 <HAL_GPIO_DeInit+0x1c4>)
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	089b      	lsrs	r3, r3, #2
 800a45e:	3302      	adds	r3, #2
 800a460:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	43da      	mvns	r2, r3
 800a468:	482a      	ldr	r0, [pc, #168]	@ (800a514 <HAL_GPIO_DeInit+0x1c4>)
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	089b      	lsrs	r3, r3, #2
 800a46e:	400a      	ands	r2, r1
 800a470:	3302      	adds	r3, #2
 800a472:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	005b      	lsls	r3, r3, #1
 800a47e:	2103      	movs	r1, #3
 800a480:	fa01 f303 	lsl.w	r3, r1, r3
 800a484:	43db      	mvns	r3, r3
 800a486:	401a      	ands	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	08da      	lsrs	r2, r3, #3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	3208      	adds	r2, #8
 800a494:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	f003 0307 	and.w	r3, r3, #7
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	220f      	movs	r2, #15
 800a4a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a6:	43db      	mvns	r3, r3
 800a4a8:	697a      	ldr	r2, [r7, #20]
 800a4aa:	08d2      	lsrs	r2, r2, #3
 800a4ac:	4019      	ands	r1, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	3208      	adds	r2, #8
 800a4b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	68da      	ldr	r2, [r3, #12]
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	005b      	lsls	r3, r3, #1
 800a4be:	2103      	movs	r1, #3
 800a4c0:	fa01 f303 	lsl.w	r3, r1, r3
 800a4c4:	43db      	mvns	r3, r3
 800a4c6:	401a      	ands	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	685a      	ldr	r2, [r3, #4]
 800a4d0:	2101      	movs	r1, #1
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	fa01 f303 	lsl.w	r3, r1, r3
 800a4d8:	43db      	mvns	r3, r3
 800a4da:	401a      	ands	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	689a      	ldr	r2, [r3, #8]
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	005b      	lsls	r3, r3, #1
 800a4e8:	2103      	movs	r1, #3
 800a4ea:	fa01 f303 	lsl.w	r3, r1, r3
 800a4ee:	43db      	mvns	r3, r3
 800a4f0:	401a      	ands	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	2b0f      	cmp	r3, #15
 800a500:	f67f af34 	bls.w	800a36c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800a504:	bf00      	nop
 800a506:	bf00      	nop
 800a508:	371c      	adds	r7, #28
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	40013800 	.word	0x40013800
 800a518:	40020000 	.word	0x40020000
 800a51c:	40020400 	.word	0x40020400
 800a520:	40020800 	.word	0x40020800
 800a524:	40020c00 	.word	0x40020c00
 800a528:	40021000 	.word	0x40021000
 800a52c:	40021400 	.word	0x40021400
 800a530:	40021800 	.word	0x40021800
 800a534:	40013c00 	.word	0x40013c00

0800a538 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	460b      	mov	r3, r1
 800a542:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	691a      	ldr	r2, [r3, #16]
 800a548:	887b      	ldrh	r3, [r7, #2]
 800a54a:	4013      	ands	r3, r2
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d002      	beq.n	800a556 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a550:	2301      	movs	r3, #1
 800a552:	73fb      	strb	r3, [r7, #15]
 800a554:	e001      	b.n	800a55a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a556:	2300      	movs	r3, #0
 800a558:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3714      	adds	r7, #20
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	460b      	mov	r3, r1
 800a572:	807b      	strh	r3, [r7, #2]
 800a574:	4613      	mov	r3, r2
 800a576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a578:	787b      	ldrb	r3, [r7, #1]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d003      	beq.n	800a586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a57e:	887a      	ldrh	r2, [r7, #2]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a584:	e003      	b.n	800a58e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a586:	887b      	ldrh	r3, [r7, #2]
 800a588:	041a      	lsls	r2, r3, #16
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	619a      	str	r2, [r3, #24]
}
 800a58e:	bf00      	nop
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
	...

0800a59c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a5a6:	4b08      	ldr	r3, [pc, #32]	@ (800a5c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a5a8:	695a      	ldr	r2, [r3, #20]
 800a5aa:	88fb      	ldrh	r3, [r7, #6]
 800a5ac:	4013      	ands	r3, r2
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d006      	beq.n	800a5c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a5b2:	4a05      	ldr	r2, [pc, #20]	@ (800a5c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a5b4:	88fb      	ldrh	r3, [r7, #6]
 800a5b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a5b8:	88fb      	ldrh	r3, [r7, #6]
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fb f9c2 	bl	8005944 <HAL_GPIO_EXTI_Callback>
  }
}
 800a5c0:	bf00      	nop
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	40013c00 	.word	0x40013c00

0800a5cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d101      	bne.n	800a5de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e12b      	b.n	800a836 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d106      	bne.n	800a5f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7fd fbba 	bl	8007d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2224      	movs	r2, #36	@ 0x24
 800a5fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f022 0201 	bic.w	r2, r2, #1
 800a60e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a61e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a62e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a630:	f001 f912 	bl	800b858 <HAL_RCC_GetPCLK1Freq>
 800a634:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	4a81      	ldr	r2, [pc, #516]	@ (800a840 <HAL_I2C_Init+0x274>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d807      	bhi.n	800a650 <HAL_I2C_Init+0x84>
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	4a80      	ldr	r2, [pc, #512]	@ (800a844 <HAL_I2C_Init+0x278>)
 800a644:	4293      	cmp	r3, r2
 800a646:	bf94      	ite	ls
 800a648:	2301      	movls	r3, #1
 800a64a:	2300      	movhi	r3, #0
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	e006      	b.n	800a65e <HAL_I2C_Init+0x92>
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	4a7d      	ldr	r2, [pc, #500]	@ (800a848 <HAL_I2C_Init+0x27c>)
 800a654:	4293      	cmp	r3, r2
 800a656:	bf94      	ite	ls
 800a658:	2301      	movls	r3, #1
 800a65a:	2300      	movhi	r3, #0
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	e0e7      	b.n	800a836 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	4a78      	ldr	r2, [pc, #480]	@ (800a84c <HAL_I2C_Init+0x280>)
 800a66a:	fba2 2303 	umull	r2, r3, r2, r3
 800a66e:	0c9b      	lsrs	r3, r3, #18
 800a670:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	430a      	orrs	r2, r1
 800a684:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6a1b      	ldr	r3, [r3, #32]
 800a68c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	4a6a      	ldr	r2, [pc, #424]	@ (800a840 <HAL_I2C_Init+0x274>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d802      	bhi.n	800a6a0 <HAL_I2C_Init+0xd4>
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	3301      	adds	r3, #1
 800a69e:	e009      	b.n	800a6b4 <HAL_I2C_Init+0xe8>
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a6a6:	fb02 f303 	mul.w	r3, r2, r3
 800a6aa:	4a69      	ldr	r2, [pc, #420]	@ (800a850 <HAL_I2C_Init+0x284>)
 800a6ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b0:	099b      	lsrs	r3, r3, #6
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	6812      	ldr	r2, [r2, #0]
 800a6b8:	430b      	orrs	r3, r1
 800a6ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	69db      	ldr	r3, [r3, #28]
 800a6c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a6c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	495c      	ldr	r1, [pc, #368]	@ (800a840 <HAL_I2C_Init+0x274>)
 800a6d0:	428b      	cmp	r3, r1
 800a6d2:	d819      	bhi.n	800a708 <HAL_I2C_Init+0x13c>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	1e59      	subs	r1, r3, #1
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	005b      	lsls	r3, r3, #1
 800a6de:	fbb1 f3f3 	udiv	r3, r1, r3
 800a6e2:	1c59      	adds	r1, r3, #1
 800a6e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a6e8:	400b      	ands	r3, r1
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00a      	beq.n	800a704 <HAL_I2C_Init+0x138>
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	1e59      	subs	r1, r3, #1
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	005b      	lsls	r3, r3, #1
 800a6f8:	fbb1 f3f3 	udiv	r3, r1, r3
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a702:	e051      	b.n	800a7a8 <HAL_I2C_Init+0x1dc>
 800a704:	2304      	movs	r3, #4
 800a706:	e04f      	b.n	800a7a8 <HAL_I2C_Init+0x1dc>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d111      	bne.n	800a734 <HAL_I2C_Init+0x168>
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	1e58      	subs	r0, r3, #1
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6859      	ldr	r1, [r3, #4]
 800a718:	460b      	mov	r3, r1
 800a71a:	005b      	lsls	r3, r3, #1
 800a71c:	440b      	add	r3, r1
 800a71e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a722:	3301      	adds	r3, #1
 800a724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a728:	2b00      	cmp	r3, #0
 800a72a:	bf0c      	ite	eq
 800a72c:	2301      	moveq	r3, #1
 800a72e:	2300      	movne	r3, #0
 800a730:	b2db      	uxtb	r3, r3
 800a732:	e012      	b.n	800a75a <HAL_I2C_Init+0x18e>
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	1e58      	subs	r0, r3, #1
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6859      	ldr	r1, [r3, #4]
 800a73c:	460b      	mov	r3, r1
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	440b      	add	r3, r1
 800a742:	0099      	lsls	r1, r3, #2
 800a744:	440b      	add	r3, r1
 800a746:	fbb0 f3f3 	udiv	r3, r0, r3
 800a74a:	3301      	adds	r3, #1
 800a74c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a750:	2b00      	cmp	r3, #0
 800a752:	bf0c      	ite	eq
 800a754:	2301      	moveq	r3, #1
 800a756:	2300      	movne	r3, #0
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d001      	beq.n	800a762 <HAL_I2C_Init+0x196>
 800a75e:	2301      	movs	r3, #1
 800a760:	e022      	b.n	800a7a8 <HAL_I2C_Init+0x1dc>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d10e      	bne.n	800a788 <HAL_I2C_Init+0x1bc>
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	1e58      	subs	r0, r3, #1
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6859      	ldr	r1, [r3, #4]
 800a772:	460b      	mov	r3, r1
 800a774:	005b      	lsls	r3, r3, #1
 800a776:	440b      	add	r3, r1
 800a778:	fbb0 f3f3 	udiv	r3, r0, r3
 800a77c:	3301      	adds	r3, #1
 800a77e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a782:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a786:	e00f      	b.n	800a7a8 <HAL_I2C_Init+0x1dc>
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	1e58      	subs	r0, r3, #1
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6859      	ldr	r1, [r3, #4]
 800a790:	460b      	mov	r3, r1
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	440b      	add	r3, r1
 800a796:	0099      	lsls	r1, r3, #2
 800a798:	440b      	add	r3, r1
 800a79a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a79e:	3301      	adds	r3, #1
 800a7a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a7a8:	6879      	ldr	r1, [r7, #4]
 800a7aa:	6809      	ldr	r1, [r1, #0]
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	69da      	ldr	r2, [r3, #28]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a1b      	ldr	r3, [r3, #32]
 800a7c2:	431a      	orrs	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	430a      	orrs	r2, r1
 800a7ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a7d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	6911      	ldr	r1, [r2, #16]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	68d2      	ldr	r2, [r2, #12]
 800a7e2:	4311      	orrs	r1, r2
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	6812      	ldr	r2, [r2, #0]
 800a7e8:	430b      	orrs	r3, r1
 800a7ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	695a      	ldr	r2, [r3, #20]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	699b      	ldr	r3, [r3, #24]
 800a7fe:	431a      	orrs	r2, r3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	430a      	orrs	r2, r1
 800a806:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f042 0201 	orr.w	r2, r2, #1
 800a816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2220      	movs	r2, #32
 800a822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	000186a0 	.word	0x000186a0
 800a844:	001e847f 	.word	0x001e847f
 800a848:	003d08ff 	.word	0x003d08ff
 800a84c:	431bde83 	.word	0x431bde83
 800a850:	10624dd3 	.word	0x10624dd3

0800a854 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d101      	bne.n	800a866 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e021      	b.n	800a8aa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2224      	movs	r2, #36	@ 0x24
 800a86a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f022 0201 	bic.w	r2, r2, #1
 800a87c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7fd fb14 	bl	8007eac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3708      	adds	r7, #8
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
	...

0800a8b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b088      	sub	sp, #32
 800a8b8:	af02      	add	r7, sp, #8
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	4608      	mov	r0, r1
 800a8be:	4611      	mov	r1, r2
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	817b      	strh	r3, [r7, #10]
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	813b      	strh	r3, [r7, #8]
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a8ce:	f7fe f9b1 	bl	8008c34 <HAL_GetTick>
 800a8d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	2b20      	cmp	r3, #32
 800a8de:	f040 80d9 	bne.w	800aa94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	9300      	str	r3, [sp, #0]
 800a8e6:	2319      	movs	r3, #25
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	496d      	ldr	r1, [pc, #436]	@ (800aaa0 <HAL_I2C_Mem_Write+0x1ec>)
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f000 fc8b 	bl	800b208 <I2C_WaitOnFlagUntilTimeout>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d001      	beq.n	800a8fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a8f8:	2302      	movs	r3, #2
 800a8fa:	e0cc      	b.n	800aa96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a902:	2b01      	cmp	r3, #1
 800a904:	d101      	bne.n	800a90a <HAL_I2C_Mem_Write+0x56>
 800a906:	2302      	movs	r3, #2
 800a908:	e0c5      	b.n	800aa96 <HAL_I2C_Mem_Write+0x1e2>
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2201      	movs	r2, #1
 800a90e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d007      	beq.n	800a930 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f042 0201 	orr.w	r2, r2, #1
 800a92e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a93e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2221      	movs	r2, #33	@ 0x21
 800a944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2240      	movs	r2, #64	@ 0x40
 800a94c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2200      	movs	r2, #0
 800a954:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6a3a      	ldr	r2, [r7, #32]
 800a95a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a960:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a966:	b29a      	uxth	r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	4a4d      	ldr	r2, [pc, #308]	@ (800aaa4 <HAL_I2C_Mem_Write+0x1f0>)
 800a970:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a972:	88f8      	ldrh	r0, [r7, #6]
 800a974:	893a      	ldrh	r2, [r7, #8]
 800a976:	8979      	ldrh	r1, [r7, #10]
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	9301      	str	r3, [sp, #4]
 800a97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a97e:	9300      	str	r3, [sp, #0]
 800a980:	4603      	mov	r3, r0
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f000 fac2 	bl	800af0c <I2C_RequestMemoryWrite>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d052      	beq.n	800aa34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	e081      	b.n	800aa96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f000 fd50 	bl	800b43c <I2C_WaitOnTXEFlagUntilTimeout>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00d      	beq.n	800a9be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9a6:	2b04      	cmp	r3, #4
 800a9a8:	d107      	bne.n	800a9ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e06b      	b.n	800aa96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c2:	781a      	ldrb	r2, [r3, #0]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ce:	1c5a      	adds	r2, r3, #1
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	3b01      	subs	r3, #1
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	695b      	ldr	r3, [r3, #20]
 800a9f4:	f003 0304 	and.w	r3, r3, #4
 800a9f8:	2b04      	cmp	r3, #4
 800a9fa:	d11b      	bne.n	800aa34 <HAL_I2C_Mem_Write+0x180>
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d017      	beq.n	800aa34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa08:	781a      	ldrb	r2, [r3, #0]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa14:	1c5a      	adds	r2, r3, #1
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa1e:	3b01      	subs	r3, #1
 800aa20:	b29a      	uxth	r2, r3
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	3b01      	subs	r3, #1
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1aa      	bne.n	800a992 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f000 fd43 	bl	800b4cc <I2C_WaitOnBTFFlagUntilTimeout>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00d      	beq.n	800aa68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa50:	2b04      	cmp	r3, #4
 800aa52:	d107      	bne.n	800aa64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aa64:	2301      	movs	r3, #1
 800aa66:	e016      	b.n	800aa96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2220      	movs	r2, #32
 800aa7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800aa90:	2300      	movs	r3, #0
 800aa92:	e000      	b.n	800aa96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800aa94:	2302      	movs	r3, #2
  }
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3718      	adds	r7, #24
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	00100002 	.word	0x00100002
 800aaa4:	ffff0000 	.word	0xffff0000

0800aaa8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b08c      	sub	sp, #48	@ 0x30
 800aaac:	af02      	add	r7, sp, #8
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	4608      	mov	r0, r1
 800aab2:	4611      	mov	r1, r2
 800aab4:	461a      	mov	r2, r3
 800aab6:	4603      	mov	r3, r0
 800aab8:	817b      	strh	r3, [r7, #10]
 800aaba:	460b      	mov	r3, r1
 800aabc:	813b      	strh	r3, [r7, #8]
 800aabe:	4613      	mov	r3, r2
 800aac0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800aac2:	f7fe f8b7 	bl	8008c34 <HAL_GetTick>
 800aac6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	2b20      	cmp	r3, #32
 800aad2:	f040 8214 	bne.w	800aefe <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad8:	9300      	str	r3, [sp, #0]
 800aada:	2319      	movs	r3, #25
 800aadc:	2201      	movs	r2, #1
 800aade:	497b      	ldr	r1, [pc, #492]	@ (800accc <HAL_I2C_Mem_Read+0x224>)
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	f000 fb91 	bl	800b208 <I2C_WaitOnFlagUntilTimeout>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d001      	beq.n	800aaf0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800aaec:	2302      	movs	r3, #2
 800aaee:	e207      	b.n	800af00 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d101      	bne.n	800aafe <HAL_I2C_Mem_Read+0x56>
 800aafa:	2302      	movs	r3, #2
 800aafc:	e200      	b.n	800af00 <HAL_I2C_Mem_Read+0x458>
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2201      	movs	r2, #1
 800ab02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 0301 	and.w	r3, r3, #1
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d007      	beq.n	800ab24 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f042 0201 	orr.w	r2, r2, #1
 800ab22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ab32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2222      	movs	r2, #34	@ 0x22
 800ab38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2240      	movs	r2, #64	@ 0x40
 800ab40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2200      	movs	r2, #0
 800ab48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800ab54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab5a:	b29a      	uxth	r2, r3
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	4a5b      	ldr	r2, [pc, #364]	@ (800acd0 <HAL_I2C_Mem_Read+0x228>)
 800ab64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ab66:	88f8      	ldrh	r0, [r7, #6]
 800ab68:	893a      	ldrh	r2, [r7, #8]
 800ab6a:	8979      	ldrh	r1, [r7, #10]
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6e:	9301      	str	r3, [sp, #4]
 800ab70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab72:	9300      	str	r3, [sp, #0]
 800ab74:	4603      	mov	r3, r0
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f000 fa5e 	bl	800b038 <I2C_RequestMemoryRead>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d001      	beq.n	800ab86 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e1bc      	b.n	800af00 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d113      	bne.n	800abb6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab8e:	2300      	movs	r3, #0
 800ab90:	623b      	str	r3, [r7, #32]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	695b      	ldr	r3, [r3, #20]
 800ab98:	623b      	str	r3, [r7, #32]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	699b      	ldr	r3, [r3, #24]
 800aba0:	623b      	str	r3, [r7, #32]
 800aba2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800abb2:	601a      	str	r2, [r3, #0]
 800abb4:	e190      	b.n	800aed8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d11b      	bne.n	800abf6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800abcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800abce:	2300      	movs	r3, #0
 800abd0:	61fb      	str	r3, [r7, #28]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	695b      	ldr	r3, [r3, #20]
 800abd8:	61fb      	str	r3, [r7, #28]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	699b      	ldr	r3, [r3, #24]
 800abe0:	61fb      	str	r3, [r7, #28]
 800abe2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800abf2:	601a      	str	r2, [r3, #0]
 800abf4:	e170      	b.n	800aed8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d11b      	bne.n	800ac36 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac1e:	2300      	movs	r3, #0
 800ac20:	61bb      	str	r3, [r7, #24]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	695b      	ldr	r3, [r3, #20]
 800ac28:	61bb      	str	r3, [r7, #24]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	699b      	ldr	r3, [r3, #24]
 800ac30:	61bb      	str	r3, [r7, #24]
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	e150      	b.n	800aed8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac36:	2300      	movs	r3, #0
 800ac38:	617b      	str	r3, [r7, #20]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	695b      	ldr	r3, [r3, #20]
 800ac40:	617b      	str	r3, [r7, #20]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	699b      	ldr	r3, [r3, #24]
 800ac48:	617b      	str	r3, [r7, #20]
 800ac4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800ac4c:	e144      	b.n	800aed8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac52:	2b03      	cmp	r3, #3
 800ac54:	f200 80f1 	bhi.w	800ae3a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d123      	bne.n	800aca8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	f000 fc79 	bl	800b55c <I2C_WaitOnRXNEFlagUntilTimeout>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d001      	beq.n	800ac74 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	e145      	b.n	800af00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	691a      	ldr	r2, [r3, #16]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac7e:	b2d2      	uxtb	r2, r2
 800ac80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac86:	1c5a      	adds	r2, r3, #1
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac90:	3b01      	subs	r3, #1
 800ac92:	b29a      	uxth	r2, r3
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aca6:	e117      	b.n	800aed8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acac:	2b02      	cmp	r3, #2
 800acae:	d14e      	bne.n	800ad4e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800acb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb2:	9300      	str	r3, [sp, #0]
 800acb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acb6:	2200      	movs	r2, #0
 800acb8:	4906      	ldr	r1, [pc, #24]	@ (800acd4 <HAL_I2C_Mem_Read+0x22c>)
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f000 faa4 	bl	800b208 <I2C_WaitOnFlagUntilTimeout>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d008      	beq.n	800acd8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e11a      	b.n	800af00 <HAL_I2C_Mem_Read+0x458>
 800acca:	bf00      	nop
 800accc:	00100002 	.word	0x00100002
 800acd0:	ffff0000 	.word	0xffff0000
 800acd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ace6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	691a      	ldr	r2, [r3, #16]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acf2:	b2d2      	uxtb	r2, r2
 800acf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acfa:	1c5a      	adds	r2, r3, #1
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad04:	3b01      	subs	r3, #1
 800ad06:	b29a      	uxth	r2, r3
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	3b01      	subs	r3, #1
 800ad14:	b29a      	uxth	r2, r3
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	691a      	ldr	r2, [r3, #16]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad24:	b2d2      	uxtb	r2, r2
 800ad26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad2c:	1c5a      	adds	r2, r3, #1
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad36:	3b01      	subs	r3, #1
 800ad38:	b29a      	uxth	r2, r3
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	3b01      	subs	r3, #1
 800ad46:	b29a      	uxth	r2, r3
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ad4c:	e0c4      	b.n	800aed8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad54:	2200      	movs	r2, #0
 800ad56:	496c      	ldr	r1, [pc, #432]	@ (800af08 <HAL_I2C_Mem_Read+0x460>)
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f000 fa55 	bl	800b208 <I2C_WaitOnFlagUntilTimeout>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d001      	beq.n	800ad68 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	e0cb      	b.n	800af00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	691a      	ldr	r2, [r3, #16]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad82:	b2d2      	uxtb	r2, r2
 800ad84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad8a:	1c5a      	adds	r2, r3, #1
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad94:	3b01      	subs	r3, #1
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	3b01      	subs	r3, #1
 800ada4:	b29a      	uxth	r2, r3
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800adaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb0:	2200      	movs	r2, #0
 800adb2:	4955      	ldr	r1, [pc, #340]	@ (800af08 <HAL_I2C_Mem_Read+0x460>)
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f000 fa27 	bl	800b208 <I2C_WaitOnFlagUntilTimeout>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d001      	beq.n	800adc4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800adc0:	2301      	movs	r3, #1
 800adc2:	e09d      	b.n	800af00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800add2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	691a      	ldr	r2, [r3, #16]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adde:	b2d2      	uxtb	r2, r2
 800ade0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ade6:	1c5a      	adds	r2, r3, #1
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800adf0:	3b01      	subs	r3, #1
 800adf2:	b29a      	uxth	r2, r3
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	3b01      	subs	r3, #1
 800ae00:	b29a      	uxth	r2, r3
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	691a      	ldr	r2, [r3, #16]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae10:	b2d2      	uxtb	r2, r2
 800ae12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae18:	1c5a      	adds	r2, r3, #1
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae22:	3b01      	subs	r3, #1
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	3b01      	subs	r3, #1
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ae38:	e04e      	b.n	800aed8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae3c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f000 fb8c 	bl	800b55c <I2C_WaitOnRXNEFlagUntilTimeout>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e058      	b.n	800af00 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	691a      	ldr	r2, [r3, #16]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae58:	b2d2      	uxtb	r2, r2
 800ae5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae60:	1c5a      	adds	r2, r3, #1
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	b29a      	uxth	r2, r3
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	3b01      	subs	r3, #1
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	695b      	ldr	r3, [r3, #20]
 800ae86:	f003 0304 	and.w	r3, r3, #4
 800ae8a:	2b04      	cmp	r3, #4
 800ae8c:	d124      	bne.n	800aed8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae92:	2b03      	cmp	r3, #3
 800ae94:	d107      	bne.n	800aea6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aea4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	691a      	ldr	r2, [r3, #16]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeb0:	b2d2      	uxtb	r2, r2
 800aeb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeb8:	1c5a      	adds	r2, r3, #1
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aec2:	3b01      	subs	r3, #1
 800aec4:	b29a      	uxth	r2, r3
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aece:	b29b      	uxth	r3, r3
 800aed0:	3b01      	subs	r3, #1
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f47f aeb6 	bne.w	800ac4e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2220      	movs	r2, #32
 800aee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2200      	movs	r2, #0
 800aeee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800aefa:	2300      	movs	r3, #0
 800aefc:	e000      	b.n	800af00 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800aefe:	2302      	movs	r3, #2
  }
}
 800af00:	4618      	mov	r0, r3
 800af02:	3728      	adds	r7, #40	@ 0x28
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	00010004 	.word	0x00010004

0800af0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b088      	sub	sp, #32
 800af10:	af02      	add	r7, sp, #8
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	4608      	mov	r0, r1
 800af16:	4611      	mov	r1, r2
 800af18:	461a      	mov	r2, r3
 800af1a:	4603      	mov	r3, r0
 800af1c:	817b      	strh	r3, [r7, #10]
 800af1e:	460b      	mov	r3, r1
 800af20:	813b      	strh	r3, [r7, #8]
 800af22:	4613      	mov	r3, r2
 800af24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800af34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800af36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af38:	9300      	str	r3, [sp, #0]
 800af3a:	6a3b      	ldr	r3, [r7, #32]
 800af3c:	2200      	movs	r2, #0
 800af3e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f000 f960 	bl	800b208 <I2C_WaitOnFlagUntilTimeout>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00d      	beq.n	800af6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af5c:	d103      	bne.n	800af66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af64:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800af66:	2303      	movs	r3, #3
 800af68:	e05f      	b.n	800b02a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800af6a:	897b      	ldrh	r3, [r7, #10]
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	461a      	mov	r2, r3
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800af78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800af7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7c:	6a3a      	ldr	r2, [r7, #32]
 800af7e:	492d      	ldr	r1, [pc, #180]	@ (800b034 <I2C_RequestMemoryWrite+0x128>)
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f000 f9bb 	bl	800b2fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d001      	beq.n	800af90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800af8c:	2301      	movs	r3, #1
 800af8e:	e04c      	b.n	800b02a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af90:	2300      	movs	r3, #0
 800af92:	617b      	str	r3, [r7, #20]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	695b      	ldr	r3, [r3, #20]
 800af9a:	617b      	str	r3, [r7, #20]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	699b      	ldr	r3, [r3, #24]
 800afa2:	617b      	str	r3, [r7, #20]
 800afa4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800afa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afa8:	6a39      	ldr	r1, [r7, #32]
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	f000 fa46 	bl	800b43c <I2C_WaitOnTXEFlagUntilTimeout>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d00d      	beq.n	800afd2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afba:	2b04      	cmp	r3, #4
 800afbc:	d107      	bne.n	800afce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e02b      	b.n	800b02a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800afd2:	88fb      	ldrh	r3, [r7, #6]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d105      	bne.n	800afe4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800afd8:	893b      	ldrh	r3, [r7, #8]
 800afda:	b2da      	uxtb	r2, r3
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	611a      	str	r2, [r3, #16]
 800afe2:	e021      	b.n	800b028 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800afe4:	893b      	ldrh	r3, [r7, #8]
 800afe6:	0a1b      	lsrs	r3, r3, #8
 800afe8:	b29b      	uxth	r3, r3
 800afea:	b2da      	uxtb	r2, r3
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aff4:	6a39      	ldr	r1, [r7, #32]
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	f000 fa20 	bl	800b43c <I2C_WaitOnTXEFlagUntilTimeout>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d00d      	beq.n	800b01e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b006:	2b04      	cmp	r3, #4
 800b008:	d107      	bne.n	800b01a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b018:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e005      	b.n	800b02a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b01e:	893b      	ldrh	r3, [r7, #8]
 800b020:	b2da      	uxtb	r2, r3
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3718      	adds	r7, #24
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	00010002 	.word	0x00010002

0800b038 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b088      	sub	sp, #32
 800b03c:	af02      	add	r7, sp, #8
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	4608      	mov	r0, r1
 800b042:	4611      	mov	r1, r2
 800b044:	461a      	mov	r2, r3
 800b046:	4603      	mov	r3, r0
 800b048:	817b      	strh	r3, [r7, #10]
 800b04a:	460b      	mov	r3, r1
 800b04c:	813b      	strh	r3, [r7, #8]
 800b04e:	4613      	mov	r3, r2
 800b050:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b060:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b070:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	6a3b      	ldr	r3, [r7, #32]
 800b078:	2200      	movs	r2, #0
 800b07a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f000 f8c2 	bl	800b208 <I2C_WaitOnFlagUntilTimeout>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00d      	beq.n	800b0a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b094:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b098:	d103      	bne.n	800b0a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b0a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b0a2:	2303      	movs	r3, #3
 800b0a4:	e0aa      	b.n	800b1fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b0a6:	897b      	ldrh	r3, [r7, #10]
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b0b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b8:	6a3a      	ldr	r2, [r7, #32]
 800b0ba:	4952      	ldr	r1, [pc, #328]	@ (800b204 <I2C_RequestMemoryRead+0x1cc>)
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f000 f91d 	bl	800b2fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d001      	beq.n	800b0cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	e097      	b.n	800b1fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	617b      	str	r3, [r7, #20]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	695b      	ldr	r3, [r3, #20]
 800b0d6:	617b      	str	r3, [r7, #20]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	699b      	ldr	r3, [r3, #24]
 800b0de:	617b      	str	r3, [r7, #20]
 800b0e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0e4:	6a39      	ldr	r1, [r7, #32]
 800b0e6:	68f8      	ldr	r0, [r7, #12]
 800b0e8:	f000 f9a8 	bl	800b43c <I2C_WaitOnTXEFlagUntilTimeout>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00d      	beq.n	800b10e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0f6:	2b04      	cmp	r3, #4
 800b0f8:	d107      	bne.n	800b10a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b108:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	e076      	b.n	800b1fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b10e:	88fb      	ldrh	r3, [r7, #6]
 800b110:	2b01      	cmp	r3, #1
 800b112:	d105      	bne.n	800b120 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b114:	893b      	ldrh	r3, [r7, #8]
 800b116:	b2da      	uxtb	r2, r3
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	611a      	str	r2, [r3, #16]
 800b11e:	e021      	b.n	800b164 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b120:	893b      	ldrh	r3, [r7, #8]
 800b122:	0a1b      	lsrs	r3, r3, #8
 800b124:	b29b      	uxth	r3, r3
 800b126:	b2da      	uxtb	r2, r3
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b12e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b130:	6a39      	ldr	r1, [r7, #32]
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f000 f982 	bl	800b43c <I2C_WaitOnTXEFlagUntilTimeout>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00d      	beq.n	800b15a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b142:	2b04      	cmp	r3, #4
 800b144:	d107      	bne.n	800b156 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b154:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b156:	2301      	movs	r3, #1
 800b158:	e050      	b.n	800b1fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b15a:	893b      	ldrh	r3, [r7, #8]
 800b15c:	b2da      	uxtb	r2, r3
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b166:	6a39      	ldr	r1, [r7, #32]
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f000 f967 	bl	800b43c <I2C_WaitOnTXEFlagUntilTimeout>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d00d      	beq.n	800b190 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b178:	2b04      	cmp	r3, #4
 800b17a:	d107      	bne.n	800b18c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b18a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b18c:	2301      	movs	r3, #1
 800b18e:	e035      	b.n	800b1fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b19e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a2:	9300      	str	r3, [sp, #0]
 800b1a4:	6a3b      	ldr	r3, [r7, #32]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f000 f82b 	bl	800b208 <I2C_WaitOnFlagUntilTimeout>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d00d      	beq.n	800b1d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1c6:	d103      	bne.n	800b1d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b1ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b1d0:	2303      	movs	r3, #3
 800b1d2:	e013      	b.n	800b1fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b1d4:	897b      	ldrh	r3, [r7, #10]
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	f043 0301 	orr.w	r3, r3, #1
 800b1dc:	b2da      	uxtb	r2, r3
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e6:	6a3a      	ldr	r2, [r7, #32]
 800b1e8:	4906      	ldr	r1, [pc, #24]	@ (800b204 <I2C_RequestMemoryRead+0x1cc>)
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	f000 f886 	bl	800b2fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d001      	beq.n	800b1fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e000      	b.n	800b1fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b1fa:	2300      	movs	r3, #0
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3718      	adds	r7, #24
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	00010002 	.word	0x00010002

0800b208 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	603b      	str	r3, [r7, #0]
 800b214:	4613      	mov	r3, r2
 800b216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b218:	e048      	b.n	800b2ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b220:	d044      	beq.n	800b2ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b222:	f7fd fd07 	bl	8008c34 <HAL_GetTick>
 800b226:	4602      	mov	r2, r0
 800b228:	69bb      	ldr	r3, [r7, #24]
 800b22a:	1ad3      	subs	r3, r2, r3
 800b22c:	683a      	ldr	r2, [r7, #0]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d302      	bcc.n	800b238 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d139      	bne.n	800b2ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	0c1b      	lsrs	r3, r3, #16
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d10d      	bne.n	800b25e <I2C_WaitOnFlagUntilTimeout+0x56>
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	695b      	ldr	r3, [r3, #20]
 800b248:	43da      	mvns	r2, r3
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	4013      	ands	r3, r2
 800b24e:	b29b      	uxth	r3, r3
 800b250:	2b00      	cmp	r3, #0
 800b252:	bf0c      	ite	eq
 800b254:	2301      	moveq	r3, #1
 800b256:	2300      	movne	r3, #0
 800b258:	b2db      	uxtb	r3, r3
 800b25a:	461a      	mov	r2, r3
 800b25c:	e00c      	b.n	800b278 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	699b      	ldr	r3, [r3, #24]
 800b264:	43da      	mvns	r2, r3
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	4013      	ands	r3, r2
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	bf0c      	ite	eq
 800b270:	2301      	moveq	r3, #1
 800b272:	2300      	movne	r3, #0
 800b274:	b2db      	uxtb	r3, r3
 800b276:	461a      	mov	r2, r3
 800b278:	79fb      	ldrb	r3, [r7, #7]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d116      	bne.n	800b2ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2200      	movs	r2, #0
 800b282:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2220      	movs	r2, #32
 800b288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2200      	movs	r2, #0
 800b290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b298:	f043 0220 	orr.w	r2, r3, #32
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	e023      	b.n	800b2f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	0c1b      	lsrs	r3, r3, #16
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d10d      	bne.n	800b2d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	695b      	ldr	r3, [r3, #20]
 800b2bc:	43da      	mvns	r2, r3
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	bf0c      	ite	eq
 800b2c8:	2301      	moveq	r3, #1
 800b2ca:	2300      	movne	r3, #0
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	e00c      	b.n	800b2ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	699b      	ldr	r3, [r3, #24]
 800b2d8:	43da      	mvns	r2, r3
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	4013      	ands	r3, r2
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	bf0c      	ite	eq
 800b2e4:	2301      	moveq	r3, #1
 800b2e6:	2300      	movne	r3, #0
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	79fb      	ldrb	r3, [r7, #7]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d093      	beq.n	800b21a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3710      	adds	r7, #16
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	607a      	str	r2, [r7, #4]
 800b308:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b30a:	e071      	b.n	800b3f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	695b      	ldr	r3, [r3, #20]
 800b312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b31a:	d123      	bne.n	800b364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b32a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b334:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2200      	movs	r2, #0
 800b33a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2220      	movs	r2, #32
 800b340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2200      	movs	r2, #0
 800b348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b350:	f043 0204 	orr.w	r2, r3, #4
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	e067      	b.n	800b434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b36a:	d041      	beq.n	800b3f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b36c:	f7fd fc62 	bl	8008c34 <HAL_GetTick>
 800b370:	4602      	mov	r2, r0
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	1ad3      	subs	r3, r2, r3
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d302      	bcc.n	800b382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d136      	bne.n	800b3f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	0c1b      	lsrs	r3, r3, #16
 800b386:	b2db      	uxtb	r3, r3
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d10c      	bne.n	800b3a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	695b      	ldr	r3, [r3, #20]
 800b392:	43da      	mvns	r2, r3
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	4013      	ands	r3, r2
 800b398:	b29b      	uxth	r3, r3
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	bf14      	ite	ne
 800b39e:	2301      	movne	r3, #1
 800b3a0:	2300      	moveq	r3, #0
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	e00b      	b.n	800b3be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	43da      	mvns	r2, r3
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	4013      	ands	r3, r2
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	bf14      	ite	ne
 800b3b8:	2301      	movne	r3, #1
 800b3ba:	2300      	moveq	r3, #0
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d016      	beq.n	800b3f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2220      	movs	r2, #32
 800b3cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3dc:	f043 0220 	orr.w	r2, r3, #32
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e021      	b.n	800b434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	0c1b      	lsrs	r3, r3, #16
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d10c      	bne.n	800b414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	695b      	ldr	r3, [r3, #20]
 800b400:	43da      	mvns	r2, r3
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	4013      	ands	r3, r2
 800b406:	b29b      	uxth	r3, r3
 800b408:	2b00      	cmp	r3, #0
 800b40a:	bf14      	ite	ne
 800b40c:	2301      	movne	r3, #1
 800b40e:	2300      	moveq	r3, #0
 800b410:	b2db      	uxtb	r3, r3
 800b412:	e00b      	b.n	800b42c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	699b      	ldr	r3, [r3, #24]
 800b41a:	43da      	mvns	r2, r3
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	4013      	ands	r3, r2
 800b420:	b29b      	uxth	r3, r3
 800b422:	2b00      	cmp	r3, #0
 800b424:	bf14      	ite	ne
 800b426:	2301      	movne	r3, #1
 800b428:	2300      	moveq	r3, #0
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f47f af6d 	bne.w	800b30c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3710      	adds	r7, #16
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b448:	e034      	b.n	800b4b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b44a:	68f8      	ldr	r0, [r7, #12]
 800b44c:	f000 f8e3 	bl	800b616 <I2C_IsAcknowledgeFailed>
 800b450:	4603      	mov	r3, r0
 800b452:	2b00      	cmp	r3, #0
 800b454:	d001      	beq.n	800b45a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b456:	2301      	movs	r3, #1
 800b458:	e034      	b.n	800b4c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b460:	d028      	beq.n	800b4b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b462:	f7fd fbe7 	bl	8008c34 <HAL_GetTick>
 800b466:	4602      	mov	r2, r0
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	1ad3      	subs	r3, r2, r3
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d302      	bcc.n	800b478 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d11d      	bne.n	800b4b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	695b      	ldr	r3, [r3, #20]
 800b47e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b482:	2b80      	cmp	r3, #128	@ 0x80
 800b484:	d016      	beq.n	800b4b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2200      	movs	r2, #0
 800b48a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2220      	movs	r2, #32
 800b490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4a0:	f043 0220 	orr.w	r2, r3, #32
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e007      	b.n	800b4c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	695b      	ldr	r3, [r3, #20]
 800b4ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4be:	2b80      	cmp	r3, #128	@ 0x80
 800b4c0:	d1c3      	bne.n	800b44a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b4c2:	2300      	movs	r3, #0
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3710      	adds	r7, #16
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b4d8:	e034      	b.n	800b544 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f000 f89b 	bl	800b616 <I2C_IsAcknowledgeFailed>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d001      	beq.n	800b4ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e034      	b.n	800b554 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4f0:	d028      	beq.n	800b544 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4f2:	f7fd fb9f 	bl	8008c34 <HAL_GetTick>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	1ad3      	subs	r3, r2, r3
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d302      	bcc.n	800b508 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d11d      	bne.n	800b544 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	695b      	ldr	r3, [r3, #20]
 800b50e:	f003 0304 	and.w	r3, r3, #4
 800b512:	2b04      	cmp	r3, #4
 800b514:	d016      	beq.n	800b544 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2200      	movs	r2, #0
 800b51a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2220      	movs	r2, #32
 800b520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2200      	movs	r2, #0
 800b528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b530:	f043 0220 	orr.w	r2, r3, #32
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	e007      	b.n	800b554 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	695b      	ldr	r3, [r3, #20]
 800b54a:	f003 0304 	and.w	r3, r3, #4
 800b54e:	2b04      	cmp	r3, #4
 800b550:	d1c3      	bne.n	800b4da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b552:	2300      	movs	r3, #0
}
 800b554:	4618      	mov	r0, r3
 800b556:	3710      	adds	r7, #16
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b568:	e049      	b.n	800b5fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	695b      	ldr	r3, [r3, #20]
 800b570:	f003 0310 	and.w	r3, r3, #16
 800b574:	2b10      	cmp	r3, #16
 800b576:	d119      	bne.n	800b5ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f06f 0210 	mvn.w	r2, #16
 800b580:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2200      	movs	r2, #0
 800b586:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2220      	movs	r2, #32
 800b58c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2200      	movs	r2, #0
 800b594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	e030      	b.n	800b60e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5ac:	f7fd fb42 	bl	8008c34 <HAL_GetTick>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	1ad3      	subs	r3, r2, r3
 800b5b6:	68ba      	ldr	r2, [r7, #8]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d302      	bcc.n	800b5c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d11d      	bne.n	800b5fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	695b      	ldr	r3, [r3, #20]
 800b5c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5cc:	2b40      	cmp	r3, #64	@ 0x40
 800b5ce:	d016      	beq.n	800b5fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2220      	movs	r2, #32
 800b5da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5ea:	f043 0220 	orr.w	r2, r3, #32
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e007      	b.n	800b60e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	695b      	ldr	r3, [r3, #20]
 800b604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b608:	2b40      	cmp	r3, #64	@ 0x40
 800b60a:	d1ae      	bne.n	800b56a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3710      	adds	r7, #16
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b616:	b480      	push	{r7}
 800b618:	b083      	sub	sp, #12
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	695b      	ldr	r3, [r3, #20]
 800b624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b628:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b62c:	d11b      	bne.n	800b666 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b636:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2220      	movs	r2, #32
 800b642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2200      	movs	r2, #0
 800b64a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b652:	f043 0204 	orr.w	r2, r3, #4
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b662:	2301      	movs	r3, #1
 800b664:	e000      	b.n	800b668 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b666:	2300      	movs	r3, #0
}
 800b668:	4618      	mov	r0, r3
 800b66a:	370c      	adds	r7, #12
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d101      	bne.n	800b688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b684:	2301      	movs	r3, #1
 800b686:	e0cc      	b.n	800b822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b688:	4b68      	ldr	r3, [pc, #416]	@ (800b82c <HAL_RCC_ClockConfig+0x1b8>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f003 030f 	and.w	r3, r3, #15
 800b690:	683a      	ldr	r2, [r7, #0]
 800b692:	429a      	cmp	r2, r3
 800b694:	d90c      	bls.n	800b6b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b696:	4b65      	ldr	r3, [pc, #404]	@ (800b82c <HAL_RCC_ClockConfig+0x1b8>)
 800b698:	683a      	ldr	r2, [r7, #0]
 800b69a:	b2d2      	uxtb	r2, r2
 800b69c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b69e:	4b63      	ldr	r3, [pc, #396]	@ (800b82c <HAL_RCC_ClockConfig+0x1b8>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f003 030f 	and.w	r3, r3, #15
 800b6a6:	683a      	ldr	r2, [r7, #0]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d001      	beq.n	800b6b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e0b8      	b.n	800b822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f003 0302 	and.w	r3, r3, #2
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d020      	beq.n	800b6fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f003 0304 	and.w	r3, r3, #4
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d005      	beq.n	800b6d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b6c8:	4b59      	ldr	r3, [pc, #356]	@ (800b830 <HAL_RCC_ClockConfig+0x1bc>)
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	4a58      	ldr	r2, [pc, #352]	@ (800b830 <HAL_RCC_ClockConfig+0x1bc>)
 800b6ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b6d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f003 0308 	and.w	r3, r3, #8
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d005      	beq.n	800b6ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b6e0:	4b53      	ldr	r3, [pc, #332]	@ (800b830 <HAL_RCC_ClockConfig+0x1bc>)
 800b6e2:	689b      	ldr	r3, [r3, #8]
 800b6e4:	4a52      	ldr	r2, [pc, #328]	@ (800b830 <HAL_RCC_ClockConfig+0x1bc>)
 800b6e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b6ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b6ec:	4b50      	ldr	r3, [pc, #320]	@ (800b830 <HAL_RCC_ClockConfig+0x1bc>)
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	494d      	ldr	r1, [pc, #308]	@ (800b830 <HAL_RCC_ClockConfig+0x1bc>)
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f003 0301 	and.w	r3, r3, #1
 800b706:	2b00      	cmp	r3, #0
 800b708:	d044      	beq.n	800b794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d107      	bne.n	800b722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b712:	4b47      	ldr	r3, [pc, #284]	@ (800b830 <HAL_RCC_ClockConfig+0x1bc>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d119      	bne.n	800b752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b71e:	2301      	movs	r3, #1
 800b720:	e07f      	b.n	800b822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	2b02      	cmp	r3, #2
 800b728:	d003      	beq.n	800b732 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b72e:	2b03      	cmp	r3, #3
 800b730:	d107      	bne.n	800b742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b732:	4b3f      	ldr	r3, [pc, #252]	@ (800b830 <HAL_RCC_ClockConfig+0x1bc>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d109      	bne.n	800b752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b73e:	2301      	movs	r3, #1
 800b740:	e06f      	b.n	800b822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b742:	4b3b      	ldr	r3, [pc, #236]	@ (800b830 <HAL_RCC_ClockConfig+0x1bc>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f003 0302 	and.w	r3, r3, #2
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d101      	bne.n	800b752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b74e:	2301      	movs	r3, #1
 800b750:	e067      	b.n	800b822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b752:	4b37      	ldr	r3, [pc, #220]	@ (800b830 <HAL_RCC_ClockConfig+0x1bc>)
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	f023 0203 	bic.w	r2, r3, #3
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	4934      	ldr	r1, [pc, #208]	@ (800b830 <HAL_RCC_ClockConfig+0x1bc>)
 800b760:	4313      	orrs	r3, r2
 800b762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b764:	f7fd fa66 	bl	8008c34 <HAL_GetTick>
 800b768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b76a:	e00a      	b.n	800b782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b76c:	f7fd fa62 	bl	8008c34 <HAL_GetTick>
 800b770:	4602      	mov	r2, r0
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d901      	bls.n	800b782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b77e:	2303      	movs	r3, #3
 800b780:	e04f      	b.n	800b822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b782:	4b2b      	ldr	r3, [pc, #172]	@ (800b830 <HAL_RCC_ClockConfig+0x1bc>)
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	f003 020c 	and.w	r2, r3, #12
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	429a      	cmp	r2, r3
 800b792:	d1eb      	bne.n	800b76c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b794:	4b25      	ldr	r3, [pc, #148]	@ (800b82c <HAL_RCC_ClockConfig+0x1b8>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f003 030f 	and.w	r3, r3, #15
 800b79c:	683a      	ldr	r2, [r7, #0]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d20c      	bcs.n	800b7bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7a2:	4b22      	ldr	r3, [pc, #136]	@ (800b82c <HAL_RCC_ClockConfig+0x1b8>)
 800b7a4:	683a      	ldr	r2, [r7, #0]
 800b7a6:	b2d2      	uxtb	r2, r2
 800b7a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7aa:	4b20      	ldr	r3, [pc, #128]	@ (800b82c <HAL_RCC_ClockConfig+0x1b8>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f003 030f 	and.w	r3, r3, #15
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d001      	beq.n	800b7bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e032      	b.n	800b822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f003 0304 	and.w	r3, r3, #4
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d008      	beq.n	800b7da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b7c8:	4b19      	ldr	r3, [pc, #100]	@ (800b830 <HAL_RCC_ClockConfig+0x1bc>)
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	4916      	ldr	r1, [pc, #88]	@ (800b830 <HAL_RCC_ClockConfig+0x1bc>)
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f003 0308 	and.w	r3, r3, #8
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d009      	beq.n	800b7fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b7e6:	4b12      	ldr	r3, [pc, #72]	@ (800b830 <HAL_RCC_ClockConfig+0x1bc>)
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	00db      	lsls	r3, r3, #3
 800b7f4:	490e      	ldr	r1, [pc, #56]	@ (800b830 <HAL_RCC_ClockConfig+0x1bc>)
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b7fa:	f000 f855 	bl	800b8a8 <HAL_RCC_GetSysClockFreq>
 800b7fe:	4602      	mov	r2, r0
 800b800:	4b0b      	ldr	r3, [pc, #44]	@ (800b830 <HAL_RCC_ClockConfig+0x1bc>)
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	091b      	lsrs	r3, r3, #4
 800b806:	f003 030f 	and.w	r3, r3, #15
 800b80a:	490a      	ldr	r1, [pc, #40]	@ (800b834 <HAL_RCC_ClockConfig+0x1c0>)
 800b80c:	5ccb      	ldrb	r3, [r1, r3]
 800b80e:	fa22 f303 	lsr.w	r3, r2, r3
 800b812:	4a09      	ldr	r2, [pc, #36]	@ (800b838 <HAL_RCC_ClockConfig+0x1c4>)
 800b814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800b816:	4b09      	ldr	r3, [pc, #36]	@ (800b83c <HAL_RCC_ClockConfig+0x1c8>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7fd f9c6 	bl	8008bac <HAL_InitTick>

  return HAL_OK;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	40023c00 	.word	0x40023c00
 800b830:	40023800 	.word	0x40023800
 800b834:	08015a7c 	.word	0x08015a7c
 800b838:	20000040 	.word	0x20000040
 800b83c:	20000044 	.word	0x20000044

0800b840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b840:	b480      	push	{r7}
 800b842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b844:	4b03      	ldr	r3, [pc, #12]	@ (800b854 <HAL_RCC_GetHCLKFreq+0x14>)
 800b846:	681b      	ldr	r3, [r3, #0]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop
 800b854:	20000040 	.word	0x20000040

0800b858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b85c:	f7ff fff0 	bl	800b840 <HAL_RCC_GetHCLKFreq>
 800b860:	4602      	mov	r2, r0
 800b862:	4b05      	ldr	r3, [pc, #20]	@ (800b878 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b864:	689b      	ldr	r3, [r3, #8]
 800b866:	0a9b      	lsrs	r3, r3, #10
 800b868:	f003 0307 	and.w	r3, r3, #7
 800b86c:	4903      	ldr	r1, [pc, #12]	@ (800b87c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b86e:	5ccb      	ldrb	r3, [r1, r3]
 800b870:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b874:	4618      	mov	r0, r3
 800b876:	bd80      	pop	{r7, pc}
 800b878:	40023800 	.word	0x40023800
 800b87c:	08015a8c 	.word	0x08015a8c

0800b880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b884:	f7ff ffdc 	bl	800b840 <HAL_RCC_GetHCLKFreq>
 800b888:	4602      	mov	r2, r0
 800b88a:	4b05      	ldr	r3, [pc, #20]	@ (800b8a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	0b5b      	lsrs	r3, r3, #13
 800b890:	f003 0307 	and.w	r3, r3, #7
 800b894:	4903      	ldr	r1, [pc, #12]	@ (800b8a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b896:	5ccb      	ldrb	r3, [r1, r3]
 800b898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	40023800 	.word	0x40023800
 800b8a4:	08015a8c 	.word	0x08015a8c

0800b8a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b8a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b8ac:	b0ae      	sub	sp, #184	@ 0xb8
 800b8ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b8ce:	4bcb      	ldr	r3, [pc, #812]	@ (800bbfc <HAL_RCC_GetSysClockFreq+0x354>)
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	f003 030c 	and.w	r3, r3, #12
 800b8d6:	2b0c      	cmp	r3, #12
 800b8d8:	f200 8206 	bhi.w	800bce8 <HAL_RCC_GetSysClockFreq+0x440>
 800b8dc:	a201      	add	r2, pc, #4	@ (adr r2, 800b8e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800b8de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e2:	bf00      	nop
 800b8e4:	0800b919 	.word	0x0800b919
 800b8e8:	0800bce9 	.word	0x0800bce9
 800b8ec:	0800bce9 	.word	0x0800bce9
 800b8f0:	0800bce9 	.word	0x0800bce9
 800b8f4:	0800b921 	.word	0x0800b921
 800b8f8:	0800bce9 	.word	0x0800bce9
 800b8fc:	0800bce9 	.word	0x0800bce9
 800b900:	0800bce9 	.word	0x0800bce9
 800b904:	0800b929 	.word	0x0800b929
 800b908:	0800bce9 	.word	0x0800bce9
 800b90c:	0800bce9 	.word	0x0800bce9
 800b910:	0800bce9 	.word	0x0800bce9
 800b914:	0800bb19 	.word	0x0800bb19
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b918:	4bb9      	ldr	r3, [pc, #740]	@ (800bc00 <HAL_RCC_GetSysClockFreq+0x358>)
 800b91a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800b91e:	e1e7      	b.n	800bcf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b920:	4bb8      	ldr	r3, [pc, #736]	@ (800bc04 <HAL_RCC_GetSysClockFreq+0x35c>)
 800b922:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800b926:	e1e3      	b.n	800bcf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b928:	4bb4      	ldr	r3, [pc, #720]	@ (800bbfc <HAL_RCC_GetSysClockFreq+0x354>)
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b930:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b934:	4bb1      	ldr	r3, [pc, #708]	@ (800bbfc <HAL_RCC_GetSysClockFreq+0x354>)
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d071      	beq.n	800ba24 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b940:	4bae      	ldr	r3, [pc, #696]	@ (800bbfc <HAL_RCC_GetSysClockFreq+0x354>)
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	099b      	lsrs	r3, r3, #6
 800b946:	2200      	movs	r2, #0
 800b948:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b94c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800b950:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b958:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b95c:	2300      	movs	r3, #0
 800b95e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b962:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b966:	4622      	mov	r2, r4
 800b968:	462b      	mov	r3, r5
 800b96a:	f04f 0000 	mov.w	r0, #0
 800b96e:	f04f 0100 	mov.w	r1, #0
 800b972:	0159      	lsls	r1, r3, #5
 800b974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b978:	0150      	lsls	r0, r2, #5
 800b97a:	4602      	mov	r2, r0
 800b97c:	460b      	mov	r3, r1
 800b97e:	4621      	mov	r1, r4
 800b980:	1a51      	subs	r1, r2, r1
 800b982:	6439      	str	r1, [r7, #64]	@ 0x40
 800b984:	4629      	mov	r1, r5
 800b986:	eb63 0301 	sbc.w	r3, r3, r1
 800b98a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b98c:	f04f 0200 	mov.w	r2, #0
 800b990:	f04f 0300 	mov.w	r3, #0
 800b994:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800b998:	4649      	mov	r1, r9
 800b99a:	018b      	lsls	r3, r1, #6
 800b99c:	4641      	mov	r1, r8
 800b99e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b9a2:	4641      	mov	r1, r8
 800b9a4:	018a      	lsls	r2, r1, #6
 800b9a6:	4641      	mov	r1, r8
 800b9a8:	1a51      	subs	r1, r2, r1
 800b9aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b9ac:	4649      	mov	r1, r9
 800b9ae:	eb63 0301 	sbc.w	r3, r3, r1
 800b9b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9b4:	f04f 0200 	mov.w	r2, #0
 800b9b8:	f04f 0300 	mov.w	r3, #0
 800b9bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800b9c0:	4649      	mov	r1, r9
 800b9c2:	00cb      	lsls	r3, r1, #3
 800b9c4:	4641      	mov	r1, r8
 800b9c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b9ca:	4641      	mov	r1, r8
 800b9cc:	00ca      	lsls	r2, r1, #3
 800b9ce:	4610      	mov	r0, r2
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	4622      	mov	r2, r4
 800b9d6:	189b      	adds	r3, r3, r2
 800b9d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9da:	462b      	mov	r3, r5
 800b9dc:	460a      	mov	r2, r1
 800b9de:	eb42 0303 	adc.w	r3, r2, r3
 800b9e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9e4:	f04f 0200 	mov.w	r2, #0
 800b9e8:	f04f 0300 	mov.w	r3, #0
 800b9ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b9f0:	4629      	mov	r1, r5
 800b9f2:	024b      	lsls	r3, r1, #9
 800b9f4:	4621      	mov	r1, r4
 800b9f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b9fa:	4621      	mov	r1, r4
 800b9fc:	024a      	lsls	r2, r1, #9
 800b9fe:	4610      	mov	r0, r2
 800ba00:	4619      	mov	r1, r3
 800ba02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba06:	2200      	movs	r2, #0
 800ba08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ba0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ba10:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800ba14:	f7f5 fab6 	bl	8000f84 <__aeabi_uldivmod>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ba22:	e067      	b.n	800baf4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ba24:	4b75      	ldr	r3, [pc, #468]	@ (800bbfc <HAL_RCC_GetSysClockFreq+0x354>)
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	099b      	lsrs	r3, r3, #6
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ba30:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800ba34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ba38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ba3e:	2300      	movs	r3, #0
 800ba40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ba42:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800ba46:	4622      	mov	r2, r4
 800ba48:	462b      	mov	r3, r5
 800ba4a:	f04f 0000 	mov.w	r0, #0
 800ba4e:	f04f 0100 	mov.w	r1, #0
 800ba52:	0159      	lsls	r1, r3, #5
 800ba54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ba58:	0150      	lsls	r0, r2, #5
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	4621      	mov	r1, r4
 800ba60:	1a51      	subs	r1, r2, r1
 800ba62:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ba64:	4629      	mov	r1, r5
 800ba66:	eb63 0301 	sbc.w	r3, r3, r1
 800ba6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba6c:	f04f 0200 	mov.w	r2, #0
 800ba70:	f04f 0300 	mov.w	r3, #0
 800ba74:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800ba78:	4649      	mov	r1, r9
 800ba7a:	018b      	lsls	r3, r1, #6
 800ba7c:	4641      	mov	r1, r8
 800ba7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ba82:	4641      	mov	r1, r8
 800ba84:	018a      	lsls	r2, r1, #6
 800ba86:	4641      	mov	r1, r8
 800ba88:	ebb2 0a01 	subs.w	sl, r2, r1
 800ba8c:	4649      	mov	r1, r9
 800ba8e:	eb63 0b01 	sbc.w	fp, r3, r1
 800ba92:	f04f 0200 	mov.w	r2, #0
 800ba96:	f04f 0300 	mov.w	r3, #0
 800ba9a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ba9e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800baa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800baa6:	4692      	mov	sl, r2
 800baa8:	469b      	mov	fp, r3
 800baaa:	4623      	mov	r3, r4
 800baac:	eb1a 0303 	adds.w	r3, sl, r3
 800bab0:	623b      	str	r3, [r7, #32]
 800bab2:	462b      	mov	r3, r5
 800bab4:	eb4b 0303 	adc.w	r3, fp, r3
 800bab8:	627b      	str	r3, [r7, #36]	@ 0x24
 800baba:	f04f 0200 	mov.w	r2, #0
 800babe:	f04f 0300 	mov.w	r3, #0
 800bac2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800bac6:	4629      	mov	r1, r5
 800bac8:	028b      	lsls	r3, r1, #10
 800baca:	4621      	mov	r1, r4
 800bacc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bad0:	4621      	mov	r1, r4
 800bad2:	028a      	lsls	r2, r1, #10
 800bad4:	4610      	mov	r0, r2
 800bad6:	4619      	mov	r1, r3
 800bad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800badc:	2200      	movs	r2, #0
 800bade:	673b      	str	r3, [r7, #112]	@ 0x70
 800bae0:	677a      	str	r2, [r7, #116]	@ 0x74
 800bae2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800bae6:	f7f5 fa4d 	bl	8000f84 <__aeabi_uldivmod>
 800baea:	4602      	mov	r2, r0
 800baec:	460b      	mov	r3, r1
 800baee:	4613      	mov	r3, r2
 800baf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800baf4:	4b41      	ldr	r3, [pc, #260]	@ (800bbfc <HAL_RCC_GetSysClockFreq+0x354>)
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	0c1b      	lsrs	r3, r3, #16
 800bafa:	f003 0303 	and.w	r3, r3, #3
 800bafe:	3301      	adds	r3, #1
 800bb00:	005b      	lsls	r3, r3, #1
 800bb02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800bb06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bb0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bb0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800bb16:	e0eb      	b.n	800bcf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bb18:	4b38      	ldr	r3, [pc, #224]	@ (800bbfc <HAL_RCC_GetSysClockFreq+0x354>)
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bb20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bb24:	4b35      	ldr	r3, [pc, #212]	@ (800bbfc <HAL_RCC_GetSysClockFreq+0x354>)
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d06b      	beq.n	800bc08 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bb30:	4b32      	ldr	r3, [pc, #200]	@ (800bbfc <HAL_RCC_GetSysClockFreq+0x354>)
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	099b      	lsrs	r3, r3, #6
 800bb36:	2200      	movs	r2, #0
 800bb38:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bb3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bb3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb42:	663b      	str	r3, [r7, #96]	@ 0x60
 800bb44:	2300      	movs	r3, #0
 800bb46:	667b      	str	r3, [r7, #100]	@ 0x64
 800bb48:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800bb4c:	4622      	mov	r2, r4
 800bb4e:	462b      	mov	r3, r5
 800bb50:	f04f 0000 	mov.w	r0, #0
 800bb54:	f04f 0100 	mov.w	r1, #0
 800bb58:	0159      	lsls	r1, r3, #5
 800bb5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bb5e:	0150      	lsls	r0, r2, #5
 800bb60:	4602      	mov	r2, r0
 800bb62:	460b      	mov	r3, r1
 800bb64:	4621      	mov	r1, r4
 800bb66:	1a51      	subs	r1, r2, r1
 800bb68:	61b9      	str	r1, [r7, #24]
 800bb6a:	4629      	mov	r1, r5
 800bb6c:	eb63 0301 	sbc.w	r3, r3, r1
 800bb70:	61fb      	str	r3, [r7, #28]
 800bb72:	f04f 0200 	mov.w	r2, #0
 800bb76:	f04f 0300 	mov.w	r3, #0
 800bb7a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800bb7e:	4659      	mov	r1, fp
 800bb80:	018b      	lsls	r3, r1, #6
 800bb82:	4651      	mov	r1, sl
 800bb84:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800bb88:	4651      	mov	r1, sl
 800bb8a:	018a      	lsls	r2, r1, #6
 800bb8c:	4651      	mov	r1, sl
 800bb8e:	ebb2 0801 	subs.w	r8, r2, r1
 800bb92:	4659      	mov	r1, fp
 800bb94:	eb63 0901 	sbc.w	r9, r3, r1
 800bb98:	f04f 0200 	mov.w	r2, #0
 800bb9c:	f04f 0300 	mov.w	r3, #0
 800bba0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bba4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bba8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bbac:	4690      	mov	r8, r2
 800bbae:	4699      	mov	r9, r3
 800bbb0:	4623      	mov	r3, r4
 800bbb2:	eb18 0303 	adds.w	r3, r8, r3
 800bbb6:	613b      	str	r3, [r7, #16]
 800bbb8:	462b      	mov	r3, r5
 800bbba:	eb49 0303 	adc.w	r3, r9, r3
 800bbbe:	617b      	str	r3, [r7, #20]
 800bbc0:	f04f 0200 	mov.w	r2, #0
 800bbc4:	f04f 0300 	mov.w	r3, #0
 800bbc8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800bbcc:	4629      	mov	r1, r5
 800bbce:	024b      	lsls	r3, r1, #9
 800bbd0:	4621      	mov	r1, r4
 800bbd2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	024a      	lsls	r2, r1, #9
 800bbda:	4610      	mov	r0, r2
 800bbdc:	4619      	mov	r1, r3
 800bbde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bbe6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800bbe8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800bbec:	f7f5 f9ca 	bl	8000f84 <__aeabi_uldivmod>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bbfa:	e065      	b.n	800bcc8 <HAL_RCC_GetSysClockFreq+0x420>
 800bbfc:	40023800 	.word	0x40023800
 800bc00:	00f42400 	.word	0x00f42400
 800bc04:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bc08:	4b3d      	ldr	r3, [pc, #244]	@ (800bd00 <HAL_RCC_GetSysClockFreq+0x458>)
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	099b      	lsrs	r3, r3, #6
 800bc0e:	2200      	movs	r2, #0
 800bc10:	4618      	mov	r0, r3
 800bc12:	4611      	mov	r1, r2
 800bc14:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800bc18:	653b      	str	r3, [r7, #80]	@ 0x50
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	657b      	str	r3, [r7, #84]	@ 0x54
 800bc1e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800bc22:	4642      	mov	r2, r8
 800bc24:	464b      	mov	r3, r9
 800bc26:	f04f 0000 	mov.w	r0, #0
 800bc2a:	f04f 0100 	mov.w	r1, #0
 800bc2e:	0159      	lsls	r1, r3, #5
 800bc30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bc34:	0150      	lsls	r0, r2, #5
 800bc36:	4602      	mov	r2, r0
 800bc38:	460b      	mov	r3, r1
 800bc3a:	4641      	mov	r1, r8
 800bc3c:	1a51      	subs	r1, r2, r1
 800bc3e:	60b9      	str	r1, [r7, #8]
 800bc40:	4649      	mov	r1, r9
 800bc42:	eb63 0301 	sbc.w	r3, r3, r1
 800bc46:	60fb      	str	r3, [r7, #12]
 800bc48:	f04f 0200 	mov.w	r2, #0
 800bc4c:	f04f 0300 	mov.w	r3, #0
 800bc50:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800bc54:	4659      	mov	r1, fp
 800bc56:	018b      	lsls	r3, r1, #6
 800bc58:	4651      	mov	r1, sl
 800bc5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800bc5e:	4651      	mov	r1, sl
 800bc60:	018a      	lsls	r2, r1, #6
 800bc62:	4651      	mov	r1, sl
 800bc64:	1a54      	subs	r4, r2, r1
 800bc66:	4659      	mov	r1, fp
 800bc68:	eb63 0501 	sbc.w	r5, r3, r1
 800bc6c:	f04f 0200 	mov.w	r2, #0
 800bc70:	f04f 0300 	mov.w	r3, #0
 800bc74:	00eb      	lsls	r3, r5, #3
 800bc76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bc7a:	00e2      	lsls	r2, r4, #3
 800bc7c:	4614      	mov	r4, r2
 800bc7e:	461d      	mov	r5, r3
 800bc80:	4643      	mov	r3, r8
 800bc82:	18e3      	adds	r3, r4, r3
 800bc84:	603b      	str	r3, [r7, #0]
 800bc86:	464b      	mov	r3, r9
 800bc88:	eb45 0303 	adc.w	r3, r5, r3
 800bc8c:	607b      	str	r3, [r7, #4]
 800bc8e:	f04f 0200 	mov.w	r2, #0
 800bc92:	f04f 0300 	mov.w	r3, #0
 800bc96:	e9d7 4500 	ldrd	r4, r5, [r7]
 800bc9a:	4629      	mov	r1, r5
 800bc9c:	028b      	lsls	r3, r1, #10
 800bc9e:	4621      	mov	r1, r4
 800bca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bca4:	4621      	mov	r1, r4
 800bca6:	028a      	lsls	r2, r1, #10
 800bca8:	4610      	mov	r0, r2
 800bcaa:	4619      	mov	r1, r3
 800bcac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bcb4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800bcb6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800bcba:	f7f5 f963 	bl	8000f84 <__aeabi_uldivmod>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	4613      	mov	r3, r2
 800bcc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800bcc8:	4b0d      	ldr	r3, [pc, #52]	@ (800bd00 <HAL_RCC_GetSysClockFreq+0x458>)
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	0f1b      	lsrs	r3, r3, #28
 800bcce:	f003 0307 	and.w	r3, r3, #7
 800bcd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800bcd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bcda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bcde:	fbb2 f3f3 	udiv	r3, r2, r3
 800bce2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800bce6:	e003      	b.n	800bcf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bce8:	4b06      	ldr	r3, [pc, #24]	@ (800bd04 <HAL_RCC_GetSysClockFreq+0x45c>)
 800bcea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800bcee:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bcf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	37b8      	adds	r7, #184	@ 0xb8
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcfe:	bf00      	nop
 800bd00:	40023800 	.word	0x40023800
 800bd04:	00f42400 	.word	0x00f42400

0800bd08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d101      	bne.n	800bd1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bd16:	2301      	movs	r3, #1
 800bd18:	e28d      	b.n	800c236 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f003 0301 	and.w	r3, r3, #1
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	f000 8083 	beq.w	800be2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800bd28:	4b94      	ldr	r3, [pc, #592]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	f003 030c 	and.w	r3, r3, #12
 800bd30:	2b04      	cmp	r3, #4
 800bd32:	d019      	beq.n	800bd68 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800bd34:	4b91      	ldr	r3, [pc, #580]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	f003 030c 	and.w	r3, r3, #12
        || \
 800bd3c:	2b08      	cmp	r3, #8
 800bd3e:	d106      	bne.n	800bd4e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800bd40:	4b8e      	ldr	r3, [pc, #568]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bd48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bd4c:	d00c      	beq.n	800bd68 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bd4e:	4b8b      	ldr	r3, [pc, #556]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800bd56:	2b0c      	cmp	r3, #12
 800bd58:	d112      	bne.n	800bd80 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bd5a:	4b88      	ldr	r3, [pc, #544]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bd62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bd66:	d10b      	bne.n	800bd80 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd68:	4b84      	ldr	r3, [pc, #528]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d05b      	beq.n	800be2c <HAL_RCC_OscConfig+0x124>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d157      	bne.n	800be2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e25a      	b.n	800c236 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd88:	d106      	bne.n	800bd98 <HAL_RCC_OscConfig+0x90>
 800bd8a:	4b7c      	ldr	r3, [pc, #496]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4a7b      	ldr	r2, [pc, #492]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bd90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd94:	6013      	str	r3, [r2, #0]
 800bd96:	e01d      	b.n	800bdd4 <HAL_RCC_OscConfig+0xcc>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bda0:	d10c      	bne.n	800bdbc <HAL_RCC_OscConfig+0xb4>
 800bda2:	4b76      	ldr	r3, [pc, #472]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a75      	ldr	r2, [pc, #468]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bda8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bdac:	6013      	str	r3, [r2, #0]
 800bdae:	4b73      	ldr	r3, [pc, #460]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a72      	ldr	r2, [pc, #456]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bdb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bdb8:	6013      	str	r3, [r2, #0]
 800bdba:	e00b      	b.n	800bdd4 <HAL_RCC_OscConfig+0xcc>
 800bdbc:	4b6f      	ldr	r3, [pc, #444]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a6e      	ldr	r2, [pc, #440]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bdc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bdc6:	6013      	str	r3, [r2, #0]
 800bdc8:	4b6c      	ldr	r3, [pc, #432]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a6b      	ldr	r2, [pc, #428]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bdce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bdd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d013      	beq.n	800be04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bddc:	f7fc ff2a 	bl	8008c34 <HAL_GetTick>
 800bde0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bde2:	e008      	b.n	800bdf6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bde4:	f7fc ff26 	bl	8008c34 <HAL_GetTick>
 800bde8:	4602      	mov	r2, r0
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	1ad3      	subs	r3, r2, r3
 800bdee:	2b64      	cmp	r3, #100	@ 0x64
 800bdf0:	d901      	bls.n	800bdf6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800bdf2:	2303      	movs	r3, #3
 800bdf4:	e21f      	b.n	800c236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bdf6:	4b61      	ldr	r3, [pc, #388]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d0f0      	beq.n	800bde4 <HAL_RCC_OscConfig+0xdc>
 800be02:	e014      	b.n	800be2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be04:	f7fc ff16 	bl	8008c34 <HAL_GetTick>
 800be08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800be0a:	e008      	b.n	800be1e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be0c:	f7fc ff12 	bl	8008c34 <HAL_GetTick>
 800be10:	4602      	mov	r2, r0
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	1ad3      	subs	r3, r2, r3
 800be16:	2b64      	cmp	r3, #100	@ 0x64
 800be18:	d901      	bls.n	800be1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800be1a:	2303      	movs	r3, #3
 800be1c:	e20b      	b.n	800c236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800be1e:	4b57      	ldr	r3, [pc, #348]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1f0      	bne.n	800be0c <HAL_RCC_OscConfig+0x104>
 800be2a:	e000      	b.n	800be2e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800be2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f003 0302 	and.w	r3, r3, #2
 800be36:	2b00      	cmp	r3, #0
 800be38:	d06f      	beq.n	800bf1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800be3a:	4b50      	ldr	r3, [pc, #320]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	f003 030c 	and.w	r3, r3, #12
 800be42:	2b00      	cmp	r3, #0
 800be44:	d017      	beq.n	800be76 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800be46:	4b4d      	ldr	r3, [pc, #308]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800be48:	689b      	ldr	r3, [r3, #8]
 800be4a:	f003 030c 	and.w	r3, r3, #12
        || \
 800be4e:	2b08      	cmp	r3, #8
 800be50:	d105      	bne.n	800be5e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800be52:	4b4a      	ldr	r3, [pc, #296]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00b      	beq.n	800be76 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800be5e:	4b47      	ldr	r3, [pc, #284]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800be60:	689b      	ldr	r3, [r3, #8]
 800be62:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800be66:	2b0c      	cmp	r3, #12
 800be68:	d11c      	bne.n	800bea4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800be6a:	4b44      	ldr	r3, [pc, #272]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be72:	2b00      	cmp	r3, #0
 800be74:	d116      	bne.n	800bea4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800be76:	4b41      	ldr	r3, [pc, #260]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f003 0302 	and.w	r3, r3, #2
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d005      	beq.n	800be8e <HAL_RCC_OscConfig+0x186>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	2b01      	cmp	r3, #1
 800be88:	d001      	beq.n	800be8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	e1d3      	b.n	800c236 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be8e:	4b3b      	ldr	r3, [pc, #236]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	00db      	lsls	r3, r3, #3
 800be9c:	4937      	ldr	r1, [pc, #220]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800be9e:	4313      	orrs	r3, r2
 800bea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bea2:	e03a      	b.n	800bf1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d020      	beq.n	800beee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800beac:	4b34      	ldr	r3, [pc, #208]	@ (800bf80 <HAL_RCC_OscConfig+0x278>)
 800beae:	2201      	movs	r2, #1
 800beb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800beb2:	f7fc febf 	bl	8008c34 <HAL_GetTick>
 800beb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800beb8:	e008      	b.n	800becc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800beba:	f7fc febb 	bl	8008c34 <HAL_GetTick>
 800bebe:	4602      	mov	r2, r0
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	2b02      	cmp	r3, #2
 800bec6:	d901      	bls.n	800becc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800bec8:	2303      	movs	r3, #3
 800beca:	e1b4      	b.n	800c236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800becc:	4b2b      	ldr	r3, [pc, #172]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f003 0302 	and.w	r3, r3, #2
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d0f0      	beq.n	800beba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bed8:	4b28      	ldr	r3, [pc, #160]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	691b      	ldr	r3, [r3, #16]
 800bee4:	00db      	lsls	r3, r3, #3
 800bee6:	4925      	ldr	r1, [pc, #148]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bee8:	4313      	orrs	r3, r2
 800beea:	600b      	str	r3, [r1, #0]
 800beec:	e015      	b.n	800bf1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800beee:	4b24      	ldr	r3, [pc, #144]	@ (800bf80 <HAL_RCC_OscConfig+0x278>)
 800bef0:	2200      	movs	r2, #0
 800bef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bef4:	f7fc fe9e 	bl	8008c34 <HAL_GetTick>
 800bef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800befa:	e008      	b.n	800bf0e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800befc:	f7fc fe9a 	bl	8008c34 <HAL_GetTick>
 800bf00:	4602      	mov	r2, r0
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	1ad3      	subs	r3, r2, r3
 800bf06:	2b02      	cmp	r3, #2
 800bf08:	d901      	bls.n	800bf0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800bf0a:	2303      	movs	r3, #3
 800bf0c:	e193      	b.n	800c236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bf0e:	4b1b      	ldr	r3, [pc, #108]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f003 0302 	and.w	r3, r3, #2
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1f0      	bne.n	800befc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f003 0308 	and.w	r3, r3, #8
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d036      	beq.n	800bf94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	695b      	ldr	r3, [r3, #20]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d016      	beq.n	800bf5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bf2e:	4b15      	ldr	r3, [pc, #84]	@ (800bf84 <HAL_RCC_OscConfig+0x27c>)
 800bf30:	2201      	movs	r2, #1
 800bf32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf34:	f7fc fe7e 	bl	8008c34 <HAL_GetTick>
 800bf38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bf3a:	e008      	b.n	800bf4e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bf3c:	f7fc fe7a 	bl	8008c34 <HAL_GetTick>
 800bf40:	4602      	mov	r2, r0
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	1ad3      	subs	r3, r2, r3
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	d901      	bls.n	800bf4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800bf4a:	2303      	movs	r3, #3
 800bf4c:	e173      	b.n	800c236 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bf4e:	4b0b      	ldr	r3, [pc, #44]	@ (800bf7c <HAL_RCC_OscConfig+0x274>)
 800bf50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf52:	f003 0302 	and.w	r3, r3, #2
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d0f0      	beq.n	800bf3c <HAL_RCC_OscConfig+0x234>
 800bf5a:	e01b      	b.n	800bf94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bf5c:	4b09      	ldr	r3, [pc, #36]	@ (800bf84 <HAL_RCC_OscConfig+0x27c>)
 800bf5e:	2200      	movs	r2, #0
 800bf60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf62:	f7fc fe67 	bl	8008c34 <HAL_GetTick>
 800bf66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bf68:	e00e      	b.n	800bf88 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bf6a:	f7fc fe63 	bl	8008c34 <HAL_GetTick>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	1ad3      	subs	r3, r2, r3
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	d907      	bls.n	800bf88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800bf78:	2303      	movs	r3, #3
 800bf7a:	e15c      	b.n	800c236 <HAL_RCC_OscConfig+0x52e>
 800bf7c:	40023800 	.word	0x40023800
 800bf80:	42470000 	.word	0x42470000
 800bf84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bf88:	4b8a      	ldr	r3, [pc, #552]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800bf8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf8c:	f003 0302 	and.w	r3, r3, #2
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d1ea      	bne.n	800bf6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f003 0304 	and.w	r3, r3, #4
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f000 8097 	beq.w	800c0d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bfa6:	4b83      	ldr	r3, [pc, #524]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800bfa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d10f      	bne.n	800bfd2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	60bb      	str	r3, [r7, #8]
 800bfb6:	4b7f      	ldr	r3, [pc, #508]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800bfb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfba:	4a7e      	ldr	r2, [pc, #504]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800bfbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bfc0:	6413      	str	r3, [r2, #64]	@ 0x40
 800bfc2:	4b7c      	ldr	r3, [pc, #496]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800bfc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bfca:	60bb      	str	r3, [r7, #8]
 800bfcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bfd2:	4b79      	ldr	r3, [pc, #484]	@ (800c1b8 <HAL_RCC_OscConfig+0x4b0>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d118      	bne.n	800c010 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bfde:	4b76      	ldr	r3, [pc, #472]	@ (800c1b8 <HAL_RCC_OscConfig+0x4b0>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4a75      	ldr	r2, [pc, #468]	@ (800c1b8 <HAL_RCC_OscConfig+0x4b0>)
 800bfe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bfe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bfea:	f7fc fe23 	bl	8008c34 <HAL_GetTick>
 800bfee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bff0:	e008      	b.n	800c004 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bff2:	f7fc fe1f 	bl	8008c34 <HAL_GetTick>
 800bff6:	4602      	mov	r2, r0
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	1ad3      	subs	r3, r2, r3
 800bffc:	2b02      	cmp	r3, #2
 800bffe:	d901      	bls.n	800c004 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800c000:	2303      	movs	r3, #3
 800c002:	e118      	b.n	800c236 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c004:	4b6c      	ldr	r3, [pc, #432]	@ (800c1b8 <HAL_RCC_OscConfig+0x4b0>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d0f0      	beq.n	800bff2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	2b01      	cmp	r3, #1
 800c016:	d106      	bne.n	800c026 <HAL_RCC_OscConfig+0x31e>
 800c018:	4b66      	ldr	r3, [pc, #408]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800c01a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c01c:	4a65      	ldr	r2, [pc, #404]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800c01e:	f043 0301 	orr.w	r3, r3, #1
 800c022:	6713      	str	r3, [r2, #112]	@ 0x70
 800c024:	e01c      	b.n	800c060 <HAL_RCC_OscConfig+0x358>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	2b05      	cmp	r3, #5
 800c02c:	d10c      	bne.n	800c048 <HAL_RCC_OscConfig+0x340>
 800c02e:	4b61      	ldr	r3, [pc, #388]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800c030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c032:	4a60      	ldr	r2, [pc, #384]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800c034:	f043 0304 	orr.w	r3, r3, #4
 800c038:	6713      	str	r3, [r2, #112]	@ 0x70
 800c03a:	4b5e      	ldr	r3, [pc, #376]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800c03c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c03e:	4a5d      	ldr	r2, [pc, #372]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800c040:	f043 0301 	orr.w	r3, r3, #1
 800c044:	6713      	str	r3, [r2, #112]	@ 0x70
 800c046:	e00b      	b.n	800c060 <HAL_RCC_OscConfig+0x358>
 800c048:	4b5a      	ldr	r3, [pc, #360]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800c04a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c04c:	4a59      	ldr	r2, [pc, #356]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800c04e:	f023 0301 	bic.w	r3, r3, #1
 800c052:	6713      	str	r3, [r2, #112]	@ 0x70
 800c054:	4b57      	ldr	r3, [pc, #348]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800c056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c058:	4a56      	ldr	r2, [pc, #344]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800c05a:	f023 0304 	bic.w	r3, r3, #4
 800c05e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d015      	beq.n	800c094 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c068:	f7fc fde4 	bl	8008c34 <HAL_GetTick>
 800c06c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c06e:	e00a      	b.n	800c086 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c070:	f7fc fde0 	bl	8008c34 <HAL_GetTick>
 800c074:	4602      	mov	r2, r0
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	1ad3      	subs	r3, r2, r3
 800c07a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c07e:	4293      	cmp	r3, r2
 800c080:	d901      	bls.n	800c086 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800c082:	2303      	movs	r3, #3
 800c084:	e0d7      	b.n	800c236 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c086:	4b4b      	ldr	r3, [pc, #300]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800c088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c08a:	f003 0302 	and.w	r3, r3, #2
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d0ee      	beq.n	800c070 <HAL_RCC_OscConfig+0x368>
 800c092:	e014      	b.n	800c0be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c094:	f7fc fdce 	bl	8008c34 <HAL_GetTick>
 800c098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c09a:	e00a      	b.n	800c0b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c09c:	f7fc fdca 	bl	8008c34 <HAL_GetTick>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	1ad3      	subs	r3, r2, r3
 800c0a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d901      	bls.n	800c0b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c0ae:	2303      	movs	r3, #3
 800c0b0:	e0c1      	b.n	800c236 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c0b2:	4b40      	ldr	r3, [pc, #256]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800c0b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0b6:	f003 0302 	and.w	r3, r3, #2
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d1ee      	bne.n	800c09c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c0be:	7dfb      	ldrb	r3, [r7, #23]
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	d105      	bne.n	800c0d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c0c4:	4b3b      	ldr	r3, [pc, #236]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800c0c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0c8:	4a3a      	ldr	r2, [pc, #232]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800c0ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c0ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	699b      	ldr	r3, [r3, #24]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	f000 80ad 	beq.w	800c234 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c0da:	4b36      	ldr	r3, [pc, #216]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800c0dc:	689b      	ldr	r3, [r3, #8]
 800c0de:	f003 030c 	and.w	r3, r3, #12
 800c0e2:	2b08      	cmp	r3, #8
 800c0e4:	d060      	beq.n	800c1a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	699b      	ldr	r3, [r3, #24]
 800c0ea:	2b02      	cmp	r3, #2
 800c0ec:	d145      	bne.n	800c17a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c0ee:	4b33      	ldr	r3, [pc, #204]	@ (800c1bc <HAL_RCC_OscConfig+0x4b4>)
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0f4:	f7fc fd9e 	bl	8008c34 <HAL_GetTick>
 800c0f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c0fa:	e008      	b.n	800c10e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c0fc:	f7fc fd9a 	bl	8008c34 <HAL_GetTick>
 800c100:	4602      	mov	r2, r0
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	1ad3      	subs	r3, r2, r3
 800c106:	2b02      	cmp	r3, #2
 800c108:	d901      	bls.n	800c10e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800c10a:	2303      	movs	r3, #3
 800c10c:	e093      	b.n	800c236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c10e:	4b29      	ldr	r3, [pc, #164]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1f0      	bne.n	800c0fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	69da      	ldr	r2, [r3, #28]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6a1b      	ldr	r3, [r3, #32]
 800c122:	431a      	orrs	r2, r3
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c128:	019b      	lsls	r3, r3, #6
 800c12a:	431a      	orrs	r2, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c130:	085b      	lsrs	r3, r3, #1
 800c132:	3b01      	subs	r3, #1
 800c134:	041b      	lsls	r3, r3, #16
 800c136:	431a      	orrs	r2, r3
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c13c:	061b      	lsls	r3, r3, #24
 800c13e:	431a      	orrs	r2, r3
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c144:	071b      	lsls	r3, r3, #28
 800c146:	491b      	ldr	r1, [pc, #108]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800c148:	4313      	orrs	r3, r2
 800c14a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c14c:	4b1b      	ldr	r3, [pc, #108]	@ (800c1bc <HAL_RCC_OscConfig+0x4b4>)
 800c14e:	2201      	movs	r2, #1
 800c150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c152:	f7fc fd6f 	bl	8008c34 <HAL_GetTick>
 800c156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c158:	e008      	b.n	800c16c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c15a:	f7fc fd6b 	bl	8008c34 <HAL_GetTick>
 800c15e:	4602      	mov	r2, r0
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	1ad3      	subs	r3, r2, r3
 800c164:	2b02      	cmp	r3, #2
 800c166:	d901      	bls.n	800c16c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800c168:	2303      	movs	r3, #3
 800c16a:	e064      	b.n	800c236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c16c:	4b11      	ldr	r3, [pc, #68]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c174:	2b00      	cmp	r3, #0
 800c176:	d0f0      	beq.n	800c15a <HAL_RCC_OscConfig+0x452>
 800c178:	e05c      	b.n	800c234 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c17a:	4b10      	ldr	r3, [pc, #64]	@ (800c1bc <HAL_RCC_OscConfig+0x4b4>)
 800c17c:	2200      	movs	r2, #0
 800c17e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c180:	f7fc fd58 	bl	8008c34 <HAL_GetTick>
 800c184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c186:	e008      	b.n	800c19a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c188:	f7fc fd54 	bl	8008c34 <HAL_GetTick>
 800c18c:	4602      	mov	r2, r0
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	1ad3      	subs	r3, r2, r3
 800c192:	2b02      	cmp	r3, #2
 800c194:	d901      	bls.n	800c19a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800c196:	2303      	movs	r3, #3
 800c198:	e04d      	b.n	800c236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c19a:	4b06      	ldr	r3, [pc, #24]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ac>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d1f0      	bne.n	800c188 <HAL_RCC_OscConfig+0x480>
 800c1a6:	e045      	b.n	800c234 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	699b      	ldr	r3, [r3, #24]
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d107      	bne.n	800c1c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e040      	b.n	800c236 <HAL_RCC_OscConfig+0x52e>
 800c1b4:	40023800 	.word	0x40023800
 800c1b8:	40007000 	.word	0x40007000
 800c1bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c1c0:	4b1f      	ldr	r3, [pc, #124]	@ (800c240 <HAL_RCC_OscConfig+0x538>)
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	699b      	ldr	r3, [r3, #24]
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	d030      	beq.n	800c230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d129      	bne.n	800c230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d122      	bne.n	800c230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c1ea:	68fa      	ldr	r2, [r7, #12]
 800c1ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800c1f0:	4013      	ands	r3, r2
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c1f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d119      	bne.n	800c230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c206:	085b      	lsrs	r3, r3, #1
 800c208:	3b01      	subs	r3, #1
 800c20a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d10f      	bne.n	800c230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c21a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d107      	bne.n	800c230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c22a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d001      	beq.n	800c234 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800c230:	2301      	movs	r3, #1
 800c232:	e000      	b.n	800c236 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3718      	adds	r7, #24
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	40023800 	.word	0x40023800

0800c244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d101      	bne.n	800c256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c252:	2301      	movs	r3, #1
 800c254:	e041      	b.n	800c2da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d106      	bne.n	800c270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2200      	movs	r2, #0
 800c266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f7fb fe5c 	bl	8007f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2202      	movs	r2, #2
 800c274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681a      	ldr	r2, [r3, #0]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	3304      	adds	r3, #4
 800c280:	4619      	mov	r1, r3
 800c282:	4610      	mov	r0, r2
 800c284:	f000 fa7e 	bl	800c784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2201      	movs	r2, #1
 800c28c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2201      	movs	r2, #1
 800c294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2201      	movs	r2, #1
 800c29c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c2d8:	2300      	movs	r3, #0
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3708      	adds	r7, #8
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
	...

0800c2e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d001      	beq.n	800c2fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e04e      	b.n	800c39a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2202      	movs	r2, #2
 800c300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	68da      	ldr	r2, [r3, #12]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f042 0201 	orr.w	r2, r2, #1
 800c312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4a23      	ldr	r2, [pc, #140]	@ (800c3a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d022      	beq.n	800c364 <HAL_TIM_Base_Start_IT+0x80>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c326:	d01d      	beq.n	800c364 <HAL_TIM_Base_Start_IT+0x80>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a1f      	ldr	r2, [pc, #124]	@ (800c3ac <HAL_TIM_Base_Start_IT+0xc8>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d018      	beq.n	800c364 <HAL_TIM_Base_Start_IT+0x80>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4a1e      	ldr	r2, [pc, #120]	@ (800c3b0 <HAL_TIM_Base_Start_IT+0xcc>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d013      	beq.n	800c364 <HAL_TIM_Base_Start_IT+0x80>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a1c      	ldr	r2, [pc, #112]	@ (800c3b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d00e      	beq.n	800c364 <HAL_TIM_Base_Start_IT+0x80>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a1b      	ldr	r2, [pc, #108]	@ (800c3b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d009      	beq.n	800c364 <HAL_TIM_Base_Start_IT+0x80>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4a19      	ldr	r2, [pc, #100]	@ (800c3bc <HAL_TIM_Base_Start_IT+0xd8>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d004      	beq.n	800c364 <HAL_TIM_Base_Start_IT+0x80>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a18      	ldr	r2, [pc, #96]	@ (800c3c0 <HAL_TIM_Base_Start_IT+0xdc>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d111      	bne.n	800c388 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	689b      	ldr	r3, [r3, #8]
 800c36a:	f003 0307 	and.w	r3, r3, #7
 800c36e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2b06      	cmp	r3, #6
 800c374:	d010      	beq.n	800c398 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f042 0201 	orr.w	r2, r2, #1
 800c384:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c386:	e007      	b.n	800c398 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f042 0201 	orr.w	r2, r2, #1
 800c396:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c398:	2300      	movs	r3, #0
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3714      	adds	r7, #20
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr
 800c3a6:	bf00      	nop
 800c3a8:	40010000 	.word	0x40010000
 800c3ac:	40000400 	.word	0x40000400
 800c3b0:	40000800 	.word	0x40000800
 800c3b4:	40000c00 	.word	0x40000c00
 800c3b8:	40010400 	.word	0x40010400
 800c3bc:	40014000 	.word	0x40014000
 800c3c0:	40001800 	.word	0x40001800

0800c3c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	691b      	ldr	r3, [r3, #16]
 800c3da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	f003 0302 	and.w	r3, r3, #2
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d020      	beq.n	800c428 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f003 0302 	and.w	r3, r3, #2
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d01b      	beq.n	800c428 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f06f 0202 	mvn.w	r2, #2
 800c3f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	699b      	ldr	r3, [r3, #24]
 800c406:	f003 0303 	and.w	r3, r3, #3
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d003      	beq.n	800c416 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 f999 	bl	800c746 <HAL_TIM_IC_CaptureCallback>
 800c414:	e005      	b.n	800c422 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 f98b 	bl	800c732 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 f99c 	bl	800c75a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2200      	movs	r2, #0
 800c426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	f003 0304 	and.w	r3, r3, #4
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d020      	beq.n	800c474 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f003 0304 	and.w	r3, r3, #4
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d01b      	beq.n	800c474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f06f 0204 	mvn.w	r2, #4
 800c444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2202      	movs	r2, #2
 800c44a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	699b      	ldr	r3, [r3, #24]
 800c452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c456:	2b00      	cmp	r3, #0
 800c458:	d003      	beq.n	800c462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 f973 	bl	800c746 <HAL_TIM_IC_CaptureCallback>
 800c460:	e005      	b.n	800c46e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 f965 	bl	800c732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 f976 	bl	800c75a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2200      	movs	r2, #0
 800c472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	f003 0308 	and.w	r3, r3, #8
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d020      	beq.n	800c4c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f003 0308 	and.w	r3, r3, #8
 800c484:	2b00      	cmp	r3, #0
 800c486:	d01b      	beq.n	800c4c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f06f 0208 	mvn.w	r2, #8
 800c490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2204      	movs	r2, #4
 800c496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	69db      	ldr	r3, [r3, #28]
 800c49e:	f003 0303 	and.w	r3, r3, #3
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d003      	beq.n	800c4ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 f94d 	bl	800c746 <HAL_TIM_IC_CaptureCallback>
 800c4ac:	e005      	b.n	800c4ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 f93f 	bl	800c732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f000 f950 	bl	800c75a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	f003 0310 	and.w	r3, r3, #16
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d020      	beq.n	800c50c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f003 0310 	and.w	r3, r3, #16
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d01b      	beq.n	800c50c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f06f 0210 	mvn.w	r2, #16
 800c4dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2208      	movs	r2, #8
 800c4e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	69db      	ldr	r3, [r3, #28]
 800c4ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d003      	beq.n	800c4fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 f927 	bl	800c746 <HAL_TIM_IC_CaptureCallback>
 800c4f8:	e005      	b.n	800c506 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 f919 	bl	800c732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 f92a 	bl	800c75a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2200      	movs	r2, #0
 800c50a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	f003 0301 	and.w	r3, r3, #1
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00c      	beq.n	800c530 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f003 0301 	and.w	r3, r3, #1
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d007      	beq.n	800c530 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f06f 0201 	mvn.w	r2, #1
 800c528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f7f9 fa52 	bl	80059d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00c      	beq.n	800c554 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c540:	2b00      	cmp	r3, #0
 800c542:	d007      	beq.n	800c554 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c54c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 fade 	bl	800cb10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00c      	beq.n	800c578 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c564:	2b00      	cmp	r3, #0
 800c566:	d007      	beq.n	800c578 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 f8fb 	bl	800c76e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	f003 0320 	and.w	r3, r3, #32
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d00c      	beq.n	800c59c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	f003 0320 	and.w	r3, r3, #32
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d007      	beq.n	800c59c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f06f 0220 	mvn.w	r2, #32
 800c594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 fab0 	bl	800cafc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c59c:	bf00      	nop
 800c59e:	3710      	adds	r7, #16
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d101      	bne.n	800c5c0 <HAL_TIM_ConfigClockSource+0x1c>
 800c5bc:	2302      	movs	r3, #2
 800c5be:	e0b4      	b.n	800c72a <HAL_TIM_ConfigClockSource+0x186>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2202      	movs	r2, #2
 800c5cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c5de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c5e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	68ba      	ldr	r2, [r7, #8]
 800c5ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5f8:	d03e      	beq.n	800c678 <HAL_TIM_ConfigClockSource+0xd4>
 800c5fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5fe:	f200 8087 	bhi.w	800c710 <HAL_TIM_ConfigClockSource+0x16c>
 800c602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c606:	f000 8086 	beq.w	800c716 <HAL_TIM_ConfigClockSource+0x172>
 800c60a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c60e:	d87f      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x16c>
 800c610:	2b70      	cmp	r3, #112	@ 0x70
 800c612:	d01a      	beq.n	800c64a <HAL_TIM_ConfigClockSource+0xa6>
 800c614:	2b70      	cmp	r3, #112	@ 0x70
 800c616:	d87b      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x16c>
 800c618:	2b60      	cmp	r3, #96	@ 0x60
 800c61a:	d050      	beq.n	800c6be <HAL_TIM_ConfigClockSource+0x11a>
 800c61c:	2b60      	cmp	r3, #96	@ 0x60
 800c61e:	d877      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x16c>
 800c620:	2b50      	cmp	r3, #80	@ 0x50
 800c622:	d03c      	beq.n	800c69e <HAL_TIM_ConfigClockSource+0xfa>
 800c624:	2b50      	cmp	r3, #80	@ 0x50
 800c626:	d873      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x16c>
 800c628:	2b40      	cmp	r3, #64	@ 0x40
 800c62a:	d058      	beq.n	800c6de <HAL_TIM_ConfigClockSource+0x13a>
 800c62c:	2b40      	cmp	r3, #64	@ 0x40
 800c62e:	d86f      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x16c>
 800c630:	2b30      	cmp	r3, #48	@ 0x30
 800c632:	d064      	beq.n	800c6fe <HAL_TIM_ConfigClockSource+0x15a>
 800c634:	2b30      	cmp	r3, #48	@ 0x30
 800c636:	d86b      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x16c>
 800c638:	2b20      	cmp	r3, #32
 800c63a:	d060      	beq.n	800c6fe <HAL_TIM_ConfigClockSource+0x15a>
 800c63c:	2b20      	cmp	r3, #32
 800c63e:	d867      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x16c>
 800c640:	2b00      	cmp	r3, #0
 800c642:	d05c      	beq.n	800c6fe <HAL_TIM_ConfigClockSource+0x15a>
 800c644:	2b10      	cmp	r3, #16
 800c646:	d05a      	beq.n	800c6fe <HAL_TIM_ConfigClockSource+0x15a>
 800c648:	e062      	b.n	800c710 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c65a:	f000 f9b3 	bl	800c9c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	689b      	ldr	r3, [r3, #8]
 800c664:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c66c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	68ba      	ldr	r2, [r7, #8]
 800c674:	609a      	str	r2, [r3, #8]
      break;
 800c676:	e04f      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c688:	f000 f99c 	bl	800c9c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	689a      	ldr	r2, [r3, #8]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c69a:	609a      	str	r2, [r3, #8]
      break;
 800c69c:	e03c      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	f000 f910 	bl	800c8d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2150      	movs	r1, #80	@ 0x50
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f000 f969 	bl	800c98e <TIM_ITRx_SetConfig>
      break;
 800c6bc:	e02c      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	f000 f92f 	bl	800c92e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2160      	movs	r1, #96	@ 0x60
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f000 f959 	bl	800c98e <TIM_ITRx_SetConfig>
      break;
 800c6dc:	e01c      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	f000 f8f0 	bl	800c8d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2140      	movs	r1, #64	@ 0x40
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f000 f949 	bl	800c98e <TIM_ITRx_SetConfig>
      break;
 800c6fc:	e00c      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4619      	mov	r1, r3
 800c708:	4610      	mov	r0, r2
 800c70a:	f000 f940 	bl	800c98e <TIM_ITRx_SetConfig>
      break;
 800c70e:	e003      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c710:	2301      	movs	r3, #1
 800c712:	73fb      	strb	r3, [r7, #15]
      break;
 800c714:	e000      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c716:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2201      	movs	r2, #1
 800c71c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c728:	7bfb      	ldrb	r3, [r7, #15]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3710      	adds	r7, #16
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}

0800c732 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c732:	b480      	push	{r7}
 800c734:	b083      	sub	sp, #12
 800c736:	af00      	add	r7, sp, #0
 800c738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c73a:	bf00      	nop
 800c73c:	370c      	adds	r7, #12
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr

0800c746 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c746:	b480      	push	{r7}
 800c748:	b083      	sub	sp, #12
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c74e:	bf00      	nop
 800c750:	370c      	adds	r7, #12
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr

0800c75a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c75a:	b480      	push	{r7}
 800c75c:	b083      	sub	sp, #12
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c762:	bf00      	nop
 800c764:	370c      	adds	r7, #12
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr

0800c76e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c76e:	b480      	push	{r7}
 800c770:	b083      	sub	sp, #12
 800c772:	af00      	add	r7, sp, #0
 800c774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c776:	bf00      	nop
 800c778:	370c      	adds	r7, #12
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr
	...

0800c784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c784:	b480      	push	{r7}
 800c786:	b085      	sub	sp, #20
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	4a43      	ldr	r2, [pc, #268]	@ (800c8a4 <TIM_Base_SetConfig+0x120>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d013      	beq.n	800c7c4 <TIM_Base_SetConfig+0x40>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7a2:	d00f      	beq.n	800c7c4 <TIM_Base_SetConfig+0x40>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	4a40      	ldr	r2, [pc, #256]	@ (800c8a8 <TIM_Base_SetConfig+0x124>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d00b      	beq.n	800c7c4 <TIM_Base_SetConfig+0x40>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	4a3f      	ldr	r2, [pc, #252]	@ (800c8ac <TIM_Base_SetConfig+0x128>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d007      	beq.n	800c7c4 <TIM_Base_SetConfig+0x40>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	4a3e      	ldr	r2, [pc, #248]	@ (800c8b0 <TIM_Base_SetConfig+0x12c>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d003      	beq.n	800c7c4 <TIM_Base_SetConfig+0x40>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	4a3d      	ldr	r2, [pc, #244]	@ (800c8b4 <TIM_Base_SetConfig+0x130>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d108      	bne.n	800c7d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	68fa      	ldr	r2, [r7, #12]
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4a32      	ldr	r2, [pc, #200]	@ (800c8a4 <TIM_Base_SetConfig+0x120>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d02b      	beq.n	800c836 <TIM_Base_SetConfig+0xb2>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7e4:	d027      	beq.n	800c836 <TIM_Base_SetConfig+0xb2>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	4a2f      	ldr	r2, [pc, #188]	@ (800c8a8 <TIM_Base_SetConfig+0x124>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d023      	beq.n	800c836 <TIM_Base_SetConfig+0xb2>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4a2e      	ldr	r2, [pc, #184]	@ (800c8ac <TIM_Base_SetConfig+0x128>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d01f      	beq.n	800c836 <TIM_Base_SetConfig+0xb2>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4a2d      	ldr	r2, [pc, #180]	@ (800c8b0 <TIM_Base_SetConfig+0x12c>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d01b      	beq.n	800c836 <TIM_Base_SetConfig+0xb2>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	4a2c      	ldr	r2, [pc, #176]	@ (800c8b4 <TIM_Base_SetConfig+0x130>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d017      	beq.n	800c836 <TIM_Base_SetConfig+0xb2>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4a2b      	ldr	r2, [pc, #172]	@ (800c8b8 <TIM_Base_SetConfig+0x134>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d013      	beq.n	800c836 <TIM_Base_SetConfig+0xb2>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	4a2a      	ldr	r2, [pc, #168]	@ (800c8bc <TIM_Base_SetConfig+0x138>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d00f      	beq.n	800c836 <TIM_Base_SetConfig+0xb2>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	4a29      	ldr	r2, [pc, #164]	@ (800c8c0 <TIM_Base_SetConfig+0x13c>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d00b      	beq.n	800c836 <TIM_Base_SetConfig+0xb2>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4a28      	ldr	r2, [pc, #160]	@ (800c8c4 <TIM_Base_SetConfig+0x140>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d007      	beq.n	800c836 <TIM_Base_SetConfig+0xb2>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	4a27      	ldr	r2, [pc, #156]	@ (800c8c8 <TIM_Base_SetConfig+0x144>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d003      	beq.n	800c836 <TIM_Base_SetConfig+0xb2>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	4a26      	ldr	r2, [pc, #152]	@ (800c8cc <TIM_Base_SetConfig+0x148>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d108      	bne.n	800c848 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c83c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	68db      	ldr	r3, [r3, #12]
 800c842:	68fa      	ldr	r2, [r7, #12]
 800c844:	4313      	orrs	r3, r2
 800c846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	695b      	ldr	r3, [r3, #20]
 800c852:	4313      	orrs	r3, r2
 800c854:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	689a      	ldr	r2, [r3, #8]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4a0e      	ldr	r2, [pc, #56]	@ (800c8a4 <TIM_Base_SetConfig+0x120>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d003      	beq.n	800c876 <TIM_Base_SetConfig+0xf2>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4a10      	ldr	r2, [pc, #64]	@ (800c8b4 <TIM_Base_SetConfig+0x130>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d103      	bne.n	800c87e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	691a      	ldr	r2, [r3, #16]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f043 0204 	orr.w	r2, r3, #4
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2201      	movs	r2, #1
 800c88e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	68fa      	ldr	r2, [r7, #12]
 800c894:	601a      	str	r2, [r3, #0]
}
 800c896:	bf00      	nop
 800c898:	3714      	adds	r7, #20
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	40010000 	.word	0x40010000
 800c8a8:	40000400 	.word	0x40000400
 800c8ac:	40000800 	.word	0x40000800
 800c8b0:	40000c00 	.word	0x40000c00
 800c8b4:	40010400 	.word	0x40010400
 800c8b8:	40014000 	.word	0x40014000
 800c8bc:	40014400 	.word	0x40014400
 800c8c0:	40014800 	.word	0x40014800
 800c8c4:	40001800 	.word	0x40001800
 800c8c8:	40001c00 	.word	0x40001c00
 800c8cc:	40002000 	.word	0x40002000

0800c8d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b087      	sub	sp, #28
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6a1b      	ldr	r3, [r3, #32]
 800c8e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	6a1b      	ldr	r3, [r3, #32]
 800c8e6:	f023 0201 	bic.w	r2, r3, #1
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	699b      	ldr	r3, [r3, #24]
 800c8f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c8fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	011b      	lsls	r3, r3, #4
 800c900:	693a      	ldr	r2, [r7, #16]
 800c902:	4313      	orrs	r3, r2
 800c904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	f023 030a 	bic.w	r3, r3, #10
 800c90c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c90e:	697a      	ldr	r2, [r7, #20]
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	4313      	orrs	r3, r2
 800c914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	693a      	ldr	r2, [r7, #16]
 800c91a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	697a      	ldr	r2, [r7, #20]
 800c920:	621a      	str	r2, [r3, #32]
}
 800c922:	bf00      	nop
 800c924:	371c      	adds	r7, #28
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr

0800c92e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c92e:	b480      	push	{r7}
 800c930:	b087      	sub	sp, #28
 800c932:	af00      	add	r7, sp, #0
 800c934:	60f8      	str	r0, [r7, #12]
 800c936:	60b9      	str	r1, [r7, #8]
 800c938:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6a1b      	ldr	r3, [r3, #32]
 800c93e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6a1b      	ldr	r3, [r3, #32]
 800c944:	f023 0210 	bic.w	r2, r3, #16
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	699b      	ldr	r3, [r3, #24]
 800c950:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c958:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	031b      	lsls	r3, r3, #12
 800c95e:	693a      	ldr	r2, [r7, #16]
 800c960:	4313      	orrs	r3, r2
 800c962:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c96a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	011b      	lsls	r3, r3, #4
 800c970:	697a      	ldr	r2, [r7, #20]
 800c972:	4313      	orrs	r3, r2
 800c974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	693a      	ldr	r2, [r7, #16]
 800c97a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	697a      	ldr	r2, [r7, #20]
 800c980:	621a      	str	r2, [r3, #32]
}
 800c982:	bf00      	nop
 800c984:	371c      	adds	r7, #28
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr

0800c98e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c98e:	b480      	push	{r7}
 800c990:	b085      	sub	sp, #20
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
 800c996:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c9a6:	683a      	ldr	r2, [r7, #0]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	f043 0307 	orr.w	r3, r3, #7
 800c9b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	609a      	str	r2, [r3, #8]
}
 800c9b8:	bf00      	nop
 800c9ba:	3714      	adds	r7, #20
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr

0800c9c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b087      	sub	sp, #28
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	607a      	str	r2, [r7, #4]
 800c9d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	689b      	ldr	r3, [r3, #8]
 800c9d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c9de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	021a      	lsls	r2, r3, #8
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	431a      	orrs	r2, r3
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	697a      	ldr	r2, [r7, #20]
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	697a      	ldr	r2, [r7, #20]
 800c9f6:	609a      	str	r2, [r3, #8]
}
 800c9f8:	bf00      	nop
 800c9fa:	371c      	adds	r7, #28
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b085      	sub	sp, #20
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d101      	bne.n	800ca1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca18:	2302      	movs	r3, #2
 800ca1a:	e05a      	b.n	800cad2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2202      	movs	r2, #2
 800ca28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	68fa      	ldr	r2, [r7, #12]
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	68fa      	ldr	r2, [r7, #12]
 800ca54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a21      	ldr	r2, [pc, #132]	@ (800cae0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d022      	beq.n	800caa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca68:	d01d      	beq.n	800caa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a1d      	ldr	r2, [pc, #116]	@ (800cae4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d018      	beq.n	800caa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a1b      	ldr	r2, [pc, #108]	@ (800cae8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d013      	beq.n	800caa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4a1a      	ldr	r2, [pc, #104]	@ (800caec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d00e      	beq.n	800caa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a18      	ldr	r2, [pc, #96]	@ (800caf0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d009      	beq.n	800caa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	4a17      	ldr	r2, [pc, #92]	@ (800caf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d004      	beq.n	800caa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a15      	ldr	r2, [pc, #84]	@ (800caf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d10c      	bne.n	800cac0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800caac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	68ba      	ldr	r2, [r7, #8]
 800cab4:	4313      	orrs	r3, r2
 800cab6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	68ba      	ldr	r2, [r7, #8]
 800cabe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2201      	movs	r2, #1
 800cac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cad0:	2300      	movs	r3, #0
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3714      	adds	r7, #20
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop
 800cae0:	40010000 	.word	0x40010000
 800cae4:	40000400 	.word	0x40000400
 800cae8:	40000800 	.word	0x40000800
 800caec:	40000c00 	.word	0x40000c00
 800caf0:	40010400 	.word	0x40010400
 800caf4:	40014000 	.word	0x40014000
 800caf8:	40001800 	.word	0x40001800

0800cafc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b083      	sub	sp, #12
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb04:	bf00      	nop
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr

0800cb10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb18:	bf00      	nop
 800cb1a:	370c      	adds	r7, #12
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr

0800cb24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d101      	bne.n	800cb36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb32:	2301      	movs	r3, #1
 800cb34:	e042      	b.n	800cbbc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d106      	bne.n	800cb50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2200      	movs	r2, #0
 800cb46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f7fb fa12 	bl	8007f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2224      	movs	r2, #36	@ 0x24
 800cb54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	68da      	ldr	r2, [r3, #12]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cb66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f001 f8bb 	bl	800dce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	691a      	ldr	r2, [r3, #16]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cb7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	695a      	ldr	r2, [r3, #20]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cb8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	68da      	ldr	r2, [r3, #12]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cb9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2200      	movs	r2, #0
 800cba2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2220      	movs	r2, #32
 800cba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2220      	movs	r2, #32
 800cbb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cbba:	2300      	movs	r3, #0
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3708      	adds	r7, #8
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d101      	bne.n	800cbd6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	e024      	b.n	800cc20 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2224      	movs	r2, #36	@ 0x24
 800cbda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	68da      	ldr	r2, [r3, #12]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cbec:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7fb fb96 	bl	8008320 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2200      	movs	r2, #0
 800cc06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2200      	movs	r2, #0
 800cc14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3708      	adds	r7, #8
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b08a      	sub	sp, #40	@ 0x28
 800cc2c:	af02      	add	r7, sp, #8
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	603b      	str	r3, [r7, #0]
 800cc34:	4613      	mov	r3, r2
 800cc36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	2b20      	cmp	r3, #32
 800cc46:	d175      	bne.n	800cd34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d002      	beq.n	800cc54 <HAL_UART_Transmit+0x2c>
 800cc4e:	88fb      	ldrh	r3, [r7, #6]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d101      	bne.n	800cc58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cc54:	2301      	movs	r3, #1
 800cc56:	e06e      	b.n	800cd36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	2221      	movs	r2, #33	@ 0x21
 800cc62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc66:	f7fb ffe5 	bl	8008c34 <HAL_GetTick>
 800cc6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	88fa      	ldrh	r2, [r7, #6]
 800cc70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	88fa      	ldrh	r2, [r7, #6]
 800cc76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc80:	d108      	bne.n	800cc94 <HAL_UART_Transmit+0x6c>
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	691b      	ldr	r3, [r3, #16]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d104      	bne.n	800cc94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	61bb      	str	r3, [r7, #24]
 800cc92:	e003      	b.n	800cc9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cc9c:	e02e      	b.n	800ccfc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	9300      	str	r3, [sp, #0]
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	2200      	movs	r2, #0
 800cca6:	2180      	movs	r1, #128	@ 0x80
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	f000 fd5a 	bl	800d762 <UART_WaitOnFlagUntilTimeout>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d005      	beq.n	800ccc0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	2220      	movs	r2, #32
 800ccb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800ccbc:	2303      	movs	r3, #3
 800ccbe:	e03a      	b.n	800cd36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800ccc0:	69fb      	ldr	r3, [r7, #28]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d10b      	bne.n	800ccde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	881b      	ldrh	r3, [r3, #0]
 800ccca:	461a      	mov	r2, r3
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ccd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	3302      	adds	r3, #2
 800ccda:	61bb      	str	r3, [r7, #24]
 800ccdc:	e007      	b.n	800ccee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ccde:	69fb      	ldr	r3, [r7, #28]
 800cce0:	781a      	ldrb	r2, [r3, #0]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	3301      	adds	r3, #1
 800ccec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ccf2:	b29b      	uxth	r3, r3
 800ccf4:	3b01      	subs	r3, #1
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d1cb      	bne.n	800cc9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	9300      	str	r3, [sp, #0]
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	2140      	movs	r1, #64	@ 0x40
 800cd10:	68f8      	ldr	r0, [r7, #12]
 800cd12:	f000 fd26 	bl	800d762 <UART_WaitOnFlagUntilTimeout>
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d005      	beq.n	800cd28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2220      	movs	r2, #32
 800cd20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800cd24:	2303      	movs	r3, #3
 800cd26:	e006      	b.n	800cd36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2220      	movs	r2, #32
 800cd2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800cd30:	2300      	movs	r3, #0
 800cd32:	e000      	b.n	800cd36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800cd34:	2302      	movs	r3, #2
  }
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3720      	adds	r7, #32
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
	...

0800cd40 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b08c      	sub	sp, #48	@ 0x30
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	2b20      	cmp	r3, #32
 800cd58:	d162      	bne.n	800ce20 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d002      	beq.n	800cd66 <HAL_UART_Transmit_DMA+0x26>
 800cd60:	88fb      	ldrh	r3, [r7, #6]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d101      	bne.n	800cd6a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800cd66:	2301      	movs	r3, #1
 800cd68:	e05b      	b.n	800ce22 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800cd6a:	68ba      	ldr	r2, [r7, #8]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	88fa      	ldrh	r2, [r7, #6]
 800cd74:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	88fa      	ldrh	r2, [r7, #6]
 800cd7a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2221      	movs	r2, #33	@ 0x21
 800cd86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd8e:	4a27      	ldr	r2, [pc, #156]	@ (800ce2c <HAL_UART_Transmit_DMA+0xec>)
 800cd90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd96:	4a26      	ldr	r2, [pc, #152]	@ (800ce30 <HAL_UART_Transmit_DMA+0xf0>)
 800cd98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd9e:	4a25      	ldr	r2, [pc, #148]	@ (800ce34 <HAL_UART_Transmit_DMA+0xf4>)
 800cda0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cda6:	2200      	movs	r2, #0
 800cda8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800cdaa:	f107 0308 	add.w	r3, r7, #8
 800cdae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800cdb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdb6:	6819      	ldr	r1, [r3, #0]
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	3304      	adds	r3, #4
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	88fb      	ldrh	r3, [r7, #6]
 800cdc2:	f7fc fddd 	bl	8009980 <HAL_DMA_Start_IT>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d008      	beq.n	800cdde <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2210      	movs	r2, #16
 800cdd0:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2220      	movs	r2, #32
 800cdd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800cdda:	2301      	movs	r3, #1
 800cddc:	e021      	b.n	800ce22 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cde6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	3314      	adds	r3, #20
 800cdee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf0:	69bb      	ldr	r3, [r7, #24]
 800cdf2:	e853 3f00 	ldrex	r3, [r3]
 800cdf6:	617b      	str	r3, [r7, #20]
   return(result);
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	3314      	adds	r3, #20
 800ce06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce08:	627a      	str	r2, [r7, #36]	@ 0x24
 800ce0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce0c:	6a39      	ldr	r1, [r7, #32]
 800ce0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce10:	e841 2300 	strex	r3, r2, [r1]
 800ce14:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce16:	69fb      	ldr	r3, [r7, #28]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d1e5      	bne.n	800cde8 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	e000      	b.n	800ce22 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800ce20:	2302      	movs	r3, #2
  }
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3730      	adds	r7, #48	@ 0x30
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	0800d4b1 	.word	0x0800d4b1
 800ce30:	0800d54b 	.word	0x0800d54b
 800ce34:	0800d6cf 	.word	0x0800d6cf

0800ce38 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	4613      	mov	r3, r2
 800ce44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ce4c:	b2db      	uxtb	r3, r3
 800ce4e:	2b20      	cmp	r3, #32
 800ce50:	d112      	bne.n	800ce78 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d002      	beq.n	800ce5e <HAL_UART_Receive_DMA+0x26>
 800ce58:	88fb      	ldrh	r3, [r7, #6]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d101      	bne.n	800ce62 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ce5e:	2301      	movs	r3, #1
 800ce60:	e00b      	b.n	800ce7a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2200      	movs	r2, #0
 800ce66:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ce68:	88fb      	ldrh	r3, [r7, #6]
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	68b9      	ldr	r1, [r7, #8]
 800ce6e:	68f8      	ldr	r0, [r7, #12]
 800ce70:	f000 fcd0 	bl	800d814 <UART_Start_Receive_DMA>
 800ce74:	4603      	mov	r3, r0
 800ce76:	e000      	b.n	800ce7a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800ce78:	2302      	movs	r3, #2
  }
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3710      	adds	r7, #16
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b08c      	sub	sp, #48	@ 0x30
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	60f8      	str	r0, [r7, #12]
 800ce8a:	60b9      	str	r1, [r7, #8]
 800ce8c:	4613      	mov	r3, r2
 800ce8e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	2b20      	cmp	r3, #32
 800ce9a:	d146      	bne.n	800cf2a <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d002      	beq.n	800cea8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800cea2:	88fb      	ldrh	r3, [r7, #6]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d101      	bne.n	800ceac <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800cea8:	2301      	movs	r3, #1
 800ceaa:	e03f      	b.n	800cf2c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800ceb8:	88fb      	ldrh	r3, [r7, #6]
 800ceba:	461a      	mov	r2, r3
 800cebc:	68b9      	ldr	r1, [r7, #8]
 800cebe:	68f8      	ldr	r0, [r7, #12]
 800cec0:	f000 fca8 	bl	800d814 <UART_Start_Receive_DMA>
 800cec4:	4603      	mov	r3, r0
 800cec6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cece:	2b01      	cmp	r3, #1
 800ced0:	d125      	bne.n	800cf1e <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ced2:	2300      	movs	r3, #0
 800ced4:	613b      	str	r3, [r7, #16]
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	613b      	str	r3, [r7, #16]
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	613b      	str	r3, [r7, #16]
 800cee6:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	330c      	adds	r3, #12
 800ceee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	e853 3f00 	ldrex	r3, [r3]
 800cef6:	617b      	str	r3, [r7, #20]
   return(result);
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	f043 0310 	orr.w	r3, r3, #16
 800cefe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	330c      	adds	r3, #12
 800cf06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf08:	627a      	str	r2, [r7, #36]	@ 0x24
 800cf0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf0c:	6a39      	ldr	r1, [r7, #32]
 800cf0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf10:	e841 2300 	strex	r3, r2, [r1]
 800cf14:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf16:	69fb      	ldr	r3, [r7, #28]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d1e5      	bne.n	800cee8 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800cf1c:	e002      	b.n	800cf24 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800cf1e:	2301      	movs	r3, #1
 800cf20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800cf24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cf28:	e000      	b.n	800cf2c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800cf2a:	2302      	movs	r3, #2
  }
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3730      	adds	r7, #48	@ 0x30
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b0ba      	sub	sp, #232	@ 0xe8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	695b      	ldr	r3, [r3, #20]
 800cf56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800cf60:	2300      	movs	r3, #0
 800cf62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cf66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf6a:	f003 030f 	and.w	r3, r3, #15
 800cf6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800cf72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d10f      	bne.n	800cf9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cf7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf7e:	f003 0320 	and.w	r3, r3, #32
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d009      	beq.n	800cf9a <HAL_UART_IRQHandler+0x66>
 800cf86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf8a:	f003 0320 	and.w	r3, r3, #32
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d003      	beq.n	800cf9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 fde8 	bl	800db68 <UART_Receive_IT>
      return;
 800cf98:	e273      	b.n	800d482 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800cf9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f000 80de 	beq.w	800d160 <HAL_UART_IRQHandler+0x22c>
 800cfa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cfa8:	f003 0301 	and.w	r3, r3, #1
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d106      	bne.n	800cfbe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cfb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cfb4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f000 80d1 	beq.w	800d160 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cfbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfc2:	f003 0301 	and.w	r3, r3, #1
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00b      	beq.n	800cfe2 <HAL_UART_IRQHandler+0xae>
 800cfca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cfce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d005      	beq.n	800cfe2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfda:	f043 0201 	orr.w	r2, r3, #1
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cfe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfe6:	f003 0304 	and.w	r3, r3, #4
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d00b      	beq.n	800d006 <HAL_UART_IRQHandler+0xd2>
 800cfee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cff2:	f003 0301 	and.w	r3, r3, #1
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d005      	beq.n	800d006 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cffe:	f043 0202 	orr.w	r2, r3, #2
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d00a:	f003 0302 	and.w	r3, r3, #2
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d00b      	beq.n	800d02a <HAL_UART_IRQHandler+0xf6>
 800d012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d016:	f003 0301 	and.w	r3, r3, #1
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d005      	beq.n	800d02a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d022:	f043 0204 	orr.w	r2, r3, #4
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d02a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d02e:	f003 0308 	and.w	r3, r3, #8
 800d032:	2b00      	cmp	r3, #0
 800d034:	d011      	beq.n	800d05a <HAL_UART_IRQHandler+0x126>
 800d036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d03a:	f003 0320 	and.w	r3, r3, #32
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d105      	bne.n	800d04e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d046:	f003 0301 	and.w	r3, r3, #1
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d005      	beq.n	800d05a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d052:	f043 0208 	orr.w	r2, r3, #8
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d05e:	2b00      	cmp	r3, #0
 800d060:	f000 820a 	beq.w	800d478 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d068:	f003 0320 	and.w	r3, r3, #32
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d008      	beq.n	800d082 <HAL_UART_IRQHandler+0x14e>
 800d070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d074:	f003 0320 	and.w	r3, r3, #32
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d002      	beq.n	800d082 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f000 fd73 	bl	800db68 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	695b      	ldr	r3, [r3, #20]
 800d088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d08c:	2b40      	cmp	r3, #64	@ 0x40
 800d08e:	bf0c      	ite	eq
 800d090:	2301      	moveq	r3, #1
 800d092:	2300      	movne	r3, #0
 800d094:	b2db      	uxtb	r3, r3
 800d096:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d09e:	f003 0308 	and.w	r3, r3, #8
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d103      	bne.n	800d0ae <HAL_UART_IRQHandler+0x17a>
 800d0a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d04f      	beq.n	800d14e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 fc7e 	bl	800d9b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	695b      	ldr	r3, [r3, #20]
 800d0ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0be:	2b40      	cmp	r3, #64	@ 0x40
 800d0c0:	d141      	bne.n	800d146 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	3314      	adds	r3, #20
 800d0c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d0d0:	e853 3f00 	ldrex	r3, [r3]
 800d0d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d0d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d0dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d0e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	3314      	adds	r3, #20
 800d0ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d0ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d0f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d0fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d0fe:	e841 2300 	strex	r3, r2, [r1]
 800d102:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d1d9      	bne.n	800d0c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d112:	2b00      	cmp	r3, #0
 800d114:	d013      	beq.n	800d13e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d11a:	4a8a      	ldr	r2, [pc, #552]	@ (800d344 <HAL_UART_IRQHandler+0x410>)
 800d11c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d122:	4618      	mov	r0, r3
 800d124:	f7fc fcf4 	bl	8009b10 <HAL_DMA_Abort_IT>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d016      	beq.n	800d15c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d138:	4610      	mov	r0, r2
 800d13a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d13c:	e00e      	b.n	800d15c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 f9ac 	bl	800d49c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d144:	e00a      	b.n	800d15c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 f9a8 	bl	800d49c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d14c:	e006      	b.n	800d15c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 f9a4 	bl	800d49c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2200      	movs	r2, #0
 800d158:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d15a:	e18d      	b.n	800d478 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d15c:	bf00      	nop
    return;
 800d15e:	e18b      	b.n	800d478 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d164:	2b01      	cmp	r3, #1
 800d166:	f040 8167 	bne.w	800d438 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d16a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d16e:	f003 0310 	and.w	r3, r3, #16
 800d172:	2b00      	cmp	r3, #0
 800d174:	f000 8160 	beq.w	800d438 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800d178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d17c:	f003 0310 	and.w	r3, r3, #16
 800d180:	2b00      	cmp	r3, #0
 800d182:	f000 8159 	beq.w	800d438 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d186:	2300      	movs	r3, #0
 800d188:	60bb      	str	r3, [r7, #8]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	60bb      	str	r3, [r7, #8]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	60bb      	str	r3, [r7, #8]
 800d19a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	695b      	ldr	r3, [r3, #20]
 800d1a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1a6:	2b40      	cmp	r3, #64	@ 0x40
 800d1a8:	f040 80ce 	bne.w	800d348 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d1b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f000 80a9 	beq.w	800d314 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d1c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	f080 80a2 	bcs.w	800d314 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d1d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1dc:	69db      	ldr	r3, [r3, #28]
 800d1de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1e2:	f000 8088 	beq.w	800d2f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	330c      	adds	r3, #12
 800d1ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d1f4:	e853 3f00 	ldrex	r3, [r3]
 800d1f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d1fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d204:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	330c      	adds	r3, #12
 800d20e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d212:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d216:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d21a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d21e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d222:	e841 2300 	strex	r3, r2, [r1]
 800d226:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d22a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1d9      	bne.n	800d1e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	3314      	adds	r3, #20
 800d238:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d23a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d23c:	e853 3f00 	ldrex	r3, [r3]
 800d240:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d242:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d244:	f023 0301 	bic.w	r3, r3, #1
 800d248:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	3314      	adds	r3, #20
 800d252:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d256:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d25a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d25c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d25e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d262:	e841 2300 	strex	r3, r2, [r1]
 800d266:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d268:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d1e1      	bne.n	800d232 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	3314      	adds	r3, #20
 800d274:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d276:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d278:	e853 3f00 	ldrex	r3, [r3]
 800d27c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d27e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d280:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d284:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	3314      	adds	r3, #20
 800d28e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d292:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d294:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d296:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d298:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d29a:	e841 2300 	strex	r3, r2, [r1]
 800d29e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d2a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d1e3      	bne.n	800d26e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2220      	movs	r2, #32
 800d2aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	330c      	adds	r3, #12
 800d2ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2be:	e853 3f00 	ldrex	r3, [r3]
 800d2c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d2c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2c6:	f023 0310 	bic.w	r3, r3, #16
 800d2ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	330c      	adds	r3, #12
 800d2d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d2d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d2da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d2de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d2e0:	e841 2300 	strex	r3, r2, [r1]
 800d2e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d2e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d1e3      	bne.n	800d2b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7fc fb9d 	bl	8009a30 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2202      	movs	r2, #2
 800d2fa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d304:	b29b      	uxth	r3, r3
 800d306:	1ad3      	subs	r3, r2, r3
 800d308:	b29b      	uxth	r3, r3
 800d30a:	4619      	mov	r1, r3
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f7f8 fb33 	bl	8005978 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d312:	e0b3      	b.n	800d47c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d318:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d31c:	429a      	cmp	r2, r3
 800d31e:	f040 80ad 	bne.w	800d47c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d326:	69db      	ldr	r3, [r3, #28]
 800d328:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d32c:	f040 80a6 	bne.w	800d47c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2202      	movs	r2, #2
 800d334:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d33a:	4619      	mov	r1, r3
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f7f8 fb1b 	bl	8005978 <HAL_UARTEx_RxEventCallback>
      return;
 800d342:	e09b      	b.n	800d47c <HAL_UART_IRQHandler+0x548>
 800d344:	0800da77 	.word	0x0800da77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d350:	b29b      	uxth	r3, r3
 800d352:	1ad3      	subs	r3, r2, r3
 800d354:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	2b00      	cmp	r3, #0
 800d360:	f000 808e 	beq.w	800d480 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800d364:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f000 8089 	beq.w	800d480 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	330c      	adds	r3, #12
 800d374:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d378:	e853 3f00 	ldrex	r3, [r3]
 800d37c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d37e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d380:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d384:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	330c      	adds	r3, #12
 800d38e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d392:	647a      	str	r2, [r7, #68]	@ 0x44
 800d394:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d396:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d398:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d39a:	e841 2300 	strex	r3, r2, [r1]
 800d39e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d3a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d1e3      	bne.n	800d36e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	3314      	adds	r3, #20
 800d3ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b0:	e853 3f00 	ldrex	r3, [r3]
 800d3b4:	623b      	str	r3, [r7, #32]
   return(result);
 800d3b6:	6a3b      	ldr	r3, [r7, #32]
 800d3b8:	f023 0301 	bic.w	r3, r3, #1
 800d3bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	3314      	adds	r3, #20
 800d3c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d3ca:	633a      	str	r2, [r7, #48]	@ 0x30
 800d3cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d3d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3d2:	e841 2300 	strex	r3, r2, [r1]
 800d3d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d3d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d1e3      	bne.n	800d3a6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2220      	movs	r2, #32
 800d3e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	330c      	adds	r3, #12
 800d3f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	e853 3f00 	ldrex	r3, [r3]
 800d3fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f023 0310 	bic.w	r3, r3, #16
 800d402:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	330c      	adds	r3, #12
 800d40c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d410:	61fa      	str	r2, [r7, #28]
 800d412:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d414:	69b9      	ldr	r1, [r7, #24]
 800d416:	69fa      	ldr	r2, [r7, #28]
 800d418:	e841 2300 	strex	r3, r2, [r1]
 800d41c:	617b      	str	r3, [r7, #20]
   return(result);
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d1e3      	bne.n	800d3ec <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2202      	movs	r2, #2
 800d428:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d42a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d42e:	4619      	mov	r1, r3
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f7f8 faa1 	bl	8005978 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d436:	e023      	b.n	800d480 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d43c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d440:	2b00      	cmp	r3, #0
 800d442:	d009      	beq.n	800d458 <HAL_UART_IRQHandler+0x524>
 800d444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d003      	beq.n	800d458 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 fb21 	bl	800da98 <UART_Transmit_IT>
    return;
 800d456:	e014      	b.n	800d482 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d45c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00e      	beq.n	800d482 <HAL_UART_IRQHandler+0x54e>
 800d464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d008      	beq.n	800d482 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 fb61 	bl	800db38 <UART_EndTransmit_IT>
    return;
 800d476:	e004      	b.n	800d482 <HAL_UART_IRQHandler+0x54e>
    return;
 800d478:	bf00      	nop
 800d47a:	e002      	b.n	800d482 <HAL_UART_IRQHandler+0x54e>
      return;
 800d47c:	bf00      	nop
 800d47e:	e000      	b.n	800d482 <HAL_UART_IRQHandler+0x54e>
      return;
 800d480:	bf00      	nop
  }
}
 800d482:	37e8      	adds	r7, #232	@ 0xe8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d4a4:	bf00      	nop
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b090      	sub	sp, #64	@ 0x40
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d137      	bne.n	800d53c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800d4cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d4d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	3314      	adds	r3, #20
 800d4d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4dc:	e853 3f00 	ldrex	r3, [r3]
 800d4e0:	623b      	str	r3, [r7, #32]
   return(result);
 800d4e2:	6a3b      	ldr	r3, [r7, #32]
 800d4e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d4e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d4ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	3314      	adds	r3, #20
 800d4f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4f2:	633a      	str	r2, [r7, #48]	@ 0x30
 800d4f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4fa:	e841 2300 	strex	r3, r2, [r1]
 800d4fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d502:	2b00      	cmp	r3, #0
 800d504:	d1e5      	bne.n	800d4d2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	330c      	adds	r3, #12
 800d50c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	e853 3f00 	ldrex	r3, [r3]
 800d514:	60fb      	str	r3, [r7, #12]
   return(result);
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d51c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d51e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	330c      	adds	r3, #12
 800d524:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d526:	61fa      	str	r2, [r7, #28]
 800d528:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d52a:	69b9      	ldr	r1, [r7, #24]
 800d52c:	69fa      	ldr	r2, [r7, #28]
 800d52e:	e841 2300 	strex	r3, r2, [r1]
 800d532:	617b      	str	r3, [r7, #20]
   return(result);
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d1e5      	bne.n	800d506 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d53a:	e002      	b.n	800d542 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d53c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d53e:	f7f8 fa61 	bl	8005a04 <HAL_UART_TxCpltCallback>
}
 800d542:	bf00      	nop
 800d544:	3740      	adds	r7, #64	@ 0x40
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}

0800d54a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d54a:	b580      	push	{r7, lr}
 800d54c:	b084      	sub	sp, #16
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d556:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d558:	68f8      	ldr	r0, [r7, #12]
 800d55a:	f7ff ff95 	bl	800d488 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d55e:	bf00      	nop
 800d560:	3710      	adds	r7, #16
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}

0800d566 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b09c      	sub	sp, #112	@ 0x70
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d572:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d172      	bne.n	800d668 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800d582:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d584:	2200      	movs	r2, #0
 800d586:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d588:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	330c      	adds	r3, #12
 800d58e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d592:	e853 3f00 	ldrex	r3, [r3]
 800d596:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d598:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d59a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d59e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d5a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	330c      	adds	r3, #12
 800d5a6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d5a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d5aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d5ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d5b0:	e841 2300 	strex	r3, r2, [r1]
 800d5b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d5b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d1e5      	bne.n	800d588 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	3314      	adds	r3, #20
 800d5c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5c6:	e853 3f00 	ldrex	r3, [r3]
 800d5ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d5cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5ce:	f023 0301 	bic.w	r3, r3, #1
 800d5d2:	667b      	str	r3, [r7, #100]	@ 0x64
 800d5d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	3314      	adds	r3, #20
 800d5da:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d5dc:	647a      	str	r2, [r7, #68]	@ 0x44
 800d5de:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d5e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5e4:	e841 2300 	strex	r3, r2, [r1]
 800d5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d5ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d1e5      	bne.n	800d5bc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d5f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	3314      	adds	r3, #20
 800d5f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5fa:	e853 3f00 	ldrex	r3, [r3]
 800d5fe:	623b      	str	r3, [r7, #32]
   return(result);
 800d600:	6a3b      	ldr	r3, [r7, #32]
 800d602:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d606:	663b      	str	r3, [r7, #96]	@ 0x60
 800d608:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	3314      	adds	r3, #20
 800d60e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d610:	633a      	str	r2, [r7, #48]	@ 0x30
 800d612:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d614:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d618:	e841 2300 	strex	r3, r2, [r1]
 800d61c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d620:	2b00      	cmp	r3, #0
 800d622:	d1e5      	bne.n	800d5f0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d626:	2220      	movs	r2, #32
 800d628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d62c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d62e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d630:	2b01      	cmp	r3, #1
 800d632:	d119      	bne.n	800d668 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d634:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	330c      	adds	r3, #12
 800d63a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	e853 3f00 	ldrex	r3, [r3]
 800d642:	60fb      	str	r3, [r7, #12]
   return(result);
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f023 0310 	bic.w	r3, r3, #16
 800d64a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d64c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	330c      	adds	r3, #12
 800d652:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d654:	61fa      	str	r2, [r7, #28]
 800d656:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d658:	69b9      	ldr	r1, [r7, #24]
 800d65a:	69fa      	ldr	r2, [r7, #28]
 800d65c:	e841 2300 	strex	r3, r2, [r1]
 800d660:	617b      	str	r3, [r7, #20]
   return(result);
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d1e5      	bne.n	800d634 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d668:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d66a:	2200      	movs	r2, #0
 800d66c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d66e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d672:	2b01      	cmp	r3, #1
 800d674:	d106      	bne.n	800d684 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d676:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d678:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d67a:	4619      	mov	r1, r3
 800d67c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d67e:	f7f8 f97b 	bl	8005978 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d682:	e002      	b.n	800d68a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800d684:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d686:	f7f7 f8a7 	bl	80047d8 <HAL_UART_RxCpltCallback>
}
 800d68a:	bf00      	nop
 800d68c:	3770      	adds	r7, #112	@ 0x70
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}

0800d692 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d692:	b580      	push	{r7, lr}
 800d694:	b084      	sub	sp, #16
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d69e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6aa:	2b01      	cmp	r3, #1
 800d6ac:	d108      	bne.n	800d6c0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d6b2:	085b      	lsrs	r3, r3, #1
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	68f8      	ldr	r0, [r7, #12]
 800d6ba:	f7f8 f95d 	bl	8005978 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d6be:	e002      	b.n	800d6c6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800d6c0:	68f8      	ldr	r0, [r7, #12]
 800d6c2:	f7f7 f873 	bl	80047ac <HAL_UART_RxHalfCpltCallback>
}
 800d6c6:	bf00      	nop
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}

0800d6ce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d6ce:	b580      	push	{r7, lr}
 800d6d0:	b084      	sub	sp, #16
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6de:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	695b      	ldr	r3, [r3, #20]
 800d6e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6ea:	2b80      	cmp	r3, #128	@ 0x80
 800d6ec:	bf0c      	ite	eq
 800d6ee:	2301      	moveq	r3, #1
 800d6f0:	2300      	movne	r3, #0
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	2b21      	cmp	r3, #33	@ 0x21
 800d700:	d108      	bne.n	800d714 <UART_DMAError+0x46>
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d005      	beq.n	800d714 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	2200      	movs	r2, #0
 800d70c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800d70e:	68b8      	ldr	r0, [r7, #8]
 800d710:	f000 f926 	bl	800d960 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	695b      	ldr	r3, [r3, #20]
 800d71a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d71e:	2b40      	cmp	r3, #64	@ 0x40
 800d720:	bf0c      	ite	eq
 800d722:	2301      	moveq	r3, #1
 800d724:	2300      	movne	r3, #0
 800d726:	b2db      	uxtb	r3, r3
 800d728:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d730:	b2db      	uxtb	r3, r3
 800d732:	2b22      	cmp	r3, #34	@ 0x22
 800d734:	d108      	bne.n	800d748 <UART_DMAError+0x7a>
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d005      	beq.n	800d748 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	2200      	movs	r2, #0
 800d740:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800d742:	68b8      	ldr	r0, [r7, #8]
 800d744:	f000 f934 	bl	800d9b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d74c:	f043 0210 	orr.w	r2, r3, #16
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d754:	68b8      	ldr	r0, [r7, #8]
 800d756:	f7ff fea1 	bl	800d49c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d75a:	bf00      	nop
 800d75c:	3710      	adds	r7, #16
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}

0800d762 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d762:	b580      	push	{r7, lr}
 800d764:	b086      	sub	sp, #24
 800d766:	af00      	add	r7, sp, #0
 800d768:	60f8      	str	r0, [r7, #12]
 800d76a:	60b9      	str	r1, [r7, #8]
 800d76c:	603b      	str	r3, [r7, #0]
 800d76e:	4613      	mov	r3, r2
 800d770:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d772:	e03b      	b.n	800d7ec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d774:	6a3b      	ldr	r3, [r7, #32]
 800d776:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d77a:	d037      	beq.n	800d7ec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d77c:	f7fb fa5a 	bl	8008c34 <HAL_GetTick>
 800d780:	4602      	mov	r2, r0
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	1ad3      	subs	r3, r2, r3
 800d786:	6a3a      	ldr	r2, [r7, #32]
 800d788:	429a      	cmp	r2, r3
 800d78a:	d302      	bcc.n	800d792 <UART_WaitOnFlagUntilTimeout+0x30>
 800d78c:	6a3b      	ldr	r3, [r7, #32]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d101      	bne.n	800d796 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d792:	2303      	movs	r3, #3
 800d794:	e03a      	b.n	800d80c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	68db      	ldr	r3, [r3, #12]
 800d79c:	f003 0304 	and.w	r3, r3, #4
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d023      	beq.n	800d7ec <UART_WaitOnFlagUntilTimeout+0x8a>
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	2b80      	cmp	r3, #128	@ 0x80
 800d7a8:	d020      	beq.n	800d7ec <UART_WaitOnFlagUntilTimeout+0x8a>
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	2b40      	cmp	r3, #64	@ 0x40
 800d7ae:	d01d      	beq.n	800d7ec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f003 0308 	and.w	r3, r3, #8
 800d7ba:	2b08      	cmp	r3, #8
 800d7bc:	d116      	bne.n	800d7ec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800d7be:	2300      	movs	r3, #0
 800d7c0:	617b      	str	r3, [r7, #20]
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	617b      	str	r3, [r7, #20]
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	617b      	str	r3, [r7, #20]
 800d7d2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f000 f8eb 	bl	800d9b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2208      	movs	r2, #8
 800d7de:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	e00f      	b.n	800d80c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	4013      	ands	r3, r2
 800d7f6:	68ba      	ldr	r2, [r7, #8]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	bf0c      	ite	eq
 800d7fc:	2301      	moveq	r3, #1
 800d7fe:	2300      	movne	r3, #0
 800d800:	b2db      	uxtb	r3, r3
 800d802:	461a      	mov	r2, r3
 800d804:	79fb      	ldrb	r3, [r7, #7]
 800d806:	429a      	cmp	r2, r3
 800d808:	d0b4      	beq.n	800d774 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d80a:	2300      	movs	r3, #0
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3718      	adds	r7, #24
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b098      	sub	sp, #96	@ 0x60
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	4613      	mov	r3, r2
 800d820:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800d822:	68ba      	ldr	r2, [r7, #8]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	88fa      	ldrh	r2, [r7, #6]
 800d82c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2200      	movs	r2, #0
 800d832:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2222      	movs	r2, #34	@ 0x22
 800d838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d840:	4a44      	ldr	r2, [pc, #272]	@ (800d954 <UART_Start_Receive_DMA+0x140>)
 800d842:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d848:	4a43      	ldr	r2, [pc, #268]	@ (800d958 <UART_Start_Receive_DMA+0x144>)
 800d84a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d850:	4a42      	ldr	r2, [pc, #264]	@ (800d95c <UART_Start_Receive_DMA+0x148>)
 800d852:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d858:	2200      	movs	r2, #0
 800d85a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800d85c:	f107 0308 	add.w	r3, r7, #8
 800d860:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	3304      	adds	r3, #4
 800d86c:	4619      	mov	r1, r3
 800d86e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d870:	681a      	ldr	r2, [r3, #0]
 800d872:	88fb      	ldrh	r3, [r7, #6]
 800d874:	f7fc f884 	bl	8009980 <HAL_DMA_Start_IT>
 800d878:	4603      	mov	r3, r0
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d008      	beq.n	800d890 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2210      	movs	r2, #16
 800d882:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2220      	movs	r2, #32
 800d888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800d88c:	2301      	movs	r3, #1
 800d88e:	e05d      	b.n	800d94c <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800d890:	2300      	movs	r3, #0
 800d892:	613b      	str	r3, [r7, #16]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	613b      	str	r3, [r7, #16]
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	685b      	ldr	r3, [r3, #4]
 800d8a2:	613b      	str	r3, [r7, #16]
 800d8a4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	691b      	ldr	r3, [r3, #16]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d019      	beq.n	800d8e2 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	330c      	adds	r3, #12
 800d8b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8b8:	e853 3f00 	ldrex	r3, [r3]
 800d8bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d8be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d8c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	330c      	adds	r3, #12
 800d8cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d8ce:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800d8d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d8d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d8d6:	e841 2300 	strex	r3, r2, [r1]
 800d8da:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d8dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d1e5      	bne.n	800d8ae <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	3314      	adds	r3, #20
 800d8e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ec:	e853 3f00 	ldrex	r3, [r3]
 800d8f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8f4:	f043 0301 	orr.w	r3, r3, #1
 800d8f8:	657b      	str	r3, [r7, #84]	@ 0x54
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	3314      	adds	r3, #20
 800d900:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d902:	63ba      	str	r2, [r7, #56]	@ 0x38
 800d904:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d906:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d908:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d90a:	e841 2300 	strex	r3, r2, [r1]
 800d90e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d912:	2b00      	cmp	r3, #0
 800d914:	d1e5      	bne.n	800d8e2 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	3314      	adds	r3, #20
 800d91c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	e853 3f00 	ldrex	r3, [r3]
 800d924:	617b      	str	r3, [r7, #20]
   return(result);
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d92c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	3314      	adds	r3, #20
 800d934:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d936:	627a      	str	r2, [r7, #36]	@ 0x24
 800d938:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d93a:	6a39      	ldr	r1, [r7, #32]
 800d93c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d93e:	e841 2300 	strex	r3, r2, [r1]
 800d942:	61fb      	str	r3, [r7, #28]
   return(result);
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d1e5      	bne.n	800d916 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800d94a:	2300      	movs	r3, #0
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3760      	adds	r7, #96	@ 0x60
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}
 800d954:	0800d567 	.word	0x0800d567
 800d958:	0800d693 	.word	0x0800d693
 800d95c:	0800d6cf 	.word	0x0800d6cf

0800d960 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d960:	b480      	push	{r7}
 800d962:	b089      	sub	sp, #36	@ 0x24
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	330c      	adds	r3, #12
 800d96e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	e853 3f00 	ldrex	r3, [r3]
 800d976:	60bb      	str	r3, [r7, #8]
   return(result);
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d97e:	61fb      	str	r3, [r7, #28]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	330c      	adds	r3, #12
 800d986:	69fa      	ldr	r2, [r7, #28]
 800d988:	61ba      	str	r2, [r7, #24]
 800d98a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d98c:	6979      	ldr	r1, [r7, #20]
 800d98e:	69ba      	ldr	r2, [r7, #24]
 800d990:	e841 2300 	strex	r3, r2, [r1]
 800d994:	613b      	str	r3, [r7, #16]
   return(result);
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d1e5      	bne.n	800d968 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2220      	movs	r2, #32
 800d9a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800d9a4:	bf00      	nop
 800d9a6:	3724      	adds	r7, #36	@ 0x24
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr

0800d9b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b095      	sub	sp, #84	@ 0x54
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	330c      	adds	r3, #12
 800d9be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9c2:	e853 3f00 	ldrex	r3, [r3]
 800d9c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d9c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d9ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	330c      	adds	r3, #12
 800d9d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d9d8:	643a      	str	r2, [r7, #64]	@ 0x40
 800d9da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d9de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d9e0:	e841 2300 	strex	r3, r2, [r1]
 800d9e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d1e5      	bne.n	800d9b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	3314      	adds	r3, #20
 800d9f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9f4:	6a3b      	ldr	r3, [r7, #32]
 800d9f6:	e853 3f00 	ldrex	r3, [r3]
 800d9fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800d9fc:	69fb      	ldr	r3, [r7, #28]
 800d9fe:	f023 0301 	bic.w	r3, r3, #1
 800da02:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	3314      	adds	r3, #20
 800da0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800da0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800da12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da14:	e841 2300 	strex	r3, r2, [r1]
 800da18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800da1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d1e5      	bne.n	800d9ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da24:	2b01      	cmp	r3, #1
 800da26:	d119      	bne.n	800da5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	330c      	adds	r3, #12
 800da2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	e853 3f00 	ldrex	r3, [r3]
 800da36:	60bb      	str	r3, [r7, #8]
   return(result);
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	f023 0310 	bic.w	r3, r3, #16
 800da3e:	647b      	str	r3, [r7, #68]	@ 0x44
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	330c      	adds	r3, #12
 800da46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da48:	61ba      	str	r2, [r7, #24]
 800da4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da4c:	6979      	ldr	r1, [r7, #20]
 800da4e:	69ba      	ldr	r2, [r7, #24]
 800da50:	e841 2300 	strex	r3, r2, [r1]
 800da54:	613b      	str	r3, [r7, #16]
   return(result);
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d1e5      	bne.n	800da28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2220      	movs	r2, #32
 800da60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2200      	movs	r2, #0
 800da68:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800da6a:	bf00      	nop
 800da6c:	3754      	adds	r7, #84	@ 0x54
 800da6e:	46bd      	mov	sp, r7
 800da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da74:	4770      	bx	lr

0800da76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800da76:	b580      	push	{r7, lr}
 800da78:	b084      	sub	sp, #16
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	2200      	movs	r2, #0
 800da88:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da8a:	68f8      	ldr	r0, [r7, #12]
 800da8c:	f7ff fd06 	bl	800d49c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da90:	bf00      	nop
 800da92:	3710      	adds	r7, #16
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800da98:	b480      	push	{r7}
 800da9a:	b085      	sub	sp, #20
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	2b21      	cmp	r3, #33	@ 0x21
 800daaa:	d13e      	bne.n	800db2a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	689b      	ldr	r3, [r3, #8]
 800dab0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dab4:	d114      	bne.n	800dae0 <UART_Transmit_IT+0x48>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	691b      	ldr	r3, [r3, #16]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d110      	bne.n	800dae0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6a1b      	ldr	r3, [r3, #32]
 800dac2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	881b      	ldrh	r3, [r3, #0]
 800dac8:	461a      	mov	r2, r3
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dad2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6a1b      	ldr	r3, [r3, #32]
 800dad8:	1c9a      	adds	r2, r3, #2
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	621a      	str	r2, [r3, #32]
 800dade:	e008      	b.n	800daf2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6a1b      	ldr	r3, [r3, #32]
 800dae4:	1c59      	adds	r1, r3, #1
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	6211      	str	r1, [r2, #32]
 800daea:	781a      	ldrb	r2, [r3, #0]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	3b01      	subs	r3, #1
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	4619      	mov	r1, r3
 800db00:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800db02:	2b00      	cmp	r3, #0
 800db04:	d10f      	bne.n	800db26 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	68da      	ldr	r2, [r3, #12]
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800db14:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	68da      	ldr	r2, [r3, #12]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800db24:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800db26:	2300      	movs	r3, #0
 800db28:	e000      	b.n	800db2c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800db2a:	2302      	movs	r3, #2
  }
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3714      	adds	r7, #20
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	68da      	ldr	r2, [r3, #12]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800db4e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2220      	movs	r2, #32
 800db54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f7f7 ff53 	bl	8005a04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800db5e:	2300      	movs	r3, #0
}
 800db60:	4618      	mov	r0, r3
 800db62:	3708      	adds	r7, #8
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b08c      	sub	sp, #48	@ 0x30
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800db70:	2300      	movs	r3, #0
 800db72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800db74:	2300      	movs	r3, #0
 800db76:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800db7e:	b2db      	uxtb	r3, r3
 800db80:	2b22      	cmp	r3, #34	@ 0x22
 800db82:	f040 80aa 	bne.w	800dcda <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	689b      	ldr	r3, [r3, #8]
 800db8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db8e:	d115      	bne.n	800dbbc <UART_Receive_IT+0x54>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	691b      	ldr	r3, [r3, #16]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d111      	bne.n	800dbbc <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db9c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	b29b      	uxth	r3, r3
 800dba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbaa:	b29a      	uxth	r2, r3
 800dbac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbb4:	1c9a      	adds	r2, r3, #2
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	629a      	str	r2, [r3, #40]	@ 0x28
 800dbba:	e024      	b.n	800dc06 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	689b      	ldr	r3, [r3, #8]
 800dbc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dbca:	d007      	beq.n	800dbdc <UART_Receive_IT+0x74>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	689b      	ldr	r3, [r3, #8]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d10a      	bne.n	800dbea <UART_Receive_IT+0x82>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	691b      	ldr	r3, [r3, #16]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d106      	bne.n	800dbea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	b2da      	uxtb	r2, r3
 800dbe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbe6:	701a      	strb	r2, [r3, #0]
 800dbe8:	e008      	b.n	800dbfc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	b2db      	uxtb	r3, r3
 800dbf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dbf6:	b2da      	uxtb	r2, r3
 800dbf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbfa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc00:	1c5a      	adds	r2, r3, #1
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	3b01      	subs	r3, #1
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	687a      	ldr	r2, [r7, #4]
 800dc12:	4619      	mov	r1, r3
 800dc14:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d15d      	bne.n	800dcd6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	68da      	ldr	r2, [r3, #12]
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f022 0220 	bic.w	r2, r2, #32
 800dc28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	68da      	ldr	r2, [r3, #12]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800dc38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	695a      	ldr	r2, [r3, #20]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f022 0201 	bic.w	r2, r2, #1
 800dc48:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2220      	movs	r2, #32
 800dc4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2200      	movs	r2, #0
 800dc56:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d135      	bne.n	800dccc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	330c      	adds	r3, #12
 800dc6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	e853 3f00 	ldrex	r3, [r3]
 800dc74:	613b      	str	r3, [r7, #16]
   return(result);
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	f023 0310 	bic.w	r3, r3, #16
 800dc7c:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	330c      	adds	r3, #12
 800dc84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc86:	623a      	str	r2, [r7, #32]
 800dc88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc8a:	69f9      	ldr	r1, [r7, #28]
 800dc8c:	6a3a      	ldr	r2, [r7, #32]
 800dc8e:	e841 2300 	strex	r3, r2, [r1]
 800dc92:	61bb      	str	r3, [r7, #24]
   return(result);
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d1e5      	bne.n	800dc66 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f003 0310 	and.w	r3, r3, #16
 800dca4:	2b10      	cmp	r3, #16
 800dca6:	d10a      	bne.n	800dcbe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dca8:	2300      	movs	r3, #0
 800dcaa:	60fb      	str	r3, [r7, #12]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	60fb      	str	r3, [r7, #12]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	60fb      	str	r3, [r7, #12]
 800dcbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f7f7 fe57 	bl	8005978 <HAL_UARTEx_RxEventCallback>
 800dcca:	e002      	b.n	800dcd2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f7f6 fd83 	bl	80047d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	e002      	b.n	800dcdc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	e000      	b.n	800dcdc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800dcda:	2302      	movs	r3, #2
  }
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3730      	adds	r7, #48	@ 0x30
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dce8:	b0c0      	sub	sp, #256	@ 0x100
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dcf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	691b      	ldr	r3, [r3, #16]
 800dcf8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800dcfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd00:	68d9      	ldr	r1, [r3, #12]
 800dd02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd06:	681a      	ldr	r2, [r3, #0]
 800dd08:	ea40 0301 	orr.w	r3, r0, r1
 800dd0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800dd0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd12:	689a      	ldr	r2, [r3, #8]
 800dd14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd18:	691b      	ldr	r3, [r3, #16]
 800dd1a:	431a      	orrs	r2, r3
 800dd1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd20:	695b      	ldr	r3, [r3, #20]
 800dd22:	431a      	orrs	r2, r3
 800dd24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd28:	69db      	ldr	r3, [r3, #28]
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800dd30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	68db      	ldr	r3, [r3, #12]
 800dd38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800dd3c:	f021 010c 	bic.w	r1, r1, #12
 800dd40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd44:	681a      	ldr	r2, [r3, #0]
 800dd46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800dd4a:	430b      	orrs	r3, r1
 800dd4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dd4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	695b      	ldr	r3, [r3, #20]
 800dd56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800dd5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd5e:	6999      	ldr	r1, [r3, #24]
 800dd60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd64:	681a      	ldr	r2, [r3, #0]
 800dd66:	ea40 0301 	orr.w	r3, r0, r1
 800dd6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dd6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd70:	681a      	ldr	r2, [r3, #0]
 800dd72:	4b8f      	ldr	r3, [pc, #572]	@ (800dfb0 <UART_SetConfig+0x2cc>)
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d005      	beq.n	800dd84 <UART_SetConfig+0xa0>
 800dd78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd7c:	681a      	ldr	r2, [r3, #0]
 800dd7e:	4b8d      	ldr	r3, [pc, #564]	@ (800dfb4 <UART_SetConfig+0x2d0>)
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d104      	bne.n	800dd8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800dd84:	f7fd fd7c 	bl	800b880 <HAL_RCC_GetPCLK2Freq>
 800dd88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800dd8c:	e003      	b.n	800dd96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800dd8e:	f7fd fd63 	bl	800b858 <HAL_RCC_GetPCLK1Freq>
 800dd92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd9a:	69db      	ldr	r3, [r3, #28]
 800dd9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dda0:	f040 810c 	bne.w	800dfbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dda4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dda8:	2200      	movs	r2, #0
 800ddaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ddae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ddb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ddb6:	4622      	mov	r2, r4
 800ddb8:	462b      	mov	r3, r5
 800ddba:	1891      	adds	r1, r2, r2
 800ddbc:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ddbe:	415b      	adcs	r3, r3
 800ddc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ddc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ddc6:	4621      	mov	r1, r4
 800ddc8:	eb12 0801 	adds.w	r8, r2, r1
 800ddcc:	4629      	mov	r1, r5
 800ddce:	eb43 0901 	adc.w	r9, r3, r1
 800ddd2:	f04f 0200 	mov.w	r2, #0
 800ddd6:	f04f 0300 	mov.w	r3, #0
 800ddda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ddde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dde2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dde6:	4690      	mov	r8, r2
 800dde8:	4699      	mov	r9, r3
 800ddea:	4623      	mov	r3, r4
 800ddec:	eb18 0303 	adds.w	r3, r8, r3
 800ddf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ddf4:	462b      	mov	r3, r5
 800ddf6:	eb49 0303 	adc.w	r3, r9, r3
 800ddfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ddfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	2200      	movs	r2, #0
 800de06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800de0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800de0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800de12:	460b      	mov	r3, r1
 800de14:	18db      	adds	r3, r3, r3
 800de16:	653b      	str	r3, [r7, #80]	@ 0x50
 800de18:	4613      	mov	r3, r2
 800de1a:	eb42 0303 	adc.w	r3, r2, r3
 800de1e:	657b      	str	r3, [r7, #84]	@ 0x54
 800de20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800de24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800de28:	f7f3 f8ac 	bl	8000f84 <__aeabi_uldivmod>
 800de2c:	4602      	mov	r2, r0
 800de2e:	460b      	mov	r3, r1
 800de30:	4b61      	ldr	r3, [pc, #388]	@ (800dfb8 <UART_SetConfig+0x2d4>)
 800de32:	fba3 2302 	umull	r2, r3, r3, r2
 800de36:	095b      	lsrs	r3, r3, #5
 800de38:	011c      	lsls	r4, r3, #4
 800de3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800de3e:	2200      	movs	r2, #0
 800de40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800de44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800de48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800de4c:	4642      	mov	r2, r8
 800de4e:	464b      	mov	r3, r9
 800de50:	1891      	adds	r1, r2, r2
 800de52:	64b9      	str	r1, [r7, #72]	@ 0x48
 800de54:	415b      	adcs	r3, r3
 800de56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800de58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800de5c:	4641      	mov	r1, r8
 800de5e:	eb12 0a01 	adds.w	sl, r2, r1
 800de62:	4649      	mov	r1, r9
 800de64:	eb43 0b01 	adc.w	fp, r3, r1
 800de68:	f04f 0200 	mov.w	r2, #0
 800de6c:	f04f 0300 	mov.w	r3, #0
 800de70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800de74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800de78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800de7c:	4692      	mov	sl, r2
 800de7e:	469b      	mov	fp, r3
 800de80:	4643      	mov	r3, r8
 800de82:	eb1a 0303 	adds.w	r3, sl, r3
 800de86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800de8a:	464b      	mov	r3, r9
 800de8c:	eb4b 0303 	adc.w	r3, fp, r3
 800de90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800de94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	2200      	movs	r2, #0
 800de9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dea0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800dea4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800dea8:	460b      	mov	r3, r1
 800deaa:	18db      	adds	r3, r3, r3
 800deac:	643b      	str	r3, [r7, #64]	@ 0x40
 800deae:	4613      	mov	r3, r2
 800deb0:	eb42 0303 	adc.w	r3, r2, r3
 800deb4:	647b      	str	r3, [r7, #68]	@ 0x44
 800deb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800deba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800debe:	f7f3 f861 	bl	8000f84 <__aeabi_uldivmod>
 800dec2:	4602      	mov	r2, r0
 800dec4:	460b      	mov	r3, r1
 800dec6:	4611      	mov	r1, r2
 800dec8:	4b3b      	ldr	r3, [pc, #236]	@ (800dfb8 <UART_SetConfig+0x2d4>)
 800deca:	fba3 2301 	umull	r2, r3, r3, r1
 800dece:	095b      	lsrs	r3, r3, #5
 800ded0:	2264      	movs	r2, #100	@ 0x64
 800ded2:	fb02 f303 	mul.w	r3, r2, r3
 800ded6:	1acb      	subs	r3, r1, r3
 800ded8:	00db      	lsls	r3, r3, #3
 800deda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800dede:	4b36      	ldr	r3, [pc, #216]	@ (800dfb8 <UART_SetConfig+0x2d4>)
 800dee0:	fba3 2302 	umull	r2, r3, r3, r2
 800dee4:	095b      	lsrs	r3, r3, #5
 800dee6:	005b      	lsls	r3, r3, #1
 800dee8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800deec:	441c      	add	r4, r3
 800deee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800def2:	2200      	movs	r2, #0
 800def4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800def8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800defc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800df00:	4642      	mov	r2, r8
 800df02:	464b      	mov	r3, r9
 800df04:	1891      	adds	r1, r2, r2
 800df06:	63b9      	str	r1, [r7, #56]	@ 0x38
 800df08:	415b      	adcs	r3, r3
 800df0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800df0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800df10:	4641      	mov	r1, r8
 800df12:	1851      	adds	r1, r2, r1
 800df14:	6339      	str	r1, [r7, #48]	@ 0x30
 800df16:	4649      	mov	r1, r9
 800df18:	414b      	adcs	r3, r1
 800df1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800df1c:	f04f 0200 	mov.w	r2, #0
 800df20:	f04f 0300 	mov.w	r3, #0
 800df24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800df28:	4659      	mov	r1, fp
 800df2a:	00cb      	lsls	r3, r1, #3
 800df2c:	4651      	mov	r1, sl
 800df2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800df32:	4651      	mov	r1, sl
 800df34:	00ca      	lsls	r2, r1, #3
 800df36:	4610      	mov	r0, r2
 800df38:	4619      	mov	r1, r3
 800df3a:	4603      	mov	r3, r0
 800df3c:	4642      	mov	r2, r8
 800df3e:	189b      	adds	r3, r3, r2
 800df40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800df44:	464b      	mov	r3, r9
 800df46:	460a      	mov	r2, r1
 800df48:	eb42 0303 	adc.w	r3, r2, r3
 800df4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800df50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df54:	685b      	ldr	r3, [r3, #4]
 800df56:	2200      	movs	r2, #0
 800df58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800df5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800df60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800df64:	460b      	mov	r3, r1
 800df66:	18db      	adds	r3, r3, r3
 800df68:	62bb      	str	r3, [r7, #40]	@ 0x28
 800df6a:	4613      	mov	r3, r2
 800df6c:	eb42 0303 	adc.w	r3, r2, r3
 800df70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800df76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800df7a:	f7f3 f803 	bl	8000f84 <__aeabi_uldivmod>
 800df7e:	4602      	mov	r2, r0
 800df80:	460b      	mov	r3, r1
 800df82:	4b0d      	ldr	r3, [pc, #52]	@ (800dfb8 <UART_SetConfig+0x2d4>)
 800df84:	fba3 1302 	umull	r1, r3, r3, r2
 800df88:	095b      	lsrs	r3, r3, #5
 800df8a:	2164      	movs	r1, #100	@ 0x64
 800df8c:	fb01 f303 	mul.w	r3, r1, r3
 800df90:	1ad3      	subs	r3, r2, r3
 800df92:	00db      	lsls	r3, r3, #3
 800df94:	3332      	adds	r3, #50	@ 0x32
 800df96:	4a08      	ldr	r2, [pc, #32]	@ (800dfb8 <UART_SetConfig+0x2d4>)
 800df98:	fba2 2303 	umull	r2, r3, r2, r3
 800df9c:	095b      	lsrs	r3, r3, #5
 800df9e:	f003 0207 	and.w	r2, r3, #7
 800dfa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	4422      	add	r2, r4
 800dfaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800dfac:	e106      	b.n	800e1bc <UART_SetConfig+0x4d8>
 800dfae:	bf00      	nop
 800dfb0:	40011000 	.word	0x40011000
 800dfb4:	40011400 	.word	0x40011400
 800dfb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dfbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dfc6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800dfca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800dfce:	4642      	mov	r2, r8
 800dfd0:	464b      	mov	r3, r9
 800dfd2:	1891      	adds	r1, r2, r2
 800dfd4:	6239      	str	r1, [r7, #32]
 800dfd6:	415b      	adcs	r3, r3
 800dfd8:	627b      	str	r3, [r7, #36]	@ 0x24
 800dfda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dfde:	4641      	mov	r1, r8
 800dfe0:	1854      	adds	r4, r2, r1
 800dfe2:	4649      	mov	r1, r9
 800dfe4:	eb43 0501 	adc.w	r5, r3, r1
 800dfe8:	f04f 0200 	mov.w	r2, #0
 800dfec:	f04f 0300 	mov.w	r3, #0
 800dff0:	00eb      	lsls	r3, r5, #3
 800dff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dff6:	00e2      	lsls	r2, r4, #3
 800dff8:	4614      	mov	r4, r2
 800dffa:	461d      	mov	r5, r3
 800dffc:	4643      	mov	r3, r8
 800dffe:	18e3      	adds	r3, r4, r3
 800e000:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e004:	464b      	mov	r3, r9
 800e006:	eb45 0303 	adc.w	r3, r5, r3
 800e00a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e00e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	2200      	movs	r2, #0
 800e016:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e01a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e01e:	f04f 0200 	mov.w	r2, #0
 800e022:	f04f 0300 	mov.w	r3, #0
 800e026:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e02a:	4629      	mov	r1, r5
 800e02c:	008b      	lsls	r3, r1, #2
 800e02e:	4621      	mov	r1, r4
 800e030:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e034:	4621      	mov	r1, r4
 800e036:	008a      	lsls	r2, r1, #2
 800e038:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e03c:	f7f2 ffa2 	bl	8000f84 <__aeabi_uldivmod>
 800e040:	4602      	mov	r2, r0
 800e042:	460b      	mov	r3, r1
 800e044:	4b60      	ldr	r3, [pc, #384]	@ (800e1c8 <UART_SetConfig+0x4e4>)
 800e046:	fba3 2302 	umull	r2, r3, r3, r2
 800e04a:	095b      	lsrs	r3, r3, #5
 800e04c:	011c      	lsls	r4, r3, #4
 800e04e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e052:	2200      	movs	r2, #0
 800e054:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e058:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e05c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800e060:	4642      	mov	r2, r8
 800e062:	464b      	mov	r3, r9
 800e064:	1891      	adds	r1, r2, r2
 800e066:	61b9      	str	r1, [r7, #24]
 800e068:	415b      	adcs	r3, r3
 800e06a:	61fb      	str	r3, [r7, #28]
 800e06c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e070:	4641      	mov	r1, r8
 800e072:	1851      	adds	r1, r2, r1
 800e074:	6139      	str	r1, [r7, #16]
 800e076:	4649      	mov	r1, r9
 800e078:	414b      	adcs	r3, r1
 800e07a:	617b      	str	r3, [r7, #20]
 800e07c:	f04f 0200 	mov.w	r2, #0
 800e080:	f04f 0300 	mov.w	r3, #0
 800e084:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e088:	4659      	mov	r1, fp
 800e08a:	00cb      	lsls	r3, r1, #3
 800e08c:	4651      	mov	r1, sl
 800e08e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e092:	4651      	mov	r1, sl
 800e094:	00ca      	lsls	r2, r1, #3
 800e096:	4610      	mov	r0, r2
 800e098:	4619      	mov	r1, r3
 800e09a:	4603      	mov	r3, r0
 800e09c:	4642      	mov	r2, r8
 800e09e:	189b      	adds	r3, r3, r2
 800e0a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e0a4:	464b      	mov	r3, r9
 800e0a6:	460a      	mov	r2, r1
 800e0a8:	eb42 0303 	adc.w	r3, r2, r3
 800e0ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e0b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e0ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800e0bc:	f04f 0200 	mov.w	r2, #0
 800e0c0:	f04f 0300 	mov.w	r3, #0
 800e0c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800e0c8:	4649      	mov	r1, r9
 800e0ca:	008b      	lsls	r3, r1, #2
 800e0cc:	4641      	mov	r1, r8
 800e0ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e0d2:	4641      	mov	r1, r8
 800e0d4:	008a      	lsls	r2, r1, #2
 800e0d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800e0da:	f7f2 ff53 	bl	8000f84 <__aeabi_uldivmod>
 800e0de:	4602      	mov	r2, r0
 800e0e0:	460b      	mov	r3, r1
 800e0e2:	4611      	mov	r1, r2
 800e0e4:	4b38      	ldr	r3, [pc, #224]	@ (800e1c8 <UART_SetConfig+0x4e4>)
 800e0e6:	fba3 2301 	umull	r2, r3, r3, r1
 800e0ea:	095b      	lsrs	r3, r3, #5
 800e0ec:	2264      	movs	r2, #100	@ 0x64
 800e0ee:	fb02 f303 	mul.w	r3, r2, r3
 800e0f2:	1acb      	subs	r3, r1, r3
 800e0f4:	011b      	lsls	r3, r3, #4
 800e0f6:	3332      	adds	r3, #50	@ 0x32
 800e0f8:	4a33      	ldr	r2, [pc, #204]	@ (800e1c8 <UART_SetConfig+0x4e4>)
 800e0fa:	fba2 2303 	umull	r2, r3, r2, r3
 800e0fe:	095b      	lsrs	r3, r3, #5
 800e100:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e104:	441c      	add	r4, r3
 800e106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e10a:	2200      	movs	r2, #0
 800e10c:	673b      	str	r3, [r7, #112]	@ 0x70
 800e10e:	677a      	str	r2, [r7, #116]	@ 0x74
 800e110:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800e114:	4642      	mov	r2, r8
 800e116:	464b      	mov	r3, r9
 800e118:	1891      	adds	r1, r2, r2
 800e11a:	60b9      	str	r1, [r7, #8]
 800e11c:	415b      	adcs	r3, r3
 800e11e:	60fb      	str	r3, [r7, #12]
 800e120:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e124:	4641      	mov	r1, r8
 800e126:	1851      	adds	r1, r2, r1
 800e128:	6039      	str	r1, [r7, #0]
 800e12a:	4649      	mov	r1, r9
 800e12c:	414b      	adcs	r3, r1
 800e12e:	607b      	str	r3, [r7, #4]
 800e130:	f04f 0200 	mov.w	r2, #0
 800e134:	f04f 0300 	mov.w	r3, #0
 800e138:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e13c:	4659      	mov	r1, fp
 800e13e:	00cb      	lsls	r3, r1, #3
 800e140:	4651      	mov	r1, sl
 800e142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e146:	4651      	mov	r1, sl
 800e148:	00ca      	lsls	r2, r1, #3
 800e14a:	4610      	mov	r0, r2
 800e14c:	4619      	mov	r1, r3
 800e14e:	4603      	mov	r3, r0
 800e150:	4642      	mov	r2, r8
 800e152:	189b      	adds	r3, r3, r2
 800e154:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e156:	464b      	mov	r3, r9
 800e158:	460a      	mov	r2, r1
 800e15a:	eb42 0303 	adc.w	r3, r2, r3
 800e15e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	2200      	movs	r2, #0
 800e168:	663b      	str	r3, [r7, #96]	@ 0x60
 800e16a:	667a      	str	r2, [r7, #100]	@ 0x64
 800e16c:	f04f 0200 	mov.w	r2, #0
 800e170:	f04f 0300 	mov.w	r3, #0
 800e174:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800e178:	4649      	mov	r1, r9
 800e17a:	008b      	lsls	r3, r1, #2
 800e17c:	4641      	mov	r1, r8
 800e17e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e182:	4641      	mov	r1, r8
 800e184:	008a      	lsls	r2, r1, #2
 800e186:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800e18a:	f7f2 fefb 	bl	8000f84 <__aeabi_uldivmod>
 800e18e:	4602      	mov	r2, r0
 800e190:	460b      	mov	r3, r1
 800e192:	4b0d      	ldr	r3, [pc, #52]	@ (800e1c8 <UART_SetConfig+0x4e4>)
 800e194:	fba3 1302 	umull	r1, r3, r3, r2
 800e198:	095b      	lsrs	r3, r3, #5
 800e19a:	2164      	movs	r1, #100	@ 0x64
 800e19c:	fb01 f303 	mul.w	r3, r1, r3
 800e1a0:	1ad3      	subs	r3, r2, r3
 800e1a2:	011b      	lsls	r3, r3, #4
 800e1a4:	3332      	adds	r3, #50	@ 0x32
 800e1a6:	4a08      	ldr	r2, [pc, #32]	@ (800e1c8 <UART_SetConfig+0x4e4>)
 800e1a8:	fba2 2303 	umull	r2, r3, r2, r3
 800e1ac:	095b      	lsrs	r3, r3, #5
 800e1ae:	f003 020f 	and.w	r2, r3, #15
 800e1b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	4422      	add	r2, r4
 800e1ba:	609a      	str	r2, [r3, #8]
}
 800e1bc:	bf00      	nop
 800e1be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e1c8:	51eb851f 	.word	0x51eb851f

0800e1cc <calloc>:
 800e1cc:	4b02      	ldr	r3, [pc, #8]	@ (800e1d8 <calloc+0xc>)
 800e1ce:	460a      	mov	r2, r1
 800e1d0:	4601      	mov	r1, r0
 800e1d2:	6818      	ldr	r0, [r3, #0]
 800e1d4:	f000 b802 	b.w	800e1dc <_calloc_r>
 800e1d8:	200001c4 	.word	0x200001c4

0800e1dc <_calloc_r>:
 800e1dc:	b570      	push	{r4, r5, r6, lr}
 800e1de:	fba1 5402 	umull	r5, r4, r1, r2
 800e1e2:	b934      	cbnz	r4, 800e1f2 <_calloc_r+0x16>
 800e1e4:	4629      	mov	r1, r5
 800e1e6:	f000 faf9 	bl	800e7dc <_malloc_r>
 800e1ea:	4606      	mov	r6, r0
 800e1ec:	b928      	cbnz	r0, 800e1fa <_calloc_r+0x1e>
 800e1ee:	4630      	mov	r0, r6
 800e1f0:	bd70      	pop	{r4, r5, r6, pc}
 800e1f2:	220c      	movs	r2, #12
 800e1f4:	6002      	str	r2, [r0, #0]
 800e1f6:	2600      	movs	r6, #0
 800e1f8:	e7f9      	b.n	800e1ee <_calloc_r+0x12>
 800e1fa:	462a      	mov	r2, r5
 800e1fc:	4621      	mov	r1, r4
 800e1fe:	f001 ff33 	bl	8010068 <memset>
 800e202:	e7f4      	b.n	800e1ee <_calloc_r+0x12>

0800e204 <__cvt>:
 800e204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e208:	ec57 6b10 	vmov	r6, r7, d0
 800e20c:	2f00      	cmp	r7, #0
 800e20e:	460c      	mov	r4, r1
 800e210:	4619      	mov	r1, r3
 800e212:	463b      	mov	r3, r7
 800e214:	bfbb      	ittet	lt
 800e216:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e21a:	461f      	movlt	r7, r3
 800e21c:	2300      	movge	r3, #0
 800e21e:	232d      	movlt	r3, #45	@ 0x2d
 800e220:	700b      	strb	r3, [r1, #0]
 800e222:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e224:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e228:	4691      	mov	r9, r2
 800e22a:	f023 0820 	bic.w	r8, r3, #32
 800e22e:	bfbc      	itt	lt
 800e230:	4632      	movlt	r2, r6
 800e232:	4616      	movlt	r6, r2
 800e234:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e238:	d005      	beq.n	800e246 <__cvt+0x42>
 800e23a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e23e:	d100      	bne.n	800e242 <__cvt+0x3e>
 800e240:	3401      	adds	r4, #1
 800e242:	2102      	movs	r1, #2
 800e244:	e000      	b.n	800e248 <__cvt+0x44>
 800e246:	2103      	movs	r1, #3
 800e248:	ab03      	add	r3, sp, #12
 800e24a:	9301      	str	r3, [sp, #4]
 800e24c:	ab02      	add	r3, sp, #8
 800e24e:	9300      	str	r3, [sp, #0]
 800e250:	ec47 6b10 	vmov	d0, r6, r7
 800e254:	4653      	mov	r3, sl
 800e256:	4622      	mov	r2, r4
 800e258:	f002 f866 	bl	8010328 <_dtoa_r>
 800e25c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e260:	4605      	mov	r5, r0
 800e262:	d119      	bne.n	800e298 <__cvt+0x94>
 800e264:	f019 0f01 	tst.w	r9, #1
 800e268:	d00e      	beq.n	800e288 <__cvt+0x84>
 800e26a:	eb00 0904 	add.w	r9, r0, r4
 800e26e:	2200      	movs	r2, #0
 800e270:	2300      	movs	r3, #0
 800e272:	4630      	mov	r0, r6
 800e274:	4639      	mov	r1, r7
 800e276:	f7f2 fc47 	bl	8000b08 <__aeabi_dcmpeq>
 800e27a:	b108      	cbz	r0, 800e280 <__cvt+0x7c>
 800e27c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e280:	2230      	movs	r2, #48	@ 0x30
 800e282:	9b03      	ldr	r3, [sp, #12]
 800e284:	454b      	cmp	r3, r9
 800e286:	d31e      	bcc.n	800e2c6 <__cvt+0xc2>
 800e288:	9b03      	ldr	r3, [sp, #12]
 800e28a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e28c:	1b5b      	subs	r3, r3, r5
 800e28e:	4628      	mov	r0, r5
 800e290:	6013      	str	r3, [r2, #0]
 800e292:	b004      	add	sp, #16
 800e294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e298:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e29c:	eb00 0904 	add.w	r9, r0, r4
 800e2a0:	d1e5      	bne.n	800e26e <__cvt+0x6a>
 800e2a2:	7803      	ldrb	r3, [r0, #0]
 800e2a4:	2b30      	cmp	r3, #48	@ 0x30
 800e2a6:	d10a      	bne.n	800e2be <__cvt+0xba>
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	4630      	mov	r0, r6
 800e2ae:	4639      	mov	r1, r7
 800e2b0:	f7f2 fc2a 	bl	8000b08 <__aeabi_dcmpeq>
 800e2b4:	b918      	cbnz	r0, 800e2be <__cvt+0xba>
 800e2b6:	f1c4 0401 	rsb	r4, r4, #1
 800e2ba:	f8ca 4000 	str.w	r4, [sl]
 800e2be:	f8da 3000 	ldr.w	r3, [sl]
 800e2c2:	4499      	add	r9, r3
 800e2c4:	e7d3      	b.n	800e26e <__cvt+0x6a>
 800e2c6:	1c59      	adds	r1, r3, #1
 800e2c8:	9103      	str	r1, [sp, #12]
 800e2ca:	701a      	strb	r2, [r3, #0]
 800e2cc:	e7d9      	b.n	800e282 <__cvt+0x7e>

0800e2ce <__exponent>:
 800e2ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e2d0:	2900      	cmp	r1, #0
 800e2d2:	bfba      	itte	lt
 800e2d4:	4249      	neglt	r1, r1
 800e2d6:	232d      	movlt	r3, #45	@ 0x2d
 800e2d8:	232b      	movge	r3, #43	@ 0x2b
 800e2da:	2909      	cmp	r1, #9
 800e2dc:	7002      	strb	r2, [r0, #0]
 800e2de:	7043      	strb	r3, [r0, #1]
 800e2e0:	dd29      	ble.n	800e336 <__exponent+0x68>
 800e2e2:	f10d 0307 	add.w	r3, sp, #7
 800e2e6:	461d      	mov	r5, r3
 800e2e8:	270a      	movs	r7, #10
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	fbb1 f6f7 	udiv	r6, r1, r7
 800e2f0:	fb07 1416 	mls	r4, r7, r6, r1
 800e2f4:	3430      	adds	r4, #48	@ 0x30
 800e2f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e2fa:	460c      	mov	r4, r1
 800e2fc:	2c63      	cmp	r4, #99	@ 0x63
 800e2fe:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800e302:	4631      	mov	r1, r6
 800e304:	dcf1      	bgt.n	800e2ea <__exponent+0x1c>
 800e306:	3130      	adds	r1, #48	@ 0x30
 800e308:	1e94      	subs	r4, r2, #2
 800e30a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e30e:	1c41      	adds	r1, r0, #1
 800e310:	4623      	mov	r3, r4
 800e312:	42ab      	cmp	r3, r5
 800e314:	d30a      	bcc.n	800e32c <__exponent+0x5e>
 800e316:	f10d 0309 	add.w	r3, sp, #9
 800e31a:	1a9b      	subs	r3, r3, r2
 800e31c:	42ac      	cmp	r4, r5
 800e31e:	bf88      	it	hi
 800e320:	2300      	movhi	r3, #0
 800e322:	3302      	adds	r3, #2
 800e324:	4403      	add	r3, r0
 800e326:	1a18      	subs	r0, r3, r0
 800e328:	b003      	add	sp, #12
 800e32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e32c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e330:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e334:	e7ed      	b.n	800e312 <__exponent+0x44>
 800e336:	2330      	movs	r3, #48	@ 0x30
 800e338:	3130      	adds	r1, #48	@ 0x30
 800e33a:	7083      	strb	r3, [r0, #2]
 800e33c:	70c1      	strb	r1, [r0, #3]
 800e33e:	1d03      	adds	r3, r0, #4
 800e340:	e7f1      	b.n	800e326 <__exponent+0x58>
	...

0800e344 <_printf_float>:
 800e344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e348:	b08d      	sub	sp, #52	@ 0x34
 800e34a:	460c      	mov	r4, r1
 800e34c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e350:	4616      	mov	r6, r2
 800e352:	461f      	mov	r7, r3
 800e354:	4605      	mov	r5, r0
 800e356:	f001 ff2b 	bl	80101b0 <_localeconv_r>
 800e35a:	6803      	ldr	r3, [r0, #0]
 800e35c:	9304      	str	r3, [sp, #16]
 800e35e:	4618      	mov	r0, r3
 800e360:	f7f1 ffa6 	bl	80002b0 <strlen>
 800e364:	2300      	movs	r3, #0
 800e366:	930a      	str	r3, [sp, #40]	@ 0x28
 800e368:	f8d8 3000 	ldr.w	r3, [r8]
 800e36c:	9005      	str	r0, [sp, #20]
 800e36e:	3307      	adds	r3, #7
 800e370:	f023 0307 	bic.w	r3, r3, #7
 800e374:	f103 0208 	add.w	r2, r3, #8
 800e378:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e37c:	f8d4 b000 	ldr.w	fp, [r4]
 800e380:	f8c8 2000 	str.w	r2, [r8]
 800e384:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e388:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e38c:	9307      	str	r3, [sp, #28]
 800e38e:	f8cd 8018 	str.w	r8, [sp, #24]
 800e392:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e39a:	4b9c      	ldr	r3, [pc, #624]	@ (800e60c <_printf_float+0x2c8>)
 800e39c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e3a0:	f7f2 fbe4 	bl	8000b6c <__aeabi_dcmpun>
 800e3a4:	bb70      	cbnz	r0, 800e404 <_printf_float+0xc0>
 800e3a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3aa:	4b98      	ldr	r3, [pc, #608]	@ (800e60c <_printf_float+0x2c8>)
 800e3ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e3b0:	f7f2 fbbe 	bl	8000b30 <__aeabi_dcmple>
 800e3b4:	bb30      	cbnz	r0, 800e404 <_printf_float+0xc0>
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	4640      	mov	r0, r8
 800e3bc:	4649      	mov	r1, r9
 800e3be:	f7f2 fbad 	bl	8000b1c <__aeabi_dcmplt>
 800e3c2:	b110      	cbz	r0, 800e3ca <_printf_float+0x86>
 800e3c4:	232d      	movs	r3, #45	@ 0x2d
 800e3c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e3ca:	4a91      	ldr	r2, [pc, #580]	@ (800e610 <_printf_float+0x2cc>)
 800e3cc:	4b91      	ldr	r3, [pc, #580]	@ (800e614 <_printf_float+0x2d0>)
 800e3ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e3d2:	bf8c      	ite	hi
 800e3d4:	4690      	movhi	r8, r2
 800e3d6:	4698      	movls	r8, r3
 800e3d8:	2303      	movs	r3, #3
 800e3da:	6123      	str	r3, [r4, #16]
 800e3dc:	f02b 0304 	bic.w	r3, fp, #4
 800e3e0:	6023      	str	r3, [r4, #0]
 800e3e2:	f04f 0900 	mov.w	r9, #0
 800e3e6:	9700      	str	r7, [sp, #0]
 800e3e8:	4633      	mov	r3, r6
 800e3ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e3ec:	4621      	mov	r1, r4
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	f000 fa74 	bl	800e8dc <_printf_common>
 800e3f4:	3001      	adds	r0, #1
 800e3f6:	f040 808d 	bne.w	800e514 <_printf_float+0x1d0>
 800e3fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e3fe:	b00d      	add	sp, #52	@ 0x34
 800e400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e404:	4642      	mov	r2, r8
 800e406:	464b      	mov	r3, r9
 800e408:	4640      	mov	r0, r8
 800e40a:	4649      	mov	r1, r9
 800e40c:	f7f2 fbae 	bl	8000b6c <__aeabi_dcmpun>
 800e410:	b140      	cbz	r0, 800e424 <_printf_float+0xe0>
 800e412:	464b      	mov	r3, r9
 800e414:	2b00      	cmp	r3, #0
 800e416:	bfbc      	itt	lt
 800e418:	232d      	movlt	r3, #45	@ 0x2d
 800e41a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e41e:	4a7e      	ldr	r2, [pc, #504]	@ (800e618 <_printf_float+0x2d4>)
 800e420:	4b7e      	ldr	r3, [pc, #504]	@ (800e61c <_printf_float+0x2d8>)
 800e422:	e7d4      	b.n	800e3ce <_printf_float+0x8a>
 800e424:	6863      	ldr	r3, [r4, #4]
 800e426:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e42a:	9206      	str	r2, [sp, #24]
 800e42c:	1c5a      	adds	r2, r3, #1
 800e42e:	d13b      	bne.n	800e4a8 <_printf_float+0x164>
 800e430:	2306      	movs	r3, #6
 800e432:	6063      	str	r3, [r4, #4]
 800e434:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e438:	2300      	movs	r3, #0
 800e43a:	6022      	str	r2, [r4, #0]
 800e43c:	9303      	str	r3, [sp, #12]
 800e43e:	ab0a      	add	r3, sp, #40	@ 0x28
 800e440:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e444:	ab09      	add	r3, sp, #36	@ 0x24
 800e446:	9300      	str	r3, [sp, #0]
 800e448:	6861      	ldr	r1, [r4, #4]
 800e44a:	ec49 8b10 	vmov	d0, r8, r9
 800e44e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e452:	4628      	mov	r0, r5
 800e454:	f7ff fed6 	bl	800e204 <__cvt>
 800e458:	9b06      	ldr	r3, [sp, #24]
 800e45a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e45c:	2b47      	cmp	r3, #71	@ 0x47
 800e45e:	4680      	mov	r8, r0
 800e460:	d129      	bne.n	800e4b6 <_printf_float+0x172>
 800e462:	1cc8      	adds	r0, r1, #3
 800e464:	db02      	blt.n	800e46c <_printf_float+0x128>
 800e466:	6863      	ldr	r3, [r4, #4]
 800e468:	4299      	cmp	r1, r3
 800e46a:	dd41      	ble.n	800e4f0 <_printf_float+0x1ac>
 800e46c:	f1aa 0a02 	sub.w	sl, sl, #2
 800e470:	fa5f fa8a 	uxtb.w	sl, sl
 800e474:	3901      	subs	r1, #1
 800e476:	4652      	mov	r2, sl
 800e478:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e47c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e47e:	f7ff ff26 	bl	800e2ce <__exponent>
 800e482:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e484:	1813      	adds	r3, r2, r0
 800e486:	2a01      	cmp	r2, #1
 800e488:	4681      	mov	r9, r0
 800e48a:	6123      	str	r3, [r4, #16]
 800e48c:	dc02      	bgt.n	800e494 <_printf_float+0x150>
 800e48e:	6822      	ldr	r2, [r4, #0]
 800e490:	07d2      	lsls	r2, r2, #31
 800e492:	d501      	bpl.n	800e498 <_printf_float+0x154>
 800e494:	3301      	adds	r3, #1
 800e496:	6123      	str	r3, [r4, #16]
 800e498:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d0a2      	beq.n	800e3e6 <_printf_float+0xa2>
 800e4a0:	232d      	movs	r3, #45	@ 0x2d
 800e4a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e4a6:	e79e      	b.n	800e3e6 <_printf_float+0xa2>
 800e4a8:	9a06      	ldr	r2, [sp, #24]
 800e4aa:	2a47      	cmp	r2, #71	@ 0x47
 800e4ac:	d1c2      	bne.n	800e434 <_printf_float+0xf0>
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d1c0      	bne.n	800e434 <_printf_float+0xf0>
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	e7bd      	b.n	800e432 <_printf_float+0xee>
 800e4b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e4ba:	d9db      	bls.n	800e474 <_printf_float+0x130>
 800e4bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e4c0:	d118      	bne.n	800e4f4 <_printf_float+0x1b0>
 800e4c2:	2900      	cmp	r1, #0
 800e4c4:	6863      	ldr	r3, [r4, #4]
 800e4c6:	dd0b      	ble.n	800e4e0 <_printf_float+0x19c>
 800e4c8:	6121      	str	r1, [r4, #16]
 800e4ca:	b913      	cbnz	r3, 800e4d2 <_printf_float+0x18e>
 800e4cc:	6822      	ldr	r2, [r4, #0]
 800e4ce:	07d0      	lsls	r0, r2, #31
 800e4d0:	d502      	bpl.n	800e4d8 <_printf_float+0x194>
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	440b      	add	r3, r1
 800e4d6:	6123      	str	r3, [r4, #16]
 800e4d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e4da:	f04f 0900 	mov.w	r9, #0
 800e4de:	e7db      	b.n	800e498 <_printf_float+0x154>
 800e4e0:	b913      	cbnz	r3, 800e4e8 <_printf_float+0x1a4>
 800e4e2:	6822      	ldr	r2, [r4, #0]
 800e4e4:	07d2      	lsls	r2, r2, #31
 800e4e6:	d501      	bpl.n	800e4ec <_printf_float+0x1a8>
 800e4e8:	3302      	adds	r3, #2
 800e4ea:	e7f4      	b.n	800e4d6 <_printf_float+0x192>
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	e7f2      	b.n	800e4d6 <_printf_float+0x192>
 800e4f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e4f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4f6:	4299      	cmp	r1, r3
 800e4f8:	db05      	blt.n	800e506 <_printf_float+0x1c2>
 800e4fa:	6823      	ldr	r3, [r4, #0]
 800e4fc:	6121      	str	r1, [r4, #16]
 800e4fe:	07d8      	lsls	r0, r3, #31
 800e500:	d5ea      	bpl.n	800e4d8 <_printf_float+0x194>
 800e502:	1c4b      	adds	r3, r1, #1
 800e504:	e7e7      	b.n	800e4d6 <_printf_float+0x192>
 800e506:	2900      	cmp	r1, #0
 800e508:	bfd4      	ite	le
 800e50a:	f1c1 0202 	rsble	r2, r1, #2
 800e50e:	2201      	movgt	r2, #1
 800e510:	4413      	add	r3, r2
 800e512:	e7e0      	b.n	800e4d6 <_printf_float+0x192>
 800e514:	6823      	ldr	r3, [r4, #0]
 800e516:	055a      	lsls	r2, r3, #21
 800e518:	d407      	bmi.n	800e52a <_printf_float+0x1e6>
 800e51a:	6923      	ldr	r3, [r4, #16]
 800e51c:	4642      	mov	r2, r8
 800e51e:	4631      	mov	r1, r6
 800e520:	4628      	mov	r0, r5
 800e522:	47b8      	blx	r7
 800e524:	3001      	adds	r0, #1
 800e526:	d12b      	bne.n	800e580 <_printf_float+0x23c>
 800e528:	e767      	b.n	800e3fa <_printf_float+0xb6>
 800e52a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e52e:	f240 80dd 	bls.w	800e6ec <_printf_float+0x3a8>
 800e532:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e536:	2200      	movs	r2, #0
 800e538:	2300      	movs	r3, #0
 800e53a:	f7f2 fae5 	bl	8000b08 <__aeabi_dcmpeq>
 800e53e:	2800      	cmp	r0, #0
 800e540:	d033      	beq.n	800e5aa <_printf_float+0x266>
 800e542:	4a37      	ldr	r2, [pc, #220]	@ (800e620 <_printf_float+0x2dc>)
 800e544:	2301      	movs	r3, #1
 800e546:	4631      	mov	r1, r6
 800e548:	4628      	mov	r0, r5
 800e54a:	47b8      	blx	r7
 800e54c:	3001      	adds	r0, #1
 800e54e:	f43f af54 	beq.w	800e3fa <_printf_float+0xb6>
 800e552:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e556:	4543      	cmp	r3, r8
 800e558:	db02      	blt.n	800e560 <_printf_float+0x21c>
 800e55a:	6823      	ldr	r3, [r4, #0]
 800e55c:	07d8      	lsls	r0, r3, #31
 800e55e:	d50f      	bpl.n	800e580 <_printf_float+0x23c>
 800e560:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e564:	4631      	mov	r1, r6
 800e566:	4628      	mov	r0, r5
 800e568:	47b8      	blx	r7
 800e56a:	3001      	adds	r0, #1
 800e56c:	f43f af45 	beq.w	800e3fa <_printf_float+0xb6>
 800e570:	f04f 0900 	mov.w	r9, #0
 800e574:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800e578:	f104 0a1a 	add.w	sl, r4, #26
 800e57c:	45c8      	cmp	r8, r9
 800e57e:	dc09      	bgt.n	800e594 <_printf_float+0x250>
 800e580:	6823      	ldr	r3, [r4, #0]
 800e582:	079b      	lsls	r3, r3, #30
 800e584:	f100 8103 	bmi.w	800e78e <_printf_float+0x44a>
 800e588:	68e0      	ldr	r0, [r4, #12]
 800e58a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e58c:	4298      	cmp	r0, r3
 800e58e:	bfb8      	it	lt
 800e590:	4618      	movlt	r0, r3
 800e592:	e734      	b.n	800e3fe <_printf_float+0xba>
 800e594:	2301      	movs	r3, #1
 800e596:	4652      	mov	r2, sl
 800e598:	4631      	mov	r1, r6
 800e59a:	4628      	mov	r0, r5
 800e59c:	47b8      	blx	r7
 800e59e:	3001      	adds	r0, #1
 800e5a0:	f43f af2b 	beq.w	800e3fa <_printf_float+0xb6>
 800e5a4:	f109 0901 	add.w	r9, r9, #1
 800e5a8:	e7e8      	b.n	800e57c <_printf_float+0x238>
 800e5aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	dc39      	bgt.n	800e624 <_printf_float+0x2e0>
 800e5b0:	4a1b      	ldr	r2, [pc, #108]	@ (800e620 <_printf_float+0x2dc>)
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	4631      	mov	r1, r6
 800e5b6:	4628      	mov	r0, r5
 800e5b8:	47b8      	blx	r7
 800e5ba:	3001      	adds	r0, #1
 800e5bc:	f43f af1d 	beq.w	800e3fa <_printf_float+0xb6>
 800e5c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e5c4:	ea59 0303 	orrs.w	r3, r9, r3
 800e5c8:	d102      	bne.n	800e5d0 <_printf_float+0x28c>
 800e5ca:	6823      	ldr	r3, [r4, #0]
 800e5cc:	07d9      	lsls	r1, r3, #31
 800e5ce:	d5d7      	bpl.n	800e580 <_printf_float+0x23c>
 800e5d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5d4:	4631      	mov	r1, r6
 800e5d6:	4628      	mov	r0, r5
 800e5d8:	47b8      	blx	r7
 800e5da:	3001      	adds	r0, #1
 800e5dc:	f43f af0d 	beq.w	800e3fa <_printf_float+0xb6>
 800e5e0:	f04f 0a00 	mov.w	sl, #0
 800e5e4:	f104 0b1a 	add.w	fp, r4, #26
 800e5e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5ea:	425b      	negs	r3, r3
 800e5ec:	4553      	cmp	r3, sl
 800e5ee:	dc01      	bgt.n	800e5f4 <_printf_float+0x2b0>
 800e5f0:	464b      	mov	r3, r9
 800e5f2:	e793      	b.n	800e51c <_printf_float+0x1d8>
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	465a      	mov	r2, fp
 800e5f8:	4631      	mov	r1, r6
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	47b8      	blx	r7
 800e5fe:	3001      	adds	r0, #1
 800e600:	f43f aefb 	beq.w	800e3fa <_printf_float+0xb6>
 800e604:	f10a 0a01 	add.w	sl, sl, #1
 800e608:	e7ee      	b.n	800e5e8 <_printf_float+0x2a4>
 800e60a:	bf00      	nop
 800e60c:	7fefffff 	.word	0x7fefffff
 800e610:	08015aa0 	.word	0x08015aa0
 800e614:	08015a9c 	.word	0x08015a9c
 800e618:	08015aa8 	.word	0x08015aa8
 800e61c:	08015aa4 	.word	0x08015aa4
 800e620:	08015bf1 	.word	0x08015bf1
 800e624:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e626:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e62a:	4553      	cmp	r3, sl
 800e62c:	bfa8      	it	ge
 800e62e:	4653      	movge	r3, sl
 800e630:	2b00      	cmp	r3, #0
 800e632:	4699      	mov	r9, r3
 800e634:	dc36      	bgt.n	800e6a4 <_printf_float+0x360>
 800e636:	f04f 0b00 	mov.w	fp, #0
 800e63a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e63e:	f104 021a 	add.w	r2, r4, #26
 800e642:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e644:	9306      	str	r3, [sp, #24]
 800e646:	eba3 0309 	sub.w	r3, r3, r9
 800e64a:	455b      	cmp	r3, fp
 800e64c:	dc31      	bgt.n	800e6b2 <_printf_float+0x36e>
 800e64e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e650:	459a      	cmp	sl, r3
 800e652:	dc3a      	bgt.n	800e6ca <_printf_float+0x386>
 800e654:	6823      	ldr	r3, [r4, #0]
 800e656:	07da      	lsls	r2, r3, #31
 800e658:	d437      	bmi.n	800e6ca <_printf_float+0x386>
 800e65a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e65c:	ebaa 0903 	sub.w	r9, sl, r3
 800e660:	9b06      	ldr	r3, [sp, #24]
 800e662:	ebaa 0303 	sub.w	r3, sl, r3
 800e666:	4599      	cmp	r9, r3
 800e668:	bfa8      	it	ge
 800e66a:	4699      	movge	r9, r3
 800e66c:	f1b9 0f00 	cmp.w	r9, #0
 800e670:	dc33      	bgt.n	800e6da <_printf_float+0x396>
 800e672:	f04f 0800 	mov.w	r8, #0
 800e676:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e67a:	f104 0b1a 	add.w	fp, r4, #26
 800e67e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e680:	ebaa 0303 	sub.w	r3, sl, r3
 800e684:	eba3 0309 	sub.w	r3, r3, r9
 800e688:	4543      	cmp	r3, r8
 800e68a:	f77f af79 	ble.w	800e580 <_printf_float+0x23c>
 800e68e:	2301      	movs	r3, #1
 800e690:	465a      	mov	r2, fp
 800e692:	4631      	mov	r1, r6
 800e694:	4628      	mov	r0, r5
 800e696:	47b8      	blx	r7
 800e698:	3001      	adds	r0, #1
 800e69a:	f43f aeae 	beq.w	800e3fa <_printf_float+0xb6>
 800e69e:	f108 0801 	add.w	r8, r8, #1
 800e6a2:	e7ec      	b.n	800e67e <_printf_float+0x33a>
 800e6a4:	4642      	mov	r2, r8
 800e6a6:	4631      	mov	r1, r6
 800e6a8:	4628      	mov	r0, r5
 800e6aa:	47b8      	blx	r7
 800e6ac:	3001      	adds	r0, #1
 800e6ae:	d1c2      	bne.n	800e636 <_printf_float+0x2f2>
 800e6b0:	e6a3      	b.n	800e3fa <_printf_float+0xb6>
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	4631      	mov	r1, r6
 800e6b6:	4628      	mov	r0, r5
 800e6b8:	9206      	str	r2, [sp, #24]
 800e6ba:	47b8      	blx	r7
 800e6bc:	3001      	adds	r0, #1
 800e6be:	f43f ae9c 	beq.w	800e3fa <_printf_float+0xb6>
 800e6c2:	9a06      	ldr	r2, [sp, #24]
 800e6c4:	f10b 0b01 	add.w	fp, fp, #1
 800e6c8:	e7bb      	b.n	800e642 <_printf_float+0x2fe>
 800e6ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6ce:	4631      	mov	r1, r6
 800e6d0:	4628      	mov	r0, r5
 800e6d2:	47b8      	blx	r7
 800e6d4:	3001      	adds	r0, #1
 800e6d6:	d1c0      	bne.n	800e65a <_printf_float+0x316>
 800e6d8:	e68f      	b.n	800e3fa <_printf_float+0xb6>
 800e6da:	9a06      	ldr	r2, [sp, #24]
 800e6dc:	464b      	mov	r3, r9
 800e6de:	4442      	add	r2, r8
 800e6e0:	4631      	mov	r1, r6
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	47b8      	blx	r7
 800e6e6:	3001      	adds	r0, #1
 800e6e8:	d1c3      	bne.n	800e672 <_printf_float+0x32e>
 800e6ea:	e686      	b.n	800e3fa <_printf_float+0xb6>
 800e6ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e6f0:	f1ba 0f01 	cmp.w	sl, #1
 800e6f4:	dc01      	bgt.n	800e6fa <_printf_float+0x3b6>
 800e6f6:	07db      	lsls	r3, r3, #31
 800e6f8:	d536      	bpl.n	800e768 <_printf_float+0x424>
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	4642      	mov	r2, r8
 800e6fe:	4631      	mov	r1, r6
 800e700:	4628      	mov	r0, r5
 800e702:	47b8      	blx	r7
 800e704:	3001      	adds	r0, #1
 800e706:	f43f ae78 	beq.w	800e3fa <_printf_float+0xb6>
 800e70a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e70e:	4631      	mov	r1, r6
 800e710:	4628      	mov	r0, r5
 800e712:	47b8      	blx	r7
 800e714:	3001      	adds	r0, #1
 800e716:	f43f ae70 	beq.w	800e3fa <_printf_float+0xb6>
 800e71a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e71e:	2200      	movs	r2, #0
 800e720:	2300      	movs	r3, #0
 800e722:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e726:	f7f2 f9ef 	bl	8000b08 <__aeabi_dcmpeq>
 800e72a:	b9c0      	cbnz	r0, 800e75e <_printf_float+0x41a>
 800e72c:	4653      	mov	r3, sl
 800e72e:	f108 0201 	add.w	r2, r8, #1
 800e732:	4631      	mov	r1, r6
 800e734:	4628      	mov	r0, r5
 800e736:	47b8      	blx	r7
 800e738:	3001      	adds	r0, #1
 800e73a:	d10c      	bne.n	800e756 <_printf_float+0x412>
 800e73c:	e65d      	b.n	800e3fa <_printf_float+0xb6>
 800e73e:	2301      	movs	r3, #1
 800e740:	465a      	mov	r2, fp
 800e742:	4631      	mov	r1, r6
 800e744:	4628      	mov	r0, r5
 800e746:	47b8      	blx	r7
 800e748:	3001      	adds	r0, #1
 800e74a:	f43f ae56 	beq.w	800e3fa <_printf_float+0xb6>
 800e74e:	f108 0801 	add.w	r8, r8, #1
 800e752:	45d0      	cmp	r8, sl
 800e754:	dbf3      	blt.n	800e73e <_printf_float+0x3fa>
 800e756:	464b      	mov	r3, r9
 800e758:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e75c:	e6df      	b.n	800e51e <_printf_float+0x1da>
 800e75e:	f04f 0800 	mov.w	r8, #0
 800e762:	f104 0b1a 	add.w	fp, r4, #26
 800e766:	e7f4      	b.n	800e752 <_printf_float+0x40e>
 800e768:	2301      	movs	r3, #1
 800e76a:	4642      	mov	r2, r8
 800e76c:	e7e1      	b.n	800e732 <_printf_float+0x3ee>
 800e76e:	2301      	movs	r3, #1
 800e770:	464a      	mov	r2, r9
 800e772:	4631      	mov	r1, r6
 800e774:	4628      	mov	r0, r5
 800e776:	47b8      	blx	r7
 800e778:	3001      	adds	r0, #1
 800e77a:	f43f ae3e 	beq.w	800e3fa <_printf_float+0xb6>
 800e77e:	f108 0801 	add.w	r8, r8, #1
 800e782:	68e3      	ldr	r3, [r4, #12]
 800e784:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e786:	1a5b      	subs	r3, r3, r1
 800e788:	4543      	cmp	r3, r8
 800e78a:	dcf0      	bgt.n	800e76e <_printf_float+0x42a>
 800e78c:	e6fc      	b.n	800e588 <_printf_float+0x244>
 800e78e:	f04f 0800 	mov.w	r8, #0
 800e792:	f104 0919 	add.w	r9, r4, #25
 800e796:	e7f4      	b.n	800e782 <_printf_float+0x43e>

0800e798 <sbrk_aligned>:
 800e798:	b570      	push	{r4, r5, r6, lr}
 800e79a:	4e0f      	ldr	r6, [pc, #60]	@ (800e7d8 <sbrk_aligned+0x40>)
 800e79c:	460c      	mov	r4, r1
 800e79e:	6831      	ldr	r1, [r6, #0]
 800e7a0:	4605      	mov	r5, r0
 800e7a2:	b911      	cbnz	r1, 800e7aa <sbrk_aligned+0x12>
 800e7a4:	f001 fcb4 	bl	8010110 <_sbrk_r>
 800e7a8:	6030      	str	r0, [r6, #0]
 800e7aa:	4621      	mov	r1, r4
 800e7ac:	4628      	mov	r0, r5
 800e7ae:	f001 fcaf 	bl	8010110 <_sbrk_r>
 800e7b2:	1c43      	adds	r3, r0, #1
 800e7b4:	d103      	bne.n	800e7be <sbrk_aligned+0x26>
 800e7b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	bd70      	pop	{r4, r5, r6, pc}
 800e7be:	1cc4      	adds	r4, r0, #3
 800e7c0:	f024 0403 	bic.w	r4, r4, #3
 800e7c4:	42a0      	cmp	r0, r4
 800e7c6:	d0f8      	beq.n	800e7ba <sbrk_aligned+0x22>
 800e7c8:	1a21      	subs	r1, r4, r0
 800e7ca:	4628      	mov	r0, r5
 800e7cc:	f001 fca0 	bl	8010110 <_sbrk_r>
 800e7d0:	3001      	adds	r0, #1
 800e7d2:	d1f2      	bne.n	800e7ba <sbrk_aligned+0x22>
 800e7d4:	e7ef      	b.n	800e7b6 <sbrk_aligned+0x1e>
 800e7d6:	bf00      	nop
 800e7d8:	2000185c 	.word	0x2000185c

0800e7dc <_malloc_r>:
 800e7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7e0:	1ccd      	adds	r5, r1, #3
 800e7e2:	f025 0503 	bic.w	r5, r5, #3
 800e7e6:	3508      	adds	r5, #8
 800e7e8:	2d0c      	cmp	r5, #12
 800e7ea:	bf38      	it	cc
 800e7ec:	250c      	movcc	r5, #12
 800e7ee:	2d00      	cmp	r5, #0
 800e7f0:	4606      	mov	r6, r0
 800e7f2:	db01      	blt.n	800e7f8 <_malloc_r+0x1c>
 800e7f4:	42a9      	cmp	r1, r5
 800e7f6:	d904      	bls.n	800e802 <_malloc_r+0x26>
 800e7f8:	230c      	movs	r3, #12
 800e7fa:	6033      	str	r3, [r6, #0]
 800e7fc:	2000      	movs	r0, #0
 800e7fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e802:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e8d8 <_malloc_r+0xfc>
 800e806:	f000 fc39 	bl	800f07c <__malloc_lock>
 800e80a:	f8d8 3000 	ldr.w	r3, [r8]
 800e80e:	461c      	mov	r4, r3
 800e810:	bb44      	cbnz	r4, 800e864 <_malloc_r+0x88>
 800e812:	4629      	mov	r1, r5
 800e814:	4630      	mov	r0, r6
 800e816:	f7ff ffbf 	bl	800e798 <sbrk_aligned>
 800e81a:	1c43      	adds	r3, r0, #1
 800e81c:	4604      	mov	r4, r0
 800e81e:	d158      	bne.n	800e8d2 <_malloc_r+0xf6>
 800e820:	f8d8 4000 	ldr.w	r4, [r8]
 800e824:	4627      	mov	r7, r4
 800e826:	2f00      	cmp	r7, #0
 800e828:	d143      	bne.n	800e8b2 <_malloc_r+0xd6>
 800e82a:	2c00      	cmp	r4, #0
 800e82c:	d04b      	beq.n	800e8c6 <_malloc_r+0xea>
 800e82e:	6823      	ldr	r3, [r4, #0]
 800e830:	4639      	mov	r1, r7
 800e832:	4630      	mov	r0, r6
 800e834:	eb04 0903 	add.w	r9, r4, r3
 800e838:	f001 fc6a 	bl	8010110 <_sbrk_r>
 800e83c:	4581      	cmp	r9, r0
 800e83e:	d142      	bne.n	800e8c6 <_malloc_r+0xea>
 800e840:	6821      	ldr	r1, [r4, #0]
 800e842:	1a6d      	subs	r5, r5, r1
 800e844:	4629      	mov	r1, r5
 800e846:	4630      	mov	r0, r6
 800e848:	f7ff ffa6 	bl	800e798 <sbrk_aligned>
 800e84c:	3001      	adds	r0, #1
 800e84e:	d03a      	beq.n	800e8c6 <_malloc_r+0xea>
 800e850:	6823      	ldr	r3, [r4, #0]
 800e852:	442b      	add	r3, r5
 800e854:	6023      	str	r3, [r4, #0]
 800e856:	f8d8 3000 	ldr.w	r3, [r8]
 800e85a:	685a      	ldr	r2, [r3, #4]
 800e85c:	bb62      	cbnz	r2, 800e8b8 <_malloc_r+0xdc>
 800e85e:	f8c8 7000 	str.w	r7, [r8]
 800e862:	e00f      	b.n	800e884 <_malloc_r+0xa8>
 800e864:	6822      	ldr	r2, [r4, #0]
 800e866:	1b52      	subs	r2, r2, r5
 800e868:	d420      	bmi.n	800e8ac <_malloc_r+0xd0>
 800e86a:	2a0b      	cmp	r2, #11
 800e86c:	d917      	bls.n	800e89e <_malloc_r+0xc2>
 800e86e:	1961      	adds	r1, r4, r5
 800e870:	42a3      	cmp	r3, r4
 800e872:	6025      	str	r5, [r4, #0]
 800e874:	bf18      	it	ne
 800e876:	6059      	strne	r1, [r3, #4]
 800e878:	6863      	ldr	r3, [r4, #4]
 800e87a:	bf08      	it	eq
 800e87c:	f8c8 1000 	streq.w	r1, [r8]
 800e880:	5162      	str	r2, [r4, r5]
 800e882:	604b      	str	r3, [r1, #4]
 800e884:	4630      	mov	r0, r6
 800e886:	f000 fbff 	bl	800f088 <__malloc_unlock>
 800e88a:	f104 000b 	add.w	r0, r4, #11
 800e88e:	1d23      	adds	r3, r4, #4
 800e890:	f020 0007 	bic.w	r0, r0, #7
 800e894:	1ac2      	subs	r2, r0, r3
 800e896:	bf1c      	itt	ne
 800e898:	1a1b      	subne	r3, r3, r0
 800e89a:	50a3      	strne	r3, [r4, r2]
 800e89c:	e7af      	b.n	800e7fe <_malloc_r+0x22>
 800e89e:	6862      	ldr	r2, [r4, #4]
 800e8a0:	42a3      	cmp	r3, r4
 800e8a2:	bf0c      	ite	eq
 800e8a4:	f8c8 2000 	streq.w	r2, [r8]
 800e8a8:	605a      	strne	r2, [r3, #4]
 800e8aa:	e7eb      	b.n	800e884 <_malloc_r+0xa8>
 800e8ac:	4623      	mov	r3, r4
 800e8ae:	6864      	ldr	r4, [r4, #4]
 800e8b0:	e7ae      	b.n	800e810 <_malloc_r+0x34>
 800e8b2:	463c      	mov	r4, r7
 800e8b4:	687f      	ldr	r7, [r7, #4]
 800e8b6:	e7b6      	b.n	800e826 <_malloc_r+0x4a>
 800e8b8:	461a      	mov	r2, r3
 800e8ba:	685b      	ldr	r3, [r3, #4]
 800e8bc:	42a3      	cmp	r3, r4
 800e8be:	d1fb      	bne.n	800e8b8 <_malloc_r+0xdc>
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	6053      	str	r3, [r2, #4]
 800e8c4:	e7de      	b.n	800e884 <_malloc_r+0xa8>
 800e8c6:	230c      	movs	r3, #12
 800e8c8:	6033      	str	r3, [r6, #0]
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	f000 fbdc 	bl	800f088 <__malloc_unlock>
 800e8d0:	e794      	b.n	800e7fc <_malloc_r+0x20>
 800e8d2:	6005      	str	r5, [r0, #0]
 800e8d4:	e7d6      	b.n	800e884 <_malloc_r+0xa8>
 800e8d6:	bf00      	nop
 800e8d8:	20001860 	.word	0x20001860

0800e8dc <_printf_common>:
 800e8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8e0:	4616      	mov	r6, r2
 800e8e2:	4698      	mov	r8, r3
 800e8e4:	688a      	ldr	r2, [r1, #8]
 800e8e6:	690b      	ldr	r3, [r1, #16]
 800e8e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	bfb8      	it	lt
 800e8f0:	4613      	movlt	r3, r2
 800e8f2:	6033      	str	r3, [r6, #0]
 800e8f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e8f8:	4607      	mov	r7, r0
 800e8fa:	460c      	mov	r4, r1
 800e8fc:	b10a      	cbz	r2, 800e902 <_printf_common+0x26>
 800e8fe:	3301      	adds	r3, #1
 800e900:	6033      	str	r3, [r6, #0]
 800e902:	6823      	ldr	r3, [r4, #0]
 800e904:	0699      	lsls	r1, r3, #26
 800e906:	bf42      	ittt	mi
 800e908:	6833      	ldrmi	r3, [r6, #0]
 800e90a:	3302      	addmi	r3, #2
 800e90c:	6033      	strmi	r3, [r6, #0]
 800e90e:	6825      	ldr	r5, [r4, #0]
 800e910:	f015 0506 	ands.w	r5, r5, #6
 800e914:	d106      	bne.n	800e924 <_printf_common+0x48>
 800e916:	f104 0a19 	add.w	sl, r4, #25
 800e91a:	68e3      	ldr	r3, [r4, #12]
 800e91c:	6832      	ldr	r2, [r6, #0]
 800e91e:	1a9b      	subs	r3, r3, r2
 800e920:	42ab      	cmp	r3, r5
 800e922:	dc26      	bgt.n	800e972 <_printf_common+0x96>
 800e924:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e928:	6822      	ldr	r2, [r4, #0]
 800e92a:	3b00      	subs	r3, #0
 800e92c:	bf18      	it	ne
 800e92e:	2301      	movne	r3, #1
 800e930:	0692      	lsls	r2, r2, #26
 800e932:	d42b      	bmi.n	800e98c <_printf_common+0xb0>
 800e934:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e938:	4641      	mov	r1, r8
 800e93a:	4638      	mov	r0, r7
 800e93c:	47c8      	blx	r9
 800e93e:	3001      	adds	r0, #1
 800e940:	d01e      	beq.n	800e980 <_printf_common+0xa4>
 800e942:	6823      	ldr	r3, [r4, #0]
 800e944:	6922      	ldr	r2, [r4, #16]
 800e946:	f003 0306 	and.w	r3, r3, #6
 800e94a:	2b04      	cmp	r3, #4
 800e94c:	bf02      	ittt	eq
 800e94e:	68e5      	ldreq	r5, [r4, #12]
 800e950:	6833      	ldreq	r3, [r6, #0]
 800e952:	1aed      	subeq	r5, r5, r3
 800e954:	68a3      	ldr	r3, [r4, #8]
 800e956:	bf0c      	ite	eq
 800e958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e95c:	2500      	movne	r5, #0
 800e95e:	4293      	cmp	r3, r2
 800e960:	bfc4      	itt	gt
 800e962:	1a9b      	subgt	r3, r3, r2
 800e964:	18ed      	addgt	r5, r5, r3
 800e966:	2600      	movs	r6, #0
 800e968:	341a      	adds	r4, #26
 800e96a:	42b5      	cmp	r5, r6
 800e96c:	d11a      	bne.n	800e9a4 <_printf_common+0xc8>
 800e96e:	2000      	movs	r0, #0
 800e970:	e008      	b.n	800e984 <_printf_common+0xa8>
 800e972:	2301      	movs	r3, #1
 800e974:	4652      	mov	r2, sl
 800e976:	4641      	mov	r1, r8
 800e978:	4638      	mov	r0, r7
 800e97a:	47c8      	blx	r9
 800e97c:	3001      	adds	r0, #1
 800e97e:	d103      	bne.n	800e988 <_printf_common+0xac>
 800e980:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e988:	3501      	adds	r5, #1
 800e98a:	e7c6      	b.n	800e91a <_printf_common+0x3e>
 800e98c:	18e1      	adds	r1, r4, r3
 800e98e:	1c5a      	adds	r2, r3, #1
 800e990:	2030      	movs	r0, #48	@ 0x30
 800e992:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e996:	4422      	add	r2, r4
 800e998:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e99c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e9a0:	3302      	adds	r3, #2
 800e9a2:	e7c7      	b.n	800e934 <_printf_common+0x58>
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	4622      	mov	r2, r4
 800e9a8:	4641      	mov	r1, r8
 800e9aa:	4638      	mov	r0, r7
 800e9ac:	47c8      	blx	r9
 800e9ae:	3001      	adds	r0, #1
 800e9b0:	d0e6      	beq.n	800e980 <_printf_common+0xa4>
 800e9b2:	3601      	adds	r6, #1
 800e9b4:	e7d9      	b.n	800e96a <_printf_common+0x8e>
	...

0800e9b8 <_printf_i>:
 800e9b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9bc:	7e0f      	ldrb	r7, [r1, #24]
 800e9be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e9c0:	2f78      	cmp	r7, #120	@ 0x78
 800e9c2:	4691      	mov	r9, r2
 800e9c4:	4680      	mov	r8, r0
 800e9c6:	460c      	mov	r4, r1
 800e9c8:	469a      	mov	sl, r3
 800e9ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e9ce:	d807      	bhi.n	800e9e0 <_printf_i+0x28>
 800e9d0:	2f62      	cmp	r7, #98	@ 0x62
 800e9d2:	d80a      	bhi.n	800e9ea <_printf_i+0x32>
 800e9d4:	2f00      	cmp	r7, #0
 800e9d6:	f000 80d1 	beq.w	800eb7c <_printf_i+0x1c4>
 800e9da:	2f58      	cmp	r7, #88	@ 0x58
 800e9dc:	f000 80b8 	beq.w	800eb50 <_printf_i+0x198>
 800e9e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e9e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e9e8:	e03a      	b.n	800ea60 <_printf_i+0xa8>
 800e9ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e9ee:	2b15      	cmp	r3, #21
 800e9f0:	d8f6      	bhi.n	800e9e0 <_printf_i+0x28>
 800e9f2:	a101      	add	r1, pc, #4	@ (adr r1, 800e9f8 <_printf_i+0x40>)
 800e9f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e9f8:	0800ea51 	.word	0x0800ea51
 800e9fc:	0800ea65 	.word	0x0800ea65
 800ea00:	0800e9e1 	.word	0x0800e9e1
 800ea04:	0800e9e1 	.word	0x0800e9e1
 800ea08:	0800e9e1 	.word	0x0800e9e1
 800ea0c:	0800e9e1 	.word	0x0800e9e1
 800ea10:	0800ea65 	.word	0x0800ea65
 800ea14:	0800e9e1 	.word	0x0800e9e1
 800ea18:	0800e9e1 	.word	0x0800e9e1
 800ea1c:	0800e9e1 	.word	0x0800e9e1
 800ea20:	0800e9e1 	.word	0x0800e9e1
 800ea24:	0800eb63 	.word	0x0800eb63
 800ea28:	0800ea8f 	.word	0x0800ea8f
 800ea2c:	0800eb1d 	.word	0x0800eb1d
 800ea30:	0800e9e1 	.word	0x0800e9e1
 800ea34:	0800e9e1 	.word	0x0800e9e1
 800ea38:	0800eb85 	.word	0x0800eb85
 800ea3c:	0800e9e1 	.word	0x0800e9e1
 800ea40:	0800ea8f 	.word	0x0800ea8f
 800ea44:	0800e9e1 	.word	0x0800e9e1
 800ea48:	0800e9e1 	.word	0x0800e9e1
 800ea4c:	0800eb25 	.word	0x0800eb25
 800ea50:	6833      	ldr	r3, [r6, #0]
 800ea52:	1d1a      	adds	r2, r3, #4
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	6032      	str	r2, [r6, #0]
 800ea58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ea60:	2301      	movs	r3, #1
 800ea62:	e09c      	b.n	800eb9e <_printf_i+0x1e6>
 800ea64:	6833      	ldr	r3, [r6, #0]
 800ea66:	6820      	ldr	r0, [r4, #0]
 800ea68:	1d19      	adds	r1, r3, #4
 800ea6a:	6031      	str	r1, [r6, #0]
 800ea6c:	0606      	lsls	r6, r0, #24
 800ea6e:	d501      	bpl.n	800ea74 <_printf_i+0xbc>
 800ea70:	681d      	ldr	r5, [r3, #0]
 800ea72:	e003      	b.n	800ea7c <_printf_i+0xc4>
 800ea74:	0645      	lsls	r5, r0, #25
 800ea76:	d5fb      	bpl.n	800ea70 <_printf_i+0xb8>
 800ea78:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ea7c:	2d00      	cmp	r5, #0
 800ea7e:	da03      	bge.n	800ea88 <_printf_i+0xd0>
 800ea80:	232d      	movs	r3, #45	@ 0x2d
 800ea82:	426d      	negs	r5, r5
 800ea84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea88:	4858      	ldr	r0, [pc, #352]	@ (800ebec <_printf_i+0x234>)
 800ea8a:	230a      	movs	r3, #10
 800ea8c:	e011      	b.n	800eab2 <_printf_i+0xfa>
 800ea8e:	6821      	ldr	r1, [r4, #0]
 800ea90:	6833      	ldr	r3, [r6, #0]
 800ea92:	0608      	lsls	r0, r1, #24
 800ea94:	f853 5b04 	ldr.w	r5, [r3], #4
 800ea98:	d402      	bmi.n	800eaa0 <_printf_i+0xe8>
 800ea9a:	0649      	lsls	r1, r1, #25
 800ea9c:	bf48      	it	mi
 800ea9e:	b2ad      	uxthmi	r5, r5
 800eaa0:	2f6f      	cmp	r7, #111	@ 0x6f
 800eaa2:	4852      	ldr	r0, [pc, #328]	@ (800ebec <_printf_i+0x234>)
 800eaa4:	6033      	str	r3, [r6, #0]
 800eaa6:	bf14      	ite	ne
 800eaa8:	230a      	movne	r3, #10
 800eaaa:	2308      	moveq	r3, #8
 800eaac:	2100      	movs	r1, #0
 800eaae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eab2:	6866      	ldr	r6, [r4, #4]
 800eab4:	60a6      	str	r6, [r4, #8]
 800eab6:	2e00      	cmp	r6, #0
 800eab8:	db05      	blt.n	800eac6 <_printf_i+0x10e>
 800eaba:	6821      	ldr	r1, [r4, #0]
 800eabc:	432e      	orrs	r6, r5
 800eabe:	f021 0104 	bic.w	r1, r1, #4
 800eac2:	6021      	str	r1, [r4, #0]
 800eac4:	d04b      	beq.n	800eb5e <_printf_i+0x1a6>
 800eac6:	4616      	mov	r6, r2
 800eac8:	fbb5 f1f3 	udiv	r1, r5, r3
 800eacc:	fb03 5711 	mls	r7, r3, r1, r5
 800ead0:	5dc7      	ldrb	r7, [r0, r7]
 800ead2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ead6:	462f      	mov	r7, r5
 800ead8:	42bb      	cmp	r3, r7
 800eada:	460d      	mov	r5, r1
 800eadc:	d9f4      	bls.n	800eac8 <_printf_i+0x110>
 800eade:	2b08      	cmp	r3, #8
 800eae0:	d10b      	bne.n	800eafa <_printf_i+0x142>
 800eae2:	6823      	ldr	r3, [r4, #0]
 800eae4:	07df      	lsls	r7, r3, #31
 800eae6:	d508      	bpl.n	800eafa <_printf_i+0x142>
 800eae8:	6923      	ldr	r3, [r4, #16]
 800eaea:	6861      	ldr	r1, [r4, #4]
 800eaec:	4299      	cmp	r1, r3
 800eaee:	bfde      	ittt	le
 800eaf0:	2330      	movle	r3, #48	@ 0x30
 800eaf2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eaf6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800eafa:	1b92      	subs	r2, r2, r6
 800eafc:	6122      	str	r2, [r4, #16]
 800eafe:	f8cd a000 	str.w	sl, [sp]
 800eb02:	464b      	mov	r3, r9
 800eb04:	aa03      	add	r2, sp, #12
 800eb06:	4621      	mov	r1, r4
 800eb08:	4640      	mov	r0, r8
 800eb0a:	f7ff fee7 	bl	800e8dc <_printf_common>
 800eb0e:	3001      	adds	r0, #1
 800eb10:	d14a      	bne.n	800eba8 <_printf_i+0x1f0>
 800eb12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eb16:	b004      	add	sp, #16
 800eb18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb1c:	6823      	ldr	r3, [r4, #0]
 800eb1e:	f043 0320 	orr.w	r3, r3, #32
 800eb22:	6023      	str	r3, [r4, #0]
 800eb24:	4832      	ldr	r0, [pc, #200]	@ (800ebf0 <_printf_i+0x238>)
 800eb26:	2778      	movs	r7, #120	@ 0x78
 800eb28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eb2c:	6823      	ldr	r3, [r4, #0]
 800eb2e:	6831      	ldr	r1, [r6, #0]
 800eb30:	061f      	lsls	r7, r3, #24
 800eb32:	f851 5b04 	ldr.w	r5, [r1], #4
 800eb36:	d402      	bmi.n	800eb3e <_printf_i+0x186>
 800eb38:	065f      	lsls	r7, r3, #25
 800eb3a:	bf48      	it	mi
 800eb3c:	b2ad      	uxthmi	r5, r5
 800eb3e:	6031      	str	r1, [r6, #0]
 800eb40:	07d9      	lsls	r1, r3, #31
 800eb42:	bf44      	itt	mi
 800eb44:	f043 0320 	orrmi.w	r3, r3, #32
 800eb48:	6023      	strmi	r3, [r4, #0]
 800eb4a:	b11d      	cbz	r5, 800eb54 <_printf_i+0x19c>
 800eb4c:	2310      	movs	r3, #16
 800eb4e:	e7ad      	b.n	800eaac <_printf_i+0xf4>
 800eb50:	4826      	ldr	r0, [pc, #152]	@ (800ebec <_printf_i+0x234>)
 800eb52:	e7e9      	b.n	800eb28 <_printf_i+0x170>
 800eb54:	6823      	ldr	r3, [r4, #0]
 800eb56:	f023 0320 	bic.w	r3, r3, #32
 800eb5a:	6023      	str	r3, [r4, #0]
 800eb5c:	e7f6      	b.n	800eb4c <_printf_i+0x194>
 800eb5e:	4616      	mov	r6, r2
 800eb60:	e7bd      	b.n	800eade <_printf_i+0x126>
 800eb62:	6833      	ldr	r3, [r6, #0]
 800eb64:	6825      	ldr	r5, [r4, #0]
 800eb66:	6961      	ldr	r1, [r4, #20]
 800eb68:	1d18      	adds	r0, r3, #4
 800eb6a:	6030      	str	r0, [r6, #0]
 800eb6c:	062e      	lsls	r6, r5, #24
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	d501      	bpl.n	800eb76 <_printf_i+0x1be>
 800eb72:	6019      	str	r1, [r3, #0]
 800eb74:	e002      	b.n	800eb7c <_printf_i+0x1c4>
 800eb76:	0668      	lsls	r0, r5, #25
 800eb78:	d5fb      	bpl.n	800eb72 <_printf_i+0x1ba>
 800eb7a:	8019      	strh	r1, [r3, #0]
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	6123      	str	r3, [r4, #16]
 800eb80:	4616      	mov	r6, r2
 800eb82:	e7bc      	b.n	800eafe <_printf_i+0x146>
 800eb84:	6833      	ldr	r3, [r6, #0]
 800eb86:	1d1a      	adds	r2, r3, #4
 800eb88:	6032      	str	r2, [r6, #0]
 800eb8a:	681e      	ldr	r6, [r3, #0]
 800eb8c:	6862      	ldr	r2, [r4, #4]
 800eb8e:	2100      	movs	r1, #0
 800eb90:	4630      	mov	r0, r6
 800eb92:	f7f1 fb3d 	bl	8000210 <memchr>
 800eb96:	b108      	cbz	r0, 800eb9c <_printf_i+0x1e4>
 800eb98:	1b80      	subs	r0, r0, r6
 800eb9a:	6060      	str	r0, [r4, #4]
 800eb9c:	6863      	ldr	r3, [r4, #4]
 800eb9e:	6123      	str	r3, [r4, #16]
 800eba0:	2300      	movs	r3, #0
 800eba2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eba6:	e7aa      	b.n	800eafe <_printf_i+0x146>
 800eba8:	6923      	ldr	r3, [r4, #16]
 800ebaa:	4632      	mov	r2, r6
 800ebac:	4649      	mov	r1, r9
 800ebae:	4640      	mov	r0, r8
 800ebb0:	47d0      	blx	sl
 800ebb2:	3001      	adds	r0, #1
 800ebb4:	d0ad      	beq.n	800eb12 <_printf_i+0x15a>
 800ebb6:	6823      	ldr	r3, [r4, #0]
 800ebb8:	079b      	lsls	r3, r3, #30
 800ebba:	d413      	bmi.n	800ebe4 <_printf_i+0x22c>
 800ebbc:	68e0      	ldr	r0, [r4, #12]
 800ebbe:	9b03      	ldr	r3, [sp, #12]
 800ebc0:	4298      	cmp	r0, r3
 800ebc2:	bfb8      	it	lt
 800ebc4:	4618      	movlt	r0, r3
 800ebc6:	e7a6      	b.n	800eb16 <_printf_i+0x15e>
 800ebc8:	2301      	movs	r3, #1
 800ebca:	4632      	mov	r2, r6
 800ebcc:	4649      	mov	r1, r9
 800ebce:	4640      	mov	r0, r8
 800ebd0:	47d0      	blx	sl
 800ebd2:	3001      	adds	r0, #1
 800ebd4:	d09d      	beq.n	800eb12 <_printf_i+0x15a>
 800ebd6:	3501      	adds	r5, #1
 800ebd8:	68e3      	ldr	r3, [r4, #12]
 800ebda:	9903      	ldr	r1, [sp, #12]
 800ebdc:	1a5b      	subs	r3, r3, r1
 800ebde:	42ab      	cmp	r3, r5
 800ebe0:	dcf2      	bgt.n	800ebc8 <_printf_i+0x210>
 800ebe2:	e7eb      	b.n	800ebbc <_printf_i+0x204>
 800ebe4:	2500      	movs	r5, #0
 800ebe6:	f104 0619 	add.w	r6, r4, #25
 800ebea:	e7f5      	b.n	800ebd8 <_printf_i+0x220>
 800ebec:	08015aac 	.word	0x08015aac
 800ebf0:	08015abd 	.word	0x08015abd

0800ebf4 <_scanf_float>:
 800ebf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebf8:	b087      	sub	sp, #28
 800ebfa:	4691      	mov	r9, r2
 800ebfc:	9303      	str	r3, [sp, #12]
 800ebfe:	688b      	ldr	r3, [r1, #8]
 800ec00:	1e5a      	subs	r2, r3, #1
 800ec02:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ec06:	bf81      	itttt	hi
 800ec08:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ec0c:	eb03 0b05 	addhi.w	fp, r3, r5
 800ec10:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ec14:	608b      	strhi	r3, [r1, #8]
 800ec16:	680b      	ldr	r3, [r1, #0]
 800ec18:	460a      	mov	r2, r1
 800ec1a:	f04f 0500 	mov.w	r5, #0
 800ec1e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ec22:	f842 3b1c 	str.w	r3, [r2], #28
 800ec26:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ec2a:	4680      	mov	r8, r0
 800ec2c:	460c      	mov	r4, r1
 800ec2e:	bf98      	it	ls
 800ec30:	f04f 0b00 	movls.w	fp, #0
 800ec34:	9201      	str	r2, [sp, #4]
 800ec36:	4616      	mov	r6, r2
 800ec38:	46aa      	mov	sl, r5
 800ec3a:	462f      	mov	r7, r5
 800ec3c:	9502      	str	r5, [sp, #8]
 800ec3e:	68a2      	ldr	r2, [r4, #8]
 800ec40:	b15a      	cbz	r2, 800ec5a <_scanf_float+0x66>
 800ec42:	f8d9 3000 	ldr.w	r3, [r9]
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	2b4e      	cmp	r3, #78	@ 0x4e
 800ec4a:	d863      	bhi.n	800ed14 <_scanf_float+0x120>
 800ec4c:	2b40      	cmp	r3, #64	@ 0x40
 800ec4e:	d83b      	bhi.n	800ecc8 <_scanf_float+0xd4>
 800ec50:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ec54:	b2c8      	uxtb	r0, r1
 800ec56:	280e      	cmp	r0, #14
 800ec58:	d939      	bls.n	800ecce <_scanf_float+0xda>
 800ec5a:	b11f      	cbz	r7, 800ec64 <_scanf_float+0x70>
 800ec5c:	6823      	ldr	r3, [r4, #0]
 800ec5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ec62:	6023      	str	r3, [r4, #0]
 800ec64:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ec68:	f1ba 0f01 	cmp.w	sl, #1
 800ec6c:	f200 8114 	bhi.w	800ee98 <_scanf_float+0x2a4>
 800ec70:	9b01      	ldr	r3, [sp, #4]
 800ec72:	429e      	cmp	r6, r3
 800ec74:	f200 8105 	bhi.w	800ee82 <_scanf_float+0x28e>
 800ec78:	2001      	movs	r0, #1
 800ec7a:	b007      	add	sp, #28
 800ec7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec80:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ec84:	2a0d      	cmp	r2, #13
 800ec86:	d8e8      	bhi.n	800ec5a <_scanf_float+0x66>
 800ec88:	a101      	add	r1, pc, #4	@ (adr r1, 800ec90 <_scanf_float+0x9c>)
 800ec8a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ec8e:	bf00      	nop
 800ec90:	0800edd9 	.word	0x0800edd9
 800ec94:	0800ec5b 	.word	0x0800ec5b
 800ec98:	0800ec5b 	.word	0x0800ec5b
 800ec9c:	0800ec5b 	.word	0x0800ec5b
 800eca0:	0800ee35 	.word	0x0800ee35
 800eca4:	0800ee0f 	.word	0x0800ee0f
 800eca8:	0800ec5b 	.word	0x0800ec5b
 800ecac:	0800ec5b 	.word	0x0800ec5b
 800ecb0:	0800ede7 	.word	0x0800ede7
 800ecb4:	0800ec5b 	.word	0x0800ec5b
 800ecb8:	0800ec5b 	.word	0x0800ec5b
 800ecbc:	0800ec5b 	.word	0x0800ec5b
 800ecc0:	0800ec5b 	.word	0x0800ec5b
 800ecc4:	0800eda3 	.word	0x0800eda3
 800ecc8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800eccc:	e7da      	b.n	800ec84 <_scanf_float+0x90>
 800ecce:	290e      	cmp	r1, #14
 800ecd0:	d8c3      	bhi.n	800ec5a <_scanf_float+0x66>
 800ecd2:	a001      	add	r0, pc, #4	@ (adr r0, 800ecd8 <_scanf_float+0xe4>)
 800ecd4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ecd8:	0800ed93 	.word	0x0800ed93
 800ecdc:	0800ec5b 	.word	0x0800ec5b
 800ece0:	0800ed93 	.word	0x0800ed93
 800ece4:	0800ee23 	.word	0x0800ee23
 800ece8:	0800ec5b 	.word	0x0800ec5b
 800ecec:	0800ed35 	.word	0x0800ed35
 800ecf0:	0800ed79 	.word	0x0800ed79
 800ecf4:	0800ed79 	.word	0x0800ed79
 800ecf8:	0800ed79 	.word	0x0800ed79
 800ecfc:	0800ed79 	.word	0x0800ed79
 800ed00:	0800ed79 	.word	0x0800ed79
 800ed04:	0800ed79 	.word	0x0800ed79
 800ed08:	0800ed79 	.word	0x0800ed79
 800ed0c:	0800ed79 	.word	0x0800ed79
 800ed10:	0800ed79 	.word	0x0800ed79
 800ed14:	2b6e      	cmp	r3, #110	@ 0x6e
 800ed16:	d809      	bhi.n	800ed2c <_scanf_float+0x138>
 800ed18:	2b60      	cmp	r3, #96	@ 0x60
 800ed1a:	d8b1      	bhi.n	800ec80 <_scanf_float+0x8c>
 800ed1c:	2b54      	cmp	r3, #84	@ 0x54
 800ed1e:	d07b      	beq.n	800ee18 <_scanf_float+0x224>
 800ed20:	2b59      	cmp	r3, #89	@ 0x59
 800ed22:	d19a      	bne.n	800ec5a <_scanf_float+0x66>
 800ed24:	2d07      	cmp	r5, #7
 800ed26:	d198      	bne.n	800ec5a <_scanf_float+0x66>
 800ed28:	2508      	movs	r5, #8
 800ed2a:	e02f      	b.n	800ed8c <_scanf_float+0x198>
 800ed2c:	2b74      	cmp	r3, #116	@ 0x74
 800ed2e:	d073      	beq.n	800ee18 <_scanf_float+0x224>
 800ed30:	2b79      	cmp	r3, #121	@ 0x79
 800ed32:	e7f6      	b.n	800ed22 <_scanf_float+0x12e>
 800ed34:	6821      	ldr	r1, [r4, #0]
 800ed36:	05c8      	lsls	r0, r1, #23
 800ed38:	d51e      	bpl.n	800ed78 <_scanf_float+0x184>
 800ed3a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ed3e:	6021      	str	r1, [r4, #0]
 800ed40:	3701      	adds	r7, #1
 800ed42:	f1bb 0f00 	cmp.w	fp, #0
 800ed46:	d003      	beq.n	800ed50 <_scanf_float+0x15c>
 800ed48:	3201      	adds	r2, #1
 800ed4a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800ed4e:	60a2      	str	r2, [r4, #8]
 800ed50:	68a3      	ldr	r3, [r4, #8]
 800ed52:	3b01      	subs	r3, #1
 800ed54:	60a3      	str	r3, [r4, #8]
 800ed56:	6923      	ldr	r3, [r4, #16]
 800ed58:	3301      	adds	r3, #1
 800ed5a:	6123      	str	r3, [r4, #16]
 800ed5c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ed60:	3b01      	subs	r3, #1
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	f8c9 3004 	str.w	r3, [r9, #4]
 800ed68:	f340 8082 	ble.w	800ee70 <_scanf_float+0x27c>
 800ed6c:	f8d9 3000 	ldr.w	r3, [r9]
 800ed70:	3301      	adds	r3, #1
 800ed72:	f8c9 3000 	str.w	r3, [r9]
 800ed76:	e762      	b.n	800ec3e <_scanf_float+0x4a>
 800ed78:	eb1a 0105 	adds.w	r1, sl, r5
 800ed7c:	f47f af6d 	bne.w	800ec5a <_scanf_float+0x66>
 800ed80:	6822      	ldr	r2, [r4, #0]
 800ed82:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ed86:	6022      	str	r2, [r4, #0]
 800ed88:	460d      	mov	r5, r1
 800ed8a:	468a      	mov	sl, r1
 800ed8c:	f806 3b01 	strb.w	r3, [r6], #1
 800ed90:	e7de      	b.n	800ed50 <_scanf_float+0x15c>
 800ed92:	6822      	ldr	r2, [r4, #0]
 800ed94:	0610      	lsls	r0, r2, #24
 800ed96:	f57f af60 	bpl.w	800ec5a <_scanf_float+0x66>
 800ed9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ed9e:	6022      	str	r2, [r4, #0]
 800eda0:	e7f4      	b.n	800ed8c <_scanf_float+0x198>
 800eda2:	f1ba 0f00 	cmp.w	sl, #0
 800eda6:	d10c      	bne.n	800edc2 <_scanf_float+0x1ce>
 800eda8:	b977      	cbnz	r7, 800edc8 <_scanf_float+0x1d4>
 800edaa:	6822      	ldr	r2, [r4, #0]
 800edac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800edb0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800edb4:	d108      	bne.n	800edc8 <_scanf_float+0x1d4>
 800edb6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800edba:	6022      	str	r2, [r4, #0]
 800edbc:	f04f 0a01 	mov.w	sl, #1
 800edc0:	e7e4      	b.n	800ed8c <_scanf_float+0x198>
 800edc2:	f1ba 0f02 	cmp.w	sl, #2
 800edc6:	d050      	beq.n	800ee6a <_scanf_float+0x276>
 800edc8:	2d01      	cmp	r5, #1
 800edca:	d002      	beq.n	800edd2 <_scanf_float+0x1de>
 800edcc:	2d04      	cmp	r5, #4
 800edce:	f47f af44 	bne.w	800ec5a <_scanf_float+0x66>
 800edd2:	3501      	adds	r5, #1
 800edd4:	b2ed      	uxtb	r5, r5
 800edd6:	e7d9      	b.n	800ed8c <_scanf_float+0x198>
 800edd8:	f1ba 0f01 	cmp.w	sl, #1
 800eddc:	f47f af3d 	bne.w	800ec5a <_scanf_float+0x66>
 800ede0:	f04f 0a02 	mov.w	sl, #2
 800ede4:	e7d2      	b.n	800ed8c <_scanf_float+0x198>
 800ede6:	b975      	cbnz	r5, 800ee06 <_scanf_float+0x212>
 800ede8:	2f00      	cmp	r7, #0
 800edea:	f47f af37 	bne.w	800ec5c <_scanf_float+0x68>
 800edee:	6822      	ldr	r2, [r4, #0]
 800edf0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800edf4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800edf8:	f040 8103 	bne.w	800f002 <_scanf_float+0x40e>
 800edfc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ee00:	6022      	str	r2, [r4, #0]
 800ee02:	2501      	movs	r5, #1
 800ee04:	e7c2      	b.n	800ed8c <_scanf_float+0x198>
 800ee06:	2d03      	cmp	r5, #3
 800ee08:	d0e3      	beq.n	800edd2 <_scanf_float+0x1de>
 800ee0a:	2d05      	cmp	r5, #5
 800ee0c:	e7df      	b.n	800edce <_scanf_float+0x1da>
 800ee0e:	2d02      	cmp	r5, #2
 800ee10:	f47f af23 	bne.w	800ec5a <_scanf_float+0x66>
 800ee14:	2503      	movs	r5, #3
 800ee16:	e7b9      	b.n	800ed8c <_scanf_float+0x198>
 800ee18:	2d06      	cmp	r5, #6
 800ee1a:	f47f af1e 	bne.w	800ec5a <_scanf_float+0x66>
 800ee1e:	2507      	movs	r5, #7
 800ee20:	e7b4      	b.n	800ed8c <_scanf_float+0x198>
 800ee22:	6822      	ldr	r2, [r4, #0]
 800ee24:	0591      	lsls	r1, r2, #22
 800ee26:	f57f af18 	bpl.w	800ec5a <_scanf_float+0x66>
 800ee2a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ee2e:	6022      	str	r2, [r4, #0]
 800ee30:	9702      	str	r7, [sp, #8]
 800ee32:	e7ab      	b.n	800ed8c <_scanf_float+0x198>
 800ee34:	6822      	ldr	r2, [r4, #0]
 800ee36:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ee3a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ee3e:	d005      	beq.n	800ee4c <_scanf_float+0x258>
 800ee40:	0550      	lsls	r0, r2, #21
 800ee42:	f57f af0a 	bpl.w	800ec5a <_scanf_float+0x66>
 800ee46:	2f00      	cmp	r7, #0
 800ee48:	f000 80db 	beq.w	800f002 <_scanf_float+0x40e>
 800ee4c:	0591      	lsls	r1, r2, #22
 800ee4e:	bf58      	it	pl
 800ee50:	9902      	ldrpl	r1, [sp, #8]
 800ee52:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ee56:	bf58      	it	pl
 800ee58:	1a79      	subpl	r1, r7, r1
 800ee5a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ee5e:	bf58      	it	pl
 800ee60:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ee64:	6022      	str	r2, [r4, #0]
 800ee66:	2700      	movs	r7, #0
 800ee68:	e790      	b.n	800ed8c <_scanf_float+0x198>
 800ee6a:	f04f 0a03 	mov.w	sl, #3
 800ee6e:	e78d      	b.n	800ed8c <_scanf_float+0x198>
 800ee70:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ee74:	4649      	mov	r1, r9
 800ee76:	4640      	mov	r0, r8
 800ee78:	4798      	blx	r3
 800ee7a:	2800      	cmp	r0, #0
 800ee7c:	f43f aedf 	beq.w	800ec3e <_scanf_float+0x4a>
 800ee80:	e6eb      	b.n	800ec5a <_scanf_float+0x66>
 800ee82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ee86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ee8a:	464a      	mov	r2, r9
 800ee8c:	4640      	mov	r0, r8
 800ee8e:	4798      	blx	r3
 800ee90:	6923      	ldr	r3, [r4, #16]
 800ee92:	3b01      	subs	r3, #1
 800ee94:	6123      	str	r3, [r4, #16]
 800ee96:	e6eb      	b.n	800ec70 <_scanf_float+0x7c>
 800ee98:	1e6b      	subs	r3, r5, #1
 800ee9a:	2b06      	cmp	r3, #6
 800ee9c:	d824      	bhi.n	800eee8 <_scanf_float+0x2f4>
 800ee9e:	2d02      	cmp	r5, #2
 800eea0:	d836      	bhi.n	800ef10 <_scanf_float+0x31c>
 800eea2:	9b01      	ldr	r3, [sp, #4]
 800eea4:	429e      	cmp	r6, r3
 800eea6:	f67f aee7 	bls.w	800ec78 <_scanf_float+0x84>
 800eeaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eeae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eeb2:	464a      	mov	r2, r9
 800eeb4:	4640      	mov	r0, r8
 800eeb6:	4798      	blx	r3
 800eeb8:	6923      	ldr	r3, [r4, #16]
 800eeba:	3b01      	subs	r3, #1
 800eebc:	6123      	str	r3, [r4, #16]
 800eebe:	e7f0      	b.n	800eea2 <_scanf_float+0x2ae>
 800eec0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eec4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800eec8:	464a      	mov	r2, r9
 800eeca:	4640      	mov	r0, r8
 800eecc:	4798      	blx	r3
 800eece:	6923      	ldr	r3, [r4, #16]
 800eed0:	3b01      	subs	r3, #1
 800eed2:	6123      	str	r3, [r4, #16]
 800eed4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800eed8:	fa5f fa8a 	uxtb.w	sl, sl
 800eedc:	f1ba 0f02 	cmp.w	sl, #2
 800eee0:	d1ee      	bne.n	800eec0 <_scanf_float+0x2cc>
 800eee2:	3d03      	subs	r5, #3
 800eee4:	b2ed      	uxtb	r5, r5
 800eee6:	1b76      	subs	r6, r6, r5
 800eee8:	6823      	ldr	r3, [r4, #0]
 800eeea:	05da      	lsls	r2, r3, #23
 800eeec:	d530      	bpl.n	800ef50 <_scanf_float+0x35c>
 800eeee:	055b      	lsls	r3, r3, #21
 800eef0:	d511      	bpl.n	800ef16 <_scanf_float+0x322>
 800eef2:	9b01      	ldr	r3, [sp, #4]
 800eef4:	429e      	cmp	r6, r3
 800eef6:	f67f aebf 	bls.w	800ec78 <_scanf_float+0x84>
 800eefa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eefe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ef02:	464a      	mov	r2, r9
 800ef04:	4640      	mov	r0, r8
 800ef06:	4798      	blx	r3
 800ef08:	6923      	ldr	r3, [r4, #16]
 800ef0a:	3b01      	subs	r3, #1
 800ef0c:	6123      	str	r3, [r4, #16]
 800ef0e:	e7f0      	b.n	800eef2 <_scanf_float+0x2fe>
 800ef10:	46aa      	mov	sl, r5
 800ef12:	46b3      	mov	fp, r6
 800ef14:	e7de      	b.n	800eed4 <_scanf_float+0x2e0>
 800ef16:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ef1a:	6923      	ldr	r3, [r4, #16]
 800ef1c:	2965      	cmp	r1, #101	@ 0x65
 800ef1e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ef22:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800ef26:	6123      	str	r3, [r4, #16]
 800ef28:	d00c      	beq.n	800ef44 <_scanf_float+0x350>
 800ef2a:	2945      	cmp	r1, #69	@ 0x45
 800ef2c:	d00a      	beq.n	800ef44 <_scanf_float+0x350>
 800ef2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ef32:	464a      	mov	r2, r9
 800ef34:	4640      	mov	r0, r8
 800ef36:	4798      	blx	r3
 800ef38:	6923      	ldr	r3, [r4, #16]
 800ef3a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ef3e:	3b01      	subs	r3, #1
 800ef40:	1eb5      	subs	r5, r6, #2
 800ef42:	6123      	str	r3, [r4, #16]
 800ef44:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ef48:	464a      	mov	r2, r9
 800ef4a:	4640      	mov	r0, r8
 800ef4c:	4798      	blx	r3
 800ef4e:	462e      	mov	r6, r5
 800ef50:	6822      	ldr	r2, [r4, #0]
 800ef52:	f012 0210 	ands.w	r2, r2, #16
 800ef56:	d001      	beq.n	800ef5c <_scanf_float+0x368>
 800ef58:	2000      	movs	r0, #0
 800ef5a:	e68e      	b.n	800ec7a <_scanf_float+0x86>
 800ef5c:	7032      	strb	r2, [r6, #0]
 800ef5e:	6823      	ldr	r3, [r4, #0]
 800ef60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ef64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ef68:	d125      	bne.n	800efb6 <_scanf_float+0x3c2>
 800ef6a:	9b02      	ldr	r3, [sp, #8]
 800ef6c:	429f      	cmp	r7, r3
 800ef6e:	d00a      	beq.n	800ef86 <_scanf_float+0x392>
 800ef70:	1bda      	subs	r2, r3, r7
 800ef72:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ef76:	429e      	cmp	r6, r3
 800ef78:	bf28      	it	cs
 800ef7a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ef7e:	4922      	ldr	r1, [pc, #136]	@ (800f008 <_scanf_float+0x414>)
 800ef80:	4630      	mov	r0, r6
 800ef82:	f000 f887 	bl	800f094 <siprintf>
 800ef86:	9901      	ldr	r1, [sp, #4]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	4640      	mov	r0, r8
 800ef8c:	f000 ffbc 	bl	800ff08 <_strtod_r>
 800ef90:	9b03      	ldr	r3, [sp, #12]
 800ef92:	6821      	ldr	r1, [r4, #0]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	f011 0f02 	tst.w	r1, #2
 800ef9a:	ec57 6b10 	vmov	r6, r7, d0
 800ef9e:	f103 0204 	add.w	r2, r3, #4
 800efa2:	d015      	beq.n	800efd0 <_scanf_float+0x3dc>
 800efa4:	9903      	ldr	r1, [sp, #12]
 800efa6:	600a      	str	r2, [r1, #0]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	e9c3 6700 	strd	r6, r7, [r3]
 800efae:	68e3      	ldr	r3, [r4, #12]
 800efb0:	3301      	adds	r3, #1
 800efb2:	60e3      	str	r3, [r4, #12]
 800efb4:	e7d0      	b.n	800ef58 <_scanf_float+0x364>
 800efb6:	9b04      	ldr	r3, [sp, #16]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d0e4      	beq.n	800ef86 <_scanf_float+0x392>
 800efbc:	9905      	ldr	r1, [sp, #20]
 800efbe:	230a      	movs	r3, #10
 800efc0:	3101      	adds	r1, #1
 800efc2:	4640      	mov	r0, r8
 800efc4:	f001 f820 	bl	8010008 <_strtol_r>
 800efc8:	9b04      	ldr	r3, [sp, #16]
 800efca:	9e05      	ldr	r6, [sp, #20]
 800efcc:	1ac2      	subs	r2, r0, r3
 800efce:	e7d0      	b.n	800ef72 <_scanf_float+0x37e>
 800efd0:	f011 0f04 	tst.w	r1, #4
 800efd4:	9903      	ldr	r1, [sp, #12]
 800efd6:	600a      	str	r2, [r1, #0]
 800efd8:	d1e6      	bne.n	800efa8 <_scanf_float+0x3b4>
 800efda:	681d      	ldr	r5, [r3, #0]
 800efdc:	4632      	mov	r2, r6
 800efde:	463b      	mov	r3, r7
 800efe0:	4630      	mov	r0, r6
 800efe2:	4639      	mov	r1, r7
 800efe4:	f7f1 fdc2 	bl	8000b6c <__aeabi_dcmpun>
 800efe8:	b128      	cbz	r0, 800eff6 <_scanf_float+0x402>
 800efea:	4808      	ldr	r0, [pc, #32]	@ (800f00c <_scanf_float+0x418>)
 800efec:	f001 f90c 	bl	8010208 <nanf>
 800eff0:	ed85 0a00 	vstr	s0, [r5]
 800eff4:	e7db      	b.n	800efae <_scanf_float+0x3ba>
 800eff6:	4630      	mov	r0, r6
 800eff8:	4639      	mov	r1, r7
 800effa:	f7f1 fe15 	bl	8000c28 <__aeabi_d2f>
 800effe:	6028      	str	r0, [r5, #0]
 800f000:	e7d5      	b.n	800efae <_scanf_float+0x3ba>
 800f002:	2700      	movs	r7, #0
 800f004:	e62e      	b.n	800ec64 <_scanf_float+0x70>
 800f006:	bf00      	nop
 800f008:	08015ace 	.word	0x08015ace
 800f00c:	08015c8a 	.word	0x08015c8a

0800f010 <sniprintf>:
 800f010:	b40c      	push	{r2, r3}
 800f012:	b530      	push	{r4, r5, lr}
 800f014:	4b18      	ldr	r3, [pc, #96]	@ (800f078 <sniprintf+0x68>)
 800f016:	1e0c      	subs	r4, r1, #0
 800f018:	681d      	ldr	r5, [r3, #0]
 800f01a:	b09d      	sub	sp, #116	@ 0x74
 800f01c:	da08      	bge.n	800f030 <sniprintf+0x20>
 800f01e:	238b      	movs	r3, #139	@ 0x8b
 800f020:	602b      	str	r3, [r5, #0]
 800f022:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f026:	b01d      	add	sp, #116	@ 0x74
 800f028:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f02c:	b002      	add	sp, #8
 800f02e:	4770      	bx	lr
 800f030:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f034:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f038:	f04f 0300 	mov.w	r3, #0
 800f03c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f03e:	bf14      	ite	ne
 800f040:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800f044:	4623      	moveq	r3, r4
 800f046:	9304      	str	r3, [sp, #16]
 800f048:	9307      	str	r3, [sp, #28]
 800f04a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f04e:	9002      	str	r0, [sp, #8]
 800f050:	9006      	str	r0, [sp, #24]
 800f052:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f056:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f058:	ab21      	add	r3, sp, #132	@ 0x84
 800f05a:	a902      	add	r1, sp, #8
 800f05c:	4628      	mov	r0, r5
 800f05e:	9301      	str	r3, [sp, #4]
 800f060:	f002 fb10 	bl	8011684 <_svfiprintf_r>
 800f064:	1c43      	adds	r3, r0, #1
 800f066:	bfbc      	itt	lt
 800f068:	238b      	movlt	r3, #139	@ 0x8b
 800f06a:	602b      	strlt	r3, [r5, #0]
 800f06c:	2c00      	cmp	r4, #0
 800f06e:	d0da      	beq.n	800f026 <sniprintf+0x16>
 800f070:	9b02      	ldr	r3, [sp, #8]
 800f072:	2200      	movs	r2, #0
 800f074:	701a      	strb	r2, [r3, #0]
 800f076:	e7d6      	b.n	800f026 <sniprintf+0x16>
 800f078:	200001c4 	.word	0x200001c4

0800f07c <__malloc_lock>:
 800f07c:	4801      	ldr	r0, [pc, #4]	@ (800f084 <__malloc_lock+0x8>)
 800f07e:	f001 b894 	b.w	80101aa <__retarget_lock_acquire_recursive>
 800f082:	bf00      	nop
 800f084:	200019a0 	.word	0x200019a0

0800f088 <__malloc_unlock>:
 800f088:	4801      	ldr	r0, [pc, #4]	@ (800f090 <__malloc_unlock+0x8>)
 800f08a:	f001 b88f 	b.w	80101ac <__retarget_lock_release_recursive>
 800f08e:	bf00      	nop
 800f090:	200019a0 	.word	0x200019a0

0800f094 <siprintf>:
 800f094:	b40e      	push	{r1, r2, r3}
 800f096:	b510      	push	{r4, lr}
 800f098:	b09d      	sub	sp, #116	@ 0x74
 800f09a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f09c:	9002      	str	r0, [sp, #8]
 800f09e:	9006      	str	r0, [sp, #24]
 800f0a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f0a4:	480a      	ldr	r0, [pc, #40]	@ (800f0d0 <siprintf+0x3c>)
 800f0a6:	9107      	str	r1, [sp, #28]
 800f0a8:	9104      	str	r1, [sp, #16]
 800f0aa:	490a      	ldr	r1, [pc, #40]	@ (800f0d4 <siprintf+0x40>)
 800f0ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0b0:	9105      	str	r1, [sp, #20]
 800f0b2:	2400      	movs	r4, #0
 800f0b4:	a902      	add	r1, sp, #8
 800f0b6:	6800      	ldr	r0, [r0, #0]
 800f0b8:	9301      	str	r3, [sp, #4]
 800f0ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 800f0bc:	f002 fae2 	bl	8011684 <_svfiprintf_r>
 800f0c0:	9b02      	ldr	r3, [sp, #8]
 800f0c2:	701c      	strb	r4, [r3, #0]
 800f0c4:	b01d      	add	sp, #116	@ 0x74
 800f0c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0ca:	b003      	add	sp, #12
 800f0cc:	4770      	bx	lr
 800f0ce:	bf00      	nop
 800f0d0:	200001c4 	.word	0x200001c4
 800f0d4:	ffff0208 	.word	0xffff0208

0800f0d8 <siscanf>:
 800f0d8:	b40e      	push	{r1, r2, r3}
 800f0da:	b570      	push	{r4, r5, r6, lr}
 800f0dc:	b09d      	sub	sp, #116	@ 0x74
 800f0de:	ac21      	add	r4, sp, #132	@ 0x84
 800f0e0:	2500      	movs	r5, #0
 800f0e2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f0e6:	f854 6b04 	ldr.w	r6, [r4], #4
 800f0ea:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f0ee:	951b      	str	r5, [sp, #108]	@ 0x6c
 800f0f0:	9002      	str	r0, [sp, #8]
 800f0f2:	9006      	str	r0, [sp, #24]
 800f0f4:	f7f1 f8dc 	bl	80002b0 <strlen>
 800f0f8:	4b0b      	ldr	r3, [pc, #44]	@ (800f128 <siscanf+0x50>)
 800f0fa:	9003      	str	r0, [sp, #12]
 800f0fc:	9007      	str	r0, [sp, #28]
 800f0fe:	480b      	ldr	r0, [pc, #44]	@ (800f12c <siscanf+0x54>)
 800f100:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f102:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f106:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f10a:	4632      	mov	r2, r6
 800f10c:	4623      	mov	r3, r4
 800f10e:	a902      	add	r1, sp, #8
 800f110:	6800      	ldr	r0, [r0, #0]
 800f112:	950f      	str	r5, [sp, #60]	@ 0x3c
 800f114:	9514      	str	r5, [sp, #80]	@ 0x50
 800f116:	9401      	str	r4, [sp, #4]
 800f118:	f002 fc0a 	bl	8011930 <__ssvfiscanf_r>
 800f11c:	b01d      	add	sp, #116	@ 0x74
 800f11e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f122:	b003      	add	sp, #12
 800f124:	4770      	bx	lr
 800f126:	bf00      	nop
 800f128:	0800f153 	.word	0x0800f153
 800f12c:	200001c4 	.word	0x200001c4

0800f130 <__sread>:
 800f130:	b510      	push	{r4, lr}
 800f132:	460c      	mov	r4, r1
 800f134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f138:	f000 ffd8 	bl	80100ec <_read_r>
 800f13c:	2800      	cmp	r0, #0
 800f13e:	bfab      	itete	ge
 800f140:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f142:	89a3      	ldrhlt	r3, [r4, #12]
 800f144:	181b      	addge	r3, r3, r0
 800f146:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f14a:	bfac      	ite	ge
 800f14c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f14e:	81a3      	strhlt	r3, [r4, #12]
 800f150:	bd10      	pop	{r4, pc}

0800f152 <__seofread>:
 800f152:	2000      	movs	r0, #0
 800f154:	4770      	bx	lr

0800f156 <__swrite>:
 800f156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f15a:	461f      	mov	r7, r3
 800f15c:	898b      	ldrh	r3, [r1, #12]
 800f15e:	05db      	lsls	r3, r3, #23
 800f160:	4605      	mov	r5, r0
 800f162:	460c      	mov	r4, r1
 800f164:	4616      	mov	r6, r2
 800f166:	d505      	bpl.n	800f174 <__swrite+0x1e>
 800f168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f16c:	2302      	movs	r3, #2
 800f16e:	2200      	movs	r2, #0
 800f170:	f000 ffaa 	bl	80100c8 <_lseek_r>
 800f174:	89a3      	ldrh	r3, [r4, #12]
 800f176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f17a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f17e:	81a3      	strh	r3, [r4, #12]
 800f180:	4632      	mov	r2, r6
 800f182:	463b      	mov	r3, r7
 800f184:	4628      	mov	r0, r5
 800f186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f18a:	f000 bfd1 	b.w	8010130 <_write_r>

0800f18e <__sseek>:
 800f18e:	b510      	push	{r4, lr}
 800f190:	460c      	mov	r4, r1
 800f192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f196:	f000 ff97 	bl	80100c8 <_lseek_r>
 800f19a:	1c43      	adds	r3, r0, #1
 800f19c:	89a3      	ldrh	r3, [r4, #12]
 800f19e:	bf15      	itete	ne
 800f1a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f1a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f1a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f1aa:	81a3      	strheq	r3, [r4, #12]
 800f1ac:	bf18      	it	ne
 800f1ae:	81a3      	strhne	r3, [r4, #12]
 800f1b0:	bd10      	pop	{r4, pc}

0800f1b2 <__sclose>:
 800f1b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1b6:	f000 bfff 	b.w	80101b8 <_close_r>
	...

0800f1bc <std>:
 800f1bc:	2300      	movs	r3, #0
 800f1be:	b510      	push	{r4, lr}
 800f1c0:	4604      	mov	r4, r0
 800f1c2:	e9c0 3300 	strd	r3, r3, [r0]
 800f1c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f1ca:	6083      	str	r3, [r0, #8]
 800f1cc:	8181      	strh	r1, [r0, #12]
 800f1ce:	6643      	str	r3, [r0, #100]	@ 0x64
 800f1d0:	81c2      	strh	r2, [r0, #14]
 800f1d2:	6183      	str	r3, [r0, #24]
 800f1d4:	4619      	mov	r1, r3
 800f1d6:	2208      	movs	r2, #8
 800f1d8:	305c      	adds	r0, #92	@ 0x5c
 800f1da:	f000 ff45 	bl	8010068 <memset>
 800f1de:	4b0d      	ldr	r3, [pc, #52]	@ (800f214 <std+0x58>)
 800f1e0:	6263      	str	r3, [r4, #36]	@ 0x24
 800f1e2:	4b0d      	ldr	r3, [pc, #52]	@ (800f218 <std+0x5c>)
 800f1e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f1e6:	4b0d      	ldr	r3, [pc, #52]	@ (800f21c <std+0x60>)
 800f1e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f1ea:	4b0d      	ldr	r3, [pc, #52]	@ (800f220 <std+0x64>)
 800f1ec:	6323      	str	r3, [r4, #48]	@ 0x30
 800f1ee:	4b0d      	ldr	r3, [pc, #52]	@ (800f224 <std+0x68>)
 800f1f0:	6224      	str	r4, [r4, #32]
 800f1f2:	429c      	cmp	r4, r3
 800f1f4:	d006      	beq.n	800f204 <std+0x48>
 800f1f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f1fa:	4294      	cmp	r4, r2
 800f1fc:	d002      	beq.n	800f204 <std+0x48>
 800f1fe:	33d0      	adds	r3, #208	@ 0xd0
 800f200:	429c      	cmp	r4, r3
 800f202:	d105      	bne.n	800f210 <std+0x54>
 800f204:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f20c:	f000 bfcc 	b.w	80101a8 <__retarget_lock_init_recursive>
 800f210:	bd10      	pop	{r4, pc}
 800f212:	bf00      	nop
 800f214:	0800f131 	.word	0x0800f131
 800f218:	0800f157 	.word	0x0800f157
 800f21c:	0800f18f 	.word	0x0800f18f
 800f220:	0800f1b3 	.word	0x0800f1b3
 800f224:	20001864 	.word	0x20001864

0800f228 <stdio_exit_handler>:
 800f228:	4a02      	ldr	r2, [pc, #8]	@ (800f234 <stdio_exit_handler+0xc>)
 800f22a:	4903      	ldr	r1, [pc, #12]	@ (800f238 <stdio_exit_handler+0x10>)
 800f22c:	4803      	ldr	r0, [pc, #12]	@ (800f23c <stdio_exit_handler+0x14>)
 800f22e:	f000 beed 	b.w	801000c <_fwalk_sglue>
 800f232:	bf00      	nop
 800f234:	2000004c 	.word	0x2000004c
 800f238:	08012069 	.word	0x08012069
 800f23c:	200001c8 	.word	0x200001c8

0800f240 <cleanup_stdio>:
 800f240:	6841      	ldr	r1, [r0, #4]
 800f242:	4b0c      	ldr	r3, [pc, #48]	@ (800f274 <cleanup_stdio+0x34>)
 800f244:	4299      	cmp	r1, r3
 800f246:	b510      	push	{r4, lr}
 800f248:	4604      	mov	r4, r0
 800f24a:	d001      	beq.n	800f250 <cleanup_stdio+0x10>
 800f24c:	f002 ff0c 	bl	8012068 <_fflush_r>
 800f250:	68a1      	ldr	r1, [r4, #8]
 800f252:	4b09      	ldr	r3, [pc, #36]	@ (800f278 <cleanup_stdio+0x38>)
 800f254:	4299      	cmp	r1, r3
 800f256:	d002      	beq.n	800f25e <cleanup_stdio+0x1e>
 800f258:	4620      	mov	r0, r4
 800f25a:	f002 ff05 	bl	8012068 <_fflush_r>
 800f25e:	68e1      	ldr	r1, [r4, #12]
 800f260:	4b06      	ldr	r3, [pc, #24]	@ (800f27c <cleanup_stdio+0x3c>)
 800f262:	4299      	cmp	r1, r3
 800f264:	d004      	beq.n	800f270 <cleanup_stdio+0x30>
 800f266:	4620      	mov	r0, r4
 800f268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f26c:	f002 befc 	b.w	8012068 <_fflush_r>
 800f270:	bd10      	pop	{r4, pc}
 800f272:	bf00      	nop
 800f274:	20001864 	.word	0x20001864
 800f278:	200018cc 	.word	0x200018cc
 800f27c:	20001934 	.word	0x20001934

0800f280 <global_stdio_init.part.0>:
 800f280:	b510      	push	{r4, lr}
 800f282:	4b0b      	ldr	r3, [pc, #44]	@ (800f2b0 <global_stdio_init.part.0+0x30>)
 800f284:	4c0b      	ldr	r4, [pc, #44]	@ (800f2b4 <global_stdio_init.part.0+0x34>)
 800f286:	4a0c      	ldr	r2, [pc, #48]	@ (800f2b8 <global_stdio_init.part.0+0x38>)
 800f288:	601a      	str	r2, [r3, #0]
 800f28a:	4620      	mov	r0, r4
 800f28c:	2200      	movs	r2, #0
 800f28e:	2104      	movs	r1, #4
 800f290:	f7ff ff94 	bl	800f1bc <std>
 800f294:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f298:	2201      	movs	r2, #1
 800f29a:	2109      	movs	r1, #9
 800f29c:	f7ff ff8e 	bl	800f1bc <std>
 800f2a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f2a4:	2202      	movs	r2, #2
 800f2a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2aa:	2112      	movs	r1, #18
 800f2ac:	f7ff bf86 	b.w	800f1bc <std>
 800f2b0:	2000199c 	.word	0x2000199c
 800f2b4:	20001864 	.word	0x20001864
 800f2b8:	0800f229 	.word	0x0800f229

0800f2bc <__sfp_lock_acquire>:
 800f2bc:	4801      	ldr	r0, [pc, #4]	@ (800f2c4 <__sfp_lock_acquire+0x8>)
 800f2be:	f000 bf74 	b.w	80101aa <__retarget_lock_acquire_recursive>
 800f2c2:	bf00      	nop
 800f2c4:	200019a1 	.word	0x200019a1

0800f2c8 <__sfp_lock_release>:
 800f2c8:	4801      	ldr	r0, [pc, #4]	@ (800f2d0 <__sfp_lock_release+0x8>)
 800f2ca:	f000 bf6f 	b.w	80101ac <__retarget_lock_release_recursive>
 800f2ce:	bf00      	nop
 800f2d0:	200019a1 	.word	0x200019a1

0800f2d4 <__sinit>:
 800f2d4:	b510      	push	{r4, lr}
 800f2d6:	4604      	mov	r4, r0
 800f2d8:	f7ff fff0 	bl	800f2bc <__sfp_lock_acquire>
 800f2dc:	6a23      	ldr	r3, [r4, #32]
 800f2de:	b11b      	cbz	r3, 800f2e8 <__sinit+0x14>
 800f2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2e4:	f7ff bff0 	b.w	800f2c8 <__sfp_lock_release>
 800f2e8:	4b04      	ldr	r3, [pc, #16]	@ (800f2fc <__sinit+0x28>)
 800f2ea:	6223      	str	r3, [r4, #32]
 800f2ec:	4b04      	ldr	r3, [pc, #16]	@ (800f300 <__sinit+0x2c>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d1f5      	bne.n	800f2e0 <__sinit+0xc>
 800f2f4:	f7ff ffc4 	bl	800f280 <global_stdio_init.part.0>
 800f2f8:	e7f2      	b.n	800f2e0 <__sinit+0xc>
 800f2fa:	bf00      	nop
 800f2fc:	0800f241 	.word	0x0800f241
 800f300:	2000199c 	.word	0x2000199c

0800f304 <sulp>:
 800f304:	b570      	push	{r4, r5, r6, lr}
 800f306:	4604      	mov	r4, r0
 800f308:	460d      	mov	r5, r1
 800f30a:	ec45 4b10 	vmov	d0, r4, r5
 800f30e:	4616      	mov	r6, r2
 800f310:	f003 fa3e 	bl	8012790 <__ulp>
 800f314:	ec51 0b10 	vmov	r0, r1, d0
 800f318:	b17e      	cbz	r6, 800f33a <sulp+0x36>
 800f31a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f31e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f322:	2b00      	cmp	r3, #0
 800f324:	dd09      	ble.n	800f33a <sulp+0x36>
 800f326:	051b      	lsls	r3, r3, #20
 800f328:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f32c:	2400      	movs	r4, #0
 800f32e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f332:	4622      	mov	r2, r4
 800f334:	462b      	mov	r3, r5
 800f336:	f7f1 f97f 	bl	8000638 <__aeabi_dmul>
 800f33a:	ec41 0b10 	vmov	d0, r0, r1
 800f33e:	bd70      	pop	{r4, r5, r6, pc}

0800f340 <_strtod_l>:
 800f340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f344:	b09f      	sub	sp, #124	@ 0x7c
 800f346:	460c      	mov	r4, r1
 800f348:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f34a:	2200      	movs	r2, #0
 800f34c:	921a      	str	r2, [sp, #104]	@ 0x68
 800f34e:	9005      	str	r0, [sp, #20]
 800f350:	f04f 0a00 	mov.w	sl, #0
 800f354:	f04f 0b00 	mov.w	fp, #0
 800f358:	460a      	mov	r2, r1
 800f35a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f35c:	7811      	ldrb	r1, [r2, #0]
 800f35e:	292b      	cmp	r1, #43	@ 0x2b
 800f360:	d04a      	beq.n	800f3f8 <_strtod_l+0xb8>
 800f362:	d838      	bhi.n	800f3d6 <_strtod_l+0x96>
 800f364:	290d      	cmp	r1, #13
 800f366:	d832      	bhi.n	800f3ce <_strtod_l+0x8e>
 800f368:	2908      	cmp	r1, #8
 800f36a:	d832      	bhi.n	800f3d2 <_strtod_l+0x92>
 800f36c:	2900      	cmp	r1, #0
 800f36e:	d03b      	beq.n	800f3e8 <_strtod_l+0xa8>
 800f370:	2200      	movs	r2, #0
 800f372:	920e      	str	r2, [sp, #56]	@ 0x38
 800f374:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f376:	782a      	ldrb	r2, [r5, #0]
 800f378:	2a30      	cmp	r2, #48	@ 0x30
 800f37a:	f040 80b2 	bne.w	800f4e2 <_strtod_l+0x1a2>
 800f37e:	786a      	ldrb	r2, [r5, #1]
 800f380:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f384:	2a58      	cmp	r2, #88	@ 0x58
 800f386:	d16e      	bne.n	800f466 <_strtod_l+0x126>
 800f388:	9302      	str	r3, [sp, #8]
 800f38a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f38c:	9301      	str	r3, [sp, #4]
 800f38e:	ab1a      	add	r3, sp, #104	@ 0x68
 800f390:	9300      	str	r3, [sp, #0]
 800f392:	4a8f      	ldr	r2, [pc, #572]	@ (800f5d0 <_strtod_l+0x290>)
 800f394:	9805      	ldr	r0, [sp, #20]
 800f396:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f398:	a919      	add	r1, sp, #100	@ 0x64
 800f39a:	f001 fe47 	bl	801102c <__gethex>
 800f39e:	f010 060f 	ands.w	r6, r0, #15
 800f3a2:	4604      	mov	r4, r0
 800f3a4:	d005      	beq.n	800f3b2 <_strtod_l+0x72>
 800f3a6:	2e06      	cmp	r6, #6
 800f3a8:	d128      	bne.n	800f3fc <_strtod_l+0xbc>
 800f3aa:	3501      	adds	r5, #1
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	9519      	str	r5, [sp, #100]	@ 0x64
 800f3b0:	930e      	str	r3, [sp, #56]	@ 0x38
 800f3b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	f040 858e 	bne.w	800fed6 <_strtod_l+0xb96>
 800f3ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f3bc:	b1cb      	cbz	r3, 800f3f2 <_strtod_l+0xb2>
 800f3be:	4652      	mov	r2, sl
 800f3c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f3c4:	ec43 2b10 	vmov	d0, r2, r3
 800f3c8:	b01f      	add	sp, #124	@ 0x7c
 800f3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ce:	2920      	cmp	r1, #32
 800f3d0:	d1ce      	bne.n	800f370 <_strtod_l+0x30>
 800f3d2:	3201      	adds	r2, #1
 800f3d4:	e7c1      	b.n	800f35a <_strtod_l+0x1a>
 800f3d6:	292d      	cmp	r1, #45	@ 0x2d
 800f3d8:	d1ca      	bne.n	800f370 <_strtod_l+0x30>
 800f3da:	2101      	movs	r1, #1
 800f3dc:	910e      	str	r1, [sp, #56]	@ 0x38
 800f3de:	1c51      	adds	r1, r2, #1
 800f3e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800f3e2:	7852      	ldrb	r2, [r2, #1]
 800f3e4:	2a00      	cmp	r2, #0
 800f3e6:	d1c5      	bne.n	800f374 <_strtod_l+0x34>
 800f3e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f3ea:	9419      	str	r4, [sp, #100]	@ 0x64
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	f040 8570 	bne.w	800fed2 <_strtod_l+0xb92>
 800f3f2:	4652      	mov	r2, sl
 800f3f4:	465b      	mov	r3, fp
 800f3f6:	e7e5      	b.n	800f3c4 <_strtod_l+0x84>
 800f3f8:	2100      	movs	r1, #0
 800f3fa:	e7ef      	b.n	800f3dc <_strtod_l+0x9c>
 800f3fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f3fe:	b13a      	cbz	r2, 800f410 <_strtod_l+0xd0>
 800f400:	2135      	movs	r1, #53	@ 0x35
 800f402:	a81c      	add	r0, sp, #112	@ 0x70
 800f404:	f003 fabe 	bl	8012984 <__copybits>
 800f408:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f40a:	9805      	ldr	r0, [sp, #20]
 800f40c:	f002 fe94 	bl	8012138 <_Bfree>
 800f410:	3e01      	subs	r6, #1
 800f412:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f414:	2e04      	cmp	r6, #4
 800f416:	d806      	bhi.n	800f426 <_strtod_l+0xe6>
 800f418:	e8df f006 	tbb	[pc, r6]
 800f41c:	201d0314 	.word	0x201d0314
 800f420:	14          	.byte	0x14
 800f421:	00          	.byte	0x00
 800f422:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f426:	05e1      	lsls	r1, r4, #23
 800f428:	bf48      	it	mi
 800f42a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f42e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f432:	0d1b      	lsrs	r3, r3, #20
 800f434:	051b      	lsls	r3, r3, #20
 800f436:	2b00      	cmp	r3, #0
 800f438:	d1bb      	bne.n	800f3b2 <_strtod_l+0x72>
 800f43a:	f000 fe8b 	bl	8010154 <__errno>
 800f43e:	2322      	movs	r3, #34	@ 0x22
 800f440:	6003      	str	r3, [r0, #0]
 800f442:	e7b6      	b.n	800f3b2 <_strtod_l+0x72>
 800f444:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f448:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f44c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f450:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f454:	e7e7      	b.n	800f426 <_strtod_l+0xe6>
 800f456:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800f5d8 <_strtod_l+0x298>
 800f45a:	e7e4      	b.n	800f426 <_strtod_l+0xe6>
 800f45c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f460:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f464:	e7df      	b.n	800f426 <_strtod_l+0xe6>
 800f466:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f468:	1c5a      	adds	r2, r3, #1
 800f46a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f46c:	785b      	ldrb	r3, [r3, #1]
 800f46e:	2b30      	cmp	r3, #48	@ 0x30
 800f470:	d0f9      	beq.n	800f466 <_strtod_l+0x126>
 800f472:	2b00      	cmp	r3, #0
 800f474:	d09d      	beq.n	800f3b2 <_strtod_l+0x72>
 800f476:	2301      	movs	r3, #1
 800f478:	2700      	movs	r7, #0
 800f47a:	9308      	str	r3, [sp, #32]
 800f47c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f47e:	930c      	str	r3, [sp, #48]	@ 0x30
 800f480:	970b      	str	r7, [sp, #44]	@ 0x2c
 800f482:	46b9      	mov	r9, r7
 800f484:	220a      	movs	r2, #10
 800f486:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f488:	7805      	ldrb	r5, [r0, #0]
 800f48a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f48e:	b2d9      	uxtb	r1, r3
 800f490:	2909      	cmp	r1, #9
 800f492:	d928      	bls.n	800f4e6 <_strtod_l+0x1a6>
 800f494:	494f      	ldr	r1, [pc, #316]	@ (800f5d4 <_strtod_l+0x294>)
 800f496:	2201      	movs	r2, #1
 800f498:	f000 fdee 	bl	8010078 <strncmp>
 800f49c:	2800      	cmp	r0, #0
 800f49e:	d032      	beq.n	800f506 <_strtod_l+0x1c6>
 800f4a0:	2000      	movs	r0, #0
 800f4a2:	462a      	mov	r2, r5
 800f4a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800f4a6:	464d      	mov	r5, r9
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	2a65      	cmp	r2, #101	@ 0x65
 800f4ac:	d001      	beq.n	800f4b2 <_strtod_l+0x172>
 800f4ae:	2a45      	cmp	r2, #69	@ 0x45
 800f4b0:	d114      	bne.n	800f4dc <_strtod_l+0x19c>
 800f4b2:	b91d      	cbnz	r5, 800f4bc <_strtod_l+0x17c>
 800f4b4:	9a08      	ldr	r2, [sp, #32]
 800f4b6:	4302      	orrs	r2, r0
 800f4b8:	d096      	beq.n	800f3e8 <_strtod_l+0xa8>
 800f4ba:	2500      	movs	r5, #0
 800f4bc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f4be:	1c62      	adds	r2, r4, #1
 800f4c0:	9219      	str	r2, [sp, #100]	@ 0x64
 800f4c2:	7862      	ldrb	r2, [r4, #1]
 800f4c4:	2a2b      	cmp	r2, #43	@ 0x2b
 800f4c6:	d07a      	beq.n	800f5be <_strtod_l+0x27e>
 800f4c8:	2a2d      	cmp	r2, #45	@ 0x2d
 800f4ca:	d07e      	beq.n	800f5ca <_strtod_l+0x28a>
 800f4cc:	f04f 0c00 	mov.w	ip, #0
 800f4d0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f4d4:	2909      	cmp	r1, #9
 800f4d6:	f240 8085 	bls.w	800f5e4 <_strtod_l+0x2a4>
 800f4da:	9419      	str	r4, [sp, #100]	@ 0x64
 800f4dc:	f04f 0800 	mov.w	r8, #0
 800f4e0:	e0a5      	b.n	800f62e <_strtod_l+0x2ee>
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	e7c8      	b.n	800f478 <_strtod_l+0x138>
 800f4e6:	f1b9 0f08 	cmp.w	r9, #8
 800f4ea:	bfd8      	it	le
 800f4ec:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800f4ee:	f100 0001 	add.w	r0, r0, #1
 800f4f2:	bfda      	itte	le
 800f4f4:	fb02 3301 	mlale	r3, r2, r1, r3
 800f4f8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800f4fa:	fb02 3707 	mlagt	r7, r2, r7, r3
 800f4fe:	f109 0901 	add.w	r9, r9, #1
 800f502:	9019      	str	r0, [sp, #100]	@ 0x64
 800f504:	e7bf      	b.n	800f486 <_strtod_l+0x146>
 800f506:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f508:	1c5a      	adds	r2, r3, #1
 800f50a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f50c:	785a      	ldrb	r2, [r3, #1]
 800f50e:	f1b9 0f00 	cmp.w	r9, #0
 800f512:	d03b      	beq.n	800f58c <_strtod_l+0x24c>
 800f514:	900a      	str	r0, [sp, #40]	@ 0x28
 800f516:	464d      	mov	r5, r9
 800f518:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f51c:	2b09      	cmp	r3, #9
 800f51e:	d912      	bls.n	800f546 <_strtod_l+0x206>
 800f520:	2301      	movs	r3, #1
 800f522:	e7c2      	b.n	800f4aa <_strtod_l+0x16a>
 800f524:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f526:	1c5a      	adds	r2, r3, #1
 800f528:	9219      	str	r2, [sp, #100]	@ 0x64
 800f52a:	785a      	ldrb	r2, [r3, #1]
 800f52c:	3001      	adds	r0, #1
 800f52e:	2a30      	cmp	r2, #48	@ 0x30
 800f530:	d0f8      	beq.n	800f524 <_strtod_l+0x1e4>
 800f532:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f536:	2b08      	cmp	r3, #8
 800f538:	f200 84d2 	bhi.w	800fee0 <_strtod_l+0xba0>
 800f53c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f53e:	900a      	str	r0, [sp, #40]	@ 0x28
 800f540:	2000      	movs	r0, #0
 800f542:	930c      	str	r3, [sp, #48]	@ 0x30
 800f544:	4605      	mov	r5, r0
 800f546:	3a30      	subs	r2, #48	@ 0x30
 800f548:	f100 0301 	add.w	r3, r0, #1
 800f54c:	d018      	beq.n	800f580 <_strtod_l+0x240>
 800f54e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f550:	4419      	add	r1, r3
 800f552:	910a      	str	r1, [sp, #40]	@ 0x28
 800f554:	462e      	mov	r6, r5
 800f556:	f04f 0e0a 	mov.w	lr, #10
 800f55a:	1c71      	adds	r1, r6, #1
 800f55c:	eba1 0c05 	sub.w	ip, r1, r5
 800f560:	4563      	cmp	r3, ip
 800f562:	dc15      	bgt.n	800f590 <_strtod_l+0x250>
 800f564:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800f568:	182b      	adds	r3, r5, r0
 800f56a:	2b08      	cmp	r3, #8
 800f56c:	f105 0501 	add.w	r5, r5, #1
 800f570:	4405      	add	r5, r0
 800f572:	dc1a      	bgt.n	800f5aa <_strtod_l+0x26a>
 800f574:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f576:	230a      	movs	r3, #10
 800f578:	fb03 2301 	mla	r3, r3, r1, r2
 800f57c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f57e:	2300      	movs	r3, #0
 800f580:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f582:	1c51      	adds	r1, r2, #1
 800f584:	9119      	str	r1, [sp, #100]	@ 0x64
 800f586:	7852      	ldrb	r2, [r2, #1]
 800f588:	4618      	mov	r0, r3
 800f58a:	e7c5      	b.n	800f518 <_strtod_l+0x1d8>
 800f58c:	4648      	mov	r0, r9
 800f58e:	e7ce      	b.n	800f52e <_strtod_l+0x1ee>
 800f590:	2e08      	cmp	r6, #8
 800f592:	dc05      	bgt.n	800f5a0 <_strtod_l+0x260>
 800f594:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f596:	fb0e f606 	mul.w	r6, lr, r6
 800f59a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800f59c:	460e      	mov	r6, r1
 800f59e:	e7dc      	b.n	800f55a <_strtod_l+0x21a>
 800f5a0:	2910      	cmp	r1, #16
 800f5a2:	bfd8      	it	le
 800f5a4:	fb0e f707 	mulle.w	r7, lr, r7
 800f5a8:	e7f8      	b.n	800f59c <_strtod_l+0x25c>
 800f5aa:	2b0f      	cmp	r3, #15
 800f5ac:	bfdc      	itt	le
 800f5ae:	230a      	movle	r3, #10
 800f5b0:	fb03 2707 	mlale	r7, r3, r7, r2
 800f5b4:	e7e3      	b.n	800f57e <_strtod_l+0x23e>
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	e77a      	b.n	800f4b4 <_strtod_l+0x174>
 800f5be:	f04f 0c00 	mov.w	ip, #0
 800f5c2:	1ca2      	adds	r2, r4, #2
 800f5c4:	9219      	str	r2, [sp, #100]	@ 0x64
 800f5c6:	78a2      	ldrb	r2, [r4, #2]
 800f5c8:	e782      	b.n	800f4d0 <_strtod_l+0x190>
 800f5ca:	f04f 0c01 	mov.w	ip, #1
 800f5ce:	e7f8      	b.n	800f5c2 <_strtod_l+0x282>
 800f5d0:	08015ca0 	.word	0x08015ca0
 800f5d4:	08015ad3 	.word	0x08015ad3
 800f5d8:	7ff00000 	.word	0x7ff00000
 800f5dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f5de:	1c51      	adds	r1, r2, #1
 800f5e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800f5e2:	7852      	ldrb	r2, [r2, #1]
 800f5e4:	2a30      	cmp	r2, #48	@ 0x30
 800f5e6:	d0f9      	beq.n	800f5dc <_strtod_l+0x29c>
 800f5e8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f5ec:	2908      	cmp	r1, #8
 800f5ee:	f63f af75 	bhi.w	800f4dc <_strtod_l+0x19c>
 800f5f2:	3a30      	subs	r2, #48	@ 0x30
 800f5f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800f5f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f5f8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f5fa:	f04f 080a 	mov.w	r8, #10
 800f5fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f600:	1c56      	adds	r6, r2, #1
 800f602:	9619      	str	r6, [sp, #100]	@ 0x64
 800f604:	7852      	ldrb	r2, [r2, #1]
 800f606:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f60a:	f1be 0f09 	cmp.w	lr, #9
 800f60e:	d939      	bls.n	800f684 <_strtod_l+0x344>
 800f610:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f612:	1a76      	subs	r6, r6, r1
 800f614:	2e08      	cmp	r6, #8
 800f616:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f61a:	dc03      	bgt.n	800f624 <_strtod_l+0x2e4>
 800f61c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f61e:	4588      	cmp	r8, r1
 800f620:	bfa8      	it	ge
 800f622:	4688      	movge	r8, r1
 800f624:	f1bc 0f00 	cmp.w	ip, #0
 800f628:	d001      	beq.n	800f62e <_strtod_l+0x2ee>
 800f62a:	f1c8 0800 	rsb	r8, r8, #0
 800f62e:	2d00      	cmp	r5, #0
 800f630:	d14e      	bne.n	800f6d0 <_strtod_l+0x390>
 800f632:	9908      	ldr	r1, [sp, #32]
 800f634:	4308      	orrs	r0, r1
 800f636:	f47f aebc 	bne.w	800f3b2 <_strtod_l+0x72>
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f47f aed4 	bne.w	800f3e8 <_strtod_l+0xa8>
 800f640:	2a69      	cmp	r2, #105	@ 0x69
 800f642:	d028      	beq.n	800f696 <_strtod_l+0x356>
 800f644:	dc25      	bgt.n	800f692 <_strtod_l+0x352>
 800f646:	2a49      	cmp	r2, #73	@ 0x49
 800f648:	d025      	beq.n	800f696 <_strtod_l+0x356>
 800f64a:	2a4e      	cmp	r2, #78	@ 0x4e
 800f64c:	f47f aecc 	bne.w	800f3e8 <_strtod_l+0xa8>
 800f650:	499a      	ldr	r1, [pc, #616]	@ (800f8bc <_strtod_l+0x57c>)
 800f652:	a819      	add	r0, sp, #100	@ 0x64
 800f654:	f001 ff0c 	bl	8011470 <__match>
 800f658:	2800      	cmp	r0, #0
 800f65a:	f43f aec5 	beq.w	800f3e8 <_strtod_l+0xa8>
 800f65e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	2b28      	cmp	r3, #40	@ 0x28
 800f664:	d12e      	bne.n	800f6c4 <_strtod_l+0x384>
 800f666:	4996      	ldr	r1, [pc, #600]	@ (800f8c0 <_strtod_l+0x580>)
 800f668:	aa1c      	add	r2, sp, #112	@ 0x70
 800f66a:	a819      	add	r0, sp, #100	@ 0x64
 800f66c:	f001 ff14 	bl	8011498 <__hexnan>
 800f670:	2805      	cmp	r0, #5
 800f672:	d127      	bne.n	800f6c4 <_strtod_l+0x384>
 800f674:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f676:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f67a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f67e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f682:	e696      	b.n	800f3b2 <_strtod_l+0x72>
 800f684:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f686:	fb08 2101 	mla	r1, r8, r1, r2
 800f68a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f68e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f690:	e7b5      	b.n	800f5fe <_strtod_l+0x2be>
 800f692:	2a6e      	cmp	r2, #110	@ 0x6e
 800f694:	e7da      	b.n	800f64c <_strtod_l+0x30c>
 800f696:	498b      	ldr	r1, [pc, #556]	@ (800f8c4 <_strtod_l+0x584>)
 800f698:	a819      	add	r0, sp, #100	@ 0x64
 800f69a:	f001 fee9 	bl	8011470 <__match>
 800f69e:	2800      	cmp	r0, #0
 800f6a0:	f43f aea2 	beq.w	800f3e8 <_strtod_l+0xa8>
 800f6a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f6a6:	4988      	ldr	r1, [pc, #544]	@ (800f8c8 <_strtod_l+0x588>)
 800f6a8:	3b01      	subs	r3, #1
 800f6aa:	a819      	add	r0, sp, #100	@ 0x64
 800f6ac:	9319      	str	r3, [sp, #100]	@ 0x64
 800f6ae:	f001 fedf 	bl	8011470 <__match>
 800f6b2:	b910      	cbnz	r0, 800f6ba <_strtod_l+0x37a>
 800f6b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f6b6:	3301      	adds	r3, #1
 800f6b8:	9319      	str	r3, [sp, #100]	@ 0x64
 800f6ba:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800f8d8 <_strtod_l+0x598>
 800f6be:	f04f 0a00 	mov.w	sl, #0
 800f6c2:	e676      	b.n	800f3b2 <_strtod_l+0x72>
 800f6c4:	4881      	ldr	r0, [pc, #516]	@ (800f8cc <_strtod_l+0x58c>)
 800f6c6:	f000 fd97 	bl	80101f8 <nan>
 800f6ca:	ec5b ab10 	vmov	sl, fp, d0
 800f6ce:	e670      	b.n	800f3b2 <_strtod_l+0x72>
 800f6d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6d2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f6d4:	eba8 0303 	sub.w	r3, r8, r3
 800f6d8:	f1b9 0f00 	cmp.w	r9, #0
 800f6dc:	bf08      	it	eq
 800f6de:	46a9      	moveq	r9, r5
 800f6e0:	2d10      	cmp	r5, #16
 800f6e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6e4:	462c      	mov	r4, r5
 800f6e6:	bfa8      	it	ge
 800f6e8:	2410      	movge	r4, #16
 800f6ea:	f7f0 ff2b 	bl	8000544 <__aeabi_ui2d>
 800f6ee:	2d09      	cmp	r5, #9
 800f6f0:	4682      	mov	sl, r0
 800f6f2:	468b      	mov	fp, r1
 800f6f4:	dc13      	bgt.n	800f71e <_strtod_l+0x3de>
 800f6f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	f43f ae5a 	beq.w	800f3b2 <_strtod_l+0x72>
 800f6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f700:	dd78      	ble.n	800f7f4 <_strtod_l+0x4b4>
 800f702:	2b16      	cmp	r3, #22
 800f704:	dc5f      	bgt.n	800f7c6 <_strtod_l+0x486>
 800f706:	4972      	ldr	r1, [pc, #456]	@ (800f8d0 <_strtod_l+0x590>)
 800f708:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f70c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f710:	4652      	mov	r2, sl
 800f712:	465b      	mov	r3, fp
 800f714:	f7f0 ff90 	bl	8000638 <__aeabi_dmul>
 800f718:	4682      	mov	sl, r0
 800f71a:	468b      	mov	fp, r1
 800f71c:	e649      	b.n	800f3b2 <_strtod_l+0x72>
 800f71e:	4b6c      	ldr	r3, [pc, #432]	@ (800f8d0 <_strtod_l+0x590>)
 800f720:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f724:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f728:	f7f0 ff86 	bl	8000638 <__aeabi_dmul>
 800f72c:	4682      	mov	sl, r0
 800f72e:	4638      	mov	r0, r7
 800f730:	468b      	mov	fp, r1
 800f732:	f7f0 ff07 	bl	8000544 <__aeabi_ui2d>
 800f736:	4602      	mov	r2, r0
 800f738:	460b      	mov	r3, r1
 800f73a:	4650      	mov	r0, sl
 800f73c:	4659      	mov	r1, fp
 800f73e:	f7f0 fdc5 	bl	80002cc <__adddf3>
 800f742:	2d0f      	cmp	r5, #15
 800f744:	4682      	mov	sl, r0
 800f746:	468b      	mov	fp, r1
 800f748:	ddd5      	ble.n	800f6f6 <_strtod_l+0x3b6>
 800f74a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f74c:	1b2c      	subs	r4, r5, r4
 800f74e:	441c      	add	r4, r3
 800f750:	2c00      	cmp	r4, #0
 800f752:	f340 8093 	ble.w	800f87c <_strtod_l+0x53c>
 800f756:	f014 030f 	ands.w	r3, r4, #15
 800f75a:	d00a      	beq.n	800f772 <_strtod_l+0x432>
 800f75c:	495c      	ldr	r1, [pc, #368]	@ (800f8d0 <_strtod_l+0x590>)
 800f75e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f762:	4652      	mov	r2, sl
 800f764:	465b      	mov	r3, fp
 800f766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f76a:	f7f0 ff65 	bl	8000638 <__aeabi_dmul>
 800f76e:	4682      	mov	sl, r0
 800f770:	468b      	mov	fp, r1
 800f772:	f034 040f 	bics.w	r4, r4, #15
 800f776:	d073      	beq.n	800f860 <_strtod_l+0x520>
 800f778:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f77c:	dd49      	ble.n	800f812 <_strtod_l+0x4d2>
 800f77e:	2400      	movs	r4, #0
 800f780:	46a0      	mov	r8, r4
 800f782:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f784:	46a1      	mov	r9, r4
 800f786:	9a05      	ldr	r2, [sp, #20]
 800f788:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800f8d8 <_strtod_l+0x598>
 800f78c:	2322      	movs	r3, #34	@ 0x22
 800f78e:	6013      	str	r3, [r2, #0]
 800f790:	f04f 0a00 	mov.w	sl, #0
 800f794:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f796:	2b00      	cmp	r3, #0
 800f798:	f43f ae0b 	beq.w	800f3b2 <_strtod_l+0x72>
 800f79c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f79e:	9805      	ldr	r0, [sp, #20]
 800f7a0:	f002 fcca 	bl	8012138 <_Bfree>
 800f7a4:	9805      	ldr	r0, [sp, #20]
 800f7a6:	4649      	mov	r1, r9
 800f7a8:	f002 fcc6 	bl	8012138 <_Bfree>
 800f7ac:	9805      	ldr	r0, [sp, #20]
 800f7ae:	4641      	mov	r1, r8
 800f7b0:	f002 fcc2 	bl	8012138 <_Bfree>
 800f7b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f7b6:	9805      	ldr	r0, [sp, #20]
 800f7b8:	f002 fcbe 	bl	8012138 <_Bfree>
 800f7bc:	9805      	ldr	r0, [sp, #20]
 800f7be:	4621      	mov	r1, r4
 800f7c0:	f002 fcba 	bl	8012138 <_Bfree>
 800f7c4:	e5f5      	b.n	800f3b2 <_strtod_l+0x72>
 800f7c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	dbbc      	blt.n	800f74a <_strtod_l+0x40a>
 800f7d0:	4c3f      	ldr	r4, [pc, #252]	@ (800f8d0 <_strtod_l+0x590>)
 800f7d2:	f1c5 050f 	rsb	r5, r5, #15
 800f7d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f7da:	4652      	mov	r2, sl
 800f7dc:	465b      	mov	r3, fp
 800f7de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f7e2:	f7f0 ff29 	bl	8000638 <__aeabi_dmul>
 800f7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7e8:	1b5d      	subs	r5, r3, r5
 800f7ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f7ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f7f2:	e78f      	b.n	800f714 <_strtod_l+0x3d4>
 800f7f4:	3316      	adds	r3, #22
 800f7f6:	dba8      	blt.n	800f74a <_strtod_l+0x40a>
 800f7f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7fa:	eba3 0808 	sub.w	r8, r3, r8
 800f7fe:	4b34      	ldr	r3, [pc, #208]	@ (800f8d0 <_strtod_l+0x590>)
 800f800:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f804:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f808:	4650      	mov	r0, sl
 800f80a:	4659      	mov	r1, fp
 800f80c:	f7f1 f83e 	bl	800088c <__aeabi_ddiv>
 800f810:	e782      	b.n	800f718 <_strtod_l+0x3d8>
 800f812:	2300      	movs	r3, #0
 800f814:	4f2f      	ldr	r7, [pc, #188]	@ (800f8d4 <_strtod_l+0x594>)
 800f816:	1124      	asrs	r4, r4, #4
 800f818:	4650      	mov	r0, sl
 800f81a:	4659      	mov	r1, fp
 800f81c:	461e      	mov	r6, r3
 800f81e:	2c01      	cmp	r4, #1
 800f820:	dc21      	bgt.n	800f866 <_strtod_l+0x526>
 800f822:	b10b      	cbz	r3, 800f828 <_strtod_l+0x4e8>
 800f824:	4682      	mov	sl, r0
 800f826:	468b      	mov	fp, r1
 800f828:	492a      	ldr	r1, [pc, #168]	@ (800f8d4 <_strtod_l+0x594>)
 800f82a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f82e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f832:	4652      	mov	r2, sl
 800f834:	465b      	mov	r3, fp
 800f836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f83a:	f7f0 fefd 	bl	8000638 <__aeabi_dmul>
 800f83e:	4b26      	ldr	r3, [pc, #152]	@ (800f8d8 <_strtod_l+0x598>)
 800f840:	460a      	mov	r2, r1
 800f842:	400b      	ands	r3, r1
 800f844:	4925      	ldr	r1, [pc, #148]	@ (800f8dc <_strtod_l+0x59c>)
 800f846:	428b      	cmp	r3, r1
 800f848:	4682      	mov	sl, r0
 800f84a:	d898      	bhi.n	800f77e <_strtod_l+0x43e>
 800f84c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f850:	428b      	cmp	r3, r1
 800f852:	bf86      	itte	hi
 800f854:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800f8e0 <_strtod_l+0x5a0>
 800f858:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800f85c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f860:	2300      	movs	r3, #0
 800f862:	9308      	str	r3, [sp, #32]
 800f864:	e076      	b.n	800f954 <_strtod_l+0x614>
 800f866:	07e2      	lsls	r2, r4, #31
 800f868:	d504      	bpl.n	800f874 <_strtod_l+0x534>
 800f86a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f86e:	f7f0 fee3 	bl	8000638 <__aeabi_dmul>
 800f872:	2301      	movs	r3, #1
 800f874:	3601      	adds	r6, #1
 800f876:	1064      	asrs	r4, r4, #1
 800f878:	3708      	adds	r7, #8
 800f87a:	e7d0      	b.n	800f81e <_strtod_l+0x4de>
 800f87c:	d0f0      	beq.n	800f860 <_strtod_l+0x520>
 800f87e:	4264      	negs	r4, r4
 800f880:	f014 020f 	ands.w	r2, r4, #15
 800f884:	d00a      	beq.n	800f89c <_strtod_l+0x55c>
 800f886:	4b12      	ldr	r3, [pc, #72]	@ (800f8d0 <_strtod_l+0x590>)
 800f888:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f88c:	4650      	mov	r0, sl
 800f88e:	4659      	mov	r1, fp
 800f890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f894:	f7f0 fffa 	bl	800088c <__aeabi_ddiv>
 800f898:	4682      	mov	sl, r0
 800f89a:	468b      	mov	fp, r1
 800f89c:	1124      	asrs	r4, r4, #4
 800f89e:	d0df      	beq.n	800f860 <_strtod_l+0x520>
 800f8a0:	2c1f      	cmp	r4, #31
 800f8a2:	dd1f      	ble.n	800f8e4 <_strtod_l+0x5a4>
 800f8a4:	2400      	movs	r4, #0
 800f8a6:	46a0      	mov	r8, r4
 800f8a8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f8aa:	46a1      	mov	r9, r4
 800f8ac:	9a05      	ldr	r2, [sp, #20]
 800f8ae:	2322      	movs	r3, #34	@ 0x22
 800f8b0:	f04f 0a00 	mov.w	sl, #0
 800f8b4:	f04f 0b00 	mov.w	fp, #0
 800f8b8:	6013      	str	r3, [r2, #0]
 800f8ba:	e76b      	b.n	800f794 <_strtod_l+0x454>
 800f8bc:	08015aa9 	.word	0x08015aa9
 800f8c0:	08015c8c 	.word	0x08015c8c
 800f8c4:	08015aa1 	.word	0x08015aa1
 800f8c8:	08015ae0 	.word	0x08015ae0
 800f8cc:	08015c8a 	.word	0x08015c8a
 800f8d0:	08015e18 	.word	0x08015e18
 800f8d4:	08015df0 	.word	0x08015df0
 800f8d8:	7ff00000 	.word	0x7ff00000
 800f8dc:	7ca00000 	.word	0x7ca00000
 800f8e0:	7fefffff 	.word	0x7fefffff
 800f8e4:	f014 0310 	ands.w	r3, r4, #16
 800f8e8:	bf18      	it	ne
 800f8ea:	236a      	movne	r3, #106	@ 0x6a
 800f8ec:	4ea9      	ldr	r6, [pc, #676]	@ (800fb94 <_strtod_l+0x854>)
 800f8ee:	9308      	str	r3, [sp, #32]
 800f8f0:	4650      	mov	r0, sl
 800f8f2:	4659      	mov	r1, fp
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	07e7      	lsls	r7, r4, #31
 800f8f8:	d504      	bpl.n	800f904 <_strtod_l+0x5c4>
 800f8fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f8fe:	f7f0 fe9b 	bl	8000638 <__aeabi_dmul>
 800f902:	2301      	movs	r3, #1
 800f904:	1064      	asrs	r4, r4, #1
 800f906:	f106 0608 	add.w	r6, r6, #8
 800f90a:	d1f4      	bne.n	800f8f6 <_strtod_l+0x5b6>
 800f90c:	b10b      	cbz	r3, 800f912 <_strtod_l+0x5d2>
 800f90e:	4682      	mov	sl, r0
 800f910:	468b      	mov	fp, r1
 800f912:	9b08      	ldr	r3, [sp, #32]
 800f914:	b1b3      	cbz	r3, 800f944 <_strtod_l+0x604>
 800f916:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f91a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f91e:	2b00      	cmp	r3, #0
 800f920:	4659      	mov	r1, fp
 800f922:	dd0f      	ble.n	800f944 <_strtod_l+0x604>
 800f924:	2b1f      	cmp	r3, #31
 800f926:	dd56      	ble.n	800f9d6 <_strtod_l+0x696>
 800f928:	2b34      	cmp	r3, #52	@ 0x34
 800f92a:	bfde      	ittt	le
 800f92c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800f930:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f934:	4093      	lslle	r3, r2
 800f936:	f04f 0a00 	mov.w	sl, #0
 800f93a:	bfcc      	ite	gt
 800f93c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f940:	ea03 0b01 	andle.w	fp, r3, r1
 800f944:	2200      	movs	r2, #0
 800f946:	2300      	movs	r3, #0
 800f948:	4650      	mov	r0, sl
 800f94a:	4659      	mov	r1, fp
 800f94c:	f7f1 f8dc 	bl	8000b08 <__aeabi_dcmpeq>
 800f950:	2800      	cmp	r0, #0
 800f952:	d1a7      	bne.n	800f8a4 <_strtod_l+0x564>
 800f954:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f956:	9300      	str	r3, [sp, #0]
 800f958:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f95a:	9805      	ldr	r0, [sp, #20]
 800f95c:	462b      	mov	r3, r5
 800f95e:	464a      	mov	r2, r9
 800f960:	f002 fc52 	bl	8012208 <__s2b>
 800f964:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f966:	2800      	cmp	r0, #0
 800f968:	f43f af09 	beq.w	800f77e <_strtod_l+0x43e>
 800f96c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f96e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f970:	2a00      	cmp	r2, #0
 800f972:	eba3 0308 	sub.w	r3, r3, r8
 800f976:	bfa8      	it	ge
 800f978:	2300      	movge	r3, #0
 800f97a:	9312      	str	r3, [sp, #72]	@ 0x48
 800f97c:	2400      	movs	r4, #0
 800f97e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f982:	9316      	str	r3, [sp, #88]	@ 0x58
 800f984:	46a0      	mov	r8, r4
 800f986:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f988:	9805      	ldr	r0, [sp, #20]
 800f98a:	6859      	ldr	r1, [r3, #4]
 800f98c:	f002 fb94 	bl	80120b8 <_Balloc>
 800f990:	4681      	mov	r9, r0
 800f992:	2800      	cmp	r0, #0
 800f994:	f43f aef7 	beq.w	800f786 <_strtod_l+0x446>
 800f998:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f99a:	691a      	ldr	r2, [r3, #16]
 800f99c:	3202      	adds	r2, #2
 800f99e:	f103 010c 	add.w	r1, r3, #12
 800f9a2:	0092      	lsls	r2, r2, #2
 800f9a4:	300c      	adds	r0, #12
 800f9a6:	f000 fc17 	bl	80101d8 <memcpy>
 800f9aa:	ec4b ab10 	vmov	d0, sl, fp
 800f9ae:	9805      	ldr	r0, [sp, #20]
 800f9b0:	aa1c      	add	r2, sp, #112	@ 0x70
 800f9b2:	a91b      	add	r1, sp, #108	@ 0x6c
 800f9b4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f9b8:	f002 ff5a 	bl	8012870 <__d2b>
 800f9bc:	901a      	str	r0, [sp, #104]	@ 0x68
 800f9be:	2800      	cmp	r0, #0
 800f9c0:	f43f aee1 	beq.w	800f786 <_strtod_l+0x446>
 800f9c4:	9805      	ldr	r0, [sp, #20]
 800f9c6:	2101      	movs	r1, #1
 800f9c8:	f002 fcb4 	bl	8012334 <__i2b>
 800f9cc:	4680      	mov	r8, r0
 800f9ce:	b948      	cbnz	r0, 800f9e4 <_strtod_l+0x6a4>
 800f9d0:	f04f 0800 	mov.w	r8, #0
 800f9d4:	e6d7      	b.n	800f786 <_strtod_l+0x446>
 800f9d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f9da:	fa02 f303 	lsl.w	r3, r2, r3
 800f9de:	ea03 0a0a 	and.w	sl, r3, sl
 800f9e2:	e7af      	b.n	800f944 <_strtod_l+0x604>
 800f9e4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f9e6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f9e8:	2d00      	cmp	r5, #0
 800f9ea:	bfab      	itete	ge
 800f9ec:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f9ee:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f9f0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f9f2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f9f4:	bfac      	ite	ge
 800f9f6:	18ef      	addge	r7, r5, r3
 800f9f8:	1b5e      	sublt	r6, r3, r5
 800f9fa:	9b08      	ldr	r3, [sp, #32]
 800f9fc:	1aed      	subs	r5, r5, r3
 800f9fe:	4415      	add	r5, r2
 800fa00:	4b65      	ldr	r3, [pc, #404]	@ (800fb98 <_strtod_l+0x858>)
 800fa02:	3d01      	subs	r5, #1
 800fa04:	429d      	cmp	r5, r3
 800fa06:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fa0a:	da50      	bge.n	800faae <_strtod_l+0x76e>
 800fa0c:	1b5b      	subs	r3, r3, r5
 800fa0e:	2b1f      	cmp	r3, #31
 800fa10:	eba2 0203 	sub.w	r2, r2, r3
 800fa14:	f04f 0101 	mov.w	r1, #1
 800fa18:	dc3d      	bgt.n	800fa96 <_strtod_l+0x756>
 800fa1a:	fa01 f303 	lsl.w	r3, r1, r3
 800fa1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fa20:	2300      	movs	r3, #0
 800fa22:	9310      	str	r3, [sp, #64]	@ 0x40
 800fa24:	18bd      	adds	r5, r7, r2
 800fa26:	9b08      	ldr	r3, [sp, #32]
 800fa28:	42af      	cmp	r7, r5
 800fa2a:	4416      	add	r6, r2
 800fa2c:	441e      	add	r6, r3
 800fa2e:	463b      	mov	r3, r7
 800fa30:	bfa8      	it	ge
 800fa32:	462b      	movge	r3, r5
 800fa34:	42b3      	cmp	r3, r6
 800fa36:	bfa8      	it	ge
 800fa38:	4633      	movge	r3, r6
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	bfc2      	ittt	gt
 800fa3e:	1aed      	subgt	r5, r5, r3
 800fa40:	1af6      	subgt	r6, r6, r3
 800fa42:	1aff      	subgt	r7, r7, r3
 800fa44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	dd16      	ble.n	800fa78 <_strtod_l+0x738>
 800fa4a:	4641      	mov	r1, r8
 800fa4c:	9805      	ldr	r0, [sp, #20]
 800fa4e:	461a      	mov	r2, r3
 800fa50:	f002 fd28 	bl	80124a4 <__pow5mult>
 800fa54:	4680      	mov	r8, r0
 800fa56:	2800      	cmp	r0, #0
 800fa58:	d0ba      	beq.n	800f9d0 <_strtod_l+0x690>
 800fa5a:	4601      	mov	r1, r0
 800fa5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fa5e:	9805      	ldr	r0, [sp, #20]
 800fa60:	f002 fc7e 	bl	8012360 <__multiply>
 800fa64:	900a      	str	r0, [sp, #40]	@ 0x28
 800fa66:	2800      	cmp	r0, #0
 800fa68:	f43f ae8d 	beq.w	800f786 <_strtod_l+0x446>
 800fa6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fa6e:	9805      	ldr	r0, [sp, #20]
 800fa70:	f002 fb62 	bl	8012138 <_Bfree>
 800fa74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa76:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa78:	2d00      	cmp	r5, #0
 800fa7a:	dc1d      	bgt.n	800fab8 <_strtod_l+0x778>
 800fa7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	dd23      	ble.n	800faca <_strtod_l+0x78a>
 800fa82:	4649      	mov	r1, r9
 800fa84:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800fa86:	9805      	ldr	r0, [sp, #20]
 800fa88:	f002 fd0c 	bl	80124a4 <__pow5mult>
 800fa8c:	4681      	mov	r9, r0
 800fa8e:	b9e0      	cbnz	r0, 800faca <_strtod_l+0x78a>
 800fa90:	f04f 0900 	mov.w	r9, #0
 800fa94:	e677      	b.n	800f786 <_strtod_l+0x446>
 800fa96:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800fa9a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800fa9e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800faa2:	35e2      	adds	r5, #226	@ 0xe2
 800faa4:	fa01 f305 	lsl.w	r3, r1, r5
 800faa8:	9310      	str	r3, [sp, #64]	@ 0x40
 800faaa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800faac:	e7ba      	b.n	800fa24 <_strtod_l+0x6e4>
 800faae:	2300      	movs	r3, #0
 800fab0:	9310      	str	r3, [sp, #64]	@ 0x40
 800fab2:	2301      	movs	r3, #1
 800fab4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fab6:	e7b5      	b.n	800fa24 <_strtod_l+0x6e4>
 800fab8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800faba:	9805      	ldr	r0, [sp, #20]
 800fabc:	462a      	mov	r2, r5
 800fabe:	f002 fd4b 	bl	8012558 <__lshift>
 800fac2:	901a      	str	r0, [sp, #104]	@ 0x68
 800fac4:	2800      	cmp	r0, #0
 800fac6:	d1d9      	bne.n	800fa7c <_strtod_l+0x73c>
 800fac8:	e65d      	b.n	800f786 <_strtod_l+0x446>
 800faca:	2e00      	cmp	r6, #0
 800facc:	dd07      	ble.n	800fade <_strtod_l+0x79e>
 800face:	4649      	mov	r1, r9
 800fad0:	9805      	ldr	r0, [sp, #20]
 800fad2:	4632      	mov	r2, r6
 800fad4:	f002 fd40 	bl	8012558 <__lshift>
 800fad8:	4681      	mov	r9, r0
 800fada:	2800      	cmp	r0, #0
 800fadc:	d0d8      	beq.n	800fa90 <_strtod_l+0x750>
 800fade:	2f00      	cmp	r7, #0
 800fae0:	dd08      	ble.n	800faf4 <_strtod_l+0x7b4>
 800fae2:	4641      	mov	r1, r8
 800fae4:	9805      	ldr	r0, [sp, #20]
 800fae6:	463a      	mov	r2, r7
 800fae8:	f002 fd36 	bl	8012558 <__lshift>
 800faec:	4680      	mov	r8, r0
 800faee:	2800      	cmp	r0, #0
 800faf0:	f43f ae49 	beq.w	800f786 <_strtod_l+0x446>
 800faf4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800faf6:	9805      	ldr	r0, [sp, #20]
 800faf8:	464a      	mov	r2, r9
 800fafa:	f002 fdb5 	bl	8012668 <__mdiff>
 800fafe:	4604      	mov	r4, r0
 800fb00:	2800      	cmp	r0, #0
 800fb02:	f43f ae40 	beq.w	800f786 <_strtod_l+0x446>
 800fb06:	68c3      	ldr	r3, [r0, #12]
 800fb08:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	60c3      	str	r3, [r0, #12]
 800fb0e:	4641      	mov	r1, r8
 800fb10:	f002 fd8e 	bl	8012630 <__mcmp>
 800fb14:	2800      	cmp	r0, #0
 800fb16:	da45      	bge.n	800fba4 <_strtod_l+0x864>
 800fb18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb1a:	ea53 030a 	orrs.w	r3, r3, sl
 800fb1e:	d16b      	bne.n	800fbf8 <_strtod_l+0x8b8>
 800fb20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d167      	bne.n	800fbf8 <_strtod_l+0x8b8>
 800fb28:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fb2c:	0d1b      	lsrs	r3, r3, #20
 800fb2e:	051b      	lsls	r3, r3, #20
 800fb30:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fb34:	d960      	bls.n	800fbf8 <_strtod_l+0x8b8>
 800fb36:	6963      	ldr	r3, [r4, #20]
 800fb38:	b913      	cbnz	r3, 800fb40 <_strtod_l+0x800>
 800fb3a:	6923      	ldr	r3, [r4, #16]
 800fb3c:	2b01      	cmp	r3, #1
 800fb3e:	dd5b      	ble.n	800fbf8 <_strtod_l+0x8b8>
 800fb40:	4621      	mov	r1, r4
 800fb42:	2201      	movs	r2, #1
 800fb44:	9805      	ldr	r0, [sp, #20]
 800fb46:	f002 fd07 	bl	8012558 <__lshift>
 800fb4a:	4641      	mov	r1, r8
 800fb4c:	4604      	mov	r4, r0
 800fb4e:	f002 fd6f 	bl	8012630 <__mcmp>
 800fb52:	2800      	cmp	r0, #0
 800fb54:	dd50      	ble.n	800fbf8 <_strtod_l+0x8b8>
 800fb56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fb5a:	9a08      	ldr	r2, [sp, #32]
 800fb5c:	0d1b      	lsrs	r3, r3, #20
 800fb5e:	051b      	lsls	r3, r3, #20
 800fb60:	2a00      	cmp	r2, #0
 800fb62:	d06a      	beq.n	800fc3a <_strtod_l+0x8fa>
 800fb64:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fb68:	d867      	bhi.n	800fc3a <_strtod_l+0x8fa>
 800fb6a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800fb6e:	f67f ae9d 	bls.w	800f8ac <_strtod_l+0x56c>
 800fb72:	4b0a      	ldr	r3, [pc, #40]	@ (800fb9c <_strtod_l+0x85c>)
 800fb74:	4650      	mov	r0, sl
 800fb76:	4659      	mov	r1, fp
 800fb78:	2200      	movs	r2, #0
 800fb7a:	f7f0 fd5d 	bl	8000638 <__aeabi_dmul>
 800fb7e:	4b08      	ldr	r3, [pc, #32]	@ (800fba0 <_strtod_l+0x860>)
 800fb80:	400b      	ands	r3, r1
 800fb82:	4682      	mov	sl, r0
 800fb84:	468b      	mov	fp, r1
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	f47f ae08 	bne.w	800f79c <_strtod_l+0x45c>
 800fb8c:	9a05      	ldr	r2, [sp, #20]
 800fb8e:	2322      	movs	r3, #34	@ 0x22
 800fb90:	6013      	str	r3, [r2, #0]
 800fb92:	e603      	b.n	800f79c <_strtod_l+0x45c>
 800fb94:	08015cb8 	.word	0x08015cb8
 800fb98:	fffffc02 	.word	0xfffffc02
 800fb9c:	39500000 	.word	0x39500000
 800fba0:	7ff00000 	.word	0x7ff00000
 800fba4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800fba8:	d165      	bne.n	800fc76 <_strtod_l+0x936>
 800fbaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fbac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fbb0:	b35a      	cbz	r2, 800fc0a <_strtod_l+0x8ca>
 800fbb2:	4a9f      	ldr	r2, [pc, #636]	@ (800fe30 <_strtod_l+0xaf0>)
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	d12b      	bne.n	800fc10 <_strtod_l+0x8d0>
 800fbb8:	9b08      	ldr	r3, [sp, #32]
 800fbba:	4651      	mov	r1, sl
 800fbbc:	b303      	cbz	r3, 800fc00 <_strtod_l+0x8c0>
 800fbbe:	4b9d      	ldr	r3, [pc, #628]	@ (800fe34 <_strtod_l+0xaf4>)
 800fbc0:	465a      	mov	r2, fp
 800fbc2:	4013      	ands	r3, r2
 800fbc4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800fbc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fbcc:	d81b      	bhi.n	800fc06 <_strtod_l+0x8c6>
 800fbce:	0d1b      	lsrs	r3, r3, #20
 800fbd0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fbd4:	fa02 f303 	lsl.w	r3, r2, r3
 800fbd8:	4299      	cmp	r1, r3
 800fbda:	d119      	bne.n	800fc10 <_strtod_l+0x8d0>
 800fbdc:	4b96      	ldr	r3, [pc, #600]	@ (800fe38 <_strtod_l+0xaf8>)
 800fbde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d102      	bne.n	800fbea <_strtod_l+0x8aa>
 800fbe4:	3101      	adds	r1, #1
 800fbe6:	f43f adce 	beq.w	800f786 <_strtod_l+0x446>
 800fbea:	4b92      	ldr	r3, [pc, #584]	@ (800fe34 <_strtod_l+0xaf4>)
 800fbec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fbee:	401a      	ands	r2, r3
 800fbf0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800fbf4:	f04f 0a00 	mov.w	sl, #0
 800fbf8:	9b08      	ldr	r3, [sp, #32]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d1b9      	bne.n	800fb72 <_strtod_l+0x832>
 800fbfe:	e5cd      	b.n	800f79c <_strtod_l+0x45c>
 800fc00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fc04:	e7e8      	b.n	800fbd8 <_strtod_l+0x898>
 800fc06:	4613      	mov	r3, r2
 800fc08:	e7e6      	b.n	800fbd8 <_strtod_l+0x898>
 800fc0a:	ea53 030a 	orrs.w	r3, r3, sl
 800fc0e:	d0a2      	beq.n	800fb56 <_strtod_l+0x816>
 800fc10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fc12:	b1db      	cbz	r3, 800fc4c <_strtod_l+0x90c>
 800fc14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fc16:	4213      	tst	r3, r2
 800fc18:	d0ee      	beq.n	800fbf8 <_strtod_l+0x8b8>
 800fc1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc1c:	9a08      	ldr	r2, [sp, #32]
 800fc1e:	4650      	mov	r0, sl
 800fc20:	4659      	mov	r1, fp
 800fc22:	b1bb      	cbz	r3, 800fc54 <_strtod_l+0x914>
 800fc24:	f7ff fb6e 	bl	800f304 <sulp>
 800fc28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fc2c:	ec53 2b10 	vmov	r2, r3, d0
 800fc30:	f7f0 fb4c 	bl	80002cc <__adddf3>
 800fc34:	4682      	mov	sl, r0
 800fc36:	468b      	mov	fp, r1
 800fc38:	e7de      	b.n	800fbf8 <_strtod_l+0x8b8>
 800fc3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800fc3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fc42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fc46:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800fc4a:	e7d5      	b.n	800fbf8 <_strtod_l+0x8b8>
 800fc4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fc4e:	ea13 0f0a 	tst.w	r3, sl
 800fc52:	e7e1      	b.n	800fc18 <_strtod_l+0x8d8>
 800fc54:	f7ff fb56 	bl	800f304 <sulp>
 800fc58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fc5c:	ec53 2b10 	vmov	r2, r3, d0
 800fc60:	f7f0 fb32 	bl	80002c8 <__aeabi_dsub>
 800fc64:	2200      	movs	r2, #0
 800fc66:	2300      	movs	r3, #0
 800fc68:	4682      	mov	sl, r0
 800fc6a:	468b      	mov	fp, r1
 800fc6c:	f7f0 ff4c 	bl	8000b08 <__aeabi_dcmpeq>
 800fc70:	2800      	cmp	r0, #0
 800fc72:	d0c1      	beq.n	800fbf8 <_strtod_l+0x8b8>
 800fc74:	e61a      	b.n	800f8ac <_strtod_l+0x56c>
 800fc76:	4641      	mov	r1, r8
 800fc78:	4620      	mov	r0, r4
 800fc7a:	f002 fe51 	bl	8012920 <__ratio>
 800fc7e:	ec57 6b10 	vmov	r6, r7, d0
 800fc82:	2200      	movs	r2, #0
 800fc84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fc88:	4630      	mov	r0, r6
 800fc8a:	4639      	mov	r1, r7
 800fc8c:	f7f0 ff50 	bl	8000b30 <__aeabi_dcmple>
 800fc90:	2800      	cmp	r0, #0
 800fc92:	d06f      	beq.n	800fd74 <_strtod_l+0xa34>
 800fc94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d17a      	bne.n	800fd90 <_strtod_l+0xa50>
 800fc9a:	f1ba 0f00 	cmp.w	sl, #0
 800fc9e:	d158      	bne.n	800fd52 <_strtod_l+0xa12>
 800fca0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fca2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d15a      	bne.n	800fd60 <_strtod_l+0xa20>
 800fcaa:	4b64      	ldr	r3, [pc, #400]	@ (800fe3c <_strtod_l+0xafc>)
 800fcac:	2200      	movs	r2, #0
 800fcae:	4630      	mov	r0, r6
 800fcb0:	4639      	mov	r1, r7
 800fcb2:	f7f0 ff33 	bl	8000b1c <__aeabi_dcmplt>
 800fcb6:	2800      	cmp	r0, #0
 800fcb8:	d159      	bne.n	800fd6e <_strtod_l+0xa2e>
 800fcba:	4630      	mov	r0, r6
 800fcbc:	4639      	mov	r1, r7
 800fcbe:	4b60      	ldr	r3, [pc, #384]	@ (800fe40 <_strtod_l+0xb00>)
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	f7f0 fcb9 	bl	8000638 <__aeabi_dmul>
 800fcc6:	4606      	mov	r6, r0
 800fcc8:	460f      	mov	r7, r1
 800fcca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800fcce:	9606      	str	r6, [sp, #24]
 800fcd0:	9307      	str	r3, [sp, #28]
 800fcd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fcd6:	4d57      	ldr	r5, [pc, #348]	@ (800fe34 <_strtod_l+0xaf4>)
 800fcd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fcdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcde:	401d      	ands	r5, r3
 800fce0:	4b58      	ldr	r3, [pc, #352]	@ (800fe44 <_strtod_l+0xb04>)
 800fce2:	429d      	cmp	r5, r3
 800fce4:	f040 80b2 	bne.w	800fe4c <_strtod_l+0xb0c>
 800fce8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800fcee:	ec4b ab10 	vmov	d0, sl, fp
 800fcf2:	f002 fd4d 	bl	8012790 <__ulp>
 800fcf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fcfa:	ec51 0b10 	vmov	r0, r1, d0
 800fcfe:	f7f0 fc9b 	bl	8000638 <__aeabi_dmul>
 800fd02:	4652      	mov	r2, sl
 800fd04:	465b      	mov	r3, fp
 800fd06:	f7f0 fae1 	bl	80002cc <__adddf3>
 800fd0a:	460b      	mov	r3, r1
 800fd0c:	4949      	ldr	r1, [pc, #292]	@ (800fe34 <_strtod_l+0xaf4>)
 800fd0e:	4a4e      	ldr	r2, [pc, #312]	@ (800fe48 <_strtod_l+0xb08>)
 800fd10:	4019      	ands	r1, r3
 800fd12:	4291      	cmp	r1, r2
 800fd14:	4682      	mov	sl, r0
 800fd16:	d942      	bls.n	800fd9e <_strtod_l+0xa5e>
 800fd18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fd1a:	4b47      	ldr	r3, [pc, #284]	@ (800fe38 <_strtod_l+0xaf8>)
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d103      	bne.n	800fd28 <_strtod_l+0x9e8>
 800fd20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd22:	3301      	adds	r3, #1
 800fd24:	f43f ad2f 	beq.w	800f786 <_strtod_l+0x446>
 800fd28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800fe38 <_strtod_l+0xaf8>
 800fd2c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800fd30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd32:	9805      	ldr	r0, [sp, #20]
 800fd34:	f002 fa00 	bl	8012138 <_Bfree>
 800fd38:	9805      	ldr	r0, [sp, #20]
 800fd3a:	4649      	mov	r1, r9
 800fd3c:	f002 f9fc 	bl	8012138 <_Bfree>
 800fd40:	9805      	ldr	r0, [sp, #20]
 800fd42:	4641      	mov	r1, r8
 800fd44:	f002 f9f8 	bl	8012138 <_Bfree>
 800fd48:	9805      	ldr	r0, [sp, #20]
 800fd4a:	4621      	mov	r1, r4
 800fd4c:	f002 f9f4 	bl	8012138 <_Bfree>
 800fd50:	e619      	b.n	800f986 <_strtod_l+0x646>
 800fd52:	f1ba 0f01 	cmp.w	sl, #1
 800fd56:	d103      	bne.n	800fd60 <_strtod_l+0xa20>
 800fd58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	f43f ada6 	beq.w	800f8ac <_strtod_l+0x56c>
 800fd60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800fe10 <_strtod_l+0xad0>
 800fd64:	4f35      	ldr	r7, [pc, #212]	@ (800fe3c <_strtod_l+0xafc>)
 800fd66:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fd6a:	2600      	movs	r6, #0
 800fd6c:	e7b1      	b.n	800fcd2 <_strtod_l+0x992>
 800fd6e:	4f34      	ldr	r7, [pc, #208]	@ (800fe40 <_strtod_l+0xb00>)
 800fd70:	2600      	movs	r6, #0
 800fd72:	e7aa      	b.n	800fcca <_strtod_l+0x98a>
 800fd74:	4b32      	ldr	r3, [pc, #200]	@ (800fe40 <_strtod_l+0xb00>)
 800fd76:	4630      	mov	r0, r6
 800fd78:	4639      	mov	r1, r7
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	f7f0 fc5c 	bl	8000638 <__aeabi_dmul>
 800fd80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd82:	4606      	mov	r6, r0
 800fd84:	460f      	mov	r7, r1
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d09f      	beq.n	800fcca <_strtod_l+0x98a>
 800fd8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fd8e:	e7a0      	b.n	800fcd2 <_strtod_l+0x992>
 800fd90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800fe18 <_strtod_l+0xad8>
 800fd94:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fd98:	ec57 6b17 	vmov	r6, r7, d7
 800fd9c:	e799      	b.n	800fcd2 <_strtod_l+0x992>
 800fd9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800fda2:	9b08      	ldr	r3, [sp, #32]
 800fda4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d1c1      	bne.n	800fd30 <_strtod_l+0x9f0>
 800fdac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fdb0:	0d1b      	lsrs	r3, r3, #20
 800fdb2:	051b      	lsls	r3, r3, #20
 800fdb4:	429d      	cmp	r5, r3
 800fdb6:	d1bb      	bne.n	800fd30 <_strtod_l+0x9f0>
 800fdb8:	4630      	mov	r0, r6
 800fdba:	4639      	mov	r1, r7
 800fdbc:	f7f1 f8fa 	bl	8000fb4 <__aeabi_d2lz>
 800fdc0:	f7f0 fc0c 	bl	80005dc <__aeabi_l2d>
 800fdc4:	4602      	mov	r2, r0
 800fdc6:	460b      	mov	r3, r1
 800fdc8:	4630      	mov	r0, r6
 800fdca:	4639      	mov	r1, r7
 800fdcc:	f7f0 fa7c 	bl	80002c8 <__aeabi_dsub>
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800fdd8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800fddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdde:	ea46 060a 	orr.w	r6, r6, sl
 800fde2:	431e      	orrs	r6, r3
 800fde4:	d06f      	beq.n	800fec6 <_strtod_l+0xb86>
 800fde6:	a30e      	add	r3, pc, #56	@ (adr r3, 800fe20 <_strtod_l+0xae0>)
 800fde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdec:	f7f0 fe96 	bl	8000b1c <__aeabi_dcmplt>
 800fdf0:	2800      	cmp	r0, #0
 800fdf2:	f47f acd3 	bne.w	800f79c <_strtod_l+0x45c>
 800fdf6:	a30c      	add	r3, pc, #48	@ (adr r3, 800fe28 <_strtod_l+0xae8>)
 800fdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fe00:	f7f0 feaa 	bl	8000b58 <__aeabi_dcmpgt>
 800fe04:	2800      	cmp	r0, #0
 800fe06:	d093      	beq.n	800fd30 <_strtod_l+0x9f0>
 800fe08:	e4c8      	b.n	800f79c <_strtod_l+0x45c>
 800fe0a:	bf00      	nop
 800fe0c:	f3af 8000 	nop.w
 800fe10:	00000000 	.word	0x00000000
 800fe14:	bff00000 	.word	0xbff00000
 800fe18:	00000000 	.word	0x00000000
 800fe1c:	3ff00000 	.word	0x3ff00000
 800fe20:	94a03595 	.word	0x94a03595
 800fe24:	3fdfffff 	.word	0x3fdfffff
 800fe28:	35afe535 	.word	0x35afe535
 800fe2c:	3fe00000 	.word	0x3fe00000
 800fe30:	000fffff 	.word	0x000fffff
 800fe34:	7ff00000 	.word	0x7ff00000
 800fe38:	7fefffff 	.word	0x7fefffff
 800fe3c:	3ff00000 	.word	0x3ff00000
 800fe40:	3fe00000 	.word	0x3fe00000
 800fe44:	7fe00000 	.word	0x7fe00000
 800fe48:	7c9fffff 	.word	0x7c9fffff
 800fe4c:	9b08      	ldr	r3, [sp, #32]
 800fe4e:	b323      	cbz	r3, 800fe9a <_strtod_l+0xb5a>
 800fe50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800fe54:	d821      	bhi.n	800fe9a <_strtod_l+0xb5a>
 800fe56:	a328      	add	r3, pc, #160	@ (adr r3, 800fef8 <_strtod_l+0xbb8>)
 800fe58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe5c:	4630      	mov	r0, r6
 800fe5e:	4639      	mov	r1, r7
 800fe60:	f7f0 fe66 	bl	8000b30 <__aeabi_dcmple>
 800fe64:	b1a0      	cbz	r0, 800fe90 <_strtod_l+0xb50>
 800fe66:	4639      	mov	r1, r7
 800fe68:	4630      	mov	r0, r6
 800fe6a:	f7f0 febd 	bl	8000be8 <__aeabi_d2uiz>
 800fe6e:	2801      	cmp	r0, #1
 800fe70:	bf38      	it	cc
 800fe72:	2001      	movcc	r0, #1
 800fe74:	f7f0 fb66 	bl	8000544 <__aeabi_ui2d>
 800fe78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe7a:	4606      	mov	r6, r0
 800fe7c:	460f      	mov	r7, r1
 800fe7e:	b9fb      	cbnz	r3, 800fec0 <_strtod_l+0xb80>
 800fe80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fe84:	9014      	str	r0, [sp, #80]	@ 0x50
 800fe86:	9315      	str	r3, [sp, #84]	@ 0x54
 800fe88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800fe8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fe90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fe92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800fe96:	1b5b      	subs	r3, r3, r5
 800fe98:	9311      	str	r3, [sp, #68]	@ 0x44
 800fe9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fe9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800fea2:	f002 fc75 	bl	8012790 <__ulp>
 800fea6:	4650      	mov	r0, sl
 800fea8:	ec53 2b10 	vmov	r2, r3, d0
 800feac:	4659      	mov	r1, fp
 800feae:	f7f0 fbc3 	bl	8000638 <__aeabi_dmul>
 800feb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800feb6:	f7f0 fa09 	bl	80002cc <__adddf3>
 800feba:	4682      	mov	sl, r0
 800febc:	468b      	mov	fp, r1
 800febe:	e770      	b.n	800fda2 <_strtod_l+0xa62>
 800fec0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800fec4:	e7e0      	b.n	800fe88 <_strtod_l+0xb48>
 800fec6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ff00 <_strtod_l+0xbc0>)
 800fec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fecc:	f7f0 fe26 	bl	8000b1c <__aeabi_dcmplt>
 800fed0:	e798      	b.n	800fe04 <_strtod_l+0xac4>
 800fed2:	2300      	movs	r3, #0
 800fed4:	930e      	str	r3, [sp, #56]	@ 0x38
 800fed6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800fed8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800feda:	6013      	str	r3, [r2, #0]
 800fedc:	f7ff ba6d 	b.w	800f3ba <_strtod_l+0x7a>
 800fee0:	2a65      	cmp	r2, #101	@ 0x65
 800fee2:	f43f ab68 	beq.w	800f5b6 <_strtod_l+0x276>
 800fee6:	2a45      	cmp	r2, #69	@ 0x45
 800fee8:	f43f ab65 	beq.w	800f5b6 <_strtod_l+0x276>
 800feec:	2301      	movs	r3, #1
 800feee:	f7ff bba0 	b.w	800f632 <_strtod_l+0x2f2>
 800fef2:	bf00      	nop
 800fef4:	f3af 8000 	nop.w
 800fef8:	ffc00000 	.word	0xffc00000
 800fefc:	41dfffff 	.word	0x41dfffff
 800ff00:	94a03595 	.word	0x94a03595
 800ff04:	3fcfffff 	.word	0x3fcfffff

0800ff08 <_strtod_r>:
 800ff08:	4b01      	ldr	r3, [pc, #4]	@ (800ff10 <_strtod_r+0x8>)
 800ff0a:	f7ff ba19 	b.w	800f340 <_strtod_l>
 800ff0e:	bf00      	nop
 800ff10:	20000058 	.word	0x20000058

0800ff14 <_strtol_l.isra.0>:
 800ff14:	2b24      	cmp	r3, #36	@ 0x24
 800ff16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff1a:	4686      	mov	lr, r0
 800ff1c:	4690      	mov	r8, r2
 800ff1e:	d801      	bhi.n	800ff24 <_strtol_l.isra.0+0x10>
 800ff20:	2b01      	cmp	r3, #1
 800ff22:	d106      	bne.n	800ff32 <_strtol_l.isra.0+0x1e>
 800ff24:	f000 f916 	bl	8010154 <__errno>
 800ff28:	2316      	movs	r3, #22
 800ff2a:	6003      	str	r3, [r0, #0]
 800ff2c:	2000      	movs	r0, #0
 800ff2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff32:	4834      	ldr	r0, [pc, #208]	@ (8010004 <_strtol_l.isra.0+0xf0>)
 800ff34:	460d      	mov	r5, r1
 800ff36:	462a      	mov	r2, r5
 800ff38:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ff3c:	5d06      	ldrb	r6, [r0, r4]
 800ff3e:	f016 0608 	ands.w	r6, r6, #8
 800ff42:	d1f8      	bne.n	800ff36 <_strtol_l.isra.0+0x22>
 800ff44:	2c2d      	cmp	r4, #45	@ 0x2d
 800ff46:	d110      	bne.n	800ff6a <_strtol_l.isra.0+0x56>
 800ff48:	782c      	ldrb	r4, [r5, #0]
 800ff4a:	2601      	movs	r6, #1
 800ff4c:	1c95      	adds	r5, r2, #2
 800ff4e:	f033 0210 	bics.w	r2, r3, #16
 800ff52:	d115      	bne.n	800ff80 <_strtol_l.isra.0+0x6c>
 800ff54:	2c30      	cmp	r4, #48	@ 0x30
 800ff56:	d10d      	bne.n	800ff74 <_strtol_l.isra.0+0x60>
 800ff58:	782a      	ldrb	r2, [r5, #0]
 800ff5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ff5e:	2a58      	cmp	r2, #88	@ 0x58
 800ff60:	d108      	bne.n	800ff74 <_strtol_l.isra.0+0x60>
 800ff62:	786c      	ldrb	r4, [r5, #1]
 800ff64:	3502      	adds	r5, #2
 800ff66:	2310      	movs	r3, #16
 800ff68:	e00a      	b.n	800ff80 <_strtol_l.isra.0+0x6c>
 800ff6a:	2c2b      	cmp	r4, #43	@ 0x2b
 800ff6c:	bf04      	itt	eq
 800ff6e:	782c      	ldrbeq	r4, [r5, #0]
 800ff70:	1c95      	addeq	r5, r2, #2
 800ff72:	e7ec      	b.n	800ff4e <_strtol_l.isra.0+0x3a>
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d1f6      	bne.n	800ff66 <_strtol_l.isra.0+0x52>
 800ff78:	2c30      	cmp	r4, #48	@ 0x30
 800ff7a:	bf14      	ite	ne
 800ff7c:	230a      	movne	r3, #10
 800ff7e:	2308      	moveq	r3, #8
 800ff80:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ff84:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800ff88:	2200      	movs	r2, #0
 800ff8a:	fbbc f9f3 	udiv	r9, ip, r3
 800ff8e:	4610      	mov	r0, r2
 800ff90:	fb03 ca19 	mls	sl, r3, r9, ip
 800ff94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ff98:	2f09      	cmp	r7, #9
 800ff9a:	d80f      	bhi.n	800ffbc <_strtol_l.isra.0+0xa8>
 800ff9c:	463c      	mov	r4, r7
 800ff9e:	42a3      	cmp	r3, r4
 800ffa0:	dd1b      	ble.n	800ffda <_strtol_l.isra.0+0xc6>
 800ffa2:	1c57      	adds	r7, r2, #1
 800ffa4:	d007      	beq.n	800ffb6 <_strtol_l.isra.0+0xa2>
 800ffa6:	4581      	cmp	r9, r0
 800ffa8:	d314      	bcc.n	800ffd4 <_strtol_l.isra.0+0xc0>
 800ffaa:	d101      	bne.n	800ffb0 <_strtol_l.isra.0+0x9c>
 800ffac:	45a2      	cmp	sl, r4
 800ffae:	db11      	blt.n	800ffd4 <_strtol_l.isra.0+0xc0>
 800ffb0:	fb00 4003 	mla	r0, r0, r3, r4
 800ffb4:	2201      	movs	r2, #1
 800ffb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ffba:	e7eb      	b.n	800ff94 <_strtol_l.isra.0+0x80>
 800ffbc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ffc0:	2f19      	cmp	r7, #25
 800ffc2:	d801      	bhi.n	800ffc8 <_strtol_l.isra.0+0xb4>
 800ffc4:	3c37      	subs	r4, #55	@ 0x37
 800ffc6:	e7ea      	b.n	800ff9e <_strtol_l.isra.0+0x8a>
 800ffc8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ffcc:	2f19      	cmp	r7, #25
 800ffce:	d804      	bhi.n	800ffda <_strtol_l.isra.0+0xc6>
 800ffd0:	3c57      	subs	r4, #87	@ 0x57
 800ffd2:	e7e4      	b.n	800ff9e <_strtol_l.isra.0+0x8a>
 800ffd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ffd8:	e7ed      	b.n	800ffb6 <_strtol_l.isra.0+0xa2>
 800ffda:	1c53      	adds	r3, r2, #1
 800ffdc:	d108      	bne.n	800fff0 <_strtol_l.isra.0+0xdc>
 800ffde:	2322      	movs	r3, #34	@ 0x22
 800ffe0:	f8ce 3000 	str.w	r3, [lr]
 800ffe4:	4660      	mov	r0, ip
 800ffe6:	f1b8 0f00 	cmp.w	r8, #0
 800ffea:	d0a0      	beq.n	800ff2e <_strtol_l.isra.0+0x1a>
 800ffec:	1e69      	subs	r1, r5, #1
 800ffee:	e006      	b.n	800fffe <_strtol_l.isra.0+0xea>
 800fff0:	b106      	cbz	r6, 800fff4 <_strtol_l.isra.0+0xe0>
 800fff2:	4240      	negs	r0, r0
 800fff4:	f1b8 0f00 	cmp.w	r8, #0
 800fff8:	d099      	beq.n	800ff2e <_strtol_l.isra.0+0x1a>
 800fffa:	2a00      	cmp	r2, #0
 800fffc:	d1f6      	bne.n	800ffec <_strtol_l.isra.0+0xd8>
 800fffe:	f8c8 1000 	str.w	r1, [r8]
 8010002:	e794      	b.n	800ff2e <_strtol_l.isra.0+0x1a>
 8010004:	08015ce1 	.word	0x08015ce1

08010008 <_strtol_r>:
 8010008:	f7ff bf84 	b.w	800ff14 <_strtol_l.isra.0>

0801000c <_fwalk_sglue>:
 801000c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010010:	4607      	mov	r7, r0
 8010012:	4688      	mov	r8, r1
 8010014:	4614      	mov	r4, r2
 8010016:	2600      	movs	r6, #0
 8010018:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801001c:	f1b9 0901 	subs.w	r9, r9, #1
 8010020:	d505      	bpl.n	801002e <_fwalk_sglue+0x22>
 8010022:	6824      	ldr	r4, [r4, #0]
 8010024:	2c00      	cmp	r4, #0
 8010026:	d1f7      	bne.n	8010018 <_fwalk_sglue+0xc>
 8010028:	4630      	mov	r0, r6
 801002a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801002e:	89ab      	ldrh	r3, [r5, #12]
 8010030:	2b01      	cmp	r3, #1
 8010032:	d907      	bls.n	8010044 <_fwalk_sglue+0x38>
 8010034:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010038:	3301      	adds	r3, #1
 801003a:	d003      	beq.n	8010044 <_fwalk_sglue+0x38>
 801003c:	4629      	mov	r1, r5
 801003e:	4638      	mov	r0, r7
 8010040:	47c0      	blx	r8
 8010042:	4306      	orrs	r6, r0
 8010044:	3568      	adds	r5, #104	@ 0x68
 8010046:	e7e9      	b.n	801001c <_fwalk_sglue+0x10>

08010048 <memcmp>:
 8010048:	b510      	push	{r4, lr}
 801004a:	3901      	subs	r1, #1
 801004c:	4402      	add	r2, r0
 801004e:	4290      	cmp	r0, r2
 8010050:	d101      	bne.n	8010056 <memcmp+0xe>
 8010052:	2000      	movs	r0, #0
 8010054:	e005      	b.n	8010062 <memcmp+0x1a>
 8010056:	7803      	ldrb	r3, [r0, #0]
 8010058:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801005c:	42a3      	cmp	r3, r4
 801005e:	d001      	beq.n	8010064 <memcmp+0x1c>
 8010060:	1b18      	subs	r0, r3, r4
 8010062:	bd10      	pop	{r4, pc}
 8010064:	3001      	adds	r0, #1
 8010066:	e7f2      	b.n	801004e <memcmp+0x6>

08010068 <memset>:
 8010068:	4402      	add	r2, r0
 801006a:	4603      	mov	r3, r0
 801006c:	4293      	cmp	r3, r2
 801006e:	d100      	bne.n	8010072 <memset+0xa>
 8010070:	4770      	bx	lr
 8010072:	f803 1b01 	strb.w	r1, [r3], #1
 8010076:	e7f9      	b.n	801006c <memset+0x4>

08010078 <strncmp>:
 8010078:	b510      	push	{r4, lr}
 801007a:	b16a      	cbz	r2, 8010098 <strncmp+0x20>
 801007c:	3901      	subs	r1, #1
 801007e:	1884      	adds	r4, r0, r2
 8010080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010084:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010088:	429a      	cmp	r2, r3
 801008a:	d103      	bne.n	8010094 <strncmp+0x1c>
 801008c:	42a0      	cmp	r0, r4
 801008e:	d001      	beq.n	8010094 <strncmp+0x1c>
 8010090:	2a00      	cmp	r2, #0
 8010092:	d1f5      	bne.n	8010080 <strncmp+0x8>
 8010094:	1ad0      	subs	r0, r2, r3
 8010096:	bd10      	pop	{r4, pc}
 8010098:	4610      	mov	r0, r2
 801009a:	e7fc      	b.n	8010096 <strncmp+0x1e>

0801009c <strstr>:
 801009c:	780a      	ldrb	r2, [r1, #0]
 801009e:	b570      	push	{r4, r5, r6, lr}
 80100a0:	b96a      	cbnz	r2, 80100be <strstr+0x22>
 80100a2:	bd70      	pop	{r4, r5, r6, pc}
 80100a4:	429a      	cmp	r2, r3
 80100a6:	d109      	bne.n	80100bc <strstr+0x20>
 80100a8:	460c      	mov	r4, r1
 80100aa:	4605      	mov	r5, r0
 80100ac:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d0f6      	beq.n	80100a2 <strstr+0x6>
 80100b4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80100b8:	429e      	cmp	r6, r3
 80100ba:	d0f7      	beq.n	80100ac <strstr+0x10>
 80100bc:	3001      	adds	r0, #1
 80100be:	7803      	ldrb	r3, [r0, #0]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d1ef      	bne.n	80100a4 <strstr+0x8>
 80100c4:	4618      	mov	r0, r3
 80100c6:	e7ec      	b.n	80100a2 <strstr+0x6>

080100c8 <_lseek_r>:
 80100c8:	b538      	push	{r3, r4, r5, lr}
 80100ca:	4d07      	ldr	r5, [pc, #28]	@ (80100e8 <_lseek_r+0x20>)
 80100cc:	4604      	mov	r4, r0
 80100ce:	4608      	mov	r0, r1
 80100d0:	4611      	mov	r1, r2
 80100d2:	2200      	movs	r2, #0
 80100d4:	602a      	str	r2, [r5, #0]
 80100d6:	461a      	mov	r2, r3
 80100d8:	f7f8 faab 	bl	8008632 <_lseek>
 80100dc:	1c43      	adds	r3, r0, #1
 80100de:	d102      	bne.n	80100e6 <_lseek_r+0x1e>
 80100e0:	682b      	ldr	r3, [r5, #0]
 80100e2:	b103      	cbz	r3, 80100e6 <_lseek_r+0x1e>
 80100e4:	6023      	str	r3, [r4, #0]
 80100e6:	bd38      	pop	{r3, r4, r5, pc}
 80100e8:	200019a4 	.word	0x200019a4

080100ec <_read_r>:
 80100ec:	b538      	push	{r3, r4, r5, lr}
 80100ee:	4d07      	ldr	r5, [pc, #28]	@ (801010c <_read_r+0x20>)
 80100f0:	4604      	mov	r4, r0
 80100f2:	4608      	mov	r0, r1
 80100f4:	4611      	mov	r1, r2
 80100f6:	2200      	movs	r2, #0
 80100f8:	602a      	str	r2, [r5, #0]
 80100fa:	461a      	mov	r2, r3
 80100fc:	f7f8 fa39 	bl	8008572 <_read>
 8010100:	1c43      	adds	r3, r0, #1
 8010102:	d102      	bne.n	801010a <_read_r+0x1e>
 8010104:	682b      	ldr	r3, [r5, #0]
 8010106:	b103      	cbz	r3, 801010a <_read_r+0x1e>
 8010108:	6023      	str	r3, [r4, #0]
 801010a:	bd38      	pop	{r3, r4, r5, pc}
 801010c:	200019a4 	.word	0x200019a4

08010110 <_sbrk_r>:
 8010110:	b538      	push	{r3, r4, r5, lr}
 8010112:	4d06      	ldr	r5, [pc, #24]	@ (801012c <_sbrk_r+0x1c>)
 8010114:	2300      	movs	r3, #0
 8010116:	4604      	mov	r4, r0
 8010118:	4608      	mov	r0, r1
 801011a:	602b      	str	r3, [r5, #0]
 801011c:	f7f8 fa96 	bl	800864c <_sbrk>
 8010120:	1c43      	adds	r3, r0, #1
 8010122:	d102      	bne.n	801012a <_sbrk_r+0x1a>
 8010124:	682b      	ldr	r3, [r5, #0]
 8010126:	b103      	cbz	r3, 801012a <_sbrk_r+0x1a>
 8010128:	6023      	str	r3, [r4, #0]
 801012a:	bd38      	pop	{r3, r4, r5, pc}
 801012c:	200019a4 	.word	0x200019a4

08010130 <_write_r>:
 8010130:	b538      	push	{r3, r4, r5, lr}
 8010132:	4d07      	ldr	r5, [pc, #28]	@ (8010150 <_write_r+0x20>)
 8010134:	4604      	mov	r4, r0
 8010136:	4608      	mov	r0, r1
 8010138:	4611      	mov	r1, r2
 801013a:	2200      	movs	r2, #0
 801013c:	602a      	str	r2, [r5, #0]
 801013e:	461a      	mov	r2, r3
 8010140:	f7f8 fa34 	bl	80085ac <_write>
 8010144:	1c43      	adds	r3, r0, #1
 8010146:	d102      	bne.n	801014e <_write_r+0x1e>
 8010148:	682b      	ldr	r3, [r5, #0]
 801014a:	b103      	cbz	r3, 801014e <_write_r+0x1e>
 801014c:	6023      	str	r3, [r4, #0]
 801014e:	bd38      	pop	{r3, r4, r5, pc}
 8010150:	200019a4 	.word	0x200019a4

08010154 <__errno>:
 8010154:	4b01      	ldr	r3, [pc, #4]	@ (801015c <__errno+0x8>)
 8010156:	6818      	ldr	r0, [r3, #0]
 8010158:	4770      	bx	lr
 801015a:	bf00      	nop
 801015c:	200001c4 	.word	0x200001c4

08010160 <__libc_init_array>:
 8010160:	b570      	push	{r4, r5, r6, lr}
 8010162:	4d0d      	ldr	r5, [pc, #52]	@ (8010198 <__libc_init_array+0x38>)
 8010164:	4c0d      	ldr	r4, [pc, #52]	@ (801019c <__libc_init_array+0x3c>)
 8010166:	1b64      	subs	r4, r4, r5
 8010168:	10a4      	asrs	r4, r4, #2
 801016a:	2600      	movs	r6, #0
 801016c:	42a6      	cmp	r6, r4
 801016e:	d109      	bne.n	8010184 <__libc_init_array+0x24>
 8010170:	4d0b      	ldr	r5, [pc, #44]	@ (80101a0 <__libc_init_array+0x40>)
 8010172:	4c0c      	ldr	r4, [pc, #48]	@ (80101a4 <__libc_init_array+0x44>)
 8010174:	f005 fbbe 	bl	80158f4 <_init>
 8010178:	1b64      	subs	r4, r4, r5
 801017a:	10a4      	asrs	r4, r4, #2
 801017c:	2600      	movs	r6, #0
 801017e:	42a6      	cmp	r6, r4
 8010180:	d105      	bne.n	801018e <__libc_init_array+0x2e>
 8010182:	bd70      	pop	{r4, r5, r6, pc}
 8010184:	f855 3b04 	ldr.w	r3, [r5], #4
 8010188:	4798      	blx	r3
 801018a:	3601      	adds	r6, #1
 801018c:	e7ee      	b.n	801016c <__libc_init_array+0xc>
 801018e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010192:	4798      	blx	r3
 8010194:	3601      	adds	r6, #1
 8010196:	e7f2      	b.n	801017e <__libc_init_array+0x1e>
 8010198:	08016138 	.word	0x08016138
 801019c:	08016138 	.word	0x08016138
 80101a0:	08016138 	.word	0x08016138
 80101a4:	0801613c 	.word	0x0801613c

080101a8 <__retarget_lock_init_recursive>:
 80101a8:	4770      	bx	lr

080101aa <__retarget_lock_acquire_recursive>:
 80101aa:	4770      	bx	lr

080101ac <__retarget_lock_release_recursive>:
 80101ac:	4770      	bx	lr
	...

080101b0 <_localeconv_r>:
 80101b0:	4800      	ldr	r0, [pc, #0]	@ (80101b4 <_localeconv_r+0x4>)
 80101b2:	4770      	bx	lr
 80101b4:	20000148 	.word	0x20000148

080101b8 <_close_r>:
 80101b8:	b538      	push	{r3, r4, r5, lr}
 80101ba:	4d06      	ldr	r5, [pc, #24]	@ (80101d4 <_close_r+0x1c>)
 80101bc:	2300      	movs	r3, #0
 80101be:	4604      	mov	r4, r0
 80101c0:	4608      	mov	r0, r1
 80101c2:	602b      	str	r3, [r5, #0]
 80101c4:	f7f8 fa0e 	bl	80085e4 <_close>
 80101c8:	1c43      	adds	r3, r0, #1
 80101ca:	d102      	bne.n	80101d2 <_close_r+0x1a>
 80101cc:	682b      	ldr	r3, [r5, #0]
 80101ce:	b103      	cbz	r3, 80101d2 <_close_r+0x1a>
 80101d0:	6023      	str	r3, [r4, #0]
 80101d2:	bd38      	pop	{r3, r4, r5, pc}
 80101d4:	200019a4 	.word	0x200019a4

080101d8 <memcpy>:
 80101d8:	440a      	add	r2, r1
 80101da:	4291      	cmp	r1, r2
 80101dc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80101e0:	d100      	bne.n	80101e4 <memcpy+0xc>
 80101e2:	4770      	bx	lr
 80101e4:	b510      	push	{r4, lr}
 80101e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101ee:	4291      	cmp	r1, r2
 80101f0:	d1f9      	bne.n	80101e6 <memcpy+0xe>
 80101f2:	bd10      	pop	{r4, pc}
 80101f4:	0000      	movs	r0, r0
	...

080101f8 <nan>:
 80101f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010200 <nan+0x8>
 80101fc:	4770      	bx	lr
 80101fe:	bf00      	nop
 8010200:	00000000 	.word	0x00000000
 8010204:	7ff80000 	.word	0x7ff80000

08010208 <nanf>:
 8010208:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010210 <nanf+0x8>
 801020c:	4770      	bx	lr
 801020e:	bf00      	nop
 8010210:	7fc00000 	.word	0x7fc00000

08010214 <quorem>:
 8010214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010218:	6903      	ldr	r3, [r0, #16]
 801021a:	690c      	ldr	r4, [r1, #16]
 801021c:	42a3      	cmp	r3, r4
 801021e:	4607      	mov	r7, r0
 8010220:	db7e      	blt.n	8010320 <quorem+0x10c>
 8010222:	3c01      	subs	r4, #1
 8010224:	f101 0814 	add.w	r8, r1, #20
 8010228:	00a3      	lsls	r3, r4, #2
 801022a:	f100 0514 	add.w	r5, r0, #20
 801022e:	9300      	str	r3, [sp, #0]
 8010230:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010234:	9301      	str	r3, [sp, #4]
 8010236:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801023a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801023e:	3301      	adds	r3, #1
 8010240:	429a      	cmp	r2, r3
 8010242:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010246:	fbb2 f6f3 	udiv	r6, r2, r3
 801024a:	d32e      	bcc.n	80102aa <quorem+0x96>
 801024c:	f04f 0a00 	mov.w	sl, #0
 8010250:	46c4      	mov	ip, r8
 8010252:	46ae      	mov	lr, r5
 8010254:	46d3      	mov	fp, sl
 8010256:	f85c 3b04 	ldr.w	r3, [ip], #4
 801025a:	b298      	uxth	r0, r3
 801025c:	fb06 a000 	mla	r0, r6, r0, sl
 8010260:	0c02      	lsrs	r2, r0, #16
 8010262:	0c1b      	lsrs	r3, r3, #16
 8010264:	fb06 2303 	mla	r3, r6, r3, r2
 8010268:	f8de 2000 	ldr.w	r2, [lr]
 801026c:	b280      	uxth	r0, r0
 801026e:	b292      	uxth	r2, r2
 8010270:	1a12      	subs	r2, r2, r0
 8010272:	445a      	add	r2, fp
 8010274:	f8de 0000 	ldr.w	r0, [lr]
 8010278:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801027c:	b29b      	uxth	r3, r3
 801027e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010282:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010286:	b292      	uxth	r2, r2
 8010288:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801028c:	45e1      	cmp	r9, ip
 801028e:	f84e 2b04 	str.w	r2, [lr], #4
 8010292:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010296:	d2de      	bcs.n	8010256 <quorem+0x42>
 8010298:	9b00      	ldr	r3, [sp, #0]
 801029a:	58eb      	ldr	r3, [r5, r3]
 801029c:	b92b      	cbnz	r3, 80102aa <quorem+0x96>
 801029e:	9b01      	ldr	r3, [sp, #4]
 80102a0:	3b04      	subs	r3, #4
 80102a2:	429d      	cmp	r5, r3
 80102a4:	461a      	mov	r2, r3
 80102a6:	d32f      	bcc.n	8010308 <quorem+0xf4>
 80102a8:	613c      	str	r4, [r7, #16]
 80102aa:	4638      	mov	r0, r7
 80102ac:	f002 f9c0 	bl	8012630 <__mcmp>
 80102b0:	2800      	cmp	r0, #0
 80102b2:	db25      	blt.n	8010300 <quorem+0xec>
 80102b4:	4629      	mov	r1, r5
 80102b6:	2000      	movs	r0, #0
 80102b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80102bc:	f8d1 c000 	ldr.w	ip, [r1]
 80102c0:	fa1f fe82 	uxth.w	lr, r2
 80102c4:	fa1f f38c 	uxth.w	r3, ip
 80102c8:	eba3 030e 	sub.w	r3, r3, lr
 80102cc:	4403      	add	r3, r0
 80102ce:	0c12      	lsrs	r2, r2, #16
 80102d0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80102d4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80102d8:	b29b      	uxth	r3, r3
 80102da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102de:	45c1      	cmp	r9, r8
 80102e0:	f841 3b04 	str.w	r3, [r1], #4
 80102e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80102e8:	d2e6      	bcs.n	80102b8 <quorem+0xa4>
 80102ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80102ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80102f2:	b922      	cbnz	r2, 80102fe <quorem+0xea>
 80102f4:	3b04      	subs	r3, #4
 80102f6:	429d      	cmp	r5, r3
 80102f8:	461a      	mov	r2, r3
 80102fa:	d30b      	bcc.n	8010314 <quorem+0x100>
 80102fc:	613c      	str	r4, [r7, #16]
 80102fe:	3601      	adds	r6, #1
 8010300:	4630      	mov	r0, r6
 8010302:	b003      	add	sp, #12
 8010304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010308:	6812      	ldr	r2, [r2, #0]
 801030a:	3b04      	subs	r3, #4
 801030c:	2a00      	cmp	r2, #0
 801030e:	d1cb      	bne.n	80102a8 <quorem+0x94>
 8010310:	3c01      	subs	r4, #1
 8010312:	e7c6      	b.n	80102a2 <quorem+0x8e>
 8010314:	6812      	ldr	r2, [r2, #0]
 8010316:	3b04      	subs	r3, #4
 8010318:	2a00      	cmp	r2, #0
 801031a:	d1ef      	bne.n	80102fc <quorem+0xe8>
 801031c:	3c01      	subs	r4, #1
 801031e:	e7ea      	b.n	80102f6 <quorem+0xe2>
 8010320:	2000      	movs	r0, #0
 8010322:	e7ee      	b.n	8010302 <quorem+0xee>
 8010324:	0000      	movs	r0, r0
	...

08010328 <_dtoa_r>:
 8010328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801032c:	69c7      	ldr	r7, [r0, #28]
 801032e:	b097      	sub	sp, #92	@ 0x5c
 8010330:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010334:	ec55 4b10 	vmov	r4, r5, d0
 8010338:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801033a:	9107      	str	r1, [sp, #28]
 801033c:	4681      	mov	r9, r0
 801033e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010340:	9311      	str	r3, [sp, #68]	@ 0x44
 8010342:	b97f      	cbnz	r7, 8010364 <_dtoa_r+0x3c>
 8010344:	2010      	movs	r0, #16
 8010346:	f001 fc69 	bl	8011c1c <malloc>
 801034a:	4602      	mov	r2, r0
 801034c:	f8c9 001c 	str.w	r0, [r9, #28]
 8010350:	b920      	cbnz	r0, 801035c <_dtoa_r+0x34>
 8010352:	4ba9      	ldr	r3, [pc, #676]	@ (80105f8 <_dtoa_r+0x2d0>)
 8010354:	21ef      	movs	r1, #239	@ 0xef
 8010356:	48a9      	ldr	r0, [pc, #676]	@ (80105fc <_dtoa_r+0x2d4>)
 8010358:	f002 fc58 	bl	8012c0c <__assert_func>
 801035c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010360:	6007      	str	r7, [r0, #0]
 8010362:	60c7      	str	r7, [r0, #12]
 8010364:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010368:	6819      	ldr	r1, [r3, #0]
 801036a:	b159      	cbz	r1, 8010384 <_dtoa_r+0x5c>
 801036c:	685a      	ldr	r2, [r3, #4]
 801036e:	604a      	str	r2, [r1, #4]
 8010370:	2301      	movs	r3, #1
 8010372:	4093      	lsls	r3, r2
 8010374:	608b      	str	r3, [r1, #8]
 8010376:	4648      	mov	r0, r9
 8010378:	f001 fede 	bl	8012138 <_Bfree>
 801037c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010380:	2200      	movs	r2, #0
 8010382:	601a      	str	r2, [r3, #0]
 8010384:	1e2b      	subs	r3, r5, #0
 8010386:	bfb9      	ittee	lt
 8010388:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801038c:	9305      	strlt	r3, [sp, #20]
 801038e:	2300      	movge	r3, #0
 8010390:	6033      	strge	r3, [r6, #0]
 8010392:	9f05      	ldr	r7, [sp, #20]
 8010394:	4b9a      	ldr	r3, [pc, #616]	@ (8010600 <_dtoa_r+0x2d8>)
 8010396:	bfbc      	itt	lt
 8010398:	2201      	movlt	r2, #1
 801039a:	6032      	strlt	r2, [r6, #0]
 801039c:	43bb      	bics	r3, r7
 801039e:	d112      	bne.n	80103c6 <_dtoa_r+0x9e>
 80103a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80103a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80103a6:	6013      	str	r3, [r2, #0]
 80103a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80103ac:	4323      	orrs	r3, r4
 80103ae:	f000 855a 	beq.w	8010e66 <_dtoa_r+0xb3e>
 80103b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80103b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010614 <_dtoa_r+0x2ec>
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	f000 855c 	beq.w	8010e76 <_dtoa_r+0xb4e>
 80103be:	f10a 0303 	add.w	r3, sl, #3
 80103c2:	f000 bd56 	b.w	8010e72 <_dtoa_r+0xb4a>
 80103c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80103ca:	2200      	movs	r2, #0
 80103cc:	ec51 0b17 	vmov	r0, r1, d7
 80103d0:	2300      	movs	r3, #0
 80103d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80103d6:	f7f0 fb97 	bl	8000b08 <__aeabi_dcmpeq>
 80103da:	4680      	mov	r8, r0
 80103dc:	b158      	cbz	r0, 80103f6 <_dtoa_r+0xce>
 80103de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80103e0:	2301      	movs	r3, #1
 80103e2:	6013      	str	r3, [r2, #0]
 80103e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80103e6:	b113      	cbz	r3, 80103ee <_dtoa_r+0xc6>
 80103e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80103ea:	4b86      	ldr	r3, [pc, #536]	@ (8010604 <_dtoa_r+0x2dc>)
 80103ec:	6013      	str	r3, [r2, #0]
 80103ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010618 <_dtoa_r+0x2f0>
 80103f2:	f000 bd40 	b.w	8010e76 <_dtoa_r+0xb4e>
 80103f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80103fa:	aa14      	add	r2, sp, #80	@ 0x50
 80103fc:	a915      	add	r1, sp, #84	@ 0x54
 80103fe:	4648      	mov	r0, r9
 8010400:	f002 fa36 	bl	8012870 <__d2b>
 8010404:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010408:	9002      	str	r0, [sp, #8]
 801040a:	2e00      	cmp	r6, #0
 801040c:	d078      	beq.n	8010500 <_dtoa_r+0x1d8>
 801040e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010410:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010418:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801041c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010420:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010424:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010428:	4619      	mov	r1, r3
 801042a:	2200      	movs	r2, #0
 801042c:	4b76      	ldr	r3, [pc, #472]	@ (8010608 <_dtoa_r+0x2e0>)
 801042e:	f7ef ff4b 	bl	80002c8 <__aeabi_dsub>
 8010432:	a36b      	add	r3, pc, #428	@ (adr r3, 80105e0 <_dtoa_r+0x2b8>)
 8010434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010438:	f7f0 f8fe 	bl	8000638 <__aeabi_dmul>
 801043c:	a36a      	add	r3, pc, #424	@ (adr r3, 80105e8 <_dtoa_r+0x2c0>)
 801043e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010442:	f7ef ff43 	bl	80002cc <__adddf3>
 8010446:	4604      	mov	r4, r0
 8010448:	4630      	mov	r0, r6
 801044a:	460d      	mov	r5, r1
 801044c:	f7f0 f88a 	bl	8000564 <__aeabi_i2d>
 8010450:	a367      	add	r3, pc, #412	@ (adr r3, 80105f0 <_dtoa_r+0x2c8>)
 8010452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010456:	f7f0 f8ef 	bl	8000638 <__aeabi_dmul>
 801045a:	4602      	mov	r2, r0
 801045c:	460b      	mov	r3, r1
 801045e:	4620      	mov	r0, r4
 8010460:	4629      	mov	r1, r5
 8010462:	f7ef ff33 	bl	80002cc <__adddf3>
 8010466:	4604      	mov	r4, r0
 8010468:	460d      	mov	r5, r1
 801046a:	f7f0 fb95 	bl	8000b98 <__aeabi_d2iz>
 801046e:	2200      	movs	r2, #0
 8010470:	4607      	mov	r7, r0
 8010472:	2300      	movs	r3, #0
 8010474:	4620      	mov	r0, r4
 8010476:	4629      	mov	r1, r5
 8010478:	f7f0 fb50 	bl	8000b1c <__aeabi_dcmplt>
 801047c:	b140      	cbz	r0, 8010490 <_dtoa_r+0x168>
 801047e:	4638      	mov	r0, r7
 8010480:	f7f0 f870 	bl	8000564 <__aeabi_i2d>
 8010484:	4622      	mov	r2, r4
 8010486:	462b      	mov	r3, r5
 8010488:	f7f0 fb3e 	bl	8000b08 <__aeabi_dcmpeq>
 801048c:	b900      	cbnz	r0, 8010490 <_dtoa_r+0x168>
 801048e:	3f01      	subs	r7, #1
 8010490:	2f16      	cmp	r7, #22
 8010492:	d852      	bhi.n	801053a <_dtoa_r+0x212>
 8010494:	4b5d      	ldr	r3, [pc, #372]	@ (801060c <_dtoa_r+0x2e4>)
 8010496:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801049a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801049e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80104a2:	f7f0 fb3b 	bl	8000b1c <__aeabi_dcmplt>
 80104a6:	2800      	cmp	r0, #0
 80104a8:	d049      	beq.n	801053e <_dtoa_r+0x216>
 80104aa:	3f01      	subs	r7, #1
 80104ac:	2300      	movs	r3, #0
 80104ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80104b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80104b2:	1b9b      	subs	r3, r3, r6
 80104b4:	1e5a      	subs	r2, r3, #1
 80104b6:	bf45      	ittet	mi
 80104b8:	f1c3 0301 	rsbmi	r3, r3, #1
 80104bc:	9300      	strmi	r3, [sp, #0]
 80104be:	2300      	movpl	r3, #0
 80104c0:	2300      	movmi	r3, #0
 80104c2:	9206      	str	r2, [sp, #24]
 80104c4:	bf54      	ite	pl
 80104c6:	9300      	strpl	r3, [sp, #0]
 80104c8:	9306      	strmi	r3, [sp, #24]
 80104ca:	2f00      	cmp	r7, #0
 80104cc:	db39      	blt.n	8010542 <_dtoa_r+0x21a>
 80104ce:	9b06      	ldr	r3, [sp, #24]
 80104d0:	970d      	str	r7, [sp, #52]	@ 0x34
 80104d2:	443b      	add	r3, r7
 80104d4:	9306      	str	r3, [sp, #24]
 80104d6:	2300      	movs	r3, #0
 80104d8:	9308      	str	r3, [sp, #32]
 80104da:	9b07      	ldr	r3, [sp, #28]
 80104dc:	2b09      	cmp	r3, #9
 80104de:	d863      	bhi.n	80105a8 <_dtoa_r+0x280>
 80104e0:	2b05      	cmp	r3, #5
 80104e2:	bfc4      	itt	gt
 80104e4:	3b04      	subgt	r3, #4
 80104e6:	9307      	strgt	r3, [sp, #28]
 80104e8:	9b07      	ldr	r3, [sp, #28]
 80104ea:	f1a3 0302 	sub.w	r3, r3, #2
 80104ee:	bfcc      	ite	gt
 80104f0:	2400      	movgt	r4, #0
 80104f2:	2401      	movle	r4, #1
 80104f4:	2b03      	cmp	r3, #3
 80104f6:	d863      	bhi.n	80105c0 <_dtoa_r+0x298>
 80104f8:	e8df f003 	tbb	[pc, r3]
 80104fc:	2b375452 	.word	0x2b375452
 8010500:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010504:	441e      	add	r6, r3
 8010506:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801050a:	2b20      	cmp	r3, #32
 801050c:	bfc1      	itttt	gt
 801050e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010512:	409f      	lslgt	r7, r3
 8010514:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010518:	fa24 f303 	lsrgt.w	r3, r4, r3
 801051c:	bfd6      	itet	le
 801051e:	f1c3 0320 	rsble	r3, r3, #32
 8010522:	ea47 0003 	orrgt.w	r0, r7, r3
 8010526:	fa04 f003 	lslle.w	r0, r4, r3
 801052a:	f7f0 f80b 	bl	8000544 <__aeabi_ui2d>
 801052e:	2201      	movs	r2, #1
 8010530:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010534:	3e01      	subs	r6, #1
 8010536:	9212      	str	r2, [sp, #72]	@ 0x48
 8010538:	e776      	b.n	8010428 <_dtoa_r+0x100>
 801053a:	2301      	movs	r3, #1
 801053c:	e7b7      	b.n	80104ae <_dtoa_r+0x186>
 801053e:	9010      	str	r0, [sp, #64]	@ 0x40
 8010540:	e7b6      	b.n	80104b0 <_dtoa_r+0x188>
 8010542:	9b00      	ldr	r3, [sp, #0]
 8010544:	1bdb      	subs	r3, r3, r7
 8010546:	9300      	str	r3, [sp, #0]
 8010548:	427b      	negs	r3, r7
 801054a:	9308      	str	r3, [sp, #32]
 801054c:	2300      	movs	r3, #0
 801054e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010550:	e7c3      	b.n	80104da <_dtoa_r+0x1b2>
 8010552:	2301      	movs	r3, #1
 8010554:	9309      	str	r3, [sp, #36]	@ 0x24
 8010556:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010558:	eb07 0b03 	add.w	fp, r7, r3
 801055c:	f10b 0301 	add.w	r3, fp, #1
 8010560:	2b01      	cmp	r3, #1
 8010562:	9303      	str	r3, [sp, #12]
 8010564:	bfb8      	it	lt
 8010566:	2301      	movlt	r3, #1
 8010568:	e006      	b.n	8010578 <_dtoa_r+0x250>
 801056a:	2301      	movs	r3, #1
 801056c:	9309      	str	r3, [sp, #36]	@ 0x24
 801056e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010570:	2b00      	cmp	r3, #0
 8010572:	dd28      	ble.n	80105c6 <_dtoa_r+0x29e>
 8010574:	469b      	mov	fp, r3
 8010576:	9303      	str	r3, [sp, #12]
 8010578:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801057c:	2100      	movs	r1, #0
 801057e:	2204      	movs	r2, #4
 8010580:	f102 0514 	add.w	r5, r2, #20
 8010584:	429d      	cmp	r5, r3
 8010586:	d926      	bls.n	80105d6 <_dtoa_r+0x2ae>
 8010588:	6041      	str	r1, [r0, #4]
 801058a:	4648      	mov	r0, r9
 801058c:	f001 fd94 	bl	80120b8 <_Balloc>
 8010590:	4682      	mov	sl, r0
 8010592:	2800      	cmp	r0, #0
 8010594:	d142      	bne.n	801061c <_dtoa_r+0x2f4>
 8010596:	4b1e      	ldr	r3, [pc, #120]	@ (8010610 <_dtoa_r+0x2e8>)
 8010598:	4602      	mov	r2, r0
 801059a:	f240 11af 	movw	r1, #431	@ 0x1af
 801059e:	e6da      	b.n	8010356 <_dtoa_r+0x2e>
 80105a0:	2300      	movs	r3, #0
 80105a2:	e7e3      	b.n	801056c <_dtoa_r+0x244>
 80105a4:	2300      	movs	r3, #0
 80105a6:	e7d5      	b.n	8010554 <_dtoa_r+0x22c>
 80105a8:	2401      	movs	r4, #1
 80105aa:	2300      	movs	r3, #0
 80105ac:	9307      	str	r3, [sp, #28]
 80105ae:	9409      	str	r4, [sp, #36]	@ 0x24
 80105b0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80105b4:	2200      	movs	r2, #0
 80105b6:	f8cd b00c 	str.w	fp, [sp, #12]
 80105ba:	2312      	movs	r3, #18
 80105bc:	920c      	str	r2, [sp, #48]	@ 0x30
 80105be:	e7db      	b.n	8010578 <_dtoa_r+0x250>
 80105c0:	2301      	movs	r3, #1
 80105c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80105c4:	e7f4      	b.n	80105b0 <_dtoa_r+0x288>
 80105c6:	f04f 0b01 	mov.w	fp, #1
 80105ca:	f8cd b00c 	str.w	fp, [sp, #12]
 80105ce:	465b      	mov	r3, fp
 80105d0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80105d4:	e7d0      	b.n	8010578 <_dtoa_r+0x250>
 80105d6:	3101      	adds	r1, #1
 80105d8:	0052      	lsls	r2, r2, #1
 80105da:	e7d1      	b.n	8010580 <_dtoa_r+0x258>
 80105dc:	f3af 8000 	nop.w
 80105e0:	636f4361 	.word	0x636f4361
 80105e4:	3fd287a7 	.word	0x3fd287a7
 80105e8:	8b60c8b3 	.word	0x8b60c8b3
 80105ec:	3fc68a28 	.word	0x3fc68a28
 80105f0:	509f79fb 	.word	0x509f79fb
 80105f4:	3fd34413 	.word	0x3fd34413
 80105f8:	08015aea 	.word	0x08015aea
 80105fc:	08015b01 	.word	0x08015b01
 8010600:	7ff00000 	.word	0x7ff00000
 8010604:	08015bf2 	.word	0x08015bf2
 8010608:	3ff80000 	.word	0x3ff80000
 801060c:	08015e18 	.word	0x08015e18
 8010610:	08015b59 	.word	0x08015b59
 8010614:	08015ae6 	.word	0x08015ae6
 8010618:	08015bf1 	.word	0x08015bf1
 801061c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010620:	6018      	str	r0, [r3, #0]
 8010622:	9b03      	ldr	r3, [sp, #12]
 8010624:	2b0e      	cmp	r3, #14
 8010626:	f200 80a1 	bhi.w	801076c <_dtoa_r+0x444>
 801062a:	2c00      	cmp	r4, #0
 801062c:	f000 809e 	beq.w	801076c <_dtoa_r+0x444>
 8010630:	2f00      	cmp	r7, #0
 8010632:	dd33      	ble.n	801069c <_dtoa_r+0x374>
 8010634:	4b9c      	ldr	r3, [pc, #624]	@ (80108a8 <_dtoa_r+0x580>)
 8010636:	f007 020f 	and.w	r2, r7, #15
 801063a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801063e:	ed93 7b00 	vldr	d7, [r3]
 8010642:	05f8      	lsls	r0, r7, #23
 8010644:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010648:	ea4f 1427 	mov.w	r4, r7, asr #4
 801064c:	d516      	bpl.n	801067c <_dtoa_r+0x354>
 801064e:	4b97      	ldr	r3, [pc, #604]	@ (80108ac <_dtoa_r+0x584>)
 8010650:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010654:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010658:	f7f0 f918 	bl	800088c <__aeabi_ddiv>
 801065c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010660:	f004 040f 	and.w	r4, r4, #15
 8010664:	2603      	movs	r6, #3
 8010666:	4d91      	ldr	r5, [pc, #580]	@ (80108ac <_dtoa_r+0x584>)
 8010668:	b954      	cbnz	r4, 8010680 <_dtoa_r+0x358>
 801066a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801066e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010672:	f7f0 f90b 	bl	800088c <__aeabi_ddiv>
 8010676:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801067a:	e028      	b.n	80106ce <_dtoa_r+0x3a6>
 801067c:	2602      	movs	r6, #2
 801067e:	e7f2      	b.n	8010666 <_dtoa_r+0x33e>
 8010680:	07e1      	lsls	r1, r4, #31
 8010682:	d508      	bpl.n	8010696 <_dtoa_r+0x36e>
 8010684:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010688:	e9d5 2300 	ldrd	r2, r3, [r5]
 801068c:	f7ef ffd4 	bl	8000638 <__aeabi_dmul>
 8010690:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010694:	3601      	adds	r6, #1
 8010696:	1064      	asrs	r4, r4, #1
 8010698:	3508      	adds	r5, #8
 801069a:	e7e5      	b.n	8010668 <_dtoa_r+0x340>
 801069c:	f000 80af 	beq.w	80107fe <_dtoa_r+0x4d6>
 80106a0:	427c      	negs	r4, r7
 80106a2:	4b81      	ldr	r3, [pc, #516]	@ (80108a8 <_dtoa_r+0x580>)
 80106a4:	4d81      	ldr	r5, [pc, #516]	@ (80108ac <_dtoa_r+0x584>)
 80106a6:	f004 020f 	and.w	r2, r4, #15
 80106aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80106ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80106b6:	f7ef ffbf 	bl	8000638 <__aeabi_dmul>
 80106ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80106be:	1124      	asrs	r4, r4, #4
 80106c0:	2300      	movs	r3, #0
 80106c2:	2602      	movs	r6, #2
 80106c4:	2c00      	cmp	r4, #0
 80106c6:	f040 808f 	bne.w	80107e8 <_dtoa_r+0x4c0>
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d1d3      	bne.n	8010676 <_dtoa_r+0x34e>
 80106ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80106d0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	f000 8094 	beq.w	8010802 <_dtoa_r+0x4da>
 80106da:	4b75      	ldr	r3, [pc, #468]	@ (80108b0 <_dtoa_r+0x588>)
 80106dc:	2200      	movs	r2, #0
 80106de:	4620      	mov	r0, r4
 80106e0:	4629      	mov	r1, r5
 80106e2:	f7f0 fa1b 	bl	8000b1c <__aeabi_dcmplt>
 80106e6:	2800      	cmp	r0, #0
 80106e8:	f000 808b 	beq.w	8010802 <_dtoa_r+0x4da>
 80106ec:	9b03      	ldr	r3, [sp, #12]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	f000 8087 	beq.w	8010802 <_dtoa_r+0x4da>
 80106f4:	f1bb 0f00 	cmp.w	fp, #0
 80106f8:	dd34      	ble.n	8010764 <_dtoa_r+0x43c>
 80106fa:	4620      	mov	r0, r4
 80106fc:	4b6d      	ldr	r3, [pc, #436]	@ (80108b4 <_dtoa_r+0x58c>)
 80106fe:	2200      	movs	r2, #0
 8010700:	4629      	mov	r1, r5
 8010702:	f7ef ff99 	bl	8000638 <__aeabi_dmul>
 8010706:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801070a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 801070e:	3601      	adds	r6, #1
 8010710:	465c      	mov	r4, fp
 8010712:	4630      	mov	r0, r6
 8010714:	f7ef ff26 	bl	8000564 <__aeabi_i2d>
 8010718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801071c:	f7ef ff8c 	bl	8000638 <__aeabi_dmul>
 8010720:	4b65      	ldr	r3, [pc, #404]	@ (80108b8 <_dtoa_r+0x590>)
 8010722:	2200      	movs	r2, #0
 8010724:	f7ef fdd2 	bl	80002cc <__adddf3>
 8010728:	4605      	mov	r5, r0
 801072a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801072e:	2c00      	cmp	r4, #0
 8010730:	d16a      	bne.n	8010808 <_dtoa_r+0x4e0>
 8010732:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010736:	4b61      	ldr	r3, [pc, #388]	@ (80108bc <_dtoa_r+0x594>)
 8010738:	2200      	movs	r2, #0
 801073a:	f7ef fdc5 	bl	80002c8 <__aeabi_dsub>
 801073e:	4602      	mov	r2, r0
 8010740:	460b      	mov	r3, r1
 8010742:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010746:	462a      	mov	r2, r5
 8010748:	4633      	mov	r3, r6
 801074a:	f7f0 fa05 	bl	8000b58 <__aeabi_dcmpgt>
 801074e:	2800      	cmp	r0, #0
 8010750:	f040 8298 	bne.w	8010c84 <_dtoa_r+0x95c>
 8010754:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010758:	462a      	mov	r2, r5
 801075a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801075e:	f7f0 f9dd 	bl	8000b1c <__aeabi_dcmplt>
 8010762:	bb38      	cbnz	r0, 80107b4 <_dtoa_r+0x48c>
 8010764:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010768:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801076c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801076e:	2b00      	cmp	r3, #0
 8010770:	f2c0 8157 	blt.w	8010a22 <_dtoa_r+0x6fa>
 8010774:	2f0e      	cmp	r7, #14
 8010776:	f300 8154 	bgt.w	8010a22 <_dtoa_r+0x6fa>
 801077a:	4b4b      	ldr	r3, [pc, #300]	@ (80108a8 <_dtoa_r+0x580>)
 801077c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010780:	ed93 7b00 	vldr	d7, [r3]
 8010784:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010786:	2b00      	cmp	r3, #0
 8010788:	ed8d 7b00 	vstr	d7, [sp]
 801078c:	f280 80e5 	bge.w	801095a <_dtoa_r+0x632>
 8010790:	9b03      	ldr	r3, [sp, #12]
 8010792:	2b00      	cmp	r3, #0
 8010794:	f300 80e1 	bgt.w	801095a <_dtoa_r+0x632>
 8010798:	d10c      	bne.n	80107b4 <_dtoa_r+0x48c>
 801079a:	4b48      	ldr	r3, [pc, #288]	@ (80108bc <_dtoa_r+0x594>)
 801079c:	2200      	movs	r2, #0
 801079e:	ec51 0b17 	vmov	r0, r1, d7
 80107a2:	f7ef ff49 	bl	8000638 <__aeabi_dmul>
 80107a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80107aa:	f7f0 f9cb 	bl	8000b44 <__aeabi_dcmpge>
 80107ae:	2800      	cmp	r0, #0
 80107b0:	f000 8266 	beq.w	8010c80 <_dtoa_r+0x958>
 80107b4:	2400      	movs	r4, #0
 80107b6:	4625      	mov	r5, r4
 80107b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80107ba:	4656      	mov	r6, sl
 80107bc:	ea6f 0803 	mvn.w	r8, r3
 80107c0:	2700      	movs	r7, #0
 80107c2:	4621      	mov	r1, r4
 80107c4:	4648      	mov	r0, r9
 80107c6:	f001 fcb7 	bl	8012138 <_Bfree>
 80107ca:	2d00      	cmp	r5, #0
 80107cc:	f000 80bd 	beq.w	801094a <_dtoa_r+0x622>
 80107d0:	b12f      	cbz	r7, 80107de <_dtoa_r+0x4b6>
 80107d2:	42af      	cmp	r7, r5
 80107d4:	d003      	beq.n	80107de <_dtoa_r+0x4b6>
 80107d6:	4639      	mov	r1, r7
 80107d8:	4648      	mov	r0, r9
 80107da:	f001 fcad 	bl	8012138 <_Bfree>
 80107de:	4629      	mov	r1, r5
 80107e0:	4648      	mov	r0, r9
 80107e2:	f001 fca9 	bl	8012138 <_Bfree>
 80107e6:	e0b0      	b.n	801094a <_dtoa_r+0x622>
 80107e8:	07e2      	lsls	r2, r4, #31
 80107ea:	d505      	bpl.n	80107f8 <_dtoa_r+0x4d0>
 80107ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80107f0:	f7ef ff22 	bl	8000638 <__aeabi_dmul>
 80107f4:	3601      	adds	r6, #1
 80107f6:	2301      	movs	r3, #1
 80107f8:	1064      	asrs	r4, r4, #1
 80107fa:	3508      	adds	r5, #8
 80107fc:	e762      	b.n	80106c4 <_dtoa_r+0x39c>
 80107fe:	2602      	movs	r6, #2
 8010800:	e765      	b.n	80106ce <_dtoa_r+0x3a6>
 8010802:	9c03      	ldr	r4, [sp, #12]
 8010804:	46b8      	mov	r8, r7
 8010806:	e784      	b.n	8010712 <_dtoa_r+0x3ea>
 8010808:	4b27      	ldr	r3, [pc, #156]	@ (80108a8 <_dtoa_r+0x580>)
 801080a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801080c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010810:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010814:	4454      	add	r4, sl
 8010816:	2900      	cmp	r1, #0
 8010818:	d054      	beq.n	80108c4 <_dtoa_r+0x59c>
 801081a:	4929      	ldr	r1, [pc, #164]	@ (80108c0 <_dtoa_r+0x598>)
 801081c:	2000      	movs	r0, #0
 801081e:	f7f0 f835 	bl	800088c <__aeabi_ddiv>
 8010822:	4633      	mov	r3, r6
 8010824:	462a      	mov	r2, r5
 8010826:	f7ef fd4f 	bl	80002c8 <__aeabi_dsub>
 801082a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801082e:	4656      	mov	r6, sl
 8010830:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010834:	f7f0 f9b0 	bl	8000b98 <__aeabi_d2iz>
 8010838:	4605      	mov	r5, r0
 801083a:	f7ef fe93 	bl	8000564 <__aeabi_i2d>
 801083e:	4602      	mov	r2, r0
 8010840:	460b      	mov	r3, r1
 8010842:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010846:	f7ef fd3f 	bl	80002c8 <__aeabi_dsub>
 801084a:	3530      	adds	r5, #48	@ 0x30
 801084c:	4602      	mov	r2, r0
 801084e:	460b      	mov	r3, r1
 8010850:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010854:	f806 5b01 	strb.w	r5, [r6], #1
 8010858:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801085c:	f7f0 f95e 	bl	8000b1c <__aeabi_dcmplt>
 8010860:	2800      	cmp	r0, #0
 8010862:	d172      	bne.n	801094a <_dtoa_r+0x622>
 8010864:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010868:	4911      	ldr	r1, [pc, #68]	@ (80108b0 <_dtoa_r+0x588>)
 801086a:	2000      	movs	r0, #0
 801086c:	f7ef fd2c 	bl	80002c8 <__aeabi_dsub>
 8010870:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010874:	f7f0 f952 	bl	8000b1c <__aeabi_dcmplt>
 8010878:	2800      	cmp	r0, #0
 801087a:	f040 80b4 	bne.w	80109e6 <_dtoa_r+0x6be>
 801087e:	42a6      	cmp	r6, r4
 8010880:	f43f af70 	beq.w	8010764 <_dtoa_r+0x43c>
 8010884:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010888:	4b0a      	ldr	r3, [pc, #40]	@ (80108b4 <_dtoa_r+0x58c>)
 801088a:	2200      	movs	r2, #0
 801088c:	f7ef fed4 	bl	8000638 <__aeabi_dmul>
 8010890:	4b08      	ldr	r3, [pc, #32]	@ (80108b4 <_dtoa_r+0x58c>)
 8010892:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010896:	2200      	movs	r2, #0
 8010898:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801089c:	f7ef fecc 	bl	8000638 <__aeabi_dmul>
 80108a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80108a4:	e7c4      	b.n	8010830 <_dtoa_r+0x508>
 80108a6:	bf00      	nop
 80108a8:	08015e18 	.word	0x08015e18
 80108ac:	08015df0 	.word	0x08015df0
 80108b0:	3ff00000 	.word	0x3ff00000
 80108b4:	40240000 	.word	0x40240000
 80108b8:	401c0000 	.word	0x401c0000
 80108bc:	40140000 	.word	0x40140000
 80108c0:	3fe00000 	.word	0x3fe00000
 80108c4:	4631      	mov	r1, r6
 80108c6:	4628      	mov	r0, r5
 80108c8:	f7ef feb6 	bl	8000638 <__aeabi_dmul>
 80108cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80108d0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80108d2:	4656      	mov	r6, sl
 80108d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80108d8:	f7f0 f95e 	bl	8000b98 <__aeabi_d2iz>
 80108dc:	4605      	mov	r5, r0
 80108de:	f7ef fe41 	bl	8000564 <__aeabi_i2d>
 80108e2:	4602      	mov	r2, r0
 80108e4:	460b      	mov	r3, r1
 80108e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80108ea:	f7ef fced 	bl	80002c8 <__aeabi_dsub>
 80108ee:	3530      	adds	r5, #48	@ 0x30
 80108f0:	f806 5b01 	strb.w	r5, [r6], #1
 80108f4:	4602      	mov	r2, r0
 80108f6:	460b      	mov	r3, r1
 80108f8:	42a6      	cmp	r6, r4
 80108fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80108fe:	f04f 0200 	mov.w	r2, #0
 8010902:	d124      	bne.n	801094e <_dtoa_r+0x626>
 8010904:	4baf      	ldr	r3, [pc, #700]	@ (8010bc4 <_dtoa_r+0x89c>)
 8010906:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801090a:	f7ef fcdf 	bl	80002cc <__adddf3>
 801090e:	4602      	mov	r2, r0
 8010910:	460b      	mov	r3, r1
 8010912:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010916:	f7f0 f91f 	bl	8000b58 <__aeabi_dcmpgt>
 801091a:	2800      	cmp	r0, #0
 801091c:	d163      	bne.n	80109e6 <_dtoa_r+0x6be>
 801091e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010922:	49a8      	ldr	r1, [pc, #672]	@ (8010bc4 <_dtoa_r+0x89c>)
 8010924:	2000      	movs	r0, #0
 8010926:	f7ef fccf 	bl	80002c8 <__aeabi_dsub>
 801092a:	4602      	mov	r2, r0
 801092c:	460b      	mov	r3, r1
 801092e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010932:	f7f0 f8f3 	bl	8000b1c <__aeabi_dcmplt>
 8010936:	2800      	cmp	r0, #0
 8010938:	f43f af14 	beq.w	8010764 <_dtoa_r+0x43c>
 801093c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801093e:	1e73      	subs	r3, r6, #1
 8010940:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010942:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010946:	2b30      	cmp	r3, #48	@ 0x30
 8010948:	d0f8      	beq.n	801093c <_dtoa_r+0x614>
 801094a:	4647      	mov	r7, r8
 801094c:	e03b      	b.n	80109c6 <_dtoa_r+0x69e>
 801094e:	4b9e      	ldr	r3, [pc, #632]	@ (8010bc8 <_dtoa_r+0x8a0>)
 8010950:	f7ef fe72 	bl	8000638 <__aeabi_dmul>
 8010954:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010958:	e7bc      	b.n	80108d4 <_dtoa_r+0x5ac>
 801095a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801095e:	4656      	mov	r6, sl
 8010960:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010964:	4620      	mov	r0, r4
 8010966:	4629      	mov	r1, r5
 8010968:	f7ef ff90 	bl	800088c <__aeabi_ddiv>
 801096c:	f7f0 f914 	bl	8000b98 <__aeabi_d2iz>
 8010970:	4680      	mov	r8, r0
 8010972:	f7ef fdf7 	bl	8000564 <__aeabi_i2d>
 8010976:	e9dd 2300 	ldrd	r2, r3, [sp]
 801097a:	f7ef fe5d 	bl	8000638 <__aeabi_dmul>
 801097e:	4602      	mov	r2, r0
 8010980:	460b      	mov	r3, r1
 8010982:	4620      	mov	r0, r4
 8010984:	4629      	mov	r1, r5
 8010986:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801098a:	f7ef fc9d 	bl	80002c8 <__aeabi_dsub>
 801098e:	f806 4b01 	strb.w	r4, [r6], #1
 8010992:	9d03      	ldr	r5, [sp, #12]
 8010994:	eba6 040a 	sub.w	r4, r6, sl
 8010998:	42a5      	cmp	r5, r4
 801099a:	4602      	mov	r2, r0
 801099c:	460b      	mov	r3, r1
 801099e:	d133      	bne.n	8010a08 <_dtoa_r+0x6e0>
 80109a0:	f7ef fc94 	bl	80002cc <__adddf3>
 80109a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109a8:	4604      	mov	r4, r0
 80109aa:	460d      	mov	r5, r1
 80109ac:	f7f0 f8d4 	bl	8000b58 <__aeabi_dcmpgt>
 80109b0:	b9c0      	cbnz	r0, 80109e4 <_dtoa_r+0x6bc>
 80109b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109b6:	4620      	mov	r0, r4
 80109b8:	4629      	mov	r1, r5
 80109ba:	f7f0 f8a5 	bl	8000b08 <__aeabi_dcmpeq>
 80109be:	b110      	cbz	r0, 80109c6 <_dtoa_r+0x69e>
 80109c0:	f018 0f01 	tst.w	r8, #1
 80109c4:	d10e      	bne.n	80109e4 <_dtoa_r+0x6bc>
 80109c6:	9902      	ldr	r1, [sp, #8]
 80109c8:	4648      	mov	r0, r9
 80109ca:	f001 fbb5 	bl	8012138 <_Bfree>
 80109ce:	2300      	movs	r3, #0
 80109d0:	7033      	strb	r3, [r6, #0]
 80109d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80109d4:	3701      	adds	r7, #1
 80109d6:	601f      	str	r7, [r3, #0]
 80109d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80109da:	2b00      	cmp	r3, #0
 80109dc:	f000 824b 	beq.w	8010e76 <_dtoa_r+0xb4e>
 80109e0:	601e      	str	r6, [r3, #0]
 80109e2:	e248      	b.n	8010e76 <_dtoa_r+0xb4e>
 80109e4:	46b8      	mov	r8, r7
 80109e6:	4633      	mov	r3, r6
 80109e8:	461e      	mov	r6, r3
 80109ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80109ee:	2a39      	cmp	r2, #57	@ 0x39
 80109f0:	d106      	bne.n	8010a00 <_dtoa_r+0x6d8>
 80109f2:	459a      	cmp	sl, r3
 80109f4:	d1f8      	bne.n	80109e8 <_dtoa_r+0x6c0>
 80109f6:	2230      	movs	r2, #48	@ 0x30
 80109f8:	f108 0801 	add.w	r8, r8, #1
 80109fc:	f88a 2000 	strb.w	r2, [sl]
 8010a00:	781a      	ldrb	r2, [r3, #0]
 8010a02:	3201      	adds	r2, #1
 8010a04:	701a      	strb	r2, [r3, #0]
 8010a06:	e7a0      	b.n	801094a <_dtoa_r+0x622>
 8010a08:	4b6f      	ldr	r3, [pc, #444]	@ (8010bc8 <_dtoa_r+0x8a0>)
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	f7ef fe14 	bl	8000638 <__aeabi_dmul>
 8010a10:	2200      	movs	r2, #0
 8010a12:	2300      	movs	r3, #0
 8010a14:	4604      	mov	r4, r0
 8010a16:	460d      	mov	r5, r1
 8010a18:	f7f0 f876 	bl	8000b08 <__aeabi_dcmpeq>
 8010a1c:	2800      	cmp	r0, #0
 8010a1e:	d09f      	beq.n	8010960 <_dtoa_r+0x638>
 8010a20:	e7d1      	b.n	80109c6 <_dtoa_r+0x69e>
 8010a22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a24:	2a00      	cmp	r2, #0
 8010a26:	f000 80ea 	beq.w	8010bfe <_dtoa_r+0x8d6>
 8010a2a:	9a07      	ldr	r2, [sp, #28]
 8010a2c:	2a01      	cmp	r2, #1
 8010a2e:	f300 80cd 	bgt.w	8010bcc <_dtoa_r+0x8a4>
 8010a32:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010a34:	2a00      	cmp	r2, #0
 8010a36:	f000 80c1 	beq.w	8010bbc <_dtoa_r+0x894>
 8010a3a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010a3e:	9c08      	ldr	r4, [sp, #32]
 8010a40:	9e00      	ldr	r6, [sp, #0]
 8010a42:	9a00      	ldr	r2, [sp, #0]
 8010a44:	441a      	add	r2, r3
 8010a46:	9200      	str	r2, [sp, #0]
 8010a48:	9a06      	ldr	r2, [sp, #24]
 8010a4a:	2101      	movs	r1, #1
 8010a4c:	441a      	add	r2, r3
 8010a4e:	4648      	mov	r0, r9
 8010a50:	9206      	str	r2, [sp, #24]
 8010a52:	f001 fc6f 	bl	8012334 <__i2b>
 8010a56:	4605      	mov	r5, r0
 8010a58:	b166      	cbz	r6, 8010a74 <_dtoa_r+0x74c>
 8010a5a:	9b06      	ldr	r3, [sp, #24]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	dd09      	ble.n	8010a74 <_dtoa_r+0x74c>
 8010a60:	42b3      	cmp	r3, r6
 8010a62:	9a00      	ldr	r2, [sp, #0]
 8010a64:	bfa8      	it	ge
 8010a66:	4633      	movge	r3, r6
 8010a68:	1ad2      	subs	r2, r2, r3
 8010a6a:	9200      	str	r2, [sp, #0]
 8010a6c:	9a06      	ldr	r2, [sp, #24]
 8010a6e:	1af6      	subs	r6, r6, r3
 8010a70:	1ad3      	subs	r3, r2, r3
 8010a72:	9306      	str	r3, [sp, #24]
 8010a74:	9b08      	ldr	r3, [sp, #32]
 8010a76:	b30b      	cbz	r3, 8010abc <_dtoa_r+0x794>
 8010a78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	f000 80c6 	beq.w	8010c0c <_dtoa_r+0x8e4>
 8010a80:	2c00      	cmp	r4, #0
 8010a82:	f000 80c0 	beq.w	8010c06 <_dtoa_r+0x8de>
 8010a86:	4629      	mov	r1, r5
 8010a88:	4622      	mov	r2, r4
 8010a8a:	4648      	mov	r0, r9
 8010a8c:	f001 fd0a 	bl	80124a4 <__pow5mult>
 8010a90:	9a02      	ldr	r2, [sp, #8]
 8010a92:	4601      	mov	r1, r0
 8010a94:	4605      	mov	r5, r0
 8010a96:	4648      	mov	r0, r9
 8010a98:	f001 fc62 	bl	8012360 <__multiply>
 8010a9c:	9902      	ldr	r1, [sp, #8]
 8010a9e:	4680      	mov	r8, r0
 8010aa0:	4648      	mov	r0, r9
 8010aa2:	f001 fb49 	bl	8012138 <_Bfree>
 8010aa6:	9b08      	ldr	r3, [sp, #32]
 8010aa8:	1b1b      	subs	r3, r3, r4
 8010aaa:	9308      	str	r3, [sp, #32]
 8010aac:	f000 80b1 	beq.w	8010c12 <_dtoa_r+0x8ea>
 8010ab0:	9a08      	ldr	r2, [sp, #32]
 8010ab2:	4641      	mov	r1, r8
 8010ab4:	4648      	mov	r0, r9
 8010ab6:	f001 fcf5 	bl	80124a4 <__pow5mult>
 8010aba:	9002      	str	r0, [sp, #8]
 8010abc:	2101      	movs	r1, #1
 8010abe:	4648      	mov	r0, r9
 8010ac0:	f001 fc38 	bl	8012334 <__i2b>
 8010ac4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ac6:	4604      	mov	r4, r0
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	f000 81d8 	beq.w	8010e7e <_dtoa_r+0xb56>
 8010ace:	461a      	mov	r2, r3
 8010ad0:	4601      	mov	r1, r0
 8010ad2:	4648      	mov	r0, r9
 8010ad4:	f001 fce6 	bl	80124a4 <__pow5mult>
 8010ad8:	9b07      	ldr	r3, [sp, #28]
 8010ada:	2b01      	cmp	r3, #1
 8010adc:	4604      	mov	r4, r0
 8010ade:	f300 809f 	bgt.w	8010c20 <_dtoa_r+0x8f8>
 8010ae2:	9b04      	ldr	r3, [sp, #16]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	f040 8097 	bne.w	8010c18 <_dtoa_r+0x8f0>
 8010aea:	9b05      	ldr	r3, [sp, #20]
 8010aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	f040 8093 	bne.w	8010c1c <_dtoa_r+0x8f4>
 8010af6:	9b05      	ldr	r3, [sp, #20]
 8010af8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010afc:	0d1b      	lsrs	r3, r3, #20
 8010afe:	051b      	lsls	r3, r3, #20
 8010b00:	b133      	cbz	r3, 8010b10 <_dtoa_r+0x7e8>
 8010b02:	9b00      	ldr	r3, [sp, #0]
 8010b04:	3301      	adds	r3, #1
 8010b06:	9300      	str	r3, [sp, #0]
 8010b08:	9b06      	ldr	r3, [sp, #24]
 8010b0a:	3301      	adds	r3, #1
 8010b0c:	9306      	str	r3, [sp, #24]
 8010b0e:	2301      	movs	r3, #1
 8010b10:	9308      	str	r3, [sp, #32]
 8010b12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	f000 81b8 	beq.w	8010e8a <_dtoa_r+0xb62>
 8010b1a:	6923      	ldr	r3, [r4, #16]
 8010b1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010b20:	6918      	ldr	r0, [r3, #16]
 8010b22:	f001 fbbb 	bl	801229c <__hi0bits>
 8010b26:	f1c0 0020 	rsb	r0, r0, #32
 8010b2a:	9b06      	ldr	r3, [sp, #24]
 8010b2c:	4418      	add	r0, r3
 8010b2e:	f010 001f 	ands.w	r0, r0, #31
 8010b32:	f000 8082 	beq.w	8010c3a <_dtoa_r+0x912>
 8010b36:	f1c0 0320 	rsb	r3, r0, #32
 8010b3a:	2b04      	cmp	r3, #4
 8010b3c:	dd73      	ble.n	8010c26 <_dtoa_r+0x8fe>
 8010b3e:	9b00      	ldr	r3, [sp, #0]
 8010b40:	f1c0 001c 	rsb	r0, r0, #28
 8010b44:	4403      	add	r3, r0
 8010b46:	9300      	str	r3, [sp, #0]
 8010b48:	9b06      	ldr	r3, [sp, #24]
 8010b4a:	4403      	add	r3, r0
 8010b4c:	4406      	add	r6, r0
 8010b4e:	9306      	str	r3, [sp, #24]
 8010b50:	9b00      	ldr	r3, [sp, #0]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	dd05      	ble.n	8010b62 <_dtoa_r+0x83a>
 8010b56:	9902      	ldr	r1, [sp, #8]
 8010b58:	461a      	mov	r2, r3
 8010b5a:	4648      	mov	r0, r9
 8010b5c:	f001 fcfc 	bl	8012558 <__lshift>
 8010b60:	9002      	str	r0, [sp, #8]
 8010b62:	9b06      	ldr	r3, [sp, #24]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	dd05      	ble.n	8010b74 <_dtoa_r+0x84c>
 8010b68:	4621      	mov	r1, r4
 8010b6a:	461a      	mov	r2, r3
 8010b6c:	4648      	mov	r0, r9
 8010b6e:	f001 fcf3 	bl	8012558 <__lshift>
 8010b72:	4604      	mov	r4, r0
 8010b74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d061      	beq.n	8010c3e <_dtoa_r+0x916>
 8010b7a:	9802      	ldr	r0, [sp, #8]
 8010b7c:	4621      	mov	r1, r4
 8010b7e:	f001 fd57 	bl	8012630 <__mcmp>
 8010b82:	2800      	cmp	r0, #0
 8010b84:	da5b      	bge.n	8010c3e <_dtoa_r+0x916>
 8010b86:	2300      	movs	r3, #0
 8010b88:	9902      	ldr	r1, [sp, #8]
 8010b8a:	220a      	movs	r2, #10
 8010b8c:	4648      	mov	r0, r9
 8010b8e:	f001 faf5 	bl	801217c <__multadd>
 8010b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b94:	9002      	str	r0, [sp, #8]
 8010b96:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	f000 8177 	beq.w	8010e8e <_dtoa_r+0xb66>
 8010ba0:	4629      	mov	r1, r5
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	220a      	movs	r2, #10
 8010ba6:	4648      	mov	r0, r9
 8010ba8:	f001 fae8 	bl	801217c <__multadd>
 8010bac:	f1bb 0f00 	cmp.w	fp, #0
 8010bb0:	4605      	mov	r5, r0
 8010bb2:	dc6f      	bgt.n	8010c94 <_dtoa_r+0x96c>
 8010bb4:	9b07      	ldr	r3, [sp, #28]
 8010bb6:	2b02      	cmp	r3, #2
 8010bb8:	dc49      	bgt.n	8010c4e <_dtoa_r+0x926>
 8010bba:	e06b      	b.n	8010c94 <_dtoa_r+0x96c>
 8010bbc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010bbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010bc2:	e73c      	b.n	8010a3e <_dtoa_r+0x716>
 8010bc4:	3fe00000 	.word	0x3fe00000
 8010bc8:	40240000 	.word	0x40240000
 8010bcc:	9b03      	ldr	r3, [sp, #12]
 8010bce:	1e5c      	subs	r4, r3, #1
 8010bd0:	9b08      	ldr	r3, [sp, #32]
 8010bd2:	42a3      	cmp	r3, r4
 8010bd4:	db09      	blt.n	8010bea <_dtoa_r+0x8c2>
 8010bd6:	1b1c      	subs	r4, r3, r4
 8010bd8:	9b03      	ldr	r3, [sp, #12]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	f6bf af30 	bge.w	8010a40 <_dtoa_r+0x718>
 8010be0:	9b00      	ldr	r3, [sp, #0]
 8010be2:	9a03      	ldr	r2, [sp, #12]
 8010be4:	1a9e      	subs	r6, r3, r2
 8010be6:	2300      	movs	r3, #0
 8010be8:	e72b      	b.n	8010a42 <_dtoa_r+0x71a>
 8010bea:	9b08      	ldr	r3, [sp, #32]
 8010bec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010bee:	9408      	str	r4, [sp, #32]
 8010bf0:	1ae3      	subs	r3, r4, r3
 8010bf2:	441a      	add	r2, r3
 8010bf4:	9e00      	ldr	r6, [sp, #0]
 8010bf6:	9b03      	ldr	r3, [sp, #12]
 8010bf8:	920d      	str	r2, [sp, #52]	@ 0x34
 8010bfa:	2400      	movs	r4, #0
 8010bfc:	e721      	b.n	8010a42 <_dtoa_r+0x71a>
 8010bfe:	9c08      	ldr	r4, [sp, #32]
 8010c00:	9e00      	ldr	r6, [sp, #0]
 8010c02:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010c04:	e728      	b.n	8010a58 <_dtoa_r+0x730>
 8010c06:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010c0a:	e751      	b.n	8010ab0 <_dtoa_r+0x788>
 8010c0c:	9a08      	ldr	r2, [sp, #32]
 8010c0e:	9902      	ldr	r1, [sp, #8]
 8010c10:	e750      	b.n	8010ab4 <_dtoa_r+0x78c>
 8010c12:	f8cd 8008 	str.w	r8, [sp, #8]
 8010c16:	e751      	b.n	8010abc <_dtoa_r+0x794>
 8010c18:	2300      	movs	r3, #0
 8010c1a:	e779      	b.n	8010b10 <_dtoa_r+0x7e8>
 8010c1c:	9b04      	ldr	r3, [sp, #16]
 8010c1e:	e777      	b.n	8010b10 <_dtoa_r+0x7e8>
 8010c20:	2300      	movs	r3, #0
 8010c22:	9308      	str	r3, [sp, #32]
 8010c24:	e779      	b.n	8010b1a <_dtoa_r+0x7f2>
 8010c26:	d093      	beq.n	8010b50 <_dtoa_r+0x828>
 8010c28:	9a00      	ldr	r2, [sp, #0]
 8010c2a:	331c      	adds	r3, #28
 8010c2c:	441a      	add	r2, r3
 8010c2e:	9200      	str	r2, [sp, #0]
 8010c30:	9a06      	ldr	r2, [sp, #24]
 8010c32:	441a      	add	r2, r3
 8010c34:	441e      	add	r6, r3
 8010c36:	9206      	str	r2, [sp, #24]
 8010c38:	e78a      	b.n	8010b50 <_dtoa_r+0x828>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	e7f4      	b.n	8010c28 <_dtoa_r+0x900>
 8010c3e:	9b03      	ldr	r3, [sp, #12]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	46b8      	mov	r8, r7
 8010c44:	dc20      	bgt.n	8010c88 <_dtoa_r+0x960>
 8010c46:	469b      	mov	fp, r3
 8010c48:	9b07      	ldr	r3, [sp, #28]
 8010c4a:	2b02      	cmp	r3, #2
 8010c4c:	dd1e      	ble.n	8010c8c <_dtoa_r+0x964>
 8010c4e:	f1bb 0f00 	cmp.w	fp, #0
 8010c52:	f47f adb1 	bne.w	80107b8 <_dtoa_r+0x490>
 8010c56:	4621      	mov	r1, r4
 8010c58:	465b      	mov	r3, fp
 8010c5a:	2205      	movs	r2, #5
 8010c5c:	4648      	mov	r0, r9
 8010c5e:	f001 fa8d 	bl	801217c <__multadd>
 8010c62:	4601      	mov	r1, r0
 8010c64:	4604      	mov	r4, r0
 8010c66:	9802      	ldr	r0, [sp, #8]
 8010c68:	f001 fce2 	bl	8012630 <__mcmp>
 8010c6c:	2800      	cmp	r0, #0
 8010c6e:	f77f ada3 	ble.w	80107b8 <_dtoa_r+0x490>
 8010c72:	4656      	mov	r6, sl
 8010c74:	2331      	movs	r3, #49	@ 0x31
 8010c76:	f806 3b01 	strb.w	r3, [r6], #1
 8010c7a:	f108 0801 	add.w	r8, r8, #1
 8010c7e:	e59f      	b.n	80107c0 <_dtoa_r+0x498>
 8010c80:	9c03      	ldr	r4, [sp, #12]
 8010c82:	46b8      	mov	r8, r7
 8010c84:	4625      	mov	r5, r4
 8010c86:	e7f4      	b.n	8010c72 <_dtoa_r+0x94a>
 8010c88:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010c8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	f000 8101 	beq.w	8010e96 <_dtoa_r+0xb6e>
 8010c94:	2e00      	cmp	r6, #0
 8010c96:	dd05      	ble.n	8010ca4 <_dtoa_r+0x97c>
 8010c98:	4629      	mov	r1, r5
 8010c9a:	4632      	mov	r2, r6
 8010c9c:	4648      	mov	r0, r9
 8010c9e:	f001 fc5b 	bl	8012558 <__lshift>
 8010ca2:	4605      	mov	r5, r0
 8010ca4:	9b08      	ldr	r3, [sp, #32]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d05c      	beq.n	8010d64 <_dtoa_r+0xa3c>
 8010caa:	6869      	ldr	r1, [r5, #4]
 8010cac:	4648      	mov	r0, r9
 8010cae:	f001 fa03 	bl	80120b8 <_Balloc>
 8010cb2:	4606      	mov	r6, r0
 8010cb4:	b928      	cbnz	r0, 8010cc2 <_dtoa_r+0x99a>
 8010cb6:	4b82      	ldr	r3, [pc, #520]	@ (8010ec0 <_dtoa_r+0xb98>)
 8010cb8:	4602      	mov	r2, r0
 8010cba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010cbe:	f7ff bb4a 	b.w	8010356 <_dtoa_r+0x2e>
 8010cc2:	692a      	ldr	r2, [r5, #16]
 8010cc4:	3202      	adds	r2, #2
 8010cc6:	0092      	lsls	r2, r2, #2
 8010cc8:	f105 010c 	add.w	r1, r5, #12
 8010ccc:	300c      	adds	r0, #12
 8010cce:	f7ff fa83 	bl	80101d8 <memcpy>
 8010cd2:	2201      	movs	r2, #1
 8010cd4:	4631      	mov	r1, r6
 8010cd6:	4648      	mov	r0, r9
 8010cd8:	f001 fc3e 	bl	8012558 <__lshift>
 8010cdc:	f10a 0301 	add.w	r3, sl, #1
 8010ce0:	9300      	str	r3, [sp, #0]
 8010ce2:	eb0a 030b 	add.w	r3, sl, fp
 8010ce6:	9308      	str	r3, [sp, #32]
 8010ce8:	9b04      	ldr	r3, [sp, #16]
 8010cea:	f003 0301 	and.w	r3, r3, #1
 8010cee:	462f      	mov	r7, r5
 8010cf0:	9306      	str	r3, [sp, #24]
 8010cf2:	4605      	mov	r5, r0
 8010cf4:	9b00      	ldr	r3, [sp, #0]
 8010cf6:	9802      	ldr	r0, [sp, #8]
 8010cf8:	4621      	mov	r1, r4
 8010cfa:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8010cfe:	f7ff fa89 	bl	8010214 <quorem>
 8010d02:	4603      	mov	r3, r0
 8010d04:	3330      	adds	r3, #48	@ 0x30
 8010d06:	9003      	str	r0, [sp, #12]
 8010d08:	4639      	mov	r1, r7
 8010d0a:	9802      	ldr	r0, [sp, #8]
 8010d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d0e:	f001 fc8f 	bl	8012630 <__mcmp>
 8010d12:	462a      	mov	r2, r5
 8010d14:	9004      	str	r0, [sp, #16]
 8010d16:	4621      	mov	r1, r4
 8010d18:	4648      	mov	r0, r9
 8010d1a:	f001 fca5 	bl	8012668 <__mdiff>
 8010d1e:	68c2      	ldr	r2, [r0, #12]
 8010d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d22:	4606      	mov	r6, r0
 8010d24:	bb02      	cbnz	r2, 8010d68 <_dtoa_r+0xa40>
 8010d26:	4601      	mov	r1, r0
 8010d28:	9802      	ldr	r0, [sp, #8]
 8010d2a:	f001 fc81 	bl	8012630 <__mcmp>
 8010d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d30:	4602      	mov	r2, r0
 8010d32:	4631      	mov	r1, r6
 8010d34:	4648      	mov	r0, r9
 8010d36:	920c      	str	r2, [sp, #48]	@ 0x30
 8010d38:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d3a:	f001 f9fd 	bl	8012138 <_Bfree>
 8010d3e:	9b07      	ldr	r3, [sp, #28]
 8010d40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010d42:	9e00      	ldr	r6, [sp, #0]
 8010d44:	ea42 0103 	orr.w	r1, r2, r3
 8010d48:	9b06      	ldr	r3, [sp, #24]
 8010d4a:	4319      	orrs	r1, r3
 8010d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d4e:	d10d      	bne.n	8010d6c <_dtoa_r+0xa44>
 8010d50:	2b39      	cmp	r3, #57	@ 0x39
 8010d52:	d027      	beq.n	8010da4 <_dtoa_r+0xa7c>
 8010d54:	9a04      	ldr	r2, [sp, #16]
 8010d56:	2a00      	cmp	r2, #0
 8010d58:	dd01      	ble.n	8010d5e <_dtoa_r+0xa36>
 8010d5a:	9b03      	ldr	r3, [sp, #12]
 8010d5c:	3331      	adds	r3, #49	@ 0x31
 8010d5e:	f88b 3000 	strb.w	r3, [fp]
 8010d62:	e52e      	b.n	80107c2 <_dtoa_r+0x49a>
 8010d64:	4628      	mov	r0, r5
 8010d66:	e7b9      	b.n	8010cdc <_dtoa_r+0x9b4>
 8010d68:	2201      	movs	r2, #1
 8010d6a:	e7e2      	b.n	8010d32 <_dtoa_r+0xa0a>
 8010d6c:	9904      	ldr	r1, [sp, #16]
 8010d6e:	2900      	cmp	r1, #0
 8010d70:	db04      	blt.n	8010d7c <_dtoa_r+0xa54>
 8010d72:	9807      	ldr	r0, [sp, #28]
 8010d74:	4301      	orrs	r1, r0
 8010d76:	9806      	ldr	r0, [sp, #24]
 8010d78:	4301      	orrs	r1, r0
 8010d7a:	d120      	bne.n	8010dbe <_dtoa_r+0xa96>
 8010d7c:	2a00      	cmp	r2, #0
 8010d7e:	ddee      	ble.n	8010d5e <_dtoa_r+0xa36>
 8010d80:	9902      	ldr	r1, [sp, #8]
 8010d82:	9300      	str	r3, [sp, #0]
 8010d84:	2201      	movs	r2, #1
 8010d86:	4648      	mov	r0, r9
 8010d88:	f001 fbe6 	bl	8012558 <__lshift>
 8010d8c:	4621      	mov	r1, r4
 8010d8e:	9002      	str	r0, [sp, #8]
 8010d90:	f001 fc4e 	bl	8012630 <__mcmp>
 8010d94:	2800      	cmp	r0, #0
 8010d96:	9b00      	ldr	r3, [sp, #0]
 8010d98:	dc02      	bgt.n	8010da0 <_dtoa_r+0xa78>
 8010d9a:	d1e0      	bne.n	8010d5e <_dtoa_r+0xa36>
 8010d9c:	07da      	lsls	r2, r3, #31
 8010d9e:	d5de      	bpl.n	8010d5e <_dtoa_r+0xa36>
 8010da0:	2b39      	cmp	r3, #57	@ 0x39
 8010da2:	d1da      	bne.n	8010d5a <_dtoa_r+0xa32>
 8010da4:	2339      	movs	r3, #57	@ 0x39
 8010da6:	f88b 3000 	strb.w	r3, [fp]
 8010daa:	4633      	mov	r3, r6
 8010dac:	461e      	mov	r6, r3
 8010dae:	3b01      	subs	r3, #1
 8010db0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010db4:	2a39      	cmp	r2, #57	@ 0x39
 8010db6:	d04e      	beq.n	8010e56 <_dtoa_r+0xb2e>
 8010db8:	3201      	adds	r2, #1
 8010dba:	701a      	strb	r2, [r3, #0]
 8010dbc:	e501      	b.n	80107c2 <_dtoa_r+0x49a>
 8010dbe:	2a00      	cmp	r2, #0
 8010dc0:	dd03      	ble.n	8010dca <_dtoa_r+0xaa2>
 8010dc2:	2b39      	cmp	r3, #57	@ 0x39
 8010dc4:	d0ee      	beq.n	8010da4 <_dtoa_r+0xa7c>
 8010dc6:	3301      	adds	r3, #1
 8010dc8:	e7c9      	b.n	8010d5e <_dtoa_r+0xa36>
 8010dca:	9a00      	ldr	r2, [sp, #0]
 8010dcc:	9908      	ldr	r1, [sp, #32]
 8010dce:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010dd2:	428a      	cmp	r2, r1
 8010dd4:	d028      	beq.n	8010e28 <_dtoa_r+0xb00>
 8010dd6:	9902      	ldr	r1, [sp, #8]
 8010dd8:	2300      	movs	r3, #0
 8010dda:	220a      	movs	r2, #10
 8010ddc:	4648      	mov	r0, r9
 8010dde:	f001 f9cd 	bl	801217c <__multadd>
 8010de2:	42af      	cmp	r7, r5
 8010de4:	9002      	str	r0, [sp, #8]
 8010de6:	f04f 0300 	mov.w	r3, #0
 8010dea:	f04f 020a 	mov.w	r2, #10
 8010dee:	4639      	mov	r1, r7
 8010df0:	4648      	mov	r0, r9
 8010df2:	d107      	bne.n	8010e04 <_dtoa_r+0xadc>
 8010df4:	f001 f9c2 	bl	801217c <__multadd>
 8010df8:	4607      	mov	r7, r0
 8010dfa:	4605      	mov	r5, r0
 8010dfc:	9b00      	ldr	r3, [sp, #0]
 8010dfe:	3301      	adds	r3, #1
 8010e00:	9300      	str	r3, [sp, #0]
 8010e02:	e777      	b.n	8010cf4 <_dtoa_r+0x9cc>
 8010e04:	f001 f9ba 	bl	801217c <__multadd>
 8010e08:	4629      	mov	r1, r5
 8010e0a:	4607      	mov	r7, r0
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	220a      	movs	r2, #10
 8010e10:	4648      	mov	r0, r9
 8010e12:	f001 f9b3 	bl	801217c <__multadd>
 8010e16:	4605      	mov	r5, r0
 8010e18:	e7f0      	b.n	8010dfc <_dtoa_r+0xad4>
 8010e1a:	f1bb 0f00 	cmp.w	fp, #0
 8010e1e:	bfcc      	ite	gt
 8010e20:	465e      	movgt	r6, fp
 8010e22:	2601      	movle	r6, #1
 8010e24:	4456      	add	r6, sl
 8010e26:	2700      	movs	r7, #0
 8010e28:	9902      	ldr	r1, [sp, #8]
 8010e2a:	9300      	str	r3, [sp, #0]
 8010e2c:	2201      	movs	r2, #1
 8010e2e:	4648      	mov	r0, r9
 8010e30:	f001 fb92 	bl	8012558 <__lshift>
 8010e34:	4621      	mov	r1, r4
 8010e36:	9002      	str	r0, [sp, #8]
 8010e38:	f001 fbfa 	bl	8012630 <__mcmp>
 8010e3c:	2800      	cmp	r0, #0
 8010e3e:	dcb4      	bgt.n	8010daa <_dtoa_r+0xa82>
 8010e40:	d102      	bne.n	8010e48 <_dtoa_r+0xb20>
 8010e42:	9b00      	ldr	r3, [sp, #0]
 8010e44:	07db      	lsls	r3, r3, #31
 8010e46:	d4b0      	bmi.n	8010daa <_dtoa_r+0xa82>
 8010e48:	4633      	mov	r3, r6
 8010e4a:	461e      	mov	r6, r3
 8010e4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010e50:	2a30      	cmp	r2, #48	@ 0x30
 8010e52:	d0fa      	beq.n	8010e4a <_dtoa_r+0xb22>
 8010e54:	e4b5      	b.n	80107c2 <_dtoa_r+0x49a>
 8010e56:	459a      	cmp	sl, r3
 8010e58:	d1a8      	bne.n	8010dac <_dtoa_r+0xa84>
 8010e5a:	2331      	movs	r3, #49	@ 0x31
 8010e5c:	f108 0801 	add.w	r8, r8, #1
 8010e60:	f88a 3000 	strb.w	r3, [sl]
 8010e64:	e4ad      	b.n	80107c2 <_dtoa_r+0x49a>
 8010e66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010e68:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8010ec4 <_dtoa_r+0xb9c>
 8010e6c:	b11b      	cbz	r3, 8010e76 <_dtoa_r+0xb4e>
 8010e6e:	f10a 0308 	add.w	r3, sl, #8
 8010e72:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010e74:	6013      	str	r3, [r2, #0]
 8010e76:	4650      	mov	r0, sl
 8010e78:	b017      	add	sp, #92	@ 0x5c
 8010e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e7e:	9b07      	ldr	r3, [sp, #28]
 8010e80:	2b01      	cmp	r3, #1
 8010e82:	f77f ae2e 	ble.w	8010ae2 <_dtoa_r+0x7ba>
 8010e86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010e88:	9308      	str	r3, [sp, #32]
 8010e8a:	2001      	movs	r0, #1
 8010e8c:	e64d      	b.n	8010b2a <_dtoa_r+0x802>
 8010e8e:	f1bb 0f00 	cmp.w	fp, #0
 8010e92:	f77f aed9 	ble.w	8010c48 <_dtoa_r+0x920>
 8010e96:	4656      	mov	r6, sl
 8010e98:	9802      	ldr	r0, [sp, #8]
 8010e9a:	4621      	mov	r1, r4
 8010e9c:	f7ff f9ba 	bl	8010214 <quorem>
 8010ea0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8010ea4:	f806 3b01 	strb.w	r3, [r6], #1
 8010ea8:	eba6 020a 	sub.w	r2, r6, sl
 8010eac:	4593      	cmp	fp, r2
 8010eae:	ddb4      	ble.n	8010e1a <_dtoa_r+0xaf2>
 8010eb0:	9902      	ldr	r1, [sp, #8]
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	220a      	movs	r2, #10
 8010eb6:	4648      	mov	r0, r9
 8010eb8:	f001 f960 	bl	801217c <__multadd>
 8010ebc:	9002      	str	r0, [sp, #8]
 8010ebe:	e7eb      	b.n	8010e98 <_dtoa_r+0xb70>
 8010ec0:	08015b59 	.word	0x08015b59
 8010ec4:	08015add 	.word	0x08015add

08010ec8 <_free_r>:
 8010ec8:	b538      	push	{r3, r4, r5, lr}
 8010eca:	4605      	mov	r5, r0
 8010ecc:	2900      	cmp	r1, #0
 8010ece:	d041      	beq.n	8010f54 <_free_r+0x8c>
 8010ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ed4:	1f0c      	subs	r4, r1, #4
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	bfb8      	it	lt
 8010eda:	18e4      	addlt	r4, r4, r3
 8010edc:	f7fe f8ce 	bl	800f07c <__malloc_lock>
 8010ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8010f58 <_free_r+0x90>)
 8010ee2:	6813      	ldr	r3, [r2, #0]
 8010ee4:	b933      	cbnz	r3, 8010ef4 <_free_r+0x2c>
 8010ee6:	6063      	str	r3, [r4, #4]
 8010ee8:	6014      	str	r4, [r2, #0]
 8010eea:	4628      	mov	r0, r5
 8010eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ef0:	f7fe b8ca 	b.w	800f088 <__malloc_unlock>
 8010ef4:	42a3      	cmp	r3, r4
 8010ef6:	d908      	bls.n	8010f0a <_free_r+0x42>
 8010ef8:	6820      	ldr	r0, [r4, #0]
 8010efa:	1821      	adds	r1, r4, r0
 8010efc:	428b      	cmp	r3, r1
 8010efe:	bf01      	itttt	eq
 8010f00:	6819      	ldreq	r1, [r3, #0]
 8010f02:	685b      	ldreq	r3, [r3, #4]
 8010f04:	1809      	addeq	r1, r1, r0
 8010f06:	6021      	streq	r1, [r4, #0]
 8010f08:	e7ed      	b.n	8010ee6 <_free_r+0x1e>
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	685b      	ldr	r3, [r3, #4]
 8010f0e:	b10b      	cbz	r3, 8010f14 <_free_r+0x4c>
 8010f10:	42a3      	cmp	r3, r4
 8010f12:	d9fa      	bls.n	8010f0a <_free_r+0x42>
 8010f14:	6811      	ldr	r1, [r2, #0]
 8010f16:	1850      	adds	r0, r2, r1
 8010f18:	42a0      	cmp	r0, r4
 8010f1a:	d10b      	bne.n	8010f34 <_free_r+0x6c>
 8010f1c:	6820      	ldr	r0, [r4, #0]
 8010f1e:	4401      	add	r1, r0
 8010f20:	1850      	adds	r0, r2, r1
 8010f22:	4283      	cmp	r3, r0
 8010f24:	6011      	str	r1, [r2, #0]
 8010f26:	d1e0      	bne.n	8010eea <_free_r+0x22>
 8010f28:	6818      	ldr	r0, [r3, #0]
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	6053      	str	r3, [r2, #4]
 8010f2e:	4408      	add	r0, r1
 8010f30:	6010      	str	r0, [r2, #0]
 8010f32:	e7da      	b.n	8010eea <_free_r+0x22>
 8010f34:	d902      	bls.n	8010f3c <_free_r+0x74>
 8010f36:	230c      	movs	r3, #12
 8010f38:	602b      	str	r3, [r5, #0]
 8010f3a:	e7d6      	b.n	8010eea <_free_r+0x22>
 8010f3c:	6820      	ldr	r0, [r4, #0]
 8010f3e:	1821      	adds	r1, r4, r0
 8010f40:	428b      	cmp	r3, r1
 8010f42:	bf04      	itt	eq
 8010f44:	6819      	ldreq	r1, [r3, #0]
 8010f46:	685b      	ldreq	r3, [r3, #4]
 8010f48:	6063      	str	r3, [r4, #4]
 8010f4a:	bf04      	itt	eq
 8010f4c:	1809      	addeq	r1, r1, r0
 8010f4e:	6021      	streq	r1, [r4, #0]
 8010f50:	6054      	str	r4, [r2, #4]
 8010f52:	e7ca      	b.n	8010eea <_free_r+0x22>
 8010f54:	bd38      	pop	{r3, r4, r5, pc}
 8010f56:	bf00      	nop
 8010f58:	20001860 	.word	0x20001860

08010f5c <rshift>:
 8010f5c:	6903      	ldr	r3, [r0, #16]
 8010f5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010f62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f66:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010f6a:	f100 0414 	add.w	r4, r0, #20
 8010f6e:	dd45      	ble.n	8010ffc <rshift+0xa0>
 8010f70:	f011 011f 	ands.w	r1, r1, #31
 8010f74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010f78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010f7c:	d10c      	bne.n	8010f98 <rshift+0x3c>
 8010f7e:	f100 0710 	add.w	r7, r0, #16
 8010f82:	4629      	mov	r1, r5
 8010f84:	42b1      	cmp	r1, r6
 8010f86:	d334      	bcc.n	8010ff2 <rshift+0x96>
 8010f88:	1a9b      	subs	r3, r3, r2
 8010f8a:	009b      	lsls	r3, r3, #2
 8010f8c:	1eea      	subs	r2, r5, #3
 8010f8e:	4296      	cmp	r6, r2
 8010f90:	bf38      	it	cc
 8010f92:	2300      	movcc	r3, #0
 8010f94:	4423      	add	r3, r4
 8010f96:	e015      	b.n	8010fc4 <rshift+0x68>
 8010f98:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010f9c:	f1c1 0820 	rsb	r8, r1, #32
 8010fa0:	40cf      	lsrs	r7, r1
 8010fa2:	f105 0e04 	add.w	lr, r5, #4
 8010fa6:	46a1      	mov	r9, r4
 8010fa8:	4576      	cmp	r6, lr
 8010faa:	46f4      	mov	ip, lr
 8010fac:	d815      	bhi.n	8010fda <rshift+0x7e>
 8010fae:	1a9a      	subs	r2, r3, r2
 8010fb0:	0092      	lsls	r2, r2, #2
 8010fb2:	3a04      	subs	r2, #4
 8010fb4:	3501      	adds	r5, #1
 8010fb6:	42ae      	cmp	r6, r5
 8010fb8:	bf38      	it	cc
 8010fba:	2200      	movcc	r2, #0
 8010fbc:	18a3      	adds	r3, r4, r2
 8010fbe:	50a7      	str	r7, [r4, r2]
 8010fc0:	b107      	cbz	r7, 8010fc4 <rshift+0x68>
 8010fc2:	3304      	adds	r3, #4
 8010fc4:	1b1a      	subs	r2, r3, r4
 8010fc6:	42a3      	cmp	r3, r4
 8010fc8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010fcc:	bf08      	it	eq
 8010fce:	2300      	moveq	r3, #0
 8010fd0:	6102      	str	r2, [r0, #16]
 8010fd2:	bf08      	it	eq
 8010fd4:	6143      	streq	r3, [r0, #20]
 8010fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fda:	f8dc c000 	ldr.w	ip, [ip]
 8010fde:	fa0c fc08 	lsl.w	ip, ip, r8
 8010fe2:	ea4c 0707 	orr.w	r7, ip, r7
 8010fe6:	f849 7b04 	str.w	r7, [r9], #4
 8010fea:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010fee:	40cf      	lsrs	r7, r1
 8010ff0:	e7da      	b.n	8010fa8 <rshift+0x4c>
 8010ff2:	f851 cb04 	ldr.w	ip, [r1], #4
 8010ff6:	f847 cf04 	str.w	ip, [r7, #4]!
 8010ffa:	e7c3      	b.n	8010f84 <rshift+0x28>
 8010ffc:	4623      	mov	r3, r4
 8010ffe:	e7e1      	b.n	8010fc4 <rshift+0x68>

08011000 <__hexdig_fun>:
 8011000:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011004:	2b09      	cmp	r3, #9
 8011006:	d802      	bhi.n	801100e <__hexdig_fun+0xe>
 8011008:	3820      	subs	r0, #32
 801100a:	b2c0      	uxtb	r0, r0
 801100c:	4770      	bx	lr
 801100e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011012:	2b05      	cmp	r3, #5
 8011014:	d801      	bhi.n	801101a <__hexdig_fun+0x1a>
 8011016:	3847      	subs	r0, #71	@ 0x47
 8011018:	e7f7      	b.n	801100a <__hexdig_fun+0xa>
 801101a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801101e:	2b05      	cmp	r3, #5
 8011020:	d801      	bhi.n	8011026 <__hexdig_fun+0x26>
 8011022:	3827      	subs	r0, #39	@ 0x27
 8011024:	e7f1      	b.n	801100a <__hexdig_fun+0xa>
 8011026:	2000      	movs	r0, #0
 8011028:	4770      	bx	lr
	...

0801102c <__gethex>:
 801102c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011030:	b085      	sub	sp, #20
 8011032:	468a      	mov	sl, r1
 8011034:	9302      	str	r3, [sp, #8]
 8011036:	680b      	ldr	r3, [r1, #0]
 8011038:	9001      	str	r0, [sp, #4]
 801103a:	4690      	mov	r8, r2
 801103c:	1c9c      	adds	r4, r3, #2
 801103e:	46a1      	mov	r9, r4
 8011040:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011044:	2830      	cmp	r0, #48	@ 0x30
 8011046:	d0fa      	beq.n	801103e <__gethex+0x12>
 8011048:	eba9 0303 	sub.w	r3, r9, r3
 801104c:	f1a3 0b02 	sub.w	fp, r3, #2
 8011050:	f7ff ffd6 	bl	8011000 <__hexdig_fun>
 8011054:	4605      	mov	r5, r0
 8011056:	2800      	cmp	r0, #0
 8011058:	d168      	bne.n	801112c <__gethex+0x100>
 801105a:	49a0      	ldr	r1, [pc, #640]	@ (80112dc <__gethex+0x2b0>)
 801105c:	2201      	movs	r2, #1
 801105e:	4648      	mov	r0, r9
 8011060:	f7ff f80a 	bl	8010078 <strncmp>
 8011064:	4607      	mov	r7, r0
 8011066:	2800      	cmp	r0, #0
 8011068:	d167      	bne.n	801113a <__gethex+0x10e>
 801106a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801106e:	4626      	mov	r6, r4
 8011070:	f7ff ffc6 	bl	8011000 <__hexdig_fun>
 8011074:	2800      	cmp	r0, #0
 8011076:	d062      	beq.n	801113e <__gethex+0x112>
 8011078:	4623      	mov	r3, r4
 801107a:	7818      	ldrb	r0, [r3, #0]
 801107c:	2830      	cmp	r0, #48	@ 0x30
 801107e:	4699      	mov	r9, r3
 8011080:	f103 0301 	add.w	r3, r3, #1
 8011084:	d0f9      	beq.n	801107a <__gethex+0x4e>
 8011086:	f7ff ffbb 	bl	8011000 <__hexdig_fun>
 801108a:	fab0 f580 	clz	r5, r0
 801108e:	096d      	lsrs	r5, r5, #5
 8011090:	f04f 0b01 	mov.w	fp, #1
 8011094:	464a      	mov	r2, r9
 8011096:	4616      	mov	r6, r2
 8011098:	3201      	adds	r2, #1
 801109a:	7830      	ldrb	r0, [r6, #0]
 801109c:	f7ff ffb0 	bl	8011000 <__hexdig_fun>
 80110a0:	2800      	cmp	r0, #0
 80110a2:	d1f8      	bne.n	8011096 <__gethex+0x6a>
 80110a4:	498d      	ldr	r1, [pc, #564]	@ (80112dc <__gethex+0x2b0>)
 80110a6:	2201      	movs	r2, #1
 80110a8:	4630      	mov	r0, r6
 80110aa:	f7fe ffe5 	bl	8010078 <strncmp>
 80110ae:	2800      	cmp	r0, #0
 80110b0:	d13f      	bne.n	8011132 <__gethex+0x106>
 80110b2:	b944      	cbnz	r4, 80110c6 <__gethex+0x9a>
 80110b4:	1c74      	adds	r4, r6, #1
 80110b6:	4622      	mov	r2, r4
 80110b8:	4616      	mov	r6, r2
 80110ba:	3201      	adds	r2, #1
 80110bc:	7830      	ldrb	r0, [r6, #0]
 80110be:	f7ff ff9f 	bl	8011000 <__hexdig_fun>
 80110c2:	2800      	cmp	r0, #0
 80110c4:	d1f8      	bne.n	80110b8 <__gethex+0x8c>
 80110c6:	1ba4      	subs	r4, r4, r6
 80110c8:	00a7      	lsls	r7, r4, #2
 80110ca:	7833      	ldrb	r3, [r6, #0]
 80110cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80110d0:	2b50      	cmp	r3, #80	@ 0x50
 80110d2:	d13e      	bne.n	8011152 <__gethex+0x126>
 80110d4:	7873      	ldrb	r3, [r6, #1]
 80110d6:	2b2b      	cmp	r3, #43	@ 0x2b
 80110d8:	d033      	beq.n	8011142 <__gethex+0x116>
 80110da:	2b2d      	cmp	r3, #45	@ 0x2d
 80110dc:	d034      	beq.n	8011148 <__gethex+0x11c>
 80110de:	1c71      	adds	r1, r6, #1
 80110e0:	2400      	movs	r4, #0
 80110e2:	7808      	ldrb	r0, [r1, #0]
 80110e4:	f7ff ff8c 	bl	8011000 <__hexdig_fun>
 80110e8:	1e43      	subs	r3, r0, #1
 80110ea:	b2db      	uxtb	r3, r3
 80110ec:	2b18      	cmp	r3, #24
 80110ee:	d830      	bhi.n	8011152 <__gethex+0x126>
 80110f0:	f1a0 0210 	sub.w	r2, r0, #16
 80110f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80110f8:	f7ff ff82 	bl	8011000 <__hexdig_fun>
 80110fc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8011100:	fa5f fc8c 	uxtb.w	ip, ip
 8011104:	f1bc 0f18 	cmp.w	ip, #24
 8011108:	f04f 030a 	mov.w	r3, #10
 801110c:	d91e      	bls.n	801114c <__gethex+0x120>
 801110e:	b104      	cbz	r4, 8011112 <__gethex+0xe6>
 8011110:	4252      	negs	r2, r2
 8011112:	4417      	add	r7, r2
 8011114:	f8ca 1000 	str.w	r1, [sl]
 8011118:	b1ed      	cbz	r5, 8011156 <__gethex+0x12a>
 801111a:	f1bb 0f00 	cmp.w	fp, #0
 801111e:	bf0c      	ite	eq
 8011120:	2506      	moveq	r5, #6
 8011122:	2500      	movne	r5, #0
 8011124:	4628      	mov	r0, r5
 8011126:	b005      	add	sp, #20
 8011128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801112c:	2500      	movs	r5, #0
 801112e:	462c      	mov	r4, r5
 8011130:	e7b0      	b.n	8011094 <__gethex+0x68>
 8011132:	2c00      	cmp	r4, #0
 8011134:	d1c7      	bne.n	80110c6 <__gethex+0x9a>
 8011136:	4627      	mov	r7, r4
 8011138:	e7c7      	b.n	80110ca <__gethex+0x9e>
 801113a:	464e      	mov	r6, r9
 801113c:	462f      	mov	r7, r5
 801113e:	2501      	movs	r5, #1
 8011140:	e7c3      	b.n	80110ca <__gethex+0x9e>
 8011142:	2400      	movs	r4, #0
 8011144:	1cb1      	adds	r1, r6, #2
 8011146:	e7cc      	b.n	80110e2 <__gethex+0xb6>
 8011148:	2401      	movs	r4, #1
 801114a:	e7fb      	b.n	8011144 <__gethex+0x118>
 801114c:	fb03 0002 	mla	r0, r3, r2, r0
 8011150:	e7ce      	b.n	80110f0 <__gethex+0xc4>
 8011152:	4631      	mov	r1, r6
 8011154:	e7de      	b.n	8011114 <__gethex+0xe8>
 8011156:	eba6 0309 	sub.w	r3, r6, r9
 801115a:	3b01      	subs	r3, #1
 801115c:	4629      	mov	r1, r5
 801115e:	2b07      	cmp	r3, #7
 8011160:	dc0a      	bgt.n	8011178 <__gethex+0x14c>
 8011162:	9801      	ldr	r0, [sp, #4]
 8011164:	f000 ffa8 	bl	80120b8 <_Balloc>
 8011168:	4604      	mov	r4, r0
 801116a:	b940      	cbnz	r0, 801117e <__gethex+0x152>
 801116c:	4b5c      	ldr	r3, [pc, #368]	@ (80112e0 <__gethex+0x2b4>)
 801116e:	4602      	mov	r2, r0
 8011170:	21e4      	movs	r1, #228	@ 0xe4
 8011172:	485c      	ldr	r0, [pc, #368]	@ (80112e4 <__gethex+0x2b8>)
 8011174:	f001 fd4a 	bl	8012c0c <__assert_func>
 8011178:	3101      	adds	r1, #1
 801117a:	105b      	asrs	r3, r3, #1
 801117c:	e7ef      	b.n	801115e <__gethex+0x132>
 801117e:	f100 0a14 	add.w	sl, r0, #20
 8011182:	2300      	movs	r3, #0
 8011184:	4655      	mov	r5, sl
 8011186:	469b      	mov	fp, r3
 8011188:	45b1      	cmp	r9, r6
 801118a:	d337      	bcc.n	80111fc <__gethex+0x1d0>
 801118c:	f845 bb04 	str.w	fp, [r5], #4
 8011190:	eba5 050a 	sub.w	r5, r5, sl
 8011194:	10ad      	asrs	r5, r5, #2
 8011196:	6125      	str	r5, [r4, #16]
 8011198:	4658      	mov	r0, fp
 801119a:	f001 f87f 	bl	801229c <__hi0bits>
 801119e:	016d      	lsls	r5, r5, #5
 80111a0:	f8d8 6000 	ldr.w	r6, [r8]
 80111a4:	1a2d      	subs	r5, r5, r0
 80111a6:	42b5      	cmp	r5, r6
 80111a8:	dd54      	ble.n	8011254 <__gethex+0x228>
 80111aa:	1bad      	subs	r5, r5, r6
 80111ac:	4629      	mov	r1, r5
 80111ae:	4620      	mov	r0, r4
 80111b0:	f001 fc0b 	bl	80129ca <__any_on>
 80111b4:	4681      	mov	r9, r0
 80111b6:	b178      	cbz	r0, 80111d8 <__gethex+0x1ac>
 80111b8:	1e6b      	subs	r3, r5, #1
 80111ba:	1159      	asrs	r1, r3, #5
 80111bc:	f003 021f 	and.w	r2, r3, #31
 80111c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80111c4:	f04f 0901 	mov.w	r9, #1
 80111c8:	fa09 f202 	lsl.w	r2, r9, r2
 80111cc:	420a      	tst	r2, r1
 80111ce:	d003      	beq.n	80111d8 <__gethex+0x1ac>
 80111d0:	454b      	cmp	r3, r9
 80111d2:	dc36      	bgt.n	8011242 <__gethex+0x216>
 80111d4:	f04f 0902 	mov.w	r9, #2
 80111d8:	4629      	mov	r1, r5
 80111da:	4620      	mov	r0, r4
 80111dc:	f7ff febe 	bl	8010f5c <rshift>
 80111e0:	442f      	add	r7, r5
 80111e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80111e6:	42bb      	cmp	r3, r7
 80111e8:	da42      	bge.n	8011270 <__gethex+0x244>
 80111ea:	9801      	ldr	r0, [sp, #4]
 80111ec:	4621      	mov	r1, r4
 80111ee:	f000 ffa3 	bl	8012138 <_Bfree>
 80111f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80111f4:	2300      	movs	r3, #0
 80111f6:	6013      	str	r3, [r2, #0]
 80111f8:	25a3      	movs	r5, #163	@ 0xa3
 80111fa:	e793      	b.n	8011124 <__gethex+0xf8>
 80111fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011200:	2a2e      	cmp	r2, #46	@ 0x2e
 8011202:	d012      	beq.n	801122a <__gethex+0x1fe>
 8011204:	2b20      	cmp	r3, #32
 8011206:	d104      	bne.n	8011212 <__gethex+0x1e6>
 8011208:	f845 bb04 	str.w	fp, [r5], #4
 801120c:	f04f 0b00 	mov.w	fp, #0
 8011210:	465b      	mov	r3, fp
 8011212:	7830      	ldrb	r0, [r6, #0]
 8011214:	9303      	str	r3, [sp, #12]
 8011216:	f7ff fef3 	bl	8011000 <__hexdig_fun>
 801121a:	9b03      	ldr	r3, [sp, #12]
 801121c:	f000 000f 	and.w	r0, r0, #15
 8011220:	4098      	lsls	r0, r3
 8011222:	ea4b 0b00 	orr.w	fp, fp, r0
 8011226:	3304      	adds	r3, #4
 8011228:	e7ae      	b.n	8011188 <__gethex+0x15c>
 801122a:	45b1      	cmp	r9, r6
 801122c:	d8ea      	bhi.n	8011204 <__gethex+0x1d8>
 801122e:	492b      	ldr	r1, [pc, #172]	@ (80112dc <__gethex+0x2b0>)
 8011230:	9303      	str	r3, [sp, #12]
 8011232:	2201      	movs	r2, #1
 8011234:	4630      	mov	r0, r6
 8011236:	f7fe ff1f 	bl	8010078 <strncmp>
 801123a:	9b03      	ldr	r3, [sp, #12]
 801123c:	2800      	cmp	r0, #0
 801123e:	d1e1      	bne.n	8011204 <__gethex+0x1d8>
 8011240:	e7a2      	b.n	8011188 <__gethex+0x15c>
 8011242:	1ea9      	subs	r1, r5, #2
 8011244:	4620      	mov	r0, r4
 8011246:	f001 fbc0 	bl	80129ca <__any_on>
 801124a:	2800      	cmp	r0, #0
 801124c:	d0c2      	beq.n	80111d4 <__gethex+0x1a8>
 801124e:	f04f 0903 	mov.w	r9, #3
 8011252:	e7c1      	b.n	80111d8 <__gethex+0x1ac>
 8011254:	da09      	bge.n	801126a <__gethex+0x23e>
 8011256:	1b75      	subs	r5, r6, r5
 8011258:	4621      	mov	r1, r4
 801125a:	9801      	ldr	r0, [sp, #4]
 801125c:	462a      	mov	r2, r5
 801125e:	f001 f97b 	bl	8012558 <__lshift>
 8011262:	1b7f      	subs	r7, r7, r5
 8011264:	4604      	mov	r4, r0
 8011266:	f100 0a14 	add.w	sl, r0, #20
 801126a:	f04f 0900 	mov.w	r9, #0
 801126e:	e7b8      	b.n	80111e2 <__gethex+0x1b6>
 8011270:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011274:	42bd      	cmp	r5, r7
 8011276:	dd6f      	ble.n	8011358 <__gethex+0x32c>
 8011278:	1bed      	subs	r5, r5, r7
 801127a:	42ae      	cmp	r6, r5
 801127c:	dc34      	bgt.n	80112e8 <__gethex+0x2bc>
 801127e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011282:	2b02      	cmp	r3, #2
 8011284:	d022      	beq.n	80112cc <__gethex+0x2a0>
 8011286:	2b03      	cmp	r3, #3
 8011288:	d024      	beq.n	80112d4 <__gethex+0x2a8>
 801128a:	2b01      	cmp	r3, #1
 801128c:	d115      	bne.n	80112ba <__gethex+0x28e>
 801128e:	42ae      	cmp	r6, r5
 8011290:	d113      	bne.n	80112ba <__gethex+0x28e>
 8011292:	2e01      	cmp	r6, #1
 8011294:	d10b      	bne.n	80112ae <__gethex+0x282>
 8011296:	9a02      	ldr	r2, [sp, #8]
 8011298:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801129c:	6013      	str	r3, [r2, #0]
 801129e:	2301      	movs	r3, #1
 80112a0:	6123      	str	r3, [r4, #16]
 80112a2:	f8ca 3000 	str.w	r3, [sl]
 80112a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80112a8:	2562      	movs	r5, #98	@ 0x62
 80112aa:	601c      	str	r4, [r3, #0]
 80112ac:	e73a      	b.n	8011124 <__gethex+0xf8>
 80112ae:	1e71      	subs	r1, r6, #1
 80112b0:	4620      	mov	r0, r4
 80112b2:	f001 fb8a 	bl	80129ca <__any_on>
 80112b6:	2800      	cmp	r0, #0
 80112b8:	d1ed      	bne.n	8011296 <__gethex+0x26a>
 80112ba:	9801      	ldr	r0, [sp, #4]
 80112bc:	4621      	mov	r1, r4
 80112be:	f000 ff3b 	bl	8012138 <_Bfree>
 80112c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80112c4:	2300      	movs	r3, #0
 80112c6:	6013      	str	r3, [r2, #0]
 80112c8:	2550      	movs	r5, #80	@ 0x50
 80112ca:	e72b      	b.n	8011124 <__gethex+0xf8>
 80112cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d1f3      	bne.n	80112ba <__gethex+0x28e>
 80112d2:	e7e0      	b.n	8011296 <__gethex+0x26a>
 80112d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d1dd      	bne.n	8011296 <__gethex+0x26a>
 80112da:	e7ee      	b.n	80112ba <__gethex+0x28e>
 80112dc:	08015ad3 	.word	0x08015ad3
 80112e0:	08015b59 	.word	0x08015b59
 80112e4:	08015b6a 	.word	0x08015b6a
 80112e8:	1e6f      	subs	r7, r5, #1
 80112ea:	f1b9 0f00 	cmp.w	r9, #0
 80112ee:	d130      	bne.n	8011352 <__gethex+0x326>
 80112f0:	b127      	cbz	r7, 80112fc <__gethex+0x2d0>
 80112f2:	4639      	mov	r1, r7
 80112f4:	4620      	mov	r0, r4
 80112f6:	f001 fb68 	bl	80129ca <__any_on>
 80112fa:	4681      	mov	r9, r0
 80112fc:	117a      	asrs	r2, r7, #5
 80112fe:	2301      	movs	r3, #1
 8011300:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011304:	f007 071f 	and.w	r7, r7, #31
 8011308:	40bb      	lsls	r3, r7
 801130a:	4213      	tst	r3, r2
 801130c:	4629      	mov	r1, r5
 801130e:	4620      	mov	r0, r4
 8011310:	bf18      	it	ne
 8011312:	f049 0902 	orrne.w	r9, r9, #2
 8011316:	f7ff fe21 	bl	8010f5c <rshift>
 801131a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801131e:	1b76      	subs	r6, r6, r5
 8011320:	2502      	movs	r5, #2
 8011322:	f1b9 0f00 	cmp.w	r9, #0
 8011326:	d047      	beq.n	80113b8 <__gethex+0x38c>
 8011328:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801132c:	2b02      	cmp	r3, #2
 801132e:	d015      	beq.n	801135c <__gethex+0x330>
 8011330:	2b03      	cmp	r3, #3
 8011332:	d017      	beq.n	8011364 <__gethex+0x338>
 8011334:	2b01      	cmp	r3, #1
 8011336:	d109      	bne.n	801134c <__gethex+0x320>
 8011338:	f019 0f02 	tst.w	r9, #2
 801133c:	d006      	beq.n	801134c <__gethex+0x320>
 801133e:	f8da 3000 	ldr.w	r3, [sl]
 8011342:	ea49 0903 	orr.w	r9, r9, r3
 8011346:	f019 0f01 	tst.w	r9, #1
 801134a:	d10e      	bne.n	801136a <__gethex+0x33e>
 801134c:	f045 0510 	orr.w	r5, r5, #16
 8011350:	e032      	b.n	80113b8 <__gethex+0x38c>
 8011352:	f04f 0901 	mov.w	r9, #1
 8011356:	e7d1      	b.n	80112fc <__gethex+0x2d0>
 8011358:	2501      	movs	r5, #1
 801135a:	e7e2      	b.n	8011322 <__gethex+0x2f6>
 801135c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801135e:	f1c3 0301 	rsb	r3, r3, #1
 8011362:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011366:	2b00      	cmp	r3, #0
 8011368:	d0f0      	beq.n	801134c <__gethex+0x320>
 801136a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801136e:	f104 0314 	add.w	r3, r4, #20
 8011372:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011376:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801137a:	f04f 0c00 	mov.w	ip, #0
 801137e:	4618      	mov	r0, r3
 8011380:	f853 2b04 	ldr.w	r2, [r3], #4
 8011384:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8011388:	d01b      	beq.n	80113c2 <__gethex+0x396>
 801138a:	3201      	adds	r2, #1
 801138c:	6002      	str	r2, [r0, #0]
 801138e:	2d02      	cmp	r5, #2
 8011390:	f104 0314 	add.w	r3, r4, #20
 8011394:	d13c      	bne.n	8011410 <__gethex+0x3e4>
 8011396:	f8d8 2000 	ldr.w	r2, [r8]
 801139a:	3a01      	subs	r2, #1
 801139c:	42b2      	cmp	r2, r6
 801139e:	d109      	bne.n	80113b4 <__gethex+0x388>
 80113a0:	1171      	asrs	r1, r6, #5
 80113a2:	2201      	movs	r2, #1
 80113a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80113a8:	f006 061f 	and.w	r6, r6, #31
 80113ac:	fa02 f606 	lsl.w	r6, r2, r6
 80113b0:	421e      	tst	r6, r3
 80113b2:	d13a      	bne.n	801142a <__gethex+0x3fe>
 80113b4:	f045 0520 	orr.w	r5, r5, #32
 80113b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80113ba:	601c      	str	r4, [r3, #0]
 80113bc:	9b02      	ldr	r3, [sp, #8]
 80113be:	601f      	str	r7, [r3, #0]
 80113c0:	e6b0      	b.n	8011124 <__gethex+0xf8>
 80113c2:	4299      	cmp	r1, r3
 80113c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80113c8:	d8d9      	bhi.n	801137e <__gethex+0x352>
 80113ca:	68a3      	ldr	r3, [r4, #8]
 80113cc:	459b      	cmp	fp, r3
 80113ce:	db17      	blt.n	8011400 <__gethex+0x3d4>
 80113d0:	6861      	ldr	r1, [r4, #4]
 80113d2:	9801      	ldr	r0, [sp, #4]
 80113d4:	3101      	adds	r1, #1
 80113d6:	f000 fe6f 	bl	80120b8 <_Balloc>
 80113da:	4681      	mov	r9, r0
 80113dc:	b918      	cbnz	r0, 80113e6 <__gethex+0x3ba>
 80113de:	4b1a      	ldr	r3, [pc, #104]	@ (8011448 <__gethex+0x41c>)
 80113e0:	4602      	mov	r2, r0
 80113e2:	2184      	movs	r1, #132	@ 0x84
 80113e4:	e6c5      	b.n	8011172 <__gethex+0x146>
 80113e6:	6922      	ldr	r2, [r4, #16]
 80113e8:	3202      	adds	r2, #2
 80113ea:	f104 010c 	add.w	r1, r4, #12
 80113ee:	0092      	lsls	r2, r2, #2
 80113f0:	300c      	adds	r0, #12
 80113f2:	f7fe fef1 	bl	80101d8 <memcpy>
 80113f6:	4621      	mov	r1, r4
 80113f8:	9801      	ldr	r0, [sp, #4]
 80113fa:	f000 fe9d 	bl	8012138 <_Bfree>
 80113fe:	464c      	mov	r4, r9
 8011400:	6923      	ldr	r3, [r4, #16]
 8011402:	1c5a      	adds	r2, r3, #1
 8011404:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011408:	6122      	str	r2, [r4, #16]
 801140a:	2201      	movs	r2, #1
 801140c:	615a      	str	r2, [r3, #20]
 801140e:	e7be      	b.n	801138e <__gethex+0x362>
 8011410:	6922      	ldr	r2, [r4, #16]
 8011412:	455a      	cmp	r2, fp
 8011414:	dd0b      	ble.n	801142e <__gethex+0x402>
 8011416:	2101      	movs	r1, #1
 8011418:	4620      	mov	r0, r4
 801141a:	f7ff fd9f 	bl	8010f5c <rshift>
 801141e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011422:	3701      	adds	r7, #1
 8011424:	42bb      	cmp	r3, r7
 8011426:	f6ff aee0 	blt.w	80111ea <__gethex+0x1be>
 801142a:	2501      	movs	r5, #1
 801142c:	e7c2      	b.n	80113b4 <__gethex+0x388>
 801142e:	f016 061f 	ands.w	r6, r6, #31
 8011432:	d0fa      	beq.n	801142a <__gethex+0x3fe>
 8011434:	4453      	add	r3, sl
 8011436:	f1c6 0620 	rsb	r6, r6, #32
 801143a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801143e:	f000 ff2d 	bl	801229c <__hi0bits>
 8011442:	42b0      	cmp	r0, r6
 8011444:	dbe7      	blt.n	8011416 <__gethex+0x3ea>
 8011446:	e7f0      	b.n	801142a <__gethex+0x3fe>
 8011448:	08015b59 	.word	0x08015b59

0801144c <L_shift>:
 801144c:	f1c2 0208 	rsb	r2, r2, #8
 8011450:	0092      	lsls	r2, r2, #2
 8011452:	b570      	push	{r4, r5, r6, lr}
 8011454:	f1c2 0620 	rsb	r6, r2, #32
 8011458:	6843      	ldr	r3, [r0, #4]
 801145a:	6804      	ldr	r4, [r0, #0]
 801145c:	fa03 f506 	lsl.w	r5, r3, r6
 8011460:	432c      	orrs	r4, r5
 8011462:	40d3      	lsrs	r3, r2
 8011464:	6004      	str	r4, [r0, #0]
 8011466:	f840 3f04 	str.w	r3, [r0, #4]!
 801146a:	4288      	cmp	r0, r1
 801146c:	d3f4      	bcc.n	8011458 <L_shift+0xc>
 801146e:	bd70      	pop	{r4, r5, r6, pc}

08011470 <__match>:
 8011470:	b530      	push	{r4, r5, lr}
 8011472:	6803      	ldr	r3, [r0, #0]
 8011474:	3301      	adds	r3, #1
 8011476:	f811 4b01 	ldrb.w	r4, [r1], #1
 801147a:	b914      	cbnz	r4, 8011482 <__match+0x12>
 801147c:	6003      	str	r3, [r0, #0]
 801147e:	2001      	movs	r0, #1
 8011480:	bd30      	pop	{r4, r5, pc}
 8011482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011486:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801148a:	2d19      	cmp	r5, #25
 801148c:	bf98      	it	ls
 801148e:	3220      	addls	r2, #32
 8011490:	42a2      	cmp	r2, r4
 8011492:	d0f0      	beq.n	8011476 <__match+0x6>
 8011494:	2000      	movs	r0, #0
 8011496:	e7f3      	b.n	8011480 <__match+0x10>

08011498 <__hexnan>:
 8011498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801149c:	680b      	ldr	r3, [r1, #0]
 801149e:	6801      	ldr	r1, [r0, #0]
 80114a0:	115e      	asrs	r6, r3, #5
 80114a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80114a6:	f013 031f 	ands.w	r3, r3, #31
 80114aa:	b087      	sub	sp, #28
 80114ac:	bf18      	it	ne
 80114ae:	3604      	addne	r6, #4
 80114b0:	2500      	movs	r5, #0
 80114b2:	1f37      	subs	r7, r6, #4
 80114b4:	4682      	mov	sl, r0
 80114b6:	4690      	mov	r8, r2
 80114b8:	9301      	str	r3, [sp, #4]
 80114ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80114be:	46b9      	mov	r9, r7
 80114c0:	463c      	mov	r4, r7
 80114c2:	9502      	str	r5, [sp, #8]
 80114c4:	46ab      	mov	fp, r5
 80114c6:	784a      	ldrb	r2, [r1, #1]
 80114c8:	1c4b      	adds	r3, r1, #1
 80114ca:	9303      	str	r3, [sp, #12]
 80114cc:	b342      	cbz	r2, 8011520 <__hexnan+0x88>
 80114ce:	4610      	mov	r0, r2
 80114d0:	9105      	str	r1, [sp, #20]
 80114d2:	9204      	str	r2, [sp, #16]
 80114d4:	f7ff fd94 	bl	8011000 <__hexdig_fun>
 80114d8:	2800      	cmp	r0, #0
 80114da:	d151      	bne.n	8011580 <__hexnan+0xe8>
 80114dc:	9a04      	ldr	r2, [sp, #16]
 80114de:	9905      	ldr	r1, [sp, #20]
 80114e0:	2a20      	cmp	r2, #32
 80114e2:	d818      	bhi.n	8011516 <__hexnan+0x7e>
 80114e4:	9b02      	ldr	r3, [sp, #8]
 80114e6:	459b      	cmp	fp, r3
 80114e8:	dd13      	ble.n	8011512 <__hexnan+0x7a>
 80114ea:	454c      	cmp	r4, r9
 80114ec:	d206      	bcs.n	80114fc <__hexnan+0x64>
 80114ee:	2d07      	cmp	r5, #7
 80114f0:	dc04      	bgt.n	80114fc <__hexnan+0x64>
 80114f2:	462a      	mov	r2, r5
 80114f4:	4649      	mov	r1, r9
 80114f6:	4620      	mov	r0, r4
 80114f8:	f7ff ffa8 	bl	801144c <L_shift>
 80114fc:	4544      	cmp	r4, r8
 80114fe:	d952      	bls.n	80115a6 <__hexnan+0x10e>
 8011500:	2300      	movs	r3, #0
 8011502:	f1a4 0904 	sub.w	r9, r4, #4
 8011506:	f844 3c04 	str.w	r3, [r4, #-4]
 801150a:	f8cd b008 	str.w	fp, [sp, #8]
 801150e:	464c      	mov	r4, r9
 8011510:	461d      	mov	r5, r3
 8011512:	9903      	ldr	r1, [sp, #12]
 8011514:	e7d7      	b.n	80114c6 <__hexnan+0x2e>
 8011516:	2a29      	cmp	r2, #41	@ 0x29
 8011518:	d157      	bne.n	80115ca <__hexnan+0x132>
 801151a:	3102      	adds	r1, #2
 801151c:	f8ca 1000 	str.w	r1, [sl]
 8011520:	f1bb 0f00 	cmp.w	fp, #0
 8011524:	d051      	beq.n	80115ca <__hexnan+0x132>
 8011526:	454c      	cmp	r4, r9
 8011528:	d206      	bcs.n	8011538 <__hexnan+0xa0>
 801152a:	2d07      	cmp	r5, #7
 801152c:	dc04      	bgt.n	8011538 <__hexnan+0xa0>
 801152e:	462a      	mov	r2, r5
 8011530:	4649      	mov	r1, r9
 8011532:	4620      	mov	r0, r4
 8011534:	f7ff ff8a 	bl	801144c <L_shift>
 8011538:	4544      	cmp	r4, r8
 801153a:	d936      	bls.n	80115aa <__hexnan+0x112>
 801153c:	f1a8 0204 	sub.w	r2, r8, #4
 8011540:	4623      	mov	r3, r4
 8011542:	f853 1b04 	ldr.w	r1, [r3], #4
 8011546:	f842 1f04 	str.w	r1, [r2, #4]!
 801154a:	429f      	cmp	r7, r3
 801154c:	d2f9      	bcs.n	8011542 <__hexnan+0xaa>
 801154e:	1b3b      	subs	r3, r7, r4
 8011550:	f023 0303 	bic.w	r3, r3, #3
 8011554:	3304      	adds	r3, #4
 8011556:	3401      	adds	r4, #1
 8011558:	3e03      	subs	r6, #3
 801155a:	42b4      	cmp	r4, r6
 801155c:	bf88      	it	hi
 801155e:	2304      	movhi	r3, #4
 8011560:	4443      	add	r3, r8
 8011562:	2200      	movs	r2, #0
 8011564:	f843 2b04 	str.w	r2, [r3], #4
 8011568:	429f      	cmp	r7, r3
 801156a:	d2fb      	bcs.n	8011564 <__hexnan+0xcc>
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	b91b      	cbnz	r3, 8011578 <__hexnan+0xe0>
 8011570:	4547      	cmp	r7, r8
 8011572:	d128      	bne.n	80115c6 <__hexnan+0x12e>
 8011574:	2301      	movs	r3, #1
 8011576:	603b      	str	r3, [r7, #0]
 8011578:	2005      	movs	r0, #5
 801157a:	b007      	add	sp, #28
 801157c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011580:	3501      	adds	r5, #1
 8011582:	2d08      	cmp	r5, #8
 8011584:	f10b 0b01 	add.w	fp, fp, #1
 8011588:	dd06      	ble.n	8011598 <__hexnan+0x100>
 801158a:	4544      	cmp	r4, r8
 801158c:	d9c1      	bls.n	8011512 <__hexnan+0x7a>
 801158e:	2300      	movs	r3, #0
 8011590:	f844 3c04 	str.w	r3, [r4, #-4]
 8011594:	2501      	movs	r5, #1
 8011596:	3c04      	subs	r4, #4
 8011598:	6822      	ldr	r2, [r4, #0]
 801159a:	f000 000f 	and.w	r0, r0, #15
 801159e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80115a2:	6020      	str	r0, [r4, #0]
 80115a4:	e7b5      	b.n	8011512 <__hexnan+0x7a>
 80115a6:	2508      	movs	r5, #8
 80115a8:	e7b3      	b.n	8011512 <__hexnan+0x7a>
 80115aa:	9b01      	ldr	r3, [sp, #4]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d0dd      	beq.n	801156c <__hexnan+0xd4>
 80115b0:	f1c3 0320 	rsb	r3, r3, #32
 80115b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80115b8:	40da      	lsrs	r2, r3
 80115ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80115be:	4013      	ands	r3, r2
 80115c0:	f846 3c04 	str.w	r3, [r6, #-4]
 80115c4:	e7d2      	b.n	801156c <__hexnan+0xd4>
 80115c6:	3f04      	subs	r7, #4
 80115c8:	e7d0      	b.n	801156c <__hexnan+0xd4>
 80115ca:	2004      	movs	r0, #4
 80115cc:	e7d5      	b.n	801157a <__hexnan+0xe2>

080115ce <__ssputs_r>:
 80115ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115d2:	688e      	ldr	r6, [r1, #8]
 80115d4:	461f      	mov	r7, r3
 80115d6:	42be      	cmp	r6, r7
 80115d8:	680b      	ldr	r3, [r1, #0]
 80115da:	4682      	mov	sl, r0
 80115dc:	460c      	mov	r4, r1
 80115de:	4690      	mov	r8, r2
 80115e0:	d82d      	bhi.n	801163e <__ssputs_r+0x70>
 80115e2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80115e6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80115ea:	d026      	beq.n	801163a <__ssputs_r+0x6c>
 80115ec:	6965      	ldr	r5, [r4, #20]
 80115ee:	6909      	ldr	r1, [r1, #16]
 80115f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80115f4:	eba3 0901 	sub.w	r9, r3, r1
 80115f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80115fc:	1c7b      	adds	r3, r7, #1
 80115fe:	444b      	add	r3, r9
 8011600:	106d      	asrs	r5, r5, #1
 8011602:	429d      	cmp	r5, r3
 8011604:	bf38      	it	cc
 8011606:	461d      	movcc	r5, r3
 8011608:	0553      	lsls	r3, r2, #21
 801160a:	d527      	bpl.n	801165c <__ssputs_r+0x8e>
 801160c:	4629      	mov	r1, r5
 801160e:	f7fd f8e5 	bl	800e7dc <_malloc_r>
 8011612:	4606      	mov	r6, r0
 8011614:	b360      	cbz	r0, 8011670 <__ssputs_r+0xa2>
 8011616:	6921      	ldr	r1, [r4, #16]
 8011618:	464a      	mov	r2, r9
 801161a:	f7fe fddd 	bl	80101d8 <memcpy>
 801161e:	89a3      	ldrh	r3, [r4, #12]
 8011620:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011628:	81a3      	strh	r3, [r4, #12]
 801162a:	6126      	str	r6, [r4, #16]
 801162c:	6165      	str	r5, [r4, #20]
 801162e:	444e      	add	r6, r9
 8011630:	eba5 0509 	sub.w	r5, r5, r9
 8011634:	6026      	str	r6, [r4, #0]
 8011636:	60a5      	str	r5, [r4, #8]
 8011638:	463e      	mov	r6, r7
 801163a:	42be      	cmp	r6, r7
 801163c:	d900      	bls.n	8011640 <__ssputs_r+0x72>
 801163e:	463e      	mov	r6, r7
 8011640:	6820      	ldr	r0, [r4, #0]
 8011642:	4632      	mov	r2, r6
 8011644:	4641      	mov	r1, r8
 8011646:	f001 fac6 	bl	8012bd6 <memmove>
 801164a:	68a3      	ldr	r3, [r4, #8]
 801164c:	1b9b      	subs	r3, r3, r6
 801164e:	60a3      	str	r3, [r4, #8]
 8011650:	6823      	ldr	r3, [r4, #0]
 8011652:	4433      	add	r3, r6
 8011654:	6023      	str	r3, [r4, #0]
 8011656:	2000      	movs	r0, #0
 8011658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801165c:	462a      	mov	r2, r5
 801165e:	f001 fa0f 	bl	8012a80 <_realloc_r>
 8011662:	4606      	mov	r6, r0
 8011664:	2800      	cmp	r0, #0
 8011666:	d1e0      	bne.n	801162a <__ssputs_r+0x5c>
 8011668:	6921      	ldr	r1, [r4, #16]
 801166a:	4650      	mov	r0, sl
 801166c:	f7ff fc2c 	bl	8010ec8 <_free_r>
 8011670:	230c      	movs	r3, #12
 8011672:	f8ca 3000 	str.w	r3, [sl]
 8011676:	89a3      	ldrh	r3, [r4, #12]
 8011678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801167c:	81a3      	strh	r3, [r4, #12]
 801167e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011682:	e7e9      	b.n	8011658 <__ssputs_r+0x8a>

08011684 <_svfiprintf_r>:
 8011684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011688:	4698      	mov	r8, r3
 801168a:	898b      	ldrh	r3, [r1, #12]
 801168c:	061b      	lsls	r3, r3, #24
 801168e:	b09d      	sub	sp, #116	@ 0x74
 8011690:	4607      	mov	r7, r0
 8011692:	460d      	mov	r5, r1
 8011694:	4614      	mov	r4, r2
 8011696:	d510      	bpl.n	80116ba <_svfiprintf_r+0x36>
 8011698:	690b      	ldr	r3, [r1, #16]
 801169a:	b973      	cbnz	r3, 80116ba <_svfiprintf_r+0x36>
 801169c:	2140      	movs	r1, #64	@ 0x40
 801169e:	f7fd f89d 	bl	800e7dc <_malloc_r>
 80116a2:	6028      	str	r0, [r5, #0]
 80116a4:	6128      	str	r0, [r5, #16]
 80116a6:	b930      	cbnz	r0, 80116b6 <_svfiprintf_r+0x32>
 80116a8:	230c      	movs	r3, #12
 80116aa:	603b      	str	r3, [r7, #0]
 80116ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80116b0:	b01d      	add	sp, #116	@ 0x74
 80116b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116b6:	2340      	movs	r3, #64	@ 0x40
 80116b8:	616b      	str	r3, [r5, #20]
 80116ba:	2300      	movs	r3, #0
 80116bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80116be:	2320      	movs	r3, #32
 80116c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80116c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80116c8:	2330      	movs	r3, #48	@ 0x30
 80116ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011868 <_svfiprintf_r+0x1e4>
 80116ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80116d2:	f04f 0901 	mov.w	r9, #1
 80116d6:	4623      	mov	r3, r4
 80116d8:	469a      	mov	sl, r3
 80116da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116de:	b10a      	cbz	r2, 80116e4 <_svfiprintf_r+0x60>
 80116e0:	2a25      	cmp	r2, #37	@ 0x25
 80116e2:	d1f9      	bne.n	80116d8 <_svfiprintf_r+0x54>
 80116e4:	ebba 0b04 	subs.w	fp, sl, r4
 80116e8:	d00b      	beq.n	8011702 <_svfiprintf_r+0x7e>
 80116ea:	465b      	mov	r3, fp
 80116ec:	4622      	mov	r2, r4
 80116ee:	4629      	mov	r1, r5
 80116f0:	4638      	mov	r0, r7
 80116f2:	f7ff ff6c 	bl	80115ce <__ssputs_r>
 80116f6:	3001      	adds	r0, #1
 80116f8:	f000 80a7 	beq.w	801184a <_svfiprintf_r+0x1c6>
 80116fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80116fe:	445a      	add	r2, fp
 8011700:	9209      	str	r2, [sp, #36]	@ 0x24
 8011702:	f89a 3000 	ldrb.w	r3, [sl]
 8011706:	2b00      	cmp	r3, #0
 8011708:	f000 809f 	beq.w	801184a <_svfiprintf_r+0x1c6>
 801170c:	2300      	movs	r3, #0
 801170e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011716:	f10a 0a01 	add.w	sl, sl, #1
 801171a:	9304      	str	r3, [sp, #16]
 801171c:	9307      	str	r3, [sp, #28]
 801171e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011722:	931a      	str	r3, [sp, #104]	@ 0x68
 8011724:	4654      	mov	r4, sl
 8011726:	2205      	movs	r2, #5
 8011728:	f814 1b01 	ldrb.w	r1, [r4], #1
 801172c:	484e      	ldr	r0, [pc, #312]	@ (8011868 <_svfiprintf_r+0x1e4>)
 801172e:	f7ee fd6f 	bl	8000210 <memchr>
 8011732:	9a04      	ldr	r2, [sp, #16]
 8011734:	b9d8      	cbnz	r0, 801176e <_svfiprintf_r+0xea>
 8011736:	06d0      	lsls	r0, r2, #27
 8011738:	bf44      	itt	mi
 801173a:	2320      	movmi	r3, #32
 801173c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011740:	0711      	lsls	r1, r2, #28
 8011742:	bf44      	itt	mi
 8011744:	232b      	movmi	r3, #43	@ 0x2b
 8011746:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801174a:	f89a 3000 	ldrb.w	r3, [sl]
 801174e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011750:	d015      	beq.n	801177e <_svfiprintf_r+0xfa>
 8011752:	9a07      	ldr	r2, [sp, #28]
 8011754:	4654      	mov	r4, sl
 8011756:	2000      	movs	r0, #0
 8011758:	f04f 0c0a 	mov.w	ip, #10
 801175c:	4621      	mov	r1, r4
 801175e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011762:	3b30      	subs	r3, #48	@ 0x30
 8011764:	2b09      	cmp	r3, #9
 8011766:	d94b      	bls.n	8011800 <_svfiprintf_r+0x17c>
 8011768:	b1b0      	cbz	r0, 8011798 <_svfiprintf_r+0x114>
 801176a:	9207      	str	r2, [sp, #28]
 801176c:	e014      	b.n	8011798 <_svfiprintf_r+0x114>
 801176e:	eba0 0308 	sub.w	r3, r0, r8
 8011772:	fa09 f303 	lsl.w	r3, r9, r3
 8011776:	4313      	orrs	r3, r2
 8011778:	9304      	str	r3, [sp, #16]
 801177a:	46a2      	mov	sl, r4
 801177c:	e7d2      	b.n	8011724 <_svfiprintf_r+0xa0>
 801177e:	9b03      	ldr	r3, [sp, #12]
 8011780:	1d19      	adds	r1, r3, #4
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	9103      	str	r1, [sp, #12]
 8011786:	2b00      	cmp	r3, #0
 8011788:	bfbb      	ittet	lt
 801178a:	425b      	neglt	r3, r3
 801178c:	f042 0202 	orrlt.w	r2, r2, #2
 8011790:	9307      	strge	r3, [sp, #28]
 8011792:	9307      	strlt	r3, [sp, #28]
 8011794:	bfb8      	it	lt
 8011796:	9204      	strlt	r2, [sp, #16]
 8011798:	7823      	ldrb	r3, [r4, #0]
 801179a:	2b2e      	cmp	r3, #46	@ 0x2e
 801179c:	d10a      	bne.n	80117b4 <_svfiprintf_r+0x130>
 801179e:	7863      	ldrb	r3, [r4, #1]
 80117a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80117a2:	d132      	bne.n	801180a <_svfiprintf_r+0x186>
 80117a4:	9b03      	ldr	r3, [sp, #12]
 80117a6:	1d1a      	adds	r2, r3, #4
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	9203      	str	r2, [sp, #12]
 80117ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80117b0:	3402      	adds	r4, #2
 80117b2:	9305      	str	r3, [sp, #20]
 80117b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011878 <_svfiprintf_r+0x1f4>
 80117b8:	7821      	ldrb	r1, [r4, #0]
 80117ba:	2203      	movs	r2, #3
 80117bc:	4650      	mov	r0, sl
 80117be:	f7ee fd27 	bl	8000210 <memchr>
 80117c2:	b138      	cbz	r0, 80117d4 <_svfiprintf_r+0x150>
 80117c4:	9b04      	ldr	r3, [sp, #16]
 80117c6:	eba0 000a 	sub.w	r0, r0, sl
 80117ca:	2240      	movs	r2, #64	@ 0x40
 80117cc:	4082      	lsls	r2, r0
 80117ce:	4313      	orrs	r3, r2
 80117d0:	3401      	adds	r4, #1
 80117d2:	9304      	str	r3, [sp, #16]
 80117d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117d8:	4824      	ldr	r0, [pc, #144]	@ (801186c <_svfiprintf_r+0x1e8>)
 80117da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80117de:	2206      	movs	r2, #6
 80117e0:	f7ee fd16 	bl	8000210 <memchr>
 80117e4:	2800      	cmp	r0, #0
 80117e6:	d036      	beq.n	8011856 <_svfiprintf_r+0x1d2>
 80117e8:	4b21      	ldr	r3, [pc, #132]	@ (8011870 <_svfiprintf_r+0x1ec>)
 80117ea:	bb1b      	cbnz	r3, 8011834 <_svfiprintf_r+0x1b0>
 80117ec:	9b03      	ldr	r3, [sp, #12]
 80117ee:	3307      	adds	r3, #7
 80117f0:	f023 0307 	bic.w	r3, r3, #7
 80117f4:	3308      	adds	r3, #8
 80117f6:	9303      	str	r3, [sp, #12]
 80117f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117fa:	4433      	add	r3, r6
 80117fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80117fe:	e76a      	b.n	80116d6 <_svfiprintf_r+0x52>
 8011800:	fb0c 3202 	mla	r2, ip, r2, r3
 8011804:	460c      	mov	r4, r1
 8011806:	2001      	movs	r0, #1
 8011808:	e7a8      	b.n	801175c <_svfiprintf_r+0xd8>
 801180a:	2300      	movs	r3, #0
 801180c:	3401      	adds	r4, #1
 801180e:	9305      	str	r3, [sp, #20]
 8011810:	4619      	mov	r1, r3
 8011812:	f04f 0c0a 	mov.w	ip, #10
 8011816:	4620      	mov	r0, r4
 8011818:	f810 2b01 	ldrb.w	r2, [r0], #1
 801181c:	3a30      	subs	r2, #48	@ 0x30
 801181e:	2a09      	cmp	r2, #9
 8011820:	d903      	bls.n	801182a <_svfiprintf_r+0x1a6>
 8011822:	2b00      	cmp	r3, #0
 8011824:	d0c6      	beq.n	80117b4 <_svfiprintf_r+0x130>
 8011826:	9105      	str	r1, [sp, #20]
 8011828:	e7c4      	b.n	80117b4 <_svfiprintf_r+0x130>
 801182a:	fb0c 2101 	mla	r1, ip, r1, r2
 801182e:	4604      	mov	r4, r0
 8011830:	2301      	movs	r3, #1
 8011832:	e7f0      	b.n	8011816 <_svfiprintf_r+0x192>
 8011834:	ab03      	add	r3, sp, #12
 8011836:	9300      	str	r3, [sp, #0]
 8011838:	462a      	mov	r2, r5
 801183a:	4b0e      	ldr	r3, [pc, #56]	@ (8011874 <_svfiprintf_r+0x1f0>)
 801183c:	a904      	add	r1, sp, #16
 801183e:	4638      	mov	r0, r7
 8011840:	f7fc fd80 	bl	800e344 <_printf_float>
 8011844:	1c42      	adds	r2, r0, #1
 8011846:	4606      	mov	r6, r0
 8011848:	d1d6      	bne.n	80117f8 <_svfiprintf_r+0x174>
 801184a:	89ab      	ldrh	r3, [r5, #12]
 801184c:	065b      	lsls	r3, r3, #25
 801184e:	f53f af2d 	bmi.w	80116ac <_svfiprintf_r+0x28>
 8011852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011854:	e72c      	b.n	80116b0 <_svfiprintf_r+0x2c>
 8011856:	ab03      	add	r3, sp, #12
 8011858:	9300      	str	r3, [sp, #0]
 801185a:	462a      	mov	r2, r5
 801185c:	4b05      	ldr	r3, [pc, #20]	@ (8011874 <_svfiprintf_r+0x1f0>)
 801185e:	a904      	add	r1, sp, #16
 8011860:	4638      	mov	r0, r7
 8011862:	f7fd f8a9 	bl	800e9b8 <_printf_i>
 8011866:	e7ed      	b.n	8011844 <_svfiprintf_r+0x1c0>
 8011868:	08015bca 	.word	0x08015bca
 801186c:	08015bd4 	.word	0x08015bd4
 8011870:	0800e345 	.word	0x0800e345
 8011874:	080115cf 	.word	0x080115cf
 8011878:	08015bd0 	.word	0x08015bd0

0801187c <_sungetc_r>:
 801187c:	b538      	push	{r3, r4, r5, lr}
 801187e:	1c4b      	adds	r3, r1, #1
 8011880:	4614      	mov	r4, r2
 8011882:	d103      	bne.n	801188c <_sungetc_r+0x10>
 8011884:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8011888:	4628      	mov	r0, r5
 801188a:	bd38      	pop	{r3, r4, r5, pc}
 801188c:	8993      	ldrh	r3, [r2, #12]
 801188e:	f023 0320 	bic.w	r3, r3, #32
 8011892:	8193      	strh	r3, [r2, #12]
 8011894:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011896:	6852      	ldr	r2, [r2, #4]
 8011898:	b2cd      	uxtb	r5, r1
 801189a:	b18b      	cbz	r3, 80118c0 <_sungetc_r+0x44>
 801189c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801189e:	4293      	cmp	r3, r2
 80118a0:	dd08      	ble.n	80118b4 <_sungetc_r+0x38>
 80118a2:	6823      	ldr	r3, [r4, #0]
 80118a4:	1e5a      	subs	r2, r3, #1
 80118a6:	6022      	str	r2, [r4, #0]
 80118a8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80118ac:	6863      	ldr	r3, [r4, #4]
 80118ae:	3301      	adds	r3, #1
 80118b0:	6063      	str	r3, [r4, #4]
 80118b2:	e7e9      	b.n	8011888 <_sungetc_r+0xc>
 80118b4:	4621      	mov	r1, r4
 80118b6:	f001 f8a9 	bl	8012a0c <__submore>
 80118ba:	2800      	cmp	r0, #0
 80118bc:	d0f1      	beq.n	80118a2 <_sungetc_r+0x26>
 80118be:	e7e1      	b.n	8011884 <_sungetc_r+0x8>
 80118c0:	6921      	ldr	r1, [r4, #16]
 80118c2:	6823      	ldr	r3, [r4, #0]
 80118c4:	b151      	cbz	r1, 80118dc <_sungetc_r+0x60>
 80118c6:	4299      	cmp	r1, r3
 80118c8:	d208      	bcs.n	80118dc <_sungetc_r+0x60>
 80118ca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80118ce:	42a9      	cmp	r1, r5
 80118d0:	d104      	bne.n	80118dc <_sungetc_r+0x60>
 80118d2:	3b01      	subs	r3, #1
 80118d4:	3201      	adds	r2, #1
 80118d6:	6023      	str	r3, [r4, #0]
 80118d8:	6062      	str	r2, [r4, #4]
 80118da:	e7d5      	b.n	8011888 <_sungetc_r+0xc>
 80118dc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80118e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80118e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80118e6:	2303      	movs	r3, #3
 80118e8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80118ea:	4623      	mov	r3, r4
 80118ec:	f803 5f46 	strb.w	r5, [r3, #70]!
 80118f0:	6023      	str	r3, [r4, #0]
 80118f2:	2301      	movs	r3, #1
 80118f4:	e7dc      	b.n	80118b0 <_sungetc_r+0x34>

080118f6 <__ssrefill_r>:
 80118f6:	b510      	push	{r4, lr}
 80118f8:	460c      	mov	r4, r1
 80118fa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80118fc:	b169      	cbz	r1, 801191a <__ssrefill_r+0x24>
 80118fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011902:	4299      	cmp	r1, r3
 8011904:	d001      	beq.n	801190a <__ssrefill_r+0x14>
 8011906:	f7ff fadf 	bl	8010ec8 <_free_r>
 801190a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801190c:	6063      	str	r3, [r4, #4]
 801190e:	2000      	movs	r0, #0
 8011910:	6360      	str	r0, [r4, #52]	@ 0x34
 8011912:	b113      	cbz	r3, 801191a <__ssrefill_r+0x24>
 8011914:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011916:	6023      	str	r3, [r4, #0]
 8011918:	bd10      	pop	{r4, pc}
 801191a:	6923      	ldr	r3, [r4, #16]
 801191c:	6023      	str	r3, [r4, #0]
 801191e:	2300      	movs	r3, #0
 8011920:	6063      	str	r3, [r4, #4]
 8011922:	89a3      	ldrh	r3, [r4, #12]
 8011924:	f043 0320 	orr.w	r3, r3, #32
 8011928:	81a3      	strh	r3, [r4, #12]
 801192a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801192e:	e7f3      	b.n	8011918 <__ssrefill_r+0x22>

08011930 <__ssvfiscanf_r>:
 8011930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011934:	460c      	mov	r4, r1
 8011936:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801193a:	2100      	movs	r1, #0
 801193c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011940:	49a6      	ldr	r1, [pc, #664]	@ (8011bdc <__ssvfiscanf_r+0x2ac>)
 8011942:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011944:	f10d 0804 	add.w	r8, sp, #4
 8011948:	49a5      	ldr	r1, [pc, #660]	@ (8011be0 <__ssvfiscanf_r+0x2b0>)
 801194a:	4fa6      	ldr	r7, [pc, #664]	@ (8011be4 <__ssvfiscanf_r+0x2b4>)
 801194c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011950:	4606      	mov	r6, r0
 8011952:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011954:	9300      	str	r3, [sp, #0]
 8011956:	f892 9000 	ldrb.w	r9, [r2]
 801195a:	f1b9 0f00 	cmp.w	r9, #0
 801195e:	f000 8158 	beq.w	8011c12 <__ssvfiscanf_r+0x2e2>
 8011962:	f817 3009 	ldrb.w	r3, [r7, r9]
 8011966:	f013 0308 	ands.w	r3, r3, #8
 801196a:	f102 0501 	add.w	r5, r2, #1
 801196e:	d019      	beq.n	80119a4 <__ssvfiscanf_r+0x74>
 8011970:	6863      	ldr	r3, [r4, #4]
 8011972:	2b00      	cmp	r3, #0
 8011974:	dd0f      	ble.n	8011996 <__ssvfiscanf_r+0x66>
 8011976:	6823      	ldr	r3, [r4, #0]
 8011978:	781a      	ldrb	r2, [r3, #0]
 801197a:	5cba      	ldrb	r2, [r7, r2]
 801197c:	0712      	lsls	r2, r2, #28
 801197e:	d401      	bmi.n	8011984 <__ssvfiscanf_r+0x54>
 8011980:	462a      	mov	r2, r5
 8011982:	e7e8      	b.n	8011956 <__ssvfiscanf_r+0x26>
 8011984:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011986:	3201      	adds	r2, #1
 8011988:	9245      	str	r2, [sp, #276]	@ 0x114
 801198a:	6862      	ldr	r2, [r4, #4]
 801198c:	3301      	adds	r3, #1
 801198e:	3a01      	subs	r2, #1
 8011990:	6062      	str	r2, [r4, #4]
 8011992:	6023      	str	r3, [r4, #0]
 8011994:	e7ec      	b.n	8011970 <__ssvfiscanf_r+0x40>
 8011996:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011998:	4621      	mov	r1, r4
 801199a:	4630      	mov	r0, r6
 801199c:	4798      	blx	r3
 801199e:	2800      	cmp	r0, #0
 80119a0:	d0e9      	beq.n	8011976 <__ssvfiscanf_r+0x46>
 80119a2:	e7ed      	b.n	8011980 <__ssvfiscanf_r+0x50>
 80119a4:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80119a8:	f040 8085 	bne.w	8011ab6 <__ssvfiscanf_r+0x186>
 80119ac:	9341      	str	r3, [sp, #260]	@ 0x104
 80119ae:	9343      	str	r3, [sp, #268]	@ 0x10c
 80119b0:	7853      	ldrb	r3, [r2, #1]
 80119b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80119b4:	bf02      	ittt	eq
 80119b6:	2310      	moveq	r3, #16
 80119b8:	1c95      	addeq	r5, r2, #2
 80119ba:	9341      	streq	r3, [sp, #260]	@ 0x104
 80119bc:	220a      	movs	r2, #10
 80119be:	46aa      	mov	sl, r5
 80119c0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80119c4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80119c8:	2b09      	cmp	r3, #9
 80119ca:	d91e      	bls.n	8011a0a <__ssvfiscanf_r+0xda>
 80119cc:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8011be8 <__ssvfiscanf_r+0x2b8>
 80119d0:	2203      	movs	r2, #3
 80119d2:	4658      	mov	r0, fp
 80119d4:	f7ee fc1c 	bl	8000210 <memchr>
 80119d8:	b138      	cbz	r0, 80119ea <__ssvfiscanf_r+0xba>
 80119da:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80119dc:	eba0 000b 	sub.w	r0, r0, fp
 80119e0:	2301      	movs	r3, #1
 80119e2:	4083      	lsls	r3, r0
 80119e4:	4313      	orrs	r3, r2
 80119e6:	9341      	str	r3, [sp, #260]	@ 0x104
 80119e8:	4655      	mov	r5, sl
 80119ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80119ee:	2b78      	cmp	r3, #120	@ 0x78
 80119f0:	d806      	bhi.n	8011a00 <__ssvfiscanf_r+0xd0>
 80119f2:	2b57      	cmp	r3, #87	@ 0x57
 80119f4:	d810      	bhi.n	8011a18 <__ssvfiscanf_r+0xe8>
 80119f6:	2b25      	cmp	r3, #37	@ 0x25
 80119f8:	d05d      	beq.n	8011ab6 <__ssvfiscanf_r+0x186>
 80119fa:	d857      	bhi.n	8011aac <__ssvfiscanf_r+0x17c>
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d075      	beq.n	8011aec <__ssvfiscanf_r+0x1bc>
 8011a00:	2303      	movs	r3, #3
 8011a02:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011a04:	230a      	movs	r3, #10
 8011a06:	9342      	str	r3, [sp, #264]	@ 0x108
 8011a08:	e088      	b.n	8011b1c <__ssvfiscanf_r+0x1ec>
 8011a0a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011a0c:	fb02 1103 	mla	r1, r2, r3, r1
 8011a10:	3930      	subs	r1, #48	@ 0x30
 8011a12:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011a14:	4655      	mov	r5, sl
 8011a16:	e7d2      	b.n	80119be <__ssvfiscanf_r+0x8e>
 8011a18:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011a1c:	2a20      	cmp	r2, #32
 8011a1e:	d8ef      	bhi.n	8011a00 <__ssvfiscanf_r+0xd0>
 8011a20:	a101      	add	r1, pc, #4	@ (adr r1, 8011a28 <__ssvfiscanf_r+0xf8>)
 8011a22:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011a26:	bf00      	nop
 8011a28:	08011afb 	.word	0x08011afb
 8011a2c:	08011a01 	.word	0x08011a01
 8011a30:	08011a01 	.word	0x08011a01
 8011a34:	08011b55 	.word	0x08011b55
 8011a38:	08011a01 	.word	0x08011a01
 8011a3c:	08011a01 	.word	0x08011a01
 8011a40:	08011a01 	.word	0x08011a01
 8011a44:	08011a01 	.word	0x08011a01
 8011a48:	08011a01 	.word	0x08011a01
 8011a4c:	08011a01 	.word	0x08011a01
 8011a50:	08011a01 	.word	0x08011a01
 8011a54:	08011b6b 	.word	0x08011b6b
 8011a58:	08011b51 	.word	0x08011b51
 8011a5c:	08011ab3 	.word	0x08011ab3
 8011a60:	08011ab3 	.word	0x08011ab3
 8011a64:	08011ab3 	.word	0x08011ab3
 8011a68:	08011a01 	.word	0x08011a01
 8011a6c:	08011b0d 	.word	0x08011b0d
 8011a70:	08011a01 	.word	0x08011a01
 8011a74:	08011a01 	.word	0x08011a01
 8011a78:	08011a01 	.word	0x08011a01
 8011a7c:	08011a01 	.word	0x08011a01
 8011a80:	08011b7b 	.word	0x08011b7b
 8011a84:	08011b15 	.word	0x08011b15
 8011a88:	08011af3 	.word	0x08011af3
 8011a8c:	08011a01 	.word	0x08011a01
 8011a90:	08011a01 	.word	0x08011a01
 8011a94:	08011b77 	.word	0x08011b77
 8011a98:	08011a01 	.word	0x08011a01
 8011a9c:	08011b51 	.word	0x08011b51
 8011aa0:	08011a01 	.word	0x08011a01
 8011aa4:	08011a01 	.word	0x08011a01
 8011aa8:	08011afb 	.word	0x08011afb
 8011aac:	3b45      	subs	r3, #69	@ 0x45
 8011aae:	2b02      	cmp	r3, #2
 8011ab0:	d8a6      	bhi.n	8011a00 <__ssvfiscanf_r+0xd0>
 8011ab2:	2305      	movs	r3, #5
 8011ab4:	e031      	b.n	8011b1a <__ssvfiscanf_r+0x1ea>
 8011ab6:	6863      	ldr	r3, [r4, #4]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	dd0d      	ble.n	8011ad8 <__ssvfiscanf_r+0x1a8>
 8011abc:	6823      	ldr	r3, [r4, #0]
 8011abe:	781a      	ldrb	r2, [r3, #0]
 8011ac0:	454a      	cmp	r2, r9
 8011ac2:	f040 80a6 	bne.w	8011c12 <__ssvfiscanf_r+0x2e2>
 8011ac6:	3301      	adds	r3, #1
 8011ac8:	6862      	ldr	r2, [r4, #4]
 8011aca:	6023      	str	r3, [r4, #0]
 8011acc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8011ace:	3a01      	subs	r2, #1
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	6062      	str	r2, [r4, #4]
 8011ad4:	9345      	str	r3, [sp, #276]	@ 0x114
 8011ad6:	e753      	b.n	8011980 <__ssvfiscanf_r+0x50>
 8011ad8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011ada:	4621      	mov	r1, r4
 8011adc:	4630      	mov	r0, r6
 8011ade:	4798      	blx	r3
 8011ae0:	2800      	cmp	r0, #0
 8011ae2:	d0eb      	beq.n	8011abc <__ssvfiscanf_r+0x18c>
 8011ae4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011ae6:	2800      	cmp	r0, #0
 8011ae8:	f040 808b 	bne.w	8011c02 <__ssvfiscanf_r+0x2d2>
 8011aec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011af0:	e08b      	b.n	8011c0a <__ssvfiscanf_r+0x2da>
 8011af2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011af4:	f042 0220 	orr.w	r2, r2, #32
 8011af8:	9241      	str	r2, [sp, #260]	@ 0x104
 8011afa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011afc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011b00:	9241      	str	r2, [sp, #260]	@ 0x104
 8011b02:	2210      	movs	r2, #16
 8011b04:	2b6e      	cmp	r3, #110	@ 0x6e
 8011b06:	9242      	str	r2, [sp, #264]	@ 0x108
 8011b08:	d902      	bls.n	8011b10 <__ssvfiscanf_r+0x1e0>
 8011b0a:	e005      	b.n	8011b18 <__ssvfiscanf_r+0x1e8>
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	9342      	str	r3, [sp, #264]	@ 0x108
 8011b10:	2303      	movs	r3, #3
 8011b12:	e002      	b.n	8011b1a <__ssvfiscanf_r+0x1ea>
 8011b14:	2308      	movs	r3, #8
 8011b16:	9342      	str	r3, [sp, #264]	@ 0x108
 8011b18:	2304      	movs	r3, #4
 8011b1a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011b1c:	6863      	ldr	r3, [r4, #4]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	dd39      	ble.n	8011b96 <__ssvfiscanf_r+0x266>
 8011b22:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011b24:	0659      	lsls	r1, r3, #25
 8011b26:	d404      	bmi.n	8011b32 <__ssvfiscanf_r+0x202>
 8011b28:	6823      	ldr	r3, [r4, #0]
 8011b2a:	781a      	ldrb	r2, [r3, #0]
 8011b2c:	5cba      	ldrb	r2, [r7, r2]
 8011b2e:	0712      	lsls	r2, r2, #28
 8011b30:	d438      	bmi.n	8011ba4 <__ssvfiscanf_r+0x274>
 8011b32:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011b34:	2b02      	cmp	r3, #2
 8011b36:	dc47      	bgt.n	8011bc8 <__ssvfiscanf_r+0x298>
 8011b38:	466b      	mov	r3, sp
 8011b3a:	4622      	mov	r2, r4
 8011b3c:	a941      	add	r1, sp, #260	@ 0x104
 8011b3e:	4630      	mov	r0, r6
 8011b40:	f000 f886 	bl	8011c50 <_scanf_chars>
 8011b44:	2801      	cmp	r0, #1
 8011b46:	d064      	beq.n	8011c12 <__ssvfiscanf_r+0x2e2>
 8011b48:	2802      	cmp	r0, #2
 8011b4a:	f47f af19 	bne.w	8011980 <__ssvfiscanf_r+0x50>
 8011b4e:	e7c9      	b.n	8011ae4 <__ssvfiscanf_r+0x1b4>
 8011b50:	220a      	movs	r2, #10
 8011b52:	e7d7      	b.n	8011b04 <__ssvfiscanf_r+0x1d4>
 8011b54:	4629      	mov	r1, r5
 8011b56:	4640      	mov	r0, r8
 8011b58:	f000 f9c8 	bl	8011eec <__sccl>
 8011b5c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b62:	9341      	str	r3, [sp, #260]	@ 0x104
 8011b64:	4605      	mov	r5, r0
 8011b66:	2301      	movs	r3, #1
 8011b68:	e7d7      	b.n	8011b1a <__ssvfiscanf_r+0x1ea>
 8011b6a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011b6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b70:	9341      	str	r3, [sp, #260]	@ 0x104
 8011b72:	2300      	movs	r3, #0
 8011b74:	e7d1      	b.n	8011b1a <__ssvfiscanf_r+0x1ea>
 8011b76:	2302      	movs	r3, #2
 8011b78:	e7cf      	b.n	8011b1a <__ssvfiscanf_r+0x1ea>
 8011b7a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011b7c:	06c3      	lsls	r3, r0, #27
 8011b7e:	f53f aeff 	bmi.w	8011980 <__ssvfiscanf_r+0x50>
 8011b82:	9b00      	ldr	r3, [sp, #0]
 8011b84:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011b86:	1d19      	adds	r1, r3, #4
 8011b88:	9100      	str	r1, [sp, #0]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	07c0      	lsls	r0, r0, #31
 8011b8e:	bf4c      	ite	mi
 8011b90:	801a      	strhmi	r2, [r3, #0]
 8011b92:	601a      	strpl	r2, [r3, #0]
 8011b94:	e6f4      	b.n	8011980 <__ssvfiscanf_r+0x50>
 8011b96:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011b98:	4621      	mov	r1, r4
 8011b9a:	4630      	mov	r0, r6
 8011b9c:	4798      	blx	r3
 8011b9e:	2800      	cmp	r0, #0
 8011ba0:	d0bf      	beq.n	8011b22 <__ssvfiscanf_r+0x1f2>
 8011ba2:	e79f      	b.n	8011ae4 <__ssvfiscanf_r+0x1b4>
 8011ba4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011ba6:	3201      	adds	r2, #1
 8011ba8:	9245      	str	r2, [sp, #276]	@ 0x114
 8011baa:	6862      	ldr	r2, [r4, #4]
 8011bac:	3a01      	subs	r2, #1
 8011bae:	2a00      	cmp	r2, #0
 8011bb0:	6062      	str	r2, [r4, #4]
 8011bb2:	dd02      	ble.n	8011bba <__ssvfiscanf_r+0x28a>
 8011bb4:	3301      	adds	r3, #1
 8011bb6:	6023      	str	r3, [r4, #0]
 8011bb8:	e7b6      	b.n	8011b28 <__ssvfiscanf_r+0x1f8>
 8011bba:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011bbc:	4621      	mov	r1, r4
 8011bbe:	4630      	mov	r0, r6
 8011bc0:	4798      	blx	r3
 8011bc2:	2800      	cmp	r0, #0
 8011bc4:	d0b0      	beq.n	8011b28 <__ssvfiscanf_r+0x1f8>
 8011bc6:	e78d      	b.n	8011ae4 <__ssvfiscanf_r+0x1b4>
 8011bc8:	2b04      	cmp	r3, #4
 8011bca:	dc0f      	bgt.n	8011bec <__ssvfiscanf_r+0x2bc>
 8011bcc:	466b      	mov	r3, sp
 8011bce:	4622      	mov	r2, r4
 8011bd0:	a941      	add	r1, sp, #260	@ 0x104
 8011bd2:	4630      	mov	r0, r6
 8011bd4:	f000 f896 	bl	8011d04 <_scanf_i>
 8011bd8:	e7b4      	b.n	8011b44 <__ssvfiscanf_r+0x214>
 8011bda:	bf00      	nop
 8011bdc:	0801187d 	.word	0x0801187d
 8011be0:	080118f7 	.word	0x080118f7
 8011be4:	08015ce1 	.word	0x08015ce1
 8011be8:	08015bd0 	.word	0x08015bd0
 8011bec:	4b0a      	ldr	r3, [pc, #40]	@ (8011c18 <__ssvfiscanf_r+0x2e8>)
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	f43f aec6 	beq.w	8011980 <__ssvfiscanf_r+0x50>
 8011bf4:	466b      	mov	r3, sp
 8011bf6:	4622      	mov	r2, r4
 8011bf8:	a941      	add	r1, sp, #260	@ 0x104
 8011bfa:	4630      	mov	r0, r6
 8011bfc:	f7fc fffa 	bl	800ebf4 <_scanf_float>
 8011c00:	e7a0      	b.n	8011b44 <__ssvfiscanf_r+0x214>
 8011c02:	89a3      	ldrh	r3, [r4, #12]
 8011c04:	065b      	lsls	r3, r3, #25
 8011c06:	f53f af71 	bmi.w	8011aec <__ssvfiscanf_r+0x1bc>
 8011c0a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8011c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c12:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011c14:	e7f9      	b.n	8011c0a <__ssvfiscanf_r+0x2da>
 8011c16:	bf00      	nop
 8011c18:	0800ebf5 	.word	0x0800ebf5

08011c1c <malloc>:
 8011c1c:	4b02      	ldr	r3, [pc, #8]	@ (8011c28 <malloc+0xc>)
 8011c1e:	4601      	mov	r1, r0
 8011c20:	6818      	ldr	r0, [r3, #0]
 8011c22:	f7fc bddb 	b.w	800e7dc <_malloc_r>
 8011c26:	bf00      	nop
 8011c28:	200001c4 	.word	0x200001c4

08011c2c <__ascii_mbtowc>:
 8011c2c:	b082      	sub	sp, #8
 8011c2e:	b901      	cbnz	r1, 8011c32 <__ascii_mbtowc+0x6>
 8011c30:	a901      	add	r1, sp, #4
 8011c32:	b142      	cbz	r2, 8011c46 <__ascii_mbtowc+0x1a>
 8011c34:	b14b      	cbz	r3, 8011c4a <__ascii_mbtowc+0x1e>
 8011c36:	7813      	ldrb	r3, [r2, #0]
 8011c38:	600b      	str	r3, [r1, #0]
 8011c3a:	7812      	ldrb	r2, [r2, #0]
 8011c3c:	1e10      	subs	r0, r2, #0
 8011c3e:	bf18      	it	ne
 8011c40:	2001      	movne	r0, #1
 8011c42:	b002      	add	sp, #8
 8011c44:	4770      	bx	lr
 8011c46:	4610      	mov	r0, r2
 8011c48:	e7fb      	b.n	8011c42 <__ascii_mbtowc+0x16>
 8011c4a:	f06f 0001 	mvn.w	r0, #1
 8011c4e:	e7f8      	b.n	8011c42 <__ascii_mbtowc+0x16>

08011c50 <_scanf_chars>:
 8011c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c54:	4615      	mov	r5, r2
 8011c56:	688a      	ldr	r2, [r1, #8]
 8011c58:	4680      	mov	r8, r0
 8011c5a:	460c      	mov	r4, r1
 8011c5c:	b932      	cbnz	r2, 8011c6c <_scanf_chars+0x1c>
 8011c5e:	698a      	ldr	r2, [r1, #24]
 8011c60:	2a00      	cmp	r2, #0
 8011c62:	bf14      	ite	ne
 8011c64:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8011c68:	2201      	moveq	r2, #1
 8011c6a:	608a      	str	r2, [r1, #8]
 8011c6c:	6822      	ldr	r2, [r4, #0]
 8011c6e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8011d00 <_scanf_chars+0xb0>
 8011c72:	06d1      	lsls	r1, r2, #27
 8011c74:	bf5f      	itttt	pl
 8011c76:	681a      	ldrpl	r2, [r3, #0]
 8011c78:	1d11      	addpl	r1, r2, #4
 8011c7a:	6019      	strpl	r1, [r3, #0]
 8011c7c:	6816      	ldrpl	r6, [r2, #0]
 8011c7e:	2700      	movs	r7, #0
 8011c80:	69a0      	ldr	r0, [r4, #24]
 8011c82:	b188      	cbz	r0, 8011ca8 <_scanf_chars+0x58>
 8011c84:	2801      	cmp	r0, #1
 8011c86:	d107      	bne.n	8011c98 <_scanf_chars+0x48>
 8011c88:	682b      	ldr	r3, [r5, #0]
 8011c8a:	781a      	ldrb	r2, [r3, #0]
 8011c8c:	6963      	ldr	r3, [r4, #20]
 8011c8e:	5c9b      	ldrb	r3, [r3, r2]
 8011c90:	b953      	cbnz	r3, 8011ca8 <_scanf_chars+0x58>
 8011c92:	2f00      	cmp	r7, #0
 8011c94:	d031      	beq.n	8011cfa <_scanf_chars+0xaa>
 8011c96:	e022      	b.n	8011cde <_scanf_chars+0x8e>
 8011c98:	2802      	cmp	r0, #2
 8011c9a:	d120      	bne.n	8011cde <_scanf_chars+0x8e>
 8011c9c:	682b      	ldr	r3, [r5, #0]
 8011c9e:	781b      	ldrb	r3, [r3, #0]
 8011ca0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011ca4:	071b      	lsls	r3, r3, #28
 8011ca6:	d41a      	bmi.n	8011cde <_scanf_chars+0x8e>
 8011ca8:	6823      	ldr	r3, [r4, #0]
 8011caa:	06da      	lsls	r2, r3, #27
 8011cac:	bf5e      	ittt	pl
 8011cae:	682b      	ldrpl	r3, [r5, #0]
 8011cb0:	781b      	ldrbpl	r3, [r3, #0]
 8011cb2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011cb6:	682a      	ldr	r2, [r5, #0]
 8011cb8:	686b      	ldr	r3, [r5, #4]
 8011cba:	3201      	adds	r2, #1
 8011cbc:	602a      	str	r2, [r5, #0]
 8011cbe:	68a2      	ldr	r2, [r4, #8]
 8011cc0:	3b01      	subs	r3, #1
 8011cc2:	3a01      	subs	r2, #1
 8011cc4:	606b      	str	r3, [r5, #4]
 8011cc6:	3701      	adds	r7, #1
 8011cc8:	60a2      	str	r2, [r4, #8]
 8011cca:	b142      	cbz	r2, 8011cde <_scanf_chars+0x8e>
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	dcd7      	bgt.n	8011c80 <_scanf_chars+0x30>
 8011cd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011cd4:	4629      	mov	r1, r5
 8011cd6:	4640      	mov	r0, r8
 8011cd8:	4798      	blx	r3
 8011cda:	2800      	cmp	r0, #0
 8011cdc:	d0d0      	beq.n	8011c80 <_scanf_chars+0x30>
 8011cde:	6823      	ldr	r3, [r4, #0]
 8011ce0:	f013 0310 	ands.w	r3, r3, #16
 8011ce4:	d105      	bne.n	8011cf2 <_scanf_chars+0xa2>
 8011ce6:	68e2      	ldr	r2, [r4, #12]
 8011ce8:	3201      	adds	r2, #1
 8011cea:	60e2      	str	r2, [r4, #12]
 8011cec:	69a2      	ldr	r2, [r4, #24]
 8011cee:	b102      	cbz	r2, 8011cf2 <_scanf_chars+0xa2>
 8011cf0:	7033      	strb	r3, [r6, #0]
 8011cf2:	6923      	ldr	r3, [r4, #16]
 8011cf4:	443b      	add	r3, r7
 8011cf6:	6123      	str	r3, [r4, #16]
 8011cf8:	2000      	movs	r0, #0
 8011cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cfe:	bf00      	nop
 8011d00:	08015ce1 	.word	0x08015ce1

08011d04 <_scanf_i>:
 8011d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d08:	4698      	mov	r8, r3
 8011d0a:	4b74      	ldr	r3, [pc, #464]	@ (8011edc <_scanf_i+0x1d8>)
 8011d0c:	460c      	mov	r4, r1
 8011d0e:	4682      	mov	sl, r0
 8011d10:	4616      	mov	r6, r2
 8011d12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011d16:	b087      	sub	sp, #28
 8011d18:	ab03      	add	r3, sp, #12
 8011d1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011d1e:	4b70      	ldr	r3, [pc, #448]	@ (8011ee0 <_scanf_i+0x1dc>)
 8011d20:	69a1      	ldr	r1, [r4, #24]
 8011d22:	4a70      	ldr	r2, [pc, #448]	@ (8011ee4 <_scanf_i+0x1e0>)
 8011d24:	2903      	cmp	r1, #3
 8011d26:	bf08      	it	eq
 8011d28:	461a      	moveq	r2, r3
 8011d2a:	68a3      	ldr	r3, [r4, #8]
 8011d2c:	9201      	str	r2, [sp, #4]
 8011d2e:	1e5a      	subs	r2, r3, #1
 8011d30:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011d34:	bf88      	it	hi
 8011d36:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011d3a:	4627      	mov	r7, r4
 8011d3c:	bf82      	ittt	hi
 8011d3e:	eb03 0905 	addhi.w	r9, r3, r5
 8011d42:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011d46:	60a3      	strhi	r3, [r4, #8]
 8011d48:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011d4c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8011d50:	bf98      	it	ls
 8011d52:	f04f 0900 	movls.w	r9, #0
 8011d56:	6023      	str	r3, [r4, #0]
 8011d58:	463d      	mov	r5, r7
 8011d5a:	f04f 0b00 	mov.w	fp, #0
 8011d5e:	6831      	ldr	r1, [r6, #0]
 8011d60:	ab03      	add	r3, sp, #12
 8011d62:	7809      	ldrb	r1, [r1, #0]
 8011d64:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011d68:	2202      	movs	r2, #2
 8011d6a:	f7ee fa51 	bl	8000210 <memchr>
 8011d6e:	b328      	cbz	r0, 8011dbc <_scanf_i+0xb8>
 8011d70:	f1bb 0f01 	cmp.w	fp, #1
 8011d74:	d159      	bne.n	8011e2a <_scanf_i+0x126>
 8011d76:	6862      	ldr	r2, [r4, #4]
 8011d78:	b92a      	cbnz	r2, 8011d86 <_scanf_i+0x82>
 8011d7a:	6822      	ldr	r2, [r4, #0]
 8011d7c:	2108      	movs	r1, #8
 8011d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011d82:	6061      	str	r1, [r4, #4]
 8011d84:	6022      	str	r2, [r4, #0]
 8011d86:	6822      	ldr	r2, [r4, #0]
 8011d88:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8011d8c:	6022      	str	r2, [r4, #0]
 8011d8e:	68a2      	ldr	r2, [r4, #8]
 8011d90:	1e51      	subs	r1, r2, #1
 8011d92:	60a1      	str	r1, [r4, #8]
 8011d94:	b192      	cbz	r2, 8011dbc <_scanf_i+0xb8>
 8011d96:	6832      	ldr	r2, [r6, #0]
 8011d98:	1c51      	adds	r1, r2, #1
 8011d9a:	6031      	str	r1, [r6, #0]
 8011d9c:	7812      	ldrb	r2, [r2, #0]
 8011d9e:	f805 2b01 	strb.w	r2, [r5], #1
 8011da2:	6872      	ldr	r2, [r6, #4]
 8011da4:	3a01      	subs	r2, #1
 8011da6:	2a00      	cmp	r2, #0
 8011da8:	6072      	str	r2, [r6, #4]
 8011daa:	dc07      	bgt.n	8011dbc <_scanf_i+0xb8>
 8011dac:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8011db0:	4631      	mov	r1, r6
 8011db2:	4650      	mov	r0, sl
 8011db4:	4790      	blx	r2
 8011db6:	2800      	cmp	r0, #0
 8011db8:	f040 8085 	bne.w	8011ec6 <_scanf_i+0x1c2>
 8011dbc:	f10b 0b01 	add.w	fp, fp, #1
 8011dc0:	f1bb 0f03 	cmp.w	fp, #3
 8011dc4:	d1cb      	bne.n	8011d5e <_scanf_i+0x5a>
 8011dc6:	6863      	ldr	r3, [r4, #4]
 8011dc8:	b90b      	cbnz	r3, 8011dce <_scanf_i+0xca>
 8011dca:	230a      	movs	r3, #10
 8011dcc:	6063      	str	r3, [r4, #4]
 8011dce:	6863      	ldr	r3, [r4, #4]
 8011dd0:	4945      	ldr	r1, [pc, #276]	@ (8011ee8 <_scanf_i+0x1e4>)
 8011dd2:	6960      	ldr	r0, [r4, #20]
 8011dd4:	1ac9      	subs	r1, r1, r3
 8011dd6:	f000 f889 	bl	8011eec <__sccl>
 8011dda:	f04f 0b00 	mov.w	fp, #0
 8011dde:	68a3      	ldr	r3, [r4, #8]
 8011de0:	6822      	ldr	r2, [r4, #0]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d03d      	beq.n	8011e62 <_scanf_i+0x15e>
 8011de6:	6831      	ldr	r1, [r6, #0]
 8011de8:	6960      	ldr	r0, [r4, #20]
 8011dea:	f891 c000 	ldrb.w	ip, [r1]
 8011dee:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011df2:	2800      	cmp	r0, #0
 8011df4:	d035      	beq.n	8011e62 <_scanf_i+0x15e>
 8011df6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8011dfa:	d124      	bne.n	8011e46 <_scanf_i+0x142>
 8011dfc:	0510      	lsls	r0, r2, #20
 8011dfe:	d522      	bpl.n	8011e46 <_scanf_i+0x142>
 8011e00:	f10b 0b01 	add.w	fp, fp, #1
 8011e04:	f1b9 0f00 	cmp.w	r9, #0
 8011e08:	d003      	beq.n	8011e12 <_scanf_i+0x10e>
 8011e0a:	3301      	adds	r3, #1
 8011e0c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8011e10:	60a3      	str	r3, [r4, #8]
 8011e12:	6873      	ldr	r3, [r6, #4]
 8011e14:	3b01      	subs	r3, #1
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	6073      	str	r3, [r6, #4]
 8011e1a:	dd1b      	ble.n	8011e54 <_scanf_i+0x150>
 8011e1c:	6833      	ldr	r3, [r6, #0]
 8011e1e:	3301      	adds	r3, #1
 8011e20:	6033      	str	r3, [r6, #0]
 8011e22:	68a3      	ldr	r3, [r4, #8]
 8011e24:	3b01      	subs	r3, #1
 8011e26:	60a3      	str	r3, [r4, #8]
 8011e28:	e7d9      	b.n	8011dde <_scanf_i+0xda>
 8011e2a:	f1bb 0f02 	cmp.w	fp, #2
 8011e2e:	d1ae      	bne.n	8011d8e <_scanf_i+0x8a>
 8011e30:	6822      	ldr	r2, [r4, #0]
 8011e32:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8011e36:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8011e3a:	d1c4      	bne.n	8011dc6 <_scanf_i+0xc2>
 8011e3c:	2110      	movs	r1, #16
 8011e3e:	6061      	str	r1, [r4, #4]
 8011e40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011e44:	e7a2      	b.n	8011d8c <_scanf_i+0x88>
 8011e46:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8011e4a:	6022      	str	r2, [r4, #0]
 8011e4c:	780b      	ldrb	r3, [r1, #0]
 8011e4e:	f805 3b01 	strb.w	r3, [r5], #1
 8011e52:	e7de      	b.n	8011e12 <_scanf_i+0x10e>
 8011e54:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011e58:	4631      	mov	r1, r6
 8011e5a:	4650      	mov	r0, sl
 8011e5c:	4798      	blx	r3
 8011e5e:	2800      	cmp	r0, #0
 8011e60:	d0df      	beq.n	8011e22 <_scanf_i+0x11e>
 8011e62:	6823      	ldr	r3, [r4, #0]
 8011e64:	05d9      	lsls	r1, r3, #23
 8011e66:	d50d      	bpl.n	8011e84 <_scanf_i+0x180>
 8011e68:	42bd      	cmp	r5, r7
 8011e6a:	d909      	bls.n	8011e80 <_scanf_i+0x17c>
 8011e6c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011e70:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011e74:	4632      	mov	r2, r6
 8011e76:	4650      	mov	r0, sl
 8011e78:	4798      	blx	r3
 8011e7a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8011e7e:	464d      	mov	r5, r9
 8011e80:	42bd      	cmp	r5, r7
 8011e82:	d028      	beq.n	8011ed6 <_scanf_i+0x1d2>
 8011e84:	6822      	ldr	r2, [r4, #0]
 8011e86:	f012 0210 	ands.w	r2, r2, #16
 8011e8a:	d113      	bne.n	8011eb4 <_scanf_i+0x1b0>
 8011e8c:	702a      	strb	r2, [r5, #0]
 8011e8e:	6863      	ldr	r3, [r4, #4]
 8011e90:	9e01      	ldr	r6, [sp, #4]
 8011e92:	4639      	mov	r1, r7
 8011e94:	4650      	mov	r0, sl
 8011e96:	47b0      	blx	r6
 8011e98:	f8d8 3000 	ldr.w	r3, [r8]
 8011e9c:	6821      	ldr	r1, [r4, #0]
 8011e9e:	1d1a      	adds	r2, r3, #4
 8011ea0:	f8c8 2000 	str.w	r2, [r8]
 8011ea4:	f011 0f20 	tst.w	r1, #32
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	d00f      	beq.n	8011ecc <_scanf_i+0x1c8>
 8011eac:	6018      	str	r0, [r3, #0]
 8011eae:	68e3      	ldr	r3, [r4, #12]
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	60e3      	str	r3, [r4, #12]
 8011eb4:	6923      	ldr	r3, [r4, #16]
 8011eb6:	1bed      	subs	r5, r5, r7
 8011eb8:	445d      	add	r5, fp
 8011eba:	442b      	add	r3, r5
 8011ebc:	6123      	str	r3, [r4, #16]
 8011ebe:	2000      	movs	r0, #0
 8011ec0:	b007      	add	sp, #28
 8011ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec6:	f04f 0b00 	mov.w	fp, #0
 8011eca:	e7ca      	b.n	8011e62 <_scanf_i+0x15e>
 8011ecc:	07ca      	lsls	r2, r1, #31
 8011ece:	bf4c      	ite	mi
 8011ed0:	8018      	strhmi	r0, [r3, #0]
 8011ed2:	6018      	strpl	r0, [r3, #0]
 8011ed4:	e7eb      	b.n	8011eae <_scanf_i+0x1aa>
 8011ed6:	2001      	movs	r0, #1
 8011ed8:	e7f2      	b.n	8011ec0 <_scanf_i+0x1bc>
 8011eda:	bf00      	nop
 8011edc:	08015a70 	.word	0x08015a70
 8011ee0:	08010009 	.word	0x08010009
 8011ee4:	08012bb9 	.word	0x08012bb9
 8011ee8:	08015beb 	.word	0x08015beb

08011eec <__sccl>:
 8011eec:	b570      	push	{r4, r5, r6, lr}
 8011eee:	780b      	ldrb	r3, [r1, #0]
 8011ef0:	4604      	mov	r4, r0
 8011ef2:	2b5e      	cmp	r3, #94	@ 0x5e
 8011ef4:	bf0b      	itete	eq
 8011ef6:	784b      	ldrbeq	r3, [r1, #1]
 8011ef8:	1c4a      	addne	r2, r1, #1
 8011efa:	1c8a      	addeq	r2, r1, #2
 8011efc:	2100      	movne	r1, #0
 8011efe:	bf08      	it	eq
 8011f00:	2101      	moveq	r1, #1
 8011f02:	3801      	subs	r0, #1
 8011f04:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8011f08:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011f0c:	42a8      	cmp	r0, r5
 8011f0e:	d1fb      	bne.n	8011f08 <__sccl+0x1c>
 8011f10:	b90b      	cbnz	r3, 8011f16 <__sccl+0x2a>
 8011f12:	1e50      	subs	r0, r2, #1
 8011f14:	bd70      	pop	{r4, r5, r6, pc}
 8011f16:	f081 0101 	eor.w	r1, r1, #1
 8011f1a:	54e1      	strb	r1, [r4, r3]
 8011f1c:	4610      	mov	r0, r2
 8011f1e:	4602      	mov	r2, r0
 8011f20:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011f24:	2d2d      	cmp	r5, #45	@ 0x2d
 8011f26:	d005      	beq.n	8011f34 <__sccl+0x48>
 8011f28:	2d5d      	cmp	r5, #93	@ 0x5d
 8011f2a:	d016      	beq.n	8011f5a <__sccl+0x6e>
 8011f2c:	2d00      	cmp	r5, #0
 8011f2e:	d0f1      	beq.n	8011f14 <__sccl+0x28>
 8011f30:	462b      	mov	r3, r5
 8011f32:	e7f2      	b.n	8011f1a <__sccl+0x2e>
 8011f34:	7846      	ldrb	r6, [r0, #1]
 8011f36:	2e5d      	cmp	r6, #93	@ 0x5d
 8011f38:	d0fa      	beq.n	8011f30 <__sccl+0x44>
 8011f3a:	42b3      	cmp	r3, r6
 8011f3c:	dcf8      	bgt.n	8011f30 <__sccl+0x44>
 8011f3e:	3002      	adds	r0, #2
 8011f40:	461a      	mov	r2, r3
 8011f42:	3201      	adds	r2, #1
 8011f44:	4296      	cmp	r6, r2
 8011f46:	54a1      	strb	r1, [r4, r2]
 8011f48:	dcfb      	bgt.n	8011f42 <__sccl+0x56>
 8011f4a:	1af2      	subs	r2, r6, r3
 8011f4c:	3a01      	subs	r2, #1
 8011f4e:	1c5d      	adds	r5, r3, #1
 8011f50:	42b3      	cmp	r3, r6
 8011f52:	bfa8      	it	ge
 8011f54:	2200      	movge	r2, #0
 8011f56:	18ab      	adds	r3, r5, r2
 8011f58:	e7e1      	b.n	8011f1e <__sccl+0x32>
 8011f5a:	4610      	mov	r0, r2
 8011f5c:	e7da      	b.n	8011f14 <__sccl+0x28>
	...

08011f60 <__sflush_r>:
 8011f60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f68:	0716      	lsls	r6, r2, #28
 8011f6a:	4605      	mov	r5, r0
 8011f6c:	460c      	mov	r4, r1
 8011f6e:	d454      	bmi.n	801201a <__sflush_r+0xba>
 8011f70:	684b      	ldr	r3, [r1, #4]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	dc02      	bgt.n	8011f7c <__sflush_r+0x1c>
 8011f76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	dd48      	ble.n	801200e <__sflush_r+0xae>
 8011f7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011f7e:	2e00      	cmp	r6, #0
 8011f80:	d045      	beq.n	801200e <__sflush_r+0xae>
 8011f82:	2300      	movs	r3, #0
 8011f84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011f88:	682f      	ldr	r7, [r5, #0]
 8011f8a:	6a21      	ldr	r1, [r4, #32]
 8011f8c:	602b      	str	r3, [r5, #0]
 8011f8e:	d030      	beq.n	8011ff2 <__sflush_r+0x92>
 8011f90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011f92:	89a3      	ldrh	r3, [r4, #12]
 8011f94:	0759      	lsls	r1, r3, #29
 8011f96:	d505      	bpl.n	8011fa4 <__sflush_r+0x44>
 8011f98:	6863      	ldr	r3, [r4, #4]
 8011f9a:	1ad2      	subs	r2, r2, r3
 8011f9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011f9e:	b10b      	cbz	r3, 8011fa4 <__sflush_r+0x44>
 8011fa0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011fa2:	1ad2      	subs	r2, r2, r3
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011fa8:	6a21      	ldr	r1, [r4, #32]
 8011faa:	4628      	mov	r0, r5
 8011fac:	47b0      	blx	r6
 8011fae:	1c43      	adds	r3, r0, #1
 8011fb0:	89a3      	ldrh	r3, [r4, #12]
 8011fb2:	d106      	bne.n	8011fc2 <__sflush_r+0x62>
 8011fb4:	6829      	ldr	r1, [r5, #0]
 8011fb6:	291d      	cmp	r1, #29
 8011fb8:	d82b      	bhi.n	8012012 <__sflush_r+0xb2>
 8011fba:	4a2a      	ldr	r2, [pc, #168]	@ (8012064 <__sflush_r+0x104>)
 8011fbc:	40ca      	lsrs	r2, r1
 8011fbe:	07d6      	lsls	r6, r2, #31
 8011fc0:	d527      	bpl.n	8012012 <__sflush_r+0xb2>
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	6062      	str	r2, [r4, #4]
 8011fc6:	04d9      	lsls	r1, r3, #19
 8011fc8:	6922      	ldr	r2, [r4, #16]
 8011fca:	6022      	str	r2, [r4, #0]
 8011fcc:	d504      	bpl.n	8011fd8 <__sflush_r+0x78>
 8011fce:	1c42      	adds	r2, r0, #1
 8011fd0:	d101      	bne.n	8011fd6 <__sflush_r+0x76>
 8011fd2:	682b      	ldr	r3, [r5, #0]
 8011fd4:	b903      	cbnz	r3, 8011fd8 <__sflush_r+0x78>
 8011fd6:	6560      	str	r0, [r4, #84]	@ 0x54
 8011fd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011fda:	602f      	str	r7, [r5, #0]
 8011fdc:	b1b9      	cbz	r1, 801200e <__sflush_r+0xae>
 8011fde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011fe2:	4299      	cmp	r1, r3
 8011fe4:	d002      	beq.n	8011fec <__sflush_r+0x8c>
 8011fe6:	4628      	mov	r0, r5
 8011fe8:	f7fe ff6e 	bl	8010ec8 <_free_r>
 8011fec:	2300      	movs	r3, #0
 8011fee:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ff0:	e00d      	b.n	801200e <__sflush_r+0xae>
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	4628      	mov	r0, r5
 8011ff6:	47b0      	blx	r6
 8011ff8:	4602      	mov	r2, r0
 8011ffa:	1c50      	adds	r0, r2, #1
 8011ffc:	d1c9      	bne.n	8011f92 <__sflush_r+0x32>
 8011ffe:	682b      	ldr	r3, [r5, #0]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d0c6      	beq.n	8011f92 <__sflush_r+0x32>
 8012004:	2b1d      	cmp	r3, #29
 8012006:	d001      	beq.n	801200c <__sflush_r+0xac>
 8012008:	2b16      	cmp	r3, #22
 801200a:	d11e      	bne.n	801204a <__sflush_r+0xea>
 801200c:	602f      	str	r7, [r5, #0]
 801200e:	2000      	movs	r0, #0
 8012010:	e022      	b.n	8012058 <__sflush_r+0xf8>
 8012012:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012016:	b21b      	sxth	r3, r3
 8012018:	e01b      	b.n	8012052 <__sflush_r+0xf2>
 801201a:	690f      	ldr	r7, [r1, #16]
 801201c:	2f00      	cmp	r7, #0
 801201e:	d0f6      	beq.n	801200e <__sflush_r+0xae>
 8012020:	0793      	lsls	r3, r2, #30
 8012022:	680e      	ldr	r6, [r1, #0]
 8012024:	bf08      	it	eq
 8012026:	694b      	ldreq	r3, [r1, #20]
 8012028:	600f      	str	r7, [r1, #0]
 801202a:	bf18      	it	ne
 801202c:	2300      	movne	r3, #0
 801202e:	eba6 0807 	sub.w	r8, r6, r7
 8012032:	608b      	str	r3, [r1, #8]
 8012034:	f1b8 0f00 	cmp.w	r8, #0
 8012038:	dde9      	ble.n	801200e <__sflush_r+0xae>
 801203a:	6a21      	ldr	r1, [r4, #32]
 801203c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801203e:	4643      	mov	r3, r8
 8012040:	463a      	mov	r2, r7
 8012042:	4628      	mov	r0, r5
 8012044:	47b0      	blx	r6
 8012046:	2800      	cmp	r0, #0
 8012048:	dc08      	bgt.n	801205c <__sflush_r+0xfc>
 801204a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801204e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012052:	81a3      	strh	r3, [r4, #12]
 8012054:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801205c:	4407      	add	r7, r0
 801205e:	eba8 0800 	sub.w	r8, r8, r0
 8012062:	e7e7      	b.n	8012034 <__sflush_r+0xd4>
 8012064:	20400001 	.word	0x20400001

08012068 <_fflush_r>:
 8012068:	b538      	push	{r3, r4, r5, lr}
 801206a:	690b      	ldr	r3, [r1, #16]
 801206c:	4605      	mov	r5, r0
 801206e:	460c      	mov	r4, r1
 8012070:	b913      	cbnz	r3, 8012078 <_fflush_r+0x10>
 8012072:	2500      	movs	r5, #0
 8012074:	4628      	mov	r0, r5
 8012076:	bd38      	pop	{r3, r4, r5, pc}
 8012078:	b118      	cbz	r0, 8012082 <_fflush_r+0x1a>
 801207a:	6a03      	ldr	r3, [r0, #32]
 801207c:	b90b      	cbnz	r3, 8012082 <_fflush_r+0x1a>
 801207e:	f7fd f929 	bl	800f2d4 <__sinit>
 8012082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d0f3      	beq.n	8012072 <_fflush_r+0xa>
 801208a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801208c:	07d0      	lsls	r0, r2, #31
 801208e:	d404      	bmi.n	801209a <_fflush_r+0x32>
 8012090:	0599      	lsls	r1, r3, #22
 8012092:	d402      	bmi.n	801209a <_fflush_r+0x32>
 8012094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012096:	f7fe f888 	bl	80101aa <__retarget_lock_acquire_recursive>
 801209a:	4628      	mov	r0, r5
 801209c:	4621      	mov	r1, r4
 801209e:	f7ff ff5f 	bl	8011f60 <__sflush_r>
 80120a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80120a4:	07da      	lsls	r2, r3, #31
 80120a6:	4605      	mov	r5, r0
 80120a8:	d4e4      	bmi.n	8012074 <_fflush_r+0xc>
 80120aa:	89a3      	ldrh	r3, [r4, #12]
 80120ac:	059b      	lsls	r3, r3, #22
 80120ae:	d4e1      	bmi.n	8012074 <_fflush_r+0xc>
 80120b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80120b2:	f7fe f87b 	bl	80101ac <__retarget_lock_release_recursive>
 80120b6:	e7dd      	b.n	8012074 <_fflush_r+0xc>

080120b8 <_Balloc>:
 80120b8:	b570      	push	{r4, r5, r6, lr}
 80120ba:	69c6      	ldr	r6, [r0, #28]
 80120bc:	4604      	mov	r4, r0
 80120be:	460d      	mov	r5, r1
 80120c0:	b976      	cbnz	r6, 80120e0 <_Balloc+0x28>
 80120c2:	2010      	movs	r0, #16
 80120c4:	f7ff fdaa 	bl	8011c1c <malloc>
 80120c8:	4602      	mov	r2, r0
 80120ca:	61e0      	str	r0, [r4, #28]
 80120cc:	b920      	cbnz	r0, 80120d8 <_Balloc+0x20>
 80120ce:	4b18      	ldr	r3, [pc, #96]	@ (8012130 <_Balloc+0x78>)
 80120d0:	4818      	ldr	r0, [pc, #96]	@ (8012134 <_Balloc+0x7c>)
 80120d2:	216b      	movs	r1, #107	@ 0x6b
 80120d4:	f000 fd9a 	bl	8012c0c <__assert_func>
 80120d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120dc:	6006      	str	r6, [r0, #0]
 80120de:	60c6      	str	r6, [r0, #12]
 80120e0:	69e6      	ldr	r6, [r4, #28]
 80120e2:	68f3      	ldr	r3, [r6, #12]
 80120e4:	b183      	cbz	r3, 8012108 <_Balloc+0x50>
 80120e6:	69e3      	ldr	r3, [r4, #28]
 80120e8:	68db      	ldr	r3, [r3, #12]
 80120ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80120ee:	b9b8      	cbnz	r0, 8012120 <_Balloc+0x68>
 80120f0:	2101      	movs	r1, #1
 80120f2:	fa01 f605 	lsl.w	r6, r1, r5
 80120f6:	1d72      	adds	r2, r6, #5
 80120f8:	0092      	lsls	r2, r2, #2
 80120fa:	4620      	mov	r0, r4
 80120fc:	f7fc f86e 	bl	800e1dc <_calloc_r>
 8012100:	b160      	cbz	r0, 801211c <_Balloc+0x64>
 8012102:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012106:	e00e      	b.n	8012126 <_Balloc+0x6e>
 8012108:	2221      	movs	r2, #33	@ 0x21
 801210a:	2104      	movs	r1, #4
 801210c:	4620      	mov	r0, r4
 801210e:	f7fc f865 	bl	800e1dc <_calloc_r>
 8012112:	69e3      	ldr	r3, [r4, #28]
 8012114:	60f0      	str	r0, [r6, #12]
 8012116:	68db      	ldr	r3, [r3, #12]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d1e4      	bne.n	80120e6 <_Balloc+0x2e>
 801211c:	2000      	movs	r0, #0
 801211e:	bd70      	pop	{r4, r5, r6, pc}
 8012120:	6802      	ldr	r2, [r0, #0]
 8012122:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012126:	2300      	movs	r3, #0
 8012128:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801212c:	e7f7      	b.n	801211e <_Balloc+0x66>
 801212e:	bf00      	nop
 8012130:	08015aea 	.word	0x08015aea
 8012134:	08015bf6 	.word	0x08015bf6

08012138 <_Bfree>:
 8012138:	b570      	push	{r4, r5, r6, lr}
 801213a:	69c6      	ldr	r6, [r0, #28]
 801213c:	4605      	mov	r5, r0
 801213e:	460c      	mov	r4, r1
 8012140:	b976      	cbnz	r6, 8012160 <_Bfree+0x28>
 8012142:	2010      	movs	r0, #16
 8012144:	f7ff fd6a 	bl	8011c1c <malloc>
 8012148:	4602      	mov	r2, r0
 801214a:	61e8      	str	r0, [r5, #28]
 801214c:	b920      	cbnz	r0, 8012158 <_Bfree+0x20>
 801214e:	4b09      	ldr	r3, [pc, #36]	@ (8012174 <_Bfree+0x3c>)
 8012150:	4809      	ldr	r0, [pc, #36]	@ (8012178 <_Bfree+0x40>)
 8012152:	218f      	movs	r1, #143	@ 0x8f
 8012154:	f000 fd5a 	bl	8012c0c <__assert_func>
 8012158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801215c:	6006      	str	r6, [r0, #0]
 801215e:	60c6      	str	r6, [r0, #12]
 8012160:	b13c      	cbz	r4, 8012172 <_Bfree+0x3a>
 8012162:	69eb      	ldr	r3, [r5, #28]
 8012164:	6862      	ldr	r2, [r4, #4]
 8012166:	68db      	ldr	r3, [r3, #12]
 8012168:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801216c:	6021      	str	r1, [r4, #0]
 801216e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012172:	bd70      	pop	{r4, r5, r6, pc}
 8012174:	08015aea 	.word	0x08015aea
 8012178:	08015bf6 	.word	0x08015bf6

0801217c <__multadd>:
 801217c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012180:	690d      	ldr	r5, [r1, #16]
 8012182:	4607      	mov	r7, r0
 8012184:	460c      	mov	r4, r1
 8012186:	461e      	mov	r6, r3
 8012188:	f101 0c14 	add.w	ip, r1, #20
 801218c:	2000      	movs	r0, #0
 801218e:	f8dc 3000 	ldr.w	r3, [ip]
 8012192:	b299      	uxth	r1, r3
 8012194:	fb02 6101 	mla	r1, r2, r1, r6
 8012198:	0c1e      	lsrs	r6, r3, #16
 801219a:	0c0b      	lsrs	r3, r1, #16
 801219c:	fb02 3306 	mla	r3, r2, r6, r3
 80121a0:	b289      	uxth	r1, r1
 80121a2:	3001      	adds	r0, #1
 80121a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80121a8:	4285      	cmp	r5, r0
 80121aa:	f84c 1b04 	str.w	r1, [ip], #4
 80121ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80121b2:	dcec      	bgt.n	801218e <__multadd+0x12>
 80121b4:	b30e      	cbz	r6, 80121fa <__multadd+0x7e>
 80121b6:	68a3      	ldr	r3, [r4, #8]
 80121b8:	42ab      	cmp	r3, r5
 80121ba:	dc19      	bgt.n	80121f0 <__multadd+0x74>
 80121bc:	6861      	ldr	r1, [r4, #4]
 80121be:	4638      	mov	r0, r7
 80121c0:	3101      	adds	r1, #1
 80121c2:	f7ff ff79 	bl	80120b8 <_Balloc>
 80121c6:	4680      	mov	r8, r0
 80121c8:	b928      	cbnz	r0, 80121d6 <__multadd+0x5a>
 80121ca:	4602      	mov	r2, r0
 80121cc:	4b0c      	ldr	r3, [pc, #48]	@ (8012200 <__multadd+0x84>)
 80121ce:	480d      	ldr	r0, [pc, #52]	@ (8012204 <__multadd+0x88>)
 80121d0:	21ba      	movs	r1, #186	@ 0xba
 80121d2:	f000 fd1b 	bl	8012c0c <__assert_func>
 80121d6:	6922      	ldr	r2, [r4, #16]
 80121d8:	3202      	adds	r2, #2
 80121da:	f104 010c 	add.w	r1, r4, #12
 80121de:	0092      	lsls	r2, r2, #2
 80121e0:	300c      	adds	r0, #12
 80121e2:	f7fd fff9 	bl	80101d8 <memcpy>
 80121e6:	4621      	mov	r1, r4
 80121e8:	4638      	mov	r0, r7
 80121ea:	f7ff ffa5 	bl	8012138 <_Bfree>
 80121ee:	4644      	mov	r4, r8
 80121f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80121f4:	3501      	adds	r5, #1
 80121f6:	615e      	str	r6, [r3, #20]
 80121f8:	6125      	str	r5, [r4, #16]
 80121fa:	4620      	mov	r0, r4
 80121fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012200:	08015b59 	.word	0x08015b59
 8012204:	08015bf6 	.word	0x08015bf6

08012208 <__s2b>:
 8012208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801220c:	460c      	mov	r4, r1
 801220e:	4615      	mov	r5, r2
 8012210:	461f      	mov	r7, r3
 8012212:	2209      	movs	r2, #9
 8012214:	3308      	adds	r3, #8
 8012216:	4606      	mov	r6, r0
 8012218:	fb93 f3f2 	sdiv	r3, r3, r2
 801221c:	2100      	movs	r1, #0
 801221e:	2201      	movs	r2, #1
 8012220:	429a      	cmp	r2, r3
 8012222:	db09      	blt.n	8012238 <__s2b+0x30>
 8012224:	4630      	mov	r0, r6
 8012226:	f7ff ff47 	bl	80120b8 <_Balloc>
 801222a:	b940      	cbnz	r0, 801223e <__s2b+0x36>
 801222c:	4602      	mov	r2, r0
 801222e:	4b19      	ldr	r3, [pc, #100]	@ (8012294 <__s2b+0x8c>)
 8012230:	4819      	ldr	r0, [pc, #100]	@ (8012298 <__s2b+0x90>)
 8012232:	21d3      	movs	r1, #211	@ 0xd3
 8012234:	f000 fcea 	bl	8012c0c <__assert_func>
 8012238:	0052      	lsls	r2, r2, #1
 801223a:	3101      	adds	r1, #1
 801223c:	e7f0      	b.n	8012220 <__s2b+0x18>
 801223e:	9b08      	ldr	r3, [sp, #32]
 8012240:	6143      	str	r3, [r0, #20]
 8012242:	2d09      	cmp	r5, #9
 8012244:	f04f 0301 	mov.w	r3, #1
 8012248:	6103      	str	r3, [r0, #16]
 801224a:	dd16      	ble.n	801227a <__s2b+0x72>
 801224c:	f104 0909 	add.w	r9, r4, #9
 8012250:	46c8      	mov	r8, r9
 8012252:	442c      	add	r4, r5
 8012254:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012258:	4601      	mov	r1, r0
 801225a:	3b30      	subs	r3, #48	@ 0x30
 801225c:	220a      	movs	r2, #10
 801225e:	4630      	mov	r0, r6
 8012260:	f7ff ff8c 	bl	801217c <__multadd>
 8012264:	45a0      	cmp	r8, r4
 8012266:	d1f5      	bne.n	8012254 <__s2b+0x4c>
 8012268:	f1a5 0408 	sub.w	r4, r5, #8
 801226c:	444c      	add	r4, r9
 801226e:	1b2d      	subs	r5, r5, r4
 8012270:	1963      	adds	r3, r4, r5
 8012272:	42bb      	cmp	r3, r7
 8012274:	db04      	blt.n	8012280 <__s2b+0x78>
 8012276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801227a:	340a      	adds	r4, #10
 801227c:	2509      	movs	r5, #9
 801227e:	e7f6      	b.n	801226e <__s2b+0x66>
 8012280:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012284:	4601      	mov	r1, r0
 8012286:	3b30      	subs	r3, #48	@ 0x30
 8012288:	220a      	movs	r2, #10
 801228a:	4630      	mov	r0, r6
 801228c:	f7ff ff76 	bl	801217c <__multadd>
 8012290:	e7ee      	b.n	8012270 <__s2b+0x68>
 8012292:	bf00      	nop
 8012294:	08015b59 	.word	0x08015b59
 8012298:	08015bf6 	.word	0x08015bf6

0801229c <__hi0bits>:
 801229c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80122a0:	4603      	mov	r3, r0
 80122a2:	bf36      	itet	cc
 80122a4:	0403      	lslcc	r3, r0, #16
 80122a6:	2000      	movcs	r0, #0
 80122a8:	2010      	movcc	r0, #16
 80122aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80122ae:	bf3c      	itt	cc
 80122b0:	021b      	lslcc	r3, r3, #8
 80122b2:	3008      	addcc	r0, #8
 80122b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80122b8:	bf3c      	itt	cc
 80122ba:	011b      	lslcc	r3, r3, #4
 80122bc:	3004      	addcc	r0, #4
 80122be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80122c2:	bf3c      	itt	cc
 80122c4:	009b      	lslcc	r3, r3, #2
 80122c6:	3002      	addcc	r0, #2
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	db05      	blt.n	80122d8 <__hi0bits+0x3c>
 80122cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80122d0:	f100 0001 	add.w	r0, r0, #1
 80122d4:	bf08      	it	eq
 80122d6:	2020      	moveq	r0, #32
 80122d8:	4770      	bx	lr

080122da <__lo0bits>:
 80122da:	6803      	ldr	r3, [r0, #0]
 80122dc:	4602      	mov	r2, r0
 80122de:	f013 0007 	ands.w	r0, r3, #7
 80122e2:	d00b      	beq.n	80122fc <__lo0bits+0x22>
 80122e4:	07d9      	lsls	r1, r3, #31
 80122e6:	d421      	bmi.n	801232c <__lo0bits+0x52>
 80122e8:	0798      	lsls	r0, r3, #30
 80122ea:	bf49      	itett	mi
 80122ec:	085b      	lsrmi	r3, r3, #1
 80122ee:	089b      	lsrpl	r3, r3, #2
 80122f0:	2001      	movmi	r0, #1
 80122f2:	6013      	strmi	r3, [r2, #0]
 80122f4:	bf5c      	itt	pl
 80122f6:	6013      	strpl	r3, [r2, #0]
 80122f8:	2002      	movpl	r0, #2
 80122fa:	4770      	bx	lr
 80122fc:	b299      	uxth	r1, r3
 80122fe:	b909      	cbnz	r1, 8012304 <__lo0bits+0x2a>
 8012300:	0c1b      	lsrs	r3, r3, #16
 8012302:	2010      	movs	r0, #16
 8012304:	b2d9      	uxtb	r1, r3
 8012306:	b909      	cbnz	r1, 801230c <__lo0bits+0x32>
 8012308:	3008      	adds	r0, #8
 801230a:	0a1b      	lsrs	r3, r3, #8
 801230c:	0719      	lsls	r1, r3, #28
 801230e:	bf04      	itt	eq
 8012310:	091b      	lsreq	r3, r3, #4
 8012312:	3004      	addeq	r0, #4
 8012314:	0799      	lsls	r1, r3, #30
 8012316:	bf04      	itt	eq
 8012318:	089b      	lsreq	r3, r3, #2
 801231a:	3002      	addeq	r0, #2
 801231c:	07d9      	lsls	r1, r3, #31
 801231e:	d403      	bmi.n	8012328 <__lo0bits+0x4e>
 8012320:	085b      	lsrs	r3, r3, #1
 8012322:	f100 0001 	add.w	r0, r0, #1
 8012326:	d003      	beq.n	8012330 <__lo0bits+0x56>
 8012328:	6013      	str	r3, [r2, #0]
 801232a:	4770      	bx	lr
 801232c:	2000      	movs	r0, #0
 801232e:	4770      	bx	lr
 8012330:	2020      	movs	r0, #32
 8012332:	4770      	bx	lr

08012334 <__i2b>:
 8012334:	b510      	push	{r4, lr}
 8012336:	460c      	mov	r4, r1
 8012338:	2101      	movs	r1, #1
 801233a:	f7ff febd 	bl	80120b8 <_Balloc>
 801233e:	4602      	mov	r2, r0
 8012340:	b928      	cbnz	r0, 801234e <__i2b+0x1a>
 8012342:	4b05      	ldr	r3, [pc, #20]	@ (8012358 <__i2b+0x24>)
 8012344:	4805      	ldr	r0, [pc, #20]	@ (801235c <__i2b+0x28>)
 8012346:	f240 1145 	movw	r1, #325	@ 0x145
 801234a:	f000 fc5f 	bl	8012c0c <__assert_func>
 801234e:	2301      	movs	r3, #1
 8012350:	6144      	str	r4, [r0, #20]
 8012352:	6103      	str	r3, [r0, #16]
 8012354:	bd10      	pop	{r4, pc}
 8012356:	bf00      	nop
 8012358:	08015b59 	.word	0x08015b59
 801235c:	08015bf6 	.word	0x08015bf6

08012360 <__multiply>:
 8012360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012364:	4617      	mov	r7, r2
 8012366:	690a      	ldr	r2, [r1, #16]
 8012368:	693b      	ldr	r3, [r7, #16]
 801236a:	429a      	cmp	r2, r3
 801236c:	bfa8      	it	ge
 801236e:	463b      	movge	r3, r7
 8012370:	4689      	mov	r9, r1
 8012372:	bfa4      	itt	ge
 8012374:	460f      	movge	r7, r1
 8012376:	4699      	movge	r9, r3
 8012378:	693d      	ldr	r5, [r7, #16]
 801237a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	6879      	ldr	r1, [r7, #4]
 8012382:	eb05 060a 	add.w	r6, r5, sl
 8012386:	42b3      	cmp	r3, r6
 8012388:	b085      	sub	sp, #20
 801238a:	bfb8      	it	lt
 801238c:	3101      	addlt	r1, #1
 801238e:	f7ff fe93 	bl	80120b8 <_Balloc>
 8012392:	b930      	cbnz	r0, 80123a2 <__multiply+0x42>
 8012394:	4602      	mov	r2, r0
 8012396:	4b41      	ldr	r3, [pc, #260]	@ (801249c <__multiply+0x13c>)
 8012398:	4841      	ldr	r0, [pc, #260]	@ (80124a0 <__multiply+0x140>)
 801239a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801239e:	f000 fc35 	bl	8012c0c <__assert_func>
 80123a2:	f100 0414 	add.w	r4, r0, #20
 80123a6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80123aa:	4623      	mov	r3, r4
 80123ac:	2200      	movs	r2, #0
 80123ae:	4573      	cmp	r3, lr
 80123b0:	d320      	bcc.n	80123f4 <__multiply+0x94>
 80123b2:	f107 0814 	add.w	r8, r7, #20
 80123b6:	f109 0114 	add.w	r1, r9, #20
 80123ba:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80123be:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80123c2:	9302      	str	r3, [sp, #8]
 80123c4:	1beb      	subs	r3, r5, r7
 80123c6:	3b15      	subs	r3, #21
 80123c8:	f023 0303 	bic.w	r3, r3, #3
 80123cc:	3304      	adds	r3, #4
 80123ce:	3715      	adds	r7, #21
 80123d0:	42bd      	cmp	r5, r7
 80123d2:	bf38      	it	cc
 80123d4:	2304      	movcc	r3, #4
 80123d6:	9301      	str	r3, [sp, #4]
 80123d8:	9b02      	ldr	r3, [sp, #8]
 80123da:	9103      	str	r1, [sp, #12]
 80123dc:	428b      	cmp	r3, r1
 80123de:	d80c      	bhi.n	80123fa <__multiply+0x9a>
 80123e0:	2e00      	cmp	r6, #0
 80123e2:	dd03      	ble.n	80123ec <__multiply+0x8c>
 80123e4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d055      	beq.n	8012498 <__multiply+0x138>
 80123ec:	6106      	str	r6, [r0, #16]
 80123ee:	b005      	add	sp, #20
 80123f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123f4:	f843 2b04 	str.w	r2, [r3], #4
 80123f8:	e7d9      	b.n	80123ae <__multiply+0x4e>
 80123fa:	f8b1 a000 	ldrh.w	sl, [r1]
 80123fe:	f1ba 0f00 	cmp.w	sl, #0
 8012402:	d01f      	beq.n	8012444 <__multiply+0xe4>
 8012404:	46c4      	mov	ip, r8
 8012406:	46a1      	mov	r9, r4
 8012408:	2700      	movs	r7, #0
 801240a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801240e:	f8d9 3000 	ldr.w	r3, [r9]
 8012412:	fa1f fb82 	uxth.w	fp, r2
 8012416:	b29b      	uxth	r3, r3
 8012418:	fb0a 330b 	mla	r3, sl, fp, r3
 801241c:	443b      	add	r3, r7
 801241e:	f8d9 7000 	ldr.w	r7, [r9]
 8012422:	0c12      	lsrs	r2, r2, #16
 8012424:	0c3f      	lsrs	r7, r7, #16
 8012426:	fb0a 7202 	mla	r2, sl, r2, r7
 801242a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801242e:	b29b      	uxth	r3, r3
 8012430:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012434:	4565      	cmp	r5, ip
 8012436:	f849 3b04 	str.w	r3, [r9], #4
 801243a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801243e:	d8e4      	bhi.n	801240a <__multiply+0xaa>
 8012440:	9b01      	ldr	r3, [sp, #4]
 8012442:	50e7      	str	r7, [r4, r3]
 8012444:	9b03      	ldr	r3, [sp, #12]
 8012446:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801244a:	3104      	adds	r1, #4
 801244c:	f1b9 0f00 	cmp.w	r9, #0
 8012450:	d020      	beq.n	8012494 <__multiply+0x134>
 8012452:	6823      	ldr	r3, [r4, #0]
 8012454:	4647      	mov	r7, r8
 8012456:	46a4      	mov	ip, r4
 8012458:	f04f 0a00 	mov.w	sl, #0
 801245c:	f8b7 b000 	ldrh.w	fp, [r7]
 8012460:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8012464:	fb09 220b 	mla	r2, r9, fp, r2
 8012468:	4452      	add	r2, sl
 801246a:	b29b      	uxth	r3, r3
 801246c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012470:	f84c 3b04 	str.w	r3, [ip], #4
 8012474:	f857 3b04 	ldr.w	r3, [r7], #4
 8012478:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801247c:	f8bc 3000 	ldrh.w	r3, [ip]
 8012480:	fb09 330a 	mla	r3, r9, sl, r3
 8012484:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8012488:	42bd      	cmp	r5, r7
 801248a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801248e:	d8e5      	bhi.n	801245c <__multiply+0xfc>
 8012490:	9a01      	ldr	r2, [sp, #4]
 8012492:	50a3      	str	r3, [r4, r2]
 8012494:	3404      	adds	r4, #4
 8012496:	e79f      	b.n	80123d8 <__multiply+0x78>
 8012498:	3e01      	subs	r6, #1
 801249a:	e7a1      	b.n	80123e0 <__multiply+0x80>
 801249c:	08015b59 	.word	0x08015b59
 80124a0:	08015bf6 	.word	0x08015bf6

080124a4 <__pow5mult>:
 80124a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124a8:	4615      	mov	r5, r2
 80124aa:	f012 0203 	ands.w	r2, r2, #3
 80124ae:	4607      	mov	r7, r0
 80124b0:	460e      	mov	r6, r1
 80124b2:	d007      	beq.n	80124c4 <__pow5mult+0x20>
 80124b4:	4c25      	ldr	r4, [pc, #148]	@ (801254c <__pow5mult+0xa8>)
 80124b6:	3a01      	subs	r2, #1
 80124b8:	2300      	movs	r3, #0
 80124ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80124be:	f7ff fe5d 	bl	801217c <__multadd>
 80124c2:	4606      	mov	r6, r0
 80124c4:	10ad      	asrs	r5, r5, #2
 80124c6:	d03d      	beq.n	8012544 <__pow5mult+0xa0>
 80124c8:	69fc      	ldr	r4, [r7, #28]
 80124ca:	b97c      	cbnz	r4, 80124ec <__pow5mult+0x48>
 80124cc:	2010      	movs	r0, #16
 80124ce:	f7ff fba5 	bl	8011c1c <malloc>
 80124d2:	4602      	mov	r2, r0
 80124d4:	61f8      	str	r0, [r7, #28]
 80124d6:	b928      	cbnz	r0, 80124e4 <__pow5mult+0x40>
 80124d8:	4b1d      	ldr	r3, [pc, #116]	@ (8012550 <__pow5mult+0xac>)
 80124da:	481e      	ldr	r0, [pc, #120]	@ (8012554 <__pow5mult+0xb0>)
 80124dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80124e0:	f000 fb94 	bl	8012c0c <__assert_func>
 80124e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80124e8:	6004      	str	r4, [r0, #0]
 80124ea:	60c4      	str	r4, [r0, #12]
 80124ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80124f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80124f4:	b94c      	cbnz	r4, 801250a <__pow5mult+0x66>
 80124f6:	f240 2171 	movw	r1, #625	@ 0x271
 80124fa:	4638      	mov	r0, r7
 80124fc:	f7ff ff1a 	bl	8012334 <__i2b>
 8012500:	2300      	movs	r3, #0
 8012502:	f8c8 0008 	str.w	r0, [r8, #8]
 8012506:	4604      	mov	r4, r0
 8012508:	6003      	str	r3, [r0, #0]
 801250a:	f04f 0900 	mov.w	r9, #0
 801250e:	07eb      	lsls	r3, r5, #31
 8012510:	d50a      	bpl.n	8012528 <__pow5mult+0x84>
 8012512:	4631      	mov	r1, r6
 8012514:	4622      	mov	r2, r4
 8012516:	4638      	mov	r0, r7
 8012518:	f7ff ff22 	bl	8012360 <__multiply>
 801251c:	4631      	mov	r1, r6
 801251e:	4680      	mov	r8, r0
 8012520:	4638      	mov	r0, r7
 8012522:	f7ff fe09 	bl	8012138 <_Bfree>
 8012526:	4646      	mov	r6, r8
 8012528:	106d      	asrs	r5, r5, #1
 801252a:	d00b      	beq.n	8012544 <__pow5mult+0xa0>
 801252c:	6820      	ldr	r0, [r4, #0]
 801252e:	b938      	cbnz	r0, 8012540 <__pow5mult+0x9c>
 8012530:	4622      	mov	r2, r4
 8012532:	4621      	mov	r1, r4
 8012534:	4638      	mov	r0, r7
 8012536:	f7ff ff13 	bl	8012360 <__multiply>
 801253a:	6020      	str	r0, [r4, #0]
 801253c:	f8c0 9000 	str.w	r9, [r0]
 8012540:	4604      	mov	r4, r0
 8012542:	e7e4      	b.n	801250e <__pow5mult+0x6a>
 8012544:	4630      	mov	r0, r6
 8012546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801254a:	bf00      	nop
 801254c:	08015de4 	.word	0x08015de4
 8012550:	08015aea 	.word	0x08015aea
 8012554:	08015bf6 	.word	0x08015bf6

08012558 <__lshift>:
 8012558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801255c:	460c      	mov	r4, r1
 801255e:	6849      	ldr	r1, [r1, #4]
 8012560:	6923      	ldr	r3, [r4, #16]
 8012562:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012566:	68a3      	ldr	r3, [r4, #8]
 8012568:	4607      	mov	r7, r0
 801256a:	4691      	mov	r9, r2
 801256c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012570:	f108 0601 	add.w	r6, r8, #1
 8012574:	42b3      	cmp	r3, r6
 8012576:	db0b      	blt.n	8012590 <__lshift+0x38>
 8012578:	4638      	mov	r0, r7
 801257a:	f7ff fd9d 	bl	80120b8 <_Balloc>
 801257e:	4605      	mov	r5, r0
 8012580:	b948      	cbnz	r0, 8012596 <__lshift+0x3e>
 8012582:	4602      	mov	r2, r0
 8012584:	4b28      	ldr	r3, [pc, #160]	@ (8012628 <__lshift+0xd0>)
 8012586:	4829      	ldr	r0, [pc, #164]	@ (801262c <__lshift+0xd4>)
 8012588:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801258c:	f000 fb3e 	bl	8012c0c <__assert_func>
 8012590:	3101      	adds	r1, #1
 8012592:	005b      	lsls	r3, r3, #1
 8012594:	e7ee      	b.n	8012574 <__lshift+0x1c>
 8012596:	2300      	movs	r3, #0
 8012598:	f100 0114 	add.w	r1, r0, #20
 801259c:	f100 0210 	add.w	r2, r0, #16
 80125a0:	4618      	mov	r0, r3
 80125a2:	4553      	cmp	r3, sl
 80125a4:	db33      	blt.n	801260e <__lshift+0xb6>
 80125a6:	6920      	ldr	r0, [r4, #16]
 80125a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80125ac:	f104 0314 	add.w	r3, r4, #20
 80125b0:	f019 091f 	ands.w	r9, r9, #31
 80125b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80125b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80125bc:	d02b      	beq.n	8012616 <__lshift+0xbe>
 80125be:	f1c9 0e20 	rsb	lr, r9, #32
 80125c2:	468a      	mov	sl, r1
 80125c4:	2200      	movs	r2, #0
 80125c6:	6818      	ldr	r0, [r3, #0]
 80125c8:	fa00 f009 	lsl.w	r0, r0, r9
 80125cc:	4310      	orrs	r0, r2
 80125ce:	f84a 0b04 	str.w	r0, [sl], #4
 80125d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80125d6:	459c      	cmp	ip, r3
 80125d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80125dc:	d8f3      	bhi.n	80125c6 <__lshift+0x6e>
 80125de:	ebac 0304 	sub.w	r3, ip, r4
 80125e2:	3b15      	subs	r3, #21
 80125e4:	f023 0303 	bic.w	r3, r3, #3
 80125e8:	3304      	adds	r3, #4
 80125ea:	f104 0015 	add.w	r0, r4, #21
 80125ee:	4560      	cmp	r0, ip
 80125f0:	bf88      	it	hi
 80125f2:	2304      	movhi	r3, #4
 80125f4:	50ca      	str	r2, [r1, r3]
 80125f6:	b10a      	cbz	r2, 80125fc <__lshift+0xa4>
 80125f8:	f108 0602 	add.w	r6, r8, #2
 80125fc:	3e01      	subs	r6, #1
 80125fe:	4638      	mov	r0, r7
 8012600:	612e      	str	r6, [r5, #16]
 8012602:	4621      	mov	r1, r4
 8012604:	f7ff fd98 	bl	8012138 <_Bfree>
 8012608:	4628      	mov	r0, r5
 801260a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801260e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012612:	3301      	adds	r3, #1
 8012614:	e7c5      	b.n	80125a2 <__lshift+0x4a>
 8012616:	3904      	subs	r1, #4
 8012618:	f853 2b04 	ldr.w	r2, [r3], #4
 801261c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012620:	459c      	cmp	ip, r3
 8012622:	d8f9      	bhi.n	8012618 <__lshift+0xc0>
 8012624:	e7ea      	b.n	80125fc <__lshift+0xa4>
 8012626:	bf00      	nop
 8012628:	08015b59 	.word	0x08015b59
 801262c:	08015bf6 	.word	0x08015bf6

08012630 <__mcmp>:
 8012630:	690a      	ldr	r2, [r1, #16]
 8012632:	4603      	mov	r3, r0
 8012634:	6900      	ldr	r0, [r0, #16]
 8012636:	1a80      	subs	r0, r0, r2
 8012638:	b530      	push	{r4, r5, lr}
 801263a:	d10e      	bne.n	801265a <__mcmp+0x2a>
 801263c:	3314      	adds	r3, #20
 801263e:	3114      	adds	r1, #20
 8012640:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012644:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012648:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801264c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012650:	4295      	cmp	r5, r2
 8012652:	d003      	beq.n	801265c <__mcmp+0x2c>
 8012654:	d205      	bcs.n	8012662 <__mcmp+0x32>
 8012656:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801265a:	bd30      	pop	{r4, r5, pc}
 801265c:	42a3      	cmp	r3, r4
 801265e:	d3f3      	bcc.n	8012648 <__mcmp+0x18>
 8012660:	e7fb      	b.n	801265a <__mcmp+0x2a>
 8012662:	2001      	movs	r0, #1
 8012664:	e7f9      	b.n	801265a <__mcmp+0x2a>
	...

08012668 <__mdiff>:
 8012668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801266c:	4689      	mov	r9, r1
 801266e:	4606      	mov	r6, r0
 8012670:	4611      	mov	r1, r2
 8012672:	4648      	mov	r0, r9
 8012674:	4614      	mov	r4, r2
 8012676:	f7ff ffdb 	bl	8012630 <__mcmp>
 801267a:	1e05      	subs	r5, r0, #0
 801267c:	d112      	bne.n	80126a4 <__mdiff+0x3c>
 801267e:	4629      	mov	r1, r5
 8012680:	4630      	mov	r0, r6
 8012682:	f7ff fd19 	bl	80120b8 <_Balloc>
 8012686:	4602      	mov	r2, r0
 8012688:	b928      	cbnz	r0, 8012696 <__mdiff+0x2e>
 801268a:	4b3f      	ldr	r3, [pc, #252]	@ (8012788 <__mdiff+0x120>)
 801268c:	f240 2137 	movw	r1, #567	@ 0x237
 8012690:	483e      	ldr	r0, [pc, #248]	@ (801278c <__mdiff+0x124>)
 8012692:	f000 fabb 	bl	8012c0c <__assert_func>
 8012696:	2301      	movs	r3, #1
 8012698:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801269c:	4610      	mov	r0, r2
 801269e:	b003      	add	sp, #12
 80126a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126a4:	bfbc      	itt	lt
 80126a6:	464b      	movlt	r3, r9
 80126a8:	46a1      	movlt	r9, r4
 80126aa:	4630      	mov	r0, r6
 80126ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80126b0:	bfba      	itte	lt
 80126b2:	461c      	movlt	r4, r3
 80126b4:	2501      	movlt	r5, #1
 80126b6:	2500      	movge	r5, #0
 80126b8:	f7ff fcfe 	bl	80120b8 <_Balloc>
 80126bc:	4602      	mov	r2, r0
 80126be:	b918      	cbnz	r0, 80126c8 <__mdiff+0x60>
 80126c0:	4b31      	ldr	r3, [pc, #196]	@ (8012788 <__mdiff+0x120>)
 80126c2:	f240 2145 	movw	r1, #581	@ 0x245
 80126c6:	e7e3      	b.n	8012690 <__mdiff+0x28>
 80126c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80126cc:	6926      	ldr	r6, [r4, #16]
 80126ce:	60c5      	str	r5, [r0, #12]
 80126d0:	f109 0310 	add.w	r3, r9, #16
 80126d4:	f109 0514 	add.w	r5, r9, #20
 80126d8:	f104 0e14 	add.w	lr, r4, #20
 80126dc:	f100 0b14 	add.w	fp, r0, #20
 80126e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80126e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80126e8:	9301      	str	r3, [sp, #4]
 80126ea:	46d9      	mov	r9, fp
 80126ec:	f04f 0c00 	mov.w	ip, #0
 80126f0:	9b01      	ldr	r3, [sp, #4]
 80126f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80126f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80126fa:	9301      	str	r3, [sp, #4]
 80126fc:	fa1f f38a 	uxth.w	r3, sl
 8012700:	4619      	mov	r1, r3
 8012702:	b283      	uxth	r3, r0
 8012704:	1acb      	subs	r3, r1, r3
 8012706:	0c00      	lsrs	r0, r0, #16
 8012708:	4463      	add	r3, ip
 801270a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801270e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012712:	b29b      	uxth	r3, r3
 8012714:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012718:	4576      	cmp	r6, lr
 801271a:	f849 3b04 	str.w	r3, [r9], #4
 801271e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012722:	d8e5      	bhi.n	80126f0 <__mdiff+0x88>
 8012724:	1b33      	subs	r3, r6, r4
 8012726:	3b15      	subs	r3, #21
 8012728:	f023 0303 	bic.w	r3, r3, #3
 801272c:	3415      	adds	r4, #21
 801272e:	3304      	adds	r3, #4
 8012730:	42a6      	cmp	r6, r4
 8012732:	bf38      	it	cc
 8012734:	2304      	movcc	r3, #4
 8012736:	441d      	add	r5, r3
 8012738:	445b      	add	r3, fp
 801273a:	461e      	mov	r6, r3
 801273c:	462c      	mov	r4, r5
 801273e:	4544      	cmp	r4, r8
 8012740:	d30e      	bcc.n	8012760 <__mdiff+0xf8>
 8012742:	f108 0103 	add.w	r1, r8, #3
 8012746:	1b49      	subs	r1, r1, r5
 8012748:	f021 0103 	bic.w	r1, r1, #3
 801274c:	3d03      	subs	r5, #3
 801274e:	45a8      	cmp	r8, r5
 8012750:	bf38      	it	cc
 8012752:	2100      	movcc	r1, #0
 8012754:	440b      	add	r3, r1
 8012756:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801275a:	b191      	cbz	r1, 8012782 <__mdiff+0x11a>
 801275c:	6117      	str	r7, [r2, #16]
 801275e:	e79d      	b.n	801269c <__mdiff+0x34>
 8012760:	f854 1b04 	ldr.w	r1, [r4], #4
 8012764:	46e6      	mov	lr, ip
 8012766:	0c08      	lsrs	r0, r1, #16
 8012768:	fa1c fc81 	uxtah	ip, ip, r1
 801276c:	4471      	add	r1, lr
 801276e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012772:	b289      	uxth	r1, r1
 8012774:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012778:	f846 1b04 	str.w	r1, [r6], #4
 801277c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012780:	e7dd      	b.n	801273e <__mdiff+0xd6>
 8012782:	3f01      	subs	r7, #1
 8012784:	e7e7      	b.n	8012756 <__mdiff+0xee>
 8012786:	bf00      	nop
 8012788:	08015b59 	.word	0x08015b59
 801278c:	08015bf6 	.word	0x08015bf6

08012790 <__ulp>:
 8012790:	b082      	sub	sp, #8
 8012792:	ed8d 0b00 	vstr	d0, [sp]
 8012796:	9a01      	ldr	r2, [sp, #4]
 8012798:	4b0f      	ldr	r3, [pc, #60]	@ (80127d8 <__ulp+0x48>)
 801279a:	4013      	ands	r3, r2
 801279c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	dc08      	bgt.n	80127b6 <__ulp+0x26>
 80127a4:	425b      	negs	r3, r3
 80127a6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80127aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80127ae:	da04      	bge.n	80127ba <__ulp+0x2a>
 80127b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80127b4:	4113      	asrs	r3, r2
 80127b6:	2200      	movs	r2, #0
 80127b8:	e008      	b.n	80127cc <__ulp+0x3c>
 80127ba:	f1a2 0314 	sub.w	r3, r2, #20
 80127be:	2b1e      	cmp	r3, #30
 80127c0:	bfda      	itte	le
 80127c2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80127c6:	40da      	lsrle	r2, r3
 80127c8:	2201      	movgt	r2, #1
 80127ca:	2300      	movs	r3, #0
 80127cc:	4619      	mov	r1, r3
 80127ce:	4610      	mov	r0, r2
 80127d0:	ec41 0b10 	vmov	d0, r0, r1
 80127d4:	b002      	add	sp, #8
 80127d6:	4770      	bx	lr
 80127d8:	7ff00000 	.word	0x7ff00000

080127dc <__b2d>:
 80127dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127e0:	6906      	ldr	r6, [r0, #16]
 80127e2:	f100 0814 	add.w	r8, r0, #20
 80127e6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80127ea:	1f37      	subs	r7, r6, #4
 80127ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80127f0:	4610      	mov	r0, r2
 80127f2:	f7ff fd53 	bl	801229c <__hi0bits>
 80127f6:	f1c0 0320 	rsb	r3, r0, #32
 80127fa:	280a      	cmp	r0, #10
 80127fc:	600b      	str	r3, [r1, #0]
 80127fe:	491b      	ldr	r1, [pc, #108]	@ (801286c <__b2d+0x90>)
 8012800:	dc15      	bgt.n	801282e <__b2d+0x52>
 8012802:	f1c0 0c0b 	rsb	ip, r0, #11
 8012806:	fa22 f30c 	lsr.w	r3, r2, ip
 801280a:	45b8      	cmp	r8, r7
 801280c:	ea43 0501 	orr.w	r5, r3, r1
 8012810:	bf34      	ite	cc
 8012812:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012816:	2300      	movcs	r3, #0
 8012818:	3015      	adds	r0, #21
 801281a:	fa02 f000 	lsl.w	r0, r2, r0
 801281e:	fa23 f30c 	lsr.w	r3, r3, ip
 8012822:	4303      	orrs	r3, r0
 8012824:	461c      	mov	r4, r3
 8012826:	ec45 4b10 	vmov	d0, r4, r5
 801282a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801282e:	45b8      	cmp	r8, r7
 8012830:	bf3a      	itte	cc
 8012832:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012836:	f1a6 0708 	subcc.w	r7, r6, #8
 801283a:	2300      	movcs	r3, #0
 801283c:	380b      	subs	r0, #11
 801283e:	d012      	beq.n	8012866 <__b2d+0x8a>
 8012840:	f1c0 0120 	rsb	r1, r0, #32
 8012844:	fa23 f401 	lsr.w	r4, r3, r1
 8012848:	4082      	lsls	r2, r0
 801284a:	4322      	orrs	r2, r4
 801284c:	4547      	cmp	r7, r8
 801284e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012852:	bf8c      	ite	hi
 8012854:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012858:	2200      	movls	r2, #0
 801285a:	4083      	lsls	r3, r0
 801285c:	40ca      	lsrs	r2, r1
 801285e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012862:	4313      	orrs	r3, r2
 8012864:	e7de      	b.n	8012824 <__b2d+0x48>
 8012866:	ea42 0501 	orr.w	r5, r2, r1
 801286a:	e7db      	b.n	8012824 <__b2d+0x48>
 801286c:	3ff00000 	.word	0x3ff00000

08012870 <__d2b>:
 8012870:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012874:	460f      	mov	r7, r1
 8012876:	2101      	movs	r1, #1
 8012878:	ec59 8b10 	vmov	r8, r9, d0
 801287c:	4616      	mov	r6, r2
 801287e:	f7ff fc1b 	bl	80120b8 <_Balloc>
 8012882:	4604      	mov	r4, r0
 8012884:	b930      	cbnz	r0, 8012894 <__d2b+0x24>
 8012886:	4602      	mov	r2, r0
 8012888:	4b23      	ldr	r3, [pc, #140]	@ (8012918 <__d2b+0xa8>)
 801288a:	4824      	ldr	r0, [pc, #144]	@ (801291c <__d2b+0xac>)
 801288c:	f240 310f 	movw	r1, #783	@ 0x30f
 8012890:	f000 f9bc 	bl	8012c0c <__assert_func>
 8012894:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012898:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801289c:	b10d      	cbz	r5, 80128a2 <__d2b+0x32>
 801289e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80128a2:	9301      	str	r3, [sp, #4]
 80128a4:	f1b8 0300 	subs.w	r3, r8, #0
 80128a8:	d023      	beq.n	80128f2 <__d2b+0x82>
 80128aa:	4668      	mov	r0, sp
 80128ac:	9300      	str	r3, [sp, #0]
 80128ae:	f7ff fd14 	bl	80122da <__lo0bits>
 80128b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80128b6:	b1d0      	cbz	r0, 80128ee <__d2b+0x7e>
 80128b8:	f1c0 0320 	rsb	r3, r0, #32
 80128bc:	fa02 f303 	lsl.w	r3, r2, r3
 80128c0:	430b      	orrs	r3, r1
 80128c2:	40c2      	lsrs	r2, r0
 80128c4:	6163      	str	r3, [r4, #20]
 80128c6:	9201      	str	r2, [sp, #4]
 80128c8:	9b01      	ldr	r3, [sp, #4]
 80128ca:	61a3      	str	r3, [r4, #24]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	bf0c      	ite	eq
 80128d0:	2201      	moveq	r2, #1
 80128d2:	2202      	movne	r2, #2
 80128d4:	6122      	str	r2, [r4, #16]
 80128d6:	b1a5      	cbz	r5, 8012902 <__d2b+0x92>
 80128d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80128dc:	4405      	add	r5, r0
 80128de:	603d      	str	r5, [r7, #0]
 80128e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80128e4:	6030      	str	r0, [r6, #0]
 80128e6:	4620      	mov	r0, r4
 80128e8:	b003      	add	sp, #12
 80128ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128ee:	6161      	str	r1, [r4, #20]
 80128f0:	e7ea      	b.n	80128c8 <__d2b+0x58>
 80128f2:	a801      	add	r0, sp, #4
 80128f4:	f7ff fcf1 	bl	80122da <__lo0bits>
 80128f8:	9b01      	ldr	r3, [sp, #4]
 80128fa:	6163      	str	r3, [r4, #20]
 80128fc:	3020      	adds	r0, #32
 80128fe:	2201      	movs	r2, #1
 8012900:	e7e8      	b.n	80128d4 <__d2b+0x64>
 8012902:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012906:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801290a:	6038      	str	r0, [r7, #0]
 801290c:	6918      	ldr	r0, [r3, #16]
 801290e:	f7ff fcc5 	bl	801229c <__hi0bits>
 8012912:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012916:	e7e5      	b.n	80128e4 <__d2b+0x74>
 8012918:	08015b59 	.word	0x08015b59
 801291c:	08015bf6 	.word	0x08015bf6

08012920 <__ratio>:
 8012920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012924:	b085      	sub	sp, #20
 8012926:	e9cd 1000 	strd	r1, r0, [sp]
 801292a:	a902      	add	r1, sp, #8
 801292c:	f7ff ff56 	bl	80127dc <__b2d>
 8012930:	9800      	ldr	r0, [sp, #0]
 8012932:	a903      	add	r1, sp, #12
 8012934:	ec55 4b10 	vmov	r4, r5, d0
 8012938:	f7ff ff50 	bl	80127dc <__b2d>
 801293c:	9b01      	ldr	r3, [sp, #4]
 801293e:	6919      	ldr	r1, [r3, #16]
 8012940:	9b00      	ldr	r3, [sp, #0]
 8012942:	691b      	ldr	r3, [r3, #16]
 8012944:	1ac9      	subs	r1, r1, r3
 8012946:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801294a:	1a9b      	subs	r3, r3, r2
 801294c:	ec5b ab10 	vmov	sl, fp, d0
 8012950:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012954:	2b00      	cmp	r3, #0
 8012956:	bfce      	itee	gt
 8012958:	462a      	movgt	r2, r5
 801295a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801295e:	465a      	movle	r2, fp
 8012960:	462f      	mov	r7, r5
 8012962:	46d9      	mov	r9, fp
 8012964:	bfcc      	ite	gt
 8012966:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801296a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801296e:	464b      	mov	r3, r9
 8012970:	4652      	mov	r2, sl
 8012972:	4620      	mov	r0, r4
 8012974:	4639      	mov	r1, r7
 8012976:	f7ed ff89 	bl	800088c <__aeabi_ddiv>
 801297a:	ec41 0b10 	vmov	d0, r0, r1
 801297e:	b005      	add	sp, #20
 8012980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012984 <__copybits>:
 8012984:	3901      	subs	r1, #1
 8012986:	b570      	push	{r4, r5, r6, lr}
 8012988:	1149      	asrs	r1, r1, #5
 801298a:	6914      	ldr	r4, [r2, #16]
 801298c:	3101      	adds	r1, #1
 801298e:	f102 0314 	add.w	r3, r2, #20
 8012992:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012996:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801299a:	1f05      	subs	r5, r0, #4
 801299c:	42a3      	cmp	r3, r4
 801299e:	d30c      	bcc.n	80129ba <__copybits+0x36>
 80129a0:	1aa3      	subs	r3, r4, r2
 80129a2:	3b11      	subs	r3, #17
 80129a4:	f023 0303 	bic.w	r3, r3, #3
 80129a8:	3211      	adds	r2, #17
 80129aa:	42a2      	cmp	r2, r4
 80129ac:	bf88      	it	hi
 80129ae:	2300      	movhi	r3, #0
 80129b0:	4418      	add	r0, r3
 80129b2:	2300      	movs	r3, #0
 80129b4:	4288      	cmp	r0, r1
 80129b6:	d305      	bcc.n	80129c4 <__copybits+0x40>
 80129b8:	bd70      	pop	{r4, r5, r6, pc}
 80129ba:	f853 6b04 	ldr.w	r6, [r3], #4
 80129be:	f845 6f04 	str.w	r6, [r5, #4]!
 80129c2:	e7eb      	b.n	801299c <__copybits+0x18>
 80129c4:	f840 3b04 	str.w	r3, [r0], #4
 80129c8:	e7f4      	b.n	80129b4 <__copybits+0x30>

080129ca <__any_on>:
 80129ca:	f100 0214 	add.w	r2, r0, #20
 80129ce:	6900      	ldr	r0, [r0, #16]
 80129d0:	114b      	asrs	r3, r1, #5
 80129d2:	4298      	cmp	r0, r3
 80129d4:	b510      	push	{r4, lr}
 80129d6:	db11      	blt.n	80129fc <__any_on+0x32>
 80129d8:	dd0a      	ble.n	80129f0 <__any_on+0x26>
 80129da:	f011 011f 	ands.w	r1, r1, #31
 80129de:	d007      	beq.n	80129f0 <__any_on+0x26>
 80129e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80129e4:	fa24 f001 	lsr.w	r0, r4, r1
 80129e8:	fa00 f101 	lsl.w	r1, r0, r1
 80129ec:	428c      	cmp	r4, r1
 80129ee:	d10b      	bne.n	8012a08 <__any_on+0x3e>
 80129f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80129f4:	4293      	cmp	r3, r2
 80129f6:	d803      	bhi.n	8012a00 <__any_on+0x36>
 80129f8:	2000      	movs	r0, #0
 80129fa:	bd10      	pop	{r4, pc}
 80129fc:	4603      	mov	r3, r0
 80129fe:	e7f7      	b.n	80129f0 <__any_on+0x26>
 8012a00:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012a04:	2900      	cmp	r1, #0
 8012a06:	d0f5      	beq.n	80129f4 <__any_on+0x2a>
 8012a08:	2001      	movs	r0, #1
 8012a0a:	e7f6      	b.n	80129fa <__any_on+0x30>

08012a0c <__submore>:
 8012a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a10:	460c      	mov	r4, r1
 8012a12:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012a14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012a18:	4299      	cmp	r1, r3
 8012a1a:	d11d      	bne.n	8012a58 <__submore+0x4c>
 8012a1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012a20:	f7fb fedc 	bl	800e7dc <_malloc_r>
 8012a24:	b918      	cbnz	r0, 8012a2e <__submore+0x22>
 8012a26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012a32:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012a34:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012a38:	6360      	str	r0, [r4, #52]	@ 0x34
 8012a3a:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012a3e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012a42:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012a46:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012a4a:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012a4e:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012a52:	6020      	str	r0, [r4, #0]
 8012a54:	2000      	movs	r0, #0
 8012a56:	e7e8      	b.n	8012a2a <__submore+0x1e>
 8012a58:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012a5a:	0077      	lsls	r7, r6, #1
 8012a5c:	463a      	mov	r2, r7
 8012a5e:	f000 f80f 	bl	8012a80 <_realloc_r>
 8012a62:	4605      	mov	r5, r0
 8012a64:	2800      	cmp	r0, #0
 8012a66:	d0de      	beq.n	8012a26 <__submore+0x1a>
 8012a68:	eb00 0806 	add.w	r8, r0, r6
 8012a6c:	4601      	mov	r1, r0
 8012a6e:	4632      	mov	r2, r6
 8012a70:	4640      	mov	r0, r8
 8012a72:	f7fd fbb1 	bl	80101d8 <memcpy>
 8012a76:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012a7a:	f8c4 8000 	str.w	r8, [r4]
 8012a7e:	e7e9      	b.n	8012a54 <__submore+0x48>

08012a80 <_realloc_r>:
 8012a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a84:	4607      	mov	r7, r0
 8012a86:	4614      	mov	r4, r2
 8012a88:	460d      	mov	r5, r1
 8012a8a:	b921      	cbnz	r1, 8012a96 <_realloc_r+0x16>
 8012a8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a90:	4611      	mov	r1, r2
 8012a92:	f7fb bea3 	b.w	800e7dc <_malloc_r>
 8012a96:	b92a      	cbnz	r2, 8012aa4 <_realloc_r+0x24>
 8012a98:	f7fe fa16 	bl	8010ec8 <_free_r>
 8012a9c:	4625      	mov	r5, r4
 8012a9e:	4628      	mov	r0, r5
 8012aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aa4:	f000 f8d0 	bl	8012c48 <_malloc_usable_size_r>
 8012aa8:	4284      	cmp	r4, r0
 8012aaa:	4606      	mov	r6, r0
 8012aac:	d802      	bhi.n	8012ab4 <_realloc_r+0x34>
 8012aae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012ab2:	d8f4      	bhi.n	8012a9e <_realloc_r+0x1e>
 8012ab4:	4621      	mov	r1, r4
 8012ab6:	4638      	mov	r0, r7
 8012ab8:	f7fb fe90 	bl	800e7dc <_malloc_r>
 8012abc:	4680      	mov	r8, r0
 8012abe:	b908      	cbnz	r0, 8012ac4 <_realloc_r+0x44>
 8012ac0:	4645      	mov	r5, r8
 8012ac2:	e7ec      	b.n	8012a9e <_realloc_r+0x1e>
 8012ac4:	42b4      	cmp	r4, r6
 8012ac6:	4622      	mov	r2, r4
 8012ac8:	4629      	mov	r1, r5
 8012aca:	bf28      	it	cs
 8012acc:	4632      	movcs	r2, r6
 8012ace:	f7fd fb83 	bl	80101d8 <memcpy>
 8012ad2:	4629      	mov	r1, r5
 8012ad4:	4638      	mov	r0, r7
 8012ad6:	f7fe f9f7 	bl	8010ec8 <_free_r>
 8012ada:	e7f1      	b.n	8012ac0 <_realloc_r+0x40>

08012adc <_strtoul_l.isra.0>:
 8012adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ae0:	4e34      	ldr	r6, [pc, #208]	@ (8012bb4 <_strtoul_l.isra.0+0xd8>)
 8012ae2:	4686      	mov	lr, r0
 8012ae4:	460d      	mov	r5, r1
 8012ae6:	4628      	mov	r0, r5
 8012ae8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012aec:	5d37      	ldrb	r7, [r6, r4]
 8012aee:	f017 0708 	ands.w	r7, r7, #8
 8012af2:	d1f8      	bne.n	8012ae6 <_strtoul_l.isra.0+0xa>
 8012af4:	2c2d      	cmp	r4, #45	@ 0x2d
 8012af6:	d110      	bne.n	8012b1a <_strtoul_l.isra.0+0x3e>
 8012af8:	782c      	ldrb	r4, [r5, #0]
 8012afa:	2701      	movs	r7, #1
 8012afc:	1c85      	adds	r5, r0, #2
 8012afe:	f033 0010 	bics.w	r0, r3, #16
 8012b02:	d115      	bne.n	8012b30 <_strtoul_l.isra.0+0x54>
 8012b04:	2c30      	cmp	r4, #48	@ 0x30
 8012b06:	d10d      	bne.n	8012b24 <_strtoul_l.isra.0+0x48>
 8012b08:	7828      	ldrb	r0, [r5, #0]
 8012b0a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012b0e:	2858      	cmp	r0, #88	@ 0x58
 8012b10:	d108      	bne.n	8012b24 <_strtoul_l.isra.0+0x48>
 8012b12:	786c      	ldrb	r4, [r5, #1]
 8012b14:	3502      	adds	r5, #2
 8012b16:	2310      	movs	r3, #16
 8012b18:	e00a      	b.n	8012b30 <_strtoul_l.isra.0+0x54>
 8012b1a:	2c2b      	cmp	r4, #43	@ 0x2b
 8012b1c:	bf04      	itt	eq
 8012b1e:	782c      	ldrbeq	r4, [r5, #0]
 8012b20:	1c85      	addeq	r5, r0, #2
 8012b22:	e7ec      	b.n	8012afe <_strtoul_l.isra.0+0x22>
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d1f6      	bne.n	8012b16 <_strtoul_l.isra.0+0x3a>
 8012b28:	2c30      	cmp	r4, #48	@ 0x30
 8012b2a:	bf14      	ite	ne
 8012b2c:	230a      	movne	r3, #10
 8012b2e:	2308      	moveq	r3, #8
 8012b30:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8012b34:	2600      	movs	r6, #0
 8012b36:	fbb8 f8f3 	udiv	r8, r8, r3
 8012b3a:	fb03 f908 	mul.w	r9, r3, r8
 8012b3e:	ea6f 0909 	mvn.w	r9, r9
 8012b42:	4630      	mov	r0, r6
 8012b44:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012b48:	f1bc 0f09 	cmp.w	ip, #9
 8012b4c:	d810      	bhi.n	8012b70 <_strtoul_l.isra.0+0x94>
 8012b4e:	4664      	mov	r4, ip
 8012b50:	42a3      	cmp	r3, r4
 8012b52:	dd1e      	ble.n	8012b92 <_strtoul_l.isra.0+0xb6>
 8012b54:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8012b58:	d007      	beq.n	8012b6a <_strtoul_l.isra.0+0x8e>
 8012b5a:	4580      	cmp	r8, r0
 8012b5c:	d316      	bcc.n	8012b8c <_strtoul_l.isra.0+0xb0>
 8012b5e:	d101      	bne.n	8012b64 <_strtoul_l.isra.0+0x88>
 8012b60:	45a1      	cmp	r9, r4
 8012b62:	db13      	blt.n	8012b8c <_strtoul_l.isra.0+0xb0>
 8012b64:	fb00 4003 	mla	r0, r0, r3, r4
 8012b68:	2601      	movs	r6, #1
 8012b6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b6e:	e7e9      	b.n	8012b44 <_strtoul_l.isra.0+0x68>
 8012b70:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012b74:	f1bc 0f19 	cmp.w	ip, #25
 8012b78:	d801      	bhi.n	8012b7e <_strtoul_l.isra.0+0xa2>
 8012b7a:	3c37      	subs	r4, #55	@ 0x37
 8012b7c:	e7e8      	b.n	8012b50 <_strtoul_l.isra.0+0x74>
 8012b7e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012b82:	f1bc 0f19 	cmp.w	ip, #25
 8012b86:	d804      	bhi.n	8012b92 <_strtoul_l.isra.0+0xb6>
 8012b88:	3c57      	subs	r4, #87	@ 0x57
 8012b8a:	e7e1      	b.n	8012b50 <_strtoul_l.isra.0+0x74>
 8012b8c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8012b90:	e7eb      	b.n	8012b6a <_strtoul_l.isra.0+0x8e>
 8012b92:	1c73      	adds	r3, r6, #1
 8012b94:	d106      	bne.n	8012ba4 <_strtoul_l.isra.0+0xc8>
 8012b96:	2322      	movs	r3, #34	@ 0x22
 8012b98:	f8ce 3000 	str.w	r3, [lr]
 8012b9c:	4630      	mov	r0, r6
 8012b9e:	b932      	cbnz	r2, 8012bae <_strtoul_l.isra.0+0xd2>
 8012ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ba4:	b107      	cbz	r7, 8012ba8 <_strtoul_l.isra.0+0xcc>
 8012ba6:	4240      	negs	r0, r0
 8012ba8:	2a00      	cmp	r2, #0
 8012baa:	d0f9      	beq.n	8012ba0 <_strtoul_l.isra.0+0xc4>
 8012bac:	b106      	cbz	r6, 8012bb0 <_strtoul_l.isra.0+0xd4>
 8012bae:	1e69      	subs	r1, r5, #1
 8012bb0:	6011      	str	r1, [r2, #0]
 8012bb2:	e7f5      	b.n	8012ba0 <_strtoul_l.isra.0+0xc4>
 8012bb4:	08015ce1 	.word	0x08015ce1

08012bb8 <_strtoul_r>:
 8012bb8:	f7ff bf90 	b.w	8012adc <_strtoul_l.isra.0>

08012bbc <__ascii_wctomb>:
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	4608      	mov	r0, r1
 8012bc0:	b141      	cbz	r1, 8012bd4 <__ascii_wctomb+0x18>
 8012bc2:	2aff      	cmp	r2, #255	@ 0xff
 8012bc4:	d904      	bls.n	8012bd0 <__ascii_wctomb+0x14>
 8012bc6:	228a      	movs	r2, #138	@ 0x8a
 8012bc8:	601a      	str	r2, [r3, #0]
 8012bca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012bce:	4770      	bx	lr
 8012bd0:	700a      	strb	r2, [r1, #0]
 8012bd2:	2001      	movs	r0, #1
 8012bd4:	4770      	bx	lr

08012bd6 <memmove>:
 8012bd6:	4288      	cmp	r0, r1
 8012bd8:	b510      	push	{r4, lr}
 8012bda:	eb01 0402 	add.w	r4, r1, r2
 8012bde:	d902      	bls.n	8012be6 <memmove+0x10>
 8012be0:	4284      	cmp	r4, r0
 8012be2:	4623      	mov	r3, r4
 8012be4:	d807      	bhi.n	8012bf6 <memmove+0x20>
 8012be6:	1e43      	subs	r3, r0, #1
 8012be8:	42a1      	cmp	r1, r4
 8012bea:	d008      	beq.n	8012bfe <memmove+0x28>
 8012bec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012bf0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012bf4:	e7f8      	b.n	8012be8 <memmove+0x12>
 8012bf6:	4402      	add	r2, r0
 8012bf8:	4601      	mov	r1, r0
 8012bfa:	428a      	cmp	r2, r1
 8012bfc:	d100      	bne.n	8012c00 <memmove+0x2a>
 8012bfe:	bd10      	pop	{r4, pc}
 8012c00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012c04:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012c08:	e7f7      	b.n	8012bfa <memmove+0x24>
	...

08012c0c <__assert_func>:
 8012c0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012c0e:	4614      	mov	r4, r2
 8012c10:	461a      	mov	r2, r3
 8012c12:	4b09      	ldr	r3, [pc, #36]	@ (8012c38 <__assert_func+0x2c>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	4605      	mov	r5, r0
 8012c18:	68d8      	ldr	r0, [r3, #12]
 8012c1a:	b14c      	cbz	r4, 8012c30 <__assert_func+0x24>
 8012c1c:	4b07      	ldr	r3, [pc, #28]	@ (8012c3c <__assert_func+0x30>)
 8012c1e:	9100      	str	r1, [sp, #0]
 8012c20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012c24:	4906      	ldr	r1, [pc, #24]	@ (8012c40 <__assert_func+0x34>)
 8012c26:	462b      	mov	r3, r5
 8012c28:	f000 f816 	bl	8012c58 <fiprintf>
 8012c2c:	f000 f826 	bl	8012c7c <abort>
 8012c30:	4b04      	ldr	r3, [pc, #16]	@ (8012c44 <__assert_func+0x38>)
 8012c32:	461c      	mov	r4, r3
 8012c34:	e7f3      	b.n	8012c1e <__assert_func+0x12>
 8012c36:	bf00      	nop
 8012c38:	200001c4 	.word	0x200001c4
 8012c3c:	08015c4f 	.word	0x08015c4f
 8012c40:	08015c5c 	.word	0x08015c5c
 8012c44:	08015c8a 	.word	0x08015c8a

08012c48 <_malloc_usable_size_r>:
 8012c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c4c:	1f18      	subs	r0, r3, #4
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	bfbc      	itt	lt
 8012c52:	580b      	ldrlt	r3, [r1, r0]
 8012c54:	18c0      	addlt	r0, r0, r3
 8012c56:	4770      	bx	lr

08012c58 <fiprintf>:
 8012c58:	b40e      	push	{r1, r2, r3}
 8012c5a:	b503      	push	{r0, r1, lr}
 8012c5c:	4601      	mov	r1, r0
 8012c5e:	ab03      	add	r3, sp, #12
 8012c60:	4805      	ldr	r0, [pc, #20]	@ (8012c78 <fiprintf+0x20>)
 8012c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c66:	6800      	ldr	r0, [r0, #0]
 8012c68:	9301      	str	r3, [sp, #4]
 8012c6a:	f000 f837 	bl	8012cdc <_vfiprintf_r>
 8012c6e:	b002      	add	sp, #8
 8012c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c74:	b003      	add	sp, #12
 8012c76:	4770      	bx	lr
 8012c78:	200001c4 	.word	0x200001c4

08012c7c <abort>:
 8012c7c:	b508      	push	{r3, lr}
 8012c7e:	2006      	movs	r0, #6
 8012c80:	f000 fa62 	bl	8013148 <raise>
 8012c84:	2001      	movs	r0, #1
 8012c86:	f7f5 fc69 	bl	800855c <_exit>

08012c8a <__sfputc_r>:
 8012c8a:	6893      	ldr	r3, [r2, #8]
 8012c8c:	3b01      	subs	r3, #1
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	b410      	push	{r4}
 8012c92:	6093      	str	r3, [r2, #8]
 8012c94:	da08      	bge.n	8012ca8 <__sfputc_r+0x1e>
 8012c96:	6994      	ldr	r4, [r2, #24]
 8012c98:	42a3      	cmp	r3, r4
 8012c9a:	db01      	blt.n	8012ca0 <__sfputc_r+0x16>
 8012c9c:	290a      	cmp	r1, #10
 8012c9e:	d103      	bne.n	8012ca8 <__sfputc_r+0x1e>
 8012ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ca4:	f000 b932 	b.w	8012f0c <__swbuf_r>
 8012ca8:	6813      	ldr	r3, [r2, #0]
 8012caa:	1c58      	adds	r0, r3, #1
 8012cac:	6010      	str	r0, [r2, #0]
 8012cae:	7019      	strb	r1, [r3, #0]
 8012cb0:	4608      	mov	r0, r1
 8012cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cb6:	4770      	bx	lr

08012cb8 <__sfputs_r>:
 8012cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cba:	4606      	mov	r6, r0
 8012cbc:	460f      	mov	r7, r1
 8012cbe:	4614      	mov	r4, r2
 8012cc0:	18d5      	adds	r5, r2, r3
 8012cc2:	42ac      	cmp	r4, r5
 8012cc4:	d101      	bne.n	8012cca <__sfputs_r+0x12>
 8012cc6:	2000      	movs	r0, #0
 8012cc8:	e007      	b.n	8012cda <__sfputs_r+0x22>
 8012cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cce:	463a      	mov	r2, r7
 8012cd0:	4630      	mov	r0, r6
 8012cd2:	f7ff ffda 	bl	8012c8a <__sfputc_r>
 8012cd6:	1c43      	adds	r3, r0, #1
 8012cd8:	d1f3      	bne.n	8012cc2 <__sfputs_r+0xa>
 8012cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012cdc <_vfiprintf_r>:
 8012cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ce0:	460d      	mov	r5, r1
 8012ce2:	b09d      	sub	sp, #116	@ 0x74
 8012ce4:	4614      	mov	r4, r2
 8012ce6:	4698      	mov	r8, r3
 8012ce8:	4606      	mov	r6, r0
 8012cea:	b118      	cbz	r0, 8012cf4 <_vfiprintf_r+0x18>
 8012cec:	6a03      	ldr	r3, [r0, #32]
 8012cee:	b90b      	cbnz	r3, 8012cf4 <_vfiprintf_r+0x18>
 8012cf0:	f7fc faf0 	bl	800f2d4 <__sinit>
 8012cf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012cf6:	07d9      	lsls	r1, r3, #31
 8012cf8:	d405      	bmi.n	8012d06 <_vfiprintf_r+0x2a>
 8012cfa:	89ab      	ldrh	r3, [r5, #12]
 8012cfc:	059a      	lsls	r2, r3, #22
 8012cfe:	d402      	bmi.n	8012d06 <_vfiprintf_r+0x2a>
 8012d00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d02:	f7fd fa52 	bl	80101aa <__retarget_lock_acquire_recursive>
 8012d06:	89ab      	ldrh	r3, [r5, #12]
 8012d08:	071b      	lsls	r3, r3, #28
 8012d0a:	d501      	bpl.n	8012d10 <_vfiprintf_r+0x34>
 8012d0c:	692b      	ldr	r3, [r5, #16]
 8012d0e:	b99b      	cbnz	r3, 8012d38 <_vfiprintf_r+0x5c>
 8012d10:	4629      	mov	r1, r5
 8012d12:	4630      	mov	r0, r6
 8012d14:	f000 f938 	bl	8012f88 <__swsetup_r>
 8012d18:	b170      	cbz	r0, 8012d38 <_vfiprintf_r+0x5c>
 8012d1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012d1c:	07dc      	lsls	r4, r3, #31
 8012d1e:	d504      	bpl.n	8012d2a <_vfiprintf_r+0x4e>
 8012d20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012d24:	b01d      	add	sp, #116	@ 0x74
 8012d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d2a:	89ab      	ldrh	r3, [r5, #12]
 8012d2c:	0598      	lsls	r0, r3, #22
 8012d2e:	d4f7      	bmi.n	8012d20 <_vfiprintf_r+0x44>
 8012d30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d32:	f7fd fa3b 	bl	80101ac <__retarget_lock_release_recursive>
 8012d36:	e7f3      	b.n	8012d20 <_vfiprintf_r+0x44>
 8012d38:	2300      	movs	r3, #0
 8012d3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d3c:	2320      	movs	r3, #32
 8012d3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012d42:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d46:	2330      	movs	r3, #48	@ 0x30
 8012d48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012ef8 <_vfiprintf_r+0x21c>
 8012d4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012d50:	f04f 0901 	mov.w	r9, #1
 8012d54:	4623      	mov	r3, r4
 8012d56:	469a      	mov	sl, r3
 8012d58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d5c:	b10a      	cbz	r2, 8012d62 <_vfiprintf_r+0x86>
 8012d5e:	2a25      	cmp	r2, #37	@ 0x25
 8012d60:	d1f9      	bne.n	8012d56 <_vfiprintf_r+0x7a>
 8012d62:	ebba 0b04 	subs.w	fp, sl, r4
 8012d66:	d00b      	beq.n	8012d80 <_vfiprintf_r+0xa4>
 8012d68:	465b      	mov	r3, fp
 8012d6a:	4622      	mov	r2, r4
 8012d6c:	4629      	mov	r1, r5
 8012d6e:	4630      	mov	r0, r6
 8012d70:	f7ff ffa2 	bl	8012cb8 <__sfputs_r>
 8012d74:	3001      	adds	r0, #1
 8012d76:	f000 80a7 	beq.w	8012ec8 <_vfiprintf_r+0x1ec>
 8012d7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d7c:	445a      	add	r2, fp
 8012d7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012d80:	f89a 3000 	ldrb.w	r3, [sl]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	f000 809f 	beq.w	8012ec8 <_vfiprintf_r+0x1ec>
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012d90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d94:	f10a 0a01 	add.w	sl, sl, #1
 8012d98:	9304      	str	r3, [sp, #16]
 8012d9a:	9307      	str	r3, [sp, #28]
 8012d9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012da0:	931a      	str	r3, [sp, #104]	@ 0x68
 8012da2:	4654      	mov	r4, sl
 8012da4:	2205      	movs	r2, #5
 8012da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012daa:	4853      	ldr	r0, [pc, #332]	@ (8012ef8 <_vfiprintf_r+0x21c>)
 8012dac:	f7ed fa30 	bl	8000210 <memchr>
 8012db0:	9a04      	ldr	r2, [sp, #16]
 8012db2:	b9d8      	cbnz	r0, 8012dec <_vfiprintf_r+0x110>
 8012db4:	06d1      	lsls	r1, r2, #27
 8012db6:	bf44      	itt	mi
 8012db8:	2320      	movmi	r3, #32
 8012dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012dbe:	0713      	lsls	r3, r2, #28
 8012dc0:	bf44      	itt	mi
 8012dc2:	232b      	movmi	r3, #43	@ 0x2b
 8012dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012dc8:	f89a 3000 	ldrb.w	r3, [sl]
 8012dcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8012dce:	d015      	beq.n	8012dfc <_vfiprintf_r+0x120>
 8012dd0:	9a07      	ldr	r2, [sp, #28]
 8012dd2:	4654      	mov	r4, sl
 8012dd4:	2000      	movs	r0, #0
 8012dd6:	f04f 0c0a 	mov.w	ip, #10
 8012dda:	4621      	mov	r1, r4
 8012ddc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012de0:	3b30      	subs	r3, #48	@ 0x30
 8012de2:	2b09      	cmp	r3, #9
 8012de4:	d94b      	bls.n	8012e7e <_vfiprintf_r+0x1a2>
 8012de6:	b1b0      	cbz	r0, 8012e16 <_vfiprintf_r+0x13a>
 8012de8:	9207      	str	r2, [sp, #28]
 8012dea:	e014      	b.n	8012e16 <_vfiprintf_r+0x13a>
 8012dec:	eba0 0308 	sub.w	r3, r0, r8
 8012df0:	fa09 f303 	lsl.w	r3, r9, r3
 8012df4:	4313      	orrs	r3, r2
 8012df6:	9304      	str	r3, [sp, #16]
 8012df8:	46a2      	mov	sl, r4
 8012dfa:	e7d2      	b.n	8012da2 <_vfiprintf_r+0xc6>
 8012dfc:	9b03      	ldr	r3, [sp, #12]
 8012dfe:	1d19      	adds	r1, r3, #4
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	9103      	str	r1, [sp, #12]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	bfbb      	ittet	lt
 8012e08:	425b      	neglt	r3, r3
 8012e0a:	f042 0202 	orrlt.w	r2, r2, #2
 8012e0e:	9307      	strge	r3, [sp, #28]
 8012e10:	9307      	strlt	r3, [sp, #28]
 8012e12:	bfb8      	it	lt
 8012e14:	9204      	strlt	r2, [sp, #16]
 8012e16:	7823      	ldrb	r3, [r4, #0]
 8012e18:	2b2e      	cmp	r3, #46	@ 0x2e
 8012e1a:	d10a      	bne.n	8012e32 <_vfiprintf_r+0x156>
 8012e1c:	7863      	ldrb	r3, [r4, #1]
 8012e1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e20:	d132      	bne.n	8012e88 <_vfiprintf_r+0x1ac>
 8012e22:	9b03      	ldr	r3, [sp, #12]
 8012e24:	1d1a      	adds	r2, r3, #4
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	9203      	str	r2, [sp, #12]
 8012e2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012e2e:	3402      	adds	r4, #2
 8012e30:	9305      	str	r3, [sp, #20]
 8012e32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012f08 <_vfiprintf_r+0x22c>
 8012e36:	7821      	ldrb	r1, [r4, #0]
 8012e38:	2203      	movs	r2, #3
 8012e3a:	4650      	mov	r0, sl
 8012e3c:	f7ed f9e8 	bl	8000210 <memchr>
 8012e40:	b138      	cbz	r0, 8012e52 <_vfiprintf_r+0x176>
 8012e42:	9b04      	ldr	r3, [sp, #16]
 8012e44:	eba0 000a 	sub.w	r0, r0, sl
 8012e48:	2240      	movs	r2, #64	@ 0x40
 8012e4a:	4082      	lsls	r2, r0
 8012e4c:	4313      	orrs	r3, r2
 8012e4e:	3401      	adds	r4, #1
 8012e50:	9304      	str	r3, [sp, #16]
 8012e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e56:	4829      	ldr	r0, [pc, #164]	@ (8012efc <_vfiprintf_r+0x220>)
 8012e58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012e5c:	2206      	movs	r2, #6
 8012e5e:	f7ed f9d7 	bl	8000210 <memchr>
 8012e62:	2800      	cmp	r0, #0
 8012e64:	d03f      	beq.n	8012ee6 <_vfiprintf_r+0x20a>
 8012e66:	4b26      	ldr	r3, [pc, #152]	@ (8012f00 <_vfiprintf_r+0x224>)
 8012e68:	bb1b      	cbnz	r3, 8012eb2 <_vfiprintf_r+0x1d6>
 8012e6a:	9b03      	ldr	r3, [sp, #12]
 8012e6c:	3307      	adds	r3, #7
 8012e6e:	f023 0307 	bic.w	r3, r3, #7
 8012e72:	3308      	adds	r3, #8
 8012e74:	9303      	str	r3, [sp, #12]
 8012e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e78:	443b      	add	r3, r7
 8012e7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e7c:	e76a      	b.n	8012d54 <_vfiprintf_r+0x78>
 8012e7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e82:	460c      	mov	r4, r1
 8012e84:	2001      	movs	r0, #1
 8012e86:	e7a8      	b.n	8012dda <_vfiprintf_r+0xfe>
 8012e88:	2300      	movs	r3, #0
 8012e8a:	3401      	adds	r4, #1
 8012e8c:	9305      	str	r3, [sp, #20]
 8012e8e:	4619      	mov	r1, r3
 8012e90:	f04f 0c0a 	mov.w	ip, #10
 8012e94:	4620      	mov	r0, r4
 8012e96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e9a:	3a30      	subs	r2, #48	@ 0x30
 8012e9c:	2a09      	cmp	r2, #9
 8012e9e:	d903      	bls.n	8012ea8 <_vfiprintf_r+0x1cc>
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d0c6      	beq.n	8012e32 <_vfiprintf_r+0x156>
 8012ea4:	9105      	str	r1, [sp, #20]
 8012ea6:	e7c4      	b.n	8012e32 <_vfiprintf_r+0x156>
 8012ea8:	fb0c 2101 	mla	r1, ip, r1, r2
 8012eac:	4604      	mov	r4, r0
 8012eae:	2301      	movs	r3, #1
 8012eb0:	e7f0      	b.n	8012e94 <_vfiprintf_r+0x1b8>
 8012eb2:	ab03      	add	r3, sp, #12
 8012eb4:	9300      	str	r3, [sp, #0]
 8012eb6:	462a      	mov	r2, r5
 8012eb8:	4b12      	ldr	r3, [pc, #72]	@ (8012f04 <_vfiprintf_r+0x228>)
 8012eba:	a904      	add	r1, sp, #16
 8012ebc:	4630      	mov	r0, r6
 8012ebe:	f7fb fa41 	bl	800e344 <_printf_float>
 8012ec2:	4607      	mov	r7, r0
 8012ec4:	1c78      	adds	r0, r7, #1
 8012ec6:	d1d6      	bne.n	8012e76 <_vfiprintf_r+0x19a>
 8012ec8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012eca:	07d9      	lsls	r1, r3, #31
 8012ecc:	d405      	bmi.n	8012eda <_vfiprintf_r+0x1fe>
 8012ece:	89ab      	ldrh	r3, [r5, #12]
 8012ed0:	059a      	lsls	r2, r3, #22
 8012ed2:	d402      	bmi.n	8012eda <_vfiprintf_r+0x1fe>
 8012ed4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012ed6:	f7fd f969 	bl	80101ac <__retarget_lock_release_recursive>
 8012eda:	89ab      	ldrh	r3, [r5, #12]
 8012edc:	065b      	lsls	r3, r3, #25
 8012ede:	f53f af1f 	bmi.w	8012d20 <_vfiprintf_r+0x44>
 8012ee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ee4:	e71e      	b.n	8012d24 <_vfiprintf_r+0x48>
 8012ee6:	ab03      	add	r3, sp, #12
 8012ee8:	9300      	str	r3, [sp, #0]
 8012eea:	462a      	mov	r2, r5
 8012eec:	4b05      	ldr	r3, [pc, #20]	@ (8012f04 <_vfiprintf_r+0x228>)
 8012eee:	a904      	add	r1, sp, #16
 8012ef0:	4630      	mov	r0, r6
 8012ef2:	f7fb fd61 	bl	800e9b8 <_printf_i>
 8012ef6:	e7e4      	b.n	8012ec2 <_vfiprintf_r+0x1e6>
 8012ef8:	08015bca 	.word	0x08015bca
 8012efc:	08015bd4 	.word	0x08015bd4
 8012f00:	0800e345 	.word	0x0800e345
 8012f04:	08012cb9 	.word	0x08012cb9
 8012f08:	08015bd0 	.word	0x08015bd0

08012f0c <__swbuf_r>:
 8012f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f0e:	460e      	mov	r6, r1
 8012f10:	4614      	mov	r4, r2
 8012f12:	4605      	mov	r5, r0
 8012f14:	b118      	cbz	r0, 8012f1e <__swbuf_r+0x12>
 8012f16:	6a03      	ldr	r3, [r0, #32]
 8012f18:	b90b      	cbnz	r3, 8012f1e <__swbuf_r+0x12>
 8012f1a:	f7fc f9db 	bl	800f2d4 <__sinit>
 8012f1e:	69a3      	ldr	r3, [r4, #24]
 8012f20:	60a3      	str	r3, [r4, #8]
 8012f22:	89a3      	ldrh	r3, [r4, #12]
 8012f24:	071a      	lsls	r2, r3, #28
 8012f26:	d501      	bpl.n	8012f2c <__swbuf_r+0x20>
 8012f28:	6923      	ldr	r3, [r4, #16]
 8012f2a:	b943      	cbnz	r3, 8012f3e <__swbuf_r+0x32>
 8012f2c:	4621      	mov	r1, r4
 8012f2e:	4628      	mov	r0, r5
 8012f30:	f000 f82a 	bl	8012f88 <__swsetup_r>
 8012f34:	b118      	cbz	r0, 8012f3e <__swbuf_r+0x32>
 8012f36:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012f3a:	4638      	mov	r0, r7
 8012f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f3e:	6823      	ldr	r3, [r4, #0]
 8012f40:	6922      	ldr	r2, [r4, #16]
 8012f42:	1a98      	subs	r0, r3, r2
 8012f44:	6963      	ldr	r3, [r4, #20]
 8012f46:	b2f6      	uxtb	r6, r6
 8012f48:	4283      	cmp	r3, r0
 8012f4a:	4637      	mov	r7, r6
 8012f4c:	dc05      	bgt.n	8012f5a <__swbuf_r+0x4e>
 8012f4e:	4621      	mov	r1, r4
 8012f50:	4628      	mov	r0, r5
 8012f52:	f7ff f889 	bl	8012068 <_fflush_r>
 8012f56:	2800      	cmp	r0, #0
 8012f58:	d1ed      	bne.n	8012f36 <__swbuf_r+0x2a>
 8012f5a:	68a3      	ldr	r3, [r4, #8]
 8012f5c:	3b01      	subs	r3, #1
 8012f5e:	60a3      	str	r3, [r4, #8]
 8012f60:	6823      	ldr	r3, [r4, #0]
 8012f62:	1c5a      	adds	r2, r3, #1
 8012f64:	6022      	str	r2, [r4, #0]
 8012f66:	701e      	strb	r6, [r3, #0]
 8012f68:	6962      	ldr	r2, [r4, #20]
 8012f6a:	1c43      	adds	r3, r0, #1
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	d004      	beq.n	8012f7a <__swbuf_r+0x6e>
 8012f70:	89a3      	ldrh	r3, [r4, #12]
 8012f72:	07db      	lsls	r3, r3, #31
 8012f74:	d5e1      	bpl.n	8012f3a <__swbuf_r+0x2e>
 8012f76:	2e0a      	cmp	r6, #10
 8012f78:	d1df      	bne.n	8012f3a <__swbuf_r+0x2e>
 8012f7a:	4621      	mov	r1, r4
 8012f7c:	4628      	mov	r0, r5
 8012f7e:	f7ff f873 	bl	8012068 <_fflush_r>
 8012f82:	2800      	cmp	r0, #0
 8012f84:	d0d9      	beq.n	8012f3a <__swbuf_r+0x2e>
 8012f86:	e7d6      	b.n	8012f36 <__swbuf_r+0x2a>

08012f88 <__swsetup_r>:
 8012f88:	b538      	push	{r3, r4, r5, lr}
 8012f8a:	4b29      	ldr	r3, [pc, #164]	@ (8013030 <__swsetup_r+0xa8>)
 8012f8c:	4605      	mov	r5, r0
 8012f8e:	6818      	ldr	r0, [r3, #0]
 8012f90:	460c      	mov	r4, r1
 8012f92:	b118      	cbz	r0, 8012f9c <__swsetup_r+0x14>
 8012f94:	6a03      	ldr	r3, [r0, #32]
 8012f96:	b90b      	cbnz	r3, 8012f9c <__swsetup_r+0x14>
 8012f98:	f7fc f99c 	bl	800f2d4 <__sinit>
 8012f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fa0:	0719      	lsls	r1, r3, #28
 8012fa2:	d422      	bmi.n	8012fea <__swsetup_r+0x62>
 8012fa4:	06da      	lsls	r2, r3, #27
 8012fa6:	d407      	bmi.n	8012fb8 <__swsetup_r+0x30>
 8012fa8:	2209      	movs	r2, #9
 8012faa:	602a      	str	r2, [r5, #0]
 8012fac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012fb0:	81a3      	strh	r3, [r4, #12]
 8012fb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012fb6:	e033      	b.n	8013020 <__swsetup_r+0x98>
 8012fb8:	0758      	lsls	r0, r3, #29
 8012fba:	d512      	bpl.n	8012fe2 <__swsetup_r+0x5a>
 8012fbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012fbe:	b141      	cbz	r1, 8012fd2 <__swsetup_r+0x4a>
 8012fc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012fc4:	4299      	cmp	r1, r3
 8012fc6:	d002      	beq.n	8012fce <__swsetup_r+0x46>
 8012fc8:	4628      	mov	r0, r5
 8012fca:	f7fd ff7d 	bl	8010ec8 <_free_r>
 8012fce:	2300      	movs	r3, #0
 8012fd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8012fd2:	89a3      	ldrh	r3, [r4, #12]
 8012fd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012fd8:	81a3      	strh	r3, [r4, #12]
 8012fda:	2300      	movs	r3, #0
 8012fdc:	6063      	str	r3, [r4, #4]
 8012fde:	6923      	ldr	r3, [r4, #16]
 8012fe0:	6023      	str	r3, [r4, #0]
 8012fe2:	89a3      	ldrh	r3, [r4, #12]
 8012fe4:	f043 0308 	orr.w	r3, r3, #8
 8012fe8:	81a3      	strh	r3, [r4, #12]
 8012fea:	6923      	ldr	r3, [r4, #16]
 8012fec:	b94b      	cbnz	r3, 8013002 <__swsetup_r+0x7a>
 8012fee:	89a3      	ldrh	r3, [r4, #12]
 8012ff0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012ff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ff8:	d003      	beq.n	8013002 <__swsetup_r+0x7a>
 8012ffa:	4621      	mov	r1, r4
 8012ffc:	4628      	mov	r0, r5
 8012ffe:	f000 f83f 	bl	8013080 <__smakebuf_r>
 8013002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013006:	f013 0201 	ands.w	r2, r3, #1
 801300a:	d00a      	beq.n	8013022 <__swsetup_r+0x9a>
 801300c:	2200      	movs	r2, #0
 801300e:	60a2      	str	r2, [r4, #8]
 8013010:	6962      	ldr	r2, [r4, #20]
 8013012:	4252      	negs	r2, r2
 8013014:	61a2      	str	r2, [r4, #24]
 8013016:	6922      	ldr	r2, [r4, #16]
 8013018:	b942      	cbnz	r2, 801302c <__swsetup_r+0xa4>
 801301a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801301e:	d1c5      	bne.n	8012fac <__swsetup_r+0x24>
 8013020:	bd38      	pop	{r3, r4, r5, pc}
 8013022:	0799      	lsls	r1, r3, #30
 8013024:	bf58      	it	pl
 8013026:	6962      	ldrpl	r2, [r4, #20]
 8013028:	60a2      	str	r2, [r4, #8]
 801302a:	e7f4      	b.n	8013016 <__swsetup_r+0x8e>
 801302c:	2000      	movs	r0, #0
 801302e:	e7f7      	b.n	8013020 <__swsetup_r+0x98>
 8013030:	200001c4 	.word	0x200001c4

08013034 <__swhatbuf_r>:
 8013034:	b570      	push	{r4, r5, r6, lr}
 8013036:	460c      	mov	r4, r1
 8013038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801303c:	2900      	cmp	r1, #0
 801303e:	b096      	sub	sp, #88	@ 0x58
 8013040:	4615      	mov	r5, r2
 8013042:	461e      	mov	r6, r3
 8013044:	da0d      	bge.n	8013062 <__swhatbuf_r+0x2e>
 8013046:	89a3      	ldrh	r3, [r4, #12]
 8013048:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801304c:	f04f 0100 	mov.w	r1, #0
 8013050:	bf14      	ite	ne
 8013052:	2340      	movne	r3, #64	@ 0x40
 8013054:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013058:	2000      	movs	r0, #0
 801305a:	6031      	str	r1, [r6, #0]
 801305c:	602b      	str	r3, [r5, #0]
 801305e:	b016      	add	sp, #88	@ 0x58
 8013060:	bd70      	pop	{r4, r5, r6, pc}
 8013062:	466a      	mov	r2, sp
 8013064:	f000 f89c 	bl	80131a0 <_fstat_r>
 8013068:	2800      	cmp	r0, #0
 801306a:	dbec      	blt.n	8013046 <__swhatbuf_r+0x12>
 801306c:	9901      	ldr	r1, [sp, #4]
 801306e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013072:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013076:	4259      	negs	r1, r3
 8013078:	4159      	adcs	r1, r3
 801307a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801307e:	e7eb      	b.n	8013058 <__swhatbuf_r+0x24>

08013080 <__smakebuf_r>:
 8013080:	898b      	ldrh	r3, [r1, #12]
 8013082:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013084:	079d      	lsls	r5, r3, #30
 8013086:	4606      	mov	r6, r0
 8013088:	460c      	mov	r4, r1
 801308a:	d507      	bpl.n	801309c <__smakebuf_r+0x1c>
 801308c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013090:	6023      	str	r3, [r4, #0]
 8013092:	6123      	str	r3, [r4, #16]
 8013094:	2301      	movs	r3, #1
 8013096:	6163      	str	r3, [r4, #20]
 8013098:	b003      	add	sp, #12
 801309a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801309c:	ab01      	add	r3, sp, #4
 801309e:	466a      	mov	r2, sp
 80130a0:	f7ff ffc8 	bl	8013034 <__swhatbuf_r>
 80130a4:	9f00      	ldr	r7, [sp, #0]
 80130a6:	4605      	mov	r5, r0
 80130a8:	4639      	mov	r1, r7
 80130aa:	4630      	mov	r0, r6
 80130ac:	f7fb fb96 	bl	800e7dc <_malloc_r>
 80130b0:	b948      	cbnz	r0, 80130c6 <__smakebuf_r+0x46>
 80130b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130b6:	059a      	lsls	r2, r3, #22
 80130b8:	d4ee      	bmi.n	8013098 <__smakebuf_r+0x18>
 80130ba:	f023 0303 	bic.w	r3, r3, #3
 80130be:	f043 0302 	orr.w	r3, r3, #2
 80130c2:	81a3      	strh	r3, [r4, #12]
 80130c4:	e7e2      	b.n	801308c <__smakebuf_r+0xc>
 80130c6:	89a3      	ldrh	r3, [r4, #12]
 80130c8:	6020      	str	r0, [r4, #0]
 80130ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80130ce:	81a3      	strh	r3, [r4, #12]
 80130d0:	9b01      	ldr	r3, [sp, #4]
 80130d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80130d6:	b15b      	cbz	r3, 80130f0 <__smakebuf_r+0x70>
 80130d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130dc:	4630      	mov	r0, r6
 80130de:	f000 f83b 	bl	8013158 <_isatty_r>
 80130e2:	b128      	cbz	r0, 80130f0 <__smakebuf_r+0x70>
 80130e4:	89a3      	ldrh	r3, [r4, #12]
 80130e6:	f023 0303 	bic.w	r3, r3, #3
 80130ea:	f043 0301 	orr.w	r3, r3, #1
 80130ee:	81a3      	strh	r3, [r4, #12]
 80130f0:	89a3      	ldrh	r3, [r4, #12]
 80130f2:	431d      	orrs	r5, r3
 80130f4:	81a5      	strh	r5, [r4, #12]
 80130f6:	e7cf      	b.n	8013098 <__smakebuf_r+0x18>

080130f8 <_raise_r>:
 80130f8:	291f      	cmp	r1, #31
 80130fa:	b538      	push	{r3, r4, r5, lr}
 80130fc:	4605      	mov	r5, r0
 80130fe:	460c      	mov	r4, r1
 8013100:	d904      	bls.n	801310c <_raise_r+0x14>
 8013102:	2316      	movs	r3, #22
 8013104:	6003      	str	r3, [r0, #0]
 8013106:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801310a:	bd38      	pop	{r3, r4, r5, pc}
 801310c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801310e:	b112      	cbz	r2, 8013116 <_raise_r+0x1e>
 8013110:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013114:	b94b      	cbnz	r3, 801312a <_raise_r+0x32>
 8013116:	4628      	mov	r0, r5
 8013118:	f000 f840 	bl	801319c <_getpid_r>
 801311c:	4622      	mov	r2, r4
 801311e:	4601      	mov	r1, r0
 8013120:	4628      	mov	r0, r5
 8013122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013126:	f000 b827 	b.w	8013178 <_kill_r>
 801312a:	2b01      	cmp	r3, #1
 801312c:	d00a      	beq.n	8013144 <_raise_r+0x4c>
 801312e:	1c59      	adds	r1, r3, #1
 8013130:	d103      	bne.n	801313a <_raise_r+0x42>
 8013132:	2316      	movs	r3, #22
 8013134:	6003      	str	r3, [r0, #0]
 8013136:	2001      	movs	r0, #1
 8013138:	e7e7      	b.n	801310a <_raise_r+0x12>
 801313a:	2100      	movs	r1, #0
 801313c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013140:	4620      	mov	r0, r4
 8013142:	4798      	blx	r3
 8013144:	2000      	movs	r0, #0
 8013146:	e7e0      	b.n	801310a <_raise_r+0x12>

08013148 <raise>:
 8013148:	4b02      	ldr	r3, [pc, #8]	@ (8013154 <raise+0xc>)
 801314a:	4601      	mov	r1, r0
 801314c:	6818      	ldr	r0, [r3, #0]
 801314e:	f7ff bfd3 	b.w	80130f8 <_raise_r>
 8013152:	bf00      	nop
 8013154:	200001c4 	.word	0x200001c4

08013158 <_isatty_r>:
 8013158:	b538      	push	{r3, r4, r5, lr}
 801315a:	4d06      	ldr	r5, [pc, #24]	@ (8013174 <_isatty_r+0x1c>)
 801315c:	2300      	movs	r3, #0
 801315e:	4604      	mov	r4, r0
 8013160:	4608      	mov	r0, r1
 8013162:	602b      	str	r3, [r5, #0]
 8013164:	f7f5 fa5a 	bl	800861c <_isatty>
 8013168:	1c43      	adds	r3, r0, #1
 801316a:	d102      	bne.n	8013172 <_isatty_r+0x1a>
 801316c:	682b      	ldr	r3, [r5, #0]
 801316e:	b103      	cbz	r3, 8013172 <_isatty_r+0x1a>
 8013170:	6023      	str	r3, [r4, #0]
 8013172:	bd38      	pop	{r3, r4, r5, pc}
 8013174:	200019a4 	.word	0x200019a4

08013178 <_kill_r>:
 8013178:	b538      	push	{r3, r4, r5, lr}
 801317a:	4d07      	ldr	r5, [pc, #28]	@ (8013198 <_kill_r+0x20>)
 801317c:	2300      	movs	r3, #0
 801317e:	4604      	mov	r4, r0
 8013180:	4608      	mov	r0, r1
 8013182:	4611      	mov	r1, r2
 8013184:	602b      	str	r3, [r5, #0]
 8013186:	f7f5 f9d9 	bl	800853c <_kill>
 801318a:	1c43      	adds	r3, r0, #1
 801318c:	d102      	bne.n	8013194 <_kill_r+0x1c>
 801318e:	682b      	ldr	r3, [r5, #0]
 8013190:	b103      	cbz	r3, 8013194 <_kill_r+0x1c>
 8013192:	6023      	str	r3, [r4, #0]
 8013194:	bd38      	pop	{r3, r4, r5, pc}
 8013196:	bf00      	nop
 8013198:	200019a4 	.word	0x200019a4

0801319c <_getpid_r>:
 801319c:	f7f5 b9c6 	b.w	800852c <_getpid>

080131a0 <_fstat_r>:
 80131a0:	b538      	push	{r3, r4, r5, lr}
 80131a2:	4d07      	ldr	r5, [pc, #28]	@ (80131c0 <_fstat_r+0x20>)
 80131a4:	2300      	movs	r3, #0
 80131a6:	4604      	mov	r4, r0
 80131a8:	4608      	mov	r0, r1
 80131aa:	4611      	mov	r1, r2
 80131ac:	602b      	str	r3, [r5, #0]
 80131ae:	f7f5 fa25 	bl	80085fc <_fstat>
 80131b2:	1c43      	adds	r3, r0, #1
 80131b4:	d102      	bne.n	80131bc <_fstat_r+0x1c>
 80131b6:	682b      	ldr	r3, [r5, #0]
 80131b8:	b103      	cbz	r3, 80131bc <_fstat_r+0x1c>
 80131ba:	6023      	str	r3, [r4, #0]
 80131bc:	bd38      	pop	{r3, r4, r5, pc}
 80131be:	bf00      	nop
 80131c0:	200019a4 	.word	0x200019a4

080131c4 <acosf>:
 80131c4:	b508      	push	{r3, lr}
 80131c6:	ed2d 8b02 	vpush	{d8}
 80131ca:	eeb0 8a40 	vmov.f32	s16, s0
 80131ce:	f000 f977 	bl	80134c0 <__ieee754_acosf>
 80131d2:	eeb4 8a48 	vcmp.f32	s16, s16
 80131d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131da:	eef0 8a40 	vmov.f32	s17, s0
 80131de:	d615      	bvs.n	801320c <acosf+0x48>
 80131e0:	eeb0 0a48 	vmov.f32	s0, s16
 80131e4:	f000 f902 	bl	80133ec <fabsf>
 80131e8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80131ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80131f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131f4:	dd0a      	ble.n	801320c <acosf+0x48>
 80131f6:	f7fc ffad 	bl	8010154 <__errno>
 80131fa:	ecbd 8b02 	vpop	{d8}
 80131fe:	2321      	movs	r3, #33	@ 0x21
 8013200:	6003      	str	r3, [r0, #0]
 8013202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013206:	4804      	ldr	r0, [pc, #16]	@ (8013218 <acosf+0x54>)
 8013208:	f7fc bffe 	b.w	8010208 <nanf>
 801320c:	eeb0 0a68 	vmov.f32	s0, s17
 8013210:	ecbd 8b02 	vpop	{d8}
 8013214:	bd08      	pop	{r3, pc}
 8013216:	bf00      	nop
 8013218:	08015c8a 	.word	0x08015c8a

0801321c <asinf>:
 801321c:	b508      	push	{r3, lr}
 801321e:	ed2d 8b02 	vpush	{d8}
 8013222:	eeb0 8a40 	vmov.f32	s16, s0
 8013226:	f000 fa41 	bl	80136ac <__ieee754_asinf>
 801322a:	eeb4 8a48 	vcmp.f32	s16, s16
 801322e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013232:	eef0 8a40 	vmov.f32	s17, s0
 8013236:	d615      	bvs.n	8013264 <asinf+0x48>
 8013238:	eeb0 0a48 	vmov.f32	s0, s16
 801323c:	f000 f8d6 	bl	80133ec <fabsf>
 8013240:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013244:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801324c:	dd0a      	ble.n	8013264 <asinf+0x48>
 801324e:	f7fc ff81 	bl	8010154 <__errno>
 8013252:	ecbd 8b02 	vpop	{d8}
 8013256:	2321      	movs	r3, #33	@ 0x21
 8013258:	6003      	str	r3, [r0, #0]
 801325a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801325e:	4804      	ldr	r0, [pc, #16]	@ (8013270 <asinf+0x54>)
 8013260:	f7fc bfd2 	b.w	8010208 <nanf>
 8013264:	eeb0 0a68 	vmov.f32	s0, s17
 8013268:	ecbd 8b02 	vpop	{d8}
 801326c:	bd08      	pop	{r3, pc}
 801326e:	bf00      	nop
 8013270:	08015c8a 	.word	0x08015c8a

08013274 <atan2f>:
 8013274:	f000 bafe 	b.w	8013874 <__ieee754_atan2f>

08013278 <sqrtf>:
 8013278:	b508      	push	{r3, lr}
 801327a:	ed2d 8b02 	vpush	{d8}
 801327e:	eeb0 8a40 	vmov.f32	s16, s0
 8013282:	f000 fc6d 	bl	8013b60 <__ieee754_sqrtf>
 8013286:	eeb4 8a48 	vcmp.f32	s16, s16
 801328a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801328e:	d60c      	bvs.n	80132aa <sqrtf+0x32>
 8013290:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80132b0 <sqrtf+0x38>
 8013294:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801329c:	d505      	bpl.n	80132aa <sqrtf+0x32>
 801329e:	f7fc ff59 	bl	8010154 <__errno>
 80132a2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80132a6:	2321      	movs	r3, #33	@ 0x21
 80132a8:	6003      	str	r3, [r0, #0]
 80132aa:	ecbd 8b02 	vpop	{d8}
 80132ae:	bd08      	pop	{r3, pc}
 80132b0:	00000000 	.word	0x00000000

080132b4 <pow>:
 80132b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132b6:	ed2d 8b02 	vpush	{d8}
 80132ba:	eeb0 8a40 	vmov.f32	s16, s0
 80132be:	eef0 8a60 	vmov.f32	s17, s1
 80132c2:	ec55 4b11 	vmov	r4, r5, d1
 80132c6:	f000 fd67 	bl	8013d98 <__ieee754_pow>
 80132ca:	4622      	mov	r2, r4
 80132cc:	462b      	mov	r3, r5
 80132ce:	4620      	mov	r0, r4
 80132d0:	4629      	mov	r1, r5
 80132d2:	ec57 6b10 	vmov	r6, r7, d0
 80132d6:	f7ed fc49 	bl	8000b6c <__aeabi_dcmpun>
 80132da:	2800      	cmp	r0, #0
 80132dc:	d13b      	bne.n	8013356 <pow+0xa2>
 80132de:	ec51 0b18 	vmov	r0, r1, d8
 80132e2:	2200      	movs	r2, #0
 80132e4:	2300      	movs	r3, #0
 80132e6:	f7ed fc0f 	bl	8000b08 <__aeabi_dcmpeq>
 80132ea:	b1b8      	cbz	r0, 801331c <pow+0x68>
 80132ec:	2200      	movs	r2, #0
 80132ee:	2300      	movs	r3, #0
 80132f0:	4620      	mov	r0, r4
 80132f2:	4629      	mov	r1, r5
 80132f4:	f7ed fc08 	bl	8000b08 <__aeabi_dcmpeq>
 80132f8:	2800      	cmp	r0, #0
 80132fa:	d146      	bne.n	801338a <pow+0xd6>
 80132fc:	ec45 4b10 	vmov	d0, r4, r5
 8013300:	f000 f8d2 	bl	80134a8 <finite>
 8013304:	b338      	cbz	r0, 8013356 <pow+0xa2>
 8013306:	2200      	movs	r2, #0
 8013308:	2300      	movs	r3, #0
 801330a:	4620      	mov	r0, r4
 801330c:	4629      	mov	r1, r5
 801330e:	f7ed fc05 	bl	8000b1c <__aeabi_dcmplt>
 8013312:	b300      	cbz	r0, 8013356 <pow+0xa2>
 8013314:	f7fc ff1e 	bl	8010154 <__errno>
 8013318:	2322      	movs	r3, #34	@ 0x22
 801331a:	e01b      	b.n	8013354 <pow+0xa0>
 801331c:	ec47 6b10 	vmov	d0, r6, r7
 8013320:	f000 f8c2 	bl	80134a8 <finite>
 8013324:	b9e0      	cbnz	r0, 8013360 <pow+0xac>
 8013326:	eeb0 0a48 	vmov.f32	s0, s16
 801332a:	eef0 0a68 	vmov.f32	s1, s17
 801332e:	f000 f8bb 	bl	80134a8 <finite>
 8013332:	b1a8      	cbz	r0, 8013360 <pow+0xac>
 8013334:	ec45 4b10 	vmov	d0, r4, r5
 8013338:	f000 f8b6 	bl	80134a8 <finite>
 801333c:	b180      	cbz	r0, 8013360 <pow+0xac>
 801333e:	4632      	mov	r2, r6
 8013340:	463b      	mov	r3, r7
 8013342:	4630      	mov	r0, r6
 8013344:	4639      	mov	r1, r7
 8013346:	f7ed fc11 	bl	8000b6c <__aeabi_dcmpun>
 801334a:	2800      	cmp	r0, #0
 801334c:	d0e2      	beq.n	8013314 <pow+0x60>
 801334e:	f7fc ff01 	bl	8010154 <__errno>
 8013352:	2321      	movs	r3, #33	@ 0x21
 8013354:	6003      	str	r3, [r0, #0]
 8013356:	ecbd 8b02 	vpop	{d8}
 801335a:	ec47 6b10 	vmov	d0, r6, r7
 801335e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013360:	2200      	movs	r2, #0
 8013362:	2300      	movs	r3, #0
 8013364:	4630      	mov	r0, r6
 8013366:	4639      	mov	r1, r7
 8013368:	f7ed fbce 	bl	8000b08 <__aeabi_dcmpeq>
 801336c:	2800      	cmp	r0, #0
 801336e:	d0f2      	beq.n	8013356 <pow+0xa2>
 8013370:	eeb0 0a48 	vmov.f32	s0, s16
 8013374:	eef0 0a68 	vmov.f32	s1, s17
 8013378:	f000 f896 	bl	80134a8 <finite>
 801337c:	2800      	cmp	r0, #0
 801337e:	d0ea      	beq.n	8013356 <pow+0xa2>
 8013380:	ec45 4b10 	vmov	d0, r4, r5
 8013384:	f000 f890 	bl	80134a8 <finite>
 8013388:	e7c3      	b.n	8013312 <pow+0x5e>
 801338a:	4f01      	ldr	r7, [pc, #4]	@ (8013390 <pow+0xdc>)
 801338c:	2600      	movs	r6, #0
 801338e:	e7e2      	b.n	8013356 <pow+0xa2>
 8013390:	3ff00000 	.word	0x3ff00000

08013394 <sqrt>:
 8013394:	b538      	push	{r3, r4, r5, lr}
 8013396:	ed2d 8b02 	vpush	{d8}
 801339a:	ec55 4b10 	vmov	r4, r5, d0
 801339e:	f000 fb09 	bl	80139b4 <__ieee754_sqrt>
 80133a2:	4622      	mov	r2, r4
 80133a4:	462b      	mov	r3, r5
 80133a6:	4620      	mov	r0, r4
 80133a8:	4629      	mov	r1, r5
 80133aa:	eeb0 8a40 	vmov.f32	s16, s0
 80133ae:	eef0 8a60 	vmov.f32	s17, s1
 80133b2:	f7ed fbdb 	bl	8000b6c <__aeabi_dcmpun>
 80133b6:	b990      	cbnz	r0, 80133de <sqrt+0x4a>
 80133b8:	2200      	movs	r2, #0
 80133ba:	2300      	movs	r3, #0
 80133bc:	4620      	mov	r0, r4
 80133be:	4629      	mov	r1, r5
 80133c0:	f7ed fbac 	bl	8000b1c <__aeabi_dcmplt>
 80133c4:	b158      	cbz	r0, 80133de <sqrt+0x4a>
 80133c6:	f7fc fec5 	bl	8010154 <__errno>
 80133ca:	2321      	movs	r3, #33	@ 0x21
 80133cc:	6003      	str	r3, [r0, #0]
 80133ce:	2200      	movs	r2, #0
 80133d0:	2300      	movs	r3, #0
 80133d2:	4610      	mov	r0, r2
 80133d4:	4619      	mov	r1, r3
 80133d6:	f7ed fa59 	bl	800088c <__aeabi_ddiv>
 80133da:	ec41 0b18 	vmov	d8, r0, r1
 80133de:	eeb0 0a48 	vmov.f32	s0, s16
 80133e2:	eef0 0a68 	vmov.f32	s1, s17
 80133e6:	ecbd 8b02 	vpop	{d8}
 80133ea:	bd38      	pop	{r3, r4, r5, pc}

080133ec <fabsf>:
 80133ec:	ee10 3a10 	vmov	r3, s0
 80133f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80133f4:	ee00 3a10 	vmov	s0, r3
 80133f8:	4770      	bx	lr
 80133fa:	0000      	movs	r0, r0
 80133fc:	0000      	movs	r0, r0
	...

08013400 <cos>:
 8013400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013402:	ec53 2b10 	vmov	r2, r3, d0
 8013406:	4826      	ldr	r0, [pc, #152]	@ (80134a0 <cos+0xa0>)
 8013408:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801340c:	4281      	cmp	r1, r0
 801340e:	d806      	bhi.n	801341e <cos+0x1e>
 8013410:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8013498 <cos+0x98>
 8013414:	b005      	add	sp, #20
 8013416:	f85d eb04 	ldr.w	lr, [sp], #4
 801341a:	f001 bf91 	b.w	8015340 <__kernel_cos>
 801341e:	4821      	ldr	r0, [pc, #132]	@ (80134a4 <cos+0xa4>)
 8013420:	4281      	cmp	r1, r0
 8013422:	d908      	bls.n	8013436 <cos+0x36>
 8013424:	4610      	mov	r0, r2
 8013426:	4619      	mov	r1, r3
 8013428:	f7ec ff4e 	bl	80002c8 <__aeabi_dsub>
 801342c:	ec41 0b10 	vmov	d0, r0, r1
 8013430:	b005      	add	sp, #20
 8013432:	f85d fb04 	ldr.w	pc, [sp], #4
 8013436:	4668      	mov	r0, sp
 8013438:	f001 f9fa 	bl	8014830 <__ieee754_rem_pio2>
 801343c:	f000 0003 	and.w	r0, r0, #3
 8013440:	2801      	cmp	r0, #1
 8013442:	d00b      	beq.n	801345c <cos+0x5c>
 8013444:	2802      	cmp	r0, #2
 8013446:	d015      	beq.n	8013474 <cos+0x74>
 8013448:	b9d8      	cbnz	r0, 8013482 <cos+0x82>
 801344a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801344e:	ed9d 0b00 	vldr	d0, [sp]
 8013452:	f001 ff75 	bl	8015340 <__kernel_cos>
 8013456:	ec51 0b10 	vmov	r0, r1, d0
 801345a:	e7e7      	b.n	801342c <cos+0x2c>
 801345c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013460:	ed9d 0b00 	vldr	d0, [sp]
 8013464:	f002 f834 	bl	80154d0 <__kernel_sin>
 8013468:	ec53 2b10 	vmov	r2, r3, d0
 801346c:	4610      	mov	r0, r2
 801346e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8013472:	e7db      	b.n	801342c <cos+0x2c>
 8013474:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013478:	ed9d 0b00 	vldr	d0, [sp]
 801347c:	f001 ff60 	bl	8015340 <__kernel_cos>
 8013480:	e7f2      	b.n	8013468 <cos+0x68>
 8013482:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013486:	ed9d 0b00 	vldr	d0, [sp]
 801348a:	2001      	movs	r0, #1
 801348c:	f002 f820 	bl	80154d0 <__kernel_sin>
 8013490:	e7e1      	b.n	8013456 <cos+0x56>
 8013492:	bf00      	nop
 8013494:	f3af 8000 	nop.w
	...
 80134a0:	3fe921fb 	.word	0x3fe921fb
 80134a4:	7fefffff 	.word	0x7fefffff

080134a8 <finite>:
 80134a8:	b082      	sub	sp, #8
 80134aa:	ed8d 0b00 	vstr	d0, [sp]
 80134ae:	9801      	ldr	r0, [sp, #4]
 80134b0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80134b4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80134b8:	0fc0      	lsrs	r0, r0, #31
 80134ba:	b002      	add	sp, #8
 80134bc:	4770      	bx	lr
	...

080134c0 <__ieee754_acosf>:
 80134c0:	b508      	push	{r3, lr}
 80134c2:	ee10 3a10 	vmov	r3, s0
 80134c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80134ca:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80134ce:	ed2d 8b0c 	vpush	{d8-d13}
 80134d2:	d10a      	bne.n	80134ea <__ieee754_acosf+0x2a>
 80134d4:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8013668 <__ieee754_acosf+0x1a8>
 80134d8:	eddf 7a64 	vldr	s15, [pc, #400]	@ 801366c <__ieee754_acosf+0x1ac>
 80134dc:	2b00      	cmp	r3, #0
 80134de:	bfc8      	it	gt
 80134e0:	eeb0 0a67 	vmovgt.f32	s0, s15
 80134e4:	ecbd 8b0c 	vpop	{d8-d13}
 80134e8:	bd08      	pop	{r3, pc}
 80134ea:	d904      	bls.n	80134f6 <__ieee754_acosf+0x36>
 80134ec:	ee30 8a40 	vsub.f32	s16, s0, s0
 80134f0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80134f4:	e7f6      	b.n	80134e4 <__ieee754_acosf+0x24>
 80134f6:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 80134fa:	d23c      	bcs.n	8013576 <__ieee754_acosf+0xb6>
 80134fc:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8013500:	f240 80af 	bls.w	8013662 <__ieee754_acosf+0x1a2>
 8013504:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013508:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8013670 <__ieee754_acosf+0x1b0>
 801350c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8013674 <__ieee754_acosf+0x1b4>
 8013510:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 8013678 <__ieee754_acosf+0x1b8>
 8013514:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013518:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801367c <__ieee754_acosf+0x1bc>
 801351c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013520:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8013680 <__ieee754_acosf+0x1c0>
 8013524:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013528:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8013684 <__ieee754_acosf+0x1c4>
 801352c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013530:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8013688 <__ieee754_acosf+0x1c8>
 8013534:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013538:	eddf 6a54 	vldr	s13, [pc, #336]	@ 801368c <__ieee754_acosf+0x1cc>
 801353c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8013540:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8013690 <__ieee754_acosf+0x1d0>
 8013544:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013548:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8013694 <__ieee754_acosf+0x1d4>
 801354c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8013550:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013554:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013558:	ee27 7a27 	vmul.f32	s14, s14, s15
 801355c:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8013698 <__ieee754_acosf+0x1d8>
 8013560:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8013564:	eee0 7a46 	vfms.f32	s15, s0, s12
 8013568:	ee70 7a67 	vsub.f32	s15, s0, s15
 801356c:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 801369c <__ieee754_acosf+0x1dc>
 8013570:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013574:	e7b6      	b.n	80134e4 <__ieee754_acosf+0x24>
 8013576:	2b00      	cmp	r3, #0
 8013578:	eddf da3d 	vldr	s27, [pc, #244]	@ 8013670 <__ieee754_acosf+0x1b0>
 801357c:	eddf ca3d 	vldr	s25, [pc, #244]	@ 8013674 <__ieee754_acosf+0x1b4>
 8013580:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 801367c <__ieee754_acosf+0x1bc>
 8013584:	eddf ba3e 	vldr	s23, [pc, #248]	@ 8013680 <__ieee754_acosf+0x1c0>
 8013588:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 8013684 <__ieee754_acosf+0x1c4>
 801358c:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 8013688 <__ieee754_acosf+0x1c8>
 8013590:	ed9f da3e 	vldr	s26, [pc, #248]	@ 801368c <__ieee754_acosf+0x1cc>
 8013594:	eddf aa38 	vldr	s21, [pc, #224]	@ 8013678 <__ieee754_acosf+0x1b8>
 8013598:	ed9f aa3d 	vldr	s20, [pc, #244]	@ 8013690 <__ieee754_acosf+0x1d0>
 801359c:	eddf 9a3d 	vldr	s19, [pc, #244]	@ 8013694 <__ieee754_acosf+0x1d4>
 80135a0:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 80135a4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80135a8:	da28      	bge.n	80135fc <__ieee754_acosf+0x13c>
 80135aa:	ee30 8a09 	vadd.f32	s16, s0, s18
 80135ae:	ee28 0a27 	vmul.f32	s0, s16, s15
 80135b2:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80135b6:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80135ba:	eeac ca80 	vfma.f32	s24, s25, s0
 80135be:	eeaa aa80 	vfma.f32	s20, s21, s0
 80135c2:	eeec ba00 	vfma.f32	s23, s24, s0
 80135c6:	eeea 9a00 	vfma.f32	s19, s20, s0
 80135ca:	eeab ba80 	vfma.f32	s22, s23, s0
 80135ce:	eea9 9a80 	vfma.f32	s18, s19, s0
 80135d2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80135d6:	ee68 8a80 	vmul.f32	s17, s17, s0
 80135da:	f000 fac1 	bl	8013b60 <__ieee754_sqrtf>
 80135de:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80135e2:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 80136a0 <__ieee754_acosf+0x1e0>
 80135e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80135ea:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80135ee:	ee77 7a80 	vadd.f32	s15, s15, s0
 80135f2:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80136a4 <__ieee754_acosf+0x1e4>
 80135f6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80135fa:	e773      	b.n	80134e4 <__ieee754_acosf+0x24>
 80135fc:	ee39 8a40 	vsub.f32	s16, s18, s0
 8013600:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013604:	eeb0 0a48 	vmov.f32	s0, s16
 8013608:	f000 faaa 	bl	8013b60 <__ieee754_sqrtf>
 801360c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8013610:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8013614:	eeac ca88 	vfma.f32	s24, s25, s16
 8013618:	eeaa aa88 	vfma.f32	s20, s21, s16
 801361c:	eeec ba08 	vfma.f32	s23, s24, s16
 8013620:	ee10 3a10 	vmov	r3, s0
 8013624:	eeab ba88 	vfma.f32	s22, s23, s16
 8013628:	f36f 030b 	bfc	r3, #0, #12
 801362c:	eeea 9a08 	vfma.f32	s19, s20, s16
 8013630:	ee07 3a90 	vmov	s15, r3
 8013634:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8013638:	eeb0 6a48 	vmov.f32	s12, s16
 801363c:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8013640:	eea9 9a88 	vfma.f32	s18, s19, s16
 8013644:	ee70 6a27 	vadd.f32	s13, s0, s15
 8013648:	ee68 8a88 	vmul.f32	s17, s17, s16
 801364c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8013650:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8013654:	eea0 7a26 	vfma.f32	s14, s0, s13
 8013658:	ee37 0a87 	vadd.f32	s0, s15, s14
 801365c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013660:	e740      	b.n	80134e4 <__ieee754_acosf+0x24>
 8013662:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80136a8 <__ieee754_acosf+0x1e8>
 8013666:	e73d      	b.n	80134e4 <__ieee754_acosf+0x24>
 8013668:	40490fdb 	.word	0x40490fdb
 801366c:	00000000 	.word	0x00000000
 8013670:	3811ef08 	.word	0x3811ef08
 8013674:	3a4f7f04 	.word	0x3a4f7f04
 8013678:	bf303361 	.word	0xbf303361
 801367c:	bd241146 	.word	0xbd241146
 8013680:	3e4e0aa8 	.word	0x3e4e0aa8
 8013684:	bea6b090 	.word	0xbea6b090
 8013688:	3e2aaaab 	.word	0x3e2aaaab
 801368c:	3d9dc62e 	.word	0x3d9dc62e
 8013690:	4001572d 	.word	0x4001572d
 8013694:	c019d139 	.word	0xc019d139
 8013698:	33a22168 	.word	0x33a22168
 801369c:	3fc90fda 	.word	0x3fc90fda
 80136a0:	b3a22168 	.word	0xb3a22168
 80136a4:	40490fda 	.word	0x40490fda
 80136a8:	3fc90fdb 	.word	0x3fc90fdb

080136ac <__ieee754_asinf>:
 80136ac:	b538      	push	{r3, r4, r5, lr}
 80136ae:	ee10 5a10 	vmov	r5, s0
 80136b2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80136b6:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 80136ba:	ed2d 8b04 	vpush	{d8-d9}
 80136be:	d10c      	bne.n	80136da <__ieee754_asinf+0x2e>
 80136c0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8013834 <__ieee754_asinf+0x188>
 80136c4:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8013838 <__ieee754_asinf+0x18c>
 80136c8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80136cc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80136d0:	eeb0 0a67 	vmov.f32	s0, s15
 80136d4:	ecbd 8b04 	vpop	{d8-d9}
 80136d8:	bd38      	pop	{r3, r4, r5, pc}
 80136da:	d904      	bls.n	80136e6 <__ieee754_asinf+0x3a>
 80136dc:	ee70 7a40 	vsub.f32	s15, s0, s0
 80136e0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80136e4:	e7f6      	b.n	80136d4 <__ieee754_asinf+0x28>
 80136e6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80136ea:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80136ee:	d20b      	bcs.n	8013708 <__ieee754_asinf+0x5c>
 80136f0:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 80136f4:	d252      	bcs.n	801379c <__ieee754_asinf+0xf0>
 80136f6:	eddf 7a51 	vldr	s15, [pc, #324]	@ 801383c <__ieee754_asinf+0x190>
 80136fa:	ee70 7a27 	vadd.f32	s15, s0, s15
 80136fe:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013706:	dce5      	bgt.n	80136d4 <__ieee754_asinf+0x28>
 8013708:	f7ff fe70 	bl	80133ec <fabsf>
 801370c:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8013710:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013714:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013718:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8013840 <__ieee754_asinf+0x194>
 801371c:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8013844 <__ieee754_asinf+0x198>
 8013720:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 8013848 <__ieee754_asinf+0x19c>
 8013724:	eea8 7a27 	vfma.f32	s14, s16, s15
 8013728:	eddf 7a48 	vldr	s15, [pc, #288]	@ 801384c <__ieee754_asinf+0x1a0>
 801372c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013730:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8013850 <__ieee754_asinf+0x1a4>
 8013734:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013738:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8013854 <__ieee754_asinf+0x1a8>
 801373c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013740:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8013858 <__ieee754_asinf+0x1ac>
 8013744:	eea7 9a88 	vfma.f32	s18, s15, s16
 8013748:	eddf 7a44 	vldr	s15, [pc, #272]	@ 801385c <__ieee754_asinf+0x1b0>
 801374c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8013750:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8013860 <__ieee754_asinf+0x1b4>
 8013754:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013758:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8013864 <__ieee754_asinf+0x1b8>
 801375c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013760:	eeb0 0a48 	vmov.f32	s0, s16
 8013764:	eee7 8a88 	vfma.f32	s17, s15, s16
 8013768:	f000 f9fa 	bl	8013b60 <__ieee754_sqrtf>
 801376c:	4b3e      	ldr	r3, [pc, #248]	@ (8013868 <__ieee754_asinf+0x1bc>)
 801376e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8013772:	429c      	cmp	r4, r3
 8013774:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8013778:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801377c:	d93d      	bls.n	80137fa <__ieee754_asinf+0x14e>
 801377e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8013782:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 801386c <__ieee754_asinf+0x1c0>
 8013786:	eee0 7a26 	vfma.f32	s15, s0, s13
 801378a:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8013838 <__ieee754_asinf+0x18c>
 801378e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013792:	2d00      	cmp	r5, #0
 8013794:	bfd8      	it	le
 8013796:	eeb1 0a40 	vnegle.f32	s0, s0
 801379a:	e79b      	b.n	80136d4 <__ieee754_asinf+0x28>
 801379c:	ee60 7a00 	vmul.f32	s15, s0, s0
 80137a0:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8013844 <__ieee754_asinf+0x198>
 80137a4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8013840 <__ieee754_asinf+0x194>
 80137a8:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8013858 <__ieee754_asinf+0x1ac>
 80137ac:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80137b0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801384c <__ieee754_asinf+0x1a0>
 80137b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80137b8:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8013850 <__ieee754_asinf+0x1a4>
 80137bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80137c0:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8013854 <__ieee754_asinf+0x1a8>
 80137c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80137c8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8013848 <__ieee754_asinf+0x19c>
 80137cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80137d0:	eddf 6a22 	vldr	s13, [pc, #136]	@ 801385c <__ieee754_asinf+0x1b0>
 80137d4:	eee7 6a86 	vfma.f32	s13, s15, s12
 80137d8:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 8013860 <__ieee754_asinf+0x1b4>
 80137dc:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80137e0:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8013864 <__ieee754_asinf+0x1b8>
 80137e4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80137e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80137ec:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80137f0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80137f4:	eea0 0a27 	vfma.f32	s0, s0, s15
 80137f8:	e76c      	b.n	80136d4 <__ieee754_asinf+0x28>
 80137fa:	ee10 3a10 	vmov	r3, s0
 80137fe:	f36f 030b 	bfc	r3, #0, #12
 8013802:	ee07 3a10 	vmov	s14, r3
 8013806:	eea7 8a47 	vfms.f32	s16, s14, s14
 801380a:	ee70 5a00 	vadd.f32	s11, s0, s0
 801380e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8013812:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8013834 <__ieee754_asinf+0x188>
 8013816:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801381a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8013870 <__ieee754_asinf+0x1c4>
 801381e:	eee5 7a66 	vfms.f32	s15, s10, s13
 8013822:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8013826:	eeb0 6a40 	vmov.f32	s12, s0
 801382a:	eea7 6a66 	vfms.f32	s12, s14, s13
 801382e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013832:	e7ac      	b.n	801378e <__ieee754_asinf+0xe2>
 8013834:	b33bbd2e 	.word	0xb33bbd2e
 8013838:	3fc90fdb 	.word	0x3fc90fdb
 801383c:	7149f2ca 	.word	0x7149f2ca
 8013840:	3a4f7f04 	.word	0x3a4f7f04
 8013844:	3811ef08 	.word	0x3811ef08
 8013848:	3e2aaaab 	.word	0x3e2aaaab
 801384c:	bd241146 	.word	0xbd241146
 8013850:	3e4e0aa8 	.word	0x3e4e0aa8
 8013854:	bea6b090 	.word	0xbea6b090
 8013858:	3d9dc62e 	.word	0x3d9dc62e
 801385c:	bf303361 	.word	0xbf303361
 8013860:	4001572d 	.word	0x4001572d
 8013864:	c019d139 	.word	0xc019d139
 8013868:	3f799999 	.word	0x3f799999
 801386c:	333bbd2e 	.word	0x333bbd2e
 8013870:	3f490fdb 	.word	0x3f490fdb

08013874 <__ieee754_atan2f>:
 8013874:	ee10 2a90 	vmov	r2, s1
 8013878:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 801387c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8013880:	b510      	push	{r4, lr}
 8013882:	eef0 7a40 	vmov.f32	s15, s0
 8013886:	d806      	bhi.n	8013896 <__ieee754_atan2f+0x22>
 8013888:	ee10 0a10 	vmov	r0, s0
 801388c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8013890:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8013894:	d904      	bls.n	80138a0 <__ieee754_atan2f+0x2c>
 8013896:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801389a:	eeb0 0a67 	vmov.f32	s0, s15
 801389e:	bd10      	pop	{r4, pc}
 80138a0:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80138a4:	d103      	bne.n	80138ae <__ieee754_atan2f+0x3a>
 80138a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80138aa:	f001 becb 	b.w	8015644 <atanf>
 80138ae:	1794      	asrs	r4, r2, #30
 80138b0:	f004 0402 	and.w	r4, r4, #2
 80138b4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80138b8:	b943      	cbnz	r3, 80138cc <__ieee754_atan2f+0x58>
 80138ba:	2c02      	cmp	r4, #2
 80138bc:	d05e      	beq.n	801397c <__ieee754_atan2f+0x108>
 80138be:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8013990 <__ieee754_atan2f+0x11c>
 80138c2:	2c03      	cmp	r4, #3
 80138c4:	bf08      	it	eq
 80138c6:	eef0 7a47 	vmoveq.f32	s15, s14
 80138ca:	e7e6      	b.n	801389a <__ieee754_atan2f+0x26>
 80138cc:	b941      	cbnz	r1, 80138e0 <__ieee754_atan2f+0x6c>
 80138ce:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8013994 <__ieee754_atan2f+0x120>
 80138d2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8013998 <__ieee754_atan2f+0x124>
 80138d6:	2800      	cmp	r0, #0
 80138d8:	bfa8      	it	ge
 80138da:	eef0 7a47 	vmovge.f32	s15, s14
 80138de:	e7dc      	b.n	801389a <__ieee754_atan2f+0x26>
 80138e0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80138e4:	d110      	bne.n	8013908 <__ieee754_atan2f+0x94>
 80138e6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80138ea:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 80138ee:	d107      	bne.n	8013900 <__ieee754_atan2f+0x8c>
 80138f0:	2c02      	cmp	r4, #2
 80138f2:	d846      	bhi.n	8013982 <__ieee754_atan2f+0x10e>
 80138f4:	4b29      	ldr	r3, [pc, #164]	@ (801399c <__ieee754_atan2f+0x128>)
 80138f6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80138fa:	edd3 7a00 	vldr	s15, [r3]
 80138fe:	e7cc      	b.n	801389a <__ieee754_atan2f+0x26>
 8013900:	2c02      	cmp	r4, #2
 8013902:	d841      	bhi.n	8013988 <__ieee754_atan2f+0x114>
 8013904:	4b26      	ldr	r3, [pc, #152]	@ (80139a0 <__ieee754_atan2f+0x12c>)
 8013906:	e7f6      	b.n	80138f6 <__ieee754_atan2f+0x82>
 8013908:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801390c:	d0df      	beq.n	80138ce <__ieee754_atan2f+0x5a>
 801390e:	1a5b      	subs	r3, r3, r1
 8013910:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8013914:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8013918:	da1a      	bge.n	8013950 <__ieee754_atan2f+0xdc>
 801391a:	2a00      	cmp	r2, #0
 801391c:	da01      	bge.n	8013922 <__ieee754_atan2f+0xae>
 801391e:	313c      	adds	r1, #60	@ 0x3c
 8013920:	db19      	blt.n	8013956 <__ieee754_atan2f+0xe2>
 8013922:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8013926:	f7ff fd61 	bl	80133ec <fabsf>
 801392a:	f001 fe8b 	bl	8015644 <atanf>
 801392e:	eef0 7a40 	vmov.f32	s15, s0
 8013932:	2c01      	cmp	r4, #1
 8013934:	d012      	beq.n	801395c <__ieee754_atan2f+0xe8>
 8013936:	2c02      	cmp	r4, #2
 8013938:	d017      	beq.n	801396a <__ieee754_atan2f+0xf6>
 801393a:	2c00      	cmp	r4, #0
 801393c:	d0ad      	beq.n	801389a <__ieee754_atan2f+0x26>
 801393e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80139a4 <__ieee754_atan2f+0x130>
 8013942:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013946:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80139a8 <__ieee754_atan2f+0x134>
 801394a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801394e:	e7a4      	b.n	801389a <__ieee754_atan2f+0x26>
 8013950:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8013998 <__ieee754_atan2f+0x124>
 8013954:	e7ed      	b.n	8013932 <__ieee754_atan2f+0xbe>
 8013956:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80139ac <__ieee754_atan2f+0x138>
 801395a:	e7ea      	b.n	8013932 <__ieee754_atan2f+0xbe>
 801395c:	ee17 3a90 	vmov	r3, s15
 8013960:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8013964:	ee07 3a90 	vmov	s15, r3
 8013968:	e797      	b.n	801389a <__ieee754_atan2f+0x26>
 801396a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80139a4 <__ieee754_atan2f+0x130>
 801396e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013972:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80139a8 <__ieee754_atan2f+0x134>
 8013976:	ee77 7a67 	vsub.f32	s15, s14, s15
 801397a:	e78e      	b.n	801389a <__ieee754_atan2f+0x26>
 801397c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80139a8 <__ieee754_atan2f+0x134>
 8013980:	e78b      	b.n	801389a <__ieee754_atan2f+0x26>
 8013982:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80139b0 <__ieee754_atan2f+0x13c>
 8013986:	e788      	b.n	801389a <__ieee754_atan2f+0x26>
 8013988:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80139ac <__ieee754_atan2f+0x138>
 801398c:	e785      	b.n	801389a <__ieee754_atan2f+0x26>
 801398e:	bf00      	nop
 8013990:	c0490fdb 	.word	0xc0490fdb
 8013994:	bfc90fdb 	.word	0xbfc90fdb
 8013998:	3fc90fdb 	.word	0x3fc90fdb
 801399c:	08015eec 	.word	0x08015eec
 80139a0:	08015ee0 	.word	0x08015ee0
 80139a4:	33bbbd2e 	.word	0x33bbbd2e
 80139a8:	40490fdb 	.word	0x40490fdb
 80139ac:	00000000 	.word	0x00000000
 80139b0:	3f490fdb 	.word	0x3f490fdb

080139b4 <__ieee754_sqrt>:
 80139b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139b8:	4a66      	ldr	r2, [pc, #408]	@ (8013b54 <__ieee754_sqrt+0x1a0>)
 80139ba:	ec55 4b10 	vmov	r4, r5, d0
 80139be:	43aa      	bics	r2, r5
 80139c0:	462b      	mov	r3, r5
 80139c2:	4621      	mov	r1, r4
 80139c4:	d110      	bne.n	80139e8 <__ieee754_sqrt+0x34>
 80139c6:	4622      	mov	r2, r4
 80139c8:	4620      	mov	r0, r4
 80139ca:	4629      	mov	r1, r5
 80139cc:	f7ec fe34 	bl	8000638 <__aeabi_dmul>
 80139d0:	4602      	mov	r2, r0
 80139d2:	460b      	mov	r3, r1
 80139d4:	4620      	mov	r0, r4
 80139d6:	4629      	mov	r1, r5
 80139d8:	f7ec fc78 	bl	80002cc <__adddf3>
 80139dc:	4604      	mov	r4, r0
 80139de:	460d      	mov	r5, r1
 80139e0:	ec45 4b10 	vmov	d0, r4, r5
 80139e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139e8:	2d00      	cmp	r5, #0
 80139ea:	dc0e      	bgt.n	8013a0a <__ieee754_sqrt+0x56>
 80139ec:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80139f0:	4322      	orrs	r2, r4
 80139f2:	d0f5      	beq.n	80139e0 <__ieee754_sqrt+0x2c>
 80139f4:	b19d      	cbz	r5, 8013a1e <__ieee754_sqrt+0x6a>
 80139f6:	4622      	mov	r2, r4
 80139f8:	4620      	mov	r0, r4
 80139fa:	4629      	mov	r1, r5
 80139fc:	f7ec fc64 	bl	80002c8 <__aeabi_dsub>
 8013a00:	4602      	mov	r2, r0
 8013a02:	460b      	mov	r3, r1
 8013a04:	f7ec ff42 	bl	800088c <__aeabi_ddiv>
 8013a08:	e7e8      	b.n	80139dc <__ieee754_sqrt+0x28>
 8013a0a:	152a      	asrs	r2, r5, #20
 8013a0c:	d115      	bne.n	8013a3a <__ieee754_sqrt+0x86>
 8013a0e:	2000      	movs	r0, #0
 8013a10:	e009      	b.n	8013a26 <__ieee754_sqrt+0x72>
 8013a12:	0acb      	lsrs	r3, r1, #11
 8013a14:	3a15      	subs	r2, #21
 8013a16:	0549      	lsls	r1, r1, #21
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d0fa      	beq.n	8013a12 <__ieee754_sqrt+0x5e>
 8013a1c:	e7f7      	b.n	8013a0e <__ieee754_sqrt+0x5a>
 8013a1e:	462a      	mov	r2, r5
 8013a20:	e7fa      	b.n	8013a18 <__ieee754_sqrt+0x64>
 8013a22:	005b      	lsls	r3, r3, #1
 8013a24:	3001      	adds	r0, #1
 8013a26:	02dc      	lsls	r4, r3, #11
 8013a28:	d5fb      	bpl.n	8013a22 <__ieee754_sqrt+0x6e>
 8013a2a:	1e44      	subs	r4, r0, #1
 8013a2c:	1b12      	subs	r2, r2, r4
 8013a2e:	f1c0 0420 	rsb	r4, r0, #32
 8013a32:	fa21 f404 	lsr.w	r4, r1, r4
 8013a36:	4323      	orrs	r3, r4
 8013a38:	4081      	lsls	r1, r0
 8013a3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013a3e:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8013a42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013a46:	07d2      	lsls	r2, r2, #31
 8013a48:	bf5c      	itt	pl
 8013a4a:	005b      	lslpl	r3, r3, #1
 8013a4c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8013a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013a54:	bf58      	it	pl
 8013a56:	0049      	lslpl	r1, r1, #1
 8013a58:	2600      	movs	r6, #0
 8013a5a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8013a5e:	107f      	asrs	r7, r7, #1
 8013a60:	0049      	lsls	r1, r1, #1
 8013a62:	2016      	movs	r0, #22
 8013a64:	4632      	mov	r2, r6
 8013a66:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8013a6a:	1915      	adds	r5, r2, r4
 8013a6c:	429d      	cmp	r5, r3
 8013a6e:	bfde      	ittt	le
 8013a70:	192a      	addle	r2, r5, r4
 8013a72:	1b5b      	suble	r3, r3, r5
 8013a74:	1936      	addle	r6, r6, r4
 8013a76:	0fcd      	lsrs	r5, r1, #31
 8013a78:	3801      	subs	r0, #1
 8013a7a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8013a7e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013a82:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8013a86:	d1f0      	bne.n	8013a6a <__ieee754_sqrt+0xb6>
 8013a88:	4605      	mov	r5, r0
 8013a8a:	2420      	movs	r4, #32
 8013a8c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8013a90:	4293      	cmp	r3, r2
 8013a92:	eb0c 0e00 	add.w	lr, ip, r0
 8013a96:	dc02      	bgt.n	8013a9e <__ieee754_sqrt+0xea>
 8013a98:	d113      	bne.n	8013ac2 <__ieee754_sqrt+0x10e>
 8013a9a:	458e      	cmp	lr, r1
 8013a9c:	d811      	bhi.n	8013ac2 <__ieee754_sqrt+0x10e>
 8013a9e:	f1be 0f00 	cmp.w	lr, #0
 8013aa2:	eb0e 000c 	add.w	r0, lr, ip
 8013aa6:	da3f      	bge.n	8013b28 <__ieee754_sqrt+0x174>
 8013aa8:	2800      	cmp	r0, #0
 8013aaa:	db3d      	blt.n	8013b28 <__ieee754_sqrt+0x174>
 8013aac:	f102 0801 	add.w	r8, r2, #1
 8013ab0:	1a9b      	subs	r3, r3, r2
 8013ab2:	458e      	cmp	lr, r1
 8013ab4:	bf88      	it	hi
 8013ab6:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8013aba:	eba1 010e 	sub.w	r1, r1, lr
 8013abe:	4465      	add	r5, ip
 8013ac0:	4642      	mov	r2, r8
 8013ac2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8013ac6:	3c01      	subs	r4, #1
 8013ac8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8013acc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013ad0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8013ad4:	d1dc      	bne.n	8013a90 <__ieee754_sqrt+0xdc>
 8013ad6:	4319      	orrs	r1, r3
 8013ad8:	d01b      	beq.n	8013b12 <__ieee754_sqrt+0x15e>
 8013ada:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8013b58 <__ieee754_sqrt+0x1a4>
 8013ade:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8013b5c <__ieee754_sqrt+0x1a8>
 8013ae2:	e9da 0100 	ldrd	r0, r1, [sl]
 8013ae6:	e9db 2300 	ldrd	r2, r3, [fp]
 8013aea:	f7ec fbed 	bl	80002c8 <__aeabi_dsub>
 8013aee:	e9da 8900 	ldrd	r8, r9, [sl]
 8013af2:	4602      	mov	r2, r0
 8013af4:	460b      	mov	r3, r1
 8013af6:	4640      	mov	r0, r8
 8013af8:	4649      	mov	r1, r9
 8013afa:	f7ed f819 	bl	8000b30 <__aeabi_dcmple>
 8013afe:	b140      	cbz	r0, 8013b12 <__ieee754_sqrt+0x15e>
 8013b00:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8013b04:	e9da 0100 	ldrd	r0, r1, [sl]
 8013b08:	e9db 2300 	ldrd	r2, r3, [fp]
 8013b0c:	d10e      	bne.n	8013b2c <__ieee754_sqrt+0x178>
 8013b0e:	3601      	adds	r6, #1
 8013b10:	4625      	mov	r5, r4
 8013b12:	1073      	asrs	r3, r6, #1
 8013b14:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8013b18:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8013b1c:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8013b20:	086b      	lsrs	r3, r5, #1
 8013b22:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8013b26:	e759      	b.n	80139dc <__ieee754_sqrt+0x28>
 8013b28:	4690      	mov	r8, r2
 8013b2a:	e7c1      	b.n	8013ab0 <__ieee754_sqrt+0xfc>
 8013b2c:	f7ec fbce 	bl	80002cc <__adddf3>
 8013b30:	e9da 8900 	ldrd	r8, r9, [sl]
 8013b34:	4602      	mov	r2, r0
 8013b36:	460b      	mov	r3, r1
 8013b38:	4640      	mov	r0, r8
 8013b3a:	4649      	mov	r1, r9
 8013b3c:	f7ec ffee 	bl	8000b1c <__aeabi_dcmplt>
 8013b40:	b120      	cbz	r0, 8013b4c <__ieee754_sqrt+0x198>
 8013b42:	1cab      	adds	r3, r5, #2
 8013b44:	bf08      	it	eq
 8013b46:	3601      	addeq	r6, #1
 8013b48:	3502      	adds	r5, #2
 8013b4a:	e7e2      	b.n	8013b12 <__ieee754_sqrt+0x15e>
 8013b4c:	1c6b      	adds	r3, r5, #1
 8013b4e:	f023 0501 	bic.w	r5, r3, #1
 8013b52:	e7de      	b.n	8013b12 <__ieee754_sqrt+0x15e>
 8013b54:	7ff00000 	.word	0x7ff00000
 8013b58:	08015f00 	.word	0x08015f00
 8013b5c:	08015ef8 	.word	0x08015ef8

08013b60 <__ieee754_sqrtf>:
 8013b60:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013b64:	4770      	bx	lr
	...

08013b68 <floor>:
 8013b68:	ec51 0b10 	vmov	r0, r1, d0
 8013b6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b74:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8013b78:	2e13      	cmp	r6, #19
 8013b7a:	460c      	mov	r4, r1
 8013b7c:	4605      	mov	r5, r0
 8013b7e:	4680      	mov	r8, r0
 8013b80:	dc34      	bgt.n	8013bec <floor+0x84>
 8013b82:	2e00      	cmp	r6, #0
 8013b84:	da17      	bge.n	8013bb6 <floor+0x4e>
 8013b86:	a332      	add	r3, pc, #200	@ (adr r3, 8013c50 <floor+0xe8>)
 8013b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b8c:	f7ec fb9e 	bl	80002cc <__adddf3>
 8013b90:	2200      	movs	r2, #0
 8013b92:	2300      	movs	r3, #0
 8013b94:	f7ec ffe0 	bl	8000b58 <__aeabi_dcmpgt>
 8013b98:	b150      	cbz	r0, 8013bb0 <floor+0x48>
 8013b9a:	2c00      	cmp	r4, #0
 8013b9c:	da55      	bge.n	8013c4a <floor+0xe2>
 8013b9e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8013ba2:	432c      	orrs	r4, r5
 8013ba4:	2500      	movs	r5, #0
 8013ba6:	42ac      	cmp	r4, r5
 8013ba8:	4c2b      	ldr	r4, [pc, #172]	@ (8013c58 <floor+0xf0>)
 8013baa:	bf08      	it	eq
 8013bac:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8013bb0:	4621      	mov	r1, r4
 8013bb2:	4628      	mov	r0, r5
 8013bb4:	e023      	b.n	8013bfe <floor+0x96>
 8013bb6:	4f29      	ldr	r7, [pc, #164]	@ (8013c5c <floor+0xf4>)
 8013bb8:	4137      	asrs	r7, r6
 8013bba:	ea01 0307 	and.w	r3, r1, r7
 8013bbe:	4303      	orrs	r3, r0
 8013bc0:	d01d      	beq.n	8013bfe <floor+0x96>
 8013bc2:	a323      	add	r3, pc, #140	@ (adr r3, 8013c50 <floor+0xe8>)
 8013bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bc8:	f7ec fb80 	bl	80002cc <__adddf3>
 8013bcc:	2200      	movs	r2, #0
 8013bce:	2300      	movs	r3, #0
 8013bd0:	f7ec ffc2 	bl	8000b58 <__aeabi_dcmpgt>
 8013bd4:	2800      	cmp	r0, #0
 8013bd6:	d0eb      	beq.n	8013bb0 <floor+0x48>
 8013bd8:	2c00      	cmp	r4, #0
 8013bda:	bfbe      	ittt	lt
 8013bdc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8013be0:	4133      	asrlt	r3, r6
 8013be2:	18e4      	addlt	r4, r4, r3
 8013be4:	ea24 0407 	bic.w	r4, r4, r7
 8013be8:	2500      	movs	r5, #0
 8013bea:	e7e1      	b.n	8013bb0 <floor+0x48>
 8013bec:	2e33      	cmp	r6, #51	@ 0x33
 8013bee:	dd0a      	ble.n	8013c06 <floor+0x9e>
 8013bf0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8013bf4:	d103      	bne.n	8013bfe <floor+0x96>
 8013bf6:	4602      	mov	r2, r0
 8013bf8:	460b      	mov	r3, r1
 8013bfa:	f7ec fb67 	bl	80002cc <__adddf3>
 8013bfe:	ec41 0b10 	vmov	d0, r0, r1
 8013c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c06:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8013c0a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013c0e:	40df      	lsrs	r7, r3
 8013c10:	4207      	tst	r7, r0
 8013c12:	d0f4      	beq.n	8013bfe <floor+0x96>
 8013c14:	a30e      	add	r3, pc, #56	@ (adr r3, 8013c50 <floor+0xe8>)
 8013c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c1a:	f7ec fb57 	bl	80002cc <__adddf3>
 8013c1e:	2200      	movs	r2, #0
 8013c20:	2300      	movs	r3, #0
 8013c22:	f7ec ff99 	bl	8000b58 <__aeabi_dcmpgt>
 8013c26:	2800      	cmp	r0, #0
 8013c28:	d0c2      	beq.n	8013bb0 <floor+0x48>
 8013c2a:	2c00      	cmp	r4, #0
 8013c2c:	da0a      	bge.n	8013c44 <floor+0xdc>
 8013c2e:	2e14      	cmp	r6, #20
 8013c30:	d101      	bne.n	8013c36 <floor+0xce>
 8013c32:	3401      	adds	r4, #1
 8013c34:	e006      	b.n	8013c44 <floor+0xdc>
 8013c36:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8013c3a:	2301      	movs	r3, #1
 8013c3c:	40b3      	lsls	r3, r6
 8013c3e:	441d      	add	r5, r3
 8013c40:	4545      	cmp	r5, r8
 8013c42:	d3f6      	bcc.n	8013c32 <floor+0xca>
 8013c44:	ea25 0507 	bic.w	r5, r5, r7
 8013c48:	e7b2      	b.n	8013bb0 <floor+0x48>
 8013c4a:	2500      	movs	r5, #0
 8013c4c:	462c      	mov	r4, r5
 8013c4e:	e7af      	b.n	8013bb0 <floor+0x48>
 8013c50:	8800759c 	.word	0x8800759c
 8013c54:	7e37e43c 	.word	0x7e37e43c
 8013c58:	bff00000 	.word	0xbff00000
 8013c5c:	000fffff 	.word	0x000fffff

08013c60 <round>:
 8013c60:	ec51 0b10 	vmov	r0, r1, d0
 8013c64:	b570      	push	{r4, r5, r6, lr}
 8013c66:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8013c6a:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8013c6e:	2a13      	cmp	r2, #19
 8013c70:	460b      	mov	r3, r1
 8013c72:	4605      	mov	r5, r0
 8013c74:	dc1b      	bgt.n	8013cae <round+0x4e>
 8013c76:	2a00      	cmp	r2, #0
 8013c78:	da0b      	bge.n	8013c92 <round+0x32>
 8013c7a:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8013c7e:	3201      	adds	r2, #1
 8013c80:	bf04      	itt	eq
 8013c82:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8013c86:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	4619      	mov	r1, r3
 8013c8e:	4610      	mov	r0, r2
 8013c90:	e015      	b.n	8013cbe <round+0x5e>
 8013c92:	4c15      	ldr	r4, [pc, #84]	@ (8013ce8 <round+0x88>)
 8013c94:	4114      	asrs	r4, r2
 8013c96:	ea04 0601 	and.w	r6, r4, r1
 8013c9a:	4306      	orrs	r6, r0
 8013c9c:	d00f      	beq.n	8013cbe <round+0x5e>
 8013c9e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8013ca2:	fa41 f202 	asr.w	r2, r1, r2
 8013ca6:	4413      	add	r3, r2
 8013ca8:	ea23 0304 	bic.w	r3, r3, r4
 8013cac:	e7ed      	b.n	8013c8a <round+0x2a>
 8013cae:	2a33      	cmp	r2, #51	@ 0x33
 8013cb0:	dd08      	ble.n	8013cc4 <round+0x64>
 8013cb2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8013cb6:	d102      	bne.n	8013cbe <round+0x5e>
 8013cb8:	4602      	mov	r2, r0
 8013cba:	f7ec fb07 	bl	80002cc <__adddf3>
 8013cbe:	ec41 0b10 	vmov	d0, r0, r1
 8013cc2:	bd70      	pop	{r4, r5, r6, pc}
 8013cc4:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8013cc8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8013ccc:	40f4      	lsrs	r4, r6
 8013cce:	4204      	tst	r4, r0
 8013cd0:	d0f5      	beq.n	8013cbe <round+0x5e>
 8013cd2:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8013cd6:	2201      	movs	r2, #1
 8013cd8:	408a      	lsls	r2, r1
 8013cda:	1952      	adds	r2, r2, r5
 8013cdc:	bf28      	it	cs
 8013cde:	3301      	addcs	r3, #1
 8013ce0:	ea22 0204 	bic.w	r2, r2, r4
 8013ce4:	e7d2      	b.n	8013c8c <round+0x2c>
 8013ce6:	bf00      	nop
 8013ce8:	000fffff 	.word	0x000fffff

08013cec <fmaxf>:
 8013cec:	b508      	push	{r3, lr}
 8013cee:	ed2d 8b02 	vpush	{d8}
 8013cf2:	eeb0 8a40 	vmov.f32	s16, s0
 8013cf6:	eef0 8a60 	vmov.f32	s17, s1
 8013cfa:	f000 f831 	bl	8013d60 <__fpclassifyf>
 8013cfe:	b930      	cbnz	r0, 8013d0e <fmaxf+0x22>
 8013d00:	eeb0 8a68 	vmov.f32	s16, s17
 8013d04:	eeb0 0a48 	vmov.f32	s0, s16
 8013d08:	ecbd 8b02 	vpop	{d8}
 8013d0c:	bd08      	pop	{r3, pc}
 8013d0e:	eeb0 0a68 	vmov.f32	s0, s17
 8013d12:	f000 f825 	bl	8013d60 <__fpclassifyf>
 8013d16:	2800      	cmp	r0, #0
 8013d18:	d0f4      	beq.n	8013d04 <fmaxf+0x18>
 8013d1a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d22:	dded      	ble.n	8013d00 <fmaxf+0x14>
 8013d24:	e7ee      	b.n	8013d04 <fmaxf+0x18>

08013d26 <fminf>:
 8013d26:	b508      	push	{r3, lr}
 8013d28:	ed2d 8b02 	vpush	{d8}
 8013d2c:	eeb0 8a40 	vmov.f32	s16, s0
 8013d30:	eef0 8a60 	vmov.f32	s17, s1
 8013d34:	f000 f814 	bl	8013d60 <__fpclassifyf>
 8013d38:	b930      	cbnz	r0, 8013d48 <fminf+0x22>
 8013d3a:	eeb0 8a68 	vmov.f32	s16, s17
 8013d3e:	eeb0 0a48 	vmov.f32	s0, s16
 8013d42:	ecbd 8b02 	vpop	{d8}
 8013d46:	bd08      	pop	{r3, pc}
 8013d48:	eeb0 0a68 	vmov.f32	s0, s17
 8013d4c:	f000 f808 	bl	8013d60 <__fpclassifyf>
 8013d50:	2800      	cmp	r0, #0
 8013d52:	d0f4      	beq.n	8013d3e <fminf+0x18>
 8013d54:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d5c:	d5ed      	bpl.n	8013d3a <fminf+0x14>
 8013d5e:	e7ee      	b.n	8013d3e <fminf+0x18>

08013d60 <__fpclassifyf>:
 8013d60:	ee10 3a10 	vmov	r3, s0
 8013d64:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8013d68:	d00d      	beq.n	8013d86 <__fpclassifyf+0x26>
 8013d6a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8013d6e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8013d72:	d30a      	bcc.n	8013d8a <__fpclassifyf+0x2a>
 8013d74:	4b07      	ldr	r3, [pc, #28]	@ (8013d94 <__fpclassifyf+0x34>)
 8013d76:	1e42      	subs	r2, r0, #1
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d908      	bls.n	8013d8e <__fpclassifyf+0x2e>
 8013d7c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8013d80:	4258      	negs	r0, r3
 8013d82:	4158      	adcs	r0, r3
 8013d84:	4770      	bx	lr
 8013d86:	2002      	movs	r0, #2
 8013d88:	4770      	bx	lr
 8013d8a:	2004      	movs	r0, #4
 8013d8c:	4770      	bx	lr
 8013d8e:	2003      	movs	r0, #3
 8013d90:	4770      	bx	lr
 8013d92:	bf00      	nop
 8013d94:	007ffffe 	.word	0x007ffffe

08013d98 <__ieee754_pow>:
 8013d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d9c:	b091      	sub	sp, #68	@ 0x44
 8013d9e:	ed8d 1b00 	vstr	d1, [sp]
 8013da2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8013da6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8013daa:	ea5a 0001 	orrs.w	r0, sl, r1
 8013dae:	ec57 6b10 	vmov	r6, r7, d0
 8013db2:	d113      	bne.n	8013ddc <__ieee754_pow+0x44>
 8013db4:	19b3      	adds	r3, r6, r6
 8013db6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8013dba:	4152      	adcs	r2, r2
 8013dbc:	4298      	cmp	r0, r3
 8013dbe:	4b9a      	ldr	r3, [pc, #616]	@ (8014028 <__ieee754_pow+0x290>)
 8013dc0:	4193      	sbcs	r3, r2
 8013dc2:	f080 84ee 	bcs.w	80147a2 <__ieee754_pow+0xa0a>
 8013dc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013dca:	4630      	mov	r0, r6
 8013dcc:	4639      	mov	r1, r7
 8013dce:	f7ec fa7d 	bl	80002cc <__adddf3>
 8013dd2:	ec41 0b10 	vmov	d0, r0, r1
 8013dd6:	b011      	add	sp, #68	@ 0x44
 8013dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ddc:	4a93      	ldr	r2, [pc, #588]	@ (801402c <__ieee754_pow+0x294>)
 8013dde:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8013de2:	4295      	cmp	r5, r2
 8013de4:	46b8      	mov	r8, r7
 8013de6:	4633      	mov	r3, r6
 8013de8:	d80a      	bhi.n	8013e00 <__ieee754_pow+0x68>
 8013dea:	d104      	bne.n	8013df6 <__ieee754_pow+0x5e>
 8013dec:	2e00      	cmp	r6, #0
 8013dee:	d1ea      	bne.n	8013dc6 <__ieee754_pow+0x2e>
 8013df0:	45aa      	cmp	sl, r5
 8013df2:	d8e8      	bhi.n	8013dc6 <__ieee754_pow+0x2e>
 8013df4:	e001      	b.n	8013dfa <__ieee754_pow+0x62>
 8013df6:	4592      	cmp	sl, r2
 8013df8:	d802      	bhi.n	8013e00 <__ieee754_pow+0x68>
 8013dfa:	4592      	cmp	sl, r2
 8013dfc:	d10f      	bne.n	8013e1e <__ieee754_pow+0x86>
 8013dfe:	b171      	cbz	r1, 8013e1e <__ieee754_pow+0x86>
 8013e00:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8013e04:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8013e08:	ea58 0803 	orrs.w	r8, r8, r3
 8013e0c:	d1db      	bne.n	8013dc6 <__ieee754_pow+0x2e>
 8013e0e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013e12:	18db      	adds	r3, r3, r3
 8013e14:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8013e18:	4152      	adcs	r2, r2
 8013e1a:	4598      	cmp	r8, r3
 8013e1c:	e7cf      	b.n	8013dbe <__ieee754_pow+0x26>
 8013e1e:	f1b8 0f00 	cmp.w	r8, #0
 8013e22:	46ab      	mov	fp, r5
 8013e24:	da43      	bge.n	8013eae <__ieee754_pow+0x116>
 8013e26:	4a82      	ldr	r2, [pc, #520]	@ (8014030 <__ieee754_pow+0x298>)
 8013e28:	4592      	cmp	sl, r2
 8013e2a:	d856      	bhi.n	8013eda <__ieee754_pow+0x142>
 8013e2c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8013e30:	4592      	cmp	sl, r2
 8013e32:	f240 84c5 	bls.w	80147c0 <__ieee754_pow+0xa28>
 8013e36:	ea4f 522a 	mov.w	r2, sl, asr #20
 8013e3a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8013e3e:	2a14      	cmp	r2, #20
 8013e40:	dd18      	ble.n	8013e74 <__ieee754_pow+0xdc>
 8013e42:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8013e46:	fa21 f402 	lsr.w	r4, r1, r2
 8013e4a:	fa04 f202 	lsl.w	r2, r4, r2
 8013e4e:	428a      	cmp	r2, r1
 8013e50:	f040 84b6 	bne.w	80147c0 <__ieee754_pow+0xa28>
 8013e54:	f004 0401 	and.w	r4, r4, #1
 8013e58:	f1c4 0402 	rsb	r4, r4, #2
 8013e5c:	2900      	cmp	r1, #0
 8013e5e:	d159      	bne.n	8013f14 <__ieee754_pow+0x17c>
 8013e60:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8013e64:	d148      	bne.n	8013ef8 <__ieee754_pow+0x160>
 8013e66:	4632      	mov	r2, r6
 8013e68:	463b      	mov	r3, r7
 8013e6a:	4630      	mov	r0, r6
 8013e6c:	4639      	mov	r1, r7
 8013e6e:	f7ec fbe3 	bl	8000638 <__aeabi_dmul>
 8013e72:	e7ae      	b.n	8013dd2 <__ieee754_pow+0x3a>
 8013e74:	2900      	cmp	r1, #0
 8013e76:	d14c      	bne.n	8013f12 <__ieee754_pow+0x17a>
 8013e78:	f1c2 0214 	rsb	r2, r2, #20
 8013e7c:	fa4a f402 	asr.w	r4, sl, r2
 8013e80:	fa04 f202 	lsl.w	r2, r4, r2
 8013e84:	4552      	cmp	r2, sl
 8013e86:	f040 8498 	bne.w	80147ba <__ieee754_pow+0xa22>
 8013e8a:	f004 0401 	and.w	r4, r4, #1
 8013e8e:	f1c4 0402 	rsb	r4, r4, #2
 8013e92:	4a68      	ldr	r2, [pc, #416]	@ (8014034 <__ieee754_pow+0x29c>)
 8013e94:	4592      	cmp	sl, r2
 8013e96:	d1e3      	bne.n	8013e60 <__ieee754_pow+0xc8>
 8013e98:	f1b9 0f00 	cmp.w	r9, #0
 8013e9c:	f280 8489 	bge.w	80147b2 <__ieee754_pow+0xa1a>
 8013ea0:	4964      	ldr	r1, [pc, #400]	@ (8014034 <__ieee754_pow+0x29c>)
 8013ea2:	4632      	mov	r2, r6
 8013ea4:	463b      	mov	r3, r7
 8013ea6:	2000      	movs	r0, #0
 8013ea8:	f7ec fcf0 	bl	800088c <__aeabi_ddiv>
 8013eac:	e791      	b.n	8013dd2 <__ieee754_pow+0x3a>
 8013eae:	2400      	movs	r4, #0
 8013eb0:	bb81      	cbnz	r1, 8013f14 <__ieee754_pow+0x17c>
 8013eb2:	4a5e      	ldr	r2, [pc, #376]	@ (801402c <__ieee754_pow+0x294>)
 8013eb4:	4592      	cmp	sl, r2
 8013eb6:	d1ec      	bne.n	8013e92 <__ieee754_pow+0xfa>
 8013eb8:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8013ebc:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8013ec0:	431a      	orrs	r2, r3
 8013ec2:	f000 846e 	beq.w	80147a2 <__ieee754_pow+0xa0a>
 8013ec6:	4b5c      	ldr	r3, [pc, #368]	@ (8014038 <__ieee754_pow+0x2a0>)
 8013ec8:	429d      	cmp	r5, r3
 8013eca:	d908      	bls.n	8013ede <__ieee754_pow+0x146>
 8013ecc:	f1b9 0f00 	cmp.w	r9, #0
 8013ed0:	f280 846b 	bge.w	80147aa <__ieee754_pow+0xa12>
 8013ed4:	2000      	movs	r0, #0
 8013ed6:	2100      	movs	r1, #0
 8013ed8:	e77b      	b.n	8013dd2 <__ieee754_pow+0x3a>
 8013eda:	2402      	movs	r4, #2
 8013edc:	e7e8      	b.n	8013eb0 <__ieee754_pow+0x118>
 8013ede:	f1b9 0f00 	cmp.w	r9, #0
 8013ee2:	f04f 0000 	mov.w	r0, #0
 8013ee6:	f04f 0100 	mov.w	r1, #0
 8013eea:	f6bf af72 	bge.w	8013dd2 <__ieee754_pow+0x3a>
 8013eee:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013ef2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8013ef6:	e76c      	b.n	8013dd2 <__ieee754_pow+0x3a>
 8013ef8:	4a50      	ldr	r2, [pc, #320]	@ (801403c <__ieee754_pow+0x2a4>)
 8013efa:	4591      	cmp	r9, r2
 8013efc:	d10a      	bne.n	8013f14 <__ieee754_pow+0x17c>
 8013efe:	f1b8 0f00 	cmp.w	r8, #0
 8013f02:	db07      	blt.n	8013f14 <__ieee754_pow+0x17c>
 8013f04:	ec47 6b10 	vmov	d0, r6, r7
 8013f08:	b011      	add	sp, #68	@ 0x44
 8013f0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f0e:	f7ff bd51 	b.w	80139b4 <__ieee754_sqrt>
 8013f12:	2400      	movs	r4, #0
 8013f14:	ec47 6b10 	vmov	d0, r6, r7
 8013f18:	9302      	str	r3, [sp, #8]
 8013f1a:	f001 fc67 	bl	80157ec <fabs>
 8013f1e:	9b02      	ldr	r3, [sp, #8]
 8013f20:	ec51 0b10 	vmov	r0, r1, d0
 8013f24:	bb43      	cbnz	r3, 8013f78 <__ieee754_pow+0x1e0>
 8013f26:	4b43      	ldr	r3, [pc, #268]	@ (8014034 <__ieee754_pow+0x29c>)
 8013f28:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8013f2c:	429a      	cmp	r2, r3
 8013f2e:	d000      	beq.n	8013f32 <__ieee754_pow+0x19a>
 8013f30:	bb15      	cbnz	r5, 8013f78 <__ieee754_pow+0x1e0>
 8013f32:	f1b9 0f00 	cmp.w	r9, #0
 8013f36:	da05      	bge.n	8013f44 <__ieee754_pow+0x1ac>
 8013f38:	4602      	mov	r2, r0
 8013f3a:	460b      	mov	r3, r1
 8013f3c:	2000      	movs	r0, #0
 8013f3e:	493d      	ldr	r1, [pc, #244]	@ (8014034 <__ieee754_pow+0x29c>)
 8013f40:	f7ec fca4 	bl	800088c <__aeabi_ddiv>
 8013f44:	f1b8 0f00 	cmp.w	r8, #0
 8013f48:	f6bf af43 	bge.w	8013dd2 <__ieee754_pow+0x3a>
 8013f4c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8013f50:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8013f54:	4325      	orrs	r5, r4
 8013f56:	d108      	bne.n	8013f6a <__ieee754_pow+0x1d2>
 8013f58:	4602      	mov	r2, r0
 8013f5a:	460b      	mov	r3, r1
 8013f5c:	4610      	mov	r0, r2
 8013f5e:	4619      	mov	r1, r3
 8013f60:	f7ec f9b2 	bl	80002c8 <__aeabi_dsub>
 8013f64:	4602      	mov	r2, r0
 8013f66:	460b      	mov	r3, r1
 8013f68:	e79e      	b.n	8013ea8 <__ieee754_pow+0x110>
 8013f6a:	2c01      	cmp	r4, #1
 8013f6c:	f47f af31 	bne.w	8013dd2 <__ieee754_pow+0x3a>
 8013f70:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013f74:	4619      	mov	r1, r3
 8013f76:	e72c      	b.n	8013dd2 <__ieee754_pow+0x3a>
 8013f78:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8013f7c:	3b01      	subs	r3, #1
 8013f7e:	ea53 0204 	orrs.w	r2, r3, r4
 8013f82:	d102      	bne.n	8013f8a <__ieee754_pow+0x1f2>
 8013f84:	4632      	mov	r2, r6
 8013f86:	463b      	mov	r3, r7
 8013f88:	e7e8      	b.n	8013f5c <__ieee754_pow+0x1c4>
 8013f8a:	3c01      	subs	r4, #1
 8013f8c:	431c      	orrs	r4, r3
 8013f8e:	d016      	beq.n	8013fbe <__ieee754_pow+0x226>
 8013f90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8014018 <__ieee754_pow+0x280>
 8013f94:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8013f98:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013f9c:	f240 8110 	bls.w	80141c0 <__ieee754_pow+0x428>
 8013fa0:	4b27      	ldr	r3, [pc, #156]	@ (8014040 <__ieee754_pow+0x2a8>)
 8013fa2:	459a      	cmp	sl, r3
 8013fa4:	4b24      	ldr	r3, [pc, #144]	@ (8014038 <__ieee754_pow+0x2a0>)
 8013fa6:	d916      	bls.n	8013fd6 <__ieee754_pow+0x23e>
 8013fa8:	429d      	cmp	r5, r3
 8013faa:	d80b      	bhi.n	8013fc4 <__ieee754_pow+0x22c>
 8013fac:	f1b9 0f00 	cmp.w	r9, #0
 8013fb0:	da0b      	bge.n	8013fca <__ieee754_pow+0x232>
 8013fb2:	2000      	movs	r0, #0
 8013fb4:	b011      	add	sp, #68	@ 0x44
 8013fb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fba:	f000 be69 	b.w	8014c90 <__math_oflow>
 8013fbe:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8014020 <__ieee754_pow+0x288>
 8013fc2:	e7e7      	b.n	8013f94 <__ieee754_pow+0x1fc>
 8013fc4:	f1b9 0f00 	cmp.w	r9, #0
 8013fc8:	dcf3      	bgt.n	8013fb2 <__ieee754_pow+0x21a>
 8013fca:	2000      	movs	r0, #0
 8013fcc:	b011      	add	sp, #68	@ 0x44
 8013fce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fd2:	f000 be55 	b.w	8014c80 <__math_uflow>
 8013fd6:	429d      	cmp	r5, r3
 8013fd8:	d20c      	bcs.n	8013ff4 <__ieee754_pow+0x25c>
 8013fda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013fde:	2200      	movs	r2, #0
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	f7ec fd9b 	bl	8000b1c <__aeabi_dcmplt>
 8013fe6:	3800      	subs	r0, #0
 8013fe8:	bf18      	it	ne
 8013fea:	2001      	movne	r0, #1
 8013fec:	f1b9 0f00 	cmp.w	r9, #0
 8013ff0:	daec      	bge.n	8013fcc <__ieee754_pow+0x234>
 8013ff2:	e7df      	b.n	8013fb4 <__ieee754_pow+0x21c>
 8013ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8014034 <__ieee754_pow+0x29c>)
 8013ff6:	429d      	cmp	r5, r3
 8013ff8:	f04f 0200 	mov.w	r2, #0
 8013ffc:	d922      	bls.n	8014044 <__ieee754_pow+0x2ac>
 8013ffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014002:	2300      	movs	r3, #0
 8014004:	f7ec fd8a 	bl	8000b1c <__aeabi_dcmplt>
 8014008:	3800      	subs	r0, #0
 801400a:	bf18      	it	ne
 801400c:	2001      	movne	r0, #1
 801400e:	f1b9 0f00 	cmp.w	r9, #0
 8014012:	dccf      	bgt.n	8013fb4 <__ieee754_pow+0x21c>
 8014014:	e7da      	b.n	8013fcc <__ieee754_pow+0x234>
 8014016:	bf00      	nop
 8014018:	00000000 	.word	0x00000000
 801401c:	3ff00000 	.word	0x3ff00000
 8014020:	00000000 	.word	0x00000000
 8014024:	bff00000 	.word	0xbff00000
 8014028:	fff00000 	.word	0xfff00000
 801402c:	7ff00000 	.word	0x7ff00000
 8014030:	433fffff 	.word	0x433fffff
 8014034:	3ff00000 	.word	0x3ff00000
 8014038:	3fefffff 	.word	0x3fefffff
 801403c:	3fe00000 	.word	0x3fe00000
 8014040:	43f00000 	.word	0x43f00000
 8014044:	4b5a      	ldr	r3, [pc, #360]	@ (80141b0 <__ieee754_pow+0x418>)
 8014046:	f7ec f93f 	bl	80002c8 <__aeabi_dsub>
 801404a:	a351      	add	r3, pc, #324	@ (adr r3, 8014190 <__ieee754_pow+0x3f8>)
 801404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014050:	4604      	mov	r4, r0
 8014052:	460d      	mov	r5, r1
 8014054:	f7ec faf0 	bl	8000638 <__aeabi_dmul>
 8014058:	a34f      	add	r3, pc, #316	@ (adr r3, 8014198 <__ieee754_pow+0x400>)
 801405a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801405e:	4606      	mov	r6, r0
 8014060:	460f      	mov	r7, r1
 8014062:	4620      	mov	r0, r4
 8014064:	4629      	mov	r1, r5
 8014066:	f7ec fae7 	bl	8000638 <__aeabi_dmul>
 801406a:	4b52      	ldr	r3, [pc, #328]	@ (80141b4 <__ieee754_pow+0x41c>)
 801406c:	4682      	mov	sl, r0
 801406e:	468b      	mov	fp, r1
 8014070:	2200      	movs	r2, #0
 8014072:	4620      	mov	r0, r4
 8014074:	4629      	mov	r1, r5
 8014076:	f7ec fadf 	bl	8000638 <__aeabi_dmul>
 801407a:	4602      	mov	r2, r0
 801407c:	460b      	mov	r3, r1
 801407e:	a148      	add	r1, pc, #288	@ (adr r1, 80141a0 <__ieee754_pow+0x408>)
 8014080:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014084:	f7ec f920 	bl	80002c8 <__aeabi_dsub>
 8014088:	4622      	mov	r2, r4
 801408a:	462b      	mov	r3, r5
 801408c:	f7ec fad4 	bl	8000638 <__aeabi_dmul>
 8014090:	4602      	mov	r2, r0
 8014092:	460b      	mov	r3, r1
 8014094:	2000      	movs	r0, #0
 8014096:	4948      	ldr	r1, [pc, #288]	@ (80141b8 <__ieee754_pow+0x420>)
 8014098:	f7ec f916 	bl	80002c8 <__aeabi_dsub>
 801409c:	4622      	mov	r2, r4
 801409e:	4680      	mov	r8, r0
 80140a0:	4689      	mov	r9, r1
 80140a2:	462b      	mov	r3, r5
 80140a4:	4620      	mov	r0, r4
 80140a6:	4629      	mov	r1, r5
 80140a8:	f7ec fac6 	bl	8000638 <__aeabi_dmul>
 80140ac:	4602      	mov	r2, r0
 80140ae:	460b      	mov	r3, r1
 80140b0:	4640      	mov	r0, r8
 80140b2:	4649      	mov	r1, r9
 80140b4:	f7ec fac0 	bl	8000638 <__aeabi_dmul>
 80140b8:	a33b      	add	r3, pc, #236	@ (adr r3, 80141a8 <__ieee754_pow+0x410>)
 80140ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140be:	f7ec fabb 	bl	8000638 <__aeabi_dmul>
 80140c2:	4602      	mov	r2, r0
 80140c4:	460b      	mov	r3, r1
 80140c6:	4650      	mov	r0, sl
 80140c8:	4659      	mov	r1, fp
 80140ca:	f7ec f8fd 	bl	80002c8 <__aeabi_dsub>
 80140ce:	4602      	mov	r2, r0
 80140d0:	460b      	mov	r3, r1
 80140d2:	4680      	mov	r8, r0
 80140d4:	4689      	mov	r9, r1
 80140d6:	4630      	mov	r0, r6
 80140d8:	4639      	mov	r1, r7
 80140da:	f7ec f8f7 	bl	80002cc <__adddf3>
 80140de:	2400      	movs	r4, #0
 80140e0:	4632      	mov	r2, r6
 80140e2:	463b      	mov	r3, r7
 80140e4:	4620      	mov	r0, r4
 80140e6:	460d      	mov	r5, r1
 80140e8:	f7ec f8ee 	bl	80002c8 <__aeabi_dsub>
 80140ec:	4602      	mov	r2, r0
 80140ee:	460b      	mov	r3, r1
 80140f0:	4640      	mov	r0, r8
 80140f2:	4649      	mov	r1, r9
 80140f4:	f7ec f8e8 	bl	80002c8 <__aeabi_dsub>
 80140f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80140fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014100:	2300      	movs	r3, #0
 8014102:	9304      	str	r3, [sp, #16]
 8014104:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8014108:	4606      	mov	r6, r0
 801410a:	460f      	mov	r7, r1
 801410c:	465b      	mov	r3, fp
 801410e:	4652      	mov	r2, sl
 8014110:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014114:	f7ec f8d8 	bl	80002c8 <__aeabi_dsub>
 8014118:	4622      	mov	r2, r4
 801411a:	462b      	mov	r3, r5
 801411c:	f7ec fa8c 	bl	8000638 <__aeabi_dmul>
 8014120:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014124:	4680      	mov	r8, r0
 8014126:	4689      	mov	r9, r1
 8014128:	4630      	mov	r0, r6
 801412a:	4639      	mov	r1, r7
 801412c:	f7ec fa84 	bl	8000638 <__aeabi_dmul>
 8014130:	4602      	mov	r2, r0
 8014132:	460b      	mov	r3, r1
 8014134:	4640      	mov	r0, r8
 8014136:	4649      	mov	r1, r9
 8014138:	f7ec f8c8 	bl	80002cc <__adddf3>
 801413c:	465b      	mov	r3, fp
 801413e:	4606      	mov	r6, r0
 8014140:	460f      	mov	r7, r1
 8014142:	4652      	mov	r2, sl
 8014144:	4620      	mov	r0, r4
 8014146:	4629      	mov	r1, r5
 8014148:	f7ec fa76 	bl	8000638 <__aeabi_dmul>
 801414c:	460b      	mov	r3, r1
 801414e:	4602      	mov	r2, r0
 8014150:	4680      	mov	r8, r0
 8014152:	4689      	mov	r9, r1
 8014154:	4630      	mov	r0, r6
 8014156:	4639      	mov	r1, r7
 8014158:	f7ec f8b8 	bl	80002cc <__adddf3>
 801415c:	4b17      	ldr	r3, [pc, #92]	@ (80141bc <__ieee754_pow+0x424>)
 801415e:	4299      	cmp	r1, r3
 8014160:	4604      	mov	r4, r0
 8014162:	460d      	mov	r5, r1
 8014164:	468b      	mov	fp, r1
 8014166:	f340 820b 	ble.w	8014580 <__ieee754_pow+0x7e8>
 801416a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801416e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8014172:	4303      	orrs	r3, r0
 8014174:	f000 81ea 	beq.w	801454c <__ieee754_pow+0x7b4>
 8014178:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801417c:	2200      	movs	r2, #0
 801417e:	2300      	movs	r3, #0
 8014180:	f7ec fccc 	bl	8000b1c <__aeabi_dcmplt>
 8014184:	3800      	subs	r0, #0
 8014186:	bf18      	it	ne
 8014188:	2001      	movne	r0, #1
 801418a:	e713      	b.n	8013fb4 <__ieee754_pow+0x21c>
 801418c:	f3af 8000 	nop.w
 8014190:	60000000 	.word	0x60000000
 8014194:	3ff71547 	.word	0x3ff71547
 8014198:	f85ddf44 	.word	0xf85ddf44
 801419c:	3e54ae0b 	.word	0x3e54ae0b
 80141a0:	55555555 	.word	0x55555555
 80141a4:	3fd55555 	.word	0x3fd55555
 80141a8:	652b82fe 	.word	0x652b82fe
 80141ac:	3ff71547 	.word	0x3ff71547
 80141b0:	3ff00000 	.word	0x3ff00000
 80141b4:	3fd00000 	.word	0x3fd00000
 80141b8:	3fe00000 	.word	0x3fe00000
 80141bc:	408fffff 	.word	0x408fffff
 80141c0:	4bd5      	ldr	r3, [pc, #852]	@ (8014518 <__ieee754_pow+0x780>)
 80141c2:	ea08 0303 	and.w	r3, r8, r3
 80141c6:	2200      	movs	r2, #0
 80141c8:	b92b      	cbnz	r3, 80141d6 <__ieee754_pow+0x43e>
 80141ca:	4bd4      	ldr	r3, [pc, #848]	@ (801451c <__ieee754_pow+0x784>)
 80141cc:	f7ec fa34 	bl	8000638 <__aeabi_dmul>
 80141d0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80141d4:	468b      	mov	fp, r1
 80141d6:	ea4f 532b 	mov.w	r3, fp, asr #20
 80141da:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80141de:	4413      	add	r3, r2
 80141e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80141e2:	4bcf      	ldr	r3, [pc, #828]	@ (8014520 <__ieee754_pow+0x788>)
 80141e4:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80141e8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80141ec:	459b      	cmp	fp, r3
 80141ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80141f2:	dd08      	ble.n	8014206 <__ieee754_pow+0x46e>
 80141f4:	4bcb      	ldr	r3, [pc, #812]	@ (8014524 <__ieee754_pow+0x78c>)
 80141f6:	459b      	cmp	fp, r3
 80141f8:	f340 81a5 	ble.w	8014546 <__ieee754_pow+0x7ae>
 80141fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80141fe:	3301      	adds	r3, #1
 8014200:	930a      	str	r3, [sp, #40]	@ 0x28
 8014202:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8014206:	f04f 0a00 	mov.w	sl, #0
 801420a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801420e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014210:	4bc5      	ldr	r3, [pc, #788]	@ (8014528 <__ieee754_pow+0x790>)
 8014212:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014216:	ed93 7b00 	vldr	d7, [r3]
 801421a:	4629      	mov	r1, r5
 801421c:	ec53 2b17 	vmov	r2, r3, d7
 8014220:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014224:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014228:	f7ec f84e 	bl	80002c8 <__aeabi_dsub>
 801422c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014230:	4606      	mov	r6, r0
 8014232:	460f      	mov	r7, r1
 8014234:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014238:	f7ec f848 	bl	80002cc <__adddf3>
 801423c:	4602      	mov	r2, r0
 801423e:	460b      	mov	r3, r1
 8014240:	2000      	movs	r0, #0
 8014242:	49ba      	ldr	r1, [pc, #744]	@ (801452c <__ieee754_pow+0x794>)
 8014244:	f7ec fb22 	bl	800088c <__aeabi_ddiv>
 8014248:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801424c:	4602      	mov	r2, r0
 801424e:	460b      	mov	r3, r1
 8014250:	4630      	mov	r0, r6
 8014252:	4639      	mov	r1, r7
 8014254:	f7ec f9f0 	bl	8000638 <__aeabi_dmul>
 8014258:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801425c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8014260:	106d      	asrs	r5, r5, #1
 8014262:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8014266:	f04f 0b00 	mov.w	fp, #0
 801426a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801426e:	4661      	mov	r1, ip
 8014270:	2200      	movs	r2, #0
 8014272:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8014276:	4658      	mov	r0, fp
 8014278:	46e1      	mov	r9, ip
 801427a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801427e:	4614      	mov	r4, r2
 8014280:	461d      	mov	r5, r3
 8014282:	f7ec f9d9 	bl	8000638 <__aeabi_dmul>
 8014286:	4602      	mov	r2, r0
 8014288:	460b      	mov	r3, r1
 801428a:	4630      	mov	r0, r6
 801428c:	4639      	mov	r1, r7
 801428e:	f7ec f81b 	bl	80002c8 <__aeabi_dsub>
 8014292:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014296:	4606      	mov	r6, r0
 8014298:	460f      	mov	r7, r1
 801429a:	4620      	mov	r0, r4
 801429c:	4629      	mov	r1, r5
 801429e:	f7ec f813 	bl	80002c8 <__aeabi_dsub>
 80142a2:	4602      	mov	r2, r0
 80142a4:	460b      	mov	r3, r1
 80142a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80142aa:	f7ec f80d 	bl	80002c8 <__aeabi_dsub>
 80142ae:	465a      	mov	r2, fp
 80142b0:	464b      	mov	r3, r9
 80142b2:	f7ec f9c1 	bl	8000638 <__aeabi_dmul>
 80142b6:	4602      	mov	r2, r0
 80142b8:	460b      	mov	r3, r1
 80142ba:	4630      	mov	r0, r6
 80142bc:	4639      	mov	r1, r7
 80142be:	f7ec f803 	bl	80002c8 <__aeabi_dsub>
 80142c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80142c6:	f7ec f9b7 	bl	8000638 <__aeabi_dmul>
 80142ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80142ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80142d2:	4610      	mov	r0, r2
 80142d4:	4619      	mov	r1, r3
 80142d6:	f7ec f9af 	bl	8000638 <__aeabi_dmul>
 80142da:	a37d      	add	r3, pc, #500	@ (adr r3, 80144d0 <__ieee754_pow+0x738>)
 80142dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142e0:	4604      	mov	r4, r0
 80142e2:	460d      	mov	r5, r1
 80142e4:	f7ec f9a8 	bl	8000638 <__aeabi_dmul>
 80142e8:	a37b      	add	r3, pc, #492	@ (adr r3, 80144d8 <__ieee754_pow+0x740>)
 80142ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ee:	f7eb ffed 	bl	80002cc <__adddf3>
 80142f2:	4622      	mov	r2, r4
 80142f4:	462b      	mov	r3, r5
 80142f6:	f7ec f99f 	bl	8000638 <__aeabi_dmul>
 80142fa:	a379      	add	r3, pc, #484	@ (adr r3, 80144e0 <__ieee754_pow+0x748>)
 80142fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014300:	f7eb ffe4 	bl	80002cc <__adddf3>
 8014304:	4622      	mov	r2, r4
 8014306:	462b      	mov	r3, r5
 8014308:	f7ec f996 	bl	8000638 <__aeabi_dmul>
 801430c:	a376      	add	r3, pc, #472	@ (adr r3, 80144e8 <__ieee754_pow+0x750>)
 801430e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014312:	f7eb ffdb 	bl	80002cc <__adddf3>
 8014316:	4622      	mov	r2, r4
 8014318:	462b      	mov	r3, r5
 801431a:	f7ec f98d 	bl	8000638 <__aeabi_dmul>
 801431e:	a374      	add	r3, pc, #464	@ (adr r3, 80144f0 <__ieee754_pow+0x758>)
 8014320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014324:	f7eb ffd2 	bl	80002cc <__adddf3>
 8014328:	4622      	mov	r2, r4
 801432a:	462b      	mov	r3, r5
 801432c:	f7ec f984 	bl	8000638 <__aeabi_dmul>
 8014330:	a371      	add	r3, pc, #452	@ (adr r3, 80144f8 <__ieee754_pow+0x760>)
 8014332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014336:	f7eb ffc9 	bl	80002cc <__adddf3>
 801433a:	4622      	mov	r2, r4
 801433c:	4606      	mov	r6, r0
 801433e:	460f      	mov	r7, r1
 8014340:	462b      	mov	r3, r5
 8014342:	4620      	mov	r0, r4
 8014344:	4629      	mov	r1, r5
 8014346:	f7ec f977 	bl	8000638 <__aeabi_dmul>
 801434a:	4602      	mov	r2, r0
 801434c:	460b      	mov	r3, r1
 801434e:	4630      	mov	r0, r6
 8014350:	4639      	mov	r1, r7
 8014352:	f7ec f971 	bl	8000638 <__aeabi_dmul>
 8014356:	465a      	mov	r2, fp
 8014358:	4604      	mov	r4, r0
 801435a:	460d      	mov	r5, r1
 801435c:	464b      	mov	r3, r9
 801435e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014362:	f7eb ffb3 	bl	80002cc <__adddf3>
 8014366:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801436a:	f7ec f965 	bl	8000638 <__aeabi_dmul>
 801436e:	4622      	mov	r2, r4
 8014370:	462b      	mov	r3, r5
 8014372:	f7eb ffab 	bl	80002cc <__adddf3>
 8014376:	465a      	mov	r2, fp
 8014378:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801437c:	464b      	mov	r3, r9
 801437e:	4658      	mov	r0, fp
 8014380:	4649      	mov	r1, r9
 8014382:	f7ec f959 	bl	8000638 <__aeabi_dmul>
 8014386:	4b6a      	ldr	r3, [pc, #424]	@ (8014530 <__ieee754_pow+0x798>)
 8014388:	2200      	movs	r2, #0
 801438a:	4606      	mov	r6, r0
 801438c:	460f      	mov	r7, r1
 801438e:	f7eb ff9d 	bl	80002cc <__adddf3>
 8014392:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014396:	f7eb ff99 	bl	80002cc <__adddf3>
 801439a:	46d8      	mov	r8, fp
 801439c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80143a0:	460d      	mov	r5, r1
 80143a2:	465a      	mov	r2, fp
 80143a4:	460b      	mov	r3, r1
 80143a6:	4640      	mov	r0, r8
 80143a8:	4649      	mov	r1, r9
 80143aa:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80143ae:	f7ec f943 	bl	8000638 <__aeabi_dmul>
 80143b2:	465c      	mov	r4, fp
 80143b4:	4680      	mov	r8, r0
 80143b6:	4689      	mov	r9, r1
 80143b8:	4b5d      	ldr	r3, [pc, #372]	@ (8014530 <__ieee754_pow+0x798>)
 80143ba:	2200      	movs	r2, #0
 80143bc:	4620      	mov	r0, r4
 80143be:	4629      	mov	r1, r5
 80143c0:	f7eb ff82 	bl	80002c8 <__aeabi_dsub>
 80143c4:	4632      	mov	r2, r6
 80143c6:	463b      	mov	r3, r7
 80143c8:	f7eb ff7e 	bl	80002c8 <__aeabi_dsub>
 80143cc:	4602      	mov	r2, r0
 80143ce:	460b      	mov	r3, r1
 80143d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80143d4:	f7eb ff78 	bl	80002c8 <__aeabi_dsub>
 80143d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80143dc:	f7ec f92c 	bl	8000638 <__aeabi_dmul>
 80143e0:	4622      	mov	r2, r4
 80143e2:	4606      	mov	r6, r0
 80143e4:	460f      	mov	r7, r1
 80143e6:	462b      	mov	r3, r5
 80143e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80143ec:	f7ec f924 	bl	8000638 <__aeabi_dmul>
 80143f0:	4602      	mov	r2, r0
 80143f2:	460b      	mov	r3, r1
 80143f4:	4630      	mov	r0, r6
 80143f6:	4639      	mov	r1, r7
 80143f8:	f7eb ff68 	bl	80002cc <__adddf3>
 80143fc:	4606      	mov	r6, r0
 80143fe:	460f      	mov	r7, r1
 8014400:	4602      	mov	r2, r0
 8014402:	460b      	mov	r3, r1
 8014404:	4640      	mov	r0, r8
 8014406:	4649      	mov	r1, r9
 8014408:	f7eb ff60 	bl	80002cc <__adddf3>
 801440c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8014410:	a33b      	add	r3, pc, #236	@ (adr r3, 8014500 <__ieee754_pow+0x768>)
 8014412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014416:	4658      	mov	r0, fp
 8014418:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801441c:	460d      	mov	r5, r1
 801441e:	f7ec f90b 	bl	8000638 <__aeabi_dmul>
 8014422:	465c      	mov	r4, fp
 8014424:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014428:	4642      	mov	r2, r8
 801442a:	464b      	mov	r3, r9
 801442c:	4620      	mov	r0, r4
 801442e:	4629      	mov	r1, r5
 8014430:	f7eb ff4a 	bl	80002c8 <__aeabi_dsub>
 8014434:	4602      	mov	r2, r0
 8014436:	460b      	mov	r3, r1
 8014438:	4630      	mov	r0, r6
 801443a:	4639      	mov	r1, r7
 801443c:	f7eb ff44 	bl	80002c8 <__aeabi_dsub>
 8014440:	a331      	add	r3, pc, #196	@ (adr r3, 8014508 <__ieee754_pow+0x770>)
 8014442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014446:	f7ec f8f7 	bl	8000638 <__aeabi_dmul>
 801444a:	a331      	add	r3, pc, #196	@ (adr r3, 8014510 <__ieee754_pow+0x778>)
 801444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014450:	4606      	mov	r6, r0
 8014452:	460f      	mov	r7, r1
 8014454:	4620      	mov	r0, r4
 8014456:	4629      	mov	r1, r5
 8014458:	f7ec f8ee 	bl	8000638 <__aeabi_dmul>
 801445c:	4602      	mov	r2, r0
 801445e:	460b      	mov	r3, r1
 8014460:	4630      	mov	r0, r6
 8014462:	4639      	mov	r1, r7
 8014464:	f7eb ff32 	bl	80002cc <__adddf3>
 8014468:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801446a:	4b32      	ldr	r3, [pc, #200]	@ (8014534 <__ieee754_pow+0x79c>)
 801446c:	4413      	add	r3, r2
 801446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014472:	f7eb ff2b 	bl	80002cc <__adddf3>
 8014476:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801447a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801447c:	f7ec f872 	bl	8000564 <__aeabi_i2d>
 8014480:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014482:	4b2d      	ldr	r3, [pc, #180]	@ (8014538 <__ieee754_pow+0x7a0>)
 8014484:	4413      	add	r3, r2
 8014486:	e9d3 8900 	ldrd	r8, r9, [r3]
 801448a:	4606      	mov	r6, r0
 801448c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014490:	460f      	mov	r7, r1
 8014492:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014496:	f7eb ff19 	bl	80002cc <__adddf3>
 801449a:	4642      	mov	r2, r8
 801449c:	464b      	mov	r3, r9
 801449e:	f7eb ff15 	bl	80002cc <__adddf3>
 80144a2:	4632      	mov	r2, r6
 80144a4:	463b      	mov	r3, r7
 80144a6:	f7eb ff11 	bl	80002cc <__adddf3>
 80144aa:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80144ae:	4632      	mov	r2, r6
 80144b0:	463b      	mov	r3, r7
 80144b2:	4658      	mov	r0, fp
 80144b4:	460d      	mov	r5, r1
 80144b6:	f7eb ff07 	bl	80002c8 <__aeabi_dsub>
 80144ba:	4642      	mov	r2, r8
 80144bc:	464b      	mov	r3, r9
 80144be:	f7eb ff03 	bl	80002c8 <__aeabi_dsub>
 80144c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80144c6:	f7eb feff 	bl	80002c8 <__aeabi_dsub>
 80144ca:	465c      	mov	r4, fp
 80144cc:	e036      	b.n	801453c <__ieee754_pow+0x7a4>
 80144ce:	bf00      	nop
 80144d0:	4a454eef 	.word	0x4a454eef
 80144d4:	3fca7e28 	.word	0x3fca7e28
 80144d8:	93c9db65 	.word	0x93c9db65
 80144dc:	3fcd864a 	.word	0x3fcd864a
 80144e0:	a91d4101 	.word	0xa91d4101
 80144e4:	3fd17460 	.word	0x3fd17460
 80144e8:	518f264d 	.word	0x518f264d
 80144ec:	3fd55555 	.word	0x3fd55555
 80144f0:	db6fabff 	.word	0xdb6fabff
 80144f4:	3fdb6db6 	.word	0x3fdb6db6
 80144f8:	33333303 	.word	0x33333303
 80144fc:	3fe33333 	.word	0x3fe33333
 8014500:	e0000000 	.word	0xe0000000
 8014504:	3feec709 	.word	0x3feec709
 8014508:	dc3a03fd 	.word	0xdc3a03fd
 801450c:	3feec709 	.word	0x3feec709
 8014510:	145b01f5 	.word	0x145b01f5
 8014514:	be3e2fe0 	.word	0xbe3e2fe0
 8014518:	7ff00000 	.word	0x7ff00000
 801451c:	43400000 	.word	0x43400000
 8014520:	0003988e 	.word	0x0003988e
 8014524:	000bb679 	.word	0x000bb679
 8014528:	08015f28 	.word	0x08015f28
 801452c:	3ff00000 	.word	0x3ff00000
 8014530:	40080000 	.word	0x40080000
 8014534:	08015f08 	.word	0x08015f08
 8014538:	08015f18 	.word	0x08015f18
 801453c:	4602      	mov	r2, r0
 801453e:	460b      	mov	r3, r1
 8014540:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014544:	e5d6      	b.n	80140f4 <__ieee754_pow+0x35c>
 8014546:	f04f 0a01 	mov.w	sl, #1
 801454a:	e65e      	b.n	801420a <__ieee754_pow+0x472>
 801454c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8014824 <__ieee754_pow+0xa8c>)
 801454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014552:	4630      	mov	r0, r6
 8014554:	4639      	mov	r1, r7
 8014556:	f7eb feb9 	bl	80002cc <__adddf3>
 801455a:	4642      	mov	r2, r8
 801455c:	e9cd 0100 	strd	r0, r1, [sp]
 8014560:	464b      	mov	r3, r9
 8014562:	4620      	mov	r0, r4
 8014564:	4629      	mov	r1, r5
 8014566:	f7eb feaf 	bl	80002c8 <__aeabi_dsub>
 801456a:	4602      	mov	r2, r0
 801456c:	460b      	mov	r3, r1
 801456e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014572:	f7ec faf1 	bl	8000b58 <__aeabi_dcmpgt>
 8014576:	2800      	cmp	r0, #0
 8014578:	f47f adfe 	bne.w	8014178 <__ieee754_pow+0x3e0>
 801457c:	4ba2      	ldr	r3, [pc, #648]	@ (8014808 <__ieee754_pow+0xa70>)
 801457e:	e022      	b.n	80145c6 <__ieee754_pow+0x82e>
 8014580:	4ca2      	ldr	r4, [pc, #648]	@ (801480c <__ieee754_pow+0xa74>)
 8014582:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014586:	42a3      	cmp	r3, r4
 8014588:	d919      	bls.n	80145be <__ieee754_pow+0x826>
 801458a:	4ba1      	ldr	r3, [pc, #644]	@ (8014810 <__ieee754_pow+0xa78>)
 801458c:	440b      	add	r3, r1
 801458e:	4303      	orrs	r3, r0
 8014590:	d009      	beq.n	80145a6 <__ieee754_pow+0x80e>
 8014592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014596:	2200      	movs	r2, #0
 8014598:	2300      	movs	r3, #0
 801459a:	f7ec fabf 	bl	8000b1c <__aeabi_dcmplt>
 801459e:	3800      	subs	r0, #0
 80145a0:	bf18      	it	ne
 80145a2:	2001      	movne	r0, #1
 80145a4:	e512      	b.n	8013fcc <__ieee754_pow+0x234>
 80145a6:	4642      	mov	r2, r8
 80145a8:	464b      	mov	r3, r9
 80145aa:	f7eb fe8d 	bl	80002c8 <__aeabi_dsub>
 80145ae:	4632      	mov	r2, r6
 80145b0:	463b      	mov	r3, r7
 80145b2:	f7ec fac7 	bl	8000b44 <__aeabi_dcmpge>
 80145b6:	2800      	cmp	r0, #0
 80145b8:	d1eb      	bne.n	8014592 <__ieee754_pow+0x7fa>
 80145ba:	4b96      	ldr	r3, [pc, #600]	@ (8014814 <__ieee754_pow+0xa7c>)
 80145bc:	e003      	b.n	80145c6 <__ieee754_pow+0x82e>
 80145be:	4a96      	ldr	r2, [pc, #600]	@ (8014818 <__ieee754_pow+0xa80>)
 80145c0:	4293      	cmp	r3, r2
 80145c2:	f240 80e7 	bls.w	8014794 <__ieee754_pow+0x9fc>
 80145c6:	151b      	asrs	r3, r3, #20
 80145c8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80145cc:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80145d0:	fa4a fa03 	asr.w	sl, sl, r3
 80145d4:	44da      	add	sl, fp
 80145d6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80145da:	4890      	ldr	r0, [pc, #576]	@ (801481c <__ieee754_pow+0xa84>)
 80145dc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80145e0:	4108      	asrs	r0, r1
 80145e2:	ea00 030a 	and.w	r3, r0, sl
 80145e6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80145ea:	f1c1 0114 	rsb	r1, r1, #20
 80145ee:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80145f2:	fa4a fa01 	asr.w	sl, sl, r1
 80145f6:	f1bb 0f00 	cmp.w	fp, #0
 80145fa:	4640      	mov	r0, r8
 80145fc:	4649      	mov	r1, r9
 80145fe:	f04f 0200 	mov.w	r2, #0
 8014602:	bfb8      	it	lt
 8014604:	f1ca 0a00 	rsblt	sl, sl, #0
 8014608:	f7eb fe5e 	bl	80002c8 <__aeabi_dsub>
 801460c:	4680      	mov	r8, r0
 801460e:	4689      	mov	r9, r1
 8014610:	4632      	mov	r2, r6
 8014612:	463b      	mov	r3, r7
 8014614:	4640      	mov	r0, r8
 8014616:	4649      	mov	r1, r9
 8014618:	f7eb fe58 	bl	80002cc <__adddf3>
 801461c:	2400      	movs	r4, #0
 801461e:	a36a      	add	r3, pc, #424	@ (adr r3, 80147c8 <__ieee754_pow+0xa30>)
 8014620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014624:	4620      	mov	r0, r4
 8014626:	460d      	mov	r5, r1
 8014628:	f7ec f806 	bl	8000638 <__aeabi_dmul>
 801462c:	4642      	mov	r2, r8
 801462e:	e9cd 0100 	strd	r0, r1, [sp]
 8014632:	464b      	mov	r3, r9
 8014634:	4620      	mov	r0, r4
 8014636:	4629      	mov	r1, r5
 8014638:	f7eb fe46 	bl	80002c8 <__aeabi_dsub>
 801463c:	4602      	mov	r2, r0
 801463e:	460b      	mov	r3, r1
 8014640:	4630      	mov	r0, r6
 8014642:	4639      	mov	r1, r7
 8014644:	f7eb fe40 	bl	80002c8 <__aeabi_dsub>
 8014648:	a361      	add	r3, pc, #388	@ (adr r3, 80147d0 <__ieee754_pow+0xa38>)
 801464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801464e:	f7eb fff3 	bl	8000638 <__aeabi_dmul>
 8014652:	a361      	add	r3, pc, #388	@ (adr r3, 80147d8 <__ieee754_pow+0xa40>)
 8014654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014658:	4680      	mov	r8, r0
 801465a:	4689      	mov	r9, r1
 801465c:	4620      	mov	r0, r4
 801465e:	4629      	mov	r1, r5
 8014660:	f7eb ffea 	bl	8000638 <__aeabi_dmul>
 8014664:	4602      	mov	r2, r0
 8014666:	460b      	mov	r3, r1
 8014668:	4640      	mov	r0, r8
 801466a:	4649      	mov	r1, r9
 801466c:	f7eb fe2e 	bl	80002cc <__adddf3>
 8014670:	4604      	mov	r4, r0
 8014672:	460d      	mov	r5, r1
 8014674:	4602      	mov	r2, r0
 8014676:	460b      	mov	r3, r1
 8014678:	e9dd 0100 	ldrd	r0, r1, [sp]
 801467c:	f7eb fe26 	bl	80002cc <__adddf3>
 8014680:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014684:	4680      	mov	r8, r0
 8014686:	4689      	mov	r9, r1
 8014688:	f7eb fe1e 	bl	80002c8 <__aeabi_dsub>
 801468c:	4602      	mov	r2, r0
 801468e:	460b      	mov	r3, r1
 8014690:	4620      	mov	r0, r4
 8014692:	4629      	mov	r1, r5
 8014694:	f7eb fe18 	bl	80002c8 <__aeabi_dsub>
 8014698:	4642      	mov	r2, r8
 801469a:	4606      	mov	r6, r0
 801469c:	460f      	mov	r7, r1
 801469e:	464b      	mov	r3, r9
 80146a0:	4640      	mov	r0, r8
 80146a2:	4649      	mov	r1, r9
 80146a4:	f7eb ffc8 	bl	8000638 <__aeabi_dmul>
 80146a8:	a34d      	add	r3, pc, #308	@ (adr r3, 80147e0 <__ieee754_pow+0xa48>)
 80146aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146ae:	4604      	mov	r4, r0
 80146b0:	460d      	mov	r5, r1
 80146b2:	f7eb ffc1 	bl	8000638 <__aeabi_dmul>
 80146b6:	a34c      	add	r3, pc, #304	@ (adr r3, 80147e8 <__ieee754_pow+0xa50>)
 80146b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146bc:	f7eb fe04 	bl	80002c8 <__aeabi_dsub>
 80146c0:	4622      	mov	r2, r4
 80146c2:	462b      	mov	r3, r5
 80146c4:	f7eb ffb8 	bl	8000638 <__aeabi_dmul>
 80146c8:	a349      	add	r3, pc, #292	@ (adr r3, 80147f0 <__ieee754_pow+0xa58>)
 80146ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146ce:	f7eb fdfd 	bl	80002cc <__adddf3>
 80146d2:	4622      	mov	r2, r4
 80146d4:	462b      	mov	r3, r5
 80146d6:	f7eb ffaf 	bl	8000638 <__aeabi_dmul>
 80146da:	a347      	add	r3, pc, #284	@ (adr r3, 80147f8 <__ieee754_pow+0xa60>)
 80146dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146e0:	f7eb fdf2 	bl	80002c8 <__aeabi_dsub>
 80146e4:	4622      	mov	r2, r4
 80146e6:	462b      	mov	r3, r5
 80146e8:	f7eb ffa6 	bl	8000638 <__aeabi_dmul>
 80146ec:	a344      	add	r3, pc, #272	@ (adr r3, 8014800 <__ieee754_pow+0xa68>)
 80146ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146f2:	f7eb fdeb 	bl	80002cc <__adddf3>
 80146f6:	4622      	mov	r2, r4
 80146f8:	462b      	mov	r3, r5
 80146fa:	f7eb ff9d 	bl	8000638 <__aeabi_dmul>
 80146fe:	4602      	mov	r2, r0
 8014700:	460b      	mov	r3, r1
 8014702:	4640      	mov	r0, r8
 8014704:	4649      	mov	r1, r9
 8014706:	f7eb fddf 	bl	80002c8 <__aeabi_dsub>
 801470a:	4604      	mov	r4, r0
 801470c:	460d      	mov	r5, r1
 801470e:	4602      	mov	r2, r0
 8014710:	460b      	mov	r3, r1
 8014712:	4640      	mov	r0, r8
 8014714:	4649      	mov	r1, r9
 8014716:	f7eb ff8f 	bl	8000638 <__aeabi_dmul>
 801471a:	2200      	movs	r2, #0
 801471c:	e9cd 0100 	strd	r0, r1, [sp]
 8014720:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8014724:	4620      	mov	r0, r4
 8014726:	4629      	mov	r1, r5
 8014728:	f7eb fdce 	bl	80002c8 <__aeabi_dsub>
 801472c:	4602      	mov	r2, r0
 801472e:	460b      	mov	r3, r1
 8014730:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014734:	f7ec f8aa 	bl	800088c <__aeabi_ddiv>
 8014738:	4632      	mov	r2, r6
 801473a:	4604      	mov	r4, r0
 801473c:	460d      	mov	r5, r1
 801473e:	463b      	mov	r3, r7
 8014740:	4640      	mov	r0, r8
 8014742:	4649      	mov	r1, r9
 8014744:	f7eb ff78 	bl	8000638 <__aeabi_dmul>
 8014748:	4632      	mov	r2, r6
 801474a:	463b      	mov	r3, r7
 801474c:	f7eb fdbe 	bl	80002cc <__adddf3>
 8014750:	4602      	mov	r2, r0
 8014752:	460b      	mov	r3, r1
 8014754:	4620      	mov	r0, r4
 8014756:	4629      	mov	r1, r5
 8014758:	f7eb fdb6 	bl	80002c8 <__aeabi_dsub>
 801475c:	4642      	mov	r2, r8
 801475e:	464b      	mov	r3, r9
 8014760:	f7eb fdb2 	bl	80002c8 <__aeabi_dsub>
 8014764:	460b      	mov	r3, r1
 8014766:	4602      	mov	r2, r0
 8014768:	492d      	ldr	r1, [pc, #180]	@ (8014820 <__ieee754_pow+0xa88>)
 801476a:	2000      	movs	r0, #0
 801476c:	f7eb fdac 	bl	80002c8 <__aeabi_dsub>
 8014770:	ec41 0b10 	vmov	d0, r0, r1
 8014774:	ee10 3a90 	vmov	r3, s1
 8014778:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801477c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014780:	da0b      	bge.n	801479a <__ieee754_pow+0xa02>
 8014782:	4650      	mov	r0, sl
 8014784:	f001 f83c 	bl	8015800 <scalbn>
 8014788:	ec51 0b10 	vmov	r0, r1, d0
 801478c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014790:	f7ff bb6d 	b.w	8013e6e <__ieee754_pow+0xd6>
 8014794:	f8dd a010 	ldr.w	sl, [sp, #16]
 8014798:	e73a      	b.n	8014610 <__ieee754_pow+0x878>
 801479a:	ec51 0b10 	vmov	r0, r1, d0
 801479e:	4619      	mov	r1, r3
 80147a0:	e7f4      	b.n	801478c <__ieee754_pow+0x9f4>
 80147a2:	491f      	ldr	r1, [pc, #124]	@ (8014820 <__ieee754_pow+0xa88>)
 80147a4:	2000      	movs	r0, #0
 80147a6:	f7ff bb14 	b.w	8013dd2 <__ieee754_pow+0x3a>
 80147aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147ae:	f7ff bb10 	b.w	8013dd2 <__ieee754_pow+0x3a>
 80147b2:	4630      	mov	r0, r6
 80147b4:	4639      	mov	r1, r7
 80147b6:	f7ff bb0c 	b.w	8013dd2 <__ieee754_pow+0x3a>
 80147ba:	460c      	mov	r4, r1
 80147bc:	f7ff bb69 	b.w	8013e92 <__ieee754_pow+0xfa>
 80147c0:	2400      	movs	r4, #0
 80147c2:	f7ff bb4b 	b.w	8013e5c <__ieee754_pow+0xc4>
 80147c6:	bf00      	nop
 80147c8:	00000000 	.word	0x00000000
 80147cc:	3fe62e43 	.word	0x3fe62e43
 80147d0:	fefa39ef 	.word	0xfefa39ef
 80147d4:	3fe62e42 	.word	0x3fe62e42
 80147d8:	0ca86c39 	.word	0x0ca86c39
 80147dc:	be205c61 	.word	0xbe205c61
 80147e0:	72bea4d0 	.word	0x72bea4d0
 80147e4:	3e663769 	.word	0x3e663769
 80147e8:	c5d26bf1 	.word	0xc5d26bf1
 80147ec:	3ebbbd41 	.word	0x3ebbbd41
 80147f0:	af25de2c 	.word	0xaf25de2c
 80147f4:	3f11566a 	.word	0x3f11566a
 80147f8:	16bebd93 	.word	0x16bebd93
 80147fc:	3f66c16c 	.word	0x3f66c16c
 8014800:	5555553e 	.word	0x5555553e
 8014804:	3fc55555 	.word	0x3fc55555
 8014808:	40900000 	.word	0x40900000
 801480c:	4090cbff 	.word	0x4090cbff
 8014810:	3f6f3400 	.word	0x3f6f3400
 8014814:	4090cc00 	.word	0x4090cc00
 8014818:	3fe00000 	.word	0x3fe00000
 801481c:	fff00000 	.word	0xfff00000
 8014820:	3ff00000 	.word	0x3ff00000
 8014824:	652b82fe 	.word	0x652b82fe
 8014828:	3c971547 	.word	0x3c971547
 801482c:	00000000 	.word	0x00000000

08014830 <__ieee754_rem_pio2>:
 8014830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014834:	ec57 6b10 	vmov	r6, r7, d0
 8014838:	4bc5      	ldr	r3, [pc, #788]	@ (8014b50 <__ieee754_rem_pio2+0x320>)
 801483a:	b08d      	sub	sp, #52	@ 0x34
 801483c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8014840:	4598      	cmp	r8, r3
 8014842:	4604      	mov	r4, r0
 8014844:	9704      	str	r7, [sp, #16]
 8014846:	d807      	bhi.n	8014858 <__ieee754_rem_pio2+0x28>
 8014848:	2200      	movs	r2, #0
 801484a:	2300      	movs	r3, #0
 801484c:	ed80 0b00 	vstr	d0, [r0]
 8014850:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014854:	2500      	movs	r5, #0
 8014856:	e028      	b.n	80148aa <__ieee754_rem_pio2+0x7a>
 8014858:	4bbe      	ldr	r3, [pc, #760]	@ (8014b54 <__ieee754_rem_pio2+0x324>)
 801485a:	4598      	cmp	r8, r3
 801485c:	d878      	bhi.n	8014950 <__ieee754_rem_pio2+0x120>
 801485e:	9b04      	ldr	r3, [sp, #16]
 8014860:	4dbd      	ldr	r5, [pc, #756]	@ (8014b58 <__ieee754_rem_pio2+0x328>)
 8014862:	2b00      	cmp	r3, #0
 8014864:	4630      	mov	r0, r6
 8014866:	a3ac      	add	r3, pc, #688	@ (adr r3, 8014b18 <__ieee754_rem_pio2+0x2e8>)
 8014868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801486c:	4639      	mov	r1, r7
 801486e:	dd38      	ble.n	80148e2 <__ieee754_rem_pio2+0xb2>
 8014870:	f7eb fd2a 	bl	80002c8 <__aeabi_dsub>
 8014874:	45a8      	cmp	r8, r5
 8014876:	4606      	mov	r6, r0
 8014878:	460f      	mov	r7, r1
 801487a:	d01a      	beq.n	80148b2 <__ieee754_rem_pio2+0x82>
 801487c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8014b20 <__ieee754_rem_pio2+0x2f0>)
 801487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014882:	f7eb fd21 	bl	80002c8 <__aeabi_dsub>
 8014886:	4602      	mov	r2, r0
 8014888:	460b      	mov	r3, r1
 801488a:	4680      	mov	r8, r0
 801488c:	4689      	mov	r9, r1
 801488e:	4630      	mov	r0, r6
 8014890:	4639      	mov	r1, r7
 8014892:	f7eb fd19 	bl	80002c8 <__aeabi_dsub>
 8014896:	a3a2      	add	r3, pc, #648	@ (adr r3, 8014b20 <__ieee754_rem_pio2+0x2f0>)
 8014898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801489c:	f7eb fd14 	bl	80002c8 <__aeabi_dsub>
 80148a0:	e9c4 8900 	strd	r8, r9, [r4]
 80148a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80148a8:	2501      	movs	r5, #1
 80148aa:	4628      	mov	r0, r5
 80148ac:	b00d      	add	sp, #52	@ 0x34
 80148ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148b2:	a39d      	add	r3, pc, #628	@ (adr r3, 8014b28 <__ieee754_rem_pio2+0x2f8>)
 80148b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b8:	f7eb fd06 	bl	80002c8 <__aeabi_dsub>
 80148bc:	a39c      	add	r3, pc, #624	@ (adr r3, 8014b30 <__ieee754_rem_pio2+0x300>)
 80148be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c2:	4606      	mov	r6, r0
 80148c4:	460f      	mov	r7, r1
 80148c6:	f7eb fcff 	bl	80002c8 <__aeabi_dsub>
 80148ca:	4602      	mov	r2, r0
 80148cc:	460b      	mov	r3, r1
 80148ce:	4680      	mov	r8, r0
 80148d0:	4689      	mov	r9, r1
 80148d2:	4630      	mov	r0, r6
 80148d4:	4639      	mov	r1, r7
 80148d6:	f7eb fcf7 	bl	80002c8 <__aeabi_dsub>
 80148da:	a395      	add	r3, pc, #596	@ (adr r3, 8014b30 <__ieee754_rem_pio2+0x300>)
 80148dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148e0:	e7dc      	b.n	801489c <__ieee754_rem_pio2+0x6c>
 80148e2:	f7eb fcf3 	bl	80002cc <__adddf3>
 80148e6:	45a8      	cmp	r8, r5
 80148e8:	4606      	mov	r6, r0
 80148ea:	460f      	mov	r7, r1
 80148ec:	d018      	beq.n	8014920 <__ieee754_rem_pio2+0xf0>
 80148ee:	a38c      	add	r3, pc, #560	@ (adr r3, 8014b20 <__ieee754_rem_pio2+0x2f0>)
 80148f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148f4:	f7eb fcea 	bl	80002cc <__adddf3>
 80148f8:	4602      	mov	r2, r0
 80148fa:	460b      	mov	r3, r1
 80148fc:	4680      	mov	r8, r0
 80148fe:	4689      	mov	r9, r1
 8014900:	4630      	mov	r0, r6
 8014902:	4639      	mov	r1, r7
 8014904:	f7eb fce0 	bl	80002c8 <__aeabi_dsub>
 8014908:	a385      	add	r3, pc, #532	@ (adr r3, 8014b20 <__ieee754_rem_pio2+0x2f0>)
 801490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801490e:	f7eb fcdd 	bl	80002cc <__adddf3>
 8014912:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8014916:	e9c4 8900 	strd	r8, r9, [r4]
 801491a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801491e:	e7c4      	b.n	80148aa <__ieee754_rem_pio2+0x7a>
 8014920:	a381      	add	r3, pc, #516	@ (adr r3, 8014b28 <__ieee754_rem_pio2+0x2f8>)
 8014922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014926:	f7eb fcd1 	bl	80002cc <__adddf3>
 801492a:	a381      	add	r3, pc, #516	@ (adr r3, 8014b30 <__ieee754_rem_pio2+0x300>)
 801492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014930:	4606      	mov	r6, r0
 8014932:	460f      	mov	r7, r1
 8014934:	f7eb fcca 	bl	80002cc <__adddf3>
 8014938:	4602      	mov	r2, r0
 801493a:	460b      	mov	r3, r1
 801493c:	4680      	mov	r8, r0
 801493e:	4689      	mov	r9, r1
 8014940:	4630      	mov	r0, r6
 8014942:	4639      	mov	r1, r7
 8014944:	f7eb fcc0 	bl	80002c8 <__aeabi_dsub>
 8014948:	a379      	add	r3, pc, #484	@ (adr r3, 8014b30 <__ieee754_rem_pio2+0x300>)
 801494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801494e:	e7de      	b.n	801490e <__ieee754_rem_pio2+0xde>
 8014950:	4b82      	ldr	r3, [pc, #520]	@ (8014b5c <__ieee754_rem_pio2+0x32c>)
 8014952:	4598      	cmp	r8, r3
 8014954:	f200 80d1 	bhi.w	8014afa <__ieee754_rem_pio2+0x2ca>
 8014958:	f000 ff48 	bl	80157ec <fabs>
 801495c:	ec57 6b10 	vmov	r6, r7, d0
 8014960:	a375      	add	r3, pc, #468	@ (adr r3, 8014b38 <__ieee754_rem_pio2+0x308>)
 8014962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014966:	4630      	mov	r0, r6
 8014968:	4639      	mov	r1, r7
 801496a:	f7eb fe65 	bl	8000638 <__aeabi_dmul>
 801496e:	4b7c      	ldr	r3, [pc, #496]	@ (8014b60 <__ieee754_rem_pio2+0x330>)
 8014970:	2200      	movs	r2, #0
 8014972:	f7eb fcab 	bl	80002cc <__adddf3>
 8014976:	f7ec f90f 	bl	8000b98 <__aeabi_d2iz>
 801497a:	4605      	mov	r5, r0
 801497c:	f7eb fdf2 	bl	8000564 <__aeabi_i2d>
 8014980:	4602      	mov	r2, r0
 8014982:	460b      	mov	r3, r1
 8014984:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014988:	a363      	add	r3, pc, #396	@ (adr r3, 8014b18 <__ieee754_rem_pio2+0x2e8>)
 801498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801498e:	f7eb fe53 	bl	8000638 <__aeabi_dmul>
 8014992:	4602      	mov	r2, r0
 8014994:	460b      	mov	r3, r1
 8014996:	4630      	mov	r0, r6
 8014998:	4639      	mov	r1, r7
 801499a:	f7eb fc95 	bl	80002c8 <__aeabi_dsub>
 801499e:	a360      	add	r3, pc, #384	@ (adr r3, 8014b20 <__ieee754_rem_pio2+0x2f0>)
 80149a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149a4:	4682      	mov	sl, r0
 80149a6:	468b      	mov	fp, r1
 80149a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80149ac:	f7eb fe44 	bl	8000638 <__aeabi_dmul>
 80149b0:	2d1f      	cmp	r5, #31
 80149b2:	4606      	mov	r6, r0
 80149b4:	460f      	mov	r7, r1
 80149b6:	dc0c      	bgt.n	80149d2 <__ieee754_rem_pio2+0x1a2>
 80149b8:	4b6a      	ldr	r3, [pc, #424]	@ (8014b64 <__ieee754_rem_pio2+0x334>)
 80149ba:	1e6a      	subs	r2, r5, #1
 80149bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149c0:	4543      	cmp	r3, r8
 80149c2:	d006      	beq.n	80149d2 <__ieee754_rem_pio2+0x1a2>
 80149c4:	4632      	mov	r2, r6
 80149c6:	463b      	mov	r3, r7
 80149c8:	4650      	mov	r0, sl
 80149ca:	4659      	mov	r1, fp
 80149cc:	f7eb fc7c 	bl	80002c8 <__aeabi_dsub>
 80149d0:	e00e      	b.n	80149f0 <__ieee754_rem_pio2+0x1c0>
 80149d2:	463b      	mov	r3, r7
 80149d4:	4632      	mov	r2, r6
 80149d6:	4650      	mov	r0, sl
 80149d8:	4659      	mov	r1, fp
 80149da:	f7eb fc75 	bl	80002c8 <__aeabi_dsub>
 80149de:	ea4f 5328 	mov.w	r3, r8, asr #20
 80149e2:	9305      	str	r3, [sp, #20]
 80149e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80149e8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80149ec:	2b10      	cmp	r3, #16
 80149ee:	dc02      	bgt.n	80149f6 <__ieee754_rem_pio2+0x1c6>
 80149f0:	e9c4 0100 	strd	r0, r1, [r4]
 80149f4:	e039      	b.n	8014a6a <__ieee754_rem_pio2+0x23a>
 80149f6:	a34c      	add	r3, pc, #304	@ (adr r3, 8014b28 <__ieee754_rem_pio2+0x2f8>)
 80149f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a00:	f7eb fe1a 	bl	8000638 <__aeabi_dmul>
 8014a04:	4606      	mov	r6, r0
 8014a06:	460f      	mov	r7, r1
 8014a08:	4602      	mov	r2, r0
 8014a0a:	460b      	mov	r3, r1
 8014a0c:	4650      	mov	r0, sl
 8014a0e:	4659      	mov	r1, fp
 8014a10:	f7eb fc5a 	bl	80002c8 <__aeabi_dsub>
 8014a14:	4602      	mov	r2, r0
 8014a16:	460b      	mov	r3, r1
 8014a18:	4680      	mov	r8, r0
 8014a1a:	4689      	mov	r9, r1
 8014a1c:	4650      	mov	r0, sl
 8014a1e:	4659      	mov	r1, fp
 8014a20:	f7eb fc52 	bl	80002c8 <__aeabi_dsub>
 8014a24:	4632      	mov	r2, r6
 8014a26:	463b      	mov	r3, r7
 8014a28:	f7eb fc4e 	bl	80002c8 <__aeabi_dsub>
 8014a2c:	a340      	add	r3, pc, #256	@ (adr r3, 8014b30 <__ieee754_rem_pio2+0x300>)
 8014a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a32:	4606      	mov	r6, r0
 8014a34:	460f      	mov	r7, r1
 8014a36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a3a:	f7eb fdfd 	bl	8000638 <__aeabi_dmul>
 8014a3e:	4632      	mov	r2, r6
 8014a40:	463b      	mov	r3, r7
 8014a42:	f7eb fc41 	bl	80002c8 <__aeabi_dsub>
 8014a46:	4602      	mov	r2, r0
 8014a48:	460b      	mov	r3, r1
 8014a4a:	4606      	mov	r6, r0
 8014a4c:	460f      	mov	r7, r1
 8014a4e:	4640      	mov	r0, r8
 8014a50:	4649      	mov	r1, r9
 8014a52:	f7eb fc39 	bl	80002c8 <__aeabi_dsub>
 8014a56:	9a05      	ldr	r2, [sp, #20]
 8014a58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014a5c:	1ad3      	subs	r3, r2, r3
 8014a5e:	2b31      	cmp	r3, #49	@ 0x31
 8014a60:	dc20      	bgt.n	8014aa4 <__ieee754_rem_pio2+0x274>
 8014a62:	e9c4 0100 	strd	r0, r1, [r4]
 8014a66:	46c2      	mov	sl, r8
 8014a68:	46cb      	mov	fp, r9
 8014a6a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014a6e:	4650      	mov	r0, sl
 8014a70:	4642      	mov	r2, r8
 8014a72:	464b      	mov	r3, r9
 8014a74:	4659      	mov	r1, fp
 8014a76:	f7eb fc27 	bl	80002c8 <__aeabi_dsub>
 8014a7a:	463b      	mov	r3, r7
 8014a7c:	4632      	mov	r2, r6
 8014a7e:	f7eb fc23 	bl	80002c8 <__aeabi_dsub>
 8014a82:	9b04      	ldr	r3, [sp, #16]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014a8a:	f6bf af0e 	bge.w	80148aa <__ieee754_rem_pio2+0x7a>
 8014a8e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8014a92:	6063      	str	r3, [r4, #4]
 8014a94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014a98:	f8c4 8000 	str.w	r8, [r4]
 8014a9c:	60a0      	str	r0, [r4, #8]
 8014a9e:	60e3      	str	r3, [r4, #12]
 8014aa0:	426d      	negs	r5, r5
 8014aa2:	e702      	b.n	80148aa <__ieee754_rem_pio2+0x7a>
 8014aa4:	a326      	add	r3, pc, #152	@ (adr r3, 8014b40 <__ieee754_rem_pio2+0x310>)
 8014aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014aae:	f7eb fdc3 	bl	8000638 <__aeabi_dmul>
 8014ab2:	4606      	mov	r6, r0
 8014ab4:	460f      	mov	r7, r1
 8014ab6:	4602      	mov	r2, r0
 8014ab8:	460b      	mov	r3, r1
 8014aba:	4640      	mov	r0, r8
 8014abc:	4649      	mov	r1, r9
 8014abe:	f7eb fc03 	bl	80002c8 <__aeabi_dsub>
 8014ac2:	4602      	mov	r2, r0
 8014ac4:	460b      	mov	r3, r1
 8014ac6:	4682      	mov	sl, r0
 8014ac8:	468b      	mov	fp, r1
 8014aca:	4640      	mov	r0, r8
 8014acc:	4649      	mov	r1, r9
 8014ace:	f7eb fbfb 	bl	80002c8 <__aeabi_dsub>
 8014ad2:	4632      	mov	r2, r6
 8014ad4:	463b      	mov	r3, r7
 8014ad6:	f7eb fbf7 	bl	80002c8 <__aeabi_dsub>
 8014ada:	a31b      	add	r3, pc, #108	@ (adr r3, 8014b48 <__ieee754_rem_pio2+0x318>)
 8014adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ae0:	4606      	mov	r6, r0
 8014ae2:	460f      	mov	r7, r1
 8014ae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ae8:	f7eb fda6 	bl	8000638 <__aeabi_dmul>
 8014aec:	4632      	mov	r2, r6
 8014aee:	463b      	mov	r3, r7
 8014af0:	f7eb fbea 	bl	80002c8 <__aeabi_dsub>
 8014af4:	4606      	mov	r6, r0
 8014af6:	460f      	mov	r7, r1
 8014af8:	e764      	b.n	80149c4 <__ieee754_rem_pio2+0x194>
 8014afa:	4b1b      	ldr	r3, [pc, #108]	@ (8014b68 <__ieee754_rem_pio2+0x338>)
 8014afc:	4598      	cmp	r8, r3
 8014afe:	d935      	bls.n	8014b6c <__ieee754_rem_pio2+0x33c>
 8014b00:	4632      	mov	r2, r6
 8014b02:	463b      	mov	r3, r7
 8014b04:	4630      	mov	r0, r6
 8014b06:	4639      	mov	r1, r7
 8014b08:	f7eb fbde 	bl	80002c8 <__aeabi_dsub>
 8014b0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014b10:	e9c4 0100 	strd	r0, r1, [r4]
 8014b14:	e69e      	b.n	8014854 <__ieee754_rem_pio2+0x24>
 8014b16:	bf00      	nop
 8014b18:	54400000 	.word	0x54400000
 8014b1c:	3ff921fb 	.word	0x3ff921fb
 8014b20:	1a626331 	.word	0x1a626331
 8014b24:	3dd0b461 	.word	0x3dd0b461
 8014b28:	1a600000 	.word	0x1a600000
 8014b2c:	3dd0b461 	.word	0x3dd0b461
 8014b30:	2e037073 	.word	0x2e037073
 8014b34:	3ba3198a 	.word	0x3ba3198a
 8014b38:	6dc9c883 	.word	0x6dc9c883
 8014b3c:	3fe45f30 	.word	0x3fe45f30
 8014b40:	2e000000 	.word	0x2e000000
 8014b44:	3ba3198a 	.word	0x3ba3198a
 8014b48:	252049c1 	.word	0x252049c1
 8014b4c:	397b839a 	.word	0x397b839a
 8014b50:	3fe921fb 	.word	0x3fe921fb
 8014b54:	4002d97b 	.word	0x4002d97b
 8014b58:	3ff921fb 	.word	0x3ff921fb
 8014b5c:	413921fb 	.word	0x413921fb
 8014b60:	3fe00000 	.word	0x3fe00000
 8014b64:	08015f38 	.word	0x08015f38
 8014b68:	7fefffff 	.word	0x7fefffff
 8014b6c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014b70:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8014b74:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014b78:	4630      	mov	r0, r6
 8014b7a:	460f      	mov	r7, r1
 8014b7c:	f7ec f80c 	bl	8000b98 <__aeabi_d2iz>
 8014b80:	f7eb fcf0 	bl	8000564 <__aeabi_i2d>
 8014b84:	4602      	mov	r2, r0
 8014b86:	460b      	mov	r3, r1
 8014b88:	4630      	mov	r0, r6
 8014b8a:	4639      	mov	r1, r7
 8014b8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014b90:	f7eb fb9a 	bl	80002c8 <__aeabi_dsub>
 8014b94:	4b22      	ldr	r3, [pc, #136]	@ (8014c20 <__ieee754_rem_pio2+0x3f0>)
 8014b96:	2200      	movs	r2, #0
 8014b98:	f7eb fd4e 	bl	8000638 <__aeabi_dmul>
 8014b9c:	460f      	mov	r7, r1
 8014b9e:	4606      	mov	r6, r0
 8014ba0:	f7eb fffa 	bl	8000b98 <__aeabi_d2iz>
 8014ba4:	f7eb fcde 	bl	8000564 <__aeabi_i2d>
 8014ba8:	4602      	mov	r2, r0
 8014baa:	460b      	mov	r3, r1
 8014bac:	4630      	mov	r0, r6
 8014bae:	4639      	mov	r1, r7
 8014bb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014bb4:	f7eb fb88 	bl	80002c8 <__aeabi_dsub>
 8014bb8:	4b19      	ldr	r3, [pc, #100]	@ (8014c20 <__ieee754_rem_pio2+0x3f0>)
 8014bba:	2200      	movs	r2, #0
 8014bbc:	f7eb fd3c 	bl	8000638 <__aeabi_dmul>
 8014bc0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8014bc4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8014bc8:	f04f 0803 	mov.w	r8, #3
 8014bcc:	2600      	movs	r6, #0
 8014bce:	2700      	movs	r7, #0
 8014bd0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014bd4:	4632      	mov	r2, r6
 8014bd6:	463b      	mov	r3, r7
 8014bd8:	46c2      	mov	sl, r8
 8014bda:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8014bde:	f7eb ff93 	bl	8000b08 <__aeabi_dcmpeq>
 8014be2:	2800      	cmp	r0, #0
 8014be4:	d1f4      	bne.n	8014bd0 <__ieee754_rem_pio2+0x3a0>
 8014be6:	4b0f      	ldr	r3, [pc, #60]	@ (8014c24 <__ieee754_rem_pio2+0x3f4>)
 8014be8:	9301      	str	r3, [sp, #4]
 8014bea:	2302      	movs	r3, #2
 8014bec:	9300      	str	r3, [sp, #0]
 8014bee:	462a      	mov	r2, r5
 8014bf0:	4653      	mov	r3, sl
 8014bf2:	4621      	mov	r1, r4
 8014bf4:	a806      	add	r0, sp, #24
 8014bf6:	f000 f853 	bl	8014ca0 <__kernel_rem_pio2>
 8014bfa:	9b04      	ldr	r3, [sp, #16]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	4605      	mov	r5, r0
 8014c00:	f6bf ae53 	bge.w	80148aa <__ieee754_rem_pio2+0x7a>
 8014c04:	e9d4 2100 	ldrd	r2, r1, [r4]
 8014c08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014c0c:	e9c4 2300 	strd	r2, r3, [r4]
 8014c10:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8014c14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014c18:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8014c1c:	e740      	b.n	8014aa0 <__ieee754_rem_pio2+0x270>
 8014c1e:	bf00      	nop
 8014c20:	41700000 	.word	0x41700000
 8014c24:	08015fb8 	.word	0x08015fb8

08014c28 <with_errno>:
 8014c28:	b510      	push	{r4, lr}
 8014c2a:	ed2d 8b02 	vpush	{d8}
 8014c2e:	eeb0 8a40 	vmov.f32	s16, s0
 8014c32:	eef0 8a60 	vmov.f32	s17, s1
 8014c36:	4604      	mov	r4, r0
 8014c38:	f7fb fa8c 	bl	8010154 <__errno>
 8014c3c:	eeb0 0a48 	vmov.f32	s0, s16
 8014c40:	eef0 0a68 	vmov.f32	s1, s17
 8014c44:	ecbd 8b02 	vpop	{d8}
 8014c48:	6004      	str	r4, [r0, #0]
 8014c4a:	bd10      	pop	{r4, pc}

08014c4c <xflow>:
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	b507      	push	{r0, r1, r2, lr}
 8014c50:	ec51 0b10 	vmov	r0, r1, d0
 8014c54:	b183      	cbz	r3, 8014c78 <xflow+0x2c>
 8014c56:	4602      	mov	r2, r0
 8014c58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014c5c:	e9cd 2300 	strd	r2, r3, [sp]
 8014c60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c64:	f7eb fce8 	bl	8000638 <__aeabi_dmul>
 8014c68:	ec41 0b10 	vmov	d0, r0, r1
 8014c6c:	2022      	movs	r0, #34	@ 0x22
 8014c6e:	b003      	add	sp, #12
 8014c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8014c74:	f7ff bfd8 	b.w	8014c28 <with_errno>
 8014c78:	4602      	mov	r2, r0
 8014c7a:	460b      	mov	r3, r1
 8014c7c:	e7ee      	b.n	8014c5c <xflow+0x10>
	...

08014c80 <__math_uflow>:
 8014c80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014c88 <__math_uflow+0x8>
 8014c84:	f7ff bfe2 	b.w	8014c4c <xflow>
 8014c88:	00000000 	.word	0x00000000
 8014c8c:	10000000 	.word	0x10000000

08014c90 <__math_oflow>:
 8014c90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014c98 <__math_oflow+0x8>
 8014c94:	f7ff bfda 	b.w	8014c4c <xflow>
 8014c98:	00000000 	.word	0x00000000
 8014c9c:	70000000 	.word	0x70000000

08014ca0 <__kernel_rem_pio2>:
 8014ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ca4:	ed2d 8b02 	vpush	{d8}
 8014ca8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8014cac:	f112 0f14 	cmn.w	r2, #20
 8014cb0:	9306      	str	r3, [sp, #24]
 8014cb2:	9104      	str	r1, [sp, #16]
 8014cb4:	4bc2      	ldr	r3, [pc, #776]	@ (8014fc0 <__kernel_rem_pio2+0x320>)
 8014cb6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8014cb8:	9008      	str	r0, [sp, #32]
 8014cba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014cbe:	9300      	str	r3, [sp, #0]
 8014cc0:	9b06      	ldr	r3, [sp, #24]
 8014cc2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8014cc6:	bfa8      	it	ge
 8014cc8:	1ed4      	subge	r4, r2, #3
 8014cca:	9305      	str	r3, [sp, #20]
 8014ccc:	bfb2      	itee	lt
 8014cce:	2400      	movlt	r4, #0
 8014cd0:	2318      	movge	r3, #24
 8014cd2:	fb94 f4f3 	sdivge	r4, r4, r3
 8014cd6:	f06f 0317 	mvn.w	r3, #23
 8014cda:	fb04 3303 	mla	r3, r4, r3, r3
 8014cde:	eb03 0b02 	add.w	fp, r3, r2
 8014ce2:	9b00      	ldr	r3, [sp, #0]
 8014ce4:	9a05      	ldr	r2, [sp, #20]
 8014ce6:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8014fb0 <__kernel_rem_pio2+0x310>
 8014cea:	eb03 0802 	add.w	r8, r3, r2
 8014cee:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014cf0:	1aa7      	subs	r7, r4, r2
 8014cf2:	ae20      	add	r6, sp, #128	@ 0x80
 8014cf4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014cf8:	2500      	movs	r5, #0
 8014cfa:	4545      	cmp	r5, r8
 8014cfc:	dd12      	ble.n	8014d24 <__kernel_rem_pio2+0x84>
 8014cfe:	9b06      	ldr	r3, [sp, #24]
 8014d00:	aa20      	add	r2, sp, #128	@ 0x80
 8014d02:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8014d06:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8014d0a:	2700      	movs	r7, #0
 8014d0c:	9b00      	ldr	r3, [sp, #0]
 8014d0e:	429f      	cmp	r7, r3
 8014d10:	dc2e      	bgt.n	8014d70 <__kernel_rem_pio2+0xd0>
 8014d12:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8014fb0 <__kernel_rem_pio2+0x310>
 8014d16:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014d1a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014d1e:	46a8      	mov	r8, r5
 8014d20:	2600      	movs	r6, #0
 8014d22:	e01b      	b.n	8014d5c <__kernel_rem_pio2+0xbc>
 8014d24:	42ef      	cmn	r7, r5
 8014d26:	d407      	bmi.n	8014d38 <__kernel_rem_pio2+0x98>
 8014d28:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014d2c:	f7eb fc1a 	bl	8000564 <__aeabi_i2d>
 8014d30:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014d34:	3501      	adds	r5, #1
 8014d36:	e7e0      	b.n	8014cfa <__kernel_rem_pio2+0x5a>
 8014d38:	ec51 0b18 	vmov	r0, r1, d8
 8014d3c:	e7f8      	b.n	8014d30 <__kernel_rem_pio2+0x90>
 8014d3e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8014d42:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014d46:	f7eb fc77 	bl	8000638 <__aeabi_dmul>
 8014d4a:	4602      	mov	r2, r0
 8014d4c:	460b      	mov	r3, r1
 8014d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d52:	f7eb fabb 	bl	80002cc <__adddf3>
 8014d56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014d5a:	3601      	adds	r6, #1
 8014d5c:	9b05      	ldr	r3, [sp, #20]
 8014d5e:	429e      	cmp	r6, r3
 8014d60:	dded      	ble.n	8014d3e <__kernel_rem_pio2+0x9e>
 8014d62:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014d66:	3701      	adds	r7, #1
 8014d68:	ecaa 7b02 	vstmia	sl!, {d7}
 8014d6c:	3508      	adds	r5, #8
 8014d6e:	e7cd      	b.n	8014d0c <__kernel_rem_pio2+0x6c>
 8014d70:	9b00      	ldr	r3, [sp, #0]
 8014d72:	f8dd 8000 	ldr.w	r8, [sp]
 8014d76:	aa0c      	add	r2, sp, #48	@ 0x30
 8014d78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014d7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8014d7e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014d80:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d86:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8014d8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014d8c:	ab98      	add	r3, sp, #608	@ 0x260
 8014d8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014d92:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8014d96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014d9a:	ac0c      	add	r4, sp, #48	@ 0x30
 8014d9c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8014d9e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8014da2:	46a1      	mov	r9, r4
 8014da4:	46c2      	mov	sl, r8
 8014da6:	f1ba 0f00 	cmp.w	sl, #0
 8014daa:	dc77      	bgt.n	8014e9c <__kernel_rem_pio2+0x1fc>
 8014dac:	4658      	mov	r0, fp
 8014dae:	ed9d 0b02 	vldr	d0, [sp, #8]
 8014db2:	f000 fd25 	bl	8015800 <scalbn>
 8014db6:	ec57 6b10 	vmov	r6, r7, d0
 8014dba:	2200      	movs	r2, #0
 8014dbc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8014dc0:	4630      	mov	r0, r6
 8014dc2:	4639      	mov	r1, r7
 8014dc4:	f7eb fc38 	bl	8000638 <__aeabi_dmul>
 8014dc8:	ec41 0b10 	vmov	d0, r0, r1
 8014dcc:	f7fe fecc 	bl	8013b68 <floor>
 8014dd0:	4b7c      	ldr	r3, [pc, #496]	@ (8014fc4 <__kernel_rem_pio2+0x324>)
 8014dd2:	ec51 0b10 	vmov	r0, r1, d0
 8014dd6:	2200      	movs	r2, #0
 8014dd8:	f7eb fc2e 	bl	8000638 <__aeabi_dmul>
 8014ddc:	4602      	mov	r2, r0
 8014dde:	460b      	mov	r3, r1
 8014de0:	4630      	mov	r0, r6
 8014de2:	4639      	mov	r1, r7
 8014de4:	f7eb fa70 	bl	80002c8 <__aeabi_dsub>
 8014de8:	460f      	mov	r7, r1
 8014dea:	4606      	mov	r6, r0
 8014dec:	f7eb fed4 	bl	8000b98 <__aeabi_d2iz>
 8014df0:	9002      	str	r0, [sp, #8]
 8014df2:	f7eb fbb7 	bl	8000564 <__aeabi_i2d>
 8014df6:	4602      	mov	r2, r0
 8014df8:	460b      	mov	r3, r1
 8014dfa:	4630      	mov	r0, r6
 8014dfc:	4639      	mov	r1, r7
 8014dfe:	f7eb fa63 	bl	80002c8 <__aeabi_dsub>
 8014e02:	f1bb 0f00 	cmp.w	fp, #0
 8014e06:	4606      	mov	r6, r0
 8014e08:	460f      	mov	r7, r1
 8014e0a:	dd6c      	ble.n	8014ee6 <__kernel_rem_pio2+0x246>
 8014e0c:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8014e10:	ab0c      	add	r3, sp, #48	@ 0x30
 8014e12:	9d02      	ldr	r5, [sp, #8]
 8014e14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014e18:	f1cb 0018 	rsb	r0, fp, #24
 8014e1c:	fa43 f200 	asr.w	r2, r3, r0
 8014e20:	4415      	add	r5, r2
 8014e22:	4082      	lsls	r2, r0
 8014e24:	1a9b      	subs	r3, r3, r2
 8014e26:	aa0c      	add	r2, sp, #48	@ 0x30
 8014e28:	9502      	str	r5, [sp, #8]
 8014e2a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8014e2e:	f1cb 0217 	rsb	r2, fp, #23
 8014e32:	fa43 f902 	asr.w	r9, r3, r2
 8014e36:	f1b9 0f00 	cmp.w	r9, #0
 8014e3a:	dd64      	ble.n	8014f06 <__kernel_rem_pio2+0x266>
 8014e3c:	9b02      	ldr	r3, [sp, #8]
 8014e3e:	2200      	movs	r2, #0
 8014e40:	3301      	adds	r3, #1
 8014e42:	9302      	str	r3, [sp, #8]
 8014e44:	4615      	mov	r5, r2
 8014e46:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8014e4a:	4590      	cmp	r8, r2
 8014e4c:	f300 80a1 	bgt.w	8014f92 <__kernel_rem_pio2+0x2f2>
 8014e50:	f1bb 0f00 	cmp.w	fp, #0
 8014e54:	dd07      	ble.n	8014e66 <__kernel_rem_pio2+0x1c6>
 8014e56:	f1bb 0f01 	cmp.w	fp, #1
 8014e5a:	f000 80c1 	beq.w	8014fe0 <__kernel_rem_pio2+0x340>
 8014e5e:	f1bb 0f02 	cmp.w	fp, #2
 8014e62:	f000 80c8 	beq.w	8014ff6 <__kernel_rem_pio2+0x356>
 8014e66:	f1b9 0f02 	cmp.w	r9, #2
 8014e6a:	d14c      	bne.n	8014f06 <__kernel_rem_pio2+0x266>
 8014e6c:	4632      	mov	r2, r6
 8014e6e:	463b      	mov	r3, r7
 8014e70:	4955      	ldr	r1, [pc, #340]	@ (8014fc8 <__kernel_rem_pio2+0x328>)
 8014e72:	2000      	movs	r0, #0
 8014e74:	f7eb fa28 	bl	80002c8 <__aeabi_dsub>
 8014e78:	4606      	mov	r6, r0
 8014e7a:	460f      	mov	r7, r1
 8014e7c:	2d00      	cmp	r5, #0
 8014e7e:	d042      	beq.n	8014f06 <__kernel_rem_pio2+0x266>
 8014e80:	4658      	mov	r0, fp
 8014e82:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8014fb8 <__kernel_rem_pio2+0x318>
 8014e86:	f000 fcbb 	bl	8015800 <scalbn>
 8014e8a:	4630      	mov	r0, r6
 8014e8c:	4639      	mov	r1, r7
 8014e8e:	ec53 2b10 	vmov	r2, r3, d0
 8014e92:	f7eb fa19 	bl	80002c8 <__aeabi_dsub>
 8014e96:	4606      	mov	r6, r0
 8014e98:	460f      	mov	r7, r1
 8014e9a:	e034      	b.n	8014f06 <__kernel_rem_pio2+0x266>
 8014e9c:	4b4b      	ldr	r3, [pc, #300]	@ (8014fcc <__kernel_rem_pio2+0x32c>)
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ea4:	f7eb fbc8 	bl	8000638 <__aeabi_dmul>
 8014ea8:	f7eb fe76 	bl	8000b98 <__aeabi_d2iz>
 8014eac:	f7eb fb5a 	bl	8000564 <__aeabi_i2d>
 8014eb0:	4b47      	ldr	r3, [pc, #284]	@ (8014fd0 <__kernel_rem_pio2+0x330>)
 8014eb2:	2200      	movs	r2, #0
 8014eb4:	4606      	mov	r6, r0
 8014eb6:	460f      	mov	r7, r1
 8014eb8:	f7eb fbbe 	bl	8000638 <__aeabi_dmul>
 8014ebc:	4602      	mov	r2, r0
 8014ebe:	460b      	mov	r3, r1
 8014ec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ec4:	f7eb fa00 	bl	80002c8 <__aeabi_dsub>
 8014ec8:	f7eb fe66 	bl	8000b98 <__aeabi_d2iz>
 8014ecc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8014ed0:	f849 0b04 	str.w	r0, [r9], #4
 8014ed4:	4639      	mov	r1, r7
 8014ed6:	4630      	mov	r0, r6
 8014ed8:	f7eb f9f8 	bl	80002cc <__adddf3>
 8014edc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8014ee0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014ee4:	e75f      	b.n	8014da6 <__kernel_rem_pio2+0x106>
 8014ee6:	d107      	bne.n	8014ef8 <__kernel_rem_pio2+0x258>
 8014ee8:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8014eec:	aa0c      	add	r2, sp, #48	@ 0x30
 8014eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ef2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8014ef6:	e79e      	b.n	8014e36 <__kernel_rem_pio2+0x196>
 8014ef8:	4b36      	ldr	r3, [pc, #216]	@ (8014fd4 <__kernel_rem_pio2+0x334>)
 8014efa:	2200      	movs	r2, #0
 8014efc:	f7eb fe22 	bl	8000b44 <__aeabi_dcmpge>
 8014f00:	2800      	cmp	r0, #0
 8014f02:	d143      	bne.n	8014f8c <__kernel_rem_pio2+0x2ec>
 8014f04:	4681      	mov	r9, r0
 8014f06:	2200      	movs	r2, #0
 8014f08:	2300      	movs	r3, #0
 8014f0a:	4630      	mov	r0, r6
 8014f0c:	4639      	mov	r1, r7
 8014f0e:	f7eb fdfb 	bl	8000b08 <__aeabi_dcmpeq>
 8014f12:	2800      	cmp	r0, #0
 8014f14:	f000 80c1 	beq.w	801509a <__kernel_rem_pio2+0x3fa>
 8014f18:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	9900      	ldr	r1, [sp, #0]
 8014f20:	428b      	cmp	r3, r1
 8014f22:	da70      	bge.n	8015006 <__kernel_rem_pio2+0x366>
 8014f24:	2a00      	cmp	r2, #0
 8014f26:	f000 808b 	beq.w	8015040 <__kernel_rem_pio2+0x3a0>
 8014f2a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8014f2e:	ab0c      	add	r3, sp, #48	@ 0x30
 8014f30:	f1ab 0b18 	sub.w	fp, fp, #24
 8014f34:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d0f6      	beq.n	8014f2a <__kernel_rem_pio2+0x28a>
 8014f3c:	4658      	mov	r0, fp
 8014f3e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8014fb8 <__kernel_rem_pio2+0x318>
 8014f42:	f000 fc5d 	bl	8015800 <scalbn>
 8014f46:	f108 0301 	add.w	r3, r8, #1
 8014f4a:	00da      	lsls	r2, r3, #3
 8014f4c:	9205      	str	r2, [sp, #20]
 8014f4e:	ec55 4b10 	vmov	r4, r5, d0
 8014f52:	aa70      	add	r2, sp, #448	@ 0x1c0
 8014f54:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8014fcc <__kernel_rem_pio2+0x32c>
 8014f58:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8014f5c:	4646      	mov	r6, r8
 8014f5e:	f04f 0a00 	mov.w	sl, #0
 8014f62:	2e00      	cmp	r6, #0
 8014f64:	f280 80d1 	bge.w	801510a <__kernel_rem_pio2+0x46a>
 8014f68:	4644      	mov	r4, r8
 8014f6a:	2c00      	cmp	r4, #0
 8014f6c:	f2c0 80ff 	blt.w	801516e <__kernel_rem_pio2+0x4ce>
 8014f70:	4b19      	ldr	r3, [pc, #100]	@ (8014fd8 <__kernel_rem_pio2+0x338>)
 8014f72:	461f      	mov	r7, r3
 8014f74:	ab70      	add	r3, sp, #448	@ 0x1c0
 8014f76:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014f7a:	9306      	str	r3, [sp, #24]
 8014f7c:	f04f 0a00 	mov.w	sl, #0
 8014f80:	f04f 0b00 	mov.w	fp, #0
 8014f84:	2600      	movs	r6, #0
 8014f86:	eba8 0504 	sub.w	r5, r8, r4
 8014f8a:	e0e4      	b.n	8015156 <__kernel_rem_pio2+0x4b6>
 8014f8c:	f04f 0902 	mov.w	r9, #2
 8014f90:	e754      	b.n	8014e3c <__kernel_rem_pio2+0x19c>
 8014f92:	f854 3b04 	ldr.w	r3, [r4], #4
 8014f96:	bb0d      	cbnz	r5, 8014fdc <__kernel_rem_pio2+0x33c>
 8014f98:	b123      	cbz	r3, 8014fa4 <__kernel_rem_pio2+0x304>
 8014f9a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8014f9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014fa2:	2301      	movs	r3, #1
 8014fa4:	3201      	adds	r2, #1
 8014fa6:	461d      	mov	r5, r3
 8014fa8:	e74f      	b.n	8014e4a <__kernel_rem_pio2+0x1aa>
 8014faa:	bf00      	nop
 8014fac:	f3af 8000 	nop.w
	...
 8014fbc:	3ff00000 	.word	0x3ff00000
 8014fc0:	08016100 	.word	0x08016100
 8014fc4:	40200000 	.word	0x40200000
 8014fc8:	3ff00000 	.word	0x3ff00000
 8014fcc:	3e700000 	.word	0x3e700000
 8014fd0:	41700000 	.word	0x41700000
 8014fd4:	3fe00000 	.word	0x3fe00000
 8014fd8:	080160c0 	.word	0x080160c0
 8014fdc:	1acb      	subs	r3, r1, r3
 8014fde:	e7de      	b.n	8014f9e <__kernel_rem_pio2+0x2fe>
 8014fe0:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8014fe4:	ab0c      	add	r3, sp, #48	@ 0x30
 8014fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014fee:	a90c      	add	r1, sp, #48	@ 0x30
 8014ff0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014ff4:	e737      	b.n	8014e66 <__kernel_rem_pio2+0x1c6>
 8014ff6:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8014ffa:	ab0c      	add	r3, sp, #48	@ 0x30
 8014ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015000:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015004:	e7f3      	b.n	8014fee <__kernel_rem_pio2+0x34e>
 8015006:	a90c      	add	r1, sp, #48	@ 0x30
 8015008:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801500c:	3b01      	subs	r3, #1
 801500e:	430a      	orrs	r2, r1
 8015010:	e785      	b.n	8014f1e <__kernel_rem_pio2+0x27e>
 8015012:	3401      	adds	r4, #1
 8015014:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015018:	2a00      	cmp	r2, #0
 801501a:	d0fa      	beq.n	8015012 <__kernel_rem_pio2+0x372>
 801501c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801501e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015022:	eb0d 0503 	add.w	r5, sp, r3
 8015026:	9b06      	ldr	r3, [sp, #24]
 8015028:	aa20      	add	r2, sp, #128	@ 0x80
 801502a:	4443      	add	r3, r8
 801502c:	f108 0701 	add.w	r7, r8, #1
 8015030:	3d98      	subs	r5, #152	@ 0x98
 8015032:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8015036:	4444      	add	r4, r8
 8015038:	42bc      	cmp	r4, r7
 801503a:	da04      	bge.n	8015046 <__kernel_rem_pio2+0x3a6>
 801503c:	46a0      	mov	r8, r4
 801503e:	e6a2      	b.n	8014d86 <__kernel_rem_pio2+0xe6>
 8015040:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015042:	2401      	movs	r4, #1
 8015044:	e7e6      	b.n	8015014 <__kernel_rem_pio2+0x374>
 8015046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015048:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801504c:	f7eb fa8a 	bl	8000564 <__aeabi_i2d>
 8015050:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8015310 <__kernel_rem_pio2+0x670>
 8015054:	e8e6 0102 	strd	r0, r1, [r6], #8
 8015058:	ed8d 7b02 	vstr	d7, [sp, #8]
 801505c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015060:	46b2      	mov	sl, r6
 8015062:	f04f 0800 	mov.w	r8, #0
 8015066:	9b05      	ldr	r3, [sp, #20]
 8015068:	4598      	cmp	r8, r3
 801506a:	dd05      	ble.n	8015078 <__kernel_rem_pio2+0x3d8>
 801506c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015070:	3701      	adds	r7, #1
 8015072:	eca5 7b02 	vstmia	r5!, {d7}
 8015076:	e7df      	b.n	8015038 <__kernel_rem_pio2+0x398>
 8015078:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801507c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8015080:	f7eb fada 	bl	8000638 <__aeabi_dmul>
 8015084:	4602      	mov	r2, r0
 8015086:	460b      	mov	r3, r1
 8015088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801508c:	f7eb f91e 	bl	80002cc <__adddf3>
 8015090:	f108 0801 	add.w	r8, r8, #1
 8015094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015098:	e7e5      	b.n	8015066 <__kernel_rem_pio2+0x3c6>
 801509a:	f1cb 0000 	rsb	r0, fp, #0
 801509e:	ec47 6b10 	vmov	d0, r6, r7
 80150a2:	f000 fbad 	bl	8015800 <scalbn>
 80150a6:	ec55 4b10 	vmov	r4, r5, d0
 80150aa:	4b9b      	ldr	r3, [pc, #620]	@ (8015318 <__kernel_rem_pio2+0x678>)
 80150ac:	2200      	movs	r2, #0
 80150ae:	4620      	mov	r0, r4
 80150b0:	4629      	mov	r1, r5
 80150b2:	f7eb fd47 	bl	8000b44 <__aeabi_dcmpge>
 80150b6:	b300      	cbz	r0, 80150fa <__kernel_rem_pio2+0x45a>
 80150b8:	4b98      	ldr	r3, [pc, #608]	@ (801531c <__kernel_rem_pio2+0x67c>)
 80150ba:	2200      	movs	r2, #0
 80150bc:	4620      	mov	r0, r4
 80150be:	4629      	mov	r1, r5
 80150c0:	f7eb faba 	bl	8000638 <__aeabi_dmul>
 80150c4:	f7eb fd68 	bl	8000b98 <__aeabi_d2iz>
 80150c8:	4606      	mov	r6, r0
 80150ca:	f7eb fa4b 	bl	8000564 <__aeabi_i2d>
 80150ce:	4b92      	ldr	r3, [pc, #584]	@ (8015318 <__kernel_rem_pio2+0x678>)
 80150d0:	2200      	movs	r2, #0
 80150d2:	f7eb fab1 	bl	8000638 <__aeabi_dmul>
 80150d6:	460b      	mov	r3, r1
 80150d8:	4602      	mov	r2, r0
 80150da:	4629      	mov	r1, r5
 80150dc:	4620      	mov	r0, r4
 80150de:	f7eb f8f3 	bl	80002c8 <__aeabi_dsub>
 80150e2:	f7eb fd59 	bl	8000b98 <__aeabi_d2iz>
 80150e6:	ab0c      	add	r3, sp, #48	@ 0x30
 80150e8:	f10b 0b18 	add.w	fp, fp, #24
 80150ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80150f0:	f108 0801 	add.w	r8, r8, #1
 80150f4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80150f8:	e720      	b.n	8014f3c <__kernel_rem_pio2+0x29c>
 80150fa:	4620      	mov	r0, r4
 80150fc:	4629      	mov	r1, r5
 80150fe:	f7eb fd4b 	bl	8000b98 <__aeabi_d2iz>
 8015102:	ab0c      	add	r3, sp, #48	@ 0x30
 8015104:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8015108:	e718      	b.n	8014f3c <__kernel_rem_pio2+0x29c>
 801510a:	ab0c      	add	r3, sp, #48	@ 0x30
 801510c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015110:	f7eb fa28 	bl	8000564 <__aeabi_i2d>
 8015114:	4622      	mov	r2, r4
 8015116:	462b      	mov	r3, r5
 8015118:	f7eb fa8e 	bl	8000638 <__aeabi_dmul>
 801511c:	4652      	mov	r2, sl
 801511e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8015122:	465b      	mov	r3, fp
 8015124:	4620      	mov	r0, r4
 8015126:	4629      	mov	r1, r5
 8015128:	f7eb fa86 	bl	8000638 <__aeabi_dmul>
 801512c:	3e01      	subs	r6, #1
 801512e:	4604      	mov	r4, r0
 8015130:	460d      	mov	r5, r1
 8015132:	e716      	b.n	8014f62 <__kernel_rem_pio2+0x2c2>
 8015134:	9906      	ldr	r1, [sp, #24]
 8015136:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801513a:	9106      	str	r1, [sp, #24]
 801513c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8015140:	f7eb fa7a 	bl	8000638 <__aeabi_dmul>
 8015144:	4602      	mov	r2, r0
 8015146:	460b      	mov	r3, r1
 8015148:	4650      	mov	r0, sl
 801514a:	4659      	mov	r1, fp
 801514c:	f7eb f8be 	bl	80002cc <__adddf3>
 8015150:	3601      	adds	r6, #1
 8015152:	4682      	mov	sl, r0
 8015154:	468b      	mov	fp, r1
 8015156:	9b00      	ldr	r3, [sp, #0]
 8015158:	429e      	cmp	r6, r3
 801515a:	dc01      	bgt.n	8015160 <__kernel_rem_pio2+0x4c0>
 801515c:	42ae      	cmp	r6, r5
 801515e:	dde9      	ble.n	8015134 <__kernel_rem_pio2+0x494>
 8015160:	ab48      	add	r3, sp, #288	@ 0x120
 8015162:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015166:	e9c5 ab00 	strd	sl, fp, [r5]
 801516a:	3c01      	subs	r4, #1
 801516c:	e6fd      	b.n	8014f6a <__kernel_rem_pio2+0x2ca>
 801516e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8015170:	2b02      	cmp	r3, #2
 8015172:	dc0b      	bgt.n	801518c <__kernel_rem_pio2+0x4ec>
 8015174:	2b00      	cmp	r3, #0
 8015176:	dc35      	bgt.n	80151e4 <__kernel_rem_pio2+0x544>
 8015178:	d059      	beq.n	801522e <__kernel_rem_pio2+0x58e>
 801517a:	9b02      	ldr	r3, [sp, #8]
 801517c:	f003 0007 	and.w	r0, r3, #7
 8015180:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8015184:	ecbd 8b02 	vpop	{d8}
 8015188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801518c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801518e:	2b03      	cmp	r3, #3
 8015190:	d1f3      	bne.n	801517a <__kernel_rem_pio2+0x4da>
 8015192:	9b05      	ldr	r3, [sp, #20]
 8015194:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015198:	eb0d 0403 	add.w	r4, sp, r3
 801519c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80151a0:	4625      	mov	r5, r4
 80151a2:	46c2      	mov	sl, r8
 80151a4:	f1ba 0f00 	cmp.w	sl, #0
 80151a8:	dc69      	bgt.n	801527e <__kernel_rem_pio2+0x5de>
 80151aa:	4645      	mov	r5, r8
 80151ac:	2d01      	cmp	r5, #1
 80151ae:	f300 8087 	bgt.w	80152c0 <__kernel_rem_pio2+0x620>
 80151b2:	9c05      	ldr	r4, [sp, #20]
 80151b4:	ab48      	add	r3, sp, #288	@ 0x120
 80151b6:	441c      	add	r4, r3
 80151b8:	2000      	movs	r0, #0
 80151ba:	2100      	movs	r1, #0
 80151bc:	f1b8 0f01 	cmp.w	r8, #1
 80151c0:	f300 809c 	bgt.w	80152fc <__kernel_rem_pio2+0x65c>
 80151c4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80151c8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80151cc:	f1b9 0f00 	cmp.w	r9, #0
 80151d0:	f040 80a6 	bne.w	8015320 <__kernel_rem_pio2+0x680>
 80151d4:	9b04      	ldr	r3, [sp, #16]
 80151d6:	e9c3 5600 	strd	r5, r6, [r3]
 80151da:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80151de:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80151e2:	e7ca      	b.n	801517a <__kernel_rem_pio2+0x4da>
 80151e4:	9d05      	ldr	r5, [sp, #20]
 80151e6:	ab48      	add	r3, sp, #288	@ 0x120
 80151e8:	441d      	add	r5, r3
 80151ea:	4644      	mov	r4, r8
 80151ec:	2000      	movs	r0, #0
 80151ee:	2100      	movs	r1, #0
 80151f0:	2c00      	cmp	r4, #0
 80151f2:	da35      	bge.n	8015260 <__kernel_rem_pio2+0x5c0>
 80151f4:	f1b9 0f00 	cmp.w	r9, #0
 80151f8:	d038      	beq.n	801526c <__kernel_rem_pio2+0x5cc>
 80151fa:	4602      	mov	r2, r0
 80151fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015200:	9c04      	ldr	r4, [sp, #16]
 8015202:	e9c4 2300 	strd	r2, r3, [r4]
 8015206:	4602      	mov	r2, r0
 8015208:	460b      	mov	r3, r1
 801520a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801520e:	f7eb f85b 	bl	80002c8 <__aeabi_dsub>
 8015212:	ad4a      	add	r5, sp, #296	@ 0x128
 8015214:	2401      	movs	r4, #1
 8015216:	45a0      	cmp	r8, r4
 8015218:	da2b      	bge.n	8015272 <__kernel_rem_pio2+0x5d2>
 801521a:	f1b9 0f00 	cmp.w	r9, #0
 801521e:	d002      	beq.n	8015226 <__kernel_rem_pio2+0x586>
 8015220:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015224:	4619      	mov	r1, r3
 8015226:	9b04      	ldr	r3, [sp, #16]
 8015228:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801522c:	e7a5      	b.n	801517a <__kernel_rem_pio2+0x4da>
 801522e:	9c05      	ldr	r4, [sp, #20]
 8015230:	ab48      	add	r3, sp, #288	@ 0x120
 8015232:	441c      	add	r4, r3
 8015234:	2000      	movs	r0, #0
 8015236:	2100      	movs	r1, #0
 8015238:	f1b8 0f00 	cmp.w	r8, #0
 801523c:	da09      	bge.n	8015252 <__kernel_rem_pio2+0x5b2>
 801523e:	f1b9 0f00 	cmp.w	r9, #0
 8015242:	d002      	beq.n	801524a <__kernel_rem_pio2+0x5aa>
 8015244:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015248:	4619      	mov	r1, r3
 801524a:	9b04      	ldr	r3, [sp, #16]
 801524c:	e9c3 0100 	strd	r0, r1, [r3]
 8015250:	e793      	b.n	801517a <__kernel_rem_pio2+0x4da>
 8015252:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015256:	f7eb f839 	bl	80002cc <__adddf3>
 801525a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801525e:	e7eb      	b.n	8015238 <__kernel_rem_pio2+0x598>
 8015260:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8015264:	f7eb f832 	bl	80002cc <__adddf3>
 8015268:	3c01      	subs	r4, #1
 801526a:	e7c1      	b.n	80151f0 <__kernel_rem_pio2+0x550>
 801526c:	4602      	mov	r2, r0
 801526e:	460b      	mov	r3, r1
 8015270:	e7c6      	b.n	8015200 <__kernel_rem_pio2+0x560>
 8015272:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8015276:	f7eb f829 	bl	80002cc <__adddf3>
 801527a:	3401      	adds	r4, #1
 801527c:	e7cb      	b.n	8015216 <__kernel_rem_pio2+0x576>
 801527e:	ed35 7b02 	vldmdb	r5!, {d7}
 8015282:	ed8d 7b00 	vstr	d7, [sp]
 8015286:	ed95 7b02 	vldr	d7, [r5, #8]
 801528a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801528e:	ec53 2b17 	vmov	r2, r3, d7
 8015292:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015296:	f7eb f819 	bl	80002cc <__adddf3>
 801529a:	4602      	mov	r2, r0
 801529c:	460b      	mov	r3, r1
 801529e:	4606      	mov	r6, r0
 80152a0:	460f      	mov	r7, r1
 80152a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80152a6:	f7eb f80f 	bl	80002c8 <__aeabi_dsub>
 80152aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80152ae:	f7eb f80d 	bl	80002cc <__adddf3>
 80152b2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80152b6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80152ba:	e9c5 6700 	strd	r6, r7, [r5]
 80152be:	e771      	b.n	80151a4 <__kernel_rem_pio2+0x504>
 80152c0:	ed34 7b02 	vldmdb	r4!, {d7}
 80152c4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80152c8:	ec51 0b17 	vmov	r0, r1, d7
 80152cc:	4652      	mov	r2, sl
 80152ce:	465b      	mov	r3, fp
 80152d0:	ed8d 7b00 	vstr	d7, [sp]
 80152d4:	f7ea fffa 	bl	80002cc <__adddf3>
 80152d8:	4602      	mov	r2, r0
 80152da:	460b      	mov	r3, r1
 80152dc:	4606      	mov	r6, r0
 80152de:	460f      	mov	r7, r1
 80152e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80152e4:	f7ea fff0 	bl	80002c8 <__aeabi_dsub>
 80152e8:	4652      	mov	r2, sl
 80152ea:	465b      	mov	r3, fp
 80152ec:	f7ea ffee 	bl	80002cc <__adddf3>
 80152f0:	3d01      	subs	r5, #1
 80152f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80152f6:	e9c4 6700 	strd	r6, r7, [r4]
 80152fa:	e757      	b.n	80151ac <__kernel_rem_pio2+0x50c>
 80152fc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015300:	f7ea ffe4 	bl	80002cc <__adddf3>
 8015304:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8015308:	e758      	b.n	80151bc <__kernel_rem_pio2+0x51c>
 801530a:	bf00      	nop
 801530c:	f3af 8000 	nop.w
	...
 8015318:	41700000 	.word	0x41700000
 801531c:	3e700000 	.word	0x3e700000
 8015320:	9b04      	ldr	r3, [sp, #16]
 8015322:	9a04      	ldr	r2, [sp, #16]
 8015324:	601d      	str	r5, [r3, #0]
 8015326:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 801532a:	605c      	str	r4, [r3, #4]
 801532c:	609f      	str	r7, [r3, #8]
 801532e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8015332:	60d3      	str	r3, [r2, #12]
 8015334:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015338:	6110      	str	r0, [r2, #16]
 801533a:	6153      	str	r3, [r2, #20]
 801533c:	e71d      	b.n	801517a <__kernel_rem_pio2+0x4da>
 801533e:	bf00      	nop

08015340 <__kernel_cos>:
 8015340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015344:	ec57 6b10 	vmov	r6, r7, d0
 8015348:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801534c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8015350:	ed8d 1b00 	vstr	d1, [sp]
 8015354:	d206      	bcs.n	8015364 <__kernel_cos+0x24>
 8015356:	4630      	mov	r0, r6
 8015358:	4639      	mov	r1, r7
 801535a:	f7eb fc1d 	bl	8000b98 <__aeabi_d2iz>
 801535e:	2800      	cmp	r0, #0
 8015360:	f000 8088 	beq.w	8015474 <__kernel_cos+0x134>
 8015364:	4632      	mov	r2, r6
 8015366:	463b      	mov	r3, r7
 8015368:	4630      	mov	r0, r6
 801536a:	4639      	mov	r1, r7
 801536c:	f7eb f964 	bl	8000638 <__aeabi_dmul>
 8015370:	4b51      	ldr	r3, [pc, #324]	@ (80154b8 <__kernel_cos+0x178>)
 8015372:	2200      	movs	r2, #0
 8015374:	4604      	mov	r4, r0
 8015376:	460d      	mov	r5, r1
 8015378:	f7eb f95e 	bl	8000638 <__aeabi_dmul>
 801537c:	a340      	add	r3, pc, #256	@ (adr r3, 8015480 <__kernel_cos+0x140>)
 801537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015382:	4682      	mov	sl, r0
 8015384:	468b      	mov	fp, r1
 8015386:	4620      	mov	r0, r4
 8015388:	4629      	mov	r1, r5
 801538a:	f7eb f955 	bl	8000638 <__aeabi_dmul>
 801538e:	a33e      	add	r3, pc, #248	@ (adr r3, 8015488 <__kernel_cos+0x148>)
 8015390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015394:	f7ea ff9a 	bl	80002cc <__adddf3>
 8015398:	4622      	mov	r2, r4
 801539a:	462b      	mov	r3, r5
 801539c:	f7eb f94c 	bl	8000638 <__aeabi_dmul>
 80153a0:	a33b      	add	r3, pc, #236	@ (adr r3, 8015490 <__kernel_cos+0x150>)
 80153a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153a6:	f7ea ff8f 	bl	80002c8 <__aeabi_dsub>
 80153aa:	4622      	mov	r2, r4
 80153ac:	462b      	mov	r3, r5
 80153ae:	f7eb f943 	bl	8000638 <__aeabi_dmul>
 80153b2:	a339      	add	r3, pc, #228	@ (adr r3, 8015498 <__kernel_cos+0x158>)
 80153b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153b8:	f7ea ff88 	bl	80002cc <__adddf3>
 80153bc:	4622      	mov	r2, r4
 80153be:	462b      	mov	r3, r5
 80153c0:	f7eb f93a 	bl	8000638 <__aeabi_dmul>
 80153c4:	a336      	add	r3, pc, #216	@ (adr r3, 80154a0 <__kernel_cos+0x160>)
 80153c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ca:	f7ea ff7d 	bl	80002c8 <__aeabi_dsub>
 80153ce:	4622      	mov	r2, r4
 80153d0:	462b      	mov	r3, r5
 80153d2:	f7eb f931 	bl	8000638 <__aeabi_dmul>
 80153d6:	a334      	add	r3, pc, #208	@ (adr r3, 80154a8 <__kernel_cos+0x168>)
 80153d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153dc:	f7ea ff76 	bl	80002cc <__adddf3>
 80153e0:	4622      	mov	r2, r4
 80153e2:	462b      	mov	r3, r5
 80153e4:	f7eb f928 	bl	8000638 <__aeabi_dmul>
 80153e8:	4622      	mov	r2, r4
 80153ea:	462b      	mov	r3, r5
 80153ec:	f7eb f924 	bl	8000638 <__aeabi_dmul>
 80153f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80153f4:	4604      	mov	r4, r0
 80153f6:	460d      	mov	r5, r1
 80153f8:	4630      	mov	r0, r6
 80153fa:	4639      	mov	r1, r7
 80153fc:	f7eb f91c 	bl	8000638 <__aeabi_dmul>
 8015400:	460b      	mov	r3, r1
 8015402:	4602      	mov	r2, r0
 8015404:	4629      	mov	r1, r5
 8015406:	4620      	mov	r0, r4
 8015408:	f7ea ff5e 	bl	80002c8 <__aeabi_dsub>
 801540c:	4b2b      	ldr	r3, [pc, #172]	@ (80154bc <__kernel_cos+0x17c>)
 801540e:	4598      	cmp	r8, r3
 8015410:	4606      	mov	r6, r0
 8015412:	460f      	mov	r7, r1
 8015414:	d810      	bhi.n	8015438 <__kernel_cos+0xf8>
 8015416:	4602      	mov	r2, r0
 8015418:	460b      	mov	r3, r1
 801541a:	4650      	mov	r0, sl
 801541c:	4659      	mov	r1, fp
 801541e:	f7ea ff53 	bl	80002c8 <__aeabi_dsub>
 8015422:	460b      	mov	r3, r1
 8015424:	4926      	ldr	r1, [pc, #152]	@ (80154c0 <__kernel_cos+0x180>)
 8015426:	4602      	mov	r2, r0
 8015428:	2000      	movs	r0, #0
 801542a:	f7ea ff4d 	bl	80002c8 <__aeabi_dsub>
 801542e:	ec41 0b10 	vmov	d0, r0, r1
 8015432:	b003      	add	sp, #12
 8015434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015438:	4b22      	ldr	r3, [pc, #136]	@ (80154c4 <__kernel_cos+0x184>)
 801543a:	4921      	ldr	r1, [pc, #132]	@ (80154c0 <__kernel_cos+0x180>)
 801543c:	4598      	cmp	r8, r3
 801543e:	bf8c      	ite	hi
 8015440:	4d21      	ldrhi	r5, [pc, #132]	@ (80154c8 <__kernel_cos+0x188>)
 8015442:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8015446:	2400      	movs	r4, #0
 8015448:	4622      	mov	r2, r4
 801544a:	462b      	mov	r3, r5
 801544c:	2000      	movs	r0, #0
 801544e:	f7ea ff3b 	bl	80002c8 <__aeabi_dsub>
 8015452:	4622      	mov	r2, r4
 8015454:	4680      	mov	r8, r0
 8015456:	4689      	mov	r9, r1
 8015458:	462b      	mov	r3, r5
 801545a:	4650      	mov	r0, sl
 801545c:	4659      	mov	r1, fp
 801545e:	f7ea ff33 	bl	80002c8 <__aeabi_dsub>
 8015462:	4632      	mov	r2, r6
 8015464:	463b      	mov	r3, r7
 8015466:	f7ea ff2f 	bl	80002c8 <__aeabi_dsub>
 801546a:	4602      	mov	r2, r0
 801546c:	460b      	mov	r3, r1
 801546e:	4640      	mov	r0, r8
 8015470:	4649      	mov	r1, r9
 8015472:	e7da      	b.n	801542a <__kernel_cos+0xea>
 8015474:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80154b0 <__kernel_cos+0x170>
 8015478:	e7db      	b.n	8015432 <__kernel_cos+0xf2>
 801547a:	bf00      	nop
 801547c:	f3af 8000 	nop.w
 8015480:	be8838d4 	.word	0xbe8838d4
 8015484:	bda8fae9 	.word	0xbda8fae9
 8015488:	bdb4b1c4 	.word	0xbdb4b1c4
 801548c:	3e21ee9e 	.word	0x3e21ee9e
 8015490:	809c52ad 	.word	0x809c52ad
 8015494:	3e927e4f 	.word	0x3e927e4f
 8015498:	19cb1590 	.word	0x19cb1590
 801549c:	3efa01a0 	.word	0x3efa01a0
 80154a0:	16c15177 	.word	0x16c15177
 80154a4:	3f56c16c 	.word	0x3f56c16c
 80154a8:	5555554c 	.word	0x5555554c
 80154ac:	3fa55555 	.word	0x3fa55555
 80154b0:	00000000 	.word	0x00000000
 80154b4:	3ff00000 	.word	0x3ff00000
 80154b8:	3fe00000 	.word	0x3fe00000
 80154bc:	3fd33332 	.word	0x3fd33332
 80154c0:	3ff00000 	.word	0x3ff00000
 80154c4:	3fe90000 	.word	0x3fe90000
 80154c8:	3fd20000 	.word	0x3fd20000
 80154cc:	00000000 	.word	0x00000000

080154d0 <__kernel_sin>:
 80154d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154d4:	ec55 4b10 	vmov	r4, r5, d0
 80154d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80154dc:	b085      	sub	sp, #20
 80154de:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80154e2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80154e6:	4680      	mov	r8, r0
 80154e8:	d205      	bcs.n	80154f6 <__kernel_sin+0x26>
 80154ea:	4620      	mov	r0, r4
 80154ec:	4629      	mov	r1, r5
 80154ee:	f7eb fb53 	bl	8000b98 <__aeabi_d2iz>
 80154f2:	2800      	cmp	r0, #0
 80154f4:	d052      	beq.n	801559c <__kernel_sin+0xcc>
 80154f6:	4622      	mov	r2, r4
 80154f8:	462b      	mov	r3, r5
 80154fa:	4620      	mov	r0, r4
 80154fc:	4629      	mov	r1, r5
 80154fe:	f7eb f89b 	bl	8000638 <__aeabi_dmul>
 8015502:	4682      	mov	sl, r0
 8015504:	468b      	mov	fp, r1
 8015506:	4602      	mov	r2, r0
 8015508:	460b      	mov	r3, r1
 801550a:	4620      	mov	r0, r4
 801550c:	4629      	mov	r1, r5
 801550e:	f7eb f893 	bl	8000638 <__aeabi_dmul>
 8015512:	a342      	add	r3, pc, #264	@ (adr r3, 801561c <__kernel_sin+0x14c>)
 8015514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015518:	e9cd 0100 	strd	r0, r1, [sp]
 801551c:	4650      	mov	r0, sl
 801551e:	4659      	mov	r1, fp
 8015520:	f7eb f88a 	bl	8000638 <__aeabi_dmul>
 8015524:	a33f      	add	r3, pc, #252	@ (adr r3, 8015624 <__kernel_sin+0x154>)
 8015526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801552a:	f7ea fecd 	bl	80002c8 <__aeabi_dsub>
 801552e:	4652      	mov	r2, sl
 8015530:	465b      	mov	r3, fp
 8015532:	f7eb f881 	bl	8000638 <__aeabi_dmul>
 8015536:	a33d      	add	r3, pc, #244	@ (adr r3, 801562c <__kernel_sin+0x15c>)
 8015538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801553c:	f7ea fec6 	bl	80002cc <__adddf3>
 8015540:	4652      	mov	r2, sl
 8015542:	465b      	mov	r3, fp
 8015544:	f7eb f878 	bl	8000638 <__aeabi_dmul>
 8015548:	a33a      	add	r3, pc, #232	@ (adr r3, 8015634 <__kernel_sin+0x164>)
 801554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801554e:	f7ea febb 	bl	80002c8 <__aeabi_dsub>
 8015552:	4652      	mov	r2, sl
 8015554:	465b      	mov	r3, fp
 8015556:	f7eb f86f 	bl	8000638 <__aeabi_dmul>
 801555a:	a338      	add	r3, pc, #224	@ (adr r3, 801563c <__kernel_sin+0x16c>)
 801555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015560:	f7ea feb4 	bl	80002cc <__adddf3>
 8015564:	4606      	mov	r6, r0
 8015566:	460f      	mov	r7, r1
 8015568:	f1b8 0f00 	cmp.w	r8, #0
 801556c:	d11b      	bne.n	80155a6 <__kernel_sin+0xd6>
 801556e:	4602      	mov	r2, r0
 8015570:	460b      	mov	r3, r1
 8015572:	4650      	mov	r0, sl
 8015574:	4659      	mov	r1, fp
 8015576:	f7eb f85f 	bl	8000638 <__aeabi_dmul>
 801557a:	a325      	add	r3, pc, #148	@ (adr r3, 8015610 <__kernel_sin+0x140>)
 801557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015580:	f7ea fea2 	bl	80002c8 <__aeabi_dsub>
 8015584:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015588:	f7eb f856 	bl	8000638 <__aeabi_dmul>
 801558c:	4602      	mov	r2, r0
 801558e:	460b      	mov	r3, r1
 8015590:	4620      	mov	r0, r4
 8015592:	4629      	mov	r1, r5
 8015594:	f7ea fe9a 	bl	80002cc <__adddf3>
 8015598:	4604      	mov	r4, r0
 801559a:	460d      	mov	r5, r1
 801559c:	ec45 4b10 	vmov	d0, r4, r5
 80155a0:	b005      	add	sp, #20
 80155a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80155aa:	4b1b      	ldr	r3, [pc, #108]	@ (8015618 <__kernel_sin+0x148>)
 80155ac:	2200      	movs	r2, #0
 80155ae:	f7eb f843 	bl	8000638 <__aeabi_dmul>
 80155b2:	4632      	mov	r2, r6
 80155b4:	4680      	mov	r8, r0
 80155b6:	4689      	mov	r9, r1
 80155b8:	463b      	mov	r3, r7
 80155ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155be:	f7eb f83b 	bl	8000638 <__aeabi_dmul>
 80155c2:	4602      	mov	r2, r0
 80155c4:	460b      	mov	r3, r1
 80155c6:	4640      	mov	r0, r8
 80155c8:	4649      	mov	r1, r9
 80155ca:	f7ea fe7d 	bl	80002c8 <__aeabi_dsub>
 80155ce:	4652      	mov	r2, sl
 80155d0:	465b      	mov	r3, fp
 80155d2:	f7eb f831 	bl	8000638 <__aeabi_dmul>
 80155d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80155da:	f7ea fe75 	bl	80002c8 <__aeabi_dsub>
 80155de:	a30c      	add	r3, pc, #48	@ (adr r3, 8015610 <__kernel_sin+0x140>)
 80155e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155e4:	4606      	mov	r6, r0
 80155e6:	460f      	mov	r7, r1
 80155e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155ec:	f7eb f824 	bl	8000638 <__aeabi_dmul>
 80155f0:	4602      	mov	r2, r0
 80155f2:	460b      	mov	r3, r1
 80155f4:	4630      	mov	r0, r6
 80155f6:	4639      	mov	r1, r7
 80155f8:	f7ea fe68 	bl	80002cc <__adddf3>
 80155fc:	4602      	mov	r2, r0
 80155fe:	460b      	mov	r3, r1
 8015600:	4620      	mov	r0, r4
 8015602:	4629      	mov	r1, r5
 8015604:	f7ea fe60 	bl	80002c8 <__aeabi_dsub>
 8015608:	e7c6      	b.n	8015598 <__kernel_sin+0xc8>
 801560a:	bf00      	nop
 801560c:	f3af 8000 	nop.w
 8015610:	55555549 	.word	0x55555549
 8015614:	3fc55555 	.word	0x3fc55555
 8015618:	3fe00000 	.word	0x3fe00000
 801561c:	5acfd57c 	.word	0x5acfd57c
 8015620:	3de5d93a 	.word	0x3de5d93a
 8015624:	8a2b9ceb 	.word	0x8a2b9ceb
 8015628:	3e5ae5e6 	.word	0x3e5ae5e6
 801562c:	57b1fe7d 	.word	0x57b1fe7d
 8015630:	3ec71de3 	.word	0x3ec71de3
 8015634:	19c161d5 	.word	0x19c161d5
 8015638:	3f2a01a0 	.word	0x3f2a01a0
 801563c:	1110f8a6 	.word	0x1110f8a6
 8015640:	3f811111 	.word	0x3f811111

08015644 <atanf>:
 8015644:	b538      	push	{r3, r4, r5, lr}
 8015646:	ee10 5a10 	vmov	r5, s0
 801564a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801564e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8015652:	eef0 7a40 	vmov.f32	s15, s0
 8015656:	d310      	bcc.n	801567a <atanf+0x36>
 8015658:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801565c:	d904      	bls.n	8015668 <atanf+0x24>
 801565e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8015662:	eeb0 0a67 	vmov.f32	s0, s15
 8015666:	bd38      	pop	{r3, r4, r5, pc}
 8015668:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80157a0 <atanf+0x15c>
 801566c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80157a4 <atanf+0x160>
 8015670:	2d00      	cmp	r5, #0
 8015672:	bfc8      	it	gt
 8015674:	eef0 7a47 	vmovgt.f32	s15, s14
 8015678:	e7f3      	b.n	8015662 <atanf+0x1e>
 801567a:	4b4b      	ldr	r3, [pc, #300]	@ (80157a8 <atanf+0x164>)
 801567c:	429c      	cmp	r4, r3
 801567e:	d810      	bhi.n	80156a2 <atanf+0x5e>
 8015680:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8015684:	d20a      	bcs.n	801569c <atanf+0x58>
 8015686:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80157ac <atanf+0x168>
 801568a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801568e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015692:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801569a:	dce2      	bgt.n	8015662 <atanf+0x1e>
 801569c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80156a0:	e013      	b.n	80156ca <atanf+0x86>
 80156a2:	f7fd fea3 	bl	80133ec <fabsf>
 80156a6:	4b42      	ldr	r3, [pc, #264]	@ (80157b0 <atanf+0x16c>)
 80156a8:	429c      	cmp	r4, r3
 80156aa:	d84f      	bhi.n	801574c <atanf+0x108>
 80156ac:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80156b0:	429c      	cmp	r4, r3
 80156b2:	d841      	bhi.n	8015738 <atanf+0xf4>
 80156b4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80156b8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80156bc:	eea0 7a27 	vfma.f32	s14, s0, s15
 80156c0:	2300      	movs	r3, #0
 80156c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80156c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80156ca:	1c5a      	adds	r2, r3, #1
 80156cc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80156d0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80157b4 <atanf+0x170>
 80156d4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80157b8 <atanf+0x174>
 80156d8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80157bc <atanf+0x178>
 80156dc:	ee66 6a06 	vmul.f32	s13, s12, s12
 80156e0:	eee6 5a87 	vfma.f32	s11, s13, s14
 80156e4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80157c0 <atanf+0x17c>
 80156e8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80156ec:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80157c4 <atanf+0x180>
 80156f0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80156f4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80157c8 <atanf+0x184>
 80156f8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80156fc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80157cc <atanf+0x188>
 8015700:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015704:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80157d0 <atanf+0x18c>
 8015708:	eea6 5a87 	vfma.f32	s10, s13, s14
 801570c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80157d4 <atanf+0x190>
 8015710:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015714:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80157d8 <atanf+0x194>
 8015718:	eea7 5a26 	vfma.f32	s10, s14, s13
 801571c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80157dc <atanf+0x198>
 8015720:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015724:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015728:	eea5 7a86 	vfma.f32	s14, s11, s12
 801572c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015730:	d121      	bne.n	8015776 <atanf+0x132>
 8015732:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015736:	e794      	b.n	8015662 <atanf+0x1e>
 8015738:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801573c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015740:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015744:	2301      	movs	r3, #1
 8015746:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801574a:	e7be      	b.n	80156ca <atanf+0x86>
 801574c:	4b24      	ldr	r3, [pc, #144]	@ (80157e0 <atanf+0x19c>)
 801574e:	429c      	cmp	r4, r3
 8015750:	d80b      	bhi.n	801576a <atanf+0x126>
 8015752:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8015756:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801575a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801575e:	2302      	movs	r3, #2
 8015760:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015768:	e7af      	b.n	80156ca <atanf+0x86>
 801576a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801576e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015772:	2303      	movs	r3, #3
 8015774:	e7a9      	b.n	80156ca <atanf+0x86>
 8015776:	4a1b      	ldr	r2, [pc, #108]	@ (80157e4 <atanf+0x1a0>)
 8015778:	491b      	ldr	r1, [pc, #108]	@ (80157e8 <atanf+0x1a4>)
 801577a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801577e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015782:	edd3 6a00 	vldr	s13, [r3]
 8015786:	ee37 7a66 	vsub.f32	s14, s14, s13
 801578a:	2d00      	cmp	r5, #0
 801578c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015790:	edd2 7a00 	vldr	s15, [r2]
 8015794:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015798:	bfb8      	it	lt
 801579a:	eef1 7a67 	vneglt.f32	s15, s15
 801579e:	e760      	b.n	8015662 <atanf+0x1e>
 80157a0:	bfc90fdb 	.word	0xbfc90fdb
 80157a4:	3fc90fdb 	.word	0x3fc90fdb
 80157a8:	3edfffff 	.word	0x3edfffff
 80157ac:	7149f2ca 	.word	0x7149f2ca
 80157b0:	3f97ffff 	.word	0x3f97ffff
 80157b4:	3c8569d7 	.word	0x3c8569d7
 80157b8:	3d4bda59 	.word	0x3d4bda59
 80157bc:	bd6ef16b 	.word	0xbd6ef16b
 80157c0:	3d886b35 	.word	0x3d886b35
 80157c4:	3dba2e6e 	.word	0x3dba2e6e
 80157c8:	3e124925 	.word	0x3e124925
 80157cc:	3eaaaaab 	.word	0x3eaaaaab
 80157d0:	bd15a221 	.word	0xbd15a221
 80157d4:	bd9d8795 	.word	0xbd9d8795
 80157d8:	bde38e38 	.word	0xbde38e38
 80157dc:	be4ccccd 	.word	0xbe4ccccd
 80157e0:	401bffff 	.word	0x401bffff
 80157e4:	08016120 	.word	0x08016120
 80157e8:	08016110 	.word	0x08016110

080157ec <fabs>:
 80157ec:	ec51 0b10 	vmov	r0, r1, d0
 80157f0:	4602      	mov	r2, r0
 80157f2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80157f6:	ec43 2b10 	vmov	d0, r2, r3
 80157fa:	4770      	bx	lr
 80157fc:	0000      	movs	r0, r0
	...

08015800 <scalbn>:
 8015800:	b570      	push	{r4, r5, r6, lr}
 8015802:	ec55 4b10 	vmov	r4, r5, d0
 8015806:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801580a:	4606      	mov	r6, r0
 801580c:	462b      	mov	r3, r5
 801580e:	b991      	cbnz	r1, 8015836 <scalbn+0x36>
 8015810:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8015814:	4323      	orrs	r3, r4
 8015816:	d03b      	beq.n	8015890 <scalbn+0x90>
 8015818:	4b33      	ldr	r3, [pc, #204]	@ (80158e8 <scalbn+0xe8>)
 801581a:	4620      	mov	r0, r4
 801581c:	4629      	mov	r1, r5
 801581e:	2200      	movs	r2, #0
 8015820:	f7ea ff0a 	bl	8000638 <__aeabi_dmul>
 8015824:	4b31      	ldr	r3, [pc, #196]	@ (80158ec <scalbn+0xec>)
 8015826:	429e      	cmp	r6, r3
 8015828:	4604      	mov	r4, r0
 801582a:	460d      	mov	r5, r1
 801582c:	da0f      	bge.n	801584e <scalbn+0x4e>
 801582e:	a326      	add	r3, pc, #152	@ (adr r3, 80158c8 <scalbn+0xc8>)
 8015830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015834:	e01e      	b.n	8015874 <scalbn+0x74>
 8015836:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801583a:	4291      	cmp	r1, r2
 801583c:	d10b      	bne.n	8015856 <scalbn+0x56>
 801583e:	4622      	mov	r2, r4
 8015840:	4620      	mov	r0, r4
 8015842:	4629      	mov	r1, r5
 8015844:	f7ea fd42 	bl	80002cc <__adddf3>
 8015848:	4604      	mov	r4, r0
 801584a:	460d      	mov	r5, r1
 801584c:	e020      	b.n	8015890 <scalbn+0x90>
 801584e:	460b      	mov	r3, r1
 8015850:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8015854:	3936      	subs	r1, #54	@ 0x36
 8015856:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801585a:	4296      	cmp	r6, r2
 801585c:	dd0d      	ble.n	801587a <scalbn+0x7a>
 801585e:	2d00      	cmp	r5, #0
 8015860:	a11b      	add	r1, pc, #108	@ (adr r1, 80158d0 <scalbn+0xd0>)
 8015862:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015866:	da02      	bge.n	801586e <scalbn+0x6e>
 8015868:	a11b      	add	r1, pc, #108	@ (adr r1, 80158d8 <scalbn+0xd8>)
 801586a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801586e:	a318      	add	r3, pc, #96	@ (adr r3, 80158d0 <scalbn+0xd0>)
 8015870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015874:	f7ea fee0 	bl	8000638 <__aeabi_dmul>
 8015878:	e7e6      	b.n	8015848 <scalbn+0x48>
 801587a:	1872      	adds	r2, r6, r1
 801587c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8015880:	428a      	cmp	r2, r1
 8015882:	dcec      	bgt.n	801585e <scalbn+0x5e>
 8015884:	2a00      	cmp	r2, #0
 8015886:	dd06      	ble.n	8015896 <scalbn+0x96>
 8015888:	f36f 531e 	bfc	r3, #20, #11
 801588c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015890:	ec45 4b10 	vmov	d0, r4, r5
 8015894:	bd70      	pop	{r4, r5, r6, pc}
 8015896:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801589a:	da08      	bge.n	80158ae <scalbn+0xae>
 801589c:	2d00      	cmp	r5, #0
 801589e:	a10a      	add	r1, pc, #40	@ (adr r1, 80158c8 <scalbn+0xc8>)
 80158a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80158a4:	dac3      	bge.n	801582e <scalbn+0x2e>
 80158a6:	a10e      	add	r1, pc, #56	@ (adr r1, 80158e0 <scalbn+0xe0>)
 80158a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80158ac:	e7bf      	b.n	801582e <scalbn+0x2e>
 80158ae:	3236      	adds	r2, #54	@ 0x36
 80158b0:	f36f 531e 	bfc	r3, #20, #11
 80158b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80158b8:	4620      	mov	r0, r4
 80158ba:	4b0d      	ldr	r3, [pc, #52]	@ (80158f0 <scalbn+0xf0>)
 80158bc:	4629      	mov	r1, r5
 80158be:	2200      	movs	r2, #0
 80158c0:	e7d8      	b.n	8015874 <scalbn+0x74>
 80158c2:	bf00      	nop
 80158c4:	f3af 8000 	nop.w
 80158c8:	c2f8f359 	.word	0xc2f8f359
 80158cc:	01a56e1f 	.word	0x01a56e1f
 80158d0:	8800759c 	.word	0x8800759c
 80158d4:	7e37e43c 	.word	0x7e37e43c
 80158d8:	8800759c 	.word	0x8800759c
 80158dc:	fe37e43c 	.word	0xfe37e43c
 80158e0:	c2f8f359 	.word	0xc2f8f359
 80158e4:	81a56e1f 	.word	0x81a56e1f
 80158e8:	43500000 	.word	0x43500000
 80158ec:	ffff3cb0 	.word	0xffff3cb0
 80158f0:	3c900000 	.word	0x3c900000

080158f4 <_init>:
 80158f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158f6:	bf00      	nop
 80158f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158fa:	bc08      	pop	{r3}
 80158fc:	469e      	mov	lr, r3
 80158fe:	4770      	bx	lr

08015900 <_fini>:
 8015900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015902:	bf00      	nop
 8015904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015906:	bc08      	pop	{r3}
 8015908:	469e      	mov	lr, r3
 801590a:	4770      	bx	lr
