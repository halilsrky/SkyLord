
SkyLord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011240  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  08011410  08011410  00012410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119f8  080119f8  00013228  2**0
                  CONTENTS
  4 .ARM          00000008  080119f8  080119f8  000129f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a00  08011a00  00013228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a00  08011a00  00012a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011a04  08011a04  00012a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000228  20000000  08011a08  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000714  20000228  08011c30  00013228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  08011c30  0001393c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013228  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187e3  00000000  00000000  00013258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038d9  00000000  00000000  0002ba3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  0002f318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fcb  00000000  00000000  00030718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025606  00000000  00000000  000316e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c79b  00000000  00000000  00056ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d828f  00000000  00000000  00073484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b713  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b2c  00000000  00000000  0014b758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00152284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080113f8 	.word	0x080113f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	080113f8 	.word	0x080113f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	@ 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_ldivmod>:
 8000ea4:	b97b      	cbnz	r3, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea6:	b972      	cbnz	r2, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bfbe      	ittt	lt
 8000eac:	2000      	movlt	r0, #0
 8000eae:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000eb2:	e006      	blt.n	8000ec2 <__aeabi_ldivmod+0x1e>
 8000eb4:	bf08      	it	eq
 8000eb6:	2800      	cmpeq	r0, #0
 8000eb8:	bf1c      	itt	ne
 8000eba:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ebe:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec2:	f000 b9b5 	b.w	8001230 <__aeabi_idiv0>
 8000ec6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	db09      	blt.n	8000ee6 <__aeabi_ldivmod+0x42>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db1a      	blt.n	8000f0c <__aeabi_ldivmod+0x68>
 8000ed6:	f000 f84d 	bl	8000f74 <__udivmoddi4>
 8000eda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	4240      	negs	r0, r0
 8000ee8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db1b      	blt.n	8000f28 <__aeabi_ldivmod+0x84>
 8000ef0:	f000 f840 	bl	8000f74 <__udivmoddi4>
 8000ef4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efc:	b004      	add	sp, #16
 8000efe:	4240      	negs	r0, r0
 8000f00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f04:	4252      	negs	r2, r2
 8000f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f0a:	4770      	bx	lr
 8000f0c:	4252      	negs	r2, r2
 8000f0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f12:	f000 f82f 	bl	8000f74 <__udivmoddi4>
 8000f16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f1e:	b004      	add	sp, #16
 8000f20:	4240      	negs	r0, r0
 8000f22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f26:	4770      	bx	lr
 8000f28:	4252      	negs	r2, r2
 8000f2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f2e:	f000 f821 	bl	8000f74 <__udivmoddi4>
 8000f32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3a:	b004      	add	sp, #16
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	4770      	bx	lr

08000f44 <__aeabi_uldivmod>:
 8000f44:	b953      	cbnz	r3, 8000f5c <__aeabi_uldivmod+0x18>
 8000f46:	b94a      	cbnz	r2, 8000f5c <__aeabi_uldivmod+0x18>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bf08      	it	eq
 8000f4c:	2800      	cmpeq	r0, #0
 8000f4e:	bf1c      	itt	ne
 8000f50:	f04f 31ff 	movne.w	r1, #4294967295
 8000f54:	f04f 30ff 	movne.w	r0, #4294967295
 8000f58:	f000 b96a 	b.w	8001230 <__aeabi_idiv0>
 8000f5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f64:	f000 f806 	bl	8000f74 <__udivmoddi4>
 8000f68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f70:	b004      	add	sp, #16
 8000f72:	4770      	bx	lr

08000f74 <__udivmoddi4>:
 8000f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f78:	9d08      	ldr	r5, [sp, #32]
 8000f7a:	460c      	mov	r4, r1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d14e      	bne.n	800101e <__udivmoddi4+0xaa>
 8000f80:	4694      	mov	ip, r2
 8000f82:	458c      	cmp	ip, r1
 8000f84:	4686      	mov	lr, r0
 8000f86:	fab2 f282 	clz	r2, r2
 8000f8a:	d962      	bls.n	8001052 <__udivmoddi4+0xde>
 8000f8c:	b14a      	cbz	r2, 8000fa2 <__udivmoddi4+0x2e>
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	4091      	lsls	r1, r2
 8000f94:	fa20 f303 	lsr.w	r3, r0, r3
 8000f98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f9c:	4319      	orrs	r1, r3
 8000f9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa6:	fa1f f68c 	uxth.w	r6, ip
 8000faa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fb2:	fb07 1114 	mls	r1, r7, r4, r1
 8000fb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fba:	fb04 f106 	mul.w	r1, r4, r6
 8000fbe:	4299      	cmp	r1, r3
 8000fc0:	d90a      	bls.n	8000fd8 <__udivmoddi4+0x64>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000fca:	f080 8112 	bcs.w	80011f2 <__udivmoddi4+0x27e>
 8000fce:	4299      	cmp	r1, r3
 8000fd0:	f240 810f 	bls.w	80011f2 <__udivmoddi4+0x27e>
 8000fd4:	3c02      	subs	r4, #2
 8000fd6:	4463      	add	r3, ip
 8000fd8:	1a59      	subs	r1, r3, r1
 8000fda:	fa1f f38e 	uxth.w	r3, lr
 8000fde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fe2:	fb07 1110 	mls	r1, r7, r0, r1
 8000fe6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fea:	fb00 f606 	mul.w	r6, r0, r6
 8000fee:	429e      	cmp	r6, r3
 8000ff0:	d90a      	bls.n	8001008 <__udivmoddi4+0x94>
 8000ff2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ffa:	f080 80fc 	bcs.w	80011f6 <__udivmoddi4+0x282>
 8000ffe:	429e      	cmp	r6, r3
 8001000:	f240 80f9 	bls.w	80011f6 <__udivmoddi4+0x282>
 8001004:	4463      	add	r3, ip
 8001006:	3802      	subs	r0, #2
 8001008:	1b9b      	subs	r3, r3, r6
 800100a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800100e:	2100      	movs	r1, #0
 8001010:	b11d      	cbz	r5, 800101a <__udivmoddi4+0xa6>
 8001012:	40d3      	lsrs	r3, r2
 8001014:	2200      	movs	r2, #0
 8001016:	e9c5 3200 	strd	r3, r2, [r5]
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	428b      	cmp	r3, r1
 8001020:	d905      	bls.n	800102e <__udivmoddi4+0xba>
 8001022:	b10d      	cbz	r5, 8001028 <__udivmoddi4+0xb4>
 8001024:	e9c5 0100 	strd	r0, r1, [r5]
 8001028:	2100      	movs	r1, #0
 800102a:	4608      	mov	r0, r1
 800102c:	e7f5      	b.n	800101a <__udivmoddi4+0xa6>
 800102e:	fab3 f183 	clz	r1, r3
 8001032:	2900      	cmp	r1, #0
 8001034:	d146      	bne.n	80010c4 <__udivmoddi4+0x150>
 8001036:	42a3      	cmp	r3, r4
 8001038:	d302      	bcc.n	8001040 <__udivmoddi4+0xcc>
 800103a:	4290      	cmp	r0, r2
 800103c:	f0c0 80f0 	bcc.w	8001220 <__udivmoddi4+0x2ac>
 8001040:	1a86      	subs	r6, r0, r2
 8001042:	eb64 0303 	sbc.w	r3, r4, r3
 8001046:	2001      	movs	r0, #1
 8001048:	2d00      	cmp	r5, #0
 800104a:	d0e6      	beq.n	800101a <__udivmoddi4+0xa6>
 800104c:	e9c5 6300 	strd	r6, r3, [r5]
 8001050:	e7e3      	b.n	800101a <__udivmoddi4+0xa6>
 8001052:	2a00      	cmp	r2, #0
 8001054:	f040 8090 	bne.w	8001178 <__udivmoddi4+0x204>
 8001058:	eba1 040c 	sub.w	r4, r1, ip
 800105c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001060:	fa1f f78c 	uxth.w	r7, ip
 8001064:	2101      	movs	r1, #1
 8001066:	fbb4 f6f8 	udiv	r6, r4, r8
 800106a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800106e:	fb08 4416 	mls	r4, r8, r6, r4
 8001072:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001076:	fb07 f006 	mul.w	r0, r7, r6
 800107a:	4298      	cmp	r0, r3
 800107c:	d908      	bls.n	8001090 <__udivmoddi4+0x11c>
 800107e:	eb1c 0303 	adds.w	r3, ip, r3
 8001082:	f106 34ff 	add.w	r4, r6, #4294967295
 8001086:	d202      	bcs.n	800108e <__udivmoddi4+0x11a>
 8001088:	4298      	cmp	r0, r3
 800108a:	f200 80cd 	bhi.w	8001228 <__udivmoddi4+0x2b4>
 800108e:	4626      	mov	r6, r4
 8001090:	1a1c      	subs	r4, r3, r0
 8001092:	fa1f f38e 	uxth.w	r3, lr
 8001096:	fbb4 f0f8 	udiv	r0, r4, r8
 800109a:	fb08 4410 	mls	r4, r8, r0, r4
 800109e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010a2:	fb00 f707 	mul.w	r7, r0, r7
 80010a6:	429f      	cmp	r7, r3
 80010a8:	d908      	bls.n	80010bc <__udivmoddi4+0x148>
 80010aa:	eb1c 0303 	adds.w	r3, ip, r3
 80010ae:	f100 34ff 	add.w	r4, r0, #4294967295
 80010b2:	d202      	bcs.n	80010ba <__udivmoddi4+0x146>
 80010b4:	429f      	cmp	r7, r3
 80010b6:	f200 80b0 	bhi.w	800121a <__udivmoddi4+0x2a6>
 80010ba:	4620      	mov	r0, r4
 80010bc:	1bdb      	subs	r3, r3, r7
 80010be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010c2:	e7a5      	b.n	8001010 <__udivmoddi4+0x9c>
 80010c4:	f1c1 0620 	rsb	r6, r1, #32
 80010c8:	408b      	lsls	r3, r1
 80010ca:	fa22 f706 	lsr.w	r7, r2, r6
 80010ce:	431f      	orrs	r7, r3
 80010d0:	fa20 fc06 	lsr.w	ip, r0, r6
 80010d4:	fa04 f301 	lsl.w	r3, r4, r1
 80010d8:	ea43 030c 	orr.w	r3, r3, ip
 80010dc:	40f4      	lsrs	r4, r6
 80010de:	fa00 f801 	lsl.w	r8, r0, r1
 80010e2:	0c38      	lsrs	r0, r7, #16
 80010e4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80010e8:	fbb4 fef0 	udiv	lr, r4, r0
 80010ec:	fa1f fc87 	uxth.w	ip, r7
 80010f0:	fb00 441e 	mls	r4, r0, lr, r4
 80010f4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010f8:	fb0e f90c 	mul.w	r9, lr, ip
 80010fc:	45a1      	cmp	r9, r4
 80010fe:	fa02 f201 	lsl.w	r2, r2, r1
 8001102:	d90a      	bls.n	800111a <__udivmoddi4+0x1a6>
 8001104:	193c      	adds	r4, r7, r4
 8001106:	f10e 3aff 	add.w	sl, lr, #4294967295
 800110a:	f080 8084 	bcs.w	8001216 <__udivmoddi4+0x2a2>
 800110e:	45a1      	cmp	r9, r4
 8001110:	f240 8081 	bls.w	8001216 <__udivmoddi4+0x2a2>
 8001114:	f1ae 0e02 	sub.w	lr, lr, #2
 8001118:	443c      	add	r4, r7
 800111a:	eba4 0409 	sub.w	r4, r4, r9
 800111e:	fa1f f983 	uxth.w	r9, r3
 8001122:	fbb4 f3f0 	udiv	r3, r4, r0
 8001126:	fb00 4413 	mls	r4, r0, r3, r4
 800112a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800112e:	fb03 fc0c 	mul.w	ip, r3, ip
 8001132:	45a4      	cmp	ip, r4
 8001134:	d907      	bls.n	8001146 <__udivmoddi4+0x1d2>
 8001136:	193c      	adds	r4, r7, r4
 8001138:	f103 30ff 	add.w	r0, r3, #4294967295
 800113c:	d267      	bcs.n	800120e <__udivmoddi4+0x29a>
 800113e:	45a4      	cmp	ip, r4
 8001140:	d965      	bls.n	800120e <__udivmoddi4+0x29a>
 8001142:	3b02      	subs	r3, #2
 8001144:	443c      	add	r4, r7
 8001146:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800114a:	fba0 9302 	umull	r9, r3, r0, r2
 800114e:	eba4 040c 	sub.w	r4, r4, ip
 8001152:	429c      	cmp	r4, r3
 8001154:	46ce      	mov	lr, r9
 8001156:	469c      	mov	ip, r3
 8001158:	d351      	bcc.n	80011fe <__udivmoddi4+0x28a>
 800115a:	d04e      	beq.n	80011fa <__udivmoddi4+0x286>
 800115c:	b155      	cbz	r5, 8001174 <__udivmoddi4+0x200>
 800115e:	ebb8 030e 	subs.w	r3, r8, lr
 8001162:	eb64 040c 	sbc.w	r4, r4, ip
 8001166:	fa04 f606 	lsl.w	r6, r4, r6
 800116a:	40cb      	lsrs	r3, r1
 800116c:	431e      	orrs	r6, r3
 800116e:	40cc      	lsrs	r4, r1
 8001170:	e9c5 6400 	strd	r6, r4, [r5]
 8001174:	2100      	movs	r1, #0
 8001176:	e750      	b.n	800101a <__udivmoddi4+0xa6>
 8001178:	f1c2 0320 	rsb	r3, r2, #32
 800117c:	fa20 f103 	lsr.w	r1, r0, r3
 8001180:	fa0c fc02 	lsl.w	ip, ip, r2
 8001184:	fa24 f303 	lsr.w	r3, r4, r3
 8001188:	4094      	lsls	r4, r2
 800118a:	430c      	orrs	r4, r1
 800118c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001190:	fa00 fe02 	lsl.w	lr, r0, r2
 8001194:	fa1f f78c 	uxth.w	r7, ip
 8001198:	fbb3 f0f8 	udiv	r0, r3, r8
 800119c:	fb08 3110 	mls	r1, r8, r0, r3
 80011a0:	0c23      	lsrs	r3, r4, #16
 80011a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011a6:	fb00 f107 	mul.w	r1, r0, r7
 80011aa:	4299      	cmp	r1, r3
 80011ac:	d908      	bls.n	80011c0 <__udivmoddi4+0x24c>
 80011ae:	eb1c 0303 	adds.w	r3, ip, r3
 80011b2:	f100 36ff 	add.w	r6, r0, #4294967295
 80011b6:	d22c      	bcs.n	8001212 <__udivmoddi4+0x29e>
 80011b8:	4299      	cmp	r1, r3
 80011ba:	d92a      	bls.n	8001212 <__udivmoddi4+0x29e>
 80011bc:	3802      	subs	r0, #2
 80011be:	4463      	add	r3, ip
 80011c0:	1a5b      	subs	r3, r3, r1
 80011c2:	b2a4      	uxth	r4, r4
 80011c4:	fbb3 f1f8 	udiv	r1, r3, r8
 80011c8:	fb08 3311 	mls	r3, r8, r1, r3
 80011cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011d0:	fb01 f307 	mul.w	r3, r1, r7
 80011d4:	42a3      	cmp	r3, r4
 80011d6:	d908      	bls.n	80011ea <__udivmoddi4+0x276>
 80011d8:	eb1c 0404 	adds.w	r4, ip, r4
 80011dc:	f101 36ff 	add.w	r6, r1, #4294967295
 80011e0:	d213      	bcs.n	800120a <__udivmoddi4+0x296>
 80011e2:	42a3      	cmp	r3, r4
 80011e4:	d911      	bls.n	800120a <__udivmoddi4+0x296>
 80011e6:	3902      	subs	r1, #2
 80011e8:	4464      	add	r4, ip
 80011ea:	1ae4      	subs	r4, r4, r3
 80011ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011f0:	e739      	b.n	8001066 <__udivmoddi4+0xf2>
 80011f2:	4604      	mov	r4, r0
 80011f4:	e6f0      	b.n	8000fd8 <__udivmoddi4+0x64>
 80011f6:	4608      	mov	r0, r1
 80011f8:	e706      	b.n	8001008 <__udivmoddi4+0x94>
 80011fa:	45c8      	cmp	r8, r9
 80011fc:	d2ae      	bcs.n	800115c <__udivmoddi4+0x1e8>
 80011fe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001202:	eb63 0c07 	sbc.w	ip, r3, r7
 8001206:	3801      	subs	r0, #1
 8001208:	e7a8      	b.n	800115c <__udivmoddi4+0x1e8>
 800120a:	4631      	mov	r1, r6
 800120c:	e7ed      	b.n	80011ea <__udivmoddi4+0x276>
 800120e:	4603      	mov	r3, r0
 8001210:	e799      	b.n	8001146 <__udivmoddi4+0x1d2>
 8001212:	4630      	mov	r0, r6
 8001214:	e7d4      	b.n	80011c0 <__udivmoddi4+0x24c>
 8001216:	46d6      	mov	lr, sl
 8001218:	e77f      	b.n	800111a <__udivmoddi4+0x1a6>
 800121a:	4463      	add	r3, ip
 800121c:	3802      	subs	r0, #2
 800121e:	e74d      	b.n	80010bc <__udivmoddi4+0x148>
 8001220:	4606      	mov	r6, r0
 8001222:	4623      	mov	r3, r4
 8001224:	4608      	mov	r0, r1
 8001226:	e70f      	b.n	8001048 <__udivmoddi4+0xd4>
 8001228:	3e02      	subs	r6, #2
 800122a:	4463      	add	r3, ip
 800122c:	e730      	b.n	8001090 <__udivmoddi4+0x11c>
 800122e:	bf00      	nop

08001230 <__aeabi_idiv0>:
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <bme280_getVals>:
static uint8_t bme_started_flag = 0;
static uint8_t last_measuring = 1;


void bme280_getVals()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af04      	add	r7, sp, #16
	uint8_t status;
    HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 800123a:	4b3c      	ldr	r3, [pc, #240]	@ (800132c <bme280_getVals+0xf8>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	2364      	movs	r3, #100	@ 0x64
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	2301      	movs	r3, #1
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	f107 030d 	add.w	r3, r7, #13
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	22f3      	movs	r2, #243	@ 0xf3
 8001250:	21ec      	movs	r1, #236	@ 0xec
 8001252:	f007 fd45 	bl	8008ce0 <HAL_I2C_Mem_Read>
 8001256:	4603      	mov	r3, r0
 8001258:	73fb      	strb	r3, [r7, #15]
    BME->isUpdated = 0;
 800125a:	4b35      	ldr	r3, [pc, #212]	@ (8001330 <bme280_getVals+0xfc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    uint8_t current_measuring = ((status & (0x01 << 3)) == 0);
 8001264:	7b7b      	ldrb	r3, [r7, #13]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf0c      	ite	eq
 800126e:	2301      	moveq	r3, #1
 8001270:	2300      	movne	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	73bb      	strb	r3, [r7, #14]

    if ((last_measuring == 1) && (current_measuring == 0)) {
 8001276:	4b2f      	ldr	r3, [pc, #188]	@ (8001334 <bme280_getVals+0x100>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d14f      	bne.n	800131e <bme280_getVals+0xea>
 800127e:	7bbb      	ldrb	r3, [r7, #14]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d14c      	bne.n	800131e <bme280_getVals+0xea>
        uint8_t data[8];
        retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, data, 8, 20);
 8001284:	4b29      	ldr	r3, [pc, #164]	@ (800132c <bme280_getVals+0xf8>)
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	2314      	movs	r3, #20
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2308      	movs	r3, #8
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	22f7      	movs	r2, #247	@ 0xf7
 8001298:	21ec      	movs	r1, #236	@ 0xec
 800129a:	f007 fd21 	bl	8008ce0 <HAL_I2C_Mem_Read>
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]
        if (retVal == HAL_OK && memcmp(data, BME->lastReadings, 8) != 0) {
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d13a      	bne.n	800131e <bme280_getVals+0xea>
 80012a8:	4b21      	ldr	r3, [pc, #132]	@ (8001330 <bme280_getVals+0xfc>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2208      	movs	r2, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f00b fdc0 	bl	800ce3a <memcmp>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d02e      	beq.n	800131e <bme280_getVals+0xea>
            memcpy(BME->lastReadings, data, 8);
 80012c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <bme280_getVals+0xfc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3334      	adds	r3, #52	@ 0x34
 80012c6:	461a      	mov	r2, r3
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	cb03      	ldmia	r3!, {r0, r1}
 80012cc:	6010      	str	r0, [r2, #0]
 80012ce:	6051      	str	r1, [r2, #4]
            BME->isUpdated = 1;
 80012d0:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <bme280_getVals+0xfc>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            BME->adcVals.ut = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | ((int32_t)data[5] >> 4);
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	031a      	lsls	r2, r3, #12
 80012de:	7a3b      	ldrb	r3, [r7, #8]
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	431a      	orrs	r2, r3
 80012e4:	7a7b      	ldrb	r3, [r7, #9]
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4619      	mov	r1, r3
 80012ec:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <bme280_getVals+0xfc>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	609a      	str	r2, [r3, #8]
            BME->adcVals.up = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((int32_t)data[2] >> 4);
 80012f4:	793b      	ldrb	r3, [r7, #4]
 80012f6:	031a      	lsls	r2, r3, #12
 80012f8:	797b      	ldrb	r3, [r7, #5]
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	431a      	orrs	r2, r3
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4619      	mov	r1, r3
 8001306:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <bme280_getVals+0xfc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	60da      	str	r2, [r3, #12]
            BME->adcVals.uh = ((int32_t)data[6] << 8) | ((int32_t)data[7]);
 800130e:	7abb      	ldrb	r3, [r7, #10]
 8001310:	021a      	lsls	r2, r3, #8
 8001312:	7afb      	ldrb	r3, [r7, #11]
 8001314:	4619      	mov	r1, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <bme280_getVals+0xfc>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	611a      	str	r2, [r3, #16]
        }
    }
    last_measuring = current_measuring;
 800131e:	4a05      	ldr	r2, [pc, #20]	@ (8001334 <bme280_getVals+0x100>)
 8001320:	7bbb      	ldrb	r3, [r7, #14]
 8001322:	7013      	strb	r3, [r2, #0]
    UNUSED(retVal);
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000244 	.word	0x20000244
 8001330:	20000248 	.word	0x20000248
 8001334:	20000000 	.word	0x20000000

08001338 <bme280_calculate_altitude>:



void bme280_calculate_altitude() {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
    // Standard sea level pressure in hPa
    float p_seaLevel = 1013.25;
 800133e:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <bme280_calculate_altitude+0x98>)
 8001340:	607b      	str	r3, [r7, #4]

    // Calculate altitude from pressure using barometric formula
    float rawAltitude = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 8001342:	4b24      	ldr	r3, [pc, #144]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	ed93 7a06 	vldr	s14, [r3, #24]
 800134a:	edd7 7a01 	vldr	s15, [r7, #4]
 800134e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001352:	ee16 0a90 	vmov	r0, s13
 8001356:	f7ff f917 	bl	8000588 <__aeabi_f2d>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 80013c0 <bme280_calculate_altitude+0x88>
 8001362:	ec43 2b10 	vmov	d0, r2, r3
 8001366:	f00d fc99 	bl	800ec9c <pow>
 800136a:	ec53 2b10 	vmov	r2, r3, d0
 800136e:	f04f 0000 	mov.w	r0, #0
 8001372:	4919      	ldr	r1, [pc, #100]	@ (80013d8 <bme280_calculate_altitude+0xa0>)
 8001374:	f7fe ffa8 	bl	80002c8 <__aeabi_dsub>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	a311      	add	r3, pc, #68	@ (adr r3, 80013c8 <bme280_calculate_altitude+0x90>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7ff f957 	bl	8000638 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f7ff fc29 	bl	8000be8 <__aeabi_d2f>
 8001396:	4603      	mov	r3, r0
 8001398:	603b      	str	r3, [r7, #0]

    // Apply base altitude correction
    BME->altitude = rawAltitude - BME->base_altitude;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	ed97 7a00 	vldr	s14, [r7]
 80013aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ae:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	f3af 8000 	nop.w
 80013c0:	ccd9456c 	.word	0xccd9456c
 80013c4:	3fc85b95 	.word	0x3fc85b95
 80013c8:	00000000 	.word	0x00000000
 80013cc:	40e5a540 	.word	0x40e5a540
 80013d0:	447d5000 	.word	0x447d5000
 80013d4:	20000248 	.word	0x20000248
 80013d8:	3ff00000 	.word	0x3ff00000

080013dc <bme280_config>:

void bme280_config()
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	@ 0x38
 80013e0:	af04      	add	r7, sp, #16
    uint8_t params[25];
    HAL_StatusTypeDef retVal;

    BME->base_altitude = 0.0;
 80013e2:	4b99      	ldr	r3, [pc, #612]	@ (8001648 <bme280_config+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset and initialize I2C
    HAL_I2C_DeInit(I2C_);
 80013ec:	4b97      	ldr	r3, [pc, #604]	@ (800164c <bme280_config+0x270>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f007 fb4b 	bl	8008a8c <HAL_I2C_DeInit>
    HAL_Delay(5);
 80013f6:	2005      	movs	r0, #5
 80013f8:	f006 f9e0 	bl	80077bc <HAL_Delay>
    HAL_I2C_Init(I2C_);
 80013fc:	4b93      	ldr	r3, [pc, #588]	@ (800164c <bme280_config+0x270>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f007 f9ff 	bl	8008804 <HAL_I2C_Init>
    HAL_Delay(5);
 8001406:	2005      	movs	r0, #5
 8001408:	f006 f9d8 	bl	80077bc <HAL_Delay>

    // Read calibration parameters
    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 800140c:	4b8f      	ldr	r3, [pc, #572]	@ (800164c <bme280_config+0x270>)
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	23c8      	movs	r3, #200	@ 0xc8
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	2319      	movs	r3, #25
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	2288      	movs	r2, #136	@ 0x88
 8001420:	21ec      	movs	r1, #236	@ 0xec
 8001422:	f007 fc5d 	bl	8008ce0 <HAL_I2C_Mem_Read>
 8001426:	4603      	mov	r3, r0
 8001428:	77fb      	strb	r3, [r7, #31]

    BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 800142a:	793b      	ldrb	r3, [r7, #4]
 800142c:	4619      	mov	r1, r3
 800142e:	797b      	ldrb	r3, [r7, #5]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b84      	ldr	r3, [pc, #528]	@ (8001648 <bme280_config+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	b292      	uxth	r2, r2
 800143e:	801a      	strh	r2, [r3, #0]
    BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	b219      	sxth	r1, r3
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b21a      	sxth	r2, r3
 800144a:	4b7f      	ldr	r3, [pc, #508]	@ (8001648 <bme280_config+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	b212      	sxth	r2, r2
 8001454:	805a      	strh	r2, [r3, #2]
    BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001456:	7a3b      	ldrb	r3, [r7, #8]
 8001458:	b219      	sxth	r1, r3
 800145a:	7a7b      	ldrb	r3, [r7, #9]
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	b21a      	sxth	r2, r3
 8001460:	4b79      	ldr	r3, [pc, #484]	@ (8001648 <bme280_config+0x26c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	b212      	sxth	r2, r2
 800146a:	809a      	strh	r2, [r3, #4]
    BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 800146c:	7abb      	ldrb	r3, [r7, #10]
 800146e:	b21a      	sxth	r2, r3
 8001470:	7afb      	ldrb	r3, [r7, #11]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21b      	sxth	r3, r3
 8001476:	4313      	orrs	r3, r2
 8001478:	b21a      	sxth	r2, r3
 800147a:	4b73      	ldr	r3, [pc, #460]	@ (8001648 <bme280_config+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	b292      	uxth	r2, r2
 8001482:	80da      	strh	r2, [r3, #6]
    BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001484:	7b3b      	ldrb	r3, [r7, #12]
 8001486:	b219      	sxth	r1, r3
 8001488:	7b7b      	ldrb	r3, [r7, #13]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b21a      	sxth	r2, r3
 800148e:	4b6e      	ldr	r3, [pc, #440]	@ (8001648 <bme280_config+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	b212      	sxth	r2, r2
 8001498:	811a      	strh	r2, [r3, #8]
    BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800149a:	7bbb      	ldrb	r3, [r7, #14]
 800149c:	b219      	sxth	r1, r3
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	4b68      	ldr	r3, [pc, #416]	@ (8001648 <bme280_config+0x26c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	b212      	sxth	r2, r2
 80014ae:	815a      	strh	r2, [r3, #10]
    BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 80014b0:	7c3b      	ldrb	r3, [r7, #16]
 80014b2:	b219      	sxth	r1, r3
 80014b4:	7c7b      	ldrb	r3, [r7, #17]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	4b63      	ldr	r3, [pc, #396]	@ (8001648 <bme280_config+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	b212      	sxth	r2, r2
 80014c4:	819a      	strh	r2, [r3, #12]
    BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 80014c6:	7cbb      	ldrb	r3, [r7, #18]
 80014c8:	b219      	sxth	r1, r3
 80014ca:	7cfb      	ldrb	r3, [r7, #19]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	4b5d      	ldr	r3, [pc, #372]	@ (8001648 <bme280_config+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	b212      	sxth	r2, r2
 80014da:	81da      	strh	r2, [r3, #14]
    BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 80014dc:	7d3b      	ldrb	r3, [r7, #20]
 80014de:	b219      	sxth	r1, r3
 80014e0:	7d7b      	ldrb	r3, [r7, #21]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	4b58      	ldr	r3, [pc, #352]	@ (8001648 <bme280_config+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	b212      	sxth	r2, r2
 80014f0:	821a      	strh	r2, [r3, #16]
    BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 80014f2:	7dbb      	ldrb	r3, [r7, #22]
 80014f4:	b219      	sxth	r1, r3
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	4b52      	ldr	r3, [pc, #328]	@ (8001648 <bme280_config+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	b212      	sxth	r2, r2
 8001506:	825a      	strh	r2, [r3, #18]
    BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 8001508:	7e3b      	ldrb	r3, [r7, #24]
 800150a:	b219      	sxth	r1, r3
 800150c:	7e7b      	ldrb	r3, [r7, #25]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	4b4d      	ldr	r3, [pc, #308]	@ (8001648 <bme280_config+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	b212      	sxth	r2, r2
 800151c:	829a      	strh	r2, [r3, #20]
    BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 800151e:	7ebb      	ldrb	r3, [r7, #26]
 8001520:	b219      	sxth	r1, r3
 8001522:	7efb      	ldrb	r3, [r7, #27]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	b21a      	sxth	r2, r3
 8001528:	4b47      	ldr	r3, [pc, #284]	@ (8001648 <bme280_config+0x26c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	b212      	sxth	r2, r2
 8001532:	82da      	strh	r2, [r3, #22]
    BME->parameters->dig_H1 = params[24];
 8001534:	4b44      	ldr	r3, [pc, #272]	@ (8001648 <bme280_config+0x26c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	7f3a      	ldrb	r2, [r7, #28]
 800153c:	761a      	strb	r2, [r3, #24]

    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 800153e:	4b43      	ldr	r3, [pc, #268]	@ (800164c <bme280_config+0x270>)
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	2332      	movs	r3, #50	@ 0x32
 8001544:	9302      	str	r3, [sp, #8]
 8001546:	2307      	movs	r3, #7
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2301      	movs	r3, #1
 8001550:	22e1      	movs	r2, #225	@ 0xe1
 8001552:	21ec      	movs	r1, #236	@ 0xec
 8001554:	f007 fbc4 	bl	8008ce0 <HAL_I2C_Mem_Read>
 8001558:	4603      	mov	r3, r0
 800155a:	77fb      	strb	r3, [r7, #31]
    BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800155c:	793b      	ldrb	r3, [r7, #4]
 800155e:	b219      	sxth	r1, r3
 8001560:	797b      	ldrb	r3, [r7, #5]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b21a      	sxth	r2, r3
 8001566:	4b38      	ldr	r3, [pc, #224]	@ (8001648 <bme280_config+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	b212      	sxth	r2, r2
 8001570:	835a      	strh	r2, [r3, #26]
    BME->parameters->dig_H3 = params[2];
 8001572:	4b35      	ldr	r3, [pc, #212]	@ (8001648 <bme280_config+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	79ba      	ldrb	r2, [r7, #6]
 800157a:	771a      	strb	r2, [r3, #28]
    BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800157c:	7a3b      	ldrb	r3, [r7, #8]
 800157e:	b21b      	sxth	r3, r3
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	b219      	sxth	r1, r3
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	b21a      	sxth	r2, r3
 800158c:	4b2e      	ldr	r3, [pc, #184]	@ (8001648 <bme280_config+0x26c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	b212      	sxth	r2, r2
 8001596:	83da      	strh	r2, [r3, #30]
    BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001598:	7a3b      	ldrb	r3, [r7, #8]
 800159a:	091b      	lsrs	r3, r3, #4
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b219      	sxth	r1, r3
 80015a0:	7a7b      	ldrb	r3, [r7, #9]
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	4b28      	ldr	r3, [pc, #160]	@ (8001648 <bme280_config+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	b212      	sxth	r2, r2
 80015b0:	841a      	strh	r2, [r3, #32]
    BME->parameters->dig_H6 = params[6];
 80015b2:	7aba      	ldrb	r2, [r7, #10]
 80015b4:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <bme280_config+0x26c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b252      	sxtb	r2, r2
 80015bc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    uint8_t data_ctrl = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_output_speed;
 80015c4:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <bme280_config+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	799b      	ldrb	r3, [r3, #6]
 80015ca:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 80015cc:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <bme280_config+0x270>)
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	2332      	movs	r3, #50	@ 0x32
 80015d2:	9302      	str	r3, [sp, #8]
 80015d4:	2301      	movs	r3, #1
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	1cfb      	adds	r3, r7, #3
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2301      	movs	r3, #1
 80015de:	22f2      	movs	r2, #242	@ 0xf2
 80015e0:	21ec      	movs	r1, #236	@ 0xec
 80015e2:	f007 fa83 	bl	8008aec <HAL_I2C_Mem_Write>
 80015e6:	4603      	mov	r3, r0
 80015e8:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);
 80015ee:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <bme280_config+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	795b      	ldrb	r3, [r3, #5]
 80015f4:	b25a      	sxtb	r2, r3
 80015f6:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <bme280_config+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	799b      	ldrb	r3, [r3, #6]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b25a      	sxtb	r2, r3
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <bme280_config+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	799b      	ldrb	r3, [r3, #6]
 800160a:	015b      	lsls	r3, r3, #5
 800160c:	b25b      	sxtb	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	b25b      	sxtb	r3, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <bme280_config+0x270>)
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	2332      	movs	r3, #50	@ 0x32
 800161c:	9302      	str	r3, [sp, #8]
 800161e:	2301      	movs	r3, #1
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	1cfb      	adds	r3, r7, #3
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2301      	movs	r3, #1
 8001628:	22f4      	movs	r2, #244	@ 0xf4
 800162a:	21ec      	movs	r1, #236	@ 0xec
 800162c:	f007 fa5e 	bl	8008aec <HAL_I2C_Mem_Write>
 8001630:	4603      	mov	r3, r0
 8001632:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	70fb      	strb	r3, [r7, #3]
    data_ctrl = (BME->device_config.bme280_standby_time << 5) | (BME->device_config.bme280_filter << 2);
 8001638:	4b03      	ldr	r3, [pc, #12]	@ (8001648 <bme280_config+0x26c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	79db      	ldrb	r3, [r3, #7]
 800163e:	015b      	lsls	r3, r3, #5
 8001640:	b25a      	sxtb	r2, r3
 8001642:	4b01      	ldr	r3, [pc, #4]	@ (8001648 <bme280_config+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	e003      	b.n	8001650 <bme280_config+0x274>
 8001648:	20000248 	.word	0x20000248
 800164c:	20000244 	.word	0x20000244
 8001650:	791b      	ldrb	r3, [r3, #4]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	b25b      	sxtb	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b25b      	sxtb	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800165e:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <bme280_config+0x2fc>)
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	2332      	movs	r3, #50	@ 0x32
 8001664:	9302      	str	r3, [sp, #8]
 8001666:	2301      	movs	r3, #1
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	1cfb      	adds	r3, r7, #3
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2301      	movs	r3, #1
 8001670:	22f5      	movs	r2, #245	@ 0xf5
 8001672:	21ec      	movs	r1, #236	@ 0xec
 8001674:	f007 fa3a 	bl	8008aec <HAL_I2C_Mem_Write>
 8001678:	4603      	mov	r3, r0
 800167a:	77fb      	strb	r3, [r7, #31]

    // Take base altitude readings
    float base = 0.0;
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_Delay(100);
 8001682:	2064      	movs	r0, #100	@ 0x64
 8001684:	f006 f89a 	bl	80077bc <HAL_Delay>

    for(int i = 0; i < 50; i++) {
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
 800168c:	e011      	b.n	80016b2 <bme280_config+0x2d6>
        bme280_update();
 800168e:	f000 f861 	bl	8001754 <bme280_update>
        base += BME->altitude;
 8001692:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <bme280_config+0x300>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	edd3 7a08 	vldr	s15, [r3, #32]
 800169a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        HAL_Delay(30);
 80016a6:	201e      	movs	r0, #30
 80016a8:	f006 f888 	bl	80077bc <HAL_Delay>
    for(int i = 0; i < 50; i++) {
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	3301      	adds	r3, #1
 80016b0:	623b      	str	r3, [r7, #32]
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	2b31      	cmp	r3, #49	@ 0x31
 80016b6:	ddea      	ble.n	800168e <bme280_config+0x2b2>
    }
    BME->base_altitude = (base / 50.0);
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <bme280_config+0x300>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80016c0:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80016e0 <bme280_config+0x304>
 80016c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bme280_update();
 80016cc:	f000 f842 	bl	8001754 <bme280_update>

    UNUSED(retVal);
}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	@ 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000244 	.word	0x20000244
 80016dc:	20000248 	.word	0x20000248
 80016e0:	42480000 	.word	0x42480000

080016e4 <bme280_init>:

void bme280_init(BME_280_t* BME_sensor, I2C_HandleTypeDef* I2C_bme)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af04      	add	r7, sp, #16
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
    BME = BME_sensor;
 80016ee:	4a14      	ldr	r2, [pc, #80]	@ (8001740 <bme280_init+0x5c>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6013      	str	r3, [r2, #0]
    I2C_ = I2C_bme;
 80016f4:	4a13      	ldr	r2, [pc, #76]	@ (8001744 <bme280_init+0x60>)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	6013      	str	r3, [r2, #0]
    BME->parameters = &bme_params;
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <bme280_init+0x5c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a12      	ldr	r2, [pc, #72]	@ (8001748 <bme280_init+0x64>)
 8001700:	601a      	str	r2, [r3, #0]
    bme_started_flag = 0;
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <bme280_init+0x68>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]

    // Check BME280 ID
    uint8_t buf[1];
    HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8001708:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <bme280_init+0x60>)
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	2332      	movs	r3, #50	@ 0x32
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	2301      	movs	r3, #1
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2301      	movs	r3, #1
 800171c:	22d0      	movs	r2, #208	@ 0xd0
 800171e:	21ec      	movs	r1, #236	@ 0xec
 8001720:	f007 fade 	bl	8008ce0 <HAL_I2C_Mem_Read>
    if(*buf == 0x60)
 8001724:	7b3b      	ldrb	r3, [r7, #12]
 8001726:	2b60      	cmp	r3, #96	@ 0x60
 8001728:	d103      	bne.n	8001732 <bme280_init+0x4e>
        is_BME_ok = 1;
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <bme280_init+0x6c>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]
    else
        is_BME_ok = 0;
}
 8001730:	e002      	b.n	8001738 <bme280_init+0x54>
        is_BME_ok = 0;
 8001732:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <bme280_init+0x6c>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000248 	.word	0x20000248
 8001744:	20000244 	.word	0x20000244
 8001748:	20000690 	.word	0x20000690
 800174c:	2000024c 	.word	0x2000024c
 8001750:	200006b4 	.word	0x200006b4

08001754 <bme280_update>:

void bme280_update() {
 8001754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001758:	b0d2      	sub	sp, #328	@ 0x148
 800175a:	af00      	add	r7, sp, #0
    int32_t var1_t, var2_t, T, adc_T;
    bme280_getVals();
 800175c:	f7ff fd6a 	bl	8001234 <bme280_getVals>

    if(BME->isUpdated == 1){
 8001760:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <bme280_update+0x88>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001768:	2b01      	cmp	r3, #1
 800176a:	f040 840d 	bne.w	8001f88 <bme280_update+0x834>

    	if (!bme_started_flag) {
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <bme280_update+0x8c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d112      	bne.n	800179c <bme280_update+0x48>
    	    bme_started_flag = 1;
 8001776:	4a1a      	ldr	r2, [pc, #104]	@ (80017e0 <bme280_update+0x8c>)
 8001778:	2301      	movs	r3, #1
 800177a:	7013      	strb	r3, [r2, #0]
    	    BME->lastTime = HAL_GetTick();
 800177c:	f006 f812 	bl	80077a4 <HAL_GetTick>
 8001780:	ee07 0a90 	vmov	s15, r0
 8001784:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <bme280_update+0x88>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800178c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	    BME->deltaTime1 = 0.0f;
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <bme280_update+0x88>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	e041      	b.n	8001820 <bme280_update+0xcc>
    	} else {
    	    uint32_t now = HAL_GetTick();
 800179c:	f006 f802 	bl	80077a4 <HAL_GetTick>
 80017a0:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    	    BME->deltaTime1 = (now > BME->lastTime) ? (now - BME->lastTime) : 0.0f;
 80017a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017b0:	4b0a      	ldr	r3, [pc, #40]	@ (80017dc <bme280_update+0x88>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80017b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	dd12      	ble.n	80017e8 <bme280_update+0x94>
 80017c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80017c6:	ee07 3a90 	vmov	s15, r3
 80017ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ce:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <bme280_update+0x88>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	e007      	b.n	80017ec <bme280_update+0x98>
 80017dc:	20000248 	.word	0x20000248
 80017e0:	2000024c 	.word	0x2000024c
 80017e4:	00000000 	.word	0x00000000
 80017e8:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 80017e4 <bme280_update+0x90>
 80017ec:	4bda      	ldr	r3, [pc, #872]	@ (8001b58 <bme280_update+0x404>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->deltaTime1 = BME->deltaTime1 / 1000.0f;
 80017f4:	4bd8      	ldr	r3, [pc, #864]	@ (8001b58 <bme280_update+0x404>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80017fc:	4bd6      	ldr	r3, [pc, #856]	@ (8001b58 <bme280_update+0x404>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8001b5c <bme280_update+0x408>
 8001804:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001808:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->lastTime = now;
 800180c:	4bd2      	ldr	r3, [pc, #840]	@ (8001b58 <bme280_update+0x404>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001814:	ee07 2a90 	vmov	s15, r2
 8001818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800181c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	}

        //For temperature
        adc_T = BME->adcVals.ut;
 8001820:	4bcd      	ldr	r3, [pc, #820]	@ (8001b58 <bme280_update+0x404>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 800182a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800182e:	10da      	asrs	r2, r3, #3
 8001830:	4bc9      	ldr	r3, [pc, #804]	@ (8001b58 <bme280_update+0x404>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	1ad2      	subs	r2, r2, r3
 800183c:	4bc6      	ldr	r3, [pc, #792]	@ (8001b58 <bme280_update+0x404>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	12db      	asrs	r3, r3, #11
 800184c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001850:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001854:	111a      	asrs	r2, r3, #4
 8001856:	4bc0      	ldr	r3, [pc, #768]	@ (8001b58 <bme280_update+0x404>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	1ad1      	subs	r1, r2, r3
 8001860:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001864:	111a      	asrs	r2, r3, #4
 8001866:	4bbc      	ldr	r3, [pc, #752]	@ (8001b58 <bme280_update+0x404>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	131a      	asrs	r2, r3, #12
 8001876:	4bb8      	ldr	r3, [pc, #736]	@ (8001b58 <bme280_update+0x404>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	139b      	asrs	r3, r3, #14
 8001886:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        int32_t t_fine = var1_t + var2_t;
 800188a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800188e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001892:	4413      	add	r3, r2
 8001894:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        T = (t_fine * 5 + 128) >> 8;
 8001898:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	3380      	adds	r3, #128	@ 0x80
 80018a4:	121b      	asrs	r3, r3, #8
 80018a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        BME->temperature = (float)T / 100.0;
 80018aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b6:	4ba8      	ldr	r3, [pc, #672]	@ (8001b58 <bme280_update+0x404>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001b60 <bme280_update+0x40c>
 80018be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c2:	edc3 7a05 	vstr	s15, [r3, #20]

        //For pressure
        int64_t var1_p, var2_p, P, adc_P;
        adc_P = (int64_t)BME->adcVals.up;
 80018c6:	4ba4      	ldr	r3, [pc, #656]	@ (8001b58 <bme280_update+0x404>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	17da      	asrs	r2, r3, #31
 80018ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80018d0:	657a      	str	r2, [r7, #84]	@ 0x54
 80018d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80018d6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
        var1_p = ((int64_t)t_fine) - 128000;
 80018da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018de:	17da      	asrs	r2, r3, #31
 80018e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80018e4:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80018e8:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80018ec:	460b      	mov	r3, r1
 80018ee:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 80018f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018f4:	4613      	mov	r3, r2
 80018f6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80018fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001900:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 8001904:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001908:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800190c:	fb03 f102 	mul.w	r1, r3, r2
 8001910:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001914:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001918:	fb02 f303 	mul.w	r3, r2, r3
 800191c:	18ca      	adds	r2, r1, r3
 800191e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001922:	fba3 4503 	umull	r4, r5, r3, r3
 8001926:	1953      	adds	r3, r2, r5
 8001928:	461d      	mov	r5, r3
 800192a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b58 <bme280_update+0x404>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001934:	b21b      	sxth	r3, r3
 8001936:	17da      	asrs	r2, r3, #31
 8001938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800193c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001940:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001944:	4603      	mov	r3, r0
 8001946:	fb03 f205 	mul.w	r2, r3, r5
 800194a:	460b      	mov	r3, r1
 800194c:	fb04 f303 	mul.w	r3, r4, r3
 8001950:	4413      	add	r3, r2
 8001952:	4602      	mov	r2, r0
 8001954:	fba4 1202 	umull	r1, r2, r4, r2
 8001958:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800195c:	460a      	mov	r2, r1
 800195e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001962:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001966:	4413      	add	r3, r2
 8001968:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800196c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001970:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8001974:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001978:	4b77      	ldr	r3, [pc, #476]	@ (8001b58 <bme280_update+0x404>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001982:	b21b      	sxth	r3, r3
 8001984:	17da      	asrs	r2, r3, #31
 8001986:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800198a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800198e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001992:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001996:	462a      	mov	r2, r5
 8001998:	fb02 f203 	mul.w	r2, r2, r3
 800199c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80019a0:	4621      	mov	r1, r4
 80019a2:	fb01 f303 	mul.w	r3, r1, r3
 80019a6:	441a      	add	r2, r3
 80019a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019ac:	4621      	mov	r1, r4
 80019ae:	fba3 ab01 	umull	sl, fp, r3, r1
 80019b2:	eb02 030b 	add.w	r3, r2, fp
 80019b6:	469b      	mov	fp, r3
 80019b8:	f04f 0000 	mov.w	r0, #0
 80019bc:	f04f 0100 	mov.w	r1, #0
 80019c0:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80019c4:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 80019c8:	ea4f 404a 	mov.w	r0, sl, lsl #17
 80019cc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80019d0:	1814      	adds	r4, r2, r0
 80019d2:	643c      	str	r4, [r7, #64]	@ 0x40
 80019d4:	414b      	adcs	r3, r1
 80019d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80019d8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80019dc:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 80019e0:	4b5d      	ldr	r3, [pc, #372]	@ (8001b58 <bme280_update+0x404>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	17da      	asrs	r2, r3, #31
 80019ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80019f2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80019f6:	f04f 0000 	mov.w	r0, #0
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a02:	00d9      	lsls	r1, r3, #3
 8001a04:	2000      	movs	r0, #0
 8001a06:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a0a:	1814      	adds	r4, r2, r0
 8001a0c:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001a0e:	414b      	adcs	r3, r1
 8001a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a12:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001a16:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001a1a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a22:	fb03 f102 	mul.w	r1, r3, r2
 8001a26:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	18ca      	adds	r2, r1, r3
 8001a34:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a38:	fba3 8903 	umull	r8, r9, r3, r3
 8001a3c:	eb02 0309 	add.w	r3, r2, r9
 8001a40:	4699      	mov	r9, r3
 8001a42:	4b45      	ldr	r3, [pc, #276]	@ (8001b58 <bme280_update+0x404>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	17da      	asrs	r2, r3, #31
 8001a50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001a58:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	fb03 f209 	mul.w	r2, r3, r9
 8001a62:	460b      	mov	r3, r1
 8001a64:	fb08 f303 	mul.w	r3, r8, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	fba8 1202 	umull	r1, r2, r8, r2
 8001a70:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001a74:	460a      	mov	r2, r1
 8001a76:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001a7a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001a7e:	4413      	add	r3, r2
 8001a80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001a84:	f04f 0000 	mov.w	r0, #0
 8001a88:	f04f 0100 	mov.w	r1, #0
 8001a8c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001a90:	4623      	mov	r3, r4
 8001a92:	0a18      	lsrs	r0, r3, #8
 8001a94:	462b      	mov	r3, r5
 8001a96:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a9a:	462b      	mov	r3, r5
 8001a9c:	1219      	asrs	r1, r3, #8
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b58 <bme280_update+0x404>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	17da      	asrs	r2, r3, #31
 8001aac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001ab0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001ab4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ab8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001abc:	464a      	mov	r2, r9
 8001abe:	fb02 f203 	mul.w	r2, r2, r3
 8001ac2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001ac6:	4644      	mov	r4, r8
 8001ac8:	fb04 f303 	mul.w	r3, r4, r3
 8001acc:	441a      	add	r2, r3
 8001ace:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ad2:	4644      	mov	r4, r8
 8001ad4:	fba3 4304 	umull	r4, r3, r3, r4
 8001ad8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001adc:	4623      	mov	r3, r4
 8001ade:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ae6:	18d3      	adds	r3, r2, r3
 8001ae8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001af8:	464c      	mov	r4, r9
 8001afa:	0323      	lsls	r3, r4, #12
 8001afc:	4644      	mov	r4, r8
 8001afe:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001b02:	4644      	mov	r4, r8
 8001b04:	0322      	lsls	r2, r4, #12
 8001b06:	1884      	adds	r4, r0, r2
 8001b08:	633c      	str	r4, [r7, #48]	@ 0x30
 8001b0a:	eb41 0303 	adc.w	r3, r1, r3
 8001b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b10:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001b14:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
        var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8001b18:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001b1c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001b20:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001b24:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <bme280_update+0x404>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	88db      	ldrh	r3, [r3, #6]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2200      	movs	r2, #0
 8001b34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001b38:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001b3c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001b40:	462b      	mov	r3, r5
 8001b42:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001b46:	4642      	mov	r2, r8
 8001b48:	fb02 f203 	mul.w	r2, r2, r3
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	4621      	mov	r1, r4
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	e005      	b.n	8001b64 <bme280_update+0x410>
 8001b58:	20000248 	.word	0x20000248
 8001b5c:	447a0000 	.word	0x447a0000
 8001b60:	42c80000 	.word	0x42c80000
 8001b64:	4622      	mov	r2, r4
 8001b66:	4641      	mov	r1, r8
 8001b68:	fba2 1201 	umull	r1, r2, r2, r1
 8001b6c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001b70:	460a      	mov	r2, r1
 8001b72:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001b76:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	104a      	asrs	r2, r1, #1
 8001b90:	4629      	mov	r1, r5
 8001b92:	17cb      	asrs	r3, r1, #31
 8001b94:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        if(var1_p == 0)
 8001b98:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	d106      	bne.n	8001bae <bme280_update+0x45a>
        {
            P = 0;
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8001bac:	e14b      	b.n	8001e46 <bme280_update+0x6f2>
        }
        else
        {
            P = 1048576 - adc_P;
 8001bae:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 8001bb8:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001bba:	eb61 0303 	sbc.w	r3, r1, r3
 8001bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bc0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001bc4:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
            P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001bc8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001bcc:	f04f 0000 	mov.w	r0, #0
 8001bd0:	f04f 0100 	mov.w	r1, #0
 8001bd4:	07d9      	lsls	r1, r3, #31
 8001bd6:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001bda:	07d0      	lsls	r0, r2, #31
 8001bdc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001be0:	1a84      	subs	r4, r0, r2
 8001be2:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8001be6:	eb61 0303 	sbc.w	r3, r1, r3
 8001bea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001bee:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	462b      	mov	r3, r5
 8001bf6:	1891      	adds	r1, r2, r2
 8001bf8:	6239      	str	r1, [r7, #32]
 8001bfa:	415b      	adcs	r3, r3
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c02:	4621      	mov	r1, r4
 8001c04:	1851      	adds	r1, r2, r1
 8001c06:	61b9      	str	r1, [r7, #24]
 8001c08:	4629      	mov	r1, r5
 8001c0a:	414b      	adcs	r3, r1
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c1a:	4649      	mov	r1, r9
 8001c1c:	018b      	lsls	r3, r1, #6
 8001c1e:	4641      	mov	r1, r8
 8001c20:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c24:	4641      	mov	r1, r8
 8001c26:	018a      	lsls	r2, r1, #6
 8001c28:	4641      	mov	r1, r8
 8001c2a:	1889      	adds	r1, r1, r2
 8001c2c:	6139      	str	r1, [r7, #16]
 8001c2e:	4649      	mov	r1, r9
 8001c30:	eb43 0101 	adc.w	r1, r3, r1
 8001c34:	6179      	str	r1, [r7, #20]
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c42:	4649      	mov	r1, r9
 8001c44:	008b      	lsls	r3, r1, #2
 8001c46:	4641      	mov	r1, r8
 8001c48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c4c:	4641      	mov	r1, r8
 8001c4e:	008a      	lsls	r2, r1, #2
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	4603      	mov	r3, r0
 8001c56:	4622      	mov	r2, r4
 8001c58:	189b      	adds	r3, r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	462a      	mov	r2, r5
 8001c60:	eb42 0303 	adc.w	r3, r2, r3
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001c72:	4649      	mov	r1, r9
 8001c74:	008b      	lsls	r3, r1, #2
 8001c76:	4641      	mov	r1, r8
 8001c78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c7c:	4641      	mov	r1, r8
 8001c7e:	008a      	lsls	r2, r1, #2
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	4603      	mov	r3, r0
 8001c86:	4622      	mov	r2, r4
 8001c88:	189b      	adds	r3, r3, r2
 8001c8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001c8e:	462b      	mov	r3, r5
 8001c90:	460a      	mov	r2, r1
 8001c92:	eb42 0303 	adc.w	r3, r2, r3
 8001c96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c9a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001ca2:	f7ff f8ff 	bl	8000ea4 <__aeabi_ldivmod>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
            var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001cae:	4bb9      	ldr	r3, [pc, #740]	@ (8001f94 <bme280_update+0x840>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	17da      	asrs	r2, r3, #31
 8001cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001cbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001cc0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001cc4:	f04f 0000 	mov.w	r0, #0
 8001cc8:	f04f 0100 	mov.w	r1, #0
 8001ccc:	0b50      	lsrs	r0, r2, #13
 8001cce:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001cd2:	1359      	asrs	r1, r3, #13
 8001cd4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001cd8:	462b      	mov	r3, r5
 8001cda:	fb00 f203 	mul.w	r2, r0, r3
 8001cde:	4623      	mov	r3, r4
 8001ce0:	fb03 f301 	mul.w	r3, r3, r1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	4622      	mov	r2, r4
 8001ce8:	fba2 1200 	umull	r1, r2, r2, r0
 8001cec:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001cf6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001d00:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001d04:	f04f 0000 	mov.w	r0, #0
 8001d08:	f04f 0100 	mov.w	r1, #0
 8001d0c:	0b50      	lsrs	r0, r2, #13
 8001d0e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d12:	1359      	asrs	r1, r3, #13
 8001d14:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001d18:	462b      	mov	r3, r5
 8001d1a:	fb00 f203 	mul.w	r2, r0, r3
 8001d1e:	4623      	mov	r3, r4
 8001d20:	fb03 f301 	mul.w	r3, r3, r1
 8001d24:	4413      	add	r3, r2
 8001d26:	4622      	mov	r2, r4
 8001d28:	fba2 1200 	umull	r1, r2, r2, r0
 8001d2c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001d30:	460a      	mov	r2, r1
 8001d32:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001d36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	0e4a      	lsrs	r2, r1, #25
 8001d50:	4629      	mov	r1, r5
 8001d52:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001d56:	4629      	mov	r1, r5
 8001d58:	164b      	asrs	r3, r1, #25
 8001d5a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 8001d5e:	4b8d      	ldr	r3, [pc, #564]	@ (8001f94 <bme280_update+0x840>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	17da      	asrs	r2, r3, #31
 8001d6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001d6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d70:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001d74:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001d78:	462a      	mov	r2, r5
 8001d7a:	fb02 f203 	mul.w	r2, r2, r3
 8001d7e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001d82:	4621      	mov	r1, r4
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001d8e:	4621      	mov	r1, r4
 8001d90:	fba2 1201 	umull	r1, r2, r2, r1
 8001d94:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001d98:	460a      	mov	r2, r1
 8001d9a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001d9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001da2:	4413      	add	r3, r2
 8001da4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001db4:	4621      	mov	r1, r4
 8001db6:	0cca      	lsrs	r2, r1, #19
 8001db8:	4629      	mov	r1, r5
 8001dba:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	14cb      	asrs	r3, r1, #19
 8001dc2:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
            P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 8001dc6:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001dca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001dce:	1884      	adds	r4, r0, r2
 8001dd0:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001dd2:	eb41 0303 	adc.w	r3, r1, r3
 8001dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001dd8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001ddc:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001de0:	4621      	mov	r1, r4
 8001de2:	1889      	adds	r1, r1, r2
 8001de4:	6639      	str	r1, [r7, #96]	@ 0x60
 8001de6:	4629      	mov	r1, r5
 8001de8:	eb43 0101 	adc.w	r1, r3, r1
 8001dec:	6679      	str	r1, [r7, #100]	@ 0x64
 8001dee:	f04f 0000 	mov.w	r0, #0
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001dfa:	4623      	mov	r3, r4
 8001dfc:	0a18      	lsrs	r0, r3, #8
 8001dfe:	462b      	mov	r3, r5
 8001e00:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001e04:	462b      	mov	r3, r5
 8001e06:	1219      	asrs	r1, r3, #8
 8001e08:	4b62      	ldr	r3, [pc, #392]	@ (8001f94 <bme280_update+0x840>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	17da      	asrs	r2, r3, #31
 8001e16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e18:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001e26:	464c      	mov	r4, r9
 8001e28:	0123      	lsls	r3, r4, #4
 8001e2a:	4644      	mov	r4, r8
 8001e2c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001e30:	4644      	mov	r4, r8
 8001e32:	0122      	lsls	r2, r4, #4
 8001e34:	1884      	adds	r4, r0, r2
 8001e36:	603c      	str	r4, [r7, #0]
 8001e38:	eb41 0303 	adc.w	r3, r1, r3
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e42:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
        }

        BME->pressure = ((float)P / 256.0 / 100.0);
 8001e46:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001e4a:	f7fe ffed 	bl	8000e28 <__aeabi_l2f>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb99 	bl	8000588 <__aeabi_f2d>
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001f98 <bme280_update+0x844>)
 8001e5c:	f7fe fd16 	bl	800088c <__aeabi_ddiv>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f9c <bme280_update+0x848>)
 8001e6e:	f7fe fd0d 	bl	800088c <__aeabi_ddiv>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4947      	ldr	r1, [pc, #284]	@ (8001f94 <bme280_update+0x840>)
 8001e78:	680c      	ldr	r4, [r1, #0]
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe feb3 	bl	8000be8 <__aeabi_d2f>
 8001e82:	4603      	mov	r3, r0
 8001e84:	61a3      	str	r3, [r4, #24]

        //for humidity
        uint32_t var_h, adc_H;
        adc_H = BME->adcVals.uh;
 8001e86:	4b43      	ldr	r3, [pc, #268]	@ (8001f94 <bme280_update+0x840>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

        var_h = (t_fine - ((int32_t)76800));
 8001e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001e94:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001e98:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8001e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ea0:	039a      	lsls	r2, r3, #14
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	@ (8001f94 <bme280_update+0x840>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001eac:	051b      	lsls	r3, r3, #20
 8001eae:	1ad2      	subs	r2, r2, r3
 8001eb0:	4b38      	ldr	r3, [pc, #224]	@ (8001f94 <bme280_update+0x840>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ec0:	fb01 f303 	mul.w	r3, r1, r3
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001eca:	0bdb      	lsrs	r3, r3, #15
 8001ecc:	4a31      	ldr	r2, [pc, #196]	@ (8001f94 <bme280_update+0x840>)
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001edc:	fb01 f202 	mul.w	r2, r1, r2
 8001ee0:	0a92      	lsrs	r2, r2, #10
 8001ee2:	492c      	ldr	r1, [pc, #176]	@ (8001f94 <bme280_update+0x840>)
 8001ee4:	6809      	ldr	r1, [r1, #0]
 8001ee6:	6809      	ldr	r1, [r1, #0]
 8001ee8:	7f09      	ldrb	r1, [r1, #28]
 8001eea:	4608      	mov	r0, r1
 8001eec:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001ef0:	fb00 f101 	mul.w	r1, r0, r1
 8001ef4:	0ac9      	lsrs	r1, r1, #11
 8001ef6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001efa:	fb01 f202 	mul.w	r2, r1, r2
 8001efe:	0a92      	lsrs	r2, r2, #10
 8001f00:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001f04:	4923      	ldr	r1, [pc, #140]	@ (8001f94 <bme280_update+0x840>)
 8001f06:	6809      	ldr	r1, [r1, #0]
 8001f08:	6809      	ldr	r1, [r1, #0]
 8001f0a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001f0e:	fb01 f202 	mul.w	r2, r1, r2
 8001f12:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001f16:	0b92      	lsrs	r2, r2, #14
 8001f18:	fb02 f303 	mul.w	r3, r2, r3
 8001f1c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8001f20:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f24:	0bdb      	lsrs	r3, r3, #15
 8001f26:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f2a:	0bd2      	lsrs	r2, r2, #15
 8001f2c:	fb02 f303 	mul.w	r3, r2, r3
 8001f30:	09db      	lsrs	r3, r3, #7
 8001f32:	4a18      	ldr	r2, [pc, #96]	@ (8001f94 <bme280_update+0x840>)
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	7e12      	ldrb	r2, [r2, #24]
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h < 0 ? 0 : var_h);
        var_h = (var_h > 419430400 ? 419430400 : var_h);
 8001f4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f4e:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001f52:	bf28      	it	cs
 8001f54:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 8001f58:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 8001f5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f60:	0b1b      	lsrs	r3, r3, #12
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <bme280_update+0x840>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001fa0 <bme280_update+0x84c>
 8001f72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f76:	edc3 7a07 	vstr	s15, [r3, #28]

        // Calculate raw altitude (no filtering)
        bme280_calculate_altitude();
 8001f7a:	f7ff f9dd 	bl	8001338 <bme280_calculate_altitude>
        BME->isUpdated = 0;
 8001f7e:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <bme280_update+0x840>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
}
 8001f88:	bf00      	nop
 8001f8a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f94:	20000248 	.word	0x20000248
 8001f98:	40700000 	.word	0x40700000
 8001f9c:	40590000 	.word	0x40590000
 8001fa0:	44800000 	.word	0x44800000

08001fa4 <bmi088_config>:
	HAL_I2C_Init(bmi_I2C);

}
*/
void bmi088_config()
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af04      	add	r7, sp, #16
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001faa:	2028      	movs	r0, #40	@ 0x28
 8001fac:	f005 fd53 	bl	8007a56 <HAL_NVIC_DisableIRQ>
	HAL_StatusTypeDef retVal = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 8001fb8:	4bb7      	ldr	r3, [pc, #732]	@ (8002298 <bmi088_config+0x2f4>)
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	2364      	movs	r3, #100	@ 0x64
 8001fbe:	9302      	str	r3, [sp, #8]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	227c      	movs	r2, #124	@ 0x7c
 8001fcc:	2130      	movs	r1, #48	@ 0x30
 8001fce:	f006 fd8d 	bl	8008aec <HAL_I2C_Mem_Write>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	71fb      	strb	r3, [r7, #7]

	buf[0] = ACC_DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 8001fe0:	4bad      	ldr	r3, [pc, #692]	@ (8002298 <bmi088_config+0x2f4>)
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	2364      	movs	r3, #100	@ 0x64
 8001fe6:	9302      	str	r3, [sp, #8]
 8001fe8:	2301      	movs	r3, #1
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	227d      	movs	r2, #125	@ 0x7d
 8001ff4:	2130      	movs	r1, #48	@ 0x30
 8001ff6:	f006 fd79 	bl	8008aec <HAL_I2C_Mem_Write>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	4313      	orrs	r3, r2
 8002002:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(20);
 8002004:	2014      	movs	r0, #20
 8002006:	f005 fbd9 	bl	80077bc <HAL_Delay>

	buf[0] = ACC_RESET;
 800200a:	23b6      	movs	r3, #182	@ 0xb6
 800200c:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 800200e:	4ba2      	ldr	r3, [pc, #648]	@ (8002298 <bmi088_config+0x2f4>)
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	2364      	movs	r3, #100	@ 0x64
 8002014:	9302      	str	r3, [sp, #8]
 8002016:	2301      	movs	r3, #1
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	2301      	movs	r3, #1
 8002020:	227e      	movs	r2, #126	@ 0x7e
 8002022:	2130      	movs	r1, #48	@ 0x30
 8002024:	f006 fd62 	bl	8008aec <HAL_I2C_Mem_Write>
 8002028:	4603      	mov	r3, r0
 800202a:	461a      	mov	r2, r3
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	4313      	orrs	r3, r2
 8002030:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <bmi088_config+0x9a>
 8002038:	4b98      	ldr	r3, [pc, #608]	@ (800229c <bmi088_config+0x2f8>)
 800203a:	2284      	movs	r2, #132	@ 0x84
 800203c:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 800203e:	200a      	movs	r0, #10
 8002040:	f005 fbbc 	bl	80077bc <HAL_Delay>

	buf[0] = FIFO_RESET;
 8002044:	23b0      	movs	r3, #176	@ 0xb0
 8002046:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 8002048:	4b93      	ldr	r3, [pc, #588]	@ (8002298 <bmi088_config+0x2f4>)
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	2364      	movs	r3, #100	@ 0x64
 800204e:	9302      	str	r3, [sp, #8]
 8002050:	2301      	movs	r3, #1
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2301      	movs	r3, #1
 800205a:	227e      	movs	r2, #126	@ 0x7e
 800205c:	2130      	movs	r1, #48	@ 0x30
 800205e:	f006 fd45 	bl	8008aec <HAL_I2C_Mem_Write>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	4313      	orrs	r3, r2
 800206a:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <bmi088_config+0xd4>
 8002072:	4b8a      	ldr	r3, [pc, #552]	@ (800229c <bmi088_config+0x2f8>)
 8002074:	2289      	movs	r2, #137	@ 0x89
 8002076:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002078:	200a      	movs	r0, #10
 800207a:	f005 fb9f 	bl	80077bc <HAL_Delay>

	buf[0] = GYRO_RESET;
 800207e:	23b6      	movs	r3, #182	@ 0xb6
 8002080:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 8002082:	4b85      	ldr	r3, [pc, #532]	@ (8002298 <bmi088_config+0x2f4>)
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	2364      	movs	r3, #100	@ 0x64
 8002088:	9302      	str	r3, [sp, #8]
 800208a:	2301      	movs	r3, #1
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2301      	movs	r3, #1
 8002094:	2214      	movs	r2, #20
 8002096:	21d0      	movs	r1, #208	@ 0xd0
 8002098:	f006 fd28 	bl	8008aec <HAL_I2C_Mem_Write>
 800209c:	4603      	mov	r3, r0
 800209e:	461a      	mov	r2, r3
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <bmi088_config+0x10e>
 80020ac:	4b7b      	ldr	r3, [pc, #492]	@ (800229c <bmi088_config+0x2f8>)
 80020ae:	228e      	movs	r2, #142	@ 0x8e
 80020b0:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80020b2:	200a      	movs	r0, #10
 80020b4:	f005 fb82 	bl	80077bc <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->deviceConfig.gyro_range;
 80020b8:	4b79      	ldr	r3, [pc, #484]	@ (80022a0 <bmi088_config+0x2fc>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	7f5b      	ldrb	r3, [r3, #29]
 80020be:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 80020c0:	4b75      	ldr	r3, [pc, #468]	@ (8002298 <bmi088_config+0x2f4>)
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	2364      	movs	r3, #100	@ 0x64
 80020c6:	9302      	str	r3, [sp, #8]
 80020c8:	2301      	movs	r3, #1
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2301      	movs	r3, #1
 80020d2:	220f      	movs	r2, #15
 80020d4:	21d0      	movs	r1, #208	@ 0xd0
 80020d6:	f006 fd09 	bl	8008aec <HAL_I2C_Mem_Write>
 80020da:	4603      	mov	r3, r0
 80020dc:	461a      	mov	r2, r3
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <bmi088_config+0x14c>
 80020ea:	4b6c      	ldr	r3, [pc, #432]	@ (800229c <bmi088_config+0x2f8>)
 80020ec:	2294      	movs	r2, #148	@ 0x94
 80020ee:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_bandWidth;
 80020f0:	4b6b      	ldr	r3, [pc, #428]	@ (80022a0 <bmi088_config+0x2fc>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	7f1b      	ldrb	r3, [r3, #28]
 80020f6:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 80020f8:	4b67      	ldr	r3, [pc, #412]	@ (8002298 <bmi088_config+0x2f4>)
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	2314      	movs	r3, #20
 80020fe:	9302      	str	r3, [sp, #8]
 8002100:	2301      	movs	r3, #1
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	2301      	movs	r3, #1
 800210a:	2210      	movs	r2, #16
 800210c:	21d0      	movs	r1, #208	@ 0xd0
 800210e:	f006 fced 	bl	8008aec <HAL_I2C_Mem_Write>
 8002112:	4603      	mov	r3, r0
 8002114:	461a      	mov	r2, r3
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	4313      	orrs	r3, r2
 800211a:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <bmi088_config+0x184>
 8002122:	4b5e      	ldr	r3, [pc, #376]	@ (800229c <bmi088_config+0x2f8>)
 8002124:	2298      	movs	r2, #152	@ 0x98
 8002126:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_powerMode;
 8002128:	4b5d      	ldr	r3, [pc, #372]	@ (80022a0 <bmi088_config+0x2fc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	7edb      	ldrb	r3, [r3, #27]
 800212e:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 8002130:	4b59      	ldr	r3, [pc, #356]	@ (8002298 <bmi088_config+0x2f4>)
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	2314      	movs	r3, #20
 8002136:	9302      	str	r3, [sp, #8]
 8002138:	2301      	movs	r3, #1
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2301      	movs	r3, #1
 8002142:	2211      	movs	r2, #17
 8002144:	21d0      	movs	r1, #208	@ 0xd0
 8002146:	f006 fcd1 	bl	8008aec <HAL_I2C_Mem_Write>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	4313      	orrs	r3, r2
 8002152:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <bmi088_config+0x1bc>
 800215a:	4b50      	ldr	r3, [pc, #320]	@ (800229c <bmi088_config+0x2f8>)
 800215c:	229c      	movs	r2, #156	@ 0x9c
 800215e:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 8002160:	2014      	movs	r0, #20
 8002162:	f005 fb2b 	bl	80077bc <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 800216a:	4b4b      	ldr	r3, [pc, #300]	@ (8002298 <bmi088_config+0x2f4>)
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	2314      	movs	r3, #20
 8002170:	9302      	str	r3, [sp, #8]
 8002172:	2301      	movs	r3, #1
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2301      	movs	r3, #1
 800217c:	2215      	movs	r2, #21
 800217e:	21d0      	movs	r1, #208	@ 0xd0
 8002180:	f006 fcb4 	bl	8008aec <HAL_I2C_Mem_Write>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	4313      	orrs	r3, r2
 800218c:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <bmi088_config+0x1f6>
 8002194:	4b41      	ldr	r3, [pc, #260]	@ (800229c <bmi088_config+0x2f8>)
 8002196:	22a2      	movs	r2, #162	@ 0xa2
 8002198:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0);
 800219a:	2301      	movs	r3, #1
 800219c:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 800219e:	4b3e      	ldr	r3, [pc, #248]	@ (8002298 <bmi088_config+0x2f4>)
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	2314      	movs	r3, #20
 80021a4:	9302      	str	r3, [sp, #8]
 80021a6:	2301      	movs	r3, #1
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2301      	movs	r3, #1
 80021b0:	2216      	movs	r2, #22
 80021b2:	21d0      	movs	r1, #208	@ 0xd0
 80021b4:	f006 fc9a 	bl	8008aec <HAL_I2C_Mem_Write>
 80021b8:	4603      	mov	r3, r0
 80021ba:	461a      	mov	r2, r3
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	4313      	orrs	r3, r2
 80021c0:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <bmi088_config+0x22a>
 80021c8:	4b34      	ldr	r3, [pc, #208]	@ (800229c <bmi088_config+0x2f8>)
 80021ca:	22a6      	movs	r2, #166	@ 0xa6
 80021cc:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_3;
 80021ce:	2301      	movs	r3, #1
 80021d0:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 80021d2:	4b31      	ldr	r3, [pc, #196]	@ (8002298 <bmi088_config+0x2f4>)
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	2314      	movs	r3, #20
 80021d8:	9302      	str	r3, [sp, #8]
 80021da:	2301      	movs	r3, #1
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2301      	movs	r3, #1
 80021e4:	2218      	movs	r2, #24
 80021e6:	21d0      	movs	r1, #208	@ 0xd0
 80021e8:	f006 fc80 	bl	8008aec <HAL_I2C_Mem_Write>
 80021ec:	4603      	mov	r3, r0
 80021ee:	461a      	mov	r2, r3
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <bmi088_config+0x25e>
 80021fc:	4b27      	ldr	r3, [pc, #156]	@ (800229c <bmi088_config+0x2f8>)
 80021fe:	22aa      	movs	r2, #170	@ 0xaa
 8002200:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 8002202:	2304      	movs	r3, #4
 8002204:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 8002206:	4b24      	ldr	r3, [pc, #144]	@ (8002298 <bmi088_config+0x2f4>)
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	2314      	movs	r3, #20
 800220c:	9302      	str	r3, [sp, #8]
 800220e:	2301      	movs	r3, #1
 8002210:	9301      	str	r3, [sp, #4]
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	2301      	movs	r3, #1
 8002218:	227d      	movs	r2, #125	@ 0x7d
 800221a:	2130      	movs	r1, #48	@ 0x30
 800221c:	f006 fc66 	bl	8008aec <HAL_I2C_Mem_Write>
 8002220:	4603      	mov	r3, r0
 8002222:	461a      	mov	r2, r3
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	4313      	orrs	r3, r2
 8002228:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <bmi088_config+0x292>
 8002230:	4b1a      	ldr	r3, [pc, #104]	@ (800229c <bmi088_config+0x2f8>)
 8002232:	22af      	movs	r2, #175	@ 0xaf
 8002234:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8002236:	2008      	movs	r0, #8
 8002238:	f005 fac0 	bl	80077bc <HAL_Delay>

	buf[0] = BMI->deviceConfig.acc_powerMode;
 800223c:	4b18      	ldr	r3, [pc, #96]	@ (80022a0 <bmi088_config+0x2fc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	7ddb      	ldrb	r3, [r3, #23]
 8002242:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 8002244:	4b14      	ldr	r3, [pc, #80]	@ (8002298 <bmi088_config+0x2f4>)
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	2314      	movs	r3, #20
 800224a:	9302      	str	r3, [sp, #8]
 800224c:	2301      	movs	r3, #1
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2301      	movs	r3, #1
 8002256:	227c      	movs	r2, #124	@ 0x7c
 8002258:	2130      	movs	r1, #48	@ 0x30
 800225a:	f006 fc47 	bl	8008aec <HAL_I2C_Mem_Write>
 800225e:	4603      	mov	r3, r0
 8002260:	461a      	mov	r2, r3
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	4313      	orrs	r3, r2
 8002266:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <bmi088_config+0x2d0>
 800226e:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <bmi088_config+0x2f8>)
 8002270:	22b4      	movs	r2, #180	@ 0xb4
 8002272:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8002274:	2008      	movs	r0, #8
 8002276:	f005 faa1 	bl	80077bc <HAL_Delay>

	buf[0] = (BMI->deviceConfig.acc_bandwith << 4) | BMI->deviceConfig.acc_outputDateRate;
 800227a:	4b09      	ldr	r3, [pc, #36]	@ (80022a0 <bmi088_config+0x2fc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	7e5b      	ldrb	r3, [r3, #25]
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	b25a      	sxtb	r2, r3
 8002284:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <bmi088_config+0x2fc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	7e9b      	ldrb	r3, [r3, #26]
 800228a:	b25b      	sxtb	r3, r3
 800228c:	4313      	orrs	r3, r2
 800228e:	b25b      	sxtb	r3, r3
 8002290:	b2db      	uxtb	r3, r3
 8002292:	713b      	strb	r3, [r7, #4]
 8002294:	e006      	b.n	80022a4 <bmi088_config+0x300>
 8002296:	bf00      	nop
 8002298:	20000250 	.word	0x20000250
 800229c:	2000025c 	.word	0x2000025c
 80022a0:	20000254 	.word	0x20000254
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 80022a4:	4b31      	ldr	r3, [pc, #196]	@ (800236c <bmi088_config+0x3c8>)
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	2314      	movs	r3, #20
 80022aa:	9302      	str	r3, [sp, #8]
 80022ac:	2301      	movs	r3, #1
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	2301      	movs	r3, #1
 80022b6:	2240      	movs	r2, #64	@ 0x40
 80022b8:	2130      	movs	r1, #48	@ 0x30
 80022ba:	f006 fc17 	bl	8008aec <HAL_I2C_Mem_Write>
 80022be:	4603      	mov	r3, r0
 80022c0:	461a      	mov	r2, r3
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <bmi088_config+0x330>
 80022ce:	4b28      	ldr	r3, [pc, #160]	@ (8002370 <bmi088_config+0x3cc>)
 80022d0:	22b9      	movs	r2, #185	@ 0xb9
 80022d2:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.acc_range;
 80022d4:	4b27      	ldr	r3, [pc, #156]	@ (8002374 <bmi088_config+0x3d0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	7e1b      	ldrb	r3, [r3, #24]
 80022da:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 80022dc:	4b23      	ldr	r3, [pc, #140]	@ (800236c <bmi088_config+0x3c8>)
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	2314      	movs	r3, #20
 80022e2:	9302      	str	r3, [sp, #8]
 80022e4:	2301      	movs	r3, #1
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2301      	movs	r3, #1
 80022ee:	2241      	movs	r2, #65	@ 0x41
 80022f0:	2130      	movs	r1, #48	@ 0x30
 80022f2:	f006 fbfb 	bl	8008aec <HAL_I2C_Mem_Write>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <bmi088_config+0x368>
 8002306:	4b1a      	ldr	r3, [pc, #104]	@ (8002370 <bmi088_config+0x3cc>)
 8002308:	22bd      	movs	r2, #189	@ 0xbd
 800230a:	601a      	str	r2, [r3, #0]

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 800230c:	230a      	movs	r3, #10
 800230e:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 8002310:	4b16      	ldr	r3, [pc, #88]	@ (800236c <bmi088_config+0x3c8>)
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	2314      	movs	r3, #20
 8002316:	9302      	str	r3, [sp, #8]
 8002318:	2301      	movs	r3, #1
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2301      	movs	r3, #1
 8002322:	2253      	movs	r2, #83	@ 0x53
 8002324:	2130      	movs	r1, #48	@ 0x30
 8002326:	f006 fbe1 	bl	8008aec <HAL_I2C_Mem_Write>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	4313      	orrs	r3, r2
 8002332:	71fb      	strb	r3, [r7, #7]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 8002334:	2304      	movs	r3, #4
 8002336:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 8002338:	4b0c      	ldr	r3, [pc, #48]	@ (800236c <bmi088_config+0x3c8>)
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	2314      	movs	r3, #20
 800233e:	9302      	str	r3, [sp, #8]
 8002340:	2301      	movs	r3, #1
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	2301      	movs	r3, #1
 800234a:	2258      	movs	r2, #88	@ 0x58
 800234c:	2130      	movs	r1, #48	@ 0x30
 800234e:	f006 fbcd 	bl	8008aec <HAL_I2C_Mem_Write>
 8002352:	4603      	mov	r3, r0
 8002354:	461a      	mov	r2, r3
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	4313      	orrs	r3, r2
 800235a:	71fb      	strb	r3, [r7, #7]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800235c:	2028      	movs	r0, #40	@ 0x28
 800235e:	f005 fb6c 	bl	8007a3a <HAL_NVIC_EnableIRQ>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000250 	.word	0x20000250
 8002370:	2000025c 	.word	0x2000025c
 8002374:	20000254 	.word	0x20000254

08002378 <bmi088_init>:

void bmi088_init(bmi088_struct_t* BMI_, I2C_HandleTypeDef* I2C_)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af04      	add	r7, sp, #16
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
	//quaternionSet_zero();
	bmi_I2C = I2C_;
 8002382:	4a25      	ldr	r2, [pc, #148]	@ (8002418 <bmi088_init+0xa0>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6013      	str	r3, [r2, #0]
	BMI = BMI_;
 8002388:	4a24      	ldr	r2, [pc, #144]	@ (800241c <bmi088_init+0xa4>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
	BMI->rawDatas.isGyroUpdated = 0;
 800238e:	4b23      	ldr	r3, [pc, #140]	@ (800241c <bmi088_init+0xa4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2200      	movs	r2, #0
 8002394:	755a      	strb	r2, [r3, #21]
	BMI->rawDatas.isAccelUpdated = 0;
 8002396:	4b21      	ldr	r3, [pc, #132]	@ (800241c <bmi088_init+0xa4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2200      	movs	r2, #0
 800239c:	759a      	strb	r2, [r3, #22]
	isTimeUpdated = 0;
 800239e:	4b20      	ldr	r3, [pc, #128]	@ (8002420 <bmi088_init+0xa8>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
	isStarded = 0;
 80023a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002424 <bmi088_init+0xac>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	701a      	strb	r2, [r3, #0]
	uint8_t buf[1];
	BMI->bmi088_t_2 = &bmi_struct_2;
 80023aa:	4b1c      	ldr	r3, [pc, #112]	@ (800241c <bmi088_init+0xa4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002428 <bmi088_init+0xb0>)
 80023b0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(I2C_, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80023b2:	2332      	movs	r3, #50	@ 0x32
 80023b4:	9302      	str	r3, [sp, #8]
 80023b6:	2301      	movs	r3, #1
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2301      	movs	r3, #1
 80023c2:	2200      	movs	r2, #0
 80023c4:	21d0      	movs	r1, #208	@ 0xd0
 80023c6:	6838      	ldr	r0, [r7, #0]
 80023c8:	f006 fc8a 	bl	8008ce0 <HAL_I2C_Mem_Read>
	if(*buf == 0x0F){
 80023cc:	7b3b      	ldrb	r3, [r7, #12]
 80023ce:	2b0f      	cmp	r3, #15
 80023d0:	d103      	bne.n	80023da <bmi088_init+0x62>
		is_BMI_ok = 1;
 80023d2:	4b16      	ldr	r3, [pc, #88]	@ (800242c <bmi088_init+0xb4>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
		BMI->bmi088_t_2->q[0] = 1;
		BMI->bmi088_t_2->q[1] = 0;
		BMI->bmi088_t_2->q[2] = 0;
		BMI->bmi088_t_2->q[3] = 0;
	}
}
 80023d8:	e01a      	b.n	8002410 <bmi088_init+0x98>
		is_BMI_ok = 0;
 80023da:	4b14      	ldr	r3, [pc, #80]	@ (800242c <bmi088_init+0xb4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
		BMI->bmi088_t_2->q[0] = 1;
 80023e0:	4b0e      	ldr	r3, [pc, #56]	@ (800241c <bmi088_init+0xa4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80023ea:	601a      	str	r2, [r3, #0]
		BMI->bmi088_t_2->q[1] = 0;
 80023ec:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <bmi088_init+0xa4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	605a      	str	r2, [r3, #4]
		BMI->bmi088_t_2->q[2] = 0;
 80023f8:	4b08      	ldr	r3, [pc, #32]	@ (800241c <bmi088_init+0xa4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
		BMI->bmi088_t_2->q[3] = 0;
 8002404:	4b05      	ldr	r3, [pc, #20]	@ (800241c <bmi088_init+0xa4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	60da      	str	r2, [r3, #12]
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000250 	.word	0x20000250
 800241c:	20000254 	.word	0x20000254
 8002420:	20000258 	.word	0x20000258
 8002424:	20000259 	.word	0x20000259
 8002428:	2000065c 	.word	0x2000065c
 800242c:	200006b8 	.word	0x200006b8

08002430 <bmi088_update>:

void bmi088_update()
{
 8002430:	b5b0      	push	{r4, r5, r7, lr}
 8002432:	b08a      	sub	sp, #40	@ 0x28
 8002434:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret_val = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	75fb      	strb	r3, [r7, #23]

		if(BMI->rawDatas.isAccelUpdated)
 800243a:	4b22      	ldr	r3, [pc, #136]	@ (80024c4 <bmi088_update+0x94>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	7d9b      	ldrb	r3, [r3, #22]
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 822a 	beq.w	800289a <bmi088_update+0x46a>
		{
			ret_val = HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.accel, 9, 20);
 8002446:	4b20      	ldr	r3, [pc, #128]	@ (80024c8 <bmi088_update+0x98>)
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	4b1e      	ldr	r3, [pc, #120]	@ (80024c4 <bmi088_update+0x94>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3304      	adds	r3, #4
 8002450:	2214      	movs	r2, #20
 8002452:	9202      	str	r2, [sp, #8]
 8002454:	2209      	movs	r2, #9
 8002456:	9201      	str	r2, [sp, #4]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2301      	movs	r3, #1
 800245c:	2212      	movs	r2, #18
 800245e:	2130      	movs	r1, #48	@ 0x30
 8002460:	f006 fc3e 	bl	8008ce0 <HAL_I2C_Mem_Read>
 8002464:	4603      	mov	r3, r0
 8002466:	75fb      	strb	r3, [r7, #23]
			if(ret_val)
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f040 835b 	bne.w	8002b26 <bmi088_update+0x6f6>
				return;
			HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.temp, 2, 20);
 8002470:	4b15      	ldr	r3, [pc, #84]	@ (80024c8 <bmi088_update+0x98>)
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	4b13      	ldr	r3, [pc, #76]	@ (80024c4 <bmi088_update+0x94>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	330d      	adds	r3, #13
 800247a:	2214      	movs	r2, #20
 800247c:	9202      	str	r2, [sp, #8]
 800247e:	2202      	movs	r2, #2
 8002480:	9201      	str	r2, [sp, #4]
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2301      	movs	r3, #1
 8002486:	2222      	movs	r2, #34	@ 0x22
 8002488:	2130      	movs	r1, #48	@ 0x30
 800248a:	f006 fc29 	bl	8008ce0 <HAL_I2C_Mem_Read>

			uint16_t Temp_uint11 = (BMI->rawDatas.temp[0] << 3) | (BMI->rawDatas.temp[1] >> 5);
 800248e:	4b0d      	ldr	r3, [pc, #52]	@ (80024c4 <bmi088_update+0x94>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	7b5b      	ldrb	r3, [r3, #13]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	b21a      	sxth	r2, r3
 8002498:	4b0a      	ldr	r3, [pc, #40]	@ (80024c4 <bmi088_update+0x94>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	7b9b      	ldrb	r3, [r3, #14]
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	b21b      	sxth	r3, r3
 80024a4:	4313      	orrs	r3, r2
 80024a6:	b21b      	sxth	r3, r3
 80024a8:	82bb      	strh	r3, [r7, #20]
			int16_t Temp_int11 = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	827b      	strh	r3, [r7, #18]
			if (Temp_uint11 > 1023){
 80024ae:	8abb      	ldrh	r3, [r7, #20]
 80024b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024b4:	d30a      	bcc.n	80024cc <bmi088_update+0x9c>
				Temp_int11 = Temp_uint11 - 2048;
 80024b6:	8abb      	ldrh	r3, [r7, #20]
 80024b8:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80024bc:	b29b      	uxth	r3, r3
 80024be:	827b      	strh	r3, [r7, #18]
 80024c0:	e02a      	b.n	8002518 <bmi088_update+0xe8>
 80024c2:	bf00      	nop
 80024c4:	20000254 	.word	0x20000254
 80024c8:	20000250 	.word	0x20000250
			}
			else{
				Temp_int11 = Temp_uint11;
 80024cc:	8abb      	ldrh	r3, [r7, #20]
 80024ce:	827b      	strh	r3, [r7, #18]
				BMI->temp = (float)Temp_int11 * 0.125 + 23.0;
 80024d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80024d4:	ee07 3a90 	vmov	s15, r3
 80024d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024dc:	ee17 0a90 	vmov	r0, s15
 80024e0:	f7fe f852 	bl	8000588 <__aeabi_f2d>
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80024ec:	f7fe f8a4 	bl	8000638 <__aeabi_dmul>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	4bcc      	ldr	r3, [pc, #816]	@ (8002830 <bmi088_update+0x400>)
 80024fe:	f7fd fee5 	bl	80002cc <__adddf3>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	49cb      	ldr	r1, [pc, #812]	@ (8002834 <bmi088_update+0x404>)
 8002508:	680c      	ldr	r4, [r1, #0]
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	f7fe fb6b 	bl	8000be8 <__aeabi_d2f>
 8002512:	4603      	mov	r3, r0
 8002514:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
			}
			uint32_t sensorTime = (BMI->rawDatas.accel[8] << 16) | (BMI->rawDatas.accel[7] << 8) | BMI->rawDatas.accel[6];
 8002518:	4bc6      	ldr	r3, [pc, #792]	@ (8002834 <bmi088_update+0x404>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	7b1b      	ldrb	r3, [r3, #12]
 800251e:	041a      	lsls	r2, r3, #16
 8002520:	4bc4      	ldr	r3, [pc, #784]	@ (8002834 <bmi088_update+0x404>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	7adb      	ldrb	r3, [r3, #11]
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	4313      	orrs	r3, r2
 800252a:	4ac2      	ldr	r2, [pc, #776]	@ (8002834 <bmi088_update+0x404>)
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	7a92      	ldrb	r2, [r2, #10]
 8002530:	4313      	orrs	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]

			BMI->currentTime= (float)sensorTime * 39.0625 / 1000000.0;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800253e:	ee17 0a90 	vmov	r0, s15
 8002542:	f7fe f821 	bl	8000588 <__aeabi_f2d>
 8002546:	a3b2      	add	r3, pc, #712	@ (adr r3, 8002810 <bmi088_update+0x3e0>)
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	f7fe f874 	bl	8000638 <__aeabi_dmul>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4610      	mov	r0, r2
 8002556:	4619      	mov	r1, r3
 8002558:	a3af      	add	r3, pc, #700	@ (adr r3, 8002818 <bmi088_update+0x3e8>)
 800255a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255e:	f7fe f995 	bl	800088c <__aeabi_ddiv>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	49b3      	ldr	r1, [pc, #716]	@ (8002834 <bmi088_update+0x404>)
 8002568:	680c      	ldr	r4, [r1, #0]
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f7fe fb3b 	bl	8000be8 <__aeabi_d2f>
 8002572:	4603      	mov	r3, r0
 8002574:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc

			int16_t acc_z_16 = (BMI->rawDatas.accel[5] << 8) | BMI->rawDatas.accel[4];
 8002578:	4bae      	ldr	r3, [pc, #696]	@ (8002834 <bmi088_update+0x404>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	7a5b      	ldrb	r3, [r3, #9]
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	b21a      	sxth	r2, r3
 8002582:	4bac      	ldr	r3, [pc, #688]	@ (8002834 <bmi088_update+0x404>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	7a1b      	ldrb	r3, [r3, #8]
 8002588:	b21b      	sxth	r3, r3
 800258a:	4313      	orrs	r3, r2
 800258c:	817b      	strh	r3, [r7, #10]
			int16_t acc_y_16 = (BMI->rawDatas.accel[3] << 8) | BMI->rawDatas.accel[2];
 800258e:	4ba9      	ldr	r3, [pc, #676]	@ (8002834 <bmi088_update+0x404>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	79db      	ldrb	r3, [r3, #7]
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	b21a      	sxth	r2, r3
 8002598:	4ba6      	ldr	r3, [pc, #664]	@ (8002834 <bmi088_update+0x404>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	799b      	ldrb	r3, [r3, #6]
 800259e:	b21b      	sxth	r3, r3
 80025a0:	4313      	orrs	r3, r2
 80025a2:	813b      	strh	r3, [r7, #8]
			int16_t acc_x_16 = (BMI->rawDatas.accel[1] << 8) | BMI->rawDatas.accel[0];
 80025a4:	4ba3      	ldr	r3, [pc, #652]	@ (8002834 <bmi088_update+0x404>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	795b      	ldrb	r3, [r3, #5]
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	b21a      	sxth	r2, r3
 80025ae:	4ba1      	ldr	r3, [pc, #644]	@ (8002834 <bmi088_update+0x404>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	791b      	ldrb	r3, [r3, #4]
 80025b4:	b21b      	sxth	r3, r3
 80025b6:	4313      	orrs	r3, r2
 80025b8:	80fb      	strh	r3, [r7, #6]

			BMI->acc_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - 0.0)*9.81/1000;
 80025ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025c6:	ee17 0a90 	vmov	r0, s15
 80025ca:	f7fd ffdd 	bl	8000588 <__aeabi_f2d>
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	4b99      	ldr	r3, [pc, #612]	@ (8002838 <bmi088_update+0x408>)
 80025d4:	f7fe f95a 	bl	800088c <__aeabi_ddiv>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	4b95      	ldr	r3, [pc, #596]	@ (800283c <bmi088_update+0x40c>)
 80025e6:	f7fe f827 	bl	8000638 <__aeabi_dmul>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	4b92      	ldr	r3, [pc, #584]	@ (8002840 <bmi088_update+0x410>)
 80025f8:	f7fe f81e 	bl	8000638 <__aeabi_dmul>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4614      	mov	r4, r2
 8002602:	461d      	mov	r5, r3
 8002604:	4b8b      	ldr	r3, [pc, #556]	@ (8002834 <bmi088_update+0x404>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	7e1b      	ldrb	r3, [r3, #24]
 800260a:	3301      	adds	r3, #1
 800260c:	ee07 3a90 	vmov	s15, r3
 8002610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002614:	ee17 0a90 	vmov	r0, s15
 8002618:	f7fd ffb6 	bl	8000588 <__aeabi_f2d>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	ec43 2b11 	vmov	d1, r2, r3
 8002624:	ed9f 0b7e 	vldr	d0, [pc, #504]	@ 8002820 <bmi088_update+0x3f0>
 8002628:	f00c fb38 	bl	800ec9c <pow>
 800262c:	ec53 2b10 	vmov	r2, r3, d0
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	f7fe f800 	bl	8000638 <__aeabi_dmul>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	a379      	add	r3, pc, #484	@ (adr r3, 8002828 <bmi088_update+0x3f8>)
 8002642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002646:	f7fd fff7 	bl	8000638 <__aeabi_dmul>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4610      	mov	r0, r2
 8002650:	4619      	mov	r1, r3
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	4b79      	ldr	r3, [pc, #484]	@ (800283c <bmi088_update+0x40c>)
 8002658:	f7fe f918 	bl	800088c <__aeabi_ddiv>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4974      	ldr	r1, [pc, #464]	@ (8002834 <bmi088_update+0x404>)
 8002662:	680c      	ldr	r4, [r1, #0]
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	f7fe fabe 	bl	8000be8 <__aeabi_d2f>
 800266c:	4603      	mov	r3, r0
 800266e:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
			BMI->acc_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - 0.0)*9.81/1000;
 8002672:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002676:	ee07 3a90 	vmov	s15, r3
 800267a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800267e:	ee17 0a90 	vmov	r0, s15
 8002682:	f7fd ff81 	bl	8000588 <__aeabi_f2d>
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	4b6b      	ldr	r3, [pc, #428]	@ (8002838 <bmi088_update+0x408>)
 800268c:	f7fe f8fe 	bl	800088c <__aeabi_ddiv>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4610      	mov	r0, r2
 8002696:	4619      	mov	r1, r3
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	4b67      	ldr	r3, [pc, #412]	@ (800283c <bmi088_update+0x40c>)
 800269e:	f7fd ffcb 	bl	8000638 <__aeabi_dmul>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	4b64      	ldr	r3, [pc, #400]	@ (8002840 <bmi088_update+0x410>)
 80026b0:	f7fd ffc2 	bl	8000638 <__aeabi_dmul>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4614      	mov	r4, r2
 80026ba:	461d      	mov	r5, r3
 80026bc:	4b5d      	ldr	r3, [pc, #372]	@ (8002834 <bmi088_update+0x404>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	7e1b      	ldrb	r3, [r3, #24]
 80026c2:	3301      	adds	r3, #1
 80026c4:	ee07 3a90 	vmov	s15, r3
 80026c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026cc:	ee17 0a90 	vmov	r0, s15
 80026d0:	f7fd ff5a 	bl	8000588 <__aeabi_f2d>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	ec43 2b11 	vmov	d1, r2, r3
 80026dc:	ed9f 0b50 	vldr	d0, [pc, #320]	@ 8002820 <bmi088_update+0x3f0>
 80026e0:	f00c fadc 	bl	800ec9c <pow>
 80026e4:	ec53 2b10 	vmov	r2, r3, d0
 80026e8:	4620      	mov	r0, r4
 80026ea:	4629      	mov	r1, r5
 80026ec:	f7fd ffa4 	bl	8000638 <__aeabi_dmul>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	a34b      	add	r3, pc, #300	@ (adr r3, 8002828 <bmi088_update+0x3f8>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f7fd ff9b 	bl	8000638 <__aeabi_dmul>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	4b4b      	ldr	r3, [pc, #300]	@ (800283c <bmi088_update+0x40c>)
 8002710:	f7fe f8bc 	bl	800088c <__aeabi_ddiv>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4946      	ldr	r1, [pc, #280]	@ (8002834 <bmi088_update+0x404>)
 800271a:	680c      	ldr	r4, [r1, #0]
 800271c:	4610      	mov	r0, r2
 800271e:	4619      	mov	r1, r3
 8002720:	f7fe fa62 	bl	8000be8 <__aeabi_d2f>
 8002724:	4603      	mov	r3, r0
 8002726:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
			BMI->acc_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - 0.0)*9.81/1000;
 800272a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800272e:	ee07 3a90 	vmov	s15, r3
 8002732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002736:	ee17 0a90 	vmov	r0, s15
 800273a:	f7fd ff25 	bl	8000588 <__aeabi_f2d>
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	4b3d      	ldr	r3, [pc, #244]	@ (8002838 <bmi088_update+0x408>)
 8002744:	f7fe f8a2 	bl	800088c <__aeabi_ddiv>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4610      	mov	r0, r2
 800274e:	4619      	mov	r1, r3
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	4b39      	ldr	r3, [pc, #228]	@ (800283c <bmi088_update+0x40c>)
 8002756:	f7fd ff6f 	bl	8000638 <__aeabi_dmul>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	4b36      	ldr	r3, [pc, #216]	@ (8002840 <bmi088_update+0x410>)
 8002768:	f7fd ff66 	bl	8000638 <__aeabi_dmul>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4614      	mov	r4, r2
 8002772:	461d      	mov	r5, r3
 8002774:	4b2f      	ldr	r3, [pc, #188]	@ (8002834 <bmi088_update+0x404>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	7e1b      	ldrb	r3, [r3, #24]
 800277a:	3301      	adds	r3, #1
 800277c:	ee07 3a90 	vmov	s15, r3
 8002780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002784:	ee17 0a90 	vmov	r0, s15
 8002788:	f7fd fefe 	bl	8000588 <__aeabi_f2d>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	ec43 2b11 	vmov	d1, r2, r3
 8002794:	ed9f 0b22 	vldr	d0, [pc, #136]	@ 8002820 <bmi088_update+0x3f0>
 8002798:	f00c fa80 	bl	800ec9c <pow>
 800279c:	ec53 2b10 	vmov	r2, r3, d0
 80027a0:	4620      	mov	r0, r4
 80027a2:	4629      	mov	r1, r5
 80027a4:	f7fd ff48 	bl	8000638 <__aeabi_dmul>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	a31d      	add	r3, pc, #116	@ (adr r3, 8002828 <bmi088_update+0x3f8>)
 80027b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b6:	f7fd ff3f 	bl	8000638 <__aeabi_dmul>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4610      	mov	r0, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	4b1d      	ldr	r3, [pc, #116]	@ (800283c <bmi088_update+0x40c>)
 80027c8:	f7fe f860 	bl	800088c <__aeabi_ddiv>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4918      	ldr	r1, [pc, #96]	@ (8002834 <bmi088_update+0x404>)
 80027d2:	680c      	ldr	r4, [r1, #0]
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	f7fe fa06 	bl	8000be8 <__aeabi_d2f>
 80027dc:	4603      	mov	r3, r0
 80027de:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc

			if(isStarded)
 80027e2:	4b18      	ldr	r3, [pc, #96]	@ (8002844 <bmi088_update+0x414>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d042      	beq.n	8002870 <bmi088_update+0x440>
			{
				BMI->deltaTime = BMI->currentTime - BMI->lastTime < 0 ? 0.0 : BMI->currentTime - BMI->lastTime;
 80027ea:	4b12      	ldr	r3, [pc, #72]	@ (8002834 <bmi088_update+0x404>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 80027f2:	4b10      	ldr	r3, [pc, #64]	@ (8002834 <bmi088_update+0x404>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 80027fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002806:	d521      	bpl.n	800284c <bmi088_update+0x41c>
 8002808:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8002848 <bmi088_update+0x418>
 800280c:	e028      	b.n	8002860 <bmi088_update+0x430>
 800280e:	bf00      	nop
 8002810:	00000000 	.word	0x00000000
 8002814:	40438800 	.word	0x40438800
 8002818:	00000000 	.word	0x00000000
 800281c:	412e8480 	.word	0x412e8480
 8002820:	00000000 	.word	0x00000000
 8002824:	40000000 	.word	0x40000000
 8002828:	51eb851f 	.word	0x51eb851f
 800282c:	40239eb8 	.word	0x40239eb8
 8002830:	40370000 	.word	0x40370000
 8002834:	20000254 	.word	0x20000254
 8002838:	40e00000 	.word	0x40e00000
 800283c:	408f4000 	.word	0x408f4000
 8002840:	3ff80000 	.word	0x3ff80000
 8002844:	20000259 	.word	0x20000259
 8002848:	00000000 	.word	0x00000000
 800284c:	4b07      	ldr	r3, [pc, #28]	@ (800286c <bmi088_update+0x43c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 8002854:	4b05      	ldr	r3, [pc, #20]	@ (800286c <bmi088_update+0x43c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 800285c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002860:	4b02      	ldr	r3, [pc, #8]	@ (800286c <bmi088_update+0x43c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
 8002868:	e008      	b.n	800287c <bmi088_update+0x44c>
 800286a:	bf00      	nop
 800286c:	20000254 	.word	0x20000254
			}
			else
			{
				isStarded++;
 8002870:	4bb0      	ldr	r3, [pc, #704]	@ (8002b34 <bmi088_update+0x704>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	3301      	adds	r3, #1
 8002876:	b2da      	uxtb	r2, r3
 8002878:	4bae      	ldr	r3, [pc, #696]	@ (8002b34 <bmi088_update+0x704>)
 800287a:	701a      	strb	r2, [r3, #0]
			}
				BMI->lastTime = BMI->currentTime;
 800287c:	4bae      	ldr	r3, [pc, #696]	@ (8002b38 <bmi088_update+0x708>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4bad      	ldr	r3, [pc, #692]	@ (8002b38 <bmi088_update+0x708>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8002888:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0


			BMI->rawDatas.isAccelUpdated = 0;
 800288c:	4baa      	ldr	r3, [pc, #680]	@ (8002b38 <bmi088_update+0x708>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2200      	movs	r2, #0
 8002892:	759a      	strb	r2, [r3, #22]
			isTimeUpdated = 1;
 8002894:	4ba9      	ldr	r3, [pc, #676]	@ (8002b3c <bmi088_update+0x70c>)
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->rawDatas.isGyroUpdated)
 800289a:	4ba7      	ldr	r3, [pc, #668]	@ (8002b38 <bmi088_update+0x708>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	7d5b      	ldrb	r3, [r3, #21]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8143 	beq.w	8002b2c <bmi088_update+0x6fc>
		{

				ret_val = HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.gyro, 6, 10);
 80028a6:	4ba6      	ldr	r3, [pc, #664]	@ (8002b40 <bmi088_update+0x710>)
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	4ba3      	ldr	r3, [pc, #652]	@ (8002b38 <bmi088_update+0x708>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	330f      	adds	r3, #15
 80028b0:	220a      	movs	r2, #10
 80028b2:	9202      	str	r2, [sp, #8]
 80028b4:	2206      	movs	r2, #6
 80028b6:	9201      	str	r2, [sp, #4]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2301      	movs	r3, #1
 80028bc:	2202      	movs	r2, #2
 80028be:	21d0      	movs	r1, #208	@ 0xd0
 80028c0:	f006 fa0e 	bl	8008ce0 <HAL_I2C_Mem_Read>
 80028c4:	4603      	mov	r3, r0
 80028c6:	75fb      	strb	r3, [r7, #23]
				if(ret_val)
 80028c8:	7dfb      	ldrb	r3, [r7, #23]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f040 812d 	bne.w	8002b2a <bmi088_update+0x6fa>
					return;
				int16_t gyro_z_16 = (BMI->rawDatas.gyro[5] << 8) | BMI->rawDatas.gyro[4];
 80028d0:	4b99      	ldr	r3, [pc, #612]	@ (8002b38 <bmi088_update+0x708>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	7d1b      	ldrb	r3, [r3, #20]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	b21a      	sxth	r2, r3
 80028da:	4b97      	ldr	r3, [pc, #604]	@ (8002b38 <bmi088_update+0x708>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	7cdb      	ldrb	r3, [r3, #19]
 80028e0:	b21b      	sxth	r3, r3
 80028e2:	4313      	orrs	r3, r2
 80028e4:	80bb      	strh	r3, [r7, #4]
				int16_t gyro_y_16 = (BMI->rawDatas.gyro[3] << 8) | BMI->rawDatas.gyro[2];
 80028e6:	4b94      	ldr	r3, [pc, #592]	@ (8002b38 <bmi088_update+0x708>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	7c9b      	ldrb	r3, [r3, #18]
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	b21a      	sxth	r2, r3
 80028f0:	4b91      	ldr	r3, [pc, #580]	@ (8002b38 <bmi088_update+0x708>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	7c5b      	ldrb	r3, [r3, #17]
 80028f6:	b21b      	sxth	r3, r3
 80028f8:	4313      	orrs	r3, r2
 80028fa:	807b      	strh	r3, [r7, #2]
				int16_t gyro_x_16 = (BMI->rawDatas.gyro[1] << 8) | BMI->rawDatas.gyro[0];
 80028fc:	4b8e      	ldr	r3, [pc, #568]	@ (8002b38 <bmi088_update+0x708>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	7c1b      	ldrb	r3, [r3, #16]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	b21a      	sxth	r2, r3
 8002906:	4b8c      	ldr	r3, [pc, #560]	@ (8002b38 <bmi088_update+0x708>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	7bdb      	ldrb	r3, [r3, #15]
 800290c:	b21b      	sxth	r3, r3
 800290e:	4313      	orrs	r3, r2
 8002910:	803b      	strh	r3, [r7, #0]

				// Doğrudan rad/s olarak al
				BMI->gyro_x = ((float)gyro_x_16 * BMI088_GYRO_LSB_TO_RADS) - BMI->offset_vals[0];
 8002912:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800291e:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8002b44 <bmi088_update+0x714>
 8002922:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002926:	ee17 0a90 	vmov	r0, s15
 800292a:	f7fd fe2d 	bl	8000588 <__aeabi_f2d>
 800292e:	4b82      	ldr	r3, [pc, #520]	@ (8002b38 <bmi088_update+0x708>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 8002936:	4c80      	ldr	r4, [pc, #512]	@ (8002b38 <bmi088_update+0x708>)
 8002938:	6824      	ldr	r4, [r4, #0]
 800293a:	f7fd fcc5 	bl	80002c8 <__aeabi_dsub>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	e9c4 2320 	strd	r2, r3, [r4, #128]	@ 0x80
				BMI->gyro_y = ((float)gyro_y_16 * BMI088_GYRO_LSB_TO_RADS) - BMI->offset_vals[1];
 8002946:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800294a:	ee07 3a90 	vmov	s15, r3
 800294e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002952:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8002b44 <bmi088_update+0x714>
 8002956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800295a:	ee17 0a90 	vmov	r0, s15
 800295e:	f7fd fe13 	bl	8000588 <__aeabi_f2d>
 8002962:	4b75      	ldr	r3, [pc, #468]	@ (8002b38 <bmi088_update+0x708>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	@ 0xf8
 800296a:	4c73      	ldr	r4, [pc, #460]	@ (8002b38 <bmi088_update+0x708>)
 800296c:	6824      	ldr	r4, [r4, #0]
 800296e:	f7fd fcab 	bl	80002c8 <__aeabi_dsub>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	e9c4 2322 	strd	r2, r3, [r4, #136]	@ 0x88
				BMI->gyro_z = ((float)gyro_z_16 * BMI088_GYRO_LSB_TO_RADS) - BMI->offset_vals[2];
 800297a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800297e:	ee07 3a90 	vmov	s15, r3
 8002982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002986:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8002b44 <bmi088_update+0x714>
 800298a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800298e:	ee17 0a90 	vmov	r0, s15
 8002992:	f7fd fdf9 	bl	8000588 <__aeabi_f2d>
 8002996:	4b68      	ldr	r3, [pc, #416]	@ (8002b38 <bmi088_update+0x708>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 800299e:	4c66      	ldr	r4, [pc, #408]	@ (8002b38 <bmi088_update+0x708>)
 80029a0:	6824      	ldr	r4, [r4, #0]
 80029a2:	f7fd fc91 	bl	80002c8 <__aeabi_dsub>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	e9c4 2324 	strd	r2, r3, [r4, #144]	@ 0x90

				Orientation_Update(BMI->gyro_x, BMI->gyro_y, BMI->gyro_z,BMI->acc_x,BMI->acc_y,BMI->acc_z, BMI->deltaTime);
 80029ae:	4b62      	ldr	r3, [pc, #392]	@ (8002b38 <bmi088_update+0x708>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	f7fe f915 	bl	8000be8 <__aeabi_d2f>
 80029be:	4604      	mov	r4, r0
 80029c0:	4b5d      	ldr	r3, [pc, #372]	@ (8002b38 <bmi088_update+0x708>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	f7fe f90c 	bl	8000be8 <__aeabi_d2f>
 80029d0:	4605      	mov	r5, r0
 80029d2:	4b59      	ldr	r3, [pc, #356]	@ (8002b38 <bmi088_update+0x708>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80029da:	4610      	mov	r0, r2
 80029dc:	4619      	mov	r1, r3
 80029de:	f7fe f903 	bl	8000be8 <__aeabi_d2f>
 80029e2:	4602      	mov	r2, r0
 80029e4:	4b54      	ldr	r3, [pc, #336]	@ (8002b38 <bmi088_update+0x708>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 80029ec:	4b52      	ldr	r3, [pc, #328]	@ (8002b38 <bmi088_update+0x708>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 80029f4:	4b50      	ldr	r3, [pc, #320]	@ (8002b38 <bmi088_update+0x708>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	edd3 6a31 	vldr	s13, [r3, #196]	@ 0xc4
 80029fc:	4b4e      	ldr	r3, [pc, #312]	@ (8002b38 <bmi088_update+0x708>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	ed93 6a35 	vldr	s12, [r3, #212]	@ 0xd4
 8002a04:	eeb0 3a46 	vmov.f32	s6, s12
 8002a08:	eef0 2a66 	vmov.f32	s5, s13
 8002a0c:	eeb0 2a47 	vmov.f32	s4, s14
 8002a10:	eef0 1a67 	vmov.f32	s3, s15
 8002a14:	ee01 2a10 	vmov	s2, r2
 8002a18:	ee00 5a90 	vmov	s1, r5
 8002a1c:	ee00 4a10 	vmov	s0, r4
 8002a20:	f002 fe32 	bl	8005688 <Orientation_Update>
				BMI->yaw = quaternionToYaw();
 8002a24:	4b44      	ldr	r3, [pc, #272]	@ (8002b38 <bmi088_update+0x708>)
 8002a26:	681c      	ldr	r4, [r3, #0]
 8002a28:	f003 fb82 	bl	8006130 <quaternionToYaw>
 8002a2c:	eef0 7a40 	vmov.f32	s15, s0
 8002a30:	edc4 7a26 	vstr	s15, [r4, #152]	@ 0x98
				BMI->pitch = quaternionToPitch();
 8002a34:	4b40      	ldr	r3, [pc, #256]	@ (8002b38 <bmi088_update+0x708>)
 8002a36:	681c      	ldr	r4, [r3, #0]
 8002a38:	f003 fbd8 	bl	80061ec <quaternionToPitch>
 8002a3c:	eef0 7a40 	vmov.f32	s15, s0
 8002a40:	edc4 7a27 	vstr	s15, [r4, #156]	@ 0x9c
				BMI->roll = quaternionToRoll();
 8002a44:	4b3c      	ldr	r3, [pc, #240]	@ (8002b38 <bmi088_update+0x708>)
 8002a46:	681c      	ldr	r4, [r3, #0]
 8002a48:	f003 fc08 	bl	800625c <quaternionToRoll>
 8002a4c:	eef0 7a40 	vmov.f32	s15, s0
 8002a50:	edc4 7a28 	vstr	s15, [r4, #160]	@ 0xa0
				BMI->angleZ = quaternionToYawDegree();
 8002a54:	4b38      	ldr	r3, [pc, #224]	@ (8002b38 <bmi088_update+0x708>)
 8002a56:	681c      	ldr	r4, [r3, #0]
 8002a58:	f003 fa8a 	bl	8005f70 <quaternionToYawDegree>
 8002a5c:	eef0 7a40 	vmov.f32	s15, s0
 8002a60:	edc4 7a39 	vstr	s15, [r4, #228]	@ 0xe4
				BMI->angleY = quaternionToPitchDegree();
 8002a64:	4b34      	ldr	r3, [pc, #208]	@ (8002b38 <bmi088_update+0x708>)
 8002a66:	681c      	ldr	r4, [r3, #0]
 8002a68:	f003 faca 	bl	8006000 <quaternionToPitchDegree>
 8002a6c:	eef0 7a40 	vmov.f32	s15, s0
 8002a70:	edc4 7a3a 	vstr	s15, [r4, #232]	@ 0xe8
				BMI->angleX = quaternionToRollDegree();
 8002a74:	4b30      	ldr	r3, [pc, #192]	@ (8002b38 <bmi088_update+0x708>)
 8002a76:	681c      	ldr	r4, [r3, #0]
 8002a78:	f003 fb12 	bl	80060a0 <quaternionToRollDegree>
 8002a7c:	eef0 7a40 	vmov.f32	s15, s0
 8002a80:	edc4 7a3b 	vstr	s15, [r4, #236]	@ 0xec

				ekf_predict(BMI->gyro_x,BMI->gyro_y,BMI->gyro_z,BMI->deltaTime);
 8002a84:	4b2c      	ldr	r3, [pc, #176]	@ (8002b38 <bmi088_update+0x708>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f7fe f8aa 	bl	8000be8 <__aeabi_d2f>
 8002a94:	4604      	mov	r4, r0
 8002a96:	4b28      	ldr	r3, [pc, #160]	@ (8002b38 <bmi088_update+0x708>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f7fe f8a1 	bl	8000be8 <__aeabi_d2f>
 8002aa6:	4605      	mov	r5, r0
 8002aa8:	4b23      	ldr	r3, [pc, #140]	@ (8002b38 <bmi088_update+0x708>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f7fe f898 	bl	8000be8 <__aeabi_d2f>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4b1f      	ldr	r3, [pc, #124]	@ (8002b38 <bmi088_update+0x708>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	edd3 7a35 	vldr	s15, [r3, #212]	@ 0xd4
 8002ac2:	eef0 1a67 	vmov.f32	s3, s15
 8002ac6:	ee01 2a10 	vmov	s2, r2
 8002aca:	ee00 5a90 	vmov	s1, r5
 8002ace:	ee00 4a10 	vmov	s0, r4
 8002ad2:	f002 f9f3 	bl	8004ebc <ekf_predict>
				BMI->yaw1 = quaternionToYaw1();
 8002ad6:	4b18      	ldr	r3, [pc, #96]	@ (8002b38 <bmi088_update+0x708>)
 8002ad8:	681c      	ldr	r4, [r3, #0]
 8002ada:	f002 fb15 	bl	8005108 <quaternionToYaw1>
 8002ade:	eef0 7a40 	vmov.f32	s15, s0
 8002ae2:	edc4 7a29 	vstr	s15, [r4, #164]	@ 0xa4
				BMI->pitch1 = quaternionToPitch1();
 8002ae6:	4b14      	ldr	r3, [pc, #80]	@ (8002b38 <bmi088_update+0x708>)
 8002ae8:	681c      	ldr	r4, [r3, #0]
 8002aea:	f002 fb6b 	bl	80051c4 <quaternionToPitch1>
 8002aee:	eef0 7a40 	vmov.f32	s15, s0
 8002af2:	edc4 7a2a 	vstr	s15, [r4, #168]	@ 0xa8
				BMI->roll1 = quaternionToRoll1();
 8002af6:	4b10      	ldr	r3, [pc, #64]	@ (8002b38 <bmi088_update+0x708>)
 8002af8:	681c      	ldr	r4, [r3, #0]
 8002afa:	f002 fb9b 	bl	8005234 <quaternionToRoll1>
 8002afe:	eef0 7a40 	vmov.f32	s15, s0
 8002b02:	edc4 7a2b 	vstr	s15, [r4, #172]	@ 0xac
				BMI->isUpdated = 1;
 8002b06:	4b0c      	ldr	r3, [pc, #48]	@ (8002b38 <bmi088_update+0x708>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

				/*ekf_update(BMI->acc_x, BMI->acc_y, BMI->acc_z);
				BMI->angle = ekf_getTheta();*/
				is_gyro_offset = 1;
 8002b10:	4b0d      	ldr	r3, [pc, #52]	@ (8002b48 <bmi088_update+0x718>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	701a      	strb	r2, [r3, #0]

			BMI->rawDatas.isGyroUpdated = 0;
 8002b16:	4b08      	ldr	r3, [pc, #32]	@ (8002b38 <bmi088_update+0x708>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	755a      	strb	r2, [r3, #21]
			isTimeUpdated = 0;
 8002b1e:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <bmi088_update+0x70c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
 8002b24:	e002      	b.n	8002b2c <bmi088_update+0x6fc>
				return;
 8002b26:	bf00      	nop
 8002b28:	e000      	b.n	8002b2c <bmi088_update+0x6fc>
					return;
 8002b2a:	bf00      	nop
		}


}
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bdb0      	pop	{r4, r5, r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000259 	.word	0x20000259
 8002b38:	20000254 	.word	0x20000254
 8002b3c:	20000258 	.word	0x20000258
 8002b40:	20000250 	.word	0x20000250
 8002b44:	3a8b8bbf 	.word	0x3a8b8bbf
 8002b48:	2000025a 	.word	0x2000025a

08002b4c <bmi088_getAccelDatas_INT>:


void bmi088_getAccelDatas_INT()
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
	BMI->rawDatas.isAccelUpdated = 1;
 8002b50:	4b04      	ldr	r3, [pc, #16]	@ (8002b64 <bmi088_getAccelDatas_INT+0x18>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2201      	movs	r2, #1
 8002b56:	759a      	strb	r2, [r3, #22]
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20000254 	.word	0x20000254

08002b68 <bmi088_getGyroDatas_INT>:

void bmi088_getGyroDatas_INT()
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
	BMI->rawDatas.isGyroUpdated = 1;
 8002b6c:	4b04      	ldr	r3, [pc, #16]	@ (8002b80 <bmi088_getGyroDatas_INT+0x18>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2201      	movs	r2, #1
 8002b72:	755a      	strb	r2, [r3, #21]
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20000254 	.word	0x20000254

08002b84 <getOffset>:
	HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void getOffset()
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
	static int offsetCounter = 0;

	while(1)
	{
		bmi088_update();
 8002b88:	f7ff fc52 	bl	8002430 <bmi088_update>
		if(is_gyro_offset == 1)
 8002b8c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c84 <getOffset+0x100>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d1f9      	bne.n	8002b88 <getOffset+0x4>
		{
			if(offsetCounter < 1000){
 8002b94:	4b3c      	ldr	r3, [pc, #240]	@ (8002c88 <getOffset+0x104>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b9c:	da32      	bge.n	8002c04 <getOffset+0x80>
					 g[0][0] += BMI->gyro_x;
 8002b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c8c <getOffset+0x108>)
 8002ba0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ba4:	4b3a      	ldr	r3, [pc, #232]	@ (8002c90 <getOffset+0x10c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8002bac:	f7fd fb8e 	bl	80002cc <__adddf3>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4935      	ldr	r1, [pc, #212]	@ (8002c8c <getOffset+0x108>)
 8002bb6:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] += BMI->gyro_y;
 8002bba:	4b34      	ldr	r3, [pc, #208]	@ (8002c8c <getOffset+0x108>)
 8002bbc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002bc0:	4b33      	ldr	r3, [pc, #204]	@ (8002c90 <getOffset+0x10c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002bc8:	f7fd fb80 	bl	80002cc <__adddf3>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	492e      	ldr	r1, [pc, #184]	@ (8002c8c <getOffset+0x108>)
 8002bd2:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] += BMI->gyro_z;
 8002bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c8c <getOffset+0x108>)
 8002bd8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8002c90 <getOffset+0x10c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002be4:	f7fd fb72 	bl	80002cc <__adddf3>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4927      	ldr	r1, [pc, #156]	@ (8002c8c <getOffset+0x108>)
 8002bee:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 offsetCounter++;
 8002bf2:	4b25      	ldr	r3, [pc, #148]	@ (8002c88 <getOffset+0x104>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	4a23      	ldr	r2, [pc, #140]	@ (8002c88 <getOffset+0x104>)
 8002bfa:	6013      	str	r3, [r2, #0]
					 BMI->offset_vals[1] = g[0][1];
					 BMI->offset_vals[2] = g[0][2];
					 break;
					 //Error_Handler();
				 }
			is_gyro_offset = 0;
 8002bfc:	4b21      	ldr	r3, [pc, #132]	@ (8002c84 <getOffset+0x100>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	e7c1      	b.n	8002b88 <getOffset+0x4>
					 g[0][0] /= 1000.0;
 8002c04:	4b21      	ldr	r3, [pc, #132]	@ (8002c8c <getOffset+0x108>)
 8002c06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	4b21      	ldr	r3, [pc, #132]	@ (8002c94 <getOffset+0x110>)
 8002c10:	f7fd fe3c 	bl	800088c <__aeabi_ddiv>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	491c      	ldr	r1, [pc, #112]	@ (8002c8c <getOffset+0x108>)
 8002c1a:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] /= 1000.0;
 8002c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c8c <getOffset+0x108>)
 8002c20:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	4b1a      	ldr	r3, [pc, #104]	@ (8002c94 <getOffset+0x110>)
 8002c2a:	f7fd fe2f 	bl	800088c <__aeabi_ddiv>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4916      	ldr	r1, [pc, #88]	@ (8002c8c <getOffset+0x108>)
 8002c34:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] /= 1000.0;
 8002c38:	4b14      	ldr	r3, [pc, #80]	@ (8002c8c <getOffset+0x108>)
 8002c3a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	4b14      	ldr	r3, [pc, #80]	@ (8002c94 <getOffset+0x110>)
 8002c44:	f7fd fe22 	bl	800088c <__aeabi_ddiv>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	490f      	ldr	r1, [pc, #60]	@ (8002c8c <getOffset+0x108>)
 8002c4e:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 BMI->offset_vals[0] = g[0][0];
 8002c52:	4b0f      	ldr	r3, [pc, #60]	@ (8002c90 <getOffset+0x10c>)
 8002c54:	6819      	ldr	r1, [r3, #0]
 8002c56:	4b0d      	ldr	r3, [pc, #52]	@ (8002c8c <getOffset+0x108>)
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
					 BMI->offset_vals[1] = g[0][1];
 8002c60:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <getOffset+0x10c>)
 8002c62:	6819      	ldr	r1, [r3, #0]
 8002c64:	4b09      	ldr	r3, [pc, #36]	@ (8002c8c <getOffset+0x108>)
 8002c66:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c6a:	e9c1 233e 	strd	r2, r3, [r1, #248]	@ 0xf8
					 BMI->offset_vals[2] = g[0][2];
 8002c6e:	4b08      	ldr	r3, [pc, #32]	@ (8002c90 <getOffset+0x10c>)
 8002c70:	6819      	ldr	r1, [r3, #0]
 8002c72:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <getOffset+0x108>)
 8002c74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c78:	e9c1 2340 	strd	r2, r3, [r1, #256]	@ 0x100
					 break;
 8002c7c:	bf00      	nop
		}

	}
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	2000025a 	.word	0x2000025a
 8002c88:	20000290 	.word	0x20000290
 8002c8c:	20000260 	.word	0x20000260
 8002c90:	20000254 	.word	0x20000254
 8002c94:	408f4000 	.word	0x408f4000

08002c98 <flight_algorithm_init>:

/**
 * @brief Initialize the flight algorithm
 */
void flight_algorithm_init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
    flight_algorithm_reset();
 8002c9c:	f000 f802 	bl	8002ca4 <flight_algorithm_reset>
}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <flight_algorithm_reset>:

/**
 * @brief Reset flight algorithm to initial state
 */
void flight_algorithm_reset(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
    current_phase = PHASE_IDLE;
 8002ca8:	4b11      	ldr	r3, [pc, #68]	@ (8002cf0 <flight_algorithm_reset+0x4c>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
    is_rising = 0;
 8002cae:	4b11      	ldr	r3, [pc, #68]	@ (8002cf4 <flight_algorithm_reset+0x50>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
    is_stabilized = 1;
 8002cb4:	4b10      	ldr	r3, [pc, #64]	@ (8002cf8 <flight_algorithm_reset+0x54>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
    is_armed = 0;
 8002cba:	4b10      	ldr	r3, [pc, #64]	@ (8002cfc <flight_algorithm_reset+0x58>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
    drogue_deployed = 0;
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d00 <flight_algorithm_reset+0x5c>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
    main_deployed = 0;
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d04 <flight_algorithm_reset+0x60>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
    altitude_decrease_count = 0;
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d08 <flight_algorithm_reset+0x64>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
    status_bits = 0;
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d0c <flight_algorithm_reset+0x68>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	801a      	strh	r2, [r3, #0]
    prev_altitude = 0.0f;
 8002cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8002d10 <flight_algorithm_reset+0x6c>)
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
    flight_start_time = 0;
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d14 <flight_algorithm_reset+0x70>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
}
 8002ce6:	bf00      	nop
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	20000294 	.word	0x20000294
 8002cf4:	20000295 	.word	0x20000295
 8002cf8:	20000014 	.word	0x20000014
 8002cfc:	20000296 	.word	0x20000296
 8002d00:	20000297 	.word	0x20000297
 8002d04:	20000298 	.word	0x20000298
 8002d08:	200002a0 	.word	0x200002a0
 8002d0c:	200002a8 	.word	0x200002a8
 8002d10:	200002a4 	.word	0x200002a4
 8002d14:	2000029c 	.word	0x2000029c

08002d18 <flight_algorithm_update>:

/**
 * @brief Update flight algorithm with sensor data
 */
void flight_algorithm_update(BME_280_t* bme, bmi088_struct_t* bmi, sensor_fusion_t* sensor_fusion)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
    // Calculate key metrics
    float total_acceleration = calculate_total_acceleration(bmi);
 8002d24:	68b8      	ldr	r0, [r7, #8]
 8002d26:	f000 f8d3 	bl	8002ed0 <calculate_total_acceleration>
 8002d2a:	ed87 0a05 	vstr	s0, [r7, #20]
    float theta = sensor_fusion->angle; // Use sensor fusion output
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	613b      	str	r3, [r7, #16]

    // Status bits are cumulative - once set they remain set
    // Each phase builds on the previous phase's status bits

    // State machine for flight phases
    switch (current_phase) {
 8002d34:	4b5a      	ldr	r3, [pc, #360]	@ (8002ea0 <flight_algorithm_update+0x188>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b05      	cmp	r3, #5
 8002d3a:	f200 80a9 	bhi.w	8002e90 <flight_algorithm_update+0x178>
 8002d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d44 <flight_algorithm_update+0x2c>)
 8002d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d44:	08002d5d 	.word	0x08002d5d
 8002d48:	08002d99 	.word	0x08002d99
 8002d4c:	08002dc9 	.word	0x08002dc9
 8002d50:	08002e35 	.word	0x08002e35
 8002d54:	08002e91 	.word	0x08002e91
 8002d58:	08002e91 	.word	0x08002e91
        case PHASE_IDLE:
            // Detect launch using acceleration threshold
            if (total_acceleration > launch_accel_threshold) {
 8002d5c:	4b51      	ldr	r3, [pc, #324]	@ (8002ea4 <flight_algorithm_update+0x18c>)
 8002d5e:	edd3 7a00 	vldr	s15, [r3]
 8002d62:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6e:	dc00      	bgt.n	8002d72 <flight_algorithm_update+0x5a>
                current_phase = PHASE_BOOST;
                is_rising = 1;
                flight_start_time = HAL_GetTick();
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
            }
            break;
 8002d70:	e08e      	b.n	8002e90 <flight_algorithm_update+0x178>
                current_phase = PHASE_BOOST;
 8002d72:	4b4b      	ldr	r3, [pc, #300]	@ (8002ea0 <flight_algorithm_update+0x188>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
                is_rising = 1;
 8002d78:	4b4b      	ldr	r3, [pc, #300]	@ (8002ea8 <flight_algorithm_update+0x190>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	701a      	strb	r2, [r3, #0]
                flight_start_time = HAL_GetTick();
 8002d7e:	f004 fd11 	bl	80077a4 <HAL_GetTick>
 8002d82:	4603      	mov	r3, r0
 8002d84:	4a49      	ldr	r2, [pc, #292]	@ (8002eac <flight_algorithm_update+0x194>)
 8002d86:	6013      	str	r3, [r2, #0]
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
 8002d88:	4b49      	ldr	r3, [pc, #292]	@ (8002eb0 <flight_algorithm_update+0x198>)
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	4b47      	ldr	r3, [pc, #284]	@ (8002eb0 <flight_algorithm_update+0x198>)
 8002d94:	801a      	strh	r2, [r3, #0]
            break;
 8002d96:	e07b      	b.n	8002e90 <flight_algorithm_update+0x178>

        case PHASE_BOOST:
            // After boost phase (typically 3-5 seconds)
            if (HAL_GetTick() - flight_start_time > 7000) {
 8002d98:	f004 fd04 	bl	80077a4 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	4b43      	ldr	r3, [pc, #268]	@ (8002eac <flight_algorithm_update+0x194>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d96c      	bls.n	8002e86 <flight_algorithm_update+0x16e>
                current_phase = PHASE_COAST;
 8002dac:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea0 <flight_algorithm_update+0x188>)
 8002dae:	2202      	movs	r2, #2
 8002db0:	701a      	strb	r2, [r3, #0]
                is_stabilized = 1;
 8002db2:	4b40      	ldr	r3, [pc, #256]	@ (8002eb4 <flight_algorithm_update+0x19c>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0002; // Set Bit 1: Motor burn prevention period ended
 8002db8:	4b3d      	ldr	r3, [pc, #244]	@ (8002eb0 <flight_algorithm_update+0x198>)
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb0 <flight_algorithm_update+0x198>)
 8002dc4:	801a      	strh	r2, [r3, #0]
            }
            break;
 8002dc6:	e05e      	b.n	8002e86 <flight_algorithm_update+0x16e>

        case PHASE_COAST:
            // Check minimum arming altitude
            if (!is_armed && bme->altitude > min_arming_altitude) {
 8002dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb8 <flight_algorithm_update+0x1a0>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d114      	bne.n	8002dfa <flight_algorithm_update+0xe2>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	ed93 7a08 	vldr	s14, [r3, #32]
 8002dd6:	4b39      	ldr	r3, [pc, #228]	@ (8002ebc <flight_algorithm_update+0x1a4>)
 8002dd8:	edd3 7a00 	vldr	s15, [r3]
 8002ddc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de4:	dd09      	ble.n	8002dfa <flight_algorithm_update+0xe2>
                is_armed = 1;
 8002de6:	4b34      	ldr	r3, [pc, #208]	@ (8002eb8 <flight_algorithm_update+0x1a0>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0004; // Set Bit 2: Minimum altitude threshold exceeded
 8002dec:	4b30      	ldr	r3, [pc, #192]	@ (8002eb0 <flight_algorithm_update+0x198>)
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	f043 0304 	orr.w	r3, r3, #4
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	4b2e      	ldr	r3, [pc, #184]	@ (8002eb0 <flight_algorithm_update+0x198>)
 8002df8:	801a      	strh	r2, [r3, #0]
            if (is_armed && (fabs(bmi->angleY) > max_angle_threshold)) {
                status_bits |= 0x0008; // Set Bit 3: Rocket body angle exceeds threshold
            }*/

            // Detect altitude decrease (apogee)
            if (is_armed && sensor_fusion->apogeeDetect == 1) {
 8002dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8002eb8 <flight_algorithm_update+0x1a0>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d043      	beq.n	8002e8a <flight_algorithm_update+0x172>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	7e1b      	ldrb	r3, [r3, #24]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d13f      	bne.n	8002e8a <flight_algorithm_update+0x172>
				current_phase = PHASE_DROGUE_DESCENT;
 8002e0a:	4b25      	ldr	r3, [pc, #148]	@ (8002ea0 <flight_algorithm_update+0x188>)
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	701a      	strb	r2, [r3, #0]
				status_bits |= 0x0010; // Set Bit 4: Rocket altitude started decreasing
 8002e10:	4b27      	ldr	r3, [pc, #156]	@ (8002eb0 <flight_algorithm_update+0x198>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	f043 0310 	orr.w	r3, r3, #16
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	4b25      	ldr	r3, [pc, #148]	@ (8002eb0 <flight_algorithm_update+0x198>)
 8002e1c:	801a      	strh	r2, [r3, #0]

				status_bits |= 0x0020; // Set Bit 5: Drag parachute deployment command generated
 8002e1e:	4b24      	ldr	r3, [pc, #144]	@ (8002eb0 <flight_algorithm_update+0x198>)
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	f043 0320 	orr.w	r3, r3, #32
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	4b21      	ldr	r3, [pc, #132]	@ (8002eb0 <flight_algorithm_update+0x198>)
 8002e2a:	801a      	strh	r2, [r3, #0]
				drogue_deployed = 1;
 8002e2c:	4b24      	ldr	r3, [pc, #144]	@ (8002ec0 <flight_algorithm_update+0x1a8>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	701a      	strb	r2, [r3, #0]
				// deploy_drogue_parachute(); // Actual deployment command
            }
            break;
 8002e32:	e02a      	b.n	8002e8a <flight_algorithm_update+0x172>

        case PHASE_DROGUE_DESCENT:
            // Deploy main parachute at designated altitude
            if (drogue_deployed && !main_deployed && bme->altitude < main_chute_altitude) {
 8002e34:	4b22      	ldr	r3, [pc, #136]	@ (8002ec0 <flight_algorithm_update+0x1a8>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d028      	beq.n	8002e8e <flight_algorithm_update+0x176>
 8002e3c:	4b21      	ldr	r3, [pc, #132]	@ (8002ec4 <flight_algorithm_update+0x1ac>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d124      	bne.n	8002e8e <flight_algorithm_update+0x176>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	ed93 7a08 	vldr	s14, [r3, #32]
 8002e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec8 <flight_algorithm_update+0x1b0>)
 8002e4c:	edd3 7a00 	vldr	s15, [r3]
 8002e50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e58:	d400      	bmi.n	8002e5c <flight_algorithm_update+0x144>

                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
                main_deployed = 1;
                // deploy_main_parachute(); // Actual deployment command
            }
            break;
 8002e5a:	e018      	b.n	8002e8e <flight_algorithm_update+0x176>
                current_phase = PHASE_MAIN_DESCENT;
 8002e5c:	4b10      	ldr	r3, [pc, #64]	@ (8002ea0 <flight_algorithm_update+0x188>)
 8002e5e:	2204      	movs	r2, #4
 8002e60:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0040; // Set Bit 6: Rocket altitude below specified altitude
 8002e62:	4b13      	ldr	r3, [pc, #76]	@ (8002eb0 <flight_algorithm_update+0x198>)
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	4b10      	ldr	r3, [pc, #64]	@ (8002eb0 <flight_algorithm_update+0x198>)
 8002e6e:	801a      	strh	r2, [r3, #0]
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
 8002e70:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb0 <flight_algorithm_update+0x198>)
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb0 <flight_algorithm_update+0x198>)
 8002e7c:	801a      	strh	r2, [r3, #0]
                main_deployed = 1;
 8002e7e:	4b11      	ldr	r3, [pc, #68]	@ (8002ec4 <flight_algorithm_update+0x1ac>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]
            break;
 8002e84:	e003      	b.n	8002e8e <flight_algorithm_update+0x176>
            break;
 8002e86:	bf00      	nop
 8002e88:	e002      	b.n	8002e90 <flight_algorithm_update+0x178>
            break;
 8002e8a:	bf00      	nop
 8002e8c:	e000      	b.n	8002e90 <flight_algorithm_update+0x178>
            break;
 8002e8e:	bf00      	nop
        case PHASE_LANDED:
            // No additional status bits to set after landing
            break;
    }

    prev_altitude = bme->altitude;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	4a0d      	ldr	r2, [pc, #52]	@ (8002ecc <flight_algorithm_update+0x1b4>)
 8002e96:	6013      	str	r3, [r2, #0]
}
 8002e98:	bf00      	nop
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20000294 	.word	0x20000294
 8002ea4:	20000004 	.word	0x20000004
 8002ea8:	20000295 	.word	0x20000295
 8002eac:	2000029c 	.word	0x2000029c
 8002eb0:	200002a8 	.word	0x200002a8
 8002eb4:	20000014 	.word	0x20000014
 8002eb8:	20000296 	.word	0x20000296
 8002ebc:	20000008 	.word	0x20000008
 8002ec0:	20000297 	.word	0x20000297
 8002ec4:	20000298 	.word	0x20000298
 8002ec8:	2000000c 	.word	0x2000000c
 8002ecc:	200002a4 	.word	0x200002a4

08002ed0 <calculate_total_acceleration>:

/**
 * @brief Calculate total acceleration magnitude
 */
static float calculate_total_acceleration(bmi088_struct_t* bmi)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
    return sqrtf((bmi->acc_x * bmi->acc_x) +
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	ed93 7a2f 	vldr	s14, [r3, #188]	@ 0xbc
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8002ee4:	ee27 7a27 	vmul.f32	s14, s14, s15
                 (bmi->acc_y * bmi->acc_y) +
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	edd3 6a30 	vldr	s13, [r3, #192]	@ 0xc0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8002ef4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->acc_x * bmi->acc_x) +
 8002ef8:	ee37 7a27 	vadd.f32	s14, s14, s15
                 (bmi->acc_z * bmi->acc_z));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	edd3 6a31 	vldr	s13, [r3, #196]	@ 0xc4
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 8002f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->acc_x * bmi->acc_x) +
 8002f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f10:	eeb0 0a67 	vmov.f32	s0, s15
 8002f14:	f00c f80e 	bl	800ef34 <sqrtf>
 8002f18:	eef0 7a40 	vmov.f32	s15, s0
}
 8002f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <flight_algorithm_get_status_bits>:

/**
 * @brief Get the current status bits
 */
uint16_t flight_algorithm_get_status_bits(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
    return status_bits;
 8002f2c:	4b03      	ldr	r3, [pc, #12]	@ (8002f3c <flight_algorithm_get_status_bits+0x14>)
 8002f2e:	881b      	ldrh	r3, [r3, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	200002a8 	.word	0x200002a8

08002f40 <flight_algorithm_set_parameters>:
 */
void flight_algorithm_set_parameters(float launch_accel_threshold_param,
                                   float min_arming_altitude_param,
                                   float main_chute_altitude_param,
                                   float max_angle_threshold_param)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	ed87 0a03 	vstr	s0, [r7, #12]
 8002f4a:	edc7 0a02 	vstr	s1, [r7, #8]
 8002f4e:	ed87 1a01 	vstr	s2, [r7, #4]
 8002f52:	edc7 1a00 	vstr	s3, [r7]
    launch_accel_threshold = launch_accel_threshold_param;
 8002f56:	4a09      	ldr	r2, [pc, #36]	@ (8002f7c <flight_algorithm_set_parameters+0x3c>)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6013      	str	r3, [r2, #0]
    min_arming_altitude = min_arming_altitude_param;
 8002f5c:	4a08      	ldr	r2, [pc, #32]	@ (8002f80 <flight_algorithm_set_parameters+0x40>)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	6013      	str	r3, [r2, #0]
    main_chute_altitude = main_chute_altitude_param;
 8002f62:	4a08      	ldr	r2, [pc, #32]	@ (8002f84 <flight_algorithm_set_parameters+0x44>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6013      	str	r3, [r2, #0]
    max_angle_threshold = max_angle_threshold_param;
 8002f68:	4a07      	ldr	r2, [pc, #28]	@ (8002f88 <flight_algorithm_set_parameters+0x48>)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6013      	str	r3, [r2, #0]
}
 8002f6e:	bf00      	nop
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20000004 	.word	0x20000004
 8002f80:	20000008 	.word	0x20000008
 8002f84:	2000000c 	.word	0x2000000c
 8002f88:	20000010 	.word	0x20000010

08002f8c <flight_algorithm_get_start_time>:
/**
 * @brief Get flight start time in milliseconds
 * @return Flight start time from HAL_GetTick(), or 0 if flight hasn't started
 */
uint32_t flight_algorithm_get_start_time(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
    return flight_start_time;
 8002f90:	4b03      	ldr	r3, [pc, #12]	@ (8002fa0 <flight_algorithm_get_start_time+0x14>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	2000029c 	.word	0x2000029c

08002fa4 <KalmanFilter_Init>:

/**
 * @brief Initialize the Kalman filter
 * @param kf Pointer to Kalman filter structure
 */
void KalmanFilter_Init(KalmanFilter_t *kf) {
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
    // Initialize state vector
    kf->x[0] = 0.0f;  // Altitude
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
    kf->x[1] = 0.0f;  // Velocity
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	605a      	str	r2, [r3, #4]
    kf->x[2] = 0.0f;  // Acceleration
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	609a      	str	r2, [r3, #8]

    // Initialize covariance matrix with initial uncertainty
    for (int i = 0; i < 3; i++) {
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	e01f      	b.n	800300a <KalmanFilter_Init+0x66>
        for (int j = 0; j < 3; j++) {
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	e016      	b.n	8002ffe <KalmanFilter_Init+0x5a>
            kf->P[i][j] = (i == j) ? 100.0f : 0.0f;
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d101      	bne.n	8002fdc <KalmanFilter_Init+0x38>
 8002fd8:	491b      	ldr	r1, [pc, #108]	@ (8003048 <KalmanFilter_Init+0xa4>)
 8002fda:	e001      	b.n	8002fe0 <KalmanFilter_Init+0x3c>
 8002fdc:	f04f 0100 	mov.w	r1, #0
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	4413      	add	r3, r2
 8002fee:	3302      	adds	r3, #2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4403      	add	r3, r0
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 3; j++) {
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b02      	cmp	r3, #2
 8003002:	dde5      	ble.n	8002fd0 <KalmanFilter_Init+0x2c>
    for (int i = 0; i < 3; i++) {
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3301      	adds	r3, #1
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b02      	cmp	r3, #2
 800300e:	dddc      	ble.n	8002fca <KalmanFilter_Init+0x26>
        }
    }

    // Set noise parameters - these can be tuned
    kf->process_noise = 0.01f;         // Process noise
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a0e      	ldr	r2, [pc, #56]	@ (800304c <KalmanFilter_Init+0xa8>)
 8003014:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->measurement_noise_alt = 0.005f;  // Altitude measurement noise
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a0d      	ldr	r2, [pc, #52]	@ (8003050 <KalmanFilter_Init+0xac>)
 800301a:	635a      	str	r2, [r3, #52]	@ 0x34
    kf->measurement_noise_acc = 5.0f;  // Acceleration measurement noise
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a0d      	ldr	r2, [pc, #52]	@ (8003054 <KalmanFilter_Init+0xb0>)
 8003020:	639a      	str	r2, [r3, #56]	@ 0x38

    // Initialize apogee detection variables
    kf->apogee_detected = 0;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	63da      	str	r2, [r3, #60]	@ 0x3c
    kf->apogee_counter = 0;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	641a      	str	r2, [r3, #64]	@ 0x40
    kf->prev_velocity = 0.0f;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	645a      	str	r2, [r3, #68]	@ 0x44

    // Mach transition control
    kf->in_mach_transition = 0;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	42c80000 	.word	0x42c80000
 800304c:	3c23d70a 	.word	0x3c23d70a
 8003050:	3ba3d70a 	.word	0x3ba3d70a
 8003054:	40a00000 	.word	0x40a00000

08003058 <KalmanFilter_Update>:
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 * @param dt Time step (seconds)
 * @return Filtered altitude
 */
float KalmanFilter_Update(KalmanFilter_t *kf, float altitude, float accel, float dt) {
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	ed87 0a02 	vstr	s0, [r7, #8]
 8003064:	edc7 0a01 	vstr	s1, [r7, #4]
 8003068:	ed87 1a00 	vstr	s2, [r7]
    // Check for Mach transition region (approximately 300-350 m/s)
    // Skip barometer readings in this region due to pressure anomalies
    if (fabsf(kf->x[1]) > 300.0f && fabsf(kf->x[1]) < 350.0f) {
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003072:	eef0 7ae7 	vabs.f32	s15, s15
 8003076:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80030dc <KalmanFilter_Update+0x84>
 800307a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800307e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003082:	dd0f      	ble.n	80030a4 <KalmanFilter_Update+0x4c>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	edd3 7a01 	vldr	s15, [r3, #4]
 800308a:	eef0 7ae7 	vabs.f32	s15, s15
 800308e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80030e0 <KalmanFilter_Update+0x88>
 8003092:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309a:	d503      	bpl.n	80030a4 <KalmanFilter_Update+0x4c>
        kf->in_mach_transition = 1;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	649a      	str	r2, [r3, #72]	@ 0x48
 80030a2:	e002      	b.n	80030aa <KalmanFilter_Update+0x52>
    } else {
        kf->in_mach_transition = 0;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // Time update (prediction)
    KalmanFilter_TimeUpdate(kf, dt);
 80030aa:	ed97 0a00 	vldr	s0, [r7]
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f818 	bl	80030e4 <KalmanFilter_TimeUpdate>

    // Measurement update (correction)
    KalmanFilter_MeasurementUpdate(kf, altitude, accel);
 80030b4:	edd7 0a01 	vldr	s1, [r7, #4]
 80030b8:	ed97 0a02 	vldr	s0, [r7, #8]
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fa1d 	bl	80034fc <KalmanFilter_MeasurementUpdate>

    // Check for apogee
    KalmanFilter_DetectApogee(kf);
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f001 f96a 	bl	800439c <KalmanFilter_DetectApogee>

    // Return filtered altitude
    return kf->x[0];
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	ee07 3a90 	vmov	s15, r3
}
 80030d0:	eeb0 0a67 	vmov.f32	s0, s15
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	43960000 	.word	0x43960000
 80030e0:	43af0000 	.word	0x43af0000

080030e4 <KalmanFilter_TimeUpdate>:
/**
 * @brief Time update step of Kalman filter (prediction)
 * @param kf Pointer to Kalman filter structure
 * @param dt Time step (seconds)
 */
static void KalmanFilter_TimeUpdate(KalmanFilter_t *kf, float dt) {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b0b6      	sub	sp, #216	@ 0xd8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	ed87 0a00 	vstr	s0, [r7]
    float dt2 = dt * dt;
 80030f0:	edd7 7a00 	vldr	s15, [r7]
 80030f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80030f8:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
    float dt3 = dt2 * dt;
 80030fc:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003100:	edd7 7a00 	vldr	s15, [r7]
 8003104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003108:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
    float dt4 = dt2 * dt2;
 800310c:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003110:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003114:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac

    // State transition matrix F = [1 dt dt²/2; 0 1 dt; 0 0 1]
    // State prediction: x = F*x
    float x0_new = kf->x[0] + kf->x[1] * dt + kf->x[2] * dt2 / 2.0f;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	ed93 7a00 	vldr	s14, [r3]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	edd3 6a01 	vldr	s13, [r3, #4]
 8003124:	edd7 7a00 	vldr	s15, [r7]
 8003128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800312c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	edd3 6a02 	vldr	s13, [r3, #8]
 8003136:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800313a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800313e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003142:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800314a:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
    float x1_new = kf->x[1] + kf->x[2] * dt;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	ed93 7a01 	vldr	s14, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	edd3 6a02 	vldr	s13, [r3, #8]
 800315a:	edd7 7a00 	vldr	s15, [r7]
 800315e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003166:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
    float x2_new = kf->x[2];  // Acceleration assumed constant
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    kf->x[0] = x0_new;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003178:	601a      	str	r2, [r3, #0]
    kf->x[1] = x1_new;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003180:	605a      	str	r2, [r3, #4]
    kf->x[2] = x2_new;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003188:	609a      	str	r2, [r3, #8]

    // Process noise covariance Q
    float q = kf->process_noise;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    float Q[3][3] = {
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 8003192:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003196:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800319a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800319e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80031a2:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80031a6:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80031aa:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80031ae:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80031b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80031b6:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80031ba:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80031be:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80031c2:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80031c6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80031ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80031ce:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80031d2:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80031d6:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
        {dt3/2.0f * q, dt2 * q, dt * q},
 80031da:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80031de:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80031e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80031e6:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80031ea:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80031ee:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
        {dt3/2.0f * q, dt2 * q, dt * q},
 80031f2:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80031f6:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80031fa:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80031fe:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
        {dt3/2.0f * q, dt2 * q, dt * q},
 8003202:	ed97 7a00 	vldr	s14, [r7]
 8003206:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800320a:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800320e:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
        {dt2/2.0f * q, dt * q, q}
 8003212:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003216:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800321a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800321e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003222:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003226:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
        {dt2/2.0f * q, dt * q, q}
 800322a:	ed97 7a00 	vldr	s14, [r7]
 800322e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003232:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003236:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 800323a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800323e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    };

    // State transition matrix F
    float F[3][3] = {
 8003242:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003246:	657b      	str	r3, [r7, #84]	@ 0x54
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	65bb      	str	r3, [r7, #88]	@ 0x58
        {1.0f, dt, dt2/2.0f},
 800324c:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003250:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003254:	eec7 7a26 	vdiv.f32	s15, s14, s13
    float F[3][3] = {
 8003258:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	663b      	str	r3, [r7, #96]	@ 0x60
 8003262:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003266:	667b      	str	r3, [r7, #100]	@ 0x64
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	673b      	str	r3, [r7, #112]	@ 0x70
 8003278:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800327c:	677b      	str	r3, [r7, #116]	@ 0x74
        {0.0f, 1.0f, dt},
        {0.0f, 0.0f, 1.0f}
    };

    // Temporary matrices for calculation
    float FP[3][3] = {0};
 800327e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003282:	2224      	movs	r2, #36	@ 0x24
 8003284:	2100      	movs	r1, #0
 8003286:	4618      	mov	r0, r3
 8003288:	f009 fde7 	bl	800ce5a <memset>
    float FPFT[3][3] = {0};
 800328c:	f107 030c 	add.w	r3, r7, #12
 8003290:	2224      	movs	r2, #36	@ 0x24
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f009 fde0 	bl	800ce5a <memset>

    // P = F*P*F' + Q
    // Step 1: FP = F*P
    for (int i = 0; i < 3; i++) {
 800329a:	2300      	movs	r3, #0
 800329c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80032a0:	e06a      	b.n	8003378 <KalmanFilter_TimeUpdate+0x294>
        for (int j = 0; j < 3; j++) {
 80032a2:	2300      	movs	r3, #0
 80032a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032a8:	e05d      	b.n	8003366 <KalmanFilter_TimeUpdate+0x282>
            FP[i][j] = 0.0f;
 80032aa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80032ae:	4613      	mov	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	33d8      	adds	r3, #216	@ 0xd8
 80032be:	443b      	add	r3, r7
 80032c0:	3ba8      	subs	r3, #168	@ 0xa8
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 80032c8:	2300      	movs	r3, #0
 80032ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032ce:	e041      	b.n	8003354 <KalmanFilter_TimeUpdate+0x270>
                FP[i][j] += F[i][k] * kf->P[k][j];
 80032d0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80032d4:	4613      	mov	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	4413      	add	r3, r2
 80032da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	33d8      	adds	r3, #216	@ 0xd8
 80032e4:	443b      	add	r3, r7
 80032e6:	3ba8      	subs	r3, #168	@ 0xa8
 80032e8:	ed93 7a00 	vldr	s14, [r3]
 80032ec:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80032f0:	4613      	mov	r3, r2
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4413      	add	r3, r2
 80032f6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	33d8      	adds	r3, #216	@ 0xd8
 8003300:	443b      	add	r3, r7
 8003302:	3b84      	subs	r3, #132	@ 0x84
 8003304:	edd3 6a00 	vldr	s13, [r3]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800330e:	4613      	mov	r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	4413      	add	r3, r2
 8003314:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003318:	4413      	add	r3, r2
 800331a:	3302      	adds	r3, #2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	3304      	adds	r3, #4
 8003322:	edd3 7a00 	vldr	s15, [r3]
 8003326:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800332a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800332e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003332:	4613      	mov	r3, r2
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	4413      	add	r3, r2
 8003338:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	33d8      	adds	r3, #216	@ 0xd8
 8003342:	443b      	add	r3, r7
 8003344:	3ba8      	subs	r3, #168	@ 0xa8
 8003346:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 800334a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800334e:	3301      	adds	r3, #1
 8003350:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003354:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003358:	2b02      	cmp	r3, #2
 800335a:	ddb9      	ble.n	80032d0 <KalmanFilter_TimeUpdate+0x1ec>
        for (int j = 0; j < 3; j++) {
 800335c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003360:	3301      	adds	r3, #1
 8003362:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003366:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800336a:	2b02      	cmp	r3, #2
 800336c:	dd9d      	ble.n	80032aa <KalmanFilter_TimeUpdate+0x1c6>
    for (int i = 0; i < 3; i++) {
 800336e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003372:	3301      	adds	r3, #1
 8003374:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003378:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800337c:	2b02      	cmp	r3, #2
 800337e:	dd90      	ble.n	80032a2 <KalmanFilter_TimeUpdate+0x1be>
            }
        }
    }

    // Step 2: FPFT = FP*F'
    for (int i = 0; i < 3; i++) {
 8003380:	2300      	movs	r3, #0
 8003382:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003386:	e069      	b.n	800345c <KalmanFilter_TimeUpdate+0x378>
        for (int j = 0; j < 3; j++) {
 8003388:	2300      	movs	r3, #0
 800338a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800338e:	e05c      	b.n	800344a <KalmanFilter_TimeUpdate+0x366>
            FPFT[i][j] = 0.0f;
 8003390:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003394:	4613      	mov	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4413      	add	r3, r2
 800339a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	33d8      	adds	r3, #216	@ 0xd8
 80033a4:	443b      	add	r3, r7
 80033a6:	3bcc      	subs	r3, #204	@ 0xcc
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 80033ae:	2300      	movs	r3, #0
 80033b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033b4:	e040      	b.n	8003438 <KalmanFilter_TimeUpdate+0x354>
                FPFT[i][j] += FP[i][k] * F[j][k];  // F'[k][j] = F[j][k]
 80033b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	33d8      	adds	r3, #216	@ 0xd8
 80033ca:	443b      	add	r3, r7
 80033cc:	3bcc      	subs	r3, #204	@ 0xcc
 80033ce:	ed93 7a00 	vldr	s14, [r3]
 80033d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80033d6:	4613      	mov	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	33d8      	adds	r3, #216	@ 0xd8
 80033e6:	443b      	add	r3, r7
 80033e8:	3ba8      	subs	r3, #168	@ 0xa8
 80033ea:	edd3 6a00 	vldr	s13, [r3]
 80033ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80033f2:	4613      	mov	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4413      	add	r3, r2
 80033f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	33d8      	adds	r3, #216	@ 0xd8
 8003402:	443b      	add	r3, r7
 8003404:	3b84      	subs	r3, #132	@ 0x84
 8003406:	edd3 7a00 	vldr	s15, [r3]
 800340a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800340e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003412:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003416:	4613      	mov	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4413      	add	r3, r2
 800341c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	33d8      	adds	r3, #216	@ 0xd8
 8003426:	443b      	add	r3, r7
 8003428:	3bcc      	subs	r3, #204	@ 0xcc
 800342a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 800342e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003432:	3301      	adds	r3, #1
 8003434:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003438:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800343c:	2b02      	cmp	r3, #2
 800343e:	ddba      	ble.n	80033b6 <KalmanFilter_TimeUpdate+0x2d2>
        for (int j = 0; j < 3; j++) {
 8003440:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003444:	3301      	adds	r3, #1
 8003446:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800344a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800344e:	2b02      	cmp	r3, #2
 8003450:	dd9e      	ble.n	8003390 <KalmanFilter_TimeUpdate+0x2ac>
    for (int i = 0; i < 3; i++) {
 8003452:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003456:	3301      	adds	r3, #1
 8003458:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800345c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003460:	2b02      	cmp	r3, #2
 8003462:	dd91      	ble.n	8003388 <KalmanFilter_TimeUpdate+0x2a4>
            }
        }
    }

    // Step 3: P = FPFT + Q
    for (int i = 0; i < 3; i++) {
 8003464:	2300      	movs	r3, #0
 8003466:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800346a:	e03e      	b.n	80034ea <KalmanFilter_TimeUpdate+0x406>
        for (int j = 0; j < 3; j++) {
 800346c:	2300      	movs	r3, #0
 800346e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003472:	e031      	b.n	80034d8 <KalmanFilter_TimeUpdate+0x3f4>
            kf->P[i][j] = FPFT[i][j] + Q[i][j];
 8003474:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003478:	4613      	mov	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4413      	add	r3, r2
 800347e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	33d8      	adds	r3, #216	@ 0xd8
 8003488:	443b      	add	r3, r7
 800348a:	3bcc      	subs	r3, #204	@ 0xcc
 800348c:	ed93 7a00 	vldr	s14, [r3]
 8003490:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003494:	4613      	mov	r3, r2
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4413      	add	r3, r2
 800349a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	33d8      	adds	r3, #216	@ 0xd8
 80034a4:	443b      	add	r3, r7
 80034a6:	3b60      	subs	r3, #96	@ 0x60
 80034a8:	edd3 7a00 	vldr	s15, [r3]
 80034ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80034b6:	4613      	mov	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4413      	add	r3, r2
 80034bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80034c0:	4413      	add	r3, r2
 80034c2:	3302      	adds	r3, #2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3304      	adds	r3, #4
 80034ca:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 80034ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034d2:	3301      	adds	r3, #1
 80034d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034dc:	2b02      	cmp	r3, #2
 80034de:	ddc9      	ble.n	8003474 <KalmanFilter_TimeUpdate+0x390>
    for (int i = 0; i < 3; i++) {
 80034e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034e4:	3301      	adds	r3, #1
 80034e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80034ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	ddbc      	ble.n	800346c <KalmanFilter_TimeUpdate+0x388>
        }
    }
}
 80034f2:	bf00      	nop
 80034f4:	bf00      	nop
 80034f6:	37d8      	adds	r7, #216	@ 0xd8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <KalmanFilter_MeasurementUpdate>:
 * @brief Measurement update step of Kalman filter (correction)
 * @param kf Pointer to Kalman filter structure
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 */
static void KalmanFilter_MeasurementUpdate(KalmanFilter_t *kf, float altitude, float accel) {
 80034fc:	b5b0      	push	{r4, r5, r7, lr}
 80034fe:	b0f6      	sub	sp, #472	@ 0x1d8
 8003500:	af00      	add	r7, sp, #0
 8003502:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003506:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800350a:	6018      	str	r0, [r3, #0]
 800350c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003510:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003514:	ed83 0a00 	vstr	s0, [r3]
 8003518:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800351c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003520:	edc3 0a00 	vstr	s1, [r3]
    // In Mach transition region, only use acceleration measurement
    if (kf->in_mach_transition) {
 8003524:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003528:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 826b 	beq.w	8003a0c <KalmanFilter_MeasurementUpdate+0x510>
        // Only use acceleration measurement
        // H = [0 0 1]
        float H[1][3] = {{0.0f, 0.0f, 1.0f}};
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003546:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800354a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
        float z = accel;
 800354e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003552:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
        float y = z - kf->x[2];  // Innovation
 800355c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003560:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	edd3 7a02 	vldr	s15, [r3, #8]
 800356a:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 800356e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003572:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c

        // S = H*P*H' + R
        float HP[1][3] = {0};
 8003576:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	605a      	str	r2, [r3, #4]
 8003580:	609a      	str	r2, [r3, #8]
        float S = 0.0f;
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

        for (int i = 0; i < 3; i++) {
 800358a:	2300      	movs	r3, #0
 800358c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8003590:	e044      	b.n	800361c <KalmanFilter_MeasurementUpdate+0x120>
            HP[0][i] = H[0][0]*kf->P[0][i] + H[0][1]*kf->P[1][i] + H[0][2]*kf->P[2][i];
 8003592:	ed97 7a4e 	vldr	s14, [r7, #312]	@ 0x138
 8003596:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800359a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80035a4:	3302      	adds	r3, #2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	3304      	adds	r3, #4
 80035ac:	edd3 7a00 	vldr	s15, [r3]
 80035b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035b4:	edd7 6a4f 	vldr	s13, [r7, #316]	@ 0x13c
 80035b8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80035bc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80035c6:	3305      	adds	r3, #5
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	3304      	adds	r3, #4
 80035ce:	edd3 7a00 	vldr	s15, [r3]
 80035d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035da:	edd7 6a50 	vldr	s13, [r7, #320]	@ 0x140
 80035de:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80035e2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80035ec:	3308      	adds	r3, #8
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	3304      	adds	r3, #4
 80035f4:	edd3 7a00 	vldr	s15, [r3]
 80035f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003600:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800360a:	443b      	add	r3, r7
 800360c:	3bac      	subs	r3, #172	@ 0xac
 800360e:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003612:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003616:	3301      	adds	r3, #1
 8003618:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 800361c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003620:	2b02      	cmp	r3, #2
 8003622:	ddb6      	ble.n	8003592 <KalmanFilter_MeasurementUpdate+0x96>
        }

        S = HP[0][0]*H[0][0] + HP[0][1]*H[0][1] + HP[0][2]*H[0][2] + kf->measurement_noise_acc;
 8003624:	ed97 7a4b 	vldr	s14, [r7, #300]	@ 0x12c
 8003628:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 800362c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003630:	edd7 6a4c 	vldr	s13, [r7, #304]	@ 0x130
 8003634:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 8003638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800363c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003640:	edd7 6a4d 	vldr	s13, [r7, #308]	@ 0x134
 8003644:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8003648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800364c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003650:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003654:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800365e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003662:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148

        // K = P*H'*S^-1
        float K[3] = {0};
 8003666:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	605a      	str	r2, [r3, #4]
 8003670:	609a      	str	r2, [r3, #8]
        float S_inv = 1.0f / S;
 8003672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003676:	ed97 7a52 	vldr	s14, [r7, #328]	@ 0x148
 800367a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800367e:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144

        for (int i = 0; i < 3; i++) {
 8003682:	2300      	movs	r3, #0
 8003684:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003688:	e04f      	b.n	800372a <KalmanFilter_MeasurementUpdate+0x22e>
            K[i] = (kf->P[i][0]*H[0][0] + kf->P[i][1]*H[0][1] + kf->P[i][2]*H[0][2]) * S_inv;
 800368a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800368e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003692:	6819      	ldr	r1, [r3, #0]
 8003694:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8003698:	4613      	mov	r3, r2
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	330c      	adds	r3, #12
 80036a4:	ed93 7a00 	vldr	s14, [r3]
 80036a8:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 80036ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036b0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80036b4:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80036b8:	6819      	ldr	r1, [r3, #0]
 80036ba:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	4613      	mov	r3, r2
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	3304      	adds	r3, #4
 80036cc:	edd3 6a00 	vldr	s13, [r3]
 80036d0:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 80036d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036dc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80036e0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80036e4:	6819      	ldr	r1, [r3, #0]
 80036e6:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	3314      	adds	r3, #20
 80036f6:	edd3 6a00 	vldr	s13, [r3]
 80036fa:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 80036fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003702:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003706:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 800370a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800370e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003718:	443b      	add	r3, r7
 800371a:	3bb8      	subs	r3, #184	@ 0xb8
 800371c:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003720:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003724:	3301      	adds	r3, #1
 8003726:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800372a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800372e:	2b02      	cmp	r3, #2
 8003730:	ddab      	ble.n	800368a <KalmanFilter_MeasurementUpdate+0x18e>
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 8003732:	2300      	movs	r3, #0
 8003734:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003738:	e029      	b.n	800378e <KalmanFilter_MeasurementUpdate+0x292>
            kf->x[i] += K[i] * y;
 800373a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800373e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	ed93 7a00 	vldr	s14, [r3]
 8003750:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800375a:	443b      	add	r3, r7
 800375c:	3bb8      	subs	r3, #184	@ 0xb8
 800375e:	edd3 6a00 	vldr	s13, [r3]
 8003762:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 8003766:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800376a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800376e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003772:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003784:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003788:	3301      	adds	r3, #1
 800378a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 800378e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003792:	2b02      	cmp	r3, #2
 8003794:	ddd1      	ble.n	800373a <KalmanFilter_MeasurementUpdate+0x23e>
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 8003796:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800379a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800379e:	4618      	mov	r0, r3
 80037a0:	2324      	movs	r3, #36	@ 0x24
 80037a2:	461a      	mov	r2, r3
 80037a4:	2100      	movs	r1, #0
 80037a6:	f009 fb58 	bl	800ce5a <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 80037aa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037ae:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80037b2:	4618      	mov	r0, r3
 80037b4:	2324      	movs	r3, #36	@ 0x24
 80037b6:	461a      	mov	r2, r3
 80037b8:	2100      	movs	r1, #0
 80037ba:	f009 fb4e 	bl	800ce5a <memset>

        for (int i = 0; i < 3; i++) {
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80037c4:	e062      	b.n	800388c <KalmanFilter_MeasurementUpdate+0x390>
            for (int j = 0; j < 3; j++) {
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80037cc:	e055      	b.n	800387a <KalmanFilter_MeasurementUpdate+0x37e>
                KH[i][j] = K[i] * H[0][j];
 80037ce:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80037d8:	443b      	add	r3, r7
 80037da:	3bb8      	subs	r3, #184	@ 0xb8
 80037dc:	ed93 7a00 	vldr	s14, [r3]
 80037e0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80037ea:	443b      	add	r3, r7
 80037ec:	3ba0      	subs	r3, #160	@ 0xa0
 80037ee:	edd3 7a00 	vldr	s15, [r3]
 80037f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037fa:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80037fe:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003802:	4613      	mov	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4413      	add	r3, r2
 8003808:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	edc3 7a00 	vstr	s15, [r3]
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 8003816:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 800381a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800381e:	429a      	cmp	r2, r3
 8003820:	d102      	bne.n	8003828 <KalmanFilter_MeasurementUpdate+0x32c>
 8003822:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003826:	e001      	b.n	800382c <KalmanFilter_MeasurementUpdate+0x330>
 8003828:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8003b18 <KalmanFilter_MeasurementUpdate+0x61c>
 800382c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003830:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003834:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003838:	4613      	mov	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4413      	add	r3, r2
 800383e:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	edd3 7a00 	vldr	s15, [r3]
 800384c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003850:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003854:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003858:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8003870:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003874:	3301      	adds	r3, #1
 8003876:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800387a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800387e:	2b02      	cmp	r3, #2
 8003880:	dda5      	ble.n	80037ce <KalmanFilter_MeasurementUpdate+0x2d2>
        for (int i = 0; i < 3; i++) {
 8003882:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003886:	3301      	adds	r3, #1
 8003888:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800388c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003890:	2b02      	cmp	r3, #2
 8003892:	dd98      	ble.n	80037c6 <KalmanFilter_MeasurementUpdate+0x2ca>
            }
        }

        for (int i = 0; i < 3; i++) {
 8003894:	2300      	movs	r3, #0
 8003896:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800389a:	e076      	b.n	800398a <KalmanFilter_MeasurementUpdate+0x48e>
            for (int j = 0; j < 3; j++) {
 800389c:	2300      	movs	r3, #0
 800389e:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80038a2:	e069      	b.n	8003978 <KalmanFilter_MeasurementUpdate+0x47c>
                Pnew[i][j] = 0.0f;
 80038a4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038a8:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80038ac:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 80038b0:	4613      	mov	r3, r2
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	4413      	add	r3, r2
 80038b6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 80038c6:	2300      	movs	r3, #0
 80038c8:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80038cc:	e04b      	b.n	8003966 <KalmanFilter_MeasurementUpdate+0x46a>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 80038ce:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038d2:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80038d6:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 80038da:	4613      	mov	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	4413      	add	r3, r2
 80038e0:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	ed93 7a00 	vldr	s14, [r3]
 80038ee:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038f2:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 80038f6:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 80038fa:	4613      	mov	r3, r2
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	4413      	add	r3, r2
 8003900:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	edd3 6a00 	vldr	s13, [r3]
 800390e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003912:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003916:	6819      	ldr	r1, [r3, #0]
 8003918:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800391c:	4613      	mov	r3, r2
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4413      	add	r3, r2
 8003922:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003926:	4413      	add	r3, r2
 8003928:	3302      	adds	r3, #2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	3304      	adds	r3, #4
 8003930:	edd3 7a00 	vldr	s15, [r3]
 8003934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800393c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003940:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003944:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003948:	4613      	mov	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4413      	add	r3, r2
 800394e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 800395c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003960:	3301      	adds	r3, #1
 8003962:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003966:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800396a:	2b02      	cmp	r3, #2
 800396c:	ddaf      	ble.n	80038ce <KalmanFilter_MeasurementUpdate+0x3d2>
            for (int j = 0; j < 3; j++) {
 800396e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003972:	3301      	adds	r3, #1
 8003974:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003978:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800397c:	2b02      	cmp	r3, #2
 800397e:	dd91      	ble.n	80038a4 <KalmanFilter_MeasurementUpdate+0x3a8>
        for (int i = 0; i < 3; i++) {
 8003980:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003984:	3301      	adds	r3, #1
 8003986:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800398a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800398e:	2b02      	cmp	r3, #2
 8003990:	dd84      	ble.n	800389c <KalmanFilter_MeasurementUpdate+0x3a0>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8003992:	2300      	movs	r3, #0
 8003994:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003998:	e032      	b.n	8003a00 <KalmanFilter_MeasurementUpdate+0x504>
            for (int j = 0; j < 3; j++) {
 800399a:	2300      	movs	r3, #0
 800399c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80039a0:	e025      	b.n	80039ee <KalmanFilter_MeasurementUpdate+0x4f2>
                kf->P[i][j] = Pnew[i][j];
 80039a2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039a6:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80039aa:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80039ae:	4613      	mov	r3, r2
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	4413      	add	r3, r2
 80039b4:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	6819      	ldr	r1, [r3, #0]
 80039c0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039c4:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80039ce:	4613      	mov	r3, r2
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	4413      	add	r3, r2
 80039d4:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 80039d8:	4413      	add	r3, r2
 80039da:	3302      	adds	r3, #2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4403      	add	r3, r0
 80039e0:	3304      	adds	r3, #4
 80039e2:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 80039e4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80039e8:	3301      	adds	r3, #1
 80039ea:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80039ee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	ddd5      	ble.n	80039a2 <KalmanFilter_MeasurementUpdate+0x4a6>
        for (int i = 0; i < 3; i++) {
 80039f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80039fa:	3301      	adds	r3, #1
 80039fc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003a00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	ddc8      	ble.n	800399a <KalmanFilter_MeasurementUpdate+0x49e>
 8003a08:	f000 bcc2 	b.w	8004390 <KalmanFilter_MeasurementUpdate+0xe94>
            }
        }
    } else {
        // Use both altitude and acceleration measurements
        // H = [1 0 0; 0 0 1]
        float H[2][3] = {
 8003a0c:	4b43      	ldr	r3, [pc, #268]	@ (8003b1c <KalmanFilter_MeasurementUpdate+0x620>)
 8003a0e:	f507 7484 	add.w	r4, r7, #264	@ 0x108
 8003a12:	461d      	mov	r5, r3
 8003a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a18:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003a1c:	e884 0003 	stmia.w	r4, {r0, r1}
            {1.0f, 0.0f, 0.0f},
            {0.0f, 0.0f, 1.0f}
        };

        float z[2] = {altitude, accel};
 8003a20:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a24:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003a2e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a32:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        float y[2] = {z[0] - kf->x[0], z[1] - kf->x[2]};  // Innovation
 8003a3c:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8003a40:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a44:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	edd3 7a00 	vldr	s15, [r3]
 8003a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a52:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
 8003a56:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8003a5a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a5e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a6c:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

        // S = H*P*H' + R
        float HP[2][3] = {0};
 8003a70:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	605a      	str	r2, [r3, #4]
 8003a7a:	609a      	str	r2, [r3, #8]
 8003a7c:	60da      	str	r2, [r3, #12]
 8003a7e:	611a      	str	r2, [r3, #16]
 8003a80:	615a      	str	r2, [r3, #20]
        float S[2][2] = {0};
 8003a82:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	6053      	str	r3, [r2, #4]
 8003a92:	6093      	str	r3, [r2, #8]
 8003a94:	60d3      	str	r3, [r2, #12]
        float R[2][2] = {
            {kf->measurement_noise_alt, 0.0f},
 8003a96:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a9a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
        float R[2][2] = {
 8003aa2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003aa6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ab0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003abe:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	609a      	str	r2, [r3, #8]
            {0.0f, kf->measurement_noise_acc}
 8003ac8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003acc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
        float R[2][2] = {
 8003ad4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ad8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003adc:	60da      	str	r2, [r3, #12]
        };

        for (int i = 0; i < 2; i++) {
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003ae4:	e079      	b.n	8003bda <KalmanFilter_MeasurementUpdate+0x6de>
            for (int j = 0; j < 3; j++) {
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003aec:	e06c      	b.n	8003bc8 <KalmanFilter_MeasurementUpdate+0x6cc>
                HP[i][j] = 0.0f;
 8003aee:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003af2:	4613      	mov	r3, r2
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	4413      	add	r3, r2
 8003af8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003b04:	443b      	add	r3, r7
 8003b06:	3bf8      	subs	r3, #248	@ 0xf8
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003b14:	e04f      	b.n	8003bb6 <KalmanFilter_MeasurementUpdate+0x6ba>
 8003b16:	bf00      	nop
 8003b18:	00000000 	.word	0x00000000
 8003b1c:	08011410 	.word	0x08011410
 8003b20:	358637bd 	.word	0x358637bd
                    HP[i][j] += H[i][k] * kf->P[k][j];
 8003b24:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003b28:	4613      	mov	r3, r2
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003b3a:	443b      	add	r3, r7
 8003b3c:	3bf8      	subs	r3, #248	@ 0xf8
 8003b3e:	ed93 7a00 	vldr	s14, [r3]
 8003b42:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003b46:	4613      	mov	r3, r2
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003b58:	443b      	add	r3, r7
 8003b5a:	3bd0      	subs	r3, #208	@ 0xd0
 8003b5c:	edd3 6a00 	vldr	s13, [r3]
 8003b60:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b64:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003b68:	6819      	ldr	r1, [r3, #0]
 8003b6a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003b6e:	4613      	mov	r3, r2
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	4413      	add	r3, r2
 8003b74:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003b78:	4413      	add	r3, r2
 8003b7a:	3302      	adds	r3, #2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	3304      	adds	r3, #4
 8003b82:	edd3 7a00 	vldr	s15, [r3]
 8003b86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b8e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003b92:	4613      	mov	r3, r2
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	4413      	add	r3, r2
 8003b98:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003ba4:	443b      	add	r3, r7
 8003ba6:	3bf8      	subs	r3, #248	@ 0xf8
 8003ba8:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003bac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003bb6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	ddb2      	ble.n	8003b24 <KalmanFilter_MeasurementUpdate+0x628>
            for (int j = 0; j < 3; j++) {
 8003bbe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003bc8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	dd8e      	ble.n	8003aee <KalmanFilter_MeasurementUpdate+0x5f2>
        for (int i = 0; i < 2; i++) {
 8003bd0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003bda:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	dd81      	ble.n	8003ae6 <KalmanFilter_MeasurementUpdate+0x5ea>
                }
            }
        }

        for (int i = 0; i < 2; i++) {
 8003be2:	2300      	movs	r3, #0
 8003be4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003be8:	e098      	b.n	8003d1c <KalmanFilter_MeasurementUpdate+0x820>
            for (int j = 0; j < 2; j++) {
 8003bea:	2300      	movs	r3, #0
 8003bec:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003bf0:	e08a      	b.n	8003d08 <KalmanFilter_MeasurementUpdate+0x80c>
                S[i][j] = 0.0f;
 8003bf2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003bf6:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003bfa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003bfe:	0059      	lsls	r1, r3, #1
 8003c00:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003c04:	440b      	add	r3, r1
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003c10:	2300      	movs	r3, #0
 8003c12:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003c16:	e042      	b.n	8003c9e <KalmanFilter_MeasurementUpdate+0x7a2>
                    S[i][j] += HP[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8003c18:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c1c:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003c20:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003c24:	0059      	lsls	r1, r3, #1
 8003c26:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003c2a:	440b      	add	r3, r1
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	ed93 7a00 	vldr	s14, [r3]
 8003c34:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8003c38:	4613      	mov	r3, r2
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003c4a:	443b      	add	r3, r7
 8003c4c:	3bf8      	subs	r3, #248	@ 0xf8
 8003c4e:	edd3 6a00 	vldr	s13, [r3]
 8003c52:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003c56:	4613      	mov	r3, r2
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003c68:	443b      	add	r3, r7
 8003c6a:	3bd0      	subs	r3, #208	@ 0xd0
 8003c6c:	edd3 7a00 	vldr	s15, [r3]
 8003c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c78:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c7c:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003c80:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003c84:	0059      	lsls	r1, r3, #1
 8003c86:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003c8a:	440b      	add	r3, r1
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003c94:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003c98:	3301      	adds	r3, #1
 8003c9a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003c9e:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	ddb8      	ble.n	8003c18 <KalmanFilter_MeasurementUpdate+0x71c>
                }
                S[i][j] += R[i][j];
 8003ca6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003caa:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003cae:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003cb2:	0059      	lsls	r1, r3, #1
 8003cb4:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003cb8:	440b      	add	r3, r1
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	ed93 7a00 	vldr	s14, [r3]
 8003cc2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cc6:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8003cca:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003cce:	0059      	lsls	r1, r3, #1
 8003cd0:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003cd4:	440b      	add	r3, r1
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	edd3 7a00 	vldr	s15, [r3]
 8003cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ce2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ce6:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003cea:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003cee:	0059      	lsls	r1, r3, #1
 8003cf0:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003cf4:	440b      	add	r3, r1
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 8003cfe:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003d02:	3301      	adds	r3, #1
 8003d04:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003d08:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	f77f af70 	ble.w	8003bf2 <KalmanFilter_MeasurementUpdate+0x6f6>
        for (int i = 0; i < 2; i++) {
 8003d12:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003d16:	3301      	adds	r3, #1
 8003d18:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003d1c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	f77f af62 	ble.w	8003bea <KalmanFilter_MeasurementUpdate+0x6ee>
            }
        }

        // Calculate S^-1 (inverse of 2x2 matrix)
        float det = S[0][0] * S[1][1] - S[0][1] * S[1][0];
 8003d26:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d2e:	ed93 7a00 	vldr	s14, [r3]
 8003d32:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d42:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d4a:	edd3 6a01 	vldr	s13, [r3, #4]
 8003d4e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d56:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d62:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
        if (fabsf(det) < 1e-6f) {
 8003d66:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 8003d6a:	eef0 7ae7 	vabs.f32	s15, s15
 8003d6e:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 8003b20 <KalmanFilter_MeasurementUpdate+0x624>
 8003d72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7a:	f100 8308 	bmi.w	800438e <KalmanFilter_MeasurementUpdate+0xe92>
            // Matrix is singular, skip update
            return;
        }

        float S_inv[2][2] = {
            {S[1][1] / det, -S[0][1] / det},
 8003d7e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d86:	edd3 6a03 	vldr	s13, [r3, #12]
 8003d8a:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003d92:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d96:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003d9a:	edc3 7a00 	vstr	s15, [r3]
            {S[1][1] / det, -S[0][1] / det},
 8003d9e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003da2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003da6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003daa:	eef1 6a67 	vneg.f32	s13, s15
 8003dae:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003db6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003dbe:	edc3 7a01 	vstr	s15, [r3, #4]
            {-S[1][0] / det, S[0][0] / det}
 8003dc2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dca:	edd3 7a02 	vldr	s15, [r3, #8]
 8003dce:	eef1 6a67 	vneg.f32	s13, s15
 8003dd2:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003dda:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dde:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003de2:	edc3 7a02 	vstr	s15, [r3, #8]
            {-S[1][0] / det, S[0][0] / det}
 8003de6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dee:	edd3 6a00 	vldr	s13, [r3]
 8003df2:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003dfa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dfe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e02:	edc3 7a03 	vstr	s15, [r3, #12]
        };

        // K = P*H'*S^-1
        float PHt[3][2] = {0};
 8003e06:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e0a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003e0e:	461a      	mov	r2, r3
 8003e10:	2300      	movs	r3, #0
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	6053      	str	r3, [r2, #4]
 8003e16:	6093      	str	r3, [r2, #8]
 8003e18:	60d3      	str	r3, [r2, #12]
 8003e1a:	6113      	str	r3, [r2, #16]
 8003e1c:	6153      	str	r3, [r2, #20]
        float K[3][2] = {0};
 8003e1e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e22:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003e26:	461a      	mov	r2, r3
 8003e28:	2300      	movs	r3, #0
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	6053      	str	r3, [r2, #4]
 8003e2e:	6093      	str	r3, [r2, #8]
 8003e30:	60d3      	str	r3, [r2, #12]
 8003e32:	6113      	str	r3, [r2, #16]
 8003e34:	6153      	str	r3, [r2, #20]

        for (int i = 0; i < 3; i++) {
 8003e36:	2300      	movs	r3, #0
 8003e38:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8003e3c:	e06f      	b.n	8003f1e <KalmanFilter_MeasurementUpdate+0xa22>
            for (int j = 0; j < 2; j++) {
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8003e44:	e062      	b.n	8003f0c <KalmanFilter_MeasurementUpdate+0xa10>
                PHt[i][j] = 0.0f;
 8003e46:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e4a:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8003e4e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003e52:	0059      	lsls	r1, r3, #1
 8003e54:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003e58:	440b      	add	r3, r1
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003e64:	2300      	movs	r3, #0
 8003e66:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8003e6a:	e046      	b.n	8003efa <KalmanFilter_MeasurementUpdate+0x9fe>
                    PHt[i][j] += kf->P[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8003e6c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e70:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8003e74:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003e78:	0059      	lsls	r1, r3, #1
 8003e7a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003e7e:	440b      	add	r3, r1
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	ed93 7a00 	vldr	s14, [r3]
 8003e88:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e8c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003e90:	6819      	ldr	r1, [r3, #0]
 8003e92:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003e96:	4613      	mov	r3, r2
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8003ea0:	4413      	add	r3, r2
 8003ea2:	3302      	adds	r3, #2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	edd3 6a00 	vldr	s13, [r3]
 8003eae:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003ec4:	443b      	add	r3, r7
 8003ec6:	3bd0      	subs	r3, #208	@ 0xd0
 8003ec8:	edd3 7a00 	vldr	s15, [r3]
 8003ecc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ed4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ed8:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8003edc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003ee0:	0059      	lsls	r1, r3, #1
 8003ee2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003ee6:	440b      	add	r3, r1
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003ef0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8003efa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	ddb4      	ble.n	8003e6c <KalmanFilter_MeasurementUpdate+0x970>
            for (int j = 0; j < 2; j++) {
 8003f02:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003f06:	3301      	adds	r3, #1
 8003f08:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8003f0c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	dd98      	ble.n	8003e46 <KalmanFilter_MeasurementUpdate+0x94a>
        for (int i = 0; i < 3; i++) {
 8003f14:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003f18:	3301      	adds	r3, #1
 8003f1a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8003f1e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	dd8b      	ble.n	8003e3e <KalmanFilter_MeasurementUpdate+0x942>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8003f26:	2300      	movs	r3, #0
 8003f28:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003f2c:	e069      	b.n	8004002 <KalmanFilter_MeasurementUpdate+0xb06>
            for (int j = 0; j < 2; j++) {
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003f34:	e05c      	b.n	8003ff0 <KalmanFilter_MeasurementUpdate+0xaf4>
                K[i][j] = 0.0f;
 8003f36:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f3a:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8003f3e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003f42:	0059      	lsls	r1, r3, #1
 8003f44:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003f48:	440b      	add	r3, r1
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 8003f54:	2300      	movs	r3, #0
 8003f56:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003f5a:	e040      	b.n	8003fde <KalmanFilter_MeasurementUpdate+0xae2>
                    K[i][j] += PHt[i][k] * S_inv[k][j];
 8003f5c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f60:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8003f64:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003f68:	0059      	lsls	r1, r3, #1
 8003f6a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003f6e:	440b      	add	r3, r1
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	ed93 7a00 	vldr	s14, [r3]
 8003f78:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f7c:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8003f80:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003f84:	0059      	lsls	r1, r3, #1
 8003f86:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003f8a:	440b      	add	r3, r1
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	edd3 6a00 	vldr	s13, [r3]
 8003f94:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f98:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8003f9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003fa0:	0059      	lsls	r1, r3, #1
 8003fa2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003fa6:	440b      	add	r3, r1
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	edd3 7a00 	vldr	s15, [r3]
 8003fb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fb8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fbc:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8003fc0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003fc4:	0059      	lsls	r1, r3, #1
 8003fc6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003fca:	440b      	add	r3, r1
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 8003fd4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003fd8:	3301      	adds	r3, #1
 8003fda:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003fde:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	ddba      	ble.n	8003f5c <KalmanFilter_MeasurementUpdate+0xa60>
            for (int j = 0; j < 2; j++) {
 8003fe6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003fea:	3301      	adds	r3, #1
 8003fec:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003ff0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	dd9e      	ble.n	8003f36 <KalmanFilter_MeasurementUpdate+0xa3a>
        for (int i = 0; i < 3; i++) {
 8003ff8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004002:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004006:	2b02      	cmp	r3, #2
 8004008:	dd91      	ble.n	8003f2e <KalmanFilter_MeasurementUpdate+0xa32>
                }
            }
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 800400a:	2300      	movs	r3, #0
 800400c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004010:	e042      	b.n	8004098 <KalmanFilter_MeasurementUpdate+0xb9c>
            for (int j = 0; j < 2; j++) {
 8004012:	2300      	movs	r3, #0
 8004014:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8004018:	e035      	b.n	8004086 <KalmanFilter_MeasurementUpdate+0xb8a>
                kf->x[i] += K[i][j] * y[j];
 800401a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800401e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	ed93 7a00 	vldr	s14, [r3]
 8004030:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004034:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004038:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800403c:	0059      	lsls	r1, r3, #1
 800403e:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004042:	440b      	add	r3, r1
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	edd3 6a00 	vldr	s13, [r3]
 800404c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004056:	443b      	add	r3, r7
 8004058:	3be0      	subs	r3, #224	@ 0xe0
 800405a:	edd3 7a00 	vldr	s15, [r3]
 800405e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004066:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800406a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 800407c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004080:	3301      	adds	r3, #1
 8004082:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8004086:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800408a:	2b01      	cmp	r3, #1
 800408c:	ddc5      	ble.n	800401a <KalmanFilter_MeasurementUpdate+0xb1e>
        for (int i = 0; i < 3; i++) {
 800408e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004092:	3301      	adds	r3, #1
 8004094:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004098:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800409c:	2b02      	cmp	r3, #2
 800409e:	ddb8      	ble.n	8004012 <KalmanFilter_MeasurementUpdate+0xb16>
            }
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 80040a0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040a4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80040a8:	4618      	mov	r0, r3
 80040aa:	2324      	movs	r3, #36	@ 0x24
 80040ac:	461a      	mov	r2, r3
 80040ae:	2100      	movs	r1, #0
 80040b0:	f008 fed3 	bl	800ce5a <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 80040b4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040b8:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80040bc:	4618      	mov	r0, r3
 80040be:	2324      	movs	r3, #36	@ 0x24
 80040c0:	461a      	mov	r2, r3
 80040c2:	2100      	movs	r1, #0
 80040c4:	f008 fec9 	bl	800ce5a <memset>

        for (int i = 0; i < 3; i++) {
 80040c8:	2300      	movs	r3, #0
 80040ca:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80040ce:	e09e      	b.n	800420e <KalmanFilter_MeasurementUpdate+0xd12>
            for (int j = 0; j < 3; j++) {
 80040d0:	2300      	movs	r3, #0
 80040d2:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80040d6:	e090      	b.n	80041fa <KalmanFilter_MeasurementUpdate+0xcfe>
                KH[i][j] = 0.0f;
 80040d8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040dc:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80040e0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80040e4:	4613      	mov	r3, r2
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	4413      	add	r3, r2
 80040ea:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80040ee:	4413      	add	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8004100:	e045      	b.n	800418e <KalmanFilter_MeasurementUpdate+0xc92>
                    KH[i][j] += K[i][k] * H[k][j];
 8004102:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004106:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 800410a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800410e:	4613      	mov	r3, r2
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	4413      	add	r3, r2
 8004114:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	ed93 7a00 	vldr	s14, [r3]
 8004122:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004126:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 800412a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800412e:	0059      	lsls	r1, r3, #1
 8004130:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004134:	440b      	add	r3, r1
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	edd3 6a00 	vldr	s13, [r3]
 800413e:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8004142:	4613      	mov	r3, r2
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	4413      	add	r3, r2
 8004148:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004154:	443b      	add	r3, r7
 8004156:	3bd0      	subs	r3, #208	@ 0xd0
 8004158:	edd3 7a00 	vldr	s15, [r3]
 800415c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004164:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004168:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 800416c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004170:	4613      	mov	r3, r2
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	4413      	add	r3, r2
 8004176:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800417a:	4413      	add	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 8004184:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004188:	3301      	adds	r3, #1
 800418a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800418e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004192:	2b01      	cmp	r3, #1
 8004194:	ddb5      	ble.n	8004102 <KalmanFilter_MeasurementUpdate+0xc06>
                }
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 8004196:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800419a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800419e:	429a      	cmp	r2, r3
 80041a0:	d102      	bne.n	80041a8 <KalmanFilter_MeasurementUpdate+0xcac>
 80041a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041a6:	e001      	b.n	80041ac <KalmanFilter_MeasurementUpdate+0xcb0>
 80041a8:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8004398 <KalmanFilter_MeasurementUpdate+0xe9c>
 80041ac:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041b0:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80041b4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80041b8:	4613      	mov	r3, r2
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	4413      	add	r3, r2
 80041be:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	edd3 7a00 	vldr	s15, [r3]
 80041cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041d0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041d4:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 80041d8:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80041dc:	4613      	mov	r3, r2
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	4413      	add	r3, r2
 80041e2:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 80041f0:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80041f4:	3301      	adds	r3, #1
 80041f6:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80041fa:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80041fe:	2b02      	cmp	r3, #2
 8004200:	f77f af6a 	ble.w	80040d8 <KalmanFilter_MeasurementUpdate+0xbdc>
        for (int i = 0; i < 3; i++) {
 8004204:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8004208:	3301      	adds	r3, #1
 800420a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800420e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8004212:	2b02      	cmp	r3, #2
 8004214:	f77f af5c 	ble.w	80040d0 <KalmanFilter_MeasurementUpdate+0xbd4>
            }
        }

        for (int i = 0; i < 3; i++) {
 8004218:	2300      	movs	r3, #0
 800421a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800421e:	e076      	b.n	800430e <KalmanFilter_MeasurementUpdate+0xe12>
            for (int j = 0; j < 3; j++) {
 8004220:	2300      	movs	r3, #0
 8004222:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8004226:	e069      	b.n	80042fc <KalmanFilter_MeasurementUpdate+0xe00>
                Pnew[i][j] = 0.0f;
 8004228:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800422c:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004230:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004234:	4613      	mov	r3, r2
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	4413      	add	r3, r2
 800423a:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 800424a:	2300      	movs	r3, #0
 800424c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8004250:	e04b      	b.n	80042ea <KalmanFilter_MeasurementUpdate+0xdee>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 8004252:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004256:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 800425a:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 800425e:	4613      	mov	r3, r2
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	4413      	add	r3, r2
 8004264:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	ed93 7a00 	vldr	s14, [r3]
 8004272:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004276:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 800427a:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 800427e:	4613      	mov	r3, r2
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	4413      	add	r3, r2
 8004284:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	edd3 6a00 	vldr	s13, [r3]
 8004292:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004296:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800429a:	6819      	ldr	r1, [r3, #0]
 800429c:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80042a0:	4613      	mov	r3, r2
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	4413      	add	r3, r2
 80042a6:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80042aa:	4413      	add	r3, r2
 80042ac:	3302      	adds	r3, #2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	3304      	adds	r3, #4
 80042b4:	edd3 7a00 	vldr	s15, [r3]
 80042b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042c0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042c4:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80042c8:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80042cc:	4613      	mov	r3, r2
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	4413      	add	r3, r2
 80042d2:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80042d6:	4413      	add	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 80042e0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80042e4:	3301      	adds	r3, #1
 80042e6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80042ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	ddaf      	ble.n	8004252 <KalmanFilter_MeasurementUpdate+0xd56>
            for (int j = 0; j < 3; j++) {
 80042f2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80042f6:	3301      	adds	r3, #1
 80042f8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80042fc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004300:	2b02      	cmp	r3, #2
 8004302:	dd91      	ble.n	8004228 <KalmanFilter_MeasurementUpdate+0xd2c>
        for (int i = 0; i < 3; i++) {
 8004304:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004308:	3301      	adds	r3, #1
 800430a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800430e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004312:	2b02      	cmp	r3, #2
 8004314:	dd84      	ble.n	8004220 <KalmanFilter_MeasurementUpdate+0xd24>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8004316:	2300      	movs	r3, #0
 8004318:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800431c:	e032      	b.n	8004384 <KalmanFilter_MeasurementUpdate+0xe88>
            for (int j = 0; j < 3; j++) {
 800431e:	2300      	movs	r3, #0
 8004320:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004324:	e025      	b.n	8004372 <KalmanFilter_MeasurementUpdate+0xe76>
                kf->P[i][j] = Pnew[i][j];
 8004326:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800432a:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 800432e:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8004332:	4613      	mov	r3, r2
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	4413      	add	r3, r2
 8004338:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800433c:	4413      	add	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	6819      	ldr	r1, [r3, #0]
 8004344:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004348:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8004352:	4613      	mov	r3, r2
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	4413      	add	r3, r2
 8004358:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800435c:	4413      	add	r3, r2
 800435e:	3302      	adds	r3, #2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4403      	add	r3, r0
 8004364:	3304      	adds	r3, #4
 8004366:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 8004368:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800436c:	3301      	adds	r3, #1
 800436e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004372:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004376:	2b02      	cmp	r3, #2
 8004378:	ddd5      	ble.n	8004326 <KalmanFilter_MeasurementUpdate+0xe2a>
        for (int i = 0; i < 3; i++) {
 800437a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800437e:	3301      	adds	r3, #1
 8004380:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004384:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004388:	2b02      	cmp	r3, #2
 800438a:	ddc8      	ble.n	800431e <KalmanFilter_MeasurementUpdate+0xe22>
 800438c:	e000      	b.n	8004390 <KalmanFilter_MeasurementUpdate+0xe94>
            return;
 800438e:	bf00      	nop
            }
        }
    }
}
 8004390:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8004394:	46bd      	mov	sp, r7
 8004396:	bdb0      	pop	{r4, r5, r7, pc}
 8004398:	00000000 	.word	0x00000000

0800439c <KalmanFilter_DetectApogee>:
/**
 * @brief Detect apogee based on velocity trend
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
static int KalmanFilter_DetectApogee(KalmanFilter_t *kf) {
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
    // Velocity is negative and magnitude is increasing
    if (kf->x[1] < 0.0f && kf->x[1] < kf->prev_velocity) {
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80043aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b2:	d517      	bpl.n	80043e4 <KalmanFilter_DetectApogee+0x48>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80043c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c8:	d50c      	bpl.n	80043e4 <KalmanFilter_DetectApogee+0x48>
        kf->apogee_counter++;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	641a      	str	r2, [r3, #64]	@ 0x40
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d8:	2b04      	cmp	r3, #4
 80043da:	dd06      	ble.n	80043ea <KalmanFilter_DetectApogee+0x4e>
            kf->apogee_detected = 1;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	63da      	str	r2, [r3, #60]	@ 0x3c
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 80043e2:	e002      	b.n	80043ea <KalmanFilter_DetectApogee+0x4e>
        }
    } else {
        kf->apogee_counter = 0;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    kf->prev_velocity = kf->x[1];
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	645a      	str	r2, [r3, #68]	@ 0x44
    return kf->apogee_detected;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <KalmanFilter_IsApogeeDetected>:
/**
 * @brief Check if apogee has been detected
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
int KalmanFilter_IsApogeeDetected(KalmanFilter_t *kf) {
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
    return kf->apogee_detected;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800440e:	4618      	mov	r0, r3
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
	...

0800441c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004422:	f003 f959 	bl	80076d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004426:	f000 f8af 	bl	8004588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800442a:	f000 fa3f 	bl	80048ac <MX_GPIO_Init>
  MX_DMA_Init();
 800442e:	f000 fa15 	bl	800485c <MX_DMA_Init>
  MX_I2C1_Init();
 8004432:	f000 f915 	bl	8004660 <MX_I2C1_Init>
  MX_I2C3_Init();
 8004436:	f000 f941 	bl	80046bc <MX_I2C3_Init>
  MX_TIM2_Init();
 800443a:	f000 f96d 	bl	8004718 <MX_TIM2_Init>
  MX_UART5_Init();
 800443e:	f000 f9b9 	bl	80047b4 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8004442:	f000 f9e1 	bl	8004808 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


	MX_TIM2_Init();
 8004446:	f000 f967 	bl	8004718 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 800444a:	4843      	ldr	r0, [pc, #268]	@ (8004558 <main+0x13c>)
 800444c:	f006 f866 	bl	800a51c <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004450:	2200      	movs	r2, #0
 8004452:	2101      	movs	r1, #1
 8004454:	201c      	movs	r0, #28
 8004456:	f003 fad4 	bl	8007a02 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800445a:	201c      	movs	r0, #28
 800445c:	f003 faed 	bl	8007a3a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 8004460:	2201      	movs	r2, #1
 8004462:	2100      	movs	r1, #0
 8004464:	2028      	movs	r0, #40	@ 0x28
 8004466:	f003 facc 	bl	8007a02 <HAL_NVIC_SetPriority>


	bme280_begin();
 800446a:	f000 fac5 	bl	80049f8 <bme280_begin>
	bmi088_begin();
 800446e:	f000 fadb 	bl	8004a28 <bmi088_begin>
	HAL_Delay(1000);
 8004472:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004476:	f003 f9a1 	bl	80077bc <HAL_Delay>
	bme280_config();
 800447a:	f7fc ffaf 	bl	80013dc <bme280_config>
	bmi088_config();
 800447e:	f7fd fd91 	bl	8001fa4 <bmi088_config>
	if(is_BMI_ok){
 8004482:	4b36      	ldr	r3, [pc, #216]	@ (800455c <main+0x140>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <main+0x72>
		  getOffset();
 800448a:	f7fe fb7b 	bl	8002b84 <getOffset>
	}

	bme280_update();
 800448e:	f7fd f961 	bl	8001754 <bme280_update>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004492:	2028      	movs	r0, #40	@ 0x28
 8004494:	f003 fad1 	bl	8007a3a <HAL_NVIC_EnableIRQ>
	BMI_sensor.rawDatas.isGyroUpdated = 0;
 8004498:	4b31      	ldr	r3, [pc, #196]	@ (8004560 <main+0x144>)
 800449a:	2200      	movs	r2, #0
 800449c:	755a      	strb	r2, [r3, #21]
	BMI_sensor.rawDatas.isAccelUpdated = 0;
 800449e:	4b30      	ldr	r3, [pc, #192]	@ (8004560 <main+0x144>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	759a      	strb	r2, [r3, #22]

	getInitialQuaternion();
 80044a4:	f001 ff38 	bl	8006318 <getInitialQuaternion>

	//Lora Ayarı
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, SET);

	sensor_fusion_init(&BME280_sensor);
 80044a8:	482e      	ldr	r0, [pc, #184]	@ (8004564 <main+0x148>)
 80044aa:	f002 f9b7 	bl	800681c <sensor_fusion_init>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, usart1_rx_buffer, 36);
 80044ae:	2224      	movs	r2, #36	@ 0x24
 80044b0:	492d      	ldr	r1, [pc, #180]	@ (8004568 <main+0x14c>)
 80044b2:	482e      	ldr	r0, [pc, #184]	@ (800456c <main+0x150>)
 80044b4:	f006 fdaa 	bl	800b00c <HAL_UARTEx_ReceiveToIdle_DMA>
	flight_algorithm_set_parameters(50.0,2000.0,500.0,60.0);
 80044b8:	eddf 1a2d 	vldr	s3, [pc, #180]	@ 8004570 <main+0x154>
 80044bc:	ed9f 1a2d 	vldr	s2, [pc, #180]	@ 8004574 <main+0x158>
 80044c0:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8004578 <main+0x15c>
 80044c4:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 800457c <main+0x160>
 80044c8:	f7fe fd3a 	bl	8002f40 <flight_algorithm_set_parameters>


	uart_handler_init();
 80044cc:	f002 ff42 	bl	8007354 <uart_handler_init>
	flight_algorithm_init();
 80044d0:	f7fe fbe2 	bl	8002c98 <flight_algorithm_init>
    /* USER CODE BEGIN 3 */




	bmi088_update();
 80044d4:	f7fd ffac 	bl	8002430 <bmi088_update>
		  sensor_fusion_update_mahony(&BMI_sensor, &sensor_output);
 80044d8:	4929      	ldr	r1, [pc, #164]	@ (8004580 <main+0x164>)
 80044da:	4821      	ldr	r0, [pc, #132]	@ (8004560 <main+0x144>)
 80044dc:	f002 fabc 	bl	8006a58 <sensor_fusion_update_mahony>
		  bme280_update();
 80044e0:	f7fd f938 	bl	8001754 <bme280_update>

		  // Process UART packets and handle mode changes
		  uart_handler_process_packets();
 80044e4:	f002 ff50 	bl	8007388 <uart_handler_process_packets>

		  // Clear command flag if it was set
		  if (uart_handler_command_ready()) {
 80044e8:	f003 f84c 	bl	8007584 <uart_handler_command_ready>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d008      	beq.n	8004504 <main+0xe8>
			  uart_handler_clear_command_flag();
 80044f2:	f003 f875 	bl	80075e0 <uart_handler_clear_command_flag>
			  // Reset flight algorithm if switching to NORMAL mode
			  if (uart_handler_get_mode() == MODE_NORMAL) {
 80044f6:	f003 f839 	bl	800756c <uart_handler_get_mode>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <main+0xe8>
				  flight_algorithm_reset();
 8004500:	f7fe fbd0 	bl	8002ca4 <flight_algorithm_reset>
			  }
		  }

		  if (tx_timer_flag) {
 8004504:	4b1f      	ldr	r3, [pc, #124]	@ (8004584 <main+0x168>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0e2      	beq.n	80044d4 <main+0xb8>
			tx_timer_flag = 0;
 800450e:	4b1d      	ldr	r3, [pc, #116]	@ (8004584 <main+0x168>)
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
			//IMU_visual();
			SystemMode_t current_mode = uart_handler_get_mode();
 8004514:	f003 f82a 	bl	800756c <uart_handler_get_mode>
 8004518:	4603      	mov	r3, r0
 800451a:	71fb      	strb	r3, [r7, #7]

				switch (current_mode) {
 800451c:	79fb      	ldrb	r3, [r7, #7]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d016      	beq.n	8004550 <main+0x134>
 8004522:	2b02      	cmp	r3, #2
 8004524:	dcd6      	bgt.n	80044d4 <main+0xb8>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <main+0x114>
 800452a:	2b01      	cmp	r3, #1
 800452c:	d00b      	beq.n	8004546 <main+0x12a>
 800452e:	e012      	b.n	8004556 <main+0x13a>
					case MODE_NORMAL:
						sensor_fusion_update_kalman(&BME280_sensor, &BMI_sensor, &sensor_output);
 8004530:	4a13      	ldr	r2, [pc, #76]	@ (8004580 <main+0x164>)
 8004532:	490b      	ldr	r1, [pc, #44]	@ (8004560 <main+0x144>)
 8004534:	480b      	ldr	r0, [pc, #44]	@ (8004564 <main+0x148>)
 8004536:	f002 f9c7 	bl	80068c8 <sensor_fusion_update_kalman>
						flight_algorithm_update(&BME280_sensor, &BMI_sensor, &sensor_output);
 800453a:	4a11      	ldr	r2, [pc, #68]	@ (8004580 <main+0x164>)
 800453c:	4908      	ldr	r1, [pc, #32]	@ (8004560 <main+0x144>)
 800453e:	4809      	ldr	r0, [pc, #36]	@ (8004564 <main+0x148>)
 8004540:	f7fe fbea 	bl	8002d18 <flight_algorithm_update>
						break;
 8004544:	e007      	b.n	8004556 <main+0x13a>

					case MODE_SIT:
						test_modes_handle_sit(&BME280_sensor, &BMI_sensor);
 8004546:	4906      	ldr	r1, [pc, #24]	@ (8004560 <main+0x144>)
 8004548:	4806      	ldr	r0, [pc, #24]	@ (8004564 <main+0x148>)
 800454a:	f002 fe25 	bl	8007198 <test_modes_handle_sit>
						break;
 800454e:	e002      	b.n	8004556 <main+0x13a>

					case MODE_SUT:
						algorithm_update_sut();
 8004550:	f002 fe3a 	bl	80071c8 <algorithm_update_sut>
						break;
 8004554:	bf00      	nop
	bmi088_update();
 8004556:	e7bd      	b.n	80044d4 <main+0xb8>
 8004558:	20000354 	.word	0x20000354
 800455c:	200006b8 	.word	0x200006b8
 8004560:	20000530 	.word	0x20000530
 8004564:	200004ec 	.word	0x200004ec
 8004568:	2000066c 	.word	0x2000066c
 800456c:	200003e4 	.word	0x200003e4
 8004570:	42700000 	.word	0x42700000
 8004574:	43fa0000 	.word	0x43fa0000
 8004578:	44fa0000 	.word	0x44fa0000
 800457c:	42480000 	.word	0x42480000
 8004580:	20000640 	.word	0x20000640
 8004584:	200006c0 	.word	0x200006c0

08004588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b094      	sub	sp, #80	@ 0x50
 800458c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800458e:	f107 031c 	add.w	r3, r7, #28
 8004592:	2234      	movs	r2, #52	@ 0x34
 8004594:	2100      	movs	r1, #0
 8004596:	4618      	mov	r0, r3
 8004598:	f008 fc5f 	bl	800ce5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800459c:	f107 0308 	add.w	r3, r7, #8
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	605a      	str	r2, [r3, #4]
 80045a6:	609a      	str	r2, [r3, #8]
 80045a8:	60da      	str	r2, [r3, #12]
 80045aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80045ac:	2300      	movs	r3, #0
 80045ae:	607b      	str	r3, [r7, #4]
 80045b0:	4b29      	ldr	r3, [pc, #164]	@ (8004658 <SystemClock_Config+0xd0>)
 80045b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b4:	4a28      	ldr	r2, [pc, #160]	@ (8004658 <SystemClock_Config+0xd0>)
 80045b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80045bc:	4b26      	ldr	r3, [pc, #152]	@ (8004658 <SystemClock_Config+0xd0>)
 80045be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045c4:	607b      	str	r3, [r7, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80045c8:	2300      	movs	r3, #0
 80045ca:	603b      	str	r3, [r7, #0]
 80045cc:	4b23      	ldr	r3, [pc, #140]	@ (800465c <SystemClock_Config+0xd4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a22      	ldr	r2, [pc, #136]	@ (800465c <SystemClock_Config+0xd4>)
 80045d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	4b20      	ldr	r3, [pc, #128]	@ (800465c <SystemClock_Config+0xd4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80045e0:	603b      	str	r3, [r7, #0]
 80045e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80045e4:	2301      	movs	r3, #1
 80045e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80045ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045ee:	2302      	movs	r3, #2
 80045f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80045f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80045f8:	2308      	movs	r3, #8
 80045fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80045fc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004600:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004602:	2302      	movs	r3, #2
 8004604:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004606:	2302      	movs	r3, #2
 8004608:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800460a:	2302      	movs	r3, #2
 800460c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800460e:	f107 031c 	add.w	r3, r7, #28
 8004612:	4618      	mov	r0, r3
 8004614:	f005 fc94 	bl	8009f40 <HAL_RCC_OscConfig>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800461e:	f000 faaf 	bl	8004b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004622:	230f      	movs	r3, #15
 8004624:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004626:	2302      	movs	r3, #2
 8004628:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800462a:	2300      	movs	r3, #0
 800462c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800462e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004638:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800463a:	f107 0308 	add.w	r3, r7, #8
 800463e:	2105      	movs	r1, #5
 8004640:	4618      	mov	r0, r3
 8004642:	f005 f933 	bl	80098ac <HAL_RCC_ClockConfig>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800464c:	f000 fa98 	bl	8004b80 <Error_Handler>
  }
}
 8004650:	bf00      	nop
 8004652:	3750      	adds	r7, #80	@ 0x50
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40023800 	.word	0x40023800
 800465c:	40007000 	.word	0x40007000

08004660 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004664:	4b12      	ldr	r3, [pc, #72]	@ (80046b0 <MX_I2C1_Init+0x50>)
 8004666:	4a13      	ldr	r2, [pc, #76]	@ (80046b4 <MX_I2C1_Init+0x54>)
 8004668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800466a:	4b11      	ldr	r3, [pc, #68]	@ (80046b0 <MX_I2C1_Init+0x50>)
 800466c:	4a12      	ldr	r2, [pc, #72]	@ (80046b8 <MX_I2C1_Init+0x58>)
 800466e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004670:	4b0f      	ldr	r3, [pc, #60]	@ (80046b0 <MX_I2C1_Init+0x50>)
 8004672:	2200      	movs	r2, #0
 8004674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004676:	4b0e      	ldr	r3, [pc, #56]	@ (80046b0 <MX_I2C1_Init+0x50>)
 8004678:	2200      	movs	r2, #0
 800467a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800467c:	4b0c      	ldr	r3, [pc, #48]	@ (80046b0 <MX_I2C1_Init+0x50>)
 800467e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004682:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004684:	4b0a      	ldr	r3, [pc, #40]	@ (80046b0 <MX_I2C1_Init+0x50>)
 8004686:	2200      	movs	r2, #0
 8004688:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800468a:	4b09      	ldr	r3, [pc, #36]	@ (80046b0 <MX_I2C1_Init+0x50>)
 800468c:	2200      	movs	r2, #0
 800468e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004690:	4b07      	ldr	r3, [pc, #28]	@ (80046b0 <MX_I2C1_Init+0x50>)
 8004692:	2200      	movs	r2, #0
 8004694:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004696:	4b06      	ldr	r3, [pc, #24]	@ (80046b0 <MX_I2C1_Init+0x50>)
 8004698:	2200      	movs	r2, #0
 800469a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800469c:	4804      	ldr	r0, [pc, #16]	@ (80046b0 <MX_I2C1_Init+0x50>)
 800469e:	f004 f8b1 	bl	8008804 <HAL_I2C_Init>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80046a8:	f000 fa6a 	bl	8004b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80046ac:	bf00      	nop
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	200002ac 	.word	0x200002ac
 80046b4:	40005400 	.word	0x40005400
 80046b8:	000186a0 	.word	0x000186a0

080046bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80046c0:	4b12      	ldr	r3, [pc, #72]	@ (800470c <MX_I2C3_Init+0x50>)
 80046c2:	4a13      	ldr	r2, [pc, #76]	@ (8004710 <MX_I2C3_Init+0x54>)
 80046c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80046c6:	4b11      	ldr	r3, [pc, #68]	@ (800470c <MX_I2C3_Init+0x50>)
 80046c8:	4a12      	ldr	r2, [pc, #72]	@ (8004714 <MX_I2C3_Init+0x58>)
 80046ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80046cc:	4b0f      	ldr	r3, [pc, #60]	@ (800470c <MX_I2C3_Init+0x50>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80046d2:	4b0e      	ldr	r3, [pc, #56]	@ (800470c <MX_I2C3_Init+0x50>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046d8:	4b0c      	ldr	r3, [pc, #48]	@ (800470c <MX_I2C3_Init+0x50>)
 80046da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80046de:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80046e0:	4b0a      	ldr	r3, [pc, #40]	@ (800470c <MX_I2C3_Init+0x50>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80046e6:	4b09      	ldr	r3, [pc, #36]	@ (800470c <MX_I2C3_Init+0x50>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80046ec:	4b07      	ldr	r3, [pc, #28]	@ (800470c <MX_I2C3_Init+0x50>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046f2:	4b06      	ldr	r3, [pc, #24]	@ (800470c <MX_I2C3_Init+0x50>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80046f8:	4804      	ldr	r0, [pc, #16]	@ (800470c <MX_I2C3_Init+0x50>)
 80046fa:	f004 f883 	bl	8008804 <HAL_I2C_Init>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004704:	f000 fa3c 	bl	8004b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004708:	bf00      	nop
 800470a:	bd80      	pop	{r7, pc}
 800470c:	20000300 	.word	0x20000300
 8004710:	40005c00 	.word	0x40005c00
 8004714:	000186a0 	.word	0x000186a0

08004718 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800471e:	f107 0308 	add.w	r3, r7, #8
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	605a      	str	r2, [r3, #4]
 8004728:	609a      	str	r2, [r3, #8]
 800472a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800472c:	463b      	mov	r3, r7
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004734:	4b1e      	ldr	r3, [pc, #120]	@ (80047b0 <MX_TIM2_Init+0x98>)
 8004736:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800473a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 800473c:	4b1c      	ldr	r3, [pc, #112]	@ (80047b0 <MX_TIM2_Init+0x98>)
 800473e:	f242 3227 	movw	r2, #8999	@ 0x2327
 8004742:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004744:	4b1a      	ldr	r3, [pc, #104]	@ (80047b0 <MX_TIM2_Init+0x98>)
 8004746:	2200      	movs	r2, #0
 8004748:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800474a:	4b19      	ldr	r3, [pc, #100]	@ (80047b0 <MX_TIM2_Init+0x98>)
 800474c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8004750:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004752:	4b17      	ldr	r3, [pc, #92]	@ (80047b0 <MX_TIM2_Init+0x98>)
 8004754:	2200      	movs	r2, #0
 8004756:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004758:	4b15      	ldr	r3, [pc, #84]	@ (80047b0 <MX_TIM2_Init+0x98>)
 800475a:	2200      	movs	r2, #0
 800475c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800475e:	4814      	ldr	r0, [pc, #80]	@ (80047b0 <MX_TIM2_Init+0x98>)
 8004760:	f005 fe8c 	bl	800a47c <HAL_TIM_Base_Init>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800476a:	f000 fa09 	bl	8004b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800476e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004772:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004774:	f107 0308 	add.w	r3, r7, #8
 8004778:	4619      	mov	r1, r3
 800477a:	480d      	ldr	r0, [pc, #52]	@ (80047b0 <MX_TIM2_Init+0x98>)
 800477c:	f006 f82e 	bl	800a7dc <HAL_TIM_ConfigClockSource>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004786:	f000 f9fb 	bl	8004b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800478a:	2300      	movs	r3, #0
 800478c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800478e:	2300      	movs	r3, #0
 8004790:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004792:	463b      	mov	r3, r7
 8004794:	4619      	mov	r1, r3
 8004796:	4806      	ldr	r0, [pc, #24]	@ (80047b0 <MX_TIM2_Init+0x98>)
 8004798:	f006 fa50 	bl	800ac3c <HAL_TIMEx_MasterConfigSynchronization>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80047a2:	f000 f9ed 	bl	8004b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80047a6:	bf00      	nop
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000354 	.word	0x20000354

080047b4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80047b8:	4b11      	ldr	r3, [pc, #68]	@ (8004800 <MX_UART5_Init+0x4c>)
 80047ba:	4a12      	ldr	r2, [pc, #72]	@ (8004804 <MX_UART5_Init+0x50>)
 80047bc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80047be:	4b10      	ldr	r3, [pc, #64]	@ (8004800 <MX_UART5_Init+0x4c>)
 80047c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80047c4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80047c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004800 <MX_UART5_Init+0x4c>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80047cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004800 <MX_UART5_Init+0x4c>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80047d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004800 <MX_UART5_Init+0x4c>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80047d8:	4b09      	ldr	r3, [pc, #36]	@ (8004800 <MX_UART5_Init+0x4c>)
 80047da:	220c      	movs	r2, #12
 80047dc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047de:	4b08      	ldr	r3, [pc, #32]	@ (8004800 <MX_UART5_Init+0x4c>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80047e4:	4b06      	ldr	r3, [pc, #24]	@ (8004800 <MX_UART5_Init+0x4c>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80047ea:	4805      	ldr	r0, [pc, #20]	@ (8004800 <MX_UART5_Init+0x4c>)
 80047ec:	f006 fab6 	bl	800ad5c <HAL_UART_Init>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80047f6:	f000 f9c3 	bl	8004b80 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80047fa:	bf00      	nop
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	2000039c 	.word	0x2000039c
 8004804:	40005000 	.word	0x40005000

08004808 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800480c:	4b11      	ldr	r3, [pc, #68]	@ (8004854 <MX_USART1_UART_Init+0x4c>)
 800480e:	4a12      	ldr	r2, [pc, #72]	@ (8004858 <MX_USART1_UART_Init+0x50>)
 8004810:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004812:	4b10      	ldr	r3, [pc, #64]	@ (8004854 <MX_USART1_UART_Init+0x4c>)
 8004814:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004818:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800481a:	4b0e      	ldr	r3, [pc, #56]	@ (8004854 <MX_USART1_UART_Init+0x4c>)
 800481c:	2200      	movs	r2, #0
 800481e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004820:	4b0c      	ldr	r3, [pc, #48]	@ (8004854 <MX_USART1_UART_Init+0x4c>)
 8004822:	2200      	movs	r2, #0
 8004824:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004826:	4b0b      	ldr	r3, [pc, #44]	@ (8004854 <MX_USART1_UART_Init+0x4c>)
 8004828:	2200      	movs	r2, #0
 800482a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800482c:	4b09      	ldr	r3, [pc, #36]	@ (8004854 <MX_USART1_UART_Init+0x4c>)
 800482e:	220c      	movs	r2, #12
 8004830:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004832:	4b08      	ldr	r3, [pc, #32]	@ (8004854 <MX_USART1_UART_Init+0x4c>)
 8004834:	2200      	movs	r2, #0
 8004836:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004838:	4b06      	ldr	r3, [pc, #24]	@ (8004854 <MX_USART1_UART_Init+0x4c>)
 800483a:	2200      	movs	r2, #0
 800483c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800483e:	4805      	ldr	r0, [pc, #20]	@ (8004854 <MX_USART1_UART_Init+0x4c>)
 8004840:	f006 fa8c 	bl	800ad5c <HAL_UART_Init>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800484a:	f000 f999 	bl	8004b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800484e:	bf00      	nop
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	200003e4 	.word	0x200003e4
 8004858:	40011000 	.word	0x40011000

0800485c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004862:	2300      	movs	r3, #0
 8004864:	607b      	str	r3, [r7, #4]
 8004866:	4b10      	ldr	r3, [pc, #64]	@ (80048a8 <MX_DMA_Init+0x4c>)
 8004868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800486a:	4a0f      	ldr	r2, [pc, #60]	@ (80048a8 <MX_DMA_Init+0x4c>)
 800486c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004870:	6313      	str	r3, [r2, #48]	@ 0x30
 8004872:	4b0d      	ldr	r3, [pc, #52]	@ (80048a8 <MX_DMA_Init+0x4c>)
 8004874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004876:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800487a:	607b      	str	r3, [r7, #4]
 800487c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800487e:	2200      	movs	r2, #0
 8004880:	2100      	movs	r1, #0
 8004882:	203a      	movs	r0, #58	@ 0x3a
 8004884:	f003 f8bd 	bl	8007a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004888:	203a      	movs	r0, #58	@ 0x3a
 800488a:	f003 f8d6 	bl	8007a3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800488e:	2200      	movs	r2, #0
 8004890:	2100      	movs	r1, #0
 8004892:	2046      	movs	r0, #70	@ 0x46
 8004894:	f003 f8b5 	bl	8007a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8004898:	2046      	movs	r0, #70	@ 0x46
 800489a:	f003 f8ce 	bl	8007a3a <HAL_NVIC_EnableIRQ>

}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40023800 	.word	0x40023800

080048ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08a      	sub	sp, #40	@ 0x28
 80048b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b2:	f107 0314 	add.w	r3, r7, #20
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	605a      	str	r2, [r3, #4]
 80048bc:	609a      	str	r2, [r3, #8]
 80048be:	60da      	str	r2, [r3, #12]
 80048c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048c2:	2300      	movs	r3, #0
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	4b49      	ldr	r3, [pc, #292]	@ (80049ec <MX_GPIO_Init+0x140>)
 80048c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ca:	4a48      	ldr	r2, [pc, #288]	@ (80049ec <MX_GPIO_Init+0x140>)
 80048cc:	f043 0304 	orr.w	r3, r3, #4
 80048d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80048d2:	4b46      	ldr	r3, [pc, #280]	@ (80049ec <MX_GPIO_Init+0x140>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	4b42      	ldr	r3, [pc, #264]	@ (80049ec <MX_GPIO_Init+0x140>)
 80048e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e6:	4a41      	ldr	r2, [pc, #260]	@ (80049ec <MX_GPIO_Init+0x140>)
 80048e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80048ee:	4b3f      	ldr	r3, [pc, #252]	@ (80049ec <MX_GPIO_Init+0x140>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	60bb      	str	r3, [r7, #8]
 80048fe:	4b3b      	ldr	r3, [pc, #236]	@ (80049ec <MX_GPIO_Init+0x140>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004902:	4a3a      	ldr	r2, [pc, #232]	@ (80049ec <MX_GPIO_Init+0x140>)
 8004904:	f043 0302 	orr.w	r3, r3, #2
 8004908:	6313      	str	r3, [r2, #48]	@ 0x30
 800490a:	4b38      	ldr	r3, [pc, #224]	@ (80049ec <MX_GPIO_Init+0x140>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	60bb      	str	r3, [r7, #8]
 8004914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004916:	2300      	movs	r3, #0
 8004918:	607b      	str	r3, [r7, #4]
 800491a:	4b34      	ldr	r3, [pc, #208]	@ (80049ec <MX_GPIO_Init+0x140>)
 800491c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491e:	4a33      	ldr	r2, [pc, #204]	@ (80049ec <MX_GPIO_Init+0x140>)
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	6313      	str	r3, [r2, #48]	@ 0x30
 8004926:	4b31      	ldr	r3, [pc, #196]	@ (80049ec <MX_GPIO_Init+0x140>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	607b      	str	r3, [r7, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004932:	2300      	movs	r3, #0
 8004934:	603b      	str	r3, [r7, #0]
 8004936:	4b2d      	ldr	r3, [pc, #180]	@ (80049ec <MX_GPIO_Init+0x140>)
 8004938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493a:	4a2c      	ldr	r2, [pc, #176]	@ (80049ec <MX_GPIO_Init+0x140>)
 800493c:	f043 0308 	orr.w	r3, r3, #8
 8004940:	6313      	str	r3, [r2, #48]	@ 0x30
 8004942:	4b2a      	ldr	r3, [pc, #168]	@ (80049ec <MX_GPIO_Init+0x140>)
 8004944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800494e:	2201      	movs	r2, #1
 8004950:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004954:	4826      	ldr	r0, [pc, #152]	@ (80049f0 <MX_GPIO_Init+0x144>)
 8004956:	f003 ff23 	bl	80087a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800495a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800495e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004960:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004966:	2300      	movs	r3, #0
 8004968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800496a:	f107 0314 	add.w	r3, r7, #20
 800496e:	4619      	mov	r1, r3
 8004970:	481f      	ldr	r0, [pc, #124]	@ (80049f0 <MX_GPIO_Init+0x144>)
 8004972:	f003 fc8d 	bl	8008290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004976:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800497a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800497c:	2301      	movs	r3, #1
 800497e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004980:	2300      	movs	r3, #0
 8004982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004984:	2300      	movs	r3, #0
 8004986:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004988:	f107 0314 	add.w	r3, r7, #20
 800498c:	4619      	mov	r1, r3
 800498e:	4818      	ldr	r0, [pc, #96]	@ (80049f0 <MX_GPIO_Init+0x144>)
 8004990:	f003 fc7e 	bl	8008290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004994:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800499a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800499e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a0:	2300      	movs	r3, #0
 80049a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a4:	f107 0314 	add.w	r3, r7, #20
 80049a8:	4619      	mov	r1, r3
 80049aa:	4812      	ldr	r0, [pc, #72]	@ (80049f4 <MX_GPIO_Init+0x148>)
 80049ac:	f003 fc70 	bl	8008290 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80049b0:	2200      	movs	r2, #0
 80049b2:	2100      	movs	r1, #0
 80049b4:	2028      	movs	r0, #40	@ 0x28
 80049b6:	f003 f824 	bl	8007a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80049ba:	2028      	movs	r0, #40	@ 0x28
 80049bc:	f003 f83d 	bl	8007a3a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80049c0:	2200      	movs	r2, #0
 80049c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80049c6:	480a      	ldr	r0, [pc, #40]	@ (80049f0 <MX_GPIO_Init+0x144>)
 80049c8:	f003 feea 	bl	80087a0 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80049cc:	2032      	movs	r0, #50	@ 0x32
 80049ce:	f002 fef5 	bl	80077bc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80049d2:	2201      	movs	r2, #1
 80049d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80049d8:	4805      	ldr	r0, [pc, #20]	@ (80049f0 <MX_GPIO_Init+0x144>)
 80049da:	f003 fee1 	bl	80087a0 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80049de:	2032      	movs	r0, #50	@ 0x32
 80049e0:	f002 feec 	bl	80077bc <HAL_Delay>
/* USER CODE END MX_GPIO_Init_2 */
}
 80049e4:	bf00      	nop
 80049e6:	3728      	adds	r7, #40	@ 0x28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40023800 	.word	0x40023800
 80049f0:	40020400 	.word	0x40020400
 80049f4:	40020000 	.word	0x40020000

080049f8 <bme280_begin>:

/* USER CODE BEGIN 4 */
void bme280_begin()
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
	BME280_sensor.device_config.bme280_filter = 			BME280_FILTER_8;
 80049fc:	4b08      	ldr	r3, [pc, #32]	@ (8004a20 <bme280_begin+0x28>)
 80049fe:	2203      	movs	r2, #3
 8004a00:	711a      	strb	r2, [r3, #4]
	BME280_sensor.device_config.bme280_mode =				BME280_MODE_NORMAL;
 8004a02:	4b07      	ldr	r3, [pc, #28]	@ (8004a20 <bme280_begin+0x28>)
 8004a04:	2203      	movs	r2, #3
 8004a06:	715a      	strb	r2, [r3, #5]
	BME280_sensor.device_config.bme280_output_speed =		BME280_OS_8;
 8004a08:	4b05      	ldr	r3, [pc, #20]	@ (8004a20 <bme280_begin+0x28>)
 8004a0a:	2204      	movs	r2, #4
 8004a0c:	719a      	strb	r2, [r3, #6]
	BME280_sensor.device_config.bme280_standby_time = 		BME280_STBY_20;
 8004a0e:	4b04      	ldr	r3, [pc, #16]	@ (8004a20 <bme280_begin+0x28>)
 8004a10:	2207      	movs	r2, #7
 8004a12:	71da      	strb	r2, [r3, #7]
	bme280_init(&BME280_sensor, &hi2c1);
 8004a14:	4903      	ldr	r1, [pc, #12]	@ (8004a24 <bme280_begin+0x2c>)
 8004a16:	4802      	ldr	r0, [pc, #8]	@ (8004a20 <bme280_begin+0x28>)
 8004a18:	f7fc fe64 	bl	80016e4 <bme280_init>

}
 8004a1c:	bf00      	nop
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	200004ec 	.word	0x200004ec
 8004a24:	200002ac 	.word	0x200002ac

08004a28 <bmi088_begin>:

void bmi088_begin()
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
	//Acccel config
	BMI_sensor.deviceConfig.acc_bandwith = ACC_BWP_OSR4;
 8004a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a64 <bmi088_begin+0x3c>)
 8004a2e:	2208      	movs	r2, #8
 8004a30:	765a      	strb	r2, [r3, #25]
	BMI_sensor.deviceConfig.acc_outputDateRate = ACC_ODR_200;
 8004a32:	4b0c      	ldr	r3, [pc, #48]	@ (8004a64 <bmi088_begin+0x3c>)
 8004a34:	2209      	movs	r2, #9
 8004a36:	769a      	strb	r2, [r3, #26]
	BMI_sensor.deviceConfig.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8004a38:	4b0a      	ldr	r3, [pc, #40]	@ (8004a64 <bmi088_begin+0x3c>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	75da      	strb	r2, [r3, #23]
	BMI_sensor.deviceConfig.acc_range = ACC_RANGE_12G;
 8004a3e:	4b09      	ldr	r3, [pc, #36]	@ (8004a64 <bmi088_begin+0x3c>)
 8004a40:	2202      	movs	r2, #2
 8004a42:	761a      	strb	r2, [r3, #24]

	//Gyro config
	BMI_sensor.deviceConfig.gyro_bandWidth = GYRO_BW_116;
 8004a44:	4b07      	ldr	r3, [pc, #28]	@ (8004a64 <bmi088_begin+0x3c>)
 8004a46:	2202      	movs	r2, #2
 8004a48:	771a      	strb	r2, [r3, #28]
	BMI_sensor.deviceConfig.gyro_range = GYRO_RANGE_2000;
 8004a4a:	4b06      	ldr	r3, [pc, #24]	@ (8004a64 <bmi088_begin+0x3c>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	775a      	strb	r2, [r3, #29]
	BMI_sensor.deviceConfig.gyro_powerMode = GYRO_LPM_NORMAL;
 8004a50:	4b04      	ldr	r3, [pc, #16]	@ (8004a64 <bmi088_begin+0x3c>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	76da      	strb	r2, [r3, #27]
	bmi088_init(&BMI_sensor, &hi2c3);
 8004a56:	4904      	ldr	r1, [pc, #16]	@ (8004a68 <bmi088_begin+0x40>)
 8004a58:	4802      	ldr	r0, [pc, #8]	@ (8004a64 <bmi088_begin+0x3c>)
 8004a5a:	f7fd fc8d 	bl	8002378 <bmi088_init>
}
 8004a5e:	bf00      	nop
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20000530 	.word	0x20000530
 8004a68:	20000300 	.word	0x20000300

08004a6c <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	4603      	mov	r3, r0
 8004a74:	80fb      	strh	r3, [r7, #6]

    if(GPIO_Pin == GPIO_PIN_13)
 8004a76:	88fb      	ldrh	r3, [r7, #6]
 8004a78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a7c:	d101      	bne.n	8004a82 <HAL_GPIO_EXTI_Callback+0x16>
    {
    	bmi088_getGyroDatas_INT();
 8004a7e:	f7fe f873 	bl	8002b68 <bmi088_getGyroDatas_INT>
    }
    if(GPIO_Pin == GPIO_PIN_12)
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a88:	d101      	bne.n	8004a8e <HAL_GPIO_EXTI_Callback+0x22>
    {
    	bmi088_getAccelDatas_INT();
 8004a8a:	f7fe f85f 	bl	8002b4c <bmi088_getAccelDatas_INT>
    }
}
 8004a8e:	bf00      	nop
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1) {
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8004ae0 <HAL_UARTEx_RxEventCallback+0x48>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d114      	bne.n	8004ad8 <HAL_UARTEx_RxEventCallback+0x40>
        usart1_packet_ready = 1;
 8004aae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae4 <HAL_UARTEx_RxEventCallback+0x4c>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	701a      	strb	r2, [r3, #0]
        usart1_packet_size = Size;
 8004ab4:	4a0c      	ldr	r2, [pc, #48]	@ (8004ae8 <HAL_UARTEx_RxEventCallback+0x50>)
 8004ab6:	887b      	ldrh	r3, [r7, #2]
 8004ab8:	8013      	strh	r3, [r2, #0]
        // RX DMA'yı tekrar başlat
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, usart1_rx_buffer, sizeof(usart1_rx_buffer));
 8004aba:	2224      	movs	r2, #36	@ 0x24
 8004abc:	490b      	ldr	r1, [pc, #44]	@ (8004aec <HAL_UARTEx_RxEventCallback+0x54>)
 8004abe:	480c      	ldr	r0, [pc, #48]	@ (8004af0 <HAL_UARTEx_RxEventCallback+0x58>)
 8004ac0:	f006 faa4 	bl	800b00c <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT); // Half-transfer interrupt'ı devre dışı bırak
 8004ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8004af0 <HAL_UARTEx_RxEventCallback+0x58>)
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b08      	ldr	r3, [pc, #32]	@ (8004af0 <HAL_UARTEx_RxEventCallback+0x58>)
 8004ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0208 	bic.w	r2, r2, #8
 8004ad6:	601a      	str	r2, [r3, #0]
    }
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40011000 	.word	0x40011000
 8004ae4:	200006bc 	.word	0x200006bc
 8004ae8:	200006be 	.word	0x200006be
 8004aec:	2000066c 	.word	0x2000066c
 8004af0:	200003e4 	.word	0x200003e4

08004af4 <HAL_TIM_PeriodElapsedCallback>:

// Timer 2 interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b04:	d102      	bne.n	8004b0c <HAL_TIM_PeriodElapsedCallback+0x18>
        tx_timer_flag = 1;
 8004b06:	4b04      	ldr	r3, [pc, #16]	@ (8004b18 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8004b08:	2201      	movs	r2, #1
 8004b0a:	701a      	strb	r2, [r3, #0]
    }
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	200006c0 	.word	0x200006c0

08004b1c <HAL_UART_TxCpltCallback>:

// USART1 TX DMA tamam callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a05      	ldr	r2, [pc, #20]	@ (8004b40 <HAL_UART_TxCpltCallback+0x24>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d102      	bne.n	8004b34 <HAL_UART_TxCpltCallback+0x18>
        usart1_tx_busy = 0;
 8004b2e:	4b05      	ldr	r3, [pc, #20]	@ (8004b44 <HAL_UART_TxCpltCallback+0x28>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	701a      	strb	r2, [r3, #0]
    }
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	40011000 	.word	0x40011000
 8004b44:	200006c1 	.word	0x200006c1

08004b48 <uart1_send_packet_dma>:

// USART1 TX DMA başlatma fonksiyonu
void uart1_send_packet_dma(uint8_t *data, uint16_t size)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	807b      	strh	r3, [r7, #2]
    if (!usart1_tx_busy) {
 8004b54:	4b08      	ldr	r3, [pc, #32]	@ (8004b78 <uart1_send_packet_dma+0x30>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d108      	bne.n	8004b70 <uart1_send_packet_dma+0x28>
        usart1_tx_busy = 1;
 8004b5e:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <uart1_send_packet_dma+0x30>)
 8004b60:	2201      	movs	r2, #1
 8004b62:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_DMA(&huart1, data, size);
 8004b64:	887b      	ldrh	r3, [r7, #2]
 8004b66:	461a      	mov	r2, r3
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	4804      	ldr	r0, [pc, #16]	@ (8004b7c <uart1_send_packet_dma+0x34>)
 8004b6c:	f006 f9d2 	bl	800af14 <HAL_UART_Transmit_DMA>
    }
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	200006c1 	.word	0x200006c1
 8004b7c:	200003e4 	.word	0x200003e4

08004b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b84:	b672      	cpsid	i
}
 8004b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004b88:	bf00      	nop
 8004b8a:	e7fd      	b.n	8004b88 <Error_Handler+0x8>

08004b8c <check_sum_hesapla_sit>:
        check_sum += normal_paket[i];
    }
    return (unsigned char) (check_sum % 256);
}

unsigned char check_sum_hesapla_sit(int a){
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60bb      	str	r3, [r7, #8]
 8004b9c:	e00a      	b.n	8004bb4 <check_sum_hesapla_sit+0x28>
        check_sum += sit_paket[i];
 8004b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8004bd8 <check_sum_hesapla_sit+0x4c>)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	60bb      	str	r3, [r7, #8]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	dbf0      	blt.n	8004b9e <check_sum_hesapla_sit+0x12>
    }
    return (unsigned char) (check_sum % 256);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	425a      	negs	r2, r3
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	bf58      	it	pl
 8004bc6:	4253      	negpl	r3, r2
 8004bc8:	b2db      	uxtb	r3, r3
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	200006c4 	.word	0x200006c4

08004bdc <round2>:

// Float değerleri iki ondalık basamağa yuvarlamak için yardımcı fonksiyon
double round2(double value) {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	ed87 0b00 	vstr	d0, [r7]
    return round(value * 100.0) / 100.0;
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	4b10      	ldr	r3, [pc, #64]	@ (8004c2c <round2+0x50>)
 8004bec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bf0:	f7fb fd22 	bl	8000638 <__aeabi_dmul>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	ec43 2b17 	vmov	d7, r2, r3
 8004bfc:	eeb0 0a47 	vmov.f32	s0, s14
 8004c00:	eef0 0a67 	vmov.f32	s1, s15
 8004c04:	f00a fb00 	bl	800f208 <round>
 8004c08:	ec51 0b10 	vmov	r0, r1, d0
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	4b06      	ldr	r3, [pc, #24]	@ (8004c2c <round2+0x50>)
 8004c12:	f7fb fe3b 	bl	800088c <__aeabi_ddiv>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	ec43 2b17 	vmov	d7, r2, r3
}
 8004c1e:	eeb0 0a47 	vmov.f32	s0, s14
 8004c22:	eef0 0a67 	vmov.f32	s1, s15
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40590000 	.word	0x40590000

08004c30 <addDataPacketSit>:
  normal_paket[56] = check_sum_hesapla_normal(56); // Check_sum = check_sum_hesapla();
  normal_paket[57] = 0x0D; // Sabit
  normal_paket[58] = 0x0A;
}

void addDataPacketSit(BME_280_t* BME, bmi088_struct_t* BMI){
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08a      	sub	sp, #40	@ 0x28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  sit_paket[0] = 0xAB; // Sabit
 8004c3a:	4b92      	ldr	r3, [pc, #584]	@ (8004e84 <addDataPacketSit+0x254>)
 8004c3c:	22ab      	movs	r2, #171	@ 0xab
 8004c3e:	701a      	strb	r2, [r3, #0]

  FLOAT32_UINT8_DONUSTURUCU irtifa_float32_uint8_donusturucu;
  irtifa_float32_uint8_donusturucu.sayi = (float)round2(BME->base_altitude + BME->altitude); // Irtifa degerinin atamasini yapiyoruz.
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	edd3 7a08 	vldr	s15, [r3, #32]
 8004c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c50:	ee17 0a90 	vmov	r0, s15
 8004c54:	f7fb fc98 	bl	8000588 <__aeabi_f2d>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	ec43 2b10 	vmov	d0, r2, r3
 8004c60:	f7ff ffbc 	bl	8004bdc <round2>
 8004c64:	ec53 2b10 	vmov	r2, r3, d0
 8004c68:	4610      	mov	r0, r2
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	f7fb ffbc 	bl	8000be8 <__aeabi_d2f>
 8004c70:	4603      	mov	r3, r0
 8004c72:	627b      	str	r3, [r7, #36]	@ 0x24
  sit_paket[1] = irtifa_float32_uint8_donusturucu.array[3];
 8004c74:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004c78:	4b82      	ldr	r3, [pc, #520]	@ (8004e84 <addDataPacketSit+0x254>)
 8004c7a:	705a      	strb	r2, [r3, #1]
  sit_paket[2] = irtifa_float32_uint8_donusturucu.array[2];
 8004c7c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004c80:	4b80      	ldr	r3, [pc, #512]	@ (8004e84 <addDataPacketSit+0x254>)
 8004c82:	709a      	strb	r2, [r3, #2]
  sit_paket[3] = irtifa_float32_uint8_donusturucu.array[1];
 8004c84:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8004c88:	4b7e      	ldr	r3, [pc, #504]	@ (8004e84 <addDataPacketSit+0x254>)
 8004c8a:	70da      	strb	r2, [r3, #3]
  sit_paket[4] = irtifa_float32_uint8_donusturucu.array[0];
 8004c8c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004c90:	4b7c      	ldr	r3, [pc, #496]	@ (8004e84 <addDataPacketSit+0x254>)
 8004c92:	711a      	strb	r2, [r3, #4]

  FLOAT32_UINT8_DONUSTURUCU basinc_float32_uint8_donusturucu;
  basinc_float32_uint8_donusturucu.sayi = (float)round2(BME->pressure); // Roket GPS Irtifa degerinin atamasini yapiyoruz.
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fb fc75 	bl	8000588 <__aeabi_f2d>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	ec43 2b10 	vmov	d0, r2, r3
 8004ca6:	f7ff ff99 	bl	8004bdc <round2>
 8004caa:	ec53 2b10 	vmov	r2, r3, d0
 8004cae:	4610      	mov	r0, r2
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	f7fb ff99 	bl	8000be8 <__aeabi_d2f>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	623b      	str	r3, [r7, #32]
  sit_paket[5] = basinc_float32_uint8_donusturucu.array[3];
 8004cba:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004cbe:	4b71      	ldr	r3, [pc, #452]	@ (8004e84 <addDataPacketSit+0x254>)
 8004cc0:	715a      	strb	r2, [r3, #5]
  sit_paket[6] = basinc_float32_uint8_donusturucu.array[2];
 8004cc2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8004cc6:	4b6f      	ldr	r3, [pc, #444]	@ (8004e84 <addDataPacketSit+0x254>)
 8004cc8:	719a      	strb	r2, [r3, #6]
  sit_paket[7] = basinc_float32_uint8_donusturucu.array[1];
 8004cca:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8004cce:	4b6d      	ldr	r3, [pc, #436]	@ (8004e84 <addDataPacketSit+0x254>)
 8004cd0:	71da      	strb	r2, [r3, #7]
  sit_paket[8] = basinc_float32_uint8_donusturucu.array[0];
 8004cd2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004cd6:	4b6b      	ldr	r3, [pc, #428]	@ (8004e84 <addDataPacketSit+0x254>)
 8004cd8:	721a      	strb	r2, [r3, #8]

  FLOAT32_UINT8_DONUSTURUCU ivme_x_float32_uint8_donusturucu;
  ivme_x_float32_uint8_donusturucu.sayi = (float)round2(BMI->acc_x); // Ivme X degerinin atamasini yapiyoruz.
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fb fc51 	bl	8000588 <__aeabi_f2d>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	ec43 2b10 	vmov	d0, r2, r3
 8004cee:	f7ff ff75 	bl	8004bdc <round2>
 8004cf2:	ec53 2b10 	vmov	r2, r3, d0
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	f7fb ff75 	bl	8000be8 <__aeabi_d2f>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	61fb      	str	r3, [r7, #28]
  sit_paket[9] = ivme_x_float32_uint8_donusturucu.array[3];
 8004d02:	7ffa      	ldrb	r2, [r7, #31]
 8004d04:	4b5f      	ldr	r3, [pc, #380]	@ (8004e84 <addDataPacketSit+0x254>)
 8004d06:	725a      	strb	r2, [r3, #9]
  sit_paket[10] = ivme_x_float32_uint8_donusturucu.array[2];
 8004d08:	7fba      	ldrb	r2, [r7, #30]
 8004d0a:	4b5e      	ldr	r3, [pc, #376]	@ (8004e84 <addDataPacketSit+0x254>)
 8004d0c:	729a      	strb	r2, [r3, #10]
  sit_paket[11] = ivme_x_float32_uint8_donusturucu.array[1];
 8004d0e:	7f7a      	ldrb	r2, [r7, #29]
 8004d10:	4b5c      	ldr	r3, [pc, #368]	@ (8004e84 <addDataPacketSit+0x254>)
 8004d12:	72da      	strb	r2, [r3, #11]
  sit_paket[12] = ivme_x_float32_uint8_donusturucu.array[0];
 8004d14:	7f3a      	ldrb	r2, [r7, #28]
 8004d16:	4b5b      	ldr	r3, [pc, #364]	@ (8004e84 <addDataPacketSit+0x254>)
 8004d18:	731a      	strb	r2, [r3, #12]

  FLOAT32_UINT8_DONUSTURUCU ivme_y_float32_uint8_donusturucu;
  ivme_y_float32_uint8_donusturucu.sayi = (float)round2(BMI->acc_y); // Ivme Y degerinin atamasini yapiyoruz.
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fb fc31 	bl	8000588 <__aeabi_f2d>
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	ec43 2b10 	vmov	d0, r2, r3
 8004d2e:	f7ff ff55 	bl	8004bdc <round2>
 8004d32:	ec53 2b10 	vmov	r2, r3, d0
 8004d36:	4610      	mov	r0, r2
 8004d38:	4619      	mov	r1, r3
 8004d3a:	f7fb ff55 	bl	8000be8 <__aeabi_d2f>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	61bb      	str	r3, [r7, #24]
  sit_paket[13] = ivme_y_float32_uint8_donusturucu.array[3];
 8004d42:	7efa      	ldrb	r2, [r7, #27]
 8004d44:	4b4f      	ldr	r3, [pc, #316]	@ (8004e84 <addDataPacketSit+0x254>)
 8004d46:	735a      	strb	r2, [r3, #13]
  sit_paket[14] = ivme_y_float32_uint8_donusturucu.array[2];
 8004d48:	7eba      	ldrb	r2, [r7, #26]
 8004d4a:	4b4e      	ldr	r3, [pc, #312]	@ (8004e84 <addDataPacketSit+0x254>)
 8004d4c:	739a      	strb	r2, [r3, #14]
  sit_paket[15] = ivme_y_float32_uint8_donusturucu.array[1];
 8004d4e:	7e7a      	ldrb	r2, [r7, #25]
 8004d50:	4b4c      	ldr	r3, [pc, #304]	@ (8004e84 <addDataPacketSit+0x254>)
 8004d52:	73da      	strb	r2, [r3, #15]
  sit_paket[16] = ivme_y_float32_uint8_donusturucu.array[0];
 8004d54:	7e3a      	ldrb	r2, [r7, #24]
 8004d56:	4b4b      	ldr	r3, [pc, #300]	@ (8004e84 <addDataPacketSit+0x254>)
 8004d58:	741a      	strb	r2, [r3, #16]

  FLOAT32_UINT8_DONUSTURUCU ivme_z_float32_uint8_donusturucu;
  ivme_z_float32_uint8_donusturucu.sayi = (float)round2(BMI->acc_z); // Ivme Z degerinin atamasini yapiyoruz.
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fb fc11 	bl	8000588 <__aeabi_f2d>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	ec43 2b10 	vmov	d0, r2, r3
 8004d6e:	f7ff ff35 	bl	8004bdc <round2>
 8004d72:	ec53 2b10 	vmov	r2, r3, d0
 8004d76:	4610      	mov	r0, r2
 8004d78:	4619      	mov	r1, r3
 8004d7a:	f7fb ff35 	bl	8000be8 <__aeabi_d2f>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	617b      	str	r3, [r7, #20]
  sit_paket[17] = ivme_z_float32_uint8_donusturucu.array[3];
 8004d82:	7dfa      	ldrb	r2, [r7, #23]
 8004d84:	4b3f      	ldr	r3, [pc, #252]	@ (8004e84 <addDataPacketSit+0x254>)
 8004d86:	745a      	strb	r2, [r3, #17]
  sit_paket[18] = ivme_z_float32_uint8_donusturucu.array[2];
 8004d88:	7dba      	ldrb	r2, [r7, #22]
 8004d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e84 <addDataPacketSit+0x254>)
 8004d8c:	749a      	strb	r2, [r3, #18]
  sit_paket[19] = ivme_z_float32_uint8_donusturucu.array[1];
 8004d8e:	7d7a      	ldrb	r2, [r7, #21]
 8004d90:	4b3c      	ldr	r3, [pc, #240]	@ (8004e84 <addDataPacketSit+0x254>)
 8004d92:	74da      	strb	r2, [r3, #19]
  sit_paket[20] = ivme_z_float32_uint8_donusturucu.array[0];
 8004d94:	7d3a      	ldrb	r2, [r7, #20]
 8004d96:	4b3b      	ldr	r3, [pc, #236]	@ (8004e84 <addDataPacketSit+0x254>)
 8004d98:	751a      	strb	r2, [r3, #20]

  FLOAT32_UINT8_DONUSTURUCU jiroskop_x_float32_uint8_donusturucu;
  jiroskop_x_float32_uint8_donusturucu.sayi = (float)round2(BMI->yaw); // Jiroskop X degerinin atamasini yapiyoruz.
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fb fbf1 	bl	8000588 <__aeabi_f2d>
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	ec43 2b10 	vmov	d0, r2, r3
 8004dae:	f7ff ff15 	bl	8004bdc <round2>
 8004db2:	ec53 2b10 	vmov	r2, r3, d0
 8004db6:	4610      	mov	r0, r2
 8004db8:	4619      	mov	r1, r3
 8004dba:	f7fb ff15 	bl	8000be8 <__aeabi_d2f>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	613b      	str	r3, [r7, #16]
  sit_paket[21] = jiroskop_x_float32_uint8_donusturucu.array[3];
 8004dc2:	7cfa      	ldrb	r2, [r7, #19]
 8004dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8004e84 <addDataPacketSit+0x254>)
 8004dc6:	755a      	strb	r2, [r3, #21]
  sit_paket[22] = jiroskop_x_float32_uint8_donusturucu.array[2];
 8004dc8:	7cba      	ldrb	r2, [r7, #18]
 8004dca:	4b2e      	ldr	r3, [pc, #184]	@ (8004e84 <addDataPacketSit+0x254>)
 8004dcc:	759a      	strb	r2, [r3, #22]
  sit_paket[23] = jiroskop_x_float32_uint8_donusturucu.array[1];
 8004dce:	7c7a      	ldrb	r2, [r7, #17]
 8004dd0:	4b2c      	ldr	r3, [pc, #176]	@ (8004e84 <addDataPacketSit+0x254>)
 8004dd2:	75da      	strb	r2, [r3, #23]
  sit_paket[24] = jiroskop_x_float32_uint8_donusturucu.array[0];
 8004dd4:	7c3a      	ldrb	r2, [r7, #16]
 8004dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8004e84 <addDataPacketSit+0x254>)
 8004dd8:	761a      	strb	r2, [r3, #24]

  FLOAT32_UINT8_DONUSTURUCU jiroskop_y_float32_uint8_donusturucu;
  jiroskop_y_float32_uint8_donusturucu.sayi = (float)round2(BMI->pitch); // Jiroskop Y degerinin atamasini yapiyoruz.
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fb fbd1 	bl	8000588 <__aeabi_f2d>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	ec43 2b10 	vmov	d0, r2, r3
 8004dee:	f7ff fef5 	bl	8004bdc <round2>
 8004df2:	ec53 2b10 	vmov	r2, r3, d0
 8004df6:	4610      	mov	r0, r2
 8004df8:	4619      	mov	r1, r3
 8004dfa:	f7fb fef5 	bl	8000be8 <__aeabi_d2f>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	60fb      	str	r3, [r7, #12]
  sit_paket[25] = jiroskop_y_float32_uint8_donusturucu.array[3];
 8004e02:	7bfa      	ldrb	r2, [r7, #15]
 8004e04:	4b1f      	ldr	r3, [pc, #124]	@ (8004e84 <addDataPacketSit+0x254>)
 8004e06:	765a      	strb	r2, [r3, #25]
  sit_paket[26] = jiroskop_y_float32_uint8_donusturucu.array[2];
 8004e08:	7bba      	ldrb	r2, [r7, #14]
 8004e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004e84 <addDataPacketSit+0x254>)
 8004e0c:	769a      	strb	r2, [r3, #26]
  sit_paket[27] = jiroskop_y_float32_uint8_donusturucu.array[1];
 8004e0e:	7b7a      	ldrb	r2, [r7, #13]
 8004e10:	4b1c      	ldr	r3, [pc, #112]	@ (8004e84 <addDataPacketSit+0x254>)
 8004e12:	76da      	strb	r2, [r3, #27]
  sit_paket[28] = jiroskop_y_float32_uint8_donusturucu.array[0];
 8004e14:	7b3a      	ldrb	r2, [r7, #12]
 8004e16:	4b1b      	ldr	r3, [pc, #108]	@ (8004e84 <addDataPacketSit+0x254>)
 8004e18:	771a      	strb	r2, [r3, #28]
  FLOAT32_UINT8_DONUSTURUCU jiroskop_z_float32_uint8_donusturucu;
  jiroskop_z_float32_uint8_donusturucu.sayi = (float)round2(BMI->roll); // Jiroskop Z degerinin atamasini yapiyoruz.
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fb fbb1 	bl	8000588 <__aeabi_f2d>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	ec43 2b10 	vmov	d0, r2, r3
 8004e2e:	f7ff fed5 	bl	8004bdc <round2>
 8004e32:	ec53 2b10 	vmov	r2, r3, d0
 8004e36:	4610      	mov	r0, r2
 8004e38:	4619      	mov	r1, r3
 8004e3a:	f7fb fed5 	bl	8000be8 <__aeabi_d2f>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	60bb      	str	r3, [r7, #8]
  sit_paket[29] = jiroskop_z_float32_uint8_donusturucu.array[3];
 8004e42:	7afa      	ldrb	r2, [r7, #11]
 8004e44:	4b0f      	ldr	r3, [pc, #60]	@ (8004e84 <addDataPacketSit+0x254>)
 8004e46:	775a      	strb	r2, [r3, #29]
  sit_paket[30] = jiroskop_z_float32_uint8_donusturucu.array[2];
 8004e48:	7aba      	ldrb	r2, [r7, #10]
 8004e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8004e84 <addDataPacketSit+0x254>)
 8004e4c:	779a      	strb	r2, [r3, #30]
  sit_paket[31] = jiroskop_z_float32_uint8_donusturucu.array[1];
 8004e4e:	7a7a      	ldrb	r2, [r7, #9]
 8004e50:	4b0c      	ldr	r3, [pc, #48]	@ (8004e84 <addDataPacketSit+0x254>)
 8004e52:	77da      	strb	r2, [r3, #31]
  sit_paket[32] = jiroskop_z_float32_uint8_donusturucu.array[0];
 8004e54:	7a3a      	ldrb	r2, [r7, #8]
 8004e56:	4b0b      	ldr	r3, [pc, #44]	@ (8004e84 <addDataPacketSit+0x254>)
 8004e58:	f883 2020 	strb.w	r2, [r3, #32]

  sit_paket[33] = check_sum_hesapla_sit(33); // Check_sum = check_sum_hesapla();
 8004e5c:	2021      	movs	r0, #33	@ 0x21
 8004e5e:	f7ff fe95 	bl	8004b8c <check_sum_hesapla_sit>
 8004e62:	4603      	mov	r3, r0
 8004e64:	461a      	mov	r2, r3
 8004e66:	4b07      	ldr	r3, [pc, #28]	@ (8004e84 <addDataPacketSit+0x254>)
 8004e68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  sit_paket[34] = 0x0D;
 8004e6c:	4b05      	ldr	r3, [pc, #20]	@ (8004e84 <addDataPacketSit+0x254>)
 8004e6e:	220d      	movs	r2, #13
 8004e70:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  sit_paket[35] = 0x0A;
 8004e74:	4b03      	ldr	r3, [pc, #12]	@ (8004e84 <addDataPacketSit+0x254>)
 8004e76:	220a      	movs	r2, #10
 8004e78:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

}
 8004e7c:	bf00      	nop
 8004e7e:	3728      	adds	r7, #40	@ 0x28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	200006c4 	.word	0x200006c4

08004e88 <uint8_arrayi_float32_ye_donustur>:

float uint8_arrayi_float32_ye_donustur(uint8_t byte_array_u8[4]) {
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
    FLOAT32_UINT8_DONUSTURUCU float32_uint8_donusturucu;
    float32_uint8_donusturucu.array[0] = byte_array_u8[3];
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	78db      	ldrb	r3, [r3, #3]
 8004e94:	733b      	strb	r3, [r7, #12]
    float32_uint8_donusturucu.array[1] = byte_array_u8[2];
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	789b      	ldrb	r3, [r3, #2]
 8004e9a:	737b      	strb	r3, [r7, #13]
    float32_uint8_donusturucu.array[2] = byte_array_u8[1];
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	785b      	ldrb	r3, [r3, #1]
 8004ea0:	73bb      	strb	r3, [r7, #14]
    float32_uint8_donusturucu.array[3] = byte_array_u8[0];
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	73fb      	strb	r3, [r7, #15]
    return float32_uint8_donusturucu.sayi;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	ee07 3a90 	vmov	s15, r3
}
 8004eae:	eeb0 0a67 	vmov.f32	s0, s15
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <ekf_predict>:
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++)
            P[i][j] = (i == j) ? 1e-3f : 0.0f;
}

void ekf_predict(float gx, float gy, float gz, float dt) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b09e      	sub	sp, #120	@ 0x78
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	ed87 0a03 	vstr	s0, [r7, #12]
 8004ec6:	edc7 0a02 	vstr	s1, [r7, #8]
 8004eca:	ed87 1a01 	vstr	s2, [r7, #4]
 8004ece:	edc7 1a00 	vstr	s3, [r7]

    // Gyro'dan omega matrisi
    float Omega[4][4] = {
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	623b      	str	r3, [r7, #32]
        {0, -gx, -gy, -gz},
 8004ed8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004edc:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8004ee0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        {0, -gx, -gy, -gz},
 8004ee4:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ee8:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8004eec:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        {0, -gx, -gy, -gz},
 8004ef0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ef4:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8004ef8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	63bb      	str	r3, [r7, #56]	@ 0x38
        {gx,  0,  gz, -gy},
 8004f0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004f0e:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8004f12:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	643b      	str	r3, [r7, #64]	@ 0x40
        {gy, -gz,  0,  gx},
 8004f1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f1e:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8004f22:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	657b      	str	r3, [r7, #84]	@ 0x54
        {gz,  gy, -gx,  0}
 8004f38:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f3c:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8004f40:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    };

    // dq = 0.5 * Omega * q
    float dq[4] = {0};
 8004f4a:	f107 0310 	add.w	r3, r7, #16
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	605a      	str	r2, [r3, #4]
 8004f54:	609a      	str	r2, [r3, #8]
 8004f56:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < 4; i++) {
 8004f58:	2300      	movs	r3, #0
 8004f5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004f5c:	e043      	b.n	8004fe6 <ekf_predict+0x12a>
        for (int j = 0; j < 4; j++) {
 8004f5e:	2300      	movs	r3, #0
 8004f60:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f62:	e024      	b.n	8004fae <ekf_predict+0xf2>
            dq[i] += Omega[i][j] * q[j];
 8004f64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	3378      	adds	r3, #120	@ 0x78
 8004f6a:	443b      	add	r3, r7
 8004f6c:	3b68      	subs	r3, #104	@ 0x68
 8004f6e:	ed93 7a00 	vldr	s14, [r3]
 8004f72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f74:	009a      	lsls	r2, r3, #2
 8004f76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	3378      	adds	r3, #120	@ 0x78
 8004f7e:	443b      	add	r3, r7
 8004f80:	3b58      	subs	r3, #88	@ 0x58
 8004f82:	edd3 6a00 	vldr	s13, [r3]
 8004f86:	4a5d      	ldr	r2, [pc, #372]	@ (80050fc <ekf_predict+0x240>)
 8004f88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	edd3 7a00 	vldr	s15, [r3]
 8004f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	3378      	adds	r3, #120	@ 0x78
 8004fa0:	443b      	add	r3, r7
 8004fa2:	3b68      	subs	r3, #104	@ 0x68
 8004fa4:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 4; j++) {
 8004fa8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004faa:	3301      	adds	r3, #1
 8004fac:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	ddd7      	ble.n	8004f64 <ekf_predict+0xa8>
        }
        dq[i] *= 0.5f * dt;
 8004fb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	3378      	adds	r3, #120	@ 0x78
 8004fba:	443b      	add	r3, r7
 8004fbc:	3b68      	subs	r3, #104	@ 0x68
 8004fbe:	ed93 7a00 	vldr	s14, [r3]
 8004fc2:	edd7 7a00 	vldr	s15, [r7]
 8004fc6:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8004fca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	3378      	adds	r3, #120	@ 0x78
 8004fd8:	443b      	add	r3, r7
 8004fda:	3b68      	subs	r3, #104	@ 0x68
 8004fdc:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 8004fe0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	677b      	str	r3, [r7, #116]	@ 0x74
 8004fe6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	ddb8      	ble.n	8004f5e <ekf_predict+0xa2>
    }

    // q = q + dq
    for (int i = 0; i < 4; i++)
 8004fec:	2300      	movs	r3, #0
 8004fee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ff0:	e017      	b.n	8005022 <ekf_predict+0x166>
        q[i] += dq[i];
 8004ff2:	4a42      	ldr	r2, [pc, #264]	@ (80050fc <ekf_predict+0x240>)
 8004ff4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	ed93 7a00 	vldr	s14, [r3]
 8004ffe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	3378      	adds	r3, #120	@ 0x78
 8005004:	443b      	add	r3, r7
 8005006:	3b68      	subs	r3, #104	@ 0x68
 8005008:	edd3 7a00 	vldr	s15, [r3]
 800500c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005010:	4a3a      	ldr	r2, [pc, #232]	@ (80050fc <ekf_predict+0x240>)
 8005012:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 800501c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800501e:	3301      	adds	r3, #1
 8005020:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005022:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005024:	2b03      	cmp	r3, #3
 8005026:	dde4      	ble.n	8004ff2 <ekf_predict+0x136>

    // Normalize
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8005028:	4b34      	ldr	r3, [pc, #208]	@ (80050fc <ekf_predict+0x240>)
 800502a:	ed93 7a00 	vldr	s14, [r3]
 800502e:	4b33      	ldr	r3, [pc, #204]	@ (80050fc <ekf_predict+0x240>)
 8005030:	edd3 7a00 	vldr	s15, [r3]
 8005034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005038:	4b30      	ldr	r3, [pc, #192]	@ (80050fc <ekf_predict+0x240>)
 800503a:	edd3 6a01 	vldr	s13, [r3, #4]
 800503e:	4b2f      	ldr	r3, [pc, #188]	@ (80050fc <ekf_predict+0x240>)
 8005040:	edd3 7a01 	vldr	s15, [r3, #4]
 8005044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005048:	ee37 7a27 	vadd.f32	s14, s14, s15
 800504c:	4b2b      	ldr	r3, [pc, #172]	@ (80050fc <ekf_predict+0x240>)
 800504e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005052:	4b2a      	ldr	r3, [pc, #168]	@ (80050fc <ekf_predict+0x240>)
 8005054:	edd3 7a02 	vldr	s15, [r3, #8]
 8005058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800505c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005060:	4b26      	ldr	r3, [pc, #152]	@ (80050fc <ekf_predict+0x240>)
 8005062:	edd3 6a03 	vldr	s13, [r3, #12]
 8005066:	4b25      	ldr	r3, [pc, #148]	@ (80050fc <ekf_predict+0x240>)
 8005068:	edd3 7a03 	vldr	s15, [r3, #12]
 800506c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005074:	eeb0 0a67 	vmov.f32	s0, s15
 8005078:	f009 ff5c 	bl	800ef34 <sqrtf>
 800507c:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
    for (int i = 0; i < 4; i++)
 8005080:	2300      	movs	r3, #0
 8005082:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005084:	e012      	b.n	80050ac <ekf_predict+0x1f0>
        q[i] /= norm;
 8005086:	4a1d      	ldr	r2, [pc, #116]	@ (80050fc <ekf_predict+0x240>)
 8005088:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	edd3 6a00 	vldr	s13, [r3]
 8005092:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8005096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800509a:	4a18      	ldr	r2, [pc, #96]	@ (80050fc <ekf_predict+0x240>)
 800509c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 80050a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050a8:	3301      	adds	r3, #1
 80050aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	dde9      	ble.n	8005086 <ekf_predict+0x1ca>

    // P = P + Q
    for (int i = 0; i < 4; i++)
 80050b2:	2300      	movs	r3, #0
 80050b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80050b6:	e018      	b.n	80050ea <ekf_predict+0x22e>
        P[i][i] += Q_val;
 80050b8:	4911      	ldr	r1, [pc, #68]	@ (8005100 <ekf_predict+0x244>)
 80050ba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80050bc:	4613      	mov	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	440b      	add	r3, r1
 80050c6:	edd3 7a00 	vldr	s15, [r3]
 80050ca:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005104 <ekf_predict+0x248>
 80050ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050d2:	490b      	ldr	r1, [pc, #44]	@ (8005100 <ekf_predict+0x244>)
 80050d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80050d6:	4613      	mov	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 80050e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050e6:	3301      	adds	r3, #1
 80050e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80050ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	dde3      	ble.n	80050b8 <ekf_predict+0x1fc>
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	3778      	adds	r7, #120	@ 0x78
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000018 	.word	0x20000018
 8005100:	200006e8 	.word	0x200006e8
 8005104:	3727c5ac 	.word	0x3727c5ac

08005108 <quaternionToYaw1>:

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
    return acosf(safeValue) * (180.0f / 3.14f);
}

float quaternionToYaw1(){
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 800510e:	4b2a      	ldr	r3, [pc, #168]	@ (80051b8 <quaternionToYaw1+0xb0>)
 8005110:	ed93 7a01 	vldr	s14, [r3, #4]
 8005114:	4b28      	ldr	r3, [pc, #160]	@ (80051b8 <quaternionToYaw1+0xb0>)
 8005116:	edd3 7a02 	vldr	s15, [r3, #8]
 800511a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800511e:	4b26      	ldr	r3, [pc, #152]	@ (80051b8 <quaternionToYaw1+0xb0>)
 8005120:	edd3 6a00 	vldr	s13, [r3]
 8005124:	4b24      	ldr	r3, [pc, #144]	@ (80051b8 <quaternionToYaw1+0xb0>)
 8005126:	edd3 7a03 	vldr	s15, [r3, #12]
 800512a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800512e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005132:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8005136:	4b20      	ldr	r3, [pc, #128]	@ (80051b8 <quaternionToYaw1+0xb0>)
 8005138:	ed93 7a00 	vldr	s14, [r3]
 800513c:	4b1e      	ldr	r3, [pc, #120]	@ (80051b8 <quaternionToYaw1+0xb0>)
 800513e:	edd3 7a00 	vldr	s15, [r3]
 8005142:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005146:	4b1c      	ldr	r3, [pc, #112]	@ (80051b8 <quaternionToYaw1+0xb0>)
 8005148:	edd3 6a01 	vldr	s13, [r3, #4]
 800514c:	4b1a      	ldr	r3, [pc, #104]	@ (80051b8 <quaternionToYaw1+0xb0>)
 800514e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005152:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005156:	ee37 7a27 	vadd.f32	s14, s14, s15
 800515a:	4b17      	ldr	r3, [pc, #92]	@ (80051b8 <quaternionToYaw1+0xb0>)
 800515c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005160:	4b15      	ldr	r3, [pc, #84]	@ (80051b8 <quaternionToYaw1+0xb0>)
 8005162:	edd3 7a02 	vldr	s15, [r3, #8]
 8005166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800516a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800516e:	4b12      	ldr	r3, [pc, #72]	@ (80051b8 <quaternionToYaw1+0xb0>)
 8005170:	edd3 6a03 	vldr	s13, [r3, #12]
 8005174:	4b10      	ldr	r3, [pc, #64]	@ (80051b8 <quaternionToYaw1+0xb0>)
 8005176:	edd3 7a03 	vldr	s15, [r3, #12]
 800517a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800517e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005182:	eef0 0a67 	vmov.f32	s1, s15
 8005186:	eeb0 0a46 	vmov.f32	s0, s12
 800518a:	f009 fed1 	bl	800ef30 <atan2f>
 800518e:	eef0 7a40 	vmov.f32	s15, s0
 8005192:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80051bc <quaternionToYaw1+0xb4>
 8005196:	ee27 7a87 	vmul.f32	s14, s15, s14
 800519a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80051c0 <quaternionToYaw1+0xb8>
 800519e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051a2:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	ee07 3a90 	vmov	s15, r3
}
 80051ac:	eeb0 0a67 	vmov.f32	s0, s15
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	20000018 	.word	0x20000018
 80051bc:	43340000 	.word	0x43340000
 80051c0:	40490fd0 	.word	0x40490fd0

080051c4 <quaternionToPitch1>:

float quaternionToPitch1(){
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 80051ca:	4b17      	ldr	r3, [pc, #92]	@ (8005228 <quaternionToPitch1+0x64>)
 80051cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80051d0:	4b15      	ldr	r3, [pc, #84]	@ (8005228 <quaternionToPitch1+0x64>)
 80051d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80051d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051da:	4b13      	ldr	r3, [pc, #76]	@ (8005228 <quaternionToPitch1+0x64>)
 80051dc:	edd3 6a00 	vldr	s13, [r3]
 80051e0:	4b11      	ldr	r3, [pc, #68]	@ (8005228 <quaternionToPitch1+0x64>)
 80051e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80051e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80051f2:	eeb0 0a67 	vmov.f32	s0, s15
 80051f6:	f009 fe6f 	bl	800eed8 <asinf>
 80051fa:	eef0 7a40 	vmov.f32	s15, s0
 80051fe:	eef1 7a67 	vneg.f32	s15, s15
 8005202:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800522c <quaternionToPitch1+0x68>
 8005206:	ee27 7a87 	vmul.f32	s14, s15, s14
 800520a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005230 <quaternionToPitch1+0x6c>
 800520e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005212:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	ee07 3a90 	vmov	s15, r3
}
 800521c:	eeb0 0a67 	vmov.f32	s0, s15
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20000018 	.word	0x20000018
 800522c:	43340000 	.word	0x43340000
 8005230:	40490fd0 	.word	0x40490fd0

08005234 <quaternionToRoll1>:

float quaternionToRoll1(){
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 800523a:	4b2a      	ldr	r3, [pc, #168]	@ (80052e4 <quaternionToRoll1+0xb0>)
 800523c:	ed93 7a00 	vldr	s14, [r3]
 8005240:	4b28      	ldr	r3, [pc, #160]	@ (80052e4 <quaternionToRoll1+0xb0>)
 8005242:	edd3 7a01 	vldr	s15, [r3, #4]
 8005246:	ee27 7a27 	vmul.f32	s14, s14, s15
 800524a:	4b26      	ldr	r3, [pc, #152]	@ (80052e4 <quaternionToRoll1+0xb0>)
 800524c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005250:	4b24      	ldr	r3, [pc, #144]	@ (80052e4 <quaternionToRoll1+0xb0>)
 8005252:	edd3 7a03 	vldr	s15, [r3, #12]
 8005256:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800525a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800525e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8005262:	4b20      	ldr	r3, [pc, #128]	@ (80052e4 <quaternionToRoll1+0xb0>)
 8005264:	ed93 7a00 	vldr	s14, [r3]
 8005268:	4b1e      	ldr	r3, [pc, #120]	@ (80052e4 <quaternionToRoll1+0xb0>)
 800526a:	edd3 7a00 	vldr	s15, [r3]
 800526e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005272:	4b1c      	ldr	r3, [pc, #112]	@ (80052e4 <quaternionToRoll1+0xb0>)
 8005274:	edd3 6a01 	vldr	s13, [r3, #4]
 8005278:	4b1a      	ldr	r3, [pc, #104]	@ (80052e4 <quaternionToRoll1+0xb0>)
 800527a:	edd3 7a01 	vldr	s15, [r3, #4]
 800527e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005282:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005286:	4b17      	ldr	r3, [pc, #92]	@ (80052e4 <quaternionToRoll1+0xb0>)
 8005288:	edd3 6a02 	vldr	s13, [r3, #8]
 800528c:	4b15      	ldr	r3, [pc, #84]	@ (80052e4 <quaternionToRoll1+0xb0>)
 800528e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005296:	ee37 7a67 	vsub.f32	s14, s14, s15
 800529a:	4b12      	ldr	r3, [pc, #72]	@ (80052e4 <quaternionToRoll1+0xb0>)
 800529c:	edd3 6a03 	vldr	s13, [r3, #12]
 80052a0:	4b10      	ldr	r3, [pc, #64]	@ (80052e4 <quaternionToRoll1+0xb0>)
 80052a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80052a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052ae:	eef0 0a67 	vmov.f32	s1, s15
 80052b2:	eeb0 0a46 	vmov.f32	s0, s12
 80052b6:	f009 fe3b 	bl	800ef30 <atan2f>
 80052ba:	eef0 7a40 	vmov.f32	s15, s0
 80052be:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80052e8 <quaternionToRoll1+0xb4>
 80052c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80052c6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80052ec <quaternionToRoll1+0xb8>
 80052ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052ce:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	ee07 3a90 	vmov	s15, r3
}
 80052d8:	eeb0 0a67 	vmov.f32	s0, s15
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	20000018 	.word	0x20000018
 80052e8:	43340000 	.word	0x43340000
 80052ec:	40490fd0 	.word	0x40490fd0

080052f0 <UpdateMahonyGains>:

uint8_t Gain = 0;
uint8_t gyroOnlyMode = 0;


void UpdateMahonyGains(float ax, float ay, float az) {
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08c      	sub	sp, #48	@ 0x30
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80052fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80052fe:	ed87 1a01 	vstr	s2, [r7, #4]
    // Quaternion normalize edilmemişse gravity yön tahmini hatalı olur
    float norm_q = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8005302:	4bd5      	ldr	r3, [pc, #852]	@ (8005658 <UpdateMahonyGains+0x368>)
 8005304:	ed93 7a00 	vldr	s14, [r3]
 8005308:	4bd3      	ldr	r3, [pc, #844]	@ (8005658 <UpdateMahonyGains+0x368>)
 800530a:	edd3 7a00 	vldr	s15, [r3]
 800530e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005312:	4bd1      	ldr	r3, [pc, #836]	@ (8005658 <UpdateMahonyGains+0x368>)
 8005314:	edd3 6a01 	vldr	s13, [r3, #4]
 8005318:	4bcf      	ldr	r3, [pc, #828]	@ (8005658 <UpdateMahonyGains+0x368>)
 800531a:	edd3 7a01 	vldr	s15, [r3, #4]
 800531e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005322:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005326:	4bcc      	ldr	r3, [pc, #816]	@ (8005658 <UpdateMahonyGains+0x368>)
 8005328:	edd3 6a02 	vldr	s13, [r3, #8]
 800532c:	4bca      	ldr	r3, [pc, #808]	@ (8005658 <UpdateMahonyGains+0x368>)
 800532e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005332:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005336:	ee37 7a27 	vadd.f32	s14, s14, s15
 800533a:	4bc7      	ldr	r3, [pc, #796]	@ (8005658 <UpdateMahonyGains+0x368>)
 800533c:	edd3 6a03 	vldr	s13, [r3, #12]
 8005340:	4bc5      	ldr	r3, [pc, #788]	@ (8005658 <UpdateMahonyGains+0x368>)
 8005342:	edd3 7a03 	vldr	s15, [r3, #12]
 8005346:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800534a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800534e:	eeb0 0a67 	vmov.f32	s0, s15
 8005352:	f009 fdef 	bl	800ef34 <sqrtf>
 8005356:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    if (norm_q == 0.0f) return; // Koruma
 800535a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800535e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005366:	f000 8172 	beq.w	800564e <UpdateMahonyGains+0x35e>
    q[0] /= norm_q;
 800536a:	4bbb      	ldr	r3, [pc, #748]	@ (8005658 <UpdateMahonyGains+0x368>)
 800536c:	edd3 6a00 	vldr	s13, [r3]
 8005370:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005378:	4bb7      	ldr	r3, [pc, #732]	@ (8005658 <UpdateMahonyGains+0x368>)
 800537a:	edc3 7a00 	vstr	s15, [r3]
    q[1] /= norm_q;
 800537e:	4bb6      	ldr	r3, [pc, #728]	@ (8005658 <UpdateMahonyGains+0x368>)
 8005380:	edd3 6a01 	vldr	s13, [r3, #4]
 8005384:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800538c:	4bb2      	ldr	r3, [pc, #712]	@ (8005658 <UpdateMahonyGains+0x368>)
 800538e:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] /= norm_q;
 8005392:	4bb1      	ldr	r3, [pc, #708]	@ (8005658 <UpdateMahonyGains+0x368>)
 8005394:	edd3 6a02 	vldr	s13, [r3, #8]
 8005398:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800539c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053a0:	4bad      	ldr	r3, [pc, #692]	@ (8005658 <UpdateMahonyGains+0x368>)
 80053a2:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] /= norm_q;
 80053a6:	4bac      	ldr	r3, [pc, #688]	@ (8005658 <UpdateMahonyGains+0x368>)
 80053a8:	edd3 6a03 	vldr	s13, [r3, #12]
 80053ac:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80053b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053b4:	4ba8      	ldr	r3, [pc, #672]	@ (8005658 <UpdateMahonyGains+0x368>)
 80053b6:	edc3 7a03 	vstr	s15, [r3, #12]

    // Gravity yön vektörü (tam vektör formu)
    float gx = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 80053ba:	4ba7      	ldr	r3, [pc, #668]	@ (8005658 <UpdateMahonyGains+0x368>)
 80053bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80053c0:	4ba5      	ldr	r3, [pc, #660]	@ (8005658 <UpdateMahonyGains+0x368>)
 80053c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80053c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053ca:	4ba3      	ldr	r3, [pc, #652]	@ (8005658 <UpdateMahonyGains+0x368>)
 80053cc:	edd3 6a00 	vldr	s13, [r3]
 80053d0:	4ba1      	ldr	r3, [pc, #644]	@ (8005658 <UpdateMahonyGains+0x368>)
 80053d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80053d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80053e2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 80053e6:	4b9c      	ldr	r3, [pc, #624]	@ (8005658 <UpdateMahonyGains+0x368>)
 80053e8:	ed93 7a00 	vldr	s14, [r3]
 80053ec:	4b9a      	ldr	r3, [pc, #616]	@ (8005658 <UpdateMahonyGains+0x368>)
 80053ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80053f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053f6:	4b98      	ldr	r3, [pc, #608]	@ (8005658 <UpdateMahonyGains+0x368>)
 80053f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80053fc:	4b96      	ldr	r3, [pc, #600]	@ (8005658 <UpdateMahonyGains+0x368>)
 80053fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8005402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800540a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800540e:	edc7 7a08 	vstr	s15, [r7, #32]
    float gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 8005412:	4b91      	ldr	r3, [pc, #580]	@ (8005658 <UpdateMahonyGains+0x368>)
 8005414:	ed93 7a00 	vldr	s14, [r3]
 8005418:	4b8f      	ldr	r3, [pc, #572]	@ (8005658 <UpdateMahonyGains+0x368>)
 800541a:	edd3 7a00 	vldr	s15, [r3]
 800541e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005422:	4b8d      	ldr	r3, [pc, #564]	@ (8005658 <UpdateMahonyGains+0x368>)
 8005424:	edd3 6a01 	vldr	s13, [r3, #4]
 8005428:	4b8b      	ldr	r3, [pc, #556]	@ (8005658 <UpdateMahonyGains+0x368>)
 800542a:	edd3 7a01 	vldr	s15, [r3, #4]
 800542e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005432:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005436:	4b88      	ldr	r3, [pc, #544]	@ (8005658 <UpdateMahonyGains+0x368>)
 8005438:	edd3 6a02 	vldr	s13, [r3, #8]
 800543c:	4b86      	ldr	r3, [pc, #536]	@ (8005658 <UpdateMahonyGains+0x368>)
 800543e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005446:	ee37 7a67 	vsub.f32	s14, s14, s15
 800544a:	4b83      	ldr	r3, [pc, #524]	@ (8005658 <UpdateMahonyGains+0x368>)
 800544c:	edd3 6a03 	vldr	s13, [r3, #12]
 8005450:	4b81      	ldr	r3, [pc, #516]	@ (8005658 <UpdateMahonyGains+0x368>)
 8005452:	edd3 7a03 	vldr	s15, [r3, #12]
 8005456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800545a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800545e:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalize gravity tahmini
    float recipNormG = invSqrt(gx * gx + gy * gy + gz * gz);
 8005462:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005466:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800546a:	edd7 7a08 	vldr	s15, [r7, #32]
 800546e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005472:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005476:	edd7 7a07 	vldr	s15, [r7, #28]
 800547a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800547e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005482:	eeb0 0a67 	vmov.f32	s0, s15
 8005486:	f001 f885 	bl	8006594 <invSqrt>
 800548a:	ed87 0a06 	vstr	s0, [r7, #24]
    gx *= recipNormG;
 800548e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005492:	edd7 7a06 	vldr	s15, [r7, #24]
 8005496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy *= recipNormG;
 800549e:	ed97 7a08 	vldr	s14, [r7, #32]
 80054a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80054a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054aa:	edc7 7a08 	vstr	s15, [r7, #32]
    gz *= recipNormG;
 80054ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80054b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80054b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ba:	edc7 7a07 	vstr	s15, [r7, #28]

    // İvmeölçer zaten normalize edilmiş olarak gelmeli (gelmiyorsa normalize et!)
    float recipNormA = invSqrt(ax * ax + ay * ay + az * az);
 80054be:	edd7 7a03 	vldr	s15, [r7, #12]
 80054c2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80054c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80054ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80054ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80054d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80054da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054de:	eeb0 0a67 	vmov.f32	s0, s15
 80054e2:	f001 f857 	bl	8006594 <invSqrt>
 80054e6:	ed87 0a05 	vstr	s0, [r7, #20]
    ax *= recipNormA;
 80054ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80054ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80054f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f6:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNormA;
 80054fa:	ed97 7a02 	vldr	s14, [r7, #8]
 80054fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8005502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005506:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNormA;
 800550a:	ed97 7a01 	vldr	s14, [r7, #4]
 800550e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005516:	edc7 7a01 	vstr	s15, [r7, #4]

    // Dot product
    float dot = ax * gx + ay * gy + az * gz;
 800551a:	ed97 7a03 	vldr	s14, [r7, #12]
 800551e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005522:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005526:	edd7 6a02 	vldr	s13, [r7, #8]
 800552a:	edd7 7a08 	vldr	s15, [r7, #32]
 800552e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005532:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005536:	edd7 6a01 	vldr	s13, [r7, #4]
 800553a:	edd7 7a07 	vldr	s15, [r7, #28]
 800553e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005546:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dot > 1.0f) dot = 1.0f;
 800554a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800554e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005552:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555a:	dd02      	ble.n	8005562 <UpdateMahonyGains+0x272>
 800555c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005560:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dot < -1.0f) dot = -1.0f;
 8005562:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005566:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800556a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800556e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005572:	d501      	bpl.n	8005578 <UpdateMahonyGains+0x288>
 8005574:	4b39      	ldr	r3, [pc, #228]	@ (800565c <UpdateMahonyGains+0x36c>)
 8005576:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Açı farkı (derece)
    float accErrorAngle = acosf(dot) * (180.0f / 3.1415926f);
 8005578:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800557c:	f009 fc80 	bl	800ee80 <acosf>
 8005580:	eef0 7a40 	vmov.f32	s15, s0
 8005584:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005660 <UpdateMahonyGains+0x370>
 8005588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800558c:	edc7 7a04 	vstr	s15, [r7, #16]

    // Duruma göre kazanç ayarla
    if (accErrorAngle > 30.0f) {
 8005590:	edd7 7a04 	vldr	s15, [r7, #16]
 8005594:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8005598:	eef4 7ac7 	vcmpe.f32	s15, s14
 800559c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a0:	dd0a      	ble.n	80055b8 <UpdateMahonyGains+0x2c8>
        Gain = 1;
 80055a2:	4b30      	ldr	r3, [pc, #192]	@ (8005664 <UpdateMahonyGains+0x374>)
 80055a4:	2201      	movs	r2, #1
 80055a6:	701a      	strb	r2, [r3, #0]
        twoKp = 0.2f;
 80055a8:	4b2f      	ldr	r3, [pc, #188]	@ (8005668 <UpdateMahonyGains+0x378>)
 80055aa:	4a30      	ldr	r2, [pc, #192]	@ (800566c <UpdateMahonyGains+0x37c>)
 80055ac:	601a      	str	r2, [r3, #0]
        twoKi = 0.0f;
 80055ae:	4b30      	ldr	r3, [pc, #192]	@ (8005670 <UpdateMahonyGains+0x380>)
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	e01d      	b.n	80055f4 <UpdateMahonyGains+0x304>
    } else if (accErrorAngle > 10.0f) {
 80055b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80055bc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80055c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c8:	dd0a      	ble.n	80055e0 <UpdateMahonyGains+0x2f0>
        Gain = 2;
 80055ca:	4b26      	ldr	r3, [pc, #152]	@ (8005664 <UpdateMahonyGains+0x374>)
 80055cc:	2202      	movs	r2, #2
 80055ce:	701a      	strb	r2, [r3, #0]
        twoKp = 2.0f;
 80055d0:	4b25      	ldr	r3, [pc, #148]	@ (8005668 <UpdateMahonyGains+0x378>)
 80055d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80055d6:	601a      	str	r2, [r3, #0]
        twoKi = 0.01f;
 80055d8:	4b25      	ldr	r3, [pc, #148]	@ (8005670 <UpdateMahonyGains+0x380>)
 80055da:	4a26      	ldr	r2, [pc, #152]	@ (8005674 <UpdateMahonyGains+0x384>)
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	e009      	b.n	80055f4 <UpdateMahonyGains+0x304>
    } else {
        Gain = 3;
 80055e0:	4b20      	ldr	r3, [pc, #128]	@ (8005664 <UpdateMahonyGains+0x374>)
 80055e2:	2203      	movs	r2, #3
 80055e4:	701a      	strb	r2, [r3, #0]
        twoKp = 8.0f;
 80055e6:	4b20      	ldr	r3, [pc, #128]	@ (8005668 <UpdateMahonyGains+0x378>)
 80055e8:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 80055ec:	601a      	str	r2, [r3, #0]
        twoKi = 0.05f;
 80055ee:	4b20      	ldr	r3, [pc, #128]	@ (8005670 <UpdateMahonyGains+0x380>)
 80055f0:	4a21      	ldr	r2, [pc, #132]	@ (8005678 <UpdateMahonyGains+0x388>)
 80055f2:	601a      	str	r2, [r3, #0]
    }

    // Güvenlik: kazanç sınırla (opsiyonel ama önerilir)
    twoKp = fmaxf(TWO_KP_MIN, fminf(twoKp, TWO_KP_MAX));
 80055f4:	4b1c      	ldr	r3, [pc, #112]	@ (8005668 <UpdateMahonyGains+0x378>)
 80055f6:	edd3 7a00 	vldr	s15, [r3]
 80055fa:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 80055fe:	eeb0 0a67 	vmov.f32	s0, s15
 8005602:	f009 fcea 	bl	800efda <fminf>
 8005606:	eef0 7a40 	vmov.f32	s15, s0
 800560a:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800567c <UpdateMahonyGains+0x38c>
 800560e:	eeb0 0a67 	vmov.f32	s0, s15
 8005612:	f009 fcc5 	bl	800efa0 <fmaxf>
 8005616:	eef0 7a40 	vmov.f32	s15, s0
 800561a:	4b13      	ldr	r3, [pc, #76]	@ (8005668 <UpdateMahonyGains+0x378>)
 800561c:	edc3 7a00 	vstr	s15, [r3]
    twoKi = fmaxf(TWO_KI_MIN, fminf(twoKi, TWO_KI_MAX));
 8005620:	4b13      	ldr	r3, [pc, #76]	@ (8005670 <UpdateMahonyGains+0x380>)
 8005622:	edd3 7a00 	vldr	s15, [r3]
 8005626:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8005680 <UpdateMahonyGains+0x390>
 800562a:	eeb0 0a67 	vmov.f32	s0, s15
 800562e:	f009 fcd4 	bl	800efda <fminf>
 8005632:	eef0 7a40 	vmov.f32	s15, s0
 8005636:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8005684 <UpdateMahonyGains+0x394>
 800563a:	eeb0 0a67 	vmov.f32	s0, s15
 800563e:	f009 fcaf 	bl	800efa0 <fmaxf>
 8005642:	eef0 7a40 	vmov.f32	s15, s0
 8005646:	4b0a      	ldr	r3, [pc, #40]	@ (8005670 <UpdateMahonyGains+0x380>)
 8005648:	edc3 7a00 	vstr	s15, [r3]
 800564c:	e000      	b.n	8005650 <UpdateMahonyGains+0x360>
    if (norm_q == 0.0f) return; // Koruma
 800564e:	bf00      	nop
}
 8005650:	3730      	adds	r7, #48	@ 0x30
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20000028 	.word	0x20000028
 800565c:	bf800000 	.word	0xbf800000
 8005660:	42652ee2 	.word	0x42652ee2
 8005664:	20000734 	.word	0x20000734
 8005668:	20000038 	.word	0x20000038
 800566c:	3e4ccccd 	.word	0x3e4ccccd
 8005670:	2000003c 	.word	0x2000003c
 8005674:	3c23d70a 	.word	0x3c23d70a
 8005678:	3d4ccccd 	.word	0x3d4ccccd
 800567c:	3dcccccd 	.word	0x3dcccccd
 8005680:	3d4ccccd 	.word	0x3d4ccccd
 8005684:	00000000 	.word	0x00000000

08005688 <Orientation_Update>:





void Orientation_Update(float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 8005688:	b580      	push	{r7, lr}
 800568a:	b08a      	sub	sp, #40	@ 0x28
 800568c:	af00      	add	r7, sp, #0
 800568e:	ed87 0a07 	vstr	s0, [r7, #28]
 8005692:	edc7 0a06 	vstr	s1, [r7, #24]
 8005696:	ed87 1a05 	vstr	s2, [r7, #20]
 800569a:	edc7 1a04 	vstr	s3, [r7, #16]
 800569e:	ed87 2a03 	vstr	s4, [r7, #12]
 80056a2:	edc7 2a02 	vstr	s5, [r7, #8]
 80056a6:	ed87 3a01 	vstr	s6, [r7, #4]
	static float ax_f = 0, ay_f = 0, az_f = 0;
    const float alpha = 0.3f;
 80056aa:	4b60      	ldr	r3, [pc, #384]	@ (800582c <Orientation_Update+0x1a4>)
 80056ac:	627b      	str	r3, [r7, #36]	@ 0x24

    // LPF filtre
    ax_f = alpha * ax + (1.0f - alpha) * ax_f;
 80056ae:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80056b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80056b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056be:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80056c2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80056c6:	4b5a      	ldr	r3, [pc, #360]	@ (8005830 <Orientation_Update+0x1a8>)
 80056c8:	edd3 7a00 	vldr	s15, [r3]
 80056cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056d4:	4b56      	ldr	r3, [pc, #344]	@ (8005830 <Orientation_Update+0x1a8>)
 80056d6:	edc3 7a00 	vstr	s15, [r3]
    ay_f = alpha * ay + (1.0f - alpha) * ay_f;
 80056da:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80056de:	edd7 7a03 	vldr	s15, [r7, #12]
 80056e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80056ee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80056f2:	4b50      	ldr	r3, [pc, #320]	@ (8005834 <Orientation_Update+0x1ac>)
 80056f4:	edd3 7a00 	vldr	s15, [r3]
 80056f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005700:	4b4c      	ldr	r3, [pc, #304]	@ (8005834 <Orientation_Update+0x1ac>)
 8005702:	edc3 7a00 	vstr	s15, [r3]
    az_f = alpha * az + (1.0f - alpha) * az_f;
 8005706:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800570a:	edd7 7a02 	vldr	s15, [r7, #8]
 800570e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005716:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800571a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800571e:	4b46      	ldr	r3, [pc, #280]	@ (8005838 <Orientation_Update+0x1b0>)
 8005720:	edd3 7a00 	vldr	s15, [r3]
 8005724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800572c:	4b42      	ldr	r3, [pc, #264]	@ (8005838 <Orientation_Update+0x1b0>)
 800572e:	edc3 7a00 	vstr	s15, [r3]

    // Kazançları güncelle
    UpdateMahonyGains(ax_f, ay_f, az_f);
 8005732:	4b3f      	ldr	r3, [pc, #252]	@ (8005830 <Orientation_Update+0x1a8>)
 8005734:	edd3 7a00 	vldr	s15, [r3]
 8005738:	4b3e      	ldr	r3, [pc, #248]	@ (8005834 <Orientation_Update+0x1ac>)
 800573a:	ed93 7a00 	vldr	s14, [r3]
 800573e:	4b3e      	ldr	r3, [pc, #248]	@ (8005838 <Orientation_Update+0x1b0>)
 8005740:	edd3 6a00 	vldr	s13, [r3]
 8005744:	eeb0 1a66 	vmov.f32	s2, s13
 8005748:	eef0 0a47 	vmov.f32	s1, s14
 800574c:	eeb0 0a67 	vmov.f32	s0, s15
 8005750:	f7ff fdce 	bl	80052f0 <UpdateMahonyGains>

    // Acc magnitude
    float accMag = sqrtf(ax_f*ax_f + ay_f*ay_f + az_f*az_f);
 8005754:	4b36      	ldr	r3, [pc, #216]	@ (8005830 <Orientation_Update+0x1a8>)
 8005756:	ed93 7a00 	vldr	s14, [r3]
 800575a:	4b35      	ldr	r3, [pc, #212]	@ (8005830 <Orientation_Update+0x1a8>)
 800575c:	edd3 7a00 	vldr	s15, [r3]
 8005760:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005764:	4b33      	ldr	r3, [pc, #204]	@ (8005834 <Orientation_Update+0x1ac>)
 8005766:	edd3 6a00 	vldr	s13, [r3]
 800576a:	4b32      	ldr	r3, [pc, #200]	@ (8005834 <Orientation_Update+0x1ac>)
 800576c:	edd3 7a00 	vldr	s15, [r3]
 8005770:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005774:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005778:	4b2f      	ldr	r3, [pc, #188]	@ (8005838 <Orientation_Update+0x1b0>)
 800577a:	edd3 6a00 	vldr	s13, [r3]
 800577e:	4b2e      	ldr	r3, [pc, #184]	@ (8005838 <Orientation_Update+0x1b0>)
 8005780:	edd3 7a00 	vldr	s15, [r3]
 8005784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800578c:	eeb0 0a67 	vmov.f32	s0, s15
 8005790:	f009 fbd0 	bl	800ef34 <sqrtf>
 8005794:	ed87 0a08 	vstr	s0, [r7, #32]

    if (gyroOnlyMode) {
 8005798:	4b28      	ldr	r3, [pc, #160]	@ (800583c <Orientation_Update+0x1b4>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00c      	beq.n	80057ba <Orientation_Update+0x132>
            if (accMag < ACC_THRESHOLD_LOW)
 80057a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80057a4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005840 <Orientation_Update+0x1b8>
 80057a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b0:	d50f      	bpl.n	80057d2 <Orientation_Update+0x14a>
                gyroOnlyMode = 0;
 80057b2:	4b22      	ldr	r3, [pc, #136]	@ (800583c <Orientation_Update+0x1b4>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	e00b      	b.n	80057d2 <Orientation_Update+0x14a>
	} else {
		if (accMag > ACC_THRESHOLD_HIGH)
 80057ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80057be:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005844 <Orientation_Update+0x1bc>
 80057c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ca:	dd02      	ble.n	80057d2 <Orientation_Update+0x14a>
			gyroOnlyMode = 1;
 80057cc:	4b1b      	ldr	r3, [pc, #108]	@ (800583c <Orientation_Update+0x1b4>)
 80057ce:	2201      	movs	r2, #1
 80057d0:	701a      	strb	r2, [r3, #0]
	}



    // Filtre çağrısı
    if (gyroOnlyMode)
 80057d2:	4b1a      	ldr	r3, [pc, #104]	@ (800583c <Orientation_Update+0x1b4>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <Orientation_Update+0x168>
        updateQuaternion(gx, gy, gz, dt);
 80057da:	edd7 1a01 	vldr	s3, [r7, #4]
 80057de:	ed97 1a05 	vldr	s2, [r7, #20]
 80057e2:	edd7 0a06 	vldr	s1, [r7, #24]
 80057e6:	ed97 0a07 	vldr	s0, [r7, #28]
 80057ea:	f000 f82d 	bl	8005848 <updateQuaternion>
    else
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
}
 80057ee:	e018      	b.n	8005822 <Orientation_Update+0x19a>
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
 80057f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005830 <Orientation_Update+0x1a8>)
 80057f2:	edd3 7a00 	vldr	s15, [r3]
 80057f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005834 <Orientation_Update+0x1ac>)
 80057f8:	ed93 7a00 	vldr	s14, [r3]
 80057fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005838 <Orientation_Update+0x1b0>)
 80057fe:	edd3 6a00 	vldr	s13, [r3]
 8005802:	ed97 3a01 	vldr	s6, [r7, #4]
 8005806:	eef0 2a66 	vmov.f32	s5, s13
 800580a:	eeb0 2a47 	vmov.f32	s4, s14
 800580e:	eef0 1a67 	vmov.f32	s3, s15
 8005812:	ed97 1a05 	vldr	s2, [r7, #20]
 8005816:	edd7 0a06 	vldr	s1, [r7, #24]
 800581a:	ed97 0a07 	vldr	s0, [r7, #28]
 800581e:	f000 f93b 	bl	8005a98 <MahonyAHRSupdateIMU>
}
 8005822:	bf00      	nop
 8005824:	3728      	adds	r7, #40	@ 0x28
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	3e99999a 	.word	0x3e99999a
 8005830:	20000738 	.word	0x20000738
 8005834:	2000073c 	.word	0x2000073c
 8005838:	20000740 	.word	0x20000740
 800583c:	20000735 	.word	0x20000735
 8005840:	41d3d2db 	.word	0x41d3d2db
 8005844:	420172a2 	.word	0x420172a2

08005848 <updateQuaternion>:


void updateQuaternion(float gx, float gy, float gz, float dt) {
 8005848:	b580      	push	{r7, lr}
 800584a:	b08a      	sub	sp, #40	@ 0x28
 800584c:	af00      	add	r7, sp, #0
 800584e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005852:	edc7 0a02 	vstr	s1, [r7, #8]
 8005856:	ed87 1a01 	vstr	s2, [r7, #4]
 800585a:	edc7 1a00 	vstr	s3, [r7]
	gx = fminf(fmaxf(gx, -limit), limit);
	gy = fminf(fmaxf(gy, -limit), limit);
	gz = fminf(fmaxf(gz, -limit), limit);*/

    // Quaternion türevleri
    float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 800585e:	4b8c      	ldr	r3, [pc, #560]	@ (8005a90 <updateQuaternion+0x248>)
 8005860:	edd3 7a01 	vldr	s15, [r3, #4]
 8005864:	eeb1 7a67 	vneg.f32	s14, s15
 8005868:	edd7 7a03 	vldr	s15, [r7, #12]
 800586c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005870:	4b87      	ldr	r3, [pc, #540]	@ (8005a90 <updateQuaternion+0x248>)
 8005872:	edd3 6a02 	vldr	s13, [r3, #8]
 8005876:	edd7 7a02 	vldr	s15, [r7, #8]
 800587a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800587e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005882:	4b83      	ldr	r3, [pc, #524]	@ (8005a90 <updateQuaternion+0x248>)
 8005884:	edd3 6a03 	vldr	s13, [r3, #12]
 8005888:	edd7 7a01 	vldr	s15, [r7, #4]
 800588c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005890:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005894:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800589c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float qDot2 = 0.5f * ( q[0] * gx + q[2] * gz - q[3] * gy);
 80058a0:	4b7b      	ldr	r3, [pc, #492]	@ (8005a90 <updateQuaternion+0x248>)
 80058a2:	ed93 7a00 	vldr	s14, [r3]
 80058a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80058aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058ae:	4b78      	ldr	r3, [pc, #480]	@ (8005a90 <updateQuaternion+0x248>)
 80058b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80058b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80058b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058c0:	4b73      	ldr	r3, [pc, #460]	@ (8005a90 <updateQuaternion+0x248>)
 80058c2:	edd3 6a03 	vldr	s13, [r3, #12]
 80058c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80058ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058d2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80058d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058da:	edc7 7a08 	vstr	s15, [r7, #32]
    float qDot3 = 0.5f * ( q[0] * gy - q[1] * gz + q[3] * gx);
 80058de:	4b6c      	ldr	r3, [pc, #432]	@ (8005a90 <updateQuaternion+0x248>)
 80058e0:	ed93 7a00 	vldr	s14, [r3]
 80058e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80058e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058ec:	4b68      	ldr	r3, [pc, #416]	@ (8005a90 <updateQuaternion+0x248>)
 80058ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80058f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80058f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80058fe:	4b64      	ldr	r3, [pc, #400]	@ (8005a90 <updateQuaternion+0x248>)
 8005900:	edd3 6a03 	vldr	s13, [r3, #12]
 8005904:	edd7 7a03 	vldr	s15, [r7, #12]
 8005908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800590c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005910:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005914:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005918:	edc7 7a07 	vstr	s15, [r7, #28]
    float qDot4 = 0.5f * ( q[0] * gz + q[1] * gy - q[2] * gx);
 800591c:	4b5c      	ldr	r3, [pc, #368]	@ (8005a90 <updateQuaternion+0x248>)
 800591e:	ed93 7a00 	vldr	s14, [r3]
 8005922:	edd7 7a01 	vldr	s15, [r7, #4]
 8005926:	ee27 7a27 	vmul.f32	s14, s14, s15
 800592a:	4b59      	ldr	r3, [pc, #356]	@ (8005a90 <updateQuaternion+0x248>)
 800592c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005930:	edd7 7a02 	vldr	s15, [r7, #8]
 8005934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005938:	ee37 7a27 	vadd.f32	s14, s14, s15
 800593c:	4b54      	ldr	r3, [pc, #336]	@ (8005a90 <updateQuaternion+0x248>)
 800593e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005942:	edd7 7a03 	vldr	s15, [r7, #12]
 8005946:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800594a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800594e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005952:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005956:	edc7 7a06 	vstr	s15, [r7, #24]

    // Entegrasyon
    q[0] += qDot1 * dt;
 800595a:	4b4d      	ldr	r3, [pc, #308]	@ (8005a90 <updateQuaternion+0x248>)
 800595c:	ed93 7a00 	vldr	s14, [r3]
 8005960:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005964:	edd7 7a00 	vldr	s15, [r7]
 8005968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800596c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005970:	4b47      	ldr	r3, [pc, #284]	@ (8005a90 <updateQuaternion+0x248>)
 8005972:	edc3 7a00 	vstr	s15, [r3]
    q[1] += qDot2 * dt;
 8005976:	4b46      	ldr	r3, [pc, #280]	@ (8005a90 <updateQuaternion+0x248>)
 8005978:	ed93 7a01 	vldr	s14, [r3, #4]
 800597c:	edd7 6a08 	vldr	s13, [r7, #32]
 8005980:	edd7 7a00 	vldr	s15, [r7]
 8005984:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800598c:	4b40      	ldr	r3, [pc, #256]	@ (8005a90 <updateQuaternion+0x248>)
 800598e:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] += qDot3 * dt;
 8005992:	4b3f      	ldr	r3, [pc, #252]	@ (8005a90 <updateQuaternion+0x248>)
 8005994:	ed93 7a02 	vldr	s14, [r3, #8]
 8005998:	edd7 6a07 	vldr	s13, [r7, #28]
 800599c:	edd7 7a00 	vldr	s15, [r7]
 80059a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059a8:	4b39      	ldr	r3, [pc, #228]	@ (8005a90 <updateQuaternion+0x248>)
 80059aa:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] += qDot4 * dt;
 80059ae:	4b38      	ldr	r3, [pc, #224]	@ (8005a90 <updateQuaternion+0x248>)
 80059b0:	ed93 7a03 	vldr	s14, [r3, #12]
 80059b4:	edd7 6a06 	vldr	s13, [r7, #24]
 80059b8:	edd7 7a00 	vldr	s15, [r7]
 80059bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059c4:	4b32      	ldr	r3, [pc, #200]	@ (8005a90 <updateQuaternion+0x248>)
 80059c6:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalize et
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 80059ca:	4b31      	ldr	r3, [pc, #196]	@ (8005a90 <updateQuaternion+0x248>)
 80059cc:	ed93 7a00 	vldr	s14, [r3]
 80059d0:	4b2f      	ldr	r3, [pc, #188]	@ (8005a90 <updateQuaternion+0x248>)
 80059d2:	edd3 7a00 	vldr	s15, [r3]
 80059d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059da:	4b2d      	ldr	r3, [pc, #180]	@ (8005a90 <updateQuaternion+0x248>)
 80059dc:	edd3 6a01 	vldr	s13, [r3, #4]
 80059e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005a90 <updateQuaternion+0x248>)
 80059e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80059e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059ee:	4b28      	ldr	r3, [pc, #160]	@ (8005a90 <updateQuaternion+0x248>)
 80059f0:	edd3 6a02 	vldr	s13, [r3, #8]
 80059f4:	4b26      	ldr	r3, [pc, #152]	@ (8005a90 <updateQuaternion+0x248>)
 80059f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80059fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a02:	4b23      	ldr	r3, [pc, #140]	@ (8005a90 <updateQuaternion+0x248>)
 8005a04:	edd3 6a03 	vldr	s13, [r3, #12]
 8005a08:	4b21      	ldr	r3, [pc, #132]	@ (8005a90 <updateQuaternion+0x248>)
 8005a0a:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a16:	eeb0 0a67 	vmov.f32	s0, s15
 8005a1a:	f009 fa8b 	bl	800ef34 <sqrtf>
 8005a1e:	ed87 0a05 	vstr	s0, [r7, #20]
    if (norm > 1e-6f) {
 8005a22:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a26:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8005a94 <updateQuaternion+0x24c>
 8005a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a32:	dc00      	bgt.n	8005a36 <updateQuaternion+0x1ee>
        q[0] /= norm;
        q[1] /= norm;
        q[2] /= norm;
        q[3] /= norm;
    }
}
 8005a34:	e027      	b.n	8005a86 <updateQuaternion+0x23e>
        q[0] /= norm;
 8005a36:	4b16      	ldr	r3, [pc, #88]	@ (8005a90 <updateQuaternion+0x248>)
 8005a38:	edd3 6a00 	vldr	s13, [r3]
 8005a3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a44:	4b12      	ldr	r3, [pc, #72]	@ (8005a90 <updateQuaternion+0x248>)
 8005a46:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= norm;
 8005a4a:	4b11      	ldr	r3, [pc, #68]	@ (8005a90 <updateQuaternion+0x248>)
 8005a4c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005a50:	ed97 7a05 	vldr	s14, [r7, #20]
 8005a54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a58:	4b0d      	ldr	r3, [pc, #52]	@ (8005a90 <updateQuaternion+0x248>)
 8005a5a:	edc3 7a01 	vstr	s15, [r3, #4]
        q[2] /= norm;
 8005a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a90 <updateQuaternion+0x248>)
 8005a60:	edd3 6a02 	vldr	s13, [r3, #8]
 8005a64:	ed97 7a05 	vldr	s14, [r7, #20]
 8005a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a6c:	4b08      	ldr	r3, [pc, #32]	@ (8005a90 <updateQuaternion+0x248>)
 8005a6e:	edc3 7a02 	vstr	s15, [r3, #8]
        q[3] /= norm;
 8005a72:	4b07      	ldr	r3, [pc, #28]	@ (8005a90 <updateQuaternion+0x248>)
 8005a74:	edd3 6a03 	vldr	s13, [r3, #12]
 8005a78:	ed97 7a05 	vldr	s14, [r7, #20]
 8005a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a80:	4b03      	ldr	r3, [pc, #12]	@ (8005a90 <updateQuaternion+0x248>)
 8005a82:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8005a86:	bf00      	nop
 8005a88:	3728      	adds	r7, #40	@ 0x28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20000028 	.word	0x20000028
 8005a94:	358637bd 	.word	0x358637bd

08005a98 <MahonyAHRSupdateIMU>:
        q[2] /= norm_q;
        q[3] /= norm_q;
    }
}

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax_f, float ay_f, float az_f, float dt) {
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b092      	sub	sp, #72	@ 0x48
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	ed87 0a07 	vstr	s0, [r7, #28]
 8005aa2:	edc7 0a06 	vstr	s1, [r7, #24]
 8005aa6:	ed87 1a05 	vstr	s2, [r7, #20]
 8005aaa:	edc7 1a04 	vstr	s3, [r7, #16]
 8005aae:	ed87 2a03 	vstr	s4, [r7, #12]
 8005ab2:	edc7 2a02 	vstr	s5, [r7, #8]
 8005ab6:	ed87 3a01 	vstr	s6, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
		if(!((ax_f == 0.0f) && (ay_f == 0.0f) && (az_f == 0.0f))) {
 8005aba:	edd7 7a04 	vldr	s15, [r7, #16]
 8005abe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac6:	d10e      	bne.n	8005ae6 <MahonyAHRSupdateIMU+0x4e>
 8005ac8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005acc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad4:	d107      	bne.n	8005ae6 <MahonyAHRSupdateIMU+0x4e>
 8005ad6:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ada:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae2:	f000 8138 	beq.w	8005d56 <MahonyAHRSupdateIMU+0x2be>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax_f * ax_f + ay_f * ay_f + az_f * az_f);
 8005ae6:	edd7 7a04 	vldr	s15, [r7, #16]
 8005aea:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005aee:	edd7 7a03 	vldr	s15, [r7, #12]
 8005af2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005af6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005afa:	edd7 7a02 	vldr	s15, [r7, #8]
 8005afe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b06:	eeb0 0a67 	vmov.f32	s0, s15
 8005b0a:	f000 fd43 	bl	8006594 <invSqrt>
 8005b0e:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax_f *= recipNorm;
 8005b12:	ed97 7a04 	vldr	s14, [r7, #16]
 8005b16:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b1e:	edc7 7a04 	vstr	s15, [r7, #16]
		ay_f *= recipNorm;
 8005b22:	ed97 7a03 	vldr	s14, [r7, #12]
 8005b26:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b2e:	edc7 7a03 	vstr	s15, [r7, #12]
		az_f *= recipNorm;
 8005b32:	ed97 7a02 	vldr	s14, [r7, #8]
 8005b36:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3e:	edc7 7a02 	vstr	s15, [r7, #8]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8005b42:	4b66      	ldr	r3, [pc, #408]	@ (8005cdc <MahonyAHRSupdateIMU+0x244>)
 8005b44:	ed93 7a01 	vldr	s14, [r3, #4]
 8005b48:	4b64      	ldr	r3, [pc, #400]	@ (8005cdc <MahonyAHRSupdateIMU+0x244>)
 8005b4a:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b52:	4b62      	ldr	r3, [pc, #392]	@ (8005cdc <MahonyAHRSupdateIMU+0x244>)
 8005b54:	edd3 6a00 	vldr	s13, [r3]
 8005b58:	4b60      	ldr	r3, [pc, #384]	@ (8005cdc <MahonyAHRSupdateIMU+0x244>)
 8005b5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8005b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b66:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8005b6a:	4b5c      	ldr	r3, [pc, #368]	@ (8005cdc <MahonyAHRSupdateIMU+0x244>)
 8005b6c:	ed93 7a00 	vldr	s14, [r3]
 8005b70:	4b5a      	ldr	r3, [pc, #360]	@ (8005cdc <MahonyAHRSupdateIMU+0x244>)
 8005b72:	edd3 7a01 	vldr	s15, [r3, #4]
 8005b76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b7a:	4b58      	ldr	r3, [pc, #352]	@ (8005cdc <MahonyAHRSupdateIMU+0x244>)
 8005b7c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005b80:	4b56      	ldr	r3, [pc, #344]	@ (8005cdc <MahonyAHRSupdateIMU+0x244>)
 8005b82:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b8e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8005b92:	4b52      	ldr	r3, [pc, #328]	@ (8005cdc <MahonyAHRSupdateIMU+0x244>)
 8005b94:	ed93 7a00 	vldr	s14, [r3]
 8005b98:	4b50      	ldr	r3, [pc, #320]	@ (8005cdc <MahonyAHRSupdateIMU+0x244>)
 8005b9a:	edd3 7a00 	vldr	s15, [r3]
 8005b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ba2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005ba6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005baa:	4b4c      	ldr	r3, [pc, #304]	@ (8005cdc <MahonyAHRSupdateIMU+0x244>)
 8005bac:	edd3 6a03 	vldr	s13, [r3, #12]
 8005bb0:	4b4a      	ldr	r3, [pc, #296]	@ (8005cdc <MahonyAHRSupdateIMU+0x244>)
 8005bb2:	edd3 7a03 	vldr	s15, [r3, #12]
 8005bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bbe:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay_f * halfvz - az_f * halfvy);
 8005bc2:	ed97 7a03 	vldr	s14, [r7, #12]
 8005bc6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005bca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bce:	edd7 6a02 	vldr	s13, [r7, #8]
 8005bd2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bde:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az_f * halfvx - ax_f * halfvz);
 8005be2:	ed97 7a02 	vldr	s14, [r7, #8]
 8005be6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8005bea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bee:	edd7 6a04 	vldr	s13, [r7, #16]
 8005bf2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bfe:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax_f * halfvy - ay_f * halfvx);
 8005c02:	ed97 7a04 	vldr	s14, [r7, #16]
 8005c06:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c0e:	edd7 6a03 	vldr	s13, [r7, #12]
 8005c12:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8005c16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c1e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8005c22:	4b2f      	ldr	r3, [pc, #188]	@ (8005ce0 <MahonyAHRSupdateIMU+0x248>)
 8005c24:	edd3 7a00 	vldr	s15, [r3]
 8005c28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c30:	dd5e      	ble.n	8005cf0 <MahonyAHRSupdateIMU+0x258>
			integralFBx += twoKi * halfex * dt;	// integral error scaled by Ki
 8005c32:	4b2b      	ldr	r3, [pc, #172]	@ (8005ce0 <MahonyAHRSupdateIMU+0x248>)
 8005c34:	ed93 7a00 	vldr	s14, [r3]
 8005c38:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005c3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c40:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c48:	4b26      	ldr	r3, [pc, #152]	@ (8005ce4 <MahonyAHRSupdateIMU+0x24c>)
 8005c4a:	edd3 7a00 	vldr	s15, [r3]
 8005c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c52:	4b24      	ldr	r3, [pc, #144]	@ (8005ce4 <MahonyAHRSupdateIMU+0x24c>)
 8005c54:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * dt;
 8005c58:	4b21      	ldr	r3, [pc, #132]	@ (8005ce0 <MahonyAHRSupdateIMU+0x248>)
 8005c5a:	ed93 7a00 	vldr	s14, [r3]
 8005c5e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005c62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c66:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ce8 <MahonyAHRSupdateIMU+0x250>)
 8005c70:	edd3 7a00 	vldr	s15, [r3]
 8005c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c78:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce8 <MahonyAHRSupdateIMU+0x250>)
 8005c7a:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * dt;
 8005c7e:	4b18      	ldr	r3, [pc, #96]	@ (8005ce0 <MahonyAHRSupdateIMU+0x248>)
 8005c80:	ed93 7a00 	vldr	s14, [r3]
 8005c84:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005c88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c94:	4b15      	ldr	r3, [pc, #84]	@ (8005cec <MahonyAHRSupdateIMU+0x254>)
 8005c96:	edd3 7a00 	vldr	s15, [r3]
 8005c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c9e:	4b13      	ldr	r3, [pc, #76]	@ (8005cec <MahonyAHRSupdateIMU+0x254>)
 8005ca0:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8005ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8005ce4 <MahonyAHRSupdateIMU+0x24c>)
 8005ca6:	edd3 7a00 	vldr	s15, [r3]
 8005caa:	ed97 7a07 	vldr	s14, [r7, #28]
 8005cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cb2:	edc7 7a07 	vstr	s15, [r7, #28]
			gy += integralFBy;
 8005cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce8 <MahonyAHRSupdateIMU+0x250>)
 8005cb8:	edd3 7a00 	vldr	s15, [r3]
 8005cbc:	ed97 7a06 	vldr	s14, [r7, #24]
 8005cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cc4:	edc7 7a06 	vstr	s15, [r7, #24]
			gz += integralFBz;
 8005cc8:	4b08      	ldr	r3, [pc, #32]	@ (8005cec <MahonyAHRSupdateIMU+0x254>)
 8005cca:	edd3 7a00 	vldr	s15, [r3]
 8005cce:	ed97 7a05 	vldr	s14, [r7, #20]
 8005cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cd6:	edc7 7a05 	vstr	s15, [r7, #20]
 8005cda:	e015      	b.n	8005d08 <MahonyAHRSupdateIMU+0x270>
 8005cdc:	20000028 	.word	0x20000028
 8005ce0:	2000003c 	.word	0x2000003c
 8005ce4:	20000728 	.word	0x20000728
 8005ce8:	2000072c 	.word	0x2000072c
 8005cec:	20000730 	.word	0x20000730
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8005cf0:	4b9a      	ldr	r3, [pc, #616]	@ (8005f5c <MahonyAHRSupdateIMU+0x4c4>)
 8005cf2:	f04f 0200 	mov.w	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8005cf8:	4b99      	ldr	r3, [pc, #612]	@ (8005f60 <MahonyAHRSupdateIMU+0x4c8>)
 8005cfa:	f04f 0200 	mov.w	r2, #0
 8005cfe:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8005d00:	4b98      	ldr	r3, [pc, #608]	@ (8005f64 <MahonyAHRSupdateIMU+0x4cc>)
 8005d02:	f04f 0200 	mov.w	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8005d08:	4b97      	ldr	r3, [pc, #604]	@ (8005f68 <MahonyAHRSupdateIMU+0x4d0>)
 8005d0a:	ed93 7a00 	vldr	s14, [r3]
 8005d0e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d16:	ed97 7a07 	vldr	s14, [r7, #28]
 8005d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d1e:	edc7 7a07 	vstr	s15, [r7, #28]
		gy += twoKp * halfey;
 8005d22:	4b91      	ldr	r3, [pc, #580]	@ (8005f68 <MahonyAHRSupdateIMU+0x4d0>)
 8005d24:	ed93 7a00 	vldr	s14, [r3]
 8005d28:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d30:	ed97 7a06 	vldr	s14, [r7, #24]
 8005d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d38:	edc7 7a06 	vstr	s15, [r7, #24]
		gz += twoKp * halfez;
 8005d3c:	4b8a      	ldr	r3, [pc, #552]	@ (8005f68 <MahonyAHRSupdateIMU+0x4d0>)
 8005d3e:	ed93 7a00 	vldr	s14, [r3]
 8005d42:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8005d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d52:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * dt);		// pre-multiply common factors
 8005d56:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d5a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d62:	ed97 7a07 	vldr	s14, [r7, #28]
 8005d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d6a:	edc7 7a07 	vstr	s15, [r7, #28]
	gy *= (0.5f * dt);
 8005d6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d72:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d7a:	ed97 7a06 	vldr	s14, [r7, #24]
 8005d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d82:	edc7 7a06 	vstr	s15, [r7, #24]
	gz *= (0.5f * dt);
 8005d86:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d8a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d92:	ed97 7a05 	vldr	s14, [r7, #20]
 8005d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9a:	edc7 7a05 	vstr	s15, [r7, #20]
	qa = q[0];
 8005d9e:	4b73      	ldr	r3, [pc, #460]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 8005da4:	4b71      	ldr	r3, [pc, #452]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8005daa:	4b70      	ldr	r3, [pc, #448]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8005db0:	4b6e      	ldr	r3, [pc, #440]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005db2:	ed93 7a00 	vldr	s14, [r3]
 8005db6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005dba:	eef1 6a67 	vneg.f32	s13, s15
 8005dbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8005dc2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005dc6:	ed97 6a08 	vldr	s12, [r7, #32]
 8005dca:	edd7 7a06 	vldr	s15, [r7, #24]
 8005dce:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005dd2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005dd6:	4b65      	ldr	r3, [pc, #404]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005dd8:	ed93 6a03 	vldr	s12, [r3, #12]
 8005ddc:	edd7 7a05 	vldr	s15, [r7, #20]
 8005de0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005de4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dec:	4b5f      	ldr	r3, [pc, #380]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005dee:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8005df2:	4b5e      	ldr	r3, [pc, #376]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005df4:	ed93 7a01 	vldr	s14, [r3, #4]
 8005df8:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005dfc:	edd7 7a07 	vldr	s15, [r7, #28]
 8005e00:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e04:	ed97 6a08 	vldr	s12, [r7, #32]
 8005e08:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e0c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005e10:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005e14:	4b55      	ldr	r3, [pc, #340]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005e16:	ed93 6a03 	vldr	s12, [r3, #12]
 8005e1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8005e1e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005e22:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e2a:	4b50      	ldr	r3, [pc, #320]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005e2c:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8005e30:	4b4e      	ldr	r3, [pc, #312]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005e32:	ed93 7a02 	vldr	s14, [r3, #8]
 8005e36:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005e3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8005e3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e42:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8005e46:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005e4e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005e52:	4b46      	ldr	r3, [pc, #280]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005e54:	ed93 6a03 	vldr	s12, [r3, #12]
 8005e58:	edd7 7a07 	vldr	s15, [r7, #28]
 8005e5c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005e60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e68:	4b40      	ldr	r3, [pc, #256]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005e6a:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] += (qa * gz + qb * gy - qc * gx);
 8005e6e:	4b3f      	ldr	r3, [pc, #252]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005e70:	ed93 7a03 	vldr	s14, [r3, #12]
 8005e74:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005e78:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e80:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8005e84:	edd7 7a06 	vldr	s15, [r7, #24]
 8005e88:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005e8c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005e90:	ed97 6a08 	vldr	s12, [r7, #32]
 8005e94:	edd7 7a07 	vldr	s15, [r7, #28]
 8005e98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005e9c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ea4:	4b31      	ldr	r3, [pc, #196]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005ea6:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8005eaa:	4b30      	ldr	r3, [pc, #192]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005eac:	ed93 7a00 	vldr	s14, [r3]
 8005eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005eb2:	edd3 7a00 	vldr	s15, [r3]
 8005eb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005eba:	4b2c      	ldr	r3, [pc, #176]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005ebc:	edd3 6a01 	vldr	s13, [r3, #4]
 8005ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005ec2:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005eca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ece:	4b27      	ldr	r3, [pc, #156]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005ed0:	edd3 6a02 	vldr	s13, [r3, #8]
 8005ed4:	4b25      	ldr	r3, [pc, #148]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005ed6:	edd3 7a02 	vldr	s15, [r3, #8]
 8005eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ede:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ee2:	4b22      	ldr	r3, [pc, #136]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005ee4:	edd3 6a03 	vldr	s13, [r3, #12]
 8005ee8:	4b20      	ldr	r3, [pc, #128]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005eea:	edd3 7a03 	vldr	s15, [r3, #12]
 8005eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8005efa:	f000 fb4b 	bl	8006594 <invSqrt>
 8005efe:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 8005f02:	4b1a      	ldr	r3, [pc, #104]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005f04:	ed93 7a00 	vldr	s14, [r3]
 8005f08:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f10:	4b16      	ldr	r3, [pc, #88]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005f12:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8005f16:	4b15      	ldr	r3, [pc, #84]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005f18:	ed93 7a01 	vldr	s14, [r3, #4]
 8005f1c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f24:	4b11      	ldr	r3, [pc, #68]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005f26:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] *= recipNorm;
 8005f2a:	4b10      	ldr	r3, [pc, #64]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005f2c:	ed93 7a02 	vldr	s14, [r3, #8]
 8005f30:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f38:	4b0c      	ldr	r3, [pc, #48]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005f3a:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] *= recipNorm;
 8005f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005f40:	ed93 7a03 	vldr	s14, [r3, #12]
 8005f44:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4c:	4b07      	ldr	r3, [pc, #28]	@ (8005f6c <MahonyAHRSupdateIMU+0x4d4>)
 8005f4e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8005f52:	bf00      	nop
 8005f54:	3748      	adds	r7, #72	@ 0x48
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000728 	.word	0x20000728
 8005f60:	2000072c 	.word	0x2000072c
 8005f64:	20000730 	.word	0x20000730
 8005f68:	20000038 	.word	0x20000038
 8005f6c:	20000028 	.word	0x20000028

08005f70 <quaternionToYawDegree>:

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
    return acosf(safeValue) * (180.0f / 3.14f);
}

float quaternionToYawDegree() {
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 8005f76:	4b20      	ldr	r3, [pc, #128]	@ (8005ff8 <quaternionToYawDegree+0x88>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ff8 <quaternionToYawDegree+0x88>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	613b      	str	r3, [r7, #16]
 8005f82:	4b1d      	ldr	r3, [pc, #116]	@ (8005ff8 <quaternionToYawDegree+0x88>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff8 <quaternionToYawDegree+0x88>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	60bb      	str	r3, [r7, #8]
    float siny_cosp = 2.0f * (w * z + x * y);
 8005f8e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005f92:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f9a:	edd7 6a04 	vldr	s13, [r7, #16]
 8005f9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005faa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fae:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
 8005fb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fb6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005fba:	edd7 7a02 	vldr	s15, [r7, #8]
 8005fbe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fc6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fd2:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
 8005fd6:	edd7 0a00 	vldr	s1, [r7]
 8005fda:	ed97 0a01 	vldr	s0, [r7, #4]
 8005fde:	f008 ffa7 	bl	800ef30 <atan2f>
 8005fe2:	eef0 7a40 	vmov.f32	s15, s0
 8005fe6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005ffc <quaternionToYawDegree+0x8c>
 8005fea:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005fee:	eeb0 0a67 	vmov.f32	s0, s15
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	20000028 	.word	0x20000028
 8005ffc:	42652ee0 	.word	0x42652ee0

08006000 <quaternionToPitchDegree>:

float quaternionToPitchDegree() {
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 8006006:	4b22      	ldr	r3, [pc, #136]	@ (8006090 <quaternionToPitchDegree+0x90>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	4b20      	ldr	r3, [pc, #128]	@ (8006090 <quaternionToPitchDegree+0x90>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	4b1f      	ldr	r3, [pc, #124]	@ (8006090 <quaternionToPitchDegree+0x90>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	4b1d      	ldr	r3, [pc, #116]	@ (8006090 <quaternionToPitchDegree+0x90>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	60bb      	str	r3, [r7, #8]
    float sinp = 2.0f * (w * y - z * x);
 800601e:	ed97 7a05 	vldr	s14, [r7, #20]
 8006022:	edd7 7a03 	vldr	s15, [r7, #12]
 8006026:	ee27 7a27 	vmul.f32	s14, s14, s15
 800602a:	edd7 6a02 	vldr	s13, [r7, #8]
 800602e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006036:	ee77 7a67 	vsub.f32	s15, s14, s15
 800603a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800603e:	edc7 7a01 	vstr	s15, [r7, #4]
    if (fabsf(sinp) >= 1.0f)
 8006042:	edd7 7a01 	vldr	s15, [r7, #4]
 8006046:	eef0 7ae7 	vabs.f32	s15, s15
 800604a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800604e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006056:	db0c      	blt.n	8006072 <quaternionToPitchDegree+0x72>
        return (sinp > 0 ? 90.0f : -90.0f); // clamp
 8006058:	edd7 7a01 	vldr	s15, [r7, #4]
 800605c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006064:	dd02      	ble.n	800606c <quaternionToPitchDegree+0x6c>
 8006066:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8006094 <quaternionToPitchDegree+0x94>
 800606a:	e00c      	b.n	8006086 <quaternionToPitchDegree+0x86>
 800606c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8006098 <quaternionToPitchDegree+0x98>
 8006070:	e009      	b.n	8006086 <quaternionToPitchDegree+0x86>
    else
        return asinf(sinp) * (180.0f / 3.14159265f);
 8006072:	ed97 0a01 	vldr	s0, [r7, #4]
 8006076:	f008 ff2f 	bl	800eed8 <asinf>
 800607a:	eef0 7a40 	vmov.f32	s15, s0
 800607e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800609c <quaternionToPitchDegree+0x9c>
 8006082:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006086:	eeb0 0a67 	vmov.f32	s0, s15
 800608a:	3718      	adds	r7, #24
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	20000028 	.word	0x20000028
 8006094:	42b40000 	.word	0x42b40000
 8006098:	c2b40000 	.word	0xc2b40000
 800609c:	42652ee0 	.word	0x42652ee0

080060a0 <quaternionToRollDegree>:

float quaternionToRollDegree(){
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 80060a6:	4b20      	ldr	r3, [pc, #128]	@ (8006128 <quaternionToRollDegree+0x88>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	4b1e      	ldr	r3, [pc, #120]	@ (8006128 <quaternionToRollDegree+0x88>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	613b      	str	r3, [r7, #16]
 80060b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006128 <quaternionToRollDegree+0x88>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006128 <quaternionToRollDegree+0x88>)
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	60bb      	str	r3, [r7, #8]
    float sinr_cosp = 2.0f * (w * x + y * z);
 80060be:	ed97 7a05 	vldr	s14, [r7, #20]
 80060c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80060c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060ca:	edd7 6a03 	vldr	s13, [r7, #12]
 80060ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80060d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060de:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosr_cosp = 1.0f - 2.0f * (x * x + y * y);
 80060e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80060e6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80060ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80060ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80060f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006102:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(sinr_cosp, cosr_cosp) * (180.0f / 3.14159265f);
 8006106:	edd7 0a00 	vldr	s1, [r7]
 800610a:	ed97 0a01 	vldr	s0, [r7, #4]
 800610e:	f008 ff0f 	bl	800ef30 <atan2f>
 8006112:	eef0 7a40 	vmov.f32	s15, s0
 8006116:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800612c <quaternionToRollDegree+0x8c>
 800611a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800611e:	eeb0 0a67 	vmov.f32	s0, s15
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20000028 	.word	0x20000028
 800612c:	42652ee0 	.word	0x42652ee0

08006130 <quaternionToYaw>:


float quaternionToYaw(){
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 8006136:	4b2a      	ldr	r3, [pc, #168]	@ (80061e0 <quaternionToYaw+0xb0>)
 8006138:	ed93 7a01 	vldr	s14, [r3, #4]
 800613c:	4b28      	ldr	r3, [pc, #160]	@ (80061e0 <quaternionToYaw+0xb0>)
 800613e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006142:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006146:	4b26      	ldr	r3, [pc, #152]	@ (80061e0 <quaternionToYaw+0xb0>)
 8006148:	edd3 6a00 	vldr	s13, [r3]
 800614c:	4b24      	ldr	r3, [pc, #144]	@ (80061e0 <quaternionToYaw+0xb0>)
 800614e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006152:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800615a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800615e:	4b20      	ldr	r3, [pc, #128]	@ (80061e0 <quaternionToYaw+0xb0>)
 8006160:	ed93 7a00 	vldr	s14, [r3]
 8006164:	4b1e      	ldr	r3, [pc, #120]	@ (80061e0 <quaternionToYaw+0xb0>)
 8006166:	edd3 7a00 	vldr	s15, [r3]
 800616a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800616e:	4b1c      	ldr	r3, [pc, #112]	@ (80061e0 <quaternionToYaw+0xb0>)
 8006170:	edd3 6a01 	vldr	s13, [r3, #4]
 8006174:	4b1a      	ldr	r3, [pc, #104]	@ (80061e0 <quaternionToYaw+0xb0>)
 8006176:	edd3 7a01 	vldr	s15, [r3, #4]
 800617a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800617e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006182:	4b17      	ldr	r3, [pc, #92]	@ (80061e0 <quaternionToYaw+0xb0>)
 8006184:	edd3 6a02 	vldr	s13, [r3, #8]
 8006188:	4b15      	ldr	r3, [pc, #84]	@ (80061e0 <quaternionToYaw+0xb0>)
 800618a:	edd3 7a02 	vldr	s15, [r3, #8]
 800618e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006192:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006196:	4b12      	ldr	r3, [pc, #72]	@ (80061e0 <quaternionToYaw+0xb0>)
 8006198:	edd3 6a03 	vldr	s13, [r3, #12]
 800619c:	4b10      	ldr	r3, [pc, #64]	@ (80061e0 <quaternionToYaw+0xb0>)
 800619e:	edd3 7a03 	vldr	s15, [r3, #12]
 80061a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061aa:	eef0 0a67 	vmov.f32	s1, s15
 80061ae:	eeb0 0a46 	vmov.f32	s0, s12
 80061b2:	f008 febd 	bl	800ef30 <atan2f>
 80061b6:	eef0 7a40 	vmov.f32	s15, s0
 80061ba:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80061e4 <quaternionToYaw+0xb4>
 80061be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80061c2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80061e8 <quaternionToYaw+0xb8>
 80061c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061ca:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	ee07 3a90 	vmov	s15, r3
}
 80061d4:	eeb0 0a67 	vmov.f32	s0, s15
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000028 	.word	0x20000028
 80061e4:	43340000 	.word	0x43340000
 80061e8:	40490fd0 	.word	0x40490fd0

080061ec <quaternionToPitch>:

float quaternionToPitch(){
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 80061f2:	4b17      	ldr	r3, [pc, #92]	@ (8006250 <quaternionToPitch+0x64>)
 80061f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80061f8:	4b15      	ldr	r3, [pc, #84]	@ (8006250 <quaternionToPitch+0x64>)
 80061fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80061fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006202:	4b13      	ldr	r3, [pc, #76]	@ (8006250 <quaternionToPitch+0x64>)
 8006204:	edd3 6a00 	vldr	s13, [r3]
 8006208:	4b11      	ldr	r3, [pc, #68]	@ (8006250 <quaternionToPitch+0x64>)
 800620a:	edd3 7a02 	vldr	s15, [r3, #8]
 800620e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006216:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800621a:	eeb0 0a67 	vmov.f32	s0, s15
 800621e:	f008 fe5b 	bl	800eed8 <asinf>
 8006222:	eef0 7a40 	vmov.f32	s15, s0
 8006226:	eef1 7a67 	vneg.f32	s15, s15
 800622a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006254 <quaternionToPitch+0x68>
 800622e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006232:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006258 <quaternionToPitch+0x6c>
 8006236:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800623a:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	ee07 3a90 	vmov	s15, r3
}
 8006244:	eeb0 0a67 	vmov.f32	s0, s15
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000028 	.word	0x20000028
 8006254:	43340000 	.word	0x43340000
 8006258:	40490fd0 	.word	0x40490fd0

0800625c <quaternionToRoll>:

float quaternionToRoll(){
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 8006262:	4b2a      	ldr	r3, [pc, #168]	@ (800630c <quaternionToRoll+0xb0>)
 8006264:	ed93 7a00 	vldr	s14, [r3]
 8006268:	4b28      	ldr	r3, [pc, #160]	@ (800630c <quaternionToRoll+0xb0>)
 800626a:	edd3 7a01 	vldr	s15, [r3, #4]
 800626e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006272:	4b26      	ldr	r3, [pc, #152]	@ (800630c <quaternionToRoll+0xb0>)
 8006274:	edd3 6a02 	vldr	s13, [r3, #8]
 8006278:	4b24      	ldr	r3, [pc, #144]	@ (800630c <quaternionToRoll+0xb0>)
 800627a:	edd3 7a03 	vldr	s15, [r3, #12]
 800627e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006286:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800628a:	4b20      	ldr	r3, [pc, #128]	@ (800630c <quaternionToRoll+0xb0>)
 800628c:	ed93 7a00 	vldr	s14, [r3]
 8006290:	4b1e      	ldr	r3, [pc, #120]	@ (800630c <quaternionToRoll+0xb0>)
 8006292:	edd3 7a00 	vldr	s15, [r3]
 8006296:	ee27 7a27 	vmul.f32	s14, s14, s15
 800629a:	4b1c      	ldr	r3, [pc, #112]	@ (800630c <quaternionToRoll+0xb0>)
 800629c:	edd3 6a01 	vldr	s13, [r3, #4]
 80062a0:	4b1a      	ldr	r3, [pc, #104]	@ (800630c <quaternionToRoll+0xb0>)
 80062a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80062a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062ae:	4b17      	ldr	r3, [pc, #92]	@ (800630c <quaternionToRoll+0xb0>)
 80062b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80062b4:	4b15      	ldr	r3, [pc, #84]	@ (800630c <quaternionToRoll+0xb0>)
 80062b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80062ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062c2:	4b12      	ldr	r3, [pc, #72]	@ (800630c <quaternionToRoll+0xb0>)
 80062c4:	edd3 6a03 	vldr	s13, [r3, #12]
 80062c8:	4b10      	ldr	r3, [pc, #64]	@ (800630c <quaternionToRoll+0xb0>)
 80062ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80062ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062d6:	eef0 0a67 	vmov.f32	s1, s15
 80062da:	eeb0 0a46 	vmov.f32	s0, s12
 80062de:	f008 fe27 	bl	800ef30 <atan2f>
 80062e2:	eef0 7a40 	vmov.f32	s15, s0
 80062e6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006310 <quaternionToRoll+0xb4>
 80062ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80062ee:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006314 <quaternionToRoll+0xb8>
 80062f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062f6:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	ee07 3a90 	vmov	s15, r3
}
 8006300:	eeb0 0a67 	vmov.f32	s0, s15
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	20000028 	.word	0x20000028
 8006310:	43340000 	.word	0x43340000
 8006314:	40490fd0 	.word	0x40490fd0

08006318 <getInitialQuaternion>:

void getInitialQuaternion() {
 8006318:	b5b0      	push	{r4, r5, r7, lr}
 800631a:	b092      	sub	sp, #72	@ 0x48
 800631c:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.acc_z * BMI_sensor.acc_z + BMI_sensor.acc_x * BMI_sensor.acc_x + BMI_sensor.acc_y * BMI_sensor.acc_y);
 800631e:	4b99      	ldr	r3, [pc, #612]	@ (8006584 <getInitialQuaternion+0x26c>)
 8006320:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8006324:	4b97      	ldr	r3, [pc, #604]	@ (8006584 <getInitialQuaternion+0x26c>)
 8006326:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 800632a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800632e:	4b95      	ldr	r3, [pc, #596]	@ (8006584 <getInitialQuaternion+0x26c>)
 8006330:	edd3 6a2f 	vldr	s13, [r3, #188]	@ 0xbc
 8006334:	4b93      	ldr	r3, [pc, #588]	@ (8006584 <getInitialQuaternion+0x26c>)
 8006336:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 800633a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800633e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006342:	4b90      	ldr	r3, [pc, #576]	@ (8006584 <getInitialQuaternion+0x26c>)
 8006344:	edd3 6a30 	vldr	s13, [r3, #192]	@ 0xc0
 8006348:	4b8e      	ldr	r3, [pc, #568]	@ (8006584 <getInitialQuaternion+0x26c>)
 800634a:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 800634e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006356:	ee17 0a90 	vmov	r0, s15
 800635a:	f7fa f915 	bl	8000588 <__aeabi_f2d>
 800635e:	4602      	mov	r2, r0
 8006360:	460b      	mov	r3, r1
 8006362:	ec43 2b10 	vmov	d0, r2, r3
 8006366:	f008 fd09 	bl	800ed7c <sqrt>
 800636a:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.acc_x;
 800636e:	4b85      	ldr	r3, [pc, #532]	@ (8006584 <getInitialQuaternion+0x26c>)
 8006370:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006374:	4618      	mov	r0, r3
 8006376:	f7fa f907 	bl	8000588 <__aeabi_f2d>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)-BMI_sensor.acc_z;
 8006382:	4b80      	ldr	r3, [pc, #512]	@ (8006584 <getInitialQuaternion+0x26c>)
 8006384:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 8006388:	eef1 7a67 	vneg.f32	s15, s15
 800638c:	ee17 3a90 	vmov	r3, s15
 8006390:	4618      	mov	r0, r3
 8006392:	f7fa f8f9 	bl	8000588 <__aeabi_f2d>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] = (double)BMI_sensor.acc_y;
 800639e:	4b79      	ldr	r3, [pc, #484]	@ (8006584 <getInitialQuaternion+0x26c>)
 80063a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fa f8ef 	bl	8000588 <__aeabi_f2d>
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    accel_temp[0] /= norm;
 80063b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80063b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80063ba:	f7fa fa67 	bl	800088c <__aeabi_ddiv>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 80063c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80063ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80063ce:	f7fa fa5d 	bl	800088c <__aeabi_ddiv>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 80063da:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80063de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80063e2:	f7fa fa53 	bl	800088c <__aeabi_ddiv>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 80063ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063f2:	f04f 0000 	mov.w	r0, #0
 80063f6:	4964      	ldr	r1, [pc, #400]	@ (8006588 <getInitialQuaternion+0x270>)
 80063f8:	f7f9 ff66 	bl	80002c8 <__aeabi_dsub>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	ec43 2b17 	vmov	d7, r2, r3
 8006404:	eeb0 0a47 	vmov.f32	s0, s14
 8006408:	eef0 0a67 	vmov.f32	s1, s15
 800640c:	f008 fcb6 	bl	800ed7c <sqrt>
 8006410:	ec51 0b10 	vmov	r0, r1, d0
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	4b5c      	ldr	r3, [pc, #368]	@ (800658c <getInitialQuaternion+0x274>)
 800641a:	f7fa f90d 	bl	8000638 <__aeabi_dmul>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 8006426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800642a:	f04f 0000 	mov.w	r0, #0
 800642e:	4957      	ldr	r1, [pc, #348]	@ (800658c <getInitialQuaternion+0x274>)
 8006430:	f7fa fa2c 	bl	800088c <__aeabi_ddiv>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 800643c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006440:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006444:	f7fa f8f8 	bl	8000638 <__aeabi_dmul>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	4610      	mov	r0, r2
 800644e:	4619      	mov	r1, r3
 8006450:	f04f 0200 	mov.w	r2, #0
 8006454:	4b4d      	ldr	r3, [pc, #308]	@ (800658c <getInitialQuaternion+0x274>)
 8006456:	f7fa f8ef 	bl	8000638 <__aeabi_dmul>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 8006462:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8006466:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800646a:	f7fa f8e5 	bl	8000638 <__aeabi_dmul>
 800646e:	4602      	mov	r2, r0
 8006470:	460b      	mov	r3, r1
 8006472:	4610      	mov	r0, r2
 8006474:	4619      	mov	r1, r3
 8006476:	f04f 0200 	mov.w	r2, #0
 800647a:	4b44      	ldr	r3, [pc, #272]	@ (800658c <getInitialQuaternion+0x274>)
 800647c:	f7fa f8dc 	bl	8000638 <__aeabi_dmul>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 8006488:	f04f 0200 	mov.w	r2, #0
 800648c:	f04f 0300 	mov.w	r3, #0
 8006490:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8006494:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800649c:	f7fa f8cc 	bl	8000638 <__aeabi_dmul>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4614      	mov	r4, r2
 80064a6:	461d      	mov	r5, r3
 80064a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064b0:	f7fa f8c2 	bl	8000638 <__aeabi_dmul>
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4620      	mov	r0, r4
 80064ba:	4629      	mov	r1, r5
 80064bc:	f7f9 ff06 	bl	80002cc <__adddf3>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4614      	mov	r4, r2
 80064c6:	461d      	mov	r5, r3
 80064c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80064cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80064d0:	f7fa f8b2 	bl	8000638 <__aeabi_dmul>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	4620      	mov	r0, r4
 80064da:	4629      	mov	r1, r5
 80064dc:	f7f9 fef6 	bl	80002cc <__adddf3>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4614      	mov	r4, r2
 80064e6:	461d      	mov	r5, r3
 80064e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80064ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064f0:	f7fa f8a2 	bl	8000638 <__aeabi_dmul>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	4620      	mov	r0, r4
 80064fa:	4629      	mov	r1, r5
 80064fc:	f7f9 fee6 	bl	80002cc <__adddf3>
 8006500:	4602      	mov	r2, r0
 8006502:	460b      	mov	r3, r1
 8006504:	ec43 2b17 	vmov	d7, r2, r3
 8006508:	eeb0 0a47 	vmov.f32	s0, s14
 800650c:	eef0 0a67 	vmov.f32	s1, s15
 8006510:	f008 fc34 	bl	800ed7c <sqrt>
 8006514:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

    q[0] = q_temp[0] / norm;
 8006518:	e9d7 0100 	ldrd	r0, r1, [r7]
 800651c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006520:	f7fa f9b4 	bl	800088c <__aeabi_ddiv>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4610      	mov	r0, r2
 800652a:	4619      	mov	r1, r3
 800652c:	f7fa fb5c 	bl	8000be8 <__aeabi_d2f>
 8006530:	4603      	mov	r3, r0
 8006532:	4a17      	ldr	r2, [pc, #92]	@ (8006590 <getInitialQuaternion+0x278>)
 8006534:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 8006536:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800653a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800653e:	f7fa f9a5 	bl	800088c <__aeabi_ddiv>
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	4610      	mov	r0, r2
 8006548:	4619      	mov	r1, r3
 800654a:	f7fa fb4d 	bl	8000be8 <__aeabi_d2f>
 800654e:	4603      	mov	r3, r0
 8006550:	4a0f      	ldr	r2, [pc, #60]	@ (8006590 <getInitialQuaternion+0x278>)
 8006552:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 8006554:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006558:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800655c:	f7fa f996 	bl	800088c <__aeabi_ddiv>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4610      	mov	r0, r2
 8006566:	4619      	mov	r1, r3
 8006568:	f7fa fb3e 	bl	8000be8 <__aeabi_d2f>
 800656c:	4603      	mov	r3, r0
 800656e:	4a08      	ldr	r2, [pc, #32]	@ (8006590 <getInitialQuaternion+0x278>)
 8006570:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 8006572:	4b07      	ldr	r3, [pc, #28]	@ (8006590 <getInitialQuaternion+0x278>)
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	60da      	str	r2, [r3, #12]
}
 800657a:	bf00      	nop
 800657c:	3748      	adds	r7, #72	@ 0x48
 800657e:	46bd      	mov	sp, r7
 8006580:	bdb0      	pop	{r4, r5, r7, pc}
 8006582:	bf00      	nop
 8006584:	20000530 	.word	0x20000530
 8006588:	3ff00000 	.word	0x3ff00000
 800658c:	3fe00000 	.word	0x3fe00000
 8006590:	20000028 	.word	0x20000028

08006594 <invSqrt>:

float invSqrt(float x) {
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800659e:	edd7 7a01 	vldr	s15, [r7, #4]
 80065a2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80065a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065aa:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80065b2:	f107 0310 	add.w	r3, r7, #16
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	105a      	asrs	r2, r3, #1
 80065be:	4b12      	ldr	r3, [pc, #72]	@ (8006608 <invSqrt+0x74>)
 80065c0:	1a9b      	subs	r3, r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80065c4:	f107 030c 	add.w	r3, r7, #12
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80065cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80065d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80065d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80065dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80065e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80065ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065f0:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	ee07 3a90 	vmov	s15, r3
}
 80065fa:	eeb0 0a67 	vmov.f32	s0, s15
 80065fe:	371c      	adds	r7, #28
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	5f3759df 	.word	0x5f3759df

0800660c <calculate_accel_std_deviation>:
/**
 * @brief İvme değerlerinin standart sapmasını hesapla
 * @return Standart sapma değeri
 */
static float calculate_accel_std_deviation(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
    // Buffer dolmadıysa ve çok az veri varsa
    if (!accel_buffer_full && accel_buffer_index < 2) return 0.0f;
 8006612:	4b3d      	ldr	r3, [pc, #244]	@ (8006708 <calculate_accel_std_deviation+0xfc>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d106      	bne.n	8006628 <calculate_accel_std_deviation+0x1c>
 800661a:	4b3c      	ldr	r3, [pc, #240]	@ (800670c <calculate_accel_std_deviation+0x100>)
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d802      	bhi.n	8006628 <calculate_accel_std_deviation+0x1c>
 8006622:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8006710 <calculate_accel_std_deviation+0x104>
 8006626:	e069      	b.n	80066fc <calculate_accel_std_deviation+0xf0>

    int count = accel_buffer_full ? ACCEL_BUFFER_SIZE : accel_buffer_index;
 8006628:	4b37      	ldr	r3, [pc, #220]	@ (8006708 <calculate_accel_std_deviation+0xfc>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d102      	bne.n	8006636 <calculate_accel_std_deviation+0x2a>
 8006630:	4b36      	ldr	r3, [pc, #216]	@ (800670c <calculate_accel_std_deviation+0x100>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	e000      	b.n	8006638 <calculate_accel_std_deviation+0x2c>
 8006636:	2305      	movs	r3, #5
 8006638:	607b      	str	r3, [r7, #4]
    float sum = 0.0f;
 800663a:	f04f 0300 	mov.w	r3, #0
 800663e:	617b      	str	r3, [r7, #20]
    float mean = 0.0f;
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	603b      	str	r3, [r7, #0]
    float variance = 0.0f;
 8006646:	f04f 0300 	mov.w	r3, #0
 800664a:	613b      	str	r3, [r7, #16]

    // Ortalama hesapla
    for (int i = 0; i < count; i++) {
 800664c:	2300      	movs	r3, #0
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	e00e      	b.n	8006670 <calculate_accel_std_deviation+0x64>
        sum += accel_buffer[i];
 8006652:	4a30      	ldr	r2, [pc, #192]	@ (8006714 <calculate_accel_std_deviation+0x108>)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	edd3 7a00 	vldr	s15, [r3]
 800665e:	ed97 7a05 	vldr	s14, [r7, #20]
 8006662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006666:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < count; i++) {
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3301      	adds	r3, #1
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	429a      	cmp	r2, r3
 8006676:	dbec      	blt.n	8006652 <calculate_accel_std_deviation+0x46>
    }
    mean = sum / count;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	ee07 3a90 	vmov	s15, r3
 800667e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006682:	edd7 6a05 	vldr	s13, [r7, #20]
 8006686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800668a:	edc7 7a00 	vstr	s15, [r7]

    // Varyans hesapla
    for (int i = 0; i < count; i++) {
 800668e:	2300      	movs	r3, #0
 8006690:	60bb      	str	r3, [r7, #8]
 8006692:	e01e      	b.n	80066d2 <calculate_accel_std_deviation+0xc6>
        variance += (accel_buffer[i] - mean) * (accel_buffer[i] - mean);
 8006694:	4a1f      	ldr	r2, [pc, #124]	@ (8006714 <calculate_accel_std_deviation+0x108>)
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	ed93 7a00 	vldr	s14, [r3]
 80066a0:	edd7 7a00 	vldr	s15, [r7]
 80066a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80066a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006714 <calculate_accel_std_deviation+0x108>)
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	edd3 6a00 	vldr	s13, [r3]
 80066b4:	edd7 7a00 	vldr	s15, [r7]
 80066b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80066bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80066c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066c8:	edc7 7a04 	vstr	s15, [r7, #16]
    for (int i = 0; i < count; i++) {
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	3301      	adds	r3, #1
 80066d0:	60bb      	str	r3, [r7, #8]
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	dbdc      	blt.n	8006694 <calculate_accel_std_deviation+0x88>
    }
    variance /= count;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	ee07 3a90 	vmov	s15, r3
 80066e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066e4:	edd7 6a04 	vldr	s13, [r7, #16]
 80066e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066ec:	edc7 7a04 	vstr	s15, [r7, #16]

    return sqrtf(variance);
 80066f0:	ed97 0a04 	vldr	s0, [r7, #16]
 80066f4:	f008 fc1e 	bl	800ef34 <sqrtf>
 80066f8:	eef0 7a40 	vmov.f32	s15, s0
}
 80066fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	200007b5 	.word	0x200007b5
 800670c:	200007b4 	.word	0x200007b4
 8006710:	00000000 	.word	0x00000000
 8006714:	200007a0 	.word	0x200007a0

08006718 <detect_accel_failure>:
 * @brief İvme sensörünün arızalı olup olmadığını kontrol et
 * @param accel İvme değeri (m/s²)
 * @return 1: Arıza tespit edildi, 0: Arıza yok
 */
static uint8_t detect_accel_failure(float accel)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0
 800671e:	ed87 0a01 	vstr	s0, [r7, #4]
    float accel_abs = fabsf(accel);
 8006722:	edd7 7a01 	vldr	s15, [r7, #4]
 8006726:	eef0 7ae7 	vabs.f32	s15, s15
 800672a:	edc7 7a05 	vstr	s15, [r7, #20]
    float max_accel, max_std;

    // Buffer güncelleme
    accel_buffer[accel_buffer_index] = accel_abs;
 800672e:	4b31      	ldr	r3, [pc, #196]	@ (80067f4 <detect_accel_failure+0xdc>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	4a31      	ldr	r2, [pc, #196]	@ (80067f8 <detect_accel_failure+0xe0>)
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	601a      	str	r2, [r3, #0]
    accel_buffer_index = (accel_buffer_index + 1) % ACCEL_BUFFER_SIZE;
 800673c:	4b2d      	ldr	r3, [pc, #180]	@ (80067f4 <detect_accel_failure+0xdc>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	4b2e      	ldr	r3, [pc, #184]	@ (80067fc <detect_accel_failure+0xe4>)
 8006744:	fb83 1302 	smull	r1, r3, r3, r2
 8006748:	1059      	asrs	r1, r3, #1
 800674a:	17d3      	asrs	r3, r2, #31
 800674c:	1ac9      	subs	r1, r1, r3
 800674e:	460b      	mov	r3, r1
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	440b      	add	r3, r1
 8006754:	1ad1      	subs	r1, r2, r3
 8006756:	b2ca      	uxtb	r2, r1
 8006758:	4b26      	ldr	r3, [pc, #152]	@ (80067f4 <detect_accel_failure+0xdc>)
 800675a:	701a      	strb	r2, [r3, #0]
    if (accel_buffer_index == 0) {
 800675c:	4b25      	ldr	r3, [pc, #148]	@ (80067f4 <detect_accel_failure+0xdc>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d102      	bne.n	800676a <detect_accel_failure+0x52>
        accel_buffer_full = 1;
 8006764:	4b26      	ldr	r3, [pc, #152]	@ (8006800 <detect_accel_failure+0xe8>)
 8006766:	2201      	movs	r2, #1
 8006768:	701a      	strb	r2, [r3, #0]
    }

    // Standart sapma hesapla
    float std_dev = calculate_accel_std_deviation();
 800676a:	f7ff ff4f 	bl	800660c <calculate_accel_std_deviation>
 800676e:	ed87 0a04 	vstr	s0, [r7, #16]

    // Uçuş başlangıç zamanını flight_algorithm'dan al
	uint32_t algorithm_start_time = flight_algorithm_get_start_time();
 8006772:	f7fc fc0b 	bl	8002f8c <flight_algorithm_get_start_time>
 8006776:	60f8      	str	r0, [r7, #12]

	// Uçuş başlamışsa flight_algorithm'dan gelen zamanı kullan
	if (algorithm_start_time > 0) {
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d002      	beq.n	8006784 <detect_accel_failure+0x6c>
		flight_start_time = algorithm_start_time;
 800677e:	4a21      	ldr	r2, [pc, #132]	@ (8006804 <detect_accel_failure+0xec>)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6013      	str	r3, [r2, #0]
	}

	// Uçuş fazına göre limit değerlerini belirle
	if (flight_start_time == 0) {
 8006784:	4b1f      	ldr	r3, [pc, #124]	@ (8006804 <detect_accel_failure+0xec>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d104      	bne.n	8006796 <detect_accel_failure+0x7e>
		max_accel = 200.0f;  // Yer hazırlığında gerçekçi olmayan çok yüksek değer
 800678c:	4b1e      	ldr	r3, [pc, #120]	@ (8006808 <detect_accel_failure+0xf0>)
 800678e:	61fb      	str	r3, [r7, #28]
		max_std = 100.0f;    // Yer hazırlığında çok yüksek standart sapma eşiği
 8006790:	4b1e      	ldr	r3, [pc, #120]	@ (800680c <detect_accel_failure+0xf4>)
 8006792:	61bb      	str	r3, [r7, #24]
 8006794:	e014      	b.n	80067c0 <detect_accel_failure+0xa8>
	}
	else {
		// *** UÇUŞ BAŞLADI - NORMAL ARIZA TESPİTİ ***
		uint32_t flight_elapsed_time = HAL_GetTick() - flight_start_time;
 8006796:	f001 f805 	bl	80077a4 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	4b19      	ldr	r3, [pc, #100]	@ (8006804 <detect_accel_failure+0xec>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	60bb      	str	r3, [r7, #8]

		if (flight_elapsed_time < THRUST_PHASE_DURATION_MS) {
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d804      	bhi.n	80067b8 <detect_accel_failure+0xa0>
			// İtki fazı - Yüksek limitler
			max_accel = ACCEL_MAX_VALUE_THRUST;
 80067ae:	4b18      	ldr	r3, [pc, #96]	@ (8006810 <detect_accel_failure+0xf8>)
 80067b0:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_THRUST;
 80067b2:	4b18      	ldr	r3, [pc, #96]	@ (8006814 <detect_accel_failure+0xfc>)
 80067b4:	61bb      	str	r3, [r7, #24]
 80067b6:	e003      	b.n	80067c0 <detect_accel_failure+0xa8>
		} else {
			// Seyir fazı - Düşük limitler
			max_accel = ACCEL_MAX_VALUE_CRUISE;
 80067b8:	4b16      	ldr	r3, [pc, #88]	@ (8006814 <detect_accel_failure+0xfc>)
 80067ba:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_CRUISE;
 80067bc:	4b16      	ldr	r3, [pc, #88]	@ (8006818 <detect_accel_failure+0x100>)
 80067be:	61bb      	str	r3, [r7, #24]
		}
	}

    // İvme değeri veya standart sapma limitler dışındaysa
    if (accel_abs > max_accel || std_dev > max_std) {
 80067c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80067c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80067c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067d0:	dc08      	bgt.n	80067e4 <detect_accel_failure+0xcc>
 80067d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80067d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80067da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067e2:	dd01      	ble.n	80067e8 <detect_accel_failure+0xd0>
        return 1;  // Arıza tespit edildi
 80067e4:	2301      	movs	r3, #1
 80067e6:	e000      	b.n	80067ea <detect_accel_failure+0xd2>
    }

    return 0;  // Arıza yok
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3720      	adds	r7, #32
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	200007b4 	.word	0x200007b4
 80067f8:	200007a0 	.word	0x200007a0
 80067fc:	66666667 	.word	0x66666667
 8006800:	200007b5 	.word	0x200007b5
 8006804:	2000079c 	.word	0x2000079c
 8006808:	43480000 	.word	0x43480000
 800680c:	42c80000 	.word	0x42c80000
 8006810:	43160000 	.word	0x43160000
 8006814:	42480000 	.word	0x42480000
 8006818:	41700000 	.word	0x41700000

0800681c <sensor_fusion_init>:

/**
 * @brief Initialize the sensor fusion module
 */
void sensor_fusion_init(BME_280_t* BME)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
    KalmanFilter_Init(&kalman);
 8006824:	481b      	ldr	r0, [pc, #108]	@ (8006894 <sensor_fusion_init+0x78>)
 8006826:	f7fc fbbd 	bl	8002fa4 <KalmanFilter_Init>

    // Sensörlerinize göre gürültü değerlerini ayarlayın
    kalman.process_noise = 0.1f;         // Model gürültüsü
 800682a:	4b1a      	ldr	r3, [pc, #104]	@ (8006894 <sensor_fusion_init+0x78>)
 800682c:	4a1a      	ldr	r2, [pc, #104]	@ (8006898 <sensor_fusion_init+0x7c>)
 800682e:	631a      	str	r2, [r3, #48]	@ 0x30
    kalman.measurement_noise_alt = 0.005f;  // BME280 yükseklik gürültüsü
 8006830:	4b18      	ldr	r3, [pc, #96]	@ (8006894 <sensor_fusion_init+0x78>)
 8006832:	4a1a      	ldr	r2, [pc, #104]	@ (800689c <sensor_fusion_init+0x80>)
 8006834:	635a      	str	r2, [r3, #52]	@ 0x34
    kalman.measurement_noise_acc = 5.0f;  // BMI088 ivme gürültüsü
 8006836:	4b17      	ldr	r3, [pc, #92]	@ (8006894 <sensor_fusion_init+0x78>)
 8006838:	4a19      	ldr	r2, [pc, #100]	@ (80068a0 <sensor_fusion_init+0x84>)
 800683a:	639a      	str	r2, [r3, #56]	@ 0x38


    // İvme arıza tespit değişkenlerini sıfırla
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 800683c:	2300      	movs	r3, #0
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	e009      	b.n	8006856 <sensor_fusion_init+0x3a>
        accel_buffer[i] = 0.0f;
 8006842:	4a18      	ldr	r2, [pc, #96]	@ (80068a4 <sensor_fusion_init+0x88>)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	f04f 0200 	mov.w	r2, #0
 800684e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3301      	adds	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b04      	cmp	r3, #4
 800685a:	ddf2      	ble.n	8006842 <sensor_fusion_init+0x26>
    }
    accel_buffer_index = 0;
 800685c:	4b12      	ldr	r3, [pc, #72]	@ (80068a8 <sensor_fusion_init+0x8c>)
 800685e:	2200      	movs	r2, #0
 8006860:	701a      	strb	r2, [r3, #0]
    accel_buffer_full = 0;
 8006862:	4b12      	ldr	r3, [pc, #72]	@ (80068ac <sensor_fusion_init+0x90>)
 8006864:	2200      	movs	r2, #0
 8006866:	701a      	strb	r2, [r3, #0]
    accel_failure_detected = 0;
 8006868:	4b11      	ldr	r3, [pc, #68]	@ (80068b0 <sensor_fusion_init+0x94>)
 800686a:	2200      	movs	r2, #0
 800686c:	701a      	strb	r2, [r3, #0]

    initialized = 1;
 800686e:	4b11      	ldr	r3, [pc, #68]	@ (80068b4 <sensor_fusion_init+0x98>)
 8006870:	2201      	movs	r2, #1
 8006872:	701a      	strb	r2, [r3, #0]
    reference_altitude = BME->base_altitude;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006878:	4a0f      	ldr	r2, [pc, #60]	@ (80068b8 <sensor_fusion_init+0x9c>)
 800687a:	6013      	str	r3, [r2, #0]
    last_kalman_update_time = HAL_GetTick();
 800687c:	f000 ff92 	bl	80077a4 <HAL_GetTick>
 8006880:	4603      	mov	r3, r0
 8006882:	4a0e      	ldr	r2, [pc, #56]	@ (80068bc <sensor_fusion_init+0xa0>)
 8006884:	6013      	str	r3, [r2, #0]
    flight_start_time = 0;
 8006886:	4b0e      	ldr	r3, [pc, #56]	@ (80068c0 <sensor_fusion_init+0xa4>)
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]
}
 800688c:	bf00      	nop
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	20000744 	.word	0x20000744
 8006898:	3dcccccd 	.word	0x3dcccccd
 800689c:	3ba3d70a 	.word	0x3ba3d70a
 80068a0:	40a00000 	.word	0x40a00000
 80068a4:	200007a0 	.word	0x200007a0
 80068a8:	200007b4 	.word	0x200007b4
 80068ac:	200007b5 	.word	0x200007b5
 80068b0:	200007b6 	.word	0x200007b6
 80068b4:	20000790 	.word	0x20000790
 80068b8:	20000794 	.word	0x20000794
 80068bc:	20000798 	.word	0x20000798
 80068c0:	2000079c 	.word	0x2000079c
 80068c4:	00000000 	.word	0x00000000

080068c8 <sensor_fusion_update_kalman>:

/**
 * @brief Update sensor fusion with new measurements (Kalman filter)
 */
void sensor_fusion_update_kalman(BME_280_t* BME, bmi088_struct_t* BMI, sensor_fusion_t* sensor)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08a      	sub	sp, #40	@ 0x28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
    // Get current time for automatic delta calculation
    uint32_t current_time = HAL_GetTick();
 80068d4:	f000 ff66 	bl	80077a4 <HAL_GetTick>
 80068d8:	6238      	str	r0, [r7, #32]

    // Calculate time difference in seconds
    float time_sec = (current_time - last_kalman_update_time) / 1000.0f;
 80068da:	4b55      	ldr	r3, [pc, #340]	@ (8006a30 <sensor_fusion_update_kalman+0x168>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6a3a      	ldr	r2, [r7, #32]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	ee07 3a90 	vmov	s15, r3
 80068e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80068ea:	eddf 6a52 	vldr	s13, [pc, #328]	@ 8006a34 <sensor_fusion_update_kalman+0x16c>
 80068ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80068f2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Update the last update time
    last_kalman_update_time = current_time;
 80068f6:	4a4e      	ldr	r2, [pc, #312]	@ (8006a30 <sensor_fusion_update_kalman+0x168>)
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	6013      	str	r3, [r2, #0]

    float altitude = BME->altitude;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	61fb      	str	r3, [r7, #28]

    // Ensure time is valid (never zero or negative)
    if (time_sec <= 0.001f) {
 8006902:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006906:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006a38 <sensor_fusion_update_kalman+0x170>
 800690a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800690e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006912:	d801      	bhi.n	8006918 <sensor_fusion_update_kalman+0x50>
        time_sec = 0.01f; // Use default time step if invalid
 8006914:	4b49      	ldr	r3, [pc, #292]	@ (8006a3c <sensor_fusion_update_kalman+0x174>)
 8006916:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calculate vertical acceleration by compensating for gravity using IMU orientation
    float angle_rad = BMI->angleZ * (M_PI / 180.0f);  // dereceyse radyana çevir
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800691e:	4618      	mov	r0, r3
 8006920:	f7f9 fe32 	bl	8000588 <__aeabi_f2d>
 8006924:	a33e      	add	r3, pc, #248	@ (adr r3, 8006a20 <sensor_fusion_update_kalman+0x158>)
 8006926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692a:	f7f9 fe85 	bl	8000638 <__aeabi_dmul>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4610      	mov	r0, r2
 8006934:	4619      	mov	r1, r3
 8006936:	f7fa f957 	bl	8000be8 <__aeabi_d2f>
 800693a:	4603      	mov	r3, r0
 800693c:	61bb      	str	r3, [r7, #24]

    // Yerçekimi ivmesinin lokal z eksenindeki bileşeni
    float g_local_z = 9.81f * cos(angle_rad);
 800693e:	69b8      	ldr	r0, [r7, #24]
 8006940:	f7f9 fe22 	bl	8000588 <__aeabi_f2d>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	ec43 2b10 	vmov	d0, r2, r3
 800694c:	f008 fa44 	bl	800edd8 <cos>
 8006950:	ec51 0b10 	vmov	r0, r1, d0
 8006954:	a334      	add	r3, pc, #208	@ (adr r3, 8006a28 <sensor_fusion_update_kalman+0x160>)
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	f7f9 fe6d 	bl	8000638 <__aeabi_dmul>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4610      	mov	r0, r2
 8006964:	4619      	mov	r1, r3
 8006966:	f7fa f93f 	bl	8000be8 <__aeabi_d2f>
 800696a:	4603      	mov	r3, r0
 800696c:	617b      	str	r3, [r7, #20]

    // Gerçek ivmeyi hesapla:
    float accel_z_corrected = BMI->acc_z - g_local_z;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8006974:	edd7 7a05 	vldr	s15, [r7, #20]
 8006978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800697c:	edc7 7a04 	vstr	s15, [r7, #16]

    // İvme sensörü arıza tespiti
    accel_failure_detected = detect_accel_failure(accel_z_corrected);
 8006980:	ed97 0a04 	vldr	s0, [r7, #16]
 8006984:	f7ff fec8 	bl	8006718 <detect_accel_failure>
 8006988:	4603      	mov	r3, r0
 800698a:	461a      	mov	r2, r3
 800698c:	4b2c      	ldr	r3, [pc, #176]	@ (8006a40 <sensor_fusion_update_kalman+0x178>)
 800698e:	701a      	strb	r2, [r3, #0]

    // Arıza durumuna göre Kalman filtresi parametrelerini güncelle
    if (accel_failure_detected) {
 8006990:	4b2b      	ldr	r3, [pc, #172]	@ (8006a40 <sensor_fusion_update_kalman+0x178>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <sensor_fusion_update_kalman+0xd8>
        // Arıza tespit edildi - ivme sensörüne çok az güven
        kalman.measurement_noise_acc = 50.0f;
 8006998:	4b2a      	ldr	r3, [pc, #168]	@ (8006a44 <sensor_fusion_update_kalman+0x17c>)
 800699a:	4a2b      	ldr	r2, [pc, #172]	@ (8006a48 <sensor_fusion_update_kalman+0x180>)
 800699c:	639a      	str	r2, [r3, #56]	@ 0x38
 800699e:	e002      	b.n	80069a6 <sensor_fusion_update_kalman+0xde>
    } else {
        // Normal durum - normal güven
        kalman.measurement_noise_acc = 0.3f;
 80069a0:	4b28      	ldr	r3, [pc, #160]	@ (8006a44 <sensor_fusion_update_kalman+0x17c>)
 80069a2:	4a2a      	ldr	r2, [pc, #168]	@ (8006a4c <sensor_fusion_update_kalman+0x184>)
 80069a4:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Only update if initialized
    if (initialized) {
 80069a6:	4b2a      	ldr	r3, [pc, #168]	@ (8006a50 <sensor_fusion_update_kalman+0x188>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d034      	beq.n	8006a18 <sensor_fusion_update_kalman+0x150>
        sensor->filtered_altitude = KalmanFilter_Update(&kalman, altitude, accel_z_corrected, time_sec);
 80069ae:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 80069b2:	edd7 0a04 	vldr	s1, [r7, #16]
 80069b6:	ed97 0a07 	vldr	s0, [r7, #28]
 80069ba:	4822      	ldr	r0, [pc, #136]	@ (8006a44 <sensor_fusion_update_kalman+0x17c>)
 80069bc:	f7fc fb4c 	bl	8003058 <KalmanFilter_Update>
 80069c0:	eef0 7a40 	vmov.f32	s15, s0
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	edc3 7a00 	vstr	s15, [r3]
        sensor->apogeeDetect = KalmanFilter_IsApogeeDetected(&kalman);
 80069ca:	481e      	ldr	r0, [pc, #120]	@ (8006a44 <sensor_fusion_update_kalman+0x17c>)
 80069cc:	f7fd fd19 	bl	8004402 <KalmanFilter_IsApogeeDetected>
 80069d0:	4603      	mov	r3, r0
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	761a      	strb	r2, [r3, #24]
        // Store velocity estimate for later use
        static float prev_altitude = 0.0f;
        if (time_sec > 0.001f) {
 80069d8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80069dc:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8006a38 <sensor_fusion_update_kalman+0x170>
 80069e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069e8:	dd0e      	ble.n	8006a08 <sensor_fusion_update_kalman+0x140>
            sensor->velocity = (sensor->filtered_altitude - prev_altitude) / time_sec;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	ed93 7a00 	vldr	s14, [r3]
 80069f0:	4b18      	ldr	r3, [pc, #96]	@ (8006a54 <sensor_fusion_update_kalman+0x18c>)
 80069f2:	edd3 7a00 	vldr	s15, [r3]
 80069f6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80069fa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80069fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        prev_altitude = sensor->filtered_altitude;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a11      	ldr	r2, [pc, #68]	@ (8006a54 <sensor_fusion_update_kalman+0x18c>)
 8006a0e:	6013      	str	r3, [r2, #0]

        // Arıza durumunu sensor yapısına ekleyelim (telemetri için kullanılabilir)
        sensor->accel_failure = accel_failure_detected;
 8006a10:	4b0b      	ldr	r3, [pc, #44]	@ (8006a40 <sensor_fusion_update_kalman+0x178>)
 8006a12:	781a      	ldrb	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	765a      	strb	r2, [r3, #25]
    }
}
 8006a18:	bf00      	nop
 8006a1a:	3728      	adds	r7, #40	@ 0x28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	a2529d39 	.word	0xa2529d39
 8006a24:	3f91df46 	.word	0x3f91df46
 8006a28:	60000000 	.word	0x60000000
 8006a2c:	40239eb8 	.word	0x40239eb8
 8006a30:	20000798 	.word	0x20000798
 8006a34:	447a0000 	.word	0x447a0000
 8006a38:	3a83126f 	.word	0x3a83126f
 8006a3c:	3c23d70a 	.word	0x3c23d70a
 8006a40:	200007b6 	.word	0x200007b6
 8006a44:	20000744 	.word	0x20000744
 8006a48:	42480000 	.word	0x42480000
 8006a4c:	3e99999a 	.word	0x3e99999a
 8006a50:	20000790 	.word	0x20000790
 8006a54:	200007b8 	.word	0x200007b8

08006a58 <sensor_fusion_update_mahony>:

/**
 * @brief Update orientation using Mahony filter
 */
void sensor_fusion_update_mahony(bmi088_struct_t* BMI, sensor_fusion_t *sensor)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
		sensor->yaw = quaternionToYaw();
		sensor->pitch = quaternionToPitch();
		sensor->roll = quaternionToRoll();
		BMI->isUpdated = 0;
	}*/
}
 8006a62:	bf00      	nop
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
	...

08006a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a76:	2300      	movs	r3, #0
 8006a78:	607b      	str	r3, [r7, #4]
 8006a7a:	4b10      	ldr	r3, [pc, #64]	@ (8006abc <HAL_MspInit+0x4c>)
 8006a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a7e:	4a0f      	ldr	r2, [pc, #60]	@ (8006abc <HAL_MspInit+0x4c>)
 8006a80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a86:	4b0d      	ldr	r3, [pc, #52]	@ (8006abc <HAL_MspInit+0x4c>)
 8006a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a8e:	607b      	str	r3, [r7, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a92:	2300      	movs	r3, #0
 8006a94:	603b      	str	r3, [r7, #0]
 8006a96:	4b09      	ldr	r3, [pc, #36]	@ (8006abc <HAL_MspInit+0x4c>)
 8006a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9a:	4a08      	ldr	r2, [pc, #32]	@ (8006abc <HAL_MspInit+0x4c>)
 8006a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8006aa2:	4b06      	ldr	r3, [pc, #24]	@ (8006abc <HAL_MspInit+0x4c>)
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	40023800 	.word	0x40023800

08006ac0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08c      	sub	sp, #48	@ 0x30
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ac8:	f107 031c 	add.w	r3, r7, #28
 8006acc:	2200      	movs	r2, #0
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	605a      	str	r2, [r3, #4]
 8006ad2:	609a      	str	r2, [r3, #8]
 8006ad4:	60da      	str	r2, [r3, #12]
 8006ad6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a42      	ldr	r2, [pc, #264]	@ (8006be8 <HAL_I2C_MspInit+0x128>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d12d      	bne.n	8006b3e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61bb      	str	r3, [r7, #24]
 8006ae6:	4b41      	ldr	r3, [pc, #260]	@ (8006bec <HAL_I2C_MspInit+0x12c>)
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aea:	4a40      	ldr	r2, [pc, #256]	@ (8006bec <HAL_I2C_MspInit+0x12c>)
 8006aec:	f043 0302 	orr.w	r3, r3, #2
 8006af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8006af2:	4b3e      	ldr	r3, [pc, #248]	@ (8006bec <HAL_I2C_MspInit+0x12c>)
 8006af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af6:	f003 0302 	and.w	r3, r3, #2
 8006afa:	61bb      	str	r3, [r7, #24]
 8006afc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006afe:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8006b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b04:	2312      	movs	r3, #18
 8006b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006b10:	2304      	movs	r3, #4
 8006b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b14:	f107 031c 	add.w	r3, r7, #28
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4835      	ldr	r0, [pc, #212]	@ (8006bf0 <HAL_I2C_MspInit+0x130>)
 8006b1c:	f001 fbb8 	bl	8008290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006b20:	2300      	movs	r3, #0
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	4b31      	ldr	r3, [pc, #196]	@ (8006bec <HAL_I2C_MspInit+0x12c>)
 8006b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b28:	4a30      	ldr	r2, [pc, #192]	@ (8006bec <HAL_I2C_MspInit+0x12c>)
 8006b2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006b2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b30:	4b2e      	ldr	r3, [pc, #184]	@ (8006bec <HAL_I2C_MspInit+0x12c>)
 8006b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006b3c:	e050      	b.n	8006be0 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a2c      	ldr	r2, [pc, #176]	@ (8006bf4 <HAL_I2C_MspInit+0x134>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d14b      	bne.n	8006be0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b48:	2300      	movs	r3, #0
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	4b27      	ldr	r3, [pc, #156]	@ (8006bec <HAL_I2C_MspInit+0x12c>)
 8006b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b50:	4a26      	ldr	r2, [pc, #152]	@ (8006bec <HAL_I2C_MspInit+0x12c>)
 8006b52:	f043 0304 	orr.w	r3, r3, #4
 8006b56:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b58:	4b24      	ldr	r3, [pc, #144]	@ (8006bec <HAL_I2C_MspInit+0x12c>)
 8006b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	613b      	str	r3, [r7, #16]
 8006b62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b64:	2300      	movs	r3, #0
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	4b20      	ldr	r3, [pc, #128]	@ (8006bec <HAL_I2C_MspInit+0x12c>)
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8006bec <HAL_I2C_MspInit+0x12c>)
 8006b6e:	f043 0301 	orr.w	r3, r3, #1
 8006b72:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b74:	4b1d      	ldr	r3, [pc, #116]	@ (8006bec <HAL_I2C_MspInit+0x12c>)
 8006b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006b80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b86:	2312      	movs	r3, #18
 8006b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006b92:	2304      	movs	r3, #4
 8006b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b96:	f107 031c 	add.w	r3, r7, #28
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	4816      	ldr	r0, [pc, #88]	@ (8006bf8 <HAL_I2C_MspInit+0x138>)
 8006b9e:	f001 fb77 	bl	8008290 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006ba2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006ba8:	2312      	movs	r3, #18
 8006baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bac:	2301      	movs	r3, #1
 8006bae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006bb4:	2304      	movs	r3, #4
 8006bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bb8:	f107 031c 	add.w	r3, r7, #28
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	480f      	ldr	r0, [pc, #60]	@ (8006bfc <HAL_I2C_MspInit+0x13c>)
 8006bc0:	f001 fb66 	bl	8008290 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60bb      	str	r3, [r7, #8]
 8006bc8:	4b08      	ldr	r3, [pc, #32]	@ (8006bec <HAL_I2C_MspInit+0x12c>)
 8006bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bcc:	4a07      	ldr	r2, [pc, #28]	@ (8006bec <HAL_I2C_MspInit+0x12c>)
 8006bce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006bd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8006bd4:	4b05      	ldr	r3, [pc, #20]	@ (8006bec <HAL_I2C_MspInit+0x12c>)
 8006bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bdc:	60bb      	str	r3, [r7, #8]
 8006bde:	68bb      	ldr	r3, [r7, #8]
}
 8006be0:	bf00      	nop
 8006be2:	3730      	adds	r7, #48	@ 0x30
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	40005400 	.word	0x40005400
 8006bec:	40023800 	.word	0x40023800
 8006bf0:	40020400 	.word	0x40020400
 8006bf4:	40005c00 	.word	0x40005c00
 8006bf8:	40020800 	.word	0x40020800
 8006bfc:	40020000 	.word	0x40020000

08006c00 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a15      	ldr	r2, [pc, #84]	@ (8006c64 <HAL_I2C_MspDeInit+0x64>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d10f      	bne.n	8006c32 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8006c12:	4b15      	ldr	r3, [pc, #84]	@ (8006c68 <HAL_I2C_MspDeInit+0x68>)
 8006c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c16:	4a14      	ldr	r2, [pc, #80]	@ (8006c68 <HAL_I2C_MspDeInit+0x68>)
 8006c18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c1c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8006c1e:	2180      	movs	r1, #128	@ 0x80
 8006c20:	4812      	ldr	r0, [pc, #72]	@ (8006c6c <HAL_I2C_MspDeInit+0x6c>)
 8006c22:	f001 fcc9 	bl	80085b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8006c26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006c2a:	4810      	ldr	r0, [pc, #64]	@ (8006c6c <HAL_I2C_MspDeInit+0x6c>)
 8006c2c:	f001 fcc4 	bl	80085b8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8006c30:	e014      	b.n	8006c5c <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a0e      	ldr	r2, [pc, #56]	@ (8006c70 <HAL_I2C_MspDeInit+0x70>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d10f      	bne.n	8006c5c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8006c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c68 <HAL_I2C_MspDeInit+0x68>)
 8006c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c40:	4a09      	ldr	r2, [pc, #36]	@ (8006c68 <HAL_I2C_MspDeInit+0x68>)
 8006c42:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006c46:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8006c48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006c4c:	4809      	ldr	r0, [pc, #36]	@ (8006c74 <HAL_I2C_MspDeInit+0x74>)
 8006c4e:	f001 fcb3 	bl	80085b8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8006c52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006c56:	4808      	ldr	r0, [pc, #32]	@ (8006c78 <HAL_I2C_MspDeInit+0x78>)
 8006c58:	f001 fcae 	bl	80085b8 <HAL_GPIO_DeInit>
}
 8006c5c:	bf00      	nop
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	40005400 	.word	0x40005400
 8006c68:	40023800 	.word	0x40023800
 8006c6c:	40020400 	.word	0x40020400
 8006c70:	40005c00 	.word	0x40005c00
 8006c74:	40020800 	.word	0x40020800
 8006c78:	40020000 	.word	0x40020000

08006c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c8c:	d115      	bne.n	8006cba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
 8006c92:	4b0c      	ldr	r3, [pc, #48]	@ (8006cc4 <HAL_TIM_Base_MspInit+0x48>)
 8006c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c96:	4a0b      	ldr	r2, [pc, #44]	@ (8006cc4 <HAL_TIM_Base_MspInit+0x48>)
 8006c98:	f043 0301 	orr.w	r3, r3, #1
 8006c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c9e:	4b09      	ldr	r3, [pc, #36]	@ (8006cc4 <HAL_TIM_Base_MspInit+0x48>)
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006caa:	2200      	movs	r2, #0
 8006cac:	2100      	movs	r1, #0
 8006cae:	201c      	movs	r0, #28
 8006cb0:	f000 fea7 	bl	8007a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006cb4:	201c      	movs	r0, #28
 8006cb6:	f000 fec0 	bl	8007a3a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8006cba:	bf00      	nop
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	40023800 	.word	0x40023800

08006cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08e      	sub	sp, #56	@ 0x38
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	605a      	str	r2, [r3, #4]
 8006cda:	609a      	str	r2, [r3, #8]
 8006cdc:	60da      	str	r2, [r3, #12]
 8006cde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a83      	ldr	r2, [pc, #524]	@ (8006ef4 <HAL_UART_MspInit+0x22c>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d14b      	bne.n	8006d82 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8006cea:	2300      	movs	r3, #0
 8006cec:	623b      	str	r3, [r7, #32]
 8006cee:	4b82      	ldr	r3, [pc, #520]	@ (8006ef8 <HAL_UART_MspInit+0x230>)
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf2:	4a81      	ldr	r2, [pc, #516]	@ (8006ef8 <HAL_UART_MspInit+0x230>)
 8006cf4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006cfa:	4b7f      	ldr	r3, [pc, #508]	@ (8006ef8 <HAL_UART_MspInit+0x230>)
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d02:	623b      	str	r3, [r7, #32]
 8006d04:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d06:	2300      	movs	r3, #0
 8006d08:	61fb      	str	r3, [r7, #28]
 8006d0a:	4b7b      	ldr	r3, [pc, #492]	@ (8006ef8 <HAL_UART_MspInit+0x230>)
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d0e:	4a7a      	ldr	r2, [pc, #488]	@ (8006ef8 <HAL_UART_MspInit+0x230>)
 8006d10:	f043 0304 	orr.w	r3, r3, #4
 8006d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d16:	4b78      	ldr	r3, [pc, #480]	@ (8006ef8 <HAL_UART_MspInit+0x230>)
 8006d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1a:	f003 0304 	and.w	r3, r3, #4
 8006d1e:	61fb      	str	r3, [r7, #28]
 8006d20:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d22:	2300      	movs	r3, #0
 8006d24:	61bb      	str	r3, [r7, #24]
 8006d26:	4b74      	ldr	r3, [pc, #464]	@ (8006ef8 <HAL_UART_MspInit+0x230>)
 8006d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d2a:	4a73      	ldr	r2, [pc, #460]	@ (8006ef8 <HAL_UART_MspInit+0x230>)
 8006d2c:	f043 0308 	orr.w	r3, r3, #8
 8006d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d32:	4b71      	ldr	r3, [pc, #452]	@ (8006ef8 <HAL_UART_MspInit+0x230>)
 8006d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d36:	f003 0308 	and.w	r3, r3, #8
 8006d3a:	61bb      	str	r3, [r7, #24]
 8006d3c:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006d3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d44:	2302      	movs	r3, #2
 8006d46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006d50:	2308      	movs	r3, #8
 8006d52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4868      	ldr	r0, [pc, #416]	@ (8006efc <HAL_UART_MspInit+0x234>)
 8006d5c:	f001 fa98 	bl	8008290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006d60:	2304      	movs	r3, #4
 8006d62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d64:	2302      	movs	r3, #2
 8006d66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006d70:	2308      	movs	r3, #8
 8006d72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4861      	ldr	r0, [pc, #388]	@ (8006f00 <HAL_UART_MspInit+0x238>)
 8006d7c:	f001 fa88 	bl	8008290 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006d80:	e0b4      	b.n	8006eec <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART1)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a5f      	ldr	r2, [pc, #380]	@ (8006f04 <HAL_UART_MspInit+0x23c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	f040 80af 	bne.w	8006eec <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006d8e:	2300      	movs	r3, #0
 8006d90:	617b      	str	r3, [r7, #20]
 8006d92:	4b59      	ldr	r3, [pc, #356]	@ (8006ef8 <HAL_UART_MspInit+0x230>)
 8006d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d96:	4a58      	ldr	r2, [pc, #352]	@ (8006ef8 <HAL_UART_MspInit+0x230>)
 8006d98:	f043 0310 	orr.w	r3, r3, #16
 8006d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8006d9e:	4b56      	ldr	r3, [pc, #344]	@ (8006ef8 <HAL_UART_MspInit+0x230>)
 8006da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da2:	f003 0310 	and.w	r3, r3, #16
 8006da6:	617b      	str	r3, [r7, #20]
 8006da8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006daa:	2300      	movs	r3, #0
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	4b52      	ldr	r3, [pc, #328]	@ (8006ef8 <HAL_UART_MspInit+0x230>)
 8006db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db2:	4a51      	ldr	r2, [pc, #324]	@ (8006ef8 <HAL_UART_MspInit+0x230>)
 8006db4:	f043 0301 	orr.w	r3, r3, #1
 8006db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8006dba:	4b4f      	ldr	r3, [pc, #316]	@ (8006ef8 <HAL_UART_MspInit+0x230>)
 8006dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	613b      	str	r3, [r7, #16]
 8006dc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	4b4b      	ldr	r3, [pc, #300]	@ (8006ef8 <HAL_UART_MspInit+0x230>)
 8006dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dce:	4a4a      	ldr	r2, [pc, #296]	@ (8006ef8 <HAL_UART_MspInit+0x230>)
 8006dd0:	f043 0302 	orr.w	r3, r3, #2
 8006dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006dd6:	4b48      	ldr	r3, [pc, #288]	@ (8006ef8 <HAL_UART_MspInit+0x230>)
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006de2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006de6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006de8:	2302      	movs	r3, #2
 8006dea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dec:	2300      	movs	r3, #0
 8006dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006df0:	2303      	movs	r3, #3
 8006df2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006df4:	2307      	movs	r3, #7
 8006df6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4842      	ldr	r0, [pc, #264]	@ (8006f08 <HAL_UART_MspInit+0x240>)
 8006e00:	f001 fa46 	bl	8008290 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006e04:	2340      	movs	r3, #64	@ 0x40
 8006e06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e08:	2302      	movs	r3, #2
 8006e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e10:	2303      	movs	r3, #3
 8006e12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006e14:	2307      	movs	r3, #7
 8006e16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	483b      	ldr	r0, [pc, #236]	@ (8006f0c <HAL_UART_MspInit+0x244>)
 8006e20:	f001 fa36 	bl	8008290 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006e24:	4b3a      	ldr	r3, [pc, #232]	@ (8006f10 <HAL_UART_MspInit+0x248>)
 8006e26:	4a3b      	ldr	r2, [pc, #236]	@ (8006f14 <HAL_UART_MspInit+0x24c>)
 8006e28:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006e2a:	4b39      	ldr	r3, [pc, #228]	@ (8006f10 <HAL_UART_MspInit+0x248>)
 8006e2c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006e30:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e32:	4b37      	ldr	r3, [pc, #220]	@ (8006f10 <HAL_UART_MspInit+0x248>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e38:	4b35      	ldr	r3, [pc, #212]	@ (8006f10 <HAL_UART_MspInit+0x248>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006e3e:	4b34      	ldr	r3, [pc, #208]	@ (8006f10 <HAL_UART_MspInit+0x248>)
 8006e40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006e44:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e46:	4b32      	ldr	r3, [pc, #200]	@ (8006f10 <HAL_UART_MspInit+0x248>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e4c:	4b30      	ldr	r3, [pc, #192]	@ (8006f10 <HAL_UART_MspInit+0x248>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006e52:	4b2f      	ldr	r3, [pc, #188]	@ (8006f10 <HAL_UART_MspInit+0x248>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006e58:	4b2d      	ldr	r3, [pc, #180]	@ (8006f10 <HAL_UART_MspInit+0x248>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e5e:	4b2c      	ldr	r3, [pc, #176]	@ (8006f10 <HAL_UART_MspInit+0x248>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006e64:	482a      	ldr	r0, [pc, #168]	@ (8006f10 <HAL_UART_MspInit+0x248>)
 8006e66:	f000 fe11 	bl	8007a8c <HAL_DMA_Init>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 8006e70:	f7fd fe86 	bl	8004b80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a26      	ldr	r2, [pc, #152]	@ (8006f10 <HAL_UART_MspInit+0x248>)
 8006e78:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006e7a:	4a25      	ldr	r2, [pc, #148]	@ (8006f10 <HAL_UART_MspInit+0x248>)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006e80:	4b25      	ldr	r3, [pc, #148]	@ (8006f18 <HAL_UART_MspInit+0x250>)
 8006e82:	4a26      	ldr	r2, [pc, #152]	@ (8006f1c <HAL_UART_MspInit+0x254>)
 8006e84:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8006e86:	4b24      	ldr	r3, [pc, #144]	@ (8006f18 <HAL_UART_MspInit+0x250>)
 8006e88:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006e8c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e8e:	4b22      	ldr	r3, [pc, #136]	@ (8006f18 <HAL_UART_MspInit+0x250>)
 8006e90:	2240      	movs	r2, #64	@ 0x40
 8006e92:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e94:	4b20      	ldr	r3, [pc, #128]	@ (8006f18 <HAL_UART_MspInit+0x250>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8006f18 <HAL_UART_MspInit+0x250>)
 8006e9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006ea0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8006f18 <HAL_UART_MspInit+0x250>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8006f18 <HAL_UART_MspInit+0x250>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006eae:	4b1a      	ldr	r3, [pc, #104]	@ (8006f18 <HAL_UART_MspInit+0x250>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006eb4:	4b18      	ldr	r3, [pc, #96]	@ (8006f18 <HAL_UART_MspInit+0x250>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006eba:	4b17      	ldr	r3, [pc, #92]	@ (8006f18 <HAL_UART_MspInit+0x250>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006ec0:	4815      	ldr	r0, [pc, #84]	@ (8006f18 <HAL_UART_MspInit+0x250>)
 8006ec2:	f000 fde3 	bl	8007a8c <HAL_DMA_Init>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <HAL_UART_MspInit+0x208>
      Error_Handler();
 8006ecc:	f7fd fe58 	bl	8004b80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a11      	ldr	r2, [pc, #68]	@ (8006f18 <HAL_UART_MspInit+0x250>)
 8006ed4:	639a      	str	r2, [r3, #56]	@ 0x38
 8006ed6:	4a10      	ldr	r2, [pc, #64]	@ (8006f18 <HAL_UART_MspInit+0x250>)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006edc:	2200      	movs	r2, #0
 8006ede:	2100      	movs	r1, #0
 8006ee0:	2025      	movs	r0, #37	@ 0x25
 8006ee2:	f000 fd8e 	bl	8007a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006ee6:	2025      	movs	r0, #37	@ 0x25
 8006ee8:	f000 fda7 	bl	8007a3a <HAL_NVIC_EnableIRQ>
}
 8006eec:	bf00      	nop
 8006eee:	3738      	adds	r7, #56	@ 0x38
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	40005000 	.word	0x40005000
 8006ef8:	40023800 	.word	0x40023800
 8006efc:	40020800 	.word	0x40020800
 8006f00:	40020c00 	.word	0x40020c00
 8006f04:	40011000 	.word	0x40011000
 8006f08:	40020000 	.word	0x40020000
 8006f0c:	40020400 	.word	0x40020400
 8006f10:	2000042c 	.word	0x2000042c
 8006f14:	40026440 	.word	0x40026440
 8006f18:	2000048c 	.word	0x2000048c
 8006f1c:	400264b8 	.word	0x400264b8

08006f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f20:	b480      	push	{r7}
 8006f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006f24:	bf00      	nop
 8006f26:	e7fd      	b.n	8006f24 <NMI_Handler+0x4>

08006f28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f2c:	bf00      	nop
 8006f2e:	e7fd      	b.n	8006f2c <HardFault_Handler+0x4>

08006f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f30:	b480      	push	{r7}
 8006f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f34:	bf00      	nop
 8006f36:	e7fd      	b.n	8006f34 <MemManage_Handler+0x4>

08006f38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f3c:	bf00      	nop
 8006f3e:	e7fd      	b.n	8006f3c <BusFault_Handler+0x4>

08006f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f40:	b480      	push	{r7}
 8006f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f44:	bf00      	nop
 8006f46:	e7fd      	b.n	8006f44 <UsageFault_Handler+0x4>

08006f48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006f4c:	bf00      	nop
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006f56:	b480      	push	{r7}
 8006f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006f5a:	bf00      	nop
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006f64:	b480      	push	{r7}
 8006f66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006f68:	bf00      	nop
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006f76:	f000 fc01 	bl	800777c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006f7a:	bf00      	nop
 8006f7c:	bd80      	pop	{r7, pc}
	...

08006f80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006f84:	4802      	ldr	r0, [pc, #8]	@ (8006f90 <TIM2_IRQHandler+0x10>)
 8006f86:	f003 fb39 	bl	800a5fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006f8a:	bf00      	nop
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	20000354 	.word	0x20000354

08006f94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006f98:	4802      	ldr	r0, [pc, #8]	@ (8006fa4 <USART1_IRQHandler+0x10>)
 8006f9a:	f004 f891 	bl	800b0c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006f9e:	bf00      	nop
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	200003e4 	.word	0x200003e4

08006fa8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8006fac:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006fb0:	f001 fc10 	bl	80087d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006fb4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006fb8:	f001 fc0c 	bl	80087d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006fbc:	bf00      	nop
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006fc4:	4802      	ldr	r0, [pc, #8]	@ (8006fd0 <DMA2_Stream2_IRQHandler+0x10>)
 8006fc6:	f000 fef9 	bl	8007dbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006fca:	bf00      	nop
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	2000042c 	.word	0x2000042c

08006fd4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006fd8:	4802      	ldr	r0, [pc, #8]	@ (8006fe4 <DMA2_Stream7_IRQHandler+0x10>)
 8006fda:	f000 feef 	bl	8007dbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8006fde:	bf00      	nop
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	2000048c 	.word	0x2000048c

08006fe8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
  return 1;
 8006fec:	2301      	movs	r3, #1
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <_kill>:

int _kill(int pid, int sig)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007002:	f005 ff7d 	bl	800cf00 <__errno>
 8007006:	4603      	mov	r3, r0
 8007008:	2216      	movs	r2, #22
 800700a:	601a      	str	r2, [r3, #0]
  return -1;
 800700c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007010:	4618      	mov	r0, r3
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <_exit>:

void _exit (int status)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007020:	f04f 31ff 	mov.w	r1, #4294967295
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff ffe7 	bl	8006ff8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800702a:	bf00      	nop
 800702c:	e7fd      	b.n	800702a <_exit+0x12>

0800702e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b086      	sub	sp, #24
 8007032:	af00      	add	r7, sp, #0
 8007034:	60f8      	str	r0, [r7, #12]
 8007036:	60b9      	str	r1, [r7, #8]
 8007038:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800703a:	2300      	movs	r3, #0
 800703c:	617b      	str	r3, [r7, #20]
 800703e:	e00a      	b.n	8007056 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007040:	f3af 8000 	nop.w
 8007044:	4601      	mov	r1, r0
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	1c5a      	adds	r2, r3, #1
 800704a:	60ba      	str	r2, [r7, #8]
 800704c:	b2ca      	uxtb	r2, r1
 800704e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	3301      	adds	r3, #1
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	429a      	cmp	r2, r3
 800705c:	dbf0      	blt.n	8007040 <_read+0x12>
  }

  return len;
 800705e:	687b      	ldr	r3, [r7, #4]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3718      	adds	r7, #24
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b086      	sub	sp, #24
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007074:	2300      	movs	r3, #0
 8007076:	617b      	str	r3, [r7, #20]
 8007078:	e009      	b.n	800708e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	1c5a      	adds	r2, r3, #1
 800707e:	60ba      	str	r2, [r7, #8]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	4618      	mov	r0, r3
 8007084:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	3301      	adds	r3, #1
 800708c:	617b      	str	r3, [r7, #20]
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	429a      	cmp	r2, r3
 8007094:	dbf1      	blt.n	800707a <_write+0x12>
  }
  return len;
 8007096:	687b      	ldr	r3, [r7, #4]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <_close>:

int _close(int file)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80070a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80070c8:	605a      	str	r2, [r3, #4]
  return 0;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <_isatty>:

int _isatty(int file)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80070e0:	2301      	movs	r3, #1
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b085      	sub	sp, #20
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	60f8      	str	r0, [r7, #12]
 80070f6:	60b9      	str	r1, [r7, #8]
 80070f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007110:	4a14      	ldr	r2, [pc, #80]	@ (8007164 <_sbrk+0x5c>)
 8007112:	4b15      	ldr	r3, [pc, #84]	@ (8007168 <_sbrk+0x60>)
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800711c:	4b13      	ldr	r3, [pc, #76]	@ (800716c <_sbrk+0x64>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d102      	bne.n	800712a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007124:	4b11      	ldr	r3, [pc, #68]	@ (800716c <_sbrk+0x64>)
 8007126:	4a12      	ldr	r2, [pc, #72]	@ (8007170 <_sbrk+0x68>)
 8007128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800712a:	4b10      	ldr	r3, [pc, #64]	@ (800716c <_sbrk+0x64>)
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4413      	add	r3, r2
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	429a      	cmp	r2, r3
 8007136:	d207      	bcs.n	8007148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007138:	f005 fee2 	bl	800cf00 <__errno>
 800713c:	4603      	mov	r3, r0
 800713e:	220c      	movs	r2, #12
 8007140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007142:	f04f 33ff 	mov.w	r3, #4294967295
 8007146:	e009      	b.n	800715c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007148:	4b08      	ldr	r3, [pc, #32]	@ (800716c <_sbrk+0x64>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800714e:	4b07      	ldr	r3, [pc, #28]	@ (800716c <_sbrk+0x64>)
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4413      	add	r3, r2
 8007156:	4a05      	ldr	r2, [pc, #20]	@ (800716c <_sbrk+0x64>)
 8007158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800715a:	68fb      	ldr	r3, [r7, #12]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3718      	adds	r7, #24
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	20020000 	.word	0x20020000
 8007168:	00000400 	.word	0x00000400
 800716c:	200007bc 	.word	0x200007bc
 8007170:	20000940 	.word	0x20000940

08007174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007174:	b480      	push	{r7}
 8007176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007178:	4b06      	ldr	r3, [pc, #24]	@ (8007194 <SystemInit+0x20>)
 800717a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800717e:	4a05      	ldr	r2, [pc, #20]	@ (8007194 <SystemInit+0x20>)
 8007180:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007184:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007188:	bf00      	nop
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	e000ed00 	.word	0xe000ed00

08007198 <test_modes_handle_sit>:

/**
 * @brief Handle SIT (Sensor Interface Test) mode
 */
void test_modes_handle_sit(BME_280_t* bme, bmi088_struct_t* bmi)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
	addDataPacketSit(bme, bmi);
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7fd fd43 	bl	8004c30 <addDataPacketSit>
   // if (!usart1_tx_busy) {
       // uart1_send_packet_dma((uint8_t*)sit_paket, 36);
    	HAL_UART_Transmit(&huart1, (uint8_t*)sit_paket, 36, 100);
 80071aa:	2364      	movs	r3, #100	@ 0x64
 80071ac:	2224      	movs	r2, #36	@ 0x24
 80071ae:	4904      	ldr	r1, [pc, #16]	@ (80071c0 <test_modes_handle_sit+0x28>)
 80071b0:	4804      	ldr	r0, [pc, #16]	@ (80071c4 <test_modes_handle_sit+0x2c>)
 80071b2:	f003 fe23 	bl	800adfc <HAL_UART_Transmit>
    //}
}
 80071b6:	bf00      	nop
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	200006c4 	.word	0x200006c4
 80071c4:	200003e4 	.word	0x200003e4

080071c8 <algorithm_update_sut>:


void algorithm_update_sut(void)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08a      	sub	sp, #40	@ 0x28
 80071cc:	af00      	add	r7, sp, #0
    // Check if SUT data is ready
    if (uart_handler_sut_data_ready()) {
 80071ce:	f000 f9e5 	bl	800759c <uart_handler_sut_data_ready>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d013      	beq.n	8007200 <algorithm_update_sut+0x38>
        uart_handler_clear_sut_flag();
 80071d8:	f000 fa0e 	bl	80075f8 <uart_handler_clear_sut_flag>

        sut_data_t sut_data;
        if (uart_handler_get_sut_data(&sut_data)) {
 80071dc:	1d3b      	adds	r3, r7, #4
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 f9e8 	bl	80075b4 <uart_handler_get_sut_data>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00a      	beq.n	8007200 <algorithm_update_sut+0x38>
            // Process SUT data through test modes handler
            uint16_t status_bits = test_modes_handle_sut(&sut_data, &sensor_output);
 80071ea:	1d3b      	adds	r3, r7, #4
 80071ec:	4906      	ldr	r1, [pc, #24]	@ (8007208 <algorithm_update_sut+0x40>)
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 f80c 	bl	800720c <test_modes_handle_sut>
 80071f4:	4603      	mov	r3, r0
 80071f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            uart_handler_send_status(status_bits);
 80071f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 fa08 	bl	8007610 <uart_handler_send_status>
        }
    }
}
 8007200:	bf00      	nop
 8007202:	3728      	adds	r7, #40	@ 0x28
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	20000640 	.word	0x20000640

0800720c <test_modes_handle_sut>:

/**
 * @brief Handle SUT (System Under Test) mode
 */
uint16_t test_modes_handle_sut(sut_data_t* sut_data, sensor_fusion_t* sensor_output)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b0d8      	sub	sp, #352	@ 0x160
 8007210:	af00      	add	r7, sp, #0
 8007212:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007216:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800721a:	6018      	str	r0, [r3, #0]
 800721c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007220:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8007224:	6019      	str	r1, [r3, #0]
    // Convert SUT data to BME and BMI structures
    BME_280_t bme_sut = {0};
 8007226:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800722a:	2244      	movs	r2, #68	@ 0x44
 800722c:	2100      	movs	r1, #0
 800722e:	4618      	mov	r0, r3
 8007230:	f005 fe13 	bl	800ce5a <memset>
    bmi088_struct_t bmi_sut = {0};
 8007234:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007238:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800723c:	4618      	mov	r0, r3
 800723e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8007242:	461a      	mov	r2, r3
 8007244:	2100      	movs	r1, #0
 8007246:	f005 fe08 	bl	800ce5a <memset>

    // Fill BME data
    bme_sut.altitude = sut_data->altitude;
 800724a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800724e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    bme_sut.pressure = sut_data->pressure;
 800725a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800725e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    // Fill BMI data
    bmi_sut.acc_x = sut_data->acc_x;
 800726a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800726e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689a      	ldr	r2, [r3, #8]
 8007276:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800727a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800727e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    bmi_sut.acc_y = sut_data->acc_y;
 8007282:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007286:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007292:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8007296:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    bmi_sut.acc_z = sut_data->acc_z;
 800729a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800729e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	691a      	ldr	r2, [r3, #16]
 80072a6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80072aa:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80072ae:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    bmi_sut.gyro_x = sut_data->gyro_x;
 80072b2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80072b6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	4618      	mov	r0, r3
 80072c0:	f7f9 f962 	bl	8000588 <__aeabi_f2d>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 80072cc:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 80072d0:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    bmi_sut.angleY = sut_data->gyro_y;
 80072d4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80072d8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	699a      	ldr	r2, [r3, #24]
 80072e0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80072e4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80072e8:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    bmi_sut.gyro_z = sut_data->gyro_z;
 80072ec:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80072f0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7f9 f945 	bl	8000588 <__aeabi_f2d>
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8007306:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 800730a:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

    // Process synthetic data through sensor fusion first
    //sensor_fusion_update_mahony(&bmi_sut, sensor_output);
	sensor_fusion_update_kalman(&bme_sut, &bmi_sut, sensor_output);
 800730e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007312:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8007316:	f107 0108 	add.w	r1, r7, #8
 800731a:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	f7ff fad2 	bl	80068c8 <sensor_fusion_update_kalman>

    // Then run flight algorithm with fused data
    flight_algorithm_update(&bme_sut, &bmi_sut, sensor_output);
 8007324:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007328:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800732c:	f107 0108 	add.w	r1, r7, #8
 8007330:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	f7fb fcef 	bl	8002d18 <flight_algorithm_update>
    uint16_t status_bits = flight_algorithm_get_status_bits();
 800733a:	f7fb fdf5 	bl	8002f28 <flight_algorithm_get_status_bits>
 800733e:	4603      	mov	r3, r0
 8007340:	f8a7 315e 	strh.w	r3, [r7, #350]	@ 0x15e

    return status_bits;
 8007344:	f8b7 315e 	ldrh.w	r3, [r7, #350]	@ 0x15e
}
 8007348:	4618      	mov	r0, r3
 800734a:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <uart_handler_init>:

/**
 * @brief Initialize UART handler
 */
void uart_handler_init(void)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	af00      	add	r7, sp, #0
    current_mode = MODE_NORMAL;
 8007358:	4b07      	ldr	r3, [pc, #28]	@ (8007378 <uart_handler_init+0x24>)
 800735a:	2200      	movs	r2, #0
 800735c:	701a      	strb	r2, [r3, #0]
    command_packet_ready = 0;
 800735e:	4b07      	ldr	r3, [pc, #28]	@ (800737c <uart_handler_init+0x28>)
 8007360:	2200      	movs	r2, #0
 8007362:	701a      	strb	r2, [r3, #0]
    sut_packet_ready = 0;
 8007364:	4b06      	ldr	r3, [pc, #24]	@ (8007380 <uart_handler_init+0x2c>)
 8007366:	2200      	movs	r2, #0
 8007368:	701a      	strb	r2, [r3, #0]
    memset(&latest_sut_data, 0, sizeof(latest_sut_data));
 800736a:	2220      	movs	r2, #32
 800736c:	2100      	movs	r1, #0
 800736e:	4805      	ldr	r0, [pc, #20]	@ (8007384 <uart_handler_init+0x30>)
 8007370:	f005 fd73 	bl	800ce5a <memset>
}
 8007374:	bf00      	nop
 8007376:	bd80      	pop	{r7, pc}
 8007378:	200007c0 	.word	0x200007c0
 800737c:	200007c1 	.word	0x200007c1
 8007380:	200007c2 	.word	0x200007c2
 8007384:	200007c4 	.word	0x200007c4

08007388 <uart_handler_process_packets>:

/**
 * @brief Process incoming UART packets (call from main loop)
 */
void uart_handler_process_packets(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
    if (usart1_packet_ready) {
 800738c:	4b14      	ldr	r3, [pc, #80]	@ (80073e0 <uart_handler_process_packets+0x58>)
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d021      	beq.n	80073da <uart_handler_process_packets+0x52>
        usart1_packet_ready = 0; // Clear flag immediately
 8007396:	4b12      	ldr	r3, [pc, #72]	@ (80073e0 <uart_handler_process_packets+0x58>)
 8007398:	2200      	movs	r2, #0
 800739a:	701a      	strb	r2, [r3, #0]

        // Command packet (5 bytes with header 0xAA)
        if (usart1_rx_buffer[0] == CMD_HEADER && usart1_packet_size == 5) {
 800739c:	4b11      	ldr	r3, [pc, #68]	@ (80073e4 <uart_handler_process_packets+0x5c>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2baa      	cmp	r3, #170	@ 0xaa
 80073a2:	d10b      	bne.n	80073bc <uart_handler_process_packets+0x34>
 80073a4:	4b10      	ldr	r3, [pc, #64]	@ (80073e8 <uart_handler_process_packets+0x60>)
 80073a6:	881b      	ldrh	r3, [r3, #0]
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	2b05      	cmp	r3, #5
 80073ac:	d106      	bne.n	80073bc <uart_handler_process_packets+0x34>
            command_packet_ready = 1;
 80073ae:	4b0f      	ldr	r3, [pc, #60]	@ (80073ec <uart_handler_process_packets+0x64>)
 80073b0:	2201      	movs	r2, #1
 80073b2:	701a      	strb	r2, [r3, #0]
            process_command_packet(usart1_rx_buffer);
 80073b4:	480b      	ldr	r0, [pc, #44]	@ (80073e4 <uart_handler_process_packets+0x5c>)
 80073b6:	f000 f81d 	bl	80073f4 <process_command_packet>
        else if (usart1_rx_buffer[0] == PACKET_HEADER && usart1_packet_size == 36) {
            sut_packet_ready = 1;
            process_sut_packet(usart1_rx_buffer);
        }
    }
}
 80073ba:	e00e      	b.n	80073da <uart_handler_process_packets+0x52>
        else if (usart1_rx_buffer[0] == PACKET_HEADER && usart1_packet_size == 36) {
 80073bc:	4b09      	ldr	r3, [pc, #36]	@ (80073e4 <uart_handler_process_packets+0x5c>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2bab      	cmp	r3, #171	@ 0xab
 80073c2:	d10a      	bne.n	80073da <uart_handler_process_packets+0x52>
 80073c4:	4b08      	ldr	r3, [pc, #32]	@ (80073e8 <uart_handler_process_packets+0x60>)
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	2b24      	cmp	r3, #36	@ 0x24
 80073cc:	d105      	bne.n	80073da <uart_handler_process_packets+0x52>
            sut_packet_ready = 1;
 80073ce:	4b08      	ldr	r3, [pc, #32]	@ (80073f0 <uart_handler_process_packets+0x68>)
 80073d0:	2201      	movs	r2, #1
 80073d2:	701a      	strb	r2, [r3, #0]
            process_sut_packet(usart1_rx_buffer);
 80073d4:	4803      	ldr	r0, [pc, #12]	@ (80073e4 <uart_handler_process_packets+0x5c>)
 80073d6:	f000 f843 	bl	8007460 <process_sut_packet>
}
 80073da:	bf00      	nop
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	200006bc 	.word	0x200006bc
 80073e4:	2000066c 	.word	0x2000066c
 80073e8:	200006be 	.word	0x200006be
 80073ec:	200007c1 	.word	0x200007c1
 80073f0:	200007c2 	.word	0x200007c2

080073f4 <process_command_packet>:
/**
 * @brief Process command packet from buffer
 * @param buffer Pointer to received buffer
 */
void process_command_packet(uint8_t* buffer)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
    if (buffer[0] == CMD_HEADER) {
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	2baa      	cmp	r3, #170	@ 0xaa
 8007402:	d124      	bne.n	800744e <process_command_packet+0x5a>
        uint8_t command = buffer[1];
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	785b      	ldrb	r3, [r3, #1]
 8007408:	73fb      	strb	r3, [r7, #15]
        //uint8_t checksum = buffer[2];
        uint8_t footer1 = buffer[3];
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	78db      	ldrb	r3, [r3, #3]
 800740e:	73bb      	strb	r3, [r7, #14]
        uint8_t footer2 = buffer[4];
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	791b      	ldrb	r3, [r3, #4]
 8007414:	737b      	strb	r3, [r7, #13]

        if (footer1 == CMD_FOOTER1 && footer2 == CMD_FOOTER2) {
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	2b0d      	cmp	r3, #13
 800741a:	d118      	bne.n	800744e <process_command_packet+0x5a>
 800741c:	7b7b      	ldrb	r3, [r7, #13]
 800741e:	2b0a      	cmp	r3, #10
 8007420:	d115      	bne.n	800744e <process_command_packet+0x5a>
            switch (command) {
 8007422:	7bfb      	ldrb	r3, [r7, #15]
 8007424:	2b24      	cmp	r3, #36	@ 0x24
 8007426:	d00e      	beq.n	8007446 <process_command_packet+0x52>
 8007428:	2b24      	cmp	r3, #36	@ 0x24
 800742a:	dc10      	bgt.n	800744e <process_command_packet+0x5a>
 800742c:	2b20      	cmp	r3, #32
 800742e:	d002      	beq.n	8007436 <process_command_packet+0x42>
 8007430:	2b22      	cmp	r3, #34	@ 0x22
 8007432:	d004      	beq.n	800743e <process_command_packet+0x4a>
                    current_mode = MODE_NORMAL;
                    break;
            }
        }
    }
}
 8007434:	e00b      	b.n	800744e <process_command_packet+0x5a>
                    current_mode = MODE_SIT;
 8007436:	4b09      	ldr	r3, [pc, #36]	@ (800745c <process_command_packet+0x68>)
 8007438:	2201      	movs	r2, #1
 800743a:	701a      	strb	r2, [r3, #0]
                    break;
 800743c:	e007      	b.n	800744e <process_command_packet+0x5a>
                    current_mode = MODE_SUT;
 800743e:	4b07      	ldr	r3, [pc, #28]	@ (800745c <process_command_packet+0x68>)
 8007440:	2202      	movs	r2, #2
 8007442:	701a      	strb	r2, [r3, #0]
                    break;
 8007444:	e003      	b.n	800744e <process_command_packet+0x5a>
                    current_mode = MODE_NORMAL;
 8007446:	4b05      	ldr	r3, [pc, #20]	@ (800745c <process_command_packet+0x68>)
 8007448:	2200      	movs	r2, #0
 800744a:	701a      	strb	r2, [r3, #0]
                    break;
 800744c:	bf00      	nop
}
 800744e:	bf00      	nop
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	200007c0 	.word	0x200007c0

08007460 <process_sut_packet>:
/**
 * @brief Process SUT data packet from buffer
 * @param buffer Pointer to received buffer
 */
void process_sut_packet(uint8_t* buffer)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
    // Header, footer and checksum verification
    if (buffer[0] != PACKET_HEADER) return;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	2bab      	cmp	r3, #171	@ 0xab
 800746e:	d172      	bne.n	8007556 <process_sut_packet+0xf6>
    if (buffer[34] != CMD_FOOTER1 || buffer[35] != CMD_FOOTER2) return;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	3322      	adds	r3, #34	@ 0x22
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	2b0d      	cmp	r3, #13
 8007478:	d16f      	bne.n	800755a <process_sut_packet+0xfa>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3323      	adds	r3, #35	@ 0x23
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	2b0a      	cmp	r3, #10
 8007482:	d16a      	bne.n	800755a <process_sut_packet+0xfa>

    uint8_t calculated_checksum = 0;
 8007484:	2300      	movs	r3, #0
 8007486:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 33; i++) {
 8007488:	2300      	movs	r3, #0
 800748a:	60bb      	str	r3, [r7, #8]
 800748c:	e009      	b.n	80074a2 <process_sut_packet+0x42>
        calculated_checksum += buffer[i];
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	4413      	add	r3, r2
 8007494:	781a      	ldrb	r2, [r3, #0]
 8007496:	7bfb      	ldrb	r3, [r7, #15]
 8007498:	4413      	add	r3, r2
 800749a:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 33; i++) {
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	3301      	adds	r3, #1
 80074a0:	60bb      	str	r3, [r7, #8]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b20      	cmp	r3, #32
 80074a6:	ddf2      	ble.n	800748e <process_sut_packet+0x2e>
    }
    calculated_checksum %= 256;
    if (calculated_checksum != buffer[33]) return;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	3321      	adds	r3, #33	@ 0x21
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	7bfa      	ldrb	r2, [r7, #15]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d154      	bne.n	800755e <process_sut_packet+0xfe>

    // Parse data
    latest_sut_data.altitude = uint8_arrayi_float32_ye_donustur(&buffer[1]);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	3301      	adds	r3, #1
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fd fce5 	bl	8004e88 <uint8_arrayi_float32_ye_donustur>
 80074be:	eef0 7a40 	vmov.f32	s15, s0
 80074c2:	4b29      	ldr	r3, [pc, #164]	@ (8007568 <process_sut_packet+0x108>)
 80074c4:	edc3 7a00 	vstr	s15, [r3]
    latest_sut_data.pressure = uint8_arrayi_float32_ye_donustur(&buffer[5]);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3305      	adds	r3, #5
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7fd fcdb 	bl	8004e88 <uint8_arrayi_float32_ye_donustur>
 80074d2:	eef0 7a40 	vmov.f32	s15, s0
 80074d6:	4b24      	ldr	r3, [pc, #144]	@ (8007568 <process_sut_packet+0x108>)
 80074d8:	edc3 7a01 	vstr	s15, [r3, #4]
    latest_sut_data.acc_x = uint8_arrayi_float32_ye_donustur(&buffer[9]);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	3309      	adds	r3, #9
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fd fcd1 	bl	8004e88 <uint8_arrayi_float32_ye_donustur>
 80074e6:	eef0 7a40 	vmov.f32	s15, s0
 80074ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007568 <process_sut_packet+0x108>)
 80074ec:	edc3 7a02 	vstr	s15, [r3, #8]
    latest_sut_data.acc_y = uint8_arrayi_float32_ye_donustur(&buffer[13]);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	330d      	adds	r3, #13
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7fd fcc7 	bl	8004e88 <uint8_arrayi_float32_ye_donustur>
 80074fa:	eef0 7a40 	vmov.f32	s15, s0
 80074fe:	4b1a      	ldr	r3, [pc, #104]	@ (8007568 <process_sut_packet+0x108>)
 8007500:	edc3 7a03 	vstr	s15, [r3, #12]
    latest_sut_data.acc_z = uint8_arrayi_float32_ye_donustur(&buffer[17]);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3311      	adds	r3, #17
 8007508:	4618      	mov	r0, r3
 800750a:	f7fd fcbd 	bl	8004e88 <uint8_arrayi_float32_ye_donustur>
 800750e:	eef0 7a40 	vmov.f32	s15, s0
 8007512:	4b15      	ldr	r3, [pc, #84]	@ (8007568 <process_sut_packet+0x108>)
 8007514:	edc3 7a04 	vstr	s15, [r3, #16]
    latest_sut_data.gyro_x = uint8_arrayi_float32_ye_donustur(&buffer[21]);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	3315      	adds	r3, #21
 800751c:	4618      	mov	r0, r3
 800751e:	f7fd fcb3 	bl	8004e88 <uint8_arrayi_float32_ye_donustur>
 8007522:	eef0 7a40 	vmov.f32	s15, s0
 8007526:	4b10      	ldr	r3, [pc, #64]	@ (8007568 <process_sut_packet+0x108>)
 8007528:	edc3 7a05 	vstr	s15, [r3, #20]
    latest_sut_data.gyro_y = uint8_arrayi_float32_ye_donustur(&buffer[25]);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	3319      	adds	r3, #25
 8007530:	4618      	mov	r0, r3
 8007532:	f7fd fca9 	bl	8004e88 <uint8_arrayi_float32_ye_donustur>
 8007536:	eef0 7a40 	vmov.f32	s15, s0
 800753a:	4b0b      	ldr	r3, [pc, #44]	@ (8007568 <process_sut_packet+0x108>)
 800753c:	edc3 7a06 	vstr	s15, [r3, #24]
    latest_sut_data.gyro_z = uint8_arrayi_float32_ye_donustur(&buffer[29]);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	331d      	adds	r3, #29
 8007544:	4618      	mov	r0, r3
 8007546:	f7fd fc9f 	bl	8004e88 <uint8_arrayi_float32_ye_donustur>
 800754a:	eef0 7a40 	vmov.f32	s15, s0
 800754e:	4b06      	ldr	r3, [pc, #24]	@ (8007568 <process_sut_packet+0x108>)
 8007550:	edc3 7a07 	vstr	s15, [r3, #28]
 8007554:	e004      	b.n	8007560 <process_sut_packet+0x100>
    if (buffer[0] != PACKET_HEADER) return;
 8007556:	bf00      	nop
 8007558:	e002      	b.n	8007560 <process_sut_packet+0x100>
    if (buffer[34] != CMD_FOOTER1 || buffer[35] != CMD_FOOTER2) return;
 800755a:	bf00      	nop
 800755c:	e000      	b.n	8007560 <process_sut_packet+0x100>
    if (calculated_checksum != buffer[33]) return;
 800755e:	bf00      	nop
}
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	200007c4 	.word	0x200007c4

0800756c <uart_handler_get_mode>:

/**
 * @brief Get current system mode
 */
SystemMode_t uart_handler_get_mode(void)
{
 800756c:	b480      	push	{r7}
 800756e:	af00      	add	r7, sp, #0
    return current_mode;
 8007570:	4b03      	ldr	r3, [pc, #12]	@ (8007580 <uart_handler_get_mode+0x14>)
 8007572:	781b      	ldrb	r3, [r3, #0]
}
 8007574:	4618      	mov	r0, r3
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	200007c0 	.word	0x200007c0

08007584 <uart_handler_command_ready>:

/**
 * @brief Check if command packet is ready
 */
uint8_t uart_handler_command_ready(void)
{
 8007584:	b480      	push	{r7}
 8007586:	af00      	add	r7, sp, #0
    return command_packet_ready;
 8007588:	4b03      	ldr	r3, [pc, #12]	@ (8007598 <uart_handler_command_ready+0x14>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	b2db      	uxtb	r3, r3
}
 800758e:	4618      	mov	r0, r3
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr
 8007598:	200007c1 	.word	0x200007c1

0800759c <uart_handler_sut_data_ready>:

/**
 * @brief Check if SUT data packet is ready
 */
uint8_t uart_handler_sut_data_ready(void)
{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0
    return sut_packet_ready;
 80075a0:	4b03      	ldr	r3, [pc, #12]	@ (80075b0 <uart_handler_sut_data_ready+0x14>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	b2db      	uxtb	r3, r3
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	200007c2 	.word	0x200007c2

080075b4 <uart_handler_get_sut_data>:

/**
 * @brief Get the latest SUT data
 */
uint8_t uart_handler_get_sut_data(sut_data_t* data)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
    if (data == NULL) return 0;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <uart_handler_get_sut_data+0x12>
 80075c2:	2300      	movs	r3, #0
 80075c4:	e005      	b.n	80075d2 <uart_handler_get_sut_data+0x1e>

    memcpy(data, &latest_sut_data, sizeof(sut_data_t));
 80075c6:	2220      	movs	r2, #32
 80075c8:	4904      	ldr	r1, [pc, #16]	@ (80075dc <uart_handler_get_sut_data+0x28>)
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f005 fcc5 	bl	800cf5a <memcpy>
    return 1;
 80075d0:	2301      	movs	r3, #1
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	200007c4 	.word	0x200007c4

080075e0 <uart_handler_clear_command_flag>:

/**
 * @brief Clear command ready flag
 */
void uart_handler_clear_command_flag(void)
{
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
    command_packet_ready = 0;
 80075e4:	4b03      	ldr	r3, [pc, #12]	@ (80075f4 <uart_handler_clear_command_flag+0x14>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	701a      	strb	r2, [r3, #0]
}
 80075ea:	bf00      	nop
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	200007c1 	.word	0x200007c1

080075f8 <uart_handler_clear_sut_flag>:

/**
 * @brief Clear SUT data ready flag
 */
void uart_handler_clear_sut_flag(void)
{
 80075f8:	b480      	push	{r7}
 80075fa:	af00      	add	r7, sp, #0
    sut_packet_ready = 0;
 80075fc:	4b03      	ldr	r3, [pc, #12]	@ (800760c <uart_handler_clear_sut_flag+0x14>)
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]
}
 8007602:	bf00      	nop
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	200007c2 	.word	0x200007c2

08007610 <uart_handler_send_status>:

/**
 * @brief Send status packet (for SUT mode)
 */
void uart_handler_send_status(uint16_t status_bits)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	4603      	mov	r3, r0
 8007618:	80fb      	strh	r3, [r7, #6]
    if (!usart1_tx_busy) {
 800761a:	4b18      	ldr	r3, [pc, #96]	@ (800767c <uart_handler_send_status+0x6c>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	d127      	bne.n	8007674 <uart_handler_send_status+0x64>
        // Use static buffer for DMA safety
        status_packet_dma[0] = CMD_HEADER;
 8007624:	4b16      	ldr	r3, [pc, #88]	@ (8007680 <uart_handler_send_status+0x70>)
 8007626:	22aa      	movs	r2, #170	@ 0xaa
 8007628:	701a      	strb	r2, [r3, #0]
        status_packet_dma[1] = status_bits & 0xFF;         // Low byte of status
 800762a:	88fb      	ldrh	r3, [r7, #6]
 800762c:	b2da      	uxtb	r2, r3
 800762e:	4b14      	ldr	r3, [pc, #80]	@ (8007680 <uart_handler_send_status+0x70>)
 8007630:	705a      	strb	r2, [r3, #1]
        status_packet_dma[2] = (status_bits >> 8) & 0xFF;  // High byte of status
 8007632:	88fb      	ldrh	r3, [r7, #6]
 8007634:	0a1b      	lsrs	r3, r3, #8
 8007636:	b29b      	uxth	r3, r3
 8007638:	b2da      	uxtb	r2, r3
 800763a:	4b11      	ldr	r3, [pc, #68]	@ (8007680 <uart_handler_send_status+0x70>)
 800763c:	709a      	strb	r2, [r3, #2]

        // Calculate checksum (only for header and status bytes)
        status_packet_dma[3] = (status_packet_dma[0] + status_packet_dma[1] + status_packet_dma[2]) % 256;
 800763e:	4b10      	ldr	r3, [pc, #64]	@ (8007680 <uart_handler_send_status+0x70>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	461a      	mov	r2, r3
 8007644:	4b0e      	ldr	r3, [pc, #56]	@ (8007680 <uart_handler_send_status+0x70>)
 8007646:	785b      	ldrb	r3, [r3, #1]
 8007648:	4413      	add	r3, r2
 800764a:	4a0d      	ldr	r2, [pc, #52]	@ (8007680 <uart_handler_send_status+0x70>)
 800764c:	7892      	ldrb	r2, [r2, #2]
 800764e:	4413      	add	r3, r2
 8007650:	425a      	negs	r2, r3
 8007652:	b2db      	uxtb	r3, r3
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	bf58      	it	pl
 8007658:	4253      	negpl	r3, r2
 800765a:	b2da      	uxtb	r2, r3
 800765c:	4b08      	ldr	r3, [pc, #32]	@ (8007680 <uart_handler_send_status+0x70>)
 800765e:	70da      	strb	r2, [r3, #3]

        status_packet_dma[4] = CMD_FOOTER1;
 8007660:	4b07      	ldr	r3, [pc, #28]	@ (8007680 <uart_handler_send_status+0x70>)
 8007662:	220d      	movs	r2, #13
 8007664:	711a      	strb	r2, [r3, #4]
        status_packet_dma[5] = CMD_FOOTER2;
 8007666:	4b06      	ldr	r3, [pc, #24]	@ (8007680 <uart_handler_send_status+0x70>)
 8007668:	220a      	movs	r2, #10
 800766a:	715a      	strb	r2, [r3, #5]

        uart1_send_packet_dma(status_packet_dma, 6);
 800766c:	2106      	movs	r1, #6
 800766e:	4804      	ldr	r0, [pc, #16]	@ (8007680 <uart_handler_send_status+0x70>)
 8007670:	f7fd fa6a 	bl	8004b48 <uart1_send_packet_dma>
    }
}
 8007674:	bf00      	nop
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	200006c1 	.word	0x200006c1
 8007680:	200007e4 	.word	0x200007e4

08007684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007684:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80076bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007688:	f7ff fd74 	bl	8007174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800768c:	480c      	ldr	r0, [pc, #48]	@ (80076c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800768e:	490d      	ldr	r1, [pc, #52]	@ (80076c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007690:	4a0d      	ldr	r2, [pc, #52]	@ (80076c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007694:	e002      	b.n	800769c <LoopCopyDataInit>

08007696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800769a:	3304      	adds	r3, #4

0800769c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800769c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800769e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80076a0:	d3f9      	bcc.n	8007696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80076a2:	4a0a      	ldr	r2, [pc, #40]	@ (80076cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80076a4:	4c0a      	ldr	r4, [pc, #40]	@ (80076d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80076a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80076a8:	e001      	b.n	80076ae <LoopFillZerobss>

080076aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80076aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80076ac:	3204      	adds	r2, #4

080076ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80076ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80076b0:	d3fb      	bcc.n	80076aa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80076b2:	f005 fc2b 	bl	800cf0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80076b6:	f7fc feb1 	bl	800441c <main>
  bx  lr    
 80076ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80076bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80076c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80076c4:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 80076c8:	08011a08 	.word	0x08011a08
  ldr r2, =_sbss
 80076cc:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 80076d0:	2000093c 	.word	0x2000093c

080076d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80076d4:	e7fe      	b.n	80076d4 <ADC_IRQHandler>
	...

080076d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80076dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007718 <HAL_Init+0x40>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a0d      	ldr	r2, [pc, #52]	@ (8007718 <HAL_Init+0x40>)
 80076e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80076e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80076e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007718 <HAL_Init+0x40>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a0a      	ldr	r2, [pc, #40]	@ (8007718 <HAL_Init+0x40>)
 80076ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80076f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80076f4:	4b08      	ldr	r3, [pc, #32]	@ (8007718 <HAL_Init+0x40>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a07      	ldr	r2, [pc, #28]	@ (8007718 <HAL_Init+0x40>)
 80076fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007700:	2003      	movs	r0, #3
 8007702:	f000 f973 	bl	80079ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007706:	200f      	movs	r0, #15
 8007708:	f000 f808 	bl	800771c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800770c:	f7ff f9b0 	bl	8006a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	40023c00 	.word	0x40023c00

0800771c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007724:	4b12      	ldr	r3, [pc, #72]	@ (8007770 <HAL_InitTick+0x54>)
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	4b12      	ldr	r3, [pc, #72]	@ (8007774 <HAL_InitTick+0x58>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	4619      	mov	r1, r3
 800772e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007732:	fbb3 f3f1 	udiv	r3, r3, r1
 8007736:	fbb2 f3f3 	udiv	r3, r2, r3
 800773a:	4618      	mov	r0, r3
 800773c:	f000 f999 	bl	8007a72 <HAL_SYSTICK_Config>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e00e      	b.n	8007768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b0f      	cmp	r3, #15
 800774e:	d80a      	bhi.n	8007766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007750:	2200      	movs	r2, #0
 8007752:	6879      	ldr	r1, [r7, #4]
 8007754:	f04f 30ff 	mov.w	r0, #4294967295
 8007758:	f000 f953 	bl	8007a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800775c:	4a06      	ldr	r2, [pc, #24]	@ (8007778 <HAL_InitTick+0x5c>)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	e000      	b.n	8007768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
}
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	20000040 	.word	0x20000040
 8007774:	20000048 	.word	0x20000048
 8007778:	20000044 	.word	0x20000044

0800777c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007780:	4b06      	ldr	r3, [pc, #24]	@ (800779c <HAL_IncTick+0x20>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	461a      	mov	r2, r3
 8007786:	4b06      	ldr	r3, [pc, #24]	@ (80077a0 <HAL_IncTick+0x24>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4413      	add	r3, r2
 800778c:	4a04      	ldr	r2, [pc, #16]	@ (80077a0 <HAL_IncTick+0x24>)
 800778e:	6013      	str	r3, [r2, #0]
}
 8007790:	bf00      	nop
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	20000048 	.word	0x20000048
 80077a0:	200007ec 	.word	0x200007ec

080077a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80077a4:	b480      	push	{r7}
 80077a6:	af00      	add	r7, sp, #0
  return uwTick;
 80077a8:	4b03      	ldr	r3, [pc, #12]	@ (80077b8 <HAL_GetTick+0x14>)
 80077aa:	681b      	ldr	r3, [r3, #0]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	200007ec 	.word	0x200007ec

080077bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80077c4:	f7ff ffee 	bl	80077a4 <HAL_GetTick>
 80077c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d4:	d005      	beq.n	80077e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80077d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007800 <HAL_Delay+0x44>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4413      	add	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80077e2:	bf00      	nop
 80077e4:	f7ff ffde 	bl	80077a4 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d8f7      	bhi.n	80077e4 <HAL_Delay+0x28>
  {
  }
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	20000048 	.word	0x20000048

08007804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f003 0307 	and.w	r3, r3, #7
 8007812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007814:	4b0c      	ldr	r3, [pc, #48]	@ (8007848 <__NVIC_SetPriorityGrouping+0x44>)
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007820:	4013      	ands	r3, r2
 8007822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800782c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007836:	4a04      	ldr	r2, [pc, #16]	@ (8007848 <__NVIC_SetPriorityGrouping+0x44>)
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	60d3      	str	r3, [r2, #12]
}
 800783c:	bf00      	nop
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	e000ed00 	.word	0xe000ed00

0800784c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800784c:	b480      	push	{r7}
 800784e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007850:	4b04      	ldr	r3, [pc, #16]	@ (8007864 <__NVIC_GetPriorityGrouping+0x18>)
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	0a1b      	lsrs	r3, r3, #8
 8007856:	f003 0307 	and.w	r3, r3, #7
}
 800785a:	4618      	mov	r0, r3
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	e000ed00 	.word	0xe000ed00

08007868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	4603      	mov	r3, r0
 8007870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007876:	2b00      	cmp	r3, #0
 8007878:	db0b      	blt.n	8007892 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800787a:	79fb      	ldrb	r3, [r7, #7]
 800787c:	f003 021f 	and.w	r2, r3, #31
 8007880:	4907      	ldr	r1, [pc, #28]	@ (80078a0 <__NVIC_EnableIRQ+0x38>)
 8007882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007886:	095b      	lsrs	r3, r3, #5
 8007888:	2001      	movs	r0, #1
 800788a:	fa00 f202 	lsl.w	r2, r0, r2
 800788e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007892:	bf00      	nop
 8007894:	370c      	adds	r7, #12
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	e000e100 	.word	0xe000e100

080078a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	4603      	mov	r3, r0
 80078ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	db12      	blt.n	80078dc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078b6:	79fb      	ldrb	r3, [r7, #7]
 80078b8:	f003 021f 	and.w	r2, r3, #31
 80078bc:	490a      	ldr	r1, [pc, #40]	@ (80078e8 <__NVIC_DisableIRQ+0x44>)
 80078be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078c2:	095b      	lsrs	r3, r3, #5
 80078c4:	2001      	movs	r0, #1
 80078c6:	fa00 f202 	lsl.w	r2, r0, r2
 80078ca:	3320      	adds	r3, #32
 80078cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80078d0:	f3bf 8f4f 	dsb	sy
}
 80078d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80078d6:	f3bf 8f6f 	isb	sy
}
 80078da:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	e000e100 	.word	0xe000e100

080078ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	4603      	mov	r3, r0
 80078f4:	6039      	str	r1, [r7, #0]
 80078f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	db0a      	blt.n	8007916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	b2da      	uxtb	r2, r3
 8007904:	490c      	ldr	r1, [pc, #48]	@ (8007938 <__NVIC_SetPriority+0x4c>)
 8007906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800790a:	0112      	lsls	r2, r2, #4
 800790c:	b2d2      	uxtb	r2, r2
 800790e:	440b      	add	r3, r1
 8007910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007914:	e00a      	b.n	800792c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	b2da      	uxtb	r2, r3
 800791a:	4908      	ldr	r1, [pc, #32]	@ (800793c <__NVIC_SetPriority+0x50>)
 800791c:	79fb      	ldrb	r3, [r7, #7]
 800791e:	f003 030f 	and.w	r3, r3, #15
 8007922:	3b04      	subs	r3, #4
 8007924:	0112      	lsls	r2, r2, #4
 8007926:	b2d2      	uxtb	r2, r2
 8007928:	440b      	add	r3, r1
 800792a:	761a      	strb	r2, [r3, #24]
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	e000e100 	.word	0xe000e100
 800793c:	e000ed00 	.word	0xe000ed00

08007940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007940:	b480      	push	{r7}
 8007942:	b089      	sub	sp, #36	@ 0x24
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	f1c3 0307 	rsb	r3, r3, #7
 800795a:	2b04      	cmp	r3, #4
 800795c:	bf28      	it	cs
 800795e:	2304      	movcs	r3, #4
 8007960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	3304      	adds	r3, #4
 8007966:	2b06      	cmp	r3, #6
 8007968:	d902      	bls.n	8007970 <NVIC_EncodePriority+0x30>
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	3b03      	subs	r3, #3
 800796e:	e000      	b.n	8007972 <NVIC_EncodePriority+0x32>
 8007970:	2300      	movs	r3, #0
 8007972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007974:	f04f 32ff 	mov.w	r2, #4294967295
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	fa02 f303 	lsl.w	r3, r2, r3
 800797e:	43da      	mvns	r2, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	401a      	ands	r2, r3
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007988:	f04f 31ff 	mov.w	r1, #4294967295
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	fa01 f303 	lsl.w	r3, r1, r3
 8007992:	43d9      	mvns	r1, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007998:	4313      	orrs	r3, r2
         );
}
 800799a:	4618      	mov	r0, r3
 800799c:	3724      	adds	r7, #36	@ 0x24
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
	...

080079a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079b8:	d301      	bcc.n	80079be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80079ba:	2301      	movs	r3, #1
 80079bc:	e00f      	b.n	80079de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80079be:	4a0a      	ldr	r2, [pc, #40]	@ (80079e8 <SysTick_Config+0x40>)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80079c6:	210f      	movs	r1, #15
 80079c8:	f04f 30ff 	mov.w	r0, #4294967295
 80079cc:	f7ff ff8e 	bl	80078ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80079d0:	4b05      	ldr	r3, [pc, #20]	@ (80079e8 <SysTick_Config+0x40>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80079d6:	4b04      	ldr	r3, [pc, #16]	@ (80079e8 <SysTick_Config+0x40>)
 80079d8:	2207      	movs	r2, #7
 80079da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	e000e010 	.word	0xe000e010

080079ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7ff ff05 	bl	8007804 <__NVIC_SetPriorityGrouping>
}
 80079fa:	bf00      	nop
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b086      	sub	sp, #24
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	4603      	mov	r3, r0
 8007a0a:	60b9      	str	r1, [r7, #8]
 8007a0c:	607a      	str	r2, [r7, #4]
 8007a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007a14:	f7ff ff1a 	bl	800784c <__NVIC_GetPriorityGrouping>
 8007a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	68b9      	ldr	r1, [r7, #8]
 8007a1e:	6978      	ldr	r0, [r7, #20]
 8007a20:	f7ff ff8e 	bl	8007940 <NVIC_EncodePriority>
 8007a24:	4602      	mov	r2, r0
 8007a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7ff ff5d 	bl	80078ec <__NVIC_SetPriority>
}
 8007a32:	bf00      	nop
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b082      	sub	sp, #8
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	4603      	mov	r3, r0
 8007a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7ff ff0d 	bl	8007868 <__NVIC_EnableIRQ>
}
 8007a4e:	bf00      	nop
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7ff ff1d 	bl	80078a4 <__NVIC_DisableIRQ>
}
 8007a6a:	bf00      	nop
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b082      	sub	sp, #8
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7ff ff94 	bl	80079a8 <SysTick_Config>
 8007a80:	4603      	mov	r3, r0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007a98:	f7ff fe84 	bl	80077a4 <HAL_GetTick>
 8007a9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e099      	b.n	8007bdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f022 0201 	bic.w	r2, r2, #1
 8007ac6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ac8:	e00f      	b.n	8007aea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007aca:	f7ff fe6b 	bl	80077a4 <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	2b05      	cmp	r3, #5
 8007ad6:	d908      	bls.n	8007aea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2220      	movs	r2, #32
 8007adc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2203      	movs	r2, #3
 8007ae2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e078      	b.n	8007bdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1e8      	bne.n	8007aca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	4b38      	ldr	r3, [pc, #224]	@ (8007be4 <HAL_DMA_Init+0x158>)
 8007b04:	4013      	ands	r3, r2
 8007b06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a1b      	ldr	r3, [r3, #32]
 8007b34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b40:	2b04      	cmp	r3, #4
 8007b42:	d107      	bne.n	8007b54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	f023 0307 	bic.w	r3, r3, #7
 8007b6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d117      	bne.n	8007bae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00e      	beq.n	8007bae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fb01 	bl	8008198 <DMA_CheckFifoParam>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d008      	beq.n	8007bae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2240      	movs	r2, #64	@ 0x40
 8007ba0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007baa:	2301      	movs	r3, #1
 8007bac:	e016      	b.n	8007bdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fab8 	bl	800812c <DMA_CalcBaseAndBitshift>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bc4:	223f      	movs	r2, #63	@ 0x3f
 8007bc6:	409a      	lsls	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	f010803f 	.word	0xf010803f

08007be8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
 8007bf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bfe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d101      	bne.n	8007c0e <HAL_DMA_Start_IT+0x26>
 8007c0a:	2302      	movs	r3, #2
 8007c0c:	e040      	b.n	8007c90 <HAL_DMA_Start_IT+0xa8>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d12f      	bne.n	8007c82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2202      	movs	r2, #2
 8007c26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	68b9      	ldr	r1, [r7, #8]
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 fa4a 	bl	80080d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c40:	223f      	movs	r2, #63	@ 0x3f
 8007c42:	409a      	lsls	r2, r3
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f042 0216 	orr.w	r2, r2, #22
 8007c56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d007      	beq.n	8007c70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f042 0208 	orr.w	r2, r2, #8
 8007c6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f042 0201 	orr.w	r2, r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]
 8007c80:	e005      	b.n	8007c8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ca4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007ca6:	f7ff fd7d 	bl	80077a4 <HAL_GetTick>
 8007caa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d008      	beq.n	8007cca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2280      	movs	r2, #128	@ 0x80
 8007cbc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e052      	b.n	8007d70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0216 	bic.w	r2, r2, #22
 8007cd8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	695a      	ldr	r2, [r3, #20]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ce8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d103      	bne.n	8007cfa <HAL_DMA_Abort+0x62>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d007      	beq.n	8007d0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f022 0208 	bic.w	r2, r2, #8
 8007d08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f022 0201 	bic.w	r2, r2, #1
 8007d18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d1a:	e013      	b.n	8007d44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d1c:	f7ff fd42 	bl	80077a4 <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	2b05      	cmp	r3, #5
 8007d28:	d90c      	bls.n	8007d44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2203      	movs	r2, #3
 8007d34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e015      	b.n	8007d70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1e4      	bne.n	8007d1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d56:	223f      	movs	r2, #63	@ 0x3f
 8007d58:	409a      	lsls	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d004      	beq.n	8007d96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2280      	movs	r2, #128	@ 0x80
 8007d90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e00c      	b.n	8007db0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2205      	movs	r2, #5
 8007d9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 0201 	bic.w	r2, r2, #1
 8007dac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007dc8:	4b8e      	ldr	r3, [pc, #568]	@ (8008004 <HAL_DMA_IRQHandler+0x248>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a8e      	ldr	r2, [pc, #568]	@ (8008008 <HAL_DMA_IRQHandler+0x24c>)
 8007dce:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd2:	0a9b      	lsrs	r3, r3, #10
 8007dd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007de6:	2208      	movs	r2, #8
 8007de8:	409a      	lsls	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4013      	ands	r3, r2
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d01a      	beq.n	8007e28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0304 	and.w	r3, r3, #4
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d013      	beq.n	8007e28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 0204 	bic.w	r2, r2, #4
 8007e0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e14:	2208      	movs	r2, #8
 8007e16:	409a      	lsls	r2, r3
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e20:	f043 0201 	orr.w	r2, r3, #1
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	409a      	lsls	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4013      	ands	r3, r2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d012      	beq.n	8007e5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00b      	beq.n	8007e5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	409a      	lsls	r2, r3
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e56:	f043 0202 	orr.w	r2, r3, #2
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e62:	2204      	movs	r2, #4
 8007e64:	409a      	lsls	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	4013      	ands	r3, r2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d012      	beq.n	8007e94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00b      	beq.n	8007e94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e80:	2204      	movs	r2, #4
 8007e82:	409a      	lsls	r2, r3
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e8c:	f043 0204 	orr.w	r2, r3, #4
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e98:	2210      	movs	r2, #16
 8007e9a:	409a      	lsls	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d043      	beq.n	8007f2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 0308 	and.w	r3, r3, #8
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d03c      	beq.n	8007f2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eb6:	2210      	movs	r2, #16
 8007eb8:	409a      	lsls	r2, r3
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d018      	beq.n	8007efe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d108      	bne.n	8007eec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d024      	beq.n	8007f2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	4798      	blx	r3
 8007eea:	e01f      	b.n	8007f2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d01b      	beq.n	8007f2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	4798      	blx	r3
 8007efc:	e016      	b.n	8007f2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d107      	bne.n	8007f1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f022 0208 	bic.w	r2, r2, #8
 8007f1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d003      	beq.n	8007f2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f30:	2220      	movs	r2, #32
 8007f32:	409a      	lsls	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4013      	ands	r3, r2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 808f 	beq.w	800805c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0310 	and.w	r3, r3, #16
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 8087 	beq.w	800805c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f52:	2220      	movs	r2, #32
 8007f54:	409a      	lsls	r2, r3
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b05      	cmp	r3, #5
 8007f64:	d136      	bne.n	8007fd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 0216 	bic.w	r2, r2, #22
 8007f74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	695a      	ldr	r2, [r3, #20]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d103      	bne.n	8007f96 <HAL_DMA_IRQHandler+0x1da>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d007      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f022 0208 	bic.w	r2, r2, #8
 8007fa4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007faa:	223f      	movs	r2, #63	@ 0x3f
 8007fac:	409a      	lsls	r2, r3
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d07e      	beq.n	80080c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	4798      	blx	r3
        }
        return;
 8007fd2:	e079      	b.n	80080c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d01d      	beq.n	800801e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10d      	bne.n	800800c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d031      	beq.n	800805c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	4798      	blx	r3
 8008000:	e02c      	b.n	800805c <HAL_DMA_IRQHandler+0x2a0>
 8008002:	bf00      	nop
 8008004:	20000040 	.word	0x20000040
 8008008:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008010:	2b00      	cmp	r3, #0
 8008012:	d023      	beq.n	800805c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	4798      	blx	r3
 800801c:	e01e      	b.n	800805c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10f      	bne.n	800804c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f022 0210 	bic.w	r2, r2, #16
 800803a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008050:	2b00      	cmp	r3, #0
 8008052:	d003      	beq.n	800805c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008060:	2b00      	cmp	r3, #0
 8008062:	d032      	beq.n	80080ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	2b00      	cmp	r3, #0
 800806e:	d022      	beq.n	80080b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2205      	movs	r2, #5
 8008074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f022 0201 	bic.w	r2, r2, #1
 8008086:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	3301      	adds	r3, #1
 800808c:	60bb      	str	r3, [r7, #8]
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	429a      	cmp	r2, r3
 8008092:	d307      	bcc.n	80080a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1f2      	bne.n	8008088 <HAL_DMA_IRQHandler+0x2cc>
 80080a2:	e000      	b.n	80080a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80080a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d005      	beq.n	80080ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	4798      	blx	r3
 80080c6:	e000      	b.n	80080ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80080c8:	bf00      	nop
    }
  }
}
 80080ca:	3718      	adds	r7, #24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80080ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	2b40      	cmp	r3, #64	@ 0x40
 80080fc:	d108      	bne.n	8008110 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800810e:	e007      	b.n	8008120 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	60da      	str	r2, [r3, #12]
}
 8008120:	bf00      	nop
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	b2db      	uxtb	r3, r3
 800813a:	3b10      	subs	r3, #16
 800813c:	4a14      	ldr	r2, [pc, #80]	@ (8008190 <DMA_CalcBaseAndBitshift+0x64>)
 800813e:	fba2 2303 	umull	r2, r3, r2, r3
 8008142:	091b      	lsrs	r3, r3, #4
 8008144:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008146:	4a13      	ldr	r2, [pc, #76]	@ (8008194 <DMA_CalcBaseAndBitshift+0x68>)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4413      	add	r3, r2
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	461a      	mov	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2b03      	cmp	r3, #3
 8008158:	d909      	bls.n	800816e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008162:	f023 0303 	bic.w	r3, r3, #3
 8008166:	1d1a      	adds	r2, r3, #4
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	659a      	str	r2, [r3, #88]	@ 0x58
 800816c:	e007      	b.n	800817e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008176:	f023 0303 	bic.w	r3, r3, #3
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008182:	4618      	mov	r0, r3
 8008184:	3714      	adds	r7, #20
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	aaaaaaab 	.word	0xaaaaaaab
 8008194:	08011440 	.word	0x08011440

08008198 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081a0:	2300      	movs	r3, #0
 80081a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d11f      	bne.n	80081f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d856      	bhi.n	8008266 <DMA_CheckFifoParam+0xce>
 80081b8:	a201      	add	r2, pc, #4	@ (adr r2, 80081c0 <DMA_CheckFifoParam+0x28>)
 80081ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081be:	bf00      	nop
 80081c0:	080081d1 	.word	0x080081d1
 80081c4:	080081e3 	.word	0x080081e3
 80081c8:	080081d1 	.word	0x080081d1
 80081cc:	08008267 	.word	0x08008267
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d046      	beq.n	800826a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081e0:	e043      	b.n	800826a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80081ea:	d140      	bne.n	800826e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081f0:	e03d      	b.n	800826e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081fa:	d121      	bne.n	8008240 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d837      	bhi.n	8008272 <DMA_CheckFifoParam+0xda>
 8008202:	a201      	add	r2, pc, #4	@ (adr r2, 8008208 <DMA_CheckFifoParam+0x70>)
 8008204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008208:	08008219 	.word	0x08008219
 800820c:	0800821f 	.word	0x0800821f
 8008210:	08008219 	.word	0x08008219
 8008214:	08008231 	.word	0x08008231
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	73fb      	strb	r3, [r7, #15]
      break;
 800821c:	e030      	b.n	8008280 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008222:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d025      	beq.n	8008276 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800822e:	e022      	b.n	8008276 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008234:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008238:	d11f      	bne.n	800827a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800823e:	e01c      	b.n	800827a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	2b02      	cmp	r3, #2
 8008244:	d903      	bls.n	800824e <DMA_CheckFifoParam+0xb6>
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2b03      	cmp	r3, #3
 800824a:	d003      	beq.n	8008254 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800824c:	e018      	b.n	8008280 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	73fb      	strb	r3, [r7, #15]
      break;
 8008252:	e015      	b.n	8008280 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008258:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00e      	beq.n	800827e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	73fb      	strb	r3, [r7, #15]
      break;
 8008264:	e00b      	b.n	800827e <DMA_CheckFifoParam+0xe6>
      break;
 8008266:	bf00      	nop
 8008268:	e00a      	b.n	8008280 <DMA_CheckFifoParam+0xe8>
      break;
 800826a:	bf00      	nop
 800826c:	e008      	b.n	8008280 <DMA_CheckFifoParam+0xe8>
      break;
 800826e:	bf00      	nop
 8008270:	e006      	b.n	8008280 <DMA_CheckFifoParam+0xe8>
      break;
 8008272:	bf00      	nop
 8008274:	e004      	b.n	8008280 <DMA_CheckFifoParam+0xe8>
      break;
 8008276:	bf00      	nop
 8008278:	e002      	b.n	8008280 <DMA_CheckFifoParam+0xe8>
      break;   
 800827a:	bf00      	nop
 800827c:	e000      	b.n	8008280 <DMA_CheckFifoParam+0xe8>
      break;
 800827e:	bf00      	nop
    }
  } 
  
  return status; 
 8008280:	7bfb      	ldrb	r3, [r7, #15]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop

08008290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008290:	b480      	push	{r7}
 8008292:	b089      	sub	sp, #36	@ 0x24
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800829a:	2300      	movs	r3, #0
 800829c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800829e:	2300      	movs	r3, #0
 80082a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80082a6:	2300      	movs	r3, #0
 80082a8:	61fb      	str	r3, [r7, #28]
 80082aa:	e165      	b.n	8008578 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80082ac:	2201      	movs	r2, #1
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	fa02 f303 	lsl.w	r3, r2, r3
 80082b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	4013      	ands	r3, r2
 80082be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	f040 8154 	bne.w	8008572 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f003 0303 	and.w	r3, r3, #3
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d005      	beq.n	80082e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d130      	bne.n	8008344 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	2203      	movs	r2, #3
 80082ee:	fa02 f303 	lsl.w	r3, r2, r3
 80082f2:	43db      	mvns	r3, r3
 80082f4:	69ba      	ldr	r2, [r7, #24]
 80082f6:	4013      	ands	r3, r2
 80082f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	68da      	ldr	r2, [r3, #12]
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	fa02 f303 	lsl.w	r3, r2, r3
 8008306:	69ba      	ldr	r2, [r7, #24]
 8008308:	4313      	orrs	r3, r2
 800830a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	69ba      	ldr	r2, [r7, #24]
 8008310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008318:	2201      	movs	r2, #1
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	fa02 f303 	lsl.w	r3, r2, r3
 8008320:	43db      	mvns	r3, r3
 8008322:	69ba      	ldr	r2, [r7, #24]
 8008324:	4013      	ands	r3, r2
 8008326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	091b      	lsrs	r3, r3, #4
 800832e:	f003 0201 	and.w	r2, r3, #1
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	fa02 f303 	lsl.w	r3, r2, r3
 8008338:	69ba      	ldr	r2, [r7, #24]
 800833a:	4313      	orrs	r3, r2
 800833c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f003 0303 	and.w	r3, r3, #3
 800834c:	2b03      	cmp	r3, #3
 800834e:	d017      	beq.n	8008380 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	005b      	lsls	r3, r3, #1
 800835a:	2203      	movs	r2, #3
 800835c:	fa02 f303 	lsl.w	r3, r2, r3
 8008360:	43db      	mvns	r3, r3
 8008362:	69ba      	ldr	r2, [r7, #24]
 8008364:	4013      	ands	r3, r2
 8008366:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	689a      	ldr	r2, [r3, #8]
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	005b      	lsls	r3, r3, #1
 8008370:	fa02 f303 	lsl.w	r3, r2, r3
 8008374:	69ba      	ldr	r2, [r7, #24]
 8008376:	4313      	orrs	r3, r2
 8008378:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f003 0303 	and.w	r3, r3, #3
 8008388:	2b02      	cmp	r3, #2
 800838a:	d123      	bne.n	80083d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	08da      	lsrs	r2, r3, #3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	3208      	adds	r2, #8
 8008394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008398:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	f003 0307 	and.w	r3, r3, #7
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	220f      	movs	r2, #15
 80083a4:	fa02 f303 	lsl.w	r3, r2, r3
 80083a8:	43db      	mvns	r3, r3
 80083aa:	69ba      	ldr	r2, [r7, #24]
 80083ac:	4013      	ands	r3, r2
 80083ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	691a      	ldr	r2, [r3, #16]
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	f003 0307 	and.w	r3, r3, #7
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	fa02 f303 	lsl.w	r3, r2, r3
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	08da      	lsrs	r2, r3, #3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	3208      	adds	r2, #8
 80083ce:	69b9      	ldr	r1, [r7, #24]
 80083d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	2203      	movs	r2, #3
 80083e0:	fa02 f303 	lsl.w	r3, r2, r3
 80083e4:	43db      	mvns	r3, r3
 80083e6:	69ba      	ldr	r2, [r7, #24]
 80083e8:	4013      	ands	r3, r2
 80083ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	f003 0203 	and.w	r2, r3, #3
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	005b      	lsls	r3, r3, #1
 80083f8:	fa02 f303 	lsl.w	r3, r2, r3
 80083fc:	69ba      	ldr	r2, [r7, #24]
 80083fe:	4313      	orrs	r3, r2
 8008400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	69ba      	ldr	r2, [r7, #24]
 8008406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 80ae 	beq.w	8008572 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008416:	2300      	movs	r3, #0
 8008418:	60fb      	str	r3, [r7, #12]
 800841a:	4b5d      	ldr	r3, [pc, #372]	@ (8008590 <HAL_GPIO_Init+0x300>)
 800841c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800841e:	4a5c      	ldr	r2, [pc, #368]	@ (8008590 <HAL_GPIO_Init+0x300>)
 8008420:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008424:	6453      	str	r3, [r2, #68]	@ 0x44
 8008426:	4b5a      	ldr	r3, [pc, #360]	@ (8008590 <HAL_GPIO_Init+0x300>)
 8008428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800842a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008432:	4a58      	ldr	r2, [pc, #352]	@ (8008594 <HAL_GPIO_Init+0x304>)
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	089b      	lsrs	r3, r3, #2
 8008438:	3302      	adds	r3, #2
 800843a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800843e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	f003 0303 	and.w	r3, r3, #3
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	220f      	movs	r2, #15
 800844a:	fa02 f303 	lsl.w	r3, r2, r3
 800844e:	43db      	mvns	r3, r3
 8008450:	69ba      	ldr	r2, [r7, #24]
 8008452:	4013      	ands	r3, r2
 8008454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a4f      	ldr	r2, [pc, #316]	@ (8008598 <HAL_GPIO_Init+0x308>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d025      	beq.n	80084aa <HAL_GPIO_Init+0x21a>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a4e      	ldr	r2, [pc, #312]	@ (800859c <HAL_GPIO_Init+0x30c>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d01f      	beq.n	80084a6 <HAL_GPIO_Init+0x216>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a4d      	ldr	r2, [pc, #308]	@ (80085a0 <HAL_GPIO_Init+0x310>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d019      	beq.n	80084a2 <HAL_GPIO_Init+0x212>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a4c      	ldr	r2, [pc, #304]	@ (80085a4 <HAL_GPIO_Init+0x314>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d013      	beq.n	800849e <HAL_GPIO_Init+0x20e>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a4b      	ldr	r2, [pc, #300]	@ (80085a8 <HAL_GPIO_Init+0x318>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d00d      	beq.n	800849a <HAL_GPIO_Init+0x20a>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a4a      	ldr	r2, [pc, #296]	@ (80085ac <HAL_GPIO_Init+0x31c>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d007      	beq.n	8008496 <HAL_GPIO_Init+0x206>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a49      	ldr	r2, [pc, #292]	@ (80085b0 <HAL_GPIO_Init+0x320>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d101      	bne.n	8008492 <HAL_GPIO_Init+0x202>
 800848e:	2306      	movs	r3, #6
 8008490:	e00c      	b.n	80084ac <HAL_GPIO_Init+0x21c>
 8008492:	2307      	movs	r3, #7
 8008494:	e00a      	b.n	80084ac <HAL_GPIO_Init+0x21c>
 8008496:	2305      	movs	r3, #5
 8008498:	e008      	b.n	80084ac <HAL_GPIO_Init+0x21c>
 800849a:	2304      	movs	r3, #4
 800849c:	e006      	b.n	80084ac <HAL_GPIO_Init+0x21c>
 800849e:	2303      	movs	r3, #3
 80084a0:	e004      	b.n	80084ac <HAL_GPIO_Init+0x21c>
 80084a2:	2302      	movs	r3, #2
 80084a4:	e002      	b.n	80084ac <HAL_GPIO_Init+0x21c>
 80084a6:	2301      	movs	r3, #1
 80084a8:	e000      	b.n	80084ac <HAL_GPIO_Init+0x21c>
 80084aa:	2300      	movs	r3, #0
 80084ac:	69fa      	ldr	r2, [r7, #28]
 80084ae:	f002 0203 	and.w	r2, r2, #3
 80084b2:	0092      	lsls	r2, r2, #2
 80084b4:	4093      	lsls	r3, r2
 80084b6:	69ba      	ldr	r2, [r7, #24]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80084bc:	4935      	ldr	r1, [pc, #212]	@ (8008594 <HAL_GPIO_Init+0x304>)
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	089b      	lsrs	r3, r3, #2
 80084c2:	3302      	adds	r3, #2
 80084c4:	69ba      	ldr	r2, [r7, #24]
 80084c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80084ca:	4b3a      	ldr	r3, [pc, #232]	@ (80085b4 <HAL_GPIO_Init+0x324>)
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	43db      	mvns	r3, r3
 80084d4:	69ba      	ldr	r2, [r7, #24]
 80084d6:	4013      	ands	r3, r2
 80084d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d003      	beq.n	80084ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80084e6:	69ba      	ldr	r2, [r7, #24]
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80084ee:	4a31      	ldr	r2, [pc, #196]	@ (80085b4 <HAL_GPIO_Init+0x324>)
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80084f4:	4b2f      	ldr	r3, [pc, #188]	@ (80085b4 <HAL_GPIO_Init+0x324>)
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	43db      	mvns	r3, r3
 80084fe:	69ba      	ldr	r2, [r7, #24]
 8008500:	4013      	ands	r3, r2
 8008502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800850c:	2b00      	cmp	r3, #0
 800850e:	d003      	beq.n	8008518 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	4313      	orrs	r3, r2
 8008516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008518:	4a26      	ldr	r2, [pc, #152]	@ (80085b4 <HAL_GPIO_Init+0x324>)
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800851e:	4b25      	ldr	r3, [pc, #148]	@ (80085b4 <HAL_GPIO_Init+0x324>)
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	43db      	mvns	r3, r3
 8008528:	69ba      	ldr	r2, [r7, #24]
 800852a:	4013      	ands	r3, r2
 800852c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800853a:	69ba      	ldr	r2, [r7, #24]
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	4313      	orrs	r3, r2
 8008540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008542:	4a1c      	ldr	r2, [pc, #112]	@ (80085b4 <HAL_GPIO_Init+0x324>)
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008548:	4b1a      	ldr	r3, [pc, #104]	@ (80085b4 <HAL_GPIO_Init+0x324>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	43db      	mvns	r3, r3
 8008552:	69ba      	ldr	r2, [r7, #24]
 8008554:	4013      	ands	r3, r2
 8008556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008560:	2b00      	cmp	r3, #0
 8008562:	d003      	beq.n	800856c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	4313      	orrs	r3, r2
 800856a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800856c:	4a11      	ldr	r2, [pc, #68]	@ (80085b4 <HAL_GPIO_Init+0x324>)
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	3301      	adds	r3, #1
 8008576:	61fb      	str	r3, [r7, #28]
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	2b0f      	cmp	r3, #15
 800857c:	f67f ae96 	bls.w	80082ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008580:	bf00      	nop
 8008582:	bf00      	nop
 8008584:	3724      	adds	r7, #36	@ 0x24
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	40023800 	.word	0x40023800
 8008594:	40013800 	.word	0x40013800
 8008598:	40020000 	.word	0x40020000
 800859c:	40020400 	.word	0x40020400
 80085a0:	40020800 	.word	0x40020800
 80085a4:	40020c00 	.word	0x40020c00
 80085a8:	40021000 	.word	0x40021000
 80085ac:	40021400 	.word	0x40021400
 80085b0:	40021800 	.word	0x40021800
 80085b4:	40013c00 	.word	0x40013c00

080085b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80085c6:	2300      	movs	r3, #0
 80085c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80085ca:	2300      	movs	r3, #0
 80085cc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80085ce:	2300      	movs	r3, #0
 80085d0:	617b      	str	r3, [r7, #20]
 80085d2:	e0c7      	b.n	8008764 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80085d4:	2201      	movs	r2, #1
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	fa02 f303 	lsl.w	r3, r2, r3
 80085dc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80085de:	683a      	ldr	r2, [r7, #0]
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	4013      	ands	r3, r2
 80085e4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	f040 80b7 	bne.w	800875e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80085f0:	4a62      	ldr	r2, [pc, #392]	@ (800877c <HAL_GPIO_DeInit+0x1c4>)
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	089b      	lsrs	r3, r3, #2
 80085f6:	3302      	adds	r3, #2
 80085f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085fc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f003 0303 	and.w	r3, r3, #3
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	220f      	movs	r2, #15
 8008608:	fa02 f303 	lsl.w	r3, r2, r3
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	4013      	ands	r3, r2
 8008610:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a5a      	ldr	r2, [pc, #360]	@ (8008780 <HAL_GPIO_DeInit+0x1c8>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d025      	beq.n	8008666 <HAL_GPIO_DeInit+0xae>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a59      	ldr	r2, [pc, #356]	@ (8008784 <HAL_GPIO_DeInit+0x1cc>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d01f      	beq.n	8008662 <HAL_GPIO_DeInit+0xaa>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a58      	ldr	r2, [pc, #352]	@ (8008788 <HAL_GPIO_DeInit+0x1d0>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d019      	beq.n	800865e <HAL_GPIO_DeInit+0xa6>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a57      	ldr	r2, [pc, #348]	@ (800878c <HAL_GPIO_DeInit+0x1d4>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d013      	beq.n	800865a <HAL_GPIO_DeInit+0xa2>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a56      	ldr	r2, [pc, #344]	@ (8008790 <HAL_GPIO_DeInit+0x1d8>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d00d      	beq.n	8008656 <HAL_GPIO_DeInit+0x9e>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a55      	ldr	r2, [pc, #340]	@ (8008794 <HAL_GPIO_DeInit+0x1dc>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d007      	beq.n	8008652 <HAL_GPIO_DeInit+0x9a>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a54      	ldr	r2, [pc, #336]	@ (8008798 <HAL_GPIO_DeInit+0x1e0>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d101      	bne.n	800864e <HAL_GPIO_DeInit+0x96>
 800864a:	2306      	movs	r3, #6
 800864c:	e00c      	b.n	8008668 <HAL_GPIO_DeInit+0xb0>
 800864e:	2307      	movs	r3, #7
 8008650:	e00a      	b.n	8008668 <HAL_GPIO_DeInit+0xb0>
 8008652:	2305      	movs	r3, #5
 8008654:	e008      	b.n	8008668 <HAL_GPIO_DeInit+0xb0>
 8008656:	2304      	movs	r3, #4
 8008658:	e006      	b.n	8008668 <HAL_GPIO_DeInit+0xb0>
 800865a:	2303      	movs	r3, #3
 800865c:	e004      	b.n	8008668 <HAL_GPIO_DeInit+0xb0>
 800865e:	2302      	movs	r3, #2
 8008660:	e002      	b.n	8008668 <HAL_GPIO_DeInit+0xb0>
 8008662:	2301      	movs	r3, #1
 8008664:	e000      	b.n	8008668 <HAL_GPIO_DeInit+0xb0>
 8008666:	2300      	movs	r3, #0
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	f002 0203 	and.w	r2, r2, #3
 800866e:	0092      	lsls	r2, r2, #2
 8008670:	4093      	lsls	r3, r2
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	429a      	cmp	r2, r3
 8008676:	d132      	bne.n	80086de <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008678:	4b48      	ldr	r3, [pc, #288]	@ (800879c <HAL_GPIO_DeInit+0x1e4>)
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	43db      	mvns	r3, r3
 8008680:	4946      	ldr	r1, [pc, #280]	@ (800879c <HAL_GPIO_DeInit+0x1e4>)
 8008682:	4013      	ands	r3, r2
 8008684:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008686:	4b45      	ldr	r3, [pc, #276]	@ (800879c <HAL_GPIO_DeInit+0x1e4>)
 8008688:	685a      	ldr	r2, [r3, #4]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	43db      	mvns	r3, r3
 800868e:	4943      	ldr	r1, [pc, #268]	@ (800879c <HAL_GPIO_DeInit+0x1e4>)
 8008690:	4013      	ands	r3, r2
 8008692:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008694:	4b41      	ldr	r3, [pc, #260]	@ (800879c <HAL_GPIO_DeInit+0x1e4>)
 8008696:	68da      	ldr	r2, [r3, #12]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	43db      	mvns	r3, r3
 800869c:	493f      	ldr	r1, [pc, #252]	@ (800879c <HAL_GPIO_DeInit+0x1e4>)
 800869e:	4013      	ands	r3, r2
 80086a0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80086a2:	4b3e      	ldr	r3, [pc, #248]	@ (800879c <HAL_GPIO_DeInit+0x1e4>)
 80086a4:	689a      	ldr	r2, [r3, #8]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	43db      	mvns	r3, r3
 80086aa:	493c      	ldr	r1, [pc, #240]	@ (800879c <HAL_GPIO_DeInit+0x1e4>)
 80086ac:	4013      	ands	r3, r2
 80086ae:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f003 0303 	and.w	r3, r3, #3
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	220f      	movs	r2, #15
 80086ba:	fa02 f303 	lsl.w	r3, r2, r3
 80086be:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80086c0:	4a2e      	ldr	r2, [pc, #184]	@ (800877c <HAL_GPIO_DeInit+0x1c4>)
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	089b      	lsrs	r3, r3, #2
 80086c6:	3302      	adds	r3, #2
 80086c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	43da      	mvns	r2, r3
 80086d0:	482a      	ldr	r0, [pc, #168]	@ (800877c <HAL_GPIO_DeInit+0x1c4>)
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	089b      	lsrs	r3, r3, #2
 80086d6:	400a      	ands	r2, r1
 80086d8:	3302      	adds	r3, #2
 80086da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	005b      	lsls	r3, r3, #1
 80086e6:	2103      	movs	r1, #3
 80086e8:	fa01 f303 	lsl.w	r3, r1, r3
 80086ec:	43db      	mvns	r3, r3
 80086ee:	401a      	ands	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	08da      	lsrs	r2, r3, #3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	3208      	adds	r2, #8
 80086fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	f003 0307 	and.w	r3, r3, #7
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	220f      	movs	r2, #15
 800870a:	fa02 f303 	lsl.w	r3, r2, r3
 800870e:	43db      	mvns	r3, r3
 8008710:	697a      	ldr	r2, [r7, #20]
 8008712:	08d2      	lsrs	r2, r2, #3
 8008714:	4019      	ands	r1, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	3208      	adds	r2, #8
 800871a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	005b      	lsls	r3, r3, #1
 8008726:	2103      	movs	r1, #3
 8008728:	fa01 f303 	lsl.w	r3, r1, r3
 800872c:	43db      	mvns	r3, r3
 800872e:	401a      	ands	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	2101      	movs	r1, #1
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	fa01 f303 	lsl.w	r3, r1, r3
 8008740:	43db      	mvns	r3, r3
 8008742:	401a      	ands	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	689a      	ldr	r2, [r3, #8]
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	005b      	lsls	r3, r3, #1
 8008750:	2103      	movs	r1, #3
 8008752:	fa01 f303 	lsl.w	r3, r1, r3
 8008756:	43db      	mvns	r3, r3
 8008758:	401a      	ands	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	3301      	adds	r3, #1
 8008762:	617b      	str	r3, [r7, #20]
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2b0f      	cmp	r3, #15
 8008768:	f67f af34 	bls.w	80085d4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800876c:	bf00      	nop
 800876e:	bf00      	nop
 8008770:	371c      	adds	r7, #28
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	40013800 	.word	0x40013800
 8008780:	40020000 	.word	0x40020000
 8008784:	40020400 	.word	0x40020400
 8008788:	40020800 	.word	0x40020800
 800878c:	40020c00 	.word	0x40020c00
 8008790:	40021000 	.word	0x40021000
 8008794:	40021400 	.word	0x40021400
 8008798:	40021800 	.word	0x40021800
 800879c:	40013c00 	.word	0x40013c00

080087a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	807b      	strh	r3, [r7, #2]
 80087ac:	4613      	mov	r3, r2
 80087ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80087b0:	787b      	ldrb	r3, [r7, #1]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80087b6:	887a      	ldrh	r2, [r7, #2]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80087bc:	e003      	b.n	80087c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80087be:	887b      	ldrh	r3, [r7, #2]
 80087c0:	041a      	lsls	r2, r3, #16
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	619a      	str	r2, [r3, #24]
}
 80087c6:	bf00      	nop
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
	...

080087d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	4603      	mov	r3, r0
 80087dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80087de:	4b08      	ldr	r3, [pc, #32]	@ (8008800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80087e0:	695a      	ldr	r2, [r3, #20]
 80087e2:	88fb      	ldrh	r3, [r7, #6]
 80087e4:	4013      	ands	r3, r2
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d006      	beq.n	80087f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80087ea:	4a05      	ldr	r2, [pc, #20]	@ (8008800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80087ec:	88fb      	ldrh	r3, [r7, #6]
 80087ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80087f0:	88fb      	ldrh	r3, [r7, #6]
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fc f93a 	bl	8004a6c <HAL_GPIO_EXTI_Callback>
  }
}
 80087f8:	bf00      	nop
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	40013c00 	.word	0x40013c00

08008804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d101      	bne.n	8008816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e12b      	b.n	8008a6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800881c:	b2db      	uxtb	r3, r3
 800881e:	2b00      	cmp	r3, #0
 8008820:	d106      	bne.n	8008830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7fe f948 	bl	8006ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2224      	movs	r2, #36	@ 0x24
 8008834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f022 0201 	bic.w	r2, r2, #1
 8008846:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008856:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008866:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008868:	f001 f912 	bl	8009a90 <HAL_RCC_GetPCLK1Freq>
 800886c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	4a81      	ldr	r2, [pc, #516]	@ (8008a78 <HAL_I2C_Init+0x274>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d807      	bhi.n	8008888 <HAL_I2C_Init+0x84>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	4a80      	ldr	r2, [pc, #512]	@ (8008a7c <HAL_I2C_Init+0x278>)
 800887c:	4293      	cmp	r3, r2
 800887e:	bf94      	ite	ls
 8008880:	2301      	movls	r3, #1
 8008882:	2300      	movhi	r3, #0
 8008884:	b2db      	uxtb	r3, r3
 8008886:	e006      	b.n	8008896 <HAL_I2C_Init+0x92>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	4a7d      	ldr	r2, [pc, #500]	@ (8008a80 <HAL_I2C_Init+0x27c>)
 800888c:	4293      	cmp	r3, r2
 800888e:	bf94      	ite	ls
 8008890:	2301      	movls	r3, #1
 8008892:	2300      	movhi	r3, #0
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e0e7      	b.n	8008a6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	4a78      	ldr	r2, [pc, #480]	@ (8008a84 <HAL_I2C_Init+0x280>)
 80088a2:	fba2 2303 	umull	r2, r3, r2, r3
 80088a6:	0c9b      	lsrs	r3, r3, #18
 80088a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	430a      	orrs	r2, r1
 80088bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	6a1b      	ldr	r3, [r3, #32]
 80088c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	4a6a      	ldr	r2, [pc, #424]	@ (8008a78 <HAL_I2C_Init+0x274>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d802      	bhi.n	80088d8 <HAL_I2C_Init+0xd4>
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	3301      	adds	r3, #1
 80088d6:	e009      	b.n	80088ec <HAL_I2C_Init+0xe8>
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80088de:	fb02 f303 	mul.w	r3, r2, r3
 80088e2:	4a69      	ldr	r2, [pc, #420]	@ (8008a88 <HAL_I2C_Init+0x284>)
 80088e4:	fba2 2303 	umull	r2, r3, r2, r3
 80088e8:	099b      	lsrs	r3, r3, #6
 80088ea:	3301      	adds	r3, #1
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	6812      	ldr	r2, [r2, #0]
 80088f0:	430b      	orrs	r3, r1
 80088f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	69db      	ldr	r3, [r3, #28]
 80088fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80088fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	495c      	ldr	r1, [pc, #368]	@ (8008a78 <HAL_I2C_Init+0x274>)
 8008908:	428b      	cmp	r3, r1
 800890a:	d819      	bhi.n	8008940 <HAL_I2C_Init+0x13c>
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	1e59      	subs	r1, r3, #1
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	005b      	lsls	r3, r3, #1
 8008916:	fbb1 f3f3 	udiv	r3, r1, r3
 800891a:	1c59      	adds	r1, r3, #1
 800891c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008920:	400b      	ands	r3, r1
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00a      	beq.n	800893c <HAL_I2C_Init+0x138>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	1e59      	subs	r1, r3, #1
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	005b      	lsls	r3, r3, #1
 8008930:	fbb1 f3f3 	udiv	r3, r1, r3
 8008934:	3301      	adds	r3, #1
 8008936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800893a:	e051      	b.n	80089e0 <HAL_I2C_Init+0x1dc>
 800893c:	2304      	movs	r3, #4
 800893e:	e04f      	b.n	80089e0 <HAL_I2C_Init+0x1dc>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d111      	bne.n	800896c <HAL_I2C_Init+0x168>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	1e58      	subs	r0, r3, #1
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6859      	ldr	r1, [r3, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	005b      	lsls	r3, r3, #1
 8008954:	440b      	add	r3, r1
 8008956:	fbb0 f3f3 	udiv	r3, r0, r3
 800895a:	3301      	adds	r3, #1
 800895c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008960:	2b00      	cmp	r3, #0
 8008962:	bf0c      	ite	eq
 8008964:	2301      	moveq	r3, #1
 8008966:	2300      	movne	r3, #0
 8008968:	b2db      	uxtb	r3, r3
 800896a:	e012      	b.n	8008992 <HAL_I2C_Init+0x18e>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	1e58      	subs	r0, r3, #1
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6859      	ldr	r1, [r3, #4]
 8008974:	460b      	mov	r3, r1
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	440b      	add	r3, r1
 800897a:	0099      	lsls	r1, r3, #2
 800897c:	440b      	add	r3, r1
 800897e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008982:	3301      	adds	r3, #1
 8008984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008988:	2b00      	cmp	r3, #0
 800898a:	bf0c      	ite	eq
 800898c:	2301      	moveq	r3, #1
 800898e:	2300      	movne	r3, #0
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b00      	cmp	r3, #0
 8008994:	d001      	beq.n	800899a <HAL_I2C_Init+0x196>
 8008996:	2301      	movs	r3, #1
 8008998:	e022      	b.n	80089e0 <HAL_I2C_Init+0x1dc>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10e      	bne.n	80089c0 <HAL_I2C_Init+0x1bc>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	1e58      	subs	r0, r3, #1
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6859      	ldr	r1, [r3, #4]
 80089aa:	460b      	mov	r3, r1
 80089ac:	005b      	lsls	r3, r3, #1
 80089ae:	440b      	add	r3, r1
 80089b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80089b4:	3301      	adds	r3, #1
 80089b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089be:	e00f      	b.n	80089e0 <HAL_I2C_Init+0x1dc>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	1e58      	subs	r0, r3, #1
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6859      	ldr	r1, [r3, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	440b      	add	r3, r1
 80089ce:	0099      	lsls	r1, r3, #2
 80089d0:	440b      	add	r3, r1
 80089d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80089d6:	3301      	adds	r3, #1
 80089d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089e0:	6879      	ldr	r1, [r7, #4]
 80089e2:	6809      	ldr	r1, [r1, #0]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	69da      	ldr	r2, [r3, #28]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	431a      	orrs	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008a0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	6911      	ldr	r1, [r2, #16]
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	68d2      	ldr	r2, [r2, #12]
 8008a1a:	4311      	orrs	r1, r2
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	6812      	ldr	r2, [r2, #0]
 8008a20:	430b      	orrs	r3, r1
 8008a22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	695a      	ldr	r2, [r3, #20]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	431a      	orrs	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	430a      	orrs	r2, r1
 8008a3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f042 0201 	orr.w	r2, r2, #1
 8008a4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2220      	movs	r2, #32
 8008a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	000186a0 	.word	0x000186a0
 8008a7c:	001e847f 	.word	0x001e847f
 8008a80:	003d08ff 	.word	0x003d08ff
 8008a84:	431bde83 	.word	0x431bde83
 8008a88:	10624dd3 	.word	0x10624dd3

08008a8c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e021      	b.n	8008ae2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2224      	movs	r2, #36	@ 0x24
 8008aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f022 0201 	bic.w	r2, r2, #1
 8008ab4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7fe f8a2 	bl	8006c00 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
	...

08008aec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b088      	sub	sp, #32
 8008af0:	af02      	add	r7, sp, #8
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	4608      	mov	r0, r1
 8008af6:	4611      	mov	r1, r2
 8008af8:	461a      	mov	r2, r3
 8008afa:	4603      	mov	r3, r0
 8008afc:	817b      	strh	r3, [r7, #10]
 8008afe:	460b      	mov	r3, r1
 8008b00:	813b      	strh	r3, [r7, #8]
 8008b02:	4613      	mov	r3, r2
 8008b04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b06:	f7fe fe4d 	bl	80077a4 <HAL_GetTick>
 8008b0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2b20      	cmp	r3, #32
 8008b16:	f040 80d9 	bne.w	8008ccc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	2319      	movs	r3, #25
 8008b20:	2201      	movs	r2, #1
 8008b22:	496d      	ldr	r1, [pc, #436]	@ (8008cd8 <HAL_I2C_Mem_Write+0x1ec>)
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f000 fc8b 	bl	8009440 <I2C_WaitOnFlagUntilTimeout>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d001      	beq.n	8008b34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008b30:	2302      	movs	r3, #2
 8008b32:	e0cc      	b.n	8008cce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d101      	bne.n	8008b42 <HAL_I2C_Mem_Write+0x56>
 8008b3e:	2302      	movs	r3, #2
 8008b40:	e0c5      	b.n	8008cce <HAL_I2C_Mem_Write+0x1e2>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2201      	movs	r2, #1
 8008b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d007      	beq.n	8008b68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 0201 	orr.w	r2, r2, #1
 8008b66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2221      	movs	r2, #33	@ 0x21
 8008b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2240      	movs	r2, #64	@ 0x40
 8008b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6a3a      	ldr	r2, [r7, #32]
 8008b92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008b98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	4a4d      	ldr	r2, [pc, #308]	@ (8008cdc <HAL_I2C_Mem_Write+0x1f0>)
 8008ba8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008baa:	88f8      	ldrh	r0, [r7, #6]
 8008bac:	893a      	ldrh	r2, [r7, #8]
 8008bae:	8979      	ldrh	r1, [r7, #10]
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	9301      	str	r3, [sp, #4]
 8008bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	4603      	mov	r3, r0
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 fac2 	bl	8009144 <I2C_RequestMemoryWrite>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d052      	beq.n	8008c6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e081      	b.n	8008cce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f000 fd50 	bl	8009674 <I2C_WaitOnTXEFlagUntilTimeout>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00d      	beq.n	8008bf6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	d107      	bne.n	8008bf2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bf0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e06b      	b.n	8008cce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfa:	781a      	ldrb	r2, [r3, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c06:	1c5a      	adds	r2, r3, #1
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c10:	3b01      	subs	r3, #1
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	695b      	ldr	r3, [r3, #20]
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b04      	cmp	r3, #4
 8008c32:	d11b      	bne.n	8008c6c <HAL_I2C_Mem_Write+0x180>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d017      	beq.n	8008c6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c40:	781a      	ldrb	r2, [r3, #0]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c4c:	1c5a      	adds	r2, r3, #1
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c56:	3b01      	subs	r3, #1
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	3b01      	subs	r3, #1
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1aa      	bne.n	8008bca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f000 fd43 	bl	8009704 <I2C_WaitOnBTFFlagUntilTimeout>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00d      	beq.n	8008ca0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c88:	2b04      	cmp	r3, #4
 8008c8a:	d107      	bne.n	8008c9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e016      	b.n	8008cce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2220      	movs	r2, #32
 8008cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	e000      	b.n	8008cce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008ccc:	2302      	movs	r3, #2
  }
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3718      	adds	r7, #24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	00100002 	.word	0x00100002
 8008cdc:	ffff0000 	.word	0xffff0000

08008ce0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b08c      	sub	sp, #48	@ 0x30
 8008ce4:	af02      	add	r7, sp, #8
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	4608      	mov	r0, r1
 8008cea:	4611      	mov	r1, r2
 8008cec:	461a      	mov	r2, r3
 8008cee:	4603      	mov	r3, r0
 8008cf0:	817b      	strh	r3, [r7, #10]
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	813b      	strh	r3, [r7, #8]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008cfa:	f7fe fd53 	bl	80077a4 <HAL_GetTick>
 8008cfe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b20      	cmp	r3, #32
 8008d0a:	f040 8214 	bne.w	8009136 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	2319      	movs	r3, #25
 8008d14:	2201      	movs	r2, #1
 8008d16:	497b      	ldr	r1, [pc, #492]	@ (8008f04 <HAL_I2C_Mem_Read+0x224>)
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f000 fb91 	bl	8009440 <I2C_WaitOnFlagUntilTimeout>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008d24:	2302      	movs	r3, #2
 8008d26:	e207      	b.n	8009138 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d101      	bne.n	8008d36 <HAL_I2C_Mem_Read+0x56>
 8008d32:	2302      	movs	r3, #2
 8008d34:	e200      	b.n	8009138 <HAL_I2C_Mem_Read+0x458>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 0301 	and.w	r3, r3, #1
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d007      	beq.n	8008d5c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f042 0201 	orr.w	r2, r2, #1
 8008d5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008d6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2222      	movs	r2, #34	@ 0x22
 8008d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2240      	movs	r2, #64	@ 0x40
 8008d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4a5b      	ldr	r2, [pc, #364]	@ (8008f08 <HAL_I2C_Mem_Read+0x228>)
 8008d9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008d9e:	88f8      	ldrh	r0, [r7, #6]
 8008da0:	893a      	ldrh	r2, [r7, #8]
 8008da2:	8979      	ldrh	r1, [r7, #10]
 8008da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da6:	9301      	str	r3, [sp, #4]
 8008da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	4603      	mov	r3, r0
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f000 fa5e 	bl	8009270 <I2C_RequestMemoryRead>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e1bc      	b.n	8009138 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d113      	bne.n	8008dee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	623b      	str	r3, [r7, #32]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	695b      	ldr	r3, [r3, #20]
 8008dd0:	623b      	str	r3, [r7, #32]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	623b      	str	r3, [r7, #32]
 8008dda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	e190      	b.n	8009110 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d11b      	bne.n	8008e2e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e06:	2300      	movs	r3, #0
 8008e08:	61fb      	str	r3, [r7, #28]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	695b      	ldr	r3, [r3, #20]
 8008e10:	61fb      	str	r3, [r7, #28]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	61fb      	str	r3, [r7, #28]
 8008e1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e2a:	601a      	str	r2, [r3, #0]
 8008e2c:	e170      	b.n	8009110 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d11b      	bne.n	8008e6e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e56:	2300      	movs	r3, #0
 8008e58:	61bb      	str	r3, [r7, #24]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	695b      	ldr	r3, [r3, #20]
 8008e60:	61bb      	str	r3, [r7, #24]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	61bb      	str	r3, [r7, #24]
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	e150      	b.n	8009110 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e6e:	2300      	movs	r3, #0
 8008e70:	617b      	str	r3, [r7, #20]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	617b      	str	r3, [r7, #20]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	617b      	str	r3, [r7, #20]
 8008e82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008e84:	e144      	b.n	8009110 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	f200 80f1 	bhi.w	8009072 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d123      	bne.n	8008ee0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f000 fc79 	bl	8009794 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d001      	beq.n	8008eac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e145      	b.n	8009138 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	691a      	ldr	r2, [r3, #16]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eb6:	b2d2      	uxtb	r2, r2
 8008eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ebe:	1c5a      	adds	r2, r3, #1
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008ede:	e117      	b.n	8009110 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d14e      	bne.n	8008f86 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eee:	2200      	movs	r2, #0
 8008ef0:	4906      	ldr	r1, [pc, #24]	@ (8008f0c <HAL_I2C_Mem_Read+0x22c>)
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f000 faa4 	bl	8009440 <I2C_WaitOnFlagUntilTimeout>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d008      	beq.n	8008f10 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	e11a      	b.n	8009138 <HAL_I2C_Mem_Read+0x458>
 8008f02:	bf00      	nop
 8008f04:	00100002 	.word	0x00100002
 8008f08:	ffff0000 	.word	0xffff0000
 8008f0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	691a      	ldr	r2, [r3, #16]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f2a:	b2d2      	uxtb	r2, r2
 8008f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f32:	1c5a      	adds	r2, r3, #1
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	b29a      	uxth	r2, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	691a      	ldr	r2, [r3, #16]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f5c:	b2d2      	uxtb	r2, r2
 8008f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f64:	1c5a      	adds	r2, r3, #1
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008f84:	e0c4      	b.n	8009110 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	496c      	ldr	r1, [pc, #432]	@ (8009140 <HAL_I2C_Mem_Read+0x460>)
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f000 fa55 	bl	8009440 <I2C_WaitOnFlagUntilTimeout>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e0cb      	b.n	8009138 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008fae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	691a      	ldr	r2, [r3, #16]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fba:	b2d2      	uxtb	r2, r2
 8008fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc2:	1c5a      	adds	r2, r3, #1
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe8:	2200      	movs	r2, #0
 8008fea:	4955      	ldr	r1, [pc, #340]	@ (8009140 <HAL_I2C_Mem_Read+0x460>)
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f000 fa27 	bl	8009440 <I2C_WaitOnFlagUntilTimeout>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d001      	beq.n	8008ffc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e09d      	b.n	8009138 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800900a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	691a      	ldr	r2, [r3, #16]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009016:	b2d2      	uxtb	r2, r2
 8009018:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009028:	3b01      	subs	r3, #1
 800902a:	b29a      	uxth	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009034:	b29b      	uxth	r3, r3
 8009036:	3b01      	subs	r3, #1
 8009038:	b29a      	uxth	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	691a      	ldr	r2, [r3, #16]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009048:	b2d2      	uxtb	r2, r2
 800904a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009050:	1c5a      	adds	r2, r3, #1
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800905a:	3b01      	subs	r3, #1
 800905c:	b29a      	uxth	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009066:	b29b      	uxth	r3, r3
 8009068:	3b01      	subs	r3, #1
 800906a:	b29a      	uxth	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009070:	e04e      	b.n	8009110 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009074:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f000 fb8c 	bl	8009794 <I2C_WaitOnRXNEFlagUntilTimeout>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e058      	b.n	8009138 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	691a      	ldr	r2, [r3, #16]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009090:	b2d2      	uxtb	r2, r2
 8009092:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009098:	1c5a      	adds	r2, r3, #1
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090a2:	3b01      	subs	r3, #1
 80090a4:	b29a      	uxth	r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	3b01      	subs	r3, #1
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	695b      	ldr	r3, [r3, #20]
 80090be:	f003 0304 	and.w	r3, r3, #4
 80090c2:	2b04      	cmp	r3, #4
 80090c4:	d124      	bne.n	8009110 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090ca:	2b03      	cmp	r3, #3
 80090cc:	d107      	bne.n	80090de <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090dc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	691a      	ldr	r2, [r3, #16]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e8:	b2d2      	uxtb	r2, r2
 80090ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f0:	1c5a      	adds	r2, r3, #1
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090fa:	3b01      	subs	r3, #1
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009106:	b29b      	uxth	r3, r3
 8009108:	3b01      	subs	r3, #1
 800910a:	b29a      	uxth	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009114:	2b00      	cmp	r3, #0
 8009116:	f47f aeb6 	bne.w	8008e86 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2220      	movs	r2, #32
 800911e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	e000      	b.n	8009138 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009136:	2302      	movs	r3, #2
  }
}
 8009138:	4618      	mov	r0, r3
 800913a:	3728      	adds	r7, #40	@ 0x28
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	00010004 	.word	0x00010004

08009144 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b088      	sub	sp, #32
 8009148:	af02      	add	r7, sp, #8
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	4608      	mov	r0, r1
 800914e:	4611      	mov	r1, r2
 8009150:	461a      	mov	r2, r3
 8009152:	4603      	mov	r3, r0
 8009154:	817b      	strh	r3, [r7, #10]
 8009156:	460b      	mov	r3, r1
 8009158:	813b      	strh	r3, [r7, #8]
 800915a:	4613      	mov	r3, r2
 800915c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800916c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800916e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	6a3b      	ldr	r3, [r7, #32]
 8009174:	2200      	movs	r2, #0
 8009176:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f000 f960 	bl	8009440 <I2C_WaitOnFlagUntilTimeout>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00d      	beq.n	80091a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009190:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009194:	d103      	bne.n	800919e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800919c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	e05f      	b.n	8009262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80091a2:	897b      	ldrh	r3, [r7, #10]
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	461a      	mov	r2, r3
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80091b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b4:	6a3a      	ldr	r2, [r7, #32]
 80091b6:	492d      	ldr	r1, [pc, #180]	@ (800926c <I2C_RequestMemoryWrite+0x128>)
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 f9bb 	bl	8009534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e04c      	b.n	8009262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091c8:	2300      	movs	r3, #0
 80091ca:	617b      	str	r3, [r7, #20]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	617b      	str	r3, [r7, #20]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	617b      	str	r3, [r7, #20]
 80091dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091e0:	6a39      	ldr	r1, [r7, #32]
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f000 fa46 	bl	8009674 <I2C_WaitOnTXEFlagUntilTimeout>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00d      	beq.n	800920a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091f2:	2b04      	cmp	r3, #4
 80091f4:	d107      	bne.n	8009206 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009204:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	e02b      	b.n	8009262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800920a:	88fb      	ldrh	r3, [r7, #6]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d105      	bne.n	800921c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009210:	893b      	ldrh	r3, [r7, #8]
 8009212:	b2da      	uxtb	r2, r3
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	611a      	str	r2, [r3, #16]
 800921a:	e021      	b.n	8009260 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800921c:	893b      	ldrh	r3, [r7, #8]
 800921e:	0a1b      	lsrs	r3, r3, #8
 8009220:	b29b      	uxth	r3, r3
 8009222:	b2da      	uxtb	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800922a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800922c:	6a39      	ldr	r1, [r7, #32]
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f000 fa20 	bl	8009674 <I2C_WaitOnTXEFlagUntilTimeout>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00d      	beq.n	8009256 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800923e:	2b04      	cmp	r3, #4
 8009240:	d107      	bne.n	8009252 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009250:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e005      	b.n	8009262 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009256:	893b      	ldrh	r3, [r7, #8]
 8009258:	b2da      	uxtb	r2, r3
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3718      	adds	r7, #24
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	00010002 	.word	0x00010002

08009270 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b088      	sub	sp, #32
 8009274:	af02      	add	r7, sp, #8
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	4608      	mov	r0, r1
 800927a:	4611      	mov	r1, r2
 800927c:	461a      	mov	r2, r3
 800927e:	4603      	mov	r3, r0
 8009280:	817b      	strh	r3, [r7, #10]
 8009282:	460b      	mov	r3, r1
 8009284:	813b      	strh	r3, [r7, #8]
 8009286:	4613      	mov	r3, r2
 8009288:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009298:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80092a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80092aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	6a3b      	ldr	r3, [r7, #32]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f000 f8c2 	bl	8009440 <I2C_WaitOnFlagUntilTimeout>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00d      	beq.n	80092de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092d0:	d103      	bne.n	80092da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e0aa      	b.n	8009434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80092de:	897b      	ldrh	r3, [r7, #10]
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	461a      	mov	r2, r3
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80092ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80092ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f0:	6a3a      	ldr	r2, [r7, #32]
 80092f2:	4952      	ldr	r1, [pc, #328]	@ (800943c <I2C_RequestMemoryRead+0x1cc>)
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f000 f91d 	bl	8009534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e097      	b.n	8009434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009304:	2300      	movs	r3, #0
 8009306:	617b      	str	r3, [r7, #20]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	617b      	str	r3, [r7, #20]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	617b      	str	r3, [r7, #20]
 8009318:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800931a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800931c:	6a39      	ldr	r1, [r7, #32]
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f000 f9a8 	bl	8009674 <I2C_WaitOnTXEFlagUntilTimeout>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00d      	beq.n	8009346 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800932e:	2b04      	cmp	r3, #4
 8009330:	d107      	bne.n	8009342 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009340:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e076      	b.n	8009434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009346:	88fb      	ldrh	r3, [r7, #6]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d105      	bne.n	8009358 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800934c:	893b      	ldrh	r3, [r7, #8]
 800934e:	b2da      	uxtb	r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	611a      	str	r2, [r3, #16]
 8009356:	e021      	b.n	800939c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009358:	893b      	ldrh	r3, [r7, #8]
 800935a:	0a1b      	lsrs	r3, r3, #8
 800935c:	b29b      	uxth	r3, r3
 800935e:	b2da      	uxtb	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009368:	6a39      	ldr	r1, [r7, #32]
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	f000 f982 	bl	8009674 <I2C_WaitOnTXEFlagUntilTimeout>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00d      	beq.n	8009392 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800937a:	2b04      	cmp	r3, #4
 800937c:	d107      	bne.n	800938e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800938c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e050      	b.n	8009434 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009392:	893b      	ldrh	r3, [r7, #8]
 8009394:	b2da      	uxtb	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800939c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800939e:	6a39      	ldr	r1, [r7, #32]
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 f967 	bl	8009674 <I2C_WaitOnTXEFlagUntilTimeout>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00d      	beq.n	80093c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093b0:	2b04      	cmp	r3, #4
 80093b2:	d107      	bne.n	80093c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e035      	b.n	8009434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80093d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80093d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	6a3b      	ldr	r3, [r7, #32]
 80093de:	2200      	movs	r2, #0
 80093e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 f82b 	bl	8009440 <I2C_WaitOnFlagUntilTimeout>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00d      	beq.n	800940c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093fe:	d103      	bne.n	8009408 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009406:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	e013      	b.n	8009434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800940c:	897b      	ldrh	r3, [r7, #10]
 800940e:	b2db      	uxtb	r3, r3
 8009410:	f043 0301 	orr.w	r3, r3, #1
 8009414:	b2da      	uxtb	r2, r3
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800941c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941e:	6a3a      	ldr	r2, [r7, #32]
 8009420:	4906      	ldr	r1, [pc, #24]	@ (800943c <I2C_RequestMemoryRead+0x1cc>)
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f000 f886 	bl	8009534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e000      	b.n	8009434 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3718      	adds	r7, #24
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	00010002 	.word	0x00010002

08009440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	603b      	str	r3, [r7, #0]
 800944c:	4613      	mov	r3, r2
 800944e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009450:	e048      	b.n	80094e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009458:	d044      	beq.n	80094e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800945a:	f7fe f9a3 	bl	80077a4 <HAL_GetTick>
 800945e:	4602      	mov	r2, r0
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	429a      	cmp	r2, r3
 8009468:	d302      	bcc.n	8009470 <I2C_WaitOnFlagUntilTimeout+0x30>
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d139      	bne.n	80094e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	0c1b      	lsrs	r3, r3, #16
 8009474:	b2db      	uxtb	r3, r3
 8009476:	2b01      	cmp	r3, #1
 8009478:	d10d      	bne.n	8009496 <I2C_WaitOnFlagUntilTimeout+0x56>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	695b      	ldr	r3, [r3, #20]
 8009480:	43da      	mvns	r2, r3
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	4013      	ands	r3, r2
 8009486:	b29b      	uxth	r3, r3
 8009488:	2b00      	cmp	r3, #0
 800948a:	bf0c      	ite	eq
 800948c:	2301      	moveq	r3, #1
 800948e:	2300      	movne	r3, #0
 8009490:	b2db      	uxtb	r3, r3
 8009492:	461a      	mov	r2, r3
 8009494:	e00c      	b.n	80094b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	43da      	mvns	r2, r3
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	4013      	ands	r3, r2
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	bf0c      	ite	eq
 80094a8:	2301      	moveq	r3, #1
 80094aa:	2300      	movne	r3, #0
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	461a      	mov	r2, r3
 80094b0:	79fb      	ldrb	r3, [r7, #7]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d116      	bne.n	80094e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2220      	movs	r2, #32
 80094c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094d0:	f043 0220 	orr.w	r2, r3, #32
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e023      	b.n	800952c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	0c1b      	lsrs	r3, r3, #16
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d10d      	bne.n	800950a <I2C_WaitOnFlagUntilTimeout+0xca>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	43da      	mvns	r2, r3
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	4013      	ands	r3, r2
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	bf0c      	ite	eq
 8009500:	2301      	moveq	r3, #1
 8009502:	2300      	movne	r3, #0
 8009504:	b2db      	uxtb	r3, r3
 8009506:	461a      	mov	r2, r3
 8009508:	e00c      	b.n	8009524 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	43da      	mvns	r2, r3
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	4013      	ands	r3, r2
 8009516:	b29b      	uxth	r3, r3
 8009518:	2b00      	cmp	r3, #0
 800951a:	bf0c      	ite	eq
 800951c:	2301      	moveq	r3, #1
 800951e:	2300      	movne	r3, #0
 8009520:	b2db      	uxtb	r3, r3
 8009522:	461a      	mov	r2, r3
 8009524:	79fb      	ldrb	r3, [r7, #7]
 8009526:	429a      	cmp	r2, r3
 8009528:	d093      	beq.n	8009452 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
 8009540:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009542:	e071      	b.n	8009628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800954e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009552:	d123      	bne.n	800959c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009562:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800956c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2220      	movs	r2, #32
 8009578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009588:	f043 0204 	orr.w	r2, r3, #4
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e067      	b.n	800966c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a2:	d041      	beq.n	8009628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095a4:	f7fe f8fe 	bl	80077a4 <HAL_GetTick>
 80095a8:	4602      	mov	r2, r0
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d302      	bcc.n	80095ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d136      	bne.n	8009628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	0c1b      	lsrs	r3, r3, #16
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d10c      	bne.n	80095de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	43da      	mvns	r2, r3
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	4013      	ands	r3, r2
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	bf14      	ite	ne
 80095d6:	2301      	movne	r3, #1
 80095d8:	2300      	moveq	r3, #0
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	e00b      	b.n	80095f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	43da      	mvns	r2, r3
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	4013      	ands	r3, r2
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	bf14      	ite	ne
 80095f0:	2301      	movne	r3, #1
 80095f2:	2300      	moveq	r3, #0
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d016      	beq.n	8009628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2220      	movs	r2, #32
 8009604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2200      	movs	r2, #0
 800960c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009614:	f043 0220 	orr.w	r2, r3, #32
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e021      	b.n	800966c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	0c1b      	lsrs	r3, r3, #16
 800962c:	b2db      	uxtb	r3, r3
 800962e:	2b01      	cmp	r3, #1
 8009630:	d10c      	bne.n	800964c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	695b      	ldr	r3, [r3, #20]
 8009638:	43da      	mvns	r2, r3
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	4013      	ands	r3, r2
 800963e:	b29b      	uxth	r3, r3
 8009640:	2b00      	cmp	r3, #0
 8009642:	bf14      	ite	ne
 8009644:	2301      	movne	r3, #1
 8009646:	2300      	moveq	r3, #0
 8009648:	b2db      	uxtb	r3, r3
 800964a:	e00b      	b.n	8009664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	43da      	mvns	r2, r3
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	4013      	ands	r3, r2
 8009658:	b29b      	uxth	r3, r3
 800965a:	2b00      	cmp	r3, #0
 800965c:	bf14      	ite	ne
 800965e:	2301      	movne	r3, #1
 8009660:	2300      	moveq	r3, #0
 8009662:	b2db      	uxtb	r3, r3
 8009664:	2b00      	cmp	r3, #0
 8009666:	f47f af6d 	bne.w	8009544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009680:	e034      	b.n	80096ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f000 f8e3 	bl	800984e <I2C_IsAcknowledgeFailed>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d001      	beq.n	8009692 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e034      	b.n	80096fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009698:	d028      	beq.n	80096ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800969a:	f7fe f883 	bl	80077a4 <HAL_GetTick>
 800969e:	4602      	mov	r2, r0
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d302      	bcc.n	80096b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d11d      	bne.n	80096ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	695b      	ldr	r3, [r3, #20]
 80096b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096ba:	2b80      	cmp	r3, #128	@ 0x80
 80096bc:	d016      	beq.n	80096ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2220      	movs	r2, #32
 80096c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096d8:	f043 0220 	orr.w	r2, r3, #32
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	e007      	b.n	80096fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096f6:	2b80      	cmp	r3, #128	@ 0x80
 80096f8:	d1c3      	bne.n	8009682 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009710:	e034      	b.n	800977c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f000 f89b 	bl	800984e <I2C_IsAcknowledgeFailed>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e034      	b.n	800978c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009728:	d028      	beq.n	800977c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800972a:	f7fe f83b 	bl	80077a4 <HAL_GetTick>
 800972e:	4602      	mov	r2, r0
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	429a      	cmp	r2, r3
 8009738:	d302      	bcc.n	8009740 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d11d      	bne.n	800977c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	f003 0304 	and.w	r3, r3, #4
 800974a:	2b04      	cmp	r3, #4
 800974c:	d016      	beq.n	800977c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2200      	movs	r2, #0
 8009752:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2220      	movs	r2, #32
 8009758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2200      	movs	r2, #0
 8009760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009768:	f043 0220 	orr.w	r2, r3, #32
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	e007      	b.n	800978c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	f003 0304 	and.w	r3, r3, #4
 8009786:	2b04      	cmp	r3, #4
 8009788:	d1c3      	bne.n	8009712 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097a0:	e049      	b.n	8009836 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	695b      	ldr	r3, [r3, #20]
 80097a8:	f003 0310 	and.w	r3, r3, #16
 80097ac:	2b10      	cmp	r3, #16
 80097ae:	d119      	bne.n	80097e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f06f 0210 	mvn.w	r2, #16
 80097b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2200      	movs	r2, #0
 80097be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2220      	movs	r2, #32
 80097c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e030      	b.n	8009846 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097e4:	f7fd ffde 	bl	80077a4 <HAL_GetTick>
 80097e8:	4602      	mov	r2, r0
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d302      	bcc.n	80097fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d11d      	bne.n	8009836 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	695b      	ldr	r3, [r3, #20]
 8009800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009804:	2b40      	cmp	r3, #64	@ 0x40
 8009806:	d016      	beq.n	8009836 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2220      	movs	r2, #32
 8009812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009822:	f043 0220 	orr.w	r2, r3, #32
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	e007      	b.n	8009846 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	695b      	ldr	r3, [r3, #20]
 800983c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009840:	2b40      	cmp	r3, #64	@ 0x40
 8009842:	d1ae      	bne.n	80097a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800984e:	b480      	push	{r7}
 8009850:	b083      	sub	sp, #12
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	695b      	ldr	r3, [r3, #20]
 800985c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009864:	d11b      	bne.n	800989e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800986e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2220      	movs	r2, #32
 800987a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800988a:	f043 0204 	orr.w	r2, r3, #4
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e000      	b.n	80098a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d101      	bne.n	80098c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	e0cc      	b.n	8009a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80098c0:	4b68      	ldr	r3, [pc, #416]	@ (8009a64 <HAL_RCC_ClockConfig+0x1b8>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 030f 	and.w	r3, r3, #15
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d90c      	bls.n	80098e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098ce:	4b65      	ldr	r3, [pc, #404]	@ (8009a64 <HAL_RCC_ClockConfig+0x1b8>)
 80098d0:	683a      	ldr	r2, [r7, #0]
 80098d2:	b2d2      	uxtb	r2, r2
 80098d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80098d6:	4b63      	ldr	r3, [pc, #396]	@ (8009a64 <HAL_RCC_ClockConfig+0x1b8>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 030f 	and.w	r3, r3, #15
 80098de:	683a      	ldr	r2, [r7, #0]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d001      	beq.n	80098e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	e0b8      	b.n	8009a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 0302 	and.w	r3, r3, #2
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d020      	beq.n	8009936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f003 0304 	and.w	r3, r3, #4
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d005      	beq.n	800990c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009900:	4b59      	ldr	r3, [pc, #356]	@ (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	4a58      	ldr	r2, [pc, #352]	@ (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 8009906:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800990a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 0308 	and.w	r3, r3, #8
 8009914:	2b00      	cmp	r3, #0
 8009916:	d005      	beq.n	8009924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009918:	4b53      	ldr	r3, [pc, #332]	@ (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	4a52      	ldr	r2, [pc, #328]	@ (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 800991e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009924:	4b50      	ldr	r3, [pc, #320]	@ (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	494d      	ldr	r1, [pc, #308]	@ (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 8009932:	4313      	orrs	r3, r2
 8009934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	2b00      	cmp	r3, #0
 8009940:	d044      	beq.n	80099cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	2b01      	cmp	r3, #1
 8009948:	d107      	bne.n	800995a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800994a:	4b47      	ldr	r3, [pc, #284]	@ (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009952:	2b00      	cmp	r3, #0
 8009954:	d119      	bne.n	800998a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e07f      	b.n	8009a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	2b02      	cmp	r3, #2
 8009960:	d003      	beq.n	800996a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009966:	2b03      	cmp	r3, #3
 8009968:	d107      	bne.n	800997a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800996a:	4b3f      	ldr	r3, [pc, #252]	@ (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009972:	2b00      	cmp	r3, #0
 8009974:	d109      	bne.n	800998a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e06f      	b.n	8009a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800997a:	4b3b      	ldr	r3, [pc, #236]	@ (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f003 0302 	and.w	r3, r3, #2
 8009982:	2b00      	cmp	r3, #0
 8009984:	d101      	bne.n	800998a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e067      	b.n	8009a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800998a:	4b37      	ldr	r3, [pc, #220]	@ (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	f023 0203 	bic.w	r2, r3, #3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	4934      	ldr	r1, [pc, #208]	@ (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 8009998:	4313      	orrs	r3, r2
 800999a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800999c:	f7fd ff02 	bl	80077a4 <HAL_GetTick>
 80099a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099a2:	e00a      	b.n	80099ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099a4:	f7fd fefe 	bl	80077a4 <HAL_GetTick>
 80099a8:	4602      	mov	r2, r0
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d901      	bls.n	80099ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e04f      	b.n	8009a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099ba:	4b2b      	ldr	r3, [pc, #172]	@ (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	f003 020c 	and.w	r2, r3, #12
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d1eb      	bne.n	80099a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80099cc:	4b25      	ldr	r3, [pc, #148]	@ (8009a64 <HAL_RCC_ClockConfig+0x1b8>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 030f 	and.w	r3, r3, #15
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d20c      	bcs.n	80099f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099da:	4b22      	ldr	r3, [pc, #136]	@ (8009a64 <HAL_RCC_ClockConfig+0x1b8>)
 80099dc:	683a      	ldr	r2, [r7, #0]
 80099de:	b2d2      	uxtb	r2, r2
 80099e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099e2:	4b20      	ldr	r3, [pc, #128]	@ (8009a64 <HAL_RCC_ClockConfig+0x1b8>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 030f 	and.w	r3, r3, #15
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d001      	beq.n	80099f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e032      	b.n	8009a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 0304 	and.w	r3, r3, #4
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d008      	beq.n	8009a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009a00:	4b19      	ldr	r3, [pc, #100]	@ (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	4916      	ldr	r1, [pc, #88]	@ (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 0308 	and.w	r3, r3, #8
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d009      	beq.n	8009a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009a1e:	4b12      	ldr	r3, [pc, #72]	@ (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	00db      	lsls	r3, r3, #3
 8009a2c:	490e      	ldr	r1, [pc, #56]	@ (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009a32:	f000 f855 	bl	8009ae0 <HAL_RCC_GetSysClockFreq>
 8009a36:	4602      	mov	r2, r0
 8009a38:	4b0b      	ldr	r3, [pc, #44]	@ (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	091b      	lsrs	r3, r3, #4
 8009a3e:	f003 030f 	and.w	r3, r3, #15
 8009a42:	490a      	ldr	r1, [pc, #40]	@ (8009a6c <HAL_RCC_ClockConfig+0x1c0>)
 8009a44:	5ccb      	ldrb	r3, [r1, r3]
 8009a46:	fa22 f303 	lsr.w	r3, r2, r3
 8009a4a:	4a09      	ldr	r2, [pc, #36]	@ (8009a70 <HAL_RCC_ClockConfig+0x1c4>)
 8009a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009a4e:	4b09      	ldr	r3, [pc, #36]	@ (8009a74 <HAL_RCC_ClockConfig+0x1c8>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7fd fe62 	bl	800771c <HAL_InitTick>

  return HAL_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	40023c00 	.word	0x40023c00
 8009a68:	40023800 	.word	0x40023800
 8009a6c:	08011428 	.word	0x08011428
 8009a70:	20000040 	.word	0x20000040
 8009a74:	20000044 	.word	0x20000044

08009a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a7c:	4b03      	ldr	r3, [pc, #12]	@ (8009a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	20000040 	.word	0x20000040

08009a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009a94:	f7ff fff0 	bl	8009a78 <HAL_RCC_GetHCLKFreq>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	4b05      	ldr	r3, [pc, #20]	@ (8009ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	0a9b      	lsrs	r3, r3, #10
 8009aa0:	f003 0307 	and.w	r3, r3, #7
 8009aa4:	4903      	ldr	r1, [pc, #12]	@ (8009ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009aa6:	5ccb      	ldrb	r3, [r1, r3]
 8009aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	40023800 	.word	0x40023800
 8009ab4:	08011438 	.word	0x08011438

08009ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009abc:	f7ff ffdc 	bl	8009a78 <HAL_RCC_GetHCLKFreq>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	4b05      	ldr	r3, [pc, #20]	@ (8009ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	0b5b      	lsrs	r3, r3, #13
 8009ac8:	f003 0307 	and.w	r3, r3, #7
 8009acc:	4903      	ldr	r1, [pc, #12]	@ (8009adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8009ace:	5ccb      	ldrb	r3, [r1, r3]
 8009ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	40023800 	.word	0x40023800
 8009adc:	08011438 	.word	0x08011438

08009ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ae4:	b0ae      	sub	sp, #184	@ 0xb8
 8009ae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8009aee:	2300      	movs	r3, #0
 8009af0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8009af4:	2300      	movs	r3, #0
 8009af6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8009afa:	2300      	movs	r3, #0
 8009afc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8009b00:	2300      	movs	r3, #0
 8009b02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009b06:	4bcb      	ldr	r3, [pc, #812]	@ (8009e34 <HAL_RCC_GetSysClockFreq+0x354>)
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	f003 030c 	and.w	r3, r3, #12
 8009b0e:	2b0c      	cmp	r3, #12
 8009b10:	f200 8206 	bhi.w	8009f20 <HAL_RCC_GetSysClockFreq+0x440>
 8009b14:	a201      	add	r2, pc, #4	@ (adr r2, 8009b1c <HAL_RCC_GetSysClockFreq+0x3c>)
 8009b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1a:	bf00      	nop
 8009b1c:	08009b51 	.word	0x08009b51
 8009b20:	08009f21 	.word	0x08009f21
 8009b24:	08009f21 	.word	0x08009f21
 8009b28:	08009f21 	.word	0x08009f21
 8009b2c:	08009b59 	.word	0x08009b59
 8009b30:	08009f21 	.word	0x08009f21
 8009b34:	08009f21 	.word	0x08009f21
 8009b38:	08009f21 	.word	0x08009f21
 8009b3c:	08009b61 	.word	0x08009b61
 8009b40:	08009f21 	.word	0x08009f21
 8009b44:	08009f21 	.word	0x08009f21
 8009b48:	08009f21 	.word	0x08009f21
 8009b4c:	08009d51 	.word	0x08009d51
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009b50:	4bb9      	ldr	r3, [pc, #740]	@ (8009e38 <HAL_RCC_GetSysClockFreq+0x358>)
 8009b52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009b56:	e1e7      	b.n	8009f28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009b58:	4bb8      	ldr	r3, [pc, #736]	@ (8009e3c <HAL_RCC_GetSysClockFreq+0x35c>)
 8009b5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009b5e:	e1e3      	b.n	8009f28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009b60:	4bb4      	ldr	r3, [pc, #720]	@ (8009e34 <HAL_RCC_GetSysClockFreq+0x354>)
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009b6c:	4bb1      	ldr	r3, [pc, #708]	@ (8009e34 <HAL_RCC_GetSysClockFreq+0x354>)
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d071      	beq.n	8009c5c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b78:	4bae      	ldr	r3, [pc, #696]	@ (8009e34 <HAL_RCC_GetSysClockFreq+0x354>)
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	099b      	lsrs	r3, r3, #6
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009b84:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8009b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009b94:	2300      	movs	r3, #0
 8009b96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009b9e:	4622      	mov	r2, r4
 8009ba0:	462b      	mov	r3, r5
 8009ba2:	f04f 0000 	mov.w	r0, #0
 8009ba6:	f04f 0100 	mov.w	r1, #0
 8009baa:	0159      	lsls	r1, r3, #5
 8009bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009bb0:	0150      	lsls	r0, r2, #5
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	4621      	mov	r1, r4
 8009bb8:	1a51      	subs	r1, r2, r1
 8009bba:	6439      	str	r1, [r7, #64]	@ 0x40
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8009bc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bc4:	f04f 0200 	mov.w	r2, #0
 8009bc8:	f04f 0300 	mov.w	r3, #0
 8009bcc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8009bd0:	4649      	mov	r1, r9
 8009bd2:	018b      	lsls	r3, r1, #6
 8009bd4:	4641      	mov	r1, r8
 8009bd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009bda:	4641      	mov	r1, r8
 8009bdc:	018a      	lsls	r2, r1, #6
 8009bde:	4641      	mov	r1, r8
 8009be0:	1a51      	subs	r1, r2, r1
 8009be2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009be4:	4649      	mov	r1, r9
 8009be6:	eb63 0301 	sbc.w	r3, r3, r1
 8009bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bec:	f04f 0200 	mov.w	r2, #0
 8009bf0:	f04f 0300 	mov.w	r3, #0
 8009bf4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8009bf8:	4649      	mov	r1, r9
 8009bfa:	00cb      	lsls	r3, r1, #3
 8009bfc:	4641      	mov	r1, r8
 8009bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c02:	4641      	mov	r1, r8
 8009c04:	00ca      	lsls	r2, r1, #3
 8009c06:	4610      	mov	r0, r2
 8009c08:	4619      	mov	r1, r3
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	4622      	mov	r2, r4
 8009c0e:	189b      	adds	r3, r3, r2
 8009c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c12:	462b      	mov	r3, r5
 8009c14:	460a      	mov	r2, r1
 8009c16:	eb42 0303 	adc.w	r3, r2, r3
 8009c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c1c:	f04f 0200 	mov.w	r2, #0
 8009c20:	f04f 0300 	mov.w	r3, #0
 8009c24:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009c28:	4629      	mov	r1, r5
 8009c2a:	024b      	lsls	r3, r1, #9
 8009c2c:	4621      	mov	r1, r4
 8009c2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009c32:	4621      	mov	r1, r4
 8009c34:	024a      	lsls	r2, r1, #9
 8009c36:	4610      	mov	r0, r2
 8009c38:	4619      	mov	r1, r3
 8009c3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009c48:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009c4c:	f7f7 f97a 	bl	8000f44 <__aeabi_uldivmod>
 8009c50:	4602      	mov	r2, r0
 8009c52:	460b      	mov	r3, r1
 8009c54:	4613      	mov	r3, r2
 8009c56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c5a:	e067      	b.n	8009d2c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c5c:	4b75      	ldr	r3, [pc, #468]	@ (8009e34 <HAL_RCC_GetSysClockFreq+0x354>)
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	099b      	lsrs	r3, r3, #6
 8009c62:	2200      	movs	r2, #0
 8009c64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c68:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8009c6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c76:	2300      	movs	r3, #0
 8009c78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c7a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8009c7e:	4622      	mov	r2, r4
 8009c80:	462b      	mov	r3, r5
 8009c82:	f04f 0000 	mov.w	r0, #0
 8009c86:	f04f 0100 	mov.w	r1, #0
 8009c8a:	0159      	lsls	r1, r3, #5
 8009c8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009c90:	0150      	lsls	r0, r2, #5
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	4621      	mov	r1, r4
 8009c98:	1a51      	subs	r1, r2, r1
 8009c9a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	eb63 0301 	sbc.w	r3, r3, r1
 8009ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ca4:	f04f 0200 	mov.w	r2, #0
 8009ca8:	f04f 0300 	mov.w	r3, #0
 8009cac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8009cb0:	4649      	mov	r1, r9
 8009cb2:	018b      	lsls	r3, r1, #6
 8009cb4:	4641      	mov	r1, r8
 8009cb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009cba:	4641      	mov	r1, r8
 8009cbc:	018a      	lsls	r2, r1, #6
 8009cbe:	4641      	mov	r1, r8
 8009cc0:	ebb2 0a01 	subs.w	sl, r2, r1
 8009cc4:	4649      	mov	r1, r9
 8009cc6:	eb63 0b01 	sbc.w	fp, r3, r1
 8009cca:	f04f 0200 	mov.w	r2, #0
 8009cce:	f04f 0300 	mov.w	r3, #0
 8009cd2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009cd6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009cda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009cde:	4692      	mov	sl, r2
 8009ce0:	469b      	mov	fp, r3
 8009ce2:	4623      	mov	r3, r4
 8009ce4:	eb1a 0303 	adds.w	r3, sl, r3
 8009ce8:	623b      	str	r3, [r7, #32]
 8009cea:	462b      	mov	r3, r5
 8009cec:	eb4b 0303 	adc.w	r3, fp, r3
 8009cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cf2:	f04f 0200 	mov.w	r2, #0
 8009cf6:	f04f 0300 	mov.w	r3, #0
 8009cfa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009cfe:	4629      	mov	r1, r5
 8009d00:	028b      	lsls	r3, r1, #10
 8009d02:	4621      	mov	r1, r4
 8009d04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009d08:	4621      	mov	r1, r4
 8009d0a:	028a      	lsls	r2, r1, #10
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	4619      	mov	r1, r3
 8009d10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d14:	2200      	movs	r2, #0
 8009d16:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d18:	677a      	str	r2, [r7, #116]	@ 0x74
 8009d1a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8009d1e:	f7f7 f911 	bl	8000f44 <__aeabi_uldivmod>
 8009d22:	4602      	mov	r2, r0
 8009d24:	460b      	mov	r3, r1
 8009d26:	4613      	mov	r3, r2
 8009d28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009d2c:	4b41      	ldr	r3, [pc, #260]	@ (8009e34 <HAL_RCC_GetSysClockFreq+0x354>)
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	0c1b      	lsrs	r3, r3, #16
 8009d32:	f003 0303 	and.w	r3, r3, #3
 8009d36:	3301      	adds	r3, #1
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8009d3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009d42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009d4e:	e0eb      	b.n	8009f28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009d50:	4b38      	ldr	r3, [pc, #224]	@ (8009e34 <HAL_RCC_GetSysClockFreq+0x354>)
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d5c:	4b35      	ldr	r3, [pc, #212]	@ (8009e34 <HAL_RCC_GetSysClockFreq+0x354>)
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d06b      	beq.n	8009e40 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d68:	4b32      	ldr	r3, [pc, #200]	@ (8009e34 <HAL_RCC_GetSysClockFreq+0x354>)
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	099b      	lsrs	r3, r3, #6
 8009d6e:	2200      	movs	r2, #0
 8009d70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009d74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009d80:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8009d84:	4622      	mov	r2, r4
 8009d86:	462b      	mov	r3, r5
 8009d88:	f04f 0000 	mov.w	r0, #0
 8009d8c:	f04f 0100 	mov.w	r1, #0
 8009d90:	0159      	lsls	r1, r3, #5
 8009d92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009d96:	0150      	lsls	r0, r2, #5
 8009d98:	4602      	mov	r2, r0
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	4621      	mov	r1, r4
 8009d9e:	1a51      	subs	r1, r2, r1
 8009da0:	61b9      	str	r1, [r7, #24]
 8009da2:	4629      	mov	r1, r5
 8009da4:	eb63 0301 	sbc.w	r3, r3, r1
 8009da8:	61fb      	str	r3, [r7, #28]
 8009daa:	f04f 0200 	mov.w	r2, #0
 8009dae:	f04f 0300 	mov.w	r3, #0
 8009db2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8009db6:	4659      	mov	r1, fp
 8009db8:	018b      	lsls	r3, r1, #6
 8009dba:	4651      	mov	r1, sl
 8009dbc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009dc0:	4651      	mov	r1, sl
 8009dc2:	018a      	lsls	r2, r1, #6
 8009dc4:	4651      	mov	r1, sl
 8009dc6:	ebb2 0801 	subs.w	r8, r2, r1
 8009dca:	4659      	mov	r1, fp
 8009dcc:	eb63 0901 	sbc.w	r9, r3, r1
 8009dd0:	f04f 0200 	mov.w	r2, #0
 8009dd4:	f04f 0300 	mov.w	r3, #0
 8009dd8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ddc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009de0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009de4:	4690      	mov	r8, r2
 8009de6:	4699      	mov	r9, r3
 8009de8:	4623      	mov	r3, r4
 8009dea:	eb18 0303 	adds.w	r3, r8, r3
 8009dee:	613b      	str	r3, [r7, #16]
 8009df0:	462b      	mov	r3, r5
 8009df2:	eb49 0303 	adc.w	r3, r9, r3
 8009df6:	617b      	str	r3, [r7, #20]
 8009df8:	f04f 0200 	mov.w	r2, #0
 8009dfc:	f04f 0300 	mov.w	r3, #0
 8009e00:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009e04:	4629      	mov	r1, r5
 8009e06:	024b      	lsls	r3, r1, #9
 8009e08:	4621      	mov	r1, r4
 8009e0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009e0e:	4621      	mov	r1, r4
 8009e10:	024a      	lsls	r2, r1, #9
 8009e12:	4610      	mov	r0, r2
 8009e14:	4619      	mov	r1, r3
 8009e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e1e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8009e20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009e24:	f7f7 f88e 	bl	8000f44 <__aeabi_uldivmod>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e32:	e065      	b.n	8009f00 <HAL_RCC_GetSysClockFreq+0x420>
 8009e34:	40023800 	.word	0x40023800
 8009e38:	00f42400 	.word	0x00f42400
 8009e3c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e40:	4b3d      	ldr	r3, [pc, #244]	@ (8009f38 <HAL_RCC_GetSysClockFreq+0x458>)
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	099b      	lsrs	r3, r3, #6
 8009e46:	2200      	movs	r2, #0
 8009e48:	4618      	mov	r0, r3
 8009e4a:	4611      	mov	r1, r2
 8009e4c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009e50:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e52:	2300      	movs	r3, #0
 8009e54:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e56:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8009e5a:	4642      	mov	r2, r8
 8009e5c:	464b      	mov	r3, r9
 8009e5e:	f04f 0000 	mov.w	r0, #0
 8009e62:	f04f 0100 	mov.w	r1, #0
 8009e66:	0159      	lsls	r1, r3, #5
 8009e68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e6c:	0150      	lsls	r0, r2, #5
 8009e6e:	4602      	mov	r2, r0
 8009e70:	460b      	mov	r3, r1
 8009e72:	4641      	mov	r1, r8
 8009e74:	1a51      	subs	r1, r2, r1
 8009e76:	60b9      	str	r1, [r7, #8]
 8009e78:	4649      	mov	r1, r9
 8009e7a:	eb63 0301 	sbc.w	r3, r3, r1
 8009e7e:	60fb      	str	r3, [r7, #12]
 8009e80:	f04f 0200 	mov.w	r2, #0
 8009e84:	f04f 0300 	mov.w	r3, #0
 8009e88:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009e8c:	4659      	mov	r1, fp
 8009e8e:	018b      	lsls	r3, r1, #6
 8009e90:	4651      	mov	r1, sl
 8009e92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009e96:	4651      	mov	r1, sl
 8009e98:	018a      	lsls	r2, r1, #6
 8009e9a:	4651      	mov	r1, sl
 8009e9c:	1a54      	subs	r4, r2, r1
 8009e9e:	4659      	mov	r1, fp
 8009ea0:	eb63 0501 	sbc.w	r5, r3, r1
 8009ea4:	f04f 0200 	mov.w	r2, #0
 8009ea8:	f04f 0300 	mov.w	r3, #0
 8009eac:	00eb      	lsls	r3, r5, #3
 8009eae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009eb2:	00e2      	lsls	r2, r4, #3
 8009eb4:	4614      	mov	r4, r2
 8009eb6:	461d      	mov	r5, r3
 8009eb8:	4643      	mov	r3, r8
 8009eba:	18e3      	adds	r3, r4, r3
 8009ebc:	603b      	str	r3, [r7, #0]
 8009ebe:	464b      	mov	r3, r9
 8009ec0:	eb45 0303 	adc.w	r3, r5, r3
 8009ec4:	607b      	str	r3, [r7, #4]
 8009ec6:	f04f 0200 	mov.w	r2, #0
 8009eca:	f04f 0300 	mov.w	r3, #0
 8009ece:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009ed2:	4629      	mov	r1, r5
 8009ed4:	028b      	lsls	r3, r1, #10
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009edc:	4621      	mov	r1, r4
 8009ede:	028a      	lsls	r2, r1, #10
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ee8:	2200      	movs	r2, #0
 8009eea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009eec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009eee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009ef2:	f7f7 f827 	bl	8000f44 <__aeabi_uldivmod>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	460b      	mov	r3, r1
 8009efa:	4613      	mov	r3, r2
 8009efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009f00:	4b0d      	ldr	r3, [pc, #52]	@ (8009f38 <HAL_RCC_GetSysClockFreq+0x458>)
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	0f1b      	lsrs	r3, r3, #28
 8009f06:	f003 0307 	and.w	r3, r3, #7
 8009f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8009f0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009f12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009f1e:	e003      	b.n	8009f28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009f20:	4b06      	ldr	r3, [pc, #24]	@ (8009f3c <HAL_RCC_GetSysClockFreq+0x45c>)
 8009f22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009f26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009f28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	37b8      	adds	r7, #184	@ 0xb8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f36:	bf00      	nop
 8009f38:	40023800 	.word	0x40023800
 8009f3c:	00f42400 	.word	0x00f42400

08009f40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e28d      	b.n	800a46e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0301 	and.w	r3, r3, #1
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f000 8083 	beq.w	800a066 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009f60:	4b94      	ldr	r3, [pc, #592]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	f003 030c 	and.w	r3, r3, #12
 8009f68:	2b04      	cmp	r3, #4
 8009f6a:	d019      	beq.n	8009fa0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8009f6c:	4b91      	ldr	r3, [pc, #580]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	f003 030c 	and.w	r3, r3, #12
        || \
 8009f74:	2b08      	cmp	r3, #8
 8009f76:	d106      	bne.n	8009f86 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8009f78:	4b8e      	ldr	r3, [pc, #568]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f84:	d00c      	beq.n	8009fa0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f86:	4b8b      	ldr	r3, [pc, #556]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8009f8e:	2b0c      	cmp	r3, #12
 8009f90:	d112      	bne.n	8009fb8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f92:	4b88      	ldr	r3, [pc, #544]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f9e:	d10b      	bne.n	8009fb8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fa0:	4b84      	ldr	r3, [pc, #528]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d05b      	beq.n	800a064 <HAL_RCC_OscConfig+0x124>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d157      	bne.n	800a064 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e25a      	b.n	800a46e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fc0:	d106      	bne.n	8009fd0 <HAL_RCC_OscConfig+0x90>
 8009fc2:	4b7c      	ldr	r3, [pc, #496]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a7b      	ldr	r2, [pc, #492]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 8009fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009fcc:	6013      	str	r3, [r2, #0]
 8009fce:	e01d      	b.n	800a00c <HAL_RCC_OscConfig+0xcc>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009fd8:	d10c      	bne.n	8009ff4 <HAL_RCC_OscConfig+0xb4>
 8009fda:	4b76      	ldr	r3, [pc, #472]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a75      	ldr	r2, [pc, #468]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 8009fe0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009fe4:	6013      	str	r3, [r2, #0]
 8009fe6:	4b73      	ldr	r3, [pc, #460]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a72      	ldr	r2, [pc, #456]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 8009fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ff0:	6013      	str	r3, [r2, #0]
 8009ff2:	e00b      	b.n	800a00c <HAL_RCC_OscConfig+0xcc>
 8009ff4:	4b6f      	ldr	r3, [pc, #444]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a6e      	ldr	r2, [pc, #440]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 8009ffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ffe:	6013      	str	r3, [r2, #0]
 800a000:	4b6c      	ldr	r3, [pc, #432]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a6b      	ldr	r2, [pc, #428]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 800a006:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a00a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d013      	beq.n	800a03c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a014:	f7fd fbc6 	bl	80077a4 <HAL_GetTick>
 800a018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a01a:	e008      	b.n	800a02e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a01c:	f7fd fbc2 	bl	80077a4 <HAL_GetTick>
 800a020:	4602      	mov	r2, r0
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	1ad3      	subs	r3, r2, r3
 800a026:	2b64      	cmp	r3, #100	@ 0x64
 800a028:	d901      	bls.n	800a02e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a02a:	2303      	movs	r3, #3
 800a02c:	e21f      	b.n	800a46e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a02e:	4b61      	ldr	r3, [pc, #388]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a036:	2b00      	cmp	r3, #0
 800a038:	d0f0      	beq.n	800a01c <HAL_RCC_OscConfig+0xdc>
 800a03a:	e014      	b.n	800a066 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a03c:	f7fd fbb2 	bl	80077a4 <HAL_GetTick>
 800a040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a042:	e008      	b.n	800a056 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a044:	f7fd fbae 	bl	80077a4 <HAL_GetTick>
 800a048:	4602      	mov	r2, r0
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	2b64      	cmp	r3, #100	@ 0x64
 800a050:	d901      	bls.n	800a056 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800a052:	2303      	movs	r3, #3
 800a054:	e20b      	b.n	800a46e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a056:	4b57      	ldr	r3, [pc, #348]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1f0      	bne.n	800a044 <HAL_RCC_OscConfig+0x104>
 800a062:	e000      	b.n	800a066 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f003 0302 	and.w	r3, r3, #2
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d06f      	beq.n	800a152 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a072:	4b50      	ldr	r3, [pc, #320]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	f003 030c 	and.w	r3, r3, #12
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d017      	beq.n	800a0ae <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a07e:	4b4d      	ldr	r3, [pc, #308]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	f003 030c 	and.w	r3, r3, #12
        || \
 800a086:	2b08      	cmp	r3, #8
 800a088:	d105      	bne.n	800a096 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a08a:	4b4a      	ldr	r3, [pc, #296]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00b      	beq.n	800a0ae <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a096:	4b47      	ldr	r3, [pc, #284]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a09e:	2b0c      	cmp	r3, #12
 800a0a0:	d11c      	bne.n	800a0dc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a0a2:	4b44      	ldr	r3, [pc, #272]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d116      	bne.n	800a0dc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a0ae:	4b41      	ldr	r3, [pc, #260]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 0302 	and.w	r3, r3, #2
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d005      	beq.n	800a0c6 <HAL_RCC_OscConfig+0x186>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d001      	beq.n	800a0c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e1d3      	b.n	800a46e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0c6:	4b3b      	ldr	r3, [pc, #236]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	00db      	lsls	r3, r3, #3
 800a0d4:	4937      	ldr	r1, [pc, #220]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a0da:	e03a      	b.n	800a152 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d020      	beq.n	800a126 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a0e4:	4b34      	ldr	r3, [pc, #208]	@ (800a1b8 <HAL_RCC_OscConfig+0x278>)
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0ea:	f7fd fb5b 	bl	80077a4 <HAL_GetTick>
 800a0ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0f0:	e008      	b.n	800a104 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0f2:	f7fd fb57 	bl	80077a4 <HAL_GetTick>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d901      	bls.n	800a104 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800a100:	2303      	movs	r3, #3
 800a102:	e1b4      	b.n	800a46e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a104:	4b2b      	ldr	r3, [pc, #172]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f003 0302 	and.w	r3, r3, #2
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d0f0      	beq.n	800a0f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a110:	4b28      	ldr	r3, [pc, #160]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	00db      	lsls	r3, r3, #3
 800a11e:	4925      	ldr	r1, [pc, #148]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 800a120:	4313      	orrs	r3, r2
 800a122:	600b      	str	r3, [r1, #0]
 800a124:	e015      	b.n	800a152 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a126:	4b24      	ldr	r3, [pc, #144]	@ (800a1b8 <HAL_RCC_OscConfig+0x278>)
 800a128:	2200      	movs	r2, #0
 800a12a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a12c:	f7fd fb3a 	bl	80077a4 <HAL_GetTick>
 800a130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a132:	e008      	b.n	800a146 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a134:	f7fd fb36 	bl	80077a4 <HAL_GetTick>
 800a138:	4602      	mov	r2, r0
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	2b02      	cmp	r3, #2
 800a140:	d901      	bls.n	800a146 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a142:	2303      	movs	r3, #3
 800a144:	e193      	b.n	800a46e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a146:	4b1b      	ldr	r3, [pc, #108]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0302 	and.w	r3, r3, #2
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1f0      	bne.n	800a134 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f003 0308 	and.w	r3, r3, #8
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d036      	beq.n	800a1cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	695b      	ldr	r3, [r3, #20]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d016      	beq.n	800a194 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a166:	4b15      	ldr	r3, [pc, #84]	@ (800a1bc <HAL_RCC_OscConfig+0x27c>)
 800a168:	2201      	movs	r2, #1
 800a16a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a16c:	f7fd fb1a 	bl	80077a4 <HAL_GetTick>
 800a170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a172:	e008      	b.n	800a186 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a174:	f7fd fb16 	bl	80077a4 <HAL_GetTick>
 800a178:	4602      	mov	r2, r0
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d901      	bls.n	800a186 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800a182:	2303      	movs	r3, #3
 800a184:	e173      	b.n	800a46e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a186:	4b0b      	ldr	r3, [pc, #44]	@ (800a1b4 <HAL_RCC_OscConfig+0x274>)
 800a188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a18a:	f003 0302 	and.w	r3, r3, #2
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d0f0      	beq.n	800a174 <HAL_RCC_OscConfig+0x234>
 800a192:	e01b      	b.n	800a1cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a194:	4b09      	ldr	r3, [pc, #36]	@ (800a1bc <HAL_RCC_OscConfig+0x27c>)
 800a196:	2200      	movs	r2, #0
 800a198:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a19a:	f7fd fb03 	bl	80077a4 <HAL_GetTick>
 800a19e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a1a0:	e00e      	b.n	800a1c0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a1a2:	f7fd faff 	bl	80077a4 <HAL_GetTick>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d907      	bls.n	800a1c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	e15c      	b.n	800a46e <HAL_RCC_OscConfig+0x52e>
 800a1b4:	40023800 	.word	0x40023800
 800a1b8:	42470000 	.word	0x42470000
 800a1bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a1c0:	4b8a      	ldr	r3, [pc, #552]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a1c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1c4:	f003 0302 	and.w	r3, r3, #2
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d1ea      	bne.n	800a1a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f003 0304 	and.w	r3, r3, #4
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	f000 8097 	beq.w	800a308 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a1de:	4b83      	ldr	r3, [pc, #524]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a1e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d10f      	bne.n	800a20a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	60bb      	str	r3, [r7, #8]
 800a1ee:	4b7f      	ldr	r3, [pc, #508]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1f2:	4a7e      	ldr	r2, [pc, #504]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a1f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1f8:	6413      	str	r3, [r2, #64]	@ 0x40
 800a1fa:	4b7c      	ldr	r3, [pc, #496]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a1fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a202:	60bb      	str	r3, [r7, #8]
 800a204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a206:	2301      	movs	r3, #1
 800a208:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a20a:	4b79      	ldr	r3, [pc, #484]	@ (800a3f0 <HAL_RCC_OscConfig+0x4b0>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a212:	2b00      	cmp	r3, #0
 800a214:	d118      	bne.n	800a248 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a216:	4b76      	ldr	r3, [pc, #472]	@ (800a3f0 <HAL_RCC_OscConfig+0x4b0>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a75      	ldr	r2, [pc, #468]	@ (800a3f0 <HAL_RCC_OscConfig+0x4b0>)
 800a21c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a222:	f7fd fabf 	bl	80077a4 <HAL_GetTick>
 800a226:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a228:	e008      	b.n	800a23c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a22a:	f7fd fabb 	bl	80077a4 <HAL_GetTick>
 800a22e:	4602      	mov	r2, r0
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	2b02      	cmp	r3, #2
 800a236:	d901      	bls.n	800a23c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a238:	2303      	movs	r3, #3
 800a23a:	e118      	b.n	800a46e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a23c:	4b6c      	ldr	r3, [pc, #432]	@ (800a3f0 <HAL_RCC_OscConfig+0x4b0>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a244:	2b00      	cmp	r3, #0
 800a246:	d0f0      	beq.n	800a22a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d106      	bne.n	800a25e <HAL_RCC_OscConfig+0x31e>
 800a250:	4b66      	ldr	r3, [pc, #408]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a254:	4a65      	ldr	r2, [pc, #404]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a256:	f043 0301 	orr.w	r3, r3, #1
 800a25a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a25c:	e01c      	b.n	800a298 <HAL_RCC_OscConfig+0x358>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	2b05      	cmp	r3, #5
 800a264:	d10c      	bne.n	800a280 <HAL_RCC_OscConfig+0x340>
 800a266:	4b61      	ldr	r3, [pc, #388]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a26a:	4a60      	ldr	r2, [pc, #384]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a26c:	f043 0304 	orr.w	r3, r3, #4
 800a270:	6713      	str	r3, [r2, #112]	@ 0x70
 800a272:	4b5e      	ldr	r3, [pc, #376]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a276:	4a5d      	ldr	r2, [pc, #372]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a278:	f043 0301 	orr.w	r3, r3, #1
 800a27c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a27e:	e00b      	b.n	800a298 <HAL_RCC_OscConfig+0x358>
 800a280:	4b5a      	ldr	r3, [pc, #360]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a284:	4a59      	ldr	r2, [pc, #356]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a286:	f023 0301 	bic.w	r3, r3, #1
 800a28a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a28c:	4b57      	ldr	r3, [pc, #348]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a28e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a290:	4a56      	ldr	r2, [pc, #344]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a292:	f023 0304 	bic.w	r3, r3, #4
 800a296:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d015      	beq.n	800a2cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2a0:	f7fd fa80 	bl	80077a4 <HAL_GetTick>
 800a2a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2a6:	e00a      	b.n	800a2be <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2a8:	f7fd fa7c 	bl	80077a4 <HAL_GetTick>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	1ad3      	subs	r3, r2, r3
 800a2b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d901      	bls.n	800a2be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e0d7      	b.n	800a46e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2be:	4b4b      	ldr	r3, [pc, #300]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a2c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2c2:	f003 0302 	and.w	r3, r3, #2
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d0ee      	beq.n	800a2a8 <HAL_RCC_OscConfig+0x368>
 800a2ca:	e014      	b.n	800a2f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2cc:	f7fd fa6a 	bl	80077a4 <HAL_GetTick>
 800a2d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2d2:	e00a      	b.n	800a2ea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2d4:	f7fd fa66 	bl	80077a4 <HAL_GetTick>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	1ad3      	subs	r3, r2, r3
 800a2de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d901      	bls.n	800a2ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e0c1      	b.n	800a46e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2ea:	4b40      	ldr	r3, [pc, #256]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a2ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2ee:	f003 0302 	and.w	r3, r3, #2
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1ee      	bne.n	800a2d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a2f6:	7dfb      	ldrb	r3, [r7, #23]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d105      	bne.n	800a308 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2fc:	4b3b      	ldr	r3, [pc, #236]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a2fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a300:	4a3a      	ldr	r2, [pc, #232]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a302:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a306:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f000 80ad 	beq.w	800a46c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a312:	4b36      	ldr	r3, [pc, #216]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	f003 030c 	and.w	r3, r3, #12
 800a31a:	2b08      	cmp	r3, #8
 800a31c:	d060      	beq.n	800a3e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	2b02      	cmp	r3, #2
 800a324:	d145      	bne.n	800a3b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a326:	4b33      	ldr	r3, [pc, #204]	@ (800a3f4 <HAL_RCC_OscConfig+0x4b4>)
 800a328:	2200      	movs	r2, #0
 800a32a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a32c:	f7fd fa3a 	bl	80077a4 <HAL_GetTick>
 800a330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a332:	e008      	b.n	800a346 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a334:	f7fd fa36 	bl	80077a4 <HAL_GetTick>
 800a338:	4602      	mov	r2, r0
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d901      	bls.n	800a346 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800a342:	2303      	movs	r3, #3
 800a344:	e093      	b.n	800a46e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a346:	4b29      	ldr	r3, [pc, #164]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1f0      	bne.n	800a334 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	69da      	ldr	r2, [r3, #28]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	431a      	orrs	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a360:	019b      	lsls	r3, r3, #6
 800a362:	431a      	orrs	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a368:	085b      	lsrs	r3, r3, #1
 800a36a:	3b01      	subs	r3, #1
 800a36c:	041b      	lsls	r3, r3, #16
 800a36e:	431a      	orrs	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a374:	061b      	lsls	r3, r3, #24
 800a376:	431a      	orrs	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a37c:	071b      	lsls	r3, r3, #28
 800a37e:	491b      	ldr	r1, [pc, #108]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a380:	4313      	orrs	r3, r2
 800a382:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a384:	4b1b      	ldr	r3, [pc, #108]	@ (800a3f4 <HAL_RCC_OscConfig+0x4b4>)
 800a386:	2201      	movs	r2, #1
 800a388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a38a:	f7fd fa0b 	bl	80077a4 <HAL_GetTick>
 800a38e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a390:	e008      	b.n	800a3a4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a392:	f7fd fa07 	bl	80077a4 <HAL_GetTick>
 800a396:	4602      	mov	r2, r0
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	1ad3      	subs	r3, r2, r3
 800a39c:	2b02      	cmp	r3, #2
 800a39e:	d901      	bls.n	800a3a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	e064      	b.n	800a46e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a3a4:	4b11      	ldr	r3, [pc, #68]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d0f0      	beq.n	800a392 <HAL_RCC_OscConfig+0x452>
 800a3b0:	e05c      	b.n	800a46c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3b2:	4b10      	ldr	r3, [pc, #64]	@ (800a3f4 <HAL_RCC_OscConfig+0x4b4>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3b8:	f7fd f9f4 	bl	80077a4 <HAL_GetTick>
 800a3bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3be:	e008      	b.n	800a3d2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3c0:	f7fd f9f0 	bl	80077a4 <HAL_GetTick>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d901      	bls.n	800a3d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	e04d      	b.n	800a46e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3d2:	4b06      	ldr	r3, [pc, #24]	@ (800a3ec <HAL_RCC_OscConfig+0x4ac>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1f0      	bne.n	800a3c0 <HAL_RCC_OscConfig+0x480>
 800a3de:	e045      	b.n	800a46c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	699b      	ldr	r3, [r3, #24]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d107      	bne.n	800a3f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e040      	b.n	800a46e <HAL_RCC_OscConfig+0x52e>
 800a3ec:	40023800 	.word	0x40023800
 800a3f0:	40007000 	.word	0x40007000
 800a3f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a3f8:	4b1f      	ldr	r3, [pc, #124]	@ (800a478 <HAL_RCC_OscConfig+0x538>)
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	2b01      	cmp	r3, #1
 800a404:	d030      	beq.n	800a468 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a410:	429a      	cmp	r2, r3
 800a412:	d129      	bne.n	800a468 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a41e:	429a      	cmp	r2, r3
 800a420:	d122      	bne.n	800a468 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a428:	4013      	ands	r3, r2
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a42e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a430:	4293      	cmp	r3, r2
 800a432:	d119      	bne.n	800a468 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a43e:	085b      	lsrs	r3, r3, #1
 800a440:	3b01      	subs	r3, #1
 800a442:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a444:	429a      	cmp	r2, r3
 800a446:	d10f      	bne.n	800a468 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a452:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a454:	429a      	cmp	r2, r3
 800a456:	d107      	bne.n	800a468 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a462:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a464:	429a      	cmp	r2, r3
 800a466:	d001      	beq.n	800a46c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e000      	b.n	800a46e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3718      	adds	r7, #24
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	40023800 	.word	0x40023800

0800a47c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d101      	bne.n	800a48e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e041      	b.n	800a512 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a494:	b2db      	uxtb	r3, r3
 800a496:	2b00      	cmp	r3, #0
 800a498:	d106      	bne.n	800a4a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7fc fbea 	bl	8006c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2202      	movs	r2, #2
 800a4ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	3304      	adds	r3, #4
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	4610      	mov	r0, r2
 800a4bc:	f000 fa7e 	bl	800a9bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2201      	movs	r2, #1
 800a504:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
	...

0800a51c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b085      	sub	sp, #20
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d001      	beq.n	800a534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	e04e      	b.n	800a5d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2202      	movs	r2, #2
 800a538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	68da      	ldr	r2, [r3, #12]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f042 0201 	orr.w	r2, r2, #1
 800a54a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a23      	ldr	r2, [pc, #140]	@ (800a5e0 <HAL_TIM_Base_Start_IT+0xc4>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d022      	beq.n	800a59c <HAL_TIM_Base_Start_IT+0x80>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a55e:	d01d      	beq.n	800a59c <HAL_TIM_Base_Start_IT+0x80>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a1f      	ldr	r2, [pc, #124]	@ (800a5e4 <HAL_TIM_Base_Start_IT+0xc8>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d018      	beq.n	800a59c <HAL_TIM_Base_Start_IT+0x80>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a1e      	ldr	r2, [pc, #120]	@ (800a5e8 <HAL_TIM_Base_Start_IT+0xcc>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d013      	beq.n	800a59c <HAL_TIM_Base_Start_IT+0x80>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a1c      	ldr	r2, [pc, #112]	@ (800a5ec <HAL_TIM_Base_Start_IT+0xd0>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d00e      	beq.n	800a59c <HAL_TIM_Base_Start_IT+0x80>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a1b      	ldr	r2, [pc, #108]	@ (800a5f0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d009      	beq.n	800a59c <HAL_TIM_Base_Start_IT+0x80>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a19      	ldr	r2, [pc, #100]	@ (800a5f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d004      	beq.n	800a59c <HAL_TIM_Base_Start_IT+0x80>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a18      	ldr	r2, [pc, #96]	@ (800a5f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d111      	bne.n	800a5c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	f003 0307 	and.w	r3, r3, #7
 800a5a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2b06      	cmp	r3, #6
 800a5ac:	d010      	beq.n	800a5d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f042 0201 	orr.w	r2, r2, #1
 800a5bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5be:	e007      	b.n	800a5d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f042 0201 	orr.w	r2, r2, #1
 800a5ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	40010000 	.word	0x40010000
 800a5e4:	40000400 	.word	0x40000400
 800a5e8:	40000800 	.word	0x40000800
 800a5ec:	40000c00 	.word	0x40000c00
 800a5f0:	40010400 	.word	0x40010400
 800a5f4:	40014000 	.word	0x40014000
 800a5f8:	40001800 	.word	0x40001800

0800a5fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	f003 0302 	and.w	r3, r3, #2
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d020      	beq.n	800a660 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f003 0302 	and.w	r3, r3, #2
 800a624:	2b00      	cmp	r3, #0
 800a626:	d01b      	beq.n	800a660 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f06f 0202 	mvn.w	r2, #2
 800a630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	699b      	ldr	r3, [r3, #24]
 800a63e:	f003 0303 	and.w	r3, r3, #3
 800a642:	2b00      	cmp	r3, #0
 800a644:	d003      	beq.n	800a64e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 f999 	bl	800a97e <HAL_TIM_IC_CaptureCallback>
 800a64c:	e005      	b.n	800a65a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 f98b 	bl	800a96a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 f99c 	bl	800a992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	f003 0304 	and.w	r3, r3, #4
 800a666:	2b00      	cmp	r3, #0
 800a668:	d020      	beq.n	800a6ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f003 0304 	and.w	r3, r3, #4
 800a670:	2b00      	cmp	r3, #0
 800a672:	d01b      	beq.n	800a6ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f06f 0204 	mvn.w	r2, #4
 800a67c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2202      	movs	r2, #2
 800a682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d003      	beq.n	800a69a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f973 	bl	800a97e <HAL_TIM_IC_CaptureCallback>
 800a698:	e005      	b.n	800a6a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f965 	bl	800a96a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 f976 	bl	800a992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	f003 0308 	and.w	r3, r3, #8
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d020      	beq.n	800a6f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f003 0308 	and.w	r3, r3, #8
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d01b      	beq.n	800a6f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f06f 0208 	mvn.w	r2, #8
 800a6c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2204      	movs	r2, #4
 800a6ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	69db      	ldr	r3, [r3, #28]
 800a6d6:	f003 0303 	and.w	r3, r3, #3
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d003      	beq.n	800a6e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f94d 	bl	800a97e <HAL_TIM_IC_CaptureCallback>
 800a6e4:	e005      	b.n	800a6f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f93f 	bl	800a96a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 f950 	bl	800a992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	f003 0310 	and.w	r3, r3, #16
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d020      	beq.n	800a744 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f003 0310 	and.w	r3, r3, #16
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d01b      	beq.n	800a744 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f06f 0210 	mvn.w	r2, #16
 800a714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2208      	movs	r2, #8
 800a71a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	69db      	ldr	r3, [r3, #28]
 800a722:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a726:	2b00      	cmp	r3, #0
 800a728:	d003      	beq.n	800a732 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f927 	bl	800a97e <HAL_TIM_IC_CaptureCallback>
 800a730:	e005      	b.n	800a73e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 f919 	bl	800a96a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 f92a 	bl	800a992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	f003 0301 	and.w	r3, r3, #1
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00c      	beq.n	800a768 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f003 0301 	and.w	r3, r3, #1
 800a754:	2b00      	cmp	r3, #0
 800a756:	d007      	beq.n	800a768 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f06f 0201 	mvn.w	r2, #1
 800a760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f7fa f9c6 	bl	8004af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00c      	beq.n	800a78c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d007      	beq.n	800a78c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 fade 	bl	800ad48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00c      	beq.n	800a7b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d007      	beq.n	800a7b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a7a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f8fb 	bl	800a9a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	f003 0320 	and.w	r3, r3, #32
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00c      	beq.n	800a7d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f003 0320 	and.w	r3, r3, #32
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d007      	beq.n	800a7d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f06f 0220 	mvn.w	r2, #32
 800a7cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 fab0 	bl	800ad34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a7d4:	bf00      	nop
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d101      	bne.n	800a7f8 <HAL_TIM_ConfigClockSource+0x1c>
 800a7f4:	2302      	movs	r3, #2
 800a7f6:	e0b4      	b.n	800a962 <HAL_TIM_ConfigClockSource+0x186>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2202      	movs	r2, #2
 800a804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a81e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68ba      	ldr	r2, [r7, #8]
 800a826:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a830:	d03e      	beq.n	800a8b0 <HAL_TIM_ConfigClockSource+0xd4>
 800a832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a836:	f200 8087 	bhi.w	800a948 <HAL_TIM_ConfigClockSource+0x16c>
 800a83a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a83e:	f000 8086 	beq.w	800a94e <HAL_TIM_ConfigClockSource+0x172>
 800a842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a846:	d87f      	bhi.n	800a948 <HAL_TIM_ConfigClockSource+0x16c>
 800a848:	2b70      	cmp	r3, #112	@ 0x70
 800a84a:	d01a      	beq.n	800a882 <HAL_TIM_ConfigClockSource+0xa6>
 800a84c:	2b70      	cmp	r3, #112	@ 0x70
 800a84e:	d87b      	bhi.n	800a948 <HAL_TIM_ConfigClockSource+0x16c>
 800a850:	2b60      	cmp	r3, #96	@ 0x60
 800a852:	d050      	beq.n	800a8f6 <HAL_TIM_ConfigClockSource+0x11a>
 800a854:	2b60      	cmp	r3, #96	@ 0x60
 800a856:	d877      	bhi.n	800a948 <HAL_TIM_ConfigClockSource+0x16c>
 800a858:	2b50      	cmp	r3, #80	@ 0x50
 800a85a:	d03c      	beq.n	800a8d6 <HAL_TIM_ConfigClockSource+0xfa>
 800a85c:	2b50      	cmp	r3, #80	@ 0x50
 800a85e:	d873      	bhi.n	800a948 <HAL_TIM_ConfigClockSource+0x16c>
 800a860:	2b40      	cmp	r3, #64	@ 0x40
 800a862:	d058      	beq.n	800a916 <HAL_TIM_ConfigClockSource+0x13a>
 800a864:	2b40      	cmp	r3, #64	@ 0x40
 800a866:	d86f      	bhi.n	800a948 <HAL_TIM_ConfigClockSource+0x16c>
 800a868:	2b30      	cmp	r3, #48	@ 0x30
 800a86a:	d064      	beq.n	800a936 <HAL_TIM_ConfigClockSource+0x15a>
 800a86c:	2b30      	cmp	r3, #48	@ 0x30
 800a86e:	d86b      	bhi.n	800a948 <HAL_TIM_ConfigClockSource+0x16c>
 800a870:	2b20      	cmp	r3, #32
 800a872:	d060      	beq.n	800a936 <HAL_TIM_ConfigClockSource+0x15a>
 800a874:	2b20      	cmp	r3, #32
 800a876:	d867      	bhi.n	800a948 <HAL_TIM_ConfigClockSource+0x16c>
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d05c      	beq.n	800a936 <HAL_TIM_ConfigClockSource+0x15a>
 800a87c:	2b10      	cmp	r3, #16
 800a87e:	d05a      	beq.n	800a936 <HAL_TIM_ConfigClockSource+0x15a>
 800a880:	e062      	b.n	800a948 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a892:	f000 f9b3 	bl	800abfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a8a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	609a      	str	r2, [r3, #8]
      break;
 800a8ae:	e04f      	b.n	800a950 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a8c0:	f000 f99c 	bl	800abfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	689a      	ldr	r2, [r3, #8]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a8d2:	609a      	str	r2, [r3, #8]
      break;
 800a8d4:	e03c      	b.n	800a950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	f000 f910 	bl	800ab08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2150      	movs	r1, #80	@ 0x50
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f000 f969 	bl	800abc6 <TIM_ITRx_SetConfig>
      break;
 800a8f4:	e02c      	b.n	800a950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a902:	461a      	mov	r2, r3
 800a904:	f000 f92f 	bl	800ab66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2160      	movs	r1, #96	@ 0x60
 800a90e:	4618      	mov	r0, r3
 800a910:	f000 f959 	bl	800abc6 <TIM_ITRx_SetConfig>
      break;
 800a914:	e01c      	b.n	800a950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a922:	461a      	mov	r2, r3
 800a924:	f000 f8f0 	bl	800ab08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2140      	movs	r1, #64	@ 0x40
 800a92e:	4618      	mov	r0, r3
 800a930:	f000 f949 	bl	800abc6 <TIM_ITRx_SetConfig>
      break;
 800a934:	e00c      	b.n	800a950 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4619      	mov	r1, r3
 800a940:	4610      	mov	r0, r2
 800a942:	f000 f940 	bl	800abc6 <TIM_ITRx_SetConfig>
      break;
 800a946:	e003      	b.n	800a950 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	73fb      	strb	r3, [r7, #15]
      break;
 800a94c:	e000      	b.n	800a950 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a94e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a960:	7bfb      	ldrb	r3, [r7, #15]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a96a:	b480      	push	{r7}
 800a96c:	b083      	sub	sp, #12
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a972:	bf00      	nop
 800a974:	370c      	adds	r7, #12
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a97e:	b480      	push	{r7}
 800a980:	b083      	sub	sp, #12
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a986:	bf00      	nop
 800a988:	370c      	adds	r7, #12
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr

0800a992 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a992:	b480      	push	{r7}
 800a994:	b083      	sub	sp, #12
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a99a:	bf00      	nop
 800a99c:	370c      	adds	r7, #12
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b083      	sub	sp, #12
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a9ae:	bf00      	nop
 800a9b0:	370c      	adds	r7, #12
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr
	...

0800a9bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	4a43      	ldr	r2, [pc, #268]	@ (800aadc <TIM_Base_SetConfig+0x120>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d013      	beq.n	800a9fc <TIM_Base_SetConfig+0x40>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9da:	d00f      	beq.n	800a9fc <TIM_Base_SetConfig+0x40>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4a40      	ldr	r2, [pc, #256]	@ (800aae0 <TIM_Base_SetConfig+0x124>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d00b      	beq.n	800a9fc <TIM_Base_SetConfig+0x40>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a3f      	ldr	r2, [pc, #252]	@ (800aae4 <TIM_Base_SetConfig+0x128>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d007      	beq.n	800a9fc <TIM_Base_SetConfig+0x40>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a3e      	ldr	r2, [pc, #248]	@ (800aae8 <TIM_Base_SetConfig+0x12c>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d003      	beq.n	800a9fc <TIM_Base_SetConfig+0x40>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a3d      	ldr	r2, [pc, #244]	@ (800aaec <TIM_Base_SetConfig+0x130>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d108      	bne.n	800aa0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a32      	ldr	r2, [pc, #200]	@ (800aadc <TIM_Base_SetConfig+0x120>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d02b      	beq.n	800aa6e <TIM_Base_SetConfig+0xb2>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa1c:	d027      	beq.n	800aa6e <TIM_Base_SetConfig+0xb2>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a2f      	ldr	r2, [pc, #188]	@ (800aae0 <TIM_Base_SetConfig+0x124>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d023      	beq.n	800aa6e <TIM_Base_SetConfig+0xb2>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a2e      	ldr	r2, [pc, #184]	@ (800aae4 <TIM_Base_SetConfig+0x128>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d01f      	beq.n	800aa6e <TIM_Base_SetConfig+0xb2>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a2d      	ldr	r2, [pc, #180]	@ (800aae8 <TIM_Base_SetConfig+0x12c>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d01b      	beq.n	800aa6e <TIM_Base_SetConfig+0xb2>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a2c      	ldr	r2, [pc, #176]	@ (800aaec <TIM_Base_SetConfig+0x130>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d017      	beq.n	800aa6e <TIM_Base_SetConfig+0xb2>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a2b      	ldr	r2, [pc, #172]	@ (800aaf0 <TIM_Base_SetConfig+0x134>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d013      	beq.n	800aa6e <TIM_Base_SetConfig+0xb2>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a2a      	ldr	r2, [pc, #168]	@ (800aaf4 <TIM_Base_SetConfig+0x138>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d00f      	beq.n	800aa6e <TIM_Base_SetConfig+0xb2>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a29      	ldr	r2, [pc, #164]	@ (800aaf8 <TIM_Base_SetConfig+0x13c>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d00b      	beq.n	800aa6e <TIM_Base_SetConfig+0xb2>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a28      	ldr	r2, [pc, #160]	@ (800aafc <TIM_Base_SetConfig+0x140>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d007      	beq.n	800aa6e <TIM_Base_SetConfig+0xb2>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a27      	ldr	r2, [pc, #156]	@ (800ab00 <TIM_Base_SetConfig+0x144>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d003      	beq.n	800aa6e <TIM_Base_SetConfig+0xb2>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a26      	ldr	r2, [pc, #152]	@ (800ab04 <TIM_Base_SetConfig+0x148>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d108      	bne.n	800aa80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	695b      	ldr	r3, [r3, #20]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	689a      	ldr	r2, [r3, #8]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a0e      	ldr	r2, [pc, #56]	@ (800aadc <TIM_Base_SetConfig+0x120>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d003      	beq.n	800aaae <TIM_Base_SetConfig+0xf2>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a10      	ldr	r2, [pc, #64]	@ (800aaec <TIM_Base_SetConfig+0x130>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d103      	bne.n	800aab6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	691a      	ldr	r2, [r3, #16]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f043 0204 	orr.w	r2, r3, #4
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2201      	movs	r2, #1
 800aac6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	601a      	str	r2, [r3, #0]
}
 800aace:	bf00      	nop
 800aad0:	3714      	adds	r7, #20
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	40010000 	.word	0x40010000
 800aae0:	40000400 	.word	0x40000400
 800aae4:	40000800 	.word	0x40000800
 800aae8:	40000c00 	.word	0x40000c00
 800aaec:	40010400 	.word	0x40010400
 800aaf0:	40014000 	.word	0x40014000
 800aaf4:	40014400 	.word	0x40014400
 800aaf8:	40014800 	.word	0x40014800
 800aafc:	40001800 	.word	0x40001800
 800ab00:	40001c00 	.word	0x40001c00
 800ab04:	40002000 	.word	0x40002000

0800ab08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b087      	sub	sp, #28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6a1b      	ldr	r3, [r3, #32]
 800ab18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6a1b      	ldr	r3, [r3, #32]
 800ab1e:	f023 0201 	bic.w	r2, r3, #1
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	699b      	ldr	r3, [r3, #24]
 800ab2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ab32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	011b      	lsls	r3, r3, #4
 800ab38:	693a      	ldr	r2, [r7, #16]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	f023 030a 	bic.w	r3, r3, #10
 800ab44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	693a      	ldr	r2, [r7, #16]
 800ab52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	621a      	str	r2, [r3, #32]
}
 800ab5a:	bf00      	nop
 800ab5c:	371c      	adds	r7, #28
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr

0800ab66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab66:	b480      	push	{r7}
 800ab68:	b087      	sub	sp, #28
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	60f8      	str	r0, [r7, #12]
 800ab6e:	60b9      	str	r1, [r7, #8]
 800ab70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6a1b      	ldr	r3, [r3, #32]
 800ab76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6a1b      	ldr	r3, [r3, #32]
 800ab7c:	f023 0210 	bic.w	r2, r3, #16
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	699b      	ldr	r3, [r3, #24]
 800ab88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ab90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	031b      	lsls	r3, r3, #12
 800ab96:	693a      	ldr	r2, [r7, #16]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800aba2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	011b      	lsls	r3, r3, #4
 800aba8:	697a      	ldr	r2, [r7, #20]
 800abaa:	4313      	orrs	r3, r2
 800abac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	693a      	ldr	r2, [r7, #16]
 800abb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	621a      	str	r2, [r3, #32]
}
 800abba:	bf00      	nop
 800abbc:	371c      	adds	r7, #28
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800abc6:	b480      	push	{r7}
 800abc8:	b085      	sub	sp, #20
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
 800abce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800abde:	683a      	ldr	r2, [r7, #0]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	f043 0307 	orr.w	r3, r3, #7
 800abe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	609a      	str	r2, [r3, #8]
}
 800abf0:	bf00      	nop
 800abf2:	3714      	adds	r7, #20
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b087      	sub	sp, #28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
 800ac08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ac16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	021a      	lsls	r2, r3, #8
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	431a      	orrs	r2, r3
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	4313      	orrs	r3, r2
 800ac24:	697a      	ldr	r2, [r7, #20]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	697a      	ldr	r2, [r7, #20]
 800ac2e:	609a      	str	r2, [r3, #8]
}
 800ac30:	bf00      	nop
 800ac32:	371c      	adds	r7, #28
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d101      	bne.n	800ac54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac50:	2302      	movs	r3, #2
 800ac52:	e05a      	b.n	800ad0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2202      	movs	r2, #2
 800ac60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68fa      	ldr	r2, [r7, #12]
 800ac8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a21      	ldr	r2, [pc, #132]	@ (800ad18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d022      	beq.n	800acde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aca0:	d01d      	beq.n	800acde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a1d      	ldr	r2, [pc, #116]	@ (800ad1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d018      	beq.n	800acde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a1b      	ldr	r2, [pc, #108]	@ (800ad20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d013      	beq.n	800acde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a1a      	ldr	r2, [pc, #104]	@ (800ad24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d00e      	beq.n	800acde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a18      	ldr	r2, [pc, #96]	@ (800ad28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d009      	beq.n	800acde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a17      	ldr	r2, [pc, #92]	@ (800ad2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d004      	beq.n	800acde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a15      	ldr	r2, [pc, #84]	@ (800ad30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d10c      	bne.n	800acf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ace4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	68ba      	ldr	r2, [r7, #8]
 800acec:	4313      	orrs	r3, r2
 800acee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68ba      	ldr	r2, [r7, #8]
 800acf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3714      	adds	r7, #20
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop
 800ad18:	40010000 	.word	0x40010000
 800ad1c:	40000400 	.word	0x40000400
 800ad20:	40000800 	.word	0x40000800
 800ad24:	40000c00 	.word	0x40000c00
 800ad28:	40010400 	.word	0x40010400
 800ad2c:	40014000 	.word	0x40014000
 800ad30:	40001800 	.word	0x40001800

0800ad34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad3c:	bf00      	nop
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d101      	bne.n	800ad6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e042      	b.n	800adf4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d106      	bne.n	800ad88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f7fb ffa0 	bl	8006cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2224      	movs	r2, #36	@ 0x24
 800ad8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68da      	ldr	r2, [r3, #12]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ad9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f001 f879 	bl	800be98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	691a      	ldr	r2, [r3, #16]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800adb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	695a      	ldr	r2, [r3, #20]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800adc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68da      	ldr	r2, [r3, #12]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800add4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2220      	movs	r2, #32
 800ade0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2220      	movs	r2, #32
 800ade8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3708      	adds	r7, #8
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b08a      	sub	sp, #40	@ 0x28
 800ae00:	af02      	add	r7, sp, #8
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	603b      	str	r3, [r7, #0]
 800ae08:	4613      	mov	r3, r2
 800ae0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	2b20      	cmp	r3, #32
 800ae1a:	d175      	bne.n	800af08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d002      	beq.n	800ae28 <HAL_UART_Transmit+0x2c>
 800ae22:	88fb      	ldrh	r3, [r7, #6]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d101      	bne.n	800ae2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e06e      	b.n	800af0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2221      	movs	r2, #33	@ 0x21
 800ae36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae3a:	f7fc fcb3 	bl	80077a4 <HAL_GetTick>
 800ae3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	88fa      	ldrh	r2, [r7, #6]
 800ae44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	88fa      	ldrh	r2, [r7, #6]
 800ae4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae54:	d108      	bne.n	800ae68 <HAL_UART_Transmit+0x6c>
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	691b      	ldr	r3, [r3, #16]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d104      	bne.n	800ae68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	61bb      	str	r3, [r7, #24]
 800ae66:	e003      	b.n	800ae70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ae70:	e02e      	b.n	800aed0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	9300      	str	r3, [sp, #0]
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	2180      	movs	r1, #128	@ 0x80
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	f000 fd4a 	bl	800b916 <UART_WaitOnFlagUntilTimeout>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d005      	beq.n	800ae94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2220      	movs	r2, #32
 800ae8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e03a      	b.n	800af0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10b      	bne.n	800aeb2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	881b      	ldrh	r3, [r3, #0]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aea8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	3302      	adds	r3, #2
 800aeae:	61bb      	str	r3, [r7, #24]
 800aeb0:	e007      	b.n	800aec2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	781a      	ldrb	r2, [r3, #0]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	3301      	adds	r3, #1
 800aec0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	3b01      	subs	r3, #1
 800aeca:	b29a      	uxth	r2, r3
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1cb      	bne.n	800ae72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	2200      	movs	r2, #0
 800aee2:	2140      	movs	r1, #64	@ 0x40
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	f000 fd16 	bl	800b916 <UART_WaitOnFlagUntilTimeout>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d005      	beq.n	800aefc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2220      	movs	r2, #32
 800aef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800aef8:	2303      	movs	r3, #3
 800aefa:	e006      	b.n	800af0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2220      	movs	r2, #32
 800af00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800af04:	2300      	movs	r3, #0
 800af06:	e000      	b.n	800af0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800af08:	2302      	movs	r3, #2
  }
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3720      	adds	r7, #32
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
	...

0800af14 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b08c      	sub	sp, #48	@ 0x30
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	4613      	mov	r3, r2
 800af20:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	2b20      	cmp	r3, #32
 800af2c:	d162      	bne.n	800aff4 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d002      	beq.n	800af3a <HAL_UART_Transmit_DMA+0x26>
 800af34:	88fb      	ldrh	r3, [r7, #6]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d101      	bne.n	800af3e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800af3a:	2301      	movs	r3, #1
 800af3c:	e05b      	b.n	800aff6 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	88fa      	ldrh	r2, [r7, #6]
 800af48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	88fa      	ldrh	r2, [r7, #6]
 800af4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2200      	movs	r2, #0
 800af54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2221      	movs	r2, #33	@ 0x21
 800af5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af62:	4a27      	ldr	r2, [pc, #156]	@ (800b000 <HAL_UART_Transmit_DMA+0xec>)
 800af64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af6a:	4a26      	ldr	r2, [pc, #152]	@ (800b004 <HAL_UART_Transmit_DMA+0xf0>)
 800af6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af72:	4a25      	ldr	r2, [pc, #148]	@ (800b008 <HAL_UART_Transmit_DMA+0xf4>)
 800af74:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af7a:	2200      	movs	r2, #0
 800af7c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800af7e:	f107 0308 	add.w	r3, r7, #8
 800af82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800af88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af8a:	6819      	ldr	r1, [r3, #0]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	3304      	adds	r3, #4
 800af92:	461a      	mov	r2, r3
 800af94:	88fb      	ldrh	r3, [r7, #6]
 800af96:	f7fc fe27 	bl	8007be8 <HAL_DMA_Start_IT>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d008      	beq.n	800afb2 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2210      	movs	r2, #16
 800afa4:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2220      	movs	r2, #32
 800afaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	e021      	b.n	800aff6 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800afba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	3314      	adds	r3, #20
 800afc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	e853 3f00 	ldrex	r3, [r3]
 800afca:	617b      	str	r3, [r7, #20]
   return(result);
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	3314      	adds	r3, #20
 800afda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afdc:	627a      	str	r2, [r7, #36]	@ 0x24
 800afde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe0:	6a39      	ldr	r1, [r7, #32]
 800afe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afe4:	e841 2300 	strex	r3, r2, [r1]
 800afe8:	61fb      	str	r3, [r7, #28]
   return(result);
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1e5      	bne.n	800afbc <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 800aff0:	2300      	movs	r3, #0
 800aff2:	e000      	b.n	800aff6 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800aff4:	2302      	movs	r3, #2
  }
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3730      	adds	r7, #48	@ 0x30
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	0800b665 	.word	0x0800b665
 800b004:	0800b6ff 	.word	0x0800b6ff
 800b008:	0800b883 	.word	0x0800b883

0800b00c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b08c      	sub	sp, #48	@ 0x30
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	4613      	mov	r3, r2
 800b018:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b020:	b2db      	uxtb	r3, r3
 800b022:	2b20      	cmp	r3, #32
 800b024:	d146      	bne.n	800b0b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d002      	beq.n	800b032 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800b02c:	88fb      	ldrh	r3, [r7, #6]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d101      	bne.n	800b036 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e03f      	b.n	800b0b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2201      	movs	r2, #1
 800b03a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2200      	movs	r2, #0
 800b040:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b042:	88fb      	ldrh	r3, [r7, #6]
 800b044:	461a      	mov	r2, r3
 800b046:	68b9      	ldr	r1, [r7, #8]
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f000 fcbd 	bl	800b9c8 <UART_Start_Receive_DMA>
 800b04e:	4603      	mov	r3, r0
 800b050:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d125      	bne.n	800b0a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b05c:	2300      	movs	r3, #0
 800b05e:	613b      	str	r3, [r7, #16]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	613b      	str	r3, [r7, #16]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	613b      	str	r3, [r7, #16]
 800b070:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	330c      	adds	r3, #12
 800b078:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	e853 3f00 	ldrex	r3, [r3]
 800b080:	617b      	str	r3, [r7, #20]
   return(result);
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	f043 0310 	orr.w	r3, r3, #16
 800b088:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	330c      	adds	r3, #12
 800b090:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b092:	627a      	str	r2, [r7, #36]	@ 0x24
 800b094:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b096:	6a39      	ldr	r1, [r7, #32]
 800b098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b09a:	e841 2300 	strex	r3, r2, [r1]
 800b09e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d1e5      	bne.n	800b072 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800b0a6:	e002      	b.n	800b0ae <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800b0ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b0b2:	e000      	b.n	800b0b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800b0b4:	2302      	movs	r3, #2
  }
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3730      	adds	r7, #48	@ 0x30
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
	...

0800b0c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b0ba      	sub	sp, #232	@ 0xe8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	695b      	ldr	r3, [r3, #20]
 800b0e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b0f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0f6:	f003 030f 	and.w	r3, r3, #15
 800b0fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b0fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b102:	2b00      	cmp	r3, #0
 800b104:	d10f      	bne.n	800b126 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b10a:	f003 0320 	and.w	r3, r3, #32
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d009      	beq.n	800b126 <HAL_UART_IRQHandler+0x66>
 800b112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b116:	f003 0320 	and.w	r3, r3, #32
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d003      	beq.n	800b126 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 fdfc 	bl	800bd1c <UART_Receive_IT>
      return;
 800b124:	e273      	b.n	800b60e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f000 80de 	beq.w	800b2ec <HAL_UART_IRQHandler+0x22c>
 800b130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b134:	f003 0301 	and.w	r3, r3, #1
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d106      	bne.n	800b14a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b13c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b140:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b144:	2b00      	cmp	r3, #0
 800b146:	f000 80d1 	beq.w	800b2ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b14a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b14e:	f003 0301 	and.w	r3, r3, #1
 800b152:	2b00      	cmp	r3, #0
 800b154:	d00b      	beq.n	800b16e <HAL_UART_IRQHandler+0xae>
 800b156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b15a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d005      	beq.n	800b16e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b166:	f043 0201 	orr.w	r2, r3, #1
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b16e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b172:	f003 0304 	and.w	r3, r3, #4
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00b      	beq.n	800b192 <HAL_UART_IRQHandler+0xd2>
 800b17a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b17e:	f003 0301 	and.w	r3, r3, #1
 800b182:	2b00      	cmp	r3, #0
 800b184:	d005      	beq.n	800b192 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b18a:	f043 0202 	orr.w	r2, r3, #2
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b196:	f003 0302 	and.w	r3, r3, #2
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00b      	beq.n	800b1b6 <HAL_UART_IRQHandler+0xf6>
 800b19e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1a2:	f003 0301 	and.w	r3, r3, #1
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d005      	beq.n	800b1b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1ae:	f043 0204 	orr.w	r2, r3, #4
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b1b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1ba:	f003 0308 	and.w	r3, r3, #8
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d011      	beq.n	800b1e6 <HAL_UART_IRQHandler+0x126>
 800b1c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1c6:	f003 0320 	and.w	r3, r3, #32
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d105      	bne.n	800b1da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b1ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1d2:	f003 0301 	and.w	r3, r3, #1
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d005      	beq.n	800b1e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1de:	f043 0208 	orr.w	r2, r3, #8
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	f000 820a 	beq.w	800b604 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b1f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1f4:	f003 0320 	and.w	r3, r3, #32
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d008      	beq.n	800b20e <HAL_UART_IRQHandler+0x14e>
 800b1fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b200:	f003 0320 	and.w	r3, r3, #32
 800b204:	2b00      	cmp	r3, #0
 800b206:	d002      	beq.n	800b20e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 fd87 	bl	800bd1c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	695b      	ldr	r3, [r3, #20]
 800b214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b218:	2b40      	cmp	r3, #64	@ 0x40
 800b21a:	bf0c      	ite	eq
 800b21c:	2301      	moveq	r3, #1
 800b21e:	2300      	movne	r3, #0
 800b220:	b2db      	uxtb	r3, r3
 800b222:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b22a:	f003 0308 	and.w	r3, r3, #8
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d103      	bne.n	800b23a <HAL_UART_IRQHandler+0x17a>
 800b232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b236:	2b00      	cmp	r3, #0
 800b238:	d04f      	beq.n	800b2da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 fc92 	bl	800bb64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b24a:	2b40      	cmp	r3, #64	@ 0x40
 800b24c:	d141      	bne.n	800b2d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	3314      	adds	r3, #20
 800b254:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b258:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b25c:	e853 3f00 	ldrex	r3, [r3]
 800b260:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b264:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b268:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b26c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	3314      	adds	r3, #20
 800b276:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b27a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b27e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b282:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b28a:	e841 2300 	strex	r3, r2, [r1]
 800b28e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1d9      	bne.n	800b24e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d013      	beq.n	800b2ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2a6:	4a8a      	ldr	r2, [pc, #552]	@ (800b4d0 <HAL_UART_IRQHandler+0x410>)
 800b2a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fc fd62 	bl	8007d78 <HAL_DMA_Abort_IT>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d016      	beq.n	800b2e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b2c4:	4610      	mov	r0, r2
 800b2c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2c8:	e00e      	b.n	800b2e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f9c0 	bl	800b650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2d0:	e00a      	b.n	800b2e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 f9bc 	bl	800b650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2d8:	e006      	b.n	800b2e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 f9b8 	bl	800b650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b2e6:	e18d      	b.n	800b604 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2e8:	bf00      	nop
    return;
 800b2ea:	e18b      	b.n	800b604 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	f040 8167 	bne.w	800b5c4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2fa:	f003 0310 	and.w	r3, r3, #16
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f000 8160 	beq.w	800b5c4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800b304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b308:	f003 0310 	and.w	r3, r3, #16
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f000 8159 	beq.w	800b5c4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b312:	2300      	movs	r3, #0
 800b314:	60bb      	str	r3, [r7, #8]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	60bb      	str	r3, [r7, #8]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	60bb      	str	r3, [r7, #8]
 800b326:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	695b      	ldr	r3, [r3, #20]
 800b32e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b332:	2b40      	cmp	r3, #64	@ 0x40
 800b334:	f040 80ce 	bne.w	800b4d4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b344:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b348:	2b00      	cmp	r3, #0
 800b34a:	f000 80a9 	beq.w	800b4a0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b356:	429a      	cmp	r2, r3
 800b358:	f080 80a2 	bcs.w	800b4a0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b362:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b368:	69db      	ldr	r3, [r3, #28]
 800b36a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b36e:	f000 8088 	beq.w	800b482 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	330c      	adds	r3, #12
 800b378:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b37c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b380:	e853 3f00 	ldrex	r3, [r3]
 800b384:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b388:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b38c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b390:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	330c      	adds	r3, #12
 800b39a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b39e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b3a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b3aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b3ae:	e841 2300 	strex	r3, r2, [r1]
 800b3b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b3b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1d9      	bne.n	800b372 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	3314      	adds	r3, #20
 800b3c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b3c8:	e853 3f00 	ldrex	r3, [r3]
 800b3cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b3ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b3d0:	f023 0301 	bic.w	r3, r3, #1
 800b3d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	3314      	adds	r3, #20
 800b3de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b3e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b3e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b3ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b3ee:	e841 2300 	strex	r3, r2, [r1]
 800b3f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b3f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d1e1      	bne.n	800b3be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	3314      	adds	r3, #20
 800b400:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b402:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b404:	e853 3f00 	ldrex	r3, [r3]
 800b408:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b40a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b40c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b410:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	3314      	adds	r3, #20
 800b41a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b41e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b420:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b422:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b424:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b426:	e841 2300 	strex	r3, r2, [r1]
 800b42a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b42c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d1e3      	bne.n	800b3fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2220      	movs	r2, #32
 800b436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	330c      	adds	r3, #12
 800b446:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b44a:	e853 3f00 	ldrex	r3, [r3]
 800b44e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b450:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b452:	f023 0310 	bic.w	r3, r3, #16
 800b456:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	330c      	adds	r3, #12
 800b460:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b464:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b466:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b468:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b46a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b46c:	e841 2300 	strex	r3, r2, [r1]
 800b470:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b472:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1e3      	bne.n	800b440 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7fc fc0b 	bl	8007c98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2202      	movs	r2, #2
 800b486:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b490:	b29b      	uxth	r3, r3
 800b492:	1ad3      	subs	r3, r2, r3
 800b494:	b29b      	uxth	r3, r3
 800b496:	4619      	mov	r1, r3
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f7f9 fafd 	bl	8004a98 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b49e:	e0b3      	b.n	800b608 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b4a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	f040 80ad 	bne.w	800b608 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4b2:	69db      	ldr	r3, [r3, #28]
 800b4b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4b8:	f040 80a6 	bne.w	800b608 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2202      	movs	r2, #2
 800b4c0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f7f9 fae5 	bl	8004a98 <HAL_UARTEx_RxEventCallback>
      return;
 800b4ce:	e09b      	b.n	800b608 <HAL_UART_IRQHandler+0x548>
 800b4d0:	0800bc2b 	.word	0x0800bc2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	1ad3      	subs	r3, r2, r3
 800b4e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	f000 808e 	beq.w	800b60c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800b4f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f000 8089 	beq.w	800b60c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	330c      	adds	r3, #12
 800b500:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b504:	e853 3f00 	ldrex	r3, [r3]
 800b508:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b50a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b50c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b510:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	330c      	adds	r3, #12
 800b51a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b51e:	647a      	str	r2, [r7, #68]	@ 0x44
 800b520:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b522:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b524:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b526:	e841 2300 	strex	r3, r2, [r1]
 800b52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b52c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d1e3      	bne.n	800b4fa <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	3314      	adds	r3, #20
 800b538:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53c:	e853 3f00 	ldrex	r3, [r3]
 800b540:	623b      	str	r3, [r7, #32]
   return(result);
 800b542:	6a3b      	ldr	r3, [r7, #32]
 800b544:	f023 0301 	bic.w	r3, r3, #1
 800b548:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	3314      	adds	r3, #20
 800b552:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b556:	633a      	str	r2, [r7, #48]	@ 0x30
 800b558:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b55a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b55c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b55e:	e841 2300 	strex	r3, r2, [r1]
 800b562:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1e3      	bne.n	800b532 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2220      	movs	r2, #32
 800b56e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	330c      	adds	r3, #12
 800b57e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	e853 3f00 	ldrex	r3, [r3]
 800b586:	60fb      	str	r3, [r7, #12]
   return(result);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f023 0310 	bic.w	r3, r3, #16
 800b58e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	330c      	adds	r3, #12
 800b598:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b59c:	61fa      	str	r2, [r7, #28]
 800b59e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a0:	69b9      	ldr	r1, [r7, #24]
 800b5a2:	69fa      	ldr	r2, [r7, #28]
 800b5a4:	e841 2300 	strex	r3, r2, [r1]
 800b5a8:	617b      	str	r3, [r7, #20]
   return(result);
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1e3      	bne.n	800b578 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2202      	movs	r2, #2
 800b5b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b5b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f7f9 fa6b 	bl	8004a98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b5c2:	e023      	b.n	800b60c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b5c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d009      	beq.n	800b5e4 <HAL_UART_IRQHandler+0x524>
 800b5d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d003      	beq.n	800b5e4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 fb35 	bl	800bc4c <UART_Transmit_IT>
    return;
 800b5e2:	e014      	b.n	800b60e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b5e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00e      	beq.n	800b60e <HAL_UART_IRQHandler+0x54e>
 800b5f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d008      	beq.n	800b60e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 fb75 	bl	800bcec <UART_EndTransmit_IT>
    return;
 800b602:	e004      	b.n	800b60e <HAL_UART_IRQHandler+0x54e>
    return;
 800b604:	bf00      	nop
 800b606:	e002      	b.n	800b60e <HAL_UART_IRQHandler+0x54e>
      return;
 800b608:	bf00      	nop
 800b60a:	e000      	b.n	800b60e <HAL_UART_IRQHandler+0x54e>
      return;
 800b60c:	bf00      	nop
  }
}
 800b60e:	37e8      	adds	r7, #232	@ 0xe8
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b61c:	bf00      	nop
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b630:	bf00      	nop
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b644:	bf00      	nop
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b658:	bf00      	nop
 800b65a:	370c      	adds	r7, #12
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b090      	sub	sp, #64	@ 0x40
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b670:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d137      	bne.n	800b6f0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b682:	2200      	movs	r2, #0
 800b684:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	3314      	adds	r3, #20
 800b68c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b690:	e853 3f00 	ldrex	r3, [r3]
 800b694:	623b      	str	r3, [r7, #32]
   return(result);
 800b696:	6a3b      	ldr	r3, [r7, #32]
 800b698:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b69c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b69e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	3314      	adds	r3, #20
 800b6a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b6a6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b6a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b6ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6ae:	e841 2300 	strex	r3, r2, [r1]
 800b6b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1e5      	bne.n	800b686 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b6ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	330c      	adds	r3, #12
 800b6c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	e853 3f00 	ldrex	r3, [r3]
 800b6c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	330c      	adds	r3, #12
 800b6d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b6da:	61fa      	str	r2, [r7, #28]
 800b6dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6de:	69b9      	ldr	r1, [r7, #24]
 800b6e0:	69fa      	ldr	r2, [r7, #28]
 800b6e2:	e841 2300 	strex	r3, r2, [r1]
 800b6e6:	617b      	str	r3, [r7, #20]
   return(result);
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d1e5      	bne.n	800b6ba <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6ee:	e002      	b.n	800b6f6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b6f0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b6f2:	f7f9 fa13 	bl	8004b1c <HAL_UART_TxCpltCallback>
}
 800b6f6:	bf00      	nop
 800b6f8:	3740      	adds	r7, #64	@ 0x40
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b084      	sub	sp, #16
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b70a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f7ff ff81 	bl	800b614 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b712:	bf00      	nop
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b09c      	sub	sp, #112	@ 0x70
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b726:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b732:	2b00      	cmp	r3, #0
 800b734:	d172      	bne.n	800b81c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b736:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b738:	2200      	movs	r2, #0
 800b73a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b73c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	330c      	adds	r3, #12
 800b742:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b744:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b746:	e853 3f00 	ldrex	r3, [r3]
 800b74a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b74c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b74e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b752:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b754:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	330c      	adds	r3, #12
 800b75a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b75c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b75e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b760:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b762:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b764:	e841 2300 	strex	r3, r2, [r1]
 800b768:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b76a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1e5      	bne.n	800b73c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	3314      	adds	r3, #20
 800b776:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b77a:	e853 3f00 	ldrex	r3, [r3]
 800b77e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b782:	f023 0301 	bic.w	r3, r3, #1
 800b786:	667b      	str	r3, [r7, #100]	@ 0x64
 800b788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	3314      	adds	r3, #20
 800b78e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b790:	647a      	str	r2, [r7, #68]	@ 0x44
 800b792:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b794:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b796:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b798:	e841 2300 	strex	r3, r2, [r1]
 800b79c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b79e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d1e5      	bne.n	800b770 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	3314      	adds	r3, #20
 800b7aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ae:	e853 3f00 	ldrex	r3, [r3]
 800b7b2:	623b      	str	r3, [r7, #32]
   return(result);
 800b7b4:	6a3b      	ldr	r3, [r7, #32]
 800b7b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7ba:	663b      	str	r3, [r7, #96]	@ 0x60
 800b7bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	3314      	adds	r3, #20
 800b7c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b7c4:	633a      	str	r2, [r7, #48]	@ 0x30
 800b7c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7cc:	e841 2300 	strex	r3, r2, [r1]
 800b7d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d1e5      	bne.n	800b7a4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b7d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7da:	2220      	movs	r2, #32
 800b7dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d119      	bne.n	800b81c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	330c      	adds	r3, #12
 800b7ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	e853 3f00 	ldrex	r3, [r3]
 800b7f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f023 0310 	bic.w	r3, r3, #16
 800b7fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b800:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	330c      	adds	r3, #12
 800b806:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b808:	61fa      	str	r2, [r7, #28]
 800b80a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80c:	69b9      	ldr	r1, [r7, #24]
 800b80e:	69fa      	ldr	r2, [r7, #28]
 800b810:	e841 2300 	strex	r3, r2, [r1]
 800b814:	617b      	str	r3, [r7, #20]
   return(result);
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1e5      	bne.n	800b7e8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b81c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b81e:	2200      	movs	r2, #0
 800b820:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b826:	2b01      	cmp	r3, #1
 800b828:	d106      	bne.n	800b838 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b82a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b82c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b82e:	4619      	mov	r1, r3
 800b830:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b832:	f7f9 f931 	bl	8004a98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b836:	e002      	b.n	800b83e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b838:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b83a:	f7ff fef5 	bl	800b628 <HAL_UART_RxCpltCallback>
}
 800b83e:	bf00      	nop
 800b840:	3770      	adds	r7, #112	@ 0x70
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b846:	b580      	push	{r7, lr}
 800b848:	b084      	sub	sp, #16
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b852:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2201      	movs	r2, #1
 800b858:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d108      	bne.n	800b874 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b866:	085b      	lsrs	r3, r3, #1
 800b868:	b29b      	uxth	r3, r3
 800b86a:	4619      	mov	r1, r3
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	f7f9 f913 	bl	8004a98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b872:	e002      	b.n	800b87a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f7ff fee1 	bl	800b63c <HAL_UART_RxHalfCpltCallback>
}
 800b87a:	bf00      	nop
 800b87c:	3710      	adds	r7, #16
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}

0800b882 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b882:	b580      	push	{r7, lr}
 800b884:	b084      	sub	sp, #16
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b88a:	2300      	movs	r3, #0
 800b88c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b892:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	695b      	ldr	r3, [r3, #20]
 800b89a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b89e:	2b80      	cmp	r3, #128	@ 0x80
 800b8a0:	bf0c      	ite	eq
 800b8a2:	2301      	moveq	r3, #1
 800b8a4:	2300      	movne	r3, #0
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b8b0:	b2db      	uxtb	r3, r3
 800b8b2:	2b21      	cmp	r3, #33	@ 0x21
 800b8b4:	d108      	bne.n	800b8c8 <UART_DMAError+0x46>
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d005      	beq.n	800b8c8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800b8c2:	68b8      	ldr	r0, [r7, #8]
 800b8c4:	f000 f926 	bl	800bb14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	695b      	ldr	r3, [r3, #20]
 800b8ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8d2:	2b40      	cmp	r3, #64	@ 0x40
 800b8d4:	bf0c      	ite	eq
 800b8d6:	2301      	moveq	r3, #1
 800b8d8:	2300      	movne	r3, #0
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	2b22      	cmp	r3, #34	@ 0x22
 800b8e8:	d108      	bne.n	800b8fc <UART_DMAError+0x7a>
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d005      	beq.n	800b8fc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800b8f6:	68b8      	ldr	r0, [r7, #8]
 800b8f8:	f000 f934 	bl	800bb64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b900:	f043 0210 	orr.w	r2, r3, #16
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b908:	68b8      	ldr	r0, [r7, #8]
 800b90a:	f7ff fea1 	bl	800b650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b90e:	bf00      	nop
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b086      	sub	sp, #24
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	60f8      	str	r0, [r7, #12]
 800b91e:	60b9      	str	r1, [r7, #8]
 800b920:	603b      	str	r3, [r7, #0]
 800b922:	4613      	mov	r3, r2
 800b924:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b926:	e03b      	b.n	800b9a0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b928:	6a3b      	ldr	r3, [r7, #32]
 800b92a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b92e:	d037      	beq.n	800b9a0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b930:	f7fb ff38 	bl	80077a4 <HAL_GetTick>
 800b934:	4602      	mov	r2, r0
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	1ad3      	subs	r3, r2, r3
 800b93a:	6a3a      	ldr	r2, [r7, #32]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d302      	bcc.n	800b946 <UART_WaitOnFlagUntilTimeout+0x30>
 800b940:	6a3b      	ldr	r3, [r7, #32]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d101      	bne.n	800b94a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b946:	2303      	movs	r3, #3
 800b948:	e03a      	b.n	800b9c0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	f003 0304 	and.w	r3, r3, #4
 800b954:	2b00      	cmp	r3, #0
 800b956:	d023      	beq.n	800b9a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	2b80      	cmp	r3, #128	@ 0x80
 800b95c:	d020      	beq.n	800b9a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	2b40      	cmp	r3, #64	@ 0x40
 800b962:	d01d      	beq.n	800b9a0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f003 0308 	and.w	r3, r3, #8
 800b96e:	2b08      	cmp	r3, #8
 800b970:	d116      	bne.n	800b9a0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b972:	2300      	movs	r3, #0
 800b974:	617b      	str	r3, [r7, #20]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	617b      	str	r3, [r7, #20]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	617b      	str	r3, [r7, #20]
 800b986:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f000 f8eb 	bl	800bb64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2208      	movs	r2, #8
 800b992:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b99c:	2301      	movs	r3, #1
 800b99e:	e00f      	b.n	800b9c0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	4013      	ands	r3, r2
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	bf0c      	ite	eq
 800b9b0:	2301      	moveq	r3, #1
 800b9b2:	2300      	movne	r3, #0
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	79fb      	ldrb	r3, [r7, #7]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d0b4      	beq.n	800b928 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b9be:	2300      	movs	r3, #0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3718      	adds	r7, #24
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b098      	sub	sp, #96	@ 0x60
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b9d6:	68ba      	ldr	r2, [r7, #8]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	88fa      	ldrh	r2, [r7, #6]
 800b9e0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2222      	movs	r2, #34	@ 0x22
 800b9ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9f4:	4a44      	ldr	r2, [pc, #272]	@ (800bb08 <UART_Start_Receive_DMA+0x140>)
 800b9f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9fc:	4a43      	ldr	r2, [pc, #268]	@ (800bb0c <UART_Start_Receive_DMA+0x144>)
 800b9fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba04:	4a42      	ldr	r2, [pc, #264]	@ (800bb10 <UART_Start_Receive_DMA+0x148>)
 800ba06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ba10:	f107 0308 	add.w	r3, r7, #8
 800ba14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	3304      	adds	r3, #4
 800ba20:	4619      	mov	r1, r3
 800ba22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	88fb      	ldrh	r3, [r7, #6]
 800ba28:	f7fc f8de 	bl	8007be8 <HAL_DMA_Start_IT>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d008      	beq.n	800ba44 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2210      	movs	r2, #16
 800ba36:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2220      	movs	r2, #32
 800ba3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	e05d      	b.n	800bb00 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ba44:	2300      	movs	r3, #0
 800ba46:	613b      	str	r3, [r7, #16]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	613b      	str	r3, [r7, #16]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	613b      	str	r3, [r7, #16]
 800ba58:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	691b      	ldr	r3, [r3, #16]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d019      	beq.n	800ba96 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	330c      	adds	r3, #12
 800ba68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba6c:	e853 3f00 	ldrex	r3, [r3]
 800ba70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba78:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	330c      	adds	r3, #12
 800ba80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ba82:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ba84:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba86:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ba88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ba8a:	e841 2300 	strex	r3, r2, [r1]
 800ba8e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ba90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1e5      	bne.n	800ba62 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	3314      	adds	r3, #20
 800ba9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa0:	e853 3f00 	ldrex	r3, [r3]
 800baa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800baa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa8:	f043 0301 	orr.w	r3, r3, #1
 800baac:	657b      	str	r3, [r7, #84]	@ 0x54
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	3314      	adds	r3, #20
 800bab4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bab6:	63ba      	str	r2, [r7, #56]	@ 0x38
 800bab8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800babc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800babe:	e841 2300 	strex	r3, r2, [r1]
 800bac2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1e5      	bne.n	800ba96 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	3314      	adds	r3, #20
 800bad0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad2:	69bb      	ldr	r3, [r7, #24]
 800bad4:	e853 3f00 	ldrex	r3, [r3]
 800bad8:	617b      	str	r3, [r7, #20]
   return(result);
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bae0:	653b      	str	r3, [r7, #80]	@ 0x50
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	3314      	adds	r3, #20
 800bae8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800baea:	627a      	str	r2, [r7, #36]	@ 0x24
 800baec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baee:	6a39      	ldr	r1, [r7, #32]
 800baf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800baf2:	e841 2300 	strex	r3, r2, [r1]
 800baf6:	61fb      	str	r3, [r7, #28]
   return(result);
 800baf8:	69fb      	ldr	r3, [r7, #28]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1e5      	bne.n	800baca <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800bafe:	2300      	movs	r3, #0
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3760      	adds	r7, #96	@ 0x60
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	0800b71b 	.word	0x0800b71b
 800bb0c:	0800b847 	.word	0x0800b847
 800bb10:	0800b883 	.word	0x0800b883

0800bb14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b089      	sub	sp, #36	@ 0x24
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	330c      	adds	r3, #12
 800bb22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	e853 3f00 	ldrex	r3, [r3]
 800bb2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bb32:	61fb      	str	r3, [r7, #28]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	330c      	adds	r3, #12
 800bb3a:	69fa      	ldr	r2, [r7, #28]
 800bb3c:	61ba      	str	r2, [r7, #24]
 800bb3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb40:	6979      	ldr	r1, [r7, #20]
 800bb42:	69ba      	ldr	r2, [r7, #24]
 800bb44:	e841 2300 	strex	r3, r2, [r1]
 800bb48:	613b      	str	r3, [r7, #16]
   return(result);
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d1e5      	bne.n	800bb1c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2220      	movs	r2, #32
 800bb54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800bb58:	bf00      	nop
 800bb5a:	3724      	adds	r7, #36	@ 0x24
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr

0800bb64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b095      	sub	sp, #84	@ 0x54
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	330c      	adds	r3, #12
 800bb72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb76:	e853 3f00 	ldrex	r3, [r3]
 800bb7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bb7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bb82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	330c      	adds	r3, #12
 800bb8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb8c:	643a      	str	r2, [r7, #64]	@ 0x40
 800bb8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bb92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bb94:	e841 2300 	strex	r3, r2, [r1]
 800bb98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bb9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d1e5      	bne.n	800bb6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	3314      	adds	r3, #20
 800bba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba8:	6a3b      	ldr	r3, [r7, #32]
 800bbaa:	e853 3f00 	ldrex	r3, [r3]
 800bbae:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	f023 0301 	bic.w	r3, r3, #1
 800bbb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	3314      	adds	r3, #20
 800bbbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bbc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bbc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bbc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbc8:	e841 2300 	strex	r3, r2, [r1]
 800bbcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d1e5      	bne.n	800bba0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d119      	bne.n	800bc10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	330c      	adds	r3, #12
 800bbe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	e853 3f00 	ldrex	r3, [r3]
 800bbea:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	f023 0310 	bic.w	r3, r3, #16
 800bbf2:	647b      	str	r3, [r7, #68]	@ 0x44
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	330c      	adds	r3, #12
 800bbfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bbfc:	61ba      	str	r2, [r7, #24]
 800bbfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc00:	6979      	ldr	r1, [r7, #20]
 800bc02:	69ba      	ldr	r2, [r7, #24]
 800bc04:	e841 2300 	strex	r3, r2, [r1]
 800bc08:	613b      	str	r3, [r7, #16]
   return(result);
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d1e5      	bne.n	800bbdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2220      	movs	r2, #32
 800bc14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bc1e:	bf00      	nop
 800bc20:	3754      	adds	r7, #84	@ 0x54
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr

0800bc2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b084      	sub	sp, #16
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc3e:	68f8      	ldr	r0, [r7, #12]
 800bc40:	f7ff fd06 	bl	800b650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc44:	bf00      	nop
 800bc46:	3710      	adds	r7, #16
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b085      	sub	sp, #20
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	2b21      	cmp	r3, #33	@ 0x21
 800bc5e:	d13e      	bne.n	800bcde <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc68:	d114      	bne.n	800bc94 <UART_Transmit_IT+0x48>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	691b      	ldr	r3, [r3, #16]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d110      	bne.n	800bc94 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6a1b      	ldr	r3, [r3, #32]
 800bc76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	881b      	ldrh	r3, [r3, #0]
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc86:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6a1b      	ldr	r3, [r3, #32]
 800bc8c:	1c9a      	adds	r2, r3, #2
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	621a      	str	r2, [r3, #32]
 800bc92:	e008      	b.n	800bca6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6a1b      	ldr	r3, [r3, #32]
 800bc98:	1c59      	adds	r1, r3, #1
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	6211      	str	r1, [r2, #32]
 800bc9e:	781a      	ldrb	r2, [r3, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	3b01      	subs	r3, #1
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d10f      	bne.n	800bcda <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	68da      	ldr	r2, [r3, #12]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bcc8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	68da      	ldr	r2, [r3, #12]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bcd8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	e000      	b.n	800bce0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bcde:	2302      	movs	r3, #2
  }
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3714      	adds	r7, #20
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	68da      	ldr	r2, [r3, #12]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bd02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2220      	movs	r2, #32
 800bd08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f7f8 ff05 	bl	8004b1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bd12:	2300      	movs	r3, #0
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3708      	adds	r7, #8
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b08c      	sub	sp, #48	@ 0x30
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800bd24:	2300      	movs	r3, #0
 800bd26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	2b22      	cmp	r3, #34	@ 0x22
 800bd36:	f040 80aa 	bne.w	800be8e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd42:	d115      	bne.n	800bd70 <UART_Receive_IT+0x54>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	691b      	ldr	r3, [r3, #16]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d111      	bne.n	800bd70 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd50:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd68:	1c9a      	adds	r2, r3, #2
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	629a      	str	r2, [r3, #40]	@ 0x28
 800bd6e:	e024      	b.n	800bdba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd7e:	d007      	beq.n	800bd90 <UART_Receive_IT+0x74>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d10a      	bne.n	800bd9e <UART_Receive_IT+0x82>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d106      	bne.n	800bd9e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	b2da      	uxtb	r2, r3
 800bd98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd9a:	701a      	strb	r2, [r3, #0]
 800bd9c:	e008      	b.n	800bdb0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdaa:	b2da      	uxtb	r2, r3
 800bdac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdb4:	1c5a      	adds	r2, r3, #1
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	3b01      	subs	r3, #1
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d15d      	bne.n	800be8a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	68da      	ldr	r2, [r3, #12]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f022 0220 	bic.w	r2, r2, #32
 800bddc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	68da      	ldr	r2, [r3, #12]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bdec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	695a      	ldr	r2, [r3, #20]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f022 0201 	bic.w	r2, r2, #1
 800bdfc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2220      	movs	r2, #32
 800be02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be10:	2b01      	cmp	r3, #1
 800be12:	d135      	bne.n	800be80 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	330c      	adds	r3, #12
 800be20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	e853 3f00 	ldrex	r3, [r3]
 800be28:	613b      	str	r3, [r7, #16]
   return(result);
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	f023 0310 	bic.w	r3, r3, #16
 800be30:	627b      	str	r3, [r7, #36]	@ 0x24
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	330c      	adds	r3, #12
 800be38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be3a:	623a      	str	r2, [r7, #32]
 800be3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3e:	69f9      	ldr	r1, [r7, #28]
 800be40:	6a3a      	ldr	r2, [r7, #32]
 800be42:	e841 2300 	strex	r3, r2, [r1]
 800be46:	61bb      	str	r3, [r7, #24]
   return(result);
 800be48:	69bb      	ldr	r3, [r7, #24]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1e5      	bne.n	800be1a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f003 0310 	and.w	r3, r3, #16
 800be58:	2b10      	cmp	r3, #16
 800be5a:	d10a      	bne.n	800be72 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be5c:	2300      	movs	r3, #0
 800be5e:	60fb      	str	r3, [r7, #12]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	60fb      	str	r3, [r7, #12]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	60fb      	str	r3, [r7, #12]
 800be70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800be76:	4619      	mov	r1, r3
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f7f8 fe0d 	bl	8004a98 <HAL_UARTEx_RxEventCallback>
 800be7e:	e002      	b.n	800be86 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f7ff fbd1 	bl	800b628 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800be86:	2300      	movs	r3, #0
 800be88:	e002      	b.n	800be90 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800be8a:	2300      	movs	r3, #0
 800be8c:	e000      	b.n	800be90 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800be8e:	2302      	movs	r3, #2
  }
}
 800be90:	4618      	mov	r0, r3
 800be92:	3730      	adds	r7, #48	@ 0x30
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be9c:	b0c0      	sub	sp, #256	@ 0x100
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800beb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800beb4:	68d9      	ldr	r1, [r3, #12]
 800beb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	ea40 0301 	orr.w	r3, r0, r1
 800bec0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bec6:	689a      	ldr	r2, [r3, #8]
 800bec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	431a      	orrs	r2, r3
 800bed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bed4:	695b      	ldr	r3, [r3, #20]
 800bed6:	431a      	orrs	r2, r3
 800bed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bedc:	69db      	ldr	r3, [r3, #28]
 800bede:	4313      	orrs	r3, r2
 800bee0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800bef0:	f021 010c 	bic.w	r1, r1, #12
 800bef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800befe:	430b      	orrs	r3, r1
 800bf00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bf02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	695b      	ldr	r3, [r3, #20]
 800bf0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800bf0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf12:	6999      	ldr	r1, [r3, #24]
 800bf14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	ea40 0301 	orr.w	r3, r0, r1
 800bf1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bf20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf24:	681a      	ldr	r2, [r3, #0]
 800bf26:	4b8f      	ldr	r3, [pc, #572]	@ (800c164 <UART_SetConfig+0x2cc>)
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d005      	beq.n	800bf38 <UART_SetConfig+0xa0>
 800bf2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	4b8d      	ldr	r3, [pc, #564]	@ (800c168 <UART_SetConfig+0x2d0>)
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d104      	bne.n	800bf42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bf38:	f7fd fdbe 	bl	8009ab8 <HAL_RCC_GetPCLK2Freq>
 800bf3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800bf40:	e003      	b.n	800bf4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bf42:	f7fd fda5 	bl	8009a90 <HAL_RCC_GetPCLK1Freq>
 800bf46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf4e:	69db      	ldr	r3, [r3, #28]
 800bf50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bf54:	f040 810c 	bne.w	800c170 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bf58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bf62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800bf66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800bf6a:	4622      	mov	r2, r4
 800bf6c:	462b      	mov	r3, r5
 800bf6e:	1891      	adds	r1, r2, r2
 800bf70:	65b9      	str	r1, [r7, #88]	@ 0x58
 800bf72:	415b      	adcs	r3, r3
 800bf74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bf76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800bf7a:	4621      	mov	r1, r4
 800bf7c:	eb12 0801 	adds.w	r8, r2, r1
 800bf80:	4629      	mov	r1, r5
 800bf82:	eb43 0901 	adc.w	r9, r3, r1
 800bf86:	f04f 0200 	mov.w	r2, #0
 800bf8a:	f04f 0300 	mov.w	r3, #0
 800bf8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bf92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bf96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bf9a:	4690      	mov	r8, r2
 800bf9c:	4699      	mov	r9, r3
 800bf9e:	4623      	mov	r3, r4
 800bfa0:	eb18 0303 	adds.w	r3, r8, r3
 800bfa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bfa8:	462b      	mov	r3, r5
 800bfaa:	eb49 0303 	adc.w	r3, r9, r3
 800bfae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bfb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bfbe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800bfc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	18db      	adds	r3, r3, r3
 800bfca:	653b      	str	r3, [r7, #80]	@ 0x50
 800bfcc:	4613      	mov	r3, r2
 800bfce:	eb42 0303 	adc.w	r3, r2, r3
 800bfd2:	657b      	str	r3, [r7, #84]	@ 0x54
 800bfd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800bfd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800bfdc:	f7f4 ffb2 	bl	8000f44 <__aeabi_uldivmod>
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	460b      	mov	r3, r1
 800bfe4:	4b61      	ldr	r3, [pc, #388]	@ (800c16c <UART_SetConfig+0x2d4>)
 800bfe6:	fba3 2302 	umull	r2, r3, r3, r2
 800bfea:	095b      	lsrs	r3, r3, #5
 800bfec:	011c      	lsls	r4, r3, #4
 800bfee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bff2:	2200      	movs	r2, #0
 800bff4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bff8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800bffc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c000:	4642      	mov	r2, r8
 800c002:	464b      	mov	r3, r9
 800c004:	1891      	adds	r1, r2, r2
 800c006:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c008:	415b      	adcs	r3, r3
 800c00a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c00c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c010:	4641      	mov	r1, r8
 800c012:	eb12 0a01 	adds.w	sl, r2, r1
 800c016:	4649      	mov	r1, r9
 800c018:	eb43 0b01 	adc.w	fp, r3, r1
 800c01c:	f04f 0200 	mov.w	r2, #0
 800c020:	f04f 0300 	mov.w	r3, #0
 800c024:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c028:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c02c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c030:	4692      	mov	sl, r2
 800c032:	469b      	mov	fp, r3
 800c034:	4643      	mov	r3, r8
 800c036:	eb1a 0303 	adds.w	r3, sl, r3
 800c03a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c03e:	464b      	mov	r3, r9
 800c040:	eb4b 0303 	adc.w	r3, fp, r3
 800c044:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c054:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c058:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c05c:	460b      	mov	r3, r1
 800c05e:	18db      	adds	r3, r3, r3
 800c060:	643b      	str	r3, [r7, #64]	@ 0x40
 800c062:	4613      	mov	r3, r2
 800c064:	eb42 0303 	adc.w	r3, r2, r3
 800c068:	647b      	str	r3, [r7, #68]	@ 0x44
 800c06a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c06e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c072:	f7f4 ff67 	bl	8000f44 <__aeabi_uldivmod>
 800c076:	4602      	mov	r2, r0
 800c078:	460b      	mov	r3, r1
 800c07a:	4611      	mov	r1, r2
 800c07c:	4b3b      	ldr	r3, [pc, #236]	@ (800c16c <UART_SetConfig+0x2d4>)
 800c07e:	fba3 2301 	umull	r2, r3, r3, r1
 800c082:	095b      	lsrs	r3, r3, #5
 800c084:	2264      	movs	r2, #100	@ 0x64
 800c086:	fb02 f303 	mul.w	r3, r2, r3
 800c08a:	1acb      	subs	r3, r1, r3
 800c08c:	00db      	lsls	r3, r3, #3
 800c08e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c092:	4b36      	ldr	r3, [pc, #216]	@ (800c16c <UART_SetConfig+0x2d4>)
 800c094:	fba3 2302 	umull	r2, r3, r3, r2
 800c098:	095b      	lsrs	r3, r3, #5
 800c09a:	005b      	lsls	r3, r3, #1
 800c09c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c0a0:	441c      	add	r4, r3
 800c0a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c0ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c0b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c0b4:	4642      	mov	r2, r8
 800c0b6:	464b      	mov	r3, r9
 800c0b8:	1891      	adds	r1, r2, r2
 800c0ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c0bc:	415b      	adcs	r3, r3
 800c0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c0c4:	4641      	mov	r1, r8
 800c0c6:	1851      	adds	r1, r2, r1
 800c0c8:	6339      	str	r1, [r7, #48]	@ 0x30
 800c0ca:	4649      	mov	r1, r9
 800c0cc:	414b      	adcs	r3, r1
 800c0ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0d0:	f04f 0200 	mov.w	r2, #0
 800c0d4:	f04f 0300 	mov.w	r3, #0
 800c0d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c0dc:	4659      	mov	r1, fp
 800c0de:	00cb      	lsls	r3, r1, #3
 800c0e0:	4651      	mov	r1, sl
 800c0e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c0e6:	4651      	mov	r1, sl
 800c0e8:	00ca      	lsls	r2, r1, #3
 800c0ea:	4610      	mov	r0, r2
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	4642      	mov	r2, r8
 800c0f2:	189b      	adds	r3, r3, r2
 800c0f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c0f8:	464b      	mov	r3, r9
 800c0fa:	460a      	mov	r2, r1
 800c0fc:	eb42 0303 	adc.w	r3, r2, r3
 800c100:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	2200      	movs	r2, #0
 800c10c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c110:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c114:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c118:	460b      	mov	r3, r1
 800c11a:	18db      	adds	r3, r3, r3
 800c11c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c11e:	4613      	mov	r3, r2
 800c120:	eb42 0303 	adc.w	r3, r2, r3
 800c124:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c126:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c12a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c12e:	f7f4 ff09 	bl	8000f44 <__aeabi_uldivmod>
 800c132:	4602      	mov	r2, r0
 800c134:	460b      	mov	r3, r1
 800c136:	4b0d      	ldr	r3, [pc, #52]	@ (800c16c <UART_SetConfig+0x2d4>)
 800c138:	fba3 1302 	umull	r1, r3, r3, r2
 800c13c:	095b      	lsrs	r3, r3, #5
 800c13e:	2164      	movs	r1, #100	@ 0x64
 800c140:	fb01 f303 	mul.w	r3, r1, r3
 800c144:	1ad3      	subs	r3, r2, r3
 800c146:	00db      	lsls	r3, r3, #3
 800c148:	3332      	adds	r3, #50	@ 0x32
 800c14a:	4a08      	ldr	r2, [pc, #32]	@ (800c16c <UART_SetConfig+0x2d4>)
 800c14c:	fba2 2303 	umull	r2, r3, r2, r3
 800c150:	095b      	lsrs	r3, r3, #5
 800c152:	f003 0207 	and.w	r2, r3, #7
 800c156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4422      	add	r2, r4
 800c15e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c160:	e106      	b.n	800c370 <UART_SetConfig+0x4d8>
 800c162:	bf00      	nop
 800c164:	40011000 	.word	0x40011000
 800c168:	40011400 	.word	0x40011400
 800c16c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c174:	2200      	movs	r2, #0
 800c176:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c17a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c17e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c182:	4642      	mov	r2, r8
 800c184:	464b      	mov	r3, r9
 800c186:	1891      	adds	r1, r2, r2
 800c188:	6239      	str	r1, [r7, #32]
 800c18a:	415b      	adcs	r3, r3
 800c18c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c18e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c192:	4641      	mov	r1, r8
 800c194:	1854      	adds	r4, r2, r1
 800c196:	4649      	mov	r1, r9
 800c198:	eb43 0501 	adc.w	r5, r3, r1
 800c19c:	f04f 0200 	mov.w	r2, #0
 800c1a0:	f04f 0300 	mov.w	r3, #0
 800c1a4:	00eb      	lsls	r3, r5, #3
 800c1a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c1aa:	00e2      	lsls	r2, r4, #3
 800c1ac:	4614      	mov	r4, r2
 800c1ae:	461d      	mov	r5, r3
 800c1b0:	4643      	mov	r3, r8
 800c1b2:	18e3      	adds	r3, r4, r3
 800c1b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c1b8:	464b      	mov	r3, r9
 800c1ba:	eb45 0303 	adc.w	r3, r5, r3
 800c1be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c1c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c1ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c1d2:	f04f 0200 	mov.w	r2, #0
 800c1d6:	f04f 0300 	mov.w	r3, #0
 800c1da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c1de:	4629      	mov	r1, r5
 800c1e0:	008b      	lsls	r3, r1, #2
 800c1e2:	4621      	mov	r1, r4
 800c1e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c1e8:	4621      	mov	r1, r4
 800c1ea:	008a      	lsls	r2, r1, #2
 800c1ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c1f0:	f7f4 fea8 	bl	8000f44 <__aeabi_uldivmod>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	4b60      	ldr	r3, [pc, #384]	@ (800c37c <UART_SetConfig+0x4e4>)
 800c1fa:	fba3 2302 	umull	r2, r3, r3, r2
 800c1fe:	095b      	lsrs	r3, r3, #5
 800c200:	011c      	lsls	r4, r3, #4
 800c202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c206:	2200      	movs	r2, #0
 800c208:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c20c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c210:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c214:	4642      	mov	r2, r8
 800c216:	464b      	mov	r3, r9
 800c218:	1891      	adds	r1, r2, r2
 800c21a:	61b9      	str	r1, [r7, #24]
 800c21c:	415b      	adcs	r3, r3
 800c21e:	61fb      	str	r3, [r7, #28]
 800c220:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c224:	4641      	mov	r1, r8
 800c226:	1851      	adds	r1, r2, r1
 800c228:	6139      	str	r1, [r7, #16]
 800c22a:	4649      	mov	r1, r9
 800c22c:	414b      	adcs	r3, r1
 800c22e:	617b      	str	r3, [r7, #20]
 800c230:	f04f 0200 	mov.w	r2, #0
 800c234:	f04f 0300 	mov.w	r3, #0
 800c238:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c23c:	4659      	mov	r1, fp
 800c23e:	00cb      	lsls	r3, r1, #3
 800c240:	4651      	mov	r1, sl
 800c242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c246:	4651      	mov	r1, sl
 800c248:	00ca      	lsls	r2, r1, #3
 800c24a:	4610      	mov	r0, r2
 800c24c:	4619      	mov	r1, r3
 800c24e:	4603      	mov	r3, r0
 800c250:	4642      	mov	r2, r8
 800c252:	189b      	adds	r3, r3, r2
 800c254:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c258:	464b      	mov	r3, r9
 800c25a:	460a      	mov	r2, r1
 800c25c:	eb42 0303 	adc.w	r3, r2, r3
 800c260:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c26e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c270:	f04f 0200 	mov.w	r2, #0
 800c274:	f04f 0300 	mov.w	r3, #0
 800c278:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c27c:	4649      	mov	r1, r9
 800c27e:	008b      	lsls	r3, r1, #2
 800c280:	4641      	mov	r1, r8
 800c282:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c286:	4641      	mov	r1, r8
 800c288:	008a      	lsls	r2, r1, #2
 800c28a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c28e:	f7f4 fe59 	bl	8000f44 <__aeabi_uldivmod>
 800c292:	4602      	mov	r2, r0
 800c294:	460b      	mov	r3, r1
 800c296:	4611      	mov	r1, r2
 800c298:	4b38      	ldr	r3, [pc, #224]	@ (800c37c <UART_SetConfig+0x4e4>)
 800c29a:	fba3 2301 	umull	r2, r3, r3, r1
 800c29e:	095b      	lsrs	r3, r3, #5
 800c2a0:	2264      	movs	r2, #100	@ 0x64
 800c2a2:	fb02 f303 	mul.w	r3, r2, r3
 800c2a6:	1acb      	subs	r3, r1, r3
 800c2a8:	011b      	lsls	r3, r3, #4
 800c2aa:	3332      	adds	r3, #50	@ 0x32
 800c2ac:	4a33      	ldr	r2, [pc, #204]	@ (800c37c <UART_SetConfig+0x4e4>)
 800c2ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c2b2:	095b      	lsrs	r3, r3, #5
 800c2b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c2b8:	441c      	add	r4, r3
 800c2ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c2be:	2200      	movs	r2, #0
 800c2c0:	673b      	str	r3, [r7, #112]	@ 0x70
 800c2c2:	677a      	str	r2, [r7, #116]	@ 0x74
 800c2c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c2c8:	4642      	mov	r2, r8
 800c2ca:	464b      	mov	r3, r9
 800c2cc:	1891      	adds	r1, r2, r2
 800c2ce:	60b9      	str	r1, [r7, #8]
 800c2d0:	415b      	adcs	r3, r3
 800c2d2:	60fb      	str	r3, [r7, #12]
 800c2d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c2d8:	4641      	mov	r1, r8
 800c2da:	1851      	adds	r1, r2, r1
 800c2dc:	6039      	str	r1, [r7, #0]
 800c2de:	4649      	mov	r1, r9
 800c2e0:	414b      	adcs	r3, r1
 800c2e2:	607b      	str	r3, [r7, #4]
 800c2e4:	f04f 0200 	mov.w	r2, #0
 800c2e8:	f04f 0300 	mov.w	r3, #0
 800c2ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c2f0:	4659      	mov	r1, fp
 800c2f2:	00cb      	lsls	r3, r1, #3
 800c2f4:	4651      	mov	r1, sl
 800c2f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c2fa:	4651      	mov	r1, sl
 800c2fc:	00ca      	lsls	r2, r1, #3
 800c2fe:	4610      	mov	r0, r2
 800c300:	4619      	mov	r1, r3
 800c302:	4603      	mov	r3, r0
 800c304:	4642      	mov	r2, r8
 800c306:	189b      	adds	r3, r3, r2
 800c308:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c30a:	464b      	mov	r3, r9
 800c30c:	460a      	mov	r2, r1
 800c30e:	eb42 0303 	adc.w	r3, r2, r3
 800c312:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	2200      	movs	r2, #0
 800c31c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c31e:	667a      	str	r2, [r7, #100]	@ 0x64
 800c320:	f04f 0200 	mov.w	r2, #0
 800c324:	f04f 0300 	mov.w	r3, #0
 800c328:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c32c:	4649      	mov	r1, r9
 800c32e:	008b      	lsls	r3, r1, #2
 800c330:	4641      	mov	r1, r8
 800c332:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c336:	4641      	mov	r1, r8
 800c338:	008a      	lsls	r2, r1, #2
 800c33a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c33e:	f7f4 fe01 	bl	8000f44 <__aeabi_uldivmod>
 800c342:	4602      	mov	r2, r0
 800c344:	460b      	mov	r3, r1
 800c346:	4b0d      	ldr	r3, [pc, #52]	@ (800c37c <UART_SetConfig+0x4e4>)
 800c348:	fba3 1302 	umull	r1, r3, r3, r2
 800c34c:	095b      	lsrs	r3, r3, #5
 800c34e:	2164      	movs	r1, #100	@ 0x64
 800c350:	fb01 f303 	mul.w	r3, r1, r3
 800c354:	1ad3      	subs	r3, r2, r3
 800c356:	011b      	lsls	r3, r3, #4
 800c358:	3332      	adds	r3, #50	@ 0x32
 800c35a:	4a08      	ldr	r2, [pc, #32]	@ (800c37c <UART_SetConfig+0x4e4>)
 800c35c:	fba2 2303 	umull	r2, r3, r2, r3
 800c360:	095b      	lsrs	r3, r3, #5
 800c362:	f003 020f 	and.w	r2, r3, #15
 800c366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4422      	add	r2, r4
 800c36e:	609a      	str	r2, [r3, #8]
}
 800c370:	bf00      	nop
 800c372:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c376:	46bd      	mov	sp, r7
 800c378:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c37c:	51eb851f 	.word	0x51eb851f

0800c380 <__cvt>:
 800c380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c384:	ec57 6b10 	vmov	r6, r7, d0
 800c388:	2f00      	cmp	r7, #0
 800c38a:	460c      	mov	r4, r1
 800c38c:	4619      	mov	r1, r3
 800c38e:	463b      	mov	r3, r7
 800c390:	bfbb      	ittet	lt
 800c392:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c396:	461f      	movlt	r7, r3
 800c398:	2300      	movge	r3, #0
 800c39a:	232d      	movlt	r3, #45	@ 0x2d
 800c39c:	700b      	strb	r3, [r1, #0]
 800c39e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c3a0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c3a4:	4691      	mov	r9, r2
 800c3a6:	f023 0820 	bic.w	r8, r3, #32
 800c3aa:	bfbc      	itt	lt
 800c3ac:	4632      	movlt	r2, r6
 800c3ae:	4616      	movlt	r6, r2
 800c3b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c3b4:	d005      	beq.n	800c3c2 <__cvt+0x42>
 800c3b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c3ba:	d100      	bne.n	800c3be <__cvt+0x3e>
 800c3bc:	3401      	adds	r4, #1
 800c3be:	2102      	movs	r1, #2
 800c3c0:	e000      	b.n	800c3c4 <__cvt+0x44>
 800c3c2:	2103      	movs	r1, #3
 800c3c4:	ab03      	add	r3, sp, #12
 800c3c6:	9301      	str	r3, [sp, #4]
 800c3c8:	ab02      	add	r3, sp, #8
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	ec47 6b10 	vmov	d0, r6, r7
 800c3d0:	4653      	mov	r3, sl
 800c3d2:	4622      	mov	r2, r4
 800c3d4:	f000 fe58 	bl	800d088 <_dtoa_r>
 800c3d8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c3dc:	4605      	mov	r5, r0
 800c3de:	d119      	bne.n	800c414 <__cvt+0x94>
 800c3e0:	f019 0f01 	tst.w	r9, #1
 800c3e4:	d00e      	beq.n	800c404 <__cvt+0x84>
 800c3e6:	eb00 0904 	add.w	r9, r0, r4
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	4639      	mov	r1, r7
 800c3f2:	f7f4 fb89 	bl	8000b08 <__aeabi_dcmpeq>
 800c3f6:	b108      	cbz	r0, 800c3fc <__cvt+0x7c>
 800c3f8:	f8cd 900c 	str.w	r9, [sp, #12]
 800c3fc:	2230      	movs	r2, #48	@ 0x30
 800c3fe:	9b03      	ldr	r3, [sp, #12]
 800c400:	454b      	cmp	r3, r9
 800c402:	d31e      	bcc.n	800c442 <__cvt+0xc2>
 800c404:	9b03      	ldr	r3, [sp, #12]
 800c406:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c408:	1b5b      	subs	r3, r3, r5
 800c40a:	4628      	mov	r0, r5
 800c40c:	6013      	str	r3, [r2, #0]
 800c40e:	b004      	add	sp, #16
 800c410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c414:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c418:	eb00 0904 	add.w	r9, r0, r4
 800c41c:	d1e5      	bne.n	800c3ea <__cvt+0x6a>
 800c41e:	7803      	ldrb	r3, [r0, #0]
 800c420:	2b30      	cmp	r3, #48	@ 0x30
 800c422:	d10a      	bne.n	800c43a <__cvt+0xba>
 800c424:	2200      	movs	r2, #0
 800c426:	2300      	movs	r3, #0
 800c428:	4630      	mov	r0, r6
 800c42a:	4639      	mov	r1, r7
 800c42c:	f7f4 fb6c 	bl	8000b08 <__aeabi_dcmpeq>
 800c430:	b918      	cbnz	r0, 800c43a <__cvt+0xba>
 800c432:	f1c4 0401 	rsb	r4, r4, #1
 800c436:	f8ca 4000 	str.w	r4, [sl]
 800c43a:	f8da 3000 	ldr.w	r3, [sl]
 800c43e:	4499      	add	r9, r3
 800c440:	e7d3      	b.n	800c3ea <__cvt+0x6a>
 800c442:	1c59      	adds	r1, r3, #1
 800c444:	9103      	str	r1, [sp, #12]
 800c446:	701a      	strb	r2, [r3, #0]
 800c448:	e7d9      	b.n	800c3fe <__cvt+0x7e>

0800c44a <__exponent>:
 800c44a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c44c:	2900      	cmp	r1, #0
 800c44e:	bfba      	itte	lt
 800c450:	4249      	neglt	r1, r1
 800c452:	232d      	movlt	r3, #45	@ 0x2d
 800c454:	232b      	movge	r3, #43	@ 0x2b
 800c456:	2909      	cmp	r1, #9
 800c458:	7002      	strb	r2, [r0, #0]
 800c45a:	7043      	strb	r3, [r0, #1]
 800c45c:	dd29      	ble.n	800c4b2 <__exponent+0x68>
 800c45e:	f10d 0307 	add.w	r3, sp, #7
 800c462:	461d      	mov	r5, r3
 800c464:	270a      	movs	r7, #10
 800c466:	461a      	mov	r2, r3
 800c468:	fbb1 f6f7 	udiv	r6, r1, r7
 800c46c:	fb07 1416 	mls	r4, r7, r6, r1
 800c470:	3430      	adds	r4, #48	@ 0x30
 800c472:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c476:	460c      	mov	r4, r1
 800c478:	2c63      	cmp	r4, #99	@ 0x63
 800c47a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c47e:	4631      	mov	r1, r6
 800c480:	dcf1      	bgt.n	800c466 <__exponent+0x1c>
 800c482:	3130      	adds	r1, #48	@ 0x30
 800c484:	1e94      	subs	r4, r2, #2
 800c486:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c48a:	1c41      	adds	r1, r0, #1
 800c48c:	4623      	mov	r3, r4
 800c48e:	42ab      	cmp	r3, r5
 800c490:	d30a      	bcc.n	800c4a8 <__exponent+0x5e>
 800c492:	f10d 0309 	add.w	r3, sp, #9
 800c496:	1a9b      	subs	r3, r3, r2
 800c498:	42ac      	cmp	r4, r5
 800c49a:	bf88      	it	hi
 800c49c:	2300      	movhi	r3, #0
 800c49e:	3302      	adds	r3, #2
 800c4a0:	4403      	add	r3, r0
 800c4a2:	1a18      	subs	r0, r3, r0
 800c4a4:	b003      	add	sp, #12
 800c4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4a8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c4ac:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c4b0:	e7ed      	b.n	800c48e <__exponent+0x44>
 800c4b2:	2330      	movs	r3, #48	@ 0x30
 800c4b4:	3130      	adds	r1, #48	@ 0x30
 800c4b6:	7083      	strb	r3, [r0, #2]
 800c4b8:	70c1      	strb	r1, [r0, #3]
 800c4ba:	1d03      	adds	r3, r0, #4
 800c4bc:	e7f1      	b.n	800c4a2 <__exponent+0x58>
	...

0800c4c0 <_printf_float>:
 800c4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c4:	b08d      	sub	sp, #52	@ 0x34
 800c4c6:	460c      	mov	r4, r1
 800c4c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c4cc:	4616      	mov	r6, r2
 800c4ce:	461f      	mov	r7, r3
 800c4d0:	4605      	mov	r5, r0
 800c4d2:	f000 fccb 	bl	800ce6c <_localeconv_r>
 800c4d6:	6803      	ldr	r3, [r0, #0]
 800c4d8:	9304      	str	r3, [sp, #16]
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7f3 fee8 	bl	80002b0 <strlen>
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4e4:	f8d8 3000 	ldr.w	r3, [r8]
 800c4e8:	9005      	str	r0, [sp, #20]
 800c4ea:	3307      	adds	r3, #7
 800c4ec:	f023 0307 	bic.w	r3, r3, #7
 800c4f0:	f103 0208 	add.w	r2, r3, #8
 800c4f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c4f8:	f8d4 b000 	ldr.w	fp, [r4]
 800c4fc:	f8c8 2000 	str.w	r2, [r8]
 800c500:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c504:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c508:	9307      	str	r3, [sp, #28]
 800c50a:	f8cd 8018 	str.w	r8, [sp, #24]
 800c50e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c512:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c516:	4b9c      	ldr	r3, [pc, #624]	@ (800c788 <_printf_float+0x2c8>)
 800c518:	f04f 32ff 	mov.w	r2, #4294967295
 800c51c:	f7f4 fb26 	bl	8000b6c <__aeabi_dcmpun>
 800c520:	bb70      	cbnz	r0, 800c580 <_printf_float+0xc0>
 800c522:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c526:	4b98      	ldr	r3, [pc, #608]	@ (800c788 <_printf_float+0x2c8>)
 800c528:	f04f 32ff 	mov.w	r2, #4294967295
 800c52c:	f7f4 fb00 	bl	8000b30 <__aeabi_dcmple>
 800c530:	bb30      	cbnz	r0, 800c580 <_printf_float+0xc0>
 800c532:	2200      	movs	r2, #0
 800c534:	2300      	movs	r3, #0
 800c536:	4640      	mov	r0, r8
 800c538:	4649      	mov	r1, r9
 800c53a:	f7f4 faef 	bl	8000b1c <__aeabi_dcmplt>
 800c53e:	b110      	cbz	r0, 800c546 <_printf_float+0x86>
 800c540:	232d      	movs	r3, #45	@ 0x2d
 800c542:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c546:	4a91      	ldr	r2, [pc, #580]	@ (800c78c <_printf_float+0x2cc>)
 800c548:	4b91      	ldr	r3, [pc, #580]	@ (800c790 <_printf_float+0x2d0>)
 800c54a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c54e:	bf94      	ite	ls
 800c550:	4690      	movls	r8, r2
 800c552:	4698      	movhi	r8, r3
 800c554:	2303      	movs	r3, #3
 800c556:	6123      	str	r3, [r4, #16]
 800c558:	f02b 0304 	bic.w	r3, fp, #4
 800c55c:	6023      	str	r3, [r4, #0]
 800c55e:	f04f 0900 	mov.w	r9, #0
 800c562:	9700      	str	r7, [sp, #0]
 800c564:	4633      	mov	r3, r6
 800c566:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c568:	4621      	mov	r1, r4
 800c56a:	4628      	mov	r0, r5
 800c56c:	f000 f9d2 	bl	800c914 <_printf_common>
 800c570:	3001      	adds	r0, #1
 800c572:	f040 808d 	bne.w	800c690 <_printf_float+0x1d0>
 800c576:	f04f 30ff 	mov.w	r0, #4294967295
 800c57a:	b00d      	add	sp, #52	@ 0x34
 800c57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c580:	4642      	mov	r2, r8
 800c582:	464b      	mov	r3, r9
 800c584:	4640      	mov	r0, r8
 800c586:	4649      	mov	r1, r9
 800c588:	f7f4 faf0 	bl	8000b6c <__aeabi_dcmpun>
 800c58c:	b140      	cbz	r0, 800c5a0 <_printf_float+0xe0>
 800c58e:	464b      	mov	r3, r9
 800c590:	2b00      	cmp	r3, #0
 800c592:	bfbc      	itt	lt
 800c594:	232d      	movlt	r3, #45	@ 0x2d
 800c596:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c59a:	4a7e      	ldr	r2, [pc, #504]	@ (800c794 <_printf_float+0x2d4>)
 800c59c:	4b7e      	ldr	r3, [pc, #504]	@ (800c798 <_printf_float+0x2d8>)
 800c59e:	e7d4      	b.n	800c54a <_printf_float+0x8a>
 800c5a0:	6863      	ldr	r3, [r4, #4]
 800c5a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c5a6:	9206      	str	r2, [sp, #24]
 800c5a8:	1c5a      	adds	r2, r3, #1
 800c5aa:	d13b      	bne.n	800c624 <_printf_float+0x164>
 800c5ac:	2306      	movs	r3, #6
 800c5ae:	6063      	str	r3, [r4, #4]
 800c5b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	6022      	str	r2, [r4, #0]
 800c5b8:	9303      	str	r3, [sp, #12]
 800c5ba:	ab0a      	add	r3, sp, #40	@ 0x28
 800c5bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c5c0:	ab09      	add	r3, sp, #36	@ 0x24
 800c5c2:	9300      	str	r3, [sp, #0]
 800c5c4:	6861      	ldr	r1, [r4, #4]
 800c5c6:	ec49 8b10 	vmov	d0, r8, r9
 800c5ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c5ce:	4628      	mov	r0, r5
 800c5d0:	f7ff fed6 	bl	800c380 <__cvt>
 800c5d4:	9b06      	ldr	r3, [sp, #24]
 800c5d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c5d8:	2b47      	cmp	r3, #71	@ 0x47
 800c5da:	4680      	mov	r8, r0
 800c5dc:	d129      	bne.n	800c632 <_printf_float+0x172>
 800c5de:	1cc8      	adds	r0, r1, #3
 800c5e0:	db02      	blt.n	800c5e8 <_printf_float+0x128>
 800c5e2:	6863      	ldr	r3, [r4, #4]
 800c5e4:	4299      	cmp	r1, r3
 800c5e6:	dd41      	ble.n	800c66c <_printf_float+0x1ac>
 800c5e8:	f1aa 0a02 	sub.w	sl, sl, #2
 800c5ec:	fa5f fa8a 	uxtb.w	sl, sl
 800c5f0:	3901      	subs	r1, #1
 800c5f2:	4652      	mov	r2, sl
 800c5f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c5f8:	9109      	str	r1, [sp, #36]	@ 0x24
 800c5fa:	f7ff ff26 	bl	800c44a <__exponent>
 800c5fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c600:	1813      	adds	r3, r2, r0
 800c602:	2a01      	cmp	r2, #1
 800c604:	4681      	mov	r9, r0
 800c606:	6123      	str	r3, [r4, #16]
 800c608:	dc02      	bgt.n	800c610 <_printf_float+0x150>
 800c60a:	6822      	ldr	r2, [r4, #0]
 800c60c:	07d2      	lsls	r2, r2, #31
 800c60e:	d501      	bpl.n	800c614 <_printf_float+0x154>
 800c610:	3301      	adds	r3, #1
 800c612:	6123      	str	r3, [r4, #16]
 800c614:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d0a2      	beq.n	800c562 <_printf_float+0xa2>
 800c61c:	232d      	movs	r3, #45	@ 0x2d
 800c61e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c622:	e79e      	b.n	800c562 <_printf_float+0xa2>
 800c624:	9a06      	ldr	r2, [sp, #24]
 800c626:	2a47      	cmp	r2, #71	@ 0x47
 800c628:	d1c2      	bne.n	800c5b0 <_printf_float+0xf0>
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d1c0      	bne.n	800c5b0 <_printf_float+0xf0>
 800c62e:	2301      	movs	r3, #1
 800c630:	e7bd      	b.n	800c5ae <_printf_float+0xee>
 800c632:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c636:	d9db      	bls.n	800c5f0 <_printf_float+0x130>
 800c638:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c63c:	d118      	bne.n	800c670 <_printf_float+0x1b0>
 800c63e:	2900      	cmp	r1, #0
 800c640:	6863      	ldr	r3, [r4, #4]
 800c642:	dd0b      	ble.n	800c65c <_printf_float+0x19c>
 800c644:	6121      	str	r1, [r4, #16]
 800c646:	b913      	cbnz	r3, 800c64e <_printf_float+0x18e>
 800c648:	6822      	ldr	r2, [r4, #0]
 800c64a:	07d0      	lsls	r0, r2, #31
 800c64c:	d502      	bpl.n	800c654 <_printf_float+0x194>
 800c64e:	3301      	adds	r3, #1
 800c650:	440b      	add	r3, r1
 800c652:	6123      	str	r3, [r4, #16]
 800c654:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c656:	f04f 0900 	mov.w	r9, #0
 800c65a:	e7db      	b.n	800c614 <_printf_float+0x154>
 800c65c:	b913      	cbnz	r3, 800c664 <_printf_float+0x1a4>
 800c65e:	6822      	ldr	r2, [r4, #0]
 800c660:	07d2      	lsls	r2, r2, #31
 800c662:	d501      	bpl.n	800c668 <_printf_float+0x1a8>
 800c664:	3302      	adds	r3, #2
 800c666:	e7f4      	b.n	800c652 <_printf_float+0x192>
 800c668:	2301      	movs	r3, #1
 800c66a:	e7f2      	b.n	800c652 <_printf_float+0x192>
 800c66c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c670:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c672:	4299      	cmp	r1, r3
 800c674:	db05      	blt.n	800c682 <_printf_float+0x1c2>
 800c676:	6823      	ldr	r3, [r4, #0]
 800c678:	6121      	str	r1, [r4, #16]
 800c67a:	07d8      	lsls	r0, r3, #31
 800c67c:	d5ea      	bpl.n	800c654 <_printf_float+0x194>
 800c67e:	1c4b      	adds	r3, r1, #1
 800c680:	e7e7      	b.n	800c652 <_printf_float+0x192>
 800c682:	2900      	cmp	r1, #0
 800c684:	bfd4      	ite	le
 800c686:	f1c1 0202 	rsble	r2, r1, #2
 800c68a:	2201      	movgt	r2, #1
 800c68c:	4413      	add	r3, r2
 800c68e:	e7e0      	b.n	800c652 <_printf_float+0x192>
 800c690:	6823      	ldr	r3, [r4, #0]
 800c692:	055a      	lsls	r2, r3, #21
 800c694:	d407      	bmi.n	800c6a6 <_printf_float+0x1e6>
 800c696:	6923      	ldr	r3, [r4, #16]
 800c698:	4642      	mov	r2, r8
 800c69a:	4631      	mov	r1, r6
 800c69c:	4628      	mov	r0, r5
 800c69e:	47b8      	blx	r7
 800c6a0:	3001      	adds	r0, #1
 800c6a2:	d12b      	bne.n	800c6fc <_printf_float+0x23c>
 800c6a4:	e767      	b.n	800c576 <_printf_float+0xb6>
 800c6a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c6aa:	f240 80dd 	bls.w	800c868 <_printf_float+0x3a8>
 800c6ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	f7f4 fa27 	bl	8000b08 <__aeabi_dcmpeq>
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	d033      	beq.n	800c726 <_printf_float+0x266>
 800c6be:	4a37      	ldr	r2, [pc, #220]	@ (800c79c <_printf_float+0x2dc>)
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	4631      	mov	r1, r6
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	47b8      	blx	r7
 800c6c8:	3001      	adds	r0, #1
 800c6ca:	f43f af54 	beq.w	800c576 <_printf_float+0xb6>
 800c6ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c6d2:	4543      	cmp	r3, r8
 800c6d4:	db02      	blt.n	800c6dc <_printf_float+0x21c>
 800c6d6:	6823      	ldr	r3, [r4, #0]
 800c6d8:	07d8      	lsls	r0, r3, #31
 800c6da:	d50f      	bpl.n	800c6fc <_printf_float+0x23c>
 800c6dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6e0:	4631      	mov	r1, r6
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	47b8      	blx	r7
 800c6e6:	3001      	adds	r0, #1
 800c6e8:	f43f af45 	beq.w	800c576 <_printf_float+0xb6>
 800c6ec:	f04f 0900 	mov.w	r9, #0
 800c6f0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c6f4:	f104 0a1a 	add.w	sl, r4, #26
 800c6f8:	45c8      	cmp	r8, r9
 800c6fa:	dc09      	bgt.n	800c710 <_printf_float+0x250>
 800c6fc:	6823      	ldr	r3, [r4, #0]
 800c6fe:	079b      	lsls	r3, r3, #30
 800c700:	f100 8103 	bmi.w	800c90a <_printf_float+0x44a>
 800c704:	68e0      	ldr	r0, [r4, #12]
 800c706:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c708:	4298      	cmp	r0, r3
 800c70a:	bfb8      	it	lt
 800c70c:	4618      	movlt	r0, r3
 800c70e:	e734      	b.n	800c57a <_printf_float+0xba>
 800c710:	2301      	movs	r3, #1
 800c712:	4652      	mov	r2, sl
 800c714:	4631      	mov	r1, r6
 800c716:	4628      	mov	r0, r5
 800c718:	47b8      	blx	r7
 800c71a:	3001      	adds	r0, #1
 800c71c:	f43f af2b 	beq.w	800c576 <_printf_float+0xb6>
 800c720:	f109 0901 	add.w	r9, r9, #1
 800c724:	e7e8      	b.n	800c6f8 <_printf_float+0x238>
 800c726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c728:	2b00      	cmp	r3, #0
 800c72a:	dc39      	bgt.n	800c7a0 <_printf_float+0x2e0>
 800c72c:	4a1b      	ldr	r2, [pc, #108]	@ (800c79c <_printf_float+0x2dc>)
 800c72e:	2301      	movs	r3, #1
 800c730:	4631      	mov	r1, r6
 800c732:	4628      	mov	r0, r5
 800c734:	47b8      	blx	r7
 800c736:	3001      	adds	r0, #1
 800c738:	f43f af1d 	beq.w	800c576 <_printf_float+0xb6>
 800c73c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c740:	ea59 0303 	orrs.w	r3, r9, r3
 800c744:	d102      	bne.n	800c74c <_printf_float+0x28c>
 800c746:	6823      	ldr	r3, [r4, #0]
 800c748:	07d9      	lsls	r1, r3, #31
 800c74a:	d5d7      	bpl.n	800c6fc <_printf_float+0x23c>
 800c74c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c750:	4631      	mov	r1, r6
 800c752:	4628      	mov	r0, r5
 800c754:	47b8      	blx	r7
 800c756:	3001      	adds	r0, #1
 800c758:	f43f af0d 	beq.w	800c576 <_printf_float+0xb6>
 800c75c:	f04f 0a00 	mov.w	sl, #0
 800c760:	f104 0b1a 	add.w	fp, r4, #26
 800c764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c766:	425b      	negs	r3, r3
 800c768:	4553      	cmp	r3, sl
 800c76a:	dc01      	bgt.n	800c770 <_printf_float+0x2b0>
 800c76c:	464b      	mov	r3, r9
 800c76e:	e793      	b.n	800c698 <_printf_float+0x1d8>
 800c770:	2301      	movs	r3, #1
 800c772:	465a      	mov	r2, fp
 800c774:	4631      	mov	r1, r6
 800c776:	4628      	mov	r0, r5
 800c778:	47b8      	blx	r7
 800c77a:	3001      	adds	r0, #1
 800c77c:	f43f aefb 	beq.w	800c576 <_printf_float+0xb6>
 800c780:	f10a 0a01 	add.w	sl, sl, #1
 800c784:	e7ee      	b.n	800c764 <_printf_float+0x2a4>
 800c786:	bf00      	nop
 800c788:	7fefffff 	.word	0x7fefffff
 800c78c:	08011448 	.word	0x08011448
 800c790:	0801144c 	.word	0x0801144c
 800c794:	08011450 	.word	0x08011450
 800c798:	08011454 	.word	0x08011454
 800c79c:	08011458 	.word	0x08011458
 800c7a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c7a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c7a6:	4553      	cmp	r3, sl
 800c7a8:	bfa8      	it	ge
 800c7aa:	4653      	movge	r3, sl
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	4699      	mov	r9, r3
 800c7b0:	dc36      	bgt.n	800c820 <_printf_float+0x360>
 800c7b2:	f04f 0b00 	mov.w	fp, #0
 800c7b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7ba:	f104 021a 	add.w	r2, r4, #26
 800c7be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c7c0:	9306      	str	r3, [sp, #24]
 800c7c2:	eba3 0309 	sub.w	r3, r3, r9
 800c7c6:	455b      	cmp	r3, fp
 800c7c8:	dc31      	bgt.n	800c82e <_printf_float+0x36e>
 800c7ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7cc:	459a      	cmp	sl, r3
 800c7ce:	dc3a      	bgt.n	800c846 <_printf_float+0x386>
 800c7d0:	6823      	ldr	r3, [r4, #0]
 800c7d2:	07da      	lsls	r2, r3, #31
 800c7d4:	d437      	bmi.n	800c846 <_printf_float+0x386>
 800c7d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7d8:	ebaa 0903 	sub.w	r9, sl, r3
 800c7dc:	9b06      	ldr	r3, [sp, #24]
 800c7de:	ebaa 0303 	sub.w	r3, sl, r3
 800c7e2:	4599      	cmp	r9, r3
 800c7e4:	bfa8      	it	ge
 800c7e6:	4699      	movge	r9, r3
 800c7e8:	f1b9 0f00 	cmp.w	r9, #0
 800c7ec:	dc33      	bgt.n	800c856 <_printf_float+0x396>
 800c7ee:	f04f 0800 	mov.w	r8, #0
 800c7f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7f6:	f104 0b1a 	add.w	fp, r4, #26
 800c7fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7fc:	ebaa 0303 	sub.w	r3, sl, r3
 800c800:	eba3 0309 	sub.w	r3, r3, r9
 800c804:	4543      	cmp	r3, r8
 800c806:	f77f af79 	ble.w	800c6fc <_printf_float+0x23c>
 800c80a:	2301      	movs	r3, #1
 800c80c:	465a      	mov	r2, fp
 800c80e:	4631      	mov	r1, r6
 800c810:	4628      	mov	r0, r5
 800c812:	47b8      	blx	r7
 800c814:	3001      	adds	r0, #1
 800c816:	f43f aeae 	beq.w	800c576 <_printf_float+0xb6>
 800c81a:	f108 0801 	add.w	r8, r8, #1
 800c81e:	e7ec      	b.n	800c7fa <_printf_float+0x33a>
 800c820:	4642      	mov	r2, r8
 800c822:	4631      	mov	r1, r6
 800c824:	4628      	mov	r0, r5
 800c826:	47b8      	blx	r7
 800c828:	3001      	adds	r0, #1
 800c82a:	d1c2      	bne.n	800c7b2 <_printf_float+0x2f2>
 800c82c:	e6a3      	b.n	800c576 <_printf_float+0xb6>
 800c82e:	2301      	movs	r3, #1
 800c830:	4631      	mov	r1, r6
 800c832:	4628      	mov	r0, r5
 800c834:	9206      	str	r2, [sp, #24]
 800c836:	47b8      	blx	r7
 800c838:	3001      	adds	r0, #1
 800c83a:	f43f ae9c 	beq.w	800c576 <_printf_float+0xb6>
 800c83e:	9a06      	ldr	r2, [sp, #24]
 800c840:	f10b 0b01 	add.w	fp, fp, #1
 800c844:	e7bb      	b.n	800c7be <_printf_float+0x2fe>
 800c846:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c84a:	4631      	mov	r1, r6
 800c84c:	4628      	mov	r0, r5
 800c84e:	47b8      	blx	r7
 800c850:	3001      	adds	r0, #1
 800c852:	d1c0      	bne.n	800c7d6 <_printf_float+0x316>
 800c854:	e68f      	b.n	800c576 <_printf_float+0xb6>
 800c856:	9a06      	ldr	r2, [sp, #24]
 800c858:	464b      	mov	r3, r9
 800c85a:	4442      	add	r2, r8
 800c85c:	4631      	mov	r1, r6
 800c85e:	4628      	mov	r0, r5
 800c860:	47b8      	blx	r7
 800c862:	3001      	adds	r0, #1
 800c864:	d1c3      	bne.n	800c7ee <_printf_float+0x32e>
 800c866:	e686      	b.n	800c576 <_printf_float+0xb6>
 800c868:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c86c:	f1ba 0f01 	cmp.w	sl, #1
 800c870:	dc01      	bgt.n	800c876 <_printf_float+0x3b6>
 800c872:	07db      	lsls	r3, r3, #31
 800c874:	d536      	bpl.n	800c8e4 <_printf_float+0x424>
 800c876:	2301      	movs	r3, #1
 800c878:	4642      	mov	r2, r8
 800c87a:	4631      	mov	r1, r6
 800c87c:	4628      	mov	r0, r5
 800c87e:	47b8      	blx	r7
 800c880:	3001      	adds	r0, #1
 800c882:	f43f ae78 	beq.w	800c576 <_printf_float+0xb6>
 800c886:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c88a:	4631      	mov	r1, r6
 800c88c:	4628      	mov	r0, r5
 800c88e:	47b8      	blx	r7
 800c890:	3001      	adds	r0, #1
 800c892:	f43f ae70 	beq.w	800c576 <_printf_float+0xb6>
 800c896:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c89a:	2200      	movs	r2, #0
 800c89c:	2300      	movs	r3, #0
 800c89e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8a2:	f7f4 f931 	bl	8000b08 <__aeabi_dcmpeq>
 800c8a6:	b9c0      	cbnz	r0, 800c8da <_printf_float+0x41a>
 800c8a8:	4653      	mov	r3, sl
 800c8aa:	f108 0201 	add.w	r2, r8, #1
 800c8ae:	4631      	mov	r1, r6
 800c8b0:	4628      	mov	r0, r5
 800c8b2:	47b8      	blx	r7
 800c8b4:	3001      	adds	r0, #1
 800c8b6:	d10c      	bne.n	800c8d2 <_printf_float+0x412>
 800c8b8:	e65d      	b.n	800c576 <_printf_float+0xb6>
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	465a      	mov	r2, fp
 800c8be:	4631      	mov	r1, r6
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	47b8      	blx	r7
 800c8c4:	3001      	adds	r0, #1
 800c8c6:	f43f ae56 	beq.w	800c576 <_printf_float+0xb6>
 800c8ca:	f108 0801 	add.w	r8, r8, #1
 800c8ce:	45d0      	cmp	r8, sl
 800c8d0:	dbf3      	blt.n	800c8ba <_printf_float+0x3fa>
 800c8d2:	464b      	mov	r3, r9
 800c8d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c8d8:	e6df      	b.n	800c69a <_printf_float+0x1da>
 800c8da:	f04f 0800 	mov.w	r8, #0
 800c8de:	f104 0b1a 	add.w	fp, r4, #26
 800c8e2:	e7f4      	b.n	800c8ce <_printf_float+0x40e>
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	4642      	mov	r2, r8
 800c8e8:	e7e1      	b.n	800c8ae <_printf_float+0x3ee>
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	464a      	mov	r2, r9
 800c8ee:	4631      	mov	r1, r6
 800c8f0:	4628      	mov	r0, r5
 800c8f2:	47b8      	blx	r7
 800c8f4:	3001      	adds	r0, #1
 800c8f6:	f43f ae3e 	beq.w	800c576 <_printf_float+0xb6>
 800c8fa:	f108 0801 	add.w	r8, r8, #1
 800c8fe:	68e3      	ldr	r3, [r4, #12]
 800c900:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c902:	1a5b      	subs	r3, r3, r1
 800c904:	4543      	cmp	r3, r8
 800c906:	dcf0      	bgt.n	800c8ea <_printf_float+0x42a>
 800c908:	e6fc      	b.n	800c704 <_printf_float+0x244>
 800c90a:	f04f 0800 	mov.w	r8, #0
 800c90e:	f104 0919 	add.w	r9, r4, #25
 800c912:	e7f4      	b.n	800c8fe <_printf_float+0x43e>

0800c914 <_printf_common>:
 800c914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c918:	4616      	mov	r6, r2
 800c91a:	4698      	mov	r8, r3
 800c91c:	688a      	ldr	r2, [r1, #8]
 800c91e:	690b      	ldr	r3, [r1, #16]
 800c920:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c924:	4293      	cmp	r3, r2
 800c926:	bfb8      	it	lt
 800c928:	4613      	movlt	r3, r2
 800c92a:	6033      	str	r3, [r6, #0]
 800c92c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c930:	4607      	mov	r7, r0
 800c932:	460c      	mov	r4, r1
 800c934:	b10a      	cbz	r2, 800c93a <_printf_common+0x26>
 800c936:	3301      	adds	r3, #1
 800c938:	6033      	str	r3, [r6, #0]
 800c93a:	6823      	ldr	r3, [r4, #0]
 800c93c:	0699      	lsls	r1, r3, #26
 800c93e:	bf42      	ittt	mi
 800c940:	6833      	ldrmi	r3, [r6, #0]
 800c942:	3302      	addmi	r3, #2
 800c944:	6033      	strmi	r3, [r6, #0]
 800c946:	6825      	ldr	r5, [r4, #0]
 800c948:	f015 0506 	ands.w	r5, r5, #6
 800c94c:	d106      	bne.n	800c95c <_printf_common+0x48>
 800c94e:	f104 0a19 	add.w	sl, r4, #25
 800c952:	68e3      	ldr	r3, [r4, #12]
 800c954:	6832      	ldr	r2, [r6, #0]
 800c956:	1a9b      	subs	r3, r3, r2
 800c958:	42ab      	cmp	r3, r5
 800c95a:	dc26      	bgt.n	800c9aa <_printf_common+0x96>
 800c95c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c960:	6822      	ldr	r2, [r4, #0]
 800c962:	3b00      	subs	r3, #0
 800c964:	bf18      	it	ne
 800c966:	2301      	movne	r3, #1
 800c968:	0692      	lsls	r2, r2, #26
 800c96a:	d42b      	bmi.n	800c9c4 <_printf_common+0xb0>
 800c96c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c970:	4641      	mov	r1, r8
 800c972:	4638      	mov	r0, r7
 800c974:	47c8      	blx	r9
 800c976:	3001      	adds	r0, #1
 800c978:	d01e      	beq.n	800c9b8 <_printf_common+0xa4>
 800c97a:	6823      	ldr	r3, [r4, #0]
 800c97c:	6922      	ldr	r2, [r4, #16]
 800c97e:	f003 0306 	and.w	r3, r3, #6
 800c982:	2b04      	cmp	r3, #4
 800c984:	bf02      	ittt	eq
 800c986:	68e5      	ldreq	r5, [r4, #12]
 800c988:	6833      	ldreq	r3, [r6, #0]
 800c98a:	1aed      	subeq	r5, r5, r3
 800c98c:	68a3      	ldr	r3, [r4, #8]
 800c98e:	bf0c      	ite	eq
 800c990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c994:	2500      	movne	r5, #0
 800c996:	4293      	cmp	r3, r2
 800c998:	bfc4      	itt	gt
 800c99a:	1a9b      	subgt	r3, r3, r2
 800c99c:	18ed      	addgt	r5, r5, r3
 800c99e:	2600      	movs	r6, #0
 800c9a0:	341a      	adds	r4, #26
 800c9a2:	42b5      	cmp	r5, r6
 800c9a4:	d11a      	bne.n	800c9dc <_printf_common+0xc8>
 800c9a6:	2000      	movs	r0, #0
 800c9a8:	e008      	b.n	800c9bc <_printf_common+0xa8>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	4652      	mov	r2, sl
 800c9ae:	4641      	mov	r1, r8
 800c9b0:	4638      	mov	r0, r7
 800c9b2:	47c8      	blx	r9
 800c9b4:	3001      	adds	r0, #1
 800c9b6:	d103      	bne.n	800c9c0 <_printf_common+0xac>
 800c9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9c0:	3501      	adds	r5, #1
 800c9c2:	e7c6      	b.n	800c952 <_printf_common+0x3e>
 800c9c4:	18e1      	adds	r1, r4, r3
 800c9c6:	1c5a      	adds	r2, r3, #1
 800c9c8:	2030      	movs	r0, #48	@ 0x30
 800c9ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c9ce:	4422      	add	r2, r4
 800c9d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c9d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c9d8:	3302      	adds	r3, #2
 800c9da:	e7c7      	b.n	800c96c <_printf_common+0x58>
 800c9dc:	2301      	movs	r3, #1
 800c9de:	4622      	mov	r2, r4
 800c9e0:	4641      	mov	r1, r8
 800c9e2:	4638      	mov	r0, r7
 800c9e4:	47c8      	blx	r9
 800c9e6:	3001      	adds	r0, #1
 800c9e8:	d0e6      	beq.n	800c9b8 <_printf_common+0xa4>
 800c9ea:	3601      	adds	r6, #1
 800c9ec:	e7d9      	b.n	800c9a2 <_printf_common+0x8e>
	...

0800c9f0 <_printf_i>:
 800c9f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9f4:	7e0f      	ldrb	r7, [r1, #24]
 800c9f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c9f8:	2f78      	cmp	r7, #120	@ 0x78
 800c9fa:	4691      	mov	r9, r2
 800c9fc:	4680      	mov	r8, r0
 800c9fe:	460c      	mov	r4, r1
 800ca00:	469a      	mov	sl, r3
 800ca02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ca06:	d807      	bhi.n	800ca18 <_printf_i+0x28>
 800ca08:	2f62      	cmp	r7, #98	@ 0x62
 800ca0a:	d80a      	bhi.n	800ca22 <_printf_i+0x32>
 800ca0c:	2f00      	cmp	r7, #0
 800ca0e:	f000 80d2 	beq.w	800cbb6 <_printf_i+0x1c6>
 800ca12:	2f58      	cmp	r7, #88	@ 0x58
 800ca14:	f000 80b9 	beq.w	800cb8a <_printf_i+0x19a>
 800ca18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ca20:	e03a      	b.n	800ca98 <_printf_i+0xa8>
 800ca22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ca26:	2b15      	cmp	r3, #21
 800ca28:	d8f6      	bhi.n	800ca18 <_printf_i+0x28>
 800ca2a:	a101      	add	r1, pc, #4	@ (adr r1, 800ca30 <_printf_i+0x40>)
 800ca2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca30:	0800ca89 	.word	0x0800ca89
 800ca34:	0800ca9d 	.word	0x0800ca9d
 800ca38:	0800ca19 	.word	0x0800ca19
 800ca3c:	0800ca19 	.word	0x0800ca19
 800ca40:	0800ca19 	.word	0x0800ca19
 800ca44:	0800ca19 	.word	0x0800ca19
 800ca48:	0800ca9d 	.word	0x0800ca9d
 800ca4c:	0800ca19 	.word	0x0800ca19
 800ca50:	0800ca19 	.word	0x0800ca19
 800ca54:	0800ca19 	.word	0x0800ca19
 800ca58:	0800ca19 	.word	0x0800ca19
 800ca5c:	0800cb9d 	.word	0x0800cb9d
 800ca60:	0800cac7 	.word	0x0800cac7
 800ca64:	0800cb57 	.word	0x0800cb57
 800ca68:	0800ca19 	.word	0x0800ca19
 800ca6c:	0800ca19 	.word	0x0800ca19
 800ca70:	0800cbbf 	.word	0x0800cbbf
 800ca74:	0800ca19 	.word	0x0800ca19
 800ca78:	0800cac7 	.word	0x0800cac7
 800ca7c:	0800ca19 	.word	0x0800ca19
 800ca80:	0800ca19 	.word	0x0800ca19
 800ca84:	0800cb5f 	.word	0x0800cb5f
 800ca88:	6833      	ldr	r3, [r6, #0]
 800ca8a:	1d1a      	adds	r2, r3, #4
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	6032      	str	r2, [r6, #0]
 800ca90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ca98:	2301      	movs	r3, #1
 800ca9a:	e09d      	b.n	800cbd8 <_printf_i+0x1e8>
 800ca9c:	6833      	ldr	r3, [r6, #0]
 800ca9e:	6820      	ldr	r0, [r4, #0]
 800caa0:	1d19      	adds	r1, r3, #4
 800caa2:	6031      	str	r1, [r6, #0]
 800caa4:	0606      	lsls	r6, r0, #24
 800caa6:	d501      	bpl.n	800caac <_printf_i+0xbc>
 800caa8:	681d      	ldr	r5, [r3, #0]
 800caaa:	e003      	b.n	800cab4 <_printf_i+0xc4>
 800caac:	0645      	lsls	r5, r0, #25
 800caae:	d5fb      	bpl.n	800caa8 <_printf_i+0xb8>
 800cab0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cab4:	2d00      	cmp	r5, #0
 800cab6:	da03      	bge.n	800cac0 <_printf_i+0xd0>
 800cab8:	232d      	movs	r3, #45	@ 0x2d
 800caba:	426d      	negs	r5, r5
 800cabc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cac0:	4859      	ldr	r0, [pc, #356]	@ (800cc28 <_printf_i+0x238>)
 800cac2:	230a      	movs	r3, #10
 800cac4:	e011      	b.n	800caea <_printf_i+0xfa>
 800cac6:	6821      	ldr	r1, [r4, #0]
 800cac8:	6833      	ldr	r3, [r6, #0]
 800caca:	0608      	lsls	r0, r1, #24
 800cacc:	f853 5b04 	ldr.w	r5, [r3], #4
 800cad0:	d402      	bmi.n	800cad8 <_printf_i+0xe8>
 800cad2:	0649      	lsls	r1, r1, #25
 800cad4:	bf48      	it	mi
 800cad6:	b2ad      	uxthmi	r5, r5
 800cad8:	2f6f      	cmp	r7, #111	@ 0x6f
 800cada:	4853      	ldr	r0, [pc, #332]	@ (800cc28 <_printf_i+0x238>)
 800cadc:	6033      	str	r3, [r6, #0]
 800cade:	bf14      	ite	ne
 800cae0:	230a      	movne	r3, #10
 800cae2:	2308      	moveq	r3, #8
 800cae4:	2100      	movs	r1, #0
 800cae6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800caea:	6866      	ldr	r6, [r4, #4]
 800caec:	60a6      	str	r6, [r4, #8]
 800caee:	2e00      	cmp	r6, #0
 800caf0:	bfa2      	ittt	ge
 800caf2:	6821      	ldrge	r1, [r4, #0]
 800caf4:	f021 0104 	bicge.w	r1, r1, #4
 800caf8:	6021      	strge	r1, [r4, #0]
 800cafa:	b90d      	cbnz	r5, 800cb00 <_printf_i+0x110>
 800cafc:	2e00      	cmp	r6, #0
 800cafe:	d04b      	beq.n	800cb98 <_printf_i+0x1a8>
 800cb00:	4616      	mov	r6, r2
 800cb02:	fbb5 f1f3 	udiv	r1, r5, r3
 800cb06:	fb03 5711 	mls	r7, r3, r1, r5
 800cb0a:	5dc7      	ldrb	r7, [r0, r7]
 800cb0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cb10:	462f      	mov	r7, r5
 800cb12:	42bb      	cmp	r3, r7
 800cb14:	460d      	mov	r5, r1
 800cb16:	d9f4      	bls.n	800cb02 <_printf_i+0x112>
 800cb18:	2b08      	cmp	r3, #8
 800cb1a:	d10b      	bne.n	800cb34 <_printf_i+0x144>
 800cb1c:	6823      	ldr	r3, [r4, #0]
 800cb1e:	07df      	lsls	r7, r3, #31
 800cb20:	d508      	bpl.n	800cb34 <_printf_i+0x144>
 800cb22:	6923      	ldr	r3, [r4, #16]
 800cb24:	6861      	ldr	r1, [r4, #4]
 800cb26:	4299      	cmp	r1, r3
 800cb28:	bfde      	ittt	le
 800cb2a:	2330      	movle	r3, #48	@ 0x30
 800cb2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cb30:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cb34:	1b92      	subs	r2, r2, r6
 800cb36:	6122      	str	r2, [r4, #16]
 800cb38:	f8cd a000 	str.w	sl, [sp]
 800cb3c:	464b      	mov	r3, r9
 800cb3e:	aa03      	add	r2, sp, #12
 800cb40:	4621      	mov	r1, r4
 800cb42:	4640      	mov	r0, r8
 800cb44:	f7ff fee6 	bl	800c914 <_printf_common>
 800cb48:	3001      	adds	r0, #1
 800cb4a:	d14a      	bne.n	800cbe2 <_printf_i+0x1f2>
 800cb4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb50:	b004      	add	sp, #16
 800cb52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb56:	6823      	ldr	r3, [r4, #0]
 800cb58:	f043 0320 	orr.w	r3, r3, #32
 800cb5c:	6023      	str	r3, [r4, #0]
 800cb5e:	4833      	ldr	r0, [pc, #204]	@ (800cc2c <_printf_i+0x23c>)
 800cb60:	2778      	movs	r7, #120	@ 0x78
 800cb62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cb66:	6823      	ldr	r3, [r4, #0]
 800cb68:	6831      	ldr	r1, [r6, #0]
 800cb6a:	061f      	lsls	r7, r3, #24
 800cb6c:	f851 5b04 	ldr.w	r5, [r1], #4
 800cb70:	d402      	bmi.n	800cb78 <_printf_i+0x188>
 800cb72:	065f      	lsls	r7, r3, #25
 800cb74:	bf48      	it	mi
 800cb76:	b2ad      	uxthmi	r5, r5
 800cb78:	6031      	str	r1, [r6, #0]
 800cb7a:	07d9      	lsls	r1, r3, #31
 800cb7c:	bf44      	itt	mi
 800cb7e:	f043 0320 	orrmi.w	r3, r3, #32
 800cb82:	6023      	strmi	r3, [r4, #0]
 800cb84:	b11d      	cbz	r5, 800cb8e <_printf_i+0x19e>
 800cb86:	2310      	movs	r3, #16
 800cb88:	e7ac      	b.n	800cae4 <_printf_i+0xf4>
 800cb8a:	4827      	ldr	r0, [pc, #156]	@ (800cc28 <_printf_i+0x238>)
 800cb8c:	e7e9      	b.n	800cb62 <_printf_i+0x172>
 800cb8e:	6823      	ldr	r3, [r4, #0]
 800cb90:	f023 0320 	bic.w	r3, r3, #32
 800cb94:	6023      	str	r3, [r4, #0]
 800cb96:	e7f6      	b.n	800cb86 <_printf_i+0x196>
 800cb98:	4616      	mov	r6, r2
 800cb9a:	e7bd      	b.n	800cb18 <_printf_i+0x128>
 800cb9c:	6833      	ldr	r3, [r6, #0]
 800cb9e:	6825      	ldr	r5, [r4, #0]
 800cba0:	6961      	ldr	r1, [r4, #20]
 800cba2:	1d18      	adds	r0, r3, #4
 800cba4:	6030      	str	r0, [r6, #0]
 800cba6:	062e      	lsls	r6, r5, #24
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	d501      	bpl.n	800cbb0 <_printf_i+0x1c0>
 800cbac:	6019      	str	r1, [r3, #0]
 800cbae:	e002      	b.n	800cbb6 <_printf_i+0x1c6>
 800cbb0:	0668      	lsls	r0, r5, #25
 800cbb2:	d5fb      	bpl.n	800cbac <_printf_i+0x1bc>
 800cbb4:	8019      	strh	r1, [r3, #0]
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	6123      	str	r3, [r4, #16]
 800cbba:	4616      	mov	r6, r2
 800cbbc:	e7bc      	b.n	800cb38 <_printf_i+0x148>
 800cbbe:	6833      	ldr	r3, [r6, #0]
 800cbc0:	1d1a      	adds	r2, r3, #4
 800cbc2:	6032      	str	r2, [r6, #0]
 800cbc4:	681e      	ldr	r6, [r3, #0]
 800cbc6:	6862      	ldr	r2, [r4, #4]
 800cbc8:	2100      	movs	r1, #0
 800cbca:	4630      	mov	r0, r6
 800cbcc:	f7f3 fb20 	bl	8000210 <memchr>
 800cbd0:	b108      	cbz	r0, 800cbd6 <_printf_i+0x1e6>
 800cbd2:	1b80      	subs	r0, r0, r6
 800cbd4:	6060      	str	r0, [r4, #4]
 800cbd6:	6863      	ldr	r3, [r4, #4]
 800cbd8:	6123      	str	r3, [r4, #16]
 800cbda:	2300      	movs	r3, #0
 800cbdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbe0:	e7aa      	b.n	800cb38 <_printf_i+0x148>
 800cbe2:	6923      	ldr	r3, [r4, #16]
 800cbe4:	4632      	mov	r2, r6
 800cbe6:	4649      	mov	r1, r9
 800cbe8:	4640      	mov	r0, r8
 800cbea:	47d0      	blx	sl
 800cbec:	3001      	adds	r0, #1
 800cbee:	d0ad      	beq.n	800cb4c <_printf_i+0x15c>
 800cbf0:	6823      	ldr	r3, [r4, #0]
 800cbf2:	079b      	lsls	r3, r3, #30
 800cbf4:	d413      	bmi.n	800cc1e <_printf_i+0x22e>
 800cbf6:	68e0      	ldr	r0, [r4, #12]
 800cbf8:	9b03      	ldr	r3, [sp, #12]
 800cbfa:	4298      	cmp	r0, r3
 800cbfc:	bfb8      	it	lt
 800cbfe:	4618      	movlt	r0, r3
 800cc00:	e7a6      	b.n	800cb50 <_printf_i+0x160>
 800cc02:	2301      	movs	r3, #1
 800cc04:	4632      	mov	r2, r6
 800cc06:	4649      	mov	r1, r9
 800cc08:	4640      	mov	r0, r8
 800cc0a:	47d0      	blx	sl
 800cc0c:	3001      	adds	r0, #1
 800cc0e:	d09d      	beq.n	800cb4c <_printf_i+0x15c>
 800cc10:	3501      	adds	r5, #1
 800cc12:	68e3      	ldr	r3, [r4, #12]
 800cc14:	9903      	ldr	r1, [sp, #12]
 800cc16:	1a5b      	subs	r3, r3, r1
 800cc18:	42ab      	cmp	r3, r5
 800cc1a:	dcf2      	bgt.n	800cc02 <_printf_i+0x212>
 800cc1c:	e7eb      	b.n	800cbf6 <_printf_i+0x206>
 800cc1e:	2500      	movs	r5, #0
 800cc20:	f104 0619 	add.w	r6, r4, #25
 800cc24:	e7f5      	b.n	800cc12 <_printf_i+0x222>
 800cc26:	bf00      	nop
 800cc28:	0801145a 	.word	0x0801145a
 800cc2c:	0801146b 	.word	0x0801146b

0800cc30 <std>:
 800cc30:	2300      	movs	r3, #0
 800cc32:	b510      	push	{r4, lr}
 800cc34:	4604      	mov	r4, r0
 800cc36:	e9c0 3300 	strd	r3, r3, [r0]
 800cc3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc3e:	6083      	str	r3, [r0, #8]
 800cc40:	8181      	strh	r1, [r0, #12]
 800cc42:	6643      	str	r3, [r0, #100]	@ 0x64
 800cc44:	81c2      	strh	r2, [r0, #14]
 800cc46:	6183      	str	r3, [r0, #24]
 800cc48:	4619      	mov	r1, r3
 800cc4a:	2208      	movs	r2, #8
 800cc4c:	305c      	adds	r0, #92	@ 0x5c
 800cc4e:	f000 f904 	bl	800ce5a <memset>
 800cc52:	4b0d      	ldr	r3, [pc, #52]	@ (800cc88 <std+0x58>)
 800cc54:	6263      	str	r3, [r4, #36]	@ 0x24
 800cc56:	4b0d      	ldr	r3, [pc, #52]	@ (800cc8c <std+0x5c>)
 800cc58:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cc5a:	4b0d      	ldr	r3, [pc, #52]	@ (800cc90 <std+0x60>)
 800cc5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cc5e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc94 <std+0x64>)
 800cc60:	6323      	str	r3, [r4, #48]	@ 0x30
 800cc62:	4b0d      	ldr	r3, [pc, #52]	@ (800cc98 <std+0x68>)
 800cc64:	6224      	str	r4, [r4, #32]
 800cc66:	429c      	cmp	r4, r3
 800cc68:	d006      	beq.n	800cc78 <std+0x48>
 800cc6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cc6e:	4294      	cmp	r4, r2
 800cc70:	d002      	beq.n	800cc78 <std+0x48>
 800cc72:	33d0      	adds	r3, #208	@ 0xd0
 800cc74:	429c      	cmp	r4, r3
 800cc76:	d105      	bne.n	800cc84 <std+0x54>
 800cc78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cc7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc80:	f000 b968 	b.w	800cf54 <__retarget_lock_init_recursive>
 800cc84:	bd10      	pop	{r4, pc}
 800cc86:	bf00      	nop
 800cc88:	0800cdb5 	.word	0x0800cdb5
 800cc8c:	0800cdd7 	.word	0x0800cdd7
 800cc90:	0800ce0f 	.word	0x0800ce0f
 800cc94:	0800ce33 	.word	0x0800ce33
 800cc98:	200007f0 	.word	0x200007f0

0800cc9c <stdio_exit_handler>:
 800cc9c:	4a02      	ldr	r2, [pc, #8]	@ (800cca8 <stdio_exit_handler+0xc>)
 800cc9e:	4903      	ldr	r1, [pc, #12]	@ (800ccac <stdio_exit_handler+0x10>)
 800cca0:	4803      	ldr	r0, [pc, #12]	@ (800ccb0 <stdio_exit_handler+0x14>)
 800cca2:	f000 b869 	b.w	800cd78 <_fwalk_sglue>
 800cca6:	bf00      	nop
 800cca8:	2000004c 	.word	0x2000004c
 800ccac:	0800e61d 	.word	0x0800e61d
 800ccb0:	2000005c 	.word	0x2000005c

0800ccb4 <cleanup_stdio>:
 800ccb4:	6841      	ldr	r1, [r0, #4]
 800ccb6:	4b0c      	ldr	r3, [pc, #48]	@ (800cce8 <cleanup_stdio+0x34>)
 800ccb8:	4299      	cmp	r1, r3
 800ccba:	b510      	push	{r4, lr}
 800ccbc:	4604      	mov	r4, r0
 800ccbe:	d001      	beq.n	800ccc4 <cleanup_stdio+0x10>
 800ccc0:	f001 fcac 	bl	800e61c <_fflush_r>
 800ccc4:	68a1      	ldr	r1, [r4, #8]
 800ccc6:	4b09      	ldr	r3, [pc, #36]	@ (800ccec <cleanup_stdio+0x38>)
 800ccc8:	4299      	cmp	r1, r3
 800ccca:	d002      	beq.n	800ccd2 <cleanup_stdio+0x1e>
 800cccc:	4620      	mov	r0, r4
 800ccce:	f001 fca5 	bl	800e61c <_fflush_r>
 800ccd2:	68e1      	ldr	r1, [r4, #12]
 800ccd4:	4b06      	ldr	r3, [pc, #24]	@ (800ccf0 <cleanup_stdio+0x3c>)
 800ccd6:	4299      	cmp	r1, r3
 800ccd8:	d004      	beq.n	800cce4 <cleanup_stdio+0x30>
 800ccda:	4620      	mov	r0, r4
 800ccdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cce0:	f001 bc9c 	b.w	800e61c <_fflush_r>
 800cce4:	bd10      	pop	{r4, pc}
 800cce6:	bf00      	nop
 800cce8:	200007f0 	.word	0x200007f0
 800ccec:	20000858 	.word	0x20000858
 800ccf0:	200008c0 	.word	0x200008c0

0800ccf4 <global_stdio_init.part.0>:
 800ccf4:	b510      	push	{r4, lr}
 800ccf6:	4b0b      	ldr	r3, [pc, #44]	@ (800cd24 <global_stdio_init.part.0+0x30>)
 800ccf8:	4c0b      	ldr	r4, [pc, #44]	@ (800cd28 <global_stdio_init.part.0+0x34>)
 800ccfa:	4a0c      	ldr	r2, [pc, #48]	@ (800cd2c <global_stdio_init.part.0+0x38>)
 800ccfc:	601a      	str	r2, [r3, #0]
 800ccfe:	4620      	mov	r0, r4
 800cd00:	2200      	movs	r2, #0
 800cd02:	2104      	movs	r1, #4
 800cd04:	f7ff ff94 	bl	800cc30 <std>
 800cd08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	2109      	movs	r1, #9
 800cd10:	f7ff ff8e 	bl	800cc30 <std>
 800cd14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cd18:	2202      	movs	r2, #2
 800cd1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd1e:	2112      	movs	r1, #18
 800cd20:	f7ff bf86 	b.w	800cc30 <std>
 800cd24:	20000928 	.word	0x20000928
 800cd28:	200007f0 	.word	0x200007f0
 800cd2c:	0800cc9d 	.word	0x0800cc9d

0800cd30 <__sfp_lock_acquire>:
 800cd30:	4801      	ldr	r0, [pc, #4]	@ (800cd38 <__sfp_lock_acquire+0x8>)
 800cd32:	f000 b910 	b.w	800cf56 <__retarget_lock_acquire_recursive>
 800cd36:	bf00      	nop
 800cd38:	20000931 	.word	0x20000931

0800cd3c <__sfp_lock_release>:
 800cd3c:	4801      	ldr	r0, [pc, #4]	@ (800cd44 <__sfp_lock_release+0x8>)
 800cd3e:	f000 b90b 	b.w	800cf58 <__retarget_lock_release_recursive>
 800cd42:	bf00      	nop
 800cd44:	20000931 	.word	0x20000931

0800cd48 <__sinit>:
 800cd48:	b510      	push	{r4, lr}
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	f7ff fff0 	bl	800cd30 <__sfp_lock_acquire>
 800cd50:	6a23      	ldr	r3, [r4, #32]
 800cd52:	b11b      	cbz	r3, 800cd5c <__sinit+0x14>
 800cd54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd58:	f7ff bff0 	b.w	800cd3c <__sfp_lock_release>
 800cd5c:	4b04      	ldr	r3, [pc, #16]	@ (800cd70 <__sinit+0x28>)
 800cd5e:	6223      	str	r3, [r4, #32]
 800cd60:	4b04      	ldr	r3, [pc, #16]	@ (800cd74 <__sinit+0x2c>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d1f5      	bne.n	800cd54 <__sinit+0xc>
 800cd68:	f7ff ffc4 	bl	800ccf4 <global_stdio_init.part.0>
 800cd6c:	e7f2      	b.n	800cd54 <__sinit+0xc>
 800cd6e:	bf00      	nop
 800cd70:	0800ccb5 	.word	0x0800ccb5
 800cd74:	20000928 	.word	0x20000928

0800cd78 <_fwalk_sglue>:
 800cd78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd7c:	4607      	mov	r7, r0
 800cd7e:	4688      	mov	r8, r1
 800cd80:	4614      	mov	r4, r2
 800cd82:	2600      	movs	r6, #0
 800cd84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd88:	f1b9 0901 	subs.w	r9, r9, #1
 800cd8c:	d505      	bpl.n	800cd9a <_fwalk_sglue+0x22>
 800cd8e:	6824      	ldr	r4, [r4, #0]
 800cd90:	2c00      	cmp	r4, #0
 800cd92:	d1f7      	bne.n	800cd84 <_fwalk_sglue+0xc>
 800cd94:	4630      	mov	r0, r6
 800cd96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd9a:	89ab      	ldrh	r3, [r5, #12]
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d907      	bls.n	800cdb0 <_fwalk_sglue+0x38>
 800cda0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cda4:	3301      	adds	r3, #1
 800cda6:	d003      	beq.n	800cdb0 <_fwalk_sglue+0x38>
 800cda8:	4629      	mov	r1, r5
 800cdaa:	4638      	mov	r0, r7
 800cdac:	47c0      	blx	r8
 800cdae:	4306      	orrs	r6, r0
 800cdb0:	3568      	adds	r5, #104	@ 0x68
 800cdb2:	e7e9      	b.n	800cd88 <_fwalk_sglue+0x10>

0800cdb4 <__sread>:
 800cdb4:	b510      	push	{r4, lr}
 800cdb6:	460c      	mov	r4, r1
 800cdb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdbc:	f000 f87c 	bl	800ceb8 <_read_r>
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	bfab      	itete	ge
 800cdc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cdc6:	89a3      	ldrhlt	r3, [r4, #12]
 800cdc8:	181b      	addge	r3, r3, r0
 800cdca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cdce:	bfac      	ite	ge
 800cdd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cdd2:	81a3      	strhlt	r3, [r4, #12]
 800cdd4:	bd10      	pop	{r4, pc}

0800cdd6 <__swrite>:
 800cdd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdda:	461f      	mov	r7, r3
 800cddc:	898b      	ldrh	r3, [r1, #12]
 800cdde:	05db      	lsls	r3, r3, #23
 800cde0:	4605      	mov	r5, r0
 800cde2:	460c      	mov	r4, r1
 800cde4:	4616      	mov	r6, r2
 800cde6:	d505      	bpl.n	800cdf4 <__swrite+0x1e>
 800cde8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdec:	2302      	movs	r3, #2
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f000 f850 	bl	800ce94 <_lseek_r>
 800cdf4:	89a3      	ldrh	r3, [r4, #12]
 800cdf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cdfe:	81a3      	strh	r3, [r4, #12]
 800ce00:	4632      	mov	r2, r6
 800ce02:	463b      	mov	r3, r7
 800ce04:	4628      	mov	r0, r5
 800ce06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce0a:	f000 b867 	b.w	800cedc <_write_r>

0800ce0e <__sseek>:
 800ce0e:	b510      	push	{r4, lr}
 800ce10:	460c      	mov	r4, r1
 800ce12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce16:	f000 f83d 	bl	800ce94 <_lseek_r>
 800ce1a:	1c43      	adds	r3, r0, #1
 800ce1c:	89a3      	ldrh	r3, [r4, #12]
 800ce1e:	bf15      	itete	ne
 800ce20:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ce22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ce26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ce2a:	81a3      	strheq	r3, [r4, #12]
 800ce2c:	bf18      	it	ne
 800ce2e:	81a3      	strhne	r3, [r4, #12]
 800ce30:	bd10      	pop	{r4, pc}

0800ce32 <__sclose>:
 800ce32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce36:	f000 b81d 	b.w	800ce74 <_close_r>

0800ce3a <memcmp>:
 800ce3a:	b510      	push	{r4, lr}
 800ce3c:	3901      	subs	r1, #1
 800ce3e:	4402      	add	r2, r0
 800ce40:	4290      	cmp	r0, r2
 800ce42:	d101      	bne.n	800ce48 <memcmp+0xe>
 800ce44:	2000      	movs	r0, #0
 800ce46:	e005      	b.n	800ce54 <memcmp+0x1a>
 800ce48:	7803      	ldrb	r3, [r0, #0]
 800ce4a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ce4e:	42a3      	cmp	r3, r4
 800ce50:	d001      	beq.n	800ce56 <memcmp+0x1c>
 800ce52:	1b18      	subs	r0, r3, r4
 800ce54:	bd10      	pop	{r4, pc}
 800ce56:	3001      	adds	r0, #1
 800ce58:	e7f2      	b.n	800ce40 <memcmp+0x6>

0800ce5a <memset>:
 800ce5a:	4402      	add	r2, r0
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d100      	bne.n	800ce64 <memset+0xa>
 800ce62:	4770      	bx	lr
 800ce64:	f803 1b01 	strb.w	r1, [r3], #1
 800ce68:	e7f9      	b.n	800ce5e <memset+0x4>
	...

0800ce6c <_localeconv_r>:
 800ce6c:	4800      	ldr	r0, [pc, #0]	@ (800ce70 <_localeconv_r+0x4>)
 800ce6e:	4770      	bx	lr
 800ce70:	20000198 	.word	0x20000198

0800ce74 <_close_r>:
 800ce74:	b538      	push	{r3, r4, r5, lr}
 800ce76:	4d06      	ldr	r5, [pc, #24]	@ (800ce90 <_close_r+0x1c>)
 800ce78:	2300      	movs	r3, #0
 800ce7a:	4604      	mov	r4, r0
 800ce7c:	4608      	mov	r0, r1
 800ce7e:	602b      	str	r3, [r5, #0]
 800ce80:	f7fa f90e 	bl	80070a0 <_close>
 800ce84:	1c43      	adds	r3, r0, #1
 800ce86:	d102      	bne.n	800ce8e <_close_r+0x1a>
 800ce88:	682b      	ldr	r3, [r5, #0]
 800ce8a:	b103      	cbz	r3, 800ce8e <_close_r+0x1a>
 800ce8c:	6023      	str	r3, [r4, #0]
 800ce8e:	bd38      	pop	{r3, r4, r5, pc}
 800ce90:	2000092c 	.word	0x2000092c

0800ce94 <_lseek_r>:
 800ce94:	b538      	push	{r3, r4, r5, lr}
 800ce96:	4d07      	ldr	r5, [pc, #28]	@ (800ceb4 <_lseek_r+0x20>)
 800ce98:	4604      	mov	r4, r0
 800ce9a:	4608      	mov	r0, r1
 800ce9c:	4611      	mov	r1, r2
 800ce9e:	2200      	movs	r2, #0
 800cea0:	602a      	str	r2, [r5, #0]
 800cea2:	461a      	mov	r2, r3
 800cea4:	f7fa f923 	bl	80070ee <_lseek>
 800cea8:	1c43      	adds	r3, r0, #1
 800ceaa:	d102      	bne.n	800ceb2 <_lseek_r+0x1e>
 800ceac:	682b      	ldr	r3, [r5, #0]
 800ceae:	b103      	cbz	r3, 800ceb2 <_lseek_r+0x1e>
 800ceb0:	6023      	str	r3, [r4, #0]
 800ceb2:	bd38      	pop	{r3, r4, r5, pc}
 800ceb4:	2000092c 	.word	0x2000092c

0800ceb8 <_read_r>:
 800ceb8:	b538      	push	{r3, r4, r5, lr}
 800ceba:	4d07      	ldr	r5, [pc, #28]	@ (800ced8 <_read_r+0x20>)
 800cebc:	4604      	mov	r4, r0
 800cebe:	4608      	mov	r0, r1
 800cec0:	4611      	mov	r1, r2
 800cec2:	2200      	movs	r2, #0
 800cec4:	602a      	str	r2, [r5, #0]
 800cec6:	461a      	mov	r2, r3
 800cec8:	f7fa f8b1 	bl	800702e <_read>
 800cecc:	1c43      	adds	r3, r0, #1
 800cece:	d102      	bne.n	800ced6 <_read_r+0x1e>
 800ced0:	682b      	ldr	r3, [r5, #0]
 800ced2:	b103      	cbz	r3, 800ced6 <_read_r+0x1e>
 800ced4:	6023      	str	r3, [r4, #0]
 800ced6:	bd38      	pop	{r3, r4, r5, pc}
 800ced8:	2000092c 	.word	0x2000092c

0800cedc <_write_r>:
 800cedc:	b538      	push	{r3, r4, r5, lr}
 800cede:	4d07      	ldr	r5, [pc, #28]	@ (800cefc <_write_r+0x20>)
 800cee0:	4604      	mov	r4, r0
 800cee2:	4608      	mov	r0, r1
 800cee4:	4611      	mov	r1, r2
 800cee6:	2200      	movs	r2, #0
 800cee8:	602a      	str	r2, [r5, #0]
 800ceea:	461a      	mov	r2, r3
 800ceec:	f7fa f8bc 	bl	8007068 <_write>
 800cef0:	1c43      	adds	r3, r0, #1
 800cef2:	d102      	bne.n	800cefa <_write_r+0x1e>
 800cef4:	682b      	ldr	r3, [r5, #0]
 800cef6:	b103      	cbz	r3, 800cefa <_write_r+0x1e>
 800cef8:	6023      	str	r3, [r4, #0]
 800cefa:	bd38      	pop	{r3, r4, r5, pc}
 800cefc:	2000092c 	.word	0x2000092c

0800cf00 <__errno>:
 800cf00:	4b01      	ldr	r3, [pc, #4]	@ (800cf08 <__errno+0x8>)
 800cf02:	6818      	ldr	r0, [r3, #0]
 800cf04:	4770      	bx	lr
 800cf06:	bf00      	nop
 800cf08:	20000058 	.word	0x20000058

0800cf0c <__libc_init_array>:
 800cf0c:	b570      	push	{r4, r5, r6, lr}
 800cf0e:	4d0d      	ldr	r5, [pc, #52]	@ (800cf44 <__libc_init_array+0x38>)
 800cf10:	4c0d      	ldr	r4, [pc, #52]	@ (800cf48 <__libc_init_array+0x3c>)
 800cf12:	1b64      	subs	r4, r4, r5
 800cf14:	10a4      	asrs	r4, r4, #2
 800cf16:	2600      	movs	r6, #0
 800cf18:	42a6      	cmp	r6, r4
 800cf1a:	d109      	bne.n	800cf30 <__libc_init_array+0x24>
 800cf1c:	4d0b      	ldr	r5, [pc, #44]	@ (800cf4c <__libc_init_array+0x40>)
 800cf1e:	4c0c      	ldr	r4, [pc, #48]	@ (800cf50 <__libc_init_array+0x44>)
 800cf20:	f004 fa6a 	bl	80113f8 <_init>
 800cf24:	1b64      	subs	r4, r4, r5
 800cf26:	10a4      	asrs	r4, r4, #2
 800cf28:	2600      	movs	r6, #0
 800cf2a:	42a6      	cmp	r6, r4
 800cf2c:	d105      	bne.n	800cf3a <__libc_init_array+0x2e>
 800cf2e:	bd70      	pop	{r4, r5, r6, pc}
 800cf30:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf34:	4798      	blx	r3
 800cf36:	3601      	adds	r6, #1
 800cf38:	e7ee      	b.n	800cf18 <__libc_init_array+0xc>
 800cf3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf3e:	4798      	blx	r3
 800cf40:	3601      	adds	r6, #1
 800cf42:	e7f2      	b.n	800cf2a <__libc_init_array+0x1e>
 800cf44:	08011a00 	.word	0x08011a00
 800cf48:	08011a00 	.word	0x08011a00
 800cf4c:	08011a00 	.word	0x08011a00
 800cf50:	08011a04 	.word	0x08011a04

0800cf54 <__retarget_lock_init_recursive>:
 800cf54:	4770      	bx	lr

0800cf56 <__retarget_lock_acquire_recursive>:
 800cf56:	4770      	bx	lr

0800cf58 <__retarget_lock_release_recursive>:
 800cf58:	4770      	bx	lr

0800cf5a <memcpy>:
 800cf5a:	440a      	add	r2, r1
 800cf5c:	4291      	cmp	r1, r2
 800cf5e:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf62:	d100      	bne.n	800cf66 <memcpy+0xc>
 800cf64:	4770      	bx	lr
 800cf66:	b510      	push	{r4, lr}
 800cf68:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf70:	4291      	cmp	r1, r2
 800cf72:	d1f9      	bne.n	800cf68 <memcpy+0xe>
 800cf74:	bd10      	pop	{r4, pc}

0800cf76 <quorem>:
 800cf76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf7a:	6903      	ldr	r3, [r0, #16]
 800cf7c:	690c      	ldr	r4, [r1, #16]
 800cf7e:	42a3      	cmp	r3, r4
 800cf80:	4607      	mov	r7, r0
 800cf82:	db7e      	blt.n	800d082 <quorem+0x10c>
 800cf84:	3c01      	subs	r4, #1
 800cf86:	f101 0814 	add.w	r8, r1, #20
 800cf8a:	00a3      	lsls	r3, r4, #2
 800cf8c:	f100 0514 	add.w	r5, r0, #20
 800cf90:	9300      	str	r3, [sp, #0]
 800cf92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf96:	9301      	str	r3, [sp, #4]
 800cf98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cf9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cfa8:	fbb2 f6f3 	udiv	r6, r2, r3
 800cfac:	d32e      	bcc.n	800d00c <quorem+0x96>
 800cfae:	f04f 0a00 	mov.w	sl, #0
 800cfb2:	46c4      	mov	ip, r8
 800cfb4:	46ae      	mov	lr, r5
 800cfb6:	46d3      	mov	fp, sl
 800cfb8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cfbc:	b298      	uxth	r0, r3
 800cfbe:	fb06 a000 	mla	r0, r6, r0, sl
 800cfc2:	0c02      	lsrs	r2, r0, #16
 800cfc4:	0c1b      	lsrs	r3, r3, #16
 800cfc6:	fb06 2303 	mla	r3, r6, r3, r2
 800cfca:	f8de 2000 	ldr.w	r2, [lr]
 800cfce:	b280      	uxth	r0, r0
 800cfd0:	b292      	uxth	r2, r2
 800cfd2:	1a12      	subs	r2, r2, r0
 800cfd4:	445a      	add	r2, fp
 800cfd6:	f8de 0000 	ldr.w	r0, [lr]
 800cfda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cfe4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cfe8:	b292      	uxth	r2, r2
 800cfea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cfee:	45e1      	cmp	r9, ip
 800cff0:	f84e 2b04 	str.w	r2, [lr], #4
 800cff4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cff8:	d2de      	bcs.n	800cfb8 <quorem+0x42>
 800cffa:	9b00      	ldr	r3, [sp, #0]
 800cffc:	58eb      	ldr	r3, [r5, r3]
 800cffe:	b92b      	cbnz	r3, 800d00c <quorem+0x96>
 800d000:	9b01      	ldr	r3, [sp, #4]
 800d002:	3b04      	subs	r3, #4
 800d004:	429d      	cmp	r5, r3
 800d006:	461a      	mov	r2, r3
 800d008:	d32f      	bcc.n	800d06a <quorem+0xf4>
 800d00a:	613c      	str	r4, [r7, #16]
 800d00c:	4638      	mov	r0, r7
 800d00e:	f001 f979 	bl	800e304 <__mcmp>
 800d012:	2800      	cmp	r0, #0
 800d014:	db25      	blt.n	800d062 <quorem+0xec>
 800d016:	4629      	mov	r1, r5
 800d018:	2000      	movs	r0, #0
 800d01a:	f858 2b04 	ldr.w	r2, [r8], #4
 800d01e:	f8d1 c000 	ldr.w	ip, [r1]
 800d022:	fa1f fe82 	uxth.w	lr, r2
 800d026:	fa1f f38c 	uxth.w	r3, ip
 800d02a:	eba3 030e 	sub.w	r3, r3, lr
 800d02e:	4403      	add	r3, r0
 800d030:	0c12      	lsrs	r2, r2, #16
 800d032:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d036:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d03a:	b29b      	uxth	r3, r3
 800d03c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d040:	45c1      	cmp	r9, r8
 800d042:	f841 3b04 	str.w	r3, [r1], #4
 800d046:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d04a:	d2e6      	bcs.n	800d01a <quorem+0xa4>
 800d04c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d050:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d054:	b922      	cbnz	r2, 800d060 <quorem+0xea>
 800d056:	3b04      	subs	r3, #4
 800d058:	429d      	cmp	r5, r3
 800d05a:	461a      	mov	r2, r3
 800d05c:	d30b      	bcc.n	800d076 <quorem+0x100>
 800d05e:	613c      	str	r4, [r7, #16]
 800d060:	3601      	adds	r6, #1
 800d062:	4630      	mov	r0, r6
 800d064:	b003      	add	sp, #12
 800d066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d06a:	6812      	ldr	r2, [r2, #0]
 800d06c:	3b04      	subs	r3, #4
 800d06e:	2a00      	cmp	r2, #0
 800d070:	d1cb      	bne.n	800d00a <quorem+0x94>
 800d072:	3c01      	subs	r4, #1
 800d074:	e7c6      	b.n	800d004 <quorem+0x8e>
 800d076:	6812      	ldr	r2, [r2, #0]
 800d078:	3b04      	subs	r3, #4
 800d07a:	2a00      	cmp	r2, #0
 800d07c:	d1ef      	bne.n	800d05e <quorem+0xe8>
 800d07e:	3c01      	subs	r4, #1
 800d080:	e7ea      	b.n	800d058 <quorem+0xe2>
 800d082:	2000      	movs	r0, #0
 800d084:	e7ee      	b.n	800d064 <quorem+0xee>
	...

0800d088 <_dtoa_r>:
 800d088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d08c:	69c7      	ldr	r7, [r0, #28]
 800d08e:	b099      	sub	sp, #100	@ 0x64
 800d090:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d094:	ec55 4b10 	vmov	r4, r5, d0
 800d098:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d09a:	9109      	str	r1, [sp, #36]	@ 0x24
 800d09c:	4683      	mov	fp, r0
 800d09e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d0a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d0a2:	b97f      	cbnz	r7, 800d0c4 <_dtoa_r+0x3c>
 800d0a4:	2010      	movs	r0, #16
 800d0a6:	f000 fdfd 	bl	800dca4 <malloc>
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	f8cb 001c 	str.w	r0, [fp, #28]
 800d0b0:	b920      	cbnz	r0, 800d0bc <_dtoa_r+0x34>
 800d0b2:	4ba7      	ldr	r3, [pc, #668]	@ (800d350 <_dtoa_r+0x2c8>)
 800d0b4:	21ef      	movs	r1, #239	@ 0xef
 800d0b6:	48a7      	ldr	r0, [pc, #668]	@ (800d354 <_dtoa_r+0x2cc>)
 800d0b8:	f001 fae8 	bl	800e68c <__assert_func>
 800d0bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d0c0:	6007      	str	r7, [r0, #0]
 800d0c2:	60c7      	str	r7, [r0, #12]
 800d0c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d0c8:	6819      	ldr	r1, [r3, #0]
 800d0ca:	b159      	cbz	r1, 800d0e4 <_dtoa_r+0x5c>
 800d0cc:	685a      	ldr	r2, [r3, #4]
 800d0ce:	604a      	str	r2, [r1, #4]
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	4093      	lsls	r3, r2
 800d0d4:	608b      	str	r3, [r1, #8]
 800d0d6:	4658      	mov	r0, fp
 800d0d8:	f000 feda 	bl	800de90 <_Bfree>
 800d0dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	601a      	str	r2, [r3, #0]
 800d0e4:	1e2b      	subs	r3, r5, #0
 800d0e6:	bfb9      	ittee	lt
 800d0e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d0ec:	9303      	strlt	r3, [sp, #12]
 800d0ee:	2300      	movge	r3, #0
 800d0f0:	6033      	strge	r3, [r6, #0]
 800d0f2:	9f03      	ldr	r7, [sp, #12]
 800d0f4:	4b98      	ldr	r3, [pc, #608]	@ (800d358 <_dtoa_r+0x2d0>)
 800d0f6:	bfbc      	itt	lt
 800d0f8:	2201      	movlt	r2, #1
 800d0fa:	6032      	strlt	r2, [r6, #0]
 800d0fc:	43bb      	bics	r3, r7
 800d0fe:	d112      	bne.n	800d126 <_dtoa_r+0x9e>
 800d100:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d102:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d106:	6013      	str	r3, [r2, #0]
 800d108:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d10c:	4323      	orrs	r3, r4
 800d10e:	f000 854d 	beq.w	800dbac <_dtoa_r+0xb24>
 800d112:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d114:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d36c <_dtoa_r+0x2e4>
 800d118:	2b00      	cmp	r3, #0
 800d11a:	f000 854f 	beq.w	800dbbc <_dtoa_r+0xb34>
 800d11e:	f10a 0303 	add.w	r3, sl, #3
 800d122:	f000 bd49 	b.w	800dbb8 <_dtoa_r+0xb30>
 800d126:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d12a:	2200      	movs	r2, #0
 800d12c:	ec51 0b17 	vmov	r0, r1, d7
 800d130:	2300      	movs	r3, #0
 800d132:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d136:	f7f3 fce7 	bl	8000b08 <__aeabi_dcmpeq>
 800d13a:	4680      	mov	r8, r0
 800d13c:	b158      	cbz	r0, 800d156 <_dtoa_r+0xce>
 800d13e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d140:	2301      	movs	r3, #1
 800d142:	6013      	str	r3, [r2, #0]
 800d144:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d146:	b113      	cbz	r3, 800d14e <_dtoa_r+0xc6>
 800d148:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d14a:	4b84      	ldr	r3, [pc, #528]	@ (800d35c <_dtoa_r+0x2d4>)
 800d14c:	6013      	str	r3, [r2, #0]
 800d14e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d370 <_dtoa_r+0x2e8>
 800d152:	f000 bd33 	b.w	800dbbc <_dtoa_r+0xb34>
 800d156:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d15a:	aa16      	add	r2, sp, #88	@ 0x58
 800d15c:	a917      	add	r1, sp, #92	@ 0x5c
 800d15e:	4658      	mov	r0, fp
 800d160:	f001 f980 	bl	800e464 <__d2b>
 800d164:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d168:	4681      	mov	r9, r0
 800d16a:	2e00      	cmp	r6, #0
 800d16c:	d077      	beq.n	800d25e <_dtoa_r+0x1d6>
 800d16e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d170:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d178:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d17c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d180:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d184:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d188:	4619      	mov	r1, r3
 800d18a:	2200      	movs	r2, #0
 800d18c:	4b74      	ldr	r3, [pc, #464]	@ (800d360 <_dtoa_r+0x2d8>)
 800d18e:	f7f3 f89b 	bl	80002c8 <__aeabi_dsub>
 800d192:	a369      	add	r3, pc, #420	@ (adr r3, 800d338 <_dtoa_r+0x2b0>)
 800d194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d198:	f7f3 fa4e 	bl	8000638 <__aeabi_dmul>
 800d19c:	a368      	add	r3, pc, #416	@ (adr r3, 800d340 <_dtoa_r+0x2b8>)
 800d19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a2:	f7f3 f893 	bl	80002cc <__adddf3>
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	4630      	mov	r0, r6
 800d1aa:	460d      	mov	r5, r1
 800d1ac:	f7f3 f9da 	bl	8000564 <__aeabi_i2d>
 800d1b0:	a365      	add	r3, pc, #404	@ (adr r3, 800d348 <_dtoa_r+0x2c0>)
 800d1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b6:	f7f3 fa3f 	bl	8000638 <__aeabi_dmul>
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	460b      	mov	r3, r1
 800d1be:	4620      	mov	r0, r4
 800d1c0:	4629      	mov	r1, r5
 800d1c2:	f7f3 f883 	bl	80002cc <__adddf3>
 800d1c6:	4604      	mov	r4, r0
 800d1c8:	460d      	mov	r5, r1
 800d1ca:	f7f3 fce5 	bl	8000b98 <__aeabi_d2iz>
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	4607      	mov	r7, r0
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	4629      	mov	r1, r5
 800d1d8:	f7f3 fca0 	bl	8000b1c <__aeabi_dcmplt>
 800d1dc:	b140      	cbz	r0, 800d1f0 <_dtoa_r+0x168>
 800d1de:	4638      	mov	r0, r7
 800d1e0:	f7f3 f9c0 	bl	8000564 <__aeabi_i2d>
 800d1e4:	4622      	mov	r2, r4
 800d1e6:	462b      	mov	r3, r5
 800d1e8:	f7f3 fc8e 	bl	8000b08 <__aeabi_dcmpeq>
 800d1ec:	b900      	cbnz	r0, 800d1f0 <_dtoa_r+0x168>
 800d1ee:	3f01      	subs	r7, #1
 800d1f0:	2f16      	cmp	r7, #22
 800d1f2:	d851      	bhi.n	800d298 <_dtoa_r+0x210>
 800d1f4:	4b5b      	ldr	r3, [pc, #364]	@ (800d364 <_dtoa_r+0x2dc>)
 800d1f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d202:	f7f3 fc8b 	bl	8000b1c <__aeabi_dcmplt>
 800d206:	2800      	cmp	r0, #0
 800d208:	d048      	beq.n	800d29c <_dtoa_r+0x214>
 800d20a:	3f01      	subs	r7, #1
 800d20c:	2300      	movs	r3, #0
 800d20e:	9312      	str	r3, [sp, #72]	@ 0x48
 800d210:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d212:	1b9b      	subs	r3, r3, r6
 800d214:	1e5a      	subs	r2, r3, #1
 800d216:	bf44      	itt	mi
 800d218:	f1c3 0801 	rsbmi	r8, r3, #1
 800d21c:	2300      	movmi	r3, #0
 800d21e:	9208      	str	r2, [sp, #32]
 800d220:	bf54      	ite	pl
 800d222:	f04f 0800 	movpl.w	r8, #0
 800d226:	9308      	strmi	r3, [sp, #32]
 800d228:	2f00      	cmp	r7, #0
 800d22a:	db39      	blt.n	800d2a0 <_dtoa_r+0x218>
 800d22c:	9b08      	ldr	r3, [sp, #32]
 800d22e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d230:	443b      	add	r3, r7
 800d232:	9308      	str	r3, [sp, #32]
 800d234:	2300      	movs	r3, #0
 800d236:	930a      	str	r3, [sp, #40]	@ 0x28
 800d238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d23a:	2b09      	cmp	r3, #9
 800d23c:	d864      	bhi.n	800d308 <_dtoa_r+0x280>
 800d23e:	2b05      	cmp	r3, #5
 800d240:	bfc4      	itt	gt
 800d242:	3b04      	subgt	r3, #4
 800d244:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d248:	f1a3 0302 	sub.w	r3, r3, #2
 800d24c:	bfcc      	ite	gt
 800d24e:	2400      	movgt	r4, #0
 800d250:	2401      	movle	r4, #1
 800d252:	2b03      	cmp	r3, #3
 800d254:	d863      	bhi.n	800d31e <_dtoa_r+0x296>
 800d256:	e8df f003 	tbb	[pc, r3]
 800d25a:	372a      	.short	0x372a
 800d25c:	5535      	.short	0x5535
 800d25e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d262:	441e      	add	r6, r3
 800d264:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d268:	2b20      	cmp	r3, #32
 800d26a:	bfc1      	itttt	gt
 800d26c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d270:	409f      	lslgt	r7, r3
 800d272:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d276:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d27a:	bfd6      	itet	le
 800d27c:	f1c3 0320 	rsble	r3, r3, #32
 800d280:	ea47 0003 	orrgt.w	r0, r7, r3
 800d284:	fa04 f003 	lslle.w	r0, r4, r3
 800d288:	f7f3 f95c 	bl	8000544 <__aeabi_ui2d>
 800d28c:	2201      	movs	r2, #1
 800d28e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d292:	3e01      	subs	r6, #1
 800d294:	9214      	str	r2, [sp, #80]	@ 0x50
 800d296:	e777      	b.n	800d188 <_dtoa_r+0x100>
 800d298:	2301      	movs	r3, #1
 800d29a:	e7b8      	b.n	800d20e <_dtoa_r+0x186>
 800d29c:	9012      	str	r0, [sp, #72]	@ 0x48
 800d29e:	e7b7      	b.n	800d210 <_dtoa_r+0x188>
 800d2a0:	427b      	negs	r3, r7
 800d2a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	eba8 0807 	sub.w	r8, r8, r7
 800d2aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d2ac:	e7c4      	b.n	800d238 <_dtoa_r+0x1b0>
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	dc35      	bgt.n	800d324 <_dtoa_r+0x29c>
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	9300      	str	r3, [sp, #0]
 800d2bc:	9307      	str	r3, [sp, #28]
 800d2be:	461a      	mov	r2, r3
 800d2c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d2c2:	e00b      	b.n	800d2dc <_dtoa_r+0x254>
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	e7f3      	b.n	800d2b0 <_dtoa_r+0x228>
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2ce:	18fb      	adds	r3, r7, r3
 800d2d0:	9300      	str	r3, [sp, #0]
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	9307      	str	r3, [sp, #28]
 800d2d8:	bfb8      	it	lt
 800d2da:	2301      	movlt	r3, #1
 800d2dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d2e0:	2100      	movs	r1, #0
 800d2e2:	2204      	movs	r2, #4
 800d2e4:	f102 0514 	add.w	r5, r2, #20
 800d2e8:	429d      	cmp	r5, r3
 800d2ea:	d91f      	bls.n	800d32c <_dtoa_r+0x2a4>
 800d2ec:	6041      	str	r1, [r0, #4]
 800d2ee:	4658      	mov	r0, fp
 800d2f0:	f000 fd8e 	bl	800de10 <_Balloc>
 800d2f4:	4682      	mov	sl, r0
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	d13c      	bne.n	800d374 <_dtoa_r+0x2ec>
 800d2fa:	4b1b      	ldr	r3, [pc, #108]	@ (800d368 <_dtoa_r+0x2e0>)
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	f240 11af 	movw	r1, #431	@ 0x1af
 800d302:	e6d8      	b.n	800d0b6 <_dtoa_r+0x2e>
 800d304:	2301      	movs	r3, #1
 800d306:	e7e0      	b.n	800d2ca <_dtoa_r+0x242>
 800d308:	2401      	movs	r4, #1
 800d30a:	2300      	movs	r3, #0
 800d30c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d30e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d310:	f04f 33ff 	mov.w	r3, #4294967295
 800d314:	9300      	str	r3, [sp, #0]
 800d316:	9307      	str	r3, [sp, #28]
 800d318:	2200      	movs	r2, #0
 800d31a:	2312      	movs	r3, #18
 800d31c:	e7d0      	b.n	800d2c0 <_dtoa_r+0x238>
 800d31e:	2301      	movs	r3, #1
 800d320:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d322:	e7f5      	b.n	800d310 <_dtoa_r+0x288>
 800d324:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d326:	9300      	str	r3, [sp, #0]
 800d328:	9307      	str	r3, [sp, #28]
 800d32a:	e7d7      	b.n	800d2dc <_dtoa_r+0x254>
 800d32c:	3101      	adds	r1, #1
 800d32e:	0052      	lsls	r2, r2, #1
 800d330:	e7d8      	b.n	800d2e4 <_dtoa_r+0x25c>
 800d332:	bf00      	nop
 800d334:	f3af 8000 	nop.w
 800d338:	636f4361 	.word	0x636f4361
 800d33c:	3fd287a7 	.word	0x3fd287a7
 800d340:	8b60c8b3 	.word	0x8b60c8b3
 800d344:	3fc68a28 	.word	0x3fc68a28
 800d348:	509f79fb 	.word	0x509f79fb
 800d34c:	3fd34413 	.word	0x3fd34413
 800d350:	08011489 	.word	0x08011489
 800d354:	080114a0 	.word	0x080114a0
 800d358:	7ff00000 	.word	0x7ff00000
 800d35c:	08011459 	.word	0x08011459
 800d360:	3ff80000 	.word	0x3ff80000
 800d364:	08011598 	.word	0x08011598
 800d368:	080114f8 	.word	0x080114f8
 800d36c:	08011485 	.word	0x08011485
 800d370:	08011458 	.word	0x08011458
 800d374:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d378:	6018      	str	r0, [r3, #0]
 800d37a:	9b07      	ldr	r3, [sp, #28]
 800d37c:	2b0e      	cmp	r3, #14
 800d37e:	f200 80a4 	bhi.w	800d4ca <_dtoa_r+0x442>
 800d382:	2c00      	cmp	r4, #0
 800d384:	f000 80a1 	beq.w	800d4ca <_dtoa_r+0x442>
 800d388:	2f00      	cmp	r7, #0
 800d38a:	dd33      	ble.n	800d3f4 <_dtoa_r+0x36c>
 800d38c:	4bad      	ldr	r3, [pc, #692]	@ (800d644 <_dtoa_r+0x5bc>)
 800d38e:	f007 020f 	and.w	r2, r7, #15
 800d392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d396:	ed93 7b00 	vldr	d7, [r3]
 800d39a:	05f8      	lsls	r0, r7, #23
 800d39c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d3a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d3a4:	d516      	bpl.n	800d3d4 <_dtoa_r+0x34c>
 800d3a6:	4ba8      	ldr	r3, [pc, #672]	@ (800d648 <_dtoa_r+0x5c0>)
 800d3a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d3b0:	f7f3 fa6c 	bl	800088c <__aeabi_ddiv>
 800d3b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3b8:	f004 040f 	and.w	r4, r4, #15
 800d3bc:	2603      	movs	r6, #3
 800d3be:	4da2      	ldr	r5, [pc, #648]	@ (800d648 <_dtoa_r+0x5c0>)
 800d3c0:	b954      	cbnz	r4, 800d3d8 <_dtoa_r+0x350>
 800d3c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3ca:	f7f3 fa5f 	bl	800088c <__aeabi_ddiv>
 800d3ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3d2:	e028      	b.n	800d426 <_dtoa_r+0x39e>
 800d3d4:	2602      	movs	r6, #2
 800d3d6:	e7f2      	b.n	800d3be <_dtoa_r+0x336>
 800d3d8:	07e1      	lsls	r1, r4, #31
 800d3da:	d508      	bpl.n	800d3ee <_dtoa_r+0x366>
 800d3dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d3e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d3e4:	f7f3 f928 	bl	8000638 <__aeabi_dmul>
 800d3e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3ec:	3601      	adds	r6, #1
 800d3ee:	1064      	asrs	r4, r4, #1
 800d3f0:	3508      	adds	r5, #8
 800d3f2:	e7e5      	b.n	800d3c0 <_dtoa_r+0x338>
 800d3f4:	f000 80d2 	beq.w	800d59c <_dtoa_r+0x514>
 800d3f8:	427c      	negs	r4, r7
 800d3fa:	4b92      	ldr	r3, [pc, #584]	@ (800d644 <_dtoa_r+0x5bc>)
 800d3fc:	4d92      	ldr	r5, [pc, #584]	@ (800d648 <_dtoa_r+0x5c0>)
 800d3fe:	f004 020f 	and.w	r2, r4, #15
 800d402:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d40e:	f7f3 f913 	bl	8000638 <__aeabi_dmul>
 800d412:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d416:	1124      	asrs	r4, r4, #4
 800d418:	2300      	movs	r3, #0
 800d41a:	2602      	movs	r6, #2
 800d41c:	2c00      	cmp	r4, #0
 800d41e:	f040 80b2 	bne.w	800d586 <_dtoa_r+0x4fe>
 800d422:	2b00      	cmp	r3, #0
 800d424:	d1d3      	bne.n	800d3ce <_dtoa_r+0x346>
 800d426:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d428:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f000 80b7 	beq.w	800d5a0 <_dtoa_r+0x518>
 800d432:	4b86      	ldr	r3, [pc, #536]	@ (800d64c <_dtoa_r+0x5c4>)
 800d434:	2200      	movs	r2, #0
 800d436:	4620      	mov	r0, r4
 800d438:	4629      	mov	r1, r5
 800d43a:	f7f3 fb6f 	bl	8000b1c <__aeabi_dcmplt>
 800d43e:	2800      	cmp	r0, #0
 800d440:	f000 80ae 	beq.w	800d5a0 <_dtoa_r+0x518>
 800d444:	9b07      	ldr	r3, [sp, #28]
 800d446:	2b00      	cmp	r3, #0
 800d448:	f000 80aa 	beq.w	800d5a0 <_dtoa_r+0x518>
 800d44c:	9b00      	ldr	r3, [sp, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	dd37      	ble.n	800d4c2 <_dtoa_r+0x43a>
 800d452:	1e7b      	subs	r3, r7, #1
 800d454:	9304      	str	r3, [sp, #16]
 800d456:	4620      	mov	r0, r4
 800d458:	4b7d      	ldr	r3, [pc, #500]	@ (800d650 <_dtoa_r+0x5c8>)
 800d45a:	2200      	movs	r2, #0
 800d45c:	4629      	mov	r1, r5
 800d45e:	f7f3 f8eb 	bl	8000638 <__aeabi_dmul>
 800d462:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d466:	9c00      	ldr	r4, [sp, #0]
 800d468:	3601      	adds	r6, #1
 800d46a:	4630      	mov	r0, r6
 800d46c:	f7f3 f87a 	bl	8000564 <__aeabi_i2d>
 800d470:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d474:	f7f3 f8e0 	bl	8000638 <__aeabi_dmul>
 800d478:	4b76      	ldr	r3, [pc, #472]	@ (800d654 <_dtoa_r+0x5cc>)
 800d47a:	2200      	movs	r2, #0
 800d47c:	f7f2 ff26 	bl	80002cc <__adddf3>
 800d480:	4605      	mov	r5, r0
 800d482:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d486:	2c00      	cmp	r4, #0
 800d488:	f040 808d 	bne.w	800d5a6 <_dtoa_r+0x51e>
 800d48c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d490:	4b71      	ldr	r3, [pc, #452]	@ (800d658 <_dtoa_r+0x5d0>)
 800d492:	2200      	movs	r2, #0
 800d494:	f7f2 ff18 	bl	80002c8 <__aeabi_dsub>
 800d498:	4602      	mov	r2, r0
 800d49a:	460b      	mov	r3, r1
 800d49c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d4a0:	462a      	mov	r2, r5
 800d4a2:	4633      	mov	r3, r6
 800d4a4:	f7f3 fb58 	bl	8000b58 <__aeabi_dcmpgt>
 800d4a8:	2800      	cmp	r0, #0
 800d4aa:	f040 828b 	bne.w	800d9c4 <_dtoa_r+0x93c>
 800d4ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4b2:	462a      	mov	r2, r5
 800d4b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d4b8:	f7f3 fb30 	bl	8000b1c <__aeabi_dcmplt>
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	f040 8128 	bne.w	800d712 <_dtoa_r+0x68a>
 800d4c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d4c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d4ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	f2c0 815a 	blt.w	800d786 <_dtoa_r+0x6fe>
 800d4d2:	2f0e      	cmp	r7, #14
 800d4d4:	f300 8157 	bgt.w	800d786 <_dtoa_r+0x6fe>
 800d4d8:	4b5a      	ldr	r3, [pc, #360]	@ (800d644 <_dtoa_r+0x5bc>)
 800d4da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d4de:	ed93 7b00 	vldr	d7, [r3]
 800d4e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	ed8d 7b00 	vstr	d7, [sp]
 800d4ea:	da03      	bge.n	800d4f4 <_dtoa_r+0x46c>
 800d4ec:	9b07      	ldr	r3, [sp, #28]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	f340 8101 	ble.w	800d6f6 <_dtoa_r+0x66e>
 800d4f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d4f8:	4656      	mov	r6, sl
 800d4fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4fe:	4620      	mov	r0, r4
 800d500:	4629      	mov	r1, r5
 800d502:	f7f3 f9c3 	bl	800088c <__aeabi_ddiv>
 800d506:	f7f3 fb47 	bl	8000b98 <__aeabi_d2iz>
 800d50a:	4680      	mov	r8, r0
 800d50c:	f7f3 f82a 	bl	8000564 <__aeabi_i2d>
 800d510:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d514:	f7f3 f890 	bl	8000638 <__aeabi_dmul>
 800d518:	4602      	mov	r2, r0
 800d51a:	460b      	mov	r3, r1
 800d51c:	4620      	mov	r0, r4
 800d51e:	4629      	mov	r1, r5
 800d520:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d524:	f7f2 fed0 	bl	80002c8 <__aeabi_dsub>
 800d528:	f806 4b01 	strb.w	r4, [r6], #1
 800d52c:	9d07      	ldr	r5, [sp, #28]
 800d52e:	eba6 040a 	sub.w	r4, r6, sl
 800d532:	42a5      	cmp	r5, r4
 800d534:	4602      	mov	r2, r0
 800d536:	460b      	mov	r3, r1
 800d538:	f040 8117 	bne.w	800d76a <_dtoa_r+0x6e2>
 800d53c:	f7f2 fec6 	bl	80002cc <__adddf3>
 800d540:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d544:	4604      	mov	r4, r0
 800d546:	460d      	mov	r5, r1
 800d548:	f7f3 fb06 	bl	8000b58 <__aeabi_dcmpgt>
 800d54c:	2800      	cmp	r0, #0
 800d54e:	f040 80f9 	bne.w	800d744 <_dtoa_r+0x6bc>
 800d552:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d556:	4620      	mov	r0, r4
 800d558:	4629      	mov	r1, r5
 800d55a:	f7f3 fad5 	bl	8000b08 <__aeabi_dcmpeq>
 800d55e:	b118      	cbz	r0, 800d568 <_dtoa_r+0x4e0>
 800d560:	f018 0f01 	tst.w	r8, #1
 800d564:	f040 80ee 	bne.w	800d744 <_dtoa_r+0x6bc>
 800d568:	4649      	mov	r1, r9
 800d56a:	4658      	mov	r0, fp
 800d56c:	f000 fc90 	bl	800de90 <_Bfree>
 800d570:	2300      	movs	r3, #0
 800d572:	7033      	strb	r3, [r6, #0]
 800d574:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d576:	3701      	adds	r7, #1
 800d578:	601f      	str	r7, [r3, #0]
 800d57a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	f000 831d 	beq.w	800dbbc <_dtoa_r+0xb34>
 800d582:	601e      	str	r6, [r3, #0]
 800d584:	e31a      	b.n	800dbbc <_dtoa_r+0xb34>
 800d586:	07e2      	lsls	r2, r4, #31
 800d588:	d505      	bpl.n	800d596 <_dtoa_r+0x50e>
 800d58a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d58e:	f7f3 f853 	bl	8000638 <__aeabi_dmul>
 800d592:	3601      	adds	r6, #1
 800d594:	2301      	movs	r3, #1
 800d596:	1064      	asrs	r4, r4, #1
 800d598:	3508      	adds	r5, #8
 800d59a:	e73f      	b.n	800d41c <_dtoa_r+0x394>
 800d59c:	2602      	movs	r6, #2
 800d59e:	e742      	b.n	800d426 <_dtoa_r+0x39e>
 800d5a0:	9c07      	ldr	r4, [sp, #28]
 800d5a2:	9704      	str	r7, [sp, #16]
 800d5a4:	e761      	b.n	800d46a <_dtoa_r+0x3e2>
 800d5a6:	4b27      	ldr	r3, [pc, #156]	@ (800d644 <_dtoa_r+0x5bc>)
 800d5a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d5aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d5ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d5b2:	4454      	add	r4, sl
 800d5b4:	2900      	cmp	r1, #0
 800d5b6:	d053      	beq.n	800d660 <_dtoa_r+0x5d8>
 800d5b8:	4928      	ldr	r1, [pc, #160]	@ (800d65c <_dtoa_r+0x5d4>)
 800d5ba:	2000      	movs	r0, #0
 800d5bc:	f7f3 f966 	bl	800088c <__aeabi_ddiv>
 800d5c0:	4633      	mov	r3, r6
 800d5c2:	462a      	mov	r2, r5
 800d5c4:	f7f2 fe80 	bl	80002c8 <__aeabi_dsub>
 800d5c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d5cc:	4656      	mov	r6, sl
 800d5ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5d2:	f7f3 fae1 	bl	8000b98 <__aeabi_d2iz>
 800d5d6:	4605      	mov	r5, r0
 800d5d8:	f7f2 ffc4 	bl	8000564 <__aeabi_i2d>
 800d5dc:	4602      	mov	r2, r0
 800d5de:	460b      	mov	r3, r1
 800d5e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5e4:	f7f2 fe70 	bl	80002c8 <__aeabi_dsub>
 800d5e8:	3530      	adds	r5, #48	@ 0x30
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d5f2:	f806 5b01 	strb.w	r5, [r6], #1
 800d5f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d5fa:	f7f3 fa8f 	bl	8000b1c <__aeabi_dcmplt>
 800d5fe:	2800      	cmp	r0, #0
 800d600:	d171      	bne.n	800d6e6 <_dtoa_r+0x65e>
 800d602:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d606:	4911      	ldr	r1, [pc, #68]	@ (800d64c <_dtoa_r+0x5c4>)
 800d608:	2000      	movs	r0, #0
 800d60a:	f7f2 fe5d 	bl	80002c8 <__aeabi_dsub>
 800d60e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d612:	f7f3 fa83 	bl	8000b1c <__aeabi_dcmplt>
 800d616:	2800      	cmp	r0, #0
 800d618:	f040 8095 	bne.w	800d746 <_dtoa_r+0x6be>
 800d61c:	42a6      	cmp	r6, r4
 800d61e:	f43f af50 	beq.w	800d4c2 <_dtoa_r+0x43a>
 800d622:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d626:	4b0a      	ldr	r3, [pc, #40]	@ (800d650 <_dtoa_r+0x5c8>)
 800d628:	2200      	movs	r2, #0
 800d62a:	f7f3 f805 	bl	8000638 <__aeabi_dmul>
 800d62e:	4b08      	ldr	r3, [pc, #32]	@ (800d650 <_dtoa_r+0x5c8>)
 800d630:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d634:	2200      	movs	r2, #0
 800d636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d63a:	f7f2 fffd 	bl	8000638 <__aeabi_dmul>
 800d63e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d642:	e7c4      	b.n	800d5ce <_dtoa_r+0x546>
 800d644:	08011598 	.word	0x08011598
 800d648:	08011570 	.word	0x08011570
 800d64c:	3ff00000 	.word	0x3ff00000
 800d650:	40240000 	.word	0x40240000
 800d654:	401c0000 	.word	0x401c0000
 800d658:	40140000 	.word	0x40140000
 800d65c:	3fe00000 	.word	0x3fe00000
 800d660:	4631      	mov	r1, r6
 800d662:	4628      	mov	r0, r5
 800d664:	f7f2 ffe8 	bl	8000638 <__aeabi_dmul>
 800d668:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d66c:	9415      	str	r4, [sp, #84]	@ 0x54
 800d66e:	4656      	mov	r6, sl
 800d670:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d674:	f7f3 fa90 	bl	8000b98 <__aeabi_d2iz>
 800d678:	4605      	mov	r5, r0
 800d67a:	f7f2 ff73 	bl	8000564 <__aeabi_i2d>
 800d67e:	4602      	mov	r2, r0
 800d680:	460b      	mov	r3, r1
 800d682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d686:	f7f2 fe1f 	bl	80002c8 <__aeabi_dsub>
 800d68a:	3530      	adds	r5, #48	@ 0x30
 800d68c:	f806 5b01 	strb.w	r5, [r6], #1
 800d690:	4602      	mov	r2, r0
 800d692:	460b      	mov	r3, r1
 800d694:	42a6      	cmp	r6, r4
 800d696:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d69a:	f04f 0200 	mov.w	r2, #0
 800d69e:	d124      	bne.n	800d6ea <_dtoa_r+0x662>
 800d6a0:	4bac      	ldr	r3, [pc, #688]	@ (800d954 <_dtoa_r+0x8cc>)
 800d6a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d6a6:	f7f2 fe11 	bl	80002cc <__adddf3>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6b2:	f7f3 fa51 	bl	8000b58 <__aeabi_dcmpgt>
 800d6b6:	2800      	cmp	r0, #0
 800d6b8:	d145      	bne.n	800d746 <_dtoa_r+0x6be>
 800d6ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d6be:	49a5      	ldr	r1, [pc, #660]	@ (800d954 <_dtoa_r+0x8cc>)
 800d6c0:	2000      	movs	r0, #0
 800d6c2:	f7f2 fe01 	bl	80002c8 <__aeabi_dsub>
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6ce:	f7f3 fa25 	bl	8000b1c <__aeabi_dcmplt>
 800d6d2:	2800      	cmp	r0, #0
 800d6d4:	f43f aef5 	beq.w	800d4c2 <_dtoa_r+0x43a>
 800d6d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d6da:	1e73      	subs	r3, r6, #1
 800d6dc:	9315      	str	r3, [sp, #84]	@ 0x54
 800d6de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d6e2:	2b30      	cmp	r3, #48	@ 0x30
 800d6e4:	d0f8      	beq.n	800d6d8 <_dtoa_r+0x650>
 800d6e6:	9f04      	ldr	r7, [sp, #16]
 800d6e8:	e73e      	b.n	800d568 <_dtoa_r+0x4e0>
 800d6ea:	4b9b      	ldr	r3, [pc, #620]	@ (800d958 <_dtoa_r+0x8d0>)
 800d6ec:	f7f2 ffa4 	bl	8000638 <__aeabi_dmul>
 800d6f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6f4:	e7bc      	b.n	800d670 <_dtoa_r+0x5e8>
 800d6f6:	d10c      	bne.n	800d712 <_dtoa_r+0x68a>
 800d6f8:	4b98      	ldr	r3, [pc, #608]	@ (800d95c <_dtoa_r+0x8d4>)
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d700:	f7f2 ff9a 	bl	8000638 <__aeabi_dmul>
 800d704:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d708:	f7f3 fa1c 	bl	8000b44 <__aeabi_dcmpge>
 800d70c:	2800      	cmp	r0, #0
 800d70e:	f000 8157 	beq.w	800d9c0 <_dtoa_r+0x938>
 800d712:	2400      	movs	r4, #0
 800d714:	4625      	mov	r5, r4
 800d716:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d718:	43db      	mvns	r3, r3
 800d71a:	9304      	str	r3, [sp, #16]
 800d71c:	4656      	mov	r6, sl
 800d71e:	2700      	movs	r7, #0
 800d720:	4621      	mov	r1, r4
 800d722:	4658      	mov	r0, fp
 800d724:	f000 fbb4 	bl	800de90 <_Bfree>
 800d728:	2d00      	cmp	r5, #0
 800d72a:	d0dc      	beq.n	800d6e6 <_dtoa_r+0x65e>
 800d72c:	b12f      	cbz	r7, 800d73a <_dtoa_r+0x6b2>
 800d72e:	42af      	cmp	r7, r5
 800d730:	d003      	beq.n	800d73a <_dtoa_r+0x6b2>
 800d732:	4639      	mov	r1, r7
 800d734:	4658      	mov	r0, fp
 800d736:	f000 fbab 	bl	800de90 <_Bfree>
 800d73a:	4629      	mov	r1, r5
 800d73c:	4658      	mov	r0, fp
 800d73e:	f000 fba7 	bl	800de90 <_Bfree>
 800d742:	e7d0      	b.n	800d6e6 <_dtoa_r+0x65e>
 800d744:	9704      	str	r7, [sp, #16]
 800d746:	4633      	mov	r3, r6
 800d748:	461e      	mov	r6, r3
 800d74a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d74e:	2a39      	cmp	r2, #57	@ 0x39
 800d750:	d107      	bne.n	800d762 <_dtoa_r+0x6da>
 800d752:	459a      	cmp	sl, r3
 800d754:	d1f8      	bne.n	800d748 <_dtoa_r+0x6c0>
 800d756:	9a04      	ldr	r2, [sp, #16]
 800d758:	3201      	adds	r2, #1
 800d75a:	9204      	str	r2, [sp, #16]
 800d75c:	2230      	movs	r2, #48	@ 0x30
 800d75e:	f88a 2000 	strb.w	r2, [sl]
 800d762:	781a      	ldrb	r2, [r3, #0]
 800d764:	3201      	adds	r2, #1
 800d766:	701a      	strb	r2, [r3, #0]
 800d768:	e7bd      	b.n	800d6e6 <_dtoa_r+0x65e>
 800d76a:	4b7b      	ldr	r3, [pc, #492]	@ (800d958 <_dtoa_r+0x8d0>)
 800d76c:	2200      	movs	r2, #0
 800d76e:	f7f2 ff63 	bl	8000638 <__aeabi_dmul>
 800d772:	2200      	movs	r2, #0
 800d774:	2300      	movs	r3, #0
 800d776:	4604      	mov	r4, r0
 800d778:	460d      	mov	r5, r1
 800d77a:	f7f3 f9c5 	bl	8000b08 <__aeabi_dcmpeq>
 800d77e:	2800      	cmp	r0, #0
 800d780:	f43f aebb 	beq.w	800d4fa <_dtoa_r+0x472>
 800d784:	e6f0      	b.n	800d568 <_dtoa_r+0x4e0>
 800d786:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d788:	2a00      	cmp	r2, #0
 800d78a:	f000 80db 	beq.w	800d944 <_dtoa_r+0x8bc>
 800d78e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d790:	2a01      	cmp	r2, #1
 800d792:	f300 80bf 	bgt.w	800d914 <_dtoa_r+0x88c>
 800d796:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d798:	2a00      	cmp	r2, #0
 800d79a:	f000 80b7 	beq.w	800d90c <_dtoa_r+0x884>
 800d79e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d7a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d7a4:	4646      	mov	r6, r8
 800d7a6:	9a08      	ldr	r2, [sp, #32]
 800d7a8:	2101      	movs	r1, #1
 800d7aa:	441a      	add	r2, r3
 800d7ac:	4658      	mov	r0, fp
 800d7ae:	4498      	add	r8, r3
 800d7b0:	9208      	str	r2, [sp, #32]
 800d7b2:	f000 fc21 	bl	800dff8 <__i2b>
 800d7b6:	4605      	mov	r5, r0
 800d7b8:	b15e      	cbz	r6, 800d7d2 <_dtoa_r+0x74a>
 800d7ba:	9b08      	ldr	r3, [sp, #32]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	dd08      	ble.n	800d7d2 <_dtoa_r+0x74a>
 800d7c0:	42b3      	cmp	r3, r6
 800d7c2:	9a08      	ldr	r2, [sp, #32]
 800d7c4:	bfa8      	it	ge
 800d7c6:	4633      	movge	r3, r6
 800d7c8:	eba8 0803 	sub.w	r8, r8, r3
 800d7cc:	1af6      	subs	r6, r6, r3
 800d7ce:	1ad3      	subs	r3, r2, r3
 800d7d0:	9308      	str	r3, [sp, #32]
 800d7d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7d4:	b1f3      	cbz	r3, 800d814 <_dtoa_r+0x78c>
 800d7d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	f000 80b7 	beq.w	800d94c <_dtoa_r+0x8c4>
 800d7de:	b18c      	cbz	r4, 800d804 <_dtoa_r+0x77c>
 800d7e0:	4629      	mov	r1, r5
 800d7e2:	4622      	mov	r2, r4
 800d7e4:	4658      	mov	r0, fp
 800d7e6:	f000 fcc7 	bl	800e178 <__pow5mult>
 800d7ea:	464a      	mov	r2, r9
 800d7ec:	4601      	mov	r1, r0
 800d7ee:	4605      	mov	r5, r0
 800d7f0:	4658      	mov	r0, fp
 800d7f2:	f000 fc17 	bl	800e024 <__multiply>
 800d7f6:	4649      	mov	r1, r9
 800d7f8:	9004      	str	r0, [sp, #16]
 800d7fa:	4658      	mov	r0, fp
 800d7fc:	f000 fb48 	bl	800de90 <_Bfree>
 800d800:	9b04      	ldr	r3, [sp, #16]
 800d802:	4699      	mov	r9, r3
 800d804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d806:	1b1a      	subs	r2, r3, r4
 800d808:	d004      	beq.n	800d814 <_dtoa_r+0x78c>
 800d80a:	4649      	mov	r1, r9
 800d80c:	4658      	mov	r0, fp
 800d80e:	f000 fcb3 	bl	800e178 <__pow5mult>
 800d812:	4681      	mov	r9, r0
 800d814:	2101      	movs	r1, #1
 800d816:	4658      	mov	r0, fp
 800d818:	f000 fbee 	bl	800dff8 <__i2b>
 800d81c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d81e:	4604      	mov	r4, r0
 800d820:	2b00      	cmp	r3, #0
 800d822:	f000 81cf 	beq.w	800dbc4 <_dtoa_r+0xb3c>
 800d826:	461a      	mov	r2, r3
 800d828:	4601      	mov	r1, r0
 800d82a:	4658      	mov	r0, fp
 800d82c:	f000 fca4 	bl	800e178 <__pow5mult>
 800d830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d832:	2b01      	cmp	r3, #1
 800d834:	4604      	mov	r4, r0
 800d836:	f300 8095 	bgt.w	800d964 <_dtoa_r+0x8dc>
 800d83a:	9b02      	ldr	r3, [sp, #8]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	f040 8087 	bne.w	800d950 <_dtoa_r+0x8c8>
 800d842:	9b03      	ldr	r3, [sp, #12]
 800d844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d848:	2b00      	cmp	r3, #0
 800d84a:	f040 8089 	bne.w	800d960 <_dtoa_r+0x8d8>
 800d84e:	9b03      	ldr	r3, [sp, #12]
 800d850:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d854:	0d1b      	lsrs	r3, r3, #20
 800d856:	051b      	lsls	r3, r3, #20
 800d858:	b12b      	cbz	r3, 800d866 <_dtoa_r+0x7de>
 800d85a:	9b08      	ldr	r3, [sp, #32]
 800d85c:	3301      	adds	r3, #1
 800d85e:	9308      	str	r3, [sp, #32]
 800d860:	f108 0801 	add.w	r8, r8, #1
 800d864:	2301      	movs	r3, #1
 800d866:	930a      	str	r3, [sp, #40]	@ 0x28
 800d868:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f000 81b0 	beq.w	800dbd0 <_dtoa_r+0xb48>
 800d870:	6923      	ldr	r3, [r4, #16]
 800d872:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d876:	6918      	ldr	r0, [r3, #16]
 800d878:	f000 fb72 	bl	800df60 <__hi0bits>
 800d87c:	f1c0 0020 	rsb	r0, r0, #32
 800d880:	9b08      	ldr	r3, [sp, #32]
 800d882:	4418      	add	r0, r3
 800d884:	f010 001f 	ands.w	r0, r0, #31
 800d888:	d077      	beq.n	800d97a <_dtoa_r+0x8f2>
 800d88a:	f1c0 0320 	rsb	r3, r0, #32
 800d88e:	2b04      	cmp	r3, #4
 800d890:	dd6b      	ble.n	800d96a <_dtoa_r+0x8e2>
 800d892:	9b08      	ldr	r3, [sp, #32]
 800d894:	f1c0 001c 	rsb	r0, r0, #28
 800d898:	4403      	add	r3, r0
 800d89a:	4480      	add	r8, r0
 800d89c:	4406      	add	r6, r0
 800d89e:	9308      	str	r3, [sp, #32]
 800d8a0:	f1b8 0f00 	cmp.w	r8, #0
 800d8a4:	dd05      	ble.n	800d8b2 <_dtoa_r+0x82a>
 800d8a6:	4649      	mov	r1, r9
 800d8a8:	4642      	mov	r2, r8
 800d8aa:	4658      	mov	r0, fp
 800d8ac:	f000 fcbe 	bl	800e22c <__lshift>
 800d8b0:	4681      	mov	r9, r0
 800d8b2:	9b08      	ldr	r3, [sp, #32]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	dd05      	ble.n	800d8c4 <_dtoa_r+0x83c>
 800d8b8:	4621      	mov	r1, r4
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	4658      	mov	r0, fp
 800d8be:	f000 fcb5 	bl	800e22c <__lshift>
 800d8c2:	4604      	mov	r4, r0
 800d8c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d059      	beq.n	800d97e <_dtoa_r+0x8f6>
 800d8ca:	4621      	mov	r1, r4
 800d8cc:	4648      	mov	r0, r9
 800d8ce:	f000 fd19 	bl	800e304 <__mcmp>
 800d8d2:	2800      	cmp	r0, #0
 800d8d4:	da53      	bge.n	800d97e <_dtoa_r+0x8f6>
 800d8d6:	1e7b      	subs	r3, r7, #1
 800d8d8:	9304      	str	r3, [sp, #16]
 800d8da:	4649      	mov	r1, r9
 800d8dc:	2300      	movs	r3, #0
 800d8de:	220a      	movs	r2, #10
 800d8e0:	4658      	mov	r0, fp
 800d8e2:	f000 faf7 	bl	800ded4 <__multadd>
 800d8e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d8e8:	4681      	mov	r9, r0
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	f000 8172 	beq.w	800dbd4 <_dtoa_r+0xb4c>
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	4629      	mov	r1, r5
 800d8f4:	220a      	movs	r2, #10
 800d8f6:	4658      	mov	r0, fp
 800d8f8:	f000 faec 	bl	800ded4 <__multadd>
 800d8fc:	9b00      	ldr	r3, [sp, #0]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	4605      	mov	r5, r0
 800d902:	dc67      	bgt.n	800d9d4 <_dtoa_r+0x94c>
 800d904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d906:	2b02      	cmp	r3, #2
 800d908:	dc41      	bgt.n	800d98e <_dtoa_r+0x906>
 800d90a:	e063      	b.n	800d9d4 <_dtoa_r+0x94c>
 800d90c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d90e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d912:	e746      	b.n	800d7a2 <_dtoa_r+0x71a>
 800d914:	9b07      	ldr	r3, [sp, #28]
 800d916:	1e5c      	subs	r4, r3, #1
 800d918:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d91a:	42a3      	cmp	r3, r4
 800d91c:	bfbf      	itttt	lt
 800d91e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d920:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d922:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d924:	1ae3      	sublt	r3, r4, r3
 800d926:	bfb4      	ite	lt
 800d928:	18d2      	addlt	r2, r2, r3
 800d92a:	1b1c      	subge	r4, r3, r4
 800d92c:	9b07      	ldr	r3, [sp, #28]
 800d92e:	bfbc      	itt	lt
 800d930:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d932:	2400      	movlt	r4, #0
 800d934:	2b00      	cmp	r3, #0
 800d936:	bfb5      	itete	lt
 800d938:	eba8 0603 	sublt.w	r6, r8, r3
 800d93c:	9b07      	ldrge	r3, [sp, #28]
 800d93e:	2300      	movlt	r3, #0
 800d940:	4646      	movge	r6, r8
 800d942:	e730      	b.n	800d7a6 <_dtoa_r+0x71e>
 800d944:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d946:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d948:	4646      	mov	r6, r8
 800d94a:	e735      	b.n	800d7b8 <_dtoa_r+0x730>
 800d94c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d94e:	e75c      	b.n	800d80a <_dtoa_r+0x782>
 800d950:	2300      	movs	r3, #0
 800d952:	e788      	b.n	800d866 <_dtoa_r+0x7de>
 800d954:	3fe00000 	.word	0x3fe00000
 800d958:	40240000 	.word	0x40240000
 800d95c:	40140000 	.word	0x40140000
 800d960:	9b02      	ldr	r3, [sp, #8]
 800d962:	e780      	b.n	800d866 <_dtoa_r+0x7de>
 800d964:	2300      	movs	r3, #0
 800d966:	930a      	str	r3, [sp, #40]	@ 0x28
 800d968:	e782      	b.n	800d870 <_dtoa_r+0x7e8>
 800d96a:	d099      	beq.n	800d8a0 <_dtoa_r+0x818>
 800d96c:	9a08      	ldr	r2, [sp, #32]
 800d96e:	331c      	adds	r3, #28
 800d970:	441a      	add	r2, r3
 800d972:	4498      	add	r8, r3
 800d974:	441e      	add	r6, r3
 800d976:	9208      	str	r2, [sp, #32]
 800d978:	e792      	b.n	800d8a0 <_dtoa_r+0x818>
 800d97a:	4603      	mov	r3, r0
 800d97c:	e7f6      	b.n	800d96c <_dtoa_r+0x8e4>
 800d97e:	9b07      	ldr	r3, [sp, #28]
 800d980:	9704      	str	r7, [sp, #16]
 800d982:	2b00      	cmp	r3, #0
 800d984:	dc20      	bgt.n	800d9c8 <_dtoa_r+0x940>
 800d986:	9300      	str	r3, [sp, #0]
 800d988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d98a:	2b02      	cmp	r3, #2
 800d98c:	dd1e      	ble.n	800d9cc <_dtoa_r+0x944>
 800d98e:	9b00      	ldr	r3, [sp, #0]
 800d990:	2b00      	cmp	r3, #0
 800d992:	f47f aec0 	bne.w	800d716 <_dtoa_r+0x68e>
 800d996:	4621      	mov	r1, r4
 800d998:	2205      	movs	r2, #5
 800d99a:	4658      	mov	r0, fp
 800d99c:	f000 fa9a 	bl	800ded4 <__multadd>
 800d9a0:	4601      	mov	r1, r0
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	4648      	mov	r0, r9
 800d9a6:	f000 fcad 	bl	800e304 <__mcmp>
 800d9aa:	2800      	cmp	r0, #0
 800d9ac:	f77f aeb3 	ble.w	800d716 <_dtoa_r+0x68e>
 800d9b0:	4656      	mov	r6, sl
 800d9b2:	2331      	movs	r3, #49	@ 0x31
 800d9b4:	f806 3b01 	strb.w	r3, [r6], #1
 800d9b8:	9b04      	ldr	r3, [sp, #16]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	9304      	str	r3, [sp, #16]
 800d9be:	e6ae      	b.n	800d71e <_dtoa_r+0x696>
 800d9c0:	9c07      	ldr	r4, [sp, #28]
 800d9c2:	9704      	str	r7, [sp, #16]
 800d9c4:	4625      	mov	r5, r4
 800d9c6:	e7f3      	b.n	800d9b0 <_dtoa_r+0x928>
 800d9c8:	9b07      	ldr	r3, [sp, #28]
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	f000 8104 	beq.w	800dbdc <_dtoa_r+0xb54>
 800d9d4:	2e00      	cmp	r6, #0
 800d9d6:	dd05      	ble.n	800d9e4 <_dtoa_r+0x95c>
 800d9d8:	4629      	mov	r1, r5
 800d9da:	4632      	mov	r2, r6
 800d9dc:	4658      	mov	r0, fp
 800d9de:	f000 fc25 	bl	800e22c <__lshift>
 800d9e2:	4605      	mov	r5, r0
 800d9e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d05a      	beq.n	800daa0 <_dtoa_r+0xa18>
 800d9ea:	6869      	ldr	r1, [r5, #4]
 800d9ec:	4658      	mov	r0, fp
 800d9ee:	f000 fa0f 	bl	800de10 <_Balloc>
 800d9f2:	4606      	mov	r6, r0
 800d9f4:	b928      	cbnz	r0, 800da02 <_dtoa_r+0x97a>
 800d9f6:	4b84      	ldr	r3, [pc, #528]	@ (800dc08 <_dtoa_r+0xb80>)
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d9fe:	f7ff bb5a 	b.w	800d0b6 <_dtoa_r+0x2e>
 800da02:	692a      	ldr	r2, [r5, #16]
 800da04:	3202      	adds	r2, #2
 800da06:	0092      	lsls	r2, r2, #2
 800da08:	f105 010c 	add.w	r1, r5, #12
 800da0c:	300c      	adds	r0, #12
 800da0e:	f7ff faa4 	bl	800cf5a <memcpy>
 800da12:	2201      	movs	r2, #1
 800da14:	4631      	mov	r1, r6
 800da16:	4658      	mov	r0, fp
 800da18:	f000 fc08 	bl	800e22c <__lshift>
 800da1c:	f10a 0301 	add.w	r3, sl, #1
 800da20:	9307      	str	r3, [sp, #28]
 800da22:	9b00      	ldr	r3, [sp, #0]
 800da24:	4453      	add	r3, sl
 800da26:	930b      	str	r3, [sp, #44]	@ 0x2c
 800da28:	9b02      	ldr	r3, [sp, #8]
 800da2a:	f003 0301 	and.w	r3, r3, #1
 800da2e:	462f      	mov	r7, r5
 800da30:	930a      	str	r3, [sp, #40]	@ 0x28
 800da32:	4605      	mov	r5, r0
 800da34:	9b07      	ldr	r3, [sp, #28]
 800da36:	4621      	mov	r1, r4
 800da38:	3b01      	subs	r3, #1
 800da3a:	4648      	mov	r0, r9
 800da3c:	9300      	str	r3, [sp, #0]
 800da3e:	f7ff fa9a 	bl	800cf76 <quorem>
 800da42:	4639      	mov	r1, r7
 800da44:	9002      	str	r0, [sp, #8]
 800da46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800da4a:	4648      	mov	r0, r9
 800da4c:	f000 fc5a 	bl	800e304 <__mcmp>
 800da50:	462a      	mov	r2, r5
 800da52:	9008      	str	r0, [sp, #32]
 800da54:	4621      	mov	r1, r4
 800da56:	4658      	mov	r0, fp
 800da58:	f000 fc70 	bl	800e33c <__mdiff>
 800da5c:	68c2      	ldr	r2, [r0, #12]
 800da5e:	4606      	mov	r6, r0
 800da60:	bb02      	cbnz	r2, 800daa4 <_dtoa_r+0xa1c>
 800da62:	4601      	mov	r1, r0
 800da64:	4648      	mov	r0, r9
 800da66:	f000 fc4d 	bl	800e304 <__mcmp>
 800da6a:	4602      	mov	r2, r0
 800da6c:	4631      	mov	r1, r6
 800da6e:	4658      	mov	r0, fp
 800da70:	920e      	str	r2, [sp, #56]	@ 0x38
 800da72:	f000 fa0d 	bl	800de90 <_Bfree>
 800da76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da7a:	9e07      	ldr	r6, [sp, #28]
 800da7c:	ea43 0102 	orr.w	r1, r3, r2
 800da80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da82:	4319      	orrs	r1, r3
 800da84:	d110      	bne.n	800daa8 <_dtoa_r+0xa20>
 800da86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800da8a:	d029      	beq.n	800dae0 <_dtoa_r+0xa58>
 800da8c:	9b08      	ldr	r3, [sp, #32]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	dd02      	ble.n	800da98 <_dtoa_r+0xa10>
 800da92:	9b02      	ldr	r3, [sp, #8]
 800da94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800da98:	9b00      	ldr	r3, [sp, #0]
 800da9a:	f883 8000 	strb.w	r8, [r3]
 800da9e:	e63f      	b.n	800d720 <_dtoa_r+0x698>
 800daa0:	4628      	mov	r0, r5
 800daa2:	e7bb      	b.n	800da1c <_dtoa_r+0x994>
 800daa4:	2201      	movs	r2, #1
 800daa6:	e7e1      	b.n	800da6c <_dtoa_r+0x9e4>
 800daa8:	9b08      	ldr	r3, [sp, #32]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	db04      	blt.n	800dab8 <_dtoa_r+0xa30>
 800daae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dab0:	430b      	orrs	r3, r1
 800dab2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dab4:	430b      	orrs	r3, r1
 800dab6:	d120      	bne.n	800dafa <_dtoa_r+0xa72>
 800dab8:	2a00      	cmp	r2, #0
 800daba:	dded      	ble.n	800da98 <_dtoa_r+0xa10>
 800dabc:	4649      	mov	r1, r9
 800dabe:	2201      	movs	r2, #1
 800dac0:	4658      	mov	r0, fp
 800dac2:	f000 fbb3 	bl	800e22c <__lshift>
 800dac6:	4621      	mov	r1, r4
 800dac8:	4681      	mov	r9, r0
 800daca:	f000 fc1b 	bl	800e304 <__mcmp>
 800dace:	2800      	cmp	r0, #0
 800dad0:	dc03      	bgt.n	800dada <_dtoa_r+0xa52>
 800dad2:	d1e1      	bne.n	800da98 <_dtoa_r+0xa10>
 800dad4:	f018 0f01 	tst.w	r8, #1
 800dad8:	d0de      	beq.n	800da98 <_dtoa_r+0xa10>
 800dada:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dade:	d1d8      	bne.n	800da92 <_dtoa_r+0xa0a>
 800dae0:	9a00      	ldr	r2, [sp, #0]
 800dae2:	2339      	movs	r3, #57	@ 0x39
 800dae4:	7013      	strb	r3, [r2, #0]
 800dae6:	4633      	mov	r3, r6
 800dae8:	461e      	mov	r6, r3
 800daea:	3b01      	subs	r3, #1
 800daec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800daf0:	2a39      	cmp	r2, #57	@ 0x39
 800daf2:	d052      	beq.n	800db9a <_dtoa_r+0xb12>
 800daf4:	3201      	adds	r2, #1
 800daf6:	701a      	strb	r2, [r3, #0]
 800daf8:	e612      	b.n	800d720 <_dtoa_r+0x698>
 800dafa:	2a00      	cmp	r2, #0
 800dafc:	dd07      	ble.n	800db0e <_dtoa_r+0xa86>
 800dafe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800db02:	d0ed      	beq.n	800dae0 <_dtoa_r+0xa58>
 800db04:	9a00      	ldr	r2, [sp, #0]
 800db06:	f108 0301 	add.w	r3, r8, #1
 800db0a:	7013      	strb	r3, [r2, #0]
 800db0c:	e608      	b.n	800d720 <_dtoa_r+0x698>
 800db0e:	9b07      	ldr	r3, [sp, #28]
 800db10:	9a07      	ldr	r2, [sp, #28]
 800db12:	f803 8c01 	strb.w	r8, [r3, #-1]
 800db16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db18:	4293      	cmp	r3, r2
 800db1a:	d028      	beq.n	800db6e <_dtoa_r+0xae6>
 800db1c:	4649      	mov	r1, r9
 800db1e:	2300      	movs	r3, #0
 800db20:	220a      	movs	r2, #10
 800db22:	4658      	mov	r0, fp
 800db24:	f000 f9d6 	bl	800ded4 <__multadd>
 800db28:	42af      	cmp	r7, r5
 800db2a:	4681      	mov	r9, r0
 800db2c:	f04f 0300 	mov.w	r3, #0
 800db30:	f04f 020a 	mov.w	r2, #10
 800db34:	4639      	mov	r1, r7
 800db36:	4658      	mov	r0, fp
 800db38:	d107      	bne.n	800db4a <_dtoa_r+0xac2>
 800db3a:	f000 f9cb 	bl	800ded4 <__multadd>
 800db3e:	4607      	mov	r7, r0
 800db40:	4605      	mov	r5, r0
 800db42:	9b07      	ldr	r3, [sp, #28]
 800db44:	3301      	adds	r3, #1
 800db46:	9307      	str	r3, [sp, #28]
 800db48:	e774      	b.n	800da34 <_dtoa_r+0x9ac>
 800db4a:	f000 f9c3 	bl	800ded4 <__multadd>
 800db4e:	4629      	mov	r1, r5
 800db50:	4607      	mov	r7, r0
 800db52:	2300      	movs	r3, #0
 800db54:	220a      	movs	r2, #10
 800db56:	4658      	mov	r0, fp
 800db58:	f000 f9bc 	bl	800ded4 <__multadd>
 800db5c:	4605      	mov	r5, r0
 800db5e:	e7f0      	b.n	800db42 <_dtoa_r+0xaba>
 800db60:	9b00      	ldr	r3, [sp, #0]
 800db62:	2b00      	cmp	r3, #0
 800db64:	bfcc      	ite	gt
 800db66:	461e      	movgt	r6, r3
 800db68:	2601      	movle	r6, #1
 800db6a:	4456      	add	r6, sl
 800db6c:	2700      	movs	r7, #0
 800db6e:	4649      	mov	r1, r9
 800db70:	2201      	movs	r2, #1
 800db72:	4658      	mov	r0, fp
 800db74:	f000 fb5a 	bl	800e22c <__lshift>
 800db78:	4621      	mov	r1, r4
 800db7a:	4681      	mov	r9, r0
 800db7c:	f000 fbc2 	bl	800e304 <__mcmp>
 800db80:	2800      	cmp	r0, #0
 800db82:	dcb0      	bgt.n	800dae6 <_dtoa_r+0xa5e>
 800db84:	d102      	bne.n	800db8c <_dtoa_r+0xb04>
 800db86:	f018 0f01 	tst.w	r8, #1
 800db8a:	d1ac      	bne.n	800dae6 <_dtoa_r+0xa5e>
 800db8c:	4633      	mov	r3, r6
 800db8e:	461e      	mov	r6, r3
 800db90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db94:	2a30      	cmp	r2, #48	@ 0x30
 800db96:	d0fa      	beq.n	800db8e <_dtoa_r+0xb06>
 800db98:	e5c2      	b.n	800d720 <_dtoa_r+0x698>
 800db9a:	459a      	cmp	sl, r3
 800db9c:	d1a4      	bne.n	800dae8 <_dtoa_r+0xa60>
 800db9e:	9b04      	ldr	r3, [sp, #16]
 800dba0:	3301      	adds	r3, #1
 800dba2:	9304      	str	r3, [sp, #16]
 800dba4:	2331      	movs	r3, #49	@ 0x31
 800dba6:	f88a 3000 	strb.w	r3, [sl]
 800dbaa:	e5b9      	b.n	800d720 <_dtoa_r+0x698>
 800dbac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dbae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dc0c <_dtoa_r+0xb84>
 800dbb2:	b11b      	cbz	r3, 800dbbc <_dtoa_r+0xb34>
 800dbb4:	f10a 0308 	add.w	r3, sl, #8
 800dbb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dbba:	6013      	str	r3, [r2, #0]
 800dbbc:	4650      	mov	r0, sl
 800dbbe:	b019      	add	sp, #100	@ 0x64
 800dbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	f77f ae37 	ble.w	800d83a <_dtoa_r+0x7b2>
 800dbcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbce:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbd0:	2001      	movs	r0, #1
 800dbd2:	e655      	b.n	800d880 <_dtoa_r+0x7f8>
 800dbd4:	9b00      	ldr	r3, [sp, #0]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	f77f aed6 	ble.w	800d988 <_dtoa_r+0x900>
 800dbdc:	4656      	mov	r6, sl
 800dbde:	4621      	mov	r1, r4
 800dbe0:	4648      	mov	r0, r9
 800dbe2:	f7ff f9c8 	bl	800cf76 <quorem>
 800dbe6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dbea:	f806 8b01 	strb.w	r8, [r6], #1
 800dbee:	9b00      	ldr	r3, [sp, #0]
 800dbf0:	eba6 020a 	sub.w	r2, r6, sl
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	ddb3      	ble.n	800db60 <_dtoa_r+0xad8>
 800dbf8:	4649      	mov	r1, r9
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	220a      	movs	r2, #10
 800dbfe:	4658      	mov	r0, fp
 800dc00:	f000 f968 	bl	800ded4 <__multadd>
 800dc04:	4681      	mov	r9, r0
 800dc06:	e7ea      	b.n	800dbde <_dtoa_r+0xb56>
 800dc08:	080114f8 	.word	0x080114f8
 800dc0c:	0801147c 	.word	0x0801147c

0800dc10 <_free_r>:
 800dc10:	b538      	push	{r3, r4, r5, lr}
 800dc12:	4605      	mov	r5, r0
 800dc14:	2900      	cmp	r1, #0
 800dc16:	d041      	beq.n	800dc9c <_free_r+0x8c>
 800dc18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc1c:	1f0c      	subs	r4, r1, #4
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	bfb8      	it	lt
 800dc22:	18e4      	addlt	r4, r4, r3
 800dc24:	f000 f8e8 	bl	800ddf8 <__malloc_lock>
 800dc28:	4a1d      	ldr	r2, [pc, #116]	@ (800dca0 <_free_r+0x90>)
 800dc2a:	6813      	ldr	r3, [r2, #0]
 800dc2c:	b933      	cbnz	r3, 800dc3c <_free_r+0x2c>
 800dc2e:	6063      	str	r3, [r4, #4]
 800dc30:	6014      	str	r4, [r2, #0]
 800dc32:	4628      	mov	r0, r5
 800dc34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc38:	f000 b8e4 	b.w	800de04 <__malloc_unlock>
 800dc3c:	42a3      	cmp	r3, r4
 800dc3e:	d908      	bls.n	800dc52 <_free_r+0x42>
 800dc40:	6820      	ldr	r0, [r4, #0]
 800dc42:	1821      	adds	r1, r4, r0
 800dc44:	428b      	cmp	r3, r1
 800dc46:	bf01      	itttt	eq
 800dc48:	6819      	ldreq	r1, [r3, #0]
 800dc4a:	685b      	ldreq	r3, [r3, #4]
 800dc4c:	1809      	addeq	r1, r1, r0
 800dc4e:	6021      	streq	r1, [r4, #0]
 800dc50:	e7ed      	b.n	800dc2e <_free_r+0x1e>
 800dc52:	461a      	mov	r2, r3
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	b10b      	cbz	r3, 800dc5c <_free_r+0x4c>
 800dc58:	42a3      	cmp	r3, r4
 800dc5a:	d9fa      	bls.n	800dc52 <_free_r+0x42>
 800dc5c:	6811      	ldr	r1, [r2, #0]
 800dc5e:	1850      	adds	r0, r2, r1
 800dc60:	42a0      	cmp	r0, r4
 800dc62:	d10b      	bne.n	800dc7c <_free_r+0x6c>
 800dc64:	6820      	ldr	r0, [r4, #0]
 800dc66:	4401      	add	r1, r0
 800dc68:	1850      	adds	r0, r2, r1
 800dc6a:	4283      	cmp	r3, r0
 800dc6c:	6011      	str	r1, [r2, #0]
 800dc6e:	d1e0      	bne.n	800dc32 <_free_r+0x22>
 800dc70:	6818      	ldr	r0, [r3, #0]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	6053      	str	r3, [r2, #4]
 800dc76:	4408      	add	r0, r1
 800dc78:	6010      	str	r0, [r2, #0]
 800dc7a:	e7da      	b.n	800dc32 <_free_r+0x22>
 800dc7c:	d902      	bls.n	800dc84 <_free_r+0x74>
 800dc7e:	230c      	movs	r3, #12
 800dc80:	602b      	str	r3, [r5, #0]
 800dc82:	e7d6      	b.n	800dc32 <_free_r+0x22>
 800dc84:	6820      	ldr	r0, [r4, #0]
 800dc86:	1821      	adds	r1, r4, r0
 800dc88:	428b      	cmp	r3, r1
 800dc8a:	bf04      	itt	eq
 800dc8c:	6819      	ldreq	r1, [r3, #0]
 800dc8e:	685b      	ldreq	r3, [r3, #4]
 800dc90:	6063      	str	r3, [r4, #4]
 800dc92:	bf04      	itt	eq
 800dc94:	1809      	addeq	r1, r1, r0
 800dc96:	6021      	streq	r1, [r4, #0]
 800dc98:	6054      	str	r4, [r2, #4]
 800dc9a:	e7ca      	b.n	800dc32 <_free_r+0x22>
 800dc9c:	bd38      	pop	{r3, r4, r5, pc}
 800dc9e:	bf00      	nop
 800dca0:	20000938 	.word	0x20000938

0800dca4 <malloc>:
 800dca4:	4b02      	ldr	r3, [pc, #8]	@ (800dcb0 <malloc+0xc>)
 800dca6:	4601      	mov	r1, r0
 800dca8:	6818      	ldr	r0, [r3, #0]
 800dcaa:	f000 b825 	b.w	800dcf8 <_malloc_r>
 800dcae:	bf00      	nop
 800dcb0:	20000058 	.word	0x20000058

0800dcb4 <sbrk_aligned>:
 800dcb4:	b570      	push	{r4, r5, r6, lr}
 800dcb6:	4e0f      	ldr	r6, [pc, #60]	@ (800dcf4 <sbrk_aligned+0x40>)
 800dcb8:	460c      	mov	r4, r1
 800dcba:	6831      	ldr	r1, [r6, #0]
 800dcbc:	4605      	mov	r5, r0
 800dcbe:	b911      	cbnz	r1, 800dcc6 <sbrk_aligned+0x12>
 800dcc0:	f000 fcd4 	bl	800e66c <_sbrk_r>
 800dcc4:	6030      	str	r0, [r6, #0]
 800dcc6:	4621      	mov	r1, r4
 800dcc8:	4628      	mov	r0, r5
 800dcca:	f000 fccf 	bl	800e66c <_sbrk_r>
 800dcce:	1c43      	adds	r3, r0, #1
 800dcd0:	d103      	bne.n	800dcda <sbrk_aligned+0x26>
 800dcd2:	f04f 34ff 	mov.w	r4, #4294967295
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	bd70      	pop	{r4, r5, r6, pc}
 800dcda:	1cc4      	adds	r4, r0, #3
 800dcdc:	f024 0403 	bic.w	r4, r4, #3
 800dce0:	42a0      	cmp	r0, r4
 800dce2:	d0f8      	beq.n	800dcd6 <sbrk_aligned+0x22>
 800dce4:	1a21      	subs	r1, r4, r0
 800dce6:	4628      	mov	r0, r5
 800dce8:	f000 fcc0 	bl	800e66c <_sbrk_r>
 800dcec:	3001      	adds	r0, #1
 800dcee:	d1f2      	bne.n	800dcd6 <sbrk_aligned+0x22>
 800dcf0:	e7ef      	b.n	800dcd2 <sbrk_aligned+0x1e>
 800dcf2:	bf00      	nop
 800dcf4:	20000934 	.word	0x20000934

0800dcf8 <_malloc_r>:
 800dcf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcfc:	1ccd      	adds	r5, r1, #3
 800dcfe:	f025 0503 	bic.w	r5, r5, #3
 800dd02:	3508      	adds	r5, #8
 800dd04:	2d0c      	cmp	r5, #12
 800dd06:	bf38      	it	cc
 800dd08:	250c      	movcc	r5, #12
 800dd0a:	2d00      	cmp	r5, #0
 800dd0c:	4606      	mov	r6, r0
 800dd0e:	db01      	blt.n	800dd14 <_malloc_r+0x1c>
 800dd10:	42a9      	cmp	r1, r5
 800dd12:	d904      	bls.n	800dd1e <_malloc_r+0x26>
 800dd14:	230c      	movs	r3, #12
 800dd16:	6033      	str	r3, [r6, #0]
 800dd18:	2000      	movs	r0, #0
 800dd1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ddf4 <_malloc_r+0xfc>
 800dd22:	f000 f869 	bl	800ddf8 <__malloc_lock>
 800dd26:	f8d8 3000 	ldr.w	r3, [r8]
 800dd2a:	461c      	mov	r4, r3
 800dd2c:	bb44      	cbnz	r4, 800dd80 <_malloc_r+0x88>
 800dd2e:	4629      	mov	r1, r5
 800dd30:	4630      	mov	r0, r6
 800dd32:	f7ff ffbf 	bl	800dcb4 <sbrk_aligned>
 800dd36:	1c43      	adds	r3, r0, #1
 800dd38:	4604      	mov	r4, r0
 800dd3a:	d158      	bne.n	800ddee <_malloc_r+0xf6>
 800dd3c:	f8d8 4000 	ldr.w	r4, [r8]
 800dd40:	4627      	mov	r7, r4
 800dd42:	2f00      	cmp	r7, #0
 800dd44:	d143      	bne.n	800ddce <_malloc_r+0xd6>
 800dd46:	2c00      	cmp	r4, #0
 800dd48:	d04b      	beq.n	800dde2 <_malloc_r+0xea>
 800dd4a:	6823      	ldr	r3, [r4, #0]
 800dd4c:	4639      	mov	r1, r7
 800dd4e:	4630      	mov	r0, r6
 800dd50:	eb04 0903 	add.w	r9, r4, r3
 800dd54:	f000 fc8a 	bl	800e66c <_sbrk_r>
 800dd58:	4581      	cmp	r9, r0
 800dd5a:	d142      	bne.n	800dde2 <_malloc_r+0xea>
 800dd5c:	6821      	ldr	r1, [r4, #0]
 800dd5e:	1a6d      	subs	r5, r5, r1
 800dd60:	4629      	mov	r1, r5
 800dd62:	4630      	mov	r0, r6
 800dd64:	f7ff ffa6 	bl	800dcb4 <sbrk_aligned>
 800dd68:	3001      	adds	r0, #1
 800dd6a:	d03a      	beq.n	800dde2 <_malloc_r+0xea>
 800dd6c:	6823      	ldr	r3, [r4, #0]
 800dd6e:	442b      	add	r3, r5
 800dd70:	6023      	str	r3, [r4, #0]
 800dd72:	f8d8 3000 	ldr.w	r3, [r8]
 800dd76:	685a      	ldr	r2, [r3, #4]
 800dd78:	bb62      	cbnz	r2, 800ddd4 <_malloc_r+0xdc>
 800dd7a:	f8c8 7000 	str.w	r7, [r8]
 800dd7e:	e00f      	b.n	800dda0 <_malloc_r+0xa8>
 800dd80:	6822      	ldr	r2, [r4, #0]
 800dd82:	1b52      	subs	r2, r2, r5
 800dd84:	d420      	bmi.n	800ddc8 <_malloc_r+0xd0>
 800dd86:	2a0b      	cmp	r2, #11
 800dd88:	d917      	bls.n	800ddba <_malloc_r+0xc2>
 800dd8a:	1961      	adds	r1, r4, r5
 800dd8c:	42a3      	cmp	r3, r4
 800dd8e:	6025      	str	r5, [r4, #0]
 800dd90:	bf18      	it	ne
 800dd92:	6059      	strne	r1, [r3, #4]
 800dd94:	6863      	ldr	r3, [r4, #4]
 800dd96:	bf08      	it	eq
 800dd98:	f8c8 1000 	streq.w	r1, [r8]
 800dd9c:	5162      	str	r2, [r4, r5]
 800dd9e:	604b      	str	r3, [r1, #4]
 800dda0:	4630      	mov	r0, r6
 800dda2:	f000 f82f 	bl	800de04 <__malloc_unlock>
 800dda6:	f104 000b 	add.w	r0, r4, #11
 800ddaa:	1d23      	adds	r3, r4, #4
 800ddac:	f020 0007 	bic.w	r0, r0, #7
 800ddb0:	1ac2      	subs	r2, r0, r3
 800ddb2:	bf1c      	itt	ne
 800ddb4:	1a1b      	subne	r3, r3, r0
 800ddb6:	50a3      	strne	r3, [r4, r2]
 800ddb8:	e7af      	b.n	800dd1a <_malloc_r+0x22>
 800ddba:	6862      	ldr	r2, [r4, #4]
 800ddbc:	42a3      	cmp	r3, r4
 800ddbe:	bf0c      	ite	eq
 800ddc0:	f8c8 2000 	streq.w	r2, [r8]
 800ddc4:	605a      	strne	r2, [r3, #4]
 800ddc6:	e7eb      	b.n	800dda0 <_malloc_r+0xa8>
 800ddc8:	4623      	mov	r3, r4
 800ddca:	6864      	ldr	r4, [r4, #4]
 800ddcc:	e7ae      	b.n	800dd2c <_malloc_r+0x34>
 800ddce:	463c      	mov	r4, r7
 800ddd0:	687f      	ldr	r7, [r7, #4]
 800ddd2:	e7b6      	b.n	800dd42 <_malloc_r+0x4a>
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	685b      	ldr	r3, [r3, #4]
 800ddd8:	42a3      	cmp	r3, r4
 800ddda:	d1fb      	bne.n	800ddd4 <_malloc_r+0xdc>
 800dddc:	2300      	movs	r3, #0
 800ddde:	6053      	str	r3, [r2, #4]
 800dde0:	e7de      	b.n	800dda0 <_malloc_r+0xa8>
 800dde2:	230c      	movs	r3, #12
 800dde4:	6033      	str	r3, [r6, #0]
 800dde6:	4630      	mov	r0, r6
 800dde8:	f000 f80c 	bl	800de04 <__malloc_unlock>
 800ddec:	e794      	b.n	800dd18 <_malloc_r+0x20>
 800ddee:	6005      	str	r5, [r0, #0]
 800ddf0:	e7d6      	b.n	800dda0 <_malloc_r+0xa8>
 800ddf2:	bf00      	nop
 800ddf4:	20000938 	.word	0x20000938

0800ddf8 <__malloc_lock>:
 800ddf8:	4801      	ldr	r0, [pc, #4]	@ (800de00 <__malloc_lock+0x8>)
 800ddfa:	f7ff b8ac 	b.w	800cf56 <__retarget_lock_acquire_recursive>
 800ddfe:	bf00      	nop
 800de00:	20000930 	.word	0x20000930

0800de04 <__malloc_unlock>:
 800de04:	4801      	ldr	r0, [pc, #4]	@ (800de0c <__malloc_unlock+0x8>)
 800de06:	f7ff b8a7 	b.w	800cf58 <__retarget_lock_release_recursive>
 800de0a:	bf00      	nop
 800de0c:	20000930 	.word	0x20000930

0800de10 <_Balloc>:
 800de10:	b570      	push	{r4, r5, r6, lr}
 800de12:	69c6      	ldr	r6, [r0, #28]
 800de14:	4604      	mov	r4, r0
 800de16:	460d      	mov	r5, r1
 800de18:	b976      	cbnz	r6, 800de38 <_Balloc+0x28>
 800de1a:	2010      	movs	r0, #16
 800de1c:	f7ff ff42 	bl	800dca4 <malloc>
 800de20:	4602      	mov	r2, r0
 800de22:	61e0      	str	r0, [r4, #28]
 800de24:	b920      	cbnz	r0, 800de30 <_Balloc+0x20>
 800de26:	4b18      	ldr	r3, [pc, #96]	@ (800de88 <_Balloc+0x78>)
 800de28:	4818      	ldr	r0, [pc, #96]	@ (800de8c <_Balloc+0x7c>)
 800de2a:	216b      	movs	r1, #107	@ 0x6b
 800de2c:	f000 fc2e 	bl	800e68c <__assert_func>
 800de30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de34:	6006      	str	r6, [r0, #0]
 800de36:	60c6      	str	r6, [r0, #12]
 800de38:	69e6      	ldr	r6, [r4, #28]
 800de3a:	68f3      	ldr	r3, [r6, #12]
 800de3c:	b183      	cbz	r3, 800de60 <_Balloc+0x50>
 800de3e:	69e3      	ldr	r3, [r4, #28]
 800de40:	68db      	ldr	r3, [r3, #12]
 800de42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800de46:	b9b8      	cbnz	r0, 800de78 <_Balloc+0x68>
 800de48:	2101      	movs	r1, #1
 800de4a:	fa01 f605 	lsl.w	r6, r1, r5
 800de4e:	1d72      	adds	r2, r6, #5
 800de50:	0092      	lsls	r2, r2, #2
 800de52:	4620      	mov	r0, r4
 800de54:	f000 fc38 	bl	800e6c8 <_calloc_r>
 800de58:	b160      	cbz	r0, 800de74 <_Balloc+0x64>
 800de5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800de5e:	e00e      	b.n	800de7e <_Balloc+0x6e>
 800de60:	2221      	movs	r2, #33	@ 0x21
 800de62:	2104      	movs	r1, #4
 800de64:	4620      	mov	r0, r4
 800de66:	f000 fc2f 	bl	800e6c8 <_calloc_r>
 800de6a:	69e3      	ldr	r3, [r4, #28]
 800de6c:	60f0      	str	r0, [r6, #12]
 800de6e:	68db      	ldr	r3, [r3, #12]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d1e4      	bne.n	800de3e <_Balloc+0x2e>
 800de74:	2000      	movs	r0, #0
 800de76:	bd70      	pop	{r4, r5, r6, pc}
 800de78:	6802      	ldr	r2, [r0, #0]
 800de7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800de7e:	2300      	movs	r3, #0
 800de80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800de84:	e7f7      	b.n	800de76 <_Balloc+0x66>
 800de86:	bf00      	nop
 800de88:	08011489 	.word	0x08011489
 800de8c:	08011509 	.word	0x08011509

0800de90 <_Bfree>:
 800de90:	b570      	push	{r4, r5, r6, lr}
 800de92:	69c6      	ldr	r6, [r0, #28]
 800de94:	4605      	mov	r5, r0
 800de96:	460c      	mov	r4, r1
 800de98:	b976      	cbnz	r6, 800deb8 <_Bfree+0x28>
 800de9a:	2010      	movs	r0, #16
 800de9c:	f7ff ff02 	bl	800dca4 <malloc>
 800dea0:	4602      	mov	r2, r0
 800dea2:	61e8      	str	r0, [r5, #28]
 800dea4:	b920      	cbnz	r0, 800deb0 <_Bfree+0x20>
 800dea6:	4b09      	ldr	r3, [pc, #36]	@ (800decc <_Bfree+0x3c>)
 800dea8:	4809      	ldr	r0, [pc, #36]	@ (800ded0 <_Bfree+0x40>)
 800deaa:	218f      	movs	r1, #143	@ 0x8f
 800deac:	f000 fbee 	bl	800e68c <__assert_func>
 800deb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800deb4:	6006      	str	r6, [r0, #0]
 800deb6:	60c6      	str	r6, [r0, #12]
 800deb8:	b13c      	cbz	r4, 800deca <_Bfree+0x3a>
 800deba:	69eb      	ldr	r3, [r5, #28]
 800debc:	6862      	ldr	r2, [r4, #4]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dec4:	6021      	str	r1, [r4, #0]
 800dec6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800deca:	bd70      	pop	{r4, r5, r6, pc}
 800decc:	08011489 	.word	0x08011489
 800ded0:	08011509 	.word	0x08011509

0800ded4 <__multadd>:
 800ded4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ded8:	690d      	ldr	r5, [r1, #16]
 800deda:	4607      	mov	r7, r0
 800dedc:	460c      	mov	r4, r1
 800dede:	461e      	mov	r6, r3
 800dee0:	f101 0c14 	add.w	ip, r1, #20
 800dee4:	2000      	movs	r0, #0
 800dee6:	f8dc 3000 	ldr.w	r3, [ip]
 800deea:	b299      	uxth	r1, r3
 800deec:	fb02 6101 	mla	r1, r2, r1, r6
 800def0:	0c1e      	lsrs	r6, r3, #16
 800def2:	0c0b      	lsrs	r3, r1, #16
 800def4:	fb02 3306 	mla	r3, r2, r6, r3
 800def8:	b289      	uxth	r1, r1
 800defa:	3001      	adds	r0, #1
 800defc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800df00:	4285      	cmp	r5, r0
 800df02:	f84c 1b04 	str.w	r1, [ip], #4
 800df06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800df0a:	dcec      	bgt.n	800dee6 <__multadd+0x12>
 800df0c:	b30e      	cbz	r6, 800df52 <__multadd+0x7e>
 800df0e:	68a3      	ldr	r3, [r4, #8]
 800df10:	42ab      	cmp	r3, r5
 800df12:	dc19      	bgt.n	800df48 <__multadd+0x74>
 800df14:	6861      	ldr	r1, [r4, #4]
 800df16:	4638      	mov	r0, r7
 800df18:	3101      	adds	r1, #1
 800df1a:	f7ff ff79 	bl	800de10 <_Balloc>
 800df1e:	4680      	mov	r8, r0
 800df20:	b928      	cbnz	r0, 800df2e <__multadd+0x5a>
 800df22:	4602      	mov	r2, r0
 800df24:	4b0c      	ldr	r3, [pc, #48]	@ (800df58 <__multadd+0x84>)
 800df26:	480d      	ldr	r0, [pc, #52]	@ (800df5c <__multadd+0x88>)
 800df28:	21ba      	movs	r1, #186	@ 0xba
 800df2a:	f000 fbaf 	bl	800e68c <__assert_func>
 800df2e:	6922      	ldr	r2, [r4, #16]
 800df30:	3202      	adds	r2, #2
 800df32:	f104 010c 	add.w	r1, r4, #12
 800df36:	0092      	lsls	r2, r2, #2
 800df38:	300c      	adds	r0, #12
 800df3a:	f7ff f80e 	bl	800cf5a <memcpy>
 800df3e:	4621      	mov	r1, r4
 800df40:	4638      	mov	r0, r7
 800df42:	f7ff ffa5 	bl	800de90 <_Bfree>
 800df46:	4644      	mov	r4, r8
 800df48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800df4c:	3501      	adds	r5, #1
 800df4e:	615e      	str	r6, [r3, #20]
 800df50:	6125      	str	r5, [r4, #16]
 800df52:	4620      	mov	r0, r4
 800df54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df58:	080114f8 	.word	0x080114f8
 800df5c:	08011509 	.word	0x08011509

0800df60 <__hi0bits>:
 800df60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800df64:	4603      	mov	r3, r0
 800df66:	bf36      	itet	cc
 800df68:	0403      	lslcc	r3, r0, #16
 800df6a:	2000      	movcs	r0, #0
 800df6c:	2010      	movcc	r0, #16
 800df6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800df72:	bf3c      	itt	cc
 800df74:	021b      	lslcc	r3, r3, #8
 800df76:	3008      	addcc	r0, #8
 800df78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800df7c:	bf3c      	itt	cc
 800df7e:	011b      	lslcc	r3, r3, #4
 800df80:	3004      	addcc	r0, #4
 800df82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df86:	bf3c      	itt	cc
 800df88:	009b      	lslcc	r3, r3, #2
 800df8a:	3002      	addcc	r0, #2
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	db05      	blt.n	800df9c <__hi0bits+0x3c>
 800df90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800df94:	f100 0001 	add.w	r0, r0, #1
 800df98:	bf08      	it	eq
 800df9a:	2020      	moveq	r0, #32
 800df9c:	4770      	bx	lr

0800df9e <__lo0bits>:
 800df9e:	6803      	ldr	r3, [r0, #0]
 800dfa0:	4602      	mov	r2, r0
 800dfa2:	f013 0007 	ands.w	r0, r3, #7
 800dfa6:	d00b      	beq.n	800dfc0 <__lo0bits+0x22>
 800dfa8:	07d9      	lsls	r1, r3, #31
 800dfaa:	d421      	bmi.n	800dff0 <__lo0bits+0x52>
 800dfac:	0798      	lsls	r0, r3, #30
 800dfae:	bf49      	itett	mi
 800dfb0:	085b      	lsrmi	r3, r3, #1
 800dfb2:	089b      	lsrpl	r3, r3, #2
 800dfb4:	2001      	movmi	r0, #1
 800dfb6:	6013      	strmi	r3, [r2, #0]
 800dfb8:	bf5c      	itt	pl
 800dfba:	6013      	strpl	r3, [r2, #0]
 800dfbc:	2002      	movpl	r0, #2
 800dfbe:	4770      	bx	lr
 800dfc0:	b299      	uxth	r1, r3
 800dfc2:	b909      	cbnz	r1, 800dfc8 <__lo0bits+0x2a>
 800dfc4:	0c1b      	lsrs	r3, r3, #16
 800dfc6:	2010      	movs	r0, #16
 800dfc8:	b2d9      	uxtb	r1, r3
 800dfca:	b909      	cbnz	r1, 800dfd0 <__lo0bits+0x32>
 800dfcc:	3008      	adds	r0, #8
 800dfce:	0a1b      	lsrs	r3, r3, #8
 800dfd0:	0719      	lsls	r1, r3, #28
 800dfd2:	bf04      	itt	eq
 800dfd4:	091b      	lsreq	r3, r3, #4
 800dfd6:	3004      	addeq	r0, #4
 800dfd8:	0799      	lsls	r1, r3, #30
 800dfda:	bf04      	itt	eq
 800dfdc:	089b      	lsreq	r3, r3, #2
 800dfde:	3002      	addeq	r0, #2
 800dfe0:	07d9      	lsls	r1, r3, #31
 800dfe2:	d403      	bmi.n	800dfec <__lo0bits+0x4e>
 800dfe4:	085b      	lsrs	r3, r3, #1
 800dfe6:	f100 0001 	add.w	r0, r0, #1
 800dfea:	d003      	beq.n	800dff4 <__lo0bits+0x56>
 800dfec:	6013      	str	r3, [r2, #0]
 800dfee:	4770      	bx	lr
 800dff0:	2000      	movs	r0, #0
 800dff2:	4770      	bx	lr
 800dff4:	2020      	movs	r0, #32
 800dff6:	4770      	bx	lr

0800dff8 <__i2b>:
 800dff8:	b510      	push	{r4, lr}
 800dffa:	460c      	mov	r4, r1
 800dffc:	2101      	movs	r1, #1
 800dffe:	f7ff ff07 	bl	800de10 <_Balloc>
 800e002:	4602      	mov	r2, r0
 800e004:	b928      	cbnz	r0, 800e012 <__i2b+0x1a>
 800e006:	4b05      	ldr	r3, [pc, #20]	@ (800e01c <__i2b+0x24>)
 800e008:	4805      	ldr	r0, [pc, #20]	@ (800e020 <__i2b+0x28>)
 800e00a:	f240 1145 	movw	r1, #325	@ 0x145
 800e00e:	f000 fb3d 	bl	800e68c <__assert_func>
 800e012:	2301      	movs	r3, #1
 800e014:	6144      	str	r4, [r0, #20]
 800e016:	6103      	str	r3, [r0, #16]
 800e018:	bd10      	pop	{r4, pc}
 800e01a:	bf00      	nop
 800e01c:	080114f8 	.word	0x080114f8
 800e020:	08011509 	.word	0x08011509

0800e024 <__multiply>:
 800e024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e028:	4614      	mov	r4, r2
 800e02a:	690a      	ldr	r2, [r1, #16]
 800e02c:	6923      	ldr	r3, [r4, #16]
 800e02e:	429a      	cmp	r2, r3
 800e030:	bfa8      	it	ge
 800e032:	4623      	movge	r3, r4
 800e034:	460f      	mov	r7, r1
 800e036:	bfa4      	itt	ge
 800e038:	460c      	movge	r4, r1
 800e03a:	461f      	movge	r7, r3
 800e03c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e040:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e044:	68a3      	ldr	r3, [r4, #8]
 800e046:	6861      	ldr	r1, [r4, #4]
 800e048:	eb0a 0609 	add.w	r6, sl, r9
 800e04c:	42b3      	cmp	r3, r6
 800e04e:	b085      	sub	sp, #20
 800e050:	bfb8      	it	lt
 800e052:	3101      	addlt	r1, #1
 800e054:	f7ff fedc 	bl	800de10 <_Balloc>
 800e058:	b930      	cbnz	r0, 800e068 <__multiply+0x44>
 800e05a:	4602      	mov	r2, r0
 800e05c:	4b44      	ldr	r3, [pc, #272]	@ (800e170 <__multiply+0x14c>)
 800e05e:	4845      	ldr	r0, [pc, #276]	@ (800e174 <__multiply+0x150>)
 800e060:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e064:	f000 fb12 	bl	800e68c <__assert_func>
 800e068:	f100 0514 	add.w	r5, r0, #20
 800e06c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e070:	462b      	mov	r3, r5
 800e072:	2200      	movs	r2, #0
 800e074:	4543      	cmp	r3, r8
 800e076:	d321      	bcc.n	800e0bc <__multiply+0x98>
 800e078:	f107 0114 	add.w	r1, r7, #20
 800e07c:	f104 0214 	add.w	r2, r4, #20
 800e080:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e084:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e088:	9302      	str	r3, [sp, #8]
 800e08a:	1b13      	subs	r3, r2, r4
 800e08c:	3b15      	subs	r3, #21
 800e08e:	f023 0303 	bic.w	r3, r3, #3
 800e092:	3304      	adds	r3, #4
 800e094:	f104 0715 	add.w	r7, r4, #21
 800e098:	42ba      	cmp	r2, r7
 800e09a:	bf38      	it	cc
 800e09c:	2304      	movcc	r3, #4
 800e09e:	9301      	str	r3, [sp, #4]
 800e0a0:	9b02      	ldr	r3, [sp, #8]
 800e0a2:	9103      	str	r1, [sp, #12]
 800e0a4:	428b      	cmp	r3, r1
 800e0a6:	d80c      	bhi.n	800e0c2 <__multiply+0x9e>
 800e0a8:	2e00      	cmp	r6, #0
 800e0aa:	dd03      	ble.n	800e0b4 <__multiply+0x90>
 800e0ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d05b      	beq.n	800e16c <__multiply+0x148>
 800e0b4:	6106      	str	r6, [r0, #16]
 800e0b6:	b005      	add	sp, #20
 800e0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0bc:	f843 2b04 	str.w	r2, [r3], #4
 800e0c0:	e7d8      	b.n	800e074 <__multiply+0x50>
 800e0c2:	f8b1 a000 	ldrh.w	sl, [r1]
 800e0c6:	f1ba 0f00 	cmp.w	sl, #0
 800e0ca:	d024      	beq.n	800e116 <__multiply+0xf2>
 800e0cc:	f104 0e14 	add.w	lr, r4, #20
 800e0d0:	46a9      	mov	r9, r5
 800e0d2:	f04f 0c00 	mov.w	ip, #0
 800e0d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e0da:	f8d9 3000 	ldr.w	r3, [r9]
 800e0de:	fa1f fb87 	uxth.w	fp, r7
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	fb0a 330b 	mla	r3, sl, fp, r3
 800e0e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e0ec:	f8d9 7000 	ldr.w	r7, [r9]
 800e0f0:	4463      	add	r3, ip
 800e0f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e0f6:	fb0a c70b 	mla	r7, sl, fp, ip
 800e0fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e104:	4572      	cmp	r2, lr
 800e106:	f849 3b04 	str.w	r3, [r9], #4
 800e10a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e10e:	d8e2      	bhi.n	800e0d6 <__multiply+0xb2>
 800e110:	9b01      	ldr	r3, [sp, #4]
 800e112:	f845 c003 	str.w	ip, [r5, r3]
 800e116:	9b03      	ldr	r3, [sp, #12]
 800e118:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e11c:	3104      	adds	r1, #4
 800e11e:	f1b9 0f00 	cmp.w	r9, #0
 800e122:	d021      	beq.n	800e168 <__multiply+0x144>
 800e124:	682b      	ldr	r3, [r5, #0]
 800e126:	f104 0c14 	add.w	ip, r4, #20
 800e12a:	46ae      	mov	lr, r5
 800e12c:	f04f 0a00 	mov.w	sl, #0
 800e130:	f8bc b000 	ldrh.w	fp, [ip]
 800e134:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e138:	fb09 770b 	mla	r7, r9, fp, r7
 800e13c:	4457      	add	r7, sl
 800e13e:	b29b      	uxth	r3, r3
 800e140:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e144:	f84e 3b04 	str.w	r3, [lr], #4
 800e148:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e14c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e150:	f8be 3000 	ldrh.w	r3, [lr]
 800e154:	fb09 330a 	mla	r3, r9, sl, r3
 800e158:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e15c:	4562      	cmp	r2, ip
 800e15e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e162:	d8e5      	bhi.n	800e130 <__multiply+0x10c>
 800e164:	9f01      	ldr	r7, [sp, #4]
 800e166:	51eb      	str	r3, [r5, r7]
 800e168:	3504      	adds	r5, #4
 800e16a:	e799      	b.n	800e0a0 <__multiply+0x7c>
 800e16c:	3e01      	subs	r6, #1
 800e16e:	e79b      	b.n	800e0a8 <__multiply+0x84>
 800e170:	080114f8 	.word	0x080114f8
 800e174:	08011509 	.word	0x08011509

0800e178 <__pow5mult>:
 800e178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e17c:	4615      	mov	r5, r2
 800e17e:	f012 0203 	ands.w	r2, r2, #3
 800e182:	4607      	mov	r7, r0
 800e184:	460e      	mov	r6, r1
 800e186:	d007      	beq.n	800e198 <__pow5mult+0x20>
 800e188:	4c25      	ldr	r4, [pc, #148]	@ (800e220 <__pow5mult+0xa8>)
 800e18a:	3a01      	subs	r2, #1
 800e18c:	2300      	movs	r3, #0
 800e18e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e192:	f7ff fe9f 	bl	800ded4 <__multadd>
 800e196:	4606      	mov	r6, r0
 800e198:	10ad      	asrs	r5, r5, #2
 800e19a:	d03d      	beq.n	800e218 <__pow5mult+0xa0>
 800e19c:	69fc      	ldr	r4, [r7, #28]
 800e19e:	b97c      	cbnz	r4, 800e1c0 <__pow5mult+0x48>
 800e1a0:	2010      	movs	r0, #16
 800e1a2:	f7ff fd7f 	bl	800dca4 <malloc>
 800e1a6:	4602      	mov	r2, r0
 800e1a8:	61f8      	str	r0, [r7, #28]
 800e1aa:	b928      	cbnz	r0, 800e1b8 <__pow5mult+0x40>
 800e1ac:	4b1d      	ldr	r3, [pc, #116]	@ (800e224 <__pow5mult+0xac>)
 800e1ae:	481e      	ldr	r0, [pc, #120]	@ (800e228 <__pow5mult+0xb0>)
 800e1b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e1b4:	f000 fa6a 	bl	800e68c <__assert_func>
 800e1b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e1bc:	6004      	str	r4, [r0, #0]
 800e1be:	60c4      	str	r4, [r0, #12]
 800e1c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e1c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e1c8:	b94c      	cbnz	r4, 800e1de <__pow5mult+0x66>
 800e1ca:	f240 2171 	movw	r1, #625	@ 0x271
 800e1ce:	4638      	mov	r0, r7
 800e1d0:	f7ff ff12 	bl	800dff8 <__i2b>
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e1da:	4604      	mov	r4, r0
 800e1dc:	6003      	str	r3, [r0, #0]
 800e1de:	f04f 0900 	mov.w	r9, #0
 800e1e2:	07eb      	lsls	r3, r5, #31
 800e1e4:	d50a      	bpl.n	800e1fc <__pow5mult+0x84>
 800e1e6:	4631      	mov	r1, r6
 800e1e8:	4622      	mov	r2, r4
 800e1ea:	4638      	mov	r0, r7
 800e1ec:	f7ff ff1a 	bl	800e024 <__multiply>
 800e1f0:	4631      	mov	r1, r6
 800e1f2:	4680      	mov	r8, r0
 800e1f4:	4638      	mov	r0, r7
 800e1f6:	f7ff fe4b 	bl	800de90 <_Bfree>
 800e1fa:	4646      	mov	r6, r8
 800e1fc:	106d      	asrs	r5, r5, #1
 800e1fe:	d00b      	beq.n	800e218 <__pow5mult+0xa0>
 800e200:	6820      	ldr	r0, [r4, #0]
 800e202:	b938      	cbnz	r0, 800e214 <__pow5mult+0x9c>
 800e204:	4622      	mov	r2, r4
 800e206:	4621      	mov	r1, r4
 800e208:	4638      	mov	r0, r7
 800e20a:	f7ff ff0b 	bl	800e024 <__multiply>
 800e20e:	6020      	str	r0, [r4, #0]
 800e210:	f8c0 9000 	str.w	r9, [r0]
 800e214:	4604      	mov	r4, r0
 800e216:	e7e4      	b.n	800e1e2 <__pow5mult+0x6a>
 800e218:	4630      	mov	r0, r6
 800e21a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e21e:	bf00      	nop
 800e220:	08011564 	.word	0x08011564
 800e224:	08011489 	.word	0x08011489
 800e228:	08011509 	.word	0x08011509

0800e22c <__lshift>:
 800e22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e230:	460c      	mov	r4, r1
 800e232:	6849      	ldr	r1, [r1, #4]
 800e234:	6923      	ldr	r3, [r4, #16]
 800e236:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e23a:	68a3      	ldr	r3, [r4, #8]
 800e23c:	4607      	mov	r7, r0
 800e23e:	4691      	mov	r9, r2
 800e240:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e244:	f108 0601 	add.w	r6, r8, #1
 800e248:	42b3      	cmp	r3, r6
 800e24a:	db0b      	blt.n	800e264 <__lshift+0x38>
 800e24c:	4638      	mov	r0, r7
 800e24e:	f7ff fddf 	bl	800de10 <_Balloc>
 800e252:	4605      	mov	r5, r0
 800e254:	b948      	cbnz	r0, 800e26a <__lshift+0x3e>
 800e256:	4602      	mov	r2, r0
 800e258:	4b28      	ldr	r3, [pc, #160]	@ (800e2fc <__lshift+0xd0>)
 800e25a:	4829      	ldr	r0, [pc, #164]	@ (800e300 <__lshift+0xd4>)
 800e25c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e260:	f000 fa14 	bl	800e68c <__assert_func>
 800e264:	3101      	adds	r1, #1
 800e266:	005b      	lsls	r3, r3, #1
 800e268:	e7ee      	b.n	800e248 <__lshift+0x1c>
 800e26a:	2300      	movs	r3, #0
 800e26c:	f100 0114 	add.w	r1, r0, #20
 800e270:	f100 0210 	add.w	r2, r0, #16
 800e274:	4618      	mov	r0, r3
 800e276:	4553      	cmp	r3, sl
 800e278:	db33      	blt.n	800e2e2 <__lshift+0xb6>
 800e27a:	6920      	ldr	r0, [r4, #16]
 800e27c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e280:	f104 0314 	add.w	r3, r4, #20
 800e284:	f019 091f 	ands.w	r9, r9, #31
 800e288:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e28c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e290:	d02b      	beq.n	800e2ea <__lshift+0xbe>
 800e292:	f1c9 0e20 	rsb	lr, r9, #32
 800e296:	468a      	mov	sl, r1
 800e298:	2200      	movs	r2, #0
 800e29a:	6818      	ldr	r0, [r3, #0]
 800e29c:	fa00 f009 	lsl.w	r0, r0, r9
 800e2a0:	4310      	orrs	r0, r2
 800e2a2:	f84a 0b04 	str.w	r0, [sl], #4
 800e2a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2aa:	459c      	cmp	ip, r3
 800e2ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800e2b0:	d8f3      	bhi.n	800e29a <__lshift+0x6e>
 800e2b2:	ebac 0304 	sub.w	r3, ip, r4
 800e2b6:	3b15      	subs	r3, #21
 800e2b8:	f023 0303 	bic.w	r3, r3, #3
 800e2bc:	3304      	adds	r3, #4
 800e2be:	f104 0015 	add.w	r0, r4, #21
 800e2c2:	4584      	cmp	ip, r0
 800e2c4:	bf38      	it	cc
 800e2c6:	2304      	movcc	r3, #4
 800e2c8:	50ca      	str	r2, [r1, r3]
 800e2ca:	b10a      	cbz	r2, 800e2d0 <__lshift+0xa4>
 800e2cc:	f108 0602 	add.w	r6, r8, #2
 800e2d0:	3e01      	subs	r6, #1
 800e2d2:	4638      	mov	r0, r7
 800e2d4:	612e      	str	r6, [r5, #16]
 800e2d6:	4621      	mov	r1, r4
 800e2d8:	f7ff fdda 	bl	800de90 <_Bfree>
 800e2dc:	4628      	mov	r0, r5
 800e2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	e7c5      	b.n	800e276 <__lshift+0x4a>
 800e2ea:	3904      	subs	r1, #4
 800e2ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e2f4:	459c      	cmp	ip, r3
 800e2f6:	d8f9      	bhi.n	800e2ec <__lshift+0xc0>
 800e2f8:	e7ea      	b.n	800e2d0 <__lshift+0xa4>
 800e2fa:	bf00      	nop
 800e2fc:	080114f8 	.word	0x080114f8
 800e300:	08011509 	.word	0x08011509

0800e304 <__mcmp>:
 800e304:	690a      	ldr	r2, [r1, #16]
 800e306:	4603      	mov	r3, r0
 800e308:	6900      	ldr	r0, [r0, #16]
 800e30a:	1a80      	subs	r0, r0, r2
 800e30c:	b530      	push	{r4, r5, lr}
 800e30e:	d10e      	bne.n	800e32e <__mcmp+0x2a>
 800e310:	3314      	adds	r3, #20
 800e312:	3114      	adds	r1, #20
 800e314:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e318:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e31c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e320:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e324:	4295      	cmp	r5, r2
 800e326:	d003      	beq.n	800e330 <__mcmp+0x2c>
 800e328:	d205      	bcs.n	800e336 <__mcmp+0x32>
 800e32a:	f04f 30ff 	mov.w	r0, #4294967295
 800e32e:	bd30      	pop	{r4, r5, pc}
 800e330:	42a3      	cmp	r3, r4
 800e332:	d3f3      	bcc.n	800e31c <__mcmp+0x18>
 800e334:	e7fb      	b.n	800e32e <__mcmp+0x2a>
 800e336:	2001      	movs	r0, #1
 800e338:	e7f9      	b.n	800e32e <__mcmp+0x2a>
	...

0800e33c <__mdiff>:
 800e33c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e340:	4689      	mov	r9, r1
 800e342:	4606      	mov	r6, r0
 800e344:	4611      	mov	r1, r2
 800e346:	4648      	mov	r0, r9
 800e348:	4614      	mov	r4, r2
 800e34a:	f7ff ffdb 	bl	800e304 <__mcmp>
 800e34e:	1e05      	subs	r5, r0, #0
 800e350:	d112      	bne.n	800e378 <__mdiff+0x3c>
 800e352:	4629      	mov	r1, r5
 800e354:	4630      	mov	r0, r6
 800e356:	f7ff fd5b 	bl	800de10 <_Balloc>
 800e35a:	4602      	mov	r2, r0
 800e35c:	b928      	cbnz	r0, 800e36a <__mdiff+0x2e>
 800e35e:	4b3f      	ldr	r3, [pc, #252]	@ (800e45c <__mdiff+0x120>)
 800e360:	f240 2137 	movw	r1, #567	@ 0x237
 800e364:	483e      	ldr	r0, [pc, #248]	@ (800e460 <__mdiff+0x124>)
 800e366:	f000 f991 	bl	800e68c <__assert_func>
 800e36a:	2301      	movs	r3, #1
 800e36c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e370:	4610      	mov	r0, r2
 800e372:	b003      	add	sp, #12
 800e374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e378:	bfbc      	itt	lt
 800e37a:	464b      	movlt	r3, r9
 800e37c:	46a1      	movlt	r9, r4
 800e37e:	4630      	mov	r0, r6
 800e380:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e384:	bfba      	itte	lt
 800e386:	461c      	movlt	r4, r3
 800e388:	2501      	movlt	r5, #1
 800e38a:	2500      	movge	r5, #0
 800e38c:	f7ff fd40 	bl	800de10 <_Balloc>
 800e390:	4602      	mov	r2, r0
 800e392:	b918      	cbnz	r0, 800e39c <__mdiff+0x60>
 800e394:	4b31      	ldr	r3, [pc, #196]	@ (800e45c <__mdiff+0x120>)
 800e396:	f240 2145 	movw	r1, #581	@ 0x245
 800e39a:	e7e3      	b.n	800e364 <__mdiff+0x28>
 800e39c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e3a0:	6926      	ldr	r6, [r4, #16]
 800e3a2:	60c5      	str	r5, [r0, #12]
 800e3a4:	f109 0310 	add.w	r3, r9, #16
 800e3a8:	f109 0514 	add.w	r5, r9, #20
 800e3ac:	f104 0e14 	add.w	lr, r4, #20
 800e3b0:	f100 0b14 	add.w	fp, r0, #20
 800e3b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e3b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e3bc:	9301      	str	r3, [sp, #4]
 800e3be:	46d9      	mov	r9, fp
 800e3c0:	f04f 0c00 	mov.w	ip, #0
 800e3c4:	9b01      	ldr	r3, [sp, #4]
 800e3c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e3ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e3ce:	9301      	str	r3, [sp, #4]
 800e3d0:	fa1f f38a 	uxth.w	r3, sl
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	b283      	uxth	r3, r0
 800e3d8:	1acb      	subs	r3, r1, r3
 800e3da:	0c00      	lsrs	r0, r0, #16
 800e3dc:	4463      	add	r3, ip
 800e3de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e3e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e3e6:	b29b      	uxth	r3, r3
 800e3e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e3ec:	4576      	cmp	r6, lr
 800e3ee:	f849 3b04 	str.w	r3, [r9], #4
 800e3f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e3f6:	d8e5      	bhi.n	800e3c4 <__mdiff+0x88>
 800e3f8:	1b33      	subs	r3, r6, r4
 800e3fa:	3b15      	subs	r3, #21
 800e3fc:	f023 0303 	bic.w	r3, r3, #3
 800e400:	3415      	adds	r4, #21
 800e402:	3304      	adds	r3, #4
 800e404:	42a6      	cmp	r6, r4
 800e406:	bf38      	it	cc
 800e408:	2304      	movcc	r3, #4
 800e40a:	441d      	add	r5, r3
 800e40c:	445b      	add	r3, fp
 800e40e:	461e      	mov	r6, r3
 800e410:	462c      	mov	r4, r5
 800e412:	4544      	cmp	r4, r8
 800e414:	d30e      	bcc.n	800e434 <__mdiff+0xf8>
 800e416:	f108 0103 	add.w	r1, r8, #3
 800e41a:	1b49      	subs	r1, r1, r5
 800e41c:	f021 0103 	bic.w	r1, r1, #3
 800e420:	3d03      	subs	r5, #3
 800e422:	45a8      	cmp	r8, r5
 800e424:	bf38      	it	cc
 800e426:	2100      	movcc	r1, #0
 800e428:	440b      	add	r3, r1
 800e42a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e42e:	b191      	cbz	r1, 800e456 <__mdiff+0x11a>
 800e430:	6117      	str	r7, [r2, #16]
 800e432:	e79d      	b.n	800e370 <__mdiff+0x34>
 800e434:	f854 1b04 	ldr.w	r1, [r4], #4
 800e438:	46e6      	mov	lr, ip
 800e43a:	0c08      	lsrs	r0, r1, #16
 800e43c:	fa1c fc81 	uxtah	ip, ip, r1
 800e440:	4471      	add	r1, lr
 800e442:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e446:	b289      	uxth	r1, r1
 800e448:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e44c:	f846 1b04 	str.w	r1, [r6], #4
 800e450:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e454:	e7dd      	b.n	800e412 <__mdiff+0xd6>
 800e456:	3f01      	subs	r7, #1
 800e458:	e7e7      	b.n	800e42a <__mdiff+0xee>
 800e45a:	bf00      	nop
 800e45c:	080114f8 	.word	0x080114f8
 800e460:	08011509 	.word	0x08011509

0800e464 <__d2b>:
 800e464:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e468:	460f      	mov	r7, r1
 800e46a:	2101      	movs	r1, #1
 800e46c:	ec59 8b10 	vmov	r8, r9, d0
 800e470:	4616      	mov	r6, r2
 800e472:	f7ff fccd 	bl	800de10 <_Balloc>
 800e476:	4604      	mov	r4, r0
 800e478:	b930      	cbnz	r0, 800e488 <__d2b+0x24>
 800e47a:	4602      	mov	r2, r0
 800e47c:	4b23      	ldr	r3, [pc, #140]	@ (800e50c <__d2b+0xa8>)
 800e47e:	4824      	ldr	r0, [pc, #144]	@ (800e510 <__d2b+0xac>)
 800e480:	f240 310f 	movw	r1, #783	@ 0x30f
 800e484:	f000 f902 	bl	800e68c <__assert_func>
 800e488:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e48c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e490:	b10d      	cbz	r5, 800e496 <__d2b+0x32>
 800e492:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e496:	9301      	str	r3, [sp, #4]
 800e498:	f1b8 0300 	subs.w	r3, r8, #0
 800e49c:	d023      	beq.n	800e4e6 <__d2b+0x82>
 800e49e:	4668      	mov	r0, sp
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	f7ff fd7c 	bl	800df9e <__lo0bits>
 800e4a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e4aa:	b1d0      	cbz	r0, 800e4e2 <__d2b+0x7e>
 800e4ac:	f1c0 0320 	rsb	r3, r0, #32
 800e4b0:	fa02 f303 	lsl.w	r3, r2, r3
 800e4b4:	430b      	orrs	r3, r1
 800e4b6:	40c2      	lsrs	r2, r0
 800e4b8:	6163      	str	r3, [r4, #20]
 800e4ba:	9201      	str	r2, [sp, #4]
 800e4bc:	9b01      	ldr	r3, [sp, #4]
 800e4be:	61a3      	str	r3, [r4, #24]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	bf0c      	ite	eq
 800e4c4:	2201      	moveq	r2, #1
 800e4c6:	2202      	movne	r2, #2
 800e4c8:	6122      	str	r2, [r4, #16]
 800e4ca:	b1a5      	cbz	r5, 800e4f6 <__d2b+0x92>
 800e4cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e4d0:	4405      	add	r5, r0
 800e4d2:	603d      	str	r5, [r7, #0]
 800e4d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e4d8:	6030      	str	r0, [r6, #0]
 800e4da:	4620      	mov	r0, r4
 800e4dc:	b003      	add	sp, #12
 800e4de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4e2:	6161      	str	r1, [r4, #20]
 800e4e4:	e7ea      	b.n	800e4bc <__d2b+0x58>
 800e4e6:	a801      	add	r0, sp, #4
 800e4e8:	f7ff fd59 	bl	800df9e <__lo0bits>
 800e4ec:	9b01      	ldr	r3, [sp, #4]
 800e4ee:	6163      	str	r3, [r4, #20]
 800e4f0:	3020      	adds	r0, #32
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	e7e8      	b.n	800e4c8 <__d2b+0x64>
 800e4f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e4fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e4fe:	6038      	str	r0, [r7, #0]
 800e500:	6918      	ldr	r0, [r3, #16]
 800e502:	f7ff fd2d 	bl	800df60 <__hi0bits>
 800e506:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e50a:	e7e5      	b.n	800e4d8 <__d2b+0x74>
 800e50c:	080114f8 	.word	0x080114f8
 800e510:	08011509 	.word	0x08011509

0800e514 <__sflush_r>:
 800e514:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e51c:	0716      	lsls	r6, r2, #28
 800e51e:	4605      	mov	r5, r0
 800e520:	460c      	mov	r4, r1
 800e522:	d454      	bmi.n	800e5ce <__sflush_r+0xba>
 800e524:	684b      	ldr	r3, [r1, #4]
 800e526:	2b00      	cmp	r3, #0
 800e528:	dc02      	bgt.n	800e530 <__sflush_r+0x1c>
 800e52a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	dd48      	ble.n	800e5c2 <__sflush_r+0xae>
 800e530:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e532:	2e00      	cmp	r6, #0
 800e534:	d045      	beq.n	800e5c2 <__sflush_r+0xae>
 800e536:	2300      	movs	r3, #0
 800e538:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e53c:	682f      	ldr	r7, [r5, #0]
 800e53e:	6a21      	ldr	r1, [r4, #32]
 800e540:	602b      	str	r3, [r5, #0]
 800e542:	d030      	beq.n	800e5a6 <__sflush_r+0x92>
 800e544:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e546:	89a3      	ldrh	r3, [r4, #12]
 800e548:	0759      	lsls	r1, r3, #29
 800e54a:	d505      	bpl.n	800e558 <__sflush_r+0x44>
 800e54c:	6863      	ldr	r3, [r4, #4]
 800e54e:	1ad2      	subs	r2, r2, r3
 800e550:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e552:	b10b      	cbz	r3, 800e558 <__sflush_r+0x44>
 800e554:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e556:	1ad2      	subs	r2, r2, r3
 800e558:	2300      	movs	r3, #0
 800e55a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e55c:	6a21      	ldr	r1, [r4, #32]
 800e55e:	4628      	mov	r0, r5
 800e560:	47b0      	blx	r6
 800e562:	1c43      	adds	r3, r0, #1
 800e564:	89a3      	ldrh	r3, [r4, #12]
 800e566:	d106      	bne.n	800e576 <__sflush_r+0x62>
 800e568:	6829      	ldr	r1, [r5, #0]
 800e56a:	291d      	cmp	r1, #29
 800e56c:	d82b      	bhi.n	800e5c6 <__sflush_r+0xb2>
 800e56e:	4a2a      	ldr	r2, [pc, #168]	@ (800e618 <__sflush_r+0x104>)
 800e570:	410a      	asrs	r2, r1
 800e572:	07d6      	lsls	r6, r2, #31
 800e574:	d427      	bmi.n	800e5c6 <__sflush_r+0xb2>
 800e576:	2200      	movs	r2, #0
 800e578:	6062      	str	r2, [r4, #4]
 800e57a:	04d9      	lsls	r1, r3, #19
 800e57c:	6922      	ldr	r2, [r4, #16]
 800e57e:	6022      	str	r2, [r4, #0]
 800e580:	d504      	bpl.n	800e58c <__sflush_r+0x78>
 800e582:	1c42      	adds	r2, r0, #1
 800e584:	d101      	bne.n	800e58a <__sflush_r+0x76>
 800e586:	682b      	ldr	r3, [r5, #0]
 800e588:	b903      	cbnz	r3, 800e58c <__sflush_r+0x78>
 800e58a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e58c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e58e:	602f      	str	r7, [r5, #0]
 800e590:	b1b9      	cbz	r1, 800e5c2 <__sflush_r+0xae>
 800e592:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e596:	4299      	cmp	r1, r3
 800e598:	d002      	beq.n	800e5a0 <__sflush_r+0x8c>
 800e59a:	4628      	mov	r0, r5
 800e59c:	f7ff fb38 	bl	800dc10 <_free_r>
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	6363      	str	r3, [r4, #52]	@ 0x34
 800e5a4:	e00d      	b.n	800e5c2 <__sflush_r+0xae>
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	4628      	mov	r0, r5
 800e5aa:	47b0      	blx	r6
 800e5ac:	4602      	mov	r2, r0
 800e5ae:	1c50      	adds	r0, r2, #1
 800e5b0:	d1c9      	bne.n	800e546 <__sflush_r+0x32>
 800e5b2:	682b      	ldr	r3, [r5, #0]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d0c6      	beq.n	800e546 <__sflush_r+0x32>
 800e5b8:	2b1d      	cmp	r3, #29
 800e5ba:	d001      	beq.n	800e5c0 <__sflush_r+0xac>
 800e5bc:	2b16      	cmp	r3, #22
 800e5be:	d11e      	bne.n	800e5fe <__sflush_r+0xea>
 800e5c0:	602f      	str	r7, [r5, #0]
 800e5c2:	2000      	movs	r0, #0
 800e5c4:	e022      	b.n	800e60c <__sflush_r+0xf8>
 800e5c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5ca:	b21b      	sxth	r3, r3
 800e5cc:	e01b      	b.n	800e606 <__sflush_r+0xf2>
 800e5ce:	690f      	ldr	r7, [r1, #16]
 800e5d0:	2f00      	cmp	r7, #0
 800e5d2:	d0f6      	beq.n	800e5c2 <__sflush_r+0xae>
 800e5d4:	0793      	lsls	r3, r2, #30
 800e5d6:	680e      	ldr	r6, [r1, #0]
 800e5d8:	bf08      	it	eq
 800e5da:	694b      	ldreq	r3, [r1, #20]
 800e5dc:	600f      	str	r7, [r1, #0]
 800e5de:	bf18      	it	ne
 800e5e0:	2300      	movne	r3, #0
 800e5e2:	eba6 0807 	sub.w	r8, r6, r7
 800e5e6:	608b      	str	r3, [r1, #8]
 800e5e8:	f1b8 0f00 	cmp.w	r8, #0
 800e5ec:	dde9      	ble.n	800e5c2 <__sflush_r+0xae>
 800e5ee:	6a21      	ldr	r1, [r4, #32]
 800e5f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e5f2:	4643      	mov	r3, r8
 800e5f4:	463a      	mov	r2, r7
 800e5f6:	4628      	mov	r0, r5
 800e5f8:	47b0      	blx	r6
 800e5fa:	2800      	cmp	r0, #0
 800e5fc:	dc08      	bgt.n	800e610 <__sflush_r+0xfc>
 800e5fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e606:	81a3      	strh	r3, [r4, #12]
 800e608:	f04f 30ff 	mov.w	r0, #4294967295
 800e60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e610:	4407      	add	r7, r0
 800e612:	eba8 0800 	sub.w	r8, r8, r0
 800e616:	e7e7      	b.n	800e5e8 <__sflush_r+0xd4>
 800e618:	dfbffffe 	.word	0xdfbffffe

0800e61c <_fflush_r>:
 800e61c:	b538      	push	{r3, r4, r5, lr}
 800e61e:	690b      	ldr	r3, [r1, #16]
 800e620:	4605      	mov	r5, r0
 800e622:	460c      	mov	r4, r1
 800e624:	b913      	cbnz	r3, 800e62c <_fflush_r+0x10>
 800e626:	2500      	movs	r5, #0
 800e628:	4628      	mov	r0, r5
 800e62a:	bd38      	pop	{r3, r4, r5, pc}
 800e62c:	b118      	cbz	r0, 800e636 <_fflush_r+0x1a>
 800e62e:	6a03      	ldr	r3, [r0, #32]
 800e630:	b90b      	cbnz	r3, 800e636 <_fflush_r+0x1a>
 800e632:	f7fe fb89 	bl	800cd48 <__sinit>
 800e636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d0f3      	beq.n	800e626 <_fflush_r+0xa>
 800e63e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e640:	07d0      	lsls	r0, r2, #31
 800e642:	d404      	bmi.n	800e64e <_fflush_r+0x32>
 800e644:	0599      	lsls	r1, r3, #22
 800e646:	d402      	bmi.n	800e64e <_fflush_r+0x32>
 800e648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e64a:	f7fe fc84 	bl	800cf56 <__retarget_lock_acquire_recursive>
 800e64e:	4628      	mov	r0, r5
 800e650:	4621      	mov	r1, r4
 800e652:	f7ff ff5f 	bl	800e514 <__sflush_r>
 800e656:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e658:	07da      	lsls	r2, r3, #31
 800e65a:	4605      	mov	r5, r0
 800e65c:	d4e4      	bmi.n	800e628 <_fflush_r+0xc>
 800e65e:	89a3      	ldrh	r3, [r4, #12]
 800e660:	059b      	lsls	r3, r3, #22
 800e662:	d4e1      	bmi.n	800e628 <_fflush_r+0xc>
 800e664:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e666:	f7fe fc77 	bl	800cf58 <__retarget_lock_release_recursive>
 800e66a:	e7dd      	b.n	800e628 <_fflush_r+0xc>

0800e66c <_sbrk_r>:
 800e66c:	b538      	push	{r3, r4, r5, lr}
 800e66e:	4d06      	ldr	r5, [pc, #24]	@ (800e688 <_sbrk_r+0x1c>)
 800e670:	2300      	movs	r3, #0
 800e672:	4604      	mov	r4, r0
 800e674:	4608      	mov	r0, r1
 800e676:	602b      	str	r3, [r5, #0]
 800e678:	f7f8 fd46 	bl	8007108 <_sbrk>
 800e67c:	1c43      	adds	r3, r0, #1
 800e67e:	d102      	bne.n	800e686 <_sbrk_r+0x1a>
 800e680:	682b      	ldr	r3, [r5, #0]
 800e682:	b103      	cbz	r3, 800e686 <_sbrk_r+0x1a>
 800e684:	6023      	str	r3, [r4, #0]
 800e686:	bd38      	pop	{r3, r4, r5, pc}
 800e688:	2000092c 	.word	0x2000092c

0800e68c <__assert_func>:
 800e68c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e68e:	4614      	mov	r4, r2
 800e690:	461a      	mov	r2, r3
 800e692:	4b09      	ldr	r3, [pc, #36]	@ (800e6b8 <__assert_func+0x2c>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4605      	mov	r5, r0
 800e698:	68d8      	ldr	r0, [r3, #12]
 800e69a:	b954      	cbnz	r4, 800e6b2 <__assert_func+0x26>
 800e69c:	4b07      	ldr	r3, [pc, #28]	@ (800e6bc <__assert_func+0x30>)
 800e69e:	461c      	mov	r4, r3
 800e6a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e6a4:	9100      	str	r1, [sp, #0]
 800e6a6:	462b      	mov	r3, r5
 800e6a8:	4905      	ldr	r1, [pc, #20]	@ (800e6c0 <__assert_func+0x34>)
 800e6aa:	f000 f841 	bl	800e730 <fiprintf>
 800e6ae:	f000 f851 	bl	800e754 <abort>
 800e6b2:	4b04      	ldr	r3, [pc, #16]	@ (800e6c4 <__assert_func+0x38>)
 800e6b4:	e7f4      	b.n	800e6a0 <__assert_func+0x14>
 800e6b6:	bf00      	nop
 800e6b8:	20000058 	.word	0x20000058
 800e6bc:	080116a5 	.word	0x080116a5
 800e6c0:	08011677 	.word	0x08011677
 800e6c4:	0801166a 	.word	0x0801166a

0800e6c8 <_calloc_r>:
 800e6c8:	b570      	push	{r4, r5, r6, lr}
 800e6ca:	fba1 5402 	umull	r5, r4, r1, r2
 800e6ce:	b93c      	cbnz	r4, 800e6e0 <_calloc_r+0x18>
 800e6d0:	4629      	mov	r1, r5
 800e6d2:	f7ff fb11 	bl	800dcf8 <_malloc_r>
 800e6d6:	4606      	mov	r6, r0
 800e6d8:	b928      	cbnz	r0, 800e6e6 <_calloc_r+0x1e>
 800e6da:	2600      	movs	r6, #0
 800e6dc:	4630      	mov	r0, r6
 800e6de:	bd70      	pop	{r4, r5, r6, pc}
 800e6e0:	220c      	movs	r2, #12
 800e6e2:	6002      	str	r2, [r0, #0]
 800e6e4:	e7f9      	b.n	800e6da <_calloc_r+0x12>
 800e6e6:	462a      	mov	r2, r5
 800e6e8:	4621      	mov	r1, r4
 800e6ea:	f7fe fbb6 	bl	800ce5a <memset>
 800e6ee:	e7f5      	b.n	800e6dc <_calloc_r+0x14>

0800e6f0 <__ascii_mbtowc>:
 800e6f0:	b082      	sub	sp, #8
 800e6f2:	b901      	cbnz	r1, 800e6f6 <__ascii_mbtowc+0x6>
 800e6f4:	a901      	add	r1, sp, #4
 800e6f6:	b142      	cbz	r2, 800e70a <__ascii_mbtowc+0x1a>
 800e6f8:	b14b      	cbz	r3, 800e70e <__ascii_mbtowc+0x1e>
 800e6fa:	7813      	ldrb	r3, [r2, #0]
 800e6fc:	600b      	str	r3, [r1, #0]
 800e6fe:	7812      	ldrb	r2, [r2, #0]
 800e700:	1e10      	subs	r0, r2, #0
 800e702:	bf18      	it	ne
 800e704:	2001      	movne	r0, #1
 800e706:	b002      	add	sp, #8
 800e708:	4770      	bx	lr
 800e70a:	4610      	mov	r0, r2
 800e70c:	e7fb      	b.n	800e706 <__ascii_mbtowc+0x16>
 800e70e:	f06f 0001 	mvn.w	r0, #1
 800e712:	e7f8      	b.n	800e706 <__ascii_mbtowc+0x16>

0800e714 <__ascii_wctomb>:
 800e714:	4603      	mov	r3, r0
 800e716:	4608      	mov	r0, r1
 800e718:	b141      	cbz	r1, 800e72c <__ascii_wctomb+0x18>
 800e71a:	2aff      	cmp	r2, #255	@ 0xff
 800e71c:	d904      	bls.n	800e728 <__ascii_wctomb+0x14>
 800e71e:	228a      	movs	r2, #138	@ 0x8a
 800e720:	601a      	str	r2, [r3, #0]
 800e722:	f04f 30ff 	mov.w	r0, #4294967295
 800e726:	4770      	bx	lr
 800e728:	700a      	strb	r2, [r1, #0]
 800e72a:	2001      	movs	r0, #1
 800e72c:	4770      	bx	lr
	...

0800e730 <fiprintf>:
 800e730:	b40e      	push	{r1, r2, r3}
 800e732:	b503      	push	{r0, r1, lr}
 800e734:	4601      	mov	r1, r0
 800e736:	ab03      	add	r3, sp, #12
 800e738:	4805      	ldr	r0, [pc, #20]	@ (800e750 <fiprintf+0x20>)
 800e73a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e73e:	6800      	ldr	r0, [r0, #0]
 800e740:	9301      	str	r3, [sp, #4]
 800e742:	f000 f837 	bl	800e7b4 <_vfiprintf_r>
 800e746:	b002      	add	sp, #8
 800e748:	f85d eb04 	ldr.w	lr, [sp], #4
 800e74c:	b003      	add	sp, #12
 800e74e:	4770      	bx	lr
 800e750:	20000058 	.word	0x20000058

0800e754 <abort>:
 800e754:	b508      	push	{r3, lr}
 800e756:	2006      	movs	r0, #6
 800e758:	f000 fa00 	bl	800eb5c <raise>
 800e75c:	2001      	movs	r0, #1
 800e75e:	f7f8 fc5b 	bl	8007018 <_exit>

0800e762 <__sfputc_r>:
 800e762:	6893      	ldr	r3, [r2, #8]
 800e764:	3b01      	subs	r3, #1
 800e766:	2b00      	cmp	r3, #0
 800e768:	b410      	push	{r4}
 800e76a:	6093      	str	r3, [r2, #8]
 800e76c:	da08      	bge.n	800e780 <__sfputc_r+0x1e>
 800e76e:	6994      	ldr	r4, [r2, #24]
 800e770:	42a3      	cmp	r3, r4
 800e772:	db01      	blt.n	800e778 <__sfputc_r+0x16>
 800e774:	290a      	cmp	r1, #10
 800e776:	d103      	bne.n	800e780 <__sfputc_r+0x1e>
 800e778:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e77c:	f000 b932 	b.w	800e9e4 <__swbuf_r>
 800e780:	6813      	ldr	r3, [r2, #0]
 800e782:	1c58      	adds	r0, r3, #1
 800e784:	6010      	str	r0, [r2, #0]
 800e786:	7019      	strb	r1, [r3, #0]
 800e788:	4608      	mov	r0, r1
 800e78a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e78e:	4770      	bx	lr

0800e790 <__sfputs_r>:
 800e790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e792:	4606      	mov	r6, r0
 800e794:	460f      	mov	r7, r1
 800e796:	4614      	mov	r4, r2
 800e798:	18d5      	adds	r5, r2, r3
 800e79a:	42ac      	cmp	r4, r5
 800e79c:	d101      	bne.n	800e7a2 <__sfputs_r+0x12>
 800e79e:	2000      	movs	r0, #0
 800e7a0:	e007      	b.n	800e7b2 <__sfputs_r+0x22>
 800e7a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7a6:	463a      	mov	r2, r7
 800e7a8:	4630      	mov	r0, r6
 800e7aa:	f7ff ffda 	bl	800e762 <__sfputc_r>
 800e7ae:	1c43      	adds	r3, r0, #1
 800e7b0:	d1f3      	bne.n	800e79a <__sfputs_r+0xa>
 800e7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e7b4 <_vfiprintf_r>:
 800e7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b8:	460d      	mov	r5, r1
 800e7ba:	b09d      	sub	sp, #116	@ 0x74
 800e7bc:	4614      	mov	r4, r2
 800e7be:	4698      	mov	r8, r3
 800e7c0:	4606      	mov	r6, r0
 800e7c2:	b118      	cbz	r0, 800e7cc <_vfiprintf_r+0x18>
 800e7c4:	6a03      	ldr	r3, [r0, #32]
 800e7c6:	b90b      	cbnz	r3, 800e7cc <_vfiprintf_r+0x18>
 800e7c8:	f7fe fabe 	bl	800cd48 <__sinit>
 800e7cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e7ce:	07d9      	lsls	r1, r3, #31
 800e7d0:	d405      	bmi.n	800e7de <_vfiprintf_r+0x2a>
 800e7d2:	89ab      	ldrh	r3, [r5, #12]
 800e7d4:	059a      	lsls	r2, r3, #22
 800e7d6:	d402      	bmi.n	800e7de <_vfiprintf_r+0x2a>
 800e7d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e7da:	f7fe fbbc 	bl	800cf56 <__retarget_lock_acquire_recursive>
 800e7de:	89ab      	ldrh	r3, [r5, #12]
 800e7e0:	071b      	lsls	r3, r3, #28
 800e7e2:	d501      	bpl.n	800e7e8 <_vfiprintf_r+0x34>
 800e7e4:	692b      	ldr	r3, [r5, #16]
 800e7e6:	b99b      	cbnz	r3, 800e810 <_vfiprintf_r+0x5c>
 800e7e8:	4629      	mov	r1, r5
 800e7ea:	4630      	mov	r0, r6
 800e7ec:	f000 f938 	bl	800ea60 <__swsetup_r>
 800e7f0:	b170      	cbz	r0, 800e810 <_vfiprintf_r+0x5c>
 800e7f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e7f4:	07dc      	lsls	r4, r3, #31
 800e7f6:	d504      	bpl.n	800e802 <_vfiprintf_r+0x4e>
 800e7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7fc:	b01d      	add	sp, #116	@ 0x74
 800e7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e802:	89ab      	ldrh	r3, [r5, #12]
 800e804:	0598      	lsls	r0, r3, #22
 800e806:	d4f7      	bmi.n	800e7f8 <_vfiprintf_r+0x44>
 800e808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e80a:	f7fe fba5 	bl	800cf58 <__retarget_lock_release_recursive>
 800e80e:	e7f3      	b.n	800e7f8 <_vfiprintf_r+0x44>
 800e810:	2300      	movs	r3, #0
 800e812:	9309      	str	r3, [sp, #36]	@ 0x24
 800e814:	2320      	movs	r3, #32
 800e816:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e81a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e81e:	2330      	movs	r3, #48	@ 0x30
 800e820:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e9d0 <_vfiprintf_r+0x21c>
 800e824:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e828:	f04f 0901 	mov.w	r9, #1
 800e82c:	4623      	mov	r3, r4
 800e82e:	469a      	mov	sl, r3
 800e830:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e834:	b10a      	cbz	r2, 800e83a <_vfiprintf_r+0x86>
 800e836:	2a25      	cmp	r2, #37	@ 0x25
 800e838:	d1f9      	bne.n	800e82e <_vfiprintf_r+0x7a>
 800e83a:	ebba 0b04 	subs.w	fp, sl, r4
 800e83e:	d00b      	beq.n	800e858 <_vfiprintf_r+0xa4>
 800e840:	465b      	mov	r3, fp
 800e842:	4622      	mov	r2, r4
 800e844:	4629      	mov	r1, r5
 800e846:	4630      	mov	r0, r6
 800e848:	f7ff ffa2 	bl	800e790 <__sfputs_r>
 800e84c:	3001      	adds	r0, #1
 800e84e:	f000 80a7 	beq.w	800e9a0 <_vfiprintf_r+0x1ec>
 800e852:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e854:	445a      	add	r2, fp
 800e856:	9209      	str	r2, [sp, #36]	@ 0x24
 800e858:	f89a 3000 	ldrb.w	r3, [sl]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	f000 809f 	beq.w	800e9a0 <_vfiprintf_r+0x1ec>
 800e862:	2300      	movs	r3, #0
 800e864:	f04f 32ff 	mov.w	r2, #4294967295
 800e868:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e86c:	f10a 0a01 	add.w	sl, sl, #1
 800e870:	9304      	str	r3, [sp, #16]
 800e872:	9307      	str	r3, [sp, #28]
 800e874:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e878:	931a      	str	r3, [sp, #104]	@ 0x68
 800e87a:	4654      	mov	r4, sl
 800e87c:	2205      	movs	r2, #5
 800e87e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e882:	4853      	ldr	r0, [pc, #332]	@ (800e9d0 <_vfiprintf_r+0x21c>)
 800e884:	f7f1 fcc4 	bl	8000210 <memchr>
 800e888:	9a04      	ldr	r2, [sp, #16]
 800e88a:	b9d8      	cbnz	r0, 800e8c4 <_vfiprintf_r+0x110>
 800e88c:	06d1      	lsls	r1, r2, #27
 800e88e:	bf44      	itt	mi
 800e890:	2320      	movmi	r3, #32
 800e892:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e896:	0713      	lsls	r3, r2, #28
 800e898:	bf44      	itt	mi
 800e89a:	232b      	movmi	r3, #43	@ 0x2b
 800e89c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8a0:	f89a 3000 	ldrb.w	r3, [sl]
 800e8a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8a6:	d015      	beq.n	800e8d4 <_vfiprintf_r+0x120>
 800e8a8:	9a07      	ldr	r2, [sp, #28]
 800e8aa:	4654      	mov	r4, sl
 800e8ac:	2000      	movs	r0, #0
 800e8ae:	f04f 0c0a 	mov.w	ip, #10
 800e8b2:	4621      	mov	r1, r4
 800e8b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8b8:	3b30      	subs	r3, #48	@ 0x30
 800e8ba:	2b09      	cmp	r3, #9
 800e8bc:	d94b      	bls.n	800e956 <_vfiprintf_r+0x1a2>
 800e8be:	b1b0      	cbz	r0, 800e8ee <_vfiprintf_r+0x13a>
 800e8c0:	9207      	str	r2, [sp, #28]
 800e8c2:	e014      	b.n	800e8ee <_vfiprintf_r+0x13a>
 800e8c4:	eba0 0308 	sub.w	r3, r0, r8
 800e8c8:	fa09 f303 	lsl.w	r3, r9, r3
 800e8cc:	4313      	orrs	r3, r2
 800e8ce:	9304      	str	r3, [sp, #16]
 800e8d0:	46a2      	mov	sl, r4
 800e8d2:	e7d2      	b.n	800e87a <_vfiprintf_r+0xc6>
 800e8d4:	9b03      	ldr	r3, [sp, #12]
 800e8d6:	1d19      	adds	r1, r3, #4
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	9103      	str	r1, [sp, #12]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	bfbb      	ittet	lt
 800e8e0:	425b      	neglt	r3, r3
 800e8e2:	f042 0202 	orrlt.w	r2, r2, #2
 800e8e6:	9307      	strge	r3, [sp, #28]
 800e8e8:	9307      	strlt	r3, [sp, #28]
 800e8ea:	bfb8      	it	lt
 800e8ec:	9204      	strlt	r2, [sp, #16]
 800e8ee:	7823      	ldrb	r3, [r4, #0]
 800e8f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e8f2:	d10a      	bne.n	800e90a <_vfiprintf_r+0x156>
 800e8f4:	7863      	ldrb	r3, [r4, #1]
 800e8f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8f8:	d132      	bne.n	800e960 <_vfiprintf_r+0x1ac>
 800e8fa:	9b03      	ldr	r3, [sp, #12]
 800e8fc:	1d1a      	adds	r2, r3, #4
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	9203      	str	r2, [sp, #12]
 800e902:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e906:	3402      	adds	r4, #2
 800e908:	9305      	str	r3, [sp, #20]
 800e90a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e9e0 <_vfiprintf_r+0x22c>
 800e90e:	7821      	ldrb	r1, [r4, #0]
 800e910:	2203      	movs	r2, #3
 800e912:	4650      	mov	r0, sl
 800e914:	f7f1 fc7c 	bl	8000210 <memchr>
 800e918:	b138      	cbz	r0, 800e92a <_vfiprintf_r+0x176>
 800e91a:	9b04      	ldr	r3, [sp, #16]
 800e91c:	eba0 000a 	sub.w	r0, r0, sl
 800e920:	2240      	movs	r2, #64	@ 0x40
 800e922:	4082      	lsls	r2, r0
 800e924:	4313      	orrs	r3, r2
 800e926:	3401      	adds	r4, #1
 800e928:	9304      	str	r3, [sp, #16]
 800e92a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e92e:	4829      	ldr	r0, [pc, #164]	@ (800e9d4 <_vfiprintf_r+0x220>)
 800e930:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e934:	2206      	movs	r2, #6
 800e936:	f7f1 fc6b 	bl	8000210 <memchr>
 800e93a:	2800      	cmp	r0, #0
 800e93c:	d03f      	beq.n	800e9be <_vfiprintf_r+0x20a>
 800e93e:	4b26      	ldr	r3, [pc, #152]	@ (800e9d8 <_vfiprintf_r+0x224>)
 800e940:	bb1b      	cbnz	r3, 800e98a <_vfiprintf_r+0x1d6>
 800e942:	9b03      	ldr	r3, [sp, #12]
 800e944:	3307      	adds	r3, #7
 800e946:	f023 0307 	bic.w	r3, r3, #7
 800e94a:	3308      	adds	r3, #8
 800e94c:	9303      	str	r3, [sp, #12]
 800e94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e950:	443b      	add	r3, r7
 800e952:	9309      	str	r3, [sp, #36]	@ 0x24
 800e954:	e76a      	b.n	800e82c <_vfiprintf_r+0x78>
 800e956:	fb0c 3202 	mla	r2, ip, r2, r3
 800e95a:	460c      	mov	r4, r1
 800e95c:	2001      	movs	r0, #1
 800e95e:	e7a8      	b.n	800e8b2 <_vfiprintf_r+0xfe>
 800e960:	2300      	movs	r3, #0
 800e962:	3401      	adds	r4, #1
 800e964:	9305      	str	r3, [sp, #20]
 800e966:	4619      	mov	r1, r3
 800e968:	f04f 0c0a 	mov.w	ip, #10
 800e96c:	4620      	mov	r0, r4
 800e96e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e972:	3a30      	subs	r2, #48	@ 0x30
 800e974:	2a09      	cmp	r2, #9
 800e976:	d903      	bls.n	800e980 <_vfiprintf_r+0x1cc>
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d0c6      	beq.n	800e90a <_vfiprintf_r+0x156>
 800e97c:	9105      	str	r1, [sp, #20]
 800e97e:	e7c4      	b.n	800e90a <_vfiprintf_r+0x156>
 800e980:	fb0c 2101 	mla	r1, ip, r1, r2
 800e984:	4604      	mov	r4, r0
 800e986:	2301      	movs	r3, #1
 800e988:	e7f0      	b.n	800e96c <_vfiprintf_r+0x1b8>
 800e98a:	ab03      	add	r3, sp, #12
 800e98c:	9300      	str	r3, [sp, #0]
 800e98e:	462a      	mov	r2, r5
 800e990:	4b12      	ldr	r3, [pc, #72]	@ (800e9dc <_vfiprintf_r+0x228>)
 800e992:	a904      	add	r1, sp, #16
 800e994:	4630      	mov	r0, r6
 800e996:	f7fd fd93 	bl	800c4c0 <_printf_float>
 800e99a:	4607      	mov	r7, r0
 800e99c:	1c78      	adds	r0, r7, #1
 800e99e:	d1d6      	bne.n	800e94e <_vfiprintf_r+0x19a>
 800e9a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9a2:	07d9      	lsls	r1, r3, #31
 800e9a4:	d405      	bmi.n	800e9b2 <_vfiprintf_r+0x1fe>
 800e9a6:	89ab      	ldrh	r3, [r5, #12]
 800e9a8:	059a      	lsls	r2, r3, #22
 800e9aa:	d402      	bmi.n	800e9b2 <_vfiprintf_r+0x1fe>
 800e9ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9ae:	f7fe fad3 	bl	800cf58 <__retarget_lock_release_recursive>
 800e9b2:	89ab      	ldrh	r3, [r5, #12]
 800e9b4:	065b      	lsls	r3, r3, #25
 800e9b6:	f53f af1f 	bmi.w	800e7f8 <_vfiprintf_r+0x44>
 800e9ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e9bc:	e71e      	b.n	800e7fc <_vfiprintf_r+0x48>
 800e9be:	ab03      	add	r3, sp, #12
 800e9c0:	9300      	str	r3, [sp, #0]
 800e9c2:	462a      	mov	r2, r5
 800e9c4:	4b05      	ldr	r3, [pc, #20]	@ (800e9dc <_vfiprintf_r+0x228>)
 800e9c6:	a904      	add	r1, sp, #16
 800e9c8:	4630      	mov	r0, r6
 800e9ca:	f7fe f811 	bl	800c9f0 <_printf_i>
 800e9ce:	e7e4      	b.n	800e99a <_vfiprintf_r+0x1e6>
 800e9d0:	080117a7 	.word	0x080117a7
 800e9d4:	080117b1 	.word	0x080117b1
 800e9d8:	0800c4c1 	.word	0x0800c4c1
 800e9dc:	0800e791 	.word	0x0800e791
 800e9e0:	080117ad 	.word	0x080117ad

0800e9e4 <__swbuf_r>:
 800e9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9e6:	460e      	mov	r6, r1
 800e9e8:	4614      	mov	r4, r2
 800e9ea:	4605      	mov	r5, r0
 800e9ec:	b118      	cbz	r0, 800e9f6 <__swbuf_r+0x12>
 800e9ee:	6a03      	ldr	r3, [r0, #32]
 800e9f0:	b90b      	cbnz	r3, 800e9f6 <__swbuf_r+0x12>
 800e9f2:	f7fe f9a9 	bl	800cd48 <__sinit>
 800e9f6:	69a3      	ldr	r3, [r4, #24]
 800e9f8:	60a3      	str	r3, [r4, #8]
 800e9fa:	89a3      	ldrh	r3, [r4, #12]
 800e9fc:	071a      	lsls	r2, r3, #28
 800e9fe:	d501      	bpl.n	800ea04 <__swbuf_r+0x20>
 800ea00:	6923      	ldr	r3, [r4, #16]
 800ea02:	b943      	cbnz	r3, 800ea16 <__swbuf_r+0x32>
 800ea04:	4621      	mov	r1, r4
 800ea06:	4628      	mov	r0, r5
 800ea08:	f000 f82a 	bl	800ea60 <__swsetup_r>
 800ea0c:	b118      	cbz	r0, 800ea16 <__swbuf_r+0x32>
 800ea0e:	f04f 37ff 	mov.w	r7, #4294967295
 800ea12:	4638      	mov	r0, r7
 800ea14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea16:	6823      	ldr	r3, [r4, #0]
 800ea18:	6922      	ldr	r2, [r4, #16]
 800ea1a:	1a98      	subs	r0, r3, r2
 800ea1c:	6963      	ldr	r3, [r4, #20]
 800ea1e:	b2f6      	uxtb	r6, r6
 800ea20:	4283      	cmp	r3, r0
 800ea22:	4637      	mov	r7, r6
 800ea24:	dc05      	bgt.n	800ea32 <__swbuf_r+0x4e>
 800ea26:	4621      	mov	r1, r4
 800ea28:	4628      	mov	r0, r5
 800ea2a:	f7ff fdf7 	bl	800e61c <_fflush_r>
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	d1ed      	bne.n	800ea0e <__swbuf_r+0x2a>
 800ea32:	68a3      	ldr	r3, [r4, #8]
 800ea34:	3b01      	subs	r3, #1
 800ea36:	60a3      	str	r3, [r4, #8]
 800ea38:	6823      	ldr	r3, [r4, #0]
 800ea3a:	1c5a      	adds	r2, r3, #1
 800ea3c:	6022      	str	r2, [r4, #0]
 800ea3e:	701e      	strb	r6, [r3, #0]
 800ea40:	6962      	ldr	r2, [r4, #20]
 800ea42:	1c43      	adds	r3, r0, #1
 800ea44:	429a      	cmp	r2, r3
 800ea46:	d004      	beq.n	800ea52 <__swbuf_r+0x6e>
 800ea48:	89a3      	ldrh	r3, [r4, #12]
 800ea4a:	07db      	lsls	r3, r3, #31
 800ea4c:	d5e1      	bpl.n	800ea12 <__swbuf_r+0x2e>
 800ea4e:	2e0a      	cmp	r6, #10
 800ea50:	d1df      	bne.n	800ea12 <__swbuf_r+0x2e>
 800ea52:	4621      	mov	r1, r4
 800ea54:	4628      	mov	r0, r5
 800ea56:	f7ff fde1 	bl	800e61c <_fflush_r>
 800ea5a:	2800      	cmp	r0, #0
 800ea5c:	d0d9      	beq.n	800ea12 <__swbuf_r+0x2e>
 800ea5e:	e7d6      	b.n	800ea0e <__swbuf_r+0x2a>

0800ea60 <__swsetup_r>:
 800ea60:	b538      	push	{r3, r4, r5, lr}
 800ea62:	4b29      	ldr	r3, [pc, #164]	@ (800eb08 <__swsetup_r+0xa8>)
 800ea64:	4605      	mov	r5, r0
 800ea66:	6818      	ldr	r0, [r3, #0]
 800ea68:	460c      	mov	r4, r1
 800ea6a:	b118      	cbz	r0, 800ea74 <__swsetup_r+0x14>
 800ea6c:	6a03      	ldr	r3, [r0, #32]
 800ea6e:	b90b      	cbnz	r3, 800ea74 <__swsetup_r+0x14>
 800ea70:	f7fe f96a 	bl	800cd48 <__sinit>
 800ea74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea78:	0719      	lsls	r1, r3, #28
 800ea7a:	d422      	bmi.n	800eac2 <__swsetup_r+0x62>
 800ea7c:	06da      	lsls	r2, r3, #27
 800ea7e:	d407      	bmi.n	800ea90 <__swsetup_r+0x30>
 800ea80:	2209      	movs	r2, #9
 800ea82:	602a      	str	r2, [r5, #0]
 800ea84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea88:	81a3      	strh	r3, [r4, #12]
 800ea8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ea8e:	e033      	b.n	800eaf8 <__swsetup_r+0x98>
 800ea90:	0758      	lsls	r0, r3, #29
 800ea92:	d512      	bpl.n	800eaba <__swsetup_r+0x5a>
 800ea94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea96:	b141      	cbz	r1, 800eaaa <__swsetup_r+0x4a>
 800ea98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea9c:	4299      	cmp	r1, r3
 800ea9e:	d002      	beq.n	800eaa6 <__swsetup_r+0x46>
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	f7ff f8b5 	bl	800dc10 <_free_r>
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	6363      	str	r3, [r4, #52]	@ 0x34
 800eaaa:	89a3      	ldrh	r3, [r4, #12]
 800eaac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eab0:	81a3      	strh	r3, [r4, #12]
 800eab2:	2300      	movs	r3, #0
 800eab4:	6063      	str	r3, [r4, #4]
 800eab6:	6923      	ldr	r3, [r4, #16]
 800eab8:	6023      	str	r3, [r4, #0]
 800eaba:	89a3      	ldrh	r3, [r4, #12]
 800eabc:	f043 0308 	orr.w	r3, r3, #8
 800eac0:	81a3      	strh	r3, [r4, #12]
 800eac2:	6923      	ldr	r3, [r4, #16]
 800eac4:	b94b      	cbnz	r3, 800eada <__swsetup_r+0x7a>
 800eac6:	89a3      	ldrh	r3, [r4, #12]
 800eac8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eacc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ead0:	d003      	beq.n	800eada <__swsetup_r+0x7a>
 800ead2:	4621      	mov	r1, r4
 800ead4:	4628      	mov	r0, r5
 800ead6:	f000 f883 	bl	800ebe0 <__smakebuf_r>
 800eada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eade:	f013 0201 	ands.w	r2, r3, #1
 800eae2:	d00a      	beq.n	800eafa <__swsetup_r+0x9a>
 800eae4:	2200      	movs	r2, #0
 800eae6:	60a2      	str	r2, [r4, #8]
 800eae8:	6962      	ldr	r2, [r4, #20]
 800eaea:	4252      	negs	r2, r2
 800eaec:	61a2      	str	r2, [r4, #24]
 800eaee:	6922      	ldr	r2, [r4, #16]
 800eaf0:	b942      	cbnz	r2, 800eb04 <__swsetup_r+0xa4>
 800eaf2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800eaf6:	d1c5      	bne.n	800ea84 <__swsetup_r+0x24>
 800eaf8:	bd38      	pop	{r3, r4, r5, pc}
 800eafa:	0799      	lsls	r1, r3, #30
 800eafc:	bf58      	it	pl
 800eafe:	6962      	ldrpl	r2, [r4, #20]
 800eb00:	60a2      	str	r2, [r4, #8]
 800eb02:	e7f4      	b.n	800eaee <__swsetup_r+0x8e>
 800eb04:	2000      	movs	r0, #0
 800eb06:	e7f7      	b.n	800eaf8 <__swsetup_r+0x98>
 800eb08:	20000058 	.word	0x20000058

0800eb0c <_raise_r>:
 800eb0c:	291f      	cmp	r1, #31
 800eb0e:	b538      	push	{r3, r4, r5, lr}
 800eb10:	4605      	mov	r5, r0
 800eb12:	460c      	mov	r4, r1
 800eb14:	d904      	bls.n	800eb20 <_raise_r+0x14>
 800eb16:	2316      	movs	r3, #22
 800eb18:	6003      	str	r3, [r0, #0]
 800eb1a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb1e:	bd38      	pop	{r3, r4, r5, pc}
 800eb20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eb22:	b112      	cbz	r2, 800eb2a <_raise_r+0x1e>
 800eb24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb28:	b94b      	cbnz	r3, 800eb3e <_raise_r+0x32>
 800eb2a:	4628      	mov	r0, r5
 800eb2c:	f000 f830 	bl	800eb90 <_getpid_r>
 800eb30:	4622      	mov	r2, r4
 800eb32:	4601      	mov	r1, r0
 800eb34:	4628      	mov	r0, r5
 800eb36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb3a:	f000 b817 	b.w	800eb6c <_kill_r>
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d00a      	beq.n	800eb58 <_raise_r+0x4c>
 800eb42:	1c59      	adds	r1, r3, #1
 800eb44:	d103      	bne.n	800eb4e <_raise_r+0x42>
 800eb46:	2316      	movs	r3, #22
 800eb48:	6003      	str	r3, [r0, #0]
 800eb4a:	2001      	movs	r0, #1
 800eb4c:	e7e7      	b.n	800eb1e <_raise_r+0x12>
 800eb4e:	2100      	movs	r1, #0
 800eb50:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eb54:	4620      	mov	r0, r4
 800eb56:	4798      	blx	r3
 800eb58:	2000      	movs	r0, #0
 800eb5a:	e7e0      	b.n	800eb1e <_raise_r+0x12>

0800eb5c <raise>:
 800eb5c:	4b02      	ldr	r3, [pc, #8]	@ (800eb68 <raise+0xc>)
 800eb5e:	4601      	mov	r1, r0
 800eb60:	6818      	ldr	r0, [r3, #0]
 800eb62:	f7ff bfd3 	b.w	800eb0c <_raise_r>
 800eb66:	bf00      	nop
 800eb68:	20000058 	.word	0x20000058

0800eb6c <_kill_r>:
 800eb6c:	b538      	push	{r3, r4, r5, lr}
 800eb6e:	4d07      	ldr	r5, [pc, #28]	@ (800eb8c <_kill_r+0x20>)
 800eb70:	2300      	movs	r3, #0
 800eb72:	4604      	mov	r4, r0
 800eb74:	4608      	mov	r0, r1
 800eb76:	4611      	mov	r1, r2
 800eb78:	602b      	str	r3, [r5, #0]
 800eb7a:	f7f8 fa3d 	bl	8006ff8 <_kill>
 800eb7e:	1c43      	adds	r3, r0, #1
 800eb80:	d102      	bne.n	800eb88 <_kill_r+0x1c>
 800eb82:	682b      	ldr	r3, [r5, #0]
 800eb84:	b103      	cbz	r3, 800eb88 <_kill_r+0x1c>
 800eb86:	6023      	str	r3, [r4, #0]
 800eb88:	bd38      	pop	{r3, r4, r5, pc}
 800eb8a:	bf00      	nop
 800eb8c:	2000092c 	.word	0x2000092c

0800eb90 <_getpid_r>:
 800eb90:	f7f8 ba2a 	b.w	8006fe8 <_getpid>

0800eb94 <__swhatbuf_r>:
 800eb94:	b570      	push	{r4, r5, r6, lr}
 800eb96:	460c      	mov	r4, r1
 800eb98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb9c:	2900      	cmp	r1, #0
 800eb9e:	b096      	sub	sp, #88	@ 0x58
 800eba0:	4615      	mov	r5, r2
 800eba2:	461e      	mov	r6, r3
 800eba4:	da0d      	bge.n	800ebc2 <__swhatbuf_r+0x2e>
 800eba6:	89a3      	ldrh	r3, [r4, #12]
 800eba8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ebac:	f04f 0100 	mov.w	r1, #0
 800ebb0:	bf14      	ite	ne
 800ebb2:	2340      	movne	r3, #64	@ 0x40
 800ebb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ebb8:	2000      	movs	r0, #0
 800ebba:	6031      	str	r1, [r6, #0]
 800ebbc:	602b      	str	r3, [r5, #0]
 800ebbe:	b016      	add	sp, #88	@ 0x58
 800ebc0:	bd70      	pop	{r4, r5, r6, pc}
 800ebc2:	466a      	mov	r2, sp
 800ebc4:	f000 f848 	bl	800ec58 <_fstat_r>
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	dbec      	blt.n	800eba6 <__swhatbuf_r+0x12>
 800ebcc:	9901      	ldr	r1, [sp, #4]
 800ebce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ebd2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ebd6:	4259      	negs	r1, r3
 800ebd8:	4159      	adcs	r1, r3
 800ebda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ebde:	e7eb      	b.n	800ebb8 <__swhatbuf_r+0x24>

0800ebe0 <__smakebuf_r>:
 800ebe0:	898b      	ldrh	r3, [r1, #12]
 800ebe2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebe4:	079d      	lsls	r5, r3, #30
 800ebe6:	4606      	mov	r6, r0
 800ebe8:	460c      	mov	r4, r1
 800ebea:	d507      	bpl.n	800ebfc <__smakebuf_r+0x1c>
 800ebec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ebf0:	6023      	str	r3, [r4, #0]
 800ebf2:	6123      	str	r3, [r4, #16]
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	6163      	str	r3, [r4, #20]
 800ebf8:	b003      	add	sp, #12
 800ebfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebfc:	ab01      	add	r3, sp, #4
 800ebfe:	466a      	mov	r2, sp
 800ec00:	f7ff ffc8 	bl	800eb94 <__swhatbuf_r>
 800ec04:	9f00      	ldr	r7, [sp, #0]
 800ec06:	4605      	mov	r5, r0
 800ec08:	4639      	mov	r1, r7
 800ec0a:	4630      	mov	r0, r6
 800ec0c:	f7ff f874 	bl	800dcf8 <_malloc_r>
 800ec10:	b948      	cbnz	r0, 800ec26 <__smakebuf_r+0x46>
 800ec12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec16:	059a      	lsls	r2, r3, #22
 800ec18:	d4ee      	bmi.n	800ebf8 <__smakebuf_r+0x18>
 800ec1a:	f023 0303 	bic.w	r3, r3, #3
 800ec1e:	f043 0302 	orr.w	r3, r3, #2
 800ec22:	81a3      	strh	r3, [r4, #12]
 800ec24:	e7e2      	b.n	800ebec <__smakebuf_r+0xc>
 800ec26:	89a3      	ldrh	r3, [r4, #12]
 800ec28:	6020      	str	r0, [r4, #0]
 800ec2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec2e:	81a3      	strh	r3, [r4, #12]
 800ec30:	9b01      	ldr	r3, [sp, #4]
 800ec32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ec36:	b15b      	cbz	r3, 800ec50 <__smakebuf_r+0x70>
 800ec38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec3c:	4630      	mov	r0, r6
 800ec3e:	f000 f81d 	bl	800ec7c <_isatty_r>
 800ec42:	b128      	cbz	r0, 800ec50 <__smakebuf_r+0x70>
 800ec44:	89a3      	ldrh	r3, [r4, #12]
 800ec46:	f023 0303 	bic.w	r3, r3, #3
 800ec4a:	f043 0301 	orr.w	r3, r3, #1
 800ec4e:	81a3      	strh	r3, [r4, #12]
 800ec50:	89a3      	ldrh	r3, [r4, #12]
 800ec52:	431d      	orrs	r5, r3
 800ec54:	81a5      	strh	r5, [r4, #12]
 800ec56:	e7cf      	b.n	800ebf8 <__smakebuf_r+0x18>

0800ec58 <_fstat_r>:
 800ec58:	b538      	push	{r3, r4, r5, lr}
 800ec5a:	4d07      	ldr	r5, [pc, #28]	@ (800ec78 <_fstat_r+0x20>)
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	4604      	mov	r4, r0
 800ec60:	4608      	mov	r0, r1
 800ec62:	4611      	mov	r1, r2
 800ec64:	602b      	str	r3, [r5, #0]
 800ec66:	f7f8 fa27 	bl	80070b8 <_fstat>
 800ec6a:	1c43      	adds	r3, r0, #1
 800ec6c:	d102      	bne.n	800ec74 <_fstat_r+0x1c>
 800ec6e:	682b      	ldr	r3, [r5, #0]
 800ec70:	b103      	cbz	r3, 800ec74 <_fstat_r+0x1c>
 800ec72:	6023      	str	r3, [r4, #0]
 800ec74:	bd38      	pop	{r3, r4, r5, pc}
 800ec76:	bf00      	nop
 800ec78:	2000092c 	.word	0x2000092c

0800ec7c <_isatty_r>:
 800ec7c:	b538      	push	{r3, r4, r5, lr}
 800ec7e:	4d06      	ldr	r5, [pc, #24]	@ (800ec98 <_isatty_r+0x1c>)
 800ec80:	2300      	movs	r3, #0
 800ec82:	4604      	mov	r4, r0
 800ec84:	4608      	mov	r0, r1
 800ec86:	602b      	str	r3, [r5, #0]
 800ec88:	f7f8 fa26 	bl	80070d8 <_isatty>
 800ec8c:	1c43      	adds	r3, r0, #1
 800ec8e:	d102      	bne.n	800ec96 <_isatty_r+0x1a>
 800ec90:	682b      	ldr	r3, [r5, #0]
 800ec92:	b103      	cbz	r3, 800ec96 <_isatty_r+0x1a>
 800ec94:	6023      	str	r3, [r4, #0]
 800ec96:	bd38      	pop	{r3, r4, r5, pc}
 800ec98:	2000092c 	.word	0x2000092c

0800ec9c <pow>:
 800ec9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec9e:	ed2d 8b02 	vpush	{d8}
 800eca2:	eeb0 8a40 	vmov.f32	s16, s0
 800eca6:	eef0 8a60 	vmov.f32	s17, s1
 800ecaa:	ec55 4b11 	vmov	r4, r5, d1
 800ecae:	f000 fc77 	bl	800f5a0 <__ieee754_pow>
 800ecb2:	4622      	mov	r2, r4
 800ecb4:	462b      	mov	r3, r5
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	4629      	mov	r1, r5
 800ecba:	ec57 6b10 	vmov	r6, r7, d0
 800ecbe:	f7f1 ff55 	bl	8000b6c <__aeabi_dcmpun>
 800ecc2:	2800      	cmp	r0, #0
 800ecc4:	d13b      	bne.n	800ed3e <pow+0xa2>
 800ecc6:	ec51 0b18 	vmov	r0, r1, d8
 800ecca:	2200      	movs	r2, #0
 800eccc:	2300      	movs	r3, #0
 800ecce:	f7f1 ff1b 	bl	8000b08 <__aeabi_dcmpeq>
 800ecd2:	b1b8      	cbz	r0, 800ed04 <pow+0x68>
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	4620      	mov	r0, r4
 800ecda:	4629      	mov	r1, r5
 800ecdc:	f7f1 ff14 	bl	8000b08 <__aeabi_dcmpeq>
 800ece0:	2800      	cmp	r0, #0
 800ece2:	d146      	bne.n	800ed72 <pow+0xd6>
 800ece4:	ec45 4b10 	vmov	d0, r4, r5
 800ece8:	f000 f949 	bl	800ef7e <finite>
 800ecec:	b338      	cbz	r0, 800ed3e <pow+0xa2>
 800ecee:	2200      	movs	r2, #0
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	4620      	mov	r0, r4
 800ecf4:	4629      	mov	r1, r5
 800ecf6:	f7f1 ff11 	bl	8000b1c <__aeabi_dcmplt>
 800ecfa:	b300      	cbz	r0, 800ed3e <pow+0xa2>
 800ecfc:	f7fe f900 	bl	800cf00 <__errno>
 800ed00:	2322      	movs	r3, #34	@ 0x22
 800ed02:	e01b      	b.n	800ed3c <pow+0xa0>
 800ed04:	ec47 6b10 	vmov	d0, r6, r7
 800ed08:	f000 f939 	bl	800ef7e <finite>
 800ed0c:	b9e0      	cbnz	r0, 800ed48 <pow+0xac>
 800ed0e:	eeb0 0a48 	vmov.f32	s0, s16
 800ed12:	eef0 0a68 	vmov.f32	s1, s17
 800ed16:	f000 f932 	bl	800ef7e <finite>
 800ed1a:	b1a8      	cbz	r0, 800ed48 <pow+0xac>
 800ed1c:	ec45 4b10 	vmov	d0, r4, r5
 800ed20:	f000 f92d 	bl	800ef7e <finite>
 800ed24:	b180      	cbz	r0, 800ed48 <pow+0xac>
 800ed26:	4632      	mov	r2, r6
 800ed28:	463b      	mov	r3, r7
 800ed2a:	4630      	mov	r0, r6
 800ed2c:	4639      	mov	r1, r7
 800ed2e:	f7f1 ff1d 	bl	8000b6c <__aeabi_dcmpun>
 800ed32:	2800      	cmp	r0, #0
 800ed34:	d0e2      	beq.n	800ecfc <pow+0x60>
 800ed36:	f7fe f8e3 	bl	800cf00 <__errno>
 800ed3a:	2321      	movs	r3, #33	@ 0x21
 800ed3c:	6003      	str	r3, [r0, #0]
 800ed3e:	ecbd 8b02 	vpop	{d8}
 800ed42:	ec47 6b10 	vmov	d0, r6, r7
 800ed46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed48:	2200      	movs	r2, #0
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	4630      	mov	r0, r6
 800ed4e:	4639      	mov	r1, r7
 800ed50:	f7f1 feda 	bl	8000b08 <__aeabi_dcmpeq>
 800ed54:	2800      	cmp	r0, #0
 800ed56:	d0f2      	beq.n	800ed3e <pow+0xa2>
 800ed58:	eeb0 0a48 	vmov.f32	s0, s16
 800ed5c:	eef0 0a68 	vmov.f32	s1, s17
 800ed60:	f000 f90d 	bl	800ef7e <finite>
 800ed64:	2800      	cmp	r0, #0
 800ed66:	d0ea      	beq.n	800ed3e <pow+0xa2>
 800ed68:	ec45 4b10 	vmov	d0, r4, r5
 800ed6c:	f000 f907 	bl	800ef7e <finite>
 800ed70:	e7c3      	b.n	800ecfa <pow+0x5e>
 800ed72:	4f01      	ldr	r7, [pc, #4]	@ (800ed78 <pow+0xdc>)
 800ed74:	2600      	movs	r6, #0
 800ed76:	e7e2      	b.n	800ed3e <pow+0xa2>
 800ed78:	3ff00000 	.word	0x3ff00000

0800ed7c <sqrt>:
 800ed7c:	b538      	push	{r3, r4, r5, lr}
 800ed7e:	ed2d 8b02 	vpush	{d8}
 800ed82:	ec55 4b10 	vmov	r4, r5, d0
 800ed86:	f000 f961 	bl	800f04c <__ieee754_sqrt>
 800ed8a:	4622      	mov	r2, r4
 800ed8c:	462b      	mov	r3, r5
 800ed8e:	4620      	mov	r0, r4
 800ed90:	4629      	mov	r1, r5
 800ed92:	eeb0 8a40 	vmov.f32	s16, s0
 800ed96:	eef0 8a60 	vmov.f32	s17, s1
 800ed9a:	f7f1 fee7 	bl	8000b6c <__aeabi_dcmpun>
 800ed9e:	b990      	cbnz	r0, 800edc6 <sqrt+0x4a>
 800eda0:	2200      	movs	r2, #0
 800eda2:	2300      	movs	r3, #0
 800eda4:	4620      	mov	r0, r4
 800eda6:	4629      	mov	r1, r5
 800eda8:	f7f1 feb8 	bl	8000b1c <__aeabi_dcmplt>
 800edac:	b158      	cbz	r0, 800edc6 <sqrt+0x4a>
 800edae:	f7fe f8a7 	bl	800cf00 <__errno>
 800edb2:	2321      	movs	r3, #33	@ 0x21
 800edb4:	6003      	str	r3, [r0, #0]
 800edb6:	2200      	movs	r2, #0
 800edb8:	2300      	movs	r3, #0
 800edba:	4610      	mov	r0, r2
 800edbc:	4619      	mov	r1, r3
 800edbe:	f7f1 fd65 	bl	800088c <__aeabi_ddiv>
 800edc2:	ec41 0b18 	vmov	d8, r0, r1
 800edc6:	eeb0 0a48 	vmov.f32	s0, s16
 800edca:	eef0 0a68 	vmov.f32	s1, s17
 800edce:	ecbd 8b02 	vpop	{d8}
 800edd2:	bd38      	pop	{r3, r4, r5, pc}
 800edd4:	0000      	movs	r0, r0
	...

0800edd8 <cos>:
 800edd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800edda:	ec53 2b10 	vmov	r2, r3, d0
 800edde:	4826      	ldr	r0, [pc, #152]	@ (800ee78 <cos+0xa0>)
 800ede0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ede4:	4281      	cmp	r1, r0
 800ede6:	d806      	bhi.n	800edf6 <cos+0x1e>
 800ede8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800ee70 <cos+0x98>
 800edec:	b005      	add	sp, #20
 800edee:	f85d eb04 	ldr.w	lr, [sp], #4
 800edf2:	f000 ba51 	b.w	800f298 <__kernel_cos>
 800edf6:	4821      	ldr	r0, [pc, #132]	@ (800ee7c <cos+0xa4>)
 800edf8:	4281      	cmp	r1, r0
 800edfa:	d908      	bls.n	800ee0e <cos+0x36>
 800edfc:	4610      	mov	r0, r2
 800edfe:	4619      	mov	r1, r3
 800ee00:	f7f1 fa62 	bl	80002c8 <__aeabi_dsub>
 800ee04:	ec41 0b10 	vmov	d0, r0, r1
 800ee08:	b005      	add	sp, #20
 800ee0a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee0e:	4668      	mov	r0, sp
 800ee10:	f001 f90a 	bl	8010028 <__ieee754_rem_pio2>
 800ee14:	f000 0003 	and.w	r0, r0, #3
 800ee18:	2801      	cmp	r0, #1
 800ee1a:	d00b      	beq.n	800ee34 <cos+0x5c>
 800ee1c:	2802      	cmp	r0, #2
 800ee1e:	d015      	beq.n	800ee4c <cos+0x74>
 800ee20:	b9d8      	cbnz	r0, 800ee5a <cos+0x82>
 800ee22:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ee26:	ed9d 0b00 	vldr	d0, [sp]
 800ee2a:	f000 fa35 	bl	800f298 <__kernel_cos>
 800ee2e:	ec51 0b10 	vmov	r0, r1, d0
 800ee32:	e7e7      	b.n	800ee04 <cos+0x2c>
 800ee34:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ee38:	ed9d 0b00 	vldr	d0, [sp]
 800ee3c:	f000 faf4 	bl	800f428 <__kernel_sin>
 800ee40:	ec53 2b10 	vmov	r2, r3, d0
 800ee44:	4610      	mov	r0, r2
 800ee46:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800ee4a:	e7db      	b.n	800ee04 <cos+0x2c>
 800ee4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ee50:	ed9d 0b00 	vldr	d0, [sp]
 800ee54:	f000 fa20 	bl	800f298 <__kernel_cos>
 800ee58:	e7f2      	b.n	800ee40 <cos+0x68>
 800ee5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ee5e:	ed9d 0b00 	vldr	d0, [sp]
 800ee62:	2001      	movs	r0, #1
 800ee64:	f000 fae0 	bl	800f428 <__kernel_sin>
 800ee68:	e7e1      	b.n	800ee2e <cos+0x56>
 800ee6a:	bf00      	nop
 800ee6c:	f3af 8000 	nop.w
	...
 800ee78:	3fe921fb 	.word	0x3fe921fb
 800ee7c:	7fefffff 	.word	0x7fefffff

0800ee80 <acosf>:
 800ee80:	b508      	push	{r3, lr}
 800ee82:	ed2d 8b02 	vpush	{d8}
 800ee86:	eeb0 8a40 	vmov.f32	s16, s0
 800ee8a:	f001 fad1 	bl	8010430 <__ieee754_acosf>
 800ee8e:	eeb4 8a48 	vcmp.f32	s16, s16
 800ee92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee96:	eef0 8a40 	vmov.f32	s17, s0
 800ee9a:	d615      	bvs.n	800eec8 <acosf+0x48>
 800ee9c:	eeb0 0a48 	vmov.f32	s0, s16
 800eea0:	f000 f866 	bl	800ef70 <fabsf>
 800eea4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800eea8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800eeac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeb0:	dd0a      	ble.n	800eec8 <acosf+0x48>
 800eeb2:	f7fe f825 	bl	800cf00 <__errno>
 800eeb6:	ecbd 8b02 	vpop	{d8}
 800eeba:	2321      	movs	r3, #33	@ 0x21
 800eebc:	6003      	str	r3, [r0, #0]
 800eebe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800eec2:	4804      	ldr	r0, [pc, #16]	@ (800eed4 <acosf+0x54>)
 800eec4:	f000 b866 	b.w	800ef94 <nanf>
 800eec8:	eeb0 0a68 	vmov.f32	s0, s17
 800eecc:	ecbd 8b02 	vpop	{d8}
 800eed0:	bd08      	pop	{r3, pc}
 800eed2:	bf00      	nop
 800eed4:	080116a5 	.word	0x080116a5

0800eed8 <asinf>:
 800eed8:	b508      	push	{r3, lr}
 800eeda:	ed2d 8b02 	vpush	{d8}
 800eede:	eeb0 8a40 	vmov.f32	s16, s0
 800eee2:	f001 fb9d 	bl	8010620 <__ieee754_asinf>
 800eee6:	eeb4 8a48 	vcmp.f32	s16, s16
 800eeea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeee:	eef0 8a40 	vmov.f32	s17, s0
 800eef2:	d615      	bvs.n	800ef20 <asinf+0x48>
 800eef4:	eeb0 0a48 	vmov.f32	s0, s16
 800eef8:	f000 f83a 	bl	800ef70 <fabsf>
 800eefc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ef00:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ef04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef08:	dd0a      	ble.n	800ef20 <asinf+0x48>
 800ef0a:	f7fd fff9 	bl	800cf00 <__errno>
 800ef0e:	ecbd 8b02 	vpop	{d8}
 800ef12:	2321      	movs	r3, #33	@ 0x21
 800ef14:	6003      	str	r3, [r0, #0]
 800ef16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ef1a:	4804      	ldr	r0, [pc, #16]	@ (800ef2c <asinf+0x54>)
 800ef1c:	f000 b83a 	b.w	800ef94 <nanf>
 800ef20:	eeb0 0a68 	vmov.f32	s0, s17
 800ef24:	ecbd 8b02 	vpop	{d8}
 800ef28:	bd08      	pop	{r3, pc}
 800ef2a:	bf00      	nop
 800ef2c:	080116a5 	.word	0x080116a5

0800ef30 <atan2f>:
 800ef30:	f001 bc5c 	b.w	80107ec <__ieee754_atan2f>

0800ef34 <sqrtf>:
 800ef34:	b508      	push	{r3, lr}
 800ef36:	ed2d 8b02 	vpush	{d8}
 800ef3a:	eeb0 8a40 	vmov.f32	s16, s0
 800ef3e:	f000 f95f 	bl	800f200 <__ieee754_sqrtf>
 800ef42:	eeb4 8a48 	vcmp.f32	s16, s16
 800ef46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef4a:	d60c      	bvs.n	800ef66 <sqrtf+0x32>
 800ef4c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ef6c <sqrtf+0x38>
 800ef50:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ef54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef58:	d505      	bpl.n	800ef66 <sqrtf+0x32>
 800ef5a:	f7fd ffd1 	bl	800cf00 <__errno>
 800ef5e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ef62:	2321      	movs	r3, #33	@ 0x21
 800ef64:	6003      	str	r3, [r0, #0]
 800ef66:	ecbd 8b02 	vpop	{d8}
 800ef6a:	bd08      	pop	{r3, pc}
 800ef6c:	00000000 	.word	0x00000000

0800ef70 <fabsf>:
 800ef70:	ee10 3a10 	vmov	r3, s0
 800ef74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ef78:	ee00 3a10 	vmov	s0, r3
 800ef7c:	4770      	bx	lr

0800ef7e <finite>:
 800ef7e:	b082      	sub	sp, #8
 800ef80:	ed8d 0b00 	vstr	d0, [sp]
 800ef84:	9801      	ldr	r0, [sp, #4]
 800ef86:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800ef8a:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ef8e:	0fc0      	lsrs	r0, r0, #31
 800ef90:	b002      	add	sp, #8
 800ef92:	4770      	bx	lr

0800ef94 <nanf>:
 800ef94:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ef9c <nanf+0x8>
 800ef98:	4770      	bx	lr
 800ef9a:	bf00      	nop
 800ef9c:	7fc00000 	.word	0x7fc00000

0800efa0 <fmaxf>:
 800efa0:	b508      	push	{r3, lr}
 800efa2:	ed2d 8b02 	vpush	{d8}
 800efa6:	eeb0 8a40 	vmov.f32	s16, s0
 800efaa:	eef0 8a60 	vmov.f32	s17, s1
 800efae:	f000 f831 	bl	800f014 <__fpclassifyf>
 800efb2:	b930      	cbnz	r0, 800efc2 <fmaxf+0x22>
 800efb4:	eeb0 8a68 	vmov.f32	s16, s17
 800efb8:	eeb0 0a48 	vmov.f32	s0, s16
 800efbc:	ecbd 8b02 	vpop	{d8}
 800efc0:	bd08      	pop	{r3, pc}
 800efc2:	eeb0 0a68 	vmov.f32	s0, s17
 800efc6:	f000 f825 	bl	800f014 <__fpclassifyf>
 800efca:	2800      	cmp	r0, #0
 800efcc:	d0f4      	beq.n	800efb8 <fmaxf+0x18>
 800efce:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800efd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efd6:	dded      	ble.n	800efb4 <fmaxf+0x14>
 800efd8:	e7ee      	b.n	800efb8 <fmaxf+0x18>

0800efda <fminf>:
 800efda:	b508      	push	{r3, lr}
 800efdc:	ed2d 8b02 	vpush	{d8}
 800efe0:	eeb0 8a40 	vmov.f32	s16, s0
 800efe4:	eef0 8a60 	vmov.f32	s17, s1
 800efe8:	f000 f814 	bl	800f014 <__fpclassifyf>
 800efec:	b930      	cbnz	r0, 800effc <fminf+0x22>
 800efee:	eeb0 8a68 	vmov.f32	s16, s17
 800eff2:	eeb0 0a48 	vmov.f32	s0, s16
 800eff6:	ecbd 8b02 	vpop	{d8}
 800effa:	bd08      	pop	{r3, pc}
 800effc:	eeb0 0a68 	vmov.f32	s0, s17
 800f000:	f000 f808 	bl	800f014 <__fpclassifyf>
 800f004:	2800      	cmp	r0, #0
 800f006:	d0f4      	beq.n	800eff2 <fminf+0x18>
 800f008:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f010:	d5ed      	bpl.n	800efee <fminf+0x14>
 800f012:	e7ee      	b.n	800eff2 <fminf+0x18>

0800f014 <__fpclassifyf>:
 800f014:	ee10 3a10 	vmov	r3, s0
 800f018:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800f01c:	d00d      	beq.n	800f03a <__fpclassifyf+0x26>
 800f01e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800f022:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800f026:	d30a      	bcc.n	800f03e <__fpclassifyf+0x2a>
 800f028:	4b07      	ldr	r3, [pc, #28]	@ (800f048 <__fpclassifyf+0x34>)
 800f02a:	1e42      	subs	r2, r0, #1
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d908      	bls.n	800f042 <__fpclassifyf+0x2e>
 800f030:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800f034:	4258      	negs	r0, r3
 800f036:	4158      	adcs	r0, r3
 800f038:	4770      	bx	lr
 800f03a:	2002      	movs	r0, #2
 800f03c:	4770      	bx	lr
 800f03e:	2004      	movs	r0, #4
 800f040:	4770      	bx	lr
 800f042:	2003      	movs	r0, #3
 800f044:	4770      	bx	lr
 800f046:	bf00      	nop
 800f048:	007ffffe 	.word	0x007ffffe

0800f04c <__ieee754_sqrt>:
 800f04c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f050:	4a68      	ldr	r2, [pc, #416]	@ (800f1f4 <__ieee754_sqrt+0x1a8>)
 800f052:	ec55 4b10 	vmov	r4, r5, d0
 800f056:	43aa      	bics	r2, r5
 800f058:	462b      	mov	r3, r5
 800f05a:	4621      	mov	r1, r4
 800f05c:	d110      	bne.n	800f080 <__ieee754_sqrt+0x34>
 800f05e:	4622      	mov	r2, r4
 800f060:	4620      	mov	r0, r4
 800f062:	4629      	mov	r1, r5
 800f064:	f7f1 fae8 	bl	8000638 <__aeabi_dmul>
 800f068:	4602      	mov	r2, r0
 800f06a:	460b      	mov	r3, r1
 800f06c:	4620      	mov	r0, r4
 800f06e:	4629      	mov	r1, r5
 800f070:	f7f1 f92c 	bl	80002cc <__adddf3>
 800f074:	4604      	mov	r4, r0
 800f076:	460d      	mov	r5, r1
 800f078:	ec45 4b10 	vmov	d0, r4, r5
 800f07c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f080:	2d00      	cmp	r5, #0
 800f082:	dc0e      	bgt.n	800f0a2 <__ieee754_sqrt+0x56>
 800f084:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f088:	4322      	orrs	r2, r4
 800f08a:	d0f5      	beq.n	800f078 <__ieee754_sqrt+0x2c>
 800f08c:	b19d      	cbz	r5, 800f0b6 <__ieee754_sqrt+0x6a>
 800f08e:	4622      	mov	r2, r4
 800f090:	4620      	mov	r0, r4
 800f092:	4629      	mov	r1, r5
 800f094:	f7f1 f918 	bl	80002c8 <__aeabi_dsub>
 800f098:	4602      	mov	r2, r0
 800f09a:	460b      	mov	r3, r1
 800f09c:	f7f1 fbf6 	bl	800088c <__aeabi_ddiv>
 800f0a0:	e7e8      	b.n	800f074 <__ieee754_sqrt+0x28>
 800f0a2:	152a      	asrs	r2, r5, #20
 800f0a4:	d115      	bne.n	800f0d2 <__ieee754_sqrt+0x86>
 800f0a6:	2000      	movs	r0, #0
 800f0a8:	e009      	b.n	800f0be <__ieee754_sqrt+0x72>
 800f0aa:	0acb      	lsrs	r3, r1, #11
 800f0ac:	3a15      	subs	r2, #21
 800f0ae:	0549      	lsls	r1, r1, #21
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d0fa      	beq.n	800f0aa <__ieee754_sqrt+0x5e>
 800f0b4:	e7f7      	b.n	800f0a6 <__ieee754_sqrt+0x5a>
 800f0b6:	462a      	mov	r2, r5
 800f0b8:	e7fa      	b.n	800f0b0 <__ieee754_sqrt+0x64>
 800f0ba:	005b      	lsls	r3, r3, #1
 800f0bc:	3001      	adds	r0, #1
 800f0be:	02dc      	lsls	r4, r3, #11
 800f0c0:	d5fb      	bpl.n	800f0ba <__ieee754_sqrt+0x6e>
 800f0c2:	1e44      	subs	r4, r0, #1
 800f0c4:	1b12      	subs	r2, r2, r4
 800f0c6:	f1c0 0420 	rsb	r4, r0, #32
 800f0ca:	fa21 f404 	lsr.w	r4, r1, r4
 800f0ce:	4323      	orrs	r3, r4
 800f0d0:	4081      	lsls	r1, r0
 800f0d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f0d6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800f0da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f0de:	07d2      	lsls	r2, r2, #31
 800f0e0:	bf5c      	itt	pl
 800f0e2:	005b      	lslpl	r3, r3, #1
 800f0e4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f0e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f0ec:	bf58      	it	pl
 800f0ee:	0049      	lslpl	r1, r1, #1
 800f0f0:	2600      	movs	r6, #0
 800f0f2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f0f6:	106d      	asrs	r5, r5, #1
 800f0f8:	0049      	lsls	r1, r1, #1
 800f0fa:	2016      	movs	r0, #22
 800f0fc:	4632      	mov	r2, r6
 800f0fe:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f102:	1917      	adds	r7, r2, r4
 800f104:	429f      	cmp	r7, r3
 800f106:	bfde      	ittt	le
 800f108:	193a      	addle	r2, r7, r4
 800f10a:	1bdb      	suble	r3, r3, r7
 800f10c:	1936      	addle	r6, r6, r4
 800f10e:	0fcf      	lsrs	r7, r1, #31
 800f110:	3801      	subs	r0, #1
 800f112:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f116:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f11a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f11e:	d1f0      	bne.n	800f102 <__ieee754_sqrt+0xb6>
 800f120:	4604      	mov	r4, r0
 800f122:	2720      	movs	r7, #32
 800f124:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f128:	429a      	cmp	r2, r3
 800f12a:	eb00 0e0c 	add.w	lr, r0, ip
 800f12e:	db02      	blt.n	800f136 <__ieee754_sqrt+0xea>
 800f130:	d113      	bne.n	800f15a <__ieee754_sqrt+0x10e>
 800f132:	458e      	cmp	lr, r1
 800f134:	d811      	bhi.n	800f15a <__ieee754_sqrt+0x10e>
 800f136:	f1be 0f00 	cmp.w	lr, #0
 800f13a:	eb0e 000c 	add.w	r0, lr, ip
 800f13e:	da42      	bge.n	800f1c6 <__ieee754_sqrt+0x17a>
 800f140:	2800      	cmp	r0, #0
 800f142:	db40      	blt.n	800f1c6 <__ieee754_sqrt+0x17a>
 800f144:	f102 0801 	add.w	r8, r2, #1
 800f148:	1a9b      	subs	r3, r3, r2
 800f14a:	458e      	cmp	lr, r1
 800f14c:	bf88      	it	hi
 800f14e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f152:	eba1 010e 	sub.w	r1, r1, lr
 800f156:	4464      	add	r4, ip
 800f158:	4642      	mov	r2, r8
 800f15a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f15e:	3f01      	subs	r7, #1
 800f160:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f164:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f168:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f16c:	d1dc      	bne.n	800f128 <__ieee754_sqrt+0xdc>
 800f16e:	4319      	orrs	r1, r3
 800f170:	d01b      	beq.n	800f1aa <__ieee754_sqrt+0x15e>
 800f172:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800f1f8 <__ieee754_sqrt+0x1ac>
 800f176:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f1fc <__ieee754_sqrt+0x1b0>
 800f17a:	e9da 0100 	ldrd	r0, r1, [sl]
 800f17e:	e9db 2300 	ldrd	r2, r3, [fp]
 800f182:	f7f1 f8a1 	bl	80002c8 <__aeabi_dsub>
 800f186:	e9da 8900 	ldrd	r8, r9, [sl]
 800f18a:	4602      	mov	r2, r0
 800f18c:	460b      	mov	r3, r1
 800f18e:	4640      	mov	r0, r8
 800f190:	4649      	mov	r1, r9
 800f192:	f7f1 fccd 	bl	8000b30 <__aeabi_dcmple>
 800f196:	b140      	cbz	r0, 800f1aa <__ieee754_sqrt+0x15e>
 800f198:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f19c:	e9da 0100 	ldrd	r0, r1, [sl]
 800f1a0:	e9db 2300 	ldrd	r2, r3, [fp]
 800f1a4:	d111      	bne.n	800f1ca <__ieee754_sqrt+0x17e>
 800f1a6:	3601      	adds	r6, #1
 800f1a8:	463c      	mov	r4, r7
 800f1aa:	1072      	asrs	r2, r6, #1
 800f1ac:	0863      	lsrs	r3, r4, #1
 800f1ae:	07f1      	lsls	r1, r6, #31
 800f1b0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f1b4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f1b8:	bf48      	it	mi
 800f1ba:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f1be:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	e756      	b.n	800f074 <__ieee754_sqrt+0x28>
 800f1c6:	4690      	mov	r8, r2
 800f1c8:	e7be      	b.n	800f148 <__ieee754_sqrt+0xfc>
 800f1ca:	f7f1 f87f 	bl	80002cc <__adddf3>
 800f1ce:	e9da 8900 	ldrd	r8, r9, [sl]
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	460b      	mov	r3, r1
 800f1d6:	4640      	mov	r0, r8
 800f1d8:	4649      	mov	r1, r9
 800f1da:	f7f1 fc9f 	bl	8000b1c <__aeabi_dcmplt>
 800f1de:	b120      	cbz	r0, 800f1ea <__ieee754_sqrt+0x19e>
 800f1e0:	1ca0      	adds	r0, r4, #2
 800f1e2:	bf08      	it	eq
 800f1e4:	3601      	addeq	r6, #1
 800f1e6:	3402      	adds	r4, #2
 800f1e8:	e7df      	b.n	800f1aa <__ieee754_sqrt+0x15e>
 800f1ea:	1c63      	adds	r3, r4, #1
 800f1ec:	f023 0401 	bic.w	r4, r3, #1
 800f1f0:	e7db      	b.n	800f1aa <__ieee754_sqrt+0x15e>
 800f1f2:	bf00      	nop
 800f1f4:	7ff00000 	.word	0x7ff00000
 800f1f8:	20000220 	.word	0x20000220
 800f1fc:	20000218 	.word	0x20000218

0800f200 <__ieee754_sqrtf>:
 800f200:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f204:	4770      	bx	lr
	...

0800f208 <round>:
 800f208:	ec51 0b10 	vmov	r0, r1, d0
 800f20c:	b570      	push	{r4, r5, r6, lr}
 800f20e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f212:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800f216:	2a13      	cmp	r2, #19
 800f218:	460b      	mov	r3, r1
 800f21a:	4605      	mov	r5, r0
 800f21c:	dc1b      	bgt.n	800f256 <round+0x4e>
 800f21e:	2a00      	cmp	r2, #0
 800f220:	da0b      	bge.n	800f23a <round+0x32>
 800f222:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800f226:	3201      	adds	r2, #1
 800f228:	bf04      	itt	eq
 800f22a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800f22e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800f232:	2200      	movs	r2, #0
 800f234:	4619      	mov	r1, r3
 800f236:	4610      	mov	r0, r2
 800f238:	e015      	b.n	800f266 <round+0x5e>
 800f23a:	4c15      	ldr	r4, [pc, #84]	@ (800f290 <round+0x88>)
 800f23c:	4114      	asrs	r4, r2
 800f23e:	ea04 0601 	and.w	r6, r4, r1
 800f242:	4306      	orrs	r6, r0
 800f244:	d00f      	beq.n	800f266 <round+0x5e>
 800f246:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800f24a:	fa41 f202 	asr.w	r2, r1, r2
 800f24e:	4413      	add	r3, r2
 800f250:	ea23 0304 	bic.w	r3, r3, r4
 800f254:	e7ed      	b.n	800f232 <round+0x2a>
 800f256:	2a33      	cmp	r2, #51	@ 0x33
 800f258:	dd08      	ble.n	800f26c <round+0x64>
 800f25a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800f25e:	d102      	bne.n	800f266 <round+0x5e>
 800f260:	4602      	mov	r2, r0
 800f262:	f7f1 f833 	bl	80002cc <__adddf3>
 800f266:	ec41 0b10 	vmov	d0, r0, r1
 800f26a:	bd70      	pop	{r4, r5, r6, pc}
 800f26c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800f270:	f04f 34ff 	mov.w	r4, #4294967295
 800f274:	40f4      	lsrs	r4, r6
 800f276:	4204      	tst	r4, r0
 800f278:	d0f5      	beq.n	800f266 <round+0x5e>
 800f27a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800f27e:	2201      	movs	r2, #1
 800f280:	408a      	lsls	r2, r1
 800f282:	1952      	adds	r2, r2, r5
 800f284:	bf28      	it	cs
 800f286:	3301      	addcs	r3, #1
 800f288:	ea22 0204 	bic.w	r2, r2, r4
 800f28c:	e7d2      	b.n	800f234 <round+0x2c>
 800f28e:	bf00      	nop
 800f290:	000fffff 	.word	0x000fffff
 800f294:	00000000 	.word	0x00000000

0800f298 <__kernel_cos>:
 800f298:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f29c:	ec57 6b10 	vmov	r6, r7, d0
 800f2a0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f2a4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800f2a8:	ed8d 1b00 	vstr	d1, [sp]
 800f2ac:	d206      	bcs.n	800f2bc <__kernel_cos+0x24>
 800f2ae:	4630      	mov	r0, r6
 800f2b0:	4639      	mov	r1, r7
 800f2b2:	f7f1 fc71 	bl	8000b98 <__aeabi_d2iz>
 800f2b6:	2800      	cmp	r0, #0
 800f2b8:	f000 8088 	beq.w	800f3cc <__kernel_cos+0x134>
 800f2bc:	4632      	mov	r2, r6
 800f2be:	463b      	mov	r3, r7
 800f2c0:	4630      	mov	r0, r6
 800f2c2:	4639      	mov	r1, r7
 800f2c4:	f7f1 f9b8 	bl	8000638 <__aeabi_dmul>
 800f2c8:	4b51      	ldr	r3, [pc, #324]	@ (800f410 <__kernel_cos+0x178>)
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	4604      	mov	r4, r0
 800f2ce:	460d      	mov	r5, r1
 800f2d0:	f7f1 f9b2 	bl	8000638 <__aeabi_dmul>
 800f2d4:	a340      	add	r3, pc, #256	@ (adr r3, 800f3d8 <__kernel_cos+0x140>)
 800f2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2da:	4682      	mov	sl, r0
 800f2dc:	468b      	mov	fp, r1
 800f2de:	4620      	mov	r0, r4
 800f2e0:	4629      	mov	r1, r5
 800f2e2:	f7f1 f9a9 	bl	8000638 <__aeabi_dmul>
 800f2e6:	a33e      	add	r3, pc, #248	@ (adr r3, 800f3e0 <__kernel_cos+0x148>)
 800f2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ec:	f7f0 ffee 	bl	80002cc <__adddf3>
 800f2f0:	4622      	mov	r2, r4
 800f2f2:	462b      	mov	r3, r5
 800f2f4:	f7f1 f9a0 	bl	8000638 <__aeabi_dmul>
 800f2f8:	a33b      	add	r3, pc, #236	@ (adr r3, 800f3e8 <__kernel_cos+0x150>)
 800f2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2fe:	f7f0 ffe3 	bl	80002c8 <__aeabi_dsub>
 800f302:	4622      	mov	r2, r4
 800f304:	462b      	mov	r3, r5
 800f306:	f7f1 f997 	bl	8000638 <__aeabi_dmul>
 800f30a:	a339      	add	r3, pc, #228	@ (adr r3, 800f3f0 <__kernel_cos+0x158>)
 800f30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f310:	f7f0 ffdc 	bl	80002cc <__adddf3>
 800f314:	4622      	mov	r2, r4
 800f316:	462b      	mov	r3, r5
 800f318:	f7f1 f98e 	bl	8000638 <__aeabi_dmul>
 800f31c:	a336      	add	r3, pc, #216	@ (adr r3, 800f3f8 <__kernel_cos+0x160>)
 800f31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f322:	f7f0 ffd1 	bl	80002c8 <__aeabi_dsub>
 800f326:	4622      	mov	r2, r4
 800f328:	462b      	mov	r3, r5
 800f32a:	f7f1 f985 	bl	8000638 <__aeabi_dmul>
 800f32e:	a334      	add	r3, pc, #208	@ (adr r3, 800f400 <__kernel_cos+0x168>)
 800f330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f334:	f7f0 ffca 	bl	80002cc <__adddf3>
 800f338:	4622      	mov	r2, r4
 800f33a:	462b      	mov	r3, r5
 800f33c:	f7f1 f97c 	bl	8000638 <__aeabi_dmul>
 800f340:	4622      	mov	r2, r4
 800f342:	462b      	mov	r3, r5
 800f344:	f7f1 f978 	bl	8000638 <__aeabi_dmul>
 800f348:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f34c:	4604      	mov	r4, r0
 800f34e:	460d      	mov	r5, r1
 800f350:	4630      	mov	r0, r6
 800f352:	4639      	mov	r1, r7
 800f354:	f7f1 f970 	bl	8000638 <__aeabi_dmul>
 800f358:	460b      	mov	r3, r1
 800f35a:	4602      	mov	r2, r0
 800f35c:	4629      	mov	r1, r5
 800f35e:	4620      	mov	r0, r4
 800f360:	f7f0 ffb2 	bl	80002c8 <__aeabi_dsub>
 800f364:	4b2b      	ldr	r3, [pc, #172]	@ (800f414 <__kernel_cos+0x17c>)
 800f366:	4598      	cmp	r8, r3
 800f368:	4606      	mov	r6, r0
 800f36a:	460f      	mov	r7, r1
 800f36c:	d810      	bhi.n	800f390 <__kernel_cos+0xf8>
 800f36e:	4602      	mov	r2, r0
 800f370:	460b      	mov	r3, r1
 800f372:	4650      	mov	r0, sl
 800f374:	4659      	mov	r1, fp
 800f376:	f7f0 ffa7 	bl	80002c8 <__aeabi_dsub>
 800f37a:	460b      	mov	r3, r1
 800f37c:	4926      	ldr	r1, [pc, #152]	@ (800f418 <__kernel_cos+0x180>)
 800f37e:	4602      	mov	r2, r0
 800f380:	2000      	movs	r0, #0
 800f382:	f7f0 ffa1 	bl	80002c8 <__aeabi_dsub>
 800f386:	ec41 0b10 	vmov	d0, r0, r1
 800f38a:	b003      	add	sp, #12
 800f38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f390:	4b22      	ldr	r3, [pc, #136]	@ (800f41c <__kernel_cos+0x184>)
 800f392:	4921      	ldr	r1, [pc, #132]	@ (800f418 <__kernel_cos+0x180>)
 800f394:	4598      	cmp	r8, r3
 800f396:	bf8c      	ite	hi
 800f398:	4d21      	ldrhi	r5, [pc, #132]	@ (800f420 <__kernel_cos+0x188>)
 800f39a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800f39e:	2400      	movs	r4, #0
 800f3a0:	4622      	mov	r2, r4
 800f3a2:	462b      	mov	r3, r5
 800f3a4:	2000      	movs	r0, #0
 800f3a6:	f7f0 ff8f 	bl	80002c8 <__aeabi_dsub>
 800f3aa:	4622      	mov	r2, r4
 800f3ac:	4680      	mov	r8, r0
 800f3ae:	4689      	mov	r9, r1
 800f3b0:	462b      	mov	r3, r5
 800f3b2:	4650      	mov	r0, sl
 800f3b4:	4659      	mov	r1, fp
 800f3b6:	f7f0 ff87 	bl	80002c8 <__aeabi_dsub>
 800f3ba:	4632      	mov	r2, r6
 800f3bc:	463b      	mov	r3, r7
 800f3be:	f7f0 ff83 	bl	80002c8 <__aeabi_dsub>
 800f3c2:	4602      	mov	r2, r0
 800f3c4:	460b      	mov	r3, r1
 800f3c6:	4640      	mov	r0, r8
 800f3c8:	4649      	mov	r1, r9
 800f3ca:	e7da      	b.n	800f382 <__kernel_cos+0xea>
 800f3cc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800f408 <__kernel_cos+0x170>
 800f3d0:	e7db      	b.n	800f38a <__kernel_cos+0xf2>
 800f3d2:	bf00      	nop
 800f3d4:	f3af 8000 	nop.w
 800f3d8:	be8838d4 	.word	0xbe8838d4
 800f3dc:	bda8fae9 	.word	0xbda8fae9
 800f3e0:	bdb4b1c4 	.word	0xbdb4b1c4
 800f3e4:	3e21ee9e 	.word	0x3e21ee9e
 800f3e8:	809c52ad 	.word	0x809c52ad
 800f3ec:	3e927e4f 	.word	0x3e927e4f
 800f3f0:	19cb1590 	.word	0x19cb1590
 800f3f4:	3efa01a0 	.word	0x3efa01a0
 800f3f8:	16c15177 	.word	0x16c15177
 800f3fc:	3f56c16c 	.word	0x3f56c16c
 800f400:	5555554c 	.word	0x5555554c
 800f404:	3fa55555 	.word	0x3fa55555
 800f408:	00000000 	.word	0x00000000
 800f40c:	3ff00000 	.word	0x3ff00000
 800f410:	3fe00000 	.word	0x3fe00000
 800f414:	3fd33332 	.word	0x3fd33332
 800f418:	3ff00000 	.word	0x3ff00000
 800f41c:	3fe90000 	.word	0x3fe90000
 800f420:	3fd20000 	.word	0x3fd20000
 800f424:	00000000 	.word	0x00000000

0800f428 <__kernel_sin>:
 800f428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f42c:	ec55 4b10 	vmov	r4, r5, d0
 800f430:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f434:	b085      	sub	sp, #20
 800f436:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800f43a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800f43e:	4680      	mov	r8, r0
 800f440:	d205      	bcs.n	800f44e <__kernel_sin+0x26>
 800f442:	4620      	mov	r0, r4
 800f444:	4629      	mov	r1, r5
 800f446:	f7f1 fba7 	bl	8000b98 <__aeabi_d2iz>
 800f44a:	2800      	cmp	r0, #0
 800f44c:	d052      	beq.n	800f4f4 <__kernel_sin+0xcc>
 800f44e:	4622      	mov	r2, r4
 800f450:	462b      	mov	r3, r5
 800f452:	4620      	mov	r0, r4
 800f454:	4629      	mov	r1, r5
 800f456:	f7f1 f8ef 	bl	8000638 <__aeabi_dmul>
 800f45a:	4682      	mov	sl, r0
 800f45c:	468b      	mov	fp, r1
 800f45e:	4602      	mov	r2, r0
 800f460:	460b      	mov	r3, r1
 800f462:	4620      	mov	r0, r4
 800f464:	4629      	mov	r1, r5
 800f466:	f7f1 f8e7 	bl	8000638 <__aeabi_dmul>
 800f46a:	a342      	add	r3, pc, #264	@ (adr r3, 800f574 <__kernel_sin+0x14c>)
 800f46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f470:	e9cd 0100 	strd	r0, r1, [sp]
 800f474:	4650      	mov	r0, sl
 800f476:	4659      	mov	r1, fp
 800f478:	f7f1 f8de 	bl	8000638 <__aeabi_dmul>
 800f47c:	a33f      	add	r3, pc, #252	@ (adr r3, 800f57c <__kernel_sin+0x154>)
 800f47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f482:	f7f0 ff21 	bl	80002c8 <__aeabi_dsub>
 800f486:	4652      	mov	r2, sl
 800f488:	465b      	mov	r3, fp
 800f48a:	f7f1 f8d5 	bl	8000638 <__aeabi_dmul>
 800f48e:	a33d      	add	r3, pc, #244	@ (adr r3, 800f584 <__kernel_sin+0x15c>)
 800f490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f494:	f7f0 ff1a 	bl	80002cc <__adddf3>
 800f498:	4652      	mov	r2, sl
 800f49a:	465b      	mov	r3, fp
 800f49c:	f7f1 f8cc 	bl	8000638 <__aeabi_dmul>
 800f4a0:	a33a      	add	r3, pc, #232	@ (adr r3, 800f58c <__kernel_sin+0x164>)
 800f4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a6:	f7f0 ff0f 	bl	80002c8 <__aeabi_dsub>
 800f4aa:	4652      	mov	r2, sl
 800f4ac:	465b      	mov	r3, fp
 800f4ae:	f7f1 f8c3 	bl	8000638 <__aeabi_dmul>
 800f4b2:	a338      	add	r3, pc, #224	@ (adr r3, 800f594 <__kernel_sin+0x16c>)
 800f4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b8:	f7f0 ff08 	bl	80002cc <__adddf3>
 800f4bc:	4606      	mov	r6, r0
 800f4be:	460f      	mov	r7, r1
 800f4c0:	f1b8 0f00 	cmp.w	r8, #0
 800f4c4:	d11b      	bne.n	800f4fe <__kernel_sin+0xd6>
 800f4c6:	4602      	mov	r2, r0
 800f4c8:	460b      	mov	r3, r1
 800f4ca:	4650      	mov	r0, sl
 800f4cc:	4659      	mov	r1, fp
 800f4ce:	f7f1 f8b3 	bl	8000638 <__aeabi_dmul>
 800f4d2:	a325      	add	r3, pc, #148	@ (adr r3, 800f568 <__kernel_sin+0x140>)
 800f4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d8:	f7f0 fef6 	bl	80002c8 <__aeabi_dsub>
 800f4dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4e0:	f7f1 f8aa 	bl	8000638 <__aeabi_dmul>
 800f4e4:	4602      	mov	r2, r0
 800f4e6:	460b      	mov	r3, r1
 800f4e8:	4620      	mov	r0, r4
 800f4ea:	4629      	mov	r1, r5
 800f4ec:	f7f0 feee 	bl	80002cc <__adddf3>
 800f4f0:	4604      	mov	r4, r0
 800f4f2:	460d      	mov	r5, r1
 800f4f4:	ec45 4b10 	vmov	d0, r4, r5
 800f4f8:	b005      	add	sp, #20
 800f4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f502:	4b1b      	ldr	r3, [pc, #108]	@ (800f570 <__kernel_sin+0x148>)
 800f504:	2200      	movs	r2, #0
 800f506:	f7f1 f897 	bl	8000638 <__aeabi_dmul>
 800f50a:	4632      	mov	r2, r6
 800f50c:	4680      	mov	r8, r0
 800f50e:	4689      	mov	r9, r1
 800f510:	463b      	mov	r3, r7
 800f512:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f516:	f7f1 f88f 	bl	8000638 <__aeabi_dmul>
 800f51a:	4602      	mov	r2, r0
 800f51c:	460b      	mov	r3, r1
 800f51e:	4640      	mov	r0, r8
 800f520:	4649      	mov	r1, r9
 800f522:	f7f0 fed1 	bl	80002c8 <__aeabi_dsub>
 800f526:	4652      	mov	r2, sl
 800f528:	465b      	mov	r3, fp
 800f52a:	f7f1 f885 	bl	8000638 <__aeabi_dmul>
 800f52e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f532:	f7f0 fec9 	bl	80002c8 <__aeabi_dsub>
 800f536:	a30c      	add	r3, pc, #48	@ (adr r3, 800f568 <__kernel_sin+0x140>)
 800f538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53c:	4606      	mov	r6, r0
 800f53e:	460f      	mov	r7, r1
 800f540:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f544:	f7f1 f878 	bl	8000638 <__aeabi_dmul>
 800f548:	4602      	mov	r2, r0
 800f54a:	460b      	mov	r3, r1
 800f54c:	4630      	mov	r0, r6
 800f54e:	4639      	mov	r1, r7
 800f550:	f7f0 febc 	bl	80002cc <__adddf3>
 800f554:	4602      	mov	r2, r0
 800f556:	460b      	mov	r3, r1
 800f558:	4620      	mov	r0, r4
 800f55a:	4629      	mov	r1, r5
 800f55c:	f7f0 feb4 	bl	80002c8 <__aeabi_dsub>
 800f560:	e7c6      	b.n	800f4f0 <__kernel_sin+0xc8>
 800f562:	bf00      	nop
 800f564:	f3af 8000 	nop.w
 800f568:	55555549 	.word	0x55555549
 800f56c:	3fc55555 	.word	0x3fc55555
 800f570:	3fe00000 	.word	0x3fe00000
 800f574:	5acfd57c 	.word	0x5acfd57c
 800f578:	3de5d93a 	.word	0x3de5d93a
 800f57c:	8a2b9ceb 	.word	0x8a2b9ceb
 800f580:	3e5ae5e6 	.word	0x3e5ae5e6
 800f584:	57b1fe7d 	.word	0x57b1fe7d
 800f588:	3ec71de3 	.word	0x3ec71de3
 800f58c:	19c161d5 	.word	0x19c161d5
 800f590:	3f2a01a0 	.word	0x3f2a01a0
 800f594:	1110f8a6 	.word	0x1110f8a6
 800f598:	3f811111 	.word	0x3f811111
 800f59c:	00000000 	.word	0x00000000

0800f5a0 <__ieee754_pow>:
 800f5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a4:	b091      	sub	sp, #68	@ 0x44
 800f5a6:	ed8d 1b00 	vstr	d1, [sp]
 800f5aa:	e9dd 1900 	ldrd	r1, r9, [sp]
 800f5ae:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800f5b2:	ea5a 0001 	orrs.w	r0, sl, r1
 800f5b6:	ec57 6b10 	vmov	r6, r7, d0
 800f5ba:	d113      	bne.n	800f5e4 <__ieee754_pow+0x44>
 800f5bc:	19b3      	adds	r3, r6, r6
 800f5be:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800f5c2:	4152      	adcs	r2, r2
 800f5c4:	4298      	cmp	r0, r3
 800f5c6:	4b98      	ldr	r3, [pc, #608]	@ (800f828 <__ieee754_pow+0x288>)
 800f5c8:	4193      	sbcs	r3, r2
 800f5ca:	f080 84ea 	bcs.w	800ffa2 <__ieee754_pow+0xa02>
 800f5ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f5d2:	4630      	mov	r0, r6
 800f5d4:	4639      	mov	r1, r7
 800f5d6:	f7f0 fe79 	bl	80002cc <__adddf3>
 800f5da:	ec41 0b10 	vmov	d0, r0, r1
 800f5de:	b011      	add	sp, #68	@ 0x44
 800f5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5e4:	4a91      	ldr	r2, [pc, #580]	@ (800f82c <__ieee754_pow+0x28c>)
 800f5e6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f5ea:	4590      	cmp	r8, r2
 800f5ec:	463d      	mov	r5, r7
 800f5ee:	4633      	mov	r3, r6
 800f5f0:	d806      	bhi.n	800f600 <__ieee754_pow+0x60>
 800f5f2:	d101      	bne.n	800f5f8 <__ieee754_pow+0x58>
 800f5f4:	2e00      	cmp	r6, #0
 800f5f6:	d1ea      	bne.n	800f5ce <__ieee754_pow+0x2e>
 800f5f8:	4592      	cmp	sl, r2
 800f5fa:	d801      	bhi.n	800f600 <__ieee754_pow+0x60>
 800f5fc:	d10e      	bne.n	800f61c <__ieee754_pow+0x7c>
 800f5fe:	b169      	cbz	r1, 800f61c <__ieee754_pow+0x7c>
 800f600:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800f604:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800f608:	431d      	orrs	r5, r3
 800f60a:	d1e0      	bne.n	800f5ce <__ieee754_pow+0x2e>
 800f60c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f610:	18db      	adds	r3, r3, r3
 800f612:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800f616:	4152      	adcs	r2, r2
 800f618:	429d      	cmp	r5, r3
 800f61a:	e7d4      	b.n	800f5c6 <__ieee754_pow+0x26>
 800f61c:	2d00      	cmp	r5, #0
 800f61e:	46c3      	mov	fp, r8
 800f620:	da3a      	bge.n	800f698 <__ieee754_pow+0xf8>
 800f622:	4a83      	ldr	r2, [pc, #524]	@ (800f830 <__ieee754_pow+0x290>)
 800f624:	4592      	cmp	sl, r2
 800f626:	d84d      	bhi.n	800f6c4 <__ieee754_pow+0x124>
 800f628:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800f62c:	4592      	cmp	sl, r2
 800f62e:	f240 84c7 	bls.w	800ffc0 <__ieee754_pow+0xa20>
 800f632:	ea4f 522a 	mov.w	r2, sl, asr #20
 800f636:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800f63a:	2a14      	cmp	r2, #20
 800f63c:	dd0f      	ble.n	800f65e <__ieee754_pow+0xbe>
 800f63e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800f642:	fa21 f402 	lsr.w	r4, r1, r2
 800f646:	fa04 f202 	lsl.w	r2, r4, r2
 800f64a:	428a      	cmp	r2, r1
 800f64c:	f040 84b8 	bne.w	800ffc0 <__ieee754_pow+0xa20>
 800f650:	f004 0401 	and.w	r4, r4, #1
 800f654:	f1c4 0402 	rsb	r4, r4, #2
 800f658:	2900      	cmp	r1, #0
 800f65a:	d158      	bne.n	800f70e <__ieee754_pow+0x16e>
 800f65c:	e00e      	b.n	800f67c <__ieee754_pow+0xdc>
 800f65e:	2900      	cmp	r1, #0
 800f660:	d154      	bne.n	800f70c <__ieee754_pow+0x16c>
 800f662:	f1c2 0214 	rsb	r2, r2, #20
 800f666:	fa4a f402 	asr.w	r4, sl, r2
 800f66a:	fa04 f202 	lsl.w	r2, r4, r2
 800f66e:	4552      	cmp	r2, sl
 800f670:	f040 84a3 	bne.w	800ffba <__ieee754_pow+0xa1a>
 800f674:	f004 0401 	and.w	r4, r4, #1
 800f678:	f1c4 0402 	rsb	r4, r4, #2
 800f67c:	4a6d      	ldr	r2, [pc, #436]	@ (800f834 <__ieee754_pow+0x294>)
 800f67e:	4592      	cmp	sl, r2
 800f680:	d12e      	bne.n	800f6e0 <__ieee754_pow+0x140>
 800f682:	f1b9 0f00 	cmp.w	r9, #0
 800f686:	f280 8494 	bge.w	800ffb2 <__ieee754_pow+0xa12>
 800f68a:	496a      	ldr	r1, [pc, #424]	@ (800f834 <__ieee754_pow+0x294>)
 800f68c:	4632      	mov	r2, r6
 800f68e:	463b      	mov	r3, r7
 800f690:	2000      	movs	r0, #0
 800f692:	f7f1 f8fb 	bl	800088c <__aeabi_ddiv>
 800f696:	e7a0      	b.n	800f5da <__ieee754_pow+0x3a>
 800f698:	2400      	movs	r4, #0
 800f69a:	bbc1      	cbnz	r1, 800f70e <__ieee754_pow+0x16e>
 800f69c:	4a63      	ldr	r2, [pc, #396]	@ (800f82c <__ieee754_pow+0x28c>)
 800f69e:	4592      	cmp	sl, r2
 800f6a0:	d1ec      	bne.n	800f67c <__ieee754_pow+0xdc>
 800f6a2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800f6a6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800f6aa:	431a      	orrs	r2, r3
 800f6ac:	f000 8479 	beq.w	800ffa2 <__ieee754_pow+0xa02>
 800f6b0:	4b61      	ldr	r3, [pc, #388]	@ (800f838 <__ieee754_pow+0x298>)
 800f6b2:	4598      	cmp	r8, r3
 800f6b4:	d908      	bls.n	800f6c8 <__ieee754_pow+0x128>
 800f6b6:	f1b9 0f00 	cmp.w	r9, #0
 800f6ba:	f2c0 8476 	blt.w	800ffaa <__ieee754_pow+0xa0a>
 800f6be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6c2:	e78a      	b.n	800f5da <__ieee754_pow+0x3a>
 800f6c4:	2402      	movs	r4, #2
 800f6c6:	e7e8      	b.n	800f69a <__ieee754_pow+0xfa>
 800f6c8:	f1b9 0f00 	cmp.w	r9, #0
 800f6cc:	f04f 0000 	mov.w	r0, #0
 800f6d0:	f04f 0100 	mov.w	r1, #0
 800f6d4:	da81      	bge.n	800f5da <__ieee754_pow+0x3a>
 800f6d6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f6da:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f6de:	e77c      	b.n	800f5da <__ieee754_pow+0x3a>
 800f6e0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800f6e4:	d106      	bne.n	800f6f4 <__ieee754_pow+0x154>
 800f6e6:	4632      	mov	r2, r6
 800f6e8:	463b      	mov	r3, r7
 800f6ea:	4630      	mov	r0, r6
 800f6ec:	4639      	mov	r1, r7
 800f6ee:	f7f0 ffa3 	bl	8000638 <__aeabi_dmul>
 800f6f2:	e772      	b.n	800f5da <__ieee754_pow+0x3a>
 800f6f4:	4a51      	ldr	r2, [pc, #324]	@ (800f83c <__ieee754_pow+0x29c>)
 800f6f6:	4591      	cmp	r9, r2
 800f6f8:	d109      	bne.n	800f70e <__ieee754_pow+0x16e>
 800f6fa:	2d00      	cmp	r5, #0
 800f6fc:	db07      	blt.n	800f70e <__ieee754_pow+0x16e>
 800f6fe:	ec47 6b10 	vmov	d0, r6, r7
 800f702:	b011      	add	sp, #68	@ 0x44
 800f704:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f708:	f7ff bca0 	b.w	800f04c <__ieee754_sqrt>
 800f70c:	2400      	movs	r4, #0
 800f70e:	ec47 6b10 	vmov	d0, r6, r7
 800f712:	9302      	str	r3, [sp, #8]
 800f714:	f000 fe84 	bl	8010420 <fabs>
 800f718:	9b02      	ldr	r3, [sp, #8]
 800f71a:	ec51 0b10 	vmov	r0, r1, d0
 800f71e:	bb53      	cbnz	r3, 800f776 <__ieee754_pow+0x1d6>
 800f720:	4b44      	ldr	r3, [pc, #272]	@ (800f834 <__ieee754_pow+0x294>)
 800f722:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800f726:	429a      	cmp	r2, r3
 800f728:	d002      	beq.n	800f730 <__ieee754_pow+0x190>
 800f72a:	f1b8 0f00 	cmp.w	r8, #0
 800f72e:	d122      	bne.n	800f776 <__ieee754_pow+0x1d6>
 800f730:	f1b9 0f00 	cmp.w	r9, #0
 800f734:	da05      	bge.n	800f742 <__ieee754_pow+0x1a2>
 800f736:	4602      	mov	r2, r0
 800f738:	460b      	mov	r3, r1
 800f73a:	2000      	movs	r0, #0
 800f73c:	493d      	ldr	r1, [pc, #244]	@ (800f834 <__ieee754_pow+0x294>)
 800f73e:	f7f1 f8a5 	bl	800088c <__aeabi_ddiv>
 800f742:	2d00      	cmp	r5, #0
 800f744:	f6bf af49 	bge.w	800f5da <__ieee754_pow+0x3a>
 800f748:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800f74c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800f750:	ea58 0804 	orrs.w	r8, r8, r4
 800f754:	d108      	bne.n	800f768 <__ieee754_pow+0x1c8>
 800f756:	4602      	mov	r2, r0
 800f758:	460b      	mov	r3, r1
 800f75a:	4610      	mov	r0, r2
 800f75c:	4619      	mov	r1, r3
 800f75e:	f7f0 fdb3 	bl	80002c8 <__aeabi_dsub>
 800f762:	4602      	mov	r2, r0
 800f764:	460b      	mov	r3, r1
 800f766:	e794      	b.n	800f692 <__ieee754_pow+0xf2>
 800f768:	2c01      	cmp	r4, #1
 800f76a:	f47f af36 	bne.w	800f5da <__ieee754_pow+0x3a>
 800f76e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f772:	4619      	mov	r1, r3
 800f774:	e731      	b.n	800f5da <__ieee754_pow+0x3a>
 800f776:	0feb      	lsrs	r3, r5, #31
 800f778:	3b01      	subs	r3, #1
 800f77a:	ea53 0204 	orrs.w	r2, r3, r4
 800f77e:	d102      	bne.n	800f786 <__ieee754_pow+0x1e6>
 800f780:	4632      	mov	r2, r6
 800f782:	463b      	mov	r3, r7
 800f784:	e7e9      	b.n	800f75a <__ieee754_pow+0x1ba>
 800f786:	3c01      	subs	r4, #1
 800f788:	431c      	orrs	r4, r3
 800f78a:	d016      	beq.n	800f7ba <__ieee754_pow+0x21a>
 800f78c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800f818 <__ieee754_pow+0x278>
 800f790:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800f794:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f798:	f240 8112 	bls.w	800f9c0 <__ieee754_pow+0x420>
 800f79c:	4b28      	ldr	r3, [pc, #160]	@ (800f840 <__ieee754_pow+0x2a0>)
 800f79e:	459a      	cmp	sl, r3
 800f7a0:	4b25      	ldr	r3, [pc, #148]	@ (800f838 <__ieee754_pow+0x298>)
 800f7a2:	d916      	bls.n	800f7d2 <__ieee754_pow+0x232>
 800f7a4:	4598      	cmp	r8, r3
 800f7a6:	d80b      	bhi.n	800f7c0 <__ieee754_pow+0x220>
 800f7a8:	f1b9 0f00 	cmp.w	r9, #0
 800f7ac:	da0b      	bge.n	800f7c6 <__ieee754_pow+0x226>
 800f7ae:	2000      	movs	r0, #0
 800f7b0:	b011      	add	sp, #68	@ 0x44
 800f7b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b6:	f001 ba43 	b.w	8010c40 <__math_oflow>
 800f7ba:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800f820 <__ieee754_pow+0x280>
 800f7be:	e7e7      	b.n	800f790 <__ieee754_pow+0x1f0>
 800f7c0:	f1b9 0f00 	cmp.w	r9, #0
 800f7c4:	dcf3      	bgt.n	800f7ae <__ieee754_pow+0x20e>
 800f7c6:	2000      	movs	r0, #0
 800f7c8:	b011      	add	sp, #68	@ 0x44
 800f7ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ce:	f001 ba2f 	b.w	8010c30 <__math_uflow>
 800f7d2:	4598      	cmp	r8, r3
 800f7d4:	d20c      	bcs.n	800f7f0 <__ieee754_pow+0x250>
 800f7d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	2300      	movs	r3, #0
 800f7de:	f7f1 f99d 	bl	8000b1c <__aeabi_dcmplt>
 800f7e2:	3800      	subs	r0, #0
 800f7e4:	bf18      	it	ne
 800f7e6:	2001      	movne	r0, #1
 800f7e8:	f1b9 0f00 	cmp.w	r9, #0
 800f7ec:	daec      	bge.n	800f7c8 <__ieee754_pow+0x228>
 800f7ee:	e7df      	b.n	800f7b0 <__ieee754_pow+0x210>
 800f7f0:	4b10      	ldr	r3, [pc, #64]	@ (800f834 <__ieee754_pow+0x294>)
 800f7f2:	4598      	cmp	r8, r3
 800f7f4:	f04f 0200 	mov.w	r2, #0
 800f7f8:	d924      	bls.n	800f844 <__ieee754_pow+0x2a4>
 800f7fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7fe:	2300      	movs	r3, #0
 800f800:	f7f1 f98c 	bl	8000b1c <__aeabi_dcmplt>
 800f804:	3800      	subs	r0, #0
 800f806:	bf18      	it	ne
 800f808:	2001      	movne	r0, #1
 800f80a:	f1b9 0f00 	cmp.w	r9, #0
 800f80e:	dccf      	bgt.n	800f7b0 <__ieee754_pow+0x210>
 800f810:	e7da      	b.n	800f7c8 <__ieee754_pow+0x228>
 800f812:	bf00      	nop
 800f814:	f3af 8000 	nop.w
 800f818:	00000000 	.word	0x00000000
 800f81c:	3ff00000 	.word	0x3ff00000
 800f820:	00000000 	.word	0x00000000
 800f824:	bff00000 	.word	0xbff00000
 800f828:	fff00000 	.word	0xfff00000
 800f82c:	7ff00000 	.word	0x7ff00000
 800f830:	433fffff 	.word	0x433fffff
 800f834:	3ff00000 	.word	0x3ff00000
 800f838:	3fefffff 	.word	0x3fefffff
 800f83c:	3fe00000 	.word	0x3fe00000
 800f840:	43f00000 	.word	0x43f00000
 800f844:	4b5a      	ldr	r3, [pc, #360]	@ (800f9b0 <__ieee754_pow+0x410>)
 800f846:	f7f0 fd3f 	bl	80002c8 <__aeabi_dsub>
 800f84a:	a351      	add	r3, pc, #324	@ (adr r3, 800f990 <__ieee754_pow+0x3f0>)
 800f84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f850:	4604      	mov	r4, r0
 800f852:	460d      	mov	r5, r1
 800f854:	f7f0 fef0 	bl	8000638 <__aeabi_dmul>
 800f858:	a34f      	add	r3, pc, #316	@ (adr r3, 800f998 <__ieee754_pow+0x3f8>)
 800f85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f85e:	4606      	mov	r6, r0
 800f860:	460f      	mov	r7, r1
 800f862:	4620      	mov	r0, r4
 800f864:	4629      	mov	r1, r5
 800f866:	f7f0 fee7 	bl	8000638 <__aeabi_dmul>
 800f86a:	4b52      	ldr	r3, [pc, #328]	@ (800f9b4 <__ieee754_pow+0x414>)
 800f86c:	4682      	mov	sl, r0
 800f86e:	468b      	mov	fp, r1
 800f870:	2200      	movs	r2, #0
 800f872:	4620      	mov	r0, r4
 800f874:	4629      	mov	r1, r5
 800f876:	f7f0 fedf 	bl	8000638 <__aeabi_dmul>
 800f87a:	4602      	mov	r2, r0
 800f87c:	460b      	mov	r3, r1
 800f87e:	a148      	add	r1, pc, #288	@ (adr r1, 800f9a0 <__ieee754_pow+0x400>)
 800f880:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f884:	f7f0 fd20 	bl	80002c8 <__aeabi_dsub>
 800f888:	4622      	mov	r2, r4
 800f88a:	462b      	mov	r3, r5
 800f88c:	f7f0 fed4 	bl	8000638 <__aeabi_dmul>
 800f890:	4602      	mov	r2, r0
 800f892:	460b      	mov	r3, r1
 800f894:	2000      	movs	r0, #0
 800f896:	4948      	ldr	r1, [pc, #288]	@ (800f9b8 <__ieee754_pow+0x418>)
 800f898:	f7f0 fd16 	bl	80002c8 <__aeabi_dsub>
 800f89c:	4622      	mov	r2, r4
 800f89e:	4680      	mov	r8, r0
 800f8a0:	4689      	mov	r9, r1
 800f8a2:	462b      	mov	r3, r5
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	4629      	mov	r1, r5
 800f8a8:	f7f0 fec6 	bl	8000638 <__aeabi_dmul>
 800f8ac:	4602      	mov	r2, r0
 800f8ae:	460b      	mov	r3, r1
 800f8b0:	4640      	mov	r0, r8
 800f8b2:	4649      	mov	r1, r9
 800f8b4:	f7f0 fec0 	bl	8000638 <__aeabi_dmul>
 800f8b8:	a33b      	add	r3, pc, #236	@ (adr r3, 800f9a8 <__ieee754_pow+0x408>)
 800f8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8be:	f7f0 febb 	bl	8000638 <__aeabi_dmul>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	460b      	mov	r3, r1
 800f8c6:	4650      	mov	r0, sl
 800f8c8:	4659      	mov	r1, fp
 800f8ca:	f7f0 fcfd 	bl	80002c8 <__aeabi_dsub>
 800f8ce:	4602      	mov	r2, r0
 800f8d0:	460b      	mov	r3, r1
 800f8d2:	4680      	mov	r8, r0
 800f8d4:	4689      	mov	r9, r1
 800f8d6:	4630      	mov	r0, r6
 800f8d8:	4639      	mov	r1, r7
 800f8da:	f7f0 fcf7 	bl	80002cc <__adddf3>
 800f8de:	2400      	movs	r4, #0
 800f8e0:	4632      	mov	r2, r6
 800f8e2:	463b      	mov	r3, r7
 800f8e4:	4620      	mov	r0, r4
 800f8e6:	460d      	mov	r5, r1
 800f8e8:	f7f0 fcee 	bl	80002c8 <__aeabi_dsub>
 800f8ec:	4602      	mov	r2, r0
 800f8ee:	460b      	mov	r3, r1
 800f8f0:	4640      	mov	r0, r8
 800f8f2:	4649      	mov	r1, r9
 800f8f4:	f7f0 fce8 	bl	80002c8 <__aeabi_dsub>
 800f8f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f900:	2300      	movs	r3, #0
 800f902:	9304      	str	r3, [sp, #16]
 800f904:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f908:	4606      	mov	r6, r0
 800f90a:	460f      	mov	r7, r1
 800f90c:	4652      	mov	r2, sl
 800f90e:	465b      	mov	r3, fp
 800f910:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f914:	f7f0 fcd8 	bl	80002c8 <__aeabi_dsub>
 800f918:	4622      	mov	r2, r4
 800f91a:	462b      	mov	r3, r5
 800f91c:	f7f0 fe8c 	bl	8000638 <__aeabi_dmul>
 800f920:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f924:	4680      	mov	r8, r0
 800f926:	4689      	mov	r9, r1
 800f928:	4630      	mov	r0, r6
 800f92a:	4639      	mov	r1, r7
 800f92c:	f7f0 fe84 	bl	8000638 <__aeabi_dmul>
 800f930:	4602      	mov	r2, r0
 800f932:	460b      	mov	r3, r1
 800f934:	4640      	mov	r0, r8
 800f936:	4649      	mov	r1, r9
 800f938:	f7f0 fcc8 	bl	80002cc <__adddf3>
 800f93c:	4652      	mov	r2, sl
 800f93e:	465b      	mov	r3, fp
 800f940:	4606      	mov	r6, r0
 800f942:	460f      	mov	r7, r1
 800f944:	4620      	mov	r0, r4
 800f946:	4629      	mov	r1, r5
 800f948:	f7f0 fe76 	bl	8000638 <__aeabi_dmul>
 800f94c:	460b      	mov	r3, r1
 800f94e:	4602      	mov	r2, r0
 800f950:	4680      	mov	r8, r0
 800f952:	4689      	mov	r9, r1
 800f954:	4630      	mov	r0, r6
 800f956:	4639      	mov	r1, r7
 800f958:	f7f0 fcb8 	bl	80002cc <__adddf3>
 800f95c:	4b17      	ldr	r3, [pc, #92]	@ (800f9bc <__ieee754_pow+0x41c>)
 800f95e:	4299      	cmp	r1, r3
 800f960:	4604      	mov	r4, r0
 800f962:	460d      	mov	r5, r1
 800f964:	468a      	mov	sl, r1
 800f966:	468b      	mov	fp, r1
 800f968:	f340 82ef 	ble.w	800ff4a <__ieee754_pow+0x9aa>
 800f96c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800f970:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800f974:	4303      	orrs	r3, r0
 800f976:	f000 81e8 	beq.w	800fd4a <__ieee754_pow+0x7aa>
 800f97a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f97e:	2200      	movs	r2, #0
 800f980:	2300      	movs	r3, #0
 800f982:	f7f1 f8cb 	bl	8000b1c <__aeabi_dcmplt>
 800f986:	3800      	subs	r0, #0
 800f988:	bf18      	it	ne
 800f98a:	2001      	movne	r0, #1
 800f98c:	e710      	b.n	800f7b0 <__ieee754_pow+0x210>
 800f98e:	bf00      	nop
 800f990:	60000000 	.word	0x60000000
 800f994:	3ff71547 	.word	0x3ff71547
 800f998:	f85ddf44 	.word	0xf85ddf44
 800f99c:	3e54ae0b 	.word	0x3e54ae0b
 800f9a0:	55555555 	.word	0x55555555
 800f9a4:	3fd55555 	.word	0x3fd55555
 800f9a8:	652b82fe 	.word	0x652b82fe
 800f9ac:	3ff71547 	.word	0x3ff71547
 800f9b0:	3ff00000 	.word	0x3ff00000
 800f9b4:	3fd00000 	.word	0x3fd00000
 800f9b8:	3fe00000 	.word	0x3fe00000
 800f9bc:	408fffff 	.word	0x408fffff
 800f9c0:	4bd5      	ldr	r3, [pc, #852]	@ (800fd18 <__ieee754_pow+0x778>)
 800f9c2:	402b      	ands	r3, r5
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	b92b      	cbnz	r3, 800f9d4 <__ieee754_pow+0x434>
 800f9c8:	4bd4      	ldr	r3, [pc, #848]	@ (800fd1c <__ieee754_pow+0x77c>)
 800f9ca:	f7f0 fe35 	bl	8000638 <__aeabi_dmul>
 800f9ce:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800f9d2:	468b      	mov	fp, r1
 800f9d4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800f9d8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f9dc:	4413      	add	r3, r2
 800f9de:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9e0:	4bcf      	ldr	r3, [pc, #828]	@ (800fd20 <__ieee754_pow+0x780>)
 800f9e2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800f9e6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800f9ea:	459b      	cmp	fp, r3
 800f9ec:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f9f0:	dd08      	ble.n	800fa04 <__ieee754_pow+0x464>
 800f9f2:	4bcc      	ldr	r3, [pc, #816]	@ (800fd24 <__ieee754_pow+0x784>)
 800f9f4:	459b      	cmp	fp, r3
 800f9f6:	f340 81a5 	ble.w	800fd44 <__ieee754_pow+0x7a4>
 800f9fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9fc:	3301      	adds	r3, #1
 800f9fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa00:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800fa04:	f04f 0a00 	mov.w	sl, #0
 800fa08:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800fa0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa0e:	4bc6      	ldr	r3, [pc, #792]	@ (800fd28 <__ieee754_pow+0x788>)
 800fa10:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fa14:	ed93 7b00 	vldr	d7, [r3]
 800fa18:	4629      	mov	r1, r5
 800fa1a:	ec53 2b17 	vmov	r2, r3, d7
 800fa1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fa22:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fa26:	f7f0 fc4f 	bl	80002c8 <__aeabi_dsub>
 800fa2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fa2e:	4606      	mov	r6, r0
 800fa30:	460f      	mov	r7, r1
 800fa32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fa36:	f7f0 fc49 	bl	80002cc <__adddf3>
 800fa3a:	4602      	mov	r2, r0
 800fa3c:	460b      	mov	r3, r1
 800fa3e:	2000      	movs	r0, #0
 800fa40:	49ba      	ldr	r1, [pc, #744]	@ (800fd2c <__ieee754_pow+0x78c>)
 800fa42:	f7f0 ff23 	bl	800088c <__aeabi_ddiv>
 800fa46:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800fa4a:	4602      	mov	r2, r0
 800fa4c:	460b      	mov	r3, r1
 800fa4e:	4630      	mov	r0, r6
 800fa50:	4639      	mov	r1, r7
 800fa52:	f7f0 fdf1 	bl	8000638 <__aeabi_dmul>
 800fa56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fa5a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800fa5e:	106d      	asrs	r5, r5, #1
 800fa60:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800fa64:	f04f 0b00 	mov.w	fp, #0
 800fa68:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800fa6c:	4661      	mov	r1, ip
 800fa6e:	2200      	movs	r2, #0
 800fa70:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800fa74:	4658      	mov	r0, fp
 800fa76:	46e1      	mov	r9, ip
 800fa78:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800fa7c:	4614      	mov	r4, r2
 800fa7e:	461d      	mov	r5, r3
 800fa80:	f7f0 fdda 	bl	8000638 <__aeabi_dmul>
 800fa84:	4602      	mov	r2, r0
 800fa86:	460b      	mov	r3, r1
 800fa88:	4630      	mov	r0, r6
 800fa8a:	4639      	mov	r1, r7
 800fa8c:	f7f0 fc1c 	bl	80002c8 <__aeabi_dsub>
 800fa90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fa94:	4606      	mov	r6, r0
 800fa96:	460f      	mov	r7, r1
 800fa98:	4620      	mov	r0, r4
 800fa9a:	4629      	mov	r1, r5
 800fa9c:	f7f0 fc14 	bl	80002c8 <__aeabi_dsub>
 800faa0:	4602      	mov	r2, r0
 800faa2:	460b      	mov	r3, r1
 800faa4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800faa8:	f7f0 fc0e 	bl	80002c8 <__aeabi_dsub>
 800faac:	465a      	mov	r2, fp
 800faae:	464b      	mov	r3, r9
 800fab0:	f7f0 fdc2 	bl	8000638 <__aeabi_dmul>
 800fab4:	4602      	mov	r2, r0
 800fab6:	460b      	mov	r3, r1
 800fab8:	4630      	mov	r0, r6
 800faba:	4639      	mov	r1, r7
 800fabc:	f7f0 fc04 	bl	80002c8 <__aeabi_dsub>
 800fac0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fac4:	f7f0 fdb8 	bl	8000638 <__aeabi_dmul>
 800fac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800facc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fad0:	4610      	mov	r0, r2
 800fad2:	4619      	mov	r1, r3
 800fad4:	f7f0 fdb0 	bl	8000638 <__aeabi_dmul>
 800fad8:	a37d      	add	r3, pc, #500	@ (adr r3, 800fcd0 <__ieee754_pow+0x730>)
 800fada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fade:	4604      	mov	r4, r0
 800fae0:	460d      	mov	r5, r1
 800fae2:	f7f0 fda9 	bl	8000638 <__aeabi_dmul>
 800fae6:	a37c      	add	r3, pc, #496	@ (adr r3, 800fcd8 <__ieee754_pow+0x738>)
 800fae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faec:	f7f0 fbee 	bl	80002cc <__adddf3>
 800faf0:	4622      	mov	r2, r4
 800faf2:	462b      	mov	r3, r5
 800faf4:	f7f0 fda0 	bl	8000638 <__aeabi_dmul>
 800faf8:	a379      	add	r3, pc, #484	@ (adr r3, 800fce0 <__ieee754_pow+0x740>)
 800fafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafe:	f7f0 fbe5 	bl	80002cc <__adddf3>
 800fb02:	4622      	mov	r2, r4
 800fb04:	462b      	mov	r3, r5
 800fb06:	f7f0 fd97 	bl	8000638 <__aeabi_dmul>
 800fb0a:	a377      	add	r3, pc, #476	@ (adr r3, 800fce8 <__ieee754_pow+0x748>)
 800fb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb10:	f7f0 fbdc 	bl	80002cc <__adddf3>
 800fb14:	4622      	mov	r2, r4
 800fb16:	462b      	mov	r3, r5
 800fb18:	f7f0 fd8e 	bl	8000638 <__aeabi_dmul>
 800fb1c:	a374      	add	r3, pc, #464	@ (adr r3, 800fcf0 <__ieee754_pow+0x750>)
 800fb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb22:	f7f0 fbd3 	bl	80002cc <__adddf3>
 800fb26:	4622      	mov	r2, r4
 800fb28:	462b      	mov	r3, r5
 800fb2a:	f7f0 fd85 	bl	8000638 <__aeabi_dmul>
 800fb2e:	a372      	add	r3, pc, #456	@ (adr r3, 800fcf8 <__ieee754_pow+0x758>)
 800fb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb34:	f7f0 fbca 	bl	80002cc <__adddf3>
 800fb38:	4622      	mov	r2, r4
 800fb3a:	4606      	mov	r6, r0
 800fb3c:	460f      	mov	r7, r1
 800fb3e:	462b      	mov	r3, r5
 800fb40:	4620      	mov	r0, r4
 800fb42:	4629      	mov	r1, r5
 800fb44:	f7f0 fd78 	bl	8000638 <__aeabi_dmul>
 800fb48:	4602      	mov	r2, r0
 800fb4a:	460b      	mov	r3, r1
 800fb4c:	4630      	mov	r0, r6
 800fb4e:	4639      	mov	r1, r7
 800fb50:	f7f0 fd72 	bl	8000638 <__aeabi_dmul>
 800fb54:	465a      	mov	r2, fp
 800fb56:	4604      	mov	r4, r0
 800fb58:	460d      	mov	r5, r1
 800fb5a:	464b      	mov	r3, r9
 800fb5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb60:	f7f0 fbb4 	bl	80002cc <__adddf3>
 800fb64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fb68:	f7f0 fd66 	bl	8000638 <__aeabi_dmul>
 800fb6c:	4622      	mov	r2, r4
 800fb6e:	462b      	mov	r3, r5
 800fb70:	f7f0 fbac 	bl	80002cc <__adddf3>
 800fb74:	465a      	mov	r2, fp
 800fb76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fb7a:	464b      	mov	r3, r9
 800fb7c:	4658      	mov	r0, fp
 800fb7e:	4649      	mov	r1, r9
 800fb80:	f7f0 fd5a 	bl	8000638 <__aeabi_dmul>
 800fb84:	4b6a      	ldr	r3, [pc, #424]	@ (800fd30 <__ieee754_pow+0x790>)
 800fb86:	2200      	movs	r2, #0
 800fb88:	4606      	mov	r6, r0
 800fb8a:	460f      	mov	r7, r1
 800fb8c:	f7f0 fb9e 	bl	80002cc <__adddf3>
 800fb90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fb94:	f7f0 fb9a 	bl	80002cc <__adddf3>
 800fb98:	46d8      	mov	r8, fp
 800fb9a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800fb9e:	460d      	mov	r5, r1
 800fba0:	465a      	mov	r2, fp
 800fba2:	460b      	mov	r3, r1
 800fba4:	4640      	mov	r0, r8
 800fba6:	4649      	mov	r1, r9
 800fba8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800fbac:	f7f0 fd44 	bl	8000638 <__aeabi_dmul>
 800fbb0:	465c      	mov	r4, fp
 800fbb2:	4680      	mov	r8, r0
 800fbb4:	4689      	mov	r9, r1
 800fbb6:	4b5e      	ldr	r3, [pc, #376]	@ (800fd30 <__ieee754_pow+0x790>)
 800fbb8:	2200      	movs	r2, #0
 800fbba:	4620      	mov	r0, r4
 800fbbc:	4629      	mov	r1, r5
 800fbbe:	f7f0 fb83 	bl	80002c8 <__aeabi_dsub>
 800fbc2:	4632      	mov	r2, r6
 800fbc4:	463b      	mov	r3, r7
 800fbc6:	f7f0 fb7f 	bl	80002c8 <__aeabi_dsub>
 800fbca:	4602      	mov	r2, r0
 800fbcc:	460b      	mov	r3, r1
 800fbce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fbd2:	f7f0 fb79 	bl	80002c8 <__aeabi_dsub>
 800fbd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fbda:	f7f0 fd2d 	bl	8000638 <__aeabi_dmul>
 800fbde:	4622      	mov	r2, r4
 800fbe0:	4606      	mov	r6, r0
 800fbe2:	460f      	mov	r7, r1
 800fbe4:	462b      	mov	r3, r5
 800fbe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fbea:	f7f0 fd25 	bl	8000638 <__aeabi_dmul>
 800fbee:	4602      	mov	r2, r0
 800fbf0:	460b      	mov	r3, r1
 800fbf2:	4630      	mov	r0, r6
 800fbf4:	4639      	mov	r1, r7
 800fbf6:	f7f0 fb69 	bl	80002cc <__adddf3>
 800fbfa:	4606      	mov	r6, r0
 800fbfc:	460f      	mov	r7, r1
 800fbfe:	4602      	mov	r2, r0
 800fc00:	460b      	mov	r3, r1
 800fc02:	4640      	mov	r0, r8
 800fc04:	4649      	mov	r1, r9
 800fc06:	f7f0 fb61 	bl	80002cc <__adddf3>
 800fc0a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800fc0e:	a33c      	add	r3, pc, #240	@ (adr r3, 800fd00 <__ieee754_pow+0x760>)
 800fc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc14:	4658      	mov	r0, fp
 800fc16:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800fc1a:	460d      	mov	r5, r1
 800fc1c:	f7f0 fd0c 	bl	8000638 <__aeabi_dmul>
 800fc20:	465c      	mov	r4, fp
 800fc22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fc26:	4642      	mov	r2, r8
 800fc28:	464b      	mov	r3, r9
 800fc2a:	4620      	mov	r0, r4
 800fc2c:	4629      	mov	r1, r5
 800fc2e:	f7f0 fb4b 	bl	80002c8 <__aeabi_dsub>
 800fc32:	4602      	mov	r2, r0
 800fc34:	460b      	mov	r3, r1
 800fc36:	4630      	mov	r0, r6
 800fc38:	4639      	mov	r1, r7
 800fc3a:	f7f0 fb45 	bl	80002c8 <__aeabi_dsub>
 800fc3e:	a332      	add	r3, pc, #200	@ (adr r3, 800fd08 <__ieee754_pow+0x768>)
 800fc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc44:	f7f0 fcf8 	bl	8000638 <__aeabi_dmul>
 800fc48:	a331      	add	r3, pc, #196	@ (adr r3, 800fd10 <__ieee754_pow+0x770>)
 800fc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4e:	4606      	mov	r6, r0
 800fc50:	460f      	mov	r7, r1
 800fc52:	4620      	mov	r0, r4
 800fc54:	4629      	mov	r1, r5
 800fc56:	f7f0 fcef 	bl	8000638 <__aeabi_dmul>
 800fc5a:	4602      	mov	r2, r0
 800fc5c:	460b      	mov	r3, r1
 800fc5e:	4630      	mov	r0, r6
 800fc60:	4639      	mov	r1, r7
 800fc62:	f7f0 fb33 	bl	80002cc <__adddf3>
 800fc66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fc68:	4b32      	ldr	r3, [pc, #200]	@ (800fd34 <__ieee754_pow+0x794>)
 800fc6a:	4413      	add	r3, r2
 800fc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc70:	f7f0 fb2c 	bl	80002cc <__adddf3>
 800fc74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fc78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fc7a:	f7f0 fc73 	bl	8000564 <__aeabi_i2d>
 800fc7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fc80:	4b2d      	ldr	r3, [pc, #180]	@ (800fd38 <__ieee754_pow+0x798>)
 800fc82:	4413      	add	r3, r2
 800fc84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fc88:	4606      	mov	r6, r0
 800fc8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fc8e:	460f      	mov	r7, r1
 800fc90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fc94:	f7f0 fb1a 	bl	80002cc <__adddf3>
 800fc98:	4642      	mov	r2, r8
 800fc9a:	464b      	mov	r3, r9
 800fc9c:	f7f0 fb16 	bl	80002cc <__adddf3>
 800fca0:	4632      	mov	r2, r6
 800fca2:	463b      	mov	r3, r7
 800fca4:	f7f0 fb12 	bl	80002cc <__adddf3>
 800fca8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800fcac:	4632      	mov	r2, r6
 800fcae:	463b      	mov	r3, r7
 800fcb0:	4658      	mov	r0, fp
 800fcb2:	460d      	mov	r5, r1
 800fcb4:	f7f0 fb08 	bl	80002c8 <__aeabi_dsub>
 800fcb8:	4642      	mov	r2, r8
 800fcba:	464b      	mov	r3, r9
 800fcbc:	f7f0 fb04 	bl	80002c8 <__aeabi_dsub>
 800fcc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fcc4:	f7f0 fb00 	bl	80002c8 <__aeabi_dsub>
 800fcc8:	465c      	mov	r4, fp
 800fcca:	4602      	mov	r2, r0
 800fccc:	e036      	b.n	800fd3c <__ieee754_pow+0x79c>
 800fcce:	bf00      	nop
 800fcd0:	4a454eef 	.word	0x4a454eef
 800fcd4:	3fca7e28 	.word	0x3fca7e28
 800fcd8:	93c9db65 	.word	0x93c9db65
 800fcdc:	3fcd864a 	.word	0x3fcd864a
 800fce0:	a91d4101 	.word	0xa91d4101
 800fce4:	3fd17460 	.word	0x3fd17460
 800fce8:	518f264d 	.word	0x518f264d
 800fcec:	3fd55555 	.word	0x3fd55555
 800fcf0:	db6fabff 	.word	0xdb6fabff
 800fcf4:	3fdb6db6 	.word	0x3fdb6db6
 800fcf8:	33333303 	.word	0x33333303
 800fcfc:	3fe33333 	.word	0x3fe33333
 800fd00:	e0000000 	.word	0xe0000000
 800fd04:	3feec709 	.word	0x3feec709
 800fd08:	dc3a03fd 	.word	0xdc3a03fd
 800fd0c:	3feec709 	.word	0x3feec709
 800fd10:	145b01f5 	.word	0x145b01f5
 800fd14:	be3e2fe0 	.word	0xbe3e2fe0
 800fd18:	7ff00000 	.word	0x7ff00000
 800fd1c:	43400000 	.word	0x43400000
 800fd20:	0003988e 	.word	0x0003988e
 800fd24:	000bb679 	.word	0x000bb679
 800fd28:	080117d8 	.word	0x080117d8
 800fd2c:	3ff00000 	.word	0x3ff00000
 800fd30:	40080000 	.word	0x40080000
 800fd34:	080117b8 	.word	0x080117b8
 800fd38:	080117c8 	.word	0x080117c8
 800fd3c:	460b      	mov	r3, r1
 800fd3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fd42:	e5d7      	b.n	800f8f4 <__ieee754_pow+0x354>
 800fd44:	f04f 0a01 	mov.w	sl, #1
 800fd48:	e65e      	b.n	800fa08 <__ieee754_pow+0x468>
 800fd4a:	a3b4      	add	r3, pc, #720	@ (adr r3, 801001c <__ieee754_pow+0xa7c>)
 800fd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd50:	4630      	mov	r0, r6
 800fd52:	4639      	mov	r1, r7
 800fd54:	f7f0 faba 	bl	80002cc <__adddf3>
 800fd58:	4642      	mov	r2, r8
 800fd5a:	e9cd 0100 	strd	r0, r1, [sp]
 800fd5e:	464b      	mov	r3, r9
 800fd60:	4620      	mov	r0, r4
 800fd62:	4629      	mov	r1, r5
 800fd64:	f7f0 fab0 	bl	80002c8 <__aeabi_dsub>
 800fd68:	4602      	mov	r2, r0
 800fd6a:	460b      	mov	r3, r1
 800fd6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd70:	f7f0 fef2 	bl	8000b58 <__aeabi_dcmpgt>
 800fd74:	2800      	cmp	r0, #0
 800fd76:	f47f ae00 	bne.w	800f97a <__ieee754_pow+0x3da>
 800fd7a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800fd7e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fd82:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800fd86:	fa43 fa0a 	asr.w	sl, r3, sl
 800fd8a:	44da      	add	sl, fp
 800fd8c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800fd90:	489d      	ldr	r0, [pc, #628]	@ (8010008 <__ieee754_pow+0xa68>)
 800fd92:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800fd96:	4108      	asrs	r0, r1
 800fd98:	ea00 030a 	and.w	r3, r0, sl
 800fd9c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800fda0:	f1c1 0114 	rsb	r1, r1, #20
 800fda4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800fda8:	fa4a fa01 	asr.w	sl, sl, r1
 800fdac:	f1bb 0f00 	cmp.w	fp, #0
 800fdb0:	4640      	mov	r0, r8
 800fdb2:	4649      	mov	r1, r9
 800fdb4:	f04f 0200 	mov.w	r2, #0
 800fdb8:	bfb8      	it	lt
 800fdba:	f1ca 0a00 	rsblt	sl, sl, #0
 800fdbe:	f7f0 fa83 	bl	80002c8 <__aeabi_dsub>
 800fdc2:	4680      	mov	r8, r0
 800fdc4:	4689      	mov	r9, r1
 800fdc6:	4632      	mov	r2, r6
 800fdc8:	463b      	mov	r3, r7
 800fdca:	4640      	mov	r0, r8
 800fdcc:	4649      	mov	r1, r9
 800fdce:	f7f0 fa7d 	bl	80002cc <__adddf3>
 800fdd2:	2400      	movs	r4, #0
 800fdd4:	a37c      	add	r3, pc, #496	@ (adr r3, 800ffc8 <__ieee754_pow+0xa28>)
 800fdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdda:	4620      	mov	r0, r4
 800fddc:	460d      	mov	r5, r1
 800fdde:	f7f0 fc2b 	bl	8000638 <__aeabi_dmul>
 800fde2:	4642      	mov	r2, r8
 800fde4:	e9cd 0100 	strd	r0, r1, [sp]
 800fde8:	464b      	mov	r3, r9
 800fdea:	4620      	mov	r0, r4
 800fdec:	4629      	mov	r1, r5
 800fdee:	f7f0 fa6b 	bl	80002c8 <__aeabi_dsub>
 800fdf2:	4602      	mov	r2, r0
 800fdf4:	460b      	mov	r3, r1
 800fdf6:	4630      	mov	r0, r6
 800fdf8:	4639      	mov	r1, r7
 800fdfa:	f7f0 fa65 	bl	80002c8 <__aeabi_dsub>
 800fdfe:	a374      	add	r3, pc, #464	@ (adr r3, 800ffd0 <__ieee754_pow+0xa30>)
 800fe00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe04:	f7f0 fc18 	bl	8000638 <__aeabi_dmul>
 800fe08:	a373      	add	r3, pc, #460	@ (adr r3, 800ffd8 <__ieee754_pow+0xa38>)
 800fe0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe0e:	4680      	mov	r8, r0
 800fe10:	4689      	mov	r9, r1
 800fe12:	4620      	mov	r0, r4
 800fe14:	4629      	mov	r1, r5
 800fe16:	f7f0 fc0f 	bl	8000638 <__aeabi_dmul>
 800fe1a:	4602      	mov	r2, r0
 800fe1c:	460b      	mov	r3, r1
 800fe1e:	4640      	mov	r0, r8
 800fe20:	4649      	mov	r1, r9
 800fe22:	f7f0 fa53 	bl	80002cc <__adddf3>
 800fe26:	4604      	mov	r4, r0
 800fe28:	460d      	mov	r5, r1
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	460b      	mov	r3, r1
 800fe2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe32:	f7f0 fa4b 	bl	80002cc <__adddf3>
 800fe36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe3a:	4680      	mov	r8, r0
 800fe3c:	4689      	mov	r9, r1
 800fe3e:	f7f0 fa43 	bl	80002c8 <__aeabi_dsub>
 800fe42:	4602      	mov	r2, r0
 800fe44:	460b      	mov	r3, r1
 800fe46:	4620      	mov	r0, r4
 800fe48:	4629      	mov	r1, r5
 800fe4a:	f7f0 fa3d 	bl	80002c8 <__aeabi_dsub>
 800fe4e:	4642      	mov	r2, r8
 800fe50:	4606      	mov	r6, r0
 800fe52:	460f      	mov	r7, r1
 800fe54:	464b      	mov	r3, r9
 800fe56:	4640      	mov	r0, r8
 800fe58:	4649      	mov	r1, r9
 800fe5a:	f7f0 fbed 	bl	8000638 <__aeabi_dmul>
 800fe5e:	a360      	add	r3, pc, #384	@ (adr r3, 800ffe0 <__ieee754_pow+0xa40>)
 800fe60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe64:	4604      	mov	r4, r0
 800fe66:	460d      	mov	r5, r1
 800fe68:	f7f0 fbe6 	bl	8000638 <__aeabi_dmul>
 800fe6c:	a35e      	add	r3, pc, #376	@ (adr r3, 800ffe8 <__ieee754_pow+0xa48>)
 800fe6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe72:	f7f0 fa29 	bl	80002c8 <__aeabi_dsub>
 800fe76:	4622      	mov	r2, r4
 800fe78:	462b      	mov	r3, r5
 800fe7a:	f7f0 fbdd 	bl	8000638 <__aeabi_dmul>
 800fe7e:	a35c      	add	r3, pc, #368	@ (adr r3, 800fff0 <__ieee754_pow+0xa50>)
 800fe80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe84:	f7f0 fa22 	bl	80002cc <__adddf3>
 800fe88:	4622      	mov	r2, r4
 800fe8a:	462b      	mov	r3, r5
 800fe8c:	f7f0 fbd4 	bl	8000638 <__aeabi_dmul>
 800fe90:	a359      	add	r3, pc, #356	@ (adr r3, 800fff8 <__ieee754_pow+0xa58>)
 800fe92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe96:	f7f0 fa17 	bl	80002c8 <__aeabi_dsub>
 800fe9a:	4622      	mov	r2, r4
 800fe9c:	462b      	mov	r3, r5
 800fe9e:	f7f0 fbcb 	bl	8000638 <__aeabi_dmul>
 800fea2:	a357      	add	r3, pc, #348	@ (adr r3, 8010000 <__ieee754_pow+0xa60>)
 800fea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fea8:	f7f0 fa10 	bl	80002cc <__adddf3>
 800feac:	4622      	mov	r2, r4
 800feae:	462b      	mov	r3, r5
 800feb0:	f7f0 fbc2 	bl	8000638 <__aeabi_dmul>
 800feb4:	4602      	mov	r2, r0
 800feb6:	460b      	mov	r3, r1
 800feb8:	4640      	mov	r0, r8
 800feba:	4649      	mov	r1, r9
 800febc:	f7f0 fa04 	bl	80002c8 <__aeabi_dsub>
 800fec0:	4604      	mov	r4, r0
 800fec2:	460d      	mov	r5, r1
 800fec4:	4602      	mov	r2, r0
 800fec6:	460b      	mov	r3, r1
 800fec8:	4640      	mov	r0, r8
 800feca:	4649      	mov	r1, r9
 800fecc:	f7f0 fbb4 	bl	8000638 <__aeabi_dmul>
 800fed0:	2200      	movs	r2, #0
 800fed2:	e9cd 0100 	strd	r0, r1, [sp]
 800fed6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800feda:	4620      	mov	r0, r4
 800fedc:	4629      	mov	r1, r5
 800fede:	f7f0 f9f3 	bl	80002c8 <__aeabi_dsub>
 800fee2:	4602      	mov	r2, r0
 800fee4:	460b      	mov	r3, r1
 800fee6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800feea:	f7f0 fccf 	bl	800088c <__aeabi_ddiv>
 800feee:	4632      	mov	r2, r6
 800fef0:	4604      	mov	r4, r0
 800fef2:	460d      	mov	r5, r1
 800fef4:	463b      	mov	r3, r7
 800fef6:	4640      	mov	r0, r8
 800fef8:	4649      	mov	r1, r9
 800fefa:	f7f0 fb9d 	bl	8000638 <__aeabi_dmul>
 800fefe:	4632      	mov	r2, r6
 800ff00:	463b      	mov	r3, r7
 800ff02:	f7f0 f9e3 	bl	80002cc <__adddf3>
 800ff06:	4602      	mov	r2, r0
 800ff08:	460b      	mov	r3, r1
 800ff0a:	4620      	mov	r0, r4
 800ff0c:	4629      	mov	r1, r5
 800ff0e:	f7f0 f9db 	bl	80002c8 <__aeabi_dsub>
 800ff12:	4642      	mov	r2, r8
 800ff14:	464b      	mov	r3, r9
 800ff16:	f7f0 f9d7 	bl	80002c8 <__aeabi_dsub>
 800ff1a:	460b      	mov	r3, r1
 800ff1c:	4602      	mov	r2, r0
 800ff1e:	493b      	ldr	r1, [pc, #236]	@ (801000c <__ieee754_pow+0xa6c>)
 800ff20:	2000      	movs	r0, #0
 800ff22:	f7f0 f9d1 	bl	80002c8 <__aeabi_dsub>
 800ff26:	ec41 0b10 	vmov	d0, r0, r1
 800ff2a:	ee10 3a90 	vmov	r3, s1
 800ff2e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ff32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ff36:	da30      	bge.n	800ff9a <__ieee754_pow+0x9fa>
 800ff38:	4650      	mov	r0, sl
 800ff3a:	f000 fdcd 	bl	8010ad8 <scalbn>
 800ff3e:	ec51 0b10 	vmov	r0, r1, d0
 800ff42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff46:	f7ff bbd2 	b.w	800f6ee <__ieee754_pow+0x14e>
 800ff4a:	4c31      	ldr	r4, [pc, #196]	@ (8010010 <__ieee754_pow+0xa70>)
 800ff4c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ff50:	42a3      	cmp	r3, r4
 800ff52:	d91a      	bls.n	800ff8a <__ieee754_pow+0x9ea>
 800ff54:	4b2f      	ldr	r3, [pc, #188]	@ (8010014 <__ieee754_pow+0xa74>)
 800ff56:	440b      	add	r3, r1
 800ff58:	4303      	orrs	r3, r0
 800ff5a:	d009      	beq.n	800ff70 <__ieee754_pow+0x9d0>
 800ff5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff60:	2200      	movs	r2, #0
 800ff62:	2300      	movs	r3, #0
 800ff64:	f7f0 fdda 	bl	8000b1c <__aeabi_dcmplt>
 800ff68:	3800      	subs	r0, #0
 800ff6a:	bf18      	it	ne
 800ff6c:	2001      	movne	r0, #1
 800ff6e:	e42b      	b.n	800f7c8 <__ieee754_pow+0x228>
 800ff70:	4642      	mov	r2, r8
 800ff72:	464b      	mov	r3, r9
 800ff74:	f7f0 f9a8 	bl	80002c8 <__aeabi_dsub>
 800ff78:	4632      	mov	r2, r6
 800ff7a:	463b      	mov	r3, r7
 800ff7c:	f7f0 fde2 	bl	8000b44 <__aeabi_dcmpge>
 800ff80:	2800      	cmp	r0, #0
 800ff82:	d1eb      	bne.n	800ff5c <__ieee754_pow+0x9bc>
 800ff84:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8010024 <__ieee754_pow+0xa84>
 800ff88:	e6f7      	b.n	800fd7a <__ieee754_pow+0x7da>
 800ff8a:	469a      	mov	sl, r3
 800ff8c:	4b22      	ldr	r3, [pc, #136]	@ (8010018 <__ieee754_pow+0xa78>)
 800ff8e:	459a      	cmp	sl, r3
 800ff90:	f63f aef3 	bhi.w	800fd7a <__ieee754_pow+0x7da>
 800ff94:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ff98:	e715      	b.n	800fdc6 <__ieee754_pow+0x826>
 800ff9a:	ec51 0b10 	vmov	r0, r1, d0
 800ff9e:	4619      	mov	r1, r3
 800ffa0:	e7cf      	b.n	800ff42 <__ieee754_pow+0x9a2>
 800ffa2:	491a      	ldr	r1, [pc, #104]	@ (801000c <__ieee754_pow+0xa6c>)
 800ffa4:	2000      	movs	r0, #0
 800ffa6:	f7ff bb18 	b.w	800f5da <__ieee754_pow+0x3a>
 800ffaa:	2000      	movs	r0, #0
 800ffac:	2100      	movs	r1, #0
 800ffae:	f7ff bb14 	b.w	800f5da <__ieee754_pow+0x3a>
 800ffb2:	4630      	mov	r0, r6
 800ffb4:	4639      	mov	r1, r7
 800ffb6:	f7ff bb10 	b.w	800f5da <__ieee754_pow+0x3a>
 800ffba:	460c      	mov	r4, r1
 800ffbc:	f7ff bb5e 	b.w	800f67c <__ieee754_pow+0xdc>
 800ffc0:	2400      	movs	r4, #0
 800ffc2:	f7ff bb49 	b.w	800f658 <__ieee754_pow+0xb8>
 800ffc6:	bf00      	nop
 800ffc8:	00000000 	.word	0x00000000
 800ffcc:	3fe62e43 	.word	0x3fe62e43
 800ffd0:	fefa39ef 	.word	0xfefa39ef
 800ffd4:	3fe62e42 	.word	0x3fe62e42
 800ffd8:	0ca86c39 	.word	0x0ca86c39
 800ffdc:	be205c61 	.word	0xbe205c61
 800ffe0:	72bea4d0 	.word	0x72bea4d0
 800ffe4:	3e663769 	.word	0x3e663769
 800ffe8:	c5d26bf1 	.word	0xc5d26bf1
 800ffec:	3ebbbd41 	.word	0x3ebbbd41
 800fff0:	af25de2c 	.word	0xaf25de2c
 800fff4:	3f11566a 	.word	0x3f11566a
 800fff8:	16bebd93 	.word	0x16bebd93
 800fffc:	3f66c16c 	.word	0x3f66c16c
 8010000:	5555553e 	.word	0x5555553e
 8010004:	3fc55555 	.word	0x3fc55555
 8010008:	fff00000 	.word	0xfff00000
 801000c:	3ff00000 	.word	0x3ff00000
 8010010:	4090cbff 	.word	0x4090cbff
 8010014:	3f6f3400 	.word	0x3f6f3400
 8010018:	3fe00000 	.word	0x3fe00000
 801001c:	652b82fe 	.word	0x652b82fe
 8010020:	3c971547 	.word	0x3c971547
 8010024:	4090cc00 	.word	0x4090cc00

08010028 <__ieee754_rem_pio2>:
 8010028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801002c:	ec57 6b10 	vmov	r6, r7, d0
 8010030:	4bc5      	ldr	r3, [pc, #788]	@ (8010348 <__ieee754_rem_pio2+0x320>)
 8010032:	b08d      	sub	sp, #52	@ 0x34
 8010034:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010038:	4598      	cmp	r8, r3
 801003a:	4604      	mov	r4, r0
 801003c:	9704      	str	r7, [sp, #16]
 801003e:	d807      	bhi.n	8010050 <__ieee754_rem_pio2+0x28>
 8010040:	2200      	movs	r2, #0
 8010042:	2300      	movs	r3, #0
 8010044:	ed80 0b00 	vstr	d0, [r0]
 8010048:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801004c:	2500      	movs	r5, #0
 801004e:	e028      	b.n	80100a2 <__ieee754_rem_pio2+0x7a>
 8010050:	4bbe      	ldr	r3, [pc, #760]	@ (801034c <__ieee754_rem_pio2+0x324>)
 8010052:	4598      	cmp	r8, r3
 8010054:	d878      	bhi.n	8010148 <__ieee754_rem_pio2+0x120>
 8010056:	9b04      	ldr	r3, [sp, #16]
 8010058:	4dbd      	ldr	r5, [pc, #756]	@ (8010350 <__ieee754_rem_pio2+0x328>)
 801005a:	2b00      	cmp	r3, #0
 801005c:	4630      	mov	r0, r6
 801005e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8010310 <__ieee754_rem_pio2+0x2e8>)
 8010060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010064:	4639      	mov	r1, r7
 8010066:	dd38      	ble.n	80100da <__ieee754_rem_pio2+0xb2>
 8010068:	f7f0 f92e 	bl	80002c8 <__aeabi_dsub>
 801006c:	45a8      	cmp	r8, r5
 801006e:	4606      	mov	r6, r0
 8010070:	460f      	mov	r7, r1
 8010072:	d01a      	beq.n	80100aa <__ieee754_rem_pio2+0x82>
 8010074:	a3a8      	add	r3, pc, #672	@ (adr r3, 8010318 <__ieee754_rem_pio2+0x2f0>)
 8010076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007a:	f7f0 f925 	bl	80002c8 <__aeabi_dsub>
 801007e:	4602      	mov	r2, r0
 8010080:	460b      	mov	r3, r1
 8010082:	4680      	mov	r8, r0
 8010084:	4689      	mov	r9, r1
 8010086:	4630      	mov	r0, r6
 8010088:	4639      	mov	r1, r7
 801008a:	f7f0 f91d 	bl	80002c8 <__aeabi_dsub>
 801008e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8010318 <__ieee754_rem_pio2+0x2f0>)
 8010090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010094:	f7f0 f918 	bl	80002c8 <__aeabi_dsub>
 8010098:	e9c4 8900 	strd	r8, r9, [r4]
 801009c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80100a0:	2501      	movs	r5, #1
 80100a2:	4628      	mov	r0, r5
 80100a4:	b00d      	add	sp, #52	@ 0x34
 80100a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100aa:	a39d      	add	r3, pc, #628	@ (adr r3, 8010320 <__ieee754_rem_pio2+0x2f8>)
 80100ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b0:	f7f0 f90a 	bl	80002c8 <__aeabi_dsub>
 80100b4:	a39c      	add	r3, pc, #624	@ (adr r3, 8010328 <__ieee754_rem_pio2+0x300>)
 80100b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ba:	4606      	mov	r6, r0
 80100bc:	460f      	mov	r7, r1
 80100be:	f7f0 f903 	bl	80002c8 <__aeabi_dsub>
 80100c2:	4602      	mov	r2, r0
 80100c4:	460b      	mov	r3, r1
 80100c6:	4680      	mov	r8, r0
 80100c8:	4689      	mov	r9, r1
 80100ca:	4630      	mov	r0, r6
 80100cc:	4639      	mov	r1, r7
 80100ce:	f7f0 f8fb 	bl	80002c8 <__aeabi_dsub>
 80100d2:	a395      	add	r3, pc, #596	@ (adr r3, 8010328 <__ieee754_rem_pio2+0x300>)
 80100d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d8:	e7dc      	b.n	8010094 <__ieee754_rem_pio2+0x6c>
 80100da:	f7f0 f8f7 	bl	80002cc <__adddf3>
 80100de:	45a8      	cmp	r8, r5
 80100e0:	4606      	mov	r6, r0
 80100e2:	460f      	mov	r7, r1
 80100e4:	d018      	beq.n	8010118 <__ieee754_rem_pio2+0xf0>
 80100e6:	a38c      	add	r3, pc, #560	@ (adr r3, 8010318 <__ieee754_rem_pio2+0x2f0>)
 80100e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ec:	f7f0 f8ee 	bl	80002cc <__adddf3>
 80100f0:	4602      	mov	r2, r0
 80100f2:	460b      	mov	r3, r1
 80100f4:	4680      	mov	r8, r0
 80100f6:	4689      	mov	r9, r1
 80100f8:	4630      	mov	r0, r6
 80100fa:	4639      	mov	r1, r7
 80100fc:	f7f0 f8e4 	bl	80002c8 <__aeabi_dsub>
 8010100:	a385      	add	r3, pc, #532	@ (adr r3, 8010318 <__ieee754_rem_pio2+0x2f0>)
 8010102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010106:	f7f0 f8e1 	bl	80002cc <__adddf3>
 801010a:	f04f 35ff 	mov.w	r5, #4294967295
 801010e:	e9c4 8900 	strd	r8, r9, [r4]
 8010112:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010116:	e7c4      	b.n	80100a2 <__ieee754_rem_pio2+0x7a>
 8010118:	a381      	add	r3, pc, #516	@ (adr r3, 8010320 <__ieee754_rem_pio2+0x2f8>)
 801011a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011e:	f7f0 f8d5 	bl	80002cc <__adddf3>
 8010122:	a381      	add	r3, pc, #516	@ (adr r3, 8010328 <__ieee754_rem_pio2+0x300>)
 8010124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010128:	4606      	mov	r6, r0
 801012a:	460f      	mov	r7, r1
 801012c:	f7f0 f8ce 	bl	80002cc <__adddf3>
 8010130:	4602      	mov	r2, r0
 8010132:	460b      	mov	r3, r1
 8010134:	4680      	mov	r8, r0
 8010136:	4689      	mov	r9, r1
 8010138:	4630      	mov	r0, r6
 801013a:	4639      	mov	r1, r7
 801013c:	f7f0 f8c4 	bl	80002c8 <__aeabi_dsub>
 8010140:	a379      	add	r3, pc, #484	@ (adr r3, 8010328 <__ieee754_rem_pio2+0x300>)
 8010142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010146:	e7de      	b.n	8010106 <__ieee754_rem_pio2+0xde>
 8010148:	4b82      	ldr	r3, [pc, #520]	@ (8010354 <__ieee754_rem_pio2+0x32c>)
 801014a:	4598      	cmp	r8, r3
 801014c:	f200 80d1 	bhi.w	80102f2 <__ieee754_rem_pio2+0x2ca>
 8010150:	f000 f966 	bl	8010420 <fabs>
 8010154:	ec57 6b10 	vmov	r6, r7, d0
 8010158:	a375      	add	r3, pc, #468	@ (adr r3, 8010330 <__ieee754_rem_pio2+0x308>)
 801015a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801015e:	4630      	mov	r0, r6
 8010160:	4639      	mov	r1, r7
 8010162:	f7f0 fa69 	bl	8000638 <__aeabi_dmul>
 8010166:	4b7c      	ldr	r3, [pc, #496]	@ (8010358 <__ieee754_rem_pio2+0x330>)
 8010168:	2200      	movs	r2, #0
 801016a:	f7f0 f8af 	bl	80002cc <__adddf3>
 801016e:	f7f0 fd13 	bl	8000b98 <__aeabi_d2iz>
 8010172:	4605      	mov	r5, r0
 8010174:	f7f0 f9f6 	bl	8000564 <__aeabi_i2d>
 8010178:	4602      	mov	r2, r0
 801017a:	460b      	mov	r3, r1
 801017c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010180:	a363      	add	r3, pc, #396	@ (adr r3, 8010310 <__ieee754_rem_pio2+0x2e8>)
 8010182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010186:	f7f0 fa57 	bl	8000638 <__aeabi_dmul>
 801018a:	4602      	mov	r2, r0
 801018c:	460b      	mov	r3, r1
 801018e:	4630      	mov	r0, r6
 8010190:	4639      	mov	r1, r7
 8010192:	f7f0 f899 	bl	80002c8 <__aeabi_dsub>
 8010196:	a360      	add	r3, pc, #384	@ (adr r3, 8010318 <__ieee754_rem_pio2+0x2f0>)
 8010198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801019c:	4682      	mov	sl, r0
 801019e:	468b      	mov	fp, r1
 80101a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101a4:	f7f0 fa48 	bl	8000638 <__aeabi_dmul>
 80101a8:	2d1f      	cmp	r5, #31
 80101aa:	4606      	mov	r6, r0
 80101ac:	460f      	mov	r7, r1
 80101ae:	dc0c      	bgt.n	80101ca <__ieee754_rem_pio2+0x1a2>
 80101b0:	4b6a      	ldr	r3, [pc, #424]	@ (801035c <__ieee754_rem_pio2+0x334>)
 80101b2:	1e6a      	subs	r2, r5, #1
 80101b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101b8:	4543      	cmp	r3, r8
 80101ba:	d006      	beq.n	80101ca <__ieee754_rem_pio2+0x1a2>
 80101bc:	4632      	mov	r2, r6
 80101be:	463b      	mov	r3, r7
 80101c0:	4650      	mov	r0, sl
 80101c2:	4659      	mov	r1, fp
 80101c4:	f7f0 f880 	bl	80002c8 <__aeabi_dsub>
 80101c8:	e00e      	b.n	80101e8 <__ieee754_rem_pio2+0x1c0>
 80101ca:	463b      	mov	r3, r7
 80101cc:	4632      	mov	r2, r6
 80101ce:	4650      	mov	r0, sl
 80101d0:	4659      	mov	r1, fp
 80101d2:	f7f0 f879 	bl	80002c8 <__aeabi_dsub>
 80101d6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80101da:	9305      	str	r3, [sp, #20]
 80101dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80101e0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80101e4:	2b10      	cmp	r3, #16
 80101e6:	dc02      	bgt.n	80101ee <__ieee754_rem_pio2+0x1c6>
 80101e8:	e9c4 0100 	strd	r0, r1, [r4]
 80101ec:	e039      	b.n	8010262 <__ieee754_rem_pio2+0x23a>
 80101ee:	a34c      	add	r3, pc, #304	@ (adr r3, 8010320 <__ieee754_rem_pio2+0x2f8>)
 80101f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101f8:	f7f0 fa1e 	bl	8000638 <__aeabi_dmul>
 80101fc:	4606      	mov	r6, r0
 80101fe:	460f      	mov	r7, r1
 8010200:	4602      	mov	r2, r0
 8010202:	460b      	mov	r3, r1
 8010204:	4650      	mov	r0, sl
 8010206:	4659      	mov	r1, fp
 8010208:	f7f0 f85e 	bl	80002c8 <__aeabi_dsub>
 801020c:	4602      	mov	r2, r0
 801020e:	460b      	mov	r3, r1
 8010210:	4680      	mov	r8, r0
 8010212:	4689      	mov	r9, r1
 8010214:	4650      	mov	r0, sl
 8010216:	4659      	mov	r1, fp
 8010218:	f7f0 f856 	bl	80002c8 <__aeabi_dsub>
 801021c:	4632      	mov	r2, r6
 801021e:	463b      	mov	r3, r7
 8010220:	f7f0 f852 	bl	80002c8 <__aeabi_dsub>
 8010224:	a340      	add	r3, pc, #256	@ (adr r3, 8010328 <__ieee754_rem_pio2+0x300>)
 8010226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801022a:	4606      	mov	r6, r0
 801022c:	460f      	mov	r7, r1
 801022e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010232:	f7f0 fa01 	bl	8000638 <__aeabi_dmul>
 8010236:	4632      	mov	r2, r6
 8010238:	463b      	mov	r3, r7
 801023a:	f7f0 f845 	bl	80002c8 <__aeabi_dsub>
 801023e:	4602      	mov	r2, r0
 8010240:	460b      	mov	r3, r1
 8010242:	4606      	mov	r6, r0
 8010244:	460f      	mov	r7, r1
 8010246:	4640      	mov	r0, r8
 8010248:	4649      	mov	r1, r9
 801024a:	f7f0 f83d 	bl	80002c8 <__aeabi_dsub>
 801024e:	9a05      	ldr	r2, [sp, #20]
 8010250:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010254:	1ad3      	subs	r3, r2, r3
 8010256:	2b31      	cmp	r3, #49	@ 0x31
 8010258:	dc20      	bgt.n	801029c <__ieee754_rem_pio2+0x274>
 801025a:	e9c4 0100 	strd	r0, r1, [r4]
 801025e:	46c2      	mov	sl, r8
 8010260:	46cb      	mov	fp, r9
 8010262:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010266:	4650      	mov	r0, sl
 8010268:	4642      	mov	r2, r8
 801026a:	464b      	mov	r3, r9
 801026c:	4659      	mov	r1, fp
 801026e:	f7f0 f82b 	bl	80002c8 <__aeabi_dsub>
 8010272:	463b      	mov	r3, r7
 8010274:	4632      	mov	r2, r6
 8010276:	f7f0 f827 	bl	80002c8 <__aeabi_dsub>
 801027a:	9b04      	ldr	r3, [sp, #16]
 801027c:	2b00      	cmp	r3, #0
 801027e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010282:	f6bf af0e 	bge.w	80100a2 <__ieee754_rem_pio2+0x7a>
 8010286:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801028a:	6063      	str	r3, [r4, #4]
 801028c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010290:	f8c4 8000 	str.w	r8, [r4]
 8010294:	60a0      	str	r0, [r4, #8]
 8010296:	60e3      	str	r3, [r4, #12]
 8010298:	426d      	negs	r5, r5
 801029a:	e702      	b.n	80100a2 <__ieee754_rem_pio2+0x7a>
 801029c:	a326      	add	r3, pc, #152	@ (adr r3, 8010338 <__ieee754_rem_pio2+0x310>)
 801029e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102a6:	f7f0 f9c7 	bl	8000638 <__aeabi_dmul>
 80102aa:	4606      	mov	r6, r0
 80102ac:	460f      	mov	r7, r1
 80102ae:	4602      	mov	r2, r0
 80102b0:	460b      	mov	r3, r1
 80102b2:	4640      	mov	r0, r8
 80102b4:	4649      	mov	r1, r9
 80102b6:	f7f0 f807 	bl	80002c8 <__aeabi_dsub>
 80102ba:	4602      	mov	r2, r0
 80102bc:	460b      	mov	r3, r1
 80102be:	4682      	mov	sl, r0
 80102c0:	468b      	mov	fp, r1
 80102c2:	4640      	mov	r0, r8
 80102c4:	4649      	mov	r1, r9
 80102c6:	f7ef ffff 	bl	80002c8 <__aeabi_dsub>
 80102ca:	4632      	mov	r2, r6
 80102cc:	463b      	mov	r3, r7
 80102ce:	f7ef fffb 	bl	80002c8 <__aeabi_dsub>
 80102d2:	a31b      	add	r3, pc, #108	@ (adr r3, 8010340 <__ieee754_rem_pio2+0x318>)
 80102d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d8:	4606      	mov	r6, r0
 80102da:	460f      	mov	r7, r1
 80102dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102e0:	f7f0 f9aa 	bl	8000638 <__aeabi_dmul>
 80102e4:	4632      	mov	r2, r6
 80102e6:	463b      	mov	r3, r7
 80102e8:	f7ef ffee 	bl	80002c8 <__aeabi_dsub>
 80102ec:	4606      	mov	r6, r0
 80102ee:	460f      	mov	r7, r1
 80102f0:	e764      	b.n	80101bc <__ieee754_rem_pio2+0x194>
 80102f2:	4b1b      	ldr	r3, [pc, #108]	@ (8010360 <__ieee754_rem_pio2+0x338>)
 80102f4:	4598      	cmp	r8, r3
 80102f6:	d935      	bls.n	8010364 <__ieee754_rem_pio2+0x33c>
 80102f8:	4632      	mov	r2, r6
 80102fa:	463b      	mov	r3, r7
 80102fc:	4630      	mov	r0, r6
 80102fe:	4639      	mov	r1, r7
 8010300:	f7ef ffe2 	bl	80002c8 <__aeabi_dsub>
 8010304:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010308:	e9c4 0100 	strd	r0, r1, [r4]
 801030c:	e69e      	b.n	801004c <__ieee754_rem_pio2+0x24>
 801030e:	bf00      	nop
 8010310:	54400000 	.word	0x54400000
 8010314:	3ff921fb 	.word	0x3ff921fb
 8010318:	1a626331 	.word	0x1a626331
 801031c:	3dd0b461 	.word	0x3dd0b461
 8010320:	1a600000 	.word	0x1a600000
 8010324:	3dd0b461 	.word	0x3dd0b461
 8010328:	2e037073 	.word	0x2e037073
 801032c:	3ba3198a 	.word	0x3ba3198a
 8010330:	6dc9c883 	.word	0x6dc9c883
 8010334:	3fe45f30 	.word	0x3fe45f30
 8010338:	2e000000 	.word	0x2e000000
 801033c:	3ba3198a 	.word	0x3ba3198a
 8010340:	252049c1 	.word	0x252049c1
 8010344:	397b839a 	.word	0x397b839a
 8010348:	3fe921fb 	.word	0x3fe921fb
 801034c:	4002d97b 	.word	0x4002d97b
 8010350:	3ff921fb 	.word	0x3ff921fb
 8010354:	413921fb 	.word	0x413921fb
 8010358:	3fe00000 	.word	0x3fe00000
 801035c:	080117e8 	.word	0x080117e8
 8010360:	7fefffff 	.word	0x7fefffff
 8010364:	ea4f 5528 	mov.w	r5, r8, asr #20
 8010368:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801036c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8010370:	4630      	mov	r0, r6
 8010372:	460f      	mov	r7, r1
 8010374:	f7f0 fc10 	bl	8000b98 <__aeabi_d2iz>
 8010378:	f7f0 f8f4 	bl	8000564 <__aeabi_i2d>
 801037c:	4602      	mov	r2, r0
 801037e:	460b      	mov	r3, r1
 8010380:	4630      	mov	r0, r6
 8010382:	4639      	mov	r1, r7
 8010384:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010388:	f7ef ff9e 	bl	80002c8 <__aeabi_dsub>
 801038c:	4b22      	ldr	r3, [pc, #136]	@ (8010418 <__ieee754_rem_pio2+0x3f0>)
 801038e:	2200      	movs	r2, #0
 8010390:	f7f0 f952 	bl	8000638 <__aeabi_dmul>
 8010394:	460f      	mov	r7, r1
 8010396:	4606      	mov	r6, r0
 8010398:	f7f0 fbfe 	bl	8000b98 <__aeabi_d2iz>
 801039c:	f7f0 f8e2 	bl	8000564 <__aeabi_i2d>
 80103a0:	4602      	mov	r2, r0
 80103a2:	460b      	mov	r3, r1
 80103a4:	4630      	mov	r0, r6
 80103a6:	4639      	mov	r1, r7
 80103a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80103ac:	f7ef ff8c 	bl	80002c8 <__aeabi_dsub>
 80103b0:	4b19      	ldr	r3, [pc, #100]	@ (8010418 <__ieee754_rem_pio2+0x3f0>)
 80103b2:	2200      	movs	r2, #0
 80103b4:	f7f0 f940 	bl	8000638 <__aeabi_dmul>
 80103b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80103bc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80103c0:	f04f 0803 	mov.w	r8, #3
 80103c4:	2600      	movs	r6, #0
 80103c6:	2700      	movs	r7, #0
 80103c8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80103cc:	4632      	mov	r2, r6
 80103ce:	463b      	mov	r3, r7
 80103d0:	46c2      	mov	sl, r8
 80103d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80103d6:	f7f0 fb97 	bl	8000b08 <__aeabi_dcmpeq>
 80103da:	2800      	cmp	r0, #0
 80103dc:	d1f4      	bne.n	80103c8 <__ieee754_rem_pio2+0x3a0>
 80103de:	4b0f      	ldr	r3, [pc, #60]	@ (801041c <__ieee754_rem_pio2+0x3f4>)
 80103e0:	9301      	str	r3, [sp, #4]
 80103e2:	2302      	movs	r3, #2
 80103e4:	9300      	str	r3, [sp, #0]
 80103e6:	462a      	mov	r2, r5
 80103e8:	4653      	mov	r3, sl
 80103ea:	4621      	mov	r1, r4
 80103ec:	a806      	add	r0, sp, #24
 80103ee:	f000 fc2f 	bl	8010c50 <__kernel_rem_pio2>
 80103f2:	9b04      	ldr	r3, [sp, #16]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	4605      	mov	r5, r0
 80103f8:	f6bf ae53 	bge.w	80100a2 <__ieee754_rem_pio2+0x7a>
 80103fc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010400:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010404:	e9c4 2300 	strd	r2, r3, [r4]
 8010408:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801040c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010410:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010414:	e740      	b.n	8010298 <__ieee754_rem_pio2+0x270>
 8010416:	bf00      	nop
 8010418:	41700000 	.word	0x41700000
 801041c:	08011868 	.word	0x08011868

08010420 <fabs>:
 8010420:	ec51 0b10 	vmov	r0, r1, d0
 8010424:	4602      	mov	r2, r0
 8010426:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801042a:	ec43 2b10 	vmov	d0, r2, r3
 801042e:	4770      	bx	lr

08010430 <__ieee754_acosf>:
 8010430:	b508      	push	{r3, lr}
 8010432:	ee10 3a10 	vmov	r3, s0
 8010436:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801043a:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801043e:	ed2d 8b0c 	vpush	{d8-d13}
 8010442:	d10a      	bne.n	801045a <__ieee754_acosf+0x2a>
 8010444:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 80105dc <__ieee754_acosf+0x1ac>
 8010448:	eddf 7a65 	vldr	s15, [pc, #404]	@ 80105e0 <__ieee754_acosf+0x1b0>
 801044c:	2b00      	cmp	r3, #0
 801044e:	bfc8      	it	gt
 8010450:	eeb0 0a67 	vmovgt.f32	s0, s15
 8010454:	ecbd 8b0c 	vpop	{d8-d13}
 8010458:	bd08      	pop	{r3, pc}
 801045a:	d904      	bls.n	8010466 <__ieee754_acosf+0x36>
 801045c:	ee30 8a40 	vsub.f32	s16, s0, s0
 8010460:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010464:	e7f6      	b.n	8010454 <__ieee754_acosf+0x24>
 8010466:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 801046a:	d23c      	bcs.n	80104e6 <__ieee754_acosf+0xb6>
 801046c:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8010470:	f240 80b1 	bls.w	80105d6 <__ieee754_acosf+0x1a6>
 8010474:	ee60 7a00 	vmul.f32	s15, s0, s0
 8010478:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 80105e4 <__ieee754_acosf+0x1b4>
 801047c:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80105e8 <__ieee754_acosf+0x1b8>
 8010480:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 80105ec <__ieee754_acosf+0x1bc>
 8010484:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010488:	eddf 6a59 	vldr	s13, [pc, #356]	@ 80105f0 <__ieee754_acosf+0x1c0>
 801048c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010490:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80105f4 <__ieee754_acosf+0x1c4>
 8010494:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010498:	eddf 6a57 	vldr	s13, [pc, #348]	@ 80105f8 <__ieee754_acosf+0x1c8>
 801049c:	eee7 6a27 	vfma.f32	s13, s14, s15
 80104a0:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 80105fc <__ieee754_acosf+0x1cc>
 80104a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80104a8:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8010600 <__ieee754_acosf+0x1d0>
 80104ac:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80104b0:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8010604 <__ieee754_acosf+0x1d4>
 80104b4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80104b8:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8010608 <__ieee754_acosf+0x1d8>
 80104bc:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80104c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80104c4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80104c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80104cc:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 801060c <__ieee754_acosf+0x1dc>
 80104d0:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80104d4:	eee0 7a46 	vfms.f32	s15, s0, s12
 80104d8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80104dc:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8010610 <__ieee754_acosf+0x1e0>
 80104e0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80104e4:	e7b6      	b.n	8010454 <__ieee754_acosf+0x24>
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	eddf da3e 	vldr	s27, [pc, #248]	@ 80105e4 <__ieee754_acosf+0x1b4>
 80104ec:	eddf ca3e 	vldr	s25, [pc, #248]	@ 80105e8 <__ieee754_acosf+0x1b8>
 80104f0:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 80105f0 <__ieee754_acosf+0x1c0>
 80104f4:	eddf ba3f 	vldr	s23, [pc, #252]	@ 80105f4 <__ieee754_acosf+0x1c4>
 80104f8:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 80105f8 <__ieee754_acosf+0x1c8>
 80104fc:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 80105fc <__ieee754_acosf+0x1cc>
 8010500:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8010600 <__ieee754_acosf+0x1d0>
 8010504:	eddf aa39 	vldr	s21, [pc, #228]	@ 80105ec <__ieee754_acosf+0x1bc>
 8010508:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 8010604 <__ieee754_acosf+0x1d4>
 801050c:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 8010608 <__ieee754_acosf+0x1d8>
 8010510:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8010514:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010518:	da28      	bge.n	801056c <__ieee754_acosf+0x13c>
 801051a:	ee30 8a09 	vadd.f32	s16, s0, s18
 801051e:	ee28 0a27 	vmul.f32	s0, s16, s15
 8010522:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8010526:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801052a:	eeac ca80 	vfma.f32	s24, s25, s0
 801052e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8010532:	eeec ba00 	vfma.f32	s23, s24, s0
 8010536:	eeea 9a00 	vfma.f32	s19, s20, s0
 801053a:	eeab ba80 	vfma.f32	s22, s23, s0
 801053e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8010542:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8010546:	ee68 8a80 	vmul.f32	s17, s17, s0
 801054a:	f7fe fe59 	bl	800f200 <__ieee754_sqrtf>
 801054e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8010552:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8010614 <__ieee754_acosf+0x1e4>
 8010556:	eee0 7a07 	vfma.f32	s15, s0, s14
 801055a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801055e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010562:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8010618 <__ieee754_acosf+0x1e8>
 8010566:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801056a:	e773      	b.n	8010454 <__ieee754_acosf+0x24>
 801056c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8010570:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010574:	eeb0 0a48 	vmov.f32	s0, s16
 8010578:	f7fe fe42 	bl	800f200 <__ieee754_sqrtf>
 801057c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8010580:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8010584:	eeac ca88 	vfma.f32	s24, s25, s16
 8010588:	eeaa aa88 	vfma.f32	s20, s21, s16
 801058c:	eeec ba08 	vfma.f32	s23, s24, s16
 8010590:	ee10 3a10 	vmov	r3, s0
 8010594:	eeab ba88 	vfma.f32	s22, s23, s16
 8010598:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801059c:	f023 030f 	bic.w	r3, r3, #15
 80105a0:	eeea 9a08 	vfma.f32	s19, s20, s16
 80105a4:	ee07 3a90 	vmov	s15, r3
 80105a8:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80105ac:	eeb0 6a48 	vmov.f32	s12, s16
 80105b0:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80105b4:	eea9 9a88 	vfma.f32	s18, s19, s16
 80105b8:	ee70 6a27 	vadd.f32	s13, s0, s15
 80105bc:	ee68 8a88 	vmul.f32	s17, s17, s16
 80105c0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80105c4:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80105c8:	eea0 7a26 	vfma.f32	s14, s0, s13
 80105cc:	ee37 0a87 	vadd.f32	s0, s15, s14
 80105d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80105d4:	e73e      	b.n	8010454 <__ieee754_acosf+0x24>
 80105d6:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 801061c <__ieee754_acosf+0x1ec>
 80105da:	e73b      	b.n	8010454 <__ieee754_acosf+0x24>
 80105dc:	40490fdb 	.word	0x40490fdb
 80105e0:	00000000 	.word	0x00000000
 80105e4:	3811ef08 	.word	0x3811ef08
 80105e8:	3a4f7f04 	.word	0x3a4f7f04
 80105ec:	bf303361 	.word	0xbf303361
 80105f0:	bd241146 	.word	0xbd241146
 80105f4:	3e4e0aa8 	.word	0x3e4e0aa8
 80105f8:	bea6b090 	.word	0xbea6b090
 80105fc:	3e2aaaab 	.word	0x3e2aaaab
 8010600:	3d9dc62e 	.word	0x3d9dc62e
 8010604:	4001572d 	.word	0x4001572d
 8010608:	c019d139 	.word	0xc019d139
 801060c:	33a22168 	.word	0x33a22168
 8010610:	3fc90fda 	.word	0x3fc90fda
 8010614:	b3a22168 	.word	0xb3a22168
 8010618:	40490fda 	.word	0x40490fda
 801061c:	3fc90fdb 	.word	0x3fc90fdb

08010620 <__ieee754_asinf>:
 8010620:	b538      	push	{r3, r4, r5, lr}
 8010622:	ee10 5a10 	vmov	r5, s0
 8010626:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801062a:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 801062e:	ed2d 8b04 	vpush	{d8-d9}
 8010632:	d10c      	bne.n	801064e <__ieee754_asinf+0x2e>
 8010634:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 80107ac <__ieee754_asinf+0x18c>
 8010638:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80107b0 <__ieee754_asinf+0x190>
 801063c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010640:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010644:	eeb0 0a67 	vmov.f32	s0, s15
 8010648:	ecbd 8b04 	vpop	{d8-d9}
 801064c:	bd38      	pop	{r3, r4, r5, pc}
 801064e:	d904      	bls.n	801065a <__ieee754_asinf+0x3a>
 8010650:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010654:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010658:	e7f6      	b.n	8010648 <__ieee754_asinf+0x28>
 801065a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801065e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8010662:	d20b      	bcs.n	801067c <__ieee754_asinf+0x5c>
 8010664:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8010668:	d252      	bcs.n	8010710 <__ieee754_asinf+0xf0>
 801066a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 80107b4 <__ieee754_asinf+0x194>
 801066e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8010672:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801067a:	dce5      	bgt.n	8010648 <__ieee754_asinf+0x28>
 801067c:	f7fe fc78 	bl	800ef70 <fabsf>
 8010680:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8010684:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010688:	ee28 8a27 	vmul.f32	s16, s16, s15
 801068c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80107b8 <__ieee754_asinf+0x198>
 8010690:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 80107bc <__ieee754_asinf+0x19c>
 8010694:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 80107c0 <__ieee754_asinf+0x1a0>
 8010698:	eea8 7a27 	vfma.f32	s14, s16, s15
 801069c:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80107c4 <__ieee754_asinf+0x1a4>
 80106a0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80106a4:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80107c8 <__ieee754_asinf+0x1a8>
 80106a8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80106ac:	eddf 7a47 	vldr	s15, [pc, #284]	@ 80107cc <__ieee754_asinf+0x1ac>
 80106b0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80106b4:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80107d0 <__ieee754_asinf+0x1b0>
 80106b8:	eea7 9a88 	vfma.f32	s18, s15, s16
 80106bc:	eddf 7a45 	vldr	s15, [pc, #276]	@ 80107d4 <__ieee754_asinf+0x1b4>
 80106c0:	eee8 7a07 	vfma.f32	s15, s16, s14
 80106c4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80107d8 <__ieee754_asinf+0x1b8>
 80106c8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80106cc:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80107dc <__ieee754_asinf+0x1bc>
 80106d0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80106d4:	eeb0 0a48 	vmov.f32	s0, s16
 80106d8:	eee7 8a88 	vfma.f32	s17, s15, s16
 80106dc:	f7fe fd90 	bl	800f200 <__ieee754_sqrtf>
 80106e0:	4b3f      	ldr	r3, [pc, #252]	@ (80107e0 <__ieee754_asinf+0x1c0>)
 80106e2:	ee29 9a08 	vmul.f32	s18, s18, s16
 80106e6:	429c      	cmp	r4, r3
 80106e8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80106ec:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80106f0:	d93d      	bls.n	801076e <__ieee754_asinf+0x14e>
 80106f2:	eea0 0a06 	vfma.f32	s0, s0, s12
 80106f6:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80107e4 <__ieee754_asinf+0x1c4>
 80106fa:	eee0 7a26 	vfma.f32	s15, s0, s13
 80106fe:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80107b0 <__ieee754_asinf+0x190>
 8010702:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010706:	2d00      	cmp	r5, #0
 8010708:	bfd8      	it	le
 801070a:	eeb1 0a40 	vnegle.f32	s0, s0
 801070e:	e79b      	b.n	8010648 <__ieee754_asinf+0x28>
 8010710:	ee60 7a00 	vmul.f32	s15, s0, s0
 8010714:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80107bc <__ieee754_asinf+0x19c>
 8010718:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80107b8 <__ieee754_asinf+0x198>
 801071c:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 80107d0 <__ieee754_asinf+0x1b0>
 8010720:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010724:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80107c4 <__ieee754_asinf+0x1a4>
 8010728:	eee7 6a27 	vfma.f32	s13, s14, s15
 801072c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80107c8 <__ieee754_asinf+0x1a8>
 8010730:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010734:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80107cc <__ieee754_asinf+0x1ac>
 8010738:	eee7 6a27 	vfma.f32	s13, s14, s15
 801073c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80107c0 <__ieee754_asinf+0x1a0>
 8010740:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010744:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80107d4 <__ieee754_asinf+0x1b4>
 8010748:	eee7 6a86 	vfma.f32	s13, s15, s12
 801074c:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80107d8 <__ieee754_asinf+0x1b8>
 8010750:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010754:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80107dc <__ieee754_asinf+0x1bc>
 8010758:	eee6 6a27 	vfma.f32	s13, s12, s15
 801075c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010760:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8010764:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8010768:	eea0 0a27 	vfma.f32	s0, s0, s15
 801076c:	e76c      	b.n	8010648 <__ieee754_asinf+0x28>
 801076e:	ee10 3a10 	vmov	r3, s0
 8010772:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8010776:	f023 030f 	bic.w	r3, r3, #15
 801077a:	ee07 3a10 	vmov	s14, r3
 801077e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8010782:	ee70 5a00 	vadd.f32	s11, s0, s0
 8010786:	ee30 0a07 	vadd.f32	s0, s0, s14
 801078a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80107ac <__ieee754_asinf+0x18c>
 801078e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8010792:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80107e8 <__ieee754_asinf+0x1c8>
 8010796:	eee5 7a66 	vfms.f32	s15, s10, s13
 801079a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801079e:	eeb0 6a40 	vmov.f32	s12, s0
 80107a2:	eea7 6a66 	vfms.f32	s12, s14, s13
 80107a6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80107aa:	e7aa      	b.n	8010702 <__ieee754_asinf+0xe2>
 80107ac:	b33bbd2e 	.word	0xb33bbd2e
 80107b0:	3fc90fdb 	.word	0x3fc90fdb
 80107b4:	7149f2ca 	.word	0x7149f2ca
 80107b8:	3a4f7f04 	.word	0x3a4f7f04
 80107bc:	3811ef08 	.word	0x3811ef08
 80107c0:	3e2aaaab 	.word	0x3e2aaaab
 80107c4:	bd241146 	.word	0xbd241146
 80107c8:	3e4e0aa8 	.word	0x3e4e0aa8
 80107cc:	bea6b090 	.word	0xbea6b090
 80107d0:	3d9dc62e 	.word	0x3d9dc62e
 80107d4:	bf303361 	.word	0xbf303361
 80107d8:	4001572d 	.word	0x4001572d
 80107dc:	c019d139 	.word	0xc019d139
 80107e0:	3f799999 	.word	0x3f799999
 80107e4:	333bbd2e 	.word	0x333bbd2e
 80107e8:	3f490fdb 	.word	0x3f490fdb

080107ec <__ieee754_atan2f>:
 80107ec:	ee10 2a90 	vmov	r2, s1
 80107f0:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80107f4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80107f8:	b510      	push	{r4, lr}
 80107fa:	eef0 7a40 	vmov.f32	s15, s0
 80107fe:	d806      	bhi.n	801080e <__ieee754_atan2f+0x22>
 8010800:	ee10 0a10 	vmov	r0, s0
 8010804:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8010808:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801080c:	d904      	bls.n	8010818 <__ieee754_atan2f+0x2c>
 801080e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010812:	eeb0 0a67 	vmov.f32	s0, s15
 8010816:	bd10      	pop	{r4, pc}
 8010818:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801081c:	d103      	bne.n	8010826 <__ieee754_atan2f+0x3a>
 801081e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010822:	f000 b883 	b.w	801092c <atanf>
 8010826:	1794      	asrs	r4, r2, #30
 8010828:	f004 0402 	and.w	r4, r4, #2
 801082c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010830:	b943      	cbnz	r3, 8010844 <__ieee754_atan2f+0x58>
 8010832:	2c02      	cmp	r4, #2
 8010834:	d05e      	beq.n	80108f4 <__ieee754_atan2f+0x108>
 8010836:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010908 <__ieee754_atan2f+0x11c>
 801083a:	2c03      	cmp	r4, #3
 801083c:	bf08      	it	eq
 801083e:	eef0 7a47 	vmoveq.f32	s15, s14
 8010842:	e7e6      	b.n	8010812 <__ieee754_atan2f+0x26>
 8010844:	b941      	cbnz	r1, 8010858 <__ieee754_atan2f+0x6c>
 8010846:	eddf 7a31 	vldr	s15, [pc, #196]	@ 801090c <__ieee754_atan2f+0x120>
 801084a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010910 <__ieee754_atan2f+0x124>
 801084e:	2800      	cmp	r0, #0
 8010850:	bfb8      	it	lt
 8010852:	eef0 7a47 	vmovlt.f32	s15, s14
 8010856:	e7dc      	b.n	8010812 <__ieee754_atan2f+0x26>
 8010858:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801085c:	d110      	bne.n	8010880 <__ieee754_atan2f+0x94>
 801085e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010862:	f104 34ff 	add.w	r4, r4, #4294967295
 8010866:	d107      	bne.n	8010878 <__ieee754_atan2f+0x8c>
 8010868:	2c02      	cmp	r4, #2
 801086a:	d846      	bhi.n	80108fa <__ieee754_atan2f+0x10e>
 801086c:	4b29      	ldr	r3, [pc, #164]	@ (8010914 <__ieee754_atan2f+0x128>)
 801086e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010872:	edd3 7a00 	vldr	s15, [r3]
 8010876:	e7cc      	b.n	8010812 <__ieee754_atan2f+0x26>
 8010878:	2c02      	cmp	r4, #2
 801087a:	d841      	bhi.n	8010900 <__ieee754_atan2f+0x114>
 801087c:	4b26      	ldr	r3, [pc, #152]	@ (8010918 <__ieee754_atan2f+0x12c>)
 801087e:	e7f6      	b.n	801086e <__ieee754_atan2f+0x82>
 8010880:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010884:	d0df      	beq.n	8010846 <__ieee754_atan2f+0x5a>
 8010886:	1a5b      	subs	r3, r3, r1
 8010888:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 801088c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010890:	da1a      	bge.n	80108c8 <__ieee754_atan2f+0xdc>
 8010892:	2a00      	cmp	r2, #0
 8010894:	da01      	bge.n	801089a <__ieee754_atan2f+0xae>
 8010896:	313c      	adds	r1, #60	@ 0x3c
 8010898:	db19      	blt.n	80108ce <__ieee754_atan2f+0xe2>
 801089a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801089e:	f7fe fb67 	bl	800ef70 <fabsf>
 80108a2:	f000 f843 	bl	801092c <atanf>
 80108a6:	eef0 7a40 	vmov.f32	s15, s0
 80108aa:	2c01      	cmp	r4, #1
 80108ac:	d012      	beq.n	80108d4 <__ieee754_atan2f+0xe8>
 80108ae:	2c02      	cmp	r4, #2
 80108b0:	d017      	beq.n	80108e2 <__ieee754_atan2f+0xf6>
 80108b2:	2c00      	cmp	r4, #0
 80108b4:	d0ad      	beq.n	8010812 <__ieee754_atan2f+0x26>
 80108b6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 801091c <__ieee754_atan2f+0x130>
 80108ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80108be:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8010920 <__ieee754_atan2f+0x134>
 80108c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80108c6:	e7a4      	b.n	8010812 <__ieee754_atan2f+0x26>
 80108c8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801090c <__ieee754_atan2f+0x120>
 80108cc:	e7ed      	b.n	80108aa <__ieee754_atan2f+0xbe>
 80108ce:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010924 <__ieee754_atan2f+0x138>
 80108d2:	e7ea      	b.n	80108aa <__ieee754_atan2f+0xbe>
 80108d4:	ee17 3a90 	vmov	r3, s15
 80108d8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80108dc:	ee07 3a90 	vmov	s15, r3
 80108e0:	e797      	b.n	8010812 <__ieee754_atan2f+0x26>
 80108e2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 801091c <__ieee754_atan2f+0x130>
 80108e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80108ea:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8010920 <__ieee754_atan2f+0x134>
 80108ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108f2:	e78e      	b.n	8010812 <__ieee754_atan2f+0x26>
 80108f4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8010920 <__ieee754_atan2f+0x134>
 80108f8:	e78b      	b.n	8010812 <__ieee754_atan2f+0x26>
 80108fa:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8010928 <__ieee754_atan2f+0x13c>
 80108fe:	e788      	b.n	8010812 <__ieee754_atan2f+0x26>
 8010900:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010924 <__ieee754_atan2f+0x138>
 8010904:	e785      	b.n	8010812 <__ieee754_atan2f+0x26>
 8010906:	bf00      	nop
 8010908:	c0490fdb 	.word	0xc0490fdb
 801090c:	3fc90fdb 	.word	0x3fc90fdb
 8010910:	bfc90fdb 	.word	0xbfc90fdb
 8010914:	0801197c 	.word	0x0801197c
 8010918:	08011970 	.word	0x08011970
 801091c:	33bbbd2e 	.word	0x33bbbd2e
 8010920:	40490fdb 	.word	0x40490fdb
 8010924:	00000000 	.word	0x00000000
 8010928:	3f490fdb 	.word	0x3f490fdb

0801092c <atanf>:
 801092c:	b538      	push	{r3, r4, r5, lr}
 801092e:	ee10 5a10 	vmov	r5, s0
 8010932:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8010936:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801093a:	eef0 7a40 	vmov.f32	s15, s0
 801093e:	d310      	bcc.n	8010962 <atanf+0x36>
 8010940:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8010944:	d904      	bls.n	8010950 <atanf+0x24>
 8010946:	ee70 7a00 	vadd.f32	s15, s0, s0
 801094a:	eeb0 0a67 	vmov.f32	s0, s15
 801094e:	bd38      	pop	{r3, r4, r5, pc}
 8010950:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8010a88 <atanf+0x15c>
 8010954:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8010a8c <atanf+0x160>
 8010958:	2d00      	cmp	r5, #0
 801095a:	bfc8      	it	gt
 801095c:	eef0 7a47 	vmovgt.f32	s15, s14
 8010960:	e7f3      	b.n	801094a <atanf+0x1e>
 8010962:	4b4b      	ldr	r3, [pc, #300]	@ (8010a90 <atanf+0x164>)
 8010964:	429c      	cmp	r4, r3
 8010966:	d810      	bhi.n	801098a <atanf+0x5e>
 8010968:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801096c:	d20a      	bcs.n	8010984 <atanf+0x58>
 801096e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8010a94 <atanf+0x168>
 8010972:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801097a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801097e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010982:	dce2      	bgt.n	801094a <atanf+0x1e>
 8010984:	f04f 33ff 	mov.w	r3, #4294967295
 8010988:	e013      	b.n	80109b2 <atanf+0x86>
 801098a:	f7fe faf1 	bl	800ef70 <fabsf>
 801098e:	4b42      	ldr	r3, [pc, #264]	@ (8010a98 <atanf+0x16c>)
 8010990:	429c      	cmp	r4, r3
 8010992:	d84f      	bhi.n	8010a34 <atanf+0x108>
 8010994:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8010998:	429c      	cmp	r4, r3
 801099a:	d841      	bhi.n	8010a20 <atanf+0xf4>
 801099c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80109a0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80109a4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80109a8:	2300      	movs	r3, #0
 80109aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80109ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80109b2:	1c5a      	adds	r2, r3, #1
 80109b4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80109b8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8010a9c <atanf+0x170>
 80109bc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8010aa0 <atanf+0x174>
 80109c0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8010aa4 <atanf+0x178>
 80109c4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80109c8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80109cc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8010aa8 <atanf+0x17c>
 80109d0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80109d4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8010aac <atanf+0x180>
 80109d8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80109dc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010ab0 <atanf+0x184>
 80109e0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80109e4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010ab4 <atanf+0x188>
 80109e8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80109ec:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8010ab8 <atanf+0x18c>
 80109f0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80109f4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010abc <atanf+0x190>
 80109f8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80109fc:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8010ac0 <atanf+0x194>
 8010a00:	eea7 5a26 	vfma.f32	s10, s14, s13
 8010a04:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8010ac4 <atanf+0x198>
 8010a08:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010a0c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010a10:	eea5 7a86 	vfma.f32	s14, s11, s12
 8010a14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010a18:	d121      	bne.n	8010a5e <atanf+0x132>
 8010a1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010a1e:	e794      	b.n	801094a <atanf+0x1e>
 8010a20:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010a24:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010a28:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010a32:	e7be      	b.n	80109b2 <atanf+0x86>
 8010a34:	4b24      	ldr	r3, [pc, #144]	@ (8010ac8 <atanf+0x19c>)
 8010a36:	429c      	cmp	r4, r3
 8010a38:	d80b      	bhi.n	8010a52 <atanf+0x126>
 8010a3a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8010a3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010a42:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010a46:	2302      	movs	r3, #2
 8010a48:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a50:	e7af      	b.n	80109b2 <atanf+0x86>
 8010a52:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010a56:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010a5a:	2303      	movs	r3, #3
 8010a5c:	e7a9      	b.n	80109b2 <atanf+0x86>
 8010a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8010acc <atanf+0x1a0>)
 8010a60:	491b      	ldr	r1, [pc, #108]	@ (8010ad0 <atanf+0x1a4>)
 8010a62:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010a66:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010a6a:	edd3 6a00 	vldr	s13, [r3]
 8010a6e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010a72:	2d00      	cmp	r5, #0
 8010a74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010a78:	edd2 7a00 	vldr	s15, [r2]
 8010a7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010a80:	bfb8      	it	lt
 8010a82:	eef1 7a67 	vneglt.f32	s15, s15
 8010a86:	e760      	b.n	801094a <atanf+0x1e>
 8010a88:	bfc90fdb 	.word	0xbfc90fdb
 8010a8c:	3fc90fdb 	.word	0x3fc90fdb
 8010a90:	3edfffff 	.word	0x3edfffff
 8010a94:	7149f2ca 	.word	0x7149f2ca
 8010a98:	3f97ffff 	.word	0x3f97ffff
 8010a9c:	3c8569d7 	.word	0x3c8569d7
 8010aa0:	3d4bda59 	.word	0x3d4bda59
 8010aa4:	bd6ef16b 	.word	0xbd6ef16b
 8010aa8:	3d886b35 	.word	0x3d886b35
 8010aac:	3dba2e6e 	.word	0x3dba2e6e
 8010ab0:	3e124925 	.word	0x3e124925
 8010ab4:	3eaaaaab 	.word	0x3eaaaaab
 8010ab8:	bd15a221 	.word	0xbd15a221
 8010abc:	bd9d8795 	.word	0xbd9d8795
 8010ac0:	bde38e38 	.word	0xbde38e38
 8010ac4:	be4ccccd 	.word	0xbe4ccccd
 8010ac8:	401bffff 	.word	0x401bffff
 8010acc:	08011998 	.word	0x08011998
 8010ad0:	08011988 	.word	0x08011988
 8010ad4:	00000000 	.word	0x00000000

08010ad8 <scalbn>:
 8010ad8:	b570      	push	{r4, r5, r6, lr}
 8010ada:	ec55 4b10 	vmov	r4, r5, d0
 8010ade:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010ae2:	4606      	mov	r6, r0
 8010ae4:	462b      	mov	r3, r5
 8010ae6:	b991      	cbnz	r1, 8010b0e <scalbn+0x36>
 8010ae8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010aec:	4323      	orrs	r3, r4
 8010aee:	d03d      	beq.n	8010b6c <scalbn+0x94>
 8010af0:	4b35      	ldr	r3, [pc, #212]	@ (8010bc8 <scalbn+0xf0>)
 8010af2:	4620      	mov	r0, r4
 8010af4:	4629      	mov	r1, r5
 8010af6:	2200      	movs	r2, #0
 8010af8:	f7ef fd9e 	bl	8000638 <__aeabi_dmul>
 8010afc:	4b33      	ldr	r3, [pc, #204]	@ (8010bcc <scalbn+0xf4>)
 8010afe:	429e      	cmp	r6, r3
 8010b00:	4604      	mov	r4, r0
 8010b02:	460d      	mov	r5, r1
 8010b04:	da0f      	bge.n	8010b26 <scalbn+0x4e>
 8010b06:	a328      	add	r3, pc, #160	@ (adr r3, 8010ba8 <scalbn+0xd0>)
 8010b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b0c:	e01e      	b.n	8010b4c <scalbn+0x74>
 8010b0e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010b12:	4291      	cmp	r1, r2
 8010b14:	d10b      	bne.n	8010b2e <scalbn+0x56>
 8010b16:	4622      	mov	r2, r4
 8010b18:	4620      	mov	r0, r4
 8010b1a:	4629      	mov	r1, r5
 8010b1c:	f7ef fbd6 	bl	80002cc <__adddf3>
 8010b20:	4604      	mov	r4, r0
 8010b22:	460d      	mov	r5, r1
 8010b24:	e022      	b.n	8010b6c <scalbn+0x94>
 8010b26:	460b      	mov	r3, r1
 8010b28:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010b2c:	3936      	subs	r1, #54	@ 0x36
 8010b2e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010b32:	4296      	cmp	r6, r2
 8010b34:	dd0d      	ble.n	8010b52 <scalbn+0x7a>
 8010b36:	2d00      	cmp	r5, #0
 8010b38:	a11d      	add	r1, pc, #116	@ (adr r1, 8010bb0 <scalbn+0xd8>)
 8010b3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b3e:	da02      	bge.n	8010b46 <scalbn+0x6e>
 8010b40:	a11d      	add	r1, pc, #116	@ (adr r1, 8010bb8 <scalbn+0xe0>)
 8010b42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b46:	a31a      	add	r3, pc, #104	@ (adr r3, 8010bb0 <scalbn+0xd8>)
 8010b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b4c:	f7ef fd74 	bl	8000638 <__aeabi_dmul>
 8010b50:	e7e6      	b.n	8010b20 <scalbn+0x48>
 8010b52:	1872      	adds	r2, r6, r1
 8010b54:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010b58:	428a      	cmp	r2, r1
 8010b5a:	dcec      	bgt.n	8010b36 <scalbn+0x5e>
 8010b5c:	2a00      	cmp	r2, #0
 8010b5e:	dd08      	ble.n	8010b72 <scalbn+0x9a>
 8010b60:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010b64:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010b68:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010b6c:	ec45 4b10 	vmov	d0, r4, r5
 8010b70:	bd70      	pop	{r4, r5, r6, pc}
 8010b72:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010b76:	da08      	bge.n	8010b8a <scalbn+0xb2>
 8010b78:	2d00      	cmp	r5, #0
 8010b7a:	a10b      	add	r1, pc, #44	@ (adr r1, 8010ba8 <scalbn+0xd0>)
 8010b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b80:	dac1      	bge.n	8010b06 <scalbn+0x2e>
 8010b82:	a10f      	add	r1, pc, #60	@ (adr r1, 8010bc0 <scalbn+0xe8>)
 8010b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b88:	e7bd      	b.n	8010b06 <scalbn+0x2e>
 8010b8a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010b8e:	3236      	adds	r2, #54	@ 0x36
 8010b90:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010b94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010b98:	4620      	mov	r0, r4
 8010b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8010bd0 <scalbn+0xf8>)
 8010b9c:	4629      	mov	r1, r5
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	e7d4      	b.n	8010b4c <scalbn+0x74>
 8010ba2:	bf00      	nop
 8010ba4:	f3af 8000 	nop.w
 8010ba8:	c2f8f359 	.word	0xc2f8f359
 8010bac:	01a56e1f 	.word	0x01a56e1f
 8010bb0:	8800759c 	.word	0x8800759c
 8010bb4:	7e37e43c 	.word	0x7e37e43c
 8010bb8:	8800759c 	.word	0x8800759c
 8010bbc:	fe37e43c 	.word	0xfe37e43c
 8010bc0:	c2f8f359 	.word	0xc2f8f359
 8010bc4:	81a56e1f 	.word	0x81a56e1f
 8010bc8:	43500000 	.word	0x43500000
 8010bcc:	ffff3cb0 	.word	0xffff3cb0
 8010bd0:	3c900000 	.word	0x3c900000

08010bd4 <with_errno>:
 8010bd4:	b510      	push	{r4, lr}
 8010bd6:	ed2d 8b02 	vpush	{d8}
 8010bda:	eeb0 8a40 	vmov.f32	s16, s0
 8010bde:	eef0 8a60 	vmov.f32	s17, s1
 8010be2:	4604      	mov	r4, r0
 8010be4:	f7fc f98c 	bl	800cf00 <__errno>
 8010be8:	eeb0 0a48 	vmov.f32	s0, s16
 8010bec:	eef0 0a68 	vmov.f32	s1, s17
 8010bf0:	ecbd 8b02 	vpop	{d8}
 8010bf4:	6004      	str	r4, [r0, #0]
 8010bf6:	bd10      	pop	{r4, pc}

08010bf8 <xflow>:
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	b507      	push	{r0, r1, r2, lr}
 8010bfc:	ec51 0b10 	vmov	r0, r1, d0
 8010c00:	b183      	cbz	r3, 8010c24 <xflow+0x2c>
 8010c02:	4602      	mov	r2, r0
 8010c04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010c08:	e9cd 2300 	strd	r2, r3, [sp]
 8010c0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c10:	f7ef fd12 	bl	8000638 <__aeabi_dmul>
 8010c14:	ec41 0b10 	vmov	d0, r0, r1
 8010c18:	2022      	movs	r0, #34	@ 0x22
 8010c1a:	b003      	add	sp, #12
 8010c1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c20:	f7ff bfd8 	b.w	8010bd4 <with_errno>
 8010c24:	4602      	mov	r2, r0
 8010c26:	460b      	mov	r3, r1
 8010c28:	e7ee      	b.n	8010c08 <xflow+0x10>
 8010c2a:	0000      	movs	r0, r0
 8010c2c:	0000      	movs	r0, r0
	...

08010c30 <__math_uflow>:
 8010c30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010c38 <__math_uflow+0x8>
 8010c34:	f7ff bfe0 	b.w	8010bf8 <xflow>
 8010c38:	00000000 	.word	0x00000000
 8010c3c:	10000000 	.word	0x10000000

08010c40 <__math_oflow>:
 8010c40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010c48 <__math_oflow+0x8>
 8010c44:	f7ff bfd8 	b.w	8010bf8 <xflow>
 8010c48:	00000000 	.word	0x00000000
 8010c4c:	70000000 	.word	0x70000000

08010c50 <__kernel_rem_pio2>:
 8010c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c54:	ed2d 8b02 	vpush	{d8}
 8010c58:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8010c5c:	f112 0f14 	cmn.w	r2, #20
 8010c60:	9306      	str	r3, [sp, #24]
 8010c62:	9104      	str	r1, [sp, #16]
 8010c64:	4bbe      	ldr	r3, [pc, #760]	@ (8010f60 <__kernel_rem_pio2+0x310>)
 8010c66:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8010c68:	9008      	str	r0, [sp, #32]
 8010c6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010c6e:	9300      	str	r3, [sp, #0]
 8010c70:	9b06      	ldr	r3, [sp, #24]
 8010c72:	f103 33ff 	add.w	r3, r3, #4294967295
 8010c76:	bfa8      	it	ge
 8010c78:	1ed4      	subge	r4, r2, #3
 8010c7a:	9305      	str	r3, [sp, #20]
 8010c7c:	bfb2      	itee	lt
 8010c7e:	2400      	movlt	r4, #0
 8010c80:	2318      	movge	r3, #24
 8010c82:	fb94 f4f3 	sdivge	r4, r4, r3
 8010c86:	f06f 0317 	mvn.w	r3, #23
 8010c8a:	fb04 3303 	mla	r3, r4, r3, r3
 8010c8e:	eb03 0b02 	add.w	fp, r3, r2
 8010c92:	9b00      	ldr	r3, [sp, #0]
 8010c94:	9a05      	ldr	r2, [sp, #20]
 8010c96:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8010f50 <__kernel_rem_pio2+0x300>
 8010c9a:	eb03 0802 	add.w	r8, r3, r2
 8010c9e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010ca0:	1aa7      	subs	r7, r4, r2
 8010ca2:	ae20      	add	r6, sp, #128	@ 0x80
 8010ca4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010ca8:	2500      	movs	r5, #0
 8010caa:	4545      	cmp	r5, r8
 8010cac:	dd13      	ble.n	8010cd6 <__kernel_rem_pio2+0x86>
 8010cae:	9b06      	ldr	r3, [sp, #24]
 8010cb0:	aa20      	add	r2, sp, #128	@ 0x80
 8010cb2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010cb6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8010cba:	f04f 0800 	mov.w	r8, #0
 8010cbe:	9b00      	ldr	r3, [sp, #0]
 8010cc0:	4598      	cmp	r8, r3
 8010cc2:	dc31      	bgt.n	8010d28 <__kernel_rem_pio2+0xd8>
 8010cc4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8010f50 <__kernel_rem_pio2+0x300>
 8010cc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010ccc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010cd0:	462f      	mov	r7, r5
 8010cd2:	2600      	movs	r6, #0
 8010cd4:	e01b      	b.n	8010d0e <__kernel_rem_pio2+0xbe>
 8010cd6:	42ef      	cmn	r7, r5
 8010cd8:	d407      	bmi.n	8010cea <__kernel_rem_pio2+0x9a>
 8010cda:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010cde:	f7ef fc41 	bl	8000564 <__aeabi_i2d>
 8010ce2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010ce6:	3501      	adds	r5, #1
 8010ce8:	e7df      	b.n	8010caa <__kernel_rem_pio2+0x5a>
 8010cea:	ec51 0b18 	vmov	r0, r1, d8
 8010cee:	e7f8      	b.n	8010ce2 <__kernel_rem_pio2+0x92>
 8010cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010cf4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010cf8:	f7ef fc9e 	bl	8000638 <__aeabi_dmul>
 8010cfc:	4602      	mov	r2, r0
 8010cfe:	460b      	mov	r3, r1
 8010d00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d04:	f7ef fae2 	bl	80002cc <__adddf3>
 8010d08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d0c:	3601      	adds	r6, #1
 8010d0e:	9b05      	ldr	r3, [sp, #20]
 8010d10:	429e      	cmp	r6, r3
 8010d12:	f1a7 0708 	sub.w	r7, r7, #8
 8010d16:	ddeb      	ble.n	8010cf0 <__kernel_rem_pio2+0xa0>
 8010d18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d1c:	f108 0801 	add.w	r8, r8, #1
 8010d20:	ecaa 7b02 	vstmia	sl!, {d7}
 8010d24:	3508      	adds	r5, #8
 8010d26:	e7ca      	b.n	8010cbe <__kernel_rem_pio2+0x6e>
 8010d28:	9b00      	ldr	r3, [sp, #0]
 8010d2a:	f8dd 8000 	ldr.w	r8, [sp]
 8010d2e:	aa0c      	add	r2, sp, #48	@ 0x30
 8010d30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010d34:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d36:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010d38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d3e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8010d42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d44:	ab98      	add	r3, sp, #608	@ 0x260
 8010d46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010d4a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8010d4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d52:	ac0c      	add	r4, sp, #48	@ 0x30
 8010d54:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010d56:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8010d5a:	46a1      	mov	r9, r4
 8010d5c:	46c2      	mov	sl, r8
 8010d5e:	f1ba 0f00 	cmp.w	sl, #0
 8010d62:	f1a5 0508 	sub.w	r5, r5, #8
 8010d66:	dc77      	bgt.n	8010e58 <__kernel_rem_pio2+0x208>
 8010d68:	4658      	mov	r0, fp
 8010d6a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8010d6e:	f7ff feb3 	bl	8010ad8 <scalbn>
 8010d72:	ec57 6b10 	vmov	r6, r7, d0
 8010d76:	2200      	movs	r2, #0
 8010d78:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8010d7c:	4630      	mov	r0, r6
 8010d7e:	4639      	mov	r1, r7
 8010d80:	f7ef fc5a 	bl	8000638 <__aeabi_dmul>
 8010d84:	ec41 0b10 	vmov	d0, r0, r1
 8010d88:	f000 faba 	bl	8011300 <floor>
 8010d8c:	4b75      	ldr	r3, [pc, #468]	@ (8010f64 <__kernel_rem_pio2+0x314>)
 8010d8e:	ec51 0b10 	vmov	r0, r1, d0
 8010d92:	2200      	movs	r2, #0
 8010d94:	f7ef fc50 	bl	8000638 <__aeabi_dmul>
 8010d98:	4602      	mov	r2, r0
 8010d9a:	460b      	mov	r3, r1
 8010d9c:	4630      	mov	r0, r6
 8010d9e:	4639      	mov	r1, r7
 8010da0:	f7ef fa92 	bl	80002c8 <__aeabi_dsub>
 8010da4:	460f      	mov	r7, r1
 8010da6:	4606      	mov	r6, r0
 8010da8:	f7ef fef6 	bl	8000b98 <__aeabi_d2iz>
 8010dac:	9002      	str	r0, [sp, #8]
 8010dae:	f7ef fbd9 	bl	8000564 <__aeabi_i2d>
 8010db2:	4602      	mov	r2, r0
 8010db4:	460b      	mov	r3, r1
 8010db6:	4630      	mov	r0, r6
 8010db8:	4639      	mov	r1, r7
 8010dba:	f7ef fa85 	bl	80002c8 <__aeabi_dsub>
 8010dbe:	f1bb 0f00 	cmp.w	fp, #0
 8010dc2:	4606      	mov	r6, r0
 8010dc4:	460f      	mov	r7, r1
 8010dc6:	dd6c      	ble.n	8010ea2 <__kernel_rem_pio2+0x252>
 8010dc8:	f108 31ff 	add.w	r1, r8, #4294967295
 8010dcc:	ab0c      	add	r3, sp, #48	@ 0x30
 8010dce:	9d02      	ldr	r5, [sp, #8]
 8010dd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010dd4:	f1cb 0018 	rsb	r0, fp, #24
 8010dd8:	fa43 f200 	asr.w	r2, r3, r0
 8010ddc:	4415      	add	r5, r2
 8010dde:	4082      	lsls	r2, r0
 8010de0:	1a9b      	subs	r3, r3, r2
 8010de2:	aa0c      	add	r2, sp, #48	@ 0x30
 8010de4:	9502      	str	r5, [sp, #8]
 8010de6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010dea:	f1cb 0217 	rsb	r2, fp, #23
 8010dee:	fa43 f902 	asr.w	r9, r3, r2
 8010df2:	f1b9 0f00 	cmp.w	r9, #0
 8010df6:	dd64      	ble.n	8010ec2 <__kernel_rem_pio2+0x272>
 8010df8:	9b02      	ldr	r3, [sp, #8]
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	3301      	adds	r3, #1
 8010dfe:	9302      	str	r3, [sp, #8]
 8010e00:	4615      	mov	r5, r2
 8010e02:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8010e06:	4590      	cmp	r8, r2
 8010e08:	f300 80b8 	bgt.w	8010f7c <__kernel_rem_pio2+0x32c>
 8010e0c:	f1bb 0f00 	cmp.w	fp, #0
 8010e10:	dd07      	ble.n	8010e22 <__kernel_rem_pio2+0x1d2>
 8010e12:	f1bb 0f01 	cmp.w	fp, #1
 8010e16:	f000 80bf 	beq.w	8010f98 <__kernel_rem_pio2+0x348>
 8010e1a:	f1bb 0f02 	cmp.w	fp, #2
 8010e1e:	f000 80c6 	beq.w	8010fae <__kernel_rem_pio2+0x35e>
 8010e22:	f1b9 0f02 	cmp.w	r9, #2
 8010e26:	d14c      	bne.n	8010ec2 <__kernel_rem_pio2+0x272>
 8010e28:	4632      	mov	r2, r6
 8010e2a:	463b      	mov	r3, r7
 8010e2c:	494e      	ldr	r1, [pc, #312]	@ (8010f68 <__kernel_rem_pio2+0x318>)
 8010e2e:	2000      	movs	r0, #0
 8010e30:	f7ef fa4a 	bl	80002c8 <__aeabi_dsub>
 8010e34:	4606      	mov	r6, r0
 8010e36:	460f      	mov	r7, r1
 8010e38:	2d00      	cmp	r5, #0
 8010e3a:	d042      	beq.n	8010ec2 <__kernel_rem_pio2+0x272>
 8010e3c:	4658      	mov	r0, fp
 8010e3e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8010f58 <__kernel_rem_pio2+0x308>
 8010e42:	f7ff fe49 	bl	8010ad8 <scalbn>
 8010e46:	4630      	mov	r0, r6
 8010e48:	4639      	mov	r1, r7
 8010e4a:	ec53 2b10 	vmov	r2, r3, d0
 8010e4e:	f7ef fa3b 	bl	80002c8 <__aeabi_dsub>
 8010e52:	4606      	mov	r6, r0
 8010e54:	460f      	mov	r7, r1
 8010e56:	e034      	b.n	8010ec2 <__kernel_rem_pio2+0x272>
 8010e58:	4b44      	ldr	r3, [pc, #272]	@ (8010f6c <__kernel_rem_pio2+0x31c>)
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e60:	f7ef fbea 	bl	8000638 <__aeabi_dmul>
 8010e64:	f7ef fe98 	bl	8000b98 <__aeabi_d2iz>
 8010e68:	f7ef fb7c 	bl	8000564 <__aeabi_i2d>
 8010e6c:	4b40      	ldr	r3, [pc, #256]	@ (8010f70 <__kernel_rem_pio2+0x320>)
 8010e6e:	2200      	movs	r2, #0
 8010e70:	4606      	mov	r6, r0
 8010e72:	460f      	mov	r7, r1
 8010e74:	f7ef fbe0 	bl	8000638 <__aeabi_dmul>
 8010e78:	4602      	mov	r2, r0
 8010e7a:	460b      	mov	r3, r1
 8010e7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e80:	f7ef fa22 	bl	80002c8 <__aeabi_dsub>
 8010e84:	f7ef fe88 	bl	8000b98 <__aeabi_d2iz>
 8010e88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010e8c:	f849 0b04 	str.w	r0, [r9], #4
 8010e90:	4639      	mov	r1, r7
 8010e92:	4630      	mov	r0, r6
 8010e94:	f7ef fa1a 	bl	80002cc <__adddf3>
 8010e98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ea0:	e75d      	b.n	8010d5e <__kernel_rem_pio2+0x10e>
 8010ea2:	d107      	bne.n	8010eb4 <__kernel_rem_pio2+0x264>
 8010ea4:	f108 33ff 	add.w	r3, r8, #4294967295
 8010ea8:	aa0c      	add	r2, sp, #48	@ 0x30
 8010eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010eae:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8010eb2:	e79e      	b.n	8010df2 <__kernel_rem_pio2+0x1a2>
 8010eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8010f74 <__kernel_rem_pio2+0x324>)
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	f7ef fe44 	bl	8000b44 <__aeabi_dcmpge>
 8010ebc:	2800      	cmp	r0, #0
 8010ebe:	d143      	bne.n	8010f48 <__kernel_rem_pio2+0x2f8>
 8010ec0:	4681      	mov	r9, r0
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	4630      	mov	r0, r6
 8010ec8:	4639      	mov	r1, r7
 8010eca:	f7ef fe1d 	bl	8000b08 <__aeabi_dcmpeq>
 8010ece:	2800      	cmp	r0, #0
 8010ed0:	f000 80bf 	beq.w	8011052 <__kernel_rem_pio2+0x402>
 8010ed4:	f108 33ff 	add.w	r3, r8, #4294967295
 8010ed8:	2200      	movs	r2, #0
 8010eda:	9900      	ldr	r1, [sp, #0]
 8010edc:	428b      	cmp	r3, r1
 8010ede:	da6e      	bge.n	8010fbe <__kernel_rem_pio2+0x36e>
 8010ee0:	2a00      	cmp	r2, #0
 8010ee2:	f000 8089 	beq.w	8010ff8 <__kernel_rem_pio2+0x3a8>
 8010ee6:	f108 38ff 	add.w	r8, r8, #4294967295
 8010eea:	ab0c      	add	r3, sp, #48	@ 0x30
 8010eec:	f1ab 0b18 	sub.w	fp, fp, #24
 8010ef0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d0f6      	beq.n	8010ee6 <__kernel_rem_pio2+0x296>
 8010ef8:	4658      	mov	r0, fp
 8010efa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8010f58 <__kernel_rem_pio2+0x308>
 8010efe:	f7ff fdeb 	bl	8010ad8 <scalbn>
 8010f02:	f108 0301 	add.w	r3, r8, #1
 8010f06:	00da      	lsls	r2, r3, #3
 8010f08:	9205      	str	r2, [sp, #20]
 8010f0a:	ec55 4b10 	vmov	r4, r5, d0
 8010f0e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8010f10:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8010f6c <__kernel_rem_pio2+0x31c>
 8010f14:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8010f18:	4646      	mov	r6, r8
 8010f1a:	f04f 0a00 	mov.w	sl, #0
 8010f1e:	2e00      	cmp	r6, #0
 8010f20:	f280 80cf 	bge.w	80110c2 <__kernel_rem_pio2+0x472>
 8010f24:	4644      	mov	r4, r8
 8010f26:	2c00      	cmp	r4, #0
 8010f28:	f2c0 80fd 	blt.w	8011126 <__kernel_rem_pio2+0x4d6>
 8010f2c:	4b12      	ldr	r3, [pc, #72]	@ (8010f78 <__kernel_rem_pio2+0x328>)
 8010f2e:	461f      	mov	r7, r3
 8010f30:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010f32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010f36:	9306      	str	r3, [sp, #24]
 8010f38:	f04f 0a00 	mov.w	sl, #0
 8010f3c:	f04f 0b00 	mov.w	fp, #0
 8010f40:	2600      	movs	r6, #0
 8010f42:	eba8 0504 	sub.w	r5, r8, r4
 8010f46:	e0e2      	b.n	801110e <__kernel_rem_pio2+0x4be>
 8010f48:	f04f 0902 	mov.w	r9, #2
 8010f4c:	e754      	b.n	8010df8 <__kernel_rem_pio2+0x1a8>
 8010f4e:	bf00      	nop
	...
 8010f5c:	3ff00000 	.word	0x3ff00000
 8010f60:	080119e8 	.word	0x080119e8
 8010f64:	40200000 	.word	0x40200000
 8010f68:	3ff00000 	.word	0x3ff00000
 8010f6c:	3e700000 	.word	0x3e700000
 8010f70:	41700000 	.word	0x41700000
 8010f74:	3fe00000 	.word	0x3fe00000
 8010f78:	080119a8 	.word	0x080119a8
 8010f7c:	f854 3b04 	ldr.w	r3, [r4], #4
 8010f80:	b945      	cbnz	r5, 8010f94 <__kernel_rem_pio2+0x344>
 8010f82:	b123      	cbz	r3, 8010f8e <__kernel_rem_pio2+0x33e>
 8010f84:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8010f88:	f844 3c04 	str.w	r3, [r4, #-4]
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	3201      	adds	r2, #1
 8010f90:	461d      	mov	r5, r3
 8010f92:	e738      	b.n	8010e06 <__kernel_rem_pio2+0x1b6>
 8010f94:	1acb      	subs	r3, r1, r3
 8010f96:	e7f7      	b.n	8010f88 <__kernel_rem_pio2+0x338>
 8010f98:	f108 32ff 	add.w	r2, r8, #4294967295
 8010f9c:	ab0c      	add	r3, sp, #48	@ 0x30
 8010f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fa2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010fa6:	a90c      	add	r1, sp, #48	@ 0x30
 8010fa8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010fac:	e739      	b.n	8010e22 <__kernel_rem_pio2+0x1d2>
 8010fae:	f108 32ff 	add.w	r2, r8, #4294967295
 8010fb2:	ab0c      	add	r3, sp, #48	@ 0x30
 8010fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fb8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010fbc:	e7f3      	b.n	8010fa6 <__kernel_rem_pio2+0x356>
 8010fbe:	a90c      	add	r1, sp, #48	@ 0x30
 8010fc0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010fc4:	3b01      	subs	r3, #1
 8010fc6:	430a      	orrs	r2, r1
 8010fc8:	e787      	b.n	8010eda <__kernel_rem_pio2+0x28a>
 8010fca:	3401      	adds	r4, #1
 8010fcc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010fd0:	2a00      	cmp	r2, #0
 8010fd2:	d0fa      	beq.n	8010fca <__kernel_rem_pio2+0x37a>
 8010fd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010fd6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010fda:	eb0d 0503 	add.w	r5, sp, r3
 8010fde:	9b06      	ldr	r3, [sp, #24]
 8010fe0:	aa20      	add	r2, sp, #128	@ 0x80
 8010fe2:	4443      	add	r3, r8
 8010fe4:	f108 0701 	add.w	r7, r8, #1
 8010fe8:	3d98      	subs	r5, #152	@ 0x98
 8010fea:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8010fee:	4444      	add	r4, r8
 8010ff0:	42bc      	cmp	r4, r7
 8010ff2:	da04      	bge.n	8010ffe <__kernel_rem_pio2+0x3ae>
 8010ff4:	46a0      	mov	r8, r4
 8010ff6:	e6a2      	b.n	8010d3e <__kernel_rem_pio2+0xee>
 8010ff8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ffa:	2401      	movs	r4, #1
 8010ffc:	e7e6      	b.n	8010fcc <__kernel_rem_pio2+0x37c>
 8010ffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011000:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011004:	f7ef faae 	bl	8000564 <__aeabi_i2d>
 8011008:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80112d0 <__kernel_rem_pio2+0x680>
 801100c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011010:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011014:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011018:	46b2      	mov	sl, r6
 801101a:	f04f 0800 	mov.w	r8, #0
 801101e:	9b05      	ldr	r3, [sp, #20]
 8011020:	4598      	cmp	r8, r3
 8011022:	dd05      	ble.n	8011030 <__kernel_rem_pio2+0x3e0>
 8011024:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011028:	3701      	adds	r7, #1
 801102a:	eca5 7b02 	vstmia	r5!, {d7}
 801102e:	e7df      	b.n	8010ff0 <__kernel_rem_pio2+0x3a0>
 8011030:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8011034:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011038:	f7ef fafe 	bl	8000638 <__aeabi_dmul>
 801103c:	4602      	mov	r2, r0
 801103e:	460b      	mov	r3, r1
 8011040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011044:	f7ef f942 	bl	80002cc <__adddf3>
 8011048:	f108 0801 	add.w	r8, r8, #1
 801104c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011050:	e7e5      	b.n	801101e <__kernel_rem_pio2+0x3ce>
 8011052:	f1cb 0000 	rsb	r0, fp, #0
 8011056:	ec47 6b10 	vmov	d0, r6, r7
 801105a:	f7ff fd3d 	bl	8010ad8 <scalbn>
 801105e:	ec55 4b10 	vmov	r4, r5, d0
 8011062:	4b9d      	ldr	r3, [pc, #628]	@ (80112d8 <__kernel_rem_pio2+0x688>)
 8011064:	2200      	movs	r2, #0
 8011066:	4620      	mov	r0, r4
 8011068:	4629      	mov	r1, r5
 801106a:	f7ef fd6b 	bl	8000b44 <__aeabi_dcmpge>
 801106e:	b300      	cbz	r0, 80110b2 <__kernel_rem_pio2+0x462>
 8011070:	4b9a      	ldr	r3, [pc, #616]	@ (80112dc <__kernel_rem_pio2+0x68c>)
 8011072:	2200      	movs	r2, #0
 8011074:	4620      	mov	r0, r4
 8011076:	4629      	mov	r1, r5
 8011078:	f7ef fade 	bl	8000638 <__aeabi_dmul>
 801107c:	f7ef fd8c 	bl	8000b98 <__aeabi_d2iz>
 8011080:	4606      	mov	r6, r0
 8011082:	f7ef fa6f 	bl	8000564 <__aeabi_i2d>
 8011086:	4b94      	ldr	r3, [pc, #592]	@ (80112d8 <__kernel_rem_pio2+0x688>)
 8011088:	2200      	movs	r2, #0
 801108a:	f7ef fad5 	bl	8000638 <__aeabi_dmul>
 801108e:	460b      	mov	r3, r1
 8011090:	4602      	mov	r2, r0
 8011092:	4629      	mov	r1, r5
 8011094:	4620      	mov	r0, r4
 8011096:	f7ef f917 	bl	80002c8 <__aeabi_dsub>
 801109a:	f7ef fd7d 	bl	8000b98 <__aeabi_d2iz>
 801109e:	ab0c      	add	r3, sp, #48	@ 0x30
 80110a0:	f10b 0b18 	add.w	fp, fp, #24
 80110a4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80110a8:	f108 0801 	add.w	r8, r8, #1
 80110ac:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80110b0:	e722      	b.n	8010ef8 <__kernel_rem_pio2+0x2a8>
 80110b2:	4620      	mov	r0, r4
 80110b4:	4629      	mov	r1, r5
 80110b6:	f7ef fd6f 	bl	8000b98 <__aeabi_d2iz>
 80110ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80110bc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80110c0:	e71a      	b.n	8010ef8 <__kernel_rem_pio2+0x2a8>
 80110c2:	ab0c      	add	r3, sp, #48	@ 0x30
 80110c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80110c8:	f7ef fa4c 	bl	8000564 <__aeabi_i2d>
 80110cc:	4622      	mov	r2, r4
 80110ce:	462b      	mov	r3, r5
 80110d0:	f7ef fab2 	bl	8000638 <__aeabi_dmul>
 80110d4:	4652      	mov	r2, sl
 80110d6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80110da:	465b      	mov	r3, fp
 80110dc:	4620      	mov	r0, r4
 80110de:	4629      	mov	r1, r5
 80110e0:	f7ef faaa 	bl	8000638 <__aeabi_dmul>
 80110e4:	3e01      	subs	r6, #1
 80110e6:	4604      	mov	r4, r0
 80110e8:	460d      	mov	r5, r1
 80110ea:	e718      	b.n	8010f1e <__kernel_rem_pio2+0x2ce>
 80110ec:	9906      	ldr	r1, [sp, #24]
 80110ee:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80110f2:	9106      	str	r1, [sp, #24]
 80110f4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80110f8:	f7ef fa9e 	bl	8000638 <__aeabi_dmul>
 80110fc:	4602      	mov	r2, r0
 80110fe:	460b      	mov	r3, r1
 8011100:	4650      	mov	r0, sl
 8011102:	4659      	mov	r1, fp
 8011104:	f7ef f8e2 	bl	80002cc <__adddf3>
 8011108:	3601      	adds	r6, #1
 801110a:	4682      	mov	sl, r0
 801110c:	468b      	mov	fp, r1
 801110e:	9b00      	ldr	r3, [sp, #0]
 8011110:	429e      	cmp	r6, r3
 8011112:	dc01      	bgt.n	8011118 <__kernel_rem_pio2+0x4c8>
 8011114:	42b5      	cmp	r5, r6
 8011116:	dae9      	bge.n	80110ec <__kernel_rem_pio2+0x49c>
 8011118:	ab48      	add	r3, sp, #288	@ 0x120
 801111a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801111e:	e9c5 ab00 	strd	sl, fp, [r5]
 8011122:	3c01      	subs	r4, #1
 8011124:	e6ff      	b.n	8010f26 <__kernel_rem_pio2+0x2d6>
 8011126:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011128:	2b02      	cmp	r3, #2
 801112a:	dc0b      	bgt.n	8011144 <__kernel_rem_pio2+0x4f4>
 801112c:	2b00      	cmp	r3, #0
 801112e:	dc39      	bgt.n	80111a4 <__kernel_rem_pio2+0x554>
 8011130:	d05d      	beq.n	80111ee <__kernel_rem_pio2+0x59e>
 8011132:	9b02      	ldr	r3, [sp, #8]
 8011134:	f003 0007 	and.w	r0, r3, #7
 8011138:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801113c:	ecbd 8b02 	vpop	{d8}
 8011140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011144:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011146:	2b03      	cmp	r3, #3
 8011148:	d1f3      	bne.n	8011132 <__kernel_rem_pio2+0x4e2>
 801114a:	9b05      	ldr	r3, [sp, #20]
 801114c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011150:	eb0d 0403 	add.w	r4, sp, r3
 8011154:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8011158:	4625      	mov	r5, r4
 801115a:	46c2      	mov	sl, r8
 801115c:	f1ba 0f00 	cmp.w	sl, #0
 8011160:	f1a5 0508 	sub.w	r5, r5, #8
 8011164:	dc6b      	bgt.n	801123e <__kernel_rem_pio2+0x5ee>
 8011166:	4645      	mov	r5, r8
 8011168:	2d01      	cmp	r5, #1
 801116a:	f1a4 0408 	sub.w	r4, r4, #8
 801116e:	f300 8087 	bgt.w	8011280 <__kernel_rem_pio2+0x630>
 8011172:	9c05      	ldr	r4, [sp, #20]
 8011174:	ab48      	add	r3, sp, #288	@ 0x120
 8011176:	441c      	add	r4, r3
 8011178:	2000      	movs	r0, #0
 801117a:	2100      	movs	r1, #0
 801117c:	f1b8 0f01 	cmp.w	r8, #1
 8011180:	f300 809c 	bgt.w	80112bc <__kernel_rem_pio2+0x66c>
 8011184:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8011188:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801118c:	f1b9 0f00 	cmp.w	r9, #0
 8011190:	f040 80a6 	bne.w	80112e0 <__kernel_rem_pio2+0x690>
 8011194:	9b04      	ldr	r3, [sp, #16]
 8011196:	e9c3 7800 	strd	r7, r8, [r3]
 801119a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801119e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80111a2:	e7c6      	b.n	8011132 <__kernel_rem_pio2+0x4e2>
 80111a4:	9d05      	ldr	r5, [sp, #20]
 80111a6:	ab48      	add	r3, sp, #288	@ 0x120
 80111a8:	441d      	add	r5, r3
 80111aa:	4644      	mov	r4, r8
 80111ac:	2000      	movs	r0, #0
 80111ae:	2100      	movs	r1, #0
 80111b0:	2c00      	cmp	r4, #0
 80111b2:	da35      	bge.n	8011220 <__kernel_rem_pio2+0x5d0>
 80111b4:	f1b9 0f00 	cmp.w	r9, #0
 80111b8:	d038      	beq.n	801122c <__kernel_rem_pio2+0x5dc>
 80111ba:	4602      	mov	r2, r0
 80111bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80111c0:	9c04      	ldr	r4, [sp, #16]
 80111c2:	e9c4 2300 	strd	r2, r3, [r4]
 80111c6:	4602      	mov	r2, r0
 80111c8:	460b      	mov	r3, r1
 80111ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80111ce:	f7ef f87b 	bl	80002c8 <__aeabi_dsub>
 80111d2:	ad4a      	add	r5, sp, #296	@ 0x128
 80111d4:	2401      	movs	r4, #1
 80111d6:	45a0      	cmp	r8, r4
 80111d8:	da2b      	bge.n	8011232 <__kernel_rem_pio2+0x5e2>
 80111da:	f1b9 0f00 	cmp.w	r9, #0
 80111de:	d002      	beq.n	80111e6 <__kernel_rem_pio2+0x596>
 80111e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80111e4:	4619      	mov	r1, r3
 80111e6:	9b04      	ldr	r3, [sp, #16]
 80111e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80111ec:	e7a1      	b.n	8011132 <__kernel_rem_pio2+0x4e2>
 80111ee:	9c05      	ldr	r4, [sp, #20]
 80111f0:	ab48      	add	r3, sp, #288	@ 0x120
 80111f2:	441c      	add	r4, r3
 80111f4:	2000      	movs	r0, #0
 80111f6:	2100      	movs	r1, #0
 80111f8:	f1b8 0f00 	cmp.w	r8, #0
 80111fc:	da09      	bge.n	8011212 <__kernel_rem_pio2+0x5c2>
 80111fe:	f1b9 0f00 	cmp.w	r9, #0
 8011202:	d002      	beq.n	801120a <__kernel_rem_pio2+0x5ba>
 8011204:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011208:	4619      	mov	r1, r3
 801120a:	9b04      	ldr	r3, [sp, #16]
 801120c:	e9c3 0100 	strd	r0, r1, [r3]
 8011210:	e78f      	b.n	8011132 <__kernel_rem_pio2+0x4e2>
 8011212:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011216:	f7ef f859 	bl	80002cc <__adddf3>
 801121a:	f108 38ff 	add.w	r8, r8, #4294967295
 801121e:	e7eb      	b.n	80111f8 <__kernel_rem_pio2+0x5a8>
 8011220:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8011224:	f7ef f852 	bl	80002cc <__adddf3>
 8011228:	3c01      	subs	r4, #1
 801122a:	e7c1      	b.n	80111b0 <__kernel_rem_pio2+0x560>
 801122c:	4602      	mov	r2, r0
 801122e:	460b      	mov	r3, r1
 8011230:	e7c6      	b.n	80111c0 <__kernel_rem_pio2+0x570>
 8011232:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8011236:	f7ef f849 	bl	80002cc <__adddf3>
 801123a:	3401      	adds	r4, #1
 801123c:	e7cb      	b.n	80111d6 <__kernel_rem_pio2+0x586>
 801123e:	ed95 7b00 	vldr	d7, [r5]
 8011242:	ed8d 7b00 	vstr	d7, [sp]
 8011246:	ed95 7b02 	vldr	d7, [r5, #8]
 801124a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801124e:	ec53 2b17 	vmov	r2, r3, d7
 8011252:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011256:	f7ef f839 	bl	80002cc <__adddf3>
 801125a:	4602      	mov	r2, r0
 801125c:	460b      	mov	r3, r1
 801125e:	4606      	mov	r6, r0
 8011260:	460f      	mov	r7, r1
 8011262:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011266:	f7ef f82f 	bl	80002c8 <__aeabi_dsub>
 801126a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801126e:	f7ef f82d 	bl	80002cc <__adddf3>
 8011272:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011276:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801127a:	e9c5 6700 	strd	r6, r7, [r5]
 801127e:	e76d      	b.n	801115c <__kernel_rem_pio2+0x50c>
 8011280:	ed94 7b00 	vldr	d7, [r4]
 8011284:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8011288:	ec51 0b17 	vmov	r0, r1, d7
 801128c:	4652      	mov	r2, sl
 801128e:	465b      	mov	r3, fp
 8011290:	ed8d 7b00 	vstr	d7, [sp]
 8011294:	f7ef f81a 	bl	80002cc <__adddf3>
 8011298:	4602      	mov	r2, r0
 801129a:	460b      	mov	r3, r1
 801129c:	4606      	mov	r6, r0
 801129e:	460f      	mov	r7, r1
 80112a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80112a4:	f7ef f810 	bl	80002c8 <__aeabi_dsub>
 80112a8:	4652      	mov	r2, sl
 80112aa:	465b      	mov	r3, fp
 80112ac:	f7ef f80e 	bl	80002cc <__adddf3>
 80112b0:	3d01      	subs	r5, #1
 80112b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80112b6:	e9c4 6700 	strd	r6, r7, [r4]
 80112ba:	e755      	b.n	8011168 <__kernel_rem_pio2+0x518>
 80112bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80112c0:	f7ef f804 	bl	80002cc <__adddf3>
 80112c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80112c8:	e758      	b.n	801117c <__kernel_rem_pio2+0x52c>
 80112ca:	bf00      	nop
 80112cc:	f3af 8000 	nop.w
	...
 80112d8:	41700000 	.word	0x41700000
 80112dc:	3e700000 	.word	0x3e700000
 80112e0:	9b04      	ldr	r3, [sp, #16]
 80112e2:	9a04      	ldr	r2, [sp, #16]
 80112e4:	601f      	str	r7, [r3, #0]
 80112e6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80112ea:	605c      	str	r4, [r3, #4]
 80112ec:	609d      	str	r5, [r3, #8]
 80112ee:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80112f2:	60d3      	str	r3, [r2, #12]
 80112f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80112f8:	6110      	str	r0, [r2, #16]
 80112fa:	6153      	str	r3, [r2, #20]
 80112fc:	e719      	b.n	8011132 <__kernel_rem_pio2+0x4e2>
 80112fe:	bf00      	nop

08011300 <floor>:
 8011300:	ec51 0b10 	vmov	r0, r1, d0
 8011304:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801130c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8011310:	2e13      	cmp	r6, #19
 8011312:	460c      	mov	r4, r1
 8011314:	4605      	mov	r5, r0
 8011316:	4680      	mov	r8, r0
 8011318:	dc34      	bgt.n	8011384 <floor+0x84>
 801131a:	2e00      	cmp	r6, #0
 801131c:	da17      	bge.n	801134e <floor+0x4e>
 801131e:	a332      	add	r3, pc, #200	@ (adr r3, 80113e8 <floor+0xe8>)
 8011320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011324:	f7ee ffd2 	bl	80002cc <__adddf3>
 8011328:	2200      	movs	r2, #0
 801132a:	2300      	movs	r3, #0
 801132c:	f7ef fc14 	bl	8000b58 <__aeabi_dcmpgt>
 8011330:	b150      	cbz	r0, 8011348 <floor+0x48>
 8011332:	2c00      	cmp	r4, #0
 8011334:	da55      	bge.n	80113e2 <floor+0xe2>
 8011336:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801133a:	432c      	orrs	r4, r5
 801133c:	2500      	movs	r5, #0
 801133e:	42ac      	cmp	r4, r5
 8011340:	4c2b      	ldr	r4, [pc, #172]	@ (80113f0 <floor+0xf0>)
 8011342:	bf08      	it	eq
 8011344:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8011348:	4621      	mov	r1, r4
 801134a:	4628      	mov	r0, r5
 801134c:	e023      	b.n	8011396 <floor+0x96>
 801134e:	4f29      	ldr	r7, [pc, #164]	@ (80113f4 <floor+0xf4>)
 8011350:	4137      	asrs	r7, r6
 8011352:	ea01 0307 	and.w	r3, r1, r7
 8011356:	4303      	orrs	r3, r0
 8011358:	d01d      	beq.n	8011396 <floor+0x96>
 801135a:	a323      	add	r3, pc, #140	@ (adr r3, 80113e8 <floor+0xe8>)
 801135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011360:	f7ee ffb4 	bl	80002cc <__adddf3>
 8011364:	2200      	movs	r2, #0
 8011366:	2300      	movs	r3, #0
 8011368:	f7ef fbf6 	bl	8000b58 <__aeabi_dcmpgt>
 801136c:	2800      	cmp	r0, #0
 801136e:	d0eb      	beq.n	8011348 <floor+0x48>
 8011370:	2c00      	cmp	r4, #0
 8011372:	bfbe      	ittt	lt
 8011374:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8011378:	4133      	asrlt	r3, r6
 801137a:	18e4      	addlt	r4, r4, r3
 801137c:	ea24 0407 	bic.w	r4, r4, r7
 8011380:	2500      	movs	r5, #0
 8011382:	e7e1      	b.n	8011348 <floor+0x48>
 8011384:	2e33      	cmp	r6, #51	@ 0x33
 8011386:	dd0a      	ble.n	801139e <floor+0x9e>
 8011388:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801138c:	d103      	bne.n	8011396 <floor+0x96>
 801138e:	4602      	mov	r2, r0
 8011390:	460b      	mov	r3, r1
 8011392:	f7ee ff9b 	bl	80002cc <__adddf3>
 8011396:	ec41 0b10 	vmov	d0, r0, r1
 801139a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801139e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80113a2:	f04f 37ff 	mov.w	r7, #4294967295
 80113a6:	40df      	lsrs	r7, r3
 80113a8:	4207      	tst	r7, r0
 80113aa:	d0f4      	beq.n	8011396 <floor+0x96>
 80113ac:	a30e      	add	r3, pc, #56	@ (adr r3, 80113e8 <floor+0xe8>)
 80113ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b2:	f7ee ff8b 	bl	80002cc <__adddf3>
 80113b6:	2200      	movs	r2, #0
 80113b8:	2300      	movs	r3, #0
 80113ba:	f7ef fbcd 	bl	8000b58 <__aeabi_dcmpgt>
 80113be:	2800      	cmp	r0, #0
 80113c0:	d0c2      	beq.n	8011348 <floor+0x48>
 80113c2:	2c00      	cmp	r4, #0
 80113c4:	da0a      	bge.n	80113dc <floor+0xdc>
 80113c6:	2e14      	cmp	r6, #20
 80113c8:	d101      	bne.n	80113ce <floor+0xce>
 80113ca:	3401      	adds	r4, #1
 80113cc:	e006      	b.n	80113dc <floor+0xdc>
 80113ce:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80113d2:	2301      	movs	r3, #1
 80113d4:	40b3      	lsls	r3, r6
 80113d6:	441d      	add	r5, r3
 80113d8:	4545      	cmp	r5, r8
 80113da:	d3f6      	bcc.n	80113ca <floor+0xca>
 80113dc:	ea25 0507 	bic.w	r5, r5, r7
 80113e0:	e7b2      	b.n	8011348 <floor+0x48>
 80113e2:	2500      	movs	r5, #0
 80113e4:	462c      	mov	r4, r5
 80113e6:	e7af      	b.n	8011348 <floor+0x48>
 80113e8:	8800759c 	.word	0x8800759c
 80113ec:	7e37e43c 	.word	0x7e37e43c
 80113f0:	bff00000 	.word	0xbff00000
 80113f4:	000fffff 	.word	0x000fffff

080113f8 <_init>:
 80113f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113fa:	bf00      	nop
 80113fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113fe:	bc08      	pop	{r3}
 8011400:	469e      	mov	lr, r3
 8011402:	4770      	bx	lr

08011404 <_fini>:
 8011404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011406:	bf00      	nop
 8011408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801140a:	bc08      	pop	{r3}
 801140c:	469e      	mov	lr, r3
 801140e:	4770      	bx	lr
