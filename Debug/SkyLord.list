
SkyLord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012550  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  08012720  08012720  00013720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d08  08012d08  00014228  2**0
                  CONTENTS
  4 .ARM          00000008  08012d08  08012d08  00013d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d10  08012d10  00014228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012d10  08012d10  00013d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012d14  08012d14  00013d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000228  20000000  08012d18  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000083c  20000228  08012f40  00014228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a64  08012f40  00014a64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c318  00000000  00000000  00014258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eb8  00000000  00000000  00030570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  00034428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010ef  00000000  00000000  000359b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002736b  00000000  00000000  00036aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ee7c  00000000  00000000  0005de12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5795  00000000  00000000  0007cc8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00162423  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071b0  00000000  00000000  00162468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00169618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012708 	.word	0x08012708

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	08012708 	.word	0x08012708

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	@ 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_ldivmod>:
 8000ea4:	b97b      	cbnz	r3, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea6:	b972      	cbnz	r2, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bfbe      	ittt	lt
 8000eac:	2000      	movlt	r0, #0
 8000eae:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000eb2:	e006      	blt.n	8000ec2 <__aeabi_ldivmod+0x1e>
 8000eb4:	bf08      	it	eq
 8000eb6:	2800      	cmpeq	r0, #0
 8000eb8:	bf1c      	itt	ne
 8000eba:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ebe:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec2:	f000 b9b5 	b.w	8001230 <__aeabi_idiv0>
 8000ec6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	db09      	blt.n	8000ee6 <__aeabi_ldivmod+0x42>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db1a      	blt.n	8000f0c <__aeabi_ldivmod+0x68>
 8000ed6:	f000 f84d 	bl	8000f74 <__udivmoddi4>
 8000eda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	4240      	negs	r0, r0
 8000ee8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db1b      	blt.n	8000f28 <__aeabi_ldivmod+0x84>
 8000ef0:	f000 f840 	bl	8000f74 <__udivmoddi4>
 8000ef4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efc:	b004      	add	sp, #16
 8000efe:	4240      	negs	r0, r0
 8000f00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f04:	4252      	negs	r2, r2
 8000f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f0a:	4770      	bx	lr
 8000f0c:	4252      	negs	r2, r2
 8000f0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f12:	f000 f82f 	bl	8000f74 <__udivmoddi4>
 8000f16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f1e:	b004      	add	sp, #16
 8000f20:	4240      	negs	r0, r0
 8000f22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f26:	4770      	bx	lr
 8000f28:	4252      	negs	r2, r2
 8000f2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f2e:	f000 f821 	bl	8000f74 <__udivmoddi4>
 8000f32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3a:	b004      	add	sp, #16
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	4770      	bx	lr

08000f44 <__aeabi_uldivmod>:
 8000f44:	b953      	cbnz	r3, 8000f5c <__aeabi_uldivmod+0x18>
 8000f46:	b94a      	cbnz	r2, 8000f5c <__aeabi_uldivmod+0x18>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bf08      	it	eq
 8000f4c:	2800      	cmpeq	r0, #0
 8000f4e:	bf1c      	itt	ne
 8000f50:	f04f 31ff 	movne.w	r1, #4294967295
 8000f54:	f04f 30ff 	movne.w	r0, #4294967295
 8000f58:	f000 b96a 	b.w	8001230 <__aeabi_idiv0>
 8000f5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f64:	f000 f806 	bl	8000f74 <__udivmoddi4>
 8000f68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f70:	b004      	add	sp, #16
 8000f72:	4770      	bx	lr

08000f74 <__udivmoddi4>:
 8000f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f78:	9d08      	ldr	r5, [sp, #32]
 8000f7a:	460c      	mov	r4, r1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d14e      	bne.n	800101e <__udivmoddi4+0xaa>
 8000f80:	4694      	mov	ip, r2
 8000f82:	458c      	cmp	ip, r1
 8000f84:	4686      	mov	lr, r0
 8000f86:	fab2 f282 	clz	r2, r2
 8000f8a:	d962      	bls.n	8001052 <__udivmoddi4+0xde>
 8000f8c:	b14a      	cbz	r2, 8000fa2 <__udivmoddi4+0x2e>
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	4091      	lsls	r1, r2
 8000f94:	fa20 f303 	lsr.w	r3, r0, r3
 8000f98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f9c:	4319      	orrs	r1, r3
 8000f9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa6:	fa1f f68c 	uxth.w	r6, ip
 8000faa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fb2:	fb07 1114 	mls	r1, r7, r4, r1
 8000fb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fba:	fb04 f106 	mul.w	r1, r4, r6
 8000fbe:	4299      	cmp	r1, r3
 8000fc0:	d90a      	bls.n	8000fd8 <__udivmoddi4+0x64>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000fca:	f080 8112 	bcs.w	80011f2 <__udivmoddi4+0x27e>
 8000fce:	4299      	cmp	r1, r3
 8000fd0:	f240 810f 	bls.w	80011f2 <__udivmoddi4+0x27e>
 8000fd4:	3c02      	subs	r4, #2
 8000fd6:	4463      	add	r3, ip
 8000fd8:	1a59      	subs	r1, r3, r1
 8000fda:	fa1f f38e 	uxth.w	r3, lr
 8000fde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fe2:	fb07 1110 	mls	r1, r7, r0, r1
 8000fe6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fea:	fb00 f606 	mul.w	r6, r0, r6
 8000fee:	429e      	cmp	r6, r3
 8000ff0:	d90a      	bls.n	8001008 <__udivmoddi4+0x94>
 8000ff2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ffa:	f080 80fc 	bcs.w	80011f6 <__udivmoddi4+0x282>
 8000ffe:	429e      	cmp	r6, r3
 8001000:	f240 80f9 	bls.w	80011f6 <__udivmoddi4+0x282>
 8001004:	4463      	add	r3, ip
 8001006:	3802      	subs	r0, #2
 8001008:	1b9b      	subs	r3, r3, r6
 800100a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800100e:	2100      	movs	r1, #0
 8001010:	b11d      	cbz	r5, 800101a <__udivmoddi4+0xa6>
 8001012:	40d3      	lsrs	r3, r2
 8001014:	2200      	movs	r2, #0
 8001016:	e9c5 3200 	strd	r3, r2, [r5]
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	428b      	cmp	r3, r1
 8001020:	d905      	bls.n	800102e <__udivmoddi4+0xba>
 8001022:	b10d      	cbz	r5, 8001028 <__udivmoddi4+0xb4>
 8001024:	e9c5 0100 	strd	r0, r1, [r5]
 8001028:	2100      	movs	r1, #0
 800102a:	4608      	mov	r0, r1
 800102c:	e7f5      	b.n	800101a <__udivmoddi4+0xa6>
 800102e:	fab3 f183 	clz	r1, r3
 8001032:	2900      	cmp	r1, #0
 8001034:	d146      	bne.n	80010c4 <__udivmoddi4+0x150>
 8001036:	42a3      	cmp	r3, r4
 8001038:	d302      	bcc.n	8001040 <__udivmoddi4+0xcc>
 800103a:	4290      	cmp	r0, r2
 800103c:	f0c0 80f0 	bcc.w	8001220 <__udivmoddi4+0x2ac>
 8001040:	1a86      	subs	r6, r0, r2
 8001042:	eb64 0303 	sbc.w	r3, r4, r3
 8001046:	2001      	movs	r0, #1
 8001048:	2d00      	cmp	r5, #0
 800104a:	d0e6      	beq.n	800101a <__udivmoddi4+0xa6>
 800104c:	e9c5 6300 	strd	r6, r3, [r5]
 8001050:	e7e3      	b.n	800101a <__udivmoddi4+0xa6>
 8001052:	2a00      	cmp	r2, #0
 8001054:	f040 8090 	bne.w	8001178 <__udivmoddi4+0x204>
 8001058:	eba1 040c 	sub.w	r4, r1, ip
 800105c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001060:	fa1f f78c 	uxth.w	r7, ip
 8001064:	2101      	movs	r1, #1
 8001066:	fbb4 f6f8 	udiv	r6, r4, r8
 800106a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800106e:	fb08 4416 	mls	r4, r8, r6, r4
 8001072:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001076:	fb07 f006 	mul.w	r0, r7, r6
 800107a:	4298      	cmp	r0, r3
 800107c:	d908      	bls.n	8001090 <__udivmoddi4+0x11c>
 800107e:	eb1c 0303 	adds.w	r3, ip, r3
 8001082:	f106 34ff 	add.w	r4, r6, #4294967295
 8001086:	d202      	bcs.n	800108e <__udivmoddi4+0x11a>
 8001088:	4298      	cmp	r0, r3
 800108a:	f200 80cd 	bhi.w	8001228 <__udivmoddi4+0x2b4>
 800108e:	4626      	mov	r6, r4
 8001090:	1a1c      	subs	r4, r3, r0
 8001092:	fa1f f38e 	uxth.w	r3, lr
 8001096:	fbb4 f0f8 	udiv	r0, r4, r8
 800109a:	fb08 4410 	mls	r4, r8, r0, r4
 800109e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010a2:	fb00 f707 	mul.w	r7, r0, r7
 80010a6:	429f      	cmp	r7, r3
 80010a8:	d908      	bls.n	80010bc <__udivmoddi4+0x148>
 80010aa:	eb1c 0303 	adds.w	r3, ip, r3
 80010ae:	f100 34ff 	add.w	r4, r0, #4294967295
 80010b2:	d202      	bcs.n	80010ba <__udivmoddi4+0x146>
 80010b4:	429f      	cmp	r7, r3
 80010b6:	f200 80b0 	bhi.w	800121a <__udivmoddi4+0x2a6>
 80010ba:	4620      	mov	r0, r4
 80010bc:	1bdb      	subs	r3, r3, r7
 80010be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010c2:	e7a5      	b.n	8001010 <__udivmoddi4+0x9c>
 80010c4:	f1c1 0620 	rsb	r6, r1, #32
 80010c8:	408b      	lsls	r3, r1
 80010ca:	fa22 f706 	lsr.w	r7, r2, r6
 80010ce:	431f      	orrs	r7, r3
 80010d0:	fa20 fc06 	lsr.w	ip, r0, r6
 80010d4:	fa04 f301 	lsl.w	r3, r4, r1
 80010d8:	ea43 030c 	orr.w	r3, r3, ip
 80010dc:	40f4      	lsrs	r4, r6
 80010de:	fa00 f801 	lsl.w	r8, r0, r1
 80010e2:	0c38      	lsrs	r0, r7, #16
 80010e4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80010e8:	fbb4 fef0 	udiv	lr, r4, r0
 80010ec:	fa1f fc87 	uxth.w	ip, r7
 80010f0:	fb00 441e 	mls	r4, r0, lr, r4
 80010f4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010f8:	fb0e f90c 	mul.w	r9, lr, ip
 80010fc:	45a1      	cmp	r9, r4
 80010fe:	fa02 f201 	lsl.w	r2, r2, r1
 8001102:	d90a      	bls.n	800111a <__udivmoddi4+0x1a6>
 8001104:	193c      	adds	r4, r7, r4
 8001106:	f10e 3aff 	add.w	sl, lr, #4294967295
 800110a:	f080 8084 	bcs.w	8001216 <__udivmoddi4+0x2a2>
 800110e:	45a1      	cmp	r9, r4
 8001110:	f240 8081 	bls.w	8001216 <__udivmoddi4+0x2a2>
 8001114:	f1ae 0e02 	sub.w	lr, lr, #2
 8001118:	443c      	add	r4, r7
 800111a:	eba4 0409 	sub.w	r4, r4, r9
 800111e:	fa1f f983 	uxth.w	r9, r3
 8001122:	fbb4 f3f0 	udiv	r3, r4, r0
 8001126:	fb00 4413 	mls	r4, r0, r3, r4
 800112a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800112e:	fb03 fc0c 	mul.w	ip, r3, ip
 8001132:	45a4      	cmp	ip, r4
 8001134:	d907      	bls.n	8001146 <__udivmoddi4+0x1d2>
 8001136:	193c      	adds	r4, r7, r4
 8001138:	f103 30ff 	add.w	r0, r3, #4294967295
 800113c:	d267      	bcs.n	800120e <__udivmoddi4+0x29a>
 800113e:	45a4      	cmp	ip, r4
 8001140:	d965      	bls.n	800120e <__udivmoddi4+0x29a>
 8001142:	3b02      	subs	r3, #2
 8001144:	443c      	add	r4, r7
 8001146:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800114a:	fba0 9302 	umull	r9, r3, r0, r2
 800114e:	eba4 040c 	sub.w	r4, r4, ip
 8001152:	429c      	cmp	r4, r3
 8001154:	46ce      	mov	lr, r9
 8001156:	469c      	mov	ip, r3
 8001158:	d351      	bcc.n	80011fe <__udivmoddi4+0x28a>
 800115a:	d04e      	beq.n	80011fa <__udivmoddi4+0x286>
 800115c:	b155      	cbz	r5, 8001174 <__udivmoddi4+0x200>
 800115e:	ebb8 030e 	subs.w	r3, r8, lr
 8001162:	eb64 040c 	sbc.w	r4, r4, ip
 8001166:	fa04 f606 	lsl.w	r6, r4, r6
 800116a:	40cb      	lsrs	r3, r1
 800116c:	431e      	orrs	r6, r3
 800116e:	40cc      	lsrs	r4, r1
 8001170:	e9c5 6400 	strd	r6, r4, [r5]
 8001174:	2100      	movs	r1, #0
 8001176:	e750      	b.n	800101a <__udivmoddi4+0xa6>
 8001178:	f1c2 0320 	rsb	r3, r2, #32
 800117c:	fa20 f103 	lsr.w	r1, r0, r3
 8001180:	fa0c fc02 	lsl.w	ip, ip, r2
 8001184:	fa24 f303 	lsr.w	r3, r4, r3
 8001188:	4094      	lsls	r4, r2
 800118a:	430c      	orrs	r4, r1
 800118c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001190:	fa00 fe02 	lsl.w	lr, r0, r2
 8001194:	fa1f f78c 	uxth.w	r7, ip
 8001198:	fbb3 f0f8 	udiv	r0, r3, r8
 800119c:	fb08 3110 	mls	r1, r8, r0, r3
 80011a0:	0c23      	lsrs	r3, r4, #16
 80011a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011a6:	fb00 f107 	mul.w	r1, r0, r7
 80011aa:	4299      	cmp	r1, r3
 80011ac:	d908      	bls.n	80011c0 <__udivmoddi4+0x24c>
 80011ae:	eb1c 0303 	adds.w	r3, ip, r3
 80011b2:	f100 36ff 	add.w	r6, r0, #4294967295
 80011b6:	d22c      	bcs.n	8001212 <__udivmoddi4+0x29e>
 80011b8:	4299      	cmp	r1, r3
 80011ba:	d92a      	bls.n	8001212 <__udivmoddi4+0x29e>
 80011bc:	3802      	subs	r0, #2
 80011be:	4463      	add	r3, ip
 80011c0:	1a5b      	subs	r3, r3, r1
 80011c2:	b2a4      	uxth	r4, r4
 80011c4:	fbb3 f1f8 	udiv	r1, r3, r8
 80011c8:	fb08 3311 	mls	r3, r8, r1, r3
 80011cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011d0:	fb01 f307 	mul.w	r3, r1, r7
 80011d4:	42a3      	cmp	r3, r4
 80011d6:	d908      	bls.n	80011ea <__udivmoddi4+0x276>
 80011d8:	eb1c 0404 	adds.w	r4, ip, r4
 80011dc:	f101 36ff 	add.w	r6, r1, #4294967295
 80011e0:	d213      	bcs.n	800120a <__udivmoddi4+0x296>
 80011e2:	42a3      	cmp	r3, r4
 80011e4:	d911      	bls.n	800120a <__udivmoddi4+0x296>
 80011e6:	3902      	subs	r1, #2
 80011e8:	4464      	add	r4, ip
 80011ea:	1ae4      	subs	r4, r4, r3
 80011ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011f0:	e739      	b.n	8001066 <__udivmoddi4+0xf2>
 80011f2:	4604      	mov	r4, r0
 80011f4:	e6f0      	b.n	8000fd8 <__udivmoddi4+0x64>
 80011f6:	4608      	mov	r0, r1
 80011f8:	e706      	b.n	8001008 <__udivmoddi4+0x94>
 80011fa:	45c8      	cmp	r8, r9
 80011fc:	d2ae      	bcs.n	800115c <__udivmoddi4+0x1e8>
 80011fe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001202:	eb63 0c07 	sbc.w	ip, r3, r7
 8001206:	3801      	subs	r0, #1
 8001208:	e7a8      	b.n	800115c <__udivmoddi4+0x1e8>
 800120a:	4631      	mov	r1, r6
 800120c:	e7ed      	b.n	80011ea <__udivmoddi4+0x276>
 800120e:	4603      	mov	r3, r0
 8001210:	e799      	b.n	8001146 <__udivmoddi4+0x1d2>
 8001212:	4630      	mov	r0, r6
 8001214:	e7d4      	b.n	80011c0 <__udivmoddi4+0x24c>
 8001216:	46d6      	mov	lr, sl
 8001218:	e77f      	b.n	800111a <__udivmoddi4+0x1a6>
 800121a:	4463      	add	r3, ip
 800121c:	3802      	subs	r0, #2
 800121e:	e74d      	b.n	80010bc <__udivmoddi4+0x148>
 8001220:	4606      	mov	r6, r0
 8001222:	4623      	mov	r3, r4
 8001224:	4608      	mov	r0, r1
 8001226:	e70f      	b.n	8001048 <__udivmoddi4+0xd4>
 8001228:	3e02      	subs	r6, #2
 800122a:	4463      	add	r3, ip
 800122c:	e730      	b.n	8001090 <__udivmoddi4+0x11c>
 800122e:	bf00      	nop

08001230 <__aeabi_idiv0>:
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <bme280_getVals>:
static uint8_t bme_started_flag = 0;
static uint8_t last_measuring = 1;


void bme280_getVals()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af04      	add	r7, sp, #16
	uint8_t status;
    HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 800123a:	4b3c      	ldr	r3, [pc, #240]	@ (800132c <bme280_getVals+0xf8>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	2364      	movs	r3, #100	@ 0x64
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	2301      	movs	r3, #1
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	f107 030d 	add.w	r3, r7, #13
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	22f3      	movs	r2, #243	@ 0xf3
 8001250:	21ec      	movs	r1, #236	@ 0xec
 8001252:	f008 fec7 	bl	8009fe4 <HAL_I2C_Mem_Read>
 8001256:	4603      	mov	r3, r0
 8001258:	73fb      	strb	r3, [r7, #15]
    BME->isUpdated = 0;
 800125a:	4b35      	ldr	r3, [pc, #212]	@ (8001330 <bme280_getVals+0xfc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    uint8_t current_measuring = ((status & (0x01 << 3)) == 0);
 8001264:	7b7b      	ldrb	r3, [r7, #13]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf0c      	ite	eq
 800126e:	2301      	moveq	r3, #1
 8001270:	2300      	movne	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	73bb      	strb	r3, [r7, #14]

    if ((last_measuring == 1) && (current_measuring == 0)) {
 8001276:	4b2f      	ldr	r3, [pc, #188]	@ (8001334 <bme280_getVals+0x100>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d14f      	bne.n	800131e <bme280_getVals+0xea>
 800127e:	7bbb      	ldrb	r3, [r7, #14]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d14c      	bne.n	800131e <bme280_getVals+0xea>
        uint8_t data[8];
        retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, data, 8, 20);
 8001284:	4b29      	ldr	r3, [pc, #164]	@ (800132c <bme280_getVals+0xf8>)
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	2314      	movs	r3, #20
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2308      	movs	r3, #8
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	22f7      	movs	r2, #247	@ 0xf7
 8001298:	21ec      	movs	r1, #236	@ 0xec
 800129a:	f008 fea3 	bl	8009fe4 <HAL_I2C_Mem_Read>
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]
        if (retVal == HAL_OK && memcmp(data, BME->lastReadings, 8) != 0) {
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d13a      	bne.n	800131e <bme280_getVals+0xea>
 80012a8:	4b21      	ldr	r3, [pc, #132]	@ (8001330 <bme280_getVals+0xfc>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2208      	movs	r2, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f00d f80c 	bl	800e2d2 <memcmp>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d02e      	beq.n	800131e <bme280_getVals+0xea>
            memcpy(BME->lastReadings, data, 8);
 80012c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <bme280_getVals+0xfc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3334      	adds	r3, #52	@ 0x34
 80012c6:	461a      	mov	r2, r3
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	cb03      	ldmia	r3!, {r0, r1}
 80012cc:	6010      	str	r0, [r2, #0]
 80012ce:	6051      	str	r1, [r2, #4]
            BME->isUpdated = 1;
 80012d0:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <bme280_getVals+0xfc>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            BME->adcVals.ut = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | ((int32_t)data[5] >> 4);
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	031a      	lsls	r2, r3, #12
 80012de:	7a3b      	ldrb	r3, [r7, #8]
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	431a      	orrs	r2, r3
 80012e4:	7a7b      	ldrb	r3, [r7, #9]
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4619      	mov	r1, r3
 80012ec:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <bme280_getVals+0xfc>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	609a      	str	r2, [r3, #8]
            BME->adcVals.up = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((int32_t)data[2] >> 4);
 80012f4:	793b      	ldrb	r3, [r7, #4]
 80012f6:	031a      	lsls	r2, r3, #12
 80012f8:	797b      	ldrb	r3, [r7, #5]
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	431a      	orrs	r2, r3
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4619      	mov	r1, r3
 8001306:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <bme280_getVals+0xfc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	60da      	str	r2, [r3, #12]
            BME->adcVals.uh = ((int32_t)data[6] << 8) | ((int32_t)data[7]);
 800130e:	7abb      	ldrb	r3, [r7, #10]
 8001310:	021a      	lsls	r2, r3, #8
 8001312:	7afb      	ldrb	r3, [r7, #11]
 8001314:	4619      	mov	r1, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <bme280_getVals+0xfc>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	611a      	str	r2, [r3, #16]
        }
    }
    last_measuring = current_measuring;
 800131e:	4a05      	ldr	r2, [pc, #20]	@ (8001334 <bme280_getVals+0x100>)
 8001320:	7bbb      	ldrb	r3, [r7, #14]
 8001322:	7013      	strb	r3, [r2, #0]
    UNUSED(retVal);
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000244 	.word	0x20000244
 8001330:	20000248 	.word	0x20000248
 8001334:	20000000 	.word	0x20000000

08001338 <bme280_calculate_altitude>:



void bme280_calculate_altitude() {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
    // Standard sea level pressure in hPa
    float p_seaLevel = 1013.25;
 800133e:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <bme280_calculate_altitude+0x98>)
 8001340:	607b      	str	r3, [r7, #4]

    // Calculate altitude from pressure using barometric formula
    float rawAltitude = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 8001342:	4b24      	ldr	r3, [pc, #144]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	ed93 7a06 	vldr	s14, [r3, #24]
 800134a:	edd7 7a01 	vldr	s15, [r7, #4]
 800134e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001352:	ee16 0a90 	vmov	r0, s13
 8001356:	f7ff f917 	bl	8000588 <__aeabi_f2d>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 80013c0 <bme280_calculate_altitude+0x88>
 8001362:	ec43 2b10 	vmov	d0, r2, r3
 8001366:	f00e fe23 	bl	800ffb0 <pow>
 800136a:	ec53 2b10 	vmov	r2, r3, d0
 800136e:	f04f 0000 	mov.w	r0, #0
 8001372:	4919      	ldr	r1, [pc, #100]	@ (80013d8 <bme280_calculate_altitude+0xa0>)
 8001374:	f7fe ffa8 	bl	80002c8 <__aeabi_dsub>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	a311      	add	r3, pc, #68	@ (adr r3, 80013c8 <bme280_calculate_altitude+0x90>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7ff f957 	bl	8000638 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f7ff fc29 	bl	8000be8 <__aeabi_d2f>
 8001396:	4603      	mov	r3, r0
 8001398:	603b      	str	r3, [r7, #0]

    // Apply base altitude correction
    BME->altitude = rawAltitude - BME->base_altitude;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	ed97 7a00 	vldr	s14, [r7]
 80013aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ae:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	f3af 8000 	nop.w
 80013c0:	ccd9456c 	.word	0xccd9456c
 80013c4:	3fc85b95 	.word	0x3fc85b95
 80013c8:	00000000 	.word	0x00000000
 80013cc:	40e5a540 	.word	0x40e5a540
 80013d0:	447d5000 	.word	0x447d5000
 80013d4:	20000248 	.word	0x20000248
 80013d8:	3ff00000 	.word	0x3ff00000

080013dc <bme280_config>:

void bme280_config()
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	@ 0x38
 80013e0:	af04      	add	r7, sp, #16
    uint8_t params[25];
    HAL_StatusTypeDef retVal;

    BME->base_altitude = 0.0;
 80013e2:	4b99      	ldr	r3, [pc, #612]	@ (8001648 <bme280_config+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset and initialize I2C
    HAL_I2C_DeInit(I2C_);
 80013ec:	4b97      	ldr	r3, [pc, #604]	@ (800164c <bme280_config+0x270>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f008 fccd 	bl	8009d90 <HAL_I2C_DeInit>
    HAL_Delay(5);
 80013f6:	2005      	movs	r0, #5
 80013f8:	f006 ff24 	bl	8008244 <HAL_Delay>
    HAL_I2C_Init(I2C_);
 80013fc:	4b93      	ldr	r3, [pc, #588]	@ (800164c <bme280_config+0x270>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f008 fb81 	bl	8009b08 <HAL_I2C_Init>
    HAL_Delay(5);
 8001406:	2005      	movs	r0, #5
 8001408:	f006 ff1c 	bl	8008244 <HAL_Delay>

    // Read calibration parameters
    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 800140c:	4b8f      	ldr	r3, [pc, #572]	@ (800164c <bme280_config+0x270>)
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	23c8      	movs	r3, #200	@ 0xc8
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	2319      	movs	r3, #25
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	2288      	movs	r2, #136	@ 0x88
 8001420:	21ec      	movs	r1, #236	@ 0xec
 8001422:	f008 fddf 	bl	8009fe4 <HAL_I2C_Mem_Read>
 8001426:	4603      	mov	r3, r0
 8001428:	77fb      	strb	r3, [r7, #31]

    BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 800142a:	793b      	ldrb	r3, [r7, #4]
 800142c:	4619      	mov	r1, r3
 800142e:	797b      	ldrb	r3, [r7, #5]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b84      	ldr	r3, [pc, #528]	@ (8001648 <bme280_config+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	b292      	uxth	r2, r2
 800143e:	801a      	strh	r2, [r3, #0]
    BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	b219      	sxth	r1, r3
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b21a      	sxth	r2, r3
 800144a:	4b7f      	ldr	r3, [pc, #508]	@ (8001648 <bme280_config+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	b212      	sxth	r2, r2
 8001454:	805a      	strh	r2, [r3, #2]
    BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001456:	7a3b      	ldrb	r3, [r7, #8]
 8001458:	b219      	sxth	r1, r3
 800145a:	7a7b      	ldrb	r3, [r7, #9]
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	b21a      	sxth	r2, r3
 8001460:	4b79      	ldr	r3, [pc, #484]	@ (8001648 <bme280_config+0x26c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	b212      	sxth	r2, r2
 800146a:	809a      	strh	r2, [r3, #4]
    BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 800146c:	7abb      	ldrb	r3, [r7, #10]
 800146e:	b21a      	sxth	r2, r3
 8001470:	7afb      	ldrb	r3, [r7, #11]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21b      	sxth	r3, r3
 8001476:	4313      	orrs	r3, r2
 8001478:	b21a      	sxth	r2, r3
 800147a:	4b73      	ldr	r3, [pc, #460]	@ (8001648 <bme280_config+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	b292      	uxth	r2, r2
 8001482:	80da      	strh	r2, [r3, #6]
    BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001484:	7b3b      	ldrb	r3, [r7, #12]
 8001486:	b219      	sxth	r1, r3
 8001488:	7b7b      	ldrb	r3, [r7, #13]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b21a      	sxth	r2, r3
 800148e:	4b6e      	ldr	r3, [pc, #440]	@ (8001648 <bme280_config+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	b212      	sxth	r2, r2
 8001498:	811a      	strh	r2, [r3, #8]
    BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800149a:	7bbb      	ldrb	r3, [r7, #14]
 800149c:	b219      	sxth	r1, r3
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	4b68      	ldr	r3, [pc, #416]	@ (8001648 <bme280_config+0x26c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	b212      	sxth	r2, r2
 80014ae:	815a      	strh	r2, [r3, #10]
    BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 80014b0:	7c3b      	ldrb	r3, [r7, #16]
 80014b2:	b219      	sxth	r1, r3
 80014b4:	7c7b      	ldrb	r3, [r7, #17]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	4b63      	ldr	r3, [pc, #396]	@ (8001648 <bme280_config+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	b212      	sxth	r2, r2
 80014c4:	819a      	strh	r2, [r3, #12]
    BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 80014c6:	7cbb      	ldrb	r3, [r7, #18]
 80014c8:	b219      	sxth	r1, r3
 80014ca:	7cfb      	ldrb	r3, [r7, #19]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	4b5d      	ldr	r3, [pc, #372]	@ (8001648 <bme280_config+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	b212      	sxth	r2, r2
 80014da:	81da      	strh	r2, [r3, #14]
    BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 80014dc:	7d3b      	ldrb	r3, [r7, #20]
 80014de:	b219      	sxth	r1, r3
 80014e0:	7d7b      	ldrb	r3, [r7, #21]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	4b58      	ldr	r3, [pc, #352]	@ (8001648 <bme280_config+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	b212      	sxth	r2, r2
 80014f0:	821a      	strh	r2, [r3, #16]
    BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 80014f2:	7dbb      	ldrb	r3, [r7, #22]
 80014f4:	b219      	sxth	r1, r3
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	4b52      	ldr	r3, [pc, #328]	@ (8001648 <bme280_config+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	b212      	sxth	r2, r2
 8001506:	825a      	strh	r2, [r3, #18]
    BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 8001508:	7e3b      	ldrb	r3, [r7, #24]
 800150a:	b219      	sxth	r1, r3
 800150c:	7e7b      	ldrb	r3, [r7, #25]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	4b4d      	ldr	r3, [pc, #308]	@ (8001648 <bme280_config+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	b212      	sxth	r2, r2
 800151c:	829a      	strh	r2, [r3, #20]
    BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 800151e:	7ebb      	ldrb	r3, [r7, #26]
 8001520:	b219      	sxth	r1, r3
 8001522:	7efb      	ldrb	r3, [r7, #27]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	b21a      	sxth	r2, r3
 8001528:	4b47      	ldr	r3, [pc, #284]	@ (8001648 <bme280_config+0x26c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	b212      	sxth	r2, r2
 8001532:	82da      	strh	r2, [r3, #22]
    BME->parameters->dig_H1 = params[24];
 8001534:	4b44      	ldr	r3, [pc, #272]	@ (8001648 <bme280_config+0x26c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	7f3a      	ldrb	r2, [r7, #28]
 800153c:	761a      	strb	r2, [r3, #24]

    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 800153e:	4b43      	ldr	r3, [pc, #268]	@ (800164c <bme280_config+0x270>)
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	2332      	movs	r3, #50	@ 0x32
 8001544:	9302      	str	r3, [sp, #8]
 8001546:	2307      	movs	r3, #7
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2301      	movs	r3, #1
 8001550:	22e1      	movs	r2, #225	@ 0xe1
 8001552:	21ec      	movs	r1, #236	@ 0xec
 8001554:	f008 fd46 	bl	8009fe4 <HAL_I2C_Mem_Read>
 8001558:	4603      	mov	r3, r0
 800155a:	77fb      	strb	r3, [r7, #31]
    BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800155c:	793b      	ldrb	r3, [r7, #4]
 800155e:	b219      	sxth	r1, r3
 8001560:	797b      	ldrb	r3, [r7, #5]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b21a      	sxth	r2, r3
 8001566:	4b38      	ldr	r3, [pc, #224]	@ (8001648 <bme280_config+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	b212      	sxth	r2, r2
 8001570:	835a      	strh	r2, [r3, #26]
    BME->parameters->dig_H3 = params[2];
 8001572:	4b35      	ldr	r3, [pc, #212]	@ (8001648 <bme280_config+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	79ba      	ldrb	r2, [r7, #6]
 800157a:	771a      	strb	r2, [r3, #28]
    BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800157c:	7a3b      	ldrb	r3, [r7, #8]
 800157e:	b21b      	sxth	r3, r3
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	b219      	sxth	r1, r3
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	b21a      	sxth	r2, r3
 800158c:	4b2e      	ldr	r3, [pc, #184]	@ (8001648 <bme280_config+0x26c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	b212      	sxth	r2, r2
 8001596:	83da      	strh	r2, [r3, #30]
    BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001598:	7a3b      	ldrb	r3, [r7, #8]
 800159a:	091b      	lsrs	r3, r3, #4
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b219      	sxth	r1, r3
 80015a0:	7a7b      	ldrb	r3, [r7, #9]
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	4b28      	ldr	r3, [pc, #160]	@ (8001648 <bme280_config+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	b212      	sxth	r2, r2
 80015b0:	841a      	strh	r2, [r3, #32]
    BME->parameters->dig_H6 = params[6];
 80015b2:	7aba      	ldrb	r2, [r7, #10]
 80015b4:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <bme280_config+0x26c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b252      	sxtb	r2, r2
 80015bc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    uint8_t data_ctrl = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_output_speed;
 80015c4:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <bme280_config+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	799b      	ldrb	r3, [r3, #6]
 80015ca:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 80015cc:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <bme280_config+0x270>)
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	2332      	movs	r3, #50	@ 0x32
 80015d2:	9302      	str	r3, [sp, #8]
 80015d4:	2301      	movs	r3, #1
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	1cfb      	adds	r3, r7, #3
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2301      	movs	r3, #1
 80015de:	22f2      	movs	r2, #242	@ 0xf2
 80015e0:	21ec      	movs	r1, #236	@ 0xec
 80015e2:	f008 fc05 	bl	8009df0 <HAL_I2C_Mem_Write>
 80015e6:	4603      	mov	r3, r0
 80015e8:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);
 80015ee:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <bme280_config+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	795b      	ldrb	r3, [r3, #5]
 80015f4:	b25a      	sxtb	r2, r3
 80015f6:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <bme280_config+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	799b      	ldrb	r3, [r3, #6]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b25a      	sxtb	r2, r3
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <bme280_config+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	799b      	ldrb	r3, [r3, #6]
 800160a:	015b      	lsls	r3, r3, #5
 800160c:	b25b      	sxtb	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	b25b      	sxtb	r3, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <bme280_config+0x270>)
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	2332      	movs	r3, #50	@ 0x32
 800161c:	9302      	str	r3, [sp, #8]
 800161e:	2301      	movs	r3, #1
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	1cfb      	adds	r3, r7, #3
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2301      	movs	r3, #1
 8001628:	22f4      	movs	r2, #244	@ 0xf4
 800162a:	21ec      	movs	r1, #236	@ 0xec
 800162c:	f008 fbe0 	bl	8009df0 <HAL_I2C_Mem_Write>
 8001630:	4603      	mov	r3, r0
 8001632:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	70fb      	strb	r3, [r7, #3]
    data_ctrl = (BME->device_config.bme280_standby_time << 5) | (BME->device_config.bme280_filter << 2);
 8001638:	4b03      	ldr	r3, [pc, #12]	@ (8001648 <bme280_config+0x26c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	79db      	ldrb	r3, [r3, #7]
 800163e:	015b      	lsls	r3, r3, #5
 8001640:	b25a      	sxtb	r2, r3
 8001642:	4b01      	ldr	r3, [pc, #4]	@ (8001648 <bme280_config+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	e003      	b.n	8001650 <bme280_config+0x274>
 8001648:	20000248 	.word	0x20000248
 800164c:	20000244 	.word	0x20000244
 8001650:	791b      	ldrb	r3, [r3, #4]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	b25b      	sxtb	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b25b      	sxtb	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800165e:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <bme280_config+0x2fc>)
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	2332      	movs	r3, #50	@ 0x32
 8001664:	9302      	str	r3, [sp, #8]
 8001666:	2301      	movs	r3, #1
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	1cfb      	adds	r3, r7, #3
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2301      	movs	r3, #1
 8001670:	22f5      	movs	r2, #245	@ 0xf5
 8001672:	21ec      	movs	r1, #236	@ 0xec
 8001674:	f008 fbbc 	bl	8009df0 <HAL_I2C_Mem_Write>
 8001678:	4603      	mov	r3, r0
 800167a:	77fb      	strb	r3, [r7, #31]

    // Take base altitude readings
    float base = 0.0;
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_Delay(100);
 8001682:	2064      	movs	r0, #100	@ 0x64
 8001684:	f006 fdde 	bl	8008244 <HAL_Delay>

    for(int i = 0; i < 50; i++) {
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
 800168c:	e011      	b.n	80016b2 <bme280_config+0x2d6>
        bme280_update();
 800168e:	f000 f861 	bl	8001754 <bme280_update>
        base += BME->altitude;
 8001692:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <bme280_config+0x300>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	edd3 7a08 	vldr	s15, [r3, #32]
 800169a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        HAL_Delay(30);
 80016a6:	201e      	movs	r0, #30
 80016a8:	f006 fdcc 	bl	8008244 <HAL_Delay>
    for(int i = 0; i < 50; i++) {
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	3301      	adds	r3, #1
 80016b0:	623b      	str	r3, [r7, #32]
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	2b31      	cmp	r3, #49	@ 0x31
 80016b6:	ddea      	ble.n	800168e <bme280_config+0x2b2>
    }
    BME->base_altitude = (base / 50.0);
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <bme280_config+0x300>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80016c0:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80016e0 <bme280_config+0x304>
 80016c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bme280_update();
 80016cc:	f000 f842 	bl	8001754 <bme280_update>

    UNUSED(retVal);
}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	@ 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000244 	.word	0x20000244
 80016dc:	20000248 	.word	0x20000248
 80016e0:	42480000 	.word	0x42480000

080016e4 <bme280_init>:

void bme280_init(BME_280_t* BME_sensor, I2C_HandleTypeDef* I2C_bme)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af04      	add	r7, sp, #16
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
    BME = BME_sensor;
 80016ee:	4a14      	ldr	r2, [pc, #80]	@ (8001740 <bme280_init+0x5c>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6013      	str	r3, [r2, #0]
    I2C_ = I2C_bme;
 80016f4:	4a13      	ldr	r2, [pc, #76]	@ (8001744 <bme280_init+0x60>)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	6013      	str	r3, [r2, #0]
    BME->parameters = &bme_params;
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <bme280_init+0x5c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a12      	ldr	r2, [pc, #72]	@ (8001748 <bme280_init+0x64>)
 8001700:	601a      	str	r2, [r3, #0]
    bme_started_flag = 0;
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <bme280_init+0x68>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]

    // Check BME280 ID
    uint8_t buf[1];
    HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8001708:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <bme280_init+0x60>)
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	2332      	movs	r3, #50	@ 0x32
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	2301      	movs	r3, #1
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2301      	movs	r3, #1
 800171c:	22d0      	movs	r2, #208	@ 0xd0
 800171e:	21ec      	movs	r1, #236	@ 0xec
 8001720:	f008 fc60 	bl	8009fe4 <HAL_I2C_Mem_Read>
    if(*buf == 0x60)
 8001724:	7b3b      	ldrb	r3, [r7, #12]
 8001726:	2b60      	cmp	r3, #96	@ 0x60
 8001728:	d103      	bne.n	8001732 <bme280_init+0x4e>
        is_BME_ok = 1;
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <bme280_init+0x6c>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]
    else
        is_BME_ok = 0;
}
 8001730:	e002      	b.n	8001738 <bme280_init+0x54>
        is_BME_ok = 0;
 8001732:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <bme280_init+0x6c>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000248 	.word	0x20000248
 8001744:	20000244 	.word	0x20000244
 8001748:	200007b8 	.word	0x200007b8
 800174c:	2000024c 	.word	0x2000024c
 8001750:	200007dc 	.word	0x200007dc

08001754 <bme280_update>:

void bme280_update() {
 8001754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001758:	b0d2      	sub	sp, #328	@ 0x148
 800175a:	af00      	add	r7, sp, #0
    int32_t var1_t, var2_t, T, adc_T;
    bme280_getVals();
 800175c:	f7ff fd6a 	bl	8001234 <bme280_getVals>

    if(BME->isUpdated == 1){
 8001760:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <bme280_update+0x88>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001768:	2b01      	cmp	r3, #1
 800176a:	f040 840d 	bne.w	8001f88 <bme280_update+0x834>

    	if (!bme_started_flag) {
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <bme280_update+0x8c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d112      	bne.n	800179c <bme280_update+0x48>
    	    bme_started_flag = 1;
 8001776:	4a1a      	ldr	r2, [pc, #104]	@ (80017e0 <bme280_update+0x8c>)
 8001778:	2301      	movs	r3, #1
 800177a:	7013      	strb	r3, [r2, #0]
    	    BME->lastTime = HAL_GetTick();
 800177c:	f006 fd56 	bl	800822c <HAL_GetTick>
 8001780:	ee07 0a90 	vmov	s15, r0
 8001784:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <bme280_update+0x88>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800178c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	    BME->deltaTime1 = 0.0f;
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <bme280_update+0x88>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	e041      	b.n	8001820 <bme280_update+0xcc>
    	} else {
    	    uint32_t now = HAL_GetTick();
 800179c:	f006 fd46 	bl	800822c <HAL_GetTick>
 80017a0:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    	    BME->deltaTime1 = (now > BME->lastTime) ? (now - BME->lastTime) : 0.0f;
 80017a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017b0:	4b0a      	ldr	r3, [pc, #40]	@ (80017dc <bme280_update+0x88>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80017b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	dd12      	ble.n	80017e8 <bme280_update+0x94>
 80017c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80017c6:	ee07 3a90 	vmov	s15, r3
 80017ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ce:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <bme280_update+0x88>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	e007      	b.n	80017ec <bme280_update+0x98>
 80017dc:	20000248 	.word	0x20000248
 80017e0:	2000024c 	.word	0x2000024c
 80017e4:	00000000 	.word	0x00000000
 80017e8:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 80017e4 <bme280_update+0x90>
 80017ec:	4bda      	ldr	r3, [pc, #872]	@ (8001b58 <bme280_update+0x404>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->deltaTime1 = BME->deltaTime1 / 1000.0f;
 80017f4:	4bd8      	ldr	r3, [pc, #864]	@ (8001b58 <bme280_update+0x404>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80017fc:	4bd6      	ldr	r3, [pc, #856]	@ (8001b58 <bme280_update+0x404>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8001b5c <bme280_update+0x408>
 8001804:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001808:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->lastTime = now;
 800180c:	4bd2      	ldr	r3, [pc, #840]	@ (8001b58 <bme280_update+0x404>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001814:	ee07 2a90 	vmov	s15, r2
 8001818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800181c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	}

        //For temperature
        adc_T = BME->adcVals.ut;
 8001820:	4bcd      	ldr	r3, [pc, #820]	@ (8001b58 <bme280_update+0x404>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 800182a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800182e:	10da      	asrs	r2, r3, #3
 8001830:	4bc9      	ldr	r3, [pc, #804]	@ (8001b58 <bme280_update+0x404>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	1ad2      	subs	r2, r2, r3
 800183c:	4bc6      	ldr	r3, [pc, #792]	@ (8001b58 <bme280_update+0x404>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	12db      	asrs	r3, r3, #11
 800184c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001850:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001854:	111a      	asrs	r2, r3, #4
 8001856:	4bc0      	ldr	r3, [pc, #768]	@ (8001b58 <bme280_update+0x404>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	1ad1      	subs	r1, r2, r3
 8001860:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001864:	111a      	asrs	r2, r3, #4
 8001866:	4bbc      	ldr	r3, [pc, #752]	@ (8001b58 <bme280_update+0x404>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	131a      	asrs	r2, r3, #12
 8001876:	4bb8      	ldr	r3, [pc, #736]	@ (8001b58 <bme280_update+0x404>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	139b      	asrs	r3, r3, #14
 8001886:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        int32_t t_fine = var1_t + var2_t;
 800188a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800188e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001892:	4413      	add	r3, r2
 8001894:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        T = (t_fine * 5 + 128) >> 8;
 8001898:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	3380      	adds	r3, #128	@ 0x80
 80018a4:	121b      	asrs	r3, r3, #8
 80018a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        BME->temperature = (float)T / 100.0;
 80018aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b6:	4ba8      	ldr	r3, [pc, #672]	@ (8001b58 <bme280_update+0x404>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001b60 <bme280_update+0x40c>
 80018be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c2:	edc3 7a05 	vstr	s15, [r3, #20]

        //For pressure
        int64_t var1_p, var2_p, P, adc_P;
        adc_P = (int64_t)BME->adcVals.up;
 80018c6:	4ba4      	ldr	r3, [pc, #656]	@ (8001b58 <bme280_update+0x404>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	17da      	asrs	r2, r3, #31
 80018ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80018d0:	657a      	str	r2, [r7, #84]	@ 0x54
 80018d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80018d6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
        var1_p = ((int64_t)t_fine) - 128000;
 80018da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018de:	17da      	asrs	r2, r3, #31
 80018e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80018e4:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80018e8:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80018ec:	460b      	mov	r3, r1
 80018ee:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 80018f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018f4:	4613      	mov	r3, r2
 80018f6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80018fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001900:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 8001904:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001908:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800190c:	fb03 f102 	mul.w	r1, r3, r2
 8001910:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001914:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001918:	fb02 f303 	mul.w	r3, r2, r3
 800191c:	18ca      	adds	r2, r1, r3
 800191e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001922:	fba3 4503 	umull	r4, r5, r3, r3
 8001926:	1953      	adds	r3, r2, r5
 8001928:	461d      	mov	r5, r3
 800192a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b58 <bme280_update+0x404>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001934:	b21b      	sxth	r3, r3
 8001936:	17da      	asrs	r2, r3, #31
 8001938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800193c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001940:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001944:	4603      	mov	r3, r0
 8001946:	fb03 f205 	mul.w	r2, r3, r5
 800194a:	460b      	mov	r3, r1
 800194c:	fb04 f303 	mul.w	r3, r4, r3
 8001950:	4413      	add	r3, r2
 8001952:	4602      	mov	r2, r0
 8001954:	fba4 1202 	umull	r1, r2, r4, r2
 8001958:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800195c:	460a      	mov	r2, r1
 800195e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001962:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001966:	4413      	add	r3, r2
 8001968:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800196c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001970:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8001974:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001978:	4b77      	ldr	r3, [pc, #476]	@ (8001b58 <bme280_update+0x404>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001982:	b21b      	sxth	r3, r3
 8001984:	17da      	asrs	r2, r3, #31
 8001986:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800198a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800198e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001992:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001996:	462a      	mov	r2, r5
 8001998:	fb02 f203 	mul.w	r2, r2, r3
 800199c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80019a0:	4621      	mov	r1, r4
 80019a2:	fb01 f303 	mul.w	r3, r1, r3
 80019a6:	441a      	add	r2, r3
 80019a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019ac:	4621      	mov	r1, r4
 80019ae:	fba3 ab01 	umull	sl, fp, r3, r1
 80019b2:	eb02 030b 	add.w	r3, r2, fp
 80019b6:	469b      	mov	fp, r3
 80019b8:	f04f 0000 	mov.w	r0, #0
 80019bc:	f04f 0100 	mov.w	r1, #0
 80019c0:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80019c4:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 80019c8:	ea4f 404a 	mov.w	r0, sl, lsl #17
 80019cc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80019d0:	1814      	adds	r4, r2, r0
 80019d2:	643c      	str	r4, [r7, #64]	@ 0x40
 80019d4:	414b      	adcs	r3, r1
 80019d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80019d8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80019dc:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 80019e0:	4b5d      	ldr	r3, [pc, #372]	@ (8001b58 <bme280_update+0x404>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	17da      	asrs	r2, r3, #31
 80019ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80019f2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80019f6:	f04f 0000 	mov.w	r0, #0
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a02:	00d9      	lsls	r1, r3, #3
 8001a04:	2000      	movs	r0, #0
 8001a06:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a0a:	1814      	adds	r4, r2, r0
 8001a0c:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001a0e:	414b      	adcs	r3, r1
 8001a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a12:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001a16:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001a1a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a22:	fb03 f102 	mul.w	r1, r3, r2
 8001a26:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	18ca      	adds	r2, r1, r3
 8001a34:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a38:	fba3 8903 	umull	r8, r9, r3, r3
 8001a3c:	eb02 0309 	add.w	r3, r2, r9
 8001a40:	4699      	mov	r9, r3
 8001a42:	4b45      	ldr	r3, [pc, #276]	@ (8001b58 <bme280_update+0x404>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	17da      	asrs	r2, r3, #31
 8001a50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001a58:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	fb03 f209 	mul.w	r2, r3, r9
 8001a62:	460b      	mov	r3, r1
 8001a64:	fb08 f303 	mul.w	r3, r8, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	fba8 1202 	umull	r1, r2, r8, r2
 8001a70:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001a74:	460a      	mov	r2, r1
 8001a76:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001a7a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001a7e:	4413      	add	r3, r2
 8001a80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001a84:	f04f 0000 	mov.w	r0, #0
 8001a88:	f04f 0100 	mov.w	r1, #0
 8001a8c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001a90:	4623      	mov	r3, r4
 8001a92:	0a18      	lsrs	r0, r3, #8
 8001a94:	462b      	mov	r3, r5
 8001a96:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a9a:	462b      	mov	r3, r5
 8001a9c:	1219      	asrs	r1, r3, #8
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b58 <bme280_update+0x404>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	17da      	asrs	r2, r3, #31
 8001aac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001ab0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001ab4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ab8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001abc:	464a      	mov	r2, r9
 8001abe:	fb02 f203 	mul.w	r2, r2, r3
 8001ac2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001ac6:	4644      	mov	r4, r8
 8001ac8:	fb04 f303 	mul.w	r3, r4, r3
 8001acc:	441a      	add	r2, r3
 8001ace:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ad2:	4644      	mov	r4, r8
 8001ad4:	fba3 4304 	umull	r4, r3, r3, r4
 8001ad8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001adc:	4623      	mov	r3, r4
 8001ade:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ae6:	18d3      	adds	r3, r2, r3
 8001ae8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001af8:	464c      	mov	r4, r9
 8001afa:	0323      	lsls	r3, r4, #12
 8001afc:	4644      	mov	r4, r8
 8001afe:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001b02:	4644      	mov	r4, r8
 8001b04:	0322      	lsls	r2, r4, #12
 8001b06:	1884      	adds	r4, r0, r2
 8001b08:	633c      	str	r4, [r7, #48]	@ 0x30
 8001b0a:	eb41 0303 	adc.w	r3, r1, r3
 8001b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b10:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001b14:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
        var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8001b18:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001b1c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001b20:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001b24:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <bme280_update+0x404>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	88db      	ldrh	r3, [r3, #6]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2200      	movs	r2, #0
 8001b34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001b38:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001b3c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001b40:	462b      	mov	r3, r5
 8001b42:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001b46:	4642      	mov	r2, r8
 8001b48:	fb02 f203 	mul.w	r2, r2, r3
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	4621      	mov	r1, r4
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	e005      	b.n	8001b64 <bme280_update+0x410>
 8001b58:	20000248 	.word	0x20000248
 8001b5c:	447a0000 	.word	0x447a0000
 8001b60:	42c80000 	.word	0x42c80000
 8001b64:	4622      	mov	r2, r4
 8001b66:	4641      	mov	r1, r8
 8001b68:	fba2 1201 	umull	r1, r2, r2, r1
 8001b6c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001b70:	460a      	mov	r2, r1
 8001b72:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001b76:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	104a      	asrs	r2, r1, #1
 8001b90:	4629      	mov	r1, r5
 8001b92:	17cb      	asrs	r3, r1, #31
 8001b94:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        if(var1_p == 0)
 8001b98:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	d106      	bne.n	8001bae <bme280_update+0x45a>
        {
            P = 0;
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8001bac:	e14b      	b.n	8001e46 <bme280_update+0x6f2>
        }
        else
        {
            P = 1048576 - adc_P;
 8001bae:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 8001bb8:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001bba:	eb61 0303 	sbc.w	r3, r1, r3
 8001bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bc0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001bc4:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
            P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001bc8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001bcc:	f04f 0000 	mov.w	r0, #0
 8001bd0:	f04f 0100 	mov.w	r1, #0
 8001bd4:	07d9      	lsls	r1, r3, #31
 8001bd6:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001bda:	07d0      	lsls	r0, r2, #31
 8001bdc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001be0:	1a84      	subs	r4, r0, r2
 8001be2:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8001be6:	eb61 0303 	sbc.w	r3, r1, r3
 8001bea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001bee:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	462b      	mov	r3, r5
 8001bf6:	1891      	adds	r1, r2, r2
 8001bf8:	6239      	str	r1, [r7, #32]
 8001bfa:	415b      	adcs	r3, r3
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c02:	4621      	mov	r1, r4
 8001c04:	1851      	adds	r1, r2, r1
 8001c06:	61b9      	str	r1, [r7, #24]
 8001c08:	4629      	mov	r1, r5
 8001c0a:	414b      	adcs	r3, r1
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c1a:	4649      	mov	r1, r9
 8001c1c:	018b      	lsls	r3, r1, #6
 8001c1e:	4641      	mov	r1, r8
 8001c20:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c24:	4641      	mov	r1, r8
 8001c26:	018a      	lsls	r2, r1, #6
 8001c28:	4641      	mov	r1, r8
 8001c2a:	1889      	adds	r1, r1, r2
 8001c2c:	6139      	str	r1, [r7, #16]
 8001c2e:	4649      	mov	r1, r9
 8001c30:	eb43 0101 	adc.w	r1, r3, r1
 8001c34:	6179      	str	r1, [r7, #20]
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c42:	4649      	mov	r1, r9
 8001c44:	008b      	lsls	r3, r1, #2
 8001c46:	4641      	mov	r1, r8
 8001c48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c4c:	4641      	mov	r1, r8
 8001c4e:	008a      	lsls	r2, r1, #2
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	4603      	mov	r3, r0
 8001c56:	4622      	mov	r2, r4
 8001c58:	189b      	adds	r3, r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	462a      	mov	r2, r5
 8001c60:	eb42 0303 	adc.w	r3, r2, r3
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001c72:	4649      	mov	r1, r9
 8001c74:	008b      	lsls	r3, r1, #2
 8001c76:	4641      	mov	r1, r8
 8001c78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c7c:	4641      	mov	r1, r8
 8001c7e:	008a      	lsls	r2, r1, #2
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	4603      	mov	r3, r0
 8001c86:	4622      	mov	r2, r4
 8001c88:	189b      	adds	r3, r3, r2
 8001c8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001c8e:	462b      	mov	r3, r5
 8001c90:	460a      	mov	r2, r1
 8001c92:	eb42 0303 	adc.w	r3, r2, r3
 8001c96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c9a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001ca2:	f7ff f8ff 	bl	8000ea4 <__aeabi_ldivmod>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
            var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001cae:	4bb9      	ldr	r3, [pc, #740]	@ (8001f94 <bme280_update+0x840>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	17da      	asrs	r2, r3, #31
 8001cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001cbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001cc0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001cc4:	f04f 0000 	mov.w	r0, #0
 8001cc8:	f04f 0100 	mov.w	r1, #0
 8001ccc:	0b50      	lsrs	r0, r2, #13
 8001cce:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001cd2:	1359      	asrs	r1, r3, #13
 8001cd4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001cd8:	462b      	mov	r3, r5
 8001cda:	fb00 f203 	mul.w	r2, r0, r3
 8001cde:	4623      	mov	r3, r4
 8001ce0:	fb03 f301 	mul.w	r3, r3, r1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	4622      	mov	r2, r4
 8001ce8:	fba2 1200 	umull	r1, r2, r2, r0
 8001cec:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001cf6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001d00:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001d04:	f04f 0000 	mov.w	r0, #0
 8001d08:	f04f 0100 	mov.w	r1, #0
 8001d0c:	0b50      	lsrs	r0, r2, #13
 8001d0e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d12:	1359      	asrs	r1, r3, #13
 8001d14:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001d18:	462b      	mov	r3, r5
 8001d1a:	fb00 f203 	mul.w	r2, r0, r3
 8001d1e:	4623      	mov	r3, r4
 8001d20:	fb03 f301 	mul.w	r3, r3, r1
 8001d24:	4413      	add	r3, r2
 8001d26:	4622      	mov	r2, r4
 8001d28:	fba2 1200 	umull	r1, r2, r2, r0
 8001d2c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001d30:	460a      	mov	r2, r1
 8001d32:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001d36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	0e4a      	lsrs	r2, r1, #25
 8001d50:	4629      	mov	r1, r5
 8001d52:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001d56:	4629      	mov	r1, r5
 8001d58:	164b      	asrs	r3, r1, #25
 8001d5a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 8001d5e:	4b8d      	ldr	r3, [pc, #564]	@ (8001f94 <bme280_update+0x840>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	17da      	asrs	r2, r3, #31
 8001d6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001d6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d70:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001d74:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001d78:	462a      	mov	r2, r5
 8001d7a:	fb02 f203 	mul.w	r2, r2, r3
 8001d7e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001d82:	4621      	mov	r1, r4
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001d8e:	4621      	mov	r1, r4
 8001d90:	fba2 1201 	umull	r1, r2, r2, r1
 8001d94:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001d98:	460a      	mov	r2, r1
 8001d9a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001d9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001da2:	4413      	add	r3, r2
 8001da4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001db4:	4621      	mov	r1, r4
 8001db6:	0cca      	lsrs	r2, r1, #19
 8001db8:	4629      	mov	r1, r5
 8001dba:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	14cb      	asrs	r3, r1, #19
 8001dc2:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
            P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 8001dc6:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001dca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001dce:	1884      	adds	r4, r0, r2
 8001dd0:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001dd2:	eb41 0303 	adc.w	r3, r1, r3
 8001dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001dd8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001ddc:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001de0:	4621      	mov	r1, r4
 8001de2:	1889      	adds	r1, r1, r2
 8001de4:	6639      	str	r1, [r7, #96]	@ 0x60
 8001de6:	4629      	mov	r1, r5
 8001de8:	eb43 0101 	adc.w	r1, r3, r1
 8001dec:	6679      	str	r1, [r7, #100]	@ 0x64
 8001dee:	f04f 0000 	mov.w	r0, #0
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001dfa:	4623      	mov	r3, r4
 8001dfc:	0a18      	lsrs	r0, r3, #8
 8001dfe:	462b      	mov	r3, r5
 8001e00:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001e04:	462b      	mov	r3, r5
 8001e06:	1219      	asrs	r1, r3, #8
 8001e08:	4b62      	ldr	r3, [pc, #392]	@ (8001f94 <bme280_update+0x840>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	17da      	asrs	r2, r3, #31
 8001e16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e18:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001e26:	464c      	mov	r4, r9
 8001e28:	0123      	lsls	r3, r4, #4
 8001e2a:	4644      	mov	r4, r8
 8001e2c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001e30:	4644      	mov	r4, r8
 8001e32:	0122      	lsls	r2, r4, #4
 8001e34:	1884      	adds	r4, r0, r2
 8001e36:	603c      	str	r4, [r7, #0]
 8001e38:	eb41 0303 	adc.w	r3, r1, r3
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e42:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
        }

        BME->pressure = ((float)P / 256.0 / 100.0);
 8001e46:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001e4a:	f7fe ffed 	bl	8000e28 <__aeabi_l2f>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb99 	bl	8000588 <__aeabi_f2d>
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001f98 <bme280_update+0x844>)
 8001e5c:	f7fe fd16 	bl	800088c <__aeabi_ddiv>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f9c <bme280_update+0x848>)
 8001e6e:	f7fe fd0d 	bl	800088c <__aeabi_ddiv>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4947      	ldr	r1, [pc, #284]	@ (8001f94 <bme280_update+0x840>)
 8001e78:	680c      	ldr	r4, [r1, #0]
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe feb3 	bl	8000be8 <__aeabi_d2f>
 8001e82:	4603      	mov	r3, r0
 8001e84:	61a3      	str	r3, [r4, #24]

        //for humidity
        uint32_t var_h, adc_H;
        adc_H = BME->adcVals.uh;
 8001e86:	4b43      	ldr	r3, [pc, #268]	@ (8001f94 <bme280_update+0x840>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

        var_h = (t_fine - ((int32_t)76800));
 8001e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001e94:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001e98:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8001e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ea0:	039a      	lsls	r2, r3, #14
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	@ (8001f94 <bme280_update+0x840>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001eac:	051b      	lsls	r3, r3, #20
 8001eae:	1ad2      	subs	r2, r2, r3
 8001eb0:	4b38      	ldr	r3, [pc, #224]	@ (8001f94 <bme280_update+0x840>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ec0:	fb01 f303 	mul.w	r3, r1, r3
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001eca:	0bdb      	lsrs	r3, r3, #15
 8001ecc:	4a31      	ldr	r2, [pc, #196]	@ (8001f94 <bme280_update+0x840>)
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001edc:	fb01 f202 	mul.w	r2, r1, r2
 8001ee0:	0a92      	lsrs	r2, r2, #10
 8001ee2:	492c      	ldr	r1, [pc, #176]	@ (8001f94 <bme280_update+0x840>)
 8001ee4:	6809      	ldr	r1, [r1, #0]
 8001ee6:	6809      	ldr	r1, [r1, #0]
 8001ee8:	7f09      	ldrb	r1, [r1, #28]
 8001eea:	4608      	mov	r0, r1
 8001eec:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001ef0:	fb00 f101 	mul.w	r1, r0, r1
 8001ef4:	0ac9      	lsrs	r1, r1, #11
 8001ef6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001efa:	fb01 f202 	mul.w	r2, r1, r2
 8001efe:	0a92      	lsrs	r2, r2, #10
 8001f00:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001f04:	4923      	ldr	r1, [pc, #140]	@ (8001f94 <bme280_update+0x840>)
 8001f06:	6809      	ldr	r1, [r1, #0]
 8001f08:	6809      	ldr	r1, [r1, #0]
 8001f0a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001f0e:	fb01 f202 	mul.w	r2, r1, r2
 8001f12:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001f16:	0b92      	lsrs	r2, r2, #14
 8001f18:	fb02 f303 	mul.w	r3, r2, r3
 8001f1c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8001f20:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f24:	0bdb      	lsrs	r3, r3, #15
 8001f26:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f2a:	0bd2      	lsrs	r2, r2, #15
 8001f2c:	fb02 f303 	mul.w	r3, r2, r3
 8001f30:	09db      	lsrs	r3, r3, #7
 8001f32:	4a18      	ldr	r2, [pc, #96]	@ (8001f94 <bme280_update+0x840>)
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	7e12      	ldrb	r2, [r2, #24]
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h < 0 ? 0 : var_h);
        var_h = (var_h > 419430400 ? 419430400 : var_h);
 8001f4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f4e:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001f52:	bf28      	it	cs
 8001f54:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 8001f58:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 8001f5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f60:	0b1b      	lsrs	r3, r3, #12
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <bme280_update+0x840>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001fa0 <bme280_update+0x84c>
 8001f72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f76:	edc3 7a07 	vstr	s15, [r3, #28]

        // Calculate raw altitude (no filtering)
        bme280_calculate_altitude();
 8001f7a:	f7ff f9dd 	bl	8001338 <bme280_calculate_altitude>
        BME->isUpdated = 0;
 8001f7e:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <bme280_update+0x840>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
}
 8001f88:	bf00      	nop
 8001f8a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f94:	20000248 	.word	0x20000248
 8001f98:	40700000 	.word	0x40700000
 8001f9c:	40590000 	.word	0x40590000
 8001fa0:	44800000 	.word	0x44800000

08001fa4 <bmi088_init>:
	HAL_I2C_Init(BMI_I2c);

}
*/
uint8_t bmi088_init(bmi088_struct_t* BMI)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af04      	add	r7, sp, #16
 8001faa:	6078      	str	r0, [r7, #4]
	//quaternionSet_zero();
	uint8_t ret_val = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	73fb      	strb	r3, [r7, #15]
	BMI->flags.isGyroUpdated = 0;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
	BMI->flags.isAccelUpdated = 0;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	705a      	strb	r2, [r3, #1]
	is_time_updated = 0;
 8001fbc:	4b23      	ldr	r3, [pc, #140]	@ (800204c <bmi088_init+0xa8>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
	is_starded = 0;
 8001fc2:	4b23      	ldr	r3, [pc, #140]	@ (8002050 <bmi088_init+0xac>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	733b      	strb	r3, [r7, #12]

	if(BMI->device_config.offsets == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d107      	bne.n	8001fe4 <bmi088_init+0x40>
	{
		BMI->device_config.offsets = calloc(sizeof(*BMI->device_config.offsets), 1);
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	2018      	movs	r0, #24
 8001fd8:	f00b fb54 	bl	800d684 <calloc>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	461a      	mov	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	615a      	str	r2, [r3, #20]

	}

	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68d8      	ldr	r0, [r3, #12]
 8001fe8:	2332      	movs	r3, #50	@ 0x32
 8001fea:	9302      	str	r3, [sp, #8]
 8001fec:	2301      	movs	r3, #1
 8001fee:	9301      	str	r3, [sp, #4]
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2130      	movs	r1, #48	@ 0x30
 8001ffc:	f007 fff2 	bl	8009fe4 <HAL_I2C_Mem_Read>
 8002000:	4603      	mov	r3, r0
 8002002:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &buf[1], 1, 50);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68d8      	ldr	r0, [r3, #12]
 8002008:	2332      	movs	r3, #50	@ 0x32
 800200a:	9302      	str	r3, [sp, #8]
 800200c:	2301      	movs	r3, #1
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	f107 030c 	add.w	r3, r7, #12
 8002014:	3301      	adds	r3, #1
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2301      	movs	r3, #1
 800201a:	2200      	movs	r2, #0
 800201c:	21d0      	movs	r1, #208	@ 0xd0
 800201e:	f007 ffe1 	bl	8009fe4 <HAL_I2C_Mem_Read>
 8002022:	4603      	mov	r3, r0
 8002024:	73bb      	strb	r3, [r7, #14]
	UNUSED(ret);
	if(!(buf[0] == 0x1E))
 8002026:	7b3b      	ldrb	r3, [r7, #12]
 8002028:	2b1e      	cmp	r3, #30
 800202a:	d003      	beq.n	8002034 <bmi088_init+0x90>
	{
		ret_val = ret_val | 0x01;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
	}
	if(!(buf[1] == 0x0F))
 8002034:	7b7b      	ldrb	r3, [r7, #13]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	d003      	beq.n	8002042 <bmi088_init+0x9e>
	{
		ret_val = ret_val | 0x02;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	2000024d 	.word	0x2000024d
 8002050:	2000024e 	.word	0x2000024e

08002054 <bmi088_config>:

void bmi088_config(bmi088_struct_t* BMI)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af04      	add	r7, sp, #16
 800205a:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(BMI->device_config.acc_IRQ);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002062:	4618      	mov	r0, r3
 8002064:	f006 fe61 	bl	8008d2a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BMI->device_config.gyro_IRQ);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800206e:	4618      	mov	r0, r3
 8002070:	f006 fe5b 	bl	8008d2a <HAL_NVIC_DisableIRQ>

	HAL_StatusTypeDef retVal = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 8002078:	2301      	movs	r3, #1
 800207a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68d8      	ldr	r0, [r3, #12]
 8002080:	2364      	movs	r3, #100	@ 0x64
 8002082:	9302      	str	r3, [sp, #8]
 8002084:	2301      	movs	r3, #1
 8002086:	9301      	str	r3, [sp, #4]
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2301      	movs	r3, #1
 8002090:	227c      	movs	r2, #124	@ 0x7c
 8002092:	2130      	movs	r1, #48	@ 0x30
 8002094:	f007 feac 	bl	8009df0 <HAL_I2C_Mem_Write>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	4313      	orrs	r3, r2
 80020a0:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68d8      	ldr	r0, [r3, #12]
 80020aa:	2364      	movs	r3, #100	@ 0x64
 80020ac:	9302      	str	r3, [sp, #8]
 80020ae:	2301      	movs	r3, #1
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2301      	movs	r3, #1
 80020ba:	227d      	movs	r2, #125	@ 0x7d
 80020bc:	2130      	movs	r1, #48	@ 0x30
 80020be:	f007 fe97 	bl	8009df0 <HAL_I2C_Mem_Write>
 80020c2:	4603      	mov	r3, r0
 80020c4:	461a      	mov	r2, r3
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 80020cc:	2014      	movs	r0, #20
 80020ce:	f006 f8b9 	bl	8008244 <HAL_Delay>

	buf[0] = ACC_RESET;
 80020d2:	23b6      	movs	r3, #182	@ 0xb6
 80020d4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68d8      	ldr	r0, [r3, #12]
 80020da:	2364      	movs	r3, #100	@ 0x64
 80020dc:	9302      	str	r3, [sp, #8]
 80020de:	2301      	movs	r3, #1
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	f107 030c 	add.w	r3, r7, #12
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2301      	movs	r3, #1
 80020ea:	227e      	movs	r2, #126	@ 0x7e
 80020ec:	2130      	movs	r1, #48	@ 0x30
 80020ee:	f007 fe7f 	bl	8009df0 <HAL_I2C_Mem_Write>
 80020f2:	4603      	mov	r3, r0
 80020f4:	461a      	mov	r2, r3
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <bmi088_config+0xb4>
 8002102:	4bb4      	ldr	r3, [pc, #720]	@ (80023d4 <bmi088_config+0x380>)
 8002104:	22a1      	movs	r2, #161	@ 0xa1
 8002106:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002108:	200a      	movs	r0, #10
 800210a:	f006 f89b 	bl	8008244 <HAL_Delay>

	buf[0] = FIFO_RESET;
 800210e:	23b0      	movs	r3, #176	@ 0xb0
 8002110:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68d8      	ldr	r0, [r3, #12]
 8002116:	2364      	movs	r3, #100	@ 0x64
 8002118:	9302      	str	r3, [sp, #8]
 800211a:	2301      	movs	r3, #1
 800211c:	9301      	str	r3, [sp, #4]
 800211e:	f107 030c 	add.w	r3, r7, #12
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2301      	movs	r3, #1
 8002126:	227e      	movs	r2, #126	@ 0x7e
 8002128:	2130      	movs	r1, #48	@ 0x30
 800212a:	f007 fe61 	bl	8009df0 <HAL_I2C_Mem_Write>
 800212e:	4603      	mov	r3, r0
 8002130:	461a      	mov	r2, r3
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	4313      	orrs	r3, r2
 8002136:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <bmi088_config+0xf0>
 800213e:	4ba5      	ldr	r3, [pc, #660]	@ (80023d4 <bmi088_config+0x380>)
 8002140:	22a6      	movs	r2, #166	@ 0xa6
 8002142:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002144:	200a      	movs	r0, #10
 8002146:	f006 f87d 	bl	8008244 <HAL_Delay>

	buf[0] = GYRO_RESET;
 800214a:	23b6      	movs	r3, #182	@ 0xb6
 800214c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68d8      	ldr	r0, [r3, #12]
 8002152:	2364      	movs	r3, #100	@ 0x64
 8002154:	9302      	str	r3, [sp, #8]
 8002156:	2301      	movs	r3, #1
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	f107 030c 	add.w	r3, r7, #12
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2301      	movs	r3, #1
 8002162:	2214      	movs	r2, #20
 8002164:	21d0      	movs	r1, #208	@ 0xd0
 8002166:	f007 fe43 	bl	8009df0 <HAL_I2C_Mem_Write>
 800216a:	4603      	mov	r3, r0
 800216c:	461a      	mov	r2, r3
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	4313      	orrs	r3, r2
 8002172:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <bmi088_config+0x12c>
 800217a:	4b96      	ldr	r3, [pc, #600]	@ (80023d4 <bmi088_config+0x380>)
 800217c:	22ab      	movs	r2, #171	@ 0xab
 800217e:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002180:	200a      	movs	r0, #10
 8002182:	f006 f85f 	bl	8008244 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->device_config.gyro_range;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7a9b      	ldrb	r3, [r3, #10]
 800218a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68d8      	ldr	r0, [r3, #12]
 8002190:	2364      	movs	r3, #100	@ 0x64
 8002192:	9302      	str	r3, [sp, #8]
 8002194:	2301      	movs	r3, #1
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	f107 030c 	add.w	r3, r7, #12
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2301      	movs	r3, #1
 80021a0:	220f      	movs	r2, #15
 80021a2:	21d0      	movs	r1, #208	@ 0xd0
 80021a4:	f007 fe24 	bl	8009df0 <HAL_I2C_Mem_Write>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <bmi088_config+0x16a>
 80021b8:	4b86      	ldr	r3, [pc, #536]	@ (80023d4 <bmi088_config+0x380>)
 80021ba:	22b1      	movs	r2, #177	@ 0xb1
 80021bc:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_bandWidth;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	7a5b      	ldrb	r3, [r3, #9]
 80021c2:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68d8      	ldr	r0, [r3, #12]
 80021c8:	2314      	movs	r3, #20
 80021ca:	9302      	str	r3, [sp, #8]
 80021cc:	2301      	movs	r3, #1
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	f107 030c 	add.w	r3, r7, #12
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2301      	movs	r3, #1
 80021d8:	2210      	movs	r2, #16
 80021da:	21d0      	movs	r1, #208	@ 0xd0
 80021dc:	f007 fe08 	bl	8009df0 <HAL_I2C_Mem_Write>
 80021e0:	4603      	mov	r3, r0
 80021e2:	461a      	mov	r2, r3
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d002      	beq.n	80021f6 <bmi088_config+0x1a2>
 80021f0:	4b78      	ldr	r3, [pc, #480]	@ (80023d4 <bmi088_config+0x380>)
 80021f2:	22b5      	movs	r2, #181	@ 0xb5
 80021f4:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_powerMode;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	7a1b      	ldrb	r3, [r3, #8]
 80021fa:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68d8      	ldr	r0, [r3, #12]
 8002200:	2314      	movs	r3, #20
 8002202:	9302      	str	r3, [sp, #8]
 8002204:	2301      	movs	r3, #1
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	f107 030c 	add.w	r3, r7, #12
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2301      	movs	r3, #1
 8002210:	2211      	movs	r2, #17
 8002212:	21d0      	movs	r1, #208	@ 0xd0
 8002214:	f007 fdec 	bl	8009df0 <HAL_I2C_Mem_Write>
 8002218:	4603      	mov	r3, r0
 800221a:	461a      	mov	r2, r3
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	4313      	orrs	r3, r2
 8002220:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <bmi088_config+0x1da>
 8002228:	4b6a      	ldr	r3, [pc, #424]	@ (80023d4 <bmi088_config+0x380>)
 800222a:	22b9      	movs	r2, #185	@ 0xb9
 800222c:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 800222e:	2014      	movs	r0, #20
 8002230:	f006 f808 	bl	8008244 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 8002234:	2380      	movs	r3, #128	@ 0x80
 8002236:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68d8      	ldr	r0, [r3, #12]
 800223c:	2314      	movs	r3, #20
 800223e:	9302      	str	r3, [sp, #8]
 8002240:	2301      	movs	r3, #1
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2301      	movs	r3, #1
 800224c:	2215      	movs	r2, #21
 800224e:	21d0      	movs	r1, #208	@ 0xd0
 8002250:	f007 fdce 	bl	8009df0 <HAL_I2C_Mem_Write>
 8002254:	4603      	mov	r3, r0
 8002256:	461a      	mov	r2, r3
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	4313      	orrs	r3, r2
 800225c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <bmi088_config+0x216>
 8002264:	4b5b      	ldr	r3, [pc, #364]	@ (80023d4 <bmi088_config+0x380>)
 8002266:	22bf      	movs	r2, #191	@ 0xbf
 8002268:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0) | (GYRO_INT_ACT_HIGH << 2);
 800226a:	2305      	movs	r3, #5
 800226c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68d8      	ldr	r0, [r3, #12]
 8002272:	2314      	movs	r3, #20
 8002274:	9302      	str	r3, [sp, #8]
 8002276:	2301      	movs	r3, #1
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	f107 030c 	add.w	r3, r7, #12
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	2301      	movs	r3, #1
 8002282:	2216      	movs	r2, #22
 8002284:	21d0      	movs	r1, #208	@ 0xd0
 8002286:	f007 fdb3 	bl	8009df0 <HAL_I2C_Mem_Write>
 800228a:	4603      	mov	r3, r0
 800228c:	461a      	mov	r2, r3
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	4313      	orrs	r3, r2
 8002292:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <bmi088_config+0x24c>
 800229a:	4b4e      	ldr	r3, [pc, #312]	@ (80023d4 <bmi088_config+0x380>)
 800229c:	22c3      	movs	r2, #195	@ 0xc3
 800229e:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_BOTH;
 80022a0:	2381      	movs	r3, #129	@ 0x81
 80022a2:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68d8      	ldr	r0, [r3, #12]
 80022a8:	2314      	movs	r3, #20
 80022aa:	9302      	str	r3, [sp, #8]
 80022ac:	2301      	movs	r3, #1
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	f107 030c 	add.w	r3, r7, #12
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	2301      	movs	r3, #1
 80022b8:	2218      	movs	r2, #24
 80022ba:	21d0      	movs	r1, #208	@ 0xd0
 80022bc:	f007 fd98 	bl	8009df0 <HAL_I2C_Mem_Write>
 80022c0:	4603      	mov	r3, r0
 80022c2:	461a      	mov	r2, r3
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <bmi088_config+0x282>
 80022d0:	4b40      	ldr	r3, [pc, #256]	@ (80023d4 <bmi088_config+0x380>)
 80022d2:	22c7      	movs	r2, #199	@ 0xc7
 80022d4:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 80022d6:	2304      	movs	r3, #4
 80022d8:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68d8      	ldr	r0, [r3, #12]
 80022de:	2314      	movs	r3, #20
 80022e0:	9302      	str	r3, [sp, #8]
 80022e2:	2301      	movs	r3, #1
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	f107 030c 	add.w	r3, r7, #12
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2301      	movs	r3, #1
 80022ee:	227d      	movs	r2, #125	@ 0x7d
 80022f0:	2130      	movs	r1, #48	@ 0x30
 80022f2:	f007 fd7d 	bl	8009df0 <HAL_I2C_Mem_Write>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <bmi088_config+0x2b8>
 8002306:	4b33      	ldr	r3, [pc, #204]	@ (80023d4 <bmi088_config+0x380>)
 8002308:	22cc      	movs	r2, #204	@ 0xcc
 800230a:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800230c:	2008      	movs	r0, #8
 800230e:	f005 ff99 	bl	8008244 <HAL_Delay>

	buf[0] = BMI->device_config.acc_powerMode;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	791b      	ldrb	r3, [r3, #4]
 8002316:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68d8      	ldr	r0, [r3, #12]
 800231c:	2314      	movs	r3, #20
 800231e:	9302      	str	r3, [sp, #8]
 8002320:	2301      	movs	r3, #1
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	2301      	movs	r3, #1
 800232c:	227c      	movs	r2, #124	@ 0x7c
 800232e:	2130      	movs	r1, #48	@ 0x30
 8002330:	f007 fd5e 	bl	8009df0 <HAL_I2C_Mem_Write>
 8002334:	4603      	mov	r3, r0
 8002336:	461a      	mov	r2, r3
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	4313      	orrs	r3, r2
 800233c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <bmi088_config+0x2f6>
 8002344:	4b23      	ldr	r3, [pc, #140]	@ (80023d4 <bmi088_config+0x380>)
 8002346:	22d1      	movs	r2, #209	@ 0xd1
 8002348:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800234a:	2008      	movs	r0, #8
 800234c:	f005 ff7a 	bl	8008244 <HAL_Delay>

	buf[0] = (BMI->device_config.acc_bandwith << 4) | BMI->device_config.acc_outputDateRate;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	799b      	ldrb	r3, [r3, #6]
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	b25a      	sxtb	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	79db      	ldrb	r3, [r3, #7]
 800235c:	b25b      	sxtb	r3, r3
 800235e:	4313      	orrs	r3, r2
 8002360:	b25b      	sxtb	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68d8      	ldr	r0, [r3, #12]
 800236a:	2314      	movs	r3, #20
 800236c:	9302      	str	r3, [sp, #8]
 800236e:	2301      	movs	r3, #1
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	f107 030c 	add.w	r3, r7, #12
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2301      	movs	r3, #1
 800237a:	2240      	movs	r2, #64	@ 0x40
 800237c:	2130      	movs	r1, #48	@ 0x30
 800237e:	f007 fd37 	bl	8009df0 <HAL_I2C_Mem_Write>
 8002382:	4603      	mov	r3, r0
 8002384:	461a      	mov	r2, r3
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	4313      	orrs	r3, r2
 800238a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <bmi088_config+0x344>
 8002392:	4b10      	ldr	r3, [pc, #64]	@ (80023d4 <bmi088_config+0x380>)
 8002394:	22d6      	movs	r2, #214	@ 0xd6
 8002396:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.acc_range;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	795b      	ldrb	r3, [r3, #5]
 800239c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68d8      	ldr	r0, [r3, #12]
 80023a2:	2314      	movs	r3, #20
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	2301      	movs	r3, #1
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2301      	movs	r3, #1
 80023b2:	2241      	movs	r2, #65	@ 0x41
 80023b4:	2130      	movs	r1, #48	@ 0x30
 80023b6:	f007 fd1b 	bl	8009df0 <HAL_I2C_Mem_Write>
 80023ba:	4603      	mov	r3, r0
 80023bc:	461a      	mov	r2, r3
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <bmi088_config+0x384>
 80023ca:	4b02      	ldr	r3, [pc, #8]	@ (80023d4 <bmi088_config+0x380>)
 80023cc:	22da      	movs	r2, #218	@ 0xda
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e002      	b.n	80023d8 <bmi088_config+0x384>
 80023d2:	bf00      	nop
 80023d4:	20000250 	.word	0x20000250

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 80023d8:	230a      	movs	r3, #10
 80023da:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68d8      	ldr	r0, [r3, #12]
 80023e0:	2314      	movs	r3, #20
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	2301      	movs	r3, #1
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	f107 030c 	add.w	r3, r7, #12
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2301      	movs	r3, #1
 80023f0:	2253      	movs	r2, #83	@ 0x53
 80023f2:	2130      	movs	r1, #48	@ 0x30
 80023f4:	f007 fcfc 	bl	8009df0 <HAL_I2C_Mem_Write>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461a      	mov	r2, r3
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	4313      	orrs	r3, r2
 8002400:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 8002402:	2304      	movs	r3, #4
 8002404:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68d8      	ldr	r0, [r3, #12]
 800240a:	2314      	movs	r3, #20
 800240c:	9302      	str	r3, [sp, #8]
 800240e:	2301      	movs	r3, #1
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	f107 030c 	add.w	r3, r7, #12
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2301      	movs	r3, #1
 800241a:	2258      	movs	r2, #88	@ 0x58
 800241c:	2130      	movs	r1, #48	@ 0x30
 800241e:	f007 fce7 	bl	8009df0 <HAL_I2C_Mem_Write>
 8002422:	4603      	mov	r3, r0
 8002424:	461a      	mov	r2, r3
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	4313      	orrs	r3, r2
 800242a:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(BMI->device_config.acc_IRQ);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002432:	4618      	mov	r0, r3
 8002434:	f006 fc6b 	bl	8008d0e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BMI->device_config.gyro_IRQ);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800243e:	4618      	mov	r0, r3
 8002440:	f006 fc65 	bl	8008d0e <HAL_NVIC_EnableIRQ>
	HAL_Delay(70);
 8002444:	2046      	movs	r0, #70	@ 0x46
 8002446:	f005 fefd 	bl	8008244 <HAL_Delay>
}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	0000      	movs	r0, r0
	...

08002458 <bmi088_update>:


void bmi088_update(bmi088_struct_t* BMI)
{
 8002458:	b5b0      	push	{r4, r5, r7, lr}
 800245a:	b092      	sub	sp, #72	@ 0x48
 800245c:	af04      	add	r7, sp, #16
 800245e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret_val = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		if(BMI->flags.isAccelUpdated)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	785b      	ldrb	r3, [r3, #1]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 820d 	beq.w	800288a <bmi088_update+0x432>
		{
			uint8_t raw_accel[9];
			uint8_t	raw_temp[2];

			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_accel, 9, 20);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68d8      	ldr	r0, [r3, #12]
 8002474:	2314      	movs	r3, #20
 8002476:	9302      	str	r3, [sp, #8]
 8002478:	2309      	movs	r3, #9
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2301      	movs	r3, #1
 8002484:	2212      	movs	r2, #18
 8002486:	2130      	movs	r1, #48	@ 0x30
 8002488:	f007 fdac 	bl	8009fe4 <HAL_I2C_Mem_Read>
 800248c:	4603      	mov	r3, r0
 800248e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, raw_temp, 2, 20);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68d8      	ldr	r0, [r3, #12]
 8002496:	2314      	movs	r3, #20
 8002498:	9302      	str	r3, [sp, #8]
 800249a:	2302      	movs	r3, #2
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	f107 0310 	add.w	r3, r7, #16
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	2301      	movs	r3, #1
 80024a6:	2222      	movs	r2, #34	@ 0x22
 80024a8:	2130      	movs	r1, #48	@ 0x30
 80024aa:	f007 fd9b 	bl	8009fe4 <HAL_I2C_Mem_Read>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			uint16_t Temp_uint11 = (raw_temp[0] << 3) | (raw_temp[1] >> 5);
 80024b4:	7c3b      	ldrb	r3, [r7, #16]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	7c7b      	ldrb	r3, [r7, #17]
 80024bc:	095b      	lsrs	r3, r3, #5
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	4313      	orrs	r3, r2
 80024c4:	b21b      	sxth	r3, r3
 80024c6:	86bb      	strh	r3, [r7, #52]	@ 0x34
			int16_t Temp_int11 = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	867b      	strh	r3, [r7, #50]	@ 0x32
			if (Temp_uint11 > 1023){
 80024cc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80024ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024d2:	d305      	bcc.n	80024e0 <bmi088_update+0x88>
				Temp_int11 = Temp_uint11 - 2048;
 80024d4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80024d6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80024da:	b29b      	uxth	r3, r3
 80024dc:	867b      	strh	r3, [r7, #50]	@ 0x32
 80024de:	e023      	b.n	8002528 <bmi088_update+0xd0>
			}
			else{
				Temp_int11 = Temp_uint11;
 80024e0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80024e2:	867b      	strh	r3, [r7, #50]	@ 0x32
				BMI->datas.temp = (float)Temp_int11 * 0.125 + 23.0;
 80024e4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80024e8:	ee07 3a90 	vmov	s15, r3
 80024ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f0:	ee17 0a90 	vmov	r0, s15
 80024f4:	f7fe f848 	bl	8000588 <__aeabi_f2d>
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8002500:	f7fe f89a 	bl	8000638 <__aeabi_dmul>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	4bcf      	ldr	r3, [pc, #828]	@ (8002850 <bmi088_update+0x3f8>)
 8002512:	f7fd fedb 	bl	80002cc <__adddf3>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	f7fe fb63 	bl	8000be8 <__aeabi_d2f>
 8002522:	4602      	mov	r2, r0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			uint32_t sensorTime = (raw_accel[8] << 16) | (raw_accel[7] << 8) | raw_accel[6];
 8002528:	7f3b      	ldrb	r3, [r7, #28]
 800252a:	041a      	lsls	r2, r3, #16
 800252c:	7efb      	ldrb	r3, [r7, #27]
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	4313      	orrs	r3, r2
 8002532:	7eba      	ldrb	r2, [r7, #26]
 8002534:	4313      	orrs	r3, r2
 8002536:	62fb      	str	r3, [r7, #44]	@ 0x2c

			BMI->datas.current_time= (float)sensorTime * 39.0625 / 1000000.0;
 8002538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002542:	ee17 0a90 	vmov	r0, s15
 8002546:	f7fe f81f 	bl	8000588 <__aeabi_f2d>
 800254a:	a3b9      	add	r3, pc, #740	@ (adr r3, 8002830 <bmi088_update+0x3d8>)
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	f7fe f872 	bl	8000638 <__aeabi_dmul>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	a3b6      	add	r3, pc, #728	@ (adr r3, 8002838 <bmi088_update+0x3e0>)
 800255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002562:	f7fe f993 	bl	800088c <__aeabi_ddiv>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f7fe fb3b 	bl	8000be8 <__aeabi_d2f>
 8002572:	4602      	mov	r2, r0
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	669a      	str	r2, [r3, #104]	@ 0x68

			int16_t acc_z_16 = (raw_accel[5] << 8) | raw_accel[4];
 8002578:	7e7b      	ldrb	r3, [r7, #25]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	b21a      	sxth	r2, r3
 800257e:	7e3b      	ldrb	r3, [r7, #24]
 8002580:	b21b      	sxth	r3, r3
 8002582:	4313      	orrs	r3, r2
 8002584:	857b      	strh	r3, [r7, #42]	@ 0x2a
			int16_t acc_y_16 = (raw_accel[3] << 8) | raw_accel[2];
 8002586:	7dfb      	ldrb	r3, [r7, #23]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	b21a      	sxth	r2, r3
 800258c:	7dbb      	ldrb	r3, [r7, #22]
 800258e:	b21b      	sxth	r3, r3
 8002590:	4313      	orrs	r3, r2
 8002592:	853b      	strh	r3, [r7, #40]	@ 0x28
			int16_t acc_x_16 = (raw_accel[1] << 8) | raw_accel[0];
 8002594:	7d7b      	ldrb	r3, [r7, #21]
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	b21a      	sxth	r2, r3
 800259a:	7d3b      	ldrb	r3, [r7, #20]
 800259c:	b21b      	sxth	r3, r3
 800259e:	4313      	orrs	r3, r2
 80025a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

			BMI->datas.acc_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Z_OFFSET)*9.81/1000;
 80025a2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80025a6:	ee07 3a90 	vmov	s15, r3
 80025aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ae:	ee17 0a90 	vmov	r0, s15
 80025b2:	f7fd ffe9 	bl	8000588 <__aeabi_f2d>
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	4ba6      	ldr	r3, [pc, #664]	@ (8002854 <bmi088_update+0x3fc>)
 80025bc:	f7fe f966 	bl	800088c <__aeabi_ddiv>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	4ba2      	ldr	r3, [pc, #648]	@ (8002858 <bmi088_update+0x400>)
 80025ce:	f7fe f833 	bl	8000638 <__aeabi_dmul>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	4b9f      	ldr	r3, [pc, #636]	@ (800285c <bmi088_update+0x404>)
 80025e0:	f7fe f82a 	bl	8000638 <__aeabi_dmul>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4614      	mov	r4, r2
 80025ea:	461d      	mov	r5, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	795b      	ldrb	r3, [r3, #5]
 80025f0:	3301      	adds	r3, #1
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025fa:	ee17 0a90 	vmov	r0, s15
 80025fe:	f7fd ffc3 	bl	8000588 <__aeabi_f2d>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	ec43 2b11 	vmov	d1, r2, r3
 800260a:	ed9f 0b8d 	vldr	d0, [pc, #564]	@ 8002840 <bmi088_update+0x3e8>
 800260e:	f00d fccf 	bl	800ffb0 <pow>
 8002612:	ec53 2b10 	vmov	r2, r3, d0
 8002616:	4620      	mov	r0, r4
 8002618:	4629      	mov	r1, r5
 800261a:	f7fe f80d 	bl	8000638 <__aeabi_dmul>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4610      	mov	r0, r2
 8002624:	4619      	mov	r1, r3
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	4b8d      	ldr	r3, [pc, #564]	@ (8002860 <bmi088_update+0x408>)
 800262c:	f7fd fe4c 	bl	80002c8 <__aeabi_dsub>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	a383      	add	r3, pc, #524	@ (adr r3, 8002848 <bmi088_update+0x3f0>)
 800263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263e:	f7fd fffb 	bl	8000638 <__aeabi_dmul>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4610      	mov	r0, r2
 8002648:	4619      	mov	r1, r3
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	4b82      	ldr	r3, [pc, #520]	@ (8002858 <bmi088_update+0x400>)
 8002650:	f7fe f91c 	bl	800088c <__aeabi_ddiv>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	f7fe fac4 	bl	8000be8 <__aeabi_d2f>
 8002660:	4602      	mov	r2, r0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	661a      	str	r2, [r3, #96]	@ 0x60
			BMI->datas.acc_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Y_OFFSET)*9.81/1000;
 8002666:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800266a:	ee07 3a90 	vmov	s15, r3
 800266e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002672:	ee17 0a90 	vmov	r0, s15
 8002676:	f7fd ff87 	bl	8000588 <__aeabi_f2d>
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	4b75      	ldr	r3, [pc, #468]	@ (8002854 <bmi088_update+0x3fc>)
 8002680:	f7fe f904 	bl	800088c <__aeabi_ddiv>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	4b71      	ldr	r3, [pc, #452]	@ (8002858 <bmi088_update+0x400>)
 8002692:	f7fd ffd1 	bl	8000638 <__aeabi_dmul>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4610      	mov	r0, r2
 800269c:	4619      	mov	r1, r3
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	4b6e      	ldr	r3, [pc, #440]	@ (800285c <bmi088_update+0x404>)
 80026a4:	f7fd ffc8 	bl	8000638 <__aeabi_dmul>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4614      	mov	r4, r2
 80026ae:	461d      	mov	r5, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	795b      	ldrb	r3, [r3, #5]
 80026b4:	3301      	adds	r3, #1
 80026b6:	ee07 3a90 	vmov	s15, r3
 80026ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026be:	ee17 0a90 	vmov	r0, s15
 80026c2:	f7fd ff61 	bl	8000588 <__aeabi_f2d>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	ec43 2b11 	vmov	d1, r2, r3
 80026ce:	ed9f 0b5c 	vldr	d0, [pc, #368]	@ 8002840 <bmi088_update+0x3e8>
 80026d2:	f00d fc6d 	bl	800ffb0 <pow>
 80026d6:	ec53 2b10 	vmov	r2, r3, d0
 80026da:	4620      	mov	r0, r4
 80026dc:	4629      	mov	r1, r5
 80026de:	f7fd ffab 	bl	8000638 <__aeabi_dmul>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4610      	mov	r0, r2
 80026e8:	4619      	mov	r1, r3
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002864 <bmi088_update+0x40c>)
 80026f0:	f7fd fdec 	bl	80002cc <__adddf3>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4610      	mov	r0, r2
 80026fa:	4619      	mov	r1, r3
 80026fc:	a352      	add	r3, pc, #328	@ (adr r3, 8002848 <bmi088_update+0x3f0>)
 80026fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002702:	f7fd ff99 	bl	8000638 <__aeabi_dmul>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	4b51      	ldr	r3, [pc, #324]	@ (8002858 <bmi088_update+0x400>)
 8002714:	f7fe f8ba 	bl	800088c <__aeabi_ddiv>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4610      	mov	r0, r2
 800271e:	4619      	mov	r1, r3
 8002720:	f7fe fa62 	bl	8000be8 <__aeabi_d2f>
 8002724:	4602      	mov	r2, r0
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	65da      	str	r2, [r3, #92]	@ 0x5c
			BMI->datas.acc_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_X_OFFSET)*9.81/1000;
 800272a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800272e:	ee07 3a90 	vmov	s15, r3
 8002732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002736:	ee17 0a90 	vmov	r0, s15
 800273a:	f7fd ff25 	bl	8000588 <__aeabi_f2d>
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	4b44      	ldr	r3, [pc, #272]	@ (8002854 <bmi088_update+0x3fc>)
 8002744:	f7fe f8a2 	bl	800088c <__aeabi_ddiv>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4610      	mov	r0, r2
 800274e:	4619      	mov	r1, r3
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	4b40      	ldr	r3, [pc, #256]	@ (8002858 <bmi088_update+0x400>)
 8002756:	f7fd ff6f 	bl	8000638 <__aeabi_dmul>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	4b3d      	ldr	r3, [pc, #244]	@ (800285c <bmi088_update+0x404>)
 8002768:	f7fd ff66 	bl	8000638 <__aeabi_dmul>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4614      	mov	r4, r2
 8002772:	461d      	mov	r5, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	795b      	ldrb	r3, [r3, #5]
 8002778:	3301      	adds	r3, #1
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002782:	ee17 0a90 	vmov	r0, s15
 8002786:	f7fd feff 	bl	8000588 <__aeabi_f2d>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	ec43 2b11 	vmov	d1, r2, r3
 8002792:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 8002840 <bmi088_update+0x3e8>
 8002796:	f00d fc0b 	bl	800ffb0 <pow>
 800279a:	ec53 2b10 	vmov	r2, r3, d0
 800279e:	4620      	mov	r0, r4
 80027a0:	4629      	mov	r1, r5
 80027a2:	f7fd ff49 	bl	8000638 <__aeabi_dmul>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002860 <bmi088_update+0x408>)
 80027b4:	f7fd fd8a 	bl	80002cc <__adddf3>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	a321      	add	r3, pc, #132	@ (adr r3, 8002848 <bmi088_update+0x3f0>)
 80027c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c6:	f7fd ff37 	bl	8000638 <__aeabi_dmul>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	4b20      	ldr	r3, [pc, #128]	@ (8002858 <bmi088_update+0x400>)
 80027d8:	f7fe f858 	bl	800088c <__aeabi_ddiv>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4610      	mov	r0, r2
 80027e2:	4619      	mov	r1, r3
 80027e4:	f7fe fa00 	bl	8000be8 <__aeabi_d2f>
 80027e8:	4602      	mov	r2, r0
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	659a      	str	r2, [r3, #88]	@ 0x58

			if(is_starded)
 80027ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002868 <bmi088_update+0x410>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d03c      	beq.n	8002870 <bmi088_update+0x418>
			{
				BMI->datas.delta_time = BMI->datas.current_time - BMI->datas.last_time < 0 ? 0.0 : BMI->datas.current_time - BMI->datas.last_time;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8002802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002806:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800280a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280e:	d502      	bpl.n	8002816 <bmi088_update+0x3be>
 8002810:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800286c <bmi088_update+0x414>
 8002814:	e007      	b.n	8002826 <bmi088_update+0x3ce>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8002822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
 800282c:	e023      	b.n	8002876 <bmi088_update+0x41e>
 800282e:	bf00      	nop
 8002830:	00000000 	.word	0x00000000
 8002834:	40438800 	.word	0x40438800
 8002838:	00000000 	.word	0x00000000
 800283c:	412e8480 	.word	0x412e8480
 8002840:	00000000 	.word	0x00000000
 8002844:	40000000 	.word	0x40000000
 8002848:	51eb851f 	.word	0x51eb851f
 800284c:	40239eb8 	.word	0x40239eb8
 8002850:	40370000 	.word	0x40370000
 8002854:	40e00000 	.word	0x40e00000
 8002858:	408f4000 	.word	0x408f4000
 800285c:	3ff80000 	.word	0x3ff80000
 8002860:	40100000 	.word	0x40100000
 8002864:	402e0000 	.word	0x402e0000
 8002868:	2000024e 	.word	0x2000024e
 800286c:	00000000 	.word	0x00000000
			}
			else
			{
				is_starded = 1;
 8002870:	4bd1      	ldr	r3, [pc, #836]	@ (8002bb8 <bmi088_update+0x760>)
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
			}

			BMI->datas.last_time = BMI->datas.current_time;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	66da      	str	r2, [r3, #108]	@ 0x6c
			BMI->flags.isAccelUpdated = 0;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	705a      	strb	r2, [r3, #1]
			is_time_updated = 1;
 8002884:	4bcd      	ldr	r3, [pc, #820]	@ (8002bbc <bmi088_update+0x764>)
 8002886:	2201      	movs	r2, #1
 8002888:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->flags.isGyroUpdated && is_time_updated)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 81b1 	beq.w	8002bf6 <bmi088_update+0x79e>
 8002894:	4bc9      	ldr	r3, [pc, #804]	@ (8002bbc <bmi088_update+0x764>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 81ac 	beq.w	8002bf6 <bmi088_update+0x79e>
		{
			if(is_starded){
 800289e:	4bc6      	ldr	r3, [pc, #792]	@ (8002bb8 <bmi088_update+0x760>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 819f 	beq.w	8002be6 <bmi088_update+0x78e>
				uint8_t	raw_gyro[6];
				ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_gyro, 6, 10);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68d8      	ldr	r0, [r3, #12]
 80028ac:	230a      	movs	r3, #10
 80028ae:	9302      	str	r3, [sp, #8]
 80028b0:	2306      	movs	r3, #6
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	f107 0308 	add.w	r3, r7, #8
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2301      	movs	r3, #1
 80028bc:	2202      	movs	r2, #2
 80028be:	21d0      	movs	r1, #208	@ 0xd0
 80028c0:	f007 fb90 	bl	8009fe4 <HAL_I2C_Mem_Read>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

				if(ret_val)
 80028ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 8190 	bne.w	8002bf4 <bmi088_update+0x79c>
					return;

				int16_t gyro_x_16 = (raw_gyro[1] << 8) | raw_gyro[0];
 80028d4:	7a7b      	ldrb	r3, [r7, #9]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	b21a      	sxth	r2, r3
 80028da:	7a3b      	ldrb	r3, [r7, #8]
 80028dc:	b21b      	sxth	r3, r3
 80028de:	4313      	orrs	r3, r2
 80028e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
				int16_t gyro_y_16 = (raw_gyro[3] << 8) | raw_gyro[2];
 80028e2:	7afb      	ldrb	r3, [r7, #11]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	b21a      	sxth	r2, r3
 80028e8:	7abb      	ldrb	r3, [r7, #10]
 80028ea:	b21b      	sxth	r3, r3
 80028ec:	4313      	orrs	r3, r2
 80028ee:	847b      	strh	r3, [r7, #34]	@ 0x22
				int16_t gyro_z_16 = (raw_gyro[5] << 8) | raw_gyro[4];
 80028f0:	7b7b      	ldrb	r3, [r7, #13]
 80028f2:	021b      	lsls	r3, r3, #8
 80028f4:	b21a      	sxth	r2, r3
 80028f6:	7b3b      	ldrb	r3, [r7, #12]
 80028f8:	b21b      	sxth	r3, r3
 80028fa:	4313      	orrs	r3, r2
 80028fc:	843b      	strh	r3, [r7, #32]

				BMI->datas.gyro_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[0]) * DEG_TO_RAD;
 80028fe:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002902:	ee07 3a90 	vmov	s15, r3
 8002906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800290a:	ee17 0a90 	vmov	r0, s15
 800290e:	f7fd fe3b 	bl	8000588 <__aeabi_f2d>
 8002912:	a3a5      	add	r3, pc, #660	@ (adr r3, 8002ba8 <bmi088_update+0x750>)
 8002914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002918:	f7fd ffb8 	bl	800088c <__aeabi_ddiv>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4614      	mov	r4, r2
 8002922:	461d      	mov	r5, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7a9b      	ldrb	r3, [r3, #10]
 8002928:	461a      	mov	r2, r3
 800292a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800292e:	4113      	asrs	r3, r2
 8002930:	ee07 3a90 	vmov	s15, r3
 8002934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002938:	ee17 0a90 	vmov	r0, s15
 800293c:	f7fd fe24 	bl	8000588 <__aeabi_f2d>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4620      	mov	r0, r4
 8002946:	4629      	mov	r1, r5
 8002948:	f7fd fe76 	bl	8000638 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4614      	mov	r4, r2
 8002952:	461d      	mov	r5, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd fe14 	bl	8000588 <__aeabi_f2d>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4620      	mov	r0, r4
 8002966:	4629      	mov	r1, r5
 8002968:	f7fd fcae 	bl	80002c8 <__aeabi_dsub>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	a38e      	add	r3, pc, #568	@ (adr r3, 8002bb0 <bmi088_update+0x758>)
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f7fd fe5d 	bl	8000638 <__aeabi_dmul>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	f7fe f92f 	bl	8000be8 <__aeabi_d2f>
 800298a:	4602      	mov	r2, r0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	619a      	str	r2, [r3, #24]
				BMI->datas.gyro_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[1]) * DEG_TO_RAD;
 8002990:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002994:	ee07 3a90 	vmov	s15, r3
 8002998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800299c:	ee17 0a90 	vmov	r0, s15
 80029a0:	f7fd fdf2 	bl	8000588 <__aeabi_f2d>
 80029a4:	a380      	add	r3, pc, #512	@ (adr r3, 8002ba8 <bmi088_update+0x750>)
 80029a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029aa:	f7fd ff6f 	bl	800088c <__aeabi_ddiv>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4614      	mov	r4, r2
 80029b4:	461d      	mov	r5, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	7a9b      	ldrb	r3, [r3, #10]
 80029ba:	461a      	mov	r2, r3
 80029bc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80029c0:	4113      	asrs	r3, r2
 80029c2:	ee07 3a90 	vmov	s15, r3
 80029c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ca:	ee17 0a90 	vmov	r0, s15
 80029ce:	f7fd fddb 	bl	8000588 <__aeabi_f2d>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4620      	mov	r0, r4
 80029d8:	4629      	mov	r1, r5
 80029da:	f7fd fe2d 	bl	8000638 <__aeabi_dmul>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4614      	mov	r4, r2
 80029e4:	461d      	mov	r5, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fd fdcb 	bl	8000588 <__aeabi_f2d>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4620      	mov	r0, r4
 80029f8:	4629      	mov	r1, r5
 80029fa:	f7fd fc65 	bl	80002c8 <__aeabi_dsub>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	a36a      	add	r3, pc, #424	@ (adr r3, 8002bb0 <bmi088_update+0x758>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f7fd fe14 	bl	8000638 <__aeabi_dmul>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4610      	mov	r0, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	f7fe f8e6 	bl	8000be8 <__aeabi_d2f>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	61da      	str	r2, [r3, #28]
				BMI->datas.gyro_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[2]) * DEG_TO_RAD;
 8002a22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a2e:	ee17 0a90 	vmov	r0, s15
 8002a32:	f7fd fda9 	bl	8000588 <__aeabi_f2d>
 8002a36:	a35c      	add	r3, pc, #368	@ (adr r3, 8002ba8 <bmi088_update+0x750>)
 8002a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3c:	f7fd ff26 	bl	800088c <__aeabi_ddiv>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4614      	mov	r4, r2
 8002a46:	461d      	mov	r5, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7a9b      	ldrb	r3, [r3, #10]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002a52:	4113      	asrs	r3, r2
 8002a54:	ee07 3a90 	vmov	s15, r3
 8002a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a5c:	ee17 0a90 	vmov	r0, s15
 8002a60:	f7fd fd92 	bl	8000588 <__aeabi_f2d>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4620      	mov	r0, r4
 8002a6a:	4629      	mov	r1, r5
 8002a6c:	f7fd fde4 	bl	8000638 <__aeabi_dmul>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4614      	mov	r4, r2
 8002a76:	461d      	mov	r5, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fd82 	bl	8000588 <__aeabi_f2d>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4620      	mov	r0, r4
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	f7fd fc1c 	bl	80002c8 <__aeabi_dsub>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	a345      	add	r3, pc, #276	@ (adr r3, 8002bb0 <bmi088_update+0x758>)
 8002a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9e:	f7fd fdcb 	bl	8000638 <__aeabi_dmul>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f7fe f89d 	bl	8000be8 <__aeabi_d2f>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	621a      	str	r2, [r3, #32]

				Orientation_Update(BMI->datas.gyro_y, -BMI->datas.gyro_x, BMI->datas.gyro_z,BMI->datas.acc_y,-BMI->datas.acc_x,BMI->datas.acc_z, BMI->datas.delta_time);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	ed93 7a07 	vldr	s14, [r3, #28]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ac0:	eef1 6a67 	vneg.f32	s13, s15
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	ed93 6a08 	vldr	s12, [r3, #32]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	edd3 5a17 	vldr	s11, [r3, #92]	@ 0x5c
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002ad6:	eef1 7a67 	vneg.f32	s15, s15
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	ed93 5a18 	vldr	s10, [r3, #96]	@ 0x60
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	edd3 4a1c 	vldr	s9, [r3, #112]	@ 0x70
 8002ae6:	eeb0 3a64 	vmov.f32	s6, s9
 8002aea:	eef0 2a45 	vmov.f32	s5, s10
 8002aee:	eeb0 2a67 	vmov.f32	s4, s15
 8002af2:	eef0 1a65 	vmov.f32	s3, s11
 8002af6:	eeb0 1a46 	vmov.f32	s2, s12
 8002afa:	eef0 0a66 	vmov.f32	s1, s13
 8002afe:	eeb0 0a47 	vmov.f32	s0, s14
 8002b02:	f003 f9cf 	bl	8005ea4 <Orientation_Update>
				BMI->datas.yaw = quaternionToYaw();
 8002b06:	f003 ff69 	bl	80069dc <quaternionToYaw>
 8002b0a:	eef0 7a40 	vmov.f32	s15, s0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				BMI->datas.pitch = quaternionToPitch();
 8002b14:	f003 ffc0 	bl	8006a98 <quaternionToPitch>
 8002b18:	eef0 7a40 	vmov.f32	s15, s0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
				BMI->datas.roll = quaternionToRoll();
 8002b22:	f003 fff1 	bl	8006b08 <quaternionToRoll>
 8002b26:	eef0 7a40 	vmov.f32	s15, s0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
				BMI->datas.theta = quaternionToThetaZ();
 8002b30:	f003 fe2c 	bl	800678c <quaternionToThetaZ>
 8002b34:	eef0 7a40 	vmov.f32	s15, s0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				BMI->datas.angle_x = quaternionToYawDegree1();
 8002b3e:	f002 ff9d 	bl	8005a7c <quaternionToYawDegree1>
 8002b42:	eef0 7a40 	vmov.f32	s15, s0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
				BMI->datas.angle_y = quaternionToPitchDegree();
 8002b4c:	f003 feae 	bl	80068ac <quaternionToPitchDegree>
 8002b50:	eef0 7a40 	vmov.f32	s15, s0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
				BMI->datas.angle_z = quaternionToRollDegree();
 8002b5a:	f003 fef7 	bl	800694c <quaternionToRollDegree>
 8002b5e:	eef0 7a40 	vmov.f32	s15, s0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

				ekf_predict(BMI->datas.gyro_y,-BMI->datas.gyro_x,BMI->datas.gyro_z,BMI->datas.delta_time);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b74:	eef1 7a67 	vneg.f32	s15, s15
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	edd3 6a08 	vldr	s13, [r3, #32]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	ed93 6a1c 	vldr	s12, [r3, #112]	@ 0x70
 8002b84:	eef0 1a46 	vmov.f32	s3, s12
 8002b88:	eeb0 1a66 	vmov.f32	s2, s13
 8002b8c:	eef0 0a67 	vmov.f32	s1, s15
 8002b90:	eeb0 0a47 	vmov.f32	s0, s14
 8002b94:	f002 fd58 	bl	8005648 <ekf_predict>
				BMI->datas.yaw1 = quaternionToYaw1();
 8002b98:	f002 fe7c 	bl	8005894 <quaternionToYaw1>
 8002b9c:	eef0 7a40 	vmov.f32	s15, s0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	e00d      	b.n	8002bc0 <bmi088_update+0x768>
 8002ba4:	f3af 8000 	nop.w
 8002ba8:	00000000 	.word	0x00000000
 8002bac:	40dfffc0 	.word	0x40dfffc0
 8002bb0:	a0000000 	.word	0xa0000000
 8002bb4:	3f91df46 	.word	0x3f91df46
 8002bb8:	2000024e 	.word	0x2000024e
 8002bbc:	2000024d 	.word	0x2000024d
 8002bc0:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
				BMI->datas.pitch1 = quaternionToPitch1();
 8002bc4:	f002 fec4 	bl	8005950 <quaternionToPitch1>
 8002bc8:	eef0 7a40 	vmov.f32	s15, s0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
				BMI->datas.roll1 = quaternionToRoll1();
 8002bd2:	f002 fef5 	bl	80059c0 <quaternionToRoll1>
 8002bd6:	eef0 7a40 	vmov.f32	s15, s0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
				is_gyro_renewed = 1;
 8002be0:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <bmi088_update+0x7a4>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
			}
			BMI->flags.isGyroUpdated = 0;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
			is_time_updated = 0;
 8002bec:	4b04      	ldr	r3, [pc, #16]	@ (8002c00 <bmi088_update+0x7a8>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	e000      	b.n	8002bf6 <bmi088_update+0x79e>
					return;
 8002bf4:	bf00      	nop
		}
}
 8002bf6:	3738      	adds	r7, #56	@ 0x38
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8002bfc:	2000024f 	.word	0x2000024f
 8002c00:	2000024d 	.word	0x2000024d

08002c04 <bmi088_set_accel_INT>:


void bmi088_set_accel_INT(bmi088_struct_t* BMI)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelUpdated = 1;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	705a      	strb	r2, [r3, #1]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <bmi088_set_gyro_INT>:

void bmi088_set_gyro_INT(bmi088_struct_t* BMI)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroUpdated = 1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <get_offset>:
	HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void get_offset(bmi088_struct_t* BMI)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	int offsetCounter = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		bmi088_update(BMI);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff fc07 	bl	8002458 <bmi088_update>
		if(is_gyro_renewed == 1)
 8002c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d08 <get_offset+0xd0>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d1f8      	bne.n	8002c44 <get_offset+0xc>
		{
			if(offsetCounter < 1000)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c58:	da2d      	bge.n	8002cb6 <get_offset+0x7e>
			{
				BMI->device_config.offsets->gyro_offset[0] += BMI->datas.gyro_x;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	ed93 7a00 	vldr	s14, [r3]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c70:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] += BMI->datas.gyro_y;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8a:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] += BMI->datas.gyro_z;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca4:	edc3 7a02 	vstr	s15, [r3, #8]
				offsetCounter++;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3301      	adds	r3, #1
 8002cac:	60fb      	str	r3, [r7, #12]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
				//quaternionSet_zero();
				break;
				//Error_Handler();
			}
			is_gyro_renewed = 0;
 8002cae:	4b16      	ldr	r3, [pc, #88]	@ (8002d08 <get_offset+0xd0>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
 8002cb4:	e7c6      	b.n	8002c44 <get_offset+0xc>
				BMI->device_config.offsets->gyro_offset[0] /= 1000.0;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	ed93 7a00 	vldr	s14, [r3]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002d0c <get_offset+0xd4>
 8002cc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cca:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] /= 1000.0;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	ed93 7a01 	vldr	s14, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002d0c <get_offset+0xd4>
 8002cde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ce2:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	ed93 7a02 	vldr	s14, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002d0c <get_offset+0xd4>
 8002cf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cfa:	edc3 7a02 	vstr	s15, [r3, #8]
				break;
 8002cfe:	bf00      	nop
		}

	}
}
 8002d00:	bf00      	nop
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	2000024f 	.word	0x2000024f
 8002d0c:	447a0000 	.word	0x447a0000

08002d10 <flight_algorithm_init>:

/**
 * @brief Initialize the flight algorithm
 */
void flight_algorithm_init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
    flight_algorithm_reset();
 8002d14:	f000 f802 	bl	8002d1c <flight_algorithm_reset>
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <flight_algorithm_reset>:

/**
 * @brief Reset flight algorithm to initial state
 */
void flight_algorithm_reset(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
    current_phase = PHASE_IDLE;
 8002d20:	4b18      	ldr	r3, [pc, #96]	@ (8002d84 <flight_algorithm_reset+0x68>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
    is_rising = 0;
 8002d26:	4b18      	ldr	r3, [pc, #96]	@ (8002d88 <flight_algorithm_reset+0x6c>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
    is_stabilized = 1;
 8002d2c:	4b17      	ldr	r3, [pc, #92]	@ (8002d8c <flight_algorithm_reset+0x70>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
    is_armed = 0;
 8002d32:	4b17      	ldr	r3, [pc, #92]	@ (8002d90 <flight_algorithm_reset+0x74>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
    drogue_deployed = 0;
 8002d38:	4b16      	ldr	r3, [pc, #88]	@ (8002d94 <flight_algorithm_reset+0x78>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
    main_deployed = 0;
 8002d3e:	4b16      	ldr	r3, [pc, #88]	@ (8002d98 <flight_algorithm_reset+0x7c>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
    altitude_decrease_count = 0;
 8002d44:	4b15      	ldr	r3, [pc, #84]	@ (8002d9c <flight_algorithm_reset+0x80>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]
    status_bits = 0;
 8002d4a:	4b15      	ldr	r3, [pc, #84]	@ (8002da0 <flight_algorithm_reset+0x84>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	801a      	strh	r2, [r3, #0]
    prev_altitude = 0.0f;
 8002d50:	4b14      	ldr	r3, [pc, #80]	@ (8002da4 <flight_algorithm_reset+0x88>)
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
    flight_start_time = 0;
 8002d58:	4b13      	ldr	r3, [pc, #76]	@ (8002da8 <flight_algorithm_reset+0x8c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
    deployed_velocity = 1;
 8002d5e:	4b13      	ldr	r3, [pc, #76]	@ (8002dac <flight_algorithm_reset+0x90>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
    deployed_angle = 1;
 8002d64:	4b12      	ldr	r3, [pc, #72]	@ (8002db0 <flight_algorithm_reset+0x94>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
    apogee_counter = 0;
 8002d6a:	4b12      	ldr	r3, [pc, #72]	@ (8002db4 <flight_algorithm_reset+0x98>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
    prev_velocity = 0;
 8002d70:	4b11      	ldr	r3, [pc, #68]	@ (8002db8 <flight_algorithm_reset+0x9c>)
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000254 	.word	0x20000254
 8002d88:	20000255 	.word	0x20000255
 8002d8c:	20000014 	.word	0x20000014
 8002d90:	20000256 	.word	0x20000256
 8002d94:	20000257 	.word	0x20000257
 8002d98:	20000258 	.word	0x20000258
 8002d9c:	20000268 	.word	0x20000268
 8002da0:	20000270 	.word	0x20000270
 8002da4:	2000026c 	.word	0x2000026c
 8002da8:	20000264 	.word	0x20000264
 8002dac:	20000016 	.word	0x20000016
 8002db0:	20000015 	.word	0x20000015
 8002db4:	2000025c 	.word	0x2000025c
 8002db8:	20000260 	.word	0x20000260

08002dbc <flight_algorithm_update>:

/**
 * @brief Update flight algorithm with sensor data
 */
void flight_algorithm_update(BME_280_t* bme, bmi088_struct_t* bmi, sensor_fusion_t* sensor_fusion)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
    // Calculate key metrics
    float total_acceleration = calculate_total_acceleration(bmi);
 8002dc8:	68b8      	ldr	r0, [r7, #8]
 8002dca:	f000 f921 	bl	8003010 <calculate_total_acceleration>
 8002dce:	ed87 0a05 	vstr	s0, [r7, #20]

    // Status bits are cumulative - once set they remain set
    // Each phase builds on the previous phase's status bits

    // State machine for flight phases
    switch (current_phase) {
 8002dd2:	4b7e      	ldr	r3, [pc, #504]	@ (8002fcc <flight_algorithm_update+0x210>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	f200 80ed 	bhi.w	8002fb6 <flight_algorithm_update+0x1fa>
 8002ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8002de4 <flight_algorithm_update+0x28>)
 8002dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de2:	bf00      	nop
 8002de4:	08002df9 	.word	0x08002df9
 8002de8:	08002e35 	.word	0x08002e35
 8002dec:	08002e67 	.word	0x08002e67
 8002df0:	08002fb7 	.word	0x08002fb7
 8002df4:	08002fb7 	.word	0x08002fb7
        case PHASE_IDLE:
            // Detect launch using acceleration threshold
            if (total_acceleration > launch_accel_threshold) {
 8002df8:	4b75      	ldr	r3, [pc, #468]	@ (8002fd0 <flight_algorithm_update+0x214>)
 8002dfa:	edd3 7a00 	vldr	s15, [r3]
 8002dfe:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0a:	dc00      	bgt.n	8002e0e <flight_algorithm_update+0x52>
                current_phase = PHASE_BOOST;
                is_rising = 1;
                flight_start_time = HAL_GetTick();
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
            }
            break;
 8002e0c:	e0d3      	b.n	8002fb6 <flight_algorithm_update+0x1fa>
                current_phase = PHASE_BOOST;
 8002e0e:	4b6f      	ldr	r3, [pc, #444]	@ (8002fcc <flight_algorithm_update+0x210>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]
                is_rising = 1;
 8002e14:	4b6f      	ldr	r3, [pc, #444]	@ (8002fd4 <flight_algorithm_update+0x218>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
                flight_start_time = HAL_GetTick();
 8002e1a:	f005 fa07 	bl	800822c <HAL_GetTick>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4a6d      	ldr	r2, [pc, #436]	@ (8002fd8 <flight_algorithm_update+0x21c>)
 8002e22:	6013      	str	r3, [r2, #0]
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
 8002e24:	4b6d      	ldr	r3, [pc, #436]	@ (8002fdc <flight_algorithm_update+0x220>)
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	4b6b      	ldr	r3, [pc, #428]	@ (8002fdc <flight_algorithm_update+0x220>)
 8002e30:	801a      	strh	r2, [r3, #0]
            break;
 8002e32:	e0c0      	b.n	8002fb6 <flight_algorithm_update+0x1fa>

        case PHASE_BOOST:
            // After boost phase (typically 3-5 seconds)
            if (HAL_GetTick() - flight_start_time > 7000) {
 8002e34:	f005 f9fa 	bl	800822c <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b67      	ldr	r3, [pc, #412]	@ (8002fd8 <flight_algorithm_update+0x21c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002e44:	4293      	cmp	r3, r2
 8002e46:	f240 80b3 	bls.w	8002fb0 <flight_algorithm_update+0x1f4>
                current_phase = PHASE_COAST;
 8002e4a:	4b60      	ldr	r3, [pc, #384]	@ (8002fcc <flight_algorithm_update+0x210>)
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	701a      	strb	r2, [r3, #0]
                is_stabilized = 1;
 8002e50:	4b63      	ldr	r3, [pc, #396]	@ (8002fe0 <flight_algorithm_update+0x224>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0002; // Set Bit 1: Motor burn prevention period ended
 8002e56:	4b61      	ldr	r3, [pc, #388]	@ (8002fdc <flight_algorithm_update+0x220>)
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	f043 0302 	orr.w	r3, r3, #2
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	4b5e      	ldr	r3, [pc, #376]	@ (8002fdc <flight_algorithm_update+0x220>)
 8002e62:	801a      	strh	r2, [r3, #0]
            }
            break;
 8002e64:	e0a4      	b.n	8002fb0 <flight_algorithm_update+0x1f4>

        case PHASE_COAST:
            // Check minimum arming altitude
            if (bme->altitude > min_arming_altitude) {
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	ed93 7a08 	vldr	s14, [r3, #32]
 8002e6c:	4b5d      	ldr	r3, [pc, #372]	@ (8002fe4 <flight_algorithm_update+0x228>)
 8002e6e:	edd3 7a00 	vldr	s15, [r3]
 8002e72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7a:	dd09      	ble.n	8002e90 <flight_algorithm_update+0xd4>
                is_armed = 1;
 8002e7c:	4b5a      	ldr	r3, [pc, #360]	@ (8002fe8 <flight_algorithm_update+0x22c>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0004; // Set Bit 2: Minimum altitude threshold exceeded
 8002e82:	4b56      	ldr	r3, [pc, #344]	@ (8002fdc <flight_algorithm_update+0x220>)
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	f043 0304 	orr.w	r3, r3, #4
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	4b53      	ldr	r3, [pc, #332]	@ (8002fdc <flight_algorithm_update+0x220>)
 8002e8e:	801a      	strh	r2, [r3, #0]
            }

            // Check if angle exceeds threshold
            if (is_armed && (fabs(bmi->datas.angle_y) > max_angle_threshold) && deployed_angle) {
 8002e90:	4b55      	ldr	r3, [pc, #340]	@ (8002fe8 <flight_algorithm_update+0x22c>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01f      	beq.n	8002ed8 <flight_algorithm_update+0x11c>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002e9e:	eeb0 7ae7 	vabs.f32	s14, s15
 8002ea2:	4b52      	ldr	r3, [pc, #328]	@ (8002fec <flight_algorithm_update+0x230>)
 8002ea4:	edd3 7a00 	vldr	s15, [r3]
 8002ea8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb0:	dd12      	ble.n	8002ed8 <flight_algorithm_update+0x11c>
 8002eb2:	4b4f      	ldr	r3, [pc, #316]	@ (8002ff0 <flight_algorithm_update+0x234>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00e      	beq.n	8002ed8 <flight_algorithm_update+0x11c>
                drogue_deployed = 1;
 8002eba:	4b4e      	ldr	r3, [pc, #312]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	701a      	strb	r2, [r3, #0]
                deployed_angle = 0;
 8002ec0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ff0 <flight_algorithm_update+0x234>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0008; // Set Bit 3: Rocket body angle exceeds threshold
 8002ec6:	4b45      	ldr	r3, [pc, #276]	@ (8002fdc <flight_algorithm_update+0x220>)
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	f043 0308 	orr.w	r3, r3, #8
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	4b42      	ldr	r3, [pc, #264]	@ (8002fdc <flight_algorithm_update+0x220>)
 8002ed2:	801a      	strh	r2, [r3, #0]
                deploy_drogue_parachute();
 8002ed4:	f000 f906 	bl	80030e4 <deploy_drogue_parachute>
                drogue_deployed = 1;
                deployed_velocity = 0;
                // deploy_drogue_parachute(); // Actual deployment command
            }*/

            if (is_armed && sensor_fusion->velocity < 0.0f && sensor_fusion->velocity < prev_velocity && deployed_velocity) {
 8002ed8:	4b43      	ldr	r3, [pc, #268]	@ (8002fe8 <flight_algorithm_update+0x22c>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d036      	beq.n	8002f4e <flight_algorithm_update+0x192>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ee6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eee:	d52e      	bpl.n	8002f4e <flight_algorithm_update+0x192>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ef6:	4b40      	ldr	r3, [pc, #256]	@ (8002ff8 <flight_algorithm_update+0x23c>)
 8002ef8:	edd3 7a00 	vldr	s15, [r3]
 8002efc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f04:	d523      	bpl.n	8002f4e <flight_algorithm_update+0x192>
 8002f06:	4b3d      	ldr	r3, [pc, #244]	@ (8002ffc <flight_algorithm_update+0x240>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d01f      	beq.n	8002f4e <flight_algorithm_update+0x192>
                apogee_counter++;
 8002f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8003000 <flight_algorithm_update+0x244>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3301      	adds	r3, #1
 8002f14:	4a3a      	ldr	r2, [pc, #232]	@ (8003000 <flight_algorithm_update+0x244>)
 8002f16:	6013      	str	r3, [r2, #0]
                if (apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8002f18:	4b39      	ldr	r3, [pc, #228]	@ (8003000 <flight_algorithm_update+0x244>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	dd19      	ble.n	8002f54 <flight_algorithm_update+0x198>
                    status_bits |= 0x0010; // Set Bit 4: Rocket altitude started decreasing
 8002f20:	4b2e      	ldr	r3, [pc, #184]	@ (8002fdc <flight_algorithm_update+0x220>)
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	f043 0310 	orr.w	r3, r3, #16
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002fdc <flight_algorithm_update+0x220>)
 8002f2c:	801a      	strh	r2, [r3, #0]
                    status_bits |= 0x0020; // Set Bit 5: Drag parachute deployment command generated
 8002f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002fdc <flight_algorithm_update+0x220>)
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	f043 0320 	orr.w	r3, r3, #32
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	4b28      	ldr	r3, [pc, #160]	@ (8002fdc <flight_algorithm_update+0x220>)
 8002f3a:	801a      	strh	r2, [r3, #0]
                    drogue_deployed = 1;
 8002f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	701a      	strb	r2, [r3, #0]
                    deployed_velocity = 0;
 8002f42:	4b2e      	ldr	r3, [pc, #184]	@ (8002ffc <flight_algorithm_update+0x240>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	701a      	strb	r2, [r3, #0]
                    deploy_drogue_parachute();
 8002f48:	f000 f8cc 	bl	80030e4 <deploy_drogue_parachute>
                if (apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8002f4c:	e002      	b.n	8002f54 <flight_algorithm_update+0x198>
                }
            } else {
                apogee_counter = 0;
 8002f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8003000 <flight_algorithm_update+0x244>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
            }
            prev_velocity = sensor_fusion->velocity;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4a27      	ldr	r2, [pc, #156]	@ (8002ff8 <flight_algorithm_update+0x23c>)
 8002f5a:	6013      	str	r3, [r2, #0]

            // Deploy main parachute at designated altitude
            if (drogue_deployed && bme->altitude < main_chute_altitude) {
 8002f5c:	4b25      	ldr	r3, [pc, #148]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d027      	beq.n	8002fb4 <flight_algorithm_update+0x1f8>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	ed93 7a08 	vldr	s14, [r3, #32]
 8002f6a:	4b26      	ldr	r3, [pc, #152]	@ (8003004 <flight_algorithm_update+0x248>)
 8002f6c:	edd3 7a00 	vldr	s15, [r3]
 8002f70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f78:	d400      	bmi.n	8002f7c <flight_algorithm_update+0x1c0>
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
                main_deployed = 1;
                drogue_deployed = 0;
                deploy_main_parachute();
            }
            break;
 8002f7a:	e01b      	b.n	8002fb4 <flight_algorithm_update+0x1f8>
                current_phase = PHASE_MAIN_DESCENT;
 8002f7c:	4b13      	ldr	r3, [pc, #76]	@ (8002fcc <flight_algorithm_update+0x210>)
 8002f7e:	2203      	movs	r2, #3
 8002f80:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0040; // Set Bit 6: Rocket altitude below specified altitude
 8002f82:	4b16      	ldr	r3, [pc, #88]	@ (8002fdc <flight_algorithm_update+0x220>)
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	4b13      	ldr	r3, [pc, #76]	@ (8002fdc <flight_algorithm_update+0x220>)
 8002f8e:	801a      	strh	r2, [r3, #0]
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
 8002f90:	4b12      	ldr	r3, [pc, #72]	@ (8002fdc <flight_algorithm_update+0x220>)
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	4b10      	ldr	r3, [pc, #64]	@ (8002fdc <flight_algorithm_update+0x220>)
 8002f9c:	801a      	strh	r2, [r3, #0]
                main_deployed = 1;
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003008 <flight_algorithm_update+0x24c>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
                drogue_deployed = 0;
 8002fa4:	4b13      	ldr	r3, [pc, #76]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
                deploy_main_parachute();
 8002faa:	f000 f8f3 	bl	8003194 <deploy_main_parachute>
            break;
 8002fae:	e001      	b.n	8002fb4 <flight_algorithm_update+0x1f8>
            break;
 8002fb0:	bf00      	nop
 8002fb2:	e000      	b.n	8002fb6 <flight_algorithm_update+0x1fa>
            break;
 8002fb4:	bf00      	nop

        case PHASE_LANDED:
            // No additional status bits to set after landing
            break;
    }
    deploy_parachute_update();
 8002fb6:	f000 f8b1 	bl	800311c <deploy_parachute_update>
    prev_altitude = bme->altitude;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	4a13      	ldr	r2, [pc, #76]	@ (800300c <flight_algorithm_update+0x250>)
 8002fc0:	6013      	str	r3, [r2, #0]
}
 8002fc2:	bf00      	nop
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000254 	.word	0x20000254
 8002fd0:	20000004 	.word	0x20000004
 8002fd4:	20000255 	.word	0x20000255
 8002fd8:	20000264 	.word	0x20000264
 8002fdc:	20000270 	.word	0x20000270
 8002fe0:	20000014 	.word	0x20000014
 8002fe4:	20000008 	.word	0x20000008
 8002fe8:	20000256 	.word	0x20000256
 8002fec:	20000010 	.word	0x20000010
 8002ff0:	20000015 	.word	0x20000015
 8002ff4:	20000257 	.word	0x20000257
 8002ff8:	20000260 	.word	0x20000260
 8002ffc:	20000016 	.word	0x20000016
 8003000:	2000025c 	.word	0x2000025c
 8003004:	2000000c 	.word	0x2000000c
 8003008:	20000258 	.word	0x20000258
 800300c:	2000026c 	.word	0x2000026c

08003010 <calculate_total_acceleration>:

/**
 * @brief Calculate total acceleration magnitude
 */
static float calculate_total_acceleration(bmi088_struct_t* bmi)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003024:	ee27 7a27 	vmul.f32	s14, s14, s15
                 (bmi->datas.acc_y * bmi->datas.acc_y) +
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8003034:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 8003038:	ee37 7a27 	vadd.f32	s14, s14, s15
                 (bmi->datas.acc_z * bmi->datas.acc_z));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8003048:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 800304c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003050:	eeb0 0a67 	vmov.f32	s0, s15
 8003054:	f00d f8f6 	bl	8010244 <sqrtf>
 8003058:	eef0 7a40 	vmov.f32	s15, s0
}
 800305c:	eeb0 0a67 	vmov.f32	s0, s15
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <flight_algorithm_get_status_bits>:

/**
 * @brief Get the current status bits
 */
uint16_t flight_algorithm_get_status_bits(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
    return status_bits;
 800306c:	4b03      	ldr	r3, [pc, #12]	@ (800307c <flight_algorithm_get_status_bits+0x14>)
 800306e:	881b      	ldrh	r3, [r3, #0]
}
 8003070:	4618      	mov	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000270 	.word	0x20000270

08003080 <flight_algorithm_set_parameters>:
 */
void flight_algorithm_set_parameters(float launch_accel_threshold_param,
                                   float min_arming_altitude_param,
                                   float main_chute_altitude_param,
                                   float max_angle_threshold_param)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	ed87 0a03 	vstr	s0, [r7, #12]
 800308a:	edc7 0a02 	vstr	s1, [r7, #8]
 800308e:	ed87 1a01 	vstr	s2, [r7, #4]
 8003092:	edc7 1a00 	vstr	s3, [r7]
    launch_accel_threshold = launch_accel_threshold_param;
 8003096:	4a09      	ldr	r2, [pc, #36]	@ (80030bc <flight_algorithm_set_parameters+0x3c>)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6013      	str	r3, [r2, #0]
    min_arming_altitude = min_arming_altitude_param;
 800309c:	4a08      	ldr	r2, [pc, #32]	@ (80030c0 <flight_algorithm_set_parameters+0x40>)
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	6013      	str	r3, [r2, #0]
    main_chute_altitude = main_chute_altitude_param;
 80030a2:	4a08      	ldr	r2, [pc, #32]	@ (80030c4 <flight_algorithm_set_parameters+0x44>)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6013      	str	r3, [r2, #0]
    max_angle_threshold = max_angle_threshold_param;
 80030a8:	4a07      	ldr	r2, [pc, #28]	@ (80030c8 <flight_algorithm_set_parameters+0x48>)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6013      	str	r3, [r2, #0]
}
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000004 	.word	0x20000004
 80030c0:	20000008 	.word	0x20000008
 80030c4:	2000000c 	.word	0x2000000c
 80030c8:	20000010 	.word	0x20000010

080030cc <flight_algorithm_get_start_time>:

uint32_t flight_algorithm_get_start_time(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
    return flight_start_time;
 80030d0:	4b03      	ldr	r3, [pc, #12]	@ (80030e0 <flight_algorithm_get_start_time+0x14>)
 80030d2:	681b      	ldr	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20000264 	.word	0x20000264

080030e4 <deploy_drogue_parachute>:

void deploy_drogue_parachute(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
    if (!drogue_pulse_active) {
 80030e8:	4b09      	ldr	r3, [pc, #36]	@ (8003110 <deploy_drogue_parachute+0x2c>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10c      	bne.n	800310a <deploy_drogue_parachute+0x26>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80030f0:	2201      	movs	r2, #1
 80030f2:	2140      	movs	r1, #64	@ 0x40
 80030f4:	4807      	ldr	r0, [pc, #28]	@ (8003114 <deploy_drogue_parachute+0x30>)
 80030f6:	f006 fcd5 	bl	8009aa4 <HAL_GPIO_WritePin>
        drogue_pulse_start_time = HAL_GetTick();
 80030fa:	f005 f897 	bl	800822c <HAL_GetTick>
 80030fe:	4603      	mov	r3, r0
 8003100:	4a05      	ldr	r2, [pc, #20]	@ (8003118 <deploy_drogue_parachute+0x34>)
 8003102:	6013      	str	r3, [r2, #0]
        drogue_pulse_active = 1;
 8003104:	4b02      	ldr	r3, [pc, #8]	@ (8003110 <deploy_drogue_parachute+0x2c>)
 8003106:	2201      	movs	r2, #1
 8003108:	701a      	strb	r2, [r3, #0]
    }
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000272 	.word	0x20000272
 8003114:	40020800 	.word	0x40020800
 8003118:	20000274 	.word	0x20000274

0800311c <deploy_parachute_update>:

void deploy_parachute_update(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
    if (drogue_pulse_active && (HAL_GetTick() - drogue_pulse_start_time >= 1000)) {
 8003120:	4b16      	ldr	r3, [pc, #88]	@ (800317c <deploy_parachute_update+0x60>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d010      	beq.n	800314a <deploy_parachute_update+0x2e>
 8003128:	f005 f880 	bl	800822c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	4b14      	ldr	r3, [pc, #80]	@ (8003180 <deploy_parachute_update+0x64>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003138:	d307      	bcc.n	800314a <deploy_parachute_update+0x2e>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800313a:	2200      	movs	r2, #0
 800313c:	2140      	movs	r1, #64	@ 0x40
 800313e:	4811      	ldr	r0, [pc, #68]	@ (8003184 <deploy_parachute_update+0x68>)
 8003140:	f006 fcb0 	bl	8009aa4 <HAL_GPIO_WritePin>
        drogue_pulse_active = 0;
 8003144:	4b0d      	ldr	r3, [pc, #52]	@ (800317c <deploy_parachute_update+0x60>)
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
    }
    if (main_pulse_active && (HAL_GetTick() - main_pulse_start_time >= 1000)) {
 800314a:	4b0f      	ldr	r3, [pc, #60]	@ (8003188 <deploy_parachute_update+0x6c>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d011      	beq.n	8003176 <deploy_parachute_update+0x5a>
 8003152:	f005 f86b 	bl	800822c <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	4b0c      	ldr	r3, [pc, #48]	@ (800318c <deploy_parachute_update+0x70>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003162:	d308      	bcc.n	8003176 <deploy_parachute_update+0x5a>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8003164:	2200      	movs	r2, #0
 8003166:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800316a:	4809      	ldr	r0, [pc, #36]	@ (8003190 <deploy_parachute_update+0x74>)
 800316c:	f006 fc9a 	bl	8009aa4 <HAL_GPIO_WritePin>
        main_pulse_active = 0;
 8003170:	4b05      	ldr	r3, [pc, #20]	@ (8003188 <deploy_parachute_update+0x6c>)
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
    }
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000272 	.word	0x20000272
 8003180:	20000274 	.word	0x20000274
 8003184:	40020800 	.word	0x40020800
 8003188:	20000278 	.word	0x20000278
 800318c:	2000027c 	.word	0x2000027c
 8003190:	40020000 	.word	0x40020000

08003194 <deploy_main_parachute>:

void deploy_main_parachute(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
    if (!main_pulse_active) {
 8003198:	4b09      	ldr	r3, [pc, #36]	@ (80031c0 <deploy_main_parachute+0x2c>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10d      	bne.n	80031bc <deploy_main_parachute+0x28>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80031a0:	2201      	movs	r2, #1
 80031a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80031a6:	4807      	ldr	r0, [pc, #28]	@ (80031c4 <deploy_main_parachute+0x30>)
 80031a8:	f006 fc7c 	bl	8009aa4 <HAL_GPIO_WritePin>
        main_pulse_start_time = HAL_GetTick();
 80031ac:	f005 f83e 	bl	800822c <HAL_GetTick>
 80031b0:	4603      	mov	r3, r0
 80031b2:	4a05      	ldr	r2, [pc, #20]	@ (80031c8 <deploy_main_parachute+0x34>)
 80031b4:	6013      	str	r3, [r2, #0]
        main_pulse_active = 1;
 80031b6:	4b02      	ldr	r3, [pc, #8]	@ (80031c0 <deploy_main_parachute+0x2c>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]
    }
}
 80031bc:	bf00      	nop
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000278 	.word	0x20000278
 80031c4:	40020000 	.word	0x40020000
 80031c8:	2000027c 	.word	0x2000027c

080031cc <KalmanFilter_Init>:

/**
 * @brief Initialize the Kalman filter
 * @param kf Pointer to Kalman filter structure
 */
void KalmanFilter_Init(KalmanFilter_t *kf) {
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
    // Initialize state vector
    kf->x[0] = 0.0f;  // Altitude
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
    kf->x[1] = 0.0f;  // Velocity
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	605a      	str	r2, [r3, #4]
    kf->x[2] = 0.0f;  // Acceleration
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	609a      	str	r2, [r3, #8]

    // Initialize covariance matrix with initial uncertainty
    for (int i = 0; i < 3; i++) {
 80031ec:	2300      	movs	r3, #0
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	e01f      	b.n	8003232 <KalmanFilter_Init+0x66>
        for (int j = 0; j < 3; j++) {
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	e016      	b.n	8003226 <KalmanFilter_Init+0x5a>
            kf->P[i][j] = (i == j) ? 100.0f : 0.0f;
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d101      	bne.n	8003204 <KalmanFilter_Init+0x38>
 8003200:	491b      	ldr	r1, [pc, #108]	@ (8003270 <KalmanFilter_Init+0xa4>)
 8003202:	e001      	b.n	8003208 <KalmanFilter_Init+0x3c>
 8003204:	f04f 0100 	mov.w	r1, #0
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	4413      	add	r3, r2
 8003216:	3302      	adds	r3, #2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4403      	add	r3, r0
 800321c:	3304      	adds	r3, #4
 800321e:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 3; j++) {
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	3301      	adds	r3, #1
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b02      	cmp	r3, #2
 800322a:	dde5      	ble.n	80031f8 <KalmanFilter_Init+0x2c>
    for (int i = 0; i < 3; i++) {
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	3301      	adds	r3, #1
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b02      	cmp	r3, #2
 8003236:	dddc      	ble.n	80031f2 <KalmanFilter_Init+0x26>
        }
    }

    // Set noise parameters - these can be tuned
    kf->process_noise = 0.01f;         // Process noise
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a0e      	ldr	r2, [pc, #56]	@ (8003274 <KalmanFilter_Init+0xa8>)
 800323c:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->measurement_noise_alt = 0.005f;  // Altitude measurement noise
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a0d      	ldr	r2, [pc, #52]	@ (8003278 <KalmanFilter_Init+0xac>)
 8003242:	635a      	str	r2, [r3, #52]	@ 0x34
    kf->measurement_noise_acc = 5.0f;  // Acceleration measurement noise
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a0d      	ldr	r2, [pc, #52]	@ (800327c <KalmanFilter_Init+0xb0>)
 8003248:	639a      	str	r2, [r3, #56]	@ 0x38

    // Initialize apogee detection variables
    kf->apogee_detected = 0;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	63da      	str	r2, [r3, #60]	@ 0x3c
    kf->apogee_counter = 0;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	641a      	str	r2, [r3, #64]	@ 0x40
    kf->prev_velocity = 0.0f;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	645a      	str	r2, [r3, #68]	@ 0x44

    // Mach transition control
    kf->in_mach_transition = 0;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	42c80000 	.word	0x42c80000
 8003274:	3c23d70a 	.word	0x3c23d70a
 8003278:	3ba3d70a 	.word	0x3ba3d70a
 800327c:	40a00000 	.word	0x40a00000

08003280 <KalmanFilter_Update>:
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 * @param dt Time step (seconds)
 * @return Filtered altitude
 */
float KalmanFilter_Update(KalmanFilter_t *kf, float altitude, float accel, float dt) {
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	ed87 0a02 	vstr	s0, [r7, #8]
 800328c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003290:	ed87 1a00 	vstr	s2, [r7]
    // Check for Mach transition region (approximately 300-350 m/s)
    // Skip barometer readings in this region due to pressure anomalies
    if (fabsf(kf->x[1]) > 300.0f && fabsf(kf->x[1]) < 350.0f) {
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	edd3 7a01 	vldr	s15, [r3, #4]
 800329a:	eef0 7ae7 	vabs.f32	s15, s15
 800329e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003304 <KalmanFilter_Update+0x84>
 80032a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032aa:	dd0f      	ble.n	80032cc <KalmanFilter_Update+0x4c>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80032b2:	eef0 7ae7 	vabs.f32	s15, s15
 80032b6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003308 <KalmanFilter_Update+0x88>
 80032ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c2:	d503      	bpl.n	80032cc <KalmanFilter_Update+0x4c>
        kf->in_mach_transition = 1;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2201      	movs	r2, #1
 80032c8:	649a      	str	r2, [r3, #72]	@ 0x48
 80032ca:	e002      	b.n	80032d2 <KalmanFilter_Update+0x52>
    } else {
        kf->in_mach_transition = 0;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // Time update (prediction)
    KalmanFilter_TimeUpdate(kf, dt);
 80032d2:	ed97 0a00 	vldr	s0, [r7]
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f818 	bl	800330c <KalmanFilter_TimeUpdate>

    // Measurement update (correction)
    KalmanFilter_MeasurementUpdate(kf, altitude, accel);
 80032dc:	edd7 0a01 	vldr	s1, [r7, #4]
 80032e0:	ed97 0a02 	vldr	s0, [r7, #8]
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 fa1d 	bl	8003724 <KalmanFilter_MeasurementUpdate>

    // Check for apogee
    KalmanFilter_DetectApogee(kf);
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f001 f96a 	bl	80045c4 <KalmanFilter_DetectApogee>

    // Return filtered altitude
    return kf->x[0];
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	ee07 3a90 	vmov	s15, r3
}
 80032f8:	eeb0 0a67 	vmov.f32	s0, s15
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	43960000 	.word	0x43960000
 8003308:	43af0000 	.word	0x43af0000

0800330c <KalmanFilter_TimeUpdate>:
/**
 * @brief Time update step of Kalman filter (prediction)
 * @param kf Pointer to Kalman filter structure
 * @param dt Time step (seconds)
 */
static void KalmanFilter_TimeUpdate(KalmanFilter_t *kf, float dt) {
 800330c:	b580      	push	{r7, lr}
 800330e:	b0b6      	sub	sp, #216	@ 0xd8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	ed87 0a00 	vstr	s0, [r7]
    float dt2 = dt * dt;
 8003318:	edd7 7a00 	vldr	s15, [r7]
 800331c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003320:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
    float dt3 = dt2 * dt;
 8003324:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003328:	edd7 7a00 	vldr	s15, [r7]
 800332c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003330:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
    float dt4 = dt2 * dt2;
 8003334:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003338:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800333c:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac

    // State transition matrix F = [1 dt dt²/2; 0 1 dt; 0 0 1]
    // State prediction: x = F*x
    float x0_new = kf->x[0] + kf->x[1] * dt + kf->x[2] * dt2 / 2.0f;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	ed93 7a00 	vldr	s14, [r3]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	edd3 6a01 	vldr	s13, [r3, #4]
 800334c:	edd7 7a00 	vldr	s15, [r7]
 8003350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003354:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	edd3 6a02 	vldr	s13, [r3, #8]
 800335e:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003362:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003366:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800336a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800336e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003372:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
    float x1_new = kf->x[1] + kf->x[2] * dt;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	ed93 7a01 	vldr	s14, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003382:	edd7 7a00 	vldr	s15, [r7]
 8003386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800338a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800338e:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
    float x2_new = kf->x[2];  // Acceleration assumed constant
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    kf->x[0] = x0_new;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80033a0:	601a      	str	r2, [r3, #0]
    kf->x[1] = x1_new;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80033a8:	605a      	str	r2, [r3, #4]
    kf->x[2] = x2_new;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80033b0:	609a      	str	r2, [r3, #8]

    // Process noise covariance Q
    float q = kf->process_noise;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    float Q[3][3] = {
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80033ba:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80033be:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80033c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80033c6:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80033ca:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80033ce:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80033d2:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80033d6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80033da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80033de:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80033e2:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80033e6:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80033ea:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80033ee:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80033f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80033f6:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80033fa:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80033fe:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
        {dt3/2.0f * q, dt2 * q, dt * q},
 8003402:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003406:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800340a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800340e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003412:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003416:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
        {dt3/2.0f * q, dt2 * q, dt * q},
 800341a:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800341e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003422:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003426:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
        {dt3/2.0f * q, dt2 * q, dt * q},
 800342a:	ed97 7a00 	vldr	s14, [r7]
 800342e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003432:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003436:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
        {dt2/2.0f * q, dt * q, q}
 800343a:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800343e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003442:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003446:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800344a:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800344e:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
        {dt2/2.0f * q, dt * q, q}
 8003452:	ed97 7a00 	vldr	s14, [r7]
 8003456:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800345a:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800345e:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 8003462:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003466:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    };

    // State transition matrix F
    float F[3][3] = {
 800346a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800346e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	65bb      	str	r3, [r7, #88]	@ 0x58
        {1.0f, dt, dt2/2.0f},
 8003474:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003478:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800347c:	eec7 7a26 	vdiv.f32	s15, s14, s13
    float F[3][3] = {
 8003480:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	663b      	str	r3, [r7, #96]	@ 0x60
 800348a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800348e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	673b      	str	r3, [r7, #112]	@ 0x70
 80034a0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80034a4:	677b      	str	r3, [r7, #116]	@ 0x74
        {0.0f, 1.0f, dt},
        {0.0f, 0.0f, 1.0f}
    };

    // Temporary matrices for calculation
    float FP[3][3] = {0};
 80034a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80034aa:	2224      	movs	r2, #36	@ 0x24
 80034ac:	2100      	movs	r1, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f00a ff1f 	bl	800e2f2 <memset>
    float FPFT[3][3] = {0};
 80034b4:	f107 030c 	add.w	r3, r7, #12
 80034b8:	2224      	movs	r2, #36	@ 0x24
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f00a ff18 	bl	800e2f2 <memset>

    // P = F*P*F' + Q
    // Step 1: FP = F*P
    for (int i = 0; i < 3; i++) {
 80034c2:	2300      	movs	r3, #0
 80034c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80034c8:	e06a      	b.n	80035a0 <KalmanFilter_TimeUpdate+0x294>
        for (int j = 0; j < 3; j++) {
 80034ca:	2300      	movs	r3, #0
 80034cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034d0:	e05d      	b.n	800358e <KalmanFilter_TimeUpdate+0x282>
            FP[i][j] = 0.0f;
 80034d2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	33d8      	adds	r3, #216	@ 0xd8
 80034e6:	443b      	add	r3, r7
 80034e8:	3ba8      	subs	r3, #168	@ 0xa8
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 80034f0:	2300      	movs	r3, #0
 80034f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80034f6:	e041      	b.n	800357c <KalmanFilter_TimeUpdate+0x270>
                FP[i][j] += F[i][k] * kf->P[k][j];
 80034f8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80034fc:	4613      	mov	r3, r2
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	4413      	add	r3, r2
 8003502:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	33d8      	adds	r3, #216	@ 0xd8
 800350c:	443b      	add	r3, r7
 800350e:	3ba8      	subs	r3, #168	@ 0xa8
 8003510:	ed93 7a00 	vldr	s14, [r3]
 8003514:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003518:	4613      	mov	r3, r2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	4413      	add	r3, r2
 800351e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	33d8      	adds	r3, #216	@ 0xd8
 8003528:	443b      	add	r3, r7
 800352a:	3b84      	subs	r3, #132	@ 0x84
 800352c:	edd3 6a00 	vldr	s13, [r3]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003536:	4613      	mov	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4413      	add	r3, r2
 800353c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003540:	4413      	add	r3, r2
 8003542:	3302      	adds	r3, #2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	3304      	adds	r3, #4
 800354a:	edd3 7a00 	vldr	s15, [r3]
 800354e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003556:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800355a:	4613      	mov	r3, r2
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	4413      	add	r3, r2
 8003560:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	33d8      	adds	r3, #216	@ 0xd8
 800356a:	443b      	add	r3, r7
 800356c:	3ba8      	subs	r3, #168	@ 0xa8
 800356e:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 8003572:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003576:	3301      	adds	r3, #1
 8003578:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800357c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003580:	2b02      	cmp	r3, #2
 8003582:	ddb9      	ble.n	80034f8 <KalmanFilter_TimeUpdate+0x1ec>
        for (int j = 0; j < 3; j++) {
 8003584:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003588:	3301      	adds	r3, #1
 800358a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800358e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003592:	2b02      	cmp	r3, #2
 8003594:	dd9d      	ble.n	80034d2 <KalmanFilter_TimeUpdate+0x1c6>
    for (int i = 0; i < 3; i++) {
 8003596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800359a:	3301      	adds	r3, #1
 800359c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80035a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	dd90      	ble.n	80034ca <KalmanFilter_TimeUpdate+0x1be>
            }
        }
    }

    // Step 2: FPFT = FP*F'
    for (int i = 0; i < 3; i++) {
 80035a8:	2300      	movs	r3, #0
 80035aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035ae:	e069      	b.n	8003684 <KalmanFilter_TimeUpdate+0x378>
        for (int j = 0; j < 3; j++) {
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035b6:	e05c      	b.n	8003672 <KalmanFilter_TimeUpdate+0x366>
            FPFT[i][j] = 0.0f;
 80035b8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80035bc:	4613      	mov	r3, r2
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	4413      	add	r3, r2
 80035c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	33d8      	adds	r3, #216	@ 0xd8
 80035cc:	443b      	add	r3, r7
 80035ce:	3bcc      	subs	r3, #204	@ 0xcc
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 80035d6:	2300      	movs	r3, #0
 80035d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035dc:	e040      	b.n	8003660 <KalmanFilter_TimeUpdate+0x354>
                FPFT[i][j] += FP[i][k] * F[j][k];  // F'[k][j] = F[j][k]
 80035de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80035e2:	4613      	mov	r3, r2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	4413      	add	r3, r2
 80035e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	33d8      	adds	r3, #216	@ 0xd8
 80035f2:	443b      	add	r3, r7
 80035f4:	3bcc      	subs	r3, #204	@ 0xcc
 80035f6:	ed93 7a00 	vldr	s14, [r3]
 80035fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80035fe:	4613      	mov	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	4413      	add	r3, r2
 8003604:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003608:	4413      	add	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	33d8      	adds	r3, #216	@ 0xd8
 800360e:	443b      	add	r3, r7
 8003610:	3ba8      	subs	r3, #168	@ 0xa8
 8003612:	edd3 6a00 	vldr	s13, [r3]
 8003616:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800361a:	4613      	mov	r3, r2
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	4413      	add	r3, r2
 8003620:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	33d8      	adds	r3, #216	@ 0xd8
 800362a:	443b      	add	r3, r7
 800362c:	3b84      	subs	r3, #132	@ 0x84
 800362e:	edd3 7a00 	vldr	s15, [r3]
 8003632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800363a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800363e:	4613      	mov	r3, r2
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	4413      	add	r3, r2
 8003644:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	33d8      	adds	r3, #216	@ 0xd8
 800364e:	443b      	add	r3, r7
 8003650:	3bcc      	subs	r3, #204	@ 0xcc
 8003652:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 8003656:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800365a:	3301      	adds	r3, #1
 800365c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003660:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003664:	2b02      	cmp	r3, #2
 8003666:	ddba      	ble.n	80035de <KalmanFilter_TimeUpdate+0x2d2>
        for (int j = 0; j < 3; j++) {
 8003668:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800366c:	3301      	adds	r3, #1
 800366e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003672:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003676:	2b02      	cmp	r3, #2
 8003678:	dd9e      	ble.n	80035b8 <KalmanFilter_TimeUpdate+0x2ac>
    for (int i = 0; i < 3; i++) {
 800367a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800367e:	3301      	adds	r3, #1
 8003680:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003684:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003688:	2b02      	cmp	r3, #2
 800368a:	dd91      	ble.n	80035b0 <KalmanFilter_TimeUpdate+0x2a4>
            }
        }
    }

    // Step 3: P = FPFT + Q
    for (int i = 0; i < 3; i++) {
 800368c:	2300      	movs	r3, #0
 800368e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003692:	e03e      	b.n	8003712 <KalmanFilter_TimeUpdate+0x406>
        for (int j = 0; j < 3; j++) {
 8003694:	2300      	movs	r3, #0
 8003696:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800369a:	e031      	b.n	8003700 <KalmanFilter_TimeUpdate+0x3f4>
            kf->P[i][j] = FPFT[i][j] + Q[i][j];
 800369c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80036a0:	4613      	mov	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	4413      	add	r3, r2
 80036a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	33d8      	adds	r3, #216	@ 0xd8
 80036b0:	443b      	add	r3, r7
 80036b2:	3bcc      	subs	r3, #204	@ 0xcc
 80036b4:	ed93 7a00 	vldr	s14, [r3]
 80036b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80036bc:	4613      	mov	r3, r2
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	4413      	add	r3, r2
 80036c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	33d8      	adds	r3, #216	@ 0xd8
 80036cc:	443b      	add	r3, r7
 80036ce:	3b60      	subs	r3, #96	@ 0x60
 80036d0:	edd3 7a00 	vldr	s15, [r3]
 80036d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80036de:	4613      	mov	r3, r2
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	4413      	add	r3, r2
 80036e4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80036e8:	4413      	add	r3, r2
 80036ea:	3302      	adds	r3, #2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	3304      	adds	r3, #4
 80036f2:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 80036f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80036fa:	3301      	adds	r3, #1
 80036fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003700:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003704:	2b02      	cmp	r3, #2
 8003706:	ddc9      	ble.n	800369c <KalmanFilter_TimeUpdate+0x390>
    for (int i = 0; i < 3; i++) {
 8003708:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800370c:	3301      	adds	r3, #1
 800370e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003712:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003716:	2b02      	cmp	r3, #2
 8003718:	ddbc      	ble.n	8003694 <KalmanFilter_TimeUpdate+0x388>
        }
    }
}
 800371a:	bf00      	nop
 800371c:	bf00      	nop
 800371e:	37d8      	adds	r7, #216	@ 0xd8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <KalmanFilter_MeasurementUpdate>:
 * @brief Measurement update step of Kalman filter (correction)
 * @param kf Pointer to Kalman filter structure
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 */
static void KalmanFilter_MeasurementUpdate(KalmanFilter_t *kf, float altitude, float accel) {
 8003724:	b5b0      	push	{r4, r5, r7, lr}
 8003726:	b0f6      	sub	sp, #472	@ 0x1d8
 8003728:	af00      	add	r7, sp, #0
 800372a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800372e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003732:	6018      	str	r0, [r3, #0]
 8003734:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003738:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800373c:	ed83 0a00 	vstr	s0, [r3]
 8003740:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003744:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003748:	edc3 0a00 	vstr	s1, [r3]
    // In Mach transition region, only use acceleration measurement
    if (kf->in_mach_transition) {
 800374c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003750:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 826b 	beq.w	8003c34 <KalmanFilter_MeasurementUpdate+0x510>
        // Only use acceleration measurement
        // H = [0 0 1]
        float H[1][3] = {{0.0f, 0.0f, 1.0f}};
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800376e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003772:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
        float z = accel;
 8003776:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800377a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
        float y = z - kf->x[2];  // Innovation
 8003784:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003788:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003792:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 8003796:	ee77 7a67 	vsub.f32	s15, s14, s15
 800379a:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c

        // S = H*P*H' + R
        float HP[1][3] = {0};
 800379e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	605a      	str	r2, [r3, #4]
 80037a8:	609a      	str	r2, [r3, #8]
        float S = 0.0f;
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

        for (int i = 0; i < 3; i++) {
 80037b2:	2300      	movs	r3, #0
 80037b4:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80037b8:	e044      	b.n	8003844 <KalmanFilter_MeasurementUpdate+0x120>
            HP[0][i] = H[0][0]*kf->P[0][i] + H[0][1]*kf->P[1][i] + H[0][2]*kf->P[2][i];
 80037ba:	ed97 7a4e 	vldr	s14, [r7, #312]	@ 0x138
 80037be:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037c2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80037cc:	3302      	adds	r3, #2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	3304      	adds	r3, #4
 80037d4:	edd3 7a00 	vldr	s15, [r3]
 80037d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037dc:	edd7 6a4f 	vldr	s13, [r7, #316]	@ 0x13c
 80037e0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037e4:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80037ee:	3305      	adds	r3, #5
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	3304      	adds	r3, #4
 80037f6:	edd3 7a00 	vldr	s15, [r3]
 80037fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003802:	edd7 6a50 	vldr	s13, [r7, #320]	@ 0x140
 8003806:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800380a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003814:	3308      	adds	r3, #8
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	3304      	adds	r3, #4
 800381c:	edd3 7a00 	vldr	s15, [r3]
 8003820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003828:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003832:	443b      	add	r3, r7
 8003834:	3bac      	subs	r3, #172	@ 0xac
 8003836:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 800383a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800383e:	3301      	adds	r3, #1
 8003840:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8003844:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003848:	2b02      	cmp	r3, #2
 800384a:	ddb6      	ble.n	80037ba <KalmanFilter_MeasurementUpdate+0x96>
        }

        S = HP[0][0]*H[0][0] + HP[0][1]*H[0][1] + HP[0][2]*H[0][2] + kf->measurement_noise_acc;
 800384c:	ed97 7a4b 	vldr	s14, [r7, #300]	@ 0x12c
 8003850:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 8003854:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003858:	edd7 6a4c 	vldr	s13, [r7, #304]	@ 0x130
 800385c:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 8003860:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003864:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003868:	edd7 6a4d 	vldr	s13, [r7, #308]	@ 0x134
 800386c:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8003870:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003874:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003878:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800387c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800388a:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148

        // K = P*H'*S^-1
        float K[3] = {0};
 800388e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	609a      	str	r2, [r3, #8]
        float S_inv = 1.0f / S;
 800389a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800389e:	ed97 7a52 	vldr	s14, [r7, #328]	@ 0x148
 80038a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038a6:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144

        for (int i = 0; i < 3; i++) {
 80038aa:	2300      	movs	r3, #0
 80038ac:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80038b0:	e04f      	b.n	8003952 <KalmanFilter_MeasurementUpdate+0x22e>
            K[i] = (kf->P[i][0]*H[0][0] + kf->P[i][1]*H[0][1] + kf->P[i][2]*H[0][2]) * S_inv;
 80038b2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038b6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80038ba:	6819      	ldr	r1, [r3, #0]
 80038bc:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80038c0:	4613      	mov	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	330c      	adds	r3, #12
 80038cc:	ed93 7a00 	vldr	s14, [r3]
 80038d0:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 80038d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038d8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038dc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80038e0:	6819      	ldr	r1, [r3, #0]
 80038e2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	4613      	mov	r3, r2
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	4413      	add	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	3304      	adds	r3, #4
 80038f4:	edd3 6a00 	vldr	s13, [r3]
 80038f8:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 80038fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003900:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003904:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003908:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800390c:	6819      	ldr	r1, [r3, #0]
 800390e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8003912:	4613      	mov	r3, r2
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	4413      	add	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	3314      	adds	r3, #20
 800391e:	edd3 6a00 	vldr	s13, [r3]
 8003922:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8003926:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800392a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800392e:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 8003932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003936:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003940:	443b      	add	r3, r7
 8003942:	3bb8      	subs	r3, #184	@ 0xb8
 8003944:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003948:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800394c:	3301      	adds	r3, #1
 800394e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003952:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003956:	2b02      	cmp	r3, #2
 8003958:	ddab      	ble.n	80038b2 <KalmanFilter_MeasurementUpdate+0x18e>
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 800395a:	2300      	movs	r3, #0
 800395c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003960:	e029      	b.n	80039b6 <KalmanFilter_MeasurementUpdate+0x292>
            kf->x[i] += K[i] * y;
 8003962:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003966:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	ed93 7a00 	vldr	s14, [r3]
 8003978:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003982:	443b      	add	r3, r7
 8003984:	3bb8      	subs	r3, #184	@ 0xb8
 8003986:	edd3 6a00 	vldr	s13, [r3]
 800398a:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 800398e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003996:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800399a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 80039ac:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80039b0:	3301      	adds	r3, #1
 80039b2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 80039b6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	ddd1      	ble.n	8003962 <KalmanFilter_MeasurementUpdate+0x23e>
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 80039be:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039c2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80039c6:	4618      	mov	r0, r3
 80039c8:	2324      	movs	r3, #36	@ 0x24
 80039ca:	461a      	mov	r2, r3
 80039cc:	2100      	movs	r1, #0
 80039ce:	f00a fc90 	bl	800e2f2 <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 80039d2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039d6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80039da:	4618      	mov	r0, r3
 80039dc:	2324      	movs	r3, #36	@ 0x24
 80039de:	461a      	mov	r2, r3
 80039e0:	2100      	movs	r1, #0
 80039e2:	f00a fc86 	bl	800e2f2 <memset>

        for (int i = 0; i < 3; i++) {
 80039e6:	2300      	movs	r3, #0
 80039e8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80039ec:	e062      	b.n	8003ab4 <KalmanFilter_MeasurementUpdate+0x390>
            for (int j = 0; j < 3; j++) {
 80039ee:	2300      	movs	r3, #0
 80039f0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80039f4:	e055      	b.n	8003aa2 <KalmanFilter_MeasurementUpdate+0x37e>
                KH[i][j] = K[i] * H[0][j];
 80039f6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003a00:	443b      	add	r3, r7
 8003a02:	3bb8      	subs	r3, #184	@ 0xb8
 8003a04:	ed93 7a00 	vldr	s14, [r3]
 8003a08:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003a12:	443b      	add	r3, r7
 8003a14:	3ba0      	subs	r3, #160	@ 0xa0
 8003a16:	edd3 7a00 	vldr	s15, [r3]
 8003a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a22:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003a26:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	4413      	add	r3, r2
 8003a30:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	edc3 7a00 	vstr	s15, [r3]
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 8003a3e:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003a42:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d102      	bne.n	8003a50 <KalmanFilter_MeasurementUpdate+0x32c>
 8003a4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a4e:	e001      	b.n	8003a54 <KalmanFilter_MeasurementUpdate+0x330>
 8003a50:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8003d40 <KalmanFilter_MeasurementUpdate+0x61c>
 8003a54:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a58:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003a5c:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003a60:	4613      	mov	r3, r2
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	4413      	add	r3, r2
 8003a66:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	edd3 7a00 	vldr	s15, [r3]
 8003a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a78:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a7c:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003a80:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003a84:	4613      	mov	r3, r2
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4413      	add	r3, r2
 8003a8a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	440b      	add	r3, r1
 8003a94:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8003a98:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003aa2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	dda5      	ble.n	80039f6 <KalmanFilter_MeasurementUpdate+0x2d2>
        for (int i = 0; i < 3; i++) {
 8003aaa:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003aae:	3301      	adds	r3, #1
 8003ab0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003ab4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	dd98      	ble.n	80039ee <KalmanFilter_MeasurementUpdate+0x2ca>
            }
        }

        for (int i = 0; i < 3; i++) {
 8003abc:	2300      	movs	r3, #0
 8003abe:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003ac2:	e076      	b.n	8003bb2 <KalmanFilter_MeasurementUpdate+0x48e>
            for (int j = 0; j < 3; j++) {
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003aca:	e069      	b.n	8003ba0 <KalmanFilter_MeasurementUpdate+0x47c>
                Pnew[i][j] = 0.0f;
 8003acc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ad0:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003ad4:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003ad8:	4613      	mov	r3, r2
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	4413      	add	r3, r2
 8003ade:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003aee:	2300      	movs	r3, #0
 8003af0:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003af4:	e04b      	b.n	8003b8e <KalmanFilter_MeasurementUpdate+0x46a>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 8003af6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003afa:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003afe:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003b02:	4613      	mov	r3, r2
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	4413      	add	r3, r2
 8003b08:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	ed93 7a00 	vldr	s14, [r3]
 8003b16:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b1a:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003b1e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003b22:	4613      	mov	r3, r2
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	4413      	add	r3, r2
 8003b28:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	edd3 6a00 	vldr	s13, [r3]
 8003b36:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b3a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003b3e:	6819      	ldr	r1, [r3, #0]
 8003b40:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003b44:	4613      	mov	r3, r2
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	4413      	add	r3, r2
 8003b4a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003b4e:	4413      	add	r3, r2
 8003b50:	3302      	adds	r3, #2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	3304      	adds	r3, #4
 8003b58:	edd3 7a00 	vldr	s15, [r3]
 8003b5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b64:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b68:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003b6c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003b70:	4613      	mov	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	4413      	add	r3, r2
 8003b76:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003b84:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003b88:	3301      	adds	r3, #1
 8003b8a:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003b8e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	ddaf      	ble.n	8003af6 <KalmanFilter_MeasurementUpdate+0x3d2>
            for (int j = 0; j < 3; j++) {
 8003b96:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003ba0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	dd91      	ble.n	8003acc <KalmanFilter_MeasurementUpdate+0x3a8>
        for (int i = 0; i < 3; i++) {
 8003ba8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003bac:	3301      	adds	r3, #1
 8003bae:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003bb2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	dd84      	ble.n	8003ac4 <KalmanFilter_MeasurementUpdate+0x3a0>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003bc0:	e032      	b.n	8003c28 <KalmanFilter_MeasurementUpdate+0x504>
            for (int j = 0; j < 3; j++) {
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003bc8:	e025      	b.n	8003c16 <KalmanFilter_MeasurementUpdate+0x4f2>
                kf->P[i][j] = Pnew[i][j];
 8003bca:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003bce:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003bd2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	4413      	add	r3, r2
 8003bdc:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	6819      	ldr	r1, [r3, #0]
 8003be8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003bec:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003c00:	4413      	add	r3, r2
 8003c02:	3302      	adds	r3, #2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4403      	add	r3, r0
 8003c08:	3304      	adds	r3, #4
 8003c0a:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 8003c0c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003c10:	3301      	adds	r3, #1
 8003c12:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003c16:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	ddd5      	ble.n	8003bca <KalmanFilter_MeasurementUpdate+0x4a6>
        for (int i = 0; i < 3; i++) {
 8003c1e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003c22:	3301      	adds	r3, #1
 8003c24:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003c28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	ddc8      	ble.n	8003bc2 <KalmanFilter_MeasurementUpdate+0x49e>
 8003c30:	f000 bcc2 	b.w	80045b8 <KalmanFilter_MeasurementUpdate+0xe94>
            }
        }
    } else {
        // Use both altitude and acceleration measurements
        // H = [1 0 0; 0 0 1]
        float H[2][3] = {
 8003c34:	4b43      	ldr	r3, [pc, #268]	@ (8003d44 <KalmanFilter_MeasurementUpdate+0x620>)
 8003c36:	f507 7484 	add.w	r4, r7, #264	@ 0x108
 8003c3a:	461d      	mov	r5, r3
 8003c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003c44:	e884 0003 	stmia.w	r4, {r0, r1}
            {1.0f, 0.0f, 0.0f},
            {0.0f, 0.0f, 1.0f}
        };

        float z[2] = {altitude, accel};
 8003c48:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c4c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003c56:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c5a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        float y[2] = {z[0] - kf->x[0], z[1] - kf->x[2]};  // Innovation
 8003c64:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8003c68:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c6c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	edd3 7a00 	vldr	s15, [r3]
 8003c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c7a:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
 8003c7e:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8003c82:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c86:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c94:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

        // S = H*P*H' + R
        float HP[2][3] = {0};
 8003c98:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	60da      	str	r2, [r3, #12]
 8003ca6:	611a      	str	r2, [r3, #16]
 8003ca8:	615a      	str	r2, [r3, #20]
        float S[2][2] = {0};
 8003caa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	6053      	str	r3, [r2, #4]
 8003cba:	6093      	str	r3, [r2, #8]
 8003cbc:	60d3      	str	r3, [r2, #12]
        float R[2][2] = {
            {kf->measurement_noise_alt, 0.0f},
 8003cbe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cc2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
        float R[2][2] = {
 8003cca:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cce:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cd8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	605a      	str	r2, [r3, #4]
 8003ce2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ce6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	609a      	str	r2, [r3, #8]
            {0.0f, kf->measurement_noise_acc}
 8003cf0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cf4:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
        float R[2][2] = {
 8003cfc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d00:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003d04:	60da      	str	r2, [r3, #12]
        };

        for (int i = 0; i < 2; i++) {
 8003d06:	2300      	movs	r3, #0
 8003d08:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003d0c:	e079      	b.n	8003e02 <KalmanFilter_MeasurementUpdate+0x6de>
            for (int j = 0; j < 3; j++) {
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003d14:	e06c      	b.n	8003df0 <KalmanFilter_MeasurementUpdate+0x6cc>
                HP[i][j] = 0.0f;
 8003d16:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	4413      	add	r3, r2
 8003d20:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003d2c:	443b      	add	r3, r7
 8003d2e:	3bf8      	subs	r3, #248	@ 0xf8
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003d36:	2300      	movs	r3, #0
 8003d38:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003d3c:	e04f      	b.n	8003dde <KalmanFilter_MeasurementUpdate+0x6ba>
 8003d3e:	bf00      	nop
 8003d40:	00000000 	.word	0x00000000
 8003d44:	08012720 	.word	0x08012720
 8003d48:	358637bd 	.word	0x358637bd
                    HP[i][j] += H[i][k] * kf->P[k][j];
 8003d4c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003d50:	4613      	mov	r3, r2
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	4413      	add	r3, r2
 8003d56:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003d62:	443b      	add	r3, r7
 8003d64:	3bf8      	subs	r3, #248	@ 0xf8
 8003d66:	ed93 7a00 	vldr	s14, [r3]
 8003d6a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003d6e:	4613      	mov	r3, r2
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4413      	add	r3, r2
 8003d74:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003d80:	443b      	add	r3, r7
 8003d82:	3bd0      	subs	r3, #208	@ 0xd0
 8003d84:	edd3 6a00 	vldr	s13, [r3]
 8003d88:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d8c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003d90:	6819      	ldr	r1, [r3, #0]
 8003d92:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003d96:	4613      	mov	r3, r2
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003da0:	4413      	add	r3, r2
 8003da2:	3302      	adds	r3, #2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	3304      	adds	r3, #4
 8003daa:	edd3 7a00 	vldr	s15, [r3]
 8003dae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003db6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003dba:	4613      	mov	r3, r2
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003dcc:	443b      	add	r3, r7
 8003dce:	3bf8      	subs	r3, #248	@ 0xf8
 8003dd0:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003dd4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003dd8:	3301      	adds	r3, #1
 8003dda:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003dde:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	ddb2      	ble.n	8003d4c <KalmanFilter_MeasurementUpdate+0x628>
            for (int j = 0; j < 3; j++) {
 8003de6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003dea:	3301      	adds	r3, #1
 8003dec:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003df0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	dd8e      	ble.n	8003d16 <KalmanFilter_MeasurementUpdate+0x5f2>
        for (int i = 0; i < 2; i++) {
 8003df8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003e02:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	dd81      	ble.n	8003d0e <KalmanFilter_MeasurementUpdate+0x5ea>
                }
            }
        }

        for (int i = 0; i < 2; i++) {
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003e10:	e098      	b.n	8003f44 <KalmanFilter_MeasurementUpdate+0x820>
            for (int j = 0; j < 2; j++) {
 8003e12:	2300      	movs	r3, #0
 8003e14:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003e18:	e08a      	b.n	8003f30 <KalmanFilter_MeasurementUpdate+0x80c>
                S[i][j] = 0.0f;
 8003e1a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e1e:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003e22:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003e26:	0059      	lsls	r1, r3, #1
 8003e28:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003e2c:	440b      	add	r3, r1
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003e3e:	e042      	b.n	8003ec6 <KalmanFilter_MeasurementUpdate+0x7a2>
                    S[i][j] += HP[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8003e40:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e44:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003e48:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003e4c:	0059      	lsls	r1, r3, #1
 8003e4e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003e52:	440b      	add	r3, r1
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	ed93 7a00 	vldr	s14, [r3]
 8003e5c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8003e60:	4613      	mov	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4413      	add	r3, r2
 8003e66:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003e72:	443b      	add	r3, r7
 8003e74:	3bf8      	subs	r3, #248	@ 0xf8
 8003e76:	edd3 6a00 	vldr	s13, [r3]
 8003e7a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003e7e:	4613      	mov	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4413      	add	r3, r2
 8003e84:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003e90:	443b      	add	r3, r7
 8003e92:	3bd0      	subs	r3, #208	@ 0xd0
 8003e94:	edd3 7a00 	vldr	s15, [r3]
 8003e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ea0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ea4:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003ea8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003eac:	0059      	lsls	r1, r3, #1
 8003eae:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003eb2:	440b      	add	r3, r1
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003ebc:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003ec6:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	ddb8      	ble.n	8003e40 <KalmanFilter_MeasurementUpdate+0x71c>
                }
                S[i][j] += R[i][j];
 8003ece:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ed2:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003ed6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003eda:	0059      	lsls	r1, r3, #1
 8003edc:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003ee0:	440b      	add	r3, r1
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	ed93 7a00 	vldr	s14, [r3]
 8003eea:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003eee:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8003ef2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003ef6:	0059      	lsls	r1, r3, #1
 8003ef8:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003efc:	440b      	add	r3, r1
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	edd3 7a00 	vldr	s15, [r3]
 8003f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f0a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f0e:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003f12:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f16:	0059      	lsls	r1, r3, #1
 8003f18:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003f1c:	440b      	add	r3, r1
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 8003f26:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003f30:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	f77f af70 	ble.w	8003e1a <KalmanFilter_MeasurementUpdate+0x6f6>
        for (int i = 0; i < 2; i++) {
 8003f3a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f3e:	3301      	adds	r3, #1
 8003f40:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003f44:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	f77f af62 	ble.w	8003e12 <KalmanFilter_MeasurementUpdate+0x6ee>
            }
        }

        // Calculate S^-1 (inverse of 2x2 matrix)
        float det = S[0][0] * S[1][1] - S[0][1] * S[1][0];
 8003f4e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f56:	ed93 7a00 	vldr	s14, [r3]
 8003f5a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f62:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f6a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f72:	edd3 6a01 	vldr	s13, [r3, #4]
 8003f76:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f8a:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
        if (fabsf(det) < 1e-6f) {
 8003f8e:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 8003f92:	eef0 7ae7 	vabs.f32	s15, s15
 8003f96:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 8003d48 <KalmanFilter_MeasurementUpdate+0x624>
 8003f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa2:	f100 8308 	bmi.w	80045b6 <KalmanFilter_MeasurementUpdate+0xe92>
            // Matrix is singular, skip update
            return;
        }

        float S_inv[2][2] = {
            {S[1][1] / det, -S[0][1] / det},
 8003fa6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003faa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fae:	edd3 6a03 	vldr	s13, [r3, #12]
 8003fb2:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003fb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003fba:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fbe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003fc2:	edc3 7a00 	vstr	s15, [r3]
            {S[1][1] / det, -S[0][1] / det},
 8003fc6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fce:	edd3 7a01 	vldr	s15, [r3, #4]
 8003fd2:	eef1 6a67 	vneg.f32	s13, s15
 8003fd6:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003fde:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fe2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003fe6:	edc3 7a01 	vstr	s15, [r3, #4]
            {-S[1][0] / det, S[0][0] / det}
 8003fea:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ff2:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ff6:	eef1 6a67 	vneg.f32	s13, s15
 8003ffa:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8004002:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004006:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800400a:	edc3 7a02 	vstr	s15, [r3, #8]
            {-S[1][0] / det, S[0][0] / det}
 800400e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004012:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004016:	edd3 6a00 	vldr	s13, [r3]
 800401a:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 800401e:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8004022:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004026:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800402a:	edc3 7a03 	vstr	s15, [r3, #12]
        };

        // K = P*H'*S^-1
        float PHt[3][2] = {0};
 800402e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004032:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004036:	461a      	mov	r2, r3
 8004038:	2300      	movs	r3, #0
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	6053      	str	r3, [r2, #4]
 800403e:	6093      	str	r3, [r2, #8]
 8004040:	60d3      	str	r3, [r2, #12]
 8004042:	6113      	str	r3, [r2, #16]
 8004044:	6153      	str	r3, [r2, #20]
        float K[3][2] = {0};
 8004046:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800404a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800404e:	461a      	mov	r2, r3
 8004050:	2300      	movs	r3, #0
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	6053      	str	r3, [r2, #4]
 8004056:	6093      	str	r3, [r2, #8]
 8004058:	60d3      	str	r3, [r2, #12]
 800405a:	6113      	str	r3, [r2, #16]
 800405c:	6153      	str	r3, [r2, #20]

        for (int i = 0; i < 3; i++) {
 800405e:	2300      	movs	r3, #0
 8004060:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8004064:	e06f      	b.n	8004146 <KalmanFilter_MeasurementUpdate+0xa22>
            for (int j = 0; j < 2; j++) {
 8004066:	2300      	movs	r3, #0
 8004068:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 800406c:	e062      	b.n	8004134 <KalmanFilter_MeasurementUpdate+0xa10>
                PHt[i][j] = 0.0f;
 800406e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004072:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8004076:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800407a:	0059      	lsls	r1, r3, #1
 800407c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004080:	440b      	add	r3, r1
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 800408c:	2300      	movs	r3, #0
 800408e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8004092:	e046      	b.n	8004122 <KalmanFilter_MeasurementUpdate+0x9fe>
                    PHt[i][j] += kf->P[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8004094:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004098:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 800409c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80040a0:	0059      	lsls	r1, r3, #1
 80040a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80040a6:	440b      	add	r3, r1
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	ed93 7a00 	vldr	s14, [r3]
 80040b0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040b4:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80040b8:	6819      	ldr	r1, [r3, #0]
 80040ba:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80040be:	4613      	mov	r3, r2
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	4413      	add	r3, r2
 80040c4:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80040c8:	4413      	add	r3, r2
 80040ca:	3302      	adds	r3, #2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	3304      	adds	r3, #4
 80040d2:	edd3 6a00 	vldr	s13, [r3]
 80040d6:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 80040da:	4613      	mov	r3, r2
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	4413      	add	r3, r2
 80040e0:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80040ec:	443b      	add	r3, r7
 80040ee:	3bd0      	subs	r3, #208	@ 0xd0
 80040f0:	edd3 7a00 	vldr	s15, [r3]
 80040f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040fc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004100:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8004104:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004108:	0059      	lsls	r1, r3, #1
 800410a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800410e:	440b      	add	r3, r1
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8004118:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800411c:	3301      	adds	r3, #1
 800411e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8004122:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004126:	2b02      	cmp	r3, #2
 8004128:	ddb4      	ble.n	8004094 <KalmanFilter_MeasurementUpdate+0x970>
            for (int j = 0; j < 2; j++) {
 800412a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800412e:	3301      	adds	r3, #1
 8004130:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8004134:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004138:	2b01      	cmp	r3, #1
 800413a:	dd98      	ble.n	800406e <KalmanFilter_MeasurementUpdate+0x94a>
        for (int i = 0; i < 3; i++) {
 800413c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004140:	3301      	adds	r3, #1
 8004142:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8004146:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800414a:	2b02      	cmp	r3, #2
 800414c:	dd8b      	ble.n	8004066 <KalmanFilter_MeasurementUpdate+0x942>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 800414e:	2300      	movs	r3, #0
 8004150:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004154:	e069      	b.n	800422a <KalmanFilter_MeasurementUpdate+0xb06>
            for (int j = 0; j < 2; j++) {
 8004156:	2300      	movs	r3, #0
 8004158:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800415c:	e05c      	b.n	8004218 <KalmanFilter_MeasurementUpdate+0xaf4>
                K[i][j] = 0.0f;
 800415e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004162:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004166:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800416a:	0059      	lsls	r1, r3, #1
 800416c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004170:	440b      	add	r3, r1
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 800417c:	2300      	movs	r3, #0
 800417e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004182:	e040      	b.n	8004206 <KalmanFilter_MeasurementUpdate+0xae2>
                    K[i][j] += PHt[i][k] * S_inv[k][j];
 8004184:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004188:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 800418c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004190:	0059      	lsls	r1, r3, #1
 8004192:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004196:	440b      	add	r3, r1
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	ed93 7a00 	vldr	s14, [r3]
 80041a0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041a4:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 80041a8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80041ac:	0059      	lsls	r1, r3, #1
 80041ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80041b2:	440b      	add	r3, r1
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	edd3 6a00 	vldr	s13, [r3]
 80041bc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041c0:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 80041c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80041c8:	0059      	lsls	r1, r3, #1
 80041ca:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80041ce:	440b      	add	r3, r1
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	edd3 7a00 	vldr	s15, [r3]
 80041d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041e0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041e4:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80041e8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80041ec:	0059      	lsls	r1, r3, #1
 80041ee:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80041f2:	440b      	add	r3, r1
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 80041fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004200:	3301      	adds	r3, #1
 8004202:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004206:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800420a:	2b01      	cmp	r3, #1
 800420c:	ddba      	ble.n	8004184 <KalmanFilter_MeasurementUpdate+0xa60>
            for (int j = 0; j < 2; j++) {
 800420e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004212:	3301      	adds	r3, #1
 8004214:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004218:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800421c:	2b01      	cmp	r3, #1
 800421e:	dd9e      	ble.n	800415e <KalmanFilter_MeasurementUpdate+0xa3a>
        for (int i = 0; i < 3; i++) {
 8004220:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004224:	3301      	adds	r3, #1
 8004226:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800422a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800422e:	2b02      	cmp	r3, #2
 8004230:	dd91      	ble.n	8004156 <KalmanFilter_MeasurementUpdate+0xa32>
                }
            }
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 8004232:	2300      	movs	r3, #0
 8004234:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004238:	e042      	b.n	80042c0 <KalmanFilter_MeasurementUpdate+0xb9c>
            for (int j = 0; j < 2; j++) {
 800423a:	2300      	movs	r3, #0
 800423c:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8004240:	e035      	b.n	80042ae <KalmanFilter_MeasurementUpdate+0xb8a>
                kf->x[i] += K[i][j] * y[j];
 8004242:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004246:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	ed93 7a00 	vldr	s14, [r3]
 8004258:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800425c:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004260:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004264:	0059      	lsls	r1, r3, #1
 8004266:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800426a:	440b      	add	r3, r1
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	edd3 6a00 	vldr	s13, [r3]
 8004274:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800427e:	443b      	add	r3, r7
 8004280:	3be0      	subs	r3, #224	@ 0xe0
 8004282:	edd3 7a00 	vldr	s15, [r3]
 8004286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800428a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800428e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004292:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 80042a4:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80042a8:	3301      	adds	r3, #1
 80042aa:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80042ae:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	ddc5      	ble.n	8004242 <KalmanFilter_MeasurementUpdate+0xb1e>
        for (int i = 0; i < 3; i++) {
 80042b6:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80042ba:	3301      	adds	r3, #1
 80042bc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80042c0:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	ddb8      	ble.n	800423a <KalmanFilter_MeasurementUpdate+0xb16>
            }
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 80042c8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042cc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80042d0:	4618      	mov	r0, r3
 80042d2:	2324      	movs	r3, #36	@ 0x24
 80042d4:	461a      	mov	r2, r3
 80042d6:	2100      	movs	r1, #0
 80042d8:	f00a f80b 	bl	800e2f2 <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 80042dc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042e0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80042e4:	4618      	mov	r0, r3
 80042e6:	2324      	movs	r3, #36	@ 0x24
 80042e8:	461a      	mov	r2, r3
 80042ea:	2100      	movs	r1, #0
 80042ec:	f00a f801 	bl	800e2f2 <memset>

        for (int i = 0; i < 3; i++) {
 80042f0:	2300      	movs	r3, #0
 80042f2:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80042f6:	e09e      	b.n	8004436 <KalmanFilter_MeasurementUpdate+0xd12>
            for (int j = 0; j < 3; j++) {
 80042f8:	2300      	movs	r3, #0
 80042fa:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80042fe:	e090      	b.n	8004422 <KalmanFilter_MeasurementUpdate+0xcfe>
                KH[i][j] = 0.0f;
 8004300:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004304:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004308:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800430c:	4613      	mov	r3, r2
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	4413      	add	r3, r2
 8004312:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 8004322:	2300      	movs	r3, #0
 8004324:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8004328:	e045      	b.n	80043b6 <KalmanFilter_MeasurementUpdate+0xc92>
                    KH[i][j] += K[i][k] * H[k][j];
 800432a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800432e:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004332:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004336:	4613      	mov	r3, r2
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	4413      	add	r3, r2
 800433c:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	ed93 7a00 	vldr	s14, [r3]
 800434a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800434e:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004352:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8004356:	0059      	lsls	r1, r3, #1
 8004358:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800435c:	440b      	add	r3, r1
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	edd3 6a00 	vldr	s13, [r3]
 8004366:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 800436a:	4613      	mov	r3, r2
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	4413      	add	r3, r2
 8004370:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004374:	4413      	add	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800437c:	443b      	add	r3, r7
 800437e:	3bd0      	subs	r3, #208	@ 0xd0
 8004380:	edd3 7a00 	vldr	s15, [r3]
 8004384:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800438c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004390:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004394:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004398:	4613      	mov	r3, r2
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	4413      	add	r3, r2
 800439e:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80043a2:	4413      	add	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 80043ac:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80043b0:	3301      	adds	r3, #1
 80043b2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80043b6:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	ddb5      	ble.n	800432a <KalmanFilter_MeasurementUpdate+0xc06>
                }
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 80043be:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80043c2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d102      	bne.n	80043d0 <KalmanFilter_MeasurementUpdate+0xcac>
 80043ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043ce:	e001      	b.n	80043d4 <KalmanFilter_MeasurementUpdate+0xcb0>
 80043d0:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 80045c0 <KalmanFilter_MeasurementUpdate+0xe9c>
 80043d4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043d8:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80043dc:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80043e0:	4613      	mov	r3, r2
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	4413      	add	r3, r2
 80043e6:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	edd3 7a00 	vldr	s15, [r3]
 80043f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043f8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043fc:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8004400:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004404:	4613      	mov	r3, r2
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	4413      	add	r3, r2
 800440a:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800440e:	4413      	add	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8004418:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800441c:	3301      	adds	r3, #1
 800441e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004422:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004426:	2b02      	cmp	r3, #2
 8004428:	f77f af6a 	ble.w	8004300 <KalmanFilter_MeasurementUpdate+0xbdc>
        for (int i = 0; i < 3; i++) {
 800442c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8004430:	3301      	adds	r3, #1
 8004432:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8004436:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800443a:	2b02      	cmp	r3, #2
 800443c:	f77f af5c 	ble.w	80042f8 <KalmanFilter_MeasurementUpdate+0xbd4>
            }
        }

        for (int i = 0; i < 3; i++) {
 8004440:	2300      	movs	r3, #0
 8004442:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8004446:	e076      	b.n	8004536 <KalmanFilter_MeasurementUpdate+0xe12>
            for (int j = 0; j < 3; j++) {
 8004448:	2300      	movs	r3, #0
 800444a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800444e:	e069      	b.n	8004524 <KalmanFilter_MeasurementUpdate+0xe00>
                Pnew[i][j] = 0.0f;
 8004450:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004454:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004458:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 800445c:	4613      	mov	r3, r2
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	4413      	add	r3, r2
 8004462:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8004472:	2300      	movs	r3, #0
 8004474:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8004478:	e04b      	b.n	8004512 <KalmanFilter_MeasurementUpdate+0xdee>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 800447a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800447e:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004482:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004486:	4613      	mov	r3, r2
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4413      	add	r3, r2
 800448c:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	ed93 7a00 	vldr	s14, [r3]
 800449a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800449e:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 80044a2:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80044a6:	4613      	mov	r3, r2
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	4413      	add	r3, r2
 80044ac:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	edd3 6a00 	vldr	s13, [r3]
 80044ba:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80044be:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80044c2:	6819      	ldr	r1, [r3, #0]
 80044c4:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80044c8:	4613      	mov	r3, r2
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	4413      	add	r3, r2
 80044ce:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80044d2:	4413      	add	r3, r2
 80044d4:	3302      	adds	r3, #2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	3304      	adds	r3, #4
 80044dc:	edd3 7a00 	vldr	s15, [r3]
 80044e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044e8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80044ec:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80044f0:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80044f4:	4613      	mov	r3, r2
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4413      	add	r3, r2
 80044fa:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8004508:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800450c:	3301      	adds	r3, #1
 800450e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8004512:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004516:	2b02      	cmp	r3, #2
 8004518:	ddaf      	ble.n	800447a <KalmanFilter_MeasurementUpdate+0xd56>
            for (int j = 0; j < 3; j++) {
 800451a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800451e:	3301      	adds	r3, #1
 8004520:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8004524:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004528:	2b02      	cmp	r3, #2
 800452a:	dd91      	ble.n	8004450 <KalmanFilter_MeasurementUpdate+0xd2c>
        for (int i = 0; i < 3; i++) {
 800452c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004530:	3301      	adds	r3, #1
 8004532:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8004536:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800453a:	2b02      	cmp	r3, #2
 800453c:	dd84      	ble.n	8004448 <KalmanFilter_MeasurementUpdate+0xd24>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 800453e:	2300      	movs	r3, #0
 8004540:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004544:	e032      	b.n	80045ac <KalmanFilter_MeasurementUpdate+0xe88>
            for (int j = 0; j < 3; j++) {
 8004546:	2300      	movs	r3, #0
 8004548:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800454c:	e025      	b.n	800459a <KalmanFilter_MeasurementUpdate+0xe76>
                kf->P[i][j] = Pnew[i][j];
 800454e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004552:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004556:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 800455a:	4613      	mov	r3, r2
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	4413      	add	r3, r2
 8004560:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8004564:	4413      	add	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	6819      	ldr	r1, [r3, #0]
 800456c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004570:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 800457a:	4613      	mov	r3, r2
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	4413      	add	r3, r2
 8004580:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8004584:	4413      	add	r3, r2
 8004586:	3302      	adds	r3, #2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4403      	add	r3, r0
 800458c:	3304      	adds	r3, #4
 800458e:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 8004590:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004594:	3301      	adds	r3, #1
 8004596:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800459a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800459e:	2b02      	cmp	r3, #2
 80045a0:	ddd5      	ble.n	800454e <KalmanFilter_MeasurementUpdate+0xe2a>
        for (int i = 0; i < 3; i++) {
 80045a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80045a6:	3301      	adds	r3, #1
 80045a8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80045ac:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	ddc8      	ble.n	8004546 <KalmanFilter_MeasurementUpdate+0xe22>
 80045b4:	e000      	b.n	80045b8 <KalmanFilter_MeasurementUpdate+0xe94>
            return;
 80045b6:	bf00      	nop
            }
        }
    }
}
 80045b8:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bdb0      	pop	{r4, r5, r7, pc}
 80045c0:	00000000 	.word	0x00000000

080045c4 <KalmanFilter_DetectApogee>:
/**
 * @brief Detect apogee based on velocity trend
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
static int KalmanFilter_DetectApogee(KalmanFilter_t *kf) {
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
    // Velocity is negative and magnitude is increasing
	if(kf->x[2] > 30.0){


	}
    if (kf->x[1] < 0.0f && kf->x[1] < kf->prev_velocity) {
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80045d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045da:	d517      	bpl.n	800460c <KalmanFilter_DetectApogee+0x48>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	ed93 7a01 	vldr	s14, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80045e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f0:	d50c      	bpl.n	800460c <KalmanFilter_DetectApogee+0x48>
        kf->apogee_counter++;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	641a      	str	r2, [r3, #64]	@ 0x40
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004600:	2b04      	cmp	r3, #4
 8004602:	dd06      	ble.n	8004612 <KalmanFilter_DetectApogee+0x4e>
            kf->apogee_detected = 1;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	63da      	str	r2, [r3, #60]	@ 0x3c
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 800460a:	e002      	b.n	8004612 <KalmanFilter_DetectApogee+0x4e>
        }
    } else {
        kf->apogee_counter = 0;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    kf->prev_velocity = kf->x[1];
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	645a      	str	r2, [r3, #68]	@ 0x44
    return kf->apogee_detected;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800461e:	4618      	mov	r0, r3
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <Kalman_Get_Velocity>:
float Kalman_Get_Velocity(KalmanFilter_t *kf){
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
	return kf->x[1];
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	ee07 3a90 	vmov	s15, r3
}
 800463a:	eeb0 0a67 	vmov.f32	s0, s15
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <KalmanFilter_IsApogeeDetected>:
/**
 * @brief Check if apogee has been detected
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
int KalmanFilter_IsApogeeDetected(KalmanFilter_t *kf) {
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
    return kf->apogee_detected;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004654:	4618      	mov	r0, r3
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <send_command>:
#include "lora.h"
#include "main.h"



static void send_command(uint8_t header, uint8_t addresses, uint8_t dataLength, uint8_t *data) {
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	4603      	mov	r3, r0
 800466a:	71fb      	strb	r3, [r7, #7]
 800466c:	460b      	mov	r3, r1
 800466e:	71bb      	strb	r3, [r7, #6]
 8004670:	4613      	mov	r3, r2
 8004672:	717b      	strb	r3, [r7, #5]
    uint8_t command[12];
    command[0] = header;
 8004674:	79fb      	ldrb	r3, [r7, #7]
 8004676:	723b      	strb	r3, [r7, #8]
    command[1] = addresses;
 8004678:	79bb      	ldrb	r3, [r7, #6]
 800467a:	727b      	strb	r3, [r7, #9]
    command[2] = dataLength;
 800467c:	797b      	ldrb	r3, [r7, #5]
 800467e:	72bb      	strb	r3, [r7, #10]
    for (int i = 0; i < 9; i++) {
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	e00c      	b.n	80046a0 <send_command+0x40>
        command[3 + i] = data[i];
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	441a      	add	r2, r3
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	3303      	adds	r3, #3
 8004690:	7812      	ldrb	r2, [r2, #0]
 8004692:	3318      	adds	r3, #24
 8004694:	443b      	add	r3, r7
 8004696:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < 9; i++) {
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	3301      	adds	r3, #1
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	ddef      	ble.n	8004686 <send_command+0x26>
    }

    HAL_UART_Transmit(&huart2, command, 12, 100);
 80046a6:	f107 0108 	add.w	r1, r7, #8
 80046aa:	2364      	movs	r3, #100	@ 0x64
 80046ac:	220c      	movs	r2, #12
 80046ae:	4803      	ldr	r0, [pc, #12]	@ (80046bc <send_command+0x5c>)
 80046b0:	f007 fd26 	bl	800c100 <HAL_UART_Transmit>
}
 80046b4:	bf00      	nop
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	20000598 	.word	0x20000598

080046c0 <lora_activate>:

void lora_activate()
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, RESET);
 80046c4:	2200      	movs	r2, #0
 80046c6:	2101      	movs	r1, #1
 80046c8:	4804      	ldr	r0, [pc, #16]	@ (80046dc <lora_activate+0x1c>)
 80046ca:	f005 f9eb 	bl	8009aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, RESET);
 80046ce:	2200      	movs	r2, #0
 80046d0:	2102      	movs	r1, #2
 80046d2:	4802      	ldr	r0, [pc, #8]	@ (80046dc <lora_activate+0x1c>)
 80046d4:	f005 f9e6 	bl	8009aa4 <HAL_GPIO_WritePin>
}
 80046d8:	bf00      	nop
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40020000 	.word	0x40020000

080046e0 <lora_deactivate>:

void lora_deactivate()
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, SET);
 80046e4:	2201      	movs	r2, #1
 80046e6:	2101      	movs	r1, #1
 80046e8:	4804      	ldr	r0, [pc, #16]	@ (80046fc <lora_deactivate+0x1c>)
 80046ea:	f005 f9db 	bl	8009aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, SET);
 80046ee:	2201      	movs	r2, #1
 80046f0:	2102      	movs	r1, #2
 80046f2:	4802      	ldr	r0, [pc, #8]	@ (80046fc <lora_deactivate+0x1c>)
 80046f4:	f005 f9d6 	bl	8009aa4 <HAL_GPIO_WritePin>
}
 80046f8:	bf00      	nop
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40020000 	.word	0x40020000

08004700 <lora_configure>:

void lora_configure(lorastruct *config)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
	uint8_t data[9];

    //default values of lora
    config->netId = (uint8_t) 0x00;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	725a      	strb	r2, [r3, #9]
    config->serialParity = LORA_PARITY_8N1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	745a      	strb	r2, [r3, #17]
    config->ambientNoise = LORA_RSSI_AMBIENT_NOISE_DISABLE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	729a      	strb	r2, [r3, #10]
    config->RSSI = LORA_RSSI_DISABLE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	72da      	strb	r2, [r3, #11]
    config->transmissonMode = LORA_TRANSMISSION_TRANSPARENT;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	731a      	strb	r2, [r3, #12]
    config->repeater = LORA_REPEATER_DISABLE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	735a      	strb	r2, [r3, #13]
    config->LBT = LORA_LBT_DISABLE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	739a      	strb	r2, [r3, #14]
    config->worMode = LORA_WOR_TRANSMITTER;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2208      	movs	r2, #8
 8004736:	73da      	strb	r2, [r3, #15]
    config->worCycle = LORA_WOR_4000;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2207      	movs	r2, #7
 800473c:	741a      	strb	r2, [r3, #16]

    // Lora address
    data[0] = config->loraAddress.address8[1];
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	79db      	ldrb	r3, [r3, #7]
 8004742:	733b      	strb	r3, [r7, #12]
    data[1] = config->loraAddress.address8[0];
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	799b      	ldrb	r3, [r3, #6]
 8004748:	737b      	strb	r3, [r7, #13]

    // Lora netid
    data[2] = config->netId;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	7a5b      	ldrb	r3, [r3, #9]
 800474e:	73bb      	strb	r3, [r7, #14]

    // Lora baud rate, parite, air rate
    data[3] = config->baudRate | config->serialParity | config->airRate;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	781a      	ldrb	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	7c5b      	ldrb	r3, [r3, #17]
 8004758:	4313      	orrs	r3, r2
 800475a:	b2da      	uxtb	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	785b      	ldrb	r3, [r3, #1]
 8004760:	4313      	orrs	r3, r2
 8004762:	b2db      	uxtb	r3, r3
 8004764:	73fb      	strb	r3, [r7, #15]

    // packet size, ambient noise, reserve ve power
    data[4] = config->packetSize | config->ambientNoise | LORA_STATUS_LOG_DISABLE | config->power;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	789a      	ldrb	r2, [r3, #2]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	7a9b      	ldrb	r3, [r3, #10]
 800476e:	4313      	orrs	r3, r2
 8004770:	b2da      	uxtb	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	78db      	ldrb	r3, [r3, #3]
 8004776:	4313      	orrs	r3, r2
 8004778:	b2db      	uxtb	r3, r3
 800477a:	743b      	strb	r3, [r7, #16]

    // channel
    //frequency range restriction
    if(config->channel > 83)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	7a1b      	ldrb	r3, [r3, #8]
 8004780:	2b53      	cmp	r3, #83	@ 0x53
 8004782:	d902      	bls.n	800478a <lora_configure+0x8a>
    	config->channel = 83;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2253      	movs	r2, #83	@ 0x53
 8004788:	721a      	strb	r2, [r3, #8]
    else if(config->channel < 0)
    	config->channel = 0;

    data[5] = config->channel;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	7a1b      	ldrb	r3, [r3, #8]
 800478e:	747b      	strb	r3, [r7, #17]

    // RSSI, transmission mode, repeater, LBT, worTransceiver ve worCycle
    data[6] = config->RSSI | config->transmissonMode | config->repeater | config->LBT | config->worMode | config->worCycle;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	7ada      	ldrb	r2, [r3, #11]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	7b1b      	ldrb	r3, [r3, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	b2da      	uxtb	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	7b5b      	ldrb	r3, [r3, #13]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	7b9b      	ldrb	r3, [r3, #14]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	7bdb      	ldrb	r3, [r3, #15]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	7c1b      	ldrb	r3, [r3, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	74bb      	strb	r3, [r7, #18]

    // key
    data[7] = config->loraKey.key8[1];
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	795b      	ldrb	r3, [r3, #5]
 80047c2:	74fb      	strb	r3, [r7, #19]
    data[8] = config->loraKey.key8[0];
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	791b      	ldrb	r3, [r3, #4]
 80047c8:	753b      	strb	r3, [r7, #20]


    send_command(0xC0, 0x00, 0x09, data);
 80047ca:	f107 030c 	add.w	r3, r7, #12
 80047ce:	2209      	movs	r2, #9
 80047d0:	2100      	movs	r1, #0
 80047d2:	20c0      	movs	r0, #192	@ 0xc0
 80047d4:	f7ff ff44 	bl	8004660 <send_command>
		}
	}
	else {
		int x =10;
	}*/
}
 80047d8:	bf00      	nop
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047e6:	f003 fcbb 	bl	8008160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047ea:	f000 f8c7 	bl	800497c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047ee:	f000 fb6d 	bl	8004ecc <MX_GPIO_Init>
  MX_DMA_Init();
 80047f2:	f000 fb25 	bl	8004e40 <MX_DMA_Init>
  MX_I2C1_Init();
 80047f6:	f000 f9d1 	bl	8004b9c <MX_I2C1_Init>
  MX_I2C3_Init();
 80047fa:	f000 f9fd 	bl	8004bf8 <MX_I2C3_Init>
  MX_TIM2_Init();
 80047fe:	f000 fa29 	bl	8004c54 <MX_TIM2_Init>
  MX_UART5_Init();
 8004802:	f000 fa9f 	bl	8004d44 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8004806:	f000 fac7 	bl	8004d98 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800480a:	f000 f923 	bl	8004a54 <MX_ADC1_Init>
  MX_ADC2_Init();
 800480e:	f000 f973 	bl	8004af8 <MX_ADC2_Init>
  MX_UART4_Init();
 8004812:	f000 fa6d 	bl	8004cf0 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8004816:	f000 fae9 	bl	8004dec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	MX_TIM2_Init();
 800481a:	f000 fa1b 	bl	8004c54 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 800481e:	4849      	ldr	r0, [pc, #292]	@ (8004944 <main+0x164>)
 8004820:	f006 fffe 	bl	800b820 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004824:	2200      	movs	r2, #0
 8004826:	2101      	movs	r1, #1
 8004828:	201c      	movs	r0, #28
 800482a:	f004 fa54 	bl	8008cd6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800482e:	201c      	movs	r0, #28
 8004830:	f004 fa6d 	bl	8008d0e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 8004834:	2201      	movs	r2, #1
 8004836:	2100      	movs	r1, #0
 8004838:	2028      	movs	r0, #40	@ 0x28
 800483a:	f004 fa4c 	bl	8008cd6 <HAL_NVIC_SetPriority>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buffer, 2);
 800483e:	2202      	movs	r2, #2
 8004840:	4941      	ldr	r1, [pc, #260]	@ (8004948 <main+0x168>)
 8004842:	4842      	ldr	r0, [pc, #264]	@ (800494c <main+0x16c>)
 8004844:	f003 fd66 	bl	8008314 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buffer, 2);
 8004848:	2202      	movs	r2, #2
 800484a:	4941      	ldr	r1, [pc, #260]	@ (8004950 <main+0x170>)
 800484c:	4841      	ldr	r0, [pc, #260]	@ (8004954 <main+0x174>)
 800484e:	f003 fd61 	bl	8008314 <HAL_ADC_Start_DMA>

	bme280_begin();
 8004852:	f000 fc1f 	bl	8005094 <bme280_begin>
	HAL_Delay(1000);
 8004856:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800485a:	f003 fcf3 	bl	8008244 <HAL_Delay>
	bme280_config();
 800485e:	f7fc fdbd 	bl	80013dc <bme280_config>

	bmi_imu_init();
 8004862:	f000 fc2f 	bl	80050c4 <bmi_imu_init>
    bmi088_config(&BMI_sensor);
 8004866:	483c      	ldr	r0, [pc, #240]	@ (8004958 <main+0x178>)
 8004868:	f7fd fbf4 	bl	8002054 <bmi088_config>
    get_offset(&BMI_sensor);
 800486c:	483a      	ldr	r0, [pc, #232]	@ (8004958 <main+0x178>)
 800486e:	f7fe f9e3 	bl	8002c38 <get_offset>
	bme280_update();
 8004872:	f7fc ff6f 	bl	8001754 <bme280_update>
    lora_deactivate();
 8004876:	f7ff ff33 	bl	80046e0 <lora_deactivate>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800487a:	2028      	movs	r0, #40	@ 0x28
 800487c:	f004 fa47 	bl	8008d0e <HAL_NVIC_EnableIRQ>
	getInitialQuaternion();
 8004880:	f002 f9a0 	bl	8006bc4 <getInitialQuaternion>

	loraBegin();
 8004884:	f000 fd14 	bl	80052b0 <loraBegin>
    lora_activate();
 8004888:	f7ff ff1a 	bl	80046c0 <lora_activate>


	sensor_fusion_init(&BME280_sensor);
 800488c:	4833      	ldr	r0, [pc, #204]	@ (800495c <main+0x17c>)
 800488e:	f002 fc19 	bl	80070c4 <sensor_fusion_init>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart4, usart4_rx_buffer, 36);
 8004892:	2224      	movs	r2, #36	@ 0x24
 8004894:	4932      	ldr	r1, [pc, #200]	@ (8004960 <main+0x180>)
 8004896:	4833      	ldr	r0, [pc, #204]	@ (8004964 <main+0x184>)
 8004898:	f007 fd3a 	bl	800c310 <HAL_UARTEx_ReceiveToIdle_DMA>
	flight_algorithm_set_parameters(10.0,2000.0,500.0,60.0);
 800489c:	eddf 1a32 	vldr	s3, [pc, #200]	@ 8004968 <main+0x188>
 80048a0:	ed9f 1a32 	vldr	s2, [pc, #200]	@ 800496c <main+0x18c>
 80048a4:	eddf 0a32 	vldr	s1, [pc, #200]	@ 8004970 <main+0x190>
 80048a8:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80048ac:	f7fe fbe8 	bl	8003080 <flight_algorithm_set_parameters>


	uart_handler_init();
 80048b0:	f003 fa94 	bl	8007ddc <uart_handler_init>
	flight_algorithm_init();
 80048b4:	f7fe fa2c 	bl	8002d10 <flight_algorithm_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  bmi088_update(&BMI_sensor);
 80048b8:	4827      	ldr	r0, [pc, #156]	@ (8004958 <main+0x178>)
 80048ba:	f7fd fdcd 	bl	8002458 <bmi088_update>
		  sensor_fusion_update_mahony(&BMI_sensor, &sensor_output);
 80048be:	492d      	ldr	r1, [pc, #180]	@ (8004974 <main+0x194>)
 80048c0:	4825      	ldr	r0, [pc, #148]	@ (8004958 <main+0x178>)
 80048c2:	f002 fd07 	bl	80072d4 <sensor_fusion_update_mahony>
		  bme280_update();
 80048c6:	f7fc ff45 	bl	8001754 <bme280_update>

		  // Process UART packets and handle mode changes
		  uart_handler_process_packets();
 80048ca:	f003 faa1 	bl	8007e10 <uart_handler_process_packets>

		  // Clear command flag if it was set
		  if (uart_handler_command_ready()) {
 80048ce:	f003 fb9d 	bl	800800c <uart_handler_command_ready>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d008      	beq.n	80048ea <main+0x10a>
			  uart_handler_clear_command_flag();
 80048d8:	f003 fbc6 	bl	8008068 <uart_handler_clear_command_flag>
			  // Reset flight algorithm if switching to NORMAL mode
			  if (uart_handler_get_mode() == MODE_NORMAL) {
 80048dc:	f003 fb8a 	bl	8007ff4 <uart_handler_get_mode>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <main+0x10a>
				  flight_algorithm_reset();
 80048e6:	f7fe fa19 	bl	8002d1c <flight_algorithm_reset>
			  }
		  }

		  if (tx_timer_flag) {
 80048ea:	4b23      	ldr	r3, [pc, #140]	@ (8004978 <main+0x198>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0e1      	beq.n	80048b8 <main+0xd8>
			tx_timer_flag = 0;
 80048f4:	4b20      	ldr	r3, [pc, #128]	@ (8004978 <main+0x198>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	701a      	strb	r2, [r3, #0]
			//read_ADC();
			HSD_StatusCheck();
 80048fa:	f000 fca3 	bl	8005244 <HSD_StatusCheck>
		    //IMU_visual();
			SystemMode_t current_mode = uart_handler_get_mode();
 80048fe:	f003 fb79 	bl	8007ff4 <uart_handler_get_mode>
 8004902:	4603      	mov	r3, r0
 8004904:	71fb      	strb	r3, [r7, #7]

				switch (current_mode) {
 8004906:	79fb      	ldrb	r3, [r7, #7]
 8004908:	2b02      	cmp	r3, #2
 800490a:	d016      	beq.n	800493a <main+0x15a>
 800490c:	2b02      	cmp	r3, #2
 800490e:	dcd3      	bgt.n	80048b8 <main+0xd8>
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <main+0x13a>
 8004914:	2b01      	cmp	r3, #1
 8004916:	d00b      	beq.n	8004930 <main+0x150>
 8004918:	e012      	b.n	8004940 <main+0x160>
					case MODE_NORMAL:
						sensor_fusion_update_kalman(&BME280_sensor, &BMI_sensor, &sensor_output);
 800491a:	4a16      	ldr	r2, [pc, #88]	@ (8004974 <main+0x194>)
 800491c:	490e      	ldr	r1, [pc, #56]	@ (8004958 <main+0x178>)
 800491e:	480f      	ldr	r0, [pc, #60]	@ (800495c <main+0x17c>)
 8004920:	f002 fc26 	bl	8007170 <sensor_fusion_update_kalman>
						flight_algorithm_update(&BME280_sensor, &BMI_sensor, &sensor_output);
 8004924:	4a13      	ldr	r2, [pc, #76]	@ (8004974 <main+0x194>)
 8004926:	490c      	ldr	r1, [pc, #48]	@ (8004958 <main+0x178>)
 8004928:	480c      	ldr	r0, [pc, #48]	@ (800495c <main+0x17c>)
 800492a:	f7fe fa47 	bl	8002dbc <flight_algorithm_update>
						//addDataPacketNormal(&BME280_sensor, &BMI_sensor);
				    	//HAL_UART_Transmit(&huart2, (uint8_t*)normal_paket, 59, 100);
						//uint16_t status_bits = flight_algorithm_get_status_bits();
						//uart_handler_send_status(status_bits);
						break;
 800492e:	e007      	b.n	8004940 <main+0x160>

					case MODE_SIT:
						test_modes_handle_sit(&BME280_sensor, &BMI_sensor);
 8004930:	4909      	ldr	r1, [pc, #36]	@ (8004958 <main+0x178>)
 8004932:	480a      	ldr	r0, [pc, #40]	@ (800495c <main+0x17c>)
 8004934:	f003 f9ce 	bl	8007cd4 <test_modes_handle_sit>
						break;
 8004938:	e002      	b.n	8004940 <main+0x160>

					case MODE_SUT:
						algorithm_update_sut();
 800493a:	f003 f9e5 	bl	8007d08 <algorithm_update_sut>
						break;
 800493e:	bf00      	nop
	  	  bmi088_update(&BMI_sensor);
 8004940:	e7ba      	b.n	80048b8 <main+0xd8>
 8004942:	bf00      	nop
 8004944:	20000478 	.word	0x20000478
 8004948:	200007e8 	.word	0x200007e8
 800494c:	20000280 	.word	0x20000280
 8004950:	200007ec 	.word	0x200007ec
 8004954:	200002c8 	.word	0x200002c8
 8004958:	200006e4 	.word	0x200006e4
 800495c:	200006a0 	.word	0x200006a0
 8004960:	20000794 	.word	0x20000794
 8004964:	200004c0 	.word	0x200004c0
 8004968:	42700000 	.word	0x42700000
 800496c:	43fa0000 	.word	0x43fa0000
 8004970:	44fa0000 	.word	0x44fa0000
 8004974:	20000764 	.word	0x20000764
 8004978:	200007e4 	.word	0x200007e4

0800497c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b094      	sub	sp, #80	@ 0x50
 8004980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004982:	f107 031c 	add.w	r3, r7, #28
 8004986:	2234      	movs	r2, #52	@ 0x34
 8004988:	2100      	movs	r1, #0
 800498a:	4618      	mov	r0, r3
 800498c:	f009 fcb1 	bl	800e2f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004990:	f107 0308 	add.w	r3, r7, #8
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	605a      	str	r2, [r3, #4]
 800499a:	609a      	str	r2, [r3, #8]
 800499c:	60da      	str	r2, [r3, #12]
 800499e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80049a0:	2300      	movs	r3, #0
 80049a2:	607b      	str	r3, [r7, #4]
 80049a4:	4b29      	ldr	r3, [pc, #164]	@ (8004a4c <SystemClock_Config+0xd0>)
 80049a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a8:	4a28      	ldr	r2, [pc, #160]	@ (8004a4c <SystemClock_Config+0xd0>)
 80049aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80049b0:	4b26      	ldr	r3, [pc, #152]	@ (8004a4c <SystemClock_Config+0xd0>)
 80049b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049b8:	607b      	str	r3, [r7, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80049bc:	2300      	movs	r3, #0
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	4b23      	ldr	r3, [pc, #140]	@ (8004a50 <SystemClock_Config+0xd4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a22      	ldr	r2, [pc, #136]	@ (8004a50 <SystemClock_Config+0xd4>)
 80049c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	4b20      	ldr	r3, [pc, #128]	@ (8004a50 <SystemClock_Config+0xd4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80049d4:	603b      	str	r3, [r7, #0]
 80049d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80049d8:	2301      	movs	r3, #1
 80049da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80049dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80049e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049e2:	2302      	movs	r3, #2
 80049e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80049e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80049ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80049ec:	2308      	movs	r3, #8
 80049ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80049f0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80049f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80049f6:	2302      	movs	r3, #2
 80049f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80049fa:	2302      	movs	r3, #2
 80049fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80049fe:	2302      	movs	r3, #2
 8004a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a02:	f107 031c 	add.w	r3, r7, #28
 8004a06:	4618      	mov	r0, r3
 8004a08:	f006 fc1c 	bl	800b244 <HAL_RCC_OscConfig>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004a12:	f000 fc81 	bl	8005318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a16:	230f      	movs	r3, #15
 8004a18:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004a22:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004a28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a2c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004a2e:	f107 0308 	add.w	r3, r7, #8
 8004a32:	2105      	movs	r1, #5
 8004a34:	4618      	mov	r0, r3
 8004a36:	f006 f8bb 	bl	800abb0 <HAL_RCC_ClockConfig>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8004a40:	f000 fc6a 	bl	8005318 <Error_Handler>
  }
}
 8004a44:	bf00      	nop
 8004a46:	3750      	adds	r7, #80	@ 0x50
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	40007000 	.word	0x40007000

08004a54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004a5a:	463b      	mov	r3, r7
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	605a      	str	r2, [r3, #4]
 8004a62:	609a      	str	r2, [r3, #8]
 8004a64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004a66:	4b21      	ldr	r3, [pc, #132]	@ (8004aec <MX_ADC1_Init+0x98>)
 8004a68:	4a21      	ldr	r2, [pc, #132]	@ (8004af0 <MX_ADC1_Init+0x9c>)
 8004a6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8004aec <MX_ADC1_Init+0x98>)
 8004a6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004a72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004a74:	4b1d      	ldr	r3, [pc, #116]	@ (8004aec <MX_ADC1_Init+0x98>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8004aec <MX_ADC1_Init+0x98>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004a80:	4b1a      	ldr	r3, [pc, #104]	@ (8004aec <MX_ADC1_Init+0x98>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004a86:	4b19      	ldr	r3, [pc, #100]	@ (8004aec <MX_ADC1_Init+0x98>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004a8e:	4b17      	ldr	r3, [pc, #92]	@ (8004aec <MX_ADC1_Init+0x98>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004a94:	4b15      	ldr	r3, [pc, #84]	@ (8004aec <MX_ADC1_Init+0x98>)
 8004a96:	4a17      	ldr	r2, [pc, #92]	@ (8004af4 <MX_ADC1_Init+0xa0>)
 8004a98:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004a9a:	4b14      	ldr	r3, [pc, #80]	@ (8004aec <MX_ADC1_Init+0x98>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004aa0:	4b12      	ldr	r3, [pc, #72]	@ (8004aec <MX_ADC1_Init+0x98>)
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004aa6:	4b11      	ldr	r3, [pc, #68]	@ (8004aec <MX_ADC1_Init+0x98>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004aae:	4b0f      	ldr	r3, [pc, #60]	@ (8004aec <MX_ADC1_Init+0x98>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004ab4:	480d      	ldr	r0, [pc, #52]	@ (8004aec <MX_ADC1_Init+0x98>)
 8004ab6:	f003 fbe9 	bl	800828c <HAL_ADC_Init>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004ac0:	f000 fc2a 	bl	8005318 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004ac4:	2309      	movs	r3, #9
 8004ac6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004acc:	2307      	movs	r3, #7
 8004ace:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ad0:	463b      	mov	r3, r7
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4805      	ldr	r0, [pc, #20]	@ (8004aec <MX_ADC1_Init+0x98>)
 8004ad6:	f003 fd4f 	bl	8008578 <HAL_ADC_ConfigChannel>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004ae0:	f000 fc1a 	bl	8005318 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	20000280 	.word	0x20000280
 8004af0:	40012000 	.word	0x40012000
 8004af4:	0f000001 	.word	0x0f000001

08004af8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004afe:	463b      	mov	r3, r7
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	609a      	str	r2, [r3, #8]
 8004b08:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004b0a:	4b21      	ldr	r3, [pc, #132]	@ (8004b90 <MX_ADC2_Init+0x98>)
 8004b0c:	4a21      	ldr	r2, [pc, #132]	@ (8004b94 <MX_ADC2_Init+0x9c>)
 8004b0e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004b10:	4b1f      	ldr	r3, [pc, #124]	@ (8004b90 <MX_ADC2_Init+0x98>)
 8004b12:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004b16:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004b18:	4b1d      	ldr	r3, [pc, #116]	@ (8004b90 <MX_ADC2_Init+0x98>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8004b90 <MX_ADC2_Init+0x98>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004b24:	4b1a      	ldr	r3, [pc, #104]	@ (8004b90 <MX_ADC2_Init+0x98>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004b2a:	4b19      	ldr	r3, [pc, #100]	@ (8004b90 <MX_ADC2_Init+0x98>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004b32:	4b17      	ldr	r3, [pc, #92]	@ (8004b90 <MX_ADC2_Init+0x98>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004b38:	4b15      	ldr	r3, [pc, #84]	@ (8004b90 <MX_ADC2_Init+0x98>)
 8004b3a:	4a17      	ldr	r2, [pc, #92]	@ (8004b98 <MX_ADC2_Init+0xa0>)
 8004b3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004b3e:	4b14      	ldr	r3, [pc, #80]	@ (8004b90 <MX_ADC2_Init+0x98>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8004b44:	4b12      	ldr	r3, [pc, #72]	@ (8004b90 <MX_ADC2_Init+0x98>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004b4a:	4b11      	ldr	r3, [pc, #68]	@ (8004b90 <MX_ADC2_Init+0x98>)
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004b52:	4b0f      	ldr	r3, [pc, #60]	@ (8004b90 <MX_ADC2_Init+0x98>)
 8004b54:	2201      	movs	r2, #1
 8004b56:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004b58:	480d      	ldr	r0, [pc, #52]	@ (8004b90 <MX_ADC2_Init+0x98>)
 8004b5a:	f003 fb97 	bl	800828c <HAL_ADC_Init>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004b64:	f000 fbd8 	bl	8005318 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004b68:	2308      	movs	r3, #8
 8004b6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004b70:	2307      	movs	r3, #7
 8004b72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b74:	463b      	mov	r3, r7
 8004b76:	4619      	mov	r1, r3
 8004b78:	4805      	ldr	r0, [pc, #20]	@ (8004b90 <MX_ADC2_Init+0x98>)
 8004b7a:	f003 fcfd 	bl	8008578 <HAL_ADC_ConfigChannel>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004b84:	f000 fbc8 	bl	8005318 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004b88:	bf00      	nop
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	200002c8 	.word	0x200002c8
 8004b94:	40012100 	.word	0x40012100
 8004b98:	0f000001 	.word	0x0f000001

08004b9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004ba0:	4b12      	ldr	r3, [pc, #72]	@ (8004bec <MX_I2C1_Init+0x50>)
 8004ba2:	4a13      	ldr	r2, [pc, #76]	@ (8004bf0 <MX_I2C1_Init+0x54>)
 8004ba4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004ba6:	4b11      	ldr	r3, [pc, #68]	@ (8004bec <MX_I2C1_Init+0x50>)
 8004ba8:	4a12      	ldr	r2, [pc, #72]	@ (8004bf4 <MX_I2C1_Init+0x58>)
 8004baa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004bac:	4b0f      	ldr	r3, [pc, #60]	@ (8004bec <MX_I2C1_Init+0x50>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8004bec <MX_I2C1_Init+0x50>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8004bec <MX_I2C1_Init+0x50>)
 8004bba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004bbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bec <MX_I2C1_Init+0x50>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004bc6:	4b09      	ldr	r3, [pc, #36]	@ (8004bec <MX_I2C1_Init+0x50>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004bcc:	4b07      	ldr	r3, [pc, #28]	@ (8004bec <MX_I2C1_Init+0x50>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004bd2:	4b06      	ldr	r3, [pc, #24]	@ (8004bec <MX_I2C1_Init+0x50>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004bd8:	4804      	ldr	r0, [pc, #16]	@ (8004bec <MX_I2C1_Init+0x50>)
 8004bda:	f004 ff95 	bl	8009b08 <HAL_I2C_Init>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004be4:	f000 fb98 	bl	8005318 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004be8:	bf00      	nop
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	200003d0 	.word	0x200003d0
 8004bf0:	40005400 	.word	0x40005400
 8004bf4:	000186a0 	.word	0x000186a0

08004bf8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004bfc:	4b12      	ldr	r3, [pc, #72]	@ (8004c48 <MX_I2C3_Init+0x50>)
 8004bfe:	4a13      	ldr	r2, [pc, #76]	@ (8004c4c <MX_I2C3_Init+0x54>)
 8004c00:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8004c02:	4b11      	ldr	r3, [pc, #68]	@ (8004c48 <MX_I2C3_Init+0x50>)
 8004c04:	4a12      	ldr	r2, [pc, #72]	@ (8004c50 <MX_I2C3_Init+0x58>)
 8004c06:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004c08:	4b0f      	ldr	r3, [pc, #60]	@ (8004c48 <MX_I2C3_Init+0x50>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c48 <MX_I2C3_Init+0x50>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c14:	4b0c      	ldr	r3, [pc, #48]	@ (8004c48 <MX_I2C3_Init+0x50>)
 8004c16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004c1a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c48 <MX_I2C3_Init+0x50>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004c22:	4b09      	ldr	r3, [pc, #36]	@ (8004c48 <MX_I2C3_Init+0x50>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c28:	4b07      	ldr	r3, [pc, #28]	@ (8004c48 <MX_I2C3_Init+0x50>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c2e:	4b06      	ldr	r3, [pc, #24]	@ (8004c48 <MX_I2C3_Init+0x50>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004c34:	4804      	ldr	r0, [pc, #16]	@ (8004c48 <MX_I2C3_Init+0x50>)
 8004c36:	f004 ff67 	bl	8009b08 <HAL_I2C_Init>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004c40:	f000 fb6a 	bl	8005318 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004c44:	bf00      	nop
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	20000424 	.word	0x20000424
 8004c4c:	40005c00 	.word	0x40005c00
 8004c50:	000186a0 	.word	0x000186a0

08004c54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c5a:	f107 0308 	add.w	r3, r7, #8
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	605a      	str	r2, [r3, #4]
 8004c64:	609a      	str	r2, [r3, #8]
 8004c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c68:	463b      	mov	r3, r7
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004c70:	4b1e      	ldr	r3, [pc, #120]	@ (8004cec <MX_TIM2_Init+0x98>)
 8004c72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004c76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 8004c78:	4b1c      	ldr	r3, [pc, #112]	@ (8004cec <MX_TIM2_Init+0x98>)
 8004c7a:	f242 3227 	movw	r2, #8999	@ 0x2327
 8004c7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c80:	4b1a      	ldr	r3, [pc, #104]	@ (8004cec <MX_TIM2_Init+0x98>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8004c86:	4b19      	ldr	r3, [pc, #100]	@ (8004cec <MX_TIM2_Init+0x98>)
 8004c88:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004c8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c8e:	4b17      	ldr	r3, [pc, #92]	@ (8004cec <MX_TIM2_Init+0x98>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c94:	4b15      	ldr	r3, [pc, #84]	@ (8004cec <MX_TIM2_Init+0x98>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004c9a:	4814      	ldr	r0, [pc, #80]	@ (8004cec <MX_TIM2_Init+0x98>)
 8004c9c:	f006 fd70 	bl	800b780 <HAL_TIM_Base_Init>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004ca6:	f000 fb37 	bl	8005318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004caa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004cae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004cb0:	f107 0308 	add.w	r3, r7, #8
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	480d      	ldr	r0, [pc, #52]	@ (8004cec <MX_TIM2_Init+0x98>)
 8004cb8:	f006 ff12 	bl	800bae0 <HAL_TIM_ConfigClockSource>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004cc2:	f000 fb29 	bl	8005318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004cce:	463b      	mov	r3, r7
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4806      	ldr	r0, [pc, #24]	@ (8004cec <MX_TIM2_Init+0x98>)
 8004cd4:	f007 f934 	bl	800bf40 <HAL_TIMEx_MasterConfigSynchronization>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004cde:	f000 fb1b 	bl	8005318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004ce2:	bf00      	nop
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000478 	.word	0x20000478

08004cf0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004cf4:	4b11      	ldr	r3, [pc, #68]	@ (8004d3c <MX_UART4_Init+0x4c>)
 8004cf6:	4a12      	ldr	r2, [pc, #72]	@ (8004d40 <MX_UART4_Init+0x50>)
 8004cf8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004cfa:	4b10      	ldr	r3, [pc, #64]	@ (8004d3c <MX_UART4_Init+0x4c>)
 8004cfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004d00:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004d02:	4b0e      	ldr	r3, [pc, #56]	@ (8004d3c <MX_UART4_Init+0x4c>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004d08:	4b0c      	ldr	r3, [pc, #48]	@ (8004d3c <MX_UART4_Init+0x4c>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d3c <MX_UART4_Init+0x4c>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004d14:	4b09      	ldr	r3, [pc, #36]	@ (8004d3c <MX_UART4_Init+0x4c>)
 8004d16:	220c      	movs	r2, #12
 8004d18:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d1a:	4b08      	ldr	r3, [pc, #32]	@ (8004d3c <MX_UART4_Init+0x4c>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d20:	4b06      	ldr	r3, [pc, #24]	@ (8004d3c <MX_UART4_Init+0x4c>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004d26:	4805      	ldr	r0, [pc, #20]	@ (8004d3c <MX_UART4_Init+0x4c>)
 8004d28:	f007 f99a 	bl	800c060 <HAL_UART_Init>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004d32:	f000 faf1 	bl	8005318 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004d36:	bf00      	nop
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	200004c0 	.word	0x200004c0
 8004d40:	40004c00 	.word	0x40004c00

08004d44 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004d48:	4b11      	ldr	r3, [pc, #68]	@ (8004d90 <MX_UART5_Init+0x4c>)
 8004d4a:	4a12      	ldr	r2, [pc, #72]	@ (8004d94 <MX_UART5_Init+0x50>)
 8004d4c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8004d4e:	4b10      	ldr	r3, [pc, #64]	@ (8004d90 <MX_UART5_Init+0x4c>)
 8004d50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004d54:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004d56:	4b0e      	ldr	r3, [pc, #56]	@ (8004d90 <MX_UART5_Init+0x4c>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d90 <MX_UART5_Init+0x4c>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004d62:	4b0b      	ldr	r3, [pc, #44]	@ (8004d90 <MX_UART5_Init+0x4c>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004d68:	4b09      	ldr	r3, [pc, #36]	@ (8004d90 <MX_UART5_Init+0x4c>)
 8004d6a:	220c      	movs	r2, #12
 8004d6c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d6e:	4b08      	ldr	r3, [pc, #32]	@ (8004d90 <MX_UART5_Init+0x4c>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d74:	4b06      	ldr	r3, [pc, #24]	@ (8004d90 <MX_UART5_Init+0x4c>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004d7a:	4805      	ldr	r0, [pc, #20]	@ (8004d90 <MX_UART5_Init+0x4c>)
 8004d7c:	f007 f970 	bl	800c060 <HAL_UART_Init>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8004d86:	f000 fac7 	bl	8005318 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004d8a:	bf00      	nop
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000508 	.word	0x20000508
 8004d94:	40005000 	.word	0x40005000

08004d98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004d9c:	4b11      	ldr	r3, [pc, #68]	@ (8004de4 <MX_USART1_UART_Init+0x4c>)
 8004d9e:	4a12      	ldr	r2, [pc, #72]	@ (8004de8 <MX_USART1_UART_Init+0x50>)
 8004da0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004da2:	4b10      	ldr	r3, [pc, #64]	@ (8004de4 <MX_USART1_UART_Init+0x4c>)
 8004da4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004da8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004daa:	4b0e      	ldr	r3, [pc, #56]	@ (8004de4 <MX_USART1_UART_Init+0x4c>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004db0:	4b0c      	ldr	r3, [pc, #48]	@ (8004de4 <MX_USART1_UART_Init+0x4c>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004db6:	4b0b      	ldr	r3, [pc, #44]	@ (8004de4 <MX_USART1_UART_Init+0x4c>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004dbc:	4b09      	ldr	r3, [pc, #36]	@ (8004de4 <MX_USART1_UART_Init+0x4c>)
 8004dbe:	220c      	movs	r2, #12
 8004dc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dc2:	4b08      	ldr	r3, [pc, #32]	@ (8004de4 <MX_USART1_UART_Init+0x4c>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dc8:	4b06      	ldr	r3, [pc, #24]	@ (8004de4 <MX_USART1_UART_Init+0x4c>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004dce:	4805      	ldr	r0, [pc, #20]	@ (8004de4 <MX_USART1_UART_Init+0x4c>)
 8004dd0:	f007 f946 	bl	800c060 <HAL_UART_Init>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004dda:	f000 fa9d 	bl	8005318 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004dde:	bf00      	nop
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000550 	.word	0x20000550
 8004de8:	40011000 	.word	0x40011000

08004dec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004df0:	4b11      	ldr	r3, [pc, #68]	@ (8004e38 <MX_USART2_UART_Init+0x4c>)
 8004df2:	4a12      	ldr	r2, [pc, #72]	@ (8004e3c <MX_USART2_UART_Init+0x50>)
 8004df4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004df6:	4b10      	ldr	r3, [pc, #64]	@ (8004e38 <MX_USART2_UART_Init+0x4c>)
 8004df8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004dfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8004e38 <MX_USART2_UART_Init+0x4c>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004e04:	4b0c      	ldr	r3, [pc, #48]	@ (8004e38 <MX_USART2_UART_Init+0x4c>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e38 <MX_USART2_UART_Init+0x4c>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004e10:	4b09      	ldr	r3, [pc, #36]	@ (8004e38 <MX_USART2_UART_Init+0x4c>)
 8004e12:	220c      	movs	r2, #12
 8004e14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e16:	4b08      	ldr	r3, [pc, #32]	@ (8004e38 <MX_USART2_UART_Init+0x4c>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e1c:	4b06      	ldr	r3, [pc, #24]	@ (8004e38 <MX_USART2_UART_Init+0x4c>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004e22:	4805      	ldr	r0, [pc, #20]	@ (8004e38 <MX_USART2_UART_Init+0x4c>)
 8004e24:	f007 f91c 	bl	800c060 <HAL_UART_Init>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004e2e:	f000 fa73 	bl	8005318 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004e32:	bf00      	nop
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20000598 	.word	0x20000598
 8004e3c:	40004400 	.word	0x40004400

08004e40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004e46:	2300      	movs	r3, #0
 8004e48:	607b      	str	r3, [r7, #4]
 8004e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ec8 <MX_DMA_Init+0x88>)
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e4e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ec8 <MX_DMA_Init+0x88>)
 8004e50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e56:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec8 <MX_DMA_Init+0x88>)
 8004e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e5e:	607b      	str	r3, [r7, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e62:	2300      	movs	r3, #0
 8004e64:	603b      	str	r3, [r7, #0]
 8004e66:	4b18      	ldr	r3, [pc, #96]	@ (8004ec8 <MX_DMA_Init+0x88>)
 8004e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6a:	4a17      	ldr	r2, [pc, #92]	@ (8004ec8 <MX_DMA_Init+0x88>)
 8004e6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e72:	4b15      	ldr	r3, [pc, #84]	@ (8004ec8 <MX_DMA_Init+0x88>)
 8004e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e7a:	603b      	str	r3, [r7, #0]
 8004e7c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2100      	movs	r1, #0
 8004e82:	200d      	movs	r0, #13
 8004e84:	f003 ff27 	bl	8008cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004e88:	200d      	movs	r0, #13
 8004e8a:	f003 ff40 	bl	8008d0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8004e8e:	2200      	movs	r2, #0
 8004e90:	2100      	movs	r1, #0
 8004e92:	200f      	movs	r0, #15
 8004e94:	f003 ff1f 	bl	8008cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004e98:	200f      	movs	r0, #15
 8004e9a:	f003 ff38 	bl	8008d0e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	2038      	movs	r0, #56	@ 0x38
 8004ea4:	f003 ff17 	bl	8008cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004ea8:	2038      	movs	r0, #56	@ 0x38
 8004eaa:	f003 ff30 	bl	8008d0e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8004eae:	2200      	movs	r2, #0
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	203b      	movs	r0, #59	@ 0x3b
 8004eb4:	f003 ff0f 	bl	8008cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004eb8:	203b      	movs	r0, #59	@ 0x3b
 8004eba:	f003 ff28 	bl	8008d0e <HAL_NVIC_EnableIRQ>

}
 8004ebe:	bf00      	nop
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40023800 	.word	0x40023800

08004ecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	@ 0x28
 8004ed0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ed2:	f107 0314 	add.w	r3, r7, #20
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	605a      	str	r2, [r3, #4]
 8004edc:	609a      	str	r2, [r3, #8]
 8004ede:	60da      	str	r2, [r3, #12]
 8004ee0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	4b67      	ldr	r3, [pc, #412]	@ (8005084 <MX_GPIO_Init+0x1b8>)
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eea:	4a66      	ldr	r2, [pc, #408]	@ (8005084 <MX_GPIO_Init+0x1b8>)
 8004eec:	f043 0304 	orr.w	r3, r3, #4
 8004ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ef2:	4b64      	ldr	r3, [pc, #400]	@ (8005084 <MX_GPIO_Init+0x1b8>)
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef6:	f003 0304 	and.w	r3, r3, #4
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	4b60      	ldr	r3, [pc, #384]	@ (8005084 <MX_GPIO_Init+0x1b8>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f06:	4a5f      	ldr	r2, [pc, #380]	@ (8005084 <MX_GPIO_Init+0x1b8>)
 8004f08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f0e:	4b5d      	ldr	r3, [pc, #372]	@ (8005084 <MX_GPIO_Init+0x1b8>)
 8004f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60bb      	str	r3, [r7, #8]
 8004f1e:	4b59      	ldr	r3, [pc, #356]	@ (8005084 <MX_GPIO_Init+0x1b8>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f22:	4a58      	ldr	r2, [pc, #352]	@ (8005084 <MX_GPIO_Init+0x1b8>)
 8004f24:	f043 0301 	orr.w	r3, r3, #1
 8004f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f2a:	4b56      	ldr	r3, [pc, #344]	@ (8005084 <MX_GPIO_Init+0x1b8>)
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	60bb      	str	r3, [r7, #8]
 8004f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f36:	2300      	movs	r3, #0
 8004f38:	607b      	str	r3, [r7, #4]
 8004f3a:	4b52      	ldr	r3, [pc, #328]	@ (8005084 <MX_GPIO_Init+0x1b8>)
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3e:	4a51      	ldr	r2, [pc, #324]	@ (8005084 <MX_GPIO_Init+0x1b8>)
 8004f40:	f043 0302 	orr.w	r3, r3, #2
 8004f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f46:	4b4f      	ldr	r3, [pc, #316]	@ (8005084 <MX_GPIO_Init+0x1b8>)
 8004f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	607b      	str	r3, [r7, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f52:	2300      	movs	r3, #0
 8004f54:	603b      	str	r3, [r7, #0]
 8004f56:	4b4b      	ldr	r3, [pc, #300]	@ (8005084 <MX_GPIO_Init+0x1b8>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5a:	4a4a      	ldr	r2, [pc, #296]	@ (8005084 <MX_GPIO_Init+0x1b8>)
 8004f5c:	f043 0308 	orr.w	r3, r3, #8
 8004f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f62:	4b48      	ldr	r3, [pc, #288]	@ (8005084 <MX_GPIO_Init+0x1b8>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RF_M0_Pin|RF_M1_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f640 0103 	movw	r1, #2051	@ 0x803
 8004f74:	4844      	ldr	r0, [pc, #272]	@ (8005088 <MX_GPIO_Init+0x1bc>)
 8004f76:	f004 fd95 	bl	8009aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SGU_LED2_Pin|SGU_LED1_Pin, GPIO_PIN_RESET);
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f240 4104 	movw	r1, #1028	@ 0x404
 8004f80:	4842      	ldr	r0, [pc, #264]	@ (800508c <MX_GPIO_Init+0x1c0>)
 8004f82:	f004 fd8f 	bl	8009aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8004f86:	2201      	movs	r2, #1
 8004f88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004f8c:	483f      	ldr	r0, [pc, #252]	@ (800508c <MX_GPIO_Init+0x1c0>)
 8004f8e:	f004 fd89 	bl	8009aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|MCU_LED_Pin, GPIO_PIN_RESET);
 8004f92:	2200      	movs	r2, #0
 8004f94:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8004f98:	483d      	ldr	r0, [pc, #244]	@ (8005090 <MX_GPIO_Init+0x1c4>)
 8004f9a:	f004 fd83 	bl	8009aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STATUS1_Pin STATUS2_Pin */
  GPIO_InitStruct.Pin = STATUS1_Pin|STATUS2_Pin;
 8004f9e:	2321      	movs	r3, #33	@ 0x21
 8004fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004faa:	f107 0314 	add.w	r3, r7, #20
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4837      	ldr	r0, [pc, #220]	@ (8005090 <MX_GPIO_Init+0x1c4>)
 8004fb2:	f004 fad7 	bl	8009564 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_M0_Pin RF_M1_Pin PA11 */
  GPIO_InitStruct.Pin = RF_M0_Pin|RF_M1_Pin|GPIO_PIN_11;
 8004fb6:	f640 0303 	movw	r3, #2051	@ 0x803
 8004fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fc8:	f107 0314 	add.w	r3, r7, #20
 8004fcc:	4619      	mov	r1, r3
 8004fce:	482e      	ldr	r0, [pc, #184]	@ (8005088 <MX_GPIO_Init+0x1bc>)
 8004fd0:	f004 fac8 	bl	8009564 <HAL_GPIO_Init>

  /*Configure GPIO pins : SGU_LED2_Pin SGU_LED1_Pin PB14 */
  GPIO_InitStruct.Pin = SGU_LED2_Pin|SGU_LED1_Pin|GPIO_PIN_14;
 8004fd4:	f244 4304 	movw	r3, #17412	@ 0x4404
 8004fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fe6:	f107 0314 	add.w	r3, r7, #20
 8004fea:	4619      	mov	r1, r3
 8004fec:	4827      	ldr	r0, [pc, #156]	@ (800508c <MX_GPIO_Init+0x1c0>)
 8004fee:	f004 fab9 	bl	8009564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004ff2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ff8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005002:	f107 0314 	add.w	r3, r7, #20
 8005006:	4619      	mov	r1, r3
 8005008:	4820      	ldr	r0, [pc, #128]	@ (800508c <MX_GPIO_Init+0x1c0>)
 800500a:	f004 faab 	bl	8009564 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 MCU_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|MCU_LED_Pin;
 800500e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8005012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005014:	2301      	movs	r3, #1
 8005016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005018:	2300      	movs	r3, #0
 800501a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800501c:	2300      	movs	r3, #0
 800501e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005020:	f107 0314 	add.w	r3, r7, #20
 8005024:	4619      	mov	r1, r3
 8005026:	481a      	ldr	r0, [pc, #104]	@ (8005090 <MX_GPIO_Init+0x1c4>)
 8005028:	f004 fa9c 	bl	8009564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800502c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005032:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005038:	2300      	movs	r3, #0
 800503a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800503c:	f107 0314 	add.w	r3, r7, #20
 8005040:	4619      	mov	r1, r3
 8005042:	4811      	ldr	r0, [pc, #68]	@ (8005088 <MX_GPIO_Init+0x1bc>)
 8005044:	f004 fa8e 	bl	8009564 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005048:	2200      	movs	r2, #0
 800504a:	2100      	movs	r1, #0
 800504c:	2028      	movs	r0, #40	@ 0x28
 800504e:	f003 fe42 	bl	8008cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005052:	2028      	movs	r0, #40	@ 0x28
 8005054:	f003 fe5b 	bl	8008d0e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8005058:	2200      	movs	r2, #0
 800505a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800505e:	480b      	ldr	r0, [pc, #44]	@ (800508c <MX_GPIO_Init+0x1c0>)
 8005060:	f004 fd20 	bl	8009aa4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8005064:	2032      	movs	r0, #50	@ 0x32
 8005066:	f003 f8ed 	bl	8008244 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800506a:	2201      	movs	r2, #1
 800506c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005070:	4806      	ldr	r0, [pc, #24]	@ (800508c <MX_GPIO_Init+0x1c0>)
 8005072:	f004 fd17 	bl	8009aa4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8005076:	2032      	movs	r0, #50	@ 0x32
 8005078:	f003 f8e4 	bl	8008244 <HAL_Delay>
/* USER CODE END MX_GPIO_Init_2 */
}
 800507c:	bf00      	nop
 800507e:	3728      	adds	r7, #40	@ 0x28
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40023800 	.word	0x40023800
 8005088:	40020000 	.word	0x40020000
 800508c:	40020400 	.word	0x40020400
 8005090:	40020800 	.word	0x40020800

08005094 <bme280_begin>:

/* USER CODE BEGIN 4 */
void bme280_begin()
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
	BME280_sensor.device_config.bme280_filter = 			BME280_FILTER_8;
 8005098:	4b08      	ldr	r3, [pc, #32]	@ (80050bc <bme280_begin+0x28>)
 800509a:	2203      	movs	r2, #3
 800509c:	711a      	strb	r2, [r3, #4]
	BME280_sensor.device_config.bme280_mode =				BME280_MODE_NORMAL;
 800509e:	4b07      	ldr	r3, [pc, #28]	@ (80050bc <bme280_begin+0x28>)
 80050a0:	2203      	movs	r2, #3
 80050a2:	715a      	strb	r2, [r3, #5]
	BME280_sensor.device_config.bme280_output_speed =		BME280_OS_8;
 80050a4:	4b05      	ldr	r3, [pc, #20]	@ (80050bc <bme280_begin+0x28>)
 80050a6:	2204      	movs	r2, #4
 80050a8:	719a      	strb	r2, [r3, #6]
	BME280_sensor.device_config.bme280_standby_time = 		BME280_STBY_20;
 80050aa:	4b04      	ldr	r3, [pc, #16]	@ (80050bc <bme280_begin+0x28>)
 80050ac:	2207      	movs	r2, #7
 80050ae:	71da      	strb	r2, [r3, #7]
	bme280_init(&BME280_sensor, &hi2c1);
 80050b0:	4903      	ldr	r1, [pc, #12]	@ (80050c0 <bme280_begin+0x2c>)
 80050b2:	4802      	ldr	r0, [pc, #8]	@ (80050bc <bme280_begin+0x28>)
 80050b4:	f7fc fb16 	bl	80016e4 <bme280_init>

}
 80050b8:	bf00      	nop
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	200006a0 	.word	0x200006a0
 80050c0:	200003d0 	.word	0x200003d0

080050c4 <bmi_imu_init>:

//BMI sensor struct filled with configuration settings. Then called bmi088_init function.
uint8_t bmi_imu_init(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
	//Acc config
	BMI_sensor.device_config.acc_bandwith = ACC_BWP_OSR4;
 80050c8:	4b13      	ldr	r3, [pc, #76]	@ (8005118 <bmi_imu_init+0x54>)
 80050ca:	2208      	movs	r2, #8
 80050cc:	719a      	strb	r2, [r3, #6]
	BMI_sensor.device_config.acc_outputDateRate = ACC_ODR_200;
 80050ce:	4b12      	ldr	r3, [pc, #72]	@ (8005118 <bmi_imu_init+0x54>)
 80050d0:	2209      	movs	r2, #9
 80050d2:	71da      	strb	r2, [r3, #7]
	BMI_sensor.device_config.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 80050d4:	4b10      	ldr	r3, [pc, #64]	@ (8005118 <bmi_imu_init+0x54>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	711a      	strb	r2, [r3, #4]
	BMI_sensor.device_config.acc_range = ACC_RANGE_24G;
 80050da:	4b0f      	ldr	r3, [pc, #60]	@ (8005118 <bmi_imu_init+0x54>)
 80050dc:	2203      	movs	r2, #3
 80050de:	715a      	strb	r2, [r3, #5]

	// Gyro config
	BMI_sensor.device_config.gyro_bandWidth = GYRO_BW_116;
 80050e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005118 <bmi_imu_init+0x54>)
 80050e2:	2202      	movs	r2, #2
 80050e4:	725a      	strb	r2, [r3, #9]
	BMI_sensor.device_config.gyro_range = GYRO_RANGE_2000;
 80050e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005118 <bmi_imu_init+0x54>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	729a      	strb	r2, [r3, #10]
	BMI_sensor.device_config.gyro_powerMode = GYRO_LPM_NORMAL;
 80050ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005118 <bmi_imu_init+0x54>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	721a      	strb	r2, [r3, #8]

	BMI_sensor.device_config.acc_IRQ = EXTI15_10_IRQn;
 80050f2:	4b09      	ldr	r3, [pc, #36]	@ (8005118 <bmi_imu_init+0x54>)
 80050f4:	2228      	movs	r2, #40	@ 0x28
 80050f6:	741a      	strb	r2, [r3, #16]
	BMI_sensor.device_config.gyro_IRQ = EXTI15_10_IRQn;
 80050f8:	4b07      	ldr	r3, [pc, #28]	@ (8005118 <bmi_imu_init+0x54>)
 80050fa:	2228      	movs	r2, #40	@ 0x28
 80050fc:	745a      	strb	r2, [r3, #17]
	BMI_sensor.device_config.BMI_I2c = &IMU_I2C_HNDLR;
 80050fe:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <bmi_imu_init+0x54>)
 8005100:	4a06      	ldr	r2, [pc, #24]	@ (800511c <bmi_imu_init+0x58>)
 8005102:	60da      	str	r2, [r3, #12]
	BMI_sensor.device_config.offsets = NULL;	//Offset datas stored in backup sram for saving them unwanted reset.
 8005104:	4b04      	ldr	r3, [pc, #16]	@ (8005118 <bmi_imu_init+0x54>)
 8005106:	2200      	movs	r2, #0
 8005108:	615a      	str	r2, [r3, #20]

	return	bmi088_init(&BMI_sensor);
 800510a:	4803      	ldr	r0, [pc, #12]	@ (8005118 <bmi_imu_init+0x54>)
 800510c:	f7fc ff4a 	bl	8001fa4 <bmi088_init>
 8005110:	4603      	mov	r3, r0
}
 8005112:	4618      	mov	r0, r3
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	200006e4 	.word	0x200006e4
 800511c:	20000424 	.word	0x20000424

08005120 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_12)
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005130:	d102      	bne.n	8005138 <HAL_GPIO_EXTI_Callback+0x18>
	{
		bmi088_set_accel_INT(&BMI_sensor);
 8005132:	4807      	ldr	r0, [pc, #28]	@ (8005150 <HAL_GPIO_EXTI_Callback+0x30>)
 8005134:	f7fd fd66 	bl	8002c04 <bmi088_set_accel_INT>
	}
	if(GPIO_Pin == GPIO_PIN_13)
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800513e:	d102      	bne.n	8005146 <HAL_GPIO_EXTI_Callback+0x26>
	{
		bmi088_set_gyro_INT(&BMI_sensor);
 8005140:	4803      	ldr	r0, [pc, #12]	@ (8005150 <HAL_GPIO_EXTI_Callback+0x30>)
 8005142:	f7fd fd6c 	bl	8002c1e <bmi088_set_gyro_INT>
	}
}
 8005146:	bf00      	nop
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	200006e4 	.word	0x200006e4

08005154 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == UART4) {
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a0d      	ldr	r2, [pc, #52]	@ (800519c <HAL_UARTEx_RxEventCallback+0x48>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d114      	bne.n	8005194 <HAL_UARTEx_RxEventCallback+0x40>
        usart4_packet_ready = 1;
 800516a:	4b0d      	ldr	r3, [pc, #52]	@ (80051a0 <HAL_UARTEx_RxEventCallback+0x4c>)
 800516c:	2201      	movs	r2, #1
 800516e:	701a      	strb	r2, [r3, #0]
        usart4_packet_size = Size;
 8005170:	4a0c      	ldr	r2, [pc, #48]	@ (80051a4 <HAL_UARTEx_RxEventCallback+0x50>)
 8005172:	887b      	ldrh	r3, [r7, #2]
 8005174:	8013      	strh	r3, [r2, #0]
        // RX DMA'yı tekrar başlat
        HAL_UARTEx_ReceiveToIdle_DMA(&huart4, usart4_rx_buffer, sizeof(usart4_rx_buffer));
 8005176:	2224      	movs	r2, #36	@ 0x24
 8005178:	490b      	ldr	r1, [pc, #44]	@ (80051a8 <HAL_UARTEx_RxEventCallback+0x54>)
 800517a:	480c      	ldr	r0, [pc, #48]	@ (80051ac <HAL_UARTEx_RxEventCallback+0x58>)
 800517c:	f007 f8c8 	bl	800c310 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart4.hdmarx, DMA_IT_HT); // Half-transfer interrupt'ı devre dışı bırak
 8005180:	4b0a      	ldr	r3, [pc, #40]	@ (80051ac <HAL_UARTEx_RxEventCallback+0x58>)
 8005182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	4b08      	ldr	r3, [pc, #32]	@ (80051ac <HAL_UARTEx_RxEventCallback+0x58>)
 800518a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0208 	bic.w	r2, r2, #8
 8005192:	601a      	str	r2, [r3, #0]
    }
}
 8005194:	bf00      	nop
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40004c00 	.word	0x40004c00
 80051a0:	200007e0 	.word	0x200007e0
 80051a4:	200007e2 	.word	0x200007e2
 80051a8:	20000794 	.word	0x20000794
 80051ac:	200004c0 	.word	0x200004c0

080051b0 <HAL_TIM_PeriodElapsedCallback>:

// Timer 2 interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051c0:	d106      	bne.n	80051d0 <HAL_TIM_PeriodElapsedCallback+0x20>
        tx_timer_flag++;
 80051c2:	4b06      	ldr	r3, [pc, #24]	@ (80051dc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	3301      	adds	r3, #1
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	4b03      	ldr	r3, [pc, #12]	@ (80051dc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80051ce:	701a      	strb	r2, [r3, #0]
    }
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	200007e4 	.word	0x200007e4

080051e0 <HAL_UART_TxCpltCallback>:

// USART1 TX DMA tamam callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a05      	ldr	r2, [pc, #20]	@ (8005204 <HAL_UART_TxCpltCallback+0x24>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d102      	bne.n	80051f8 <HAL_UART_TxCpltCallback+0x18>
        usart4_tx_busy = 0;
 80051f2:	4b05      	ldr	r3, [pc, #20]	@ (8005208 <HAL_UART_TxCpltCallback+0x28>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]
    }
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	40004c00 	.word	0x40004c00
 8005208:	200007e5 	.word	0x200007e5

0800520c <uart4_send_packet_dma>:

// USART1 TX DMA başlatma fonksiyonu
void uart4_send_packet_dma(uint8_t *data, uint16_t size)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	807b      	strh	r3, [r7, #2]
    if (!usart4_tx_busy) {
 8005218:	4b08      	ldr	r3, [pc, #32]	@ (800523c <uart4_send_packet_dma+0x30>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d108      	bne.n	8005234 <uart4_send_packet_dma+0x28>
        usart4_tx_busy = 1;
 8005222:	4b06      	ldr	r3, [pc, #24]	@ (800523c <uart4_send_packet_dma+0x30>)
 8005224:	2201      	movs	r2, #1
 8005226:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_DMA(&huart4, data, size);
 8005228:	887b      	ldrh	r3, [r7, #2]
 800522a:	461a      	mov	r2, r3
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	4804      	ldr	r0, [pc, #16]	@ (8005240 <uart4_send_packet_dma+0x34>)
 8005230:	f006 fff2 	bl	800c218 <HAL_UART_Transmit_DMA>
    }
}
 8005234:	bf00      	nop
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	200007e5 	.word	0x200007e5
 8005240:	200004c0 	.word	0x200004c0

08005244 <HSD_StatusCheck>:
	// Voltaj
	sprintf(uart_buffer,"Akim: %u  | Voltaj: %u \r\n", v_current_raw, v_voltage_raw);
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
}

void HSD_StatusCheck(){
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
	// PC0 pinini oku
	GPIO_PinState pc0_state = HAL_GPIO_ReadPin(STATUS1_GPIO_Port, STATUS1_Pin);
 800524a:	2101      	movs	r1, #1
 800524c:	4816      	ldr	r0, [pc, #88]	@ (80052a8 <HSD_StatusCheck+0x64>)
 800524e:	f004 fc11 	bl	8009a74 <HAL_GPIO_ReadPin>
 8005252:	4603      	mov	r3, r0
 8005254:	71fb      	strb	r3, [r7, #7]
	if (pc0_state == GPIO_PIN_RESET) { // low ise
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d106      	bne.n	800526a <HSD_StatusCheck+0x26>
		HAL_GPIO_WritePin(SGU_LED1_GPIO_Port, SGU_LED1_Pin, GPIO_PIN_SET); // PB10 LED yak
 800525c:	2201      	movs	r2, #1
 800525e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005262:	4812      	ldr	r0, [pc, #72]	@ (80052ac <HSD_StatusCheck+0x68>)
 8005264:	f004 fc1e 	bl	8009aa4 <HAL_GPIO_WritePin>
 8005268:	e005      	b.n	8005276 <HSD_StatusCheck+0x32>
	} else {
		HAL_GPIO_WritePin(SGU_LED1_GPIO_Port, SGU_LED1_Pin, GPIO_PIN_RESET); // değilse söndür
 800526a:	2200      	movs	r2, #0
 800526c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005270:	480e      	ldr	r0, [pc, #56]	@ (80052ac <HSD_StatusCheck+0x68>)
 8005272:	f004 fc17 	bl	8009aa4 <HAL_GPIO_WritePin>
	}

	// PC5 pinini oku
	GPIO_PinState pc5_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8005276:	2120      	movs	r1, #32
 8005278:	480b      	ldr	r0, [pc, #44]	@ (80052a8 <HSD_StatusCheck+0x64>)
 800527a:	f004 fbfb 	bl	8009a74 <HAL_GPIO_ReadPin>
 800527e:	4603      	mov	r3, r0
 8005280:	71bb      	strb	r3, [r7, #6]
	if (pc5_state == GPIO_PIN_RESET) { // low ise
 8005282:	79bb      	ldrb	r3, [r7, #6]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d105      	bne.n	8005294 <HSD_StatusCheck+0x50>
		HAL_GPIO_WritePin(SGU_LED2_GPIO_Port, SGU_LED2_Pin, GPIO_PIN_SET); // PB2 LED yak
 8005288:	2201      	movs	r2, #1
 800528a:	2104      	movs	r1, #4
 800528c:	4807      	ldr	r0, [pc, #28]	@ (80052ac <HSD_StatusCheck+0x68>)
 800528e:	f004 fc09 	bl	8009aa4 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(SGU_LED2_GPIO_Port, SGU_LED2_Pin, GPIO_PIN_RESET); // değilse söndür
	}
}
 8005292:	e004      	b.n	800529e <HSD_StatusCheck+0x5a>
		HAL_GPIO_WritePin(SGU_LED2_GPIO_Port, SGU_LED2_Pin, GPIO_PIN_RESET); // değilse söndür
 8005294:	2200      	movs	r2, #0
 8005296:	2104      	movs	r1, #4
 8005298:	4804      	ldr	r0, [pc, #16]	@ (80052ac <HSD_StatusCheck+0x68>)
 800529a:	f004 fc03 	bl	8009aa4 <HAL_GPIO_WritePin>
}
 800529e:	bf00      	nop
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40020800 	.word	0x40020800
 80052ac:	40020400 	.word	0x40020400

080052b0 <loraBegin>:

void loraBegin()
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80052b4:	2064      	movs	r0, #100	@ 0x64
 80052b6:	f002 ffc5 	bl	8008244 <HAL_Delay>

	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, RESET);
 80052ba:	2200      	movs	r2, #0
 80052bc:	2101      	movs	r1, #1
 80052be:	4814      	ldr	r0, [pc, #80]	@ (8005310 <loraBegin+0x60>)
 80052c0:	f004 fbf0 	bl	8009aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, SET);
 80052c4:	2201      	movs	r2, #1
 80052c6:	2102      	movs	r1, #2
 80052c8:	4811      	ldr	r0, [pc, #68]	@ (8005310 <loraBegin+0x60>)
 80052ca:	f004 fbeb 	bl	8009aa4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80052ce:	2064      	movs	r0, #100	@ 0x64
 80052d0:	f002 ffb8 	bl	8008244 <HAL_Delay>

    e22_lora.baudRate = LORA_BAUD_115200;
 80052d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005314 <loraBegin+0x64>)
 80052d6:	22e0      	movs	r2, #224	@ 0xe0
 80052d8:	701a      	strb	r2, [r3, #0]
    e22_lora.airRate = LORA_AIR_RATE_2_4k;
 80052da:	4b0e      	ldr	r3, [pc, #56]	@ (8005314 <loraBegin+0x64>)
 80052dc:	2202      	movs	r2, #2
 80052de:	705a      	strb	r2, [r3, #1]
    e22_lora.packetSize = LORA_SUB_PACKET_64_BYTES;
 80052e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <loraBegin+0x64>)
 80052e2:	2280      	movs	r2, #128	@ 0x80
 80052e4:	709a      	strb	r2, [r3, #2]
    e22_lora.power = LORA_POWER_37dbm;
 80052e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005314 <loraBegin+0x64>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	70da      	strb	r2, [r3, #3]
    e22_lora.loraAddress.address16 = 0x0000;
 80052ec:	4b09      	ldr	r3, [pc, #36]	@ (8005314 <loraBegin+0x64>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	80da      	strh	r2, [r3, #6]
    e22_lora.loraKey.key16 = 0x0000;
 80052f2:	4b08      	ldr	r3, [pc, #32]	@ (8005314 <loraBegin+0x64>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	809a      	strh	r2, [r3, #4]

    e22_lora.channel = ROCKET_TELEM_FREQ;
 80052f8:	4b06      	ldr	r3, [pc, #24]	@ (8005314 <loraBegin+0x64>)
 80052fa:	2219      	movs	r2, #25
 80052fc:	721a      	strb	r2, [r3, #8]

    lora_configure(&e22_lora);
 80052fe:	4805      	ldr	r0, [pc, #20]	@ (8005314 <loraBegin+0x64>)
 8005300:	f7ff f9fe 	bl	8004700 <lora_configure>
    HAL_Delay(1000);
 8005304:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005308:	f002 ff9c 	bl	8008244 <HAL_Delay>
}
 800530c:	bf00      	nop
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40020000 	.word	0x40020000
 8005314:	20000780 	.word	0x20000780

08005318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800531c:	b672      	cpsid	i
}
 800531e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005320:	bf00      	nop
 8005322:	e7fd      	b.n	8005320 <Error_Handler+0x8>

08005324 <check_sum_hesapla_sit>:
        check_sum += normal_paket[i];
    }
    return (unsigned char) (check_sum % 256);
}

unsigned char check_sum_hesapla_sit(int a){
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8005330:	2300      	movs	r3, #0
 8005332:	60bb      	str	r3, [r7, #8]
 8005334:	e00a      	b.n	800534c <check_sum_hesapla_sit+0x28>
        check_sum += sit_paket[i];
 8005336:	4a0e      	ldr	r2, [pc, #56]	@ (8005370 <check_sum_hesapla_sit+0x4c>)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4413      	add	r3, r2
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	461a      	mov	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4413      	add	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	3301      	adds	r3, #1
 800534a:	60bb      	str	r3, [r7, #8]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	429a      	cmp	r2, r3
 8005352:	dbf0      	blt.n	8005336 <check_sum_hesapla_sit+0x12>
    }
    return (unsigned char) (check_sum % 256);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	425a      	negs	r2, r3
 8005358:	b2db      	uxtb	r3, r3
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	bf58      	it	pl
 800535e:	4253      	negpl	r3, r2
 8005360:	b2db      	uxtb	r3, r3
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	200007f0 	.word	0x200007f0

08005374 <round2>:

// Float değerleri iki ondalık basamağa yuvarlamak için yardımcı fonksiyon
double round2(double value) {
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	ed87 0b00 	vstr	d0, [r7]
    return round(value * 100.0) / 100.0;
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	4b10      	ldr	r3, [pc, #64]	@ (80053c4 <round2+0x50>)
 8005384:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005388:	f7fb f956 	bl	8000638 <__aeabi_dmul>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	ec43 2b17 	vmov	d7, r2, r3
 8005394:	eeb0 0a47 	vmov.f32	s0, s14
 8005398:	eef0 0a67 	vmov.f32	s1, s15
 800539c:	f00b f8bc 	bl	8010518 <round>
 80053a0:	ec51 0b10 	vmov	r0, r1, d0
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	4b06      	ldr	r3, [pc, #24]	@ (80053c4 <round2+0x50>)
 80053aa:	f7fb fa6f 	bl	800088c <__aeabi_ddiv>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80053b6:	eeb0 0a47 	vmov.f32	s0, s14
 80053ba:	eef0 0a67 	vmov.f32	s1, s15
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40590000 	.word	0x40590000

080053c8 <addDataPacketSit>:
  normal_paket[56] = check_sum_hesapla_normal(56); // Check_sum = check_sum_hesapla();
  normal_paket[57] = 0x0D; // Sabit
  normal_paket[58] = 0x0A;
}

void addDataPacketSit(BME_280_t* BME, bmi088_struct_t* BMI){
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08a      	sub	sp, #40	@ 0x28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  sit_paket[0] = 0xAB; // Sabit
 80053d2:	4b8f      	ldr	r3, [pc, #572]	@ (8005610 <addDataPacketSit+0x248>)
 80053d4:	22ab      	movs	r2, #171	@ 0xab
 80053d6:	701a      	strb	r2, [r3, #0]

  FLOAT32_UINT8_DONUSTURUCU irtifa_float32_uint8_donusturucu;
  irtifa_float32_uint8_donusturucu.sayi = (float)round2(BME->base_altitude + BME->altitude); // Irtifa degerinin atamasini yapiyoruz.
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80053e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053e8:	ee17 0a90 	vmov	r0, s15
 80053ec:	f7fb f8cc 	bl	8000588 <__aeabi_f2d>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	ec43 2b10 	vmov	d0, r2, r3
 80053f8:	f7ff ffbc 	bl	8005374 <round2>
 80053fc:	ec53 2b10 	vmov	r2, r3, d0
 8005400:	4610      	mov	r0, r2
 8005402:	4619      	mov	r1, r3
 8005404:	f7fb fbf0 	bl	8000be8 <__aeabi_d2f>
 8005408:	4603      	mov	r3, r0
 800540a:	627b      	str	r3, [r7, #36]	@ 0x24
  sit_paket[1] = irtifa_float32_uint8_donusturucu.array[3];
 800540c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005410:	4b7f      	ldr	r3, [pc, #508]	@ (8005610 <addDataPacketSit+0x248>)
 8005412:	705a      	strb	r2, [r3, #1]
  sit_paket[2] = irtifa_float32_uint8_donusturucu.array[2];
 8005414:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005418:	4b7d      	ldr	r3, [pc, #500]	@ (8005610 <addDataPacketSit+0x248>)
 800541a:	709a      	strb	r2, [r3, #2]
  sit_paket[3] = irtifa_float32_uint8_donusturucu.array[1];
 800541c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8005420:	4b7b      	ldr	r3, [pc, #492]	@ (8005610 <addDataPacketSit+0x248>)
 8005422:	70da      	strb	r2, [r3, #3]
  sit_paket[4] = irtifa_float32_uint8_donusturucu.array[0];
 8005424:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005428:	4b79      	ldr	r3, [pc, #484]	@ (8005610 <addDataPacketSit+0x248>)
 800542a:	711a      	strb	r2, [r3, #4]

  FLOAT32_UINT8_DONUSTURUCU basinc_float32_uint8_donusturucu;
  basinc_float32_uint8_donusturucu.sayi = (float)round2(BME->pressure); // Roket GPS Irtifa degerinin atamasini yapiyoruz.
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	4618      	mov	r0, r3
 8005432:	f7fb f8a9 	bl	8000588 <__aeabi_f2d>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	ec43 2b10 	vmov	d0, r2, r3
 800543e:	f7ff ff99 	bl	8005374 <round2>
 8005442:	ec53 2b10 	vmov	r2, r3, d0
 8005446:	4610      	mov	r0, r2
 8005448:	4619      	mov	r1, r3
 800544a:	f7fb fbcd 	bl	8000be8 <__aeabi_d2f>
 800544e:	4603      	mov	r3, r0
 8005450:	623b      	str	r3, [r7, #32]
  sit_paket[5] = basinc_float32_uint8_donusturucu.array[3];
 8005452:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005456:	4b6e      	ldr	r3, [pc, #440]	@ (8005610 <addDataPacketSit+0x248>)
 8005458:	715a      	strb	r2, [r3, #5]
  sit_paket[6] = basinc_float32_uint8_donusturucu.array[2];
 800545a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800545e:	4b6c      	ldr	r3, [pc, #432]	@ (8005610 <addDataPacketSit+0x248>)
 8005460:	719a      	strb	r2, [r3, #6]
  sit_paket[7] = basinc_float32_uint8_donusturucu.array[1];
 8005462:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8005466:	4b6a      	ldr	r3, [pc, #424]	@ (8005610 <addDataPacketSit+0x248>)
 8005468:	71da      	strb	r2, [r3, #7]
  sit_paket[8] = basinc_float32_uint8_donusturucu.array[0];
 800546a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800546e:	4b68      	ldr	r3, [pc, #416]	@ (8005610 <addDataPacketSit+0x248>)
 8005470:	721a      	strb	r2, [r3, #8]

  FLOAT32_UINT8_DONUSTURUCU ivme_x_float32_uint8_donusturucu;
  ivme_x_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.acc_x); // Ivme X degerinin atamasini yapiyoruz.
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005476:	4618      	mov	r0, r3
 8005478:	f7fb f886 	bl	8000588 <__aeabi_f2d>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	ec43 2b10 	vmov	d0, r2, r3
 8005484:	f7ff ff76 	bl	8005374 <round2>
 8005488:	ec53 2b10 	vmov	r2, r3, d0
 800548c:	4610      	mov	r0, r2
 800548e:	4619      	mov	r1, r3
 8005490:	f7fb fbaa 	bl	8000be8 <__aeabi_d2f>
 8005494:	4603      	mov	r3, r0
 8005496:	61fb      	str	r3, [r7, #28]
  sit_paket[9] = ivme_x_float32_uint8_donusturucu.array[3];
 8005498:	7ffa      	ldrb	r2, [r7, #31]
 800549a:	4b5d      	ldr	r3, [pc, #372]	@ (8005610 <addDataPacketSit+0x248>)
 800549c:	725a      	strb	r2, [r3, #9]
  sit_paket[10] = ivme_x_float32_uint8_donusturucu.array[2];
 800549e:	7fba      	ldrb	r2, [r7, #30]
 80054a0:	4b5b      	ldr	r3, [pc, #364]	@ (8005610 <addDataPacketSit+0x248>)
 80054a2:	729a      	strb	r2, [r3, #10]
  sit_paket[11] = ivme_x_float32_uint8_donusturucu.array[1];
 80054a4:	7f7a      	ldrb	r2, [r7, #29]
 80054a6:	4b5a      	ldr	r3, [pc, #360]	@ (8005610 <addDataPacketSit+0x248>)
 80054a8:	72da      	strb	r2, [r3, #11]
  sit_paket[12] = ivme_x_float32_uint8_donusturucu.array[0];
 80054aa:	7f3a      	ldrb	r2, [r7, #28]
 80054ac:	4b58      	ldr	r3, [pc, #352]	@ (8005610 <addDataPacketSit+0x248>)
 80054ae:	731a      	strb	r2, [r3, #12]

  FLOAT32_UINT8_DONUSTURUCU ivme_y_float32_uint8_donusturucu;
  ivme_y_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.acc_y); // Ivme Y degerinin atamasini yapiyoruz.
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fb f867 	bl	8000588 <__aeabi_f2d>
 80054ba:	4602      	mov	r2, r0
 80054bc:	460b      	mov	r3, r1
 80054be:	ec43 2b10 	vmov	d0, r2, r3
 80054c2:	f7ff ff57 	bl	8005374 <round2>
 80054c6:	ec53 2b10 	vmov	r2, r3, d0
 80054ca:	4610      	mov	r0, r2
 80054cc:	4619      	mov	r1, r3
 80054ce:	f7fb fb8b 	bl	8000be8 <__aeabi_d2f>
 80054d2:	4603      	mov	r3, r0
 80054d4:	61bb      	str	r3, [r7, #24]
  sit_paket[13] = ivme_y_float32_uint8_donusturucu.array[3];
 80054d6:	7efa      	ldrb	r2, [r7, #27]
 80054d8:	4b4d      	ldr	r3, [pc, #308]	@ (8005610 <addDataPacketSit+0x248>)
 80054da:	735a      	strb	r2, [r3, #13]
  sit_paket[14] = ivme_y_float32_uint8_donusturucu.array[2];
 80054dc:	7eba      	ldrb	r2, [r7, #26]
 80054de:	4b4c      	ldr	r3, [pc, #304]	@ (8005610 <addDataPacketSit+0x248>)
 80054e0:	739a      	strb	r2, [r3, #14]
  sit_paket[15] = ivme_y_float32_uint8_donusturucu.array[1];
 80054e2:	7e7a      	ldrb	r2, [r7, #25]
 80054e4:	4b4a      	ldr	r3, [pc, #296]	@ (8005610 <addDataPacketSit+0x248>)
 80054e6:	73da      	strb	r2, [r3, #15]
  sit_paket[16] = ivme_y_float32_uint8_donusturucu.array[0];
 80054e8:	7e3a      	ldrb	r2, [r7, #24]
 80054ea:	4b49      	ldr	r3, [pc, #292]	@ (8005610 <addDataPacketSit+0x248>)
 80054ec:	741a      	strb	r2, [r3, #16]

  FLOAT32_UINT8_DONUSTURUCU ivme_z_float32_uint8_donusturucu;
  ivme_z_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.acc_z); // Ivme Z degerinin atamasini yapiyoruz.
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fb f848 	bl	8000588 <__aeabi_f2d>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	ec43 2b10 	vmov	d0, r2, r3
 8005500:	f7ff ff38 	bl	8005374 <round2>
 8005504:	ec53 2b10 	vmov	r2, r3, d0
 8005508:	4610      	mov	r0, r2
 800550a:	4619      	mov	r1, r3
 800550c:	f7fb fb6c 	bl	8000be8 <__aeabi_d2f>
 8005510:	4603      	mov	r3, r0
 8005512:	617b      	str	r3, [r7, #20]
  sit_paket[17] = ivme_z_float32_uint8_donusturucu.array[3];
 8005514:	7dfa      	ldrb	r2, [r7, #23]
 8005516:	4b3e      	ldr	r3, [pc, #248]	@ (8005610 <addDataPacketSit+0x248>)
 8005518:	745a      	strb	r2, [r3, #17]
  sit_paket[18] = ivme_z_float32_uint8_donusturucu.array[2];
 800551a:	7dba      	ldrb	r2, [r7, #22]
 800551c:	4b3c      	ldr	r3, [pc, #240]	@ (8005610 <addDataPacketSit+0x248>)
 800551e:	749a      	strb	r2, [r3, #18]
  sit_paket[19] = ivme_z_float32_uint8_donusturucu.array[1];
 8005520:	7d7a      	ldrb	r2, [r7, #21]
 8005522:	4b3b      	ldr	r3, [pc, #236]	@ (8005610 <addDataPacketSit+0x248>)
 8005524:	74da      	strb	r2, [r3, #19]
  sit_paket[20] = ivme_z_float32_uint8_donusturucu.array[0];
 8005526:	7d3a      	ldrb	r2, [r7, #20]
 8005528:	4b39      	ldr	r3, [pc, #228]	@ (8005610 <addDataPacketSit+0x248>)
 800552a:	751a      	strb	r2, [r3, #20]

  FLOAT32_UINT8_DONUSTURUCU jiroskop_x_float32_uint8_donusturucu;
  jiroskop_x_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.angle_x); // Jiroskop X degerinin atamasini yapiyoruz.
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005530:	4618      	mov	r0, r3
 8005532:	f7fb f829 	bl	8000588 <__aeabi_f2d>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	ec43 2b10 	vmov	d0, r2, r3
 800553e:	f7ff ff19 	bl	8005374 <round2>
 8005542:	ec53 2b10 	vmov	r2, r3, d0
 8005546:	4610      	mov	r0, r2
 8005548:	4619      	mov	r1, r3
 800554a:	f7fb fb4d 	bl	8000be8 <__aeabi_d2f>
 800554e:	4603      	mov	r3, r0
 8005550:	613b      	str	r3, [r7, #16]
  sit_paket[21] = jiroskop_x_float32_uint8_donusturucu.array[3];
 8005552:	7cfa      	ldrb	r2, [r7, #19]
 8005554:	4b2e      	ldr	r3, [pc, #184]	@ (8005610 <addDataPacketSit+0x248>)
 8005556:	755a      	strb	r2, [r3, #21]
  sit_paket[22] = jiroskop_x_float32_uint8_donusturucu.array[2];
 8005558:	7cba      	ldrb	r2, [r7, #18]
 800555a:	4b2d      	ldr	r3, [pc, #180]	@ (8005610 <addDataPacketSit+0x248>)
 800555c:	759a      	strb	r2, [r3, #22]
  sit_paket[23] = jiroskop_x_float32_uint8_donusturucu.array[1];
 800555e:	7c7a      	ldrb	r2, [r7, #17]
 8005560:	4b2b      	ldr	r3, [pc, #172]	@ (8005610 <addDataPacketSit+0x248>)
 8005562:	75da      	strb	r2, [r3, #23]
  sit_paket[24] = jiroskop_x_float32_uint8_donusturucu.array[0];
 8005564:	7c3a      	ldrb	r2, [r7, #16]
 8005566:	4b2a      	ldr	r3, [pc, #168]	@ (8005610 <addDataPacketSit+0x248>)
 8005568:	761a      	strb	r2, [r3, #24]

  FLOAT32_UINT8_DONUSTURUCU jiroskop_y_float32_uint8_donusturucu;
  jiroskop_y_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.angle_y); // Jiroskop Y degerinin atamasini yapiyoruz.
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556e:	4618      	mov	r0, r3
 8005570:	f7fb f80a 	bl	8000588 <__aeabi_f2d>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	ec43 2b10 	vmov	d0, r2, r3
 800557c:	f7ff fefa 	bl	8005374 <round2>
 8005580:	ec53 2b10 	vmov	r2, r3, d0
 8005584:	4610      	mov	r0, r2
 8005586:	4619      	mov	r1, r3
 8005588:	f7fb fb2e 	bl	8000be8 <__aeabi_d2f>
 800558c:	4603      	mov	r3, r0
 800558e:	60fb      	str	r3, [r7, #12]
  sit_paket[25] = jiroskop_y_float32_uint8_donusturucu.array[3];
 8005590:	7bfa      	ldrb	r2, [r7, #15]
 8005592:	4b1f      	ldr	r3, [pc, #124]	@ (8005610 <addDataPacketSit+0x248>)
 8005594:	765a      	strb	r2, [r3, #25]
  sit_paket[26] = jiroskop_y_float32_uint8_donusturucu.array[2];
 8005596:	7bba      	ldrb	r2, [r7, #14]
 8005598:	4b1d      	ldr	r3, [pc, #116]	@ (8005610 <addDataPacketSit+0x248>)
 800559a:	769a      	strb	r2, [r3, #26]
  sit_paket[27] = jiroskop_y_float32_uint8_donusturucu.array[1];
 800559c:	7b7a      	ldrb	r2, [r7, #13]
 800559e:	4b1c      	ldr	r3, [pc, #112]	@ (8005610 <addDataPacketSit+0x248>)
 80055a0:	76da      	strb	r2, [r3, #27]
  sit_paket[28] = jiroskop_y_float32_uint8_donusturucu.array[0];
 80055a2:	7b3a      	ldrb	r2, [r7, #12]
 80055a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005610 <addDataPacketSit+0x248>)
 80055a6:	771a      	strb	r2, [r3, #28]
  FLOAT32_UINT8_DONUSTURUCU jiroskop_z_float32_uint8_donusturucu;
  jiroskop_z_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.angle_z); // Jiroskop Z degerinin atamasini yapiyoruz.
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7fa ffeb 	bl	8000588 <__aeabi_f2d>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	ec43 2b10 	vmov	d0, r2, r3
 80055ba:	f7ff fedb 	bl	8005374 <round2>
 80055be:	ec53 2b10 	vmov	r2, r3, d0
 80055c2:	4610      	mov	r0, r2
 80055c4:	4619      	mov	r1, r3
 80055c6:	f7fb fb0f 	bl	8000be8 <__aeabi_d2f>
 80055ca:	4603      	mov	r3, r0
 80055cc:	60bb      	str	r3, [r7, #8]
  sit_paket[29] = jiroskop_z_float32_uint8_donusturucu.array[3];
 80055ce:	7afa      	ldrb	r2, [r7, #11]
 80055d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005610 <addDataPacketSit+0x248>)
 80055d2:	775a      	strb	r2, [r3, #29]
  sit_paket[30] = jiroskop_z_float32_uint8_donusturucu.array[2];
 80055d4:	7aba      	ldrb	r2, [r7, #10]
 80055d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005610 <addDataPacketSit+0x248>)
 80055d8:	779a      	strb	r2, [r3, #30]
  sit_paket[31] = jiroskop_z_float32_uint8_donusturucu.array[1];
 80055da:	7a7a      	ldrb	r2, [r7, #9]
 80055dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005610 <addDataPacketSit+0x248>)
 80055de:	77da      	strb	r2, [r3, #31]
  sit_paket[32] = jiroskop_z_float32_uint8_donusturucu.array[0];
 80055e0:	7a3a      	ldrb	r2, [r7, #8]
 80055e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005610 <addDataPacketSit+0x248>)
 80055e4:	f883 2020 	strb.w	r2, [r3, #32]

  sit_paket[33] = check_sum_hesapla_sit(33); // Check_sum = check_sum_hesapla();
 80055e8:	2021      	movs	r0, #33	@ 0x21
 80055ea:	f7ff fe9b 	bl	8005324 <check_sum_hesapla_sit>
 80055ee:	4603      	mov	r3, r0
 80055f0:	461a      	mov	r2, r3
 80055f2:	4b07      	ldr	r3, [pc, #28]	@ (8005610 <addDataPacketSit+0x248>)
 80055f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  sit_paket[34] = 0x0D;
 80055f8:	4b05      	ldr	r3, [pc, #20]	@ (8005610 <addDataPacketSit+0x248>)
 80055fa:	220d      	movs	r2, #13
 80055fc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  sit_paket[35] = 0x0A;
 8005600:	4b03      	ldr	r3, [pc, #12]	@ (8005610 <addDataPacketSit+0x248>)
 8005602:	220a      	movs	r2, #10
 8005604:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

}
 8005608:	bf00      	nop
 800560a:	3728      	adds	r7, #40	@ 0x28
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	200007f0 	.word	0x200007f0

08005614 <uint8_arrayi_float32_ye_donustur>:

float uint8_arrayi_float32_ye_donustur(uint8_t byte_array_u8[4]) {
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
    FLOAT32_UINT8_DONUSTURUCU float32_uint8_donusturucu;
    float32_uint8_donusturucu.array[0] = byte_array_u8[3];
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	78db      	ldrb	r3, [r3, #3]
 8005620:	733b      	strb	r3, [r7, #12]
    float32_uint8_donusturucu.array[1] = byte_array_u8[2];
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	789b      	ldrb	r3, [r3, #2]
 8005626:	737b      	strb	r3, [r7, #13]
    float32_uint8_donusturucu.array[2] = byte_array_u8[1];
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	785b      	ldrb	r3, [r3, #1]
 800562c:	73bb      	strb	r3, [r7, #14]
    float32_uint8_donusturucu.array[3] = byte_array_u8[0];
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	73fb      	strb	r3, [r7, #15]
    return float32_uint8_donusturucu.sayi;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	ee07 3a90 	vmov	s15, r3
}
 800563a:	eeb0 0a67 	vmov.f32	s0, s15
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <ekf_predict>:
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++)
            P[i][j] = (i == j) ? 1e-3f : 0.0f;
}

void ekf_predict(float gx, float gy, float gz, float dt) {
 8005648:	b580      	push	{r7, lr}
 800564a:	b09e      	sub	sp, #120	@ 0x78
 800564c:	af00      	add	r7, sp, #0
 800564e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005652:	edc7 0a02 	vstr	s1, [r7, #8]
 8005656:	ed87 1a01 	vstr	s2, [r7, #4]
 800565a:	edc7 1a00 	vstr	s3, [r7]

    // Gyro'dan omega matrisi
    float Omega[4][4] = {
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	623b      	str	r3, [r7, #32]
        {0, -gx, -gy, -gz},
 8005664:	edd7 7a03 	vldr	s15, [r7, #12]
 8005668:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 800566c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        {0, -gx, -gy, -gz},
 8005670:	edd7 7a02 	vldr	s15, [r7, #8]
 8005674:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005678:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        {0, -gx, -gy, -gz},
 800567c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005680:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005684:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	633b      	str	r3, [r7, #48]	@ 0x30
 800568c:	f04f 0300 	mov.w	r3, #0
 8005690:	637b      	str	r3, [r7, #52]	@ 0x34
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	63bb      	str	r3, [r7, #56]	@ 0x38
        {gx,  0,  gz, -gy},
 8005696:	edd7 7a02 	vldr	s15, [r7, #8]
 800569a:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 800569e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	643b      	str	r3, [r7, #64]	@ 0x40
        {gy, -gz,  0,  gx},
 80056a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80056aa:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 80056ae:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 80056b2:	f04f 0300 	mov.w	r3, #0
 80056b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	653b      	str	r3, [r7, #80]	@ 0x50
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	657b      	str	r3, [r7, #84]	@ 0x54
        {gz,  gy, -gx,  0}
 80056c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80056c8:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 80056cc:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 80056d0:	f04f 0300 	mov.w	r3, #0
 80056d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    };

    // dq = 0.5 * Omega * q
    float dq[4] = {0};
 80056d6:	f107 0310 	add.w	r3, r7, #16
 80056da:	2200      	movs	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	605a      	str	r2, [r3, #4]
 80056e0:	609a      	str	r2, [r3, #8]
 80056e2:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < 4; i++) {
 80056e4:	2300      	movs	r3, #0
 80056e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80056e8:	e043      	b.n	8005772 <ekf_predict+0x12a>
        for (int j = 0; j < 4; j++) {
 80056ea:	2300      	movs	r3, #0
 80056ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80056ee:	e024      	b.n	800573a <ekf_predict+0xf2>
            dq[i] += Omega[i][j] * q[j];
 80056f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	3378      	adds	r3, #120	@ 0x78
 80056f6:	443b      	add	r3, r7
 80056f8:	3b68      	subs	r3, #104	@ 0x68
 80056fa:	ed93 7a00 	vldr	s14, [r3]
 80056fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005700:	009a      	lsls	r2, r3, #2
 8005702:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005704:	4413      	add	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	3378      	adds	r3, #120	@ 0x78
 800570a:	443b      	add	r3, r7
 800570c:	3b58      	subs	r3, #88	@ 0x58
 800570e:	edd3 6a00 	vldr	s13, [r3]
 8005712:	4a5d      	ldr	r2, [pc, #372]	@ (8005888 <ekf_predict+0x240>)
 8005714:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	edd3 7a00 	vldr	s15, [r3]
 800571e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005726:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	3378      	adds	r3, #120	@ 0x78
 800572c:	443b      	add	r3, r7
 800572e:	3b68      	subs	r3, #104	@ 0x68
 8005730:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 4; j++) {
 8005734:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005736:	3301      	adds	r3, #1
 8005738:	673b      	str	r3, [r7, #112]	@ 0x70
 800573a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800573c:	2b03      	cmp	r3, #3
 800573e:	ddd7      	ble.n	80056f0 <ekf_predict+0xa8>
        }
        dq[i] *= 0.5f * dt;
 8005740:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	3378      	adds	r3, #120	@ 0x78
 8005746:	443b      	add	r3, r7
 8005748:	3b68      	subs	r3, #104	@ 0x68
 800574a:	ed93 7a00 	vldr	s14, [r3]
 800574e:	edd7 7a00 	vldr	s15, [r7]
 8005752:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8005756:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800575a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	3378      	adds	r3, #120	@ 0x78
 8005764:	443b      	add	r3, r7
 8005766:	3b68      	subs	r3, #104	@ 0x68
 8005768:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 800576c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800576e:	3301      	adds	r3, #1
 8005770:	677b      	str	r3, [r7, #116]	@ 0x74
 8005772:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005774:	2b03      	cmp	r3, #3
 8005776:	ddb8      	ble.n	80056ea <ekf_predict+0xa2>
    }

    // q = q + dq
    for (int i = 0; i < 4; i++)
 8005778:	2300      	movs	r3, #0
 800577a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800577c:	e017      	b.n	80057ae <ekf_predict+0x166>
        q[i] += dq[i];
 800577e:	4a42      	ldr	r2, [pc, #264]	@ (8005888 <ekf_predict+0x240>)
 8005780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	ed93 7a00 	vldr	s14, [r3]
 800578a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	3378      	adds	r3, #120	@ 0x78
 8005790:	443b      	add	r3, r7
 8005792:	3b68      	subs	r3, #104	@ 0x68
 8005794:	edd3 7a00 	vldr	s15, [r3]
 8005798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800579c:	4a3a      	ldr	r2, [pc, #232]	@ (8005888 <ekf_predict+0x240>)
 800579e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 80057a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057aa:	3301      	adds	r3, #1
 80057ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	dde4      	ble.n	800577e <ekf_predict+0x136>

    // Normalize
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 80057b4:	4b34      	ldr	r3, [pc, #208]	@ (8005888 <ekf_predict+0x240>)
 80057b6:	ed93 7a00 	vldr	s14, [r3]
 80057ba:	4b33      	ldr	r3, [pc, #204]	@ (8005888 <ekf_predict+0x240>)
 80057bc:	edd3 7a00 	vldr	s15, [r3]
 80057c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057c4:	4b30      	ldr	r3, [pc, #192]	@ (8005888 <ekf_predict+0x240>)
 80057c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80057ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005888 <ekf_predict+0x240>)
 80057cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80057d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057d8:	4b2b      	ldr	r3, [pc, #172]	@ (8005888 <ekf_predict+0x240>)
 80057da:	edd3 6a02 	vldr	s13, [r3, #8]
 80057de:	4b2a      	ldr	r3, [pc, #168]	@ (8005888 <ekf_predict+0x240>)
 80057e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80057e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057ec:	4b26      	ldr	r3, [pc, #152]	@ (8005888 <ekf_predict+0x240>)
 80057ee:	edd3 6a03 	vldr	s13, [r3, #12]
 80057f2:	4b25      	ldr	r3, [pc, #148]	@ (8005888 <ekf_predict+0x240>)
 80057f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80057f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005800:	eeb0 0a67 	vmov.f32	s0, s15
 8005804:	f00a fd1e 	bl	8010244 <sqrtf>
 8005808:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
    for (int i = 0; i < 4; i++)
 800580c:	2300      	movs	r3, #0
 800580e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005810:	e012      	b.n	8005838 <ekf_predict+0x1f0>
        q[i] /= norm;
 8005812:	4a1d      	ldr	r2, [pc, #116]	@ (8005888 <ekf_predict+0x240>)
 8005814:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	edd3 6a00 	vldr	s13, [r3]
 800581e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8005822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005826:	4a18      	ldr	r2, [pc, #96]	@ (8005888 <ekf_predict+0x240>)
 8005828:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8005832:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005834:	3301      	adds	r3, #1
 8005836:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005838:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800583a:	2b03      	cmp	r3, #3
 800583c:	dde9      	ble.n	8005812 <ekf_predict+0x1ca>

    // P = P + Q
    for (int i = 0; i < 4; i++)
 800583e:	2300      	movs	r3, #0
 8005840:	667b      	str	r3, [r7, #100]	@ 0x64
 8005842:	e018      	b.n	8005876 <ekf_predict+0x22e>
        P[i][i] += Q_val;
 8005844:	4911      	ldr	r1, [pc, #68]	@ (800588c <ekf_predict+0x244>)
 8005846:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	edd3 7a00 	vldr	s15, [r3]
 8005856:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005890 <ekf_predict+0x248>
 800585a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800585e:	490b      	ldr	r1, [pc, #44]	@ (800588c <ekf_predict+0x244>)
 8005860:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	440b      	add	r3, r1
 800586c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8005870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005872:	3301      	adds	r3, #1
 8005874:	667b      	str	r3, [r7, #100]	@ 0x64
 8005876:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005878:	2b03      	cmp	r3, #3
 800587a:	dde3      	ble.n	8005844 <ekf_predict+0x1fc>
}
 800587c:	bf00      	nop
 800587e:	bf00      	nop
 8005880:	3778      	adds	r7, #120	@ 0x78
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	20000018 	.word	0x20000018
 800588c:	20000814 	.word	0x20000814
 8005890:	3727c5ac 	.word	0x3727c5ac

08005894 <quaternionToYaw1>:

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
    return acosf(safeValue) * (180.0f / 3.14f);
}

float quaternionToYaw1(){
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 800589a:	4b2a      	ldr	r3, [pc, #168]	@ (8005944 <quaternionToYaw1+0xb0>)
 800589c:	ed93 7a01 	vldr	s14, [r3, #4]
 80058a0:	4b28      	ldr	r3, [pc, #160]	@ (8005944 <quaternionToYaw1+0xb0>)
 80058a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80058a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058aa:	4b26      	ldr	r3, [pc, #152]	@ (8005944 <quaternionToYaw1+0xb0>)
 80058ac:	edd3 6a00 	vldr	s13, [r3]
 80058b0:	4b24      	ldr	r3, [pc, #144]	@ (8005944 <quaternionToYaw1+0xb0>)
 80058b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80058b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058be:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80058c2:	4b20      	ldr	r3, [pc, #128]	@ (8005944 <quaternionToYaw1+0xb0>)
 80058c4:	ed93 7a00 	vldr	s14, [r3]
 80058c8:	4b1e      	ldr	r3, [pc, #120]	@ (8005944 <quaternionToYaw1+0xb0>)
 80058ca:	edd3 7a00 	vldr	s15, [r3]
 80058ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058d2:	4b1c      	ldr	r3, [pc, #112]	@ (8005944 <quaternionToYaw1+0xb0>)
 80058d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80058d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005944 <quaternionToYaw1+0xb0>)
 80058da:	edd3 7a01 	vldr	s15, [r3, #4]
 80058de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058e6:	4b17      	ldr	r3, [pc, #92]	@ (8005944 <quaternionToYaw1+0xb0>)
 80058e8:	edd3 6a02 	vldr	s13, [r3, #8]
 80058ec:	4b15      	ldr	r3, [pc, #84]	@ (8005944 <quaternionToYaw1+0xb0>)
 80058ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80058f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80058fa:	4b12      	ldr	r3, [pc, #72]	@ (8005944 <quaternionToYaw1+0xb0>)
 80058fc:	edd3 6a03 	vldr	s13, [r3, #12]
 8005900:	4b10      	ldr	r3, [pc, #64]	@ (8005944 <quaternionToYaw1+0xb0>)
 8005902:	edd3 7a03 	vldr	s15, [r3, #12]
 8005906:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800590a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800590e:	eef0 0a67 	vmov.f32	s1, s15
 8005912:	eeb0 0a46 	vmov.f32	s0, s12
 8005916:	f00a fc93 	bl	8010240 <atan2f>
 800591a:	eef0 7a40 	vmov.f32	s15, s0
 800591e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005948 <quaternionToYaw1+0xb4>
 8005922:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005926:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800594c <quaternionToYaw1+0xb8>
 800592a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800592e:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	ee07 3a90 	vmov	s15, r3
}
 8005938:	eeb0 0a67 	vmov.f32	s0, s15
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20000018 	.word	0x20000018
 8005948:	43340000 	.word	0x43340000
 800594c:	40490fd0 	.word	0x40490fd0

08005950 <quaternionToPitch1>:

float quaternionToPitch1(){
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 8005956:	4b17      	ldr	r3, [pc, #92]	@ (80059b4 <quaternionToPitch1+0x64>)
 8005958:	ed93 7a01 	vldr	s14, [r3, #4]
 800595c:	4b15      	ldr	r3, [pc, #84]	@ (80059b4 <quaternionToPitch1+0x64>)
 800595e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005962:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005966:	4b13      	ldr	r3, [pc, #76]	@ (80059b4 <quaternionToPitch1+0x64>)
 8005968:	edd3 6a00 	vldr	s13, [r3]
 800596c:	4b11      	ldr	r3, [pc, #68]	@ (80059b4 <quaternionToPitch1+0x64>)
 800596e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800597a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800597e:	eeb0 0a67 	vmov.f32	s0, s15
 8005982:	f00a fc31 	bl	80101e8 <asinf>
 8005986:	eef0 7a40 	vmov.f32	s15, s0
 800598a:	eef1 7a67 	vneg.f32	s15, s15
 800598e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80059b8 <quaternionToPitch1+0x68>
 8005992:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005996:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80059bc <quaternionToPitch1+0x6c>
 800599a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800599e:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	ee07 3a90 	vmov	s15, r3
}
 80059a8:	eeb0 0a67 	vmov.f32	s0, s15
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20000018 	.word	0x20000018
 80059b8:	43340000 	.word	0x43340000
 80059bc:	40490fd0 	.word	0x40490fd0

080059c0 <quaternionToRoll1>:

float quaternionToRoll1(){
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 80059c6:	4b2a      	ldr	r3, [pc, #168]	@ (8005a70 <quaternionToRoll1+0xb0>)
 80059c8:	ed93 7a00 	vldr	s14, [r3]
 80059cc:	4b28      	ldr	r3, [pc, #160]	@ (8005a70 <quaternionToRoll1+0xb0>)
 80059ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80059d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059d6:	4b26      	ldr	r3, [pc, #152]	@ (8005a70 <quaternionToRoll1+0xb0>)
 80059d8:	edd3 6a02 	vldr	s13, [r3, #8]
 80059dc:	4b24      	ldr	r3, [pc, #144]	@ (8005a70 <quaternionToRoll1+0xb0>)
 80059de:	edd3 7a03 	vldr	s15, [r3, #12]
 80059e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059ea:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80059ee:	4b20      	ldr	r3, [pc, #128]	@ (8005a70 <quaternionToRoll1+0xb0>)
 80059f0:	ed93 7a00 	vldr	s14, [r3]
 80059f4:	4b1e      	ldr	r3, [pc, #120]	@ (8005a70 <quaternionToRoll1+0xb0>)
 80059f6:	edd3 7a00 	vldr	s15, [r3]
 80059fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059fe:	4b1c      	ldr	r3, [pc, #112]	@ (8005a70 <quaternionToRoll1+0xb0>)
 8005a00:	edd3 6a01 	vldr	s13, [r3, #4]
 8005a04:	4b1a      	ldr	r3, [pc, #104]	@ (8005a70 <quaternionToRoll1+0xb0>)
 8005a06:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a12:	4b17      	ldr	r3, [pc, #92]	@ (8005a70 <quaternionToRoll1+0xb0>)
 8005a14:	edd3 6a02 	vldr	s13, [r3, #8]
 8005a18:	4b15      	ldr	r3, [pc, #84]	@ (8005a70 <quaternionToRoll1+0xb0>)
 8005a1a:	edd3 7a02 	vldr	s15, [r3, #8]
 8005a1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a26:	4b12      	ldr	r3, [pc, #72]	@ (8005a70 <quaternionToRoll1+0xb0>)
 8005a28:	edd3 6a03 	vldr	s13, [r3, #12]
 8005a2c:	4b10      	ldr	r3, [pc, #64]	@ (8005a70 <quaternionToRoll1+0xb0>)
 8005a2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a3a:	eef0 0a67 	vmov.f32	s1, s15
 8005a3e:	eeb0 0a46 	vmov.f32	s0, s12
 8005a42:	f00a fbfd 	bl	8010240 <atan2f>
 8005a46:	eef0 7a40 	vmov.f32	s15, s0
 8005a4a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005a74 <quaternionToRoll1+0xb4>
 8005a4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005a52:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005a78 <quaternionToRoll1+0xb8>
 8005a56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a5a:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	ee07 3a90 	vmov	s15, r3
}
 8005a64:	eeb0 0a67 	vmov.f32	s0, s15
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000018 	.word	0x20000018
 8005a74:	43340000 	.word	0x43340000
 8005a78:	40490fd0 	.word	0x40490fd0

08005a7c <quaternionToYawDegree1>:

float quaternionToYawDegree1(){
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 8005a82:	4b20      	ldr	r3, [pc, #128]	@ (8005b04 <quaternionToYawDegree1+0x88>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	4b1e      	ldr	r3, [pc, #120]	@ (8005b04 <quaternionToYawDegree1+0x88>)
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	613b      	str	r3, [r7, #16]
 8005a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8005b04 <quaternionToYawDegree1+0x88>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	4b1b      	ldr	r3, [pc, #108]	@ (8005b04 <quaternionToYawDegree1+0x88>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	60bb      	str	r3, [r7, #8]
    float siny_cosp = 2.0f * (w * z + x * y);
 8005a9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8005a9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005aa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005aa6:	edd7 6a04 	vldr	s13, [r7, #16]
 8005aaa:	edd7 7a03 	vldr	s15, [r7, #12]
 8005aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ab6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005aba:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
 8005abe:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ac2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005ac6:	edd7 7a02 	vldr	s15, [r7, #8]
 8005aca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ad2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ad6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ada:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ade:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
 8005ae2:	edd7 0a00 	vldr	s1, [r7]
 8005ae6:	ed97 0a01 	vldr	s0, [r7, #4]
 8005aea:	f00a fba9 	bl	8010240 <atan2f>
 8005aee:	eef0 7a40 	vmov.f32	s15, s0
 8005af2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005b08 <quaternionToYawDegree1+0x8c>
 8005af6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005afa:	eeb0 0a67 	vmov.f32	s0, s15
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20000018 	.word	0x20000018
 8005b08:	42652ee0 	.word	0x42652ee0

08005b0c <UpdateMahonyGains>:

uint8_t Gain = 0;
uint8_t gyroOnlyMode = 0;


void UpdateMahonyGains(float ax, float ay, float az) {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08c      	sub	sp, #48	@ 0x30
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	ed87 0a03 	vstr	s0, [r7, #12]
 8005b16:	edc7 0a02 	vstr	s1, [r7, #8]
 8005b1a:	ed87 1a01 	vstr	s2, [r7, #4]
    // Quaternion normalize edilmemişse gravity yön tahmini hatalı olur
    float norm_q = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8005b1e:	4bd5      	ldr	r3, [pc, #852]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005b20:	ed93 7a00 	vldr	s14, [r3]
 8005b24:	4bd3      	ldr	r3, [pc, #844]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005b26:	edd3 7a00 	vldr	s15, [r3]
 8005b2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b2e:	4bd1      	ldr	r3, [pc, #836]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005b30:	edd3 6a01 	vldr	s13, [r3, #4]
 8005b34:	4bcf      	ldr	r3, [pc, #828]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005b36:	edd3 7a01 	vldr	s15, [r3, #4]
 8005b3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b42:	4bcc      	ldr	r3, [pc, #816]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005b44:	edd3 6a02 	vldr	s13, [r3, #8]
 8005b48:	4bca      	ldr	r3, [pc, #808]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005b4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8005b4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b56:	4bc7      	ldr	r3, [pc, #796]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005b58:	edd3 6a03 	vldr	s13, [r3, #12]
 8005b5c:	4bc5      	ldr	r3, [pc, #788]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005b5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8005b6e:	f00a fb69 	bl	8010244 <sqrtf>
 8005b72:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    if (norm_q == 0.0f) return; // Koruma
 8005b76:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005b7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b82:	f000 8172 	beq.w	8005e6a <UpdateMahonyGains+0x35e>
    q[0] /= norm_q;
 8005b86:	4bbb      	ldr	r3, [pc, #748]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005b88:	edd3 6a00 	vldr	s13, [r3]
 8005b8c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b94:	4bb7      	ldr	r3, [pc, #732]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005b96:	edc3 7a00 	vstr	s15, [r3]
    q[1] /= norm_q;
 8005b9a:	4bb6      	ldr	r3, [pc, #728]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005b9c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005ba0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ba8:	4bb2      	ldr	r3, [pc, #712]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005baa:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] /= norm_q;
 8005bae:	4bb1      	ldr	r3, [pc, #708]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005bb0:	edd3 6a02 	vldr	s13, [r3, #8]
 8005bb4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005bb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bbc:	4bad      	ldr	r3, [pc, #692]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005bbe:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] /= norm_q;
 8005bc2:	4bac      	ldr	r3, [pc, #688]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005bc4:	edd3 6a03 	vldr	s13, [r3, #12]
 8005bc8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bd0:	4ba8      	ldr	r3, [pc, #672]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005bd2:	edc3 7a03 	vstr	s15, [r3, #12]

    // Gravity yön vektörü (tam vektör formu)
    float gx = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 8005bd6:	4ba7      	ldr	r3, [pc, #668]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005bd8:	ed93 7a01 	vldr	s14, [r3, #4]
 8005bdc:	4ba5      	ldr	r3, [pc, #660]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005bde:	edd3 7a03 	vldr	s15, [r3, #12]
 8005be2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005be6:	4ba3      	ldr	r3, [pc, #652]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005be8:	edd3 6a00 	vldr	s13, [r3]
 8005bec:	4ba1      	ldr	r3, [pc, #644]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005bee:	edd3 7a02 	vldr	s15, [r3, #8]
 8005bf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bfa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005bfe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 8005c02:	4b9c      	ldr	r3, [pc, #624]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005c04:	ed93 7a00 	vldr	s14, [r3]
 8005c08:	4b9a      	ldr	r3, [pc, #616]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005c0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c12:	4b98      	ldr	r3, [pc, #608]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005c14:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c18:	4b96      	ldr	r3, [pc, #600]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005c1a:	edd3 7a03 	vldr	s15, [r3, #12]
 8005c1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c26:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005c2a:	edc7 7a08 	vstr	s15, [r7, #32]
    float gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 8005c2e:	4b91      	ldr	r3, [pc, #580]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005c30:	ed93 7a00 	vldr	s14, [r3]
 8005c34:	4b8f      	ldr	r3, [pc, #572]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005c36:	edd3 7a00 	vldr	s15, [r3]
 8005c3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c3e:	4b8d      	ldr	r3, [pc, #564]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005c40:	edd3 6a01 	vldr	s13, [r3, #4]
 8005c44:	4b8b      	ldr	r3, [pc, #556]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005c46:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c52:	4b88      	ldr	r3, [pc, #544]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005c54:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c58:	4b86      	ldr	r3, [pc, #536]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005c5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8005c5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c66:	4b83      	ldr	r3, [pc, #524]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005c68:	edd3 6a03 	vldr	s13, [r3, #12]
 8005c6c:	4b81      	ldr	r3, [pc, #516]	@ (8005e74 <UpdateMahonyGains+0x368>)
 8005c6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005c72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c7a:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalize gravity tahmini
    float recipNormG = invSqrt(gx * gx + gy * gy + gz * gz);
 8005c7e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005c82:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005c86:	edd7 7a08 	vldr	s15, [r7, #32]
 8005c8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005c8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c92:	edd7 7a07 	vldr	s15, [r7, #28]
 8005c96:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8005ca2:	f001 f8cb 	bl	8006e3c <invSqrt>
 8005ca6:	ed87 0a06 	vstr	s0, [r7, #24]
    gx *= recipNormG;
 8005caa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005cae:	edd7 7a06 	vldr	s15, [r7, #24]
 8005cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy *= recipNormG;
 8005cba:	ed97 7a08 	vldr	s14, [r7, #32]
 8005cbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8005cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc6:	edc7 7a08 	vstr	s15, [r7, #32]
    gz *= recipNormG;
 8005cca:	ed97 7a07 	vldr	s14, [r7, #28]
 8005cce:	edd7 7a06 	vldr	s15, [r7, #24]
 8005cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd6:	edc7 7a07 	vstr	s15, [r7, #28]

    // İvmeölçer zaten normalize edilmiş olarak gelmeli (gelmiyorsa normalize et!)
    float recipNormA = invSqrt(ax * ax + ay * ay + az * az);
 8005cda:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cde:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005ce2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ce6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005cea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cee:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cf2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8005cfe:	f001 f89d 	bl	8006e3c <invSqrt>
 8005d02:	ed87 0a05 	vstr	s0, [r7, #20]
    ax *= recipNormA;
 8005d06:	ed97 7a03 	vldr	s14, [r7, #12]
 8005d0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d12:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNormA;
 8005d16:	ed97 7a02 	vldr	s14, [r7, #8]
 8005d1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d22:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNormA;
 8005d26:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d32:	edc7 7a01 	vstr	s15, [r7, #4]

    // Dot product
    float dot = ax * gx + ay * gy + az * gz;
 8005d36:	ed97 7a03 	vldr	s14, [r7, #12]
 8005d3a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005d3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d42:	edd7 6a02 	vldr	s13, [r7, #8]
 8005d46:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d52:	edd7 6a01 	vldr	s13, [r7, #4]
 8005d56:	edd7 7a07 	vldr	s15, [r7, #28]
 8005d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d62:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dot > 1.0f) dot = 1.0f;
 8005d66:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005d6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d76:	dd02      	ble.n	8005d7e <UpdateMahonyGains+0x272>
 8005d78:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dot < -1.0f) dot = -1.0f;
 8005d7e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005d82:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005d86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d8e:	d501      	bpl.n	8005d94 <UpdateMahonyGains+0x288>
 8005d90:	4b39      	ldr	r3, [pc, #228]	@ (8005e78 <UpdateMahonyGains+0x36c>)
 8005d92:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Açı farkı (derece)
    float accErrorAngle = acosf(dot) * (180.0f / 3.1415926f);
 8005d94:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8005d98:	f00a f9fa 	bl	8010190 <acosf>
 8005d9c:	eef0 7a40 	vmov.f32	s15, s0
 8005da0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005e7c <UpdateMahonyGains+0x370>
 8005da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005da8:	edc7 7a04 	vstr	s15, [r7, #16]

    // Duruma göre kazanç ayarla
    if (accErrorAngle > 30.0f) {
 8005dac:	edd7 7a04 	vldr	s15, [r7, #16]
 8005db0:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8005db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dbc:	dd0a      	ble.n	8005dd4 <UpdateMahonyGains+0x2c8>
        Gain = 1;
 8005dbe:	4b30      	ldr	r3, [pc, #192]	@ (8005e80 <UpdateMahonyGains+0x374>)
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	701a      	strb	r2, [r3, #0]
        twoKp = 0.2f;
 8005dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8005e84 <UpdateMahonyGains+0x378>)
 8005dc6:	4a30      	ldr	r2, [pc, #192]	@ (8005e88 <UpdateMahonyGains+0x37c>)
 8005dc8:	601a      	str	r2, [r3, #0]
        twoKi = 0.0f;
 8005dca:	4b30      	ldr	r3, [pc, #192]	@ (8005e8c <UpdateMahonyGains+0x380>)
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	e01d      	b.n	8005e10 <UpdateMahonyGains+0x304>
    } else if (accErrorAngle > 10.0f) {
 8005dd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8005dd8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de4:	dd0a      	ble.n	8005dfc <UpdateMahonyGains+0x2f0>
        Gain = 2;
 8005de6:	4b26      	ldr	r3, [pc, #152]	@ (8005e80 <UpdateMahonyGains+0x374>)
 8005de8:	2202      	movs	r2, #2
 8005dea:	701a      	strb	r2, [r3, #0]
        twoKp = 2.0f;
 8005dec:	4b25      	ldr	r3, [pc, #148]	@ (8005e84 <UpdateMahonyGains+0x378>)
 8005dee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005df2:	601a      	str	r2, [r3, #0]
        twoKi = 0.01f;
 8005df4:	4b25      	ldr	r3, [pc, #148]	@ (8005e8c <UpdateMahonyGains+0x380>)
 8005df6:	4a26      	ldr	r2, [pc, #152]	@ (8005e90 <UpdateMahonyGains+0x384>)
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	e009      	b.n	8005e10 <UpdateMahonyGains+0x304>
    } else {
        Gain = 3;
 8005dfc:	4b20      	ldr	r3, [pc, #128]	@ (8005e80 <UpdateMahonyGains+0x374>)
 8005dfe:	2203      	movs	r2, #3
 8005e00:	701a      	strb	r2, [r3, #0]
        twoKp = 8.0f;
 8005e02:	4b20      	ldr	r3, [pc, #128]	@ (8005e84 <UpdateMahonyGains+0x378>)
 8005e04:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8005e08:	601a      	str	r2, [r3, #0]
        twoKi = 0.05f;
 8005e0a:	4b20      	ldr	r3, [pc, #128]	@ (8005e8c <UpdateMahonyGains+0x380>)
 8005e0c:	4a21      	ldr	r2, [pc, #132]	@ (8005e94 <UpdateMahonyGains+0x388>)
 8005e0e:	601a      	str	r2, [r3, #0]
    }

    // Güvenlik: kazanç sınırla (opsiyonel ama önerilir)
    twoKp = fmaxf(TWO_KP_MIN, fminf(twoKp, TWO_KP_MAX));
 8005e10:	4b1c      	ldr	r3, [pc, #112]	@ (8005e84 <UpdateMahonyGains+0x378>)
 8005e12:	edd3 7a00 	vldr	s15, [r3]
 8005e16:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 8005e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e1e:	f00a fa64 	bl	80102ea <fminf>
 8005e22:	eef0 7a40 	vmov.f32	s15, s0
 8005e26:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8005e98 <UpdateMahonyGains+0x38c>
 8005e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e2e:	f00a fa3f 	bl	80102b0 <fmaxf>
 8005e32:	eef0 7a40 	vmov.f32	s15, s0
 8005e36:	4b13      	ldr	r3, [pc, #76]	@ (8005e84 <UpdateMahonyGains+0x378>)
 8005e38:	edc3 7a00 	vstr	s15, [r3]
    twoKi = fmaxf(TWO_KI_MIN, fminf(twoKi, TWO_KI_MAX));
 8005e3c:	4b13      	ldr	r3, [pc, #76]	@ (8005e8c <UpdateMahonyGains+0x380>)
 8005e3e:	edd3 7a00 	vldr	s15, [r3]
 8005e42:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8005e9c <UpdateMahonyGains+0x390>
 8005e46:	eeb0 0a67 	vmov.f32	s0, s15
 8005e4a:	f00a fa4e 	bl	80102ea <fminf>
 8005e4e:	eef0 7a40 	vmov.f32	s15, s0
 8005e52:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8005ea0 <UpdateMahonyGains+0x394>
 8005e56:	eeb0 0a67 	vmov.f32	s0, s15
 8005e5a:	f00a fa29 	bl	80102b0 <fmaxf>
 8005e5e:	eef0 7a40 	vmov.f32	s15, s0
 8005e62:	4b0a      	ldr	r3, [pc, #40]	@ (8005e8c <UpdateMahonyGains+0x380>)
 8005e64:	edc3 7a00 	vstr	s15, [r3]
 8005e68:	e000      	b.n	8005e6c <UpdateMahonyGains+0x360>
    if (norm_q == 0.0f) return; // Koruma
 8005e6a:	bf00      	nop
}
 8005e6c:	3730      	adds	r7, #48	@ 0x30
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000028 	.word	0x20000028
 8005e78:	bf800000 	.word	0xbf800000
 8005e7c:	42652ee2 	.word	0x42652ee2
 8005e80:	20000860 	.word	0x20000860
 8005e84:	20000038 	.word	0x20000038
 8005e88:	3e4ccccd 	.word	0x3e4ccccd
 8005e8c:	2000003c 	.word	0x2000003c
 8005e90:	3c23d70a 	.word	0x3c23d70a
 8005e94:	3d4ccccd 	.word	0x3d4ccccd
 8005e98:	3dcccccd 	.word	0x3dcccccd
 8005e9c:	3d4ccccd 	.word	0x3d4ccccd
 8005ea0:	00000000 	.word	0x00000000

08005ea4 <Orientation_Update>:





void Orientation_Update(float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b08a      	sub	sp, #40	@ 0x28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	ed87 0a07 	vstr	s0, [r7, #28]
 8005eae:	edc7 0a06 	vstr	s1, [r7, #24]
 8005eb2:	ed87 1a05 	vstr	s2, [r7, #20]
 8005eb6:	edc7 1a04 	vstr	s3, [r7, #16]
 8005eba:	ed87 2a03 	vstr	s4, [r7, #12]
 8005ebe:	edc7 2a02 	vstr	s5, [r7, #8]
 8005ec2:	ed87 3a01 	vstr	s6, [r7, #4]
	static float ax_f = 0, ay_f = 0, az_f = 0;
    const float alpha = 0.3f;
 8005ec6:	4b60      	ldr	r3, [pc, #384]	@ (8006048 <Orientation_Update+0x1a4>)
 8005ec8:	627b      	str	r3, [r7, #36]	@ 0x24

    // LPF filtre
    ax_f = alpha * ax + (1.0f - alpha) * ax_f;
 8005eca:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005ece:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ed2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ed6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eda:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005ede:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005ee2:	4b5a      	ldr	r3, [pc, #360]	@ (800604c <Orientation_Update+0x1a8>)
 8005ee4:	edd3 7a00 	vldr	s15, [r3]
 8005ee8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ef0:	4b56      	ldr	r3, [pc, #344]	@ (800604c <Orientation_Update+0x1a8>)
 8005ef2:	edc3 7a00 	vstr	s15, [r3]
    ay_f = alpha * ay + (1.0f - alpha) * ay_f;
 8005ef6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005efa:	edd7 7a03 	vldr	s15, [r7, #12]
 8005efe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f06:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005f0a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005f0e:	4b50      	ldr	r3, [pc, #320]	@ (8006050 <Orientation_Update+0x1ac>)
 8005f10:	edd3 7a00 	vldr	s15, [r3]
 8005f14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f1c:	4b4c      	ldr	r3, [pc, #304]	@ (8006050 <Orientation_Update+0x1ac>)
 8005f1e:	edc3 7a00 	vstr	s15, [r3]
    az_f = alpha * az + (1.0f - alpha) * az_f;
 8005f22:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005f26:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f32:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005f36:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005f3a:	4b46      	ldr	r3, [pc, #280]	@ (8006054 <Orientation_Update+0x1b0>)
 8005f3c:	edd3 7a00 	vldr	s15, [r3]
 8005f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f48:	4b42      	ldr	r3, [pc, #264]	@ (8006054 <Orientation_Update+0x1b0>)
 8005f4a:	edc3 7a00 	vstr	s15, [r3]

    // Kazançları güncelle
    UpdateMahonyGains(ax_f, ay_f, az_f);
 8005f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800604c <Orientation_Update+0x1a8>)
 8005f50:	edd3 7a00 	vldr	s15, [r3]
 8005f54:	4b3e      	ldr	r3, [pc, #248]	@ (8006050 <Orientation_Update+0x1ac>)
 8005f56:	ed93 7a00 	vldr	s14, [r3]
 8005f5a:	4b3e      	ldr	r3, [pc, #248]	@ (8006054 <Orientation_Update+0x1b0>)
 8005f5c:	edd3 6a00 	vldr	s13, [r3]
 8005f60:	eeb0 1a66 	vmov.f32	s2, s13
 8005f64:	eef0 0a47 	vmov.f32	s1, s14
 8005f68:	eeb0 0a67 	vmov.f32	s0, s15
 8005f6c:	f7ff fdce 	bl	8005b0c <UpdateMahonyGains>

    // Acc magnitude
    float accMag = sqrtf(ax_f*ax_f + ay_f*ay_f + az_f*az_f);
 8005f70:	4b36      	ldr	r3, [pc, #216]	@ (800604c <Orientation_Update+0x1a8>)
 8005f72:	ed93 7a00 	vldr	s14, [r3]
 8005f76:	4b35      	ldr	r3, [pc, #212]	@ (800604c <Orientation_Update+0x1a8>)
 8005f78:	edd3 7a00 	vldr	s15, [r3]
 8005f7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f80:	4b33      	ldr	r3, [pc, #204]	@ (8006050 <Orientation_Update+0x1ac>)
 8005f82:	edd3 6a00 	vldr	s13, [r3]
 8005f86:	4b32      	ldr	r3, [pc, #200]	@ (8006050 <Orientation_Update+0x1ac>)
 8005f88:	edd3 7a00 	vldr	s15, [r3]
 8005f8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f94:	4b2f      	ldr	r3, [pc, #188]	@ (8006054 <Orientation_Update+0x1b0>)
 8005f96:	edd3 6a00 	vldr	s13, [r3]
 8005f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8006054 <Orientation_Update+0x1b0>)
 8005f9c:	edd3 7a00 	vldr	s15, [r3]
 8005fa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8005fac:	f00a f94a 	bl	8010244 <sqrtf>
 8005fb0:	ed87 0a08 	vstr	s0, [r7, #32]

    if (gyroOnlyMode) {
 8005fb4:	4b28      	ldr	r3, [pc, #160]	@ (8006058 <Orientation_Update+0x1b4>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00c      	beq.n	8005fd6 <Orientation_Update+0x132>
            if (accMag < ACC_THRESHOLD_LOW)
 8005fbc:	edd7 7a08 	vldr	s15, [r7, #32]
 8005fc0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800605c <Orientation_Update+0x1b8>
 8005fc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fcc:	d50f      	bpl.n	8005fee <Orientation_Update+0x14a>
                gyroOnlyMode = 0;
 8005fce:	4b22      	ldr	r3, [pc, #136]	@ (8006058 <Orientation_Update+0x1b4>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	701a      	strb	r2, [r3, #0]
 8005fd4:	e00b      	b.n	8005fee <Orientation_Update+0x14a>
	} else {
		if (accMag > ACC_THRESHOLD_HIGH)
 8005fd6:	edd7 7a08 	vldr	s15, [r7, #32]
 8005fda:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8006060 <Orientation_Update+0x1bc>
 8005fde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fe6:	dd02      	ble.n	8005fee <Orientation_Update+0x14a>
			gyroOnlyMode = 1;
 8005fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8006058 <Orientation_Update+0x1b4>)
 8005fea:	2201      	movs	r2, #1
 8005fec:	701a      	strb	r2, [r3, #0]
	}



    // Filtre çağrısı
    if (gyroOnlyMode)
 8005fee:	4b1a      	ldr	r3, [pc, #104]	@ (8006058 <Orientation_Update+0x1b4>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <Orientation_Update+0x168>
        updateQuaternion(gx, gy, gz, dt);
 8005ff6:	edd7 1a01 	vldr	s3, [r7, #4]
 8005ffa:	ed97 1a05 	vldr	s2, [r7, #20]
 8005ffe:	edd7 0a06 	vldr	s1, [r7, #24]
 8006002:	ed97 0a07 	vldr	s0, [r7, #28]
 8006006:	f000 f82d 	bl	8006064 <updateQuaternion>
    else
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
}
 800600a:	e018      	b.n	800603e <Orientation_Update+0x19a>
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
 800600c:	4b0f      	ldr	r3, [pc, #60]	@ (800604c <Orientation_Update+0x1a8>)
 800600e:	edd3 7a00 	vldr	s15, [r3]
 8006012:	4b0f      	ldr	r3, [pc, #60]	@ (8006050 <Orientation_Update+0x1ac>)
 8006014:	ed93 7a00 	vldr	s14, [r3]
 8006018:	4b0e      	ldr	r3, [pc, #56]	@ (8006054 <Orientation_Update+0x1b0>)
 800601a:	edd3 6a00 	vldr	s13, [r3]
 800601e:	ed97 3a01 	vldr	s6, [r7, #4]
 8006022:	eef0 2a66 	vmov.f32	s5, s13
 8006026:	eeb0 2a47 	vmov.f32	s4, s14
 800602a:	eef0 1a67 	vmov.f32	s3, s15
 800602e:	ed97 1a05 	vldr	s2, [r7, #20]
 8006032:	edd7 0a06 	vldr	s1, [r7, #24]
 8006036:	ed97 0a07 	vldr	s0, [r7, #28]
 800603a:	f000 f93b 	bl	80062b4 <MahonyAHRSupdateIMU>
}
 800603e:	bf00      	nop
 8006040:	3728      	adds	r7, #40	@ 0x28
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	3e99999a 	.word	0x3e99999a
 800604c:	20000864 	.word	0x20000864
 8006050:	20000868 	.word	0x20000868
 8006054:	2000086c 	.word	0x2000086c
 8006058:	20000861 	.word	0x20000861
 800605c:	41d3d2db 	.word	0x41d3d2db
 8006060:	420172a2 	.word	0x420172a2

08006064 <updateQuaternion>:


void updateQuaternion(float gx, float gy, float gz, float dt) {
 8006064:	b580      	push	{r7, lr}
 8006066:	b08a      	sub	sp, #40	@ 0x28
 8006068:	af00      	add	r7, sp, #0
 800606a:	ed87 0a03 	vstr	s0, [r7, #12]
 800606e:	edc7 0a02 	vstr	s1, [r7, #8]
 8006072:	ed87 1a01 	vstr	s2, [r7, #4]
 8006076:	edc7 1a00 	vstr	s3, [r7]

    // Quaternion türevleri
    float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 800607a:	4b8c      	ldr	r3, [pc, #560]	@ (80062ac <updateQuaternion+0x248>)
 800607c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006080:	eeb1 7a67 	vneg.f32	s14, s15
 8006084:	edd7 7a03 	vldr	s15, [r7, #12]
 8006088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800608c:	4b87      	ldr	r3, [pc, #540]	@ (80062ac <updateQuaternion+0x248>)
 800608e:	edd3 6a02 	vldr	s13, [r3, #8]
 8006092:	edd7 7a02 	vldr	s15, [r7, #8]
 8006096:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800609a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800609e:	4b83      	ldr	r3, [pc, #524]	@ (80062ac <updateQuaternion+0x248>)
 80060a0:	edd3 6a03 	vldr	s13, [r3, #12]
 80060a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80060a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060b0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80060b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060b8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float qDot2 = 0.5f * ( q[0] * gx + q[2] * gz - q[3] * gy);
 80060bc:	4b7b      	ldr	r3, [pc, #492]	@ (80062ac <updateQuaternion+0x248>)
 80060be:	ed93 7a00 	vldr	s14, [r3]
 80060c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80060c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060ca:	4b78      	ldr	r3, [pc, #480]	@ (80062ac <updateQuaternion+0x248>)
 80060cc:	edd3 6a02 	vldr	s13, [r3, #8]
 80060d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80060d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060dc:	4b73      	ldr	r3, [pc, #460]	@ (80062ac <updateQuaternion+0x248>)
 80060de:	edd3 6a03 	vldr	s13, [r3, #12]
 80060e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80060e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060ee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80060f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060f6:	edc7 7a08 	vstr	s15, [r7, #32]
    float qDot3 = 0.5f * ( q[0] * gy - q[1] * gz + q[3] * gx);
 80060fa:	4b6c      	ldr	r3, [pc, #432]	@ (80062ac <updateQuaternion+0x248>)
 80060fc:	ed93 7a00 	vldr	s14, [r3]
 8006100:	edd7 7a02 	vldr	s15, [r7, #8]
 8006104:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006108:	4b68      	ldr	r3, [pc, #416]	@ (80062ac <updateQuaternion+0x248>)
 800610a:	edd3 6a01 	vldr	s13, [r3, #4]
 800610e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006116:	ee37 7a67 	vsub.f32	s14, s14, s15
 800611a:	4b64      	ldr	r3, [pc, #400]	@ (80062ac <updateQuaternion+0x248>)
 800611c:	edd3 6a03 	vldr	s13, [r3, #12]
 8006120:	edd7 7a03 	vldr	s15, [r7, #12]
 8006124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800612c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006130:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006134:	edc7 7a07 	vstr	s15, [r7, #28]
    float qDot4 = 0.5f * ( q[0] * gz + q[1] * gy - q[2] * gx);
 8006138:	4b5c      	ldr	r3, [pc, #368]	@ (80062ac <updateQuaternion+0x248>)
 800613a:	ed93 7a00 	vldr	s14, [r3]
 800613e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006142:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006146:	4b59      	ldr	r3, [pc, #356]	@ (80062ac <updateQuaternion+0x248>)
 8006148:	edd3 6a01 	vldr	s13, [r3, #4]
 800614c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006150:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006154:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006158:	4b54      	ldr	r3, [pc, #336]	@ (80062ac <updateQuaternion+0x248>)
 800615a:	edd3 6a02 	vldr	s13, [r3, #8]
 800615e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800616a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800616e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006172:	edc7 7a06 	vstr	s15, [r7, #24]

    // Entegrasyon
    q[0] += qDot1 * dt;
 8006176:	4b4d      	ldr	r3, [pc, #308]	@ (80062ac <updateQuaternion+0x248>)
 8006178:	ed93 7a00 	vldr	s14, [r3]
 800617c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006180:	edd7 7a00 	vldr	s15, [r7]
 8006184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800618c:	4b47      	ldr	r3, [pc, #284]	@ (80062ac <updateQuaternion+0x248>)
 800618e:	edc3 7a00 	vstr	s15, [r3]
    q[1] += qDot2 * dt;
 8006192:	4b46      	ldr	r3, [pc, #280]	@ (80062ac <updateQuaternion+0x248>)
 8006194:	ed93 7a01 	vldr	s14, [r3, #4]
 8006198:	edd7 6a08 	vldr	s13, [r7, #32]
 800619c:	edd7 7a00 	vldr	s15, [r7]
 80061a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061a8:	4b40      	ldr	r3, [pc, #256]	@ (80062ac <updateQuaternion+0x248>)
 80061aa:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] += qDot3 * dt;
 80061ae:	4b3f      	ldr	r3, [pc, #252]	@ (80062ac <updateQuaternion+0x248>)
 80061b0:	ed93 7a02 	vldr	s14, [r3, #8]
 80061b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80061b8:	edd7 7a00 	vldr	s15, [r7]
 80061bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061c4:	4b39      	ldr	r3, [pc, #228]	@ (80062ac <updateQuaternion+0x248>)
 80061c6:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] += qDot4 * dt;
 80061ca:	4b38      	ldr	r3, [pc, #224]	@ (80062ac <updateQuaternion+0x248>)
 80061cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80061d0:	edd7 6a06 	vldr	s13, [r7, #24]
 80061d4:	edd7 7a00 	vldr	s15, [r7]
 80061d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061e0:	4b32      	ldr	r3, [pc, #200]	@ (80062ac <updateQuaternion+0x248>)
 80061e2:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalize et
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 80061e6:	4b31      	ldr	r3, [pc, #196]	@ (80062ac <updateQuaternion+0x248>)
 80061e8:	ed93 7a00 	vldr	s14, [r3]
 80061ec:	4b2f      	ldr	r3, [pc, #188]	@ (80062ac <updateQuaternion+0x248>)
 80061ee:	edd3 7a00 	vldr	s15, [r3]
 80061f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061f6:	4b2d      	ldr	r3, [pc, #180]	@ (80062ac <updateQuaternion+0x248>)
 80061f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80061fc:	4b2b      	ldr	r3, [pc, #172]	@ (80062ac <updateQuaternion+0x248>)
 80061fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8006202:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006206:	ee37 7a27 	vadd.f32	s14, s14, s15
 800620a:	4b28      	ldr	r3, [pc, #160]	@ (80062ac <updateQuaternion+0x248>)
 800620c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006210:	4b26      	ldr	r3, [pc, #152]	@ (80062ac <updateQuaternion+0x248>)
 8006212:	edd3 7a02 	vldr	s15, [r3, #8]
 8006216:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800621a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800621e:	4b23      	ldr	r3, [pc, #140]	@ (80062ac <updateQuaternion+0x248>)
 8006220:	edd3 6a03 	vldr	s13, [r3, #12]
 8006224:	4b21      	ldr	r3, [pc, #132]	@ (80062ac <updateQuaternion+0x248>)
 8006226:	edd3 7a03 	vldr	s15, [r3, #12]
 800622a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800622e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006232:	eeb0 0a67 	vmov.f32	s0, s15
 8006236:	f00a f805 	bl	8010244 <sqrtf>
 800623a:	ed87 0a05 	vstr	s0, [r7, #20]
    if (norm > 1e-6f) {
 800623e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006242:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80062b0 <updateQuaternion+0x24c>
 8006246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800624a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800624e:	dc00      	bgt.n	8006252 <updateQuaternion+0x1ee>
        q[0] /= norm;
        q[1] /= norm;
        q[2] /= norm;
        q[3] /= norm;
    }
}
 8006250:	e027      	b.n	80062a2 <updateQuaternion+0x23e>
        q[0] /= norm;
 8006252:	4b16      	ldr	r3, [pc, #88]	@ (80062ac <updateQuaternion+0x248>)
 8006254:	edd3 6a00 	vldr	s13, [r3]
 8006258:	ed97 7a05 	vldr	s14, [r7, #20]
 800625c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006260:	4b12      	ldr	r3, [pc, #72]	@ (80062ac <updateQuaternion+0x248>)
 8006262:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= norm;
 8006266:	4b11      	ldr	r3, [pc, #68]	@ (80062ac <updateQuaternion+0x248>)
 8006268:	edd3 6a01 	vldr	s13, [r3, #4]
 800626c:	ed97 7a05 	vldr	s14, [r7, #20]
 8006270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006274:	4b0d      	ldr	r3, [pc, #52]	@ (80062ac <updateQuaternion+0x248>)
 8006276:	edc3 7a01 	vstr	s15, [r3, #4]
        q[2] /= norm;
 800627a:	4b0c      	ldr	r3, [pc, #48]	@ (80062ac <updateQuaternion+0x248>)
 800627c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006280:	ed97 7a05 	vldr	s14, [r7, #20]
 8006284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006288:	4b08      	ldr	r3, [pc, #32]	@ (80062ac <updateQuaternion+0x248>)
 800628a:	edc3 7a02 	vstr	s15, [r3, #8]
        q[3] /= norm;
 800628e:	4b07      	ldr	r3, [pc, #28]	@ (80062ac <updateQuaternion+0x248>)
 8006290:	edd3 6a03 	vldr	s13, [r3, #12]
 8006294:	ed97 7a05 	vldr	s14, [r7, #20]
 8006298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800629c:	4b03      	ldr	r3, [pc, #12]	@ (80062ac <updateQuaternion+0x248>)
 800629e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80062a2:	bf00      	nop
 80062a4:	3728      	adds	r7, #40	@ 0x28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20000028 	.word	0x20000028
 80062b0:	358637bd 	.word	0x358637bd

080062b4 <MahonyAHRSupdateIMU>:
        q[2] /= norm_q;
        q[3] /= norm_q;
    }
}

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax_f, float ay_f, float az_f, float dt) {
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b092      	sub	sp, #72	@ 0x48
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	ed87 0a07 	vstr	s0, [r7, #28]
 80062be:	edc7 0a06 	vstr	s1, [r7, #24]
 80062c2:	ed87 1a05 	vstr	s2, [r7, #20]
 80062c6:	edc7 1a04 	vstr	s3, [r7, #16]
 80062ca:	ed87 2a03 	vstr	s4, [r7, #12]
 80062ce:	edc7 2a02 	vstr	s5, [r7, #8]
 80062d2:	ed87 3a01 	vstr	s6, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
		if(!((ax_f == 0.0f) && (ay_f == 0.0f) && (az_f == 0.0f))) {
 80062d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80062da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80062de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e2:	d10e      	bne.n	8006302 <MahonyAHRSupdateIMU+0x4e>
 80062e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80062e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80062ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062f0:	d107      	bne.n	8006302 <MahonyAHRSupdateIMU+0x4e>
 80062f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80062f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80062fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062fe:	f000 8138 	beq.w	8006572 <MahonyAHRSupdateIMU+0x2be>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax_f * ax_f + ay_f * ay_f + az_f * az_f);
 8006302:	edd7 7a04 	vldr	s15, [r7, #16]
 8006306:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800630a:	edd7 7a03 	vldr	s15, [r7, #12]
 800630e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006312:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006316:	edd7 7a02 	vldr	s15, [r7, #8]
 800631a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800631e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006322:	eeb0 0a67 	vmov.f32	s0, s15
 8006326:	f000 fd89 	bl	8006e3c <invSqrt>
 800632a:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax_f *= recipNorm;
 800632e:	ed97 7a04 	vldr	s14, [r7, #16]
 8006332:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633a:	edc7 7a04 	vstr	s15, [r7, #16]
		ay_f *= recipNorm;
 800633e:	ed97 7a03 	vldr	s14, [r7, #12]
 8006342:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800634a:	edc7 7a03 	vstr	s15, [r7, #12]
		az_f *= recipNorm;
 800634e:	ed97 7a02 	vldr	s14, [r7, #8]
 8006352:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635a:	edc7 7a02 	vstr	s15, [r7, #8]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 800635e:	4b66      	ldr	r3, [pc, #408]	@ (80064f8 <MahonyAHRSupdateIMU+0x244>)
 8006360:	ed93 7a01 	vldr	s14, [r3, #4]
 8006364:	4b64      	ldr	r3, [pc, #400]	@ (80064f8 <MahonyAHRSupdateIMU+0x244>)
 8006366:	edd3 7a03 	vldr	s15, [r3, #12]
 800636a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800636e:	4b62      	ldr	r3, [pc, #392]	@ (80064f8 <MahonyAHRSupdateIMU+0x244>)
 8006370:	edd3 6a00 	vldr	s13, [r3]
 8006374:	4b60      	ldr	r3, [pc, #384]	@ (80064f8 <MahonyAHRSupdateIMU+0x244>)
 8006376:	edd3 7a02 	vldr	s15, [r3, #8]
 800637a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800637e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006382:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8006386:	4b5c      	ldr	r3, [pc, #368]	@ (80064f8 <MahonyAHRSupdateIMU+0x244>)
 8006388:	ed93 7a00 	vldr	s14, [r3]
 800638c:	4b5a      	ldr	r3, [pc, #360]	@ (80064f8 <MahonyAHRSupdateIMU+0x244>)
 800638e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006396:	4b58      	ldr	r3, [pc, #352]	@ (80064f8 <MahonyAHRSupdateIMU+0x244>)
 8006398:	edd3 6a02 	vldr	s13, [r3, #8]
 800639c:	4b56      	ldr	r3, [pc, #344]	@ (80064f8 <MahonyAHRSupdateIMU+0x244>)
 800639e:	edd3 7a03 	vldr	s15, [r3, #12]
 80063a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063aa:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 80063ae:	4b52      	ldr	r3, [pc, #328]	@ (80064f8 <MahonyAHRSupdateIMU+0x244>)
 80063b0:	ed93 7a00 	vldr	s14, [r3]
 80063b4:	4b50      	ldr	r3, [pc, #320]	@ (80064f8 <MahonyAHRSupdateIMU+0x244>)
 80063b6:	edd3 7a00 	vldr	s15, [r3]
 80063ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80063c2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80063c6:	4b4c      	ldr	r3, [pc, #304]	@ (80064f8 <MahonyAHRSupdateIMU+0x244>)
 80063c8:	edd3 6a03 	vldr	s13, [r3, #12]
 80063cc:	4b4a      	ldr	r3, [pc, #296]	@ (80064f8 <MahonyAHRSupdateIMU+0x244>)
 80063ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80063d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063da:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay_f * halfvz - az_f * halfvy);
 80063de:	ed97 7a03 	vldr	s14, [r7, #12]
 80063e2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80063e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063ea:	edd7 6a02 	vldr	s13, [r7, #8]
 80063ee:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80063f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063fa:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az_f * halfvx - ax_f * halfvz);
 80063fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8006402:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8006406:	ee27 7a27 	vmul.f32	s14, s14, s15
 800640a:	edd7 6a04 	vldr	s13, [r7, #16]
 800640e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8006412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800641a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax_f * halfvy - ay_f * halfvx);
 800641e:	ed97 7a04 	vldr	s14, [r7, #16]
 8006422:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8006426:	ee27 7a27 	vmul.f32	s14, s14, s15
 800642a:	edd7 6a03 	vldr	s13, [r7, #12]
 800642e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8006432:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006436:	ee77 7a67 	vsub.f32	s15, s14, s15
 800643a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 800643e:	4b2f      	ldr	r3, [pc, #188]	@ (80064fc <MahonyAHRSupdateIMU+0x248>)
 8006440:	edd3 7a00 	vldr	s15, [r3]
 8006444:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800644c:	dd5e      	ble.n	800650c <MahonyAHRSupdateIMU+0x258>
			integralFBx += twoKi * halfex * dt;	// integral error scaled by Ki
 800644e:	4b2b      	ldr	r3, [pc, #172]	@ (80064fc <MahonyAHRSupdateIMU+0x248>)
 8006450:	ed93 7a00 	vldr	s14, [r3]
 8006454:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006458:	ee27 7a27 	vmul.f32	s14, s14, s15
 800645c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006460:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006464:	4b26      	ldr	r3, [pc, #152]	@ (8006500 <MahonyAHRSupdateIMU+0x24c>)
 8006466:	edd3 7a00 	vldr	s15, [r3]
 800646a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800646e:	4b24      	ldr	r3, [pc, #144]	@ (8006500 <MahonyAHRSupdateIMU+0x24c>)
 8006470:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * dt;
 8006474:	4b21      	ldr	r3, [pc, #132]	@ (80064fc <MahonyAHRSupdateIMU+0x248>)
 8006476:	ed93 7a00 	vldr	s14, [r3]
 800647a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800647e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006482:	edd7 7a01 	vldr	s15, [r7, #4]
 8006486:	ee27 7a27 	vmul.f32	s14, s14, s15
 800648a:	4b1e      	ldr	r3, [pc, #120]	@ (8006504 <MahonyAHRSupdateIMU+0x250>)
 800648c:	edd3 7a00 	vldr	s15, [r3]
 8006490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006494:	4b1b      	ldr	r3, [pc, #108]	@ (8006504 <MahonyAHRSupdateIMU+0x250>)
 8006496:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * dt;
 800649a:	4b18      	ldr	r3, [pc, #96]	@ (80064fc <MahonyAHRSupdateIMU+0x248>)
 800649c:	ed93 7a00 	vldr	s14, [r3]
 80064a0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80064a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80064ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064b0:	4b15      	ldr	r3, [pc, #84]	@ (8006508 <MahonyAHRSupdateIMU+0x254>)
 80064b2:	edd3 7a00 	vldr	s15, [r3]
 80064b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064ba:	4b13      	ldr	r3, [pc, #76]	@ (8006508 <MahonyAHRSupdateIMU+0x254>)
 80064bc:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 80064c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006500 <MahonyAHRSupdateIMU+0x24c>)
 80064c2:	edd3 7a00 	vldr	s15, [r3]
 80064c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80064ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064ce:	edc7 7a07 	vstr	s15, [r7, #28]
			gy += integralFBy;
 80064d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006504 <MahonyAHRSupdateIMU+0x250>)
 80064d4:	edd3 7a00 	vldr	s15, [r3]
 80064d8:	ed97 7a06 	vldr	s14, [r7, #24]
 80064dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064e0:	edc7 7a06 	vstr	s15, [r7, #24]
			gz += integralFBz;
 80064e4:	4b08      	ldr	r3, [pc, #32]	@ (8006508 <MahonyAHRSupdateIMU+0x254>)
 80064e6:	edd3 7a00 	vldr	s15, [r3]
 80064ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80064ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064f2:	edc7 7a05 	vstr	s15, [r7, #20]
 80064f6:	e015      	b.n	8006524 <MahonyAHRSupdateIMU+0x270>
 80064f8:	20000028 	.word	0x20000028
 80064fc:	2000003c 	.word	0x2000003c
 8006500:	20000854 	.word	0x20000854
 8006504:	20000858 	.word	0x20000858
 8006508:	2000085c 	.word	0x2000085c
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 800650c:	4b9a      	ldr	r3, [pc, #616]	@ (8006778 <MahonyAHRSupdateIMU+0x4c4>)
 800650e:	f04f 0200 	mov.w	r2, #0
 8006512:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8006514:	4b99      	ldr	r3, [pc, #612]	@ (800677c <MahonyAHRSupdateIMU+0x4c8>)
 8006516:	f04f 0200 	mov.w	r2, #0
 800651a:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 800651c:	4b98      	ldr	r3, [pc, #608]	@ (8006780 <MahonyAHRSupdateIMU+0x4cc>)
 800651e:	f04f 0200 	mov.w	r2, #0
 8006522:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8006524:	4b97      	ldr	r3, [pc, #604]	@ (8006784 <MahonyAHRSupdateIMU+0x4d0>)
 8006526:	ed93 7a00 	vldr	s14, [r3]
 800652a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800652e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006532:	ed97 7a07 	vldr	s14, [r7, #28]
 8006536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800653a:	edc7 7a07 	vstr	s15, [r7, #28]
		gy += twoKp * halfey;
 800653e:	4b91      	ldr	r3, [pc, #580]	@ (8006784 <MahonyAHRSupdateIMU+0x4d0>)
 8006540:	ed93 7a00 	vldr	s14, [r3]
 8006544:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8006548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800654c:	ed97 7a06 	vldr	s14, [r7, #24]
 8006550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006554:	edc7 7a06 	vstr	s15, [r7, #24]
		gz += twoKp * halfez;
 8006558:	4b8a      	ldr	r3, [pc, #552]	@ (8006784 <MahonyAHRSupdateIMU+0x4d0>)
 800655a:	ed93 7a00 	vldr	s14, [r3]
 800655e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006566:	ed97 7a05 	vldr	s14, [r7, #20]
 800656a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800656e:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * dt);		// pre-multiply common factors
 8006572:	edd7 7a01 	vldr	s15, [r7, #4]
 8006576:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800657a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800657e:	ed97 7a07 	vldr	s14, [r7, #28]
 8006582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006586:	edc7 7a07 	vstr	s15, [r7, #28]
	gy *= (0.5f * dt);
 800658a:	edd7 7a01 	vldr	s15, [r7, #4]
 800658e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006592:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006596:	ed97 7a06 	vldr	s14, [r7, #24]
 800659a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800659e:	edc7 7a06 	vstr	s15, [r7, #24]
	gz *= (0.5f * dt);
 80065a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80065a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80065aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80065b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065b6:	edc7 7a05 	vstr	s15, [r7, #20]
	qa = q[0];
 80065ba:	4b73      	ldr	r3, [pc, #460]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 80065c0:	4b71      	ldr	r3, [pc, #452]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 80065c6:	4b70      	ldr	r3, [pc, #448]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 80065cc:	4b6e      	ldr	r3, [pc, #440]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 80065ce:	ed93 7a00 	vldr	s14, [r3]
 80065d2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80065d6:	eef1 6a67 	vneg.f32	s13, s15
 80065da:	edd7 7a07 	vldr	s15, [r7, #28]
 80065de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80065e2:	ed97 6a08 	vldr	s12, [r7, #32]
 80065e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80065ea:	ee66 7a27 	vmul.f32	s15, s12, s15
 80065ee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80065f2:	4b65      	ldr	r3, [pc, #404]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 80065f4:	ed93 6a03 	vldr	s12, [r3, #12]
 80065f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80065fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006600:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006608:	4b5f      	ldr	r3, [pc, #380]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 800660a:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 800660e:	4b5e      	ldr	r3, [pc, #376]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 8006610:	ed93 7a01 	vldr	s14, [r3, #4]
 8006614:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006618:	edd7 7a07 	vldr	s15, [r7, #28]
 800661c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006620:	ed97 6a08 	vldr	s12, [r7, #32]
 8006624:	edd7 7a05 	vldr	s15, [r7, #20]
 8006628:	ee66 7a27 	vmul.f32	s15, s12, s15
 800662c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006630:	4b55      	ldr	r3, [pc, #340]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 8006632:	ed93 6a03 	vldr	s12, [r3, #12]
 8006636:	edd7 7a06 	vldr	s15, [r7, #24]
 800663a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800663e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006646:	4b50      	ldr	r3, [pc, #320]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 8006648:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 800664c:	4b4e      	ldr	r3, [pc, #312]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 800664e:	ed93 7a02 	vldr	s14, [r3, #8]
 8006652:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006656:	edd7 7a06 	vldr	s15, [r7, #24]
 800665a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800665e:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8006662:	edd7 7a05 	vldr	s15, [r7, #20]
 8006666:	ee66 7a27 	vmul.f32	s15, s12, s15
 800666a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800666e:	4b46      	ldr	r3, [pc, #280]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 8006670:	ed93 6a03 	vldr	s12, [r3, #12]
 8006674:	edd7 7a07 	vldr	s15, [r7, #28]
 8006678:	ee66 7a27 	vmul.f32	s15, s12, s15
 800667c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006684:	4b40      	ldr	r3, [pc, #256]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 8006686:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] += (qa * gz + qb * gy - qc * gx);
 800668a:	4b3f      	ldr	r3, [pc, #252]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 800668c:	ed93 7a03 	vldr	s14, [r3, #12]
 8006690:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006694:	edd7 7a05 	vldr	s15, [r7, #20]
 8006698:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800669c:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 80066a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80066a4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80066a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80066ac:	ed97 6a08 	vldr	s12, [r7, #32]
 80066b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80066b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80066b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80066bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066c0:	4b31      	ldr	r3, [pc, #196]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 80066c2:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 80066c6:	4b30      	ldr	r3, [pc, #192]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 80066c8:	ed93 7a00 	vldr	s14, [r3]
 80066cc:	4b2e      	ldr	r3, [pc, #184]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 80066ce:	edd3 7a00 	vldr	s15, [r3]
 80066d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066d6:	4b2c      	ldr	r3, [pc, #176]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 80066d8:	edd3 6a01 	vldr	s13, [r3, #4]
 80066dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 80066de:	edd3 7a01 	vldr	s15, [r3, #4]
 80066e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066ea:	4b27      	ldr	r3, [pc, #156]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 80066ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80066f0:	4b25      	ldr	r3, [pc, #148]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 80066f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80066f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066fe:	4b22      	ldr	r3, [pc, #136]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 8006700:	edd3 6a03 	vldr	s13, [r3, #12]
 8006704:	4b20      	ldr	r3, [pc, #128]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 8006706:	edd3 7a03 	vldr	s15, [r3, #12]
 800670a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800670e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006712:	eeb0 0a67 	vmov.f32	s0, s15
 8006716:	f000 fb91 	bl	8006e3c <invSqrt>
 800671a:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 800671e:	4b1a      	ldr	r3, [pc, #104]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 8006720:	ed93 7a00 	vldr	s14, [r3]
 8006724:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800672c:	4b16      	ldr	r3, [pc, #88]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 800672e:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8006732:	4b15      	ldr	r3, [pc, #84]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 8006734:	ed93 7a01 	vldr	s14, [r3, #4]
 8006738:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800673c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006740:	4b11      	ldr	r3, [pc, #68]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 8006742:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] *= recipNorm;
 8006746:	4b10      	ldr	r3, [pc, #64]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 8006748:	ed93 7a02 	vldr	s14, [r3, #8]
 800674c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006754:	4b0c      	ldr	r3, [pc, #48]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 8006756:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] *= recipNorm;
 800675a:	4b0b      	ldr	r3, [pc, #44]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 800675c:	ed93 7a03 	vldr	s14, [r3, #12]
 8006760:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006768:	4b07      	ldr	r3, [pc, #28]	@ (8006788 <MahonyAHRSupdateIMU+0x4d4>)
 800676a:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800676e:	bf00      	nop
 8006770:	3748      	adds	r7, #72	@ 0x48
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	20000854 	.word	0x20000854
 800677c:	20000858 	.word	0x20000858
 8006780:	2000085c 	.word	0x2000085c
 8006784:	20000038 	.word	0x20000038
 8006788:	20000028 	.word	0x20000028

0800678c <quaternionToThetaZ>:


float quaternionToThetaZ() {
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
    float r13 = 2 * q[1] * q[3] + 2 * q[2] * q[0];
 8006792:	4b44      	ldr	r3, [pc, #272]	@ (80068a4 <quaternionToThetaZ+0x118>)
 8006794:	edd3 7a01 	vldr	s15, [r3, #4]
 8006798:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800679c:	4b41      	ldr	r3, [pc, #260]	@ (80068a4 <quaternionToThetaZ+0x118>)
 800679e:	edd3 7a03 	vldr	s15, [r3, #12]
 80067a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067a6:	4b3f      	ldr	r3, [pc, #252]	@ (80068a4 <quaternionToThetaZ+0x118>)
 80067a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80067ac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80067b0:	4b3c      	ldr	r3, [pc, #240]	@ (80068a4 <quaternionToThetaZ+0x118>)
 80067b2:	edd3 7a00 	vldr	s15, [r3]
 80067b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067be:	edc7 7a05 	vstr	s15, [r7, #20]
    float r23 = 2 * q[2] * q[3] - 2 * q[1] * q[0];
 80067c2:	4b38      	ldr	r3, [pc, #224]	@ (80068a4 <quaternionToThetaZ+0x118>)
 80067c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80067c8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80067cc:	4b35      	ldr	r3, [pc, #212]	@ (80068a4 <quaternionToThetaZ+0x118>)
 80067ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80067d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067d6:	4b33      	ldr	r3, [pc, #204]	@ (80068a4 <quaternionToThetaZ+0x118>)
 80067d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80067dc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80067e0:	4b30      	ldr	r3, [pc, #192]	@ (80068a4 <quaternionToThetaZ+0x118>)
 80067e2:	edd3 7a00 	vldr	s15, [r3]
 80067e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067ee:	edc7 7a04 	vstr	s15, [r7, #16]
    float r33 = 1 - 2 * q[1] * q[1] - 2 * q[2] * q[2];
 80067f2:	4b2c      	ldr	r3, [pc, #176]	@ (80068a4 <quaternionToThetaZ+0x118>)
 80067f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80067f8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80067fc:	4b29      	ldr	r3, [pc, #164]	@ (80068a4 <quaternionToThetaZ+0x118>)
 80067fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8006802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006806:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800680a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800680e:	4b25      	ldr	r3, [pc, #148]	@ (80068a4 <quaternionToThetaZ+0x118>)
 8006810:	edd3 7a02 	vldr	s15, [r3, #8]
 8006814:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006818:	4b22      	ldr	r3, [pc, #136]	@ (80068a4 <quaternionToThetaZ+0x118>)
 800681a:	edd3 7a02 	vldr	s15, [r3, #8]
 800681e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006826:	edc7 7a03 	vstr	s15, [r7, #12]

    float dotProduct = r33;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	60bb      	str	r3, [r7, #8]
    float magnitude = sqrtf(r13 * r13 + r23 * r23 + r33 * r33);
 800682e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006832:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006836:	edd7 7a04 	vldr	s15, [r7, #16]
 800683a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800683e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006842:	edd7 7a03 	vldr	s15, [r7, #12]
 8006846:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800684a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800684e:	eeb0 0a67 	vmov.f32	s0, s15
 8006852:	f009 fcf7 	bl	8010244 <sqrtf>
 8006856:	ed87 0a01 	vstr	s0, [r7, #4]

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
 800685a:	ed97 7a02 	vldr	s14, [r7, #8]
 800685e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006862:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006866:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800686a:	eeb0 0a66 	vmov.f32	s0, s13
 800686e:	f009 fd3c 	bl	80102ea <fminf>
 8006872:	eef0 7a40 	vmov.f32	s15, s0
 8006876:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 800687a:	eeb0 0a67 	vmov.f32	s0, s15
 800687e:	f009 fd17 	bl	80102b0 <fmaxf>
 8006882:	ed87 0a00 	vstr	s0, [r7]
    return acosf(safeValue) * (180.0f / 3.14f);
 8006886:	ed97 0a00 	vldr	s0, [r7]
 800688a:	f009 fc81 	bl	8010190 <acosf>
 800688e:	eef0 7a40 	vmov.f32	s15, s0
 8006892:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80068a8 <quaternionToThetaZ+0x11c>
 8006896:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800689a:	eeb0 0a67 	vmov.f32	s0, s15
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20000028 	.word	0x20000028
 80068a8:	42654ca3 	.word	0x42654ca3

080068ac <quaternionToPitchDegree>:
    float siny_cosp = 2.0f * (w * z + x * y);
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
}

float quaternionToPitchDegree() {
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 80068b2:	4b22      	ldr	r3, [pc, #136]	@ (800693c <quaternionToPitchDegree+0x90>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	4b20      	ldr	r3, [pc, #128]	@ (800693c <quaternionToPitchDegree+0x90>)
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	613b      	str	r3, [r7, #16]
 80068be:	4b1f      	ldr	r3, [pc, #124]	@ (800693c <quaternionToPitchDegree+0x90>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	4b1d      	ldr	r3, [pc, #116]	@ (800693c <quaternionToPitchDegree+0x90>)
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	60bb      	str	r3, [r7, #8]
    float sinp = 2.0f * (w * y - z * x);
 80068ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80068ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80068d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068d6:	edd7 6a02 	vldr	s13, [r7, #8]
 80068da:	edd7 7a04 	vldr	s15, [r7, #16]
 80068de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80068ea:	edc7 7a01 	vstr	s15, [r7, #4]
    if (fabsf(sinp) >= 1.0f)
 80068ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80068f2:	eef0 7ae7 	vabs.f32	s15, s15
 80068f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006902:	db0c      	blt.n	800691e <quaternionToPitchDegree+0x72>
        return (sinp > 0 ? 90.0f : -90.0f); // clamp
 8006904:	edd7 7a01 	vldr	s15, [r7, #4]
 8006908:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800690c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006910:	dd02      	ble.n	8006918 <quaternionToPitchDegree+0x6c>
 8006912:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8006940 <quaternionToPitchDegree+0x94>
 8006916:	e00c      	b.n	8006932 <quaternionToPitchDegree+0x86>
 8006918:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8006944 <quaternionToPitchDegree+0x98>
 800691c:	e009      	b.n	8006932 <quaternionToPitchDegree+0x86>
    else
        return asinf(sinp) * (180.0f / 3.14159265f);
 800691e:	ed97 0a01 	vldr	s0, [r7, #4]
 8006922:	f009 fc61 	bl	80101e8 <asinf>
 8006926:	eef0 7a40 	vmov.f32	s15, s0
 800692a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006948 <quaternionToPitchDegree+0x9c>
 800692e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006932:	eeb0 0a67 	vmov.f32	s0, s15
 8006936:	3718      	adds	r7, #24
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	20000028 	.word	0x20000028
 8006940:	42b40000 	.word	0x42b40000
 8006944:	c2b40000 	.word	0xc2b40000
 8006948:	42652ee0 	.word	0x42652ee0

0800694c <quaternionToRollDegree>:

float quaternionToRollDegree(){
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 8006952:	4b20      	ldr	r3, [pc, #128]	@ (80069d4 <quaternionToRollDegree+0x88>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	4b1e      	ldr	r3, [pc, #120]	@ (80069d4 <quaternionToRollDegree+0x88>)
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	613b      	str	r3, [r7, #16]
 800695e:	4b1d      	ldr	r3, [pc, #116]	@ (80069d4 <quaternionToRollDegree+0x88>)
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	4b1b      	ldr	r3, [pc, #108]	@ (80069d4 <quaternionToRollDegree+0x88>)
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	60bb      	str	r3, [r7, #8]
    float sinr_cosp = 2.0f * (w * x + y * z);
 800696a:	ed97 7a05 	vldr	s14, [r7, #20]
 800696e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006972:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006976:	edd7 6a03 	vldr	s13, [r7, #12]
 800697a:	edd7 7a02 	vldr	s15, [r7, #8]
 800697e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006986:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800698a:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosr_cosp = 1.0f - 2.0f * (x * x + y * y);
 800698e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006992:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006996:	edd7 7a03 	vldr	s15, [r7, #12]
 800699a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800699e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80069a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069ae:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(sinr_cosp, cosr_cosp) * (180.0f / 3.14159265f);
 80069b2:	edd7 0a00 	vldr	s1, [r7]
 80069b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80069ba:	f009 fc41 	bl	8010240 <atan2f>
 80069be:	eef0 7a40 	vmov.f32	s15, s0
 80069c2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80069d8 <quaternionToRollDegree+0x8c>
 80069c6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80069ca:	eeb0 0a67 	vmov.f32	s0, s15
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	20000028 	.word	0x20000028
 80069d8:	42652ee0 	.word	0x42652ee0

080069dc <quaternionToYaw>:


float quaternionToYaw(){
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 80069e2:	4b2a      	ldr	r3, [pc, #168]	@ (8006a8c <quaternionToYaw+0xb0>)
 80069e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80069e8:	4b28      	ldr	r3, [pc, #160]	@ (8006a8c <quaternionToYaw+0xb0>)
 80069ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80069ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069f2:	4b26      	ldr	r3, [pc, #152]	@ (8006a8c <quaternionToYaw+0xb0>)
 80069f4:	edd3 6a00 	vldr	s13, [r3]
 80069f8:	4b24      	ldr	r3, [pc, #144]	@ (8006a8c <quaternionToYaw+0xb0>)
 80069fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80069fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a06:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8006a0a:	4b20      	ldr	r3, [pc, #128]	@ (8006a8c <quaternionToYaw+0xb0>)
 8006a0c:	ed93 7a00 	vldr	s14, [r3]
 8006a10:	4b1e      	ldr	r3, [pc, #120]	@ (8006a8c <quaternionToYaw+0xb0>)
 8006a12:	edd3 7a00 	vldr	s15, [r3]
 8006a16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8006a8c <quaternionToYaw+0xb0>)
 8006a1c:	edd3 6a01 	vldr	s13, [r3, #4]
 8006a20:	4b1a      	ldr	r3, [pc, #104]	@ (8006a8c <quaternionToYaw+0xb0>)
 8006a22:	edd3 7a01 	vldr	s15, [r3, #4]
 8006a26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a2e:	4b17      	ldr	r3, [pc, #92]	@ (8006a8c <quaternionToYaw+0xb0>)
 8006a30:	edd3 6a02 	vldr	s13, [r3, #8]
 8006a34:	4b15      	ldr	r3, [pc, #84]	@ (8006a8c <quaternionToYaw+0xb0>)
 8006a36:	edd3 7a02 	vldr	s15, [r3, #8]
 8006a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006a42:	4b12      	ldr	r3, [pc, #72]	@ (8006a8c <quaternionToYaw+0xb0>)
 8006a44:	edd3 6a03 	vldr	s13, [r3, #12]
 8006a48:	4b10      	ldr	r3, [pc, #64]	@ (8006a8c <quaternionToYaw+0xb0>)
 8006a4a:	edd3 7a03 	vldr	s15, [r3, #12]
 8006a4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a56:	eef0 0a67 	vmov.f32	s1, s15
 8006a5a:	eeb0 0a46 	vmov.f32	s0, s12
 8006a5e:	f009 fbef 	bl	8010240 <atan2f>
 8006a62:	eef0 7a40 	vmov.f32	s15, s0
 8006a66:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006a90 <quaternionToYaw+0xb4>
 8006a6a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006a6e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006a94 <quaternionToYaw+0xb8>
 8006a72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a76:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	ee07 3a90 	vmov	s15, r3
}
 8006a80:	eeb0 0a67 	vmov.f32	s0, s15
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000028 	.word	0x20000028
 8006a90:	43340000 	.word	0x43340000
 8006a94:	40490fd0 	.word	0x40490fd0

08006a98 <quaternionToPitch>:

float quaternionToPitch(){
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 8006a9e:	4b17      	ldr	r3, [pc, #92]	@ (8006afc <quaternionToPitch+0x64>)
 8006aa0:	ed93 7a01 	vldr	s14, [r3, #4]
 8006aa4:	4b15      	ldr	r3, [pc, #84]	@ (8006afc <quaternionToPitch+0x64>)
 8006aa6:	edd3 7a03 	vldr	s15, [r3, #12]
 8006aaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006aae:	4b13      	ldr	r3, [pc, #76]	@ (8006afc <quaternionToPitch+0x64>)
 8006ab0:	edd3 6a00 	vldr	s13, [r3]
 8006ab4:	4b11      	ldr	r3, [pc, #68]	@ (8006afc <quaternionToPitch+0x64>)
 8006ab6:	edd3 7a02 	vldr	s15, [r3, #8]
 8006aba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ac2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8006aca:	f009 fb8d 	bl	80101e8 <asinf>
 8006ace:	eef0 7a40 	vmov.f32	s15, s0
 8006ad2:	eef1 7a67 	vneg.f32	s15, s15
 8006ad6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006b00 <quaternionToPitch+0x68>
 8006ada:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006ade:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006b04 <quaternionToPitch+0x6c>
 8006ae2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ae6:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	ee07 3a90 	vmov	s15, r3
}
 8006af0:	eeb0 0a67 	vmov.f32	s0, s15
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000028 	.word	0x20000028
 8006b00:	43340000 	.word	0x43340000
 8006b04:	40490fd0 	.word	0x40490fd0

08006b08 <quaternionToRoll>:

float quaternionToRoll(){
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 8006b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8006bb8 <quaternionToRoll+0xb0>)
 8006b10:	ed93 7a00 	vldr	s14, [r3]
 8006b14:	4b28      	ldr	r3, [pc, #160]	@ (8006bb8 <quaternionToRoll+0xb0>)
 8006b16:	edd3 7a01 	vldr	s15, [r3, #4]
 8006b1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b1e:	4b26      	ldr	r3, [pc, #152]	@ (8006bb8 <quaternionToRoll+0xb0>)
 8006b20:	edd3 6a02 	vldr	s13, [r3, #8]
 8006b24:	4b24      	ldr	r3, [pc, #144]	@ (8006bb8 <quaternionToRoll+0xb0>)
 8006b26:	edd3 7a03 	vldr	s15, [r3, #12]
 8006b2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b32:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8006b36:	4b20      	ldr	r3, [pc, #128]	@ (8006bb8 <quaternionToRoll+0xb0>)
 8006b38:	ed93 7a00 	vldr	s14, [r3]
 8006b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8006bb8 <quaternionToRoll+0xb0>)
 8006b3e:	edd3 7a00 	vldr	s15, [r3]
 8006b42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b46:	4b1c      	ldr	r3, [pc, #112]	@ (8006bb8 <quaternionToRoll+0xb0>)
 8006b48:	edd3 6a01 	vldr	s13, [r3, #4]
 8006b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8006bb8 <quaternionToRoll+0xb0>)
 8006b4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006b5a:	4b17      	ldr	r3, [pc, #92]	@ (8006bb8 <quaternionToRoll+0xb0>)
 8006b5c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006b60:	4b15      	ldr	r3, [pc, #84]	@ (8006bb8 <quaternionToRoll+0xb0>)
 8006b62:	edd3 7a02 	vldr	s15, [r3, #8]
 8006b66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006b6e:	4b12      	ldr	r3, [pc, #72]	@ (8006bb8 <quaternionToRoll+0xb0>)
 8006b70:	edd3 6a03 	vldr	s13, [r3, #12]
 8006b74:	4b10      	ldr	r3, [pc, #64]	@ (8006bb8 <quaternionToRoll+0xb0>)
 8006b76:	edd3 7a03 	vldr	s15, [r3, #12]
 8006b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b82:	eef0 0a67 	vmov.f32	s1, s15
 8006b86:	eeb0 0a46 	vmov.f32	s0, s12
 8006b8a:	f009 fb59 	bl	8010240 <atan2f>
 8006b8e:	eef0 7a40 	vmov.f32	s15, s0
 8006b92:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006bbc <quaternionToRoll+0xb4>
 8006b96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006b9a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006bc0 <quaternionToRoll+0xb8>
 8006b9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ba2:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	ee07 3a90 	vmov	s15, r3
}
 8006bac:	eeb0 0a67 	vmov.f32	s0, s15
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20000028 	.word	0x20000028
 8006bbc:	43340000 	.word	0x43340000
 8006bc0:	40490fd0 	.word	0x40490fd0

08006bc4 <getInitialQuaternion>:

void getInitialQuaternion() {
 8006bc4:	b5b0      	push	{r4, r5, r7, lr}
 8006bc6:	b092      	sub	sp, #72	@ 0x48
 8006bc8:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.datas.acc_z * BMI_sensor.datas.acc_z + BMI_sensor.datas.acc_x * BMI_sensor.datas.acc_x + BMI_sensor.datas.acc_y * BMI_sensor.datas.acc_y);
 8006bca:	4b98      	ldr	r3, [pc, #608]	@ (8006e2c <getInitialQuaternion+0x268>)
 8006bcc:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8006bd0:	4b96      	ldr	r3, [pc, #600]	@ (8006e2c <getInitialQuaternion+0x268>)
 8006bd2:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8006bd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bda:	4b94      	ldr	r3, [pc, #592]	@ (8006e2c <getInitialQuaternion+0x268>)
 8006bdc:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 8006be0:	4b92      	ldr	r3, [pc, #584]	@ (8006e2c <getInitialQuaternion+0x268>)
 8006be2:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8006be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006bee:	4b8f      	ldr	r3, [pc, #572]	@ (8006e2c <getInitialQuaternion+0x268>)
 8006bf0:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8006bf4:	4b8d      	ldr	r3, [pc, #564]	@ (8006e2c <getInitialQuaternion+0x268>)
 8006bf6:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8006bfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c02:	ee17 0a90 	vmov	r0, s15
 8006c06:	f7f9 fcbf 	bl	8000588 <__aeabi_f2d>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	ec43 2b10 	vmov	d0, r2, r3
 8006c12:	f009 fa3d 	bl	8010090 <sqrt>
 8006c16:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.datas.acc_y;
 8006c1a:	4b84      	ldr	r3, [pc, #528]	@ (8006e2c <getInitialQuaternion+0x268>)
 8006c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7f9 fcb2 	bl	8000588 <__aeabi_f2d>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)-BMI_sensor.datas.acc_z;
 8006c2c:	4b7f      	ldr	r3, [pc, #508]	@ (8006e2c <getInitialQuaternion+0x268>)
 8006c2e:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8006c32:	eef1 7a67 	vneg.f32	s15, s15
 8006c36:	ee17 3a90 	vmov	r3, s15
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7f9 fca4 	bl	8000588 <__aeabi_f2d>
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] = (double)BMI_sensor.datas.acc_x;
 8006c48:	4b78      	ldr	r3, [pc, #480]	@ (8006e2c <getInitialQuaternion+0x268>)
 8006c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7f9 fc9b 	bl	8000588 <__aeabi_f2d>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    accel_temp[0] /= norm;
 8006c5a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006c5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006c62:	f7f9 fe13 	bl	800088c <__aeabi_ddiv>
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 8006c6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006c72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006c76:	f7f9 fe09 	bl	800088c <__aeabi_ddiv>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 8006c82:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8006c86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006c8a:	f7f9 fdff 	bl	800088c <__aeabi_ddiv>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 8006c96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c9a:	f04f 0000 	mov.w	r0, #0
 8006c9e:	4964      	ldr	r1, [pc, #400]	@ (8006e30 <getInitialQuaternion+0x26c>)
 8006ca0:	f7f9 fb12 	bl	80002c8 <__aeabi_dsub>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	ec43 2b17 	vmov	d7, r2, r3
 8006cac:	eeb0 0a47 	vmov.f32	s0, s14
 8006cb0:	eef0 0a67 	vmov.f32	s1, s15
 8006cb4:	f009 f9ec 	bl	8010090 <sqrt>
 8006cb8:	ec51 0b10 	vmov	r0, r1, d0
 8006cbc:	f04f 0200 	mov.w	r2, #0
 8006cc0:	4b5c      	ldr	r3, [pc, #368]	@ (8006e34 <getInitialQuaternion+0x270>)
 8006cc2:	f7f9 fcb9 	bl	8000638 <__aeabi_dmul>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 8006cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cd2:	f04f 0000 	mov.w	r0, #0
 8006cd6:	4957      	ldr	r1, [pc, #348]	@ (8006e34 <getInitialQuaternion+0x270>)
 8006cd8:	f7f9 fdd8 	bl	800088c <__aeabi_ddiv>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 8006ce4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006ce8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006cec:	f7f9 fca4 	bl	8000638 <__aeabi_dmul>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	f04f 0200 	mov.w	r2, #0
 8006cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8006e34 <getInitialQuaternion+0x270>)
 8006cfe:	f7f9 fc9b 	bl	8000638 <__aeabi_dmul>
 8006d02:	4602      	mov	r2, r0
 8006d04:	460b      	mov	r3, r1
 8006d06:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 8006d0a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8006d0e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d12:	f7f9 fc91 	bl	8000638 <__aeabi_dmul>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	f04f 0200 	mov.w	r2, #0
 8006d22:	4b44      	ldr	r3, [pc, #272]	@ (8006e34 <getInitialQuaternion+0x270>)
 8006d24:	f7f9 fc88 	bl	8000638 <__aeabi_dmul>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 8006d30:	f04f 0200 	mov.w	r2, #0
 8006d34:	f04f 0300 	mov.w	r3, #0
 8006d38:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8006d3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d44:	f7f9 fc78 	bl	8000638 <__aeabi_dmul>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4614      	mov	r4, r2
 8006d4e:	461d      	mov	r5, r3
 8006d50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d58:	f7f9 fc6e 	bl	8000638 <__aeabi_dmul>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4620      	mov	r0, r4
 8006d62:	4629      	mov	r1, r5
 8006d64:	f7f9 fab2 	bl	80002cc <__adddf3>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4614      	mov	r4, r2
 8006d6e:	461d      	mov	r5, r3
 8006d70:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006d74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006d78:	f7f9 fc5e 	bl	8000638 <__aeabi_dmul>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4620      	mov	r0, r4
 8006d82:	4629      	mov	r1, r5
 8006d84:	f7f9 faa2 	bl	80002cc <__adddf3>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4614      	mov	r4, r2
 8006d8e:	461d      	mov	r5, r3
 8006d90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d98:	f7f9 fc4e 	bl	8000638 <__aeabi_dmul>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4620      	mov	r0, r4
 8006da2:	4629      	mov	r1, r5
 8006da4:	f7f9 fa92 	bl	80002cc <__adddf3>
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	ec43 2b17 	vmov	d7, r2, r3
 8006db0:	eeb0 0a47 	vmov.f32	s0, s14
 8006db4:	eef0 0a67 	vmov.f32	s1, s15
 8006db8:	f009 f96a 	bl	8010090 <sqrt>
 8006dbc:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

    q[0] = q_temp[0] / norm;
 8006dc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006dc8:	f7f9 fd60 	bl	800088c <__aeabi_ddiv>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	f7f9 ff08 	bl	8000be8 <__aeabi_d2f>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	4a17      	ldr	r2, [pc, #92]	@ (8006e38 <getInitialQuaternion+0x274>)
 8006ddc:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 8006dde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006de2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006de6:	f7f9 fd51 	bl	800088c <__aeabi_ddiv>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	4610      	mov	r0, r2
 8006df0:	4619      	mov	r1, r3
 8006df2:	f7f9 fef9 	bl	8000be8 <__aeabi_d2f>
 8006df6:	4603      	mov	r3, r0
 8006df8:	4a0f      	ldr	r2, [pc, #60]	@ (8006e38 <getInitialQuaternion+0x274>)
 8006dfa:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 8006dfc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006e00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e04:	f7f9 fd42 	bl	800088c <__aeabi_ddiv>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	4619      	mov	r1, r3
 8006e10:	f7f9 feea 	bl	8000be8 <__aeabi_d2f>
 8006e14:	4603      	mov	r3, r0
 8006e16:	4a08      	ldr	r2, [pc, #32]	@ (8006e38 <getInitialQuaternion+0x274>)
 8006e18:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 8006e1a:	4b07      	ldr	r3, [pc, #28]	@ (8006e38 <getInitialQuaternion+0x274>)
 8006e1c:	f04f 0200 	mov.w	r2, #0
 8006e20:	60da      	str	r2, [r3, #12]
}
 8006e22:	bf00      	nop
 8006e24:	3748      	adds	r7, #72	@ 0x48
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bdb0      	pop	{r4, r5, r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	200006e4 	.word	0x200006e4
 8006e30:	3ff00000 	.word	0x3ff00000
 8006e34:	3fe00000 	.word	0x3fe00000
 8006e38:	20000028 	.word	0x20000028

08006e3c <invSqrt>:

float invSqrt(float x) {
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8006e46:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e4a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006e4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e52:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8006e5a:	f107 0310 	add.w	r3, r7, #16
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	105a      	asrs	r2, r3, #1
 8006e66:	4b12      	ldr	r3, [pc, #72]	@ (8006eb0 <invSqrt+0x74>)
 8006e68:	1a9b      	subs	r3, r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8006e6c:	f107 030c 	add.w	r3, r7, #12
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8006e74:	ed97 7a04 	vldr	s14, [r7, #16]
 8006e78:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e80:	edd7 7a04 	vldr	s15, [r7, #16]
 8006e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e88:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8006e8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006e90:	edd7 7a04 	vldr	s15, [r7, #16]
 8006e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e98:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	ee07 3a90 	vmov	s15, r3
}
 8006ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8006ea6:	371c      	adds	r7, #28
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	5f3759df 	.word	0x5f3759df

08006eb4 <calculate_accel_std_deviation>:
/**
 * @brief İvme değerlerinin standart sapmasını hesapla
 * @return Standart sapma değeri
 */
static float calculate_accel_std_deviation(void)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
    // Buffer dolmadıysa ve çok az veri varsa
    if (!accel_buffer_full && accel_buffer_index < 2) return 0.0f;
 8006eba:	4b3d      	ldr	r3, [pc, #244]	@ (8006fb0 <calculate_accel_std_deviation+0xfc>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d106      	bne.n	8006ed0 <calculate_accel_std_deviation+0x1c>
 8006ec2:	4b3c      	ldr	r3, [pc, #240]	@ (8006fb4 <calculate_accel_std_deviation+0x100>)
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d802      	bhi.n	8006ed0 <calculate_accel_std_deviation+0x1c>
 8006eca:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8006fb8 <calculate_accel_std_deviation+0x104>
 8006ece:	e069      	b.n	8006fa4 <calculate_accel_std_deviation+0xf0>

    int count = accel_buffer_full ? ACCEL_BUFFER_SIZE : accel_buffer_index;
 8006ed0:	4b37      	ldr	r3, [pc, #220]	@ (8006fb0 <calculate_accel_std_deviation+0xfc>)
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d102      	bne.n	8006ede <calculate_accel_std_deviation+0x2a>
 8006ed8:	4b36      	ldr	r3, [pc, #216]	@ (8006fb4 <calculate_accel_std_deviation+0x100>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	e000      	b.n	8006ee0 <calculate_accel_std_deviation+0x2c>
 8006ede:	2305      	movs	r3, #5
 8006ee0:	607b      	str	r3, [r7, #4]
    float sum = 0.0f;
 8006ee2:	f04f 0300 	mov.w	r3, #0
 8006ee6:	617b      	str	r3, [r7, #20]
    float mean = 0.0f;
 8006ee8:	f04f 0300 	mov.w	r3, #0
 8006eec:	603b      	str	r3, [r7, #0]
    float variance = 0.0f;
 8006eee:	f04f 0300 	mov.w	r3, #0
 8006ef2:	613b      	str	r3, [r7, #16]

    // Ortalama hesapla
    for (int i = 0; i < count; i++) {
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	e00e      	b.n	8006f18 <calculate_accel_std_deviation+0x64>
        sum += accel_buffer[i];
 8006efa:	4a30      	ldr	r2, [pc, #192]	@ (8006fbc <calculate_accel_std_deviation+0x108>)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	edd3 7a00 	vldr	s15, [r3]
 8006f06:	ed97 7a05 	vldr	s14, [r7, #20]
 8006f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f0e:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < count; i++) {
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3301      	adds	r3, #1
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	dbec      	blt.n	8006efa <calculate_accel_std_deviation+0x46>
    }
    mean = sum / count;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f2a:	edd7 6a05 	vldr	s13, [r7, #20]
 8006f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f32:	edc7 7a00 	vstr	s15, [r7]

    // Varyans hesapla
    for (int i = 0; i < count; i++) {
 8006f36:	2300      	movs	r3, #0
 8006f38:	60bb      	str	r3, [r7, #8]
 8006f3a:	e01e      	b.n	8006f7a <calculate_accel_std_deviation+0xc6>
        variance += (accel_buffer[i] - mean) * (accel_buffer[i] - mean);
 8006f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8006fbc <calculate_accel_std_deviation+0x108>)
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	ed93 7a00 	vldr	s14, [r3]
 8006f48:	edd7 7a00 	vldr	s15, [r7]
 8006f4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006f50:	4a1a      	ldr	r2, [pc, #104]	@ (8006fbc <calculate_accel_std_deviation+0x108>)
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	edd3 6a00 	vldr	s13, [r3]
 8006f5c:	edd7 7a00 	vldr	s15, [r7]
 8006f60:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f68:	ed97 7a04 	vldr	s14, [r7, #16]
 8006f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f70:	edc7 7a04 	vstr	s15, [r7, #16]
    for (int i = 0; i < count; i++) {
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	3301      	adds	r3, #1
 8006f78:	60bb      	str	r3, [r7, #8]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	dbdc      	blt.n	8006f3c <calculate_accel_std_deviation+0x88>
    }
    variance /= count;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	ee07 3a90 	vmov	s15, r3
 8006f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f8c:	edd7 6a04 	vldr	s13, [r7, #16]
 8006f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f94:	edc7 7a04 	vstr	s15, [r7, #16]

    return sqrtf(variance);
 8006f98:	ed97 0a04 	vldr	s0, [r7, #16]
 8006f9c:	f009 f952 	bl	8010244 <sqrtf>
 8006fa0:	eef0 7a40 	vmov.f32	s15, s0
}
 8006fa4:	eeb0 0a67 	vmov.f32	s0, s15
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	200008e1 	.word	0x200008e1
 8006fb4:	200008e0 	.word	0x200008e0
 8006fb8:	00000000 	.word	0x00000000
 8006fbc:	200008cc 	.word	0x200008cc

08006fc0 <detect_accel_failure>:
 * @brief İvme sensörünün arızalı olup olmadığını kontrol et
 * @param accel İvme değeri (m/s²)
 * @return 1: Arıza tespit edildi, 0: Arıza yok
 */
static uint8_t detect_accel_failure(float accel)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b088      	sub	sp, #32
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	ed87 0a01 	vstr	s0, [r7, #4]
    float accel_abs = fabsf(accel);
 8006fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8006fce:	eef0 7ae7 	vabs.f32	s15, s15
 8006fd2:	edc7 7a05 	vstr	s15, [r7, #20]
    float max_accel, max_std;

    // Buffer güncelleme
    accel_buffer[accel_buffer_index] = accel_abs;
 8006fd6:	4b31      	ldr	r3, [pc, #196]	@ (800709c <detect_accel_failure+0xdc>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	4a31      	ldr	r2, [pc, #196]	@ (80070a0 <detect_accel_failure+0xe0>)
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	601a      	str	r2, [r3, #0]
    accel_buffer_index = (accel_buffer_index + 1) % ACCEL_BUFFER_SIZE;
 8006fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800709c <detect_accel_failure+0xdc>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	1c5a      	adds	r2, r3, #1
 8006fea:	4b2e      	ldr	r3, [pc, #184]	@ (80070a4 <detect_accel_failure+0xe4>)
 8006fec:	fb83 1302 	smull	r1, r3, r3, r2
 8006ff0:	1059      	asrs	r1, r3, #1
 8006ff2:	17d3      	asrs	r3, r2, #31
 8006ff4:	1ac9      	subs	r1, r1, r3
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	1ad1      	subs	r1, r2, r3
 8006ffe:	b2ca      	uxtb	r2, r1
 8007000:	4b26      	ldr	r3, [pc, #152]	@ (800709c <detect_accel_failure+0xdc>)
 8007002:	701a      	strb	r2, [r3, #0]
    if (accel_buffer_index == 0) {
 8007004:	4b25      	ldr	r3, [pc, #148]	@ (800709c <detect_accel_failure+0xdc>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d102      	bne.n	8007012 <detect_accel_failure+0x52>
        accel_buffer_full = 1;
 800700c:	4b26      	ldr	r3, [pc, #152]	@ (80070a8 <detect_accel_failure+0xe8>)
 800700e:	2201      	movs	r2, #1
 8007010:	701a      	strb	r2, [r3, #0]
    }

    // Standart sapma hesapla
    float std_dev = calculate_accel_std_deviation();
 8007012:	f7ff ff4f 	bl	8006eb4 <calculate_accel_std_deviation>
 8007016:	ed87 0a04 	vstr	s0, [r7, #16]

    // Uçuş başlangıç zamanını flight_algorithm'dan al
	uint32_t algorithm_start_time = flight_algorithm_get_start_time();
 800701a:	f7fc f857 	bl	80030cc <flight_algorithm_get_start_time>
 800701e:	60f8      	str	r0, [r7, #12]

	// Uçuş başlamışsa flight_algorithm'dan gelen zamanı kullan
	if (algorithm_start_time > 0) {
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <detect_accel_failure+0x6c>
		flight_start_time = algorithm_start_time;
 8007026:	4a21      	ldr	r2, [pc, #132]	@ (80070ac <detect_accel_failure+0xec>)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6013      	str	r3, [r2, #0]
	}

	// Uçuş fazına göre limit değerlerini belirle
	if (flight_start_time == 0) {
 800702c:	4b1f      	ldr	r3, [pc, #124]	@ (80070ac <detect_accel_failure+0xec>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d104      	bne.n	800703e <detect_accel_failure+0x7e>
		max_accel = 200.0f;  // Yer hazırlığında gerçekçi olmayan çok yüksek değer
 8007034:	4b1e      	ldr	r3, [pc, #120]	@ (80070b0 <detect_accel_failure+0xf0>)
 8007036:	61fb      	str	r3, [r7, #28]
		max_std = 100.0f;    // Yer hazırlığında çok yüksek standart sapma eşiği
 8007038:	4b1e      	ldr	r3, [pc, #120]	@ (80070b4 <detect_accel_failure+0xf4>)
 800703a:	61bb      	str	r3, [r7, #24]
 800703c:	e014      	b.n	8007068 <detect_accel_failure+0xa8>
	}
	else {
		// *** UÇUŞ BAŞLADI - NORMAL ARIZA TESPİTİ ***
		uint32_t flight_elapsed_time = HAL_GetTick() - flight_start_time;
 800703e:	f001 f8f5 	bl	800822c <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	4b19      	ldr	r3, [pc, #100]	@ (80070ac <detect_accel_failure+0xec>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	60bb      	str	r3, [r7, #8]

		if (flight_elapsed_time < THRUST_PHASE_DURATION_MS) {
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8007052:	4293      	cmp	r3, r2
 8007054:	d804      	bhi.n	8007060 <detect_accel_failure+0xa0>
			// İtki fazı - Yüksek limitler
			max_accel = ACCEL_MAX_VALUE_THRUST;
 8007056:	4b18      	ldr	r3, [pc, #96]	@ (80070b8 <detect_accel_failure+0xf8>)
 8007058:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_THRUST;
 800705a:	4b18      	ldr	r3, [pc, #96]	@ (80070bc <detect_accel_failure+0xfc>)
 800705c:	61bb      	str	r3, [r7, #24]
 800705e:	e003      	b.n	8007068 <detect_accel_failure+0xa8>
		} else {
			// Seyir fazı - Düşük limitler
			max_accel = ACCEL_MAX_VALUE_CRUISE;
 8007060:	4b16      	ldr	r3, [pc, #88]	@ (80070bc <detect_accel_failure+0xfc>)
 8007062:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_CRUISE;
 8007064:	4b16      	ldr	r3, [pc, #88]	@ (80070c0 <detect_accel_failure+0x100>)
 8007066:	61bb      	str	r3, [r7, #24]
		}
	}

    // İvme değeri veya standart sapma limitler dışındaysa
    if (accel_abs > max_accel || std_dev > max_std) {
 8007068:	ed97 7a05 	vldr	s14, [r7, #20]
 800706c:	edd7 7a07 	vldr	s15, [r7, #28]
 8007070:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007078:	dc08      	bgt.n	800708c <detect_accel_failure+0xcc>
 800707a:	ed97 7a04 	vldr	s14, [r7, #16]
 800707e:	edd7 7a06 	vldr	s15, [r7, #24]
 8007082:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800708a:	dd01      	ble.n	8007090 <detect_accel_failure+0xd0>
        return 1;  // Arıza tespit edildi
 800708c:	2301      	movs	r3, #1
 800708e:	e000      	b.n	8007092 <detect_accel_failure+0xd2>
    }

    return 0;  // Arıza yok
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3720      	adds	r7, #32
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	200008e0 	.word	0x200008e0
 80070a0:	200008cc 	.word	0x200008cc
 80070a4:	66666667 	.word	0x66666667
 80070a8:	200008e1 	.word	0x200008e1
 80070ac:	200008c8 	.word	0x200008c8
 80070b0:	43480000 	.word	0x43480000
 80070b4:	42c80000 	.word	0x42c80000
 80070b8:	43160000 	.word	0x43160000
 80070bc:	42480000 	.word	0x42480000
 80070c0:	41700000 	.word	0x41700000

080070c4 <sensor_fusion_init>:

/**
 * @brief Initialize the sensor fusion module
 */
void sensor_fusion_init(BME_280_t* BME)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
    KalmanFilter_Init(&kalman);
 80070cc:	481b      	ldr	r0, [pc, #108]	@ (800713c <sensor_fusion_init+0x78>)
 80070ce:	f7fc f87d 	bl	80031cc <KalmanFilter_Init>

    // Sensörlerinize göre gürültü değerlerini ayarlayın
    kalman.process_noise = 0.1f;         // Model gürültüsü
 80070d2:	4b1a      	ldr	r3, [pc, #104]	@ (800713c <sensor_fusion_init+0x78>)
 80070d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007140 <sensor_fusion_init+0x7c>)
 80070d6:	631a      	str	r2, [r3, #48]	@ 0x30
    kalman.measurement_noise_alt = 0.005f;  // BME280 yükseklik gürültüsü
 80070d8:	4b18      	ldr	r3, [pc, #96]	@ (800713c <sensor_fusion_init+0x78>)
 80070da:	4a1a      	ldr	r2, [pc, #104]	@ (8007144 <sensor_fusion_init+0x80>)
 80070dc:	635a      	str	r2, [r3, #52]	@ 0x34
    kalman.measurement_noise_acc = 5.0f;  // BMI088 ivme gürültüsü
 80070de:	4b17      	ldr	r3, [pc, #92]	@ (800713c <sensor_fusion_init+0x78>)
 80070e0:	4a19      	ldr	r2, [pc, #100]	@ (8007148 <sensor_fusion_init+0x84>)
 80070e2:	639a      	str	r2, [r3, #56]	@ 0x38


    // İvme arıza tespit değişkenlerini sıfırla
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 80070e4:	2300      	movs	r3, #0
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	e009      	b.n	80070fe <sensor_fusion_init+0x3a>
        accel_buffer[i] = 0.0f;
 80070ea:	4a18      	ldr	r2, [pc, #96]	@ (800714c <sensor_fusion_init+0x88>)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	f04f 0200 	mov.w	r2, #0
 80070f6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3301      	adds	r3, #1
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2b04      	cmp	r3, #4
 8007102:	ddf2      	ble.n	80070ea <sensor_fusion_init+0x26>
    }
    accel_buffer_index = 0;
 8007104:	4b12      	ldr	r3, [pc, #72]	@ (8007150 <sensor_fusion_init+0x8c>)
 8007106:	2200      	movs	r2, #0
 8007108:	701a      	strb	r2, [r3, #0]
    accel_buffer_full = 0;
 800710a:	4b12      	ldr	r3, [pc, #72]	@ (8007154 <sensor_fusion_init+0x90>)
 800710c:	2200      	movs	r2, #0
 800710e:	701a      	strb	r2, [r3, #0]
    accel_failure_detected = 0;
 8007110:	4b11      	ldr	r3, [pc, #68]	@ (8007158 <sensor_fusion_init+0x94>)
 8007112:	2200      	movs	r2, #0
 8007114:	701a      	strb	r2, [r3, #0]

    initialized = 1;
 8007116:	4b11      	ldr	r3, [pc, #68]	@ (800715c <sensor_fusion_init+0x98>)
 8007118:	2201      	movs	r2, #1
 800711a:	701a      	strb	r2, [r3, #0]
    reference_altitude = BME->base_altitude;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007120:	4a0f      	ldr	r2, [pc, #60]	@ (8007160 <sensor_fusion_init+0x9c>)
 8007122:	6013      	str	r3, [r2, #0]
    last_kalman_update_time = HAL_GetTick();
 8007124:	f001 f882 	bl	800822c <HAL_GetTick>
 8007128:	4603      	mov	r3, r0
 800712a:	4a0e      	ldr	r2, [pc, #56]	@ (8007164 <sensor_fusion_init+0xa0>)
 800712c:	6013      	str	r3, [r2, #0]
    flight_start_time = 0;
 800712e:	4b0e      	ldr	r3, [pc, #56]	@ (8007168 <sensor_fusion_init+0xa4>)
 8007130:	2200      	movs	r2, #0
 8007132:	601a      	str	r2, [r3, #0]
}
 8007134:	bf00      	nop
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	20000870 	.word	0x20000870
 8007140:	3dcccccd 	.word	0x3dcccccd
 8007144:	3ba3d70a 	.word	0x3ba3d70a
 8007148:	40a00000 	.word	0x40a00000
 800714c:	200008cc 	.word	0x200008cc
 8007150:	200008e0 	.word	0x200008e0
 8007154:	200008e1 	.word	0x200008e1
 8007158:	200008e2 	.word	0x200008e2
 800715c:	200008bc 	.word	0x200008bc
 8007160:	200008c0 	.word	0x200008c0
 8007164:	200008c4 	.word	0x200008c4
 8007168:	200008c8 	.word	0x200008c8
 800716c:	00000000 	.word	0x00000000

08007170 <sensor_fusion_update_kalman>:

/**
 * @brief Update sensor fusion with new measurements (Kalman filter)
 */
void sensor_fusion_update_kalman(BME_280_t* BME, bmi088_struct_t* BMI, sensor_fusion_t* sensor)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b08a      	sub	sp, #40	@ 0x28
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
    // Get current time for automatic delta calculation
    uint32_t current_time = HAL_GetTick();
 800717c:	f001 f856 	bl	800822c <HAL_GetTick>
 8007180:	6238      	str	r0, [r7, #32]

    // Calculate time difference in seconds
    float time_sec = (current_time - last_kalman_update_time) / 1000.0f;
 8007182:	4b4b      	ldr	r3, [pc, #300]	@ (80072b0 <sensor_fusion_update_kalman+0x140>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6a3a      	ldr	r2, [r7, #32]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007192:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80072b4 <sensor_fusion_update_kalman+0x144>
 8007196:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800719a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Update the last update time
    last_kalman_update_time = current_time;
 800719e:	4a44      	ldr	r2, [pc, #272]	@ (80072b0 <sensor_fusion_update_kalman+0x140>)
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	6013      	str	r3, [r2, #0]

    float altitude = BME->altitude;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	61fb      	str	r3, [r7, #28]

    // Ensure time is valid (never zero or negative)
    if (time_sec <= 0.001f) {
 80071aa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80071ae:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80072b8 <sensor_fusion_update_kalman+0x148>
 80071b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ba:	d801      	bhi.n	80071c0 <sensor_fusion_update_kalman+0x50>
        time_sec = 0.01f; // Use default time step if invalid
 80071bc:	4b3f      	ldr	r3, [pc, #252]	@ (80072bc <sensor_fusion_update_kalman+0x14c>)
 80071be:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calculate vertical acceleration by compensating for gravity using IMU orientation
    float angle_rad = BMI->datas.theta * (M_PI / 180.0f);  // dereceyse radyana çevir
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7f9 f9df 	bl	8000588 <__aeabi_f2d>
 80071ca:	a335      	add	r3, pc, #212	@ (adr r3, 80072a0 <sensor_fusion_update_kalman+0x130>)
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	f7f9 fa32 	bl	8000638 <__aeabi_dmul>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4610      	mov	r0, r2
 80071da:	4619      	mov	r1, r3
 80071dc:	f7f9 fd04 	bl	8000be8 <__aeabi_d2f>
 80071e0:	4603      	mov	r3, r0
 80071e2:	61bb      	str	r3, [r7, #24]

    // Yerçekimi ivmesinin lokal z eksenindeki bileşeni
    float g_local_z = 9.81f * cos(angle_rad);
 80071e4:	69b8      	ldr	r0, [r7, #24]
 80071e6:	f7f9 f9cf 	bl	8000588 <__aeabi_f2d>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	ec43 2b10 	vmov	d0, r2, r3
 80071f2:	f008 ff79 	bl	80100e8 <cos>
 80071f6:	ec51 0b10 	vmov	r0, r1, d0
 80071fa:	a32b      	add	r3, pc, #172	@ (adr r3, 80072a8 <sensor_fusion_update_kalman+0x138>)
 80071fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007200:	f7f9 fa1a 	bl	8000638 <__aeabi_dmul>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4610      	mov	r0, r2
 800720a:	4619      	mov	r1, r3
 800720c:	f7f9 fcec 	bl	8000be8 <__aeabi_d2f>
 8007210:	4603      	mov	r3, r0
 8007212:	617b      	str	r3, [r7, #20]

    // Gerçek ivmeyi hesapla:
    float accel_z_corrected = BMI->datas.acc_z - g_local_z;
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 800721a:	edd7 7a05 	vldr	s15, [r7, #20]
 800721e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007222:	edc7 7a04 	vstr	s15, [r7, #16]

    // İvme sensörü arıza tespiti
    accel_failure_detected = detect_accel_failure(accel_z_corrected);
 8007226:	ed97 0a04 	vldr	s0, [r7, #16]
 800722a:	f7ff fec9 	bl	8006fc0 <detect_accel_failure>
 800722e:	4603      	mov	r3, r0
 8007230:	461a      	mov	r2, r3
 8007232:	4b23      	ldr	r3, [pc, #140]	@ (80072c0 <sensor_fusion_update_kalman+0x150>)
 8007234:	701a      	strb	r2, [r3, #0]

    // Arıza durumuna göre Kalman filtresi parametrelerini güncelle
    if (accel_failure_detected) {
 8007236:	4b22      	ldr	r3, [pc, #136]	@ (80072c0 <sensor_fusion_update_kalman+0x150>)
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <sensor_fusion_update_kalman+0xd6>
        // Arıza tespit edildi - ivme sensörüne çok az güven
        kalman.measurement_noise_acc = 50.0f;
 800723e:	4b21      	ldr	r3, [pc, #132]	@ (80072c4 <sensor_fusion_update_kalman+0x154>)
 8007240:	4a21      	ldr	r2, [pc, #132]	@ (80072c8 <sensor_fusion_update_kalman+0x158>)
 8007242:	639a      	str	r2, [r3, #56]	@ 0x38
 8007244:	e002      	b.n	800724c <sensor_fusion_update_kalman+0xdc>
    } else {
        // Normal durum - normal güven
        kalman.measurement_noise_acc = 0.3f;
 8007246:	4b1f      	ldr	r3, [pc, #124]	@ (80072c4 <sensor_fusion_update_kalman+0x154>)
 8007248:	4a20      	ldr	r2, [pc, #128]	@ (80072cc <sensor_fusion_update_kalman+0x15c>)
 800724a:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Only update if initialized
    if (initialized) {
 800724c:	4b20      	ldr	r3, [pc, #128]	@ (80072d0 <sensor_fusion_update_kalman+0x160>)
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d020      	beq.n	8007296 <sensor_fusion_update_kalman+0x126>
        sensor->filtered_altitude = KalmanFilter_Update(&kalman, altitude, accel_z_corrected, time_sec);
 8007254:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 8007258:	edd7 0a04 	vldr	s1, [r7, #16]
 800725c:	ed97 0a07 	vldr	s0, [r7, #28]
 8007260:	4818      	ldr	r0, [pc, #96]	@ (80072c4 <sensor_fusion_update_kalman+0x154>)
 8007262:	f7fc f80d 	bl	8003280 <KalmanFilter_Update>
 8007266:	eef0 7a40 	vmov.f32	s15, s0
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	edc3 7a00 	vstr	s15, [r3]
        sensor->apogeeDetect = KalmanFilter_IsApogeeDetected(&kalman);
 8007270:	4814      	ldr	r0, [pc, #80]	@ (80072c4 <sensor_fusion_update_kalman+0x154>)
 8007272:	f7fd f9e9 	bl	8004648 <KalmanFilter_IsApogeeDetected>
 8007276:	4603      	mov	r3, r0
 8007278:	b2da      	uxtb	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	761a      	strb	r2, [r3, #24]
        sensor->velocity = Kalman_Get_Velocity(&kalman);
 800727e:	4811      	ldr	r0, [pc, #68]	@ (80072c4 <sensor_fusion_update_kalman+0x154>)
 8007280:	f7fd f9d3 	bl	800462a <Kalman_Get_Velocity>
 8007284:	eef0 7a40 	vmov.f32	s15, s0
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	edc3 7a01 	vstr	s15, [r3, #4]
            sensor->velocity = (sensor->filtered_altitude - prev_altitude) / time_sec;
        }
        prev_altitude = sensor->filtered_altitude;*/

        // Arıza durumunu sensor yapısına ekleyelim (telemetri için kullanılabilir)
        sensor->accel_failure = accel_failure_detected;
 800728e:	4b0c      	ldr	r3, [pc, #48]	@ (80072c0 <sensor_fusion_update_kalman+0x150>)
 8007290:	781a      	ldrb	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	765a      	strb	r2, [r3, #25]
    }
}
 8007296:	bf00      	nop
 8007298:	3728      	adds	r7, #40	@ 0x28
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	a2529d39 	.word	0xa2529d39
 80072a4:	3f91df46 	.word	0x3f91df46
 80072a8:	60000000 	.word	0x60000000
 80072ac:	40239eb8 	.word	0x40239eb8
 80072b0:	200008c4 	.word	0x200008c4
 80072b4:	447a0000 	.word	0x447a0000
 80072b8:	3a83126f 	.word	0x3a83126f
 80072bc:	3c23d70a 	.word	0x3c23d70a
 80072c0:	200008e2 	.word	0x200008e2
 80072c4:	20000870 	.word	0x20000870
 80072c8:	42480000 	.word	0x42480000
 80072cc:	3e99999a 	.word	0x3e99999a
 80072d0:	200008bc 	.word	0x200008bc

080072d4 <sensor_fusion_update_mahony>:

/**
 * @brief Update orientation using Mahony filter
 */
void sensor_fusion_update_mahony(bmi088_struct_t* BMI, sensor_fusion_t *sensor)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
		sensor->yaw = quaternionToYaw();
		sensor->pitch = quaternionToPitch();
		sensor->roll = quaternionToRoll();
		BMI->isUpdated = 0;
	}*/
}
 80072de:	bf00      	nop
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
	...

080072ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072f2:	2300      	movs	r3, #0
 80072f4:	607b      	str	r3, [r7, #4]
 80072f6:	4b10      	ldr	r3, [pc, #64]	@ (8007338 <HAL_MspInit+0x4c>)
 80072f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072fa:	4a0f      	ldr	r2, [pc, #60]	@ (8007338 <HAL_MspInit+0x4c>)
 80072fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007300:	6453      	str	r3, [r2, #68]	@ 0x44
 8007302:	4b0d      	ldr	r3, [pc, #52]	@ (8007338 <HAL_MspInit+0x4c>)
 8007304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800730a:	607b      	str	r3, [r7, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800730e:	2300      	movs	r3, #0
 8007310:	603b      	str	r3, [r7, #0]
 8007312:	4b09      	ldr	r3, [pc, #36]	@ (8007338 <HAL_MspInit+0x4c>)
 8007314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007316:	4a08      	ldr	r2, [pc, #32]	@ (8007338 <HAL_MspInit+0x4c>)
 8007318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800731c:	6413      	str	r3, [r2, #64]	@ 0x40
 800731e:	4b06      	ldr	r3, [pc, #24]	@ (8007338 <HAL_MspInit+0x4c>)
 8007320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007326:	603b      	str	r3, [r7, #0]
 8007328:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800732a:	bf00      	nop
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	40023800 	.word	0x40023800

0800733c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08c      	sub	sp, #48	@ 0x30
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007344:	f107 031c 	add.w	r3, r7, #28
 8007348:	2200      	movs	r2, #0
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	605a      	str	r2, [r3, #4]
 800734e:	609a      	str	r2, [r3, #8]
 8007350:	60da      	str	r2, [r3, #12]
 8007352:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a5e      	ldr	r2, [pc, #376]	@ (80074d4 <HAL_ADC_MspInit+0x198>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d158      	bne.n	8007410 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800735e:	2300      	movs	r3, #0
 8007360:	61bb      	str	r3, [r7, #24]
 8007362:	4b5d      	ldr	r3, [pc, #372]	@ (80074d8 <HAL_ADC_MspInit+0x19c>)
 8007364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007366:	4a5c      	ldr	r2, [pc, #368]	@ (80074d8 <HAL_ADC_MspInit+0x19c>)
 8007368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800736c:	6453      	str	r3, [r2, #68]	@ 0x44
 800736e:	4b5a      	ldr	r3, [pc, #360]	@ (80074d8 <HAL_ADC_MspInit+0x19c>)
 8007370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007376:	61bb      	str	r3, [r7, #24]
 8007378:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800737a:	2300      	movs	r3, #0
 800737c:	617b      	str	r3, [r7, #20]
 800737e:	4b56      	ldr	r3, [pc, #344]	@ (80074d8 <HAL_ADC_MspInit+0x19c>)
 8007380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007382:	4a55      	ldr	r2, [pc, #340]	@ (80074d8 <HAL_ADC_MspInit+0x19c>)
 8007384:	f043 0302 	orr.w	r3, r3, #2
 8007388:	6313      	str	r3, [r2, #48]	@ 0x30
 800738a:	4b53      	ldr	r3, [pc, #332]	@ (80074d8 <HAL_ADC_MspInit+0x19c>)
 800738c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	617b      	str	r3, [r7, #20]
 8007394:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007396:	2302      	movs	r3, #2
 8007398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800739a:	2303      	movs	r3, #3
 800739c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800739e:	2300      	movs	r3, #0
 80073a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073a2:	f107 031c 	add.w	r3, r7, #28
 80073a6:	4619      	mov	r1, r3
 80073a8:	484c      	ldr	r0, [pc, #304]	@ (80074dc <HAL_ADC_MspInit+0x1a0>)
 80073aa:	f002 f8db 	bl	8009564 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80073ae:	4b4c      	ldr	r3, [pc, #304]	@ (80074e0 <HAL_ADC_MspInit+0x1a4>)
 80073b0:	4a4c      	ldr	r2, [pc, #304]	@ (80074e4 <HAL_ADC_MspInit+0x1a8>)
 80073b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80073b4:	4b4a      	ldr	r3, [pc, #296]	@ (80074e0 <HAL_ADC_MspInit+0x1a4>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80073ba:	4b49      	ldr	r3, [pc, #292]	@ (80074e0 <HAL_ADC_MspInit+0x1a4>)
 80073bc:	2200      	movs	r2, #0
 80073be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80073c0:	4b47      	ldr	r3, [pc, #284]	@ (80074e0 <HAL_ADC_MspInit+0x1a4>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80073c6:	4b46      	ldr	r3, [pc, #280]	@ (80074e0 <HAL_ADC_MspInit+0x1a4>)
 80073c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80073cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80073ce:	4b44      	ldr	r3, [pc, #272]	@ (80074e0 <HAL_ADC_MspInit+0x1a4>)
 80073d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80073d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80073d6:	4b42      	ldr	r3, [pc, #264]	@ (80074e0 <HAL_ADC_MspInit+0x1a4>)
 80073d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80073dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80073de:	4b40      	ldr	r3, [pc, #256]	@ (80074e0 <HAL_ADC_MspInit+0x1a4>)
 80073e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80073e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80073e6:	4b3e      	ldr	r3, [pc, #248]	@ (80074e0 <HAL_ADC_MspInit+0x1a4>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80073ec:	4b3c      	ldr	r3, [pc, #240]	@ (80074e0 <HAL_ADC_MspInit+0x1a4>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80073f2:	483b      	ldr	r0, [pc, #236]	@ (80074e0 <HAL_ADC_MspInit+0x1a4>)
 80073f4:	f001 fcb4 	bl	8008d60 <HAL_DMA_Init>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80073fe:	f7fd ff8b 	bl	8005318 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a36      	ldr	r2, [pc, #216]	@ (80074e0 <HAL_ADC_MspInit+0x1a4>)
 8007406:	639a      	str	r2, [r3, #56]	@ 0x38
 8007408:	4a35      	ldr	r2, [pc, #212]	@ (80074e0 <HAL_ADC_MspInit+0x1a4>)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800740e:	e05d      	b.n	80074cc <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a34      	ldr	r2, [pc, #208]	@ (80074e8 <HAL_ADC_MspInit+0x1ac>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d158      	bne.n	80074cc <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800741a:	2300      	movs	r3, #0
 800741c:	613b      	str	r3, [r7, #16]
 800741e:	4b2e      	ldr	r3, [pc, #184]	@ (80074d8 <HAL_ADC_MspInit+0x19c>)
 8007420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007422:	4a2d      	ldr	r2, [pc, #180]	@ (80074d8 <HAL_ADC_MspInit+0x19c>)
 8007424:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007428:	6453      	str	r3, [r2, #68]	@ 0x44
 800742a:	4b2b      	ldr	r3, [pc, #172]	@ (80074d8 <HAL_ADC_MspInit+0x19c>)
 800742c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800742e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007432:	613b      	str	r3, [r7, #16]
 8007434:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007436:	2300      	movs	r3, #0
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	4b27      	ldr	r3, [pc, #156]	@ (80074d8 <HAL_ADC_MspInit+0x19c>)
 800743c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800743e:	4a26      	ldr	r2, [pc, #152]	@ (80074d8 <HAL_ADC_MspInit+0x19c>)
 8007440:	f043 0302 	orr.w	r3, r3, #2
 8007444:	6313      	str	r3, [r2, #48]	@ 0x30
 8007446:	4b24      	ldr	r3, [pc, #144]	@ (80074d8 <HAL_ADC_MspInit+0x19c>)
 8007448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	60fb      	str	r3, [r7, #12]
 8007450:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007452:	2301      	movs	r3, #1
 8007454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007456:	2303      	movs	r3, #3
 8007458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800745a:	2300      	movs	r3, #0
 800745c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800745e:	f107 031c 	add.w	r3, r7, #28
 8007462:	4619      	mov	r1, r3
 8007464:	481d      	ldr	r0, [pc, #116]	@ (80074dc <HAL_ADC_MspInit+0x1a0>)
 8007466:	f002 f87d 	bl	8009564 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream3;
 800746a:	4b20      	ldr	r3, [pc, #128]	@ (80074ec <HAL_ADC_MspInit+0x1b0>)
 800746c:	4a20      	ldr	r2, [pc, #128]	@ (80074f0 <HAL_ADC_MspInit+0x1b4>)
 800746e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8007470:	4b1e      	ldr	r3, [pc, #120]	@ (80074ec <HAL_ADC_MspInit+0x1b0>)
 8007472:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007476:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007478:	4b1c      	ldr	r3, [pc, #112]	@ (80074ec <HAL_ADC_MspInit+0x1b0>)
 800747a:	2200      	movs	r2, #0
 800747c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800747e:	4b1b      	ldr	r3, [pc, #108]	@ (80074ec <HAL_ADC_MspInit+0x1b0>)
 8007480:	2200      	movs	r2, #0
 8007482:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8007484:	4b19      	ldr	r3, [pc, #100]	@ (80074ec <HAL_ADC_MspInit+0x1b0>)
 8007486:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800748a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800748c:	4b17      	ldr	r3, [pc, #92]	@ (80074ec <HAL_ADC_MspInit+0x1b0>)
 800748e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007492:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007494:	4b15      	ldr	r3, [pc, #84]	@ (80074ec <HAL_ADC_MspInit+0x1b0>)
 8007496:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800749a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800749c:	4b13      	ldr	r3, [pc, #76]	@ (80074ec <HAL_ADC_MspInit+0x1b0>)
 800749e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074a2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80074a4:	4b11      	ldr	r3, [pc, #68]	@ (80074ec <HAL_ADC_MspInit+0x1b0>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80074aa:	4b10      	ldr	r3, [pc, #64]	@ (80074ec <HAL_ADC_MspInit+0x1b0>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80074b0:	480e      	ldr	r0, [pc, #56]	@ (80074ec <HAL_ADC_MspInit+0x1b0>)
 80074b2:	f001 fc55 	bl	8008d60 <HAL_DMA_Init>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 80074bc:	f7fd ff2c 	bl	8005318 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a0a      	ldr	r2, [pc, #40]	@ (80074ec <HAL_ADC_MspInit+0x1b0>)
 80074c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80074c6:	4a09      	ldr	r2, [pc, #36]	@ (80074ec <HAL_ADC_MspInit+0x1b0>)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80074cc:	bf00      	nop
 80074ce:	3730      	adds	r7, #48	@ 0x30
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	40012000 	.word	0x40012000
 80074d8:	40023800 	.word	0x40023800
 80074dc:	40020400 	.word	0x40020400
 80074e0:	20000310 	.word	0x20000310
 80074e4:	40026410 	.word	0x40026410
 80074e8:	40012100 	.word	0x40012100
 80074ec:	20000370 	.word	0x20000370
 80074f0:	40026458 	.word	0x40026458

080074f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08c      	sub	sp, #48	@ 0x30
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074fc:	f107 031c 	add.w	r3, r7, #28
 8007500:	2200      	movs	r2, #0
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	605a      	str	r2, [r3, #4]
 8007506:	609a      	str	r2, [r3, #8]
 8007508:	60da      	str	r2, [r3, #12]
 800750a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a42      	ldr	r2, [pc, #264]	@ (800761c <HAL_I2C_MspInit+0x128>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d12d      	bne.n	8007572 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007516:	2300      	movs	r3, #0
 8007518:	61bb      	str	r3, [r7, #24]
 800751a:	4b41      	ldr	r3, [pc, #260]	@ (8007620 <HAL_I2C_MspInit+0x12c>)
 800751c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751e:	4a40      	ldr	r2, [pc, #256]	@ (8007620 <HAL_I2C_MspInit+0x12c>)
 8007520:	f043 0302 	orr.w	r3, r3, #2
 8007524:	6313      	str	r3, [r2, #48]	@ 0x30
 8007526:	4b3e      	ldr	r3, [pc, #248]	@ (8007620 <HAL_I2C_MspInit+0x12c>)
 8007528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	61bb      	str	r3, [r7, #24]
 8007530:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8007532:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8007536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007538:	2312      	movs	r3, #18
 800753a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800753c:	2300      	movs	r3, #0
 800753e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007540:	2303      	movs	r3, #3
 8007542:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007544:	2304      	movs	r3, #4
 8007546:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007548:	f107 031c 	add.w	r3, r7, #28
 800754c:	4619      	mov	r1, r3
 800754e:	4835      	ldr	r0, [pc, #212]	@ (8007624 <HAL_I2C_MspInit+0x130>)
 8007550:	f002 f808 	bl	8009564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007554:	2300      	movs	r3, #0
 8007556:	617b      	str	r3, [r7, #20]
 8007558:	4b31      	ldr	r3, [pc, #196]	@ (8007620 <HAL_I2C_MspInit+0x12c>)
 800755a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755c:	4a30      	ldr	r2, [pc, #192]	@ (8007620 <HAL_I2C_MspInit+0x12c>)
 800755e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007562:	6413      	str	r3, [r2, #64]	@ 0x40
 8007564:	4b2e      	ldr	r3, [pc, #184]	@ (8007620 <HAL_I2C_MspInit+0x12c>)
 8007566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007568:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800756c:	617b      	str	r3, [r7, #20]
 800756e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8007570:	e050      	b.n	8007614 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a2c      	ldr	r2, [pc, #176]	@ (8007628 <HAL_I2C_MspInit+0x134>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d14b      	bne.n	8007614 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800757c:	2300      	movs	r3, #0
 800757e:	613b      	str	r3, [r7, #16]
 8007580:	4b27      	ldr	r3, [pc, #156]	@ (8007620 <HAL_I2C_MspInit+0x12c>)
 8007582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007584:	4a26      	ldr	r2, [pc, #152]	@ (8007620 <HAL_I2C_MspInit+0x12c>)
 8007586:	f043 0304 	orr.w	r3, r3, #4
 800758a:	6313      	str	r3, [r2, #48]	@ 0x30
 800758c:	4b24      	ldr	r3, [pc, #144]	@ (8007620 <HAL_I2C_MspInit+0x12c>)
 800758e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007590:	f003 0304 	and.w	r3, r3, #4
 8007594:	613b      	str	r3, [r7, #16]
 8007596:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007598:	2300      	movs	r3, #0
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	4b20      	ldr	r3, [pc, #128]	@ (8007620 <HAL_I2C_MspInit+0x12c>)
 800759e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a0:	4a1f      	ldr	r2, [pc, #124]	@ (8007620 <HAL_I2C_MspInit+0x12c>)
 80075a2:	f043 0301 	orr.w	r3, r3, #1
 80075a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80075a8:	4b1d      	ldr	r3, [pc, #116]	@ (8007620 <HAL_I2C_MspInit+0x12c>)
 80075aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	60fb      	str	r3, [r7, #12]
 80075b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80075b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80075ba:	2312      	movs	r3, #18
 80075bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80075be:	2301      	movs	r3, #1
 80075c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075c2:	2303      	movs	r3, #3
 80075c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80075c6:	2304      	movs	r3, #4
 80075c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075ca:	f107 031c 	add.w	r3, r7, #28
 80075ce:	4619      	mov	r1, r3
 80075d0:	4816      	ldr	r0, [pc, #88]	@ (800762c <HAL_I2C_MspInit+0x138>)
 80075d2:	f001 ffc7 	bl	8009564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80075d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80075da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80075dc:	2312      	movs	r3, #18
 80075de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80075e0:	2301      	movs	r3, #1
 80075e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075e4:	2303      	movs	r3, #3
 80075e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80075e8:	2304      	movs	r3, #4
 80075ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075ec:	f107 031c 	add.w	r3, r7, #28
 80075f0:	4619      	mov	r1, r3
 80075f2:	480f      	ldr	r0, [pc, #60]	@ (8007630 <HAL_I2C_MspInit+0x13c>)
 80075f4:	f001 ffb6 	bl	8009564 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80075f8:	2300      	movs	r3, #0
 80075fa:	60bb      	str	r3, [r7, #8]
 80075fc:	4b08      	ldr	r3, [pc, #32]	@ (8007620 <HAL_I2C_MspInit+0x12c>)
 80075fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007600:	4a07      	ldr	r2, [pc, #28]	@ (8007620 <HAL_I2C_MspInit+0x12c>)
 8007602:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007606:	6413      	str	r3, [r2, #64]	@ 0x40
 8007608:	4b05      	ldr	r3, [pc, #20]	@ (8007620 <HAL_I2C_MspInit+0x12c>)
 800760a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007610:	60bb      	str	r3, [r7, #8]
 8007612:	68bb      	ldr	r3, [r7, #8]
}
 8007614:	bf00      	nop
 8007616:	3730      	adds	r7, #48	@ 0x30
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	40005400 	.word	0x40005400
 8007620:	40023800 	.word	0x40023800
 8007624:	40020400 	.word	0x40020400
 8007628:	40005c00 	.word	0x40005c00
 800762c:	40020800 	.word	0x40020800
 8007630:	40020000 	.word	0x40020000

08007634 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a15      	ldr	r2, [pc, #84]	@ (8007698 <HAL_I2C_MspDeInit+0x64>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d10f      	bne.n	8007666 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8007646:	4b15      	ldr	r3, [pc, #84]	@ (800769c <HAL_I2C_MspDeInit+0x68>)
 8007648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764a:	4a14      	ldr	r2, [pc, #80]	@ (800769c <HAL_I2C_MspDeInit+0x68>)
 800764c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007650:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8007652:	2180      	movs	r1, #128	@ 0x80
 8007654:	4812      	ldr	r0, [pc, #72]	@ (80076a0 <HAL_I2C_MspDeInit+0x6c>)
 8007656:	f002 f919 	bl	800988c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800765a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800765e:	4810      	ldr	r0, [pc, #64]	@ (80076a0 <HAL_I2C_MspDeInit+0x6c>)
 8007660:	f002 f914 	bl	800988c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8007664:	e014      	b.n	8007690 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a0e      	ldr	r2, [pc, #56]	@ (80076a4 <HAL_I2C_MspDeInit+0x70>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d10f      	bne.n	8007690 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8007670:	4b0a      	ldr	r3, [pc, #40]	@ (800769c <HAL_I2C_MspDeInit+0x68>)
 8007672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007674:	4a09      	ldr	r2, [pc, #36]	@ (800769c <HAL_I2C_MspDeInit+0x68>)
 8007676:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800767a:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 800767c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007680:	4809      	ldr	r0, [pc, #36]	@ (80076a8 <HAL_I2C_MspDeInit+0x74>)
 8007682:	f002 f903 	bl	800988c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8007686:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800768a:	4808      	ldr	r0, [pc, #32]	@ (80076ac <HAL_I2C_MspDeInit+0x78>)
 800768c:	f002 f8fe 	bl	800988c <HAL_GPIO_DeInit>
}
 8007690:	bf00      	nop
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	40005400 	.word	0x40005400
 800769c:	40023800 	.word	0x40023800
 80076a0:	40020400 	.word	0x40020400
 80076a4:	40005c00 	.word	0x40005c00
 80076a8:	40020800 	.word	0x40020800
 80076ac:	40020000 	.word	0x40020000

080076b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076c0:	d115      	bne.n	80076ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80076c2:	2300      	movs	r3, #0
 80076c4:	60fb      	str	r3, [r7, #12]
 80076c6:	4b0c      	ldr	r3, [pc, #48]	@ (80076f8 <HAL_TIM_Base_MspInit+0x48>)
 80076c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ca:	4a0b      	ldr	r2, [pc, #44]	@ (80076f8 <HAL_TIM_Base_MspInit+0x48>)
 80076cc:	f043 0301 	orr.w	r3, r3, #1
 80076d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80076d2:	4b09      	ldr	r3, [pc, #36]	@ (80076f8 <HAL_TIM_Base_MspInit+0x48>)
 80076d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80076de:	2200      	movs	r2, #0
 80076e0:	2100      	movs	r1, #0
 80076e2:	201c      	movs	r0, #28
 80076e4:	f001 faf7 	bl	8008cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80076e8:	201c      	movs	r0, #28
 80076ea:	f001 fb10 	bl	8008d0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80076ee:	bf00      	nop
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	40023800 	.word	0x40023800

080076fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b092      	sub	sp, #72	@ 0x48
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007704:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	605a      	str	r2, [r3, #4]
 800770e:	609a      	str	r2, [r3, #8]
 8007710:	60da      	str	r2, [r3, #12]
 8007712:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a9c      	ldr	r2, [pc, #624]	@ (800798c <HAL_UART_MspInit+0x290>)
 800771a:	4293      	cmp	r3, r2
 800771c:	f040 8094 	bne.w	8007848 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007720:	2300      	movs	r3, #0
 8007722:	633b      	str	r3, [r7, #48]	@ 0x30
 8007724:	4b9a      	ldr	r3, [pc, #616]	@ (8007990 <HAL_UART_MspInit+0x294>)
 8007726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007728:	4a99      	ldr	r2, [pc, #612]	@ (8007990 <HAL_UART_MspInit+0x294>)
 800772a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800772e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007730:	4b97      	ldr	r3, [pc, #604]	@ (8007990 <HAL_UART_MspInit+0x294>)
 8007732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007734:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007738:	633b      	str	r3, [r7, #48]	@ 0x30
 800773a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800773c:	2300      	movs	r3, #0
 800773e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007740:	4b93      	ldr	r3, [pc, #588]	@ (8007990 <HAL_UART_MspInit+0x294>)
 8007742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007744:	4a92      	ldr	r2, [pc, #584]	@ (8007990 <HAL_UART_MspInit+0x294>)
 8007746:	f043 0304 	orr.w	r3, r3, #4
 800774a:	6313      	str	r3, [r2, #48]	@ 0x30
 800774c:	4b90      	ldr	r3, [pc, #576]	@ (8007990 <HAL_UART_MspInit+0x294>)
 800774e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007750:	f003 0304 	and.w	r3, r3, #4
 8007754:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007758:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800775c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800775e:	2302      	movs	r3, #2
 8007760:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007762:	2300      	movs	r3, #0
 8007764:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007766:	2303      	movs	r3, #3
 8007768:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800776a:	2308      	movs	r3, #8
 800776c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800776e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007772:	4619      	mov	r1, r3
 8007774:	4887      	ldr	r0, [pc, #540]	@ (8007994 <HAL_UART_MspInit+0x298>)
 8007776:	f001 fef5 	bl	8009564 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800777a:	4b87      	ldr	r3, [pc, #540]	@ (8007998 <HAL_UART_MspInit+0x29c>)
 800777c:	4a87      	ldr	r2, [pc, #540]	@ (800799c <HAL_UART_MspInit+0x2a0>)
 800777e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8007780:	4b85      	ldr	r3, [pc, #532]	@ (8007998 <HAL_UART_MspInit+0x29c>)
 8007782:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007786:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007788:	4b83      	ldr	r3, [pc, #524]	@ (8007998 <HAL_UART_MspInit+0x29c>)
 800778a:	2200      	movs	r2, #0
 800778c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800778e:	4b82      	ldr	r3, [pc, #520]	@ (8007998 <HAL_UART_MspInit+0x29c>)
 8007790:	2200      	movs	r2, #0
 8007792:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007794:	4b80      	ldr	r3, [pc, #512]	@ (8007998 <HAL_UART_MspInit+0x29c>)
 8007796:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800779a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800779c:	4b7e      	ldr	r3, [pc, #504]	@ (8007998 <HAL_UART_MspInit+0x29c>)
 800779e:	2200      	movs	r2, #0
 80077a0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80077a2:	4b7d      	ldr	r3, [pc, #500]	@ (8007998 <HAL_UART_MspInit+0x29c>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80077a8:	4b7b      	ldr	r3, [pc, #492]	@ (8007998 <HAL_UART_MspInit+0x29c>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80077ae:	4b7a      	ldr	r3, [pc, #488]	@ (8007998 <HAL_UART_MspInit+0x29c>)
 80077b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80077b4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80077b6:	4b78      	ldr	r3, [pc, #480]	@ (8007998 <HAL_UART_MspInit+0x29c>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80077bc:	4876      	ldr	r0, [pc, #472]	@ (8007998 <HAL_UART_MspInit+0x29c>)
 80077be:	f001 facf 	bl	8008d60 <HAL_DMA_Init>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80077c8:	f7fd fda6 	bl	8005318 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a72      	ldr	r2, [pc, #456]	@ (8007998 <HAL_UART_MspInit+0x29c>)
 80077d0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80077d2:	4a71      	ldr	r2, [pc, #452]	@ (8007998 <HAL_UART_MspInit+0x29c>)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80077d8:	4b71      	ldr	r3, [pc, #452]	@ (80079a0 <HAL_UART_MspInit+0x2a4>)
 80077da:	4a72      	ldr	r2, [pc, #456]	@ (80079a4 <HAL_UART_MspInit+0x2a8>)
 80077dc:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80077de:	4b70      	ldr	r3, [pc, #448]	@ (80079a0 <HAL_UART_MspInit+0x2a4>)
 80077e0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80077e4:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80077e6:	4b6e      	ldr	r3, [pc, #440]	@ (80079a0 <HAL_UART_MspInit+0x2a4>)
 80077e8:	2240      	movs	r2, #64	@ 0x40
 80077ea:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80077ec:	4b6c      	ldr	r3, [pc, #432]	@ (80079a0 <HAL_UART_MspInit+0x2a4>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80077f2:	4b6b      	ldr	r3, [pc, #428]	@ (80079a0 <HAL_UART_MspInit+0x2a4>)
 80077f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80077f8:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80077fa:	4b69      	ldr	r3, [pc, #420]	@ (80079a0 <HAL_UART_MspInit+0x2a4>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007800:	4b67      	ldr	r3, [pc, #412]	@ (80079a0 <HAL_UART_MspInit+0x2a4>)
 8007802:	2200      	movs	r2, #0
 8007804:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8007806:	4b66      	ldr	r3, [pc, #408]	@ (80079a0 <HAL_UART_MspInit+0x2a4>)
 8007808:	2200      	movs	r2, #0
 800780a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800780c:	4b64      	ldr	r3, [pc, #400]	@ (80079a0 <HAL_UART_MspInit+0x2a4>)
 800780e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007812:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007814:	4b62      	ldr	r3, [pc, #392]	@ (80079a0 <HAL_UART_MspInit+0x2a4>)
 8007816:	2200      	movs	r2, #0
 8007818:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800781a:	4861      	ldr	r0, [pc, #388]	@ (80079a0 <HAL_UART_MspInit+0x2a4>)
 800781c:	f001 faa0 	bl	8008d60 <HAL_DMA_Init>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8007826:	f7fd fd77 	bl	8005318 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a5c      	ldr	r2, [pc, #368]	@ (80079a0 <HAL_UART_MspInit+0x2a4>)
 800782e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007830:	4a5b      	ldr	r2, [pc, #364]	@ (80079a0 <HAL_UART_MspInit+0x2a4>)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8007836:	2200      	movs	r2, #0
 8007838:	2100      	movs	r1, #0
 800783a:	2034      	movs	r0, #52	@ 0x34
 800783c:	f001 fa4b 	bl	8008cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8007840:	2034      	movs	r0, #52	@ 0x34
 8007842:	f001 fa64 	bl	8008d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007846:	e0ea      	b.n	8007a1e <HAL_UART_MspInit+0x322>
  else if(huart->Instance==UART5)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a56      	ldr	r2, [pc, #344]	@ (80079a8 <HAL_UART_MspInit+0x2ac>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d14b      	bne.n	80078ea <HAL_UART_MspInit+0x1ee>
    __HAL_RCC_UART5_CLK_ENABLE();
 8007852:	2300      	movs	r3, #0
 8007854:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007856:	4b4e      	ldr	r3, [pc, #312]	@ (8007990 <HAL_UART_MspInit+0x294>)
 8007858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800785a:	4a4d      	ldr	r2, [pc, #308]	@ (8007990 <HAL_UART_MspInit+0x294>)
 800785c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007860:	6413      	str	r3, [r2, #64]	@ 0x40
 8007862:	4b4b      	ldr	r3, [pc, #300]	@ (8007990 <HAL_UART_MspInit+0x294>)
 8007864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800786a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800786c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800786e:	2300      	movs	r3, #0
 8007870:	627b      	str	r3, [r7, #36]	@ 0x24
 8007872:	4b47      	ldr	r3, [pc, #284]	@ (8007990 <HAL_UART_MspInit+0x294>)
 8007874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007876:	4a46      	ldr	r2, [pc, #280]	@ (8007990 <HAL_UART_MspInit+0x294>)
 8007878:	f043 0304 	orr.w	r3, r3, #4
 800787c:	6313      	str	r3, [r2, #48]	@ 0x30
 800787e:	4b44      	ldr	r3, [pc, #272]	@ (8007990 <HAL_UART_MspInit+0x294>)
 8007880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007882:	f003 0304 	and.w	r3, r3, #4
 8007886:	627b      	str	r3, [r7, #36]	@ 0x24
 8007888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800788a:	2300      	movs	r3, #0
 800788c:	623b      	str	r3, [r7, #32]
 800788e:	4b40      	ldr	r3, [pc, #256]	@ (8007990 <HAL_UART_MspInit+0x294>)
 8007890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007892:	4a3f      	ldr	r2, [pc, #252]	@ (8007990 <HAL_UART_MspInit+0x294>)
 8007894:	f043 0308 	orr.w	r3, r3, #8
 8007898:	6313      	str	r3, [r2, #48]	@ 0x30
 800789a:	4b3d      	ldr	r3, [pc, #244]	@ (8007990 <HAL_UART_MspInit+0x294>)
 800789c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800789e:	f003 0308 	and.w	r3, r3, #8
 80078a2:	623b      	str	r3, [r7, #32]
 80078a4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80078a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80078aa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078ac:	2302      	movs	r3, #2
 80078ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078b0:	2300      	movs	r3, #0
 80078b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078b4:	2303      	movs	r3, #3
 80078b6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80078b8:	2308      	movs	r3, #8
 80078ba:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80078c0:	4619      	mov	r1, r3
 80078c2:	4834      	ldr	r0, [pc, #208]	@ (8007994 <HAL_UART_MspInit+0x298>)
 80078c4:	f001 fe4e 	bl	8009564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80078c8:	2304      	movs	r3, #4
 80078ca:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078cc:	2302      	movs	r3, #2
 80078ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d0:	2300      	movs	r3, #0
 80078d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078d4:	2303      	movs	r3, #3
 80078d6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80078d8:	2308      	movs	r3, #8
 80078da:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80078dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80078e0:	4619      	mov	r1, r3
 80078e2:	4832      	ldr	r0, [pc, #200]	@ (80079ac <HAL_UART_MspInit+0x2b0>)
 80078e4:	f001 fe3e 	bl	8009564 <HAL_GPIO_Init>
}
 80078e8:	e099      	b.n	8007a1e <HAL_UART_MspInit+0x322>
  else if(huart->Instance==USART1)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a30      	ldr	r2, [pc, #192]	@ (80079b0 <HAL_UART_MspInit+0x2b4>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d163      	bne.n	80079bc <HAL_UART_MspInit+0x2c0>
    __HAL_RCC_USART1_CLK_ENABLE();
 80078f4:	2300      	movs	r3, #0
 80078f6:	61fb      	str	r3, [r7, #28]
 80078f8:	4b25      	ldr	r3, [pc, #148]	@ (8007990 <HAL_UART_MspInit+0x294>)
 80078fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078fc:	4a24      	ldr	r2, [pc, #144]	@ (8007990 <HAL_UART_MspInit+0x294>)
 80078fe:	f043 0310 	orr.w	r3, r3, #16
 8007902:	6453      	str	r3, [r2, #68]	@ 0x44
 8007904:	4b22      	ldr	r3, [pc, #136]	@ (8007990 <HAL_UART_MspInit+0x294>)
 8007906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007908:	f003 0310 	and.w	r3, r3, #16
 800790c:	61fb      	str	r3, [r7, #28]
 800790e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007910:	2300      	movs	r3, #0
 8007912:	61bb      	str	r3, [r7, #24]
 8007914:	4b1e      	ldr	r3, [pc, #120]	@ (8007990 <HAL_UART_MspInit+0x294>)
 8007916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007918:	4a1d      	ldr	r2, [pc, #116]	@ (8007990 <HAL_UART_MspInit+0x294>)
 800791a:	f043 0301 	orr.w	r3, r3, #1
 800791e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007920:	4b1b      	ldr	r3, [pc, #108]	@ (8007990 <HAL_UART_MspInit+0x294>)
 8007922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	61bb      	str	r3, [r7, #24]
 800792a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800792c:	2300      	movs	r3, #0
 800792e:	617b      	str	r3, [r7, #20]
 8007930:	4b17      	ldr	r3, [pc, #92]	@ (8007990 <HAL_UART_MspInit+0x294>)
 8007932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007934:	4a16      	ldr	r2, [pc, #88]	@ (8007990 <HAL_UART_MspInit+0x294>)
 8007936:	f043 0302 	orr.w	r3, r3, #2
 800793a:	6313      	str	r3, [r2, #48]	@ 0x30
 800793c:	4b14      	ldr	r3, [pc, #80]	@ (8007990 <HAL_UART_MspInit+0x294>)
 800793e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007940:	f003 0302 	and.w	r3, r3, #2
 8007944:	617b      	str	r3, [r7, #20]
 8007946:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007948:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800794c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800794e:	2302      	movs	r3, #2
 8007950:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007952:	2300      	movs	r3, #0
 8007954:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007956:	2303      	movs	r3, #3
 8007958:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800795a:	2307      	movs	r3, #7
 800795c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800795e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007962:	4619      	mov	r1, r3
 8007964:	4813      	ldr	r0, [pc, #76]	@ (80079b4 <HAL_UART_MspInit+0x2b8>)
 8007966:	f001 fdfd 	bl	8009564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800796a:	2340      	movs	r3, #64	@ 0x40
 800796c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800796e:	2302      	movs	r3, #2
 8007970:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007972:	2300      	movs	r3, #0
 8007974:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007976:	2303      	movs	r3, #3
 8007978:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800797a:	2307      	movs	r3, #7
 800797c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800797e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007982:	4619      	mov	r1, r3
 8007984:	480c      	ldr	r0, [pc, #48]	@ (80079b8 <HAL_UART_MspInit+0x2bc>)
 8007986:	f001 fded 	bl	8009564 <HAL_GPIO_Init>
}
 800798a:	e048      	b.n	8007a1e <HAL_UART_MspInit+0x322>
 800798c:	40004c00 	.word	0x40004c00
 8007990:	40023800 	.word	0x40023800
 8007994:	40020800 	.word	0x40020800
 8007998:	200005e0 	.word	0x200005e0
 800799c:	40026040 	.word	0x40026040
 80079a0:	20000640 	.word	0x20000640
 80079a4:	40026070 	.word	0x40026070
 80079a8:	40005000 	.word	0x40005000
 80079ac:	40020c00 	.word	0x40020c00
 80079b0:	40011000 	.word	0x40011000
 80079b4:	40020000 	.word	0x40020000
 80079b8:	40020400 	.word	0x40020400
  else if(huart->Instance==USART2)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a19      	ldr	r2, [pc, #100]	@ (8007a28 <HAL_UART_MspInit+0x32c>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d12b      	bne.n	8007a1e <HAL_UART_MspInit+0x322>
    __HAL_RCC_USART2_CLK_ENABLE();
 80079c6:	2300      	movs	r3, #0
 80079c8:	613b      	str	r3, [r7, #16]
 80079ca:	4b18      	ldr	r3, [pc, #96]	@ (8007a2c <HAL_UART_MspInit+0x330>)
 80079cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ce:	4a17      	ldr	r2, [pc, #92]	@ (8007a2c <HAL_UART_MspInit+0x330>)
 80079d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80079d6:	4b15      	ldr	r3, [pc, #84]	@ (8007a2c <HAL_UART_MspInit+0x330>)
 80079d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079de:	613b      	str	r3, [r7, #16]
 80079e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079e2:	2300      	movs	r3, #0
 80079e4:	60fb      	str	r3, [r7, #12]
 80079e6:	4b11      	ldr	r3, [pc, #68]	@ (8007a2c <HAL_UART_MspInit+0x330>)
 80079e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ea:	4a10      	ldr	r2, [pc, #64]	@ (8007a2c <HAL_UART_MspInit+0x330>)
 80079ec:	f043 0301 	orr.w	r3, r3, #1
 80079f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80079f2:	4b0e      	ldr	r3, [pc, #56]	@ (8007a2c <HAL_UART_MspInit+0x330>)
 80079f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	60fb      	str	r3, [r7, #12]
 80079fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80079fe:	230c      	movs	r3, #12
 8007a00:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a02:	2302      	movs	r3, #2
 8007a04:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a06:	2300      	movs	r3, #0
 8007a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007a0e:	2307      	movs	r3, #7
 8007a10:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a12:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007a16:	4619      	mov	r1, r3
 8007a18:	4805      	ldr	r0, [pc, #20]	@ (8007a30 <HAL_UART_MspInit+0x334>)
 8007a1a:	f001 fda3 	bl	8009564 <HAL_GPIO_Init>
}
 8007a1e:	bf00      	nop
 8007a20:	3748      	adds	r7, #72	@ 0x48
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	40004400 	.word	0x40004400
 8007a2c:	40023800 	.word	0x40023800
 8007a30:	40020000 	.word	0x40020000

08007a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007a34:	b480      	push	{r7}
 8007a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007a38:	bf00      	nop
 8007a3a:	e7fd      	b.n	8007a38 <NMI_Handler+0x4>

08007a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007a40:	bf00      	nop
 8007a42:	e7fd      	b.n	8007a40 <HardFault_Handler+0x4>

08007a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007a44:	b480      	push	{r7}
 8007a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007a48:	bf00      	nop
 8007a4a:	e7fd      	b.n	8007a48 <MemManage_Handler+0x4>

08007a4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007a50:	bf00      	nop
 8007a52:	e7fd      	b.n	8007a50 <BusFault_Handler+0x4>

08007a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007a54:	b480      	push	{r7}
 8007a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007a58:	bf00      	nop
 8007a5a:	e7fd      	b.n	8007a58 <UsageFault_Handler+0x4>

08007a5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007a60:	bf00      	nop
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007a6e:	bf00      	nop
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007a7c:	bf00      	nop
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007a8a:	f000 fbbb 	bl	8008204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007a8e:	bf00      	nop
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8007a98:	4802      	ldr	r0, [pc, #8]	@ (8007aa4 <DMA1_Stream2_IRQHandler+0x10>)
 8007a9a:	f001 faf9 	bl	8009090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8007a9e:	bf00      	nop
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	200005e0 	.word	0x200005e0

08007aa8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8007aac:	4802      	ldr	r0, [pc, #8]	@ (8007ab8 <DMA1_Stream4_IRQHandler+0x10>)
 8007aae:	f001 faef 	bl	8009090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8007ab2:	bf00      	nop
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	20000640 	.word	0x20000640

08007abc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007ac0:	4802      	ldr	r0, [pc, #8]	@ (8007acc <TIM2_IRQHandler+0x10>)
 8007ac2:	f003 ff1d 	bl	800b900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007ac6:	bf00      	nop
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20000478 	.word	0x20000478

08007ad0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8007ad4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007ad8:	f001 fffe 	bl	8009ad8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007adc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007ae0:	f001 fffa 	bl	8009ad8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007ae4:	bf00      	nop
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007aec:	4802      	ldr	r0, [pc, #8]	@ (8007af8 <UART4_IRQHandler+0x10>)
 8007aee:	f004 fc69 	bl	800c3c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8007af2:	bf00      	nop
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	200004c0 	.word	0x200004c0

08007afc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007b00:	4802      	ldr	r0, [pc, #8]	@ (8007b0c <DMA2_Stream0_IRQHandler+0x10>)
 8007b02:	f001 fac5 	bl	8009090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007b06:	bf00      	nop
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20000310 	.word	0x20000310

08007b10 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007b14:	4802      	ldr	r0, [pc, #8]	@ (8007b20 <DMA2_Stream3_IRQHandler+0x10>)
 8007b16:	f001 fabb 	bl	8009090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007b1a:	bf00      	nop
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000370 	.word	0x20000370

08007b24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007b24:	b480      	push	{r7}
 8007b26:	af00      	add	r7, sp, #0
  return 1;
 8007b28:	2301      	movs	r3, #1
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <_kill>:

int _kill(int pid, int sig)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007b3e:	f006 fc3b 	bl	800e3b8 <__errno>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2216      	movs	r2, #22
 8007b46:	601a      	str	r2, [r3, #0]
  return -1;
 8007b48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <_exit>:

void _exit (int status)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7ff ffe7 	bl	8007b34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007b66:	bf00      	nop
 8007b68:	e7fd      	b.n	8007b66 <_exit+0x12>

08007b6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b086      	sub	sp, #24
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	60b9      	str	r1, [r7, #8]
 8007b74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b76:	2300      	movs	r3, #0
 8007b78:	617b      	str	r3, [r7, #20]
 8007b7a:	e00a      	b.n	8007b92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007b7c:	f3af 8000 	nop.w
 8007b80:	4601      	mov	r1, r0
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	1c5a      	adds	r2, r3, #1
 8007b86:	60ba      	str	r2, [r7, #8]
 8007b88:	b2ca      	uxtb	r2, r1
 8007b8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	617b      	str	r3, [r7, #20]
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	dbf0      	blt.n	8007b7c <_read+0x12>
  }

  return len;
 8007b9a:	687b      	ldr	r3, [r7, #4]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3718      	adds	r7, #24
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	e009      	b.n	8007bca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	60ba      	str	r2, [r7, #8]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	617b      	str	r3, [r7, #20]
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	dbf1      	blt.n	8007bb6 <_write+0x12>
  }
  return len;
 8007bd2:	687b      	ldr	r3, [r7, #4]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3718      	adds	r7, #24
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <_close>:

int _close(int file)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007c04:	605a      	str	r2, [r3, #4]
  return 0;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <_isatty>:

int _isatty(int file)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007c1c:	2301      	movs	r3, #1
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b085      	sub	sp, #20
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	60b9      	str	r1, [r7, #8]
 8007c34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007c4c:	4a14      	ldr	r2, [pc, #80]	@ (8007ca0 <_sbrk+0x5c>)
 8007c4e:	4b15      	ldr	r3, [pc, #84]	@ (8007ca4 <_sbrk+0x60>)
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007c58:	4b13      	ldr	r3, [pc, #76]	@ (8007ca8 <_sbrk+0x64>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d102      	bne.n	8007c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007c60:	4b11      	ldr	r3, [pc, #68]	@ (8007ca8 <_sbrk+0x64>)
 8007c62:	4a12      	ldr	r2, [pc, #72]	@ (8007cac <_sbrk+0x68>)
 8007c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007c66:	4b10      	ldr	r3, [pc, #64]	@ (8007ca8 <_sbrk+0x64>)
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	693a      	ldr	r2, [r7, #16]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d207      	bcs.n	8007c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007c74:	f006 fba0 	bl	800e3b8 <__errno>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	220c      	movs	r2, #12
 8007c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c82:	e009      	b.n	8007c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007c84:	4b08      	ldr	r3, [pc, #32]	@ (8007ca8 <_sbrk+0x64>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007c8a:	4b07      	ldr	r3, [pc, #28]	@ (8007ca8 <_sbrk+0x64>)
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4413      	add	r3, r2
 8007c92:	4a05      	ldr	r2, [pc, #20]	@ (8007ca8 <_sbrk+0x64>)
 8007c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007c96:	68fb      	ldr	r3, [r7, #12]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20020000 	.word	0x20020000
 8007ca4:	00000400 	.word	0x00000400
 8007ca8:	200008e4 	.word	0x200008e4
 8007cac:	20000a68 	.word	0x20000a68

08007cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007cb4:	4b06      	ldr	r3, [pc, #24]	@ (8007cd0 <SystemInit+0x20>)
 8007cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cba:	4a05      	ldr	r2, [pc, #20]	@ (8007cd0 <SystemInit+0x20>)
 8007cbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007cc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007cc4:	bf00      	nop
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	e000ed00 	.word	0xe000ed00

08007cd4 <test_modes_handle_sit>:

/**
 * @brief Handle SIT (Sensor Interface Test) mode
 */
void test_modes_handle_sit(BME_280_t* bme, bmi088_struct_t* bmi)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
	addDataPacketSit(bme, bmi);
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7fd fb71 	bl	80053c8 <addDataPacketSit>
    if (!usart4_tx_busy) {
 8007ce6:	4b06      	ldr	r3, [pc, #24]	@ (8007d00 <test_modes_handle_sit+0x2c>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d103      	bne.n	8007cf8 <test_modes_handle_sit+0x24>
        uart4_send_packet_dma((uint8_t*)sit_paket, 36);
 8007cf0:	2124      	movs	r1, #36	@ 0x24
 8007cf2:	4804      	ldr	r0, [pc, #16]	@ (8007d04 <test_modes_handle_sit+0x30>)
 8007cf4:	f7fd fa8a 	bl	800520c <uart4_send_packet_dma>
    	//HAL_UART_Transmit(&huart4, (uint8_t*)sit_paket, 36, 100);
    }
}
 8007cf8:	bf00      	nop
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	200007e5 	.word	0x200007e5
 8007d04:	200007f0 	.word	0x200007f0

08007d08 <algorithm_update_sut>:


void algorithm_update_sut(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b08a      	sub	sp, #40	@ 0x28
 8007d0c:	af00      	add	r7, sp, #0
    // Check if SUT data is ready
    if (uart_handler_sut_data_ready()) {
 8007d0e:	f000 f989 	bl	8008024 <uart_handler_sut_data_ready>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d013      	beq.n	8007d40 <algorithm_update_sut+0x38>
        uart_handler_clear_sut_flag();
 8007d18:	f000 f9b2 	bl	8008080 <uart_handler_clear_sut_flag>

        sut_data_t sut_data;
        if (uart_handler_get_sut_data(&sut_data)) {
 8007d1c:	1d3b      	adds	r3, r7, #4
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 f98c 	bl	800803c <uart_handler_get_sut_data>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00a      	beq.n	8007d40 <algorithm_update_sut+0x38>
            // Process SUT data through test modes handler
            uint16_t status_bits = test_modes_handle_sut(&sut_data, &sensor_output);
 8007d2a:	1d3b      	adds	r3, r7, #4
 8007d2c:	4906      	ldr	r1, [pc, #24]	@ (8007d48 <algorithm_update_sut+0x40>)
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 f80c 	bl	8007d4c <test_modes_handle_sut>
 8007d34:	4603      	mov	r3, r0
 8007d36:	84fb      	strh	r3, [r7, #38]	@ 0x26
            uart_handler_send_status(status_bits);
 8007d38:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 f9ac 	bl	8008098 <uart_handler_send_status>
        }
    }
}
 8007d40:	bf00      	nop
 8007d42:	3728      	adds	r7, #40	@ 0x28
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	20000764 	.word	0x20000764

08007d4c <test_modes_handle_sut>:

/**
 * @brief Handle SUT (System Under Test) mode
 */
uint16_t test_modes_handle_sut(sut_data_t* sut_data, sensor_fusion_t* sensor_output)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b0b4      	sub	sp, #208	@ 0xd0
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
    // Convert SUT data to BME and BMI structures
    BME_280_t bme_sut = {0};
 8007d56:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8007d5a:	2244      	movs	r2, #68	@ 0x44
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f006 fac7 	bl	800e2f2 <memset>
    bmi088_struct_t bmi_sut = {0};
 8007d64:	f107 0308 	add.w	r3, r7, #8
 8007d68:	2280      	movs	r2, #128	@ 0x80
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f006 fac0 	bl	800e2f2 <memset>

    // Fill BME data
    bme_sut.altitude = sut_data->altitude;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    bme_sut.pressure = sut_data->pressure;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    // Fill BMI data
    bmi_sut.datas.acc_x = sut_data->acc_x;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	663b      	str	r3, [r7, #96]	@ 0x60
    bmi_sut.datas.acc_y = sut_data->acc_y;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	667b      	str	r3, [r7, #100]	@ 0x64
    bmi_sut.datas.acc_z = sut_data->acc_z;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	66bb      	str	r3, [r7, #104]	@ 0x68
    bmi_sut.datas.gyro_x = sut_data->gyro_x;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	623b      	str	r3, [r7, #32]
    bmi_sut.datas.angle_y = sut_data->gyro_y;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	633b      	str	r3, [r7, #48]	@ 0x30
    bmi_sut.datas.gyro_z = sut_data->gyro_z;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	69db      	ldr	r3, [r3, #28]
 8007da4:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Process synthetic data through sensor fusion first
    //sensor_fusion_update_mahony(&bmi_sut, sensor_output);
	sensor_fusion_update_kalman(&bme_sut, &bmi_sut, sensor_output);
 8007da6:	f107 0108 	add.w	r1, r7, #8
 8007daa:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7ff f9dd 	bl	8007170 <sensor_fusion_update_kalman>

    // Then run flight algorithm with fused data
    flight_algorithm_update(&bme_sut, &bmi_sut, sensor_output);
 8007db6:	f107 0108 	add.w	r1, r7, #8
 8007dba:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7fa fffb 	bl	8002dbc <flight_algorithm_update>
    uint16_t status_bits = flight_algorithm_get_status_bits();
 8007dc6:	f7fb f94f 	bl	8003068 <flight_algorithm_get_status_bits>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce

    return status_bits;
 8007dd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	37d0      	adds	r7, #208	@ 0xd0
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <uart_handler_init>:

/**
 * @brief Initialize UART handler
 */
void uart_handler_init(void)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	af00      	add	r7, sp, #0
    current_mode = MODE_NORMAL;
 8007de0:	4b07      	ldr	r3, [pc, #28]	@ (8007e00 <uart_handler_init+0x24>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	701a      	strb	r2, [r3, #0]
    command_packet_ready = 0;
 8007de6:	4b07      	ldr	r3, [pc, #28]	@ (8007e04 <uart_handler_init+0x28>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	701a      	strb	r2, [r3, #0]
    sut_packet_ready = 0;
 8007dec:	4b06      	ldr	r3, [pc, #24]	@ (8007e08 <uart_handler_init+0x2c>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	701a      	strb	r2, [r3, #0]
    memset(&latest_sut_data, 0, sizeof(latest_sut_data));
 8007df2:	2220      	movs	r2, #32
 8007df4:	2100      	movs	r1, #0
 8007df6:	4805      	ldr	r0, [pc, #20]	@ (8007e0c <uart_handler_init+0x30>)
 8007df8:	f006 fa7b 	bl	800e2f2 <memset>
}
 8007dfc:	bf00      	nop
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	200008e8 	.word	0x200008e8
 8007e04:	200008e9 	.word	0x200008e9
 8007e08:	200008ea 	.word	0x200008ea
 8007e0c:	200008ec 	.word	0x200008ec

08007e10 <uart_handler_process_packets>:

/**
 * @brief Process incoming UART packets (call from main loop)
 */
void uart_handler_process_packets(void)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	af00      	add	r7, sp, #0
    if (usart4_packet_ready) {
 8007e14:	4b14      	ldr	r3, [pc, #80]	@ (8007e68 <uart_handler_process_packets+0x58>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d021      	beq.n	8007e62 <uart_handler_process_packets+0x52>
        usart4_packet_ready = 0; // Clear flag immediately
 8007e1e:	4b12      	ldr	r3, [pc, #72]	@ (8007e68 <uart_handler_process_packets+0x58>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	701a      	strb	r2, [r3, #0]

        // Command packet (5 bytes with header 0xAA)
        if (usart4_rx_buffer[0] == CMD_HEADER && usart4_packet_size == 5) {
 8007e24:	4b11      	ldr	r3, [pc, #68]	@ (8007e6c <uart_handler_process_packets+0x5c>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	2baa      	cmp	r3, #170	@ 0xaa
 8007e2a:	d10b      	bne.n	8007e44 <uart_handler_process_packets+0x34>
 8007e2c:	4b10      	ldr	r3, [pc, #64]	@ (8007e70 <uart_handler_process_packets+0x60>)
 8007e2e:	881b      	ldrh	r3, [r3, #0]
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	2b05      	cmp	r3, #5
 8007e34:	d106      	bne.n	8007e44 <uart_handler_process_packets+0x34>
            command_packet_ready = 1;
 8007e36:	4b0f      	ldr	r3, [pc, #60]	@ (8007e74 <uart_handler_process_packets+0x64>)
 8007e38:	2201      	movs	r2, #1
 8007e3a:	701a      	strb	r2, [r3, #0]
            process_command_packet(usart4_rx_buffer);
 8007e3c:	480b      	ldr	r0, [pc, #44]	@ (8007e6c <uart_handler_process_packets+0x5c>)
 8007e3e:	f000 f81d 	bl	8007e7c <process_command_packet>
        else if (usart4_rx_buffer[0] == PACKET_HEADER && usart4_packet_size == 36) {
            sut_packet_ready = 1;
            process_sut_packet(usart4_rx_buffer);
        }
    }
}
 8007e42:	e00e      	b.n	8007e62 <uart_handler_process_packets+0x52>
        else if (usart4_rx_buffer[0] == PACKET_HEADER && usart4_packet_size == 36) {
 8007e44:	4b09      	ldr	r3, [pc, #36]	@ (8007e6c <uart_handler_process_packets+0x5c>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2bab      	cmp	r3, #171	@ 0xab
 8007e4a:	d10a      	bne.n	8007e62 <uart_handler_process_packets+0x52>
 8007e4c:	4b08      	ldr	r3, [pc, #32]	@ (8007e70 <uart_handler_process_packets+0x60>)
 8007e4e:	881b      	ldrh	r3, [r3, #0]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	2b24      	cmp	r3, #36	@ 0x24
 8007e54:	d105      	bne.n	8007e62 <uart_handler_process_packets+0x52>
            sut_packet_ready = 1;
 8007e56:	4b08      	ldr	r3, [pc, #32]	@ (8007e78 <uart_handler_process_packets+0x68>)
 8007e58:	2201      	movs	r2, #1
 8007e5a:	701a      	strb	r2, [r3, #0]
            process_sut_packet(usart4_rx_buffer);
 8007e5c:	4803      	ldr	r0, [pc, #12]	@ (8007e6c <uart_handler_process_packets+0x5c>)
 8007e5e:	f000 f843 	bl	8007ee8 <process_sut_packet>
}
 8007e62:	bf00      	nop
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	200007e0 	.word	0x200007e0
 8007e6c:	20000794 	.word	0x20000794
 8007e70:	200007e2 	.word	0x200007e2
 8007e74:	200008e9 	.word	0x200008e9
 8007e78:	200008ea 	.word	0x200008ea

08007e7c <process_command_packet>:
/**
 * @brief Process command packet from buffer
 * @param buffer Pointer to received buffer
 */
void process_command_packet(uint8_t* buffer)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
    if (buffer[0] == CMD_HEADER) {
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2baa      	cmp	r3, #170	@ 0xaa
 8007e8a:	d124      	bne.n	8007ed6 <process_command_packet+0x5a>
        uint8_t command = buffer[1];
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	785b      	ldrb	r3, [r3, #1]
 8007e90:	73fb      	strb	r3, [r7, #15]
        //uint8_t checksum = buffer[2];
        uint8_t footer1 = buffer[3];
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	78db      	ldrb	r3, [r3, #3]
 8007e96:	73bb      	strb	r3, [r7, #14]
        uint8_t footer2 = buffer[4];
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	791b      	ldrb	r3, [r3, #4]
 8007e9c:	737b      	strb	r3, [r7, #13]

        if (footer1 == CMD_FOOTER1 && footer2 == CMD_FOOTER2) {
 8007e9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ea0:	2b0d      	cmp	r3, #13
 8007ea2:	d118      	bne.n	8007ed6 <process_command_packet+0x5a>
 8007ea4:	7b7b      	ldrb	r3, [r7, #13]
 8007ea6:	2b0a      	cmp	r3, #10
 8007ea8:	d115      	bne.n	8007ed6 <process_command_packet+0x5a>
            switch (command) {
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
 8007eac:	2b24      	cmp	r3, #36	@ 0x24
 8007eae:	d00e      	beq.n	8007ece <process_command_packet+0x52>
 8007eb0:	2b24      	cmp	r3, #36	@ 0x24
 8007eb2:	dc10      	bgt.n	8007ed6 <process_command_packet+0x5a>
 8007eb4:	2b20      	cmp	r3, #32
 8007eb6:	d002      	beq.n	8007ebe <process_command_packet+0x42>
 8007eb8:	2b22      	cmp	r3, #34	@ 0x22
 8007eba:	d004      	beq.n	8007ec6 <process_command_packet+0x4a>
                    current_mode = MODE_NORMAL;
                    break;
            }
        }
    }
}
 8007ebc:	e00b      	b.n	8007ed6 <process_command_packet+0x5a>
                    current_mode = MODE_SIT;
 8007ebe:	4b09      	ldr	r3, [pc, #36]	@ (8007ee4 <process_command_packet+0x68>)
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	701a      	strb	r2, [r3, #0]
                    break;
 8007ec4:	e007      	b.n	8007ed6 <process_command_packet+0x5a>
                    current_mode = MODE_SUT;
 8007ec6:	4b07      	ldr	r3, [pc, #28]	@ (8007ee4 <process_command_packet+0x68>)
 8007ec8:	2202      	movs	r2, #2
 8007eca:	701a      	strb	r2, [r3, #0]
                    break;
 8007ecc:	e003      	b.n	8007ed6 <process_command_packet+0x5a>
                    current_mode = MODE_NORMAL;
 8007ece:	4b05      	ldr	r3, [pc, #20]	@ (8007ee4 <process_command_packet+0x68>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	701a      	strb	r2, [r3, #0]
                    break;
 8007ed4:	bf00      	nop
}
 8007ed6:	bf00      	nop
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	200008e8 	.word	0x200008e8

08007ee8 <process_sut_packet>:
/**
 * @brief Process SUT data packet from buffer
 * @param buffer Pointer to received buffer
 */
void process_sut_packet(uint8_t* buffer)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
    // Header, footer and checksum verification
    if (buffer[0] != PACKET_HEADER) return;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	2bab      	cmp	r3, #171	@ 0xab
 8007ef6:	d172      	bne.n	8007fde <process_sut_packet+0xf6>
    if (buffer[34] != CMD_FOOTER1 || buffer[35] != CMD_FOOTER2) return;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	3322      	adds	r3, #34	@ 0x22
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	2b0d      	cmp	r3, #13
 8007f00:	d16f      	bne.n	8007fe2 <process_sut_packet+0xfa>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	3323      	adds	r3, #35	@ 0x23
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	2b0a      	cmp	r3, #10
 8007f0a:	d16a      	bne.n	8007fe2 <process_sut_packet+0xfa>

    uint8_t calculated_checksum = 0;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 33; i++) {
 8007f10:	2300      	movs	r3, #0
 8007f12:	60bb      	str	r3, [r7, #8]
 8007f14:	e009      	b.n	8007f2a <process_sut_packet+0x42>
        calculated_checksum += buffer[i];
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	781a      	ldrb	r2, [r3, #0]
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	4413      	add	r3, r2
 8007f22:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 33; i++) {
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	3301      	adds	r3, #1
 8007f28:	60bb      	str	r3, [r7, #8]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	2b20      	cmp	r3, #32
 8007f2e:	ddf2      	ble.n	8007f16 <process_sut_packet+0x2e>
    }
    calculated_checksum %= 256;
    if (calculated_checksum != buffer[33]) return;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	3321      	adds	r3, #33	@ 0x21
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	7bfa      	ldrb	r2, [r7, #15]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d154      	bne.n	8007fe6 <process_sut_packet+0xfe>

    // Parse data
    latest_sut_data.altitude = uint8_arrayi_float32_ye_donustur(&buffer[1]);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7fd fb67 	bl	8005614 <uint8_arrayi_float32_ye_donustur>
 8007f46:	eef0 7a40 	vmov.f32	s15, s0
 8007f4a:	4b29      	ldr	r3, [pc, #164]	@ (8007ff0 <process_sut_packet+0x108>)
 8007f4c:	edc3 7a00 	vstr	s15, [r3]
    latest_sut_data.pressure = uint8_arrayi_float32_ye_donustur(&buffer[5]);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	3305      	adds	r3, #5
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fd fb5d 	bl	8005614 <uint8_arrayi_float32_ye_donustur>
 8007f5a:	eef0 7a40 	vmov.f32	s15, s0
 8007f5e:	4b24      	ldr	r3, [pc, #144]	@ (8007ff0 <process_sut_packet+0x108>)
 8007f60:	edc3 7a01 	vstr	s15, [r3, #4]
    latest_sut_data.acc_x = uint8_arrayi_float32_ye_donustur(&buffer[9]);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3309      	adds	r3, #9
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7fd fb53 	bl	8005614 <uint8_arrayi_float32_ye_donustur>
 8007f6e:	eef0 7a40 	vmov.f32	s15, s0
 8007f72:	4b1f      	ldr	r3, [pc, #124]	@ (8007ff0 <process_sut_packet+0x108>)
 8007f74:	edc3 7a02 	vstr	s15, [r3, #8]
    latest_sut_data.acc_y = uint8_arrayi_float32_ye_donustur(&buffer[13]);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	330d      	adds	r3, #13
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fd fb49 	bl	8005614 <uint8_arrayi_float32_ye_donustur>
 8007f82:	eef0 7a40 	vmov.f32	s15, s0
 8007f86:	4b1a      	ldr	r3, [pc, #104]	@ (8007ff0 <process_sut_packet+0x108>)
 8007f88:	edc3 7a03 	vstr	s15, [r3, #12]
    latest_sut_data.acc_z = uint8_arrayi_float32_ye_donustur(&buffer[17]);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	3311      	adds	r3, #17
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7fd fb3f 	bl	8005614 <uint8_arrayi_float32_ye_donustur>
 8007f96:	eef0 7a40 	vmov.f32	s15, s0
 8007f9a:	4b15      	ldr	r3, [pc, #84]	@ (8007ff0 <process_sut_packet+0x108>)
 8007f9c:	edc3 7a04 	vstr	s15, [r3, #16]
    latest_sut_data.gyro_x = uint8_arrayi_float32_ye_donustur(&buffer[21]);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3315      	adds	r3, #21
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fd fb35 	bl	8005614 <uint8_arrayi_float32_ye_donustur>
 8007faa:	eef0 7a40 	vmov.f32	s15, s0
 8007fae:	4b10      	ldr	r3, [pc, #64]	@ (8007ff0 <process_sut_packet+0x108>)
 8007fb0:	edc3 7a05 	vstr	s15, [r3, #20]
    latest_sut_data.gyro_y = uint8_arrayi_float32_ye_donustur(&buffer[25]);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	3319      	adds	r3, #25
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fd fb2b 	bl	8005614 <uint8_arrayi_float32_ye_donustur>
 8007fbe:	eef0 7a40 	vmov.f32	s15, s0
 8007fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8007ff0 <process_sut_packet+0x108>)
 8007fc4:	edc3 7a06 	vstr	s15, [r3, #24]
    latest_sut_data.gyro_z = uint8_arrayi_float32_ye_donustur(&buffer[29]);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	331d      	adds	r3, #29
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7fd fb21 	bl	8005614 <uint8_arrayi_float32_ye_donustur>
 8007fd2:	eef0 7a40 	vmov.f32	s15, s0
 8007fd6:	4b06      	ldr	r3, [pc, #24]	@ (8007ff0 <process_sut_packet+0x108>)
 8007fd8:	edc3 7a07 	vstr	s15, [r3, #28]
 8007fdc:	e004      	b.n	8007fe8 <process_sut_packet+0x100>
    if (buffer[0] != PACKET_HEADER) return;
 8007fde:	bf00      	nop
 8007fe0:	e002      	b.n	8007fe8 <process_sut_packet+0x100>
    if (buffer[34] != CMD_FOOTER1 || buffer[35] != CMD_FOOTER2) return;
 8007fe2:	bf00      	nop
 8007fe4:	e000      	b.n	8007fe8 <process_sut_packet+0x100>
    if (calculated_checksum != buffer[33]) return;
 8007fe6:	bf00      	nop
}
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	200008ec 	.word	0x200008ec

08007ff4 <uart_handler_get_mode>:

/**
 * @brief Get current system mode
 */
SystemMode_t uart_handler_get_mode(void)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	af00      	add	r7, sp, #0
    return current_mode;
 8007ff8:	4b03      	ldr	r3, [pc, #12]	@ (8008008 <uart_handler_get_mode+0x14>)
 8007ffa:	781b      	ldrb	r3, [r3, #0]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	200008e8 	.word	0x200008e8

0800800c <uart_handler_command_ready>:

/**
 * @brief Check if command packet is ready
 */
uint8_t uart_handler_command_ready(void)
{
 800800c:	b480      	push	{r7}
 800800e:	af00      	add	r7, sp, #0
    return command_packet_ready;
 8008010:	4b03      	ldr	r3, [pc, #12]	@ (8008020 <uart_handler_command_ready+0x14>)
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	b2db      	uxtb	r3, r3
}
 8008016:	4618      	mov	r0, r3
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	200008e9 	.word	0x200008e9

08008024 <uart_handler_sut_data_ready>:

/**
 * @brief Check if SUT data packet is ready
 */
uint8_t uart_handler_sut_data_ready(void)
{
 8008024:	b480      	push	{r7}
 8008026:	af00      	add	r7, sp, #0
    return sut_packet_ready;
 8008028:	4b03      	ldr	r3, [pc, #12]	@ (8008038 <uart_handler_sut_data_ready+0x14>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	b2db      	uxtb	r3, r3
}
 800802e:	4618      	mov	r0, r3
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	200008ea 	.word	0x200008ea

0800803c <uart_handler_get_sut_data>:

/**
 * @brief Get the latest SUT data
 */
uint8_t uart_handler_get_sut_data(sut_data_t* data)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
    if (data == NULL) return 0;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <uart_handler_get_sut_data+0x12>
 800804a:	2300      	movs	r3, #0
 800804c:	e005      	b.n	800805a <uart_handler_get_sut_data+0x1e>

    memcpy(data, &latest_sut_data, sizeof(sut_data_t));
 800804e:	2220      	movs	r2, #32
 8008050:	4904      	ldr	r1, [pc, #16]	@ (8008064 <uart_handler_get_sut_data+0x28>)
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f006 f9dd 	bl	800e412 <memcpy>
    return 1;
 8008058:	2301      	movs	r3, #1
}
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	200008ec 	.word	0x200008ec

08008068 <uart_handler_clear_command_flag>:

/**
 * @brief Clear command ready flag
 */
void uart_handler_clear_command_flag(void)
{
 8008068:	b480      	push	{r7}
 800806a:	af00      	add	r7, sp, #0
    command_packet_ready = 0;
 800806c:	4b03      	ldr	r3, [pc, #12]	@ (800807c <uart_handler_clear_command_flag+0x14>)
 800806e:	2200      	movs	r2, #0
 8008070:	701a      	strb	r2, [r3, #0]
}
 8008072:	bf00      	nop
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	200008e9 	.word	0x200008e9

08008080 <uart_handler_clear_sut_flag>:

/**
 * @brief Clear SUT data ready flag
 */
void uart_handler_clear_sut_flag(void)
{
 8008080:	b480      	push	{r7}
 8008082:	af00      	add	r7, sp, #0
    sut_packet_ready = 0;
 8008084:	4b03      	ldr	r3, [pc, #12]	@ (8008094 <uart_handler_clear_sut_flag+0x14>)
 8008086:	2200      	movs	r2, #0
 8008088:	701a      	strb	r2, [r3, #0]
}
 800808a:	bf00      	nop
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	200008ea 	.word	0x200008ea

08008098 <uart_handler_send_status>:

/**
 * @brief Send status packet (for SUT mode)
 */
void uart_handler_send_status(uint16_t status_bits)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	4603      	mov	r3, r0
 80080a0:	80fb      	strh	r3, [r7, #6]
    if (!usart4_tx_busy) {
 80080a2:	4b18      	ldr	r3, [pc, #96]	@ (8008104 <uart_handler_send_status+0x6c>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d127      	bne.n	80080fc <uart_handler_send_status+0x64>
        // Use static buffer for DMA safety
        status_packet_dma[0] = 0xAA;
 80080ac:	4b16      	ldr	r3, [pc, #88]	@ (8008108 <uart_handler_send_status+0x70>)
 80080ae:	22aa      	movs	r2, #170	@ 0xaa
 80080b0:	701a      	strb	r2, [r3, #0]
        status_packet_dma[1] = status_bits & 0xFF;         // Low byte of status
 80080b2:	88fb      	ldrh	r3, [r7, #6]
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	4b14      	ldr	r3, [pc, #80]	@ (8008108 <uart_handler_send_status+0x70>)
 80080b8:	705a      	strb	r2, [r3, #1]
        status_packet_dma[2] = (status_bits >> 8) & 0xFF;  // High byte of status
 80080ba:	88fb      	ldrh	r3, [r7, #6]
 80080bc:	0a1b      	lsrs	r3, r3, #8
 80080be:	b29b      	uxth	r3, r3
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	4b11      	ldr	r3, [pc, #68]	@ (8008108 <uart_handler_send_status+0x70>)
 80080c4:	709a      	strb	r2, [r3, #2]

        // Calculate checksum (only for header and status bytes)
        status_packet_dma[3] = (status_packet_dma[0] + status_packet_dma[1] + status_packet_dma[2]) % 256;
 80080c6:	4b10      	ldr	r3, [pc, #64]	@ (8008108 <uart_handler_send_status+0x70>)
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	461a      	mov	r2, r3
 80080cc:	4b0e      	ldr	r3, [pc, #56]	@ (8008108 <uart_handler_send_status+0x70>)
 80080ce:	785b      	ldrb	r3, [r3, #1]
 80080d0:	4413      	add	r3, r2
 80080d2:	4a0d      	ldr	r2, [pc, #52]	@ (8008108 <uart_handler_send_status+0x70>)
 80080d4:	7892      	ldrb	r2, [r2, #2]
 80080d6:	4413      	add	r3, r2
 80080d8:	425a      	negs	r2, r3
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	b2d2      	uxtb	r2, r2
 80080de:	bf58      	it	pl
 80080e0:	4253      	negpl	r3, r2
 80080e2:	b2da      	uxtb	r2, r3
 80080e4:	4b08      	ldr	r3, [pc, #32]	@ (8008108 <uart_handler_send_status+0x70>)
 80080e6:	70da      	strb	r2, [r3, #3]

        status_packet_dma[4] = 0x0D;
 80080e8:	4b07      	ldr	r3, [pc, #28]	@ (8008108 <uart_handler_send_status+0x70>)
 80080ea:	220d      	movs	r2, #13
 80080ec:	711a      	strb	r2, [r3, #4]
        status_packet_dma[5] = 0x0A;
 80080ee:	4b06      	ldr	r3, [pc, #24]	@ (8008108 <uart_handler_send_status+0x70>)
 80080f0:	220a      	movs	r2, #10
 80080f2:	715a      	strb	r2, [r3, #5]

        uart4_send_packet_dma(status_packet_dma, 6);
 80080f4:	2106      	movs	r1, #6
 80080f6:	4804      	ldr	r0, [pc, #16]	@ (8008108 <uart_handler_send_status+0x70>)
 80080f8:	f7fd f888 	bl	800520c <uart4_send_packet_dma>
    }
}
 80080fc:	bf00      	nop
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	200007e5 	.word	0x200007e5
 8008108:	2000090c 	.word	0x2000090c

0800810c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800810c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008144 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008110:	f7ff fdce 	bl	8007cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008114:	480c      	ldr	r0, [pc, #48]	@ (8008148 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008116:	490d      	ldr	r1, [pc, #52]	@ (800814c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008118:	4a0d      	ldr	r2, [pc, #52]	@ (8008150 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800811a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800811c:	e002      	b.n	8008124 <LoopCopyDataInit>

0800811e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800811e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008122:	3304      	adds	r3, #4

08008124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008128:	d3f9      	bcc.n	800811e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800812a:	4a0a      	ldr	r2, [pc, #40]	@ (8008154 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800812c:	4c0a      	ldr	r4, [pc, #40]	@ (8008158 <LoopFillZerobss+0x22>)
  movs r3, #0
 800812e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008130:	e001      	b.n	8008136 <LoopFillZerobss>

08008132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008134:	3204      	adds	r2, #4

08008136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008138:	d3fb      	bcc.n	8008132 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800813a:	f006 f943 	bl	800e3c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800813e:	f7fc fb4f 	bl	80047e0 <main>
  bx  lr    
 8008142:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008144:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800814c:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8008150:	08012d18 	.word	0x08012d18
  ldr r2, =_sbss
 8008154:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8008158:	20000a64 	.word	0x20000a64

0800815c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800815c:	e7fe      	b.n	800815c <ADC_IRQHandler>
	...

08008160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008164:	4b0e      	ldr	r3, [pc, #56]	@ (80081a0 <HAL_Init+0x40>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a0d      	ldr	r2, [pc, #52]	@ (80081a0 <HAL_Init+0x40>)
 800816a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800816e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008170:	4b0b      	ldr	r3, [pc, #44]	@ (80081a0 <HAL_Init+0x40>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a0a      	ldr	r2, [pc, #40]	@ (80081a0 <HAL_Init+0x40>)
 8008176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800817a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800817c:	4b08      	ldr	r3, [pc, #32]	@ (80081a0 <HAL_Init+0x40>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a07      	ldr	r2, [pc, #28]	@ (80081a0 <HAL_Init+0x40>)
 8008182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008188:	2003      	movs	r0, #3
 800818a:	f000 fd99 	bl	8008cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800818e:	200f      	movs	r0, #15
 8008190:	f000 f808 	bl	80081a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008194:	f7ff f8aa 	bl	80072ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	40023c00 	.word	0x40023c00

080081a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80081ac:	4b12      	ldr	r3, [pc, #72]	@ (80081f8 <HAL_InitTick+0x54>)
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	4b12      	ldr	r3, [pc, #72]	@ (80081fc <HAL_InitTick+0x58>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	4619      	mov	r1, r3
 80081b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80081ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80081be:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 fdbf 	bl	8008d46 <HAL_SYSTICK_Config>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e00e      	b.n	80081f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b0f      	cmp	r3, #15
 80081d6:	d80a      	bhi.n	80081ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80081d8:	2200      	movs	r2, #0
 80081da:	6879      	ldr	r1, [r7, #4]
 80081dc:	f04f 30ff 	mov.w	r0, #4294967295
 80081e0:	f000 fd79 	bl	8008cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80081e4:	4a06      	ldr	r2, [pc, #24]	@ (8008200 <HAL_InitTick+0x5c>)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	e000      	b.n	80081f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	20000040 	.word	0x20000040
 80081fc:	20000048 	.word	0x20000048
 8008200:	20000044 	.word	0x20000044

08008204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008204:	b480      	push	{r7}
 8008206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008208:	4b06      	ldr	r3, [pc, #24]	@ (8008224 <HAL_IncTick+0x20>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	461a      	mov	r2, r3
 800820e:	4b06      	ldr	r3, [pc, #24]	@ (8008228 <HAL_IncTick+0x24>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4413      	add	r3, r2
 8008214:	4a04      	ldr	r2, [pc, #16]	@ (8008228 <HAL_IncTick+0x24>)
 8008216:	6013      	str	r3, [r2, #0]
}
 8008218:	bf00      	nop
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	20000048 	.word	0x20000048
 8008228:	20000914 	.word	0x20000914

0800822c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800822c:	b480      	push	{r7}
 800822e:	af00      	add	r7, sp, #0
  return uwTick;
 8008230:	4b03      	ldr	r3, [pc, #12]	@ (8008240 <HAL_GetTick+0x14>)
 8008232:	681b      	ldr	r3, [r3, #0]
}
 8008234:	4618      	mov	r0, r3
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	20000914 	.word	0x20000914

08008244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800824c:	f7ff ffee 	bl	800822c <HAL_GetTick>
 8008250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825c:	d005      	beq.n	800826a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800825e:	4b0a      	ldr	r3, [pc, #40]	@ (8008288 <HAL_Delay+0x44>)
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4413      	add	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800826a:	bf00      	nop
 800826c:	f7ff ffde 	bl	800822c <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	429a      	cmp	r2, r3
 800827a:	d8f7      	bhi.n	800826c <HAL_Delay+0x28>
  {
  }
}
 800827c:	bf00      	nop
 800827e:	bf00      	nop
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000048 	.word	0x20000048

0800828c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e033      	b.n	800830a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d109      	bne.n	80082be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff f846 	bl	800733c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c2:	f003 0310 	and.w	r3, r3, #16
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d118      	bne.n	80082fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80082d2:	f023 0302 	bic.w	r3, r3, #2
 80082d6:	f043 0202 	orr.w	r2, r3, #2
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fa7c 	bl	80087dc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ee:	f023 0303 	bic.w	r3, r3, #3
 80082f2:	f043 0201 	orr.w	r2, r3, #1
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80082fa:	e001      	b.n	8008300 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008308:	7bfb      	ldrb	r3, [r7, #15]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
	...

08008314 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008320:	2300      	movs	r3, #0
 8008322:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008324:	2300      	movs	r3, #0
 8008326:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800832e:	2b01      	cmp	r3, #1
 8008330:	d101      	bne.n	8008336 <HAL_ADC_Start_DMA+0x22>
 8008332:	2302      	movs	r3, #2
 8008334:	e0eb      	b.n	800850e <HAL_ADC_Start_DMA+0x1fa>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f003 0301 	and.w	r3, r3, #1
 8008348:	2b01      	cmp	r3, #1
 800834a:	d018      	beq.n	800837e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	689a      	ldr	r2, [r3, #8]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f042 0201 	orr.w	r2, r2, #1
 800835a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800835c:	4b6e      	ldr	r3, [pc, #440]	@ (8008518 <HAL_ADC_Start_DMA+0x204>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a6e      	ldr	r2, [pc, #440]	@ (800851c <HAL_ADC_Start_DMA+0x208>)
 8008362:	fba2 2303 	umull	r2, r3, r2, r3
 8008366:	0c9a      	lsrs	r2, r3, #18
 8008368:	4613      	mov	r3, r2
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	4413      	add	r3, r2
 800836e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8008370:	e002      	b.n	8008378 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	3b01      	subs	r3, #1
 8008376:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1f9      	bne.n	8008372 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008388:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800838c:	d107      	bne.n	800839e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800839c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	f003 0301 	and.w	r3, r3, #1
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	f040 80a3 	bne.w	80084f4 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80083b6:	f023 0301 	bic.w	r3, r3, #1
 80083ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d007      	beq.n	80083e0 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80083d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80083e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083ec:	d106      	bne.n	80083fc <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083f2:	f023 0206 	bic.w	r2, r3, #6
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80083fa:	e002      	b.n	8008402 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800840a:	4b45      	ldr	r3, [pc, #276]	@ (8008520 <HAL_ADC_Start_DMA+0x20c>)
 800840c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008412:	4a44      	ldr	r2, [pc, #272]	@ (8008524 <HAL_ADC_Start_DMA+0x210>)
 8008414:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800841a:	4a43      	ldr	r2, [pc, #268]	@ (8008528 <HAL_ADC_Start_DMA+0x214>)
 800841c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008422:	4a42      	ldr	r2, [pc, #264]	@ (800852c <HAL_ADC_Start_DMA+0x218>)
 8008424:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800842e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800843e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800844e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	334c      	adds	r3, #76	@ 0x4c
 800845a:	4619      	mov	r1, r3
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f000 fd2c 	bl	8008ebc <HAL_DMA_Start_IT>
 8008464:	4603      	mov	r3, r0
 8008466:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f003 031f 	and.w	r3, r3, #31
 8008470:	2b00      	cmp	r3, #0
 8008472:	d12a      	bne.n	80084ca <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a2d      	ldr	r2, [pc, #180]	@ (8008530 <HAL_ADC_Start_DMA+0x21c>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d015      	beq.n	80084aa <HAL_ADC_Start_DMA+0x196>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a2c      	ldr	r2, [pc, #176]	@ (8008534 <HAL_ADC_Start_DMA+0x220>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d105      	bne.n	8008494 <HAL_ADC_Start_DMA+0x180>
 8008488:	4b25      	ldr	r3, [pc, #148]	@ (8008520 <HAL_ADC_Start_DMA+0x20c>)
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f003 031f 	and.w	r3, r3, #31
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00a      	beq.n	80084aa <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a27      	ldr	r2, [pc, #156]	@ (8008538 <HAL_ADC_Start_DMA+0x224>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d136      	bne.n	800850c <HAL_ADC_Start_DMA+0x1f8>
 800849e:	4b20      	ldr	r3, [pc, #128]	@ (8008520 <HAL_ADC_Start_DMA+0x20c>)
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	f003 0310 	and.w	r3, r3, #16
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d130      	bne.n	800850c <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d129      	bne.n	800850c <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689a      	ldr	r2, [r3, #8]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80084c6:	609a      	str	r2, [r3, #8]
 80084c8:	e020      	b.n	800850c <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a18      	ldr	r2, [pc, #96]	@ (8008530 <HAL_ADC_Start_DMA+0x21c>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d11b      	bne.n	800850c <HAL_ADC_Start_DMA+0x1f8>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d114      	bne.n	800850c <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689a      	ldr	r2, [r3, #8]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80084f0:	609a      	str	r2, [r3, #8]
 80084f2:	e00b      	b.n	800850c <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f8:	f043 0210 	orr.w	r2, r3, #16
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008504:	f043 0201 	orr.w	r2, r3, #1
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800850c:	7ffb      	ldrb	r3, [r7, #31]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3720      	adds	r7, #32
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	20000040 	.word	0x20000040
 800851c:	431bde83 	.word	0x431bde83
 8008520:	40012300 	.word	0x40012300
 8008524:	080089d5 	.word	0x080089d5
 8008528:	08008a8f 	.word	0x08008a8f
 800852c:	08008aab 	.word	0x08008aab
 8008530:	40012000 	.word	0x40012000
 8008534:	40012100 	.word	0x40012100
 8008538:	40012200 	.word	0x40012200

0800853c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008582:	2300      	movs	r3, #0
 8008584:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800858c:	2b01      	cmp	r3, #1
 800858e:	d101      	bne.n	8008594 <HAL_ADC_ConfigChannel+0x1c>
 8008590:	2302      	movs	r3, #2
 8008592:	e113      	b.n	80087bc <HAL_ADC_ConfigChannel+0x244>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b09      	cmp	r3, #9
 80085a2:	d925      	bls.n	80085f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68d9      	ldr	r1, [r3, #12]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	461a      	mov	r2, r3
 80085b2:	4613      	mov	r3, r2
 80085b4:	005b      	lsls	r3, r3, #1
 80085b6:	4413      	add	r3, r2
 80085b8:	3b1e      	subs	r3, #30
 80085ba:	2207      	movs	r2, #7
 80085bc:	fa02 f303 	lsl.w	r3, r2, r3
 80085c0:	43da      	mvns	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	400a      	ands	r2, r1
 80085c8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68d9      	ldr	r1, [r3, #12]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	689a      	ldr	r2, [r3, #8]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	4618      	mov	r0, r3
 80085dc:	4603      	mov	r3, r0
 80085de:	005b      	lsls	r3, r3, #1
 80085e0:	4403      	add	r3, r0
 80085e2:	3b1e      	subs	r3, #30
 80085e4:	409a      	lsls	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	430a      	orrs	r2, r1
 80085ec:	60da      	str	r2, [r3, #12]
 80085ee:	e022      	b.n	8008636 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6919      	ldr	r1, [r3, #16]
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	461a      	mov	r2, r3
 80085fe:	4613      	mov	r3, r2
 8008600:	005b      	lsls	r3, r3, #1
 8008602:	4413      	add	r3, r2
 8008604:	2207      	movs	r2, #7
 8008606:	fa02 f303 	lsl.w	r3, r2, r3
 800860a:	43da      	mvns	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	400a      	ands	r2, r1
 8008612:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6919      	ldr	r1, [r3, #16]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	689a      	ldr	r2, [r3, #8]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	b29b      	uxth	r3, r3
 8008624:	4618      	mov	r0, r3
 8008626:	4603      	mov	r3, r0
 8008628:	005b      	lsls	r3, r3, #1
 800862a:	4403      	add	r3, r0
 800862c:	409a      	lsls	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	430a      	orrs	r2, r1
 8008634:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	2b06      	cmp	r3, #6
 800863c:	d824      	bhi.n	8008688 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	4613      	mov	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	3b05      	subs	r3, #5
 8008650:	221f      	movs	r2, #31
 8008652:	fa02 f303 	lsl.w	r3, r2, r3
 8008656:	43da      	mvns	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	400a      	ands	r2, r1
 800865e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	b29b      	uxth	r3, r3
 800866c:	4618      	mov	r0, r3
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	685a      	ldr	r2, [r3, #4]
 8008672:	4613      	mov	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	3b05      	subs	r3, #5
 800867a:	fa00 f203 	lsl.w	r2, r0, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	430a      	orrs	r2, r1
 8008684:	635a      	str	r2, [r3, #52]	@ 0x34
 8008686:	e04c      	b.n	8008722 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	2b0c      	cmp	r3, #12
 800868e:	d824      	bhi.n	80086da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	4613      	mov	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4413      	add	r3, r2
 80086a0:	3b23      	subs	r3, #35	@ 0x23
 80086a2:	221f      	movs	r2, #31
 80086a4:	fa02 f303 	lsl.w	r3, r2, r3
 80086a8:	43da      	mvns	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	400a      	ands	r2, r1
 80086b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	4618      	mov	r0, r3
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685a      	ldr	r2, [r3, #4]
 80086c4:	4613      	mov	r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4413      	add	r3, r2
 80086ca:	3b23      	subs	r3, #35	@ 0x23
 80086cc:	fa00 f203 	lsl.w	r2, r0, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	430a      	orrs	r2, r1
 80086d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80086d8:	e023      	b.n	8008722 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	685a      	ldr	r2, [r3, #4]
 80086e4:	4613      	mov	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	3b41      	subs	r3, #65	@ 0x41
 80086ec:	221f      	movs	r2, #31
 80086ee:	fa02 f303 	lsl.w	r3, r2, r3
 80086f2:	43da      	mvns	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	400a      	ands	r2, r1
 80086fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	b29b      	uxth	r3, r3
 8008708:	4618      	mov	r0, r3
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	3b41      	subs	r3, #65	@ 0x41
 8008716:	fa00 f203 	lsl.w	r2, r0, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	430a      	orrs	r2, r1
 8008720:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008722:	4b29      	ldr	r3, [pc, #164]	@ (80087c8 <HAL_ADC_ConfigChannel+0x250>)
 8008724:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a28      	ldr	r2, [pc, #160]	@ (80087cc <HAL_ADC_ConfigChannel+0x254>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d10f      	bne.n	8008750 <HAL_ADC_ConfigChannel+0x1d8>
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b12      	cmp	r3, #18
 8008736:	d10b      	bne.n	8008750 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a1d      	ldr	r2, [pc, #116]	@ (80087cc <HAL_ADC_ConfigChannel+0x254>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d12b      	bne.n	80087b2 <HAL_ADC_ConfigChannel+0x23a>
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a1c      	ldr	r2, [pc, #112]	@ (80087d0 <HAL_ADC_ConfigChannel+0x258>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d003      	beq.n	800876c <HAL_ADC_ConfigChannel+0x1f4>
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b11      	cmp	r3, #17
 800876a:	d122      	bne.n	80087b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a11      	ldr	r2, [pc, #68]	@ (80087d0 <HAL_ADC_ConfigChannel+0x258>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d111      	bne.n	80087b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800878e:	4b11      	ldr	r3, [pc, #68]	@ (80087d4 <HAL_ADC_ConfigChannel+0x25c>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a11      	ldr	r2, [pc, #68]	@ (80087d8 <HAL_ADC_ConfigChannel+0x260>)
 8008794:	fba2 2303 	umull	r2, r3, r2, r3
 8008798:	0c9a      	lsrs	r2, r3, #18
 800879a:	4613      	mov	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	005b      	lsls	r3, r3, #1
 80087a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80087a4:	e002      	b.n	80087ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1f9      	bne.n	80087a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr
 80087c8:	40012300 	.word	0x40012300
 80087cc:	40012000 	.word	0x40012000
 80087d0:	10000012 	.word	0x10000012
 80087d4:	20000040 	.word	0x20000040
 80087d8:	431bde83 	.word	0x431bde83

080087dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80087e4:	4b79      	ldr	r3, [pc, #484]	@ (80089cc <ADC_Init+0x1f0>)
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	685a      	ldr	r2, [r3, #4]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	431a      	orrs	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	685a      	ldr	r2, [r3, #4]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008810:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6859      	ldr	r1, [r3, #4]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	021a      	lsls	r2, r3, #8
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8008834:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	6859      	ldr	r1, [r3, #4]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	689a      	ldr	r2, [r3, #8]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	689a      	ldr	r2, [r3, #8]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008856:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6899      	ldr	r1, [r3, #8]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68da      	ldr	r2, [r3, #12]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800886e:	4a58      	ldr	r2, [pc, #352]	@ (80089d0 <ADC_Init+0x1f4>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d022      	beq.n	80088ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689a      	ldr	r2, [r3, #8]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008882:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6899      	ldr	r1, [r3, #8]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	430a      	orrs	r2, r1
 8008894:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	689a      	ldr	r2, [r3, #8]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80088a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6899      	ldr	r1, [r3, #8]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	609a      	str	r2, [r3, #8]
 80088b8:	e00f      	b.n	80088da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	689a      	ldr	r2, [r3, #8]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80088c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	689a      	ldr	r2, [r3, #8]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80088d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	689a      	ldr	r2, [r3, #8]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f022 0202 	bic.w	r2, r2, #2
 80088e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	6899      	ldr	r1, [r3, #8]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	7e1b      	ldrb	r3, [r3, #24]
 80088f4:	005a      	lsls	r2, r3, #1
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	430a      	orrs	r2, r1
 80088fc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d01b      	beq.n	8008940 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008916:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8008926:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6859      	ldr	r1, [r3, #4]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008932:	3b01      	subs	r3, #1
 8008934:	035a      	lsls	r2, r3, #13
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	605a      	str	r2, [r3, #4]
 800893e:	e007      	b.n	8008950 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800894e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800895e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	69db      	ldr	r3, [r3, #28]
 800896a:	3b01      	subs	r3, #1
 800896c:	051a      	lsls	r2, r3, #20
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	430a      	orrs	r2, r1
 8008974:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	689a      	ldr	r2, [r3, #8]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008984:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6899      	ldr	r1, [r3, #8]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008992:	025a      	lsls	r2, r3, #9
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	430a      	orrs	r2, r1
 800899a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689a      	ldr	r2, [r3, #8]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6899      	ldr	r1, [r3, #8]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	029a      	lsls	r2, r3, #10
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	609a      	str	r2, [r3, #8]
}
 80089c0:	bf00      	nop
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	40012300 	.word	0x40012300
 80089d0:	0f000001 	.word	0x0f000001

080089d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d13c      	bne.n	8008a68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d12b      	bne.n	8008a60 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d127      	bne.n	8008a60 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a16:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d006      	beq.n	8008a2c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d119      	bne.n	8008a60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	685a      	ldr	r2, [r3, #4]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f022 0220 	bic.w	r2, r2, #32
 8008a3a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d105      	bne.n	8008a60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a58:	f043 0201 	orr.w	r2, r3, #1
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f7ff fd6b 	bl	800853c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008a66:	e00e      	b.n	8008a86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a6c:	f003 0310 	and.w	r3, r3, #16
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d003      	beq.n	8008a7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f7ff fd75 	bl	8008564 <HAL_ADC_ErrorCallback>
}
 8008a7a:	e004      	b.n	8008a86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	4798      	blx	r3
}
 8008a86:	bf00      	nop
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b084      	sub	sp, #16
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a9a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f7ff fd57 	bl	8008550 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008aa2:	bf00      	nop
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b084      	sub	sp, #16
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ab6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2240      	movs	r2, #64	@ 0x40
 8008abc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ac2:	f043 0204 	orr.w	r2, r3, #4
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f7ff fd4a 	bl	8008564 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008ad0:	bf00      	nop
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f003 0307 	and.w	r3, r3, #7
 8008ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8008b1c <__NVIC_SetPriorityGrouping+0x44>)
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008af4:	4013      	ands	r3, r2
 8008af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008b00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008b0a:	4a04      	ldr	r2, [pc, #16]	@ (8008b1c <__NVIC_SetPriorityGrouping+0x44>)
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	60d3      	str	r3, [r2, #12]
}
 8008b10:	bf00      	nop
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	e000ed00 	.word	0xe000ed00

08008b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008b20:	b480      	push	{r7}
 8008b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008b24:	4b04      	ldr	r3, [pc, #16]	@ (8008b38 <__NVIC_GetPriorityGrouping+0x18>)
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	0a1b      	lsrs	r3, r3, #8
 8008b2a:	f003 0307 	and.w	r3, r3, #7
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr
 8008b38:	e000ed00 	.word	0xe000ed00

08008b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	4603      	mov	r3, r0
 8008b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	db0b      	blt.n	8008b66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b4e:	79fb      	ldrb	r3, [r7, #7]
 8008b50:	f003 021f 	and.w	r2, r3, #31
 8008b54:	4907      	ldr	r1, [pc, #28]	@ (8008b74 <__NVIC_EnableIRQ+0x38>)
 8008b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b5a:	095b      	lsrs	r3, r3, #5
 8008b5c:	2001      	movs	r0, #1
 8008b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8008b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008b66:	bf00      	nop
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	e000e100 	.word	0xe000e100

08008b78 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	4603      	mov	r3, r0
 8008b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	db12      	blt.n	8008bb0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b8a:	79fb      	ldrb	r3, [r7, #7]
 8008b8c:	f003 021f 	and.w	r2, r3, #31
 8008b90:	490a      	ldr	r1, [pc, #40]	@ (8008bbc <__NVIC_DisableIRQ+0x44>)
 8008b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b96:	095b      	lsrs	r3, r3, #5
 8008b98:	2001      	movs	r0, #1
 8008b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8008b9e:	3320      	adds	r3, #32
 8008ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008ba4:	f3bf 8f4f 	dsb	sy
}
 8008ba8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008baa:	f3bf 8f6f 	isb	sy
}
 8008bae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	e000e100 	.word	0xe000e100

08008bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	6039      	str	r1, [r7, #0]
 8008bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	db0a      	blt.n	8008bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	490c      	ldr	r1, [pc, #48]	@ (8008c0c <__NVIC_SetPriority+0x4c>)
 8008bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bde:	0112      	lsls	r2, r2, #4
 8008be0:	b2d2      	uxtb	r2, r2
 8008be2:	440b      	add	r3, r1
 8008be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008be8:	e00a      	b.n	8008c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	4908      	ldr	r1, [pc, #32]	@ (8008c10 <__NVIC_SetPriority+0x50>)
 8008bf0:	79fb      	ldrb	r3, [r7, #7]
 8008bf2:	f003 030f 	and.w	r3, r3, #15
 8008bf6:	3b04      	subs	r3, #4
 8008bf8:	0112      	lsls	r2, r2, #4
 8008bfa:	b2d2      	uxtb	r2, r2
 8008bfc:	440b      	add	r3, r1
 8008bfe:	761a      	strb	r2, [r3, #24]
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	e000e100 	.word	0xe000e100
 8008c10:	e000ed00 	.word	0xe000ed00

08008c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b089      	sub	sp, #36	@ 0x24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f003 0307 	and.w	r3, r3, #7
 8008c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	f1c3 0307 	rsb	r3, r3, #7
 8008c2e:	2b04      	cmp	r3, #4
 8008c30:	bf28      	it	cs
 8008c32:	2304      	movcs	r3, #4
 8008c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	3304      	adds	r3, #4
 8008c3a:	2b06      	cmp	r3, #6
 8008c3c:	d902      	bls.n	8008c44 <NVIC_EncodePriority+0x30>
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	3b03      	subs	r3, #3
 8008c42:	e000      	b.n	8008c46 <NVIC_EncodePriority+0x32>
 8008c44:	2300      	movs	r3, #0
 8008c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c48:	f04f 32ff 	mov.w	r2, #4294967295
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c52:	43da      	mvns	r2, r3
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	401a      	ands	r2, r3
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	fa01 f303 	lsl.w	r3, r1, r3
 8008c66:	43d9      	mvns	r1, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c6c:	4313      	orrs	r3, r2
         );
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3724      	adds	r7, #36	@ 0x24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
	...

08008c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	3b01      	subs	r3, #1
 8008c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c8c:	d301      	bcc.n	8008c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e00f      	b.n	8008cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008c92:	4a0a      	ldr	r2, [pc, #40]	@ (8008cbc <SysTick_Config+0x40>)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	3b01      	subs	r3, #1
 8008c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008c9a:	210f      	movs	r1, #15
 8008c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca0:	f7ff ff8e 	bl	8008bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008ca4:	4b05      	ldr	r3, [pc, #20]	@ (8008cbc <SysTick_Config+0x40>)
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008caa:	4b04      	ldr	r3, [pc, #16]	@ (8008cbc <SysTick_Config+0x40>)
 8008cac:	2207      	movs	r2, #7
 8008cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	e000e010 	.word	0xe000e010

08008cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7ff ff05 	bl	8008ad8 <__NVIC_SetPriorityGrouping>
}
 8008cce:	bf00      	nop
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b086      	sub	sp, #24
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	4603      	mov	r3, r0
 8008cde:	60b9      	str	r1, [r7, #8]
 8008ce0:	607a      	str	r2, [r7, #4]
 8008ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008ce8:	f7ff ff1a 	bl	8008b20 <__NVIC_GetPriorityGrouping>
 8008cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	68b9      	ldr	r1, [r7, #8]
 8008cf2:	6978      	ldr	r0, [r7, #20]
 8008cf4:	f7ff ff8e 	bl	8008c14 <NVIC_EncodePriority>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cfe:	4611      	mov	r1, r2
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7ff ff5d 	bl	8008bc0 <__NVIC_SetPriority>
}
 8008d06:	bf00      	nop
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b082      	sub	sp, #8
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	4603      	mov	r3, r0
 8008d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7ff ff0d 	bl	8008b3c <__NVIC_EnableIRQ>
}
 8008d22:	bf00      	nop
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b082      	sub	sp, #8
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	4603      	mov	r3, r0
 8008d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7ff ff1d 	bl	8008b78 <__NVIC_DisableIRQ>
}
 8008d3e:	bf00      	nop
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b082      	sub	sp, #8
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7ff ff94 	bl	8008c7c <SysTick_Config>
 8008d54:	4603      	mov	r3, r0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008d6c:	f7ff fa5e 	bl	800822c <HAL_GetTick>
 8008d70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d101      	bne.n	8008d7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e099      	b.n	8008eb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f022 0201 	bic.w	r2, r2, #1
 8008d9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008d9c:	e00f      	b.n	8008dbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008d9e:	f7ff fa45 	bl	800822c <HAL_GetTick>
 8008da2:	4602      	mov	r2, r0
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	2b05      	cmp	r3, #5
 8008daa:	d908      	bls.n	8008dbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2220      	movs	r2, #32
 8008db0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2203      	movs	r2, #3
 8008db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	e078      	b.n	8008eb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 0301 	and.w	r3, r3, #1
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1e8      	bne.n	8008d9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	4b38      	ldr	r3, [pc, #224]	@ (8008eb8 <HAL_DMA_Init+0x158>)
 8008dd8:	4013      	ands	r3, r2
 8008dda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685a      	ldr	r2, [r3, #4]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a1b      	ldr	r3, [r3, #32]
 8008e08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e14:	2b04      	cmp	r3, #4
 8008e16:	d107      	bne.n	8008e28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e20:	4313      	orrs	r3, r2
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f023 0307 	bic.w	r3, r3, #7
 8008e3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e44:	697a      	ldr	r2, [r7, #20]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	d117      	bne.n	8008e82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00e      	beq.n	8008e82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fb01 	bl	800946c <DMA_CheckFifoParam>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d008      	beq.n	8008e82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2240      	movs	r2, #64	@ 0x40
 8008e74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e016      	b.n	8008eb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fab8 	bl	8009400 <DMA_CalcBaseAndBitshift>
 8008e90:	4603      	mov	r3, r0
 8008e92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e98:	223f      	movs	r2, #63	@ 0x3f
 8008e9a:	409a      	lsls	r2, r3
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3718      	adds	r7, #24
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	f010803f 	.word	0xf010803f

08008ebc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
 8008ec8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ed2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d101      	bne.n	8008ee2 <HAL_DMA_Start_IT+0x26>
 8008ede:	2302      	movs	r3, #2
 8008ee0:	e040      	b.n	8008f64 <HAL_DMA_Start_IT+0xa8>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d12f      	bne.n	8008f56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2202      	movs	r2, #2
 8008efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2200      	movs	r2, #0
 8008f02:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	68b9      	ldr	r1, [r7, #8]
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f000 fa4a 	bl	80093a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f14:	223f      	movs	r2, #63	@ 0x3f
 8008f16:	409a      	lsls	r2, r3
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f042 0216 	orr.w	r2, r2, #22
 8008f2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d007      	beq.n	8008f44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f042 0208 	orr.w	r2, r2, #8
 8008f42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f042 0201 	orr.w	r2, r2, #1
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	e005      	b.n	8008f62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008f5e:	2302      	movs	r3, #2
 8008f60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3718      	adds	r7, #24
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008f7a:	f7ff f957 	bl	800822c <HAL_GetTick>
 8008f7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d008      	beq.n	8008f9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2280      	movs	r2, #128	@ 0x80
 8008f90:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e052      	b.n	8009044 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f022 0216 	bic.w	r2, r2, #22
 8008fac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	695a      	ldr	r2, [r3, #20]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008fbc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d103      	bne.n	8008fce <HAL_DMA_Abort+0x62>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d007      	beq.n	8008fde <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f022 0208 	bic.w	r2, r2, #8
 8008fdc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f022 0201 	bic.w	r2, r2, #1
 8008fec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008fee:	e013      	b.n	8009018 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008ff0:	f7ff f91c 	bl	800822c <HAL_GetTick>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	2b05      	cmp	r3, #5
 8008ffc:	d90c      	bls.n	8009018 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2220      	movs	r2, #32
 8009002:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2203      	movs	r2, #3
 8009008:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8009014:	2303      	movs	r3, #3
 8009016:	e015      	b.n	8009044 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1e4      	bne.n	8008ff0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800902a:	223f      	movs	r2, #63	@ 0x3f
 800902c:	409a      	lsls	r2, r3
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b02      	cmp	r3, #2
 800905e:	d004      	beq.n	800906a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2280      	movs	r2, #128	@ 0x80
 8009064:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e00c      	b.n	8009084 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2205      	movs	r2, #5
 800906e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f022 0201 	bic.w	r2, r2, #1
 8009080:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009098:	2300      	movs	r3, #0
 800909a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800909c:	4b8e      	ldr	r3, [pc, #568]	@ (80092d8 <HAL_DMA_IRQHandler+0x248>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a8e      	ldr	r2, [pc, #568]	@ (80092dc <HAL_DMA_IRQHandler+0x24c>)
 80090a2:	fba2 2303 	umull	r2, r3, r2, r3
 80090a6:	0a9b      	lsrs	r3, r3, #10
 80090a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090ba:	2208      	movs	r2, #8
 80090bc:	409a      	lsls	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	4013      	ands	r3, r2
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d01a      	beq.n	80090fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0304 	and.w	r3, r3, #4
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d013      	beq.n	80090fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f022 0204 	bic.w	r2, r2, #4
 80090e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090e8:	2208      	movs	r2, #8
 80090ea:	409a      	lsls	r2, r3
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090f4:	f043 0201 	orr.w	r2, r3, #1
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009100:	2201      	movs	r2, #1
 8009102:	409a      	lsls	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	4013      	ands	r3, r2
 8009108:	2b00      	cmp	r3, #0
 800910a:	d012      	beq.n	8009132 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00b      	beq.n	8009132 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800911e:	2201      	movs	r2, #1
 8009120:	409a      	lsls	r2, r3
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800912a:	f043 0202 	orr.w	r2, r3, #2
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009136:	2204      	movs	r2, #4
 8009138:	409a      	lsls	r2, r3
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	4013      	ands	r3, r2
 800913e:	2b00      	cmp	r3, #0
 8009140:	d012      	beq.n	8009168 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 0302 	and.w	r3, r3, #2
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00b      	beq.n	8009168 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009154:	2204      	movs	r2, #4
 8009156:	409a      	lsls	r2, r3
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009160:	f043 0204 	orr.w	r2, r3, #4
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800916c:	2210      	movs	r2, #16
 800916e:	409a      	lsls	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4013      	ands	r3, r2
 8009174:	2b00      	cmp	r3, #0
 8009176:	d043      	beq.n	8009200 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0308 	and.w	r3, r3, #8
 8009182:	2b00      	cmp	r3, #0
 8009184:	d03c      	beq.n	8009200 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800918a:	2210      	movs	r2, #16
 800918c:	409a      	lsls	r2, r3
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d018      	beq.n	80091d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d108      	bne.n	80091c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d024      	beq.n	8009200 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	4798      	blx	r3
 80091be:	e01f      	b.n	8009200 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d01b      	beq.n	8009200 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	4798      	blx	r3
 80091d0:	e016      	b.n	8009200 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d107      	bne.n	80091f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f022 0208 	bic.w	r2, r2, #8
 80091ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d003      	beq.n	8009200 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009204:	2220      	movs	r2, #32
 8009206:	409a      	lsls	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	4013      	ands	r3, r2
 800920c:	2b00      	cmp	r3, #0
 800920e:	f000 808f 	beq.w	8009330 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0310 	and.w	r3, r3, #16
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 8087 	beq.w	8009330 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009226:	2220      	movs	r2, #32
 8009228:	409a      	lsls	r2, r3
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b05      	cmp	r3, #5
 8009238:	d136      	bne.n	80092a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f022 0216 	bic.w	r2, r2, #22
 8009248:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	695a      	ldr	r2, [r3, #20]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009258:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800925e:	2b00      	cmp	r3, #0
 8009260:	d103      	bne.n	800926a <HAL_DMA_IRQHandler+0x1da>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009266:	2b00      	cmp	r3, #0
 8009268:	d007      	beq.n	800927a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f022 0208 	bic.w	r2, r2, #8
 8009278:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800927e:	223f      	movs	r2, #63	@ 0x3f
 8009280:	409a      	lsls	r2, r3
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800929a:	2b00      	cmp	r3, #0
 800929c:	d07e      	beq.n	800939c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	4798      	blx	r3
        }
        return;
 80092a6:	e079      	b.n	800939c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d01d      	beq.n	80092f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10d      	bne.n	80092e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d031      	beq.n	8009330 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	4798      	blx	r3
 80092d4:	e02c      	b.n	8009330 <HAL_DMA_IRQHandler+0x2a0>
 80092d6:	bf00      	nop
 80092d8:	20000040 	.word	0x20000040
 80092dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d023      	beq.n	8009330 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	4798      	blx	r3
 80092f0:	e01e      	b.n	8009330 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10f      	bne.n	8009320 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f022 0210 	bic.w	r2, r2, #16
 800930e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009324:	2b00      	cmp	r3, #0
 8009326:	d003      	beq.n	8009330 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009334:	2b00      	cmp	r3, #0
 8009336:	d032      	beq.n	800939e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800933c:	f003 0301 	and.w	r3, r3, #1
 8009340:	2b00      	cmp	r3, #0
 8009342:	d022      	beq.n	800938a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2205      	movs	r2, #5
 8009348:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f022 0201 	bic.w	r2, r2, #1
 800935a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	3301      	adds	r3, #1
 8009360:	60bb      	str	r3, [r7, #8]
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	429a      	cmp	r2, r3
 8009366:	d307      	bcc.n	8009378 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1f2      	bne.n	800935c <HAL_DMA_IRQHandler+0x2cc>
 8009376:	e000      	b.n	800937a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8009378:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800938e:	2b00      	cmp	r3, #0
 8009390:	d005      	beq.n	800939e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	4798      	blx	r3
 800939a:	e000      	b.n	800939e <HAL_DMA_IRQHandler+0x30e>
        return;
 800939c:	bf00      	nop
    }
  }
}
 800939e:	3718      	adds	r7, #24
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
 80093b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80093c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	2b40      	cmp	r3, #64	@ 0x40
 80093d0:	d108      	bne.n	80093e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80093e2:	e007      	b.n	80093f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	60da      	str	r2, [r3, #12]
}
 80093f4:	bf00      	nop
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	b2db      	uxtb	r3, r3
 800940e:	3b10      	subs	r3, #16
 8009410:	4a14      	ldr	r2, [pc, #80]	@ (8009464 <DMA_CalcBaseAndBitshift+0x64>)
 8009412:	fba2 2303 	umull	r2, r3, r2, r3
 8009416:	091b      	lsrs	r3, r3, #4
 8009418:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800941a:	4a13      	ldr	r2, [pc, #76]	@ (8009468 <DMA_CalcBaseAndBitshift+0x68>)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4413      	add	r3, r2
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	461a      	mov	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2b03      	cmp	r3, #3
 800942c:	d909      	bls.n	8009442 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8009436:	f023 0303 	bic.w	r3, r3, #3
 800943a:	1d1a      	adds	r2, r3, #4
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	659a      	str	r2, [r3, #88]	@ 0x58
 8009440:	e007      	b.n	8009452 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800944a:	f023 0303 	bic.w	r3, r3, #3
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009456:	4618      	mov	r0, r3
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	aaaaaaab 	.word	0xaaaaaaab
 8009468:	08012750 	.word	0x08012750

0800946c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800947c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d11f      	bne.n	80094c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	2b03      	cmp	r3, #3
 800948a:	d856      	bhi.n	800953a <DMA_CheckFifoParam+0xce>
 800948c:	a201      	add	r2, pc, #4	@ (adr r2, 8009494 <DMA_CheckFifoParam+0x28>)
 800948e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009492:	bf00      	nop
 8009494:	080094a5 	.word	0x080094a5
 8009498:	080094b7 	.word	0x080094b7
 800949c:	080094a5 	.word	0x080094a5
 80094a0:	0800953b 	.word	0x0800953b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d046      	beq.n	800953e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094b4:	e043      	b.n	800953e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80094be:	d140      	bne.n	8009542 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094c4:	e03d      	b.n	8009542 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094ce:	d121      	bne.n	8009514 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	2b03      	cmp	r3, #3
 80094d4:	d837      	bhi.n	8009546 <DMA_CheckFifoParam+0xda>
 80094d6:	a201      	add	r2, pc, #4	@ (adr r2, 80094dc <DMA_CheckFifoParam+0x70>)
 80094d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094dc:	080094ed 	.word	0x080094ed
 80094e0:	080094f3 	.word	0x080094f3
 80094e4:	080094ed 	.word	0x080094ed
 80094e8:	08009505 	.word	0x08009505
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	73fb      	strb	r3, [r7, #15]
      break;
 80094f0:	e030      	b.n	8009554 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d025      	beq.n	800954a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009502:	e022      	b.n	800954a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009508:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800950c:	d11f      	bne.n	800954e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009512:	e01c      	b.n	800954e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	2b02      	cmp	r3, #2
 8009518:	d903      	bls.n	8009522 <DMA_CheckFifoParam+0xb6>
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	2b03      	cmp	r3, #3
 800951e:	d003      	beq.n	8009528 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009520:	e018      	b.n	8009554 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	73fb      	strb	r3, [r7, #15]
      break;
 8009526:	e015      	b.n	8009554 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800952c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00e      	beq.n	8009552 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	73fb      	strb	r3, [r7, #15]
      break;
 8009538:	e00b      	b.n	8009552 <DMA_CheckFifoParam+0xe6>
      break;
 800953a:	bf00      	nop
 800953c:	e00a      	b.n	8009554 <DMA_CheckFifoParam+0xe8>
      break;
 800953e:	bf00      	nop
 8009540:	e008      	b.n	8009554 <DMA_CheckFifoParam+0xe8>
      break;
 8009542:	bf00      	nop
 8009544:	e006      	b.n	8009554 <DMA_CheckFifoParam+0xe8>
      break;
 8009546:	bf00      	nop
 8009548:	e004      	b.n	8009554 <DMA_CheckFifoParam+0xe8>
      break;
 800954a:	bf00      	nop
 800954c:	e002      	b.n	8009554 <DMA_CheckFifoParam+0xe8>
      break;   
 800954e:	bf00      	nop
 8009550:	e000      	b.n	8009554 <DMA_CheckFifoParam+0xe8>
      break;
 8009552:	bf00      	nop
    }
  } 
  
  return status; 
 8009554:	7bfb      	ldrb	r3, [r7, #15]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop

08009564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009564:	b480      	push	{r7}
 8009566:	b089      	sub	sp, #36	@ 0x24
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800956e:	2300      	movs	r3, #0
 8009570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009572:	2300      	movs	r3, #0
 8009574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009576:	2300      	movs	r3, #0
 8009578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800957a:	2300      	movs	r3, #0
 800957c:	61fb      	str	r3, [r7, #28]
 800957e:	e165      	b.n	800984c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009580:	2201      	movs	r2, #1
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	fa02 f303 	lsl.w	r3, r2, r3
 8009588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	4013      	ands	r3, r2
 8009592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009594:	693a      	ldr	r2, [r7, #16]
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	429a      	cmp	r2, r3
 800959a:	f040 8154 	bne.w	8009846 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	f003 0303 	and.w	r3, r3, #3
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d005      	beq.n	80095b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d130      	bne.n	8009618 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	005b      	lsls	r3, r3, #1
 80095c0:	2203      	movs	r2, #3
 80095c2:	fa02 f303 	lsl.w	r3, r2, r3
 80095c6:	43db      	mvns	r3, r3
 80095c8:	69ba      	ldr	r2, [r7, #24]
 80095ca:	4013      	ands	r3, r2
 80095cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	68da      	ldr	r2, [r3, #12]
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	005b      	lsls	r3, r3, #1
 80095d6:	fa02 f303 	lsl.w	r3, r2, r3
 80095da:	69ba      	ldr	r2, [r7, #24]
 80095dc:	4313      	orrs	r3, r2
 80095de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	69ba      	ldr	r2, [r7, #24]
 80095e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80095ec:	2201      	movs	r2, #1
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	fa02 f303 	lsl.w	r3, r2, r3
 80095f4:	43db      	mvns	r3, r3
 80095f6:	69ba      	ldr	r2, [r7, #24]
 80095f8:	4013      	ands	r3, r2
 80095fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	091b      	lsrs	r3, r3, #4
 8009602:	f003 0201 	and.w	r2, r3, #1
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	fa02 f303 	lsl.w	r3, r2, r3
 800960c:	69ba      	ldr	r2, [r7, #24]
 800960e:	4313      	orrs	r3, r2
 8009610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	69ba      	ldr	r2, [r7, #24]
 8009616:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	f003 0303 	and.w	r3, r3, #3
 8009620:	2b03      	cmp	r3, #3
 8009622:	d017      	beq.n	8009654 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800962a:	69fb      	ldr	r3, [r7, #28]
 800962c:	005b      	lsls	r3, r3, #1
 800962e:	2203      	movs	r2, #3
 8009630:	fa02 f303 	lsl.w	r3, r2, r3
 8009634:	43db      	mvns	r3, r3
 8009636:	69ba      	ldr	r2, [r7, #24]
 8009638:	4013      	ands	r3, r2
 800963a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	689a      	ldr	r2, [r3, #8]
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	005b      	lsls	r3, r3, #1
 8009644:	fa02 f303 	lsl.w	r3, r2, r3
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	4313      	orrs	r3, r2
 800964c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	69ba      	ldr	r2, [r7, #24]
 8009652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	f003 0303 	and.w	r3, r3, #3
 800965c:	2b02      	cmp	r3, #2
 800965e:	d123      	bne.n	80096a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	08da      	lsrs	r2, r3, #3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	3208      	adds	r2, #8
 8009668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800966c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	f003 0307 	and.w	r3, r3, #7
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	220f      	movs	r2, #15
 8009678:	fa02 f303 	lsl.w	r3, r2, r3
 800967c:	43db      	mvns	r3, r3
 800967e:	69ba      	ldr	r2, [r7, #24]
 8009680:	4013      	ands	r3, r2
 8009682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	691a      	ldr	r2, [r3, #16]
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	f003 0307 	and.w	r3, r3, #7
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	fa02 f303 	lsl.w	r3, r2, r3
 8009694:	69ba      	ldr	r2, [r7, #24]
 8009696:	4313      	orrs	r3, r2
 8009698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	08da      	lsrs	r2, r3, #3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	3208      	adds	r2, #8
 80096a2:	69b9      	ldr	r1, [r7, #24]
 80096a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	005b      	lsls	r3, r3, #1
 80096b2:	2203      	movs	r2, #3
 80096b4:	fa02 f303 	lsl.w	r3, r2, r3
 80096b8:	43db      	mvns	r3, r3
 80096ba:	69ba      	ldr	r2, [r7, #24]
 80096bc:	4013      	ands	r3, r2
 80096be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	f003 0203 	and.w	r2, r3, #3
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	005b      	lsls	r3, r3, #1
 80096cc:	fa02 f303 	lsl.w	r3, r2, r3
 80096d0:	69ba      	ldr	r2, [r7, #24]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	69ba      	ldr	r2, [r7, #24]
 80096da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f000 80ae 	beq.w	8009846 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096ea:	2300      	movs	r3, #0
 80096ec:	60fb      	str	r3, [r7, #12]
 80096ee:	4b5d      	ldr	r3, [pc, #372]	@ (8009864 <HAL_GPIO_Init+0x300>)
 80096f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096f2:	4a5c      	ldr	r2, [pc, #368]	@ (8009864 <HAL_GPIO_Init+0x300>)
 80096f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80096f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80096fa:	4b5a      	ldr	r3, [pc, #360]	@ (8009864 <HAL_GPIO_Init+0x300>)
 80096fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009702:	60fb      	str	r3, [r7, #12]
 8009704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009706:	4a58      	ldr	r2, [pc, #352]	@ (8009868 <HAL_GPIO_Init+0x304>)
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	089b      	lsrs	r3, r3, #2
 800970c:	3302      	adds	r3, #2
 800970e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	f003 0303 	and.w	r3, r3, #3
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	220f      	movs	r2, #15
 800971e:	fa02 f303 	lsl.w	r3, r2, r3
 8009722:	43db      	mvns	r3, r3
 8009724:	69ba      	ldr	r2, [r7, #24]
 8009726:	4013      	ands	r3, r2
 8009728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a4f      	ldr	r2, [pc, #316]	@ (800986c <HAL_GPIO_Init+0x308>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d025      	beq.n	800977e <HAL_GPIO_Init+0x21a>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a4e      	ldr	r2, [pc, #312]	@ (8009870 <HAL_GPIO_Init+0x30c>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d01f      	beq.n	800977a <HAL_GPIO_Init+0x216>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a4d      	ldr	r2, [pc, #308]	@ (8009874 <HAL_GPIO_Init+0x310>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d019      	beq.n	8009776 <HAL_GPIO_Init+0x212>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a4c      	ldr	r2, [pc, #304]	@ (8009878 <HAL_GPIO_Init+0x314>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d013      	beq.n	8009772 <HAL_GPIO_Init+0x20e>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a4b      	ldr	r2, [pc, #300]	@ (800987c <HAL_GPIO_Init+0x318>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d00d      	beq.n	800976e <HAL_GPIO_Init+0x20a>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a4a      	ldr	r2, [pc, #296]	@ (8009880 <HAL_GPIO_Init+0x31c>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d007      	beq.n	800976a <HAL_GPIO_Init+0x206>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a49      	ldr	r2, [pc, #292]	@ (8009884 <HAL_GPIO_Init+0x320>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d101      	bne.n	8009766 <HAL_GPIO_Init+0x202>
 8009762:	2306      	movs	r3, #6
 8009764:	e00c      	b.n	8009780 <HAL_GPIO_Init+0x21c>
 8009766:	2307      	movs	r3, #7
 8009768:	e00a      	b.n	8009780 <HAL_GPIO_Init+0x21c>
 800976a:	2305      	movs	r3, #5
 800976c:	e008      	b.n	8009780 <HAL_GPIO_Init+0x21c>
 800976e:	2304      	movs	r3, #4
 8009770:	e006      	b.n	8009780 <HAL_GPIO_Init+0x21c>
 8009772:	2303      	movs	r3, #3
 8009774:	e004      	b.n	8009780 <HAL_GPIO_Init+0x21c>
 8009776:	2302      	movs	r3, #2
 8009778:	e002      	b.n	8009780 <HAL_GPIO_Init+0x21c>
 800977a:	2301      	movs	r3, #1
 800977c:	e000      	b.n	8009780 <HAL_GPIO_Init+0x21c>
 800977e:	2300      	movs	r3, #0
 8009780:	69fa      	ldr	r2, [r7, #28]
 8009782:	f002 0203 	and.w	r2, r2, #3
 8009786:	0092      	lsls	r2, r2, #2
 8009788:	4093      	lsls	r3, r2
 800978a:	69ba      	ldr	r2, [r7, #24]
 800978c:	4313      	orrs	r3, r2
 800978e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009790:	4935      	ldr	r1, [pc, #212]	@ (8009868 <HAL_GPIO_Init+0x304>)
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	089b      	lsrs	r3, r3, #2
 8009796:	3302      	adds	r3, #2
 8009798:	69ba      	ldr	r2, [r7, #24]
 800979a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800979e:	4b3a      	ldr	r3, [pc, #232]	@ (8009888 <HAL_GPIO_Init+0x324>)
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	43db      	mvns	r3, r3
 80097a8:	69ba      	ldr	r2, [r7, #24]
 80097aa:	4013      	ands	r3, r2
 80097ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d003      	beq.n	80097c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80097ba:	69ba      	ldr	r2, [r7, #24]
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	4313      	orrs	r3, r2
 80097c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80097c2:	4a31      	ldr	r2, [pc, #196]	@ (8009888 <HAL_GPIO_Init+0x324>)
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80097c8:	4b2f      	ldr	r3, [pc, #188]	@ (8009888 <HAL_GPIO_Init+0x324>)
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	43db      	mvns	r3, r3
 80097d2:	69ba      	ldr	r2, [r7, #24]
 80097d4:	4013      	ands	r3, r2
 80097d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d003      	beq.n	80097ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80097e4:	69ba      	ldr	r2, [r7, #24]
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80097ec:	4a26      	ldr	r2, [pc, #152]	@ (8009888 <HAL_GPIO_Init+0x324>)
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80097f2:	4b25      	ldr	r3, [pc, #148]	@ (8009888 <HAL_GPIO_Init+0x324>)
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	43db      	mvns	r3, r3
 80097fc:	69ba      	ldr	r2, [r7, #24]
 80097fe:	4013      	ands	r3, r2
 8009800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800980a:	2b00      	cmp	r3, #0
 800980c:	d003      	beq.n	8009816 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800980e:	69ba      	ldr	r2, [r7, #24]
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	4313      	orrs	r3, r2
 8009814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009816:	4a1c      	ldr	r2, [pc, #112]	@ (8009888 <HAL_GPIO_Init+0x324>)
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800981c:	4b1a      	ldr	r3, [pc, #104]	@ (8009888 <HAL_GPIO_Init+0x324>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	43db      	mvns	r3, r3
 8009826:	69ba      	ldr	r2, [r7, #24]
 8009828:	4013      	ands	r3, r2
 800982a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d003      	beq.n	8009840 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009838:	69ba      	ldr	r2, [r7, #24]
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	4313      	orrs	r3, r2
 800983e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009840:	4a11      	ldr	r2, [pc, #68]	@ (8009888 <HAL_GPIO_Init+0x324>)
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	3301      	adds	r3, #1
 800984a:	61fb      	str	r3, [r7, #28]
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	2b0f      	cmp	r3, #15
 8009850:	f67f ae96 	bls.w	8009580 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009854:	bf00      	nop
 8009856:	bf00      	nop
 8009858:	3724      	adds	r7, #36	@ 0x24
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	40023800 	.word	0x40023800
 8009868:	40013800 	.word	0x40013800
 800986c:	40020000 	.word	0x40020000
 8009870:	40020400 	.word	0x40020400
 8009874:	40020800 	.word	0x40020800
 8009878:	40020c00 	.word	0x40020c00
 800987c:	40021000 	.word	0x40021000
 8009880:	40021400 	.word	0x40021400
 8009884:	40021800 	.word	0x40021800
 8009888:	40013c00 	.word	0x40013c00

0800988c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800988c:	b480      	push	{r7}
 800988e:	b087      	sub	sp, #28
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009896:	2300      	movs	r3, #0
 8009898:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800989a:	2300      	movs	r3, #0
 800989c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800989e:	2300      	movs	r3, #0
 80098a0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80098a2:	2300      	movs	r3, #0
 80098a4:	617b      	str	r3, [r7, #20]
 80098a6:	e0c7      	b.n	8009a38 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80098a8:	2201      	movs	r2, #1
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	fa02 f303 	lsl.w	r3, r2, r3
 80098b0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80098b2:	683a      	ldr	r2, [r7, #0]
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	4013      	ands	r3, r2
 80098b8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	429a      	cmp	r2, r3
 80098c0:	f040 80b7 	bne.w	8009a32 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80098c4:	4a62      	ldr	r2, [pc, #392]	@ (8009a50 <HAL_GPIO_DeInit+0x1c4>)
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	089b      	lsrs	r3, r3, #2
 80098ca:	3302      	adds	r3, #2
 80098cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098d0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	f003 0303 	and.w	r3, r3, #3
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	220f      	movs	r2, #15
 80098dc:	fa02 f303 	lsl.w	r3, r2, r3
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	4013      	ands	r3, r2
 80098e4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a5a      	ldr	r2, [pc, #360]	@ (8009a54 <HAL_GPIO_DeInit+0x1c8>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d025      	beq.n	800993a <HAL_GPIO_DeInit+0xae>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a59      	ldr	r2, [pc, #356]	@ (8009a58 <HAL_GPIO_DeInit+0x1cc>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d01f      	beq.n	8009936 <HAL_GPIO_DeInit+0xaa>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a58      	ldr	r2, [pc, #352]	@ (8009a5c <HAL_GPIO_DeInit+0x1d0>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d019      	beq.n	8009932 <HAL_GPIO_DeInit+0xa6>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a57      	ldr	r2, [pc, #348]	@ (8009a60 <HAL_GPIO_DeInit+0x1d4>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d013      	beq.n	800992e <HAL_GPIO_DeInit+0xa2>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a56      	ldr	r2, [pc, #344]	@ (8009a64 <HAL_GPIO_DeInit+0x1d8>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d00d      	beq.n	800992a <HAL_GPIO_DeInit+0x9e>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4a55      	ldr	r2, [pc, #340]	@ (8009a68 <HAL_GPIO_DeInit+0x1dc>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d007      	beq.n	8009926 <HAL_GPIO_DeInit+0x9a>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4a54      	ldr	r2, [pc, #336]	@ (8009a6c <HAL_GPIO_DeInit+0x1e0>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d101      	bne.n	8009922 <HAL_GPIO_DeInit+0x96>
 800991e:	2306      	movs	r3, #6
 8009920:	e00c      	b.n	800993c <HAL_GPIO_DeInit+0xb0>
 8009922:	2307      	movs	r3, #7
 8009924:	e00a      	b.n	800993c <HAL_GPIO_DeInit+0xb0>
 8009926:	2305      	movs	r3, #5
 8009928:	e008      	b.n	800993c <HAL_GPIO_DeInit+0xb0>
 800992a:	2304      	movs	r3, #4
 800992c:	e006      	b.n	800993c <HAL_GPIO_DeInit+0xb0>
 800992e:	2303      	movs	r3, #3
 8009930:	e004      	b.n	800993c <HAL_GPIO_DeInit+0xb0>
 8009932:	2302      	movs	r3, #2
 8009934:	e002      	b.n	800993c <HAL_GPIO_DeInit+0xb0>
 8009936:	2301      	movs	r3, #1
 8009938:	e000      	b.n	800993c <HAL_GPIO_DeInit+0xb0>
 800993a:	2300      	movs	r3, #0
 800993c:	697a      	ldr	r2, [r7, #20]
 800993e:	f002 0203 	and.w	r2, r2, #3
 8009942:	0092      	lsls	r2, r2, #2
 8009944:	4093      	lsls	r3, r2
 8009946:	68ba      	ldr	r2, [r7, #8]
 8009948:	429a      	cmp	r2, r3
 800994a:	d132      	bne.n	80099b2 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800994c:	4b48      	ldr	r3, [pc, #288]	@ (8009a70 <HAL_GPIO_DeInit+0x1e4>)
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	43db      	mvns	r3, r3
 8009954:	4946      	ldr	r1, [pc, #280]	@ (8009a70 <HAL_GPIO_DeInit+0x1e4>)
 8009956:	4013      	ands	r3, r2
 8009958:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800995a:	4b45      	ldr	r3, [pc, #276]	@ (8009a70 <HAL_GPIO_DeInit+0x1e4>)
 800995c:	685a      	ldr	r2, [r3, #4]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	43db      	mvns	r3, r3
 8009962:	4943      	ldr	r1, [pc, #268]	@ (8009a70 <HAL_GPIO_DeInit+0x1e4>)
 8009964:	4013      	ands	r3, r2
 8009966:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009968:	4b41      	ldr	r3, [pc, #260]	@ (8009a70 <HAL_GPIO_DeInit+0x1e4>)
 800996a:	68da      	ldr	r2, [r3, #12]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	43db      	mvns	r3, r3
 8009970:	493f      	ldr	r1, [pc, #252]	@ (8009a70 <HAL_GPIO_DeInit+0x1e4>)
 8009972:	4013      	ands	r3, r2
 8009974:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009976:	4b3e      	ldr	r3, [pc, #248]	@ (8009a70 <HAL_GPIO_DeInit+0x1e4>)
 8009978:	689a      	ldr	r2, [r3, #8]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	43db      	mvns	r3, r3
 800997e:	493c      	ldr	r1, [pc, #240]	@ (8009a70 <HAL_GPIO_DeInit+0x1e4>)
 8009980:	4013      	ands	r3, r2
 8009982:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	f003 0303 	and.w	r3, r3, #3
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	220f      	movs	r2, #15
 800998e:	fa02 f303 	lsl.w	r3, r2, r3
 8009992:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009994:	4a2e      	ldr	r2, [pc, #184]	@ (8009a50 <HAL_GPIO_DeInit+0x1c4>)
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	089b      	lsrs	r3, r3, #2
 800999a:	3302      	adds	r3, #2
 800999c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	43da      	mvns	r2, r3
 80099a4:	482a      	ldr	r0, [pc, #168]	@ (8009a50 <HAL_GPIO_DeInit+0x1c4>)
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	089b      	lsrs	r3, r3, #2
 80099aa:	400a      	ands	r2, r1
 80099ac:	3302      	adds	r3, #2
 80099ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	005b      	lsls	r3, r3, #1
 80099ba:	2103      	movs	r1, #3
 80099bc:	fa01 f303 	lsl.w	r3, r1, r3
 80099c0:	43db      	mvns	r3, r3
 80099c2:	401a      	ands	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	08da      	lsrs	r2, r3, #3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	3208      	adds	r2, #8
 80099d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	f003 0307 	and.w	r3, r3, #7
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	220f      	movs	r2, #15
 80099de:	fa02 f303 	lsl.w	r3, r2, r3
 80099e2:	43db      	mvns	r3, r3
 80099e4:	697a      	ldr	r2, [r7, #20]
 80099e6:	08d2      	lsrs	r2, r2, #3
 80099e8:	4019      	ands	r1, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	3208      	adds	r2, #8
 80099ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	68da      	ldr	r2, [r3, #12]
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	005b      	lsls	r3, r3, #1
 80099fa:	2103      	movs	r1, #3
 80099fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009a00:	43db      	mvns	r3, r3
 8009a02:	401a      	ands	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	2101      	movs	r1, #1
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	fa01 f303 	lsl.w	r3, r1, r3
 8009a14:	43db      	mvns	r3, r3
 8009a16:	401a      	ands	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	689a      	ldr	r2, [r3, #8]
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	2103      	movs	r1, #3
 8009a26:	fa01 f303 	lsl.w	r3, r1, r3
 8009a2a:	43db      	mvns	r3, r3
 8009a2c:	401a      	ands	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	3301      	adds	r3, #1
 8009a36:	617b      	str	r3, [r7, #20]
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	2b0f      	cmp	r3, #15
 8009a3c:	f67f af34 	bls.w	80098a8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009a40:	bf00      	nop
 8009a42:	bf00      	nop
 8009a44:	371c      	adds	r7, #28
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	40013800 	.word	0x40013800
 8009a54:	40020000 	.word	0x40020000
 8009a58:	40020400 	.word	0x40020400
 8009a5c:	40020800 	.word	0x40020800
 8009a60:	40020c00 	.word	0x40020c00
 8009a64:	40021000 	.word	0x40021000
 8009a68:	40021400 	.word	0x40021400
 8009a6c:	40021800 	.word	0x40021800
 8009a70:	40013c00 	.word	0x40013c00

08009a74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	691a      	ldr	r2, [r3, #16]
 8009a84:	887b      	ldrh	r3, [r7, #2]
 8009a86:	4013      	ands	r3, r2
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d002      	beq.n	8009a92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	73fb      	strb	r3, [r7, #15]
 8009a90:	e001      	b.n	8009a96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009a92:	2300      	movs	r3, #0
 8009a94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3714      	adds	r7, #20
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	460b      	mov	r3, r1
 8009aae:	807b      	strh	r3, [r7, #2]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009ab4:	787b      	ldrb	r3, [r7, #1]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d003      	beq.n	8009ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009aba:	887a      	ldrh	r2, [r7, #2]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009ac0:	e003      	b.n	8009aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009ac2:	887b      	ldrh	r3, [r7, #2]
 8009ac4:	041a      	lsls	r2, r3, #16
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	619a      	str	r2, [r3, #24]
}
 8009aca:	bf00      	nop
 8009acc:	370c      	adds	r7, #12
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
	...

08009ad8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	4603      	mov	r3, r0
 8009ae0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009ae2:	4b08      	ldr	r3, [pc, #32]	@ (8009b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009ae4:	695a      	ldr	r2, [r3, #20]
 8009ae6:	88fb      	ldrh	r3, [r7, #6]
 8009ae8:	4013      	ands	r3, r2
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d006      	beq.n	8009afc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009aee:	4a05      	ldr	r2, [pc, #20]	@ (8009b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009af0:	88fb      	ldrh	r3, [r7, #6]
 8009af2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009af4:	88fb      	ldrh	r3, [r7, #6]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fb fb12 	bl	8005120 <HAL_GPIO_EXTI_Callback>
  }
}
 8009afc:	bf00      	nop
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	40013c00 	.word	0x40013c00

08009b08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d101      	bne.n	8009b1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e12b      	b.n	8009d72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d106      	bne.n	8009b34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f7fd fce0 	bl	80074f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2224      	movs	r2, #36	@ 0x24
 8009b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f022 0201 	bic.w	r2, r2, #1
 8009b4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009b5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009b6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009b6c:	f001 f912 	bl	800ad94 <HAL_RCC_GetPCLK1Freq>
 8009b70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	4a81      	ldr	r2, [pc, #516]	@ (8009d7c <HAL_I2C_Init+0x274>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d807      	bhi.n	8009b8c <HAL_I2C_Init+0x84>
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4a80      	ldr	r2, [pc, #512]	@ (8009d80 <HAL_I2C_Init+0x278>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	bf94      	ite	ls
 8009b84:	2301      	movls	r3, #1
 8009b86:	2300      	movhi	r3, #0
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	e006      	b.n	8009b9a <HAL_I2C_Init+0x92>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	4a7d      	ldr	r2, [pc, #500]	@ (8009d84 <HAL_I2C_Init+0x27c>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	bf94      	ite	ls
 8009b94:	2301      	movls	r3, #1
 8009b96:	2300      	movhi	r3, #0
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d001      	beq.n	8009ba2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e0e7      	b.n	8009d72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	4a78      	ldr	r2, [pc, #480]	@ (8009d88 <HAL_I2C_Init+0x280>)
 8009ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8009baa:	0c9b      	lsrs	r3, r3, #18
 8009bac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68ba      	ldr	r2, [r7, #8]
 8009bbe:	430a      	orrs	r2, r1
 8009bc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	6a1b      	ldr	r3, [r3, #32]
 8009bc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	4a6a      	ldr	r2, [pc, #424]	@ (8009d7c <HAL_I2C_Init+0x274>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d802      	bhi.n	8009bdc <HAL_I2C_Init+0xd4>
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	e009      	b.n	8009bf0 <HAL_I2C_Init+0xe8>
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009be2:	fb02 f303 	mul.w	r3, r2, r3
 8009be6:	4a69      	ldr	r2, [pc, #420]	@ (8009d8c <HAL_I2C_Init+0x284>)
 8009be8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bec:	099b      	lsrs	r3, r3, #6
 8009bee:	3301      	adds	r3, #1
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	6812      	ldr	r2, [r2, #0]
 8009bf4:	430b      	orrs	r3, r1
 8009bf6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009c02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	495c      	ldr	r1, [pc, #368]	@ (8009d7c <HAL_I2C_Init+0x274>)
 8009c0c:	428b      	cmp	r3, r1
 8009c0e:	d819      	bhi.n	8009c44 <HAL_I2C_Init+0x13c>
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	1e59      	subs	r1, r3, #1
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	005b      	lsls	r3, r3, #1
 8009c1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009c1e:	1c59      	adds	r1, r3, #1
 8009c20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009c24:	400b      	ands	r3, r1
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00a      	beq.n	8009c40 <HAL_I2C_Init+0x138>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	1e59      	subs	r1, r3, #1
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	005b      	lsls	r3, r3, #1
 8009c34:	fbb1 f3f3 	udiv	r3, r1, r3
 8009c38:	3301      	adds	r3, #1
 8009c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c3e:	e051      	b.n	8009ce4 <HAL_I2C_Init+0x1dc>
 8009c40:	2304      	movs	r3, #4
 8009c42:	e04f      	b.n	8009ce4 <HAL_I2C_Init+0x1dc>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d111      	bne.n	8009c70 <HAL_I2C_Init+0x168>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	1e58      	subs	r0, r3, #1
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6859      	ldr	r1, [r3, #4]
 8009c54:	460b      	mov	r3, r1
 8009c56:	005b      	lsls	r3, r3, #1
 8009c58:	440b      	add	r3, r1
 8009c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009c5e:	3301      	adds	r3, #1
 8009c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	bf0c      	ite	eq
 8009c68:	2301      	moveq	r3, #1
 8009c6a:	2300      	movne	r3, #0
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	e012      	b.n	8009c96 <HAL_I2C_Init+0x18e>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	1e58      	subs	r0, r3, #1
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6859      	ldr	r1, [r3, #4]
 8009c78:	460b      	mov	r3, r1
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	440b      	add	r3, r1
 8009c7e:	0099      	lsls	r1, r3, #2
 8009c80:	440b      	add	r3, r1
 8009c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8009c86:	3301      	adds	r3, #1
 8009c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	bf0c      	ite	eq
 8009c90:	2301      	moveq	r3, #1
 8009c92:	2300      	movne	r3, #0
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d001      	beq.n	8009c9e <HAL_I2C_Init+0x196>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e022      	b.n	8009ce4 <HAL_I2C_Init+0x1dc>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d10e      	bne.n	8009cc4 <HAL_I2C_Init+0x1bc>
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	1e58      	subs	r0, r3, #1
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6859      	ldr	r1, [r3, #4]
 8009cae:	460b      	mov	r3, r1
 8009cb0:	005b      	lsls	r3, r3, #1
 8009cb2:	440b      	add	r3, r1
 8009cb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8009cb8:	3301      	adds	r3, #1
 8009cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009cbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cc2:	e00f      	b.n	8009ce4 <HAL_I2C_Init+0x1dc>
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	1e58      	subs	r0, r3, #1
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6859      	ldr	r1, [r3, #4]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	440b      	add	r3, r1
 8009cd2:	0099      	lsls	r1, r3, #2
 8009cd4:	440b      	add	r3, r1
 8009cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009cda:	3301      	adds	r3, #1
 8009cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ce0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009ce4:	6879      	ldr	r1, [r7, #4]
 8009ce6:	6809      	ldr	r1, [r1, #0]
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	69da      	ldr	r2, [r3, #28]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	431a      	orrs	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	430a      	orrs	r2, r1
 8009d06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009d12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	6911      	ldr	r1, [r2, #16]
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	68d2      	ldr	r2, [r2, #12]
 8009d1e:	4311      	orrs	r1, r2
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	6812      	ldr	r2, [r2, #0]
 8009d24:	430b      	orrs	r3, r1
 8009d26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	695a      	ldr	r2, [r3, #20]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	431a      	orrs	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	430a      	orrs	r2, r1
 8009d42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f042 0201 	orr.w	r2, r2, #1
 8009d52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2220      	movs	r2, #32
 8009d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	000186a0 	.word	0x000186a0
 8009d80:	001e847f 	.word	0x001e847f
 8009d84:	003d08ff 	.word	0x003d08ff
 8009d88:	431bde83 	.word	0x431bde83
 8009d8c:	10624dd3 	.word	0x10624dd3

08009d90 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d101      	bne.n	8009da2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e021      	b.n	8009de6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2224      	movs	r2, #36	@ 0x24
 8009da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f022 0201 	bic.w	r2, r2, #1
 8009db8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7fd fc3a 	bl	8007634 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
	...

08009df0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b088      	sub	sp, #32
 8009df4:	af02      	add	r7, sp, #8
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	4608      	mov	r0, r1
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	4603      	mov	r3, r0
 8009e00:	817b      	strh	r3, [r7, #10]
 8009e02:	460b      	mov	r3, r1
 8009e04:	813b      	strh	r3, [r7, #8]
 8009e06:	4613      	mov	r3, r2
 8009e08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009e0a:	f7fe fa0f 	bl	800822c <HAL_GetTick>
 8009e0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	2b20      	cmp	r3, #32
 8009e1a:	f040 80d9 	bne.w	8009fd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	2319      	movs	r3, #25
 8009e24:	2201      	movs	r2, #1
 8009e26:	496d      	ldr	r1, [pc, #436]	@ (8009fdc <HAL_I2C_Mem_Write+0x1ec>)
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f000 fc8b 	bl	800a744 <I2C_WaitOnFlagUntilTimeout>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d001      	beq.n	8009e38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009e34:	2302      	movs	r3, #2
 8009e36:	e0cc      	b.n	8009fd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d101      	bne.n	8009e46 <HAL_I2C_Mem_Write+0x56>
 8009e42:	2302      	movs	r3, #2
 8009e44:	e0c5      	b.n	8009fd2 <HAL_I2C_Mem_Write+0x1e2>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f003 0301 	and.w	r3, r3, #1
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d007      	beq.n	8009e6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f042 0201 	orr.w	r2, r2, #1
 8009e6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009e7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2221      	movs	r2, #33	@ 0x21
 8009e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2240      	movs	r2, #64	@ 0x40
 8009e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6a3a      	ldr	r2, [r7, #32]
 8009e96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	4a4d      	ldr	r2, [pc, #308]	@ (8009fe0 <HAL_I2C_Mem_Write+0x1f0>)
 8009eac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009eae:	88f8      	ldrh	r0, [r7, #6]
 8009eb0:	893a      	ldrh	r2, [r7, #8]
 8009eb2:	8979      	ldrh	r1, [r7, #10]
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	9301      	str	r3, [sp, #4]
 8009eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f000 fac2 	bl	800a448 <I2C_RequestMemoryWrite>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d052      	beq.n	8009f70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e081      	b.n	8009fd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f000 fd50 	bl	800a978 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00d      	beq.n	8009efa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ee2:	2b04      	cmp	r3, #4
 8009ee4:	d107      	bne.n	8009ef6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ef4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e06b      	b.n	8009fd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009efe:	781a      	ldrb	r2, [r3, #0]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f0a:	1c5a      	adds	r2, r3, #1
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f14:	3b01      	subs	r3, #1
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	3b01      	subs	r3, #1
 8009f24:	b29a      	uxth	r2, r3
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	695b      	ldr	r3, [r3, #20]
 8009f30:	f003 0304 	and.w	r3, r3, #4
 8009f34:	2b04      	cmp	r3, #4
 8009f36:	d11b      	bne.n	8009f70 <HAL_I2C_Mem_Write+0x180>
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d017      	beq.n	8009f70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f44:	781a      	ldrb	r2, [r3, #0]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f50:	1c5a      	adds	r2, r3, #1
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d1aa      	bne.n	8009ece <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f78:	697a      	ldr	r2, [r7, #20]
 8009f7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f000 fd43 	bl	800aa08 <I2C_WaitOnBTFFlagUntilTimeout>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00d      	beq.n	8009fa4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f8c:	2b04      	cmp	r3, #4
 8009f8e:	d107      	bne.n	8009fa0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e016      	b.n	8009fd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2220      	movs	r2, #32
 8009fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	e000      	b.n	8009fd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009fd0:	2302      	movs	r3, #2
  }
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	00100002 	.word	0x00100002
 8009fe0:	ffff0000 	.word	0xffff0000

08009fe4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b08c      	sub	sp, #48	@ 0x30
 8009fe8:	af02      	add	r7, sp, #8
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	4608      	mov	r0, r1
 8009fee:	4611      	mov	r1, r2
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	817b      	strh	r3, [r7, #10]
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	813b      	strh	r3, [r7, #8]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ffe:	f7fe f915 	bl	800822c <HAL_GetTick>
 800a002:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	2b20      	cmp	r3, #32
 800a00e:	f040 8214 	bne.w	800a43a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	2319      	movs	r3, #25
 800a018:	2201      	movs	r2, #1
 800a01a:	497b      	ldr	r1, [pc, #492]	@ (800a208 <HAL_I2C_Mem_Read+0x224>)
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f000 fb91 	bl	800a744 <I2C_WaitOnFlagUntilTimeout>
 800a022:	4603      	mov	r3, r0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d001      	beq.n	800a02c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a028:	2302      	movs	r3, #2
 800a02a:	e207      	b.n	800a43c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a032:	2b01      	cmp	r3, #1
 800a034:	d101      	bne.n	800a03a <HAL_I2C_Mem_Read+0x56>
 800a036:	2302      	movs	r3, #2
 800a038:	e200      	b.n	800a43c <HAL_I2C_Mem_Read+0x458>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f003 0301 	and.w	r3, r3, #1
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d007      	beq.n	800a060 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f042 0201 	orr.w	r2, r2, #1
 800a05e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a06e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2222      	movs	r2, #34	@ 0x22
 800a074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2240      	movs	r2, #64	@ 0x40
 800a07c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a08a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a090:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a096:	b29a      	uxth	r2, r3
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	4a5b      	ldr	r2, [pc, #364]	@ (800a20c <HAL_I2C_Mem_Read+0x228>)
 800a0a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a0a2:	88f8      	ldrh	r0, [r7, #6]
 800a0a4:	893a      	ldrh	r2, [r7, #8]
 800a0a6:	8979      	ldrh	r1, [r7, #10]
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0aa:	9301      	str	r3, [sp, #4]
 800a0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f000 fa5e 	bl	800a574 <I2C_RequestMemoryRead>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e1bc      	b.n	800a43c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d113      	bne.n	800a0f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	623b      	str	r3, [r7, #32]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	695b      	ldr	r3, [r3, #20]
 800a0d4:	623b      	str	r3, [r7, #32]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	699b      	ldr	r3, [r3, #24]
 800a0dc:	623b      	str	r3, [r7, #32]
 800a0de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a0ee:	601a      	str	r2, [r3, #0]
 800a0f0:	e190      	b.n	800a414 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d11b      	bne.n	800a132 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a108:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a10a:	2300      	movs	r3, #0
 800a10c:	61fb      	str	r3, [r7, #28]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	695b      	ldr	r3, [r3, #20]
 800a114:	61fb      	str	r3, [r7, #28]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	61fb      	str	r3, [r7, #28]
 800a11e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a12e:	601a      	str	r2, [r3, #0]
 800a130:	e170      	b.n	800a414 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a136:	2b02      	cmp	r3, #2
 800a138:	d11b      	bne.n	800a172 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a148:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a158:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a15a:	2300      	movs	r3, #0
 800a15c:	61bb      	str	r3, [r7, #24]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	695b      	ldr	r3, [r3, #20]
 800a164:	61bb      	str	r3, [r7, #24]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	699b      	ldr	r3, [r3, #24]
 800a16c:	61bb      	str	r3, [r7, #24]
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	e150      	b.n	800a414 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a172:	2300      	movs	r3, #0
 800a174:	617b      	str	r3, [r7, #20]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	695b      	ldr	r3, [r3, #20]
 800a17c:	617b      	str	r3, [r7, #20]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	617b      	str	r3, [r7, #20]
 800a186:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a188:	e144      	b.n	800a414 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a18e:	2b03      	cmp	r3, #3
 800a190:	f200 80f1 	bhi.w	800a376 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d123      	bne.n	800a1e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a19c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a19e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f000 fc79 	bl	800aa98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d001      	beq.n	800a1b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e145      	b.n	800a43c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	691a      	ldr	r2, [r3, #16]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ba:	b2d2      	uxtb	r2, r2
 800a1bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1c2:	1c5a      	adds	r2, r3, #1
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	3b01      	subs	r3, #1
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a1e2:	e117      	b.n	800a414 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d14e      	bne.n	800a28a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	4906      	ldr	r1, [pc, #24]	@ (800a210 <HAL_I2C_Mem_Read+0x22c>)
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f000 faa4 	bl	800a744 <I2C_WaitOnFlagUntilTimeout>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d008      	beq.n	800a214 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	e11a      	b.n	800a43c <HAL_I2C_Mem_Read+0x458>
 800a206:	bf00      	nop
 800a208:	00100002 	.word	0x00100002
 800a20c:	ffff0000 	.word	0xffff0000
 800a210:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	691a      	ldr	r2, [r3, #16]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a22e:	b2d2      	uxtb	r2, r2
 800a230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a236:	1c5a      	adds	r2, r3, #1
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a240:	3b01      	subs	r3, #1
 800a242:	b29a      	uxth	r2, r3
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	3b01      	subs	r3, #1
 800a250:	b29a      	uxth	r2, r3
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	691a      	ldr	r2, [r3, #16]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a260:	b2d2      	uxtb	r2, r2
 800a262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a268:	1c5a      	adds	r2, r3, #1
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a272:	3b01      	subs	r3, #1
 800a274:	b29a      	uxth	r2, r3
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a27e:	b29b      	uxth	r3, r3
 800a280:	3b01      	subs	r3, #1
 800a282:	b29a      	uxth	r2, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a288:	e0c4      	b.n	800a414 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a28c:	9300      	str	r3, [sp, #0]
 800a28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a290:	2200      	movs	r2, #0
 800a292:	496c      	ldr	r1, [pc, #432]	@ (800a444 <HAL_I2C_Mem_Read+0x460>)
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f000 fa55 	bl	800a744 <I2C_WaitOnFlagUntilTimeout>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d001      	beq.n	800a2a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e0cb      	b.n	800a43c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a2b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	691a      	ldr	r2, [r3, #16]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2be:	b2d2      	uxtb	r2, r2
 800a2c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2c6:	1c5a      	adds	r2, r3, #1
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	3b01      	subs	r3, #1
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e8:	9300      	str	r3, [sp, #0]
 800a2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	4955      	ldr	r1, [pc, #340]	@ (800a444 <HAL_I2C_Mem_Read+0x460>)
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f000 fa27 	bl	800a744 <I2C_WaitOnFlagUntilTimeout>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d001      	beq.n	800a300 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e09d      	b.n	800a43c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a30e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	691a      	ldr	r2, [r3, #16]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a31a:	b2d2      	uxtb	r2, r2
 800a31c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a322:	1c5a      	adds	r2, r3, #1
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a32c:	3b01      	subs	r3, #1
 800a32e:	b29a      	uxth	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a338:	b29b      	uxth	r3, r3
 800a33a:	3b01      	subs	r3, #1
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	691a      	ldr	r2, [r3, #16]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a34c:	b2d2      	uxtb	r2, r2
 800a34e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a354:	1c5a      	adds	r2, r3, #1
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a35e:	3b01      	subs	r3, #1
 800a360:	b29a      	uxth	r2, r3
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	3b01      	subs	r3, #1
 800a36e:	b29a      	uxth	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a374:	e04e      	b.n	800a414 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a378:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f000 fb8c 	bl	800aa98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e058      	b.n	800a43c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	691a      	ldr	r2, [r3, #16]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a394:	b2d2      	uxtb	r2, r2
 800a396:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a39c:	1c5a      	adds	r2, r3, #1
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	b29a      	uxth	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	695b      	ldr	r3, [r3, #20]
 800a3c2:	f003 0304 	and.w	r3, r3, #4
 800a3c6:	2b04      	cmp	r3, #4
 800a3c8:	d124      	bne.n	800a414 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3ce:	2b03      	cmp	r3, #3
 800a3d0:	d107      	bne.n	800a3e2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a3e0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	691a      	ldr	r2, [r3, #16]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ec:	b2d2      	uxtb	r2, r2
 800a3ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3f4:	1c5a      	adds	r2, r3, #1
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3fe:	3b01      	subs	r3, #1
 800a400:	b29a      	uxth	r2, r3
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	3b01      	subs	r3, #1
 800a40e:	b29a      	uxth	r2, r3
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f47f aeb6 	bne.w	800a18a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2220      	movs	r2, #32
 800a422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2200      	movs	r2, #0
 800a42a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	e000      	b.n	800a43c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800a43a:	2302      	movs	r3, #2
  }
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3728      	adds	r7, #40	@ 0x28
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}
 800a444:	00010004 	.word	0x00010004

0800a448 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b088      	sub	sp, #32
 800a44c:	af02      	add	r7, sp, #8
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	4608      	mov	r0, r1
 800a452:	4611      	mov	r1, r2
 800a454:	461a      	mov	r2, r3
 800a456:	4603      	mov	r3, r0
 800a458:	817b      	strh	r3, [r7, #10]
 800a45a:	460b      	mov	r3, r1
 800a45c:	813b      	strh	r3, [r7, #8]
 800a45e:	4613      	mov	r3, r2
 800a460:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a470:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	6a3b      	ldr	r3, [r7, #32]
 800a478:	2200      	movs	r2, #0
 800a47a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f000 f960 	bl	800a744 <I2C_WaitOnFlagUntilTimeout>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00d      	beq.n	800a4a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a498:	d103      	bne.n	800a4a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a4a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	e05f      	b.n	800a566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a4a6:	897b      	ldrh	r3, [r7, #10]
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a4b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b8:	6a3a      	ldr	r2, [r7, #32]
 800a4ba:	492d      	ldr	r1, [pc, #180]	@ (800a570 <I2C_RequestMemoryWrite+0x128>)
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f000 f9bb 	bl	800a838 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d001      	beq.n	800a4cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e04c      	b.n	800a566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	617b      	str	r3, [r7, #20]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	617b      	str	r3, [r7, #20]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	699b      	ldr	r3, [r3, #24]
 800a4de:	617b      	str	r3, [r7, #20]
 800a4e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4e4:	6a39      	ldr	r1, [r7, #32]
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f000 fa46 	bl	800a978 <I2C_WaitOnTXEFlagUntilTimeout>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00d      	beq.n	800a50e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4f6:	2b04      	cmp	r3, #4
 800a4f8:	d107      	bne.n	800a50a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a508:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e02b      	b.n	800a566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a50e:	88fb      	ldrh	r3, [r7, #6]
 800a510:	2b01      	cmp	r3, #1
 800a512:	d105      	bne.n	800a520 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a514:	893b      	ldrh	r3, [r7, #8]
 800a516:	b2da      	uxtb	r2, r3
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	611a      	str	r2, [r3, #16]
 800a51e:	e021      	b.n	800a564 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a520:	893b      	ldrh	r3, [r7, #8]
 800a522:	0a1b      	lsrs	r3, r3, #8
 800a524:	b29b      	uxth	r3, r3
 800a526:	b2da      	uxtb	r2, r3
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a52e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a530:	6a39      	ldr	r1, [r7, #32]
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f000 fa20 	bl	800a978 <I2C_WaitOnTXEFlagUntilTimeout>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00d      	beq.n	800a55a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a542:	2b04      	cmp	r3, #4
 800a544:	d107      	bne.n	800a556 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a554:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	e005      	b.n	800a566 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a55a:	893b      	ldrh	r3, [r7, #8]
 800a55c:	b2da      	uxtb	r2, r3
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3718      	adds	r7, #24
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	00010002 	.word	0x00010002

0800a574 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af02      	add	r7, sp, #8
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	4608      	mov	r0, r1
 800a57e:	4611      	mov	r1, r2
 800a580:	461a      	mov	r2, r3
 800a582:	4603      	mov	r3, r0
 800a584:	817b      	strh	r3, [r7, #10]
 800a586:	460b      	mov	r3, r1
 800a588:	813b      	strh	r3, [r7, #8]
 800a58a:	4613      	mov	r3, r2
 800a58c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a59c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a5ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b0:	9300      	str	r3, [sp, #0]
 800a5b2:	6a3b      	ldr	r3, [r7, #32]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f000 f8c2 	bl	800a744 <I2C_WaitOnFlagUntilTimeout>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00d      	beq.n	800a5e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5d4:	d103      	bne.n	800a5de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a5dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e0aa      	b.n	800a738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a5e2:	897b      	ldrh	r3, [r7, #10]
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a5f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f4:	6a3a      	ldr	r2, [r7, #32]
 800a5f6:	4952      	ldr	r1, [pc, #328]	@ (800a740 <I2C_RequestMemoryRead+0x1cc>)
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f000 f91d 	bl	800a838 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d001      	beq.n	800a608 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	e097      	b.n	800a738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a608:	2300      	movs	r3, #0
 800a60a:	617b      	str	r3, [r7, #20]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	695b      	ldr	r3, [r3, #20]
 800a612:	617b      	str	r3, [r7, #20]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	699b      	ldr	r3, [r3, #24]
 800a61a:	617b      	str	r3, [r7, #20]
 800a61c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a61e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a620:	6a39      	ldr	r1, [r7, #32]
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f000 f9a8 	bl	800a978 <I2C_WaitOnTXEFlagUntilTimeout>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00d      	beq.n	800a64a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a632:	2b04      	cmp	r3, #4
 800a634:	d107      	bne.n	800a646 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a644:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a646:	2301      	movs	r3, #1
 800a648:	e076      	b.n	800a738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a64a:	88fb      	ldrh	r3, [r7, #6]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d105      	bne.n	800a65c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a650:	893b      	ldrh	r3, [r7, #8]
 800a652:	b2da      	uxtb	r2, r3
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	611a      	str	r2, [r3, #16]
 800a65a:	e021      	b.n	800a6a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a65c:	893b      	ldrh	r3, [r7, #8]
 800a65e:	0a1b      	lsrs	r3, r3, #8
 800a660:	b29b      	uxth	r3, r3
 800a662:	b2da      	uxtb	r2, r3
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a66a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a66c:	6a39      	ldr	r1, [r7, #32]
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f000 f982 	bl	800a978 <I2C_WaitOnTXEFlagUntilTimeout>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00d      	beq.n	800a696 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a67e:	2b04      	cmp	r3, #4
 800a680:	d107      	bne.n	800a692 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a690:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	e050      	b.n	800a738 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a696:	893b      	ldrh	r3, [r7, #8]
 800a698:	b2da      	uxtb	r2, r3
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6a2:	6a39      	ldr	r1, [r7, #32]
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 f967 	bl	800a978 <I2C_WaitOnTXEFlagUntilTimeout>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00d      	beq.n	800a6cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6b4:	2b04      	cmp	r3, #4
 800a6b6:	d107      	bne.n	800a6c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e035      	b.n	800a738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a6da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	6a3b      	ldr	r3, [r7, #32]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f000 f82b 	bl	800a744 <I2C_WaitOnFlagUntilTimeout>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00d      	beq.n	800a710 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a702:	d103      	bne.n	800a70c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a70a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a70c:	2303      	movs	r3, #3
 800a70e:	e013      	b.n	800a738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a710:	897b      	ldrh	r3, [r7, #10]
 800a712:	b2db      	uxtb	r3, r3
 800a714:	f043 0301 	orr.w	r3, r3, #1
 800a718:	b2da      	uxtb	r2, r3
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a722:	6a3a      	ldr	r2, [r7, #32]
 800a724:	4906      	ldr	r1, [pc, #24]	@ (800a740 <I2C_RequestMemoryRead+0x1cc>)
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f000 f886 	bl	800a838 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d001      	beq.n	800a736 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	e000      	b.n	800a738 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3718      	adds	r7, #24
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	00010002 	.word	0x00010002

0800a744 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	603b      	str	r3, [r7, #0]
 800a750:	4613      	mov	r3, r2
 800a752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a754:	e048      	b.n	800a7e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a75c:	d044      	beq.n	800a7e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a75e:	f7fd fd65 	bl	800822c <HAL_GetTick>
 800a762:	4602      	mov	r2, r0
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	683a      	ldr	r2, [r7, #0]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d302      	bcc.n	800a774 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d139      	bne.n	800a7e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	0c1b      	lsrs	r3, r3, #16
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d10d      	bne.n	800a79a <I2C_WaitOnFlagUntilTimeout+0x56>
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	695b      	ldr	r3, [r3, #20]
 800a784:	43da      	mvns	r2, r3
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	4013      	ands	r3, r2
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	bf0c      	ite	eq
 800a790:	2301      	moveq	r3, #1
 800a792:	2300      	movne	r3, #0
 800a794:	b2db      	uxtb	r3, r3
 800a796:	461a      	mov	r2, r3
 800a798:	e00c      	b.n	800a7b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	699b      	ldr	r3, [r3, #24]
 800a7a0:	43da      	mvns	r2, r3
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	4013      	ands	r3, r2
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	bf0c      	ite	eq
 800a7ac:	2301      	moveq	r3, #1
 800a7ae:	2300      	movne	r3, #0
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	79fb      	ldrb	r3, [r7, #7]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d116      	bne.n	800a7e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2220      	movs	r2, #32
 800a7c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7d4:	f043 0220 	orr.w	r2, r3, #32
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e023      	b.n	800a830 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	0c1b      	lsrs	r3, r3, #16
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d10d      	bne.n	800a80e <I2C_WaitOnFlagUntilTimeout+0xca>
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	695b      	ldr	r3, [r3, #20]
 800a7f8:	43da      	mvns	r2, r3
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	2b00      	cmp	r3, #0
 800a802:	bf0c      	ite	eq
 800a804:	2301      	moveq	r3, #1
 800a806:	2300      	movne	r3, #0
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	461a      	mov	r2, r3
 800a80c:	e00c      	b.n	800a828 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	43da      	mvns	r2, r3
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	4013      	ands	r3, r2
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	bf0c      	ite	eq
 800a820:	2301      	moveq	r3, #1
 800a822:	2300      	movne	r3, #0
 800a824:	b2db      	uxtb	r3, r3
 800a826:	461a      	mov	r2, r3
 800a828:	79fb      	ldrb	r3, [r7, #7]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d093      	beq.n	800a756 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3710      	adds	r7, #16
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
 800a844:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a846:	e071      	b.n	800a92c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a856:	d123      	bne.n	800a8a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a866:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a870:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2200      	movs	r2, #0
 800a876:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2220      	movs	r2, #32
 800a87c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a88c:	f043 0204 	orr.w	r2, r3, #4
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2200      	movs	r2, #0
 800a898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	e067      	b.n	800a970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a6:	d041      	beq.n	800a92c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8a8:	f7fd fcc0 	bl	800822c <HAL_GetTick>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d302      	bcc.n	800a8be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d136      	bne.n	800a92c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	0c1b      	lsrs	r3, r3, #16
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d10c      	bne.n	800a8e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	43da      	mvns	r2, r3
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	4013      	ands	r3, r2
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	bf14      	ite	ne
 800a8da:	2301      	movne	r3, #1
 800a8dc:	2300      	moveq	r3, #0
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	e00b      	b.n	800a8fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	699b      	ldr	r3, [r3, #24]
 800a8e8:	43da      	mvns	r2, r3
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	4013      	ands	r3, r2
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	bf14      	ite	ne
 800a8f4:	2301      	movne	r3, #1
 800a8f6:	2300      	moveq	r3, #0
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d016      	beq.n	800a92c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2220      	movs	r2, #32
 800a908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2200      	movs	r2, #0
 800a910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a918:	f043 0220 	orr.w	r2, r3, #32
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a928:	2301      	movs	r3, #1
 800a92a:	e021      	b.n	800a970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	0c1b      	lsrs	r3, r3, #16
 800a930:	b2db      	uxtb	r3, r3
 800a932:	2b01      	cmp	r3, #1
 800a934:	d10c      	bne.n	800a950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	695b      	ldr	r3, [r3, #20]
 800a93c:	43da      	mvns	r2, r3
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	4013      	ands	r3, r2
 800a942:	b29b      	uxth	r3, r3
 800a944:	2b00      	cmp	r3, #0
 800a946:	bf14      	ite	ne
 800a948:	2301      	movne	r3, #1
 800a94a:	2300      	moveq	r3, #0
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	e00b      	b.n	800a968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	699b      	ldr	r3, [r3, #24]
 800a956:	43da      	mvns	r2, r3
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	4013      	ands	r3, r2
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	2b00      	cmp	r3, #0
 800a960:	bf14      	ite	ne
 800a962:	2301      	movne	r3, #1
 800a964:	2300      	moveq	r3, #0
 800a966:	b2db      	uxtb	r3, r3
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f47f af6d 	bne.w	800a848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a984:	e034      	b.n	800a9f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f000 f8e3 	bl	800ab52 <I2C_IsAcknowledgeFailed>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d001      	beq.n	800a996 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	e034      	b.n	800aa00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a99c:	d028      	beq.n	800a9f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a99e:	f7fd fc45 	bl	800822c <HAL_GetTick>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	1ad3      	subs	r3, r2, r3
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d302      	bcc.n	800a9b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d11d      	bne.n	800a9f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	695b      	ldr	r3, [r3, #20]
 800a9ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9be:	2b80      	cmp	r3, #128	@ 0x80
 800a9c0:	d016      	beq.n	800a9f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2220      	movs	r2, #32
 800a9cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9dc:	f043 0220 	orr.w	r2, r3, #32
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e007      	b.n	800aa00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9fa:	2b80      	cmp	r3, #128	@ 0x80
 800a9fc:	d1c3      	bne.n	800a986 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aa14:	e034      	b.n	800aa80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aa16:	68f8      	ldr	r0, [r7, #12]
 800aa18:	f000 f89b 	bl	800ab52 <I2C_IsAcknowledgeFailed>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d001      	beq.n	800aa26 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	e034      	b.n	800aa90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa2c:	d028      	beq.n	800aa80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa2e:	f7fd fbfd 	bl	800822c <HAL_GetTick>
 800aa32:	4602      	mov	r2, r0
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	68ba      	ldr	r2, [r7, #8]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d302      	bcc.n	800aa44 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d11d      	bne.n	800aa80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	695b      	ldr	r3, [r3, #20]
 800aa4a:	f003 0304 	and.w	r3, r3, #4
 800aa4e:	2b04      	cmp	r3, #4
 800aa50:	d016      	beq.n	800aa80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2200      	movs	r2, #0
 800aa56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2220      	movs	r2, #32
 800aa5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa6c:	f043 0220 	orr.w	r2, r3, #32
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e007      	b.n	800aa90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	695b      	ldr	r3, [r3, #20]
 800aa86:	f003 0304 	and.w	r3, r3, #4
 800aa8a:	2b04      	cmp	r3, #4
 800aa8c:	d1c3      	bne.n	800aa16 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aaa4:	e049      	b.n	800ab3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	695b      	ldr	r3, [r3, #20]
 800aaac:	f003 0310 	and.w	r3, r3, #16
 800aab0:	2b10      	cmp	r3, #16
 800aab2:	d119      	bne.n	800aae8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f06f 0210 	mvn.w	r2, #16
 800aabc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2200      	movs	r2, #0
 800aac2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2220      	movs	r2, #32
 800aac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2200      	movs	r2, #0
 800aad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	e030      	b.n	800ab4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aae8:	f7fd fba0 	bl	800822c <HAL_GetTick>
 800aaec:	4602      	mov	r2, r0
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	1ad3      	subs	r3, r2, r3
 800aaf2:	68ba      	ldr	r2, [r7, #8]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d302      	bcc.n	800aafe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d11d      	bne.n	800ab3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	695b      	ldr	r3, [r3, #20]
 800ab04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab08:	2b40      	cmp	r3, #64	@ 0x40
 800ab0a:	d016      	beq.n	800ab3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2220      	movs	r2, #32
 800ab16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab26:	f043 0220 	orr.w	r2, r3, #32
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800ab36:	2301      	movs	r3, #1
 800ab38:	e007      	b.n	800ab4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	695b      	ldr	r3, [r3, #20]
 800ab40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab44:	2b40      	cmp	r3, #64	@ 0x40
 800ab46:	d1ae      	bne.n	800aaa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ab52:	b480      	push	{r7}
 800ab54:	b083      	sub	sp, #12
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	695b      	ldr	r3, [r3, #20]
 800ab60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab68:	d11b      	bne.n	800aba2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ab72:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2220      	movs	r2, #32
 800ab7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab8e:	f043 0204 	orr.w	r2, r3, #4
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e000      	b.n	800aba4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d101      	bne.n	800abc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800abc0:	2301      	movs	r3, #1
 800abc2:	e0cc      	b.n	800ad5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800abc4:	4b68      	ldr	r3, [pc, #416]	@ (800ad68 <HAL_RCC_ClockConfig+0x1b8>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f003 030f 	and.w	r3, r3, #15
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d90c      	bls.n	800abec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abd2:	4b65      	ldr	r3, [pc, #404]	@ (800ad68 <HAL_RCC_ClockConfig+0x1b8>)
 800abd4:	683a      	ldr	r2, [r7, #0]
 800abd6:	b2d2      	uxtb	r2, r2
 800abd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800abda:	4b63      	ldr	r3, [pc, #396]	@ (800ad68 <HAL_RCC_ClockConfig+0x1b8>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f003 030f 	and.w	r3, r3, #15
 800abe2:	683a      	ldr	r2, [r7, #0]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d001      	beq.n	800abec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	e0b8      	b.n	800ad5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f003 0302 	and.w	r3, r3, #2
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d020      	beq.n	800ac3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f003 0304 	and.w	r3, r3, #4
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d005      	beq.n	800ac10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ac04:	4b59      	ldr	r3, [pc, #356]	@ (800ad6c <HAL_RCC_ClockConfig+0x1bc>)
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	4a58      	ldr	r2, [pc, #352]	@ (800ad6c <HAL_RCC_ClockConfig+0x1bc>)
 800ac0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ac0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 0308 	and.w	r3, r3, #8
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d005      	beq.n	800ac28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ac1c:	4b53      	ldr	r3, [pc, #332]	@ (800ad6c <HAL_RCC_ClockConfig+0x1bc>)
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	4a52      	ldr	r2, [pc, #328]	@ (800ad6c <HAL_RCC_ClockConfig+0x1bc>)
 800ac22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ac26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac28:	4b50      	ldr	r3, [pc, #320]	@ (800ad6c <HAL_RCC_ClockConfig+0x1bc>)
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	494d      	ldr	r1, [pc, #308]	@ (800ad6c <HAL_RCC_ClockConfig+0x1bc>)
 800ac36:	4313      	orrs	r3, r2
 800ac38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 0301 	and.w	r3, r3, #1
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d044      	beq.n	800acd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d107      	bne.n	800ac5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac4e:	4b47      	ldr	r3, [pc, #284]	@ (800ad6c <HAL_RCC_ClockConfig+0x1bc>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d119      	bne.n	800ac8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	e07f      	b.n	800ad5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d003      	beq.n	800ac6e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ac6a:	2b03      	cmp	r3, #3
 800ac6c:	d107      	bne.n	800ac7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac6e:	4b3f      	ldr	r3, [pc, #252]	@ (800ad6c <HAL_RCC_ClockConfig+0x1bc>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d109      	bne.n	800ac8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e06f      	b.n	800ad5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac7e:	4b3b      	ldr	r3, [pc, #236]	@ (800ad6c <HAL_RCC_ClockConfig+0x1bc>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f003 0302 	and.w	r3, r3, #2
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d101      	bne.n	800ac8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e067      	b.n	800ad5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ac8e:	4b37      	ldr	r3, [pc, #220]	@ (800ad6c <HAL_RCC_ClockConfig+0x1bc>)
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	f023 0203 	bic.w	r2, r3, #3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	4934      	ldr	r1, [pc, #208]	@ (800ad6c <HAL_RCC_ClockConfig+0x1bc>)
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aca0:	f7fd fac4 	bl	800822c <HAL_GetTick>
 800aca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aca6:	e00a      	b.n	800acbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aca8:	f7fd fac0 	bl	800822c <HAL_GetTick>
 800acac:	4602      	mov	r2, r0
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	1ad3      	subs	r3, r2, r3
 800acb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d901      	bls.n	800acbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800acba:	2303      	movs	r3, #3
 800acbc:	e04f      	b.n	800ad5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acbe:	4b2b      	ldr	r3, [pc, #172]	@ (800ad6c <HAL_RCC_ClockConfig+0x1bc>)
 800acc0:	689b      	ldr	r3, [r3, #8]
 800acc2:	f003 020c 	and.w	r2, r3, #12
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	429a      	cmp	r2, r3
 800acce:	d1eb      	bne.n	800aca8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800acd0:	4b25      	ldr	r3, [pc, #148]	@ (800ad68 <HAL_RCC_ClockConfig+0x1b8>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f003 030f 	and.w	r3, r3, #15
 800acd8:	683a      	ldr	r2, [r7, #0]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d20c      	bcs.n	800acf8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acde:	4b22      	ldr	r3, [pc, #136]	@ (800ad68 <HAL_RCC_ClockConfig+0x1b8>)
 800ace0:	683a      	ldr	r2, [r7, #0]
 800ace2:	b2d2      	uxtb	r2, r2
 800ace4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ace6:	4b20      	ldr	r3, [pc, #128]	@ (800ad68 <HAL_RCC_ClockConfig+0x1b8>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f003 030f 	and.w	r3, r3, #15
 800acee:	683a      	ldr	r2, [r7, #0]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d001      	beq.n	800acf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800acf4:	2301      	movs	r3, #1
 800acf6:	e032      	b.n	800ad5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 0304 	and.w	r3, r3, #4
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d008      	beq.n	800ad16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad04:	4b19      	ldr	r3, [pc, #100]	@ (800ad6c <HAL_RCC_ClockConfig+0x1bc>)
 800ad06:	689b      	ldr	r3, [r3, #8]
 800ad08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	4916      	ldr	r1, [pc, #88]	@ (800ad6c <HAL_RCC_ClockConfig+0x1bc>)
 800ad12:	4313      	orrs	r3, r2
 800ad14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 0308 	and.w	r3, r3, #8
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d009      	beq.n	800ad36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ad22:	4b12      	ldr	r3, [pc, #72]	@ (800ad6c <HAL_RCC_ClockConfig+0x1bc>)
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	00db      	lsls	r3, r3, #3
 800ad30:	490e      	ldr	r1, [pc, #56]	@ (800ad6c <HAL_RCC_ClockConfig+0x1bc>)
 800ad32:	4313      	orrs	r3, r2
 800ad34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ad36:	f000 f855 	bl	800ade4 <HAL_RCC_GetSysClockFreq>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	4b0b      	ldr	r3, [pc, #44]	@ (800ad6c <HAL_RCC_ClockConfig+0x1bc>)
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	091b      	lsrs	r3, r3, #4
 800ad42:	f003 030f 	and.w	r3, r3, #15
 800ad46:	490a      	ldr	r1, [pc, #40]	@ (800ad70 <HAL_RCC_ClockConfig+0x1c0>)
 800ad48:	5ccb      	ldrb	r3, [r1, r3]
 800ad4a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad4e:	4a09      	ldr	r2, [pc, #36]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c4>)
 800ad50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800ad52:	4b09      	ldr	r3, [pc, #36]	@ (800ad78 <HAL_RCC_ClockConfig+0x1c8>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fd fa24 	bl	80081a4 <HAL_InitTick>

  return HAL_OK;
 800ad5c:	2300      	movs	r3, #0
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	40023c00 	.word	0x40023c00
 800ad6c:	40023800 	.word	0x40023800
 800ad70:	08012738 	.word	0x08012738
 800ad74:	20000040 	.word	0x20000040
 800ad78:	20000044 	.word	0x20000044

0800ad7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ad80:	4b03      	ldr	r3, [pc, #12]	@ (800ad90 <HAL_RCC_GetHCLKFreq+0x14>)
 800ad82:	681b      	ldr	r3, [r3, #0]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	20000040 	.word	0x20000040

0800ad94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ad98:	f7ff fff0 	bl	800ad7c <HAL_RCC_GetHCLKFreq>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	4b05      	ldr	r3, [pc, #20]	@ (800adb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	0a9b      	lsrs	r3, r3, #10
 800ada4:	f003 0307 	and.w	r3, r3, #7
 800ada8:	4903      	ldr	r1, [pc, #12]	@ (800adb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800adaa:	5ccb      	ldrb	r3, [r1, r3]
 800adac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	40023800 	.word	0x40023800
 800adb8:	08012748 	.word	0x08012748

0800adbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800adc0:	f7ff ffdc 	bl	800ad7c <HAL_RCC_GetHCLKFreq>
 800adc4:	4602      	mov	r2, r0
 800adc6:	4b05      	ldr	r3, [pc, #20]	@ (800addc <HAL_RCC_GetPCLK2Freq+0x20>)
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	0b5b      	lsrs	r3, r3, #13
 800adcc:	f003 0307 	and.w	r3, r3, #7
 800add0:	4903      	ldr	r1, [pc, #12]	@ (800ade0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800add2:	5ccb      	ldrb	r3, [r1, r3]
 800add4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800add8:	4618      	mov	r0, r3
 800adda:	bd80      	pop	{r7, pc}
 800addc:	40023800 	.word	0x40023800
 800ade0:	08012748 	.word	0x08012748

0800ade4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ade4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ade8:	b0ae      	sub	sp, #184	@ 0xb8
 800adea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800adec:	2300      	movs	r3, #0
 800adee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800adf2:	2300      	movs	r3, #0
 800adf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800adf8:	2300      	movs	r3, #0
 800adfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800adfe:	2300      	movs	r3, #0
 800ae00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800ae04:	2300      	movs	r3, #0
 800ae06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ae0a:	4bcb      	ldr	r3, [pc, #812]	@ (800b138 <HAL_RCC_GetSysClockFreq+0x354>)
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	f003 030c 	and.w	r3, r3, #12
 800ae12:	2b0c      	cmp	r3, #12
 800ae14:	f200 8206 	bhi.w	800b224 <HAL_RCC_GetSysClockFreq+0x440>
 800ae18:	a201      	add	r2, pc, #4	@ (adr r2, 800ae20 <HAL_RCC_GetSysClockFreq+0x3c>)
 800ae1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae1e:	bf00      	nop
 800ae20:	0800ae55 	.word	0x0800ae55
 800ae24:	0800b225 	.word	0x0800b225
 800ae28:	0800b225 	.word	0x0800b225
 800ae2c:	0800b225 	.word	0x0800b225
 800ae30:	0800ae5d 	.word	0x0800ae5d
 800ae34:	0800b225 	.word	0x0800b225
 800ae38:	0800b225 	.word	0x0800b225
 800ae3c:	0800b225 	.word	0x0800b225
 800ae40:	0800ae65 	.word	0x0800ae65
 800ae44:	0800b225 	.word	0x0800b225
 800ae48:	0800b225 	.word	0x0800b225
 800ae4c:	0800b225 	.word	0x0800b225
 800ae50:	0800b055 	.word	0x0800b055
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ae54:	4bb9      	ldr	r3, [pc, #740]	@ (800b13c <HAL_RCC_GetSysClockFreq+0x358>)
 800ae56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800ae5a:	e1e7      	b.n	800b22c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ae5c:	4bb8      	ldr	r3, [pc, #736]	@ (800b140 <HAL_RCC_GetSysClockFreq+0x35c>)
 800ae5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800ae62:	e1e3      	b.n	800b22c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ae64:	4bb4      	ldr	r3, [pc, #720]	@ (800b138 <HAL_RCC_GetSysClockFreq+0x354>)
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ae70:	4bb1      	ldr	r3, [pc, #708]	@ (800b138 <HAL_RCC_GetSysClockFreq+0x354>)
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d071      	beq.n	800af60 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ae7c:	4bae      	ldr	r3, [pc, #696]	@ (800b138 <HAL_RCC_GetSysClockFreq+0x354>)
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	099b      	lsrs	r3, r3, #6
 800ae82:	2200      	movs	r2, #0
 800ae84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ae88:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800ae8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ae90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ae98:	2300      	movs	r3, #0
 800ae9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ae9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800aea2:	4622      	mov	r2, r4
 800aea4:	462b      	mov	r3, r5
 800aea6:	f04f 0000 	mov.w	r0, #0
 800aeaa:	f04f 0100 	mov.w	r1, #0
 800aeae:	0159      	lsls	r1, r3, #5
 800aeb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800aeb4:	0150      	lsls	r0, r2, #5
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	460b      	mov	r3, r1
 800aeba:	4621      	mov	r1, r4
 800aebc:	1a51      	subs	r1, r2, r1
 800aebe:	6439      	str	r1, [r7, #64]	@ 0x40
 800aec0:	4629      	mov	r1, r5
 800aec2:	eb63 0301 	sbc.w	r3, r3, r1
 800aec6:	647b      	str	r3, [r7, #68]	@ 0x44
 800aec8:	f04f 0200 	mov.w	r2, #0
 800aecc:	f04f 0300 	mov.w	r3, #0
 800aed0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800aed4:	4649      	mov	r1, r9
 800aed6:	018b      	lsls	r3, r1, #6
 800aed8:	4641      	mov	r1, r8
 800aeda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800aede:	4641      	mov	r1, r8
 800aee0:	018a      	lsls	r2, r1, #6
 800aee2:	4641      	mov	r1, r8
 800aee4:	1a51      	subs	r1, r2, r1
 800aee6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800aee8:	4649      	mov	r1, r9
 800aeea:	eb63 0301 	sbc.w	r3, r3, r1
 800aeee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aef0:	f04f 0200 	mov.w	r2, #0
 800aef4:	f04f 0300 	mov.w	r3, #0
 800aef8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800aefc:	4649      	mov	r1, r9
 800aefe:	00cb      	lsls	r3, r1, #3
 800af00:	4641      	mov	r1, r8
 800af02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af06:	4641      	mov	r1, r8
 800af08:	00ca      	lsls	r2, r1, #3
 800af0a:	4610      	mov	r0, r2
 800af0c:	4619      	mov	r1, r3
 800af0e:	4603      	mov	r3, r0
 800af10:	4622      	mov	r2, r4
 800af12:	189b      	adds	r3, r3, r2
 800af14:	633b      	str	r3, [r7, #48]	@ 0x30
 800af16:	462b      	mov	r3, r5
 800af18:	460a      	mov	r2, r1
 800af1a:	eb42 0303 	adc.w	r3, r2, r3
 800af1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800af20:	f04f 0200 	mov.w	r2, #0
 800af24:	f04f 0300 	mov.w	r3, #0
 800af28:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800af2c:	4629      	mov	r1, r5
 800af2e:	024b      	lsls	r3, r1, #9
 800af30:	4621      	mov	r1, r4
 800af32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800af36:	4621      	mov	r1, r4
 800af38:	024a      	lsls	r2, r1, #9
 800af3a:	4610      	mov	r0, r2
 800af3c:	4619      	mov	r1, r3
 800af3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af42:	2200      	movs	r2, #0
 800af44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800af48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800af4c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800af50:	f7f5 fff8 	bl	8000f44 <__aeabi_uldivmod>
 800af54:	4602      	mov	r2, r0
 800af56:	460b      	mov	r3, r1
 800af58:	4613      	mov	r3, r2
 800af5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800af5e:	e067      	b.n	800b030 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800af60:	4b75      	ldr	r3, [pc, #468]	@ (800b138 <HAL_RCC_GetSysClockFreq+0x354>)
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	099b      	lsrs	r3, r3, #6
 800af66:	2200      	movs	r2, #0
 800af68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800af6c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800af70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800af74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af78:	67bb      	str	r3, [r7, #120]	@ 0x78
 800af7a:	2300      	movs	r3, #0
 800af7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800af7e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800af82:	4622      	mov	r2, r4
 800af84:	462b      	mov	r3, r5
 800af86:	f04f 0000 	mov.w	r0, #0
 800af8a:	f04f 0100 	mov.w	r1, #0
 800af8e:	0159      	lsls	r1, r3, #5
 800af90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800af94:	0150      	lsls	r0, r2, #5
 800af96:	4602      	mov	r2, r0
 800af98:	460b      	mov	r3, r1
 800af9a:	4621      	mov	r1, r4
 800af9c:	1a51      	subs	r1, r2, r1
 800af9e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800afa0:	4629      	mov	r1, r5
 800afa2:	eb63 0301 	sbc.w	r3, r3, r1
 800afa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800afa8:	f04f 0200 	mov.w	r2, #0
 800afac:	f04f 0300 	mov.w	r3, #0
 800afb0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800afb4:	4649      	mov	r1, r9
 800afb6:	018b      	lsls	r3, r1, #6
 800afb8:	4641      	mov	r1, r8
 800afba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800afbe:	4641      	mov	r1, r8
 800afc0:	018a      	lsls	r2, r1, #6
 800afc2:	4641      	mov	r1, r8
 800afc4:	ebb2 0a01 	subs.w	sl, r2, r1
 800afc8:	4649      	mov	r1, r9
 800afca:	eb63 0b01 	sbc.w	fp, r3, r1
 800afce:	f04f 0200 	mov.w	r2, #0
 800afd2:	f04f 0300 	mov.w	r3, #0
 800afd6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800afda:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800afde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800afe2:	4692      	mov	sl, r2
 800afe4:	469b      	mov	fp, r3
 800afe6:	4623      	mov	r3, r4
 800afe8:	eb1a 0303 	adds.w	r3, sl, r3
 800afec:	623b      	str	r3, [r7, #32]
 800afee:	462b      	mov	r3, r5
 800aff0:	eb4b 0303 	adc.w	r3, fp, r3
 800aff4:	627b      	str	r3, [r7, #36]	@ 0x24
 800aff6:	f04f 0200 	mov.w	r2, #0
 800affa:	f04f 0300 	mov.w	r3, #0
 800affe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800b002:	4629      	mov	r1, r5
 800b004:	028b      	lsls	r3, r1, #10
 800b006:	4621      	mov	r1, r4
 800b008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b00c:	4621      	mov	r1, r4
 800b00e:	028a      	lsls	r2, r1, #10
 800b010:	4610      	mov	r0, r2
 800b012:	4619      	mov	r1, r3
 800b014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b018:	2200      	movs	r2, #0
 800b01a:	673b      	str	r3, [r7, #112]	@ 0x70
 800b01c:	677a      	str	r2, [r7, #116]	@ 0x74
 800b01e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800b022:	f7f5 ff8f 	bl	8000f44 <__aeabi_uldivmod>
 800b026:	4602      	mov	r2, r0
 800b028:	460b      	mov	r3, r1
 800b02a:	4613      	mov	r3, r2
 800b02c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800b030:	4b41      	ldr	r3, [pc, #260]	@ (800b138 <HAL_RCC_GetSysClockFreq+0x354>)
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	0c1b      	lsrs	r3, r3, #16
 800b036:	f003 0303 	and.w	r3, r3, #3
 800b03a:	3301      	adds	r3, #1
 800b03c:	005b      	lsls	r3, r3, #1
 800b03e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800b042:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b046:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b04a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b04e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800b052:	e0eb      	b.n	800b22c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b054:	4b38      	ldr	r3, [pc, #224]	@ (800b138 <HAL_RCC_GetSysClockFreq+0x354>)
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b05c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b060:	4b35      	ldr	r3, [pc, #212]	@ (800b138 <HAL_RCC_GetSysClockFreq+0x354>)
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d06b      	beq.n	800b144 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b06c:	4b32      	ldr	r3, [pc, #200]	@ (800b138 <HAL_RCC_GetSysClockFreq+0x354>)
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	099b      	lsrs	r3, r3, #6
 800b072:	2200      	movs	r2, #0
 800b074:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b076:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b078:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b07a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b07e:	663b      	str	r3, [r7, #96]	@ 0x60
 800b080:	2300      	movs	r3, #0
 800b082:	667b      	str	r3, [r7, #100]	@ 0x64
 800b084:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800b088:	4622      	mov	r2, r4
 800b08a:	462b      	mov	r3, r5
 800b08c:	f04f 0000 	mov.w	r0, #0
 800b090:	f04f 0100 	mov.w	r1, #0
 800b094:	0159      	lsls	r1, r3, #5
 800b096:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b09a:	0150      	lsls	r0, r2, #5
 800b09c:	4602      	mov	r2, r0
 800b09e:	460b      	mov	r3, r1
 800b0a0:	4621      	mov	r1, r4
 800b0a2:	1a51      	subs	r1, r2, r1
 800b0a4:	61b9      	str	r1, [r7, #24]
 800b0a6:	4629      	mov	r1, r5
 800b0a8:	eb63 0301 	sbc.w	r3, r3, r1
 800b0ac:	61fb      	str	r3, [r7, #28]
 800b0ae:	f04f 0200 	mov.w	r2, #0
 800b0b2:	f04f 0300 	mov.w	r3, #0
 800b0b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800b0ba:	4659      	mov	r1, fp
 800b0bc:	018b      	lsls	r3, r1, #6
 800b0be:	4651      	mov	r1, sl
 800b0c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b0c4:	4651      	mov	r1, sl
 800b0c6:	018a      	lsls	r2, r1, #6
 800b0c8:	4651      	mov	r1, sl
 800b0ca:	ebb2 0801 	subs.w	r8, r2, r1
 800b0ce:	4659      	mov	r1, fp
 800b0d0:	eb63 0901 	sbc.w	r9, r3, r1
 800b0d4:	f04f 0200 	mov.w	r2, #0
 800b0d8:	f04f 0300 	mov.w	r3, #0
 800b0dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b0e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b0e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b0e8:	4690      	mov	r8, r2
 800b0ea:	4699      	mov	r9, r3
 800b0ec:	4623      	mov	r3, r4
 800b0ee:	eb18 0303 	adds.w	r3, r8, r3
 800b0f2:	613b      	str	r3, [r7, #16]
 800b0f4:	462b      	mov	r3, r5
 800b0f6:	eb49 0303 	adc.w	r3, r9, r3
 800b0fa:	617b      	str	r3, [r7, #20]
 800b0fc:	f04f 0200 	mov.w	r2, #0
 800b100:	f04f 0300 	mov.w	r3, #0
 800b104:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800b108:	4629      	mov	r1, r5
 800b10a:	024b      	lsls	r3, r1, #9
 800b10c:	4621      	mov	r1, r4
 800b10e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b112:	4621      	mov	r1, r4
 800b114:	024a      	lsls	r2, r1, #9
 800b116:	4610      	mov	r0, r2
 800b118:	4619      	mov	r1, r3
 800b11a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b11e:	2200      	movs	r2, #0
 800b120:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b122:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800b124:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b128:	f7f5 ff0c 	bl	8000f44 <__aeabi_uldivmod>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	4613      	mov	r3, r2
 800b132:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b136:	e065      	b.n	800b204 <HAL_RCC_GetSysClockFreq+0x420>
 800b138:	40023800 	.word	0x40023800
 800b13c:	00f42400 	.word	0x00f42400
 800b140:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b144:	4b3d      	ldr	r3, [pc, #244]	@ (800b23c <HAL_RCC_GetSysClockFreq+0x458>)
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	099b      	lsrs	r3, r3, #6
 800b14a:	2200      	movs	r2, #0
 800b14c:	4618      	mov	r0, r3
 800b14e:	4611      	mov	r1, r2
 800b150:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b154:	653b      	str	r3, [r7, #80]	@ 0x50
 800b156:	2300      	movs	r3, #0
 800b158:	657b      	str	r3, [r7, #84]	@ 0x54
 800b15a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800b15e:	4642      	mov	r2, r8
 800b160:	464b      	mov	r3, r9
 800b162:	f04f 0000 	mov.w	r0, #0
 800b166:	f04f 0100 	mov.w	r1, #0
 800b16a:	0159      	lsls	r1, r3, #5
 800b16c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b170:	0150      	lsls	r0, r2, #5
 800b172:	4602      	mov	r2, r0
 800b174:	460b      	mov	r3, r1
 800b176:	4641      	mov	r1, r8
 800b178:	1a51      	subs	r1, r2, r1
 800b17a:	60b9      	str	r1, [r7, #8]
 800b17c:	4649      	mov	r1, r9
 800b17e:	eb63 0301 	sbc.w	r3, r3, r1
 800b182:	60fb      	str	r3, [r7, #12]
 800b184:	f04f 0200 	mov.w	r2, #0
 800b188:	f04f 0300 	mov.w	r3, #0
 800b18c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800b190:	4659      	mov	r1, fp
 800b192:	018b      	lsls	r3, r1, #6
 800b194:	4651      	mov	r1, sl
 800b196:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b19a:	4651      	mov	r1, sl
 800b19c:	018a      	lsls	r2, r1, #6
 800b19e:	4651      	mov	r1, sl
 800b1a0:	1a54      	subs	r4, r2, r1
 800b1a2:	4659      	mov	r1, fp
 800b1a4:	eb63 0501 	sbc.w	r5, r3, r1
 800b1a8:	f04f 0200 	mov.w	r2, #0
 800b1ac:	f04f 0300 	mov.w	r3, #0
 800b1b0:	00eb      	lsls	r3, r5, #3
 800b1b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b1b6:	00e2      	lsls	r2, r4, #3
 800b1b8:	4614      	mov	r4, r2
 800b1ba:	461d      	mov	r5, r3
 800b1bc:	4643      	mov	r3, r8
 800b1be:	18e3      	adds	r3, r4, r3
 800b1c0:	603b      	str	r3, [r7, #0]
 800b1c2:	464b      	mov	r3, r9
 800b1c4:	eb45 0303 	adc.w	r3, r5, r3
 800b1c8:	607b      	str	r3, [r7, #4]
 800b1ca:	f04f 0200 	mov.w	r2, #0
 800b1ce:	f04f 0300 	mov.w	r3, #0
 800b1d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	028b      	lsls	r3, r1, #10
 800b1da:	4621      	mov	r1, r4
 800b1dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b1e0:	4621      	mov	r1, r4
 800b1e2:	028a      	lsls	r2, r1, #10
 800b1e4:	4610      	mov	r0, r2
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b1f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b1f6:	f7f5 fea5 	bl	8000f44 <__aeabi_uldivmod>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	4613      	mov	r3, r2
 800b200:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b204:	4b0d      	ldr	r3, [pc, #52]	@ (800b23c <HAL_RCC_GetSysClockFreq+0x458>)
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	0f1b      	lsrs	r3, r3, #28
 800b20a:	f003 0307 	and.w	r3, r3, #7
 800b20e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800b212:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b216:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b21a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b21e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800b222:	e003      	b.n	800b22c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b224:	4b06      	ldr	r3, [pc, #24]	@ (800b240 <HAL_RCC_GetSysClockFreq+0x45c>)
 800b226:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800b22a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b22c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800b230:	4618      	mov	r0, r3
 800b232:	37b8      	adds	r7, #184	@ 0xb8
 800b234:	46bd      	mov	sp, r7
 800b236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b23a:	bf00      	nop
 800b23c:	40023800 	.word	0x40023800
 800b240:	00f42400 	.word	0x00f42400

0800b244 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b086      	sub	sp, #24
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d101      	bne.n	800b256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b252:	2301      	movs	r3, #1
 800b254:	e28d      	b.n	800b772 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f003 0301 	and.w	r3, r3, #1
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f000 8083 	beq.w	800b36a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b264:	4b94      	ldr	r3, [pc, #592]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	f003 030c 	and.w	r3, r3, #12
 800b26c:	2b04      	cmp	r3, #4
 800b26e:	d019      	beq.n	800b2a4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800b270:	4b91      	ldr	r3, [pc, #580]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	f003 030c 	and.w	r3, r3, #12
        || \
 800b278:	2b08      	cmp	r3, #8
 800b27a:	d106      	bne.n	800b28a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800b27c:	4b8e      	ldr	r3, [pc, #568]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b284:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b288:	d00c      	beq.n	800b2a4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b28a:	4b8b      	ldr	r3, [pc, #556]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800b292:	2b0c      	cmp	r3, #12
 800b294:	d112      	bne.n	800b2bc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b296:	4b88      	ldr	r3, [pc, #544]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b29e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b2a2:	d10b      	bne.n	800b2bc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b2a4:	4b84      	ldr	r3, [pc, #528]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d05b      	beq.n	800b368 <HAL_RCC_OscConfig+0x124>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d157      	bne.n	800b368 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	e25a      	b.n	800b772 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2c4:	d106      	bne.n	800b2d4 <HAL_RCC_OscConfig+0x90>
 800b2c6:	4b7c      	ldr	r3, [pc, #496]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4a7b      	ldr	r2, [pc, #492]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b2cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2d0:	6013      	str	r3, [r2, #0]
 800b2d2:	e01d      	b.n	800b310 <HAL_RCC_OscConfig+0xcc>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b2dc:	d10c      	bne.n	800b2f8 <HAL_RCC_OscConfig+0xb4>
 800b2de:	4b76      	ldr	r3, [pc, #472]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a75      	ldr	r2, [pc, #468]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b2e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b2e8:	6013      	str	r3, [r2, #0]
 800b2ea:	4b73      	ldr	r3, [pc, #460]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4a72      	ldr	r2, [pc, #456]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b2f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2f4:	6013      	str	r3, [r2, #0]
 800b2f6:	e00b      	b.n	800b310 <HAL_RCC_OscConfig+0xcc>
 800b2f8:	4b6f      	ldr	r3, [pc, #444]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a6e      	ldr	r2, [pc, #440]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b2fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b302:	6013      	str	r3, [r2, #0]
 800b304:	4b6c      	ldr	r3, [pc, #432]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a6b      	ldr	r2, [pc, #428]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b30a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b30e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d013      	beq.n	800b340 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b318:	f7fc ff88 	bl	800822c <HAL_GetTick>
 800b31c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b31e:	e008      	b.n	800b332 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b320:	f7fc ff84 	bl	800822c <HAL_GetTick>
 800b324:	4602      	mov	r2, r0
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	2b64      	cmp	r3, #100	@ 0x64
 800b32c:	d901      	bls.n	800b332 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b32e:	2303      	movs	r3, #3
 800b330:	e21f      	b.n	800b772 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b332:	4b61      	ldr	r3, [pc, #388]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d0f0      	beq.n	800b320 <HAL_RCC_OscConfig+0xdc>
 800b33e:	e014      	b.n	800b36a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b340:	f7fc ff74 	bl	800822c <HAL_GetTick>
 800b344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b346:	e008      	b.n	800b35a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b348:	f7fc ff70 	bl	800822c <HAL_GetTick>
 800b34c:	4602      	mov	r2, r0
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	2b64      	cmp	r3, #100	@ 0x64
 800b354:	d901      	bls.n	800b35a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800b356:	2303      	movs	r3, #3
 800b358:	e20b      	b.n	800b772 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b35a:	4b57      	ldr	r3, [pc, #348]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1f0      	bne.n	800b348 <HAL_RCC_OscConfig+0x104>
 800b366:	e000      	b.n	800b36a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 0302 	and.w	r3, r3, #2
 800b372:	2b00      	cmp	r3, #0
 800b374:	d06f      	beq.n	800b456 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b376:	4b50      	ldr	r3, [pc, #320]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	f003 030c 	and.w	r3, r3, #12
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d017      	beq.n	800b3b2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800b382:	4b4d      	ldr	r3, [pc, #308]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	f003 030c 	and.w	r3, r3, #12
        || \
 800b38a:	2b08      	cmp	r3, #8
 800b38c:	d105      	bne.n	800b39a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800b38e:	4b4a      	ldr	r3, [pc, #296]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00b      	beq.n	800b3b2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b39a:	4b47      	ldr	r3, [pc, #284]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800b3a2:	2b0c      	cmp	r3, #12
 800b3a4:	d11c      	bne.n	800b3e0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b3a6:	4b44      	ldr	r3, [pc, #272]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d116      	bne.n	800b3e0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b3b2:	4b41      	ldr	r3, [pc, #260]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f003 0302 	and.w	r3, r3, #2
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d005      	beq.n	800b3ca <HAL_RCC_OscConfig+0x186>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d001      	beq.n	800b3ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e1d3      	b.n	800b772 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b3ca:	4b3b      	ldr	r3, [pc, #236]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	00db      	lsls	r3, r3, #3
 800b3d8:	4937      	ldr	r1, [pc, #220]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b3de:	e03a      	b.n	800b456 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d020      	beq.n	800b42a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b3e8:	4b34      	ldr	r3, [pc, #208]	@ (800b4bc <HAL_RCC_OscConfig+0x278>)
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3ee:	f7fc ff1d 	bl	800822c <HAL_GetTick>
 800b3f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b3f4:	e008      	b.n	800b408 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b3f6:	f7fc ff19 	bl	800822c <HAL_GetTick>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	1ad3      	subs	r3, r2, r3
 800b400:	2b02      	cmp	r3, #2
 800b402:	d901      	bls.n	800b408 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800b404:	2303      	movs	r3, #3
 800b406:	e1b4      	b.n	800b772 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b408:	4b2b      	ldr	r3, [pc, #172]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f003 0302 	and.w	r3, r3, #2
 800b410:	2b00      	cmp	r3, #0
 800b412:	d0f0      	beq.n	800b3f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b414:	4b28      	ldr	r3, [pc, #160]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	691b      	ldr	r3, [r3, #16]
 800b420:	00db      	lsls	r3, r3, #3
 800b422:	4925      	ldr	r1, [pc, #148]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b424:	4313      	orrs	r3, r2
 800b426:	600b      	str	r3, [r1, #0]
 800b428:	e015      	b.n	800b456 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b42a:	4b24      	ldr	r3, [pc, #144]	@ (800b4bc <HAL_RCC_OscConfig+0x278>)
 800b42c:	2200      	movs	r2, #0
 800b42e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b430:	f7fc fefc 	bl	800822c <HAL_GetTick>
 800b434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b436:	e008      	b.n	800b44a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b438:	f7fc fef8 	bl	800822c <HAL_GetTick>
 800b43c:	4602      	mov	r2, r0
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	1ad3      	subs	r3, r2, r3
 800b442:	2b02      	cmp	r3, #2
 800b444:	d901      	bls.n	800b44a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b446:	2303      	movs	r3, #3
 800b448:	e193      	b.n	800b772 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b44a:	4b1b      	ldr	r3, [pc, #108]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f003 0302 	and.w	r3, r3, #2
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1f0      	bne.n	800b438 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f003 0308 	and.w	r3, r3, #8
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d036      	beq.n	800b4d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	695b      	ldr	r3, [r3, #20]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d016      	beq.n	800b498 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b46a:	4b15      	ldr	r3, [pc, #84]	@ (800b4c0 <HAL_RCC_OscConfig+0x27c>)
 800b46c:	2201      	movs	r2, #1
 800b46e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b470:	f7fc fedc 	bl	800822c <HAL_GetTick>
 800b474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b476:	e008      	b.n	800b48a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b478:	f7fc fed8 	bl	800822c <HAL_GetTick>
 800b47c:	4602      	mov	r2, r0
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	1ad3      	subs	r3, r2, r3
 800b482:	2b02      	cmp	r3, #2
 800b484:	d901      	bls.n	800b48a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800b486:	2303      	movs	r3, #3
 800b488:	e173      	b.n	800b772 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b48a:	4b0b      	ldr	r3, [pc, #44]	@ (800b4b8 <HAL_RCC_OscConfig+0x274>)
 800b48c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b48e:	f003 0302 	and.w	r3, r3, #2
 800b492:	2b00      	cmp	r3, #0
 800b494:	d0f0      	beq.n	800b478 <HAL_RCC_OscConfig+0x234>
 800b496:	e01b      	b.n	800b4d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b498:	4b09      	ldr	r3, [pc, #36]	@ (800b4c0 <HAL_RCC_OscConfig+0x27c>)
 800b49a:	2200      	movs	r2, #0
 800b49c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b49e:	f7fc fec5 	bl	800822c <HAL_GetTick>
 800b4a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b4a4:	e00e      	b.n	800b4c4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b4a6:	f7fc fec1 	bl	800822c <HAL_GetTick>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	1ad3      	subs	r3, r2, r3
 800b4b0:	2b02      	cmp	r3, #2
 800b4b2:	d907      	bls.n	800b4c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	e15c      	b.n	800b772 <HAL_RCC_OscConfig+0x52e>
 800b4b8:	40023800 	.word	0x40023800
 800b4bc:	42470000 	.word	0x42470000
 800b4c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b4c4:	4b8a      	ldr	r3, [pc, #552]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b4c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b4c8:	f003 0302 	and.w	r3, r3, #2
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1ea      	bne.n	800b4a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 0304 	and.w	r3, r3, #4
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f000 8097 	beq.w	800b60c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b4e2:	4b83      	ldr	r3, [pc, #524]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b4e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10f      	bne.n	800b50e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	60bb      	str	r3, [r7, #8]
 800b4f2:	4b7f      	ldr	r3, [pc, #508]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b4f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4f6:	4a7e      	ldr	r2, [pc, #504]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b4f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4fc:	6413      	str	r3, [r2, #64]	@ 0x40
 800b4fe:	4b7c      	ldr	r3, [pc, #496]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b506:	60bb      	str	r3, [r7, #8]
 800b508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b50a:	2301      	movs	r3, #1
 800b50c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b50e:	4b79      	ldr	r3, [pc, #484]	@ (800b6f4 <HAL_RCC_OscConfig+0x4b0>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b516:	2b00      	cmp	r3, #0
 800b518:	d118      	bne.n	800b54c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b51a:	4b76      	ldr	r3, [pc, #472]	@ (800b6f4 <HAL_RCC_OscConfig+0x4b0>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a75      	ldr	r2, [pc, #468]	@ (800b6f4 <HAL_RCC_OscConfig+0x4b0>)
 800b520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b526:	f7fc fe81 	bl	800822c <HAL_GetTick>
 800b52a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b52c:	e008      	b.n	800b540 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b52e:	f7fc fe7d 	bl	800822c <HAL_GetTick>
 800b532:	4602      	mov	r2, r0
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	1ad3      	subs	r3, r2, r3
 800b538:	2b02      	cmp	r3, #2
 800b53a:	d901      	bls.n	800b540 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800b53c:	2303      	movs	r3, #3
 800b53e:	e118      	b.n	800b772 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b540:	4b6c      	ldr	r3, [pc, #432]	@ (800b6f4 <HAL_RCC_OscConfig+0x4b0>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d0f0      	beq.n	800b52e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	2b01      	cmp	r3, #1
 800b552:	d106      	bne.n	800b562 <HAL_RCC_OscConfig+0x31e>
 800b554:	4b66      	ldr	r3, [pc, #408]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b558:	4a65      	ldr	r2, [pc, #404]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b55a:	f043 0301 	orr.w	r3, r3, #1
 800b55e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b560:	e01c      	b.n	800b59c <HAL_RCC_OscConfig+0x358>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	2b05      	cmp	r3, #5
 800b568:	d10c      	bne.n	800b584 <HAL_RCC_OscConfig+0x340>
 800b56a:	4b61      	ldr	r3, [pc, #388]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b56c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b56e:	4a60      	ldr	r2, [pc, #384]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b570:	f043 0304 	orr.w	r3, r3, #4
 800b574:	6713      	str	r3, [r2, #112]	@ 0x70
 800b576:	4b5e      	ldr	r3, [pc, #376]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b57a:	4a5d      	ldr	r2, [pc, #372]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b57c:	f043 0301 	orr.w	r3, r3, #1
 800b580:	6713      	str	r3, [r2, #112]	@ 0x70
 800b582:	e00b      	b.n	800b59c <HAL_RCC_OscConfig+0x358>
 800b584:	4b5a      	ldr	r3, [pc, #360]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b588:	4a59      	ldr	r2, [pc, #356]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b58a:	f023 0301 	bic.w	r3, r3, #1
 800b58e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b590:	4b57      	ldr	r3, [pc, #348]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b594:	4a56      	ldr	r2, [pc, #344]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b596:	f023 0304 	bic.w	r3, r3, #4
 800b59a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d015      	beq.n	800b5d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5a4:	f7fc fe42 	bl	800822c <HAL_GetTick>
 800b5a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b5aa:	e00a      	b.n	800b5c2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b5ac:	f7fc fe3e 	bl	800822c <HAL_GetTick>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	1ad3      	subs	r3, r2, r3
 800b5b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d901      	bls.n	800b5c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800b5be:	2303      	movs	r3, #3
 800b5c0:	e0d7      	b.n	800b772 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b5c2:	4b4b      	ldr	r3, [pc, #300]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b5c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5c6:	f003 0302 	and.w	r3, r3, #2
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d0ee      	beq.n	800b5ac <HAL_RCC_OscConfig+0x368>
 800b5ce:	e014      	b.n	800b5fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5d0:	f7fc fe2c 	bl	800822c <HAL_GetTick>
 800b5d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b5d6:	e00a      	b.n	800b5ee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b5d8:	f7fc fe28 	bl	800822c <HAL_GetTick>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	1ad3      	subs	r3, r2, r3
 800b5e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d901      	bls.n	800b5ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b5ea:	2303      	movs	r3, #3
 800b5ec:	e0c1      	b.n	800b772 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b5ee:	4b40      	ldr	r3, [pc, #256]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b5f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5f2:	f003 0302 	and.w	r3, r3, #2
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d1ee      	bne.n	800b5d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b5fa:	7dfb      	ldrb	r3, [r7, #23]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d105      	bne.n	800b60c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b600:	4b3b      	ldr	r3, [pc, #236]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b604:	4a3a      	ldr	r2, [pc, #232]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b606:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b60a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	699b      	ldr	r3, [r3, #24]
 800b610:	2b00      	cmp	r3, #0
 800b612:	f000 80ad 	beq.w	800b770 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b616:	4b36      	ldr	r3, [pc, #216]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b618:	689b      	ldr	r3, [r3, #8]
 800b61a:	f003 030c 	and.w	r3, r3, #12
 800b61e:	2b08      	cmp	r3, #8
 800b620:	d060      	beq.n	800b6e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	699b      	ldr	r3, [r3, #24]
 800b626:	2b02      	cmp	r3, #2
 800b628:	d145      	bne.n	800b6b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b62a:	4b33      	ldr	r3, [pc, #204]	@ (800b6f8 <HAL_RCC_OscConfig+0x4b4>)
 800b62c:	2200      	movs	r2, #0
 800b62e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b630:	f7fc fdfc 	bl	800822c <HAL_GetTick>
 800b634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b636:	e008      	b.n	800b64a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b638:	f7fc fdf8 	bl	800822c <HAL_GetTick>
 800b63c:	4602      	mov	r2, r0
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	1ad3      	subs	r3, r2, r3
 800b642:	2b02      	cmp	r3, #2
 800b644:	d901      	bls.n	800b64a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800b646:	2303      	movs	r3, #3
 800b648:	e093      	b.n	800b772 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b64a:	4b29      	ldr	r3, [pc, #164]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b652:	2b00      	cmp	r3, #0
 800b654:	d1f0      	bne.n	800b638 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	69da      	ldr	r2, [r3, #28]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	431a      	orrs	r2, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b664:	019b      	lsls	r3, r3, #6
 800b666:	431a      	orrs	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b66c:	085b      	lsrs	r3, r3, #1
 800b66e:	3b01      	subs	r3, #1
 800b670:	041b      	lsls	r3, r3, #16
 800b672:	431a      	orrs	r2, r3
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b678:	061b      	lsls	r3, r3, #24
 800b67a:	431a      	orrs	r2, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b680:	071b      	lsls	r3, r3, #28
 800b682:	491b      	ldr	r1, [pc, #108]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b684:	4313      	orrs	r3, r2
 800b686:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b688:	4b1b      	ldr	r3, [pc, #108]	@ (800b6f8 <HAL_RCC_OscConfig+0x4b4>)
 800b68a:	2201      	movs	r2, #1
 800b68c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b68e:	f7fc fdcd 	bl	800822c <HAL_GetTick>
 800b692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b694:	e008      	b.n	800b6a8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b696:	f7fc fdc9 	bl	800822c <HAL_GetTick>
 800b69a:	4602      	mov	r2, r0
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	2b02      	cmp	r3, #2
 800b6a2:	d901      	bls.n	800b6a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800b6a4:	2303      	movs	r3, #3
 800b6a6:	e064      	b.n	800b772 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b6a8:	4b11      	ldr	r3, [pc, #68]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d0f0      	beq.n	800b696 <HAL_RCC_OscConfig+0x452>
 800b6b4:	e05c      	b.n	800b770 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b6b6:	4b10      	ldr	r3, [pc, #64]	@ (800b6f8 <HAL_RCC_OscConfig+0x4b4>)
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6bc:	f7fc fdb6 	bl	800822c <HAL_GetTick>
 800b6c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b6c2:	e008      	b.n	800b6d6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6c4:	f7fc fdb2 	bl	800822c <HAL_GetTick>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	1ad3      	subs	r3, r2, r3
 800b6ce:	2b02      	cmp	r3, #2
 800b6d0:	d901      	bls.n	800b6d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	e04d      	b.n	800b772 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b6d6:	4b06      	ldr	r3, [pc, #24]	@ (800b6f0 <HAL_RCC_OscConfig+0x4ac>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1f0      	bne.n	800b6c4 <HAL_RCC_OscConfig+0x480>
 800b6e2:	e045      	b.n	800b770 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	699b      	ldr	r3, [r3, #24]
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d107      	bne.n	800b6fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	e040      	b.n	800b772 <HAL_RCC_OscConfig+0x52e>
 800b6f0:	40023800 	.word	0x40023800
 800b6f4:	40007000 	.word	0x40007000
 800b6f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b6fc:	4b1f      	ldr	r3, [pc, #124]	@ (800b77c <HAL_RCC_OscConfig+0x538>)
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	699b      	ldr	r3, [r3, #24]
 800b706:	2b01      	cmp	r3, #1
 800b708:	d030      	beq.n	800b76c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b714:	429a      	cmp	r2, r3
 800b716:	d129      	bne.n	800b76c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b722:	429a      	cmp	r2, r3
 800b724:	d122      	bne.n	800b76c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b726:	68fa      	ldr	r2, [r7, #12]
 800b728:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b72c:	4013      	ands	r3, r2
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b732:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b734:	4293      	cmp	r3, r2
 800b736:	d119      	bne.n	800b76c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b742:	085b      	lsrs	r3, r3, #1
 800b744:	3b01      	subs	r3, #1
 800b746:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b748:	429a      	cmp	r2, r3
 800b74a:	d10f      	bne.n	800b76c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b756:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b758:	429a      	cmp	r2, r3
 800b75a:	d107      	bne.n	800b76c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b766:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b768:	429a      	cmp	r2, r3
 800b76a:	d001      	beq.n	800b770 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	e000      	b.n	800b772 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800b770:	2300      	movs	r3, #0
}
 800b772:	4618      	mov	r0, r3
 800b774:	3718      	adds	r7, #24
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	40023800 	.word	0x40023800

0800b780 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d101      	bne.n	800b792 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	e041      	b.n	800b816 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d106      	bne.n	800b7ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f7fb ff82 	bl	80076b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2202      	movs	r2, #2
 800b7b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	3304      	adds	r3, #4
 800b7bc:	4619      	mov	r1, r3
 800b7be:	4610      	mov	r0, r2
 800b7c0:	f000 fa7e 	bl	800bcc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2201      	movs	r2, #1
 800b810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
	...

0800b820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b820:	b480      	push	{r7}
 800b822:	b085      	sub	sp, #20
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	2b01      	cmp	r3, #1
 800b832:	d001      	beq.n	800b838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b834:	2301      	movs	r3, #1
 800b836:	e04e      	b.n	800b8d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2202      	movs	r2, #2
 800b83c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	68da      	ldr	r2, [r3, #12]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f042 0201 	orr.w	r2, r2, #1
 800b84e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a23      	ldr	r2, [pc, #140]	@ (800b8e4 <HAL_TIM_Base_Start_IT+0xc4>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d022      	beq.n	800b8a0 <HAL_TIM_Base_Start_IT+0x80>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b862:	d01d      	beq.n	800b8a0 <HAL_TIM_Base_Start_IT+0x80>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a1f      	ldr	r2, [pc, #124]	@ (800b8e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d018      	beq.n	800b8a0 <HAL_TIM_Base_Start_IT+0x80>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a1e      	ldr	r2, [pc, #120]	@ (800b8ec <HAL_TIM_Base_Start_IT+0xcc>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d013      	beq.n	800b8a0 <HAL_TIM_Base_Start_IT+0x80>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a1c      	ldr	r2, [pc, #112]	@ (800b8f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d00e      	beq.n	800b8a0 <HAL_TIM_Base_Start_IT+0x80>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a1b      	ldr	r2, [pc, #108]	@ (800b8f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d009      	beq.n	800b8a0 <HAL_TIM_Base_Start_IT+0x80>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a19      	ldr	r2, [pc, #100]	@ (800b8f8 <HAL_TIM_Base_Start_IT+0xd8>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d004      	beq.n	800b8a0 <HAL_TIM_Base_Start_IT+0x80>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a18      	ldr	r2, [pc, #96]	@ (800b8fc <HAL_TIM_Base_Start_IT+0xdc>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d111      	bne.n	800b8c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	f003 0307 	and.w	r3, r3, #7
 800b8aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2b06      	cmp	r3, #6
 800b8b0:	d010      	beq.n	800b8d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f042 0201 	orr.w	r2, r2, #1
 800b8c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8c2:	e007      	b.n	800b8d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f042 0201 	orr.w	r2, r2, #1
 800b8d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b8d4:	2300      	movs	r3, #0
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3714      	adds	r7, #20
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr
 800b8e2:	bf00      	nop
 800b8e4:	40010000 	.word	0x40010000
 800b8e8:	40000400 	.word	0x40000400
 800b8ec:	40000800 	.word	0x40000800
 800b8f0:	40000c00 	.word	0x40000c00
 800b8f4:	40010400 	.word	0x40010400
 800b8f8:	40014000 	.word	0x40014000
 800b8fc:	40001800 	.word	0x40001800

0800b900 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	691b      	ldr	r3, [r3, #16]
 800b916:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	f003 0302 	and.w	r3, r3, #2
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d020      	beq.n	800b964 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f003 0302 	and.w	r3, r3, #2
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d01b      	beq.n	800b964 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f06f 0202 	mvn.w	r2, #2
 800b934:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	699b      	ldr	r3, [r3, #24]
 800b942:	f003 0303 	and.w	r3, r3, #3
 800b946:	2b00      	cmp	r3, #0
 800b948:	d003      	beq.n	800b952 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 f999 	bl	800bc82 <HAL_TIM_IC_CaptureCallback>
 800b950:	e005      	b.n	800b95e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 f98b 	bl	800bc6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 f99c 	bl	800bc96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	f003 0304 	and.w	r3, r3, #4
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d020      	beq.n	800b9b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f003 0304 	and.w	r3, r3, #4
 800b974:	2b00      	cmp	r3, #0
 800b976:	d01b      	beq.n	800b9b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f06f 0204 	mvn.w	r2, #4
 800b980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2202      	movs	r2, #2
 800b986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	699b      	ldr	r3, [r3, #24]
 800b98e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b992:	2b00      	cmp	r3, #0
 800b994:	d003      	beq.n	800b99e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 f973 	bl	800bc82 <HAL_TIM_IC_CaptureCallback>
 800b99c:	e005      	b.n	800b9aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 f965 	bl	800bc6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 f976 	bl	800bc96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	f003 0308 	and.w	r3, r3, #8
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d020      	beq.n	800b9fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f003 0308 	and.w	r3, r3, #8
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d01b      	beq.n	800b9fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f06f 0208 	mvn.w	r2, #8
 800b9cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2204      	movs	r2, #4
 800b9d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	69db      	ldr	r3, [r3, #28]
 800b9da:	f003 0303 	and.w	r3, r3, #3
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d003      	beq.n	800b9ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 f94d 	bl	800bc82 <HAL_TIM_IC_CaptureCallback>
 800b9e8:	e005      	b.n	800b9f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 f93f 	bl	800bc6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 f950 	bl	800bc96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	f003 0310 	and.w	r3, r3, #16
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d020      	beq.n	800ba48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f003 0310 	and.w	r3, r3, #16
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d01b      	beq.n	800ba48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f06f 0210 	mvn.w	r2, #16
 800ba18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2208      	movs	r2, #8
 800ba1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	69db      	ldr	r3, [r3, #28]
 800ba26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d003      	beq.n	800ba36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 f927 	bl	800bc82 <HAL_TIM_IC_CaptureCallback>
 800ba34:	e005      	b.n	800ba42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 f919 	bl	800bc6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 f92a 	bl	800bc96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	f003 0301 	and.w	r3, r3, #1
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00c      	beq.n	800ba6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f003 0301 	and.w	r3, r3, #1
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d007      	beq.n	800ba6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f06f 0201 	mvn.w	r2, #1
 800ba64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f7f9 fba2 	bl	80051b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00c      	beq.n	800ba90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d007      	beq.n	800ba90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ba88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 fade 	bl	800c04c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00c      	beq.n	800bab4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d007      	beq.n	800bab4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800baac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 f8fb 	bl	800bcaa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	f003 0320 	and.w	r3, r3, #32
 800baba:	2b00      	cmp	r3, #0
 800babc:	d00c      	beq.n	800bad8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f003 0320 	and.w	r3, r3, #32
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d007      	beq.n	800bad8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f06f 0220 	mvn.w	r2, #32
 800bad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 fab0 	bl	800c038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bad8:	bf00      	nop
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800baea:	2300      	movs	r3, #0
 800baec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	d101      	bne.n	800bafc <HAL_TIM_ConfigClockSource+0x1c>
 800baf8:	2302      	movs	r3, #2
 800bafa:	e0b4      	b.n	800bc66 <HAL_TIM_ConfigClockSource+0x186>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2201      	movs	r2, #1
 800bb00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2202      	movs	r2, #2
 800bb08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	689b      	ldr	r3, [r3, #8]
 800bb12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bb1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bb22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	68ba      	ldr	r2, [r7, #8]
 800bb2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb34:	d03e      	beq.n	800bbb4 <HAL_TIM_ConfigClockSource+0xd4>
 800bb36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb3a:	f200 8087 	bhi.w	800bc4c <HAL_TIM_ConfigClockSource+0x16c>
 800bb3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb42:	f000 8086 	beq.w	800bc52 <HAL_TIM_ConfigClockSource+0x172>
 800bb46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb4a:	d87f      	bhi.n	800bc4c <HAL_TIM_ConfigClockSource+0x16c>
 800bb4c:	2b70      	cmp	r3, #112	@ 0x70
 800bb4e:	d01a      	beq.n	800bb86 <HAL_TIM_ConfigClockSource+0xa6>
 800bb50:	2b70      	cmp	r3, #112	@ 0x70
 800bb52:	d87b      	bhi.n	800bc4c <HAL_TIM_ConfigClockSource+0x16c>
 800bb54:	2b60      	cmp	r3, #96	@ 0x60
 800bb56:	d050      	beq.n	800bbfa <HAL_TIM_ConfigClockSource+0x11a>
 800bb58:	2b60      	cmp	r3, #96	@ 0x60
 800bb5a:	d877      	bhi.n	800bc4c <HAL_TIM_ConfigClockSource+0x16c>
 800bb5c:	2b50      	cmp	r3, #80	@ 0x50
 800bb5e:	d03c      	beq.n	800bbda <HAL_TIM_ConfigClockSource+0xfa>
 800bb60:	2b50      	cmp	r3, #80	@ 0x50
 800bb62:	d873      	bhi.n	800bc4c <HAL_TIM_ConfigClockSource+0x16c>
 800bb64:	2b40      	cmp	r3, #64	@ 0x40
 800bb66:	d058      	beq.n	800bc1a <HAL_TIM_ConfigClockSource+0x13a>
 800bb68:	2b40      	cmp	r3, #64	@ 0x40
 800bb6a:	d86f      	bhi.n	800bc4c <HAL_TIM_ConfigClockSource+0x16c>
 800bb6c:	2b30      	cmp	r3, #48	@ 0x30
 800bb6e:	d064      	beq.n	800bc3a <HAL_TIM_ConfigClockSource+0x15a>
 800bb70:	2b30      	cmp	r3, #48	@ 0x30
 800bb72:	d86b      	bhi.n	800bc4c <HAL_TIM_ConfigClockSource+0x16c>
 800bb74:	2b20      	cmp	r3, #32
 800bb76:	d060      	beq.n	800bc3a <HAL_TIM_ConfigClockSource+0x15a>
 800bb78:	2b20      	cmp	r3, #32
 800bb7a:	d867      	bhi.n	800bc4c <HAL_TIM_ConfigClockSource+0x16c>
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d05c      	beq.n	800bc3a <HAL_TIM_ConfigClockSource+0x15a>
 800bb80:	2b10      	cmp	r3, #16
 800bb82:	d05a      	beq.n	800bc3a <HAL_TIM_ConfigClockSource+0x15a>
 800bb84:	e062      	b.n	800bc4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bb96:	f000 f9b3 	bl	800bf00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bba8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	609a      	str	r2, [r3, #8]
      break;
 800bbb2:	e04f      	b.n	800bc54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bbc4:	f000 f99c 	bl	800bf00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	689a      	ldr	r2, [r3, #8]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bbd6:	609a      	str	r2, [r3, #8]
      break;
 800bbd8:	e03c      	b.n	800bc54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	f000 f910 	bl	800be0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	2150      	movs	r1, #80	@ 0x50
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f000 f969 	bl	800beca <TIM_ITRx_SetConfig>
      break;
 800bbf8:	e02c      	b.n	800bc54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc06:	461a      	mov	r2, r3
 800bc08:	f000 f92f 	bl	800be6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2160      	movs	r1, #96	@ 0x60
 800bc12:	4618      	mov	r0, r3
 800bc14:	f000 f959 	bl	800beca <TIM_ITRx_SetConfig>
      break;
 800bc18:	e01c      	b.n	800bc54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc26:	461a      	mov	r2, r3
 800bc28:	f000 f8f0 	bl	800be0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	2140      	movs	r1, #64	@ 0x40
 800bc32:	4618      	mov	r0, r3
 800bc34:	f000 f949 	bl	800beca <TIM_ITRx_SetConfig>
      break;
 800bc38:	e00c      	b.n	800bc54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4619      	mov	r1, r3
 800bc44:	4610      	mov	r0, r2
 800bc46:	f000 f940 	bl	800beca <TIM_ITRx_SetConfig>
      break;
 800bc4a:	e003      	b.n	800bc54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	73fb      	strb	r3, [r7, #15]
      break;
 800bc50:	e000      	b.n	800bc54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bc52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bc64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc6e:	b480      	push	{r7}
 800bc70:	b083      	sub	sp, #12
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc76:	bf00      	nop
 800bc78:	370c      	adds	r7, #12
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr

0800bc82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc82:	b480      	push	{r7}
 800bc84:	b083      	sub	sp, #12
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc8a:	bf00      	nop
 800bc8c:	370c      	adds	r7, #12
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr

0800bc96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc96:	b480      	push	{r7}
 800bc98:	b083      	sub	sp, #12
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc9e:	bf00      	nop
 800bca0:	370c      	adds	r7, #12
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bcaa:	b480      	push	{r7}
 800bcac:	b083      	sub	sp, #12
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bcb2:	bf00      	nop
 800bcb4:	370c      	adds	r7, #12
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr
	...

0800bcc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b085      	sub	sp, #20
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a43      	ldr	r2, [pc, #268]	@ (800bde0 <TIM_Base_SetConfig+0x120>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d013      	beq.n	800bd00 <TIM_Base_SetConfig+0x40>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcde:	d00f      	beq.n	800bd00 <TIM_Base_SetConfig+0x40>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a40      	ldr	r2, [pc, #256]	@ (800bde4 <TIM_Base_SetConfig+0x124>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d00b      	beq.n	800bd00 <TIM_Base_SetConfig+0x40>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a3f      	ldr	r2, [pc, #252]	@ (800bde8 <TIM_Base_SetConfig+0x128>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d007      	beq.n	800bd00 <TIM_Base_SetConfig+0x40>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4a3e      	ldr	r2, [pc, #248]	@ (800bdec <TIM_Base_SetConfig+0x12c>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d003      	beq.n	800bd00 <TIM_Base_SetConfig+0x40>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4a3d      	ldr	r2, [pc, #244]	@ (800bdf0 <TIM_Base_SetConfig+0x130>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d108      	bne.n	800bd12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	68fa      	ldr	r2, [r7, #12]
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4a32      	ldr	r2, [pc, #200]	@ (800bde0 <TIM_Base_SetConfig+0x120>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d02b      	beq.n	800bd72 <TIM_Base_SetConfig+0xb2>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd20:	d027      	beq.n	800bd72 <TIM_Base_SetConfig+0xb2>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4a2f      	ldr	r2, [pc, #188]	@ (800bde4 <TIM_Base_SetConfig+0x124>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d023      	beq.n	800bd72 <TIM_Base_SetConfig+0xb2>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4a2e      	ldr	r2, [pc, #184]	@ (800bde8 <TIM_Base_SetConfig+0x128>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d01f      	beq.n	800bd72 <TIM_Base_SetConfig+0xb2>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4a2d      	ldr	r2, [pc, #180]	@ (800bdec <TIM_Base_SetConfig+0x12c>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d01b      	beq.n	800bd72 <TIM_Base_SetConfig+0xb2>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4a2c      	ldr	r2, [pc, #176]	@ (800bdf0 <TIM_Base_SetConfig+0x130>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d017      	beq.n	800bd72 <TIM_Base_SetConfig+0xb2>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	4a2b      	ldr	r2, [pc, #172]	@ (800bdf4 <TIM_Base_SetConfig+0x134>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d013      	beq.n	800bd72 <TIM_Base_SetConfig+0xb2>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4a2a      	ldr	r2, [pc, #168]	@ (800bdf8 <TIM_Base_SetConfig+0x138>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d00f      	beq.n	800bd72 <TIM_Base_SetConfig+0xb2>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	4a29      	ldr	r2, [pc, #164]	@ (800bdfc <TIM_Base_SetConfig+0x13c>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d00b      	beq.n	800bd72 <TIM_Base_SetConfig+0xb2>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	4a28      	ldr	r2, [pc, #160]	@ (800be00 <TIM_Base_SetConfig+0x140>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d007      	beq.n	800bd72 <TIM_Base_SetConfig+0xb2>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	4a27      	ldr	r2, [pc, #156]	@ (800be04 <TIM_Base_SetConfig+0x144>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d003      	beq.n	800bd72 <TIM_Base_SetConfig+0xb2>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	4a26      	ldr	r2, [pc, #152]	@ (800be08 <TIM_Base_SetConfig+0x148>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d108      	bne.n	800bd84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	4313      	orrs	r3, r2
 800bd82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	695b      	ldr	r3, [r3, #20]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	689a      	ldr	r2, [r3, #8]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4a0e      	ldr	r2, [pc, #56]	@ (800bde0 <TIM_Base_SetConfig+0x120>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d003      	beq.n	800bdb2 <TIM_Base_SetConfig+0xf2>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	4a10      	ldr	r2, [pc, #64]	@ (800bdf0 <TIM_Base_SetConfig+0x130>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d103      	bne.n	800bdba <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	691a      	ldr	r2, [r3, #16]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f043 0204 	orr.w	r2, r3, #4
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2201      	movs	r2, #1
 800bdca:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	68fa      	ldr	r2, [r7, #12]
 800bdd0:	601a      	str	r2, [r3, #0]
}
 800bdd2:	bf00      	nop
 800bdd4:	3714      	adds	r7, #20
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr
 800bdde:	bf00      	nop
 800bde0:	40010000 	.word	0x40010000
 800bde4:	40000400 	.word	0x40000400
 800bde8:	40000800 	.word	0x40000800
 800bdec:	40000c00 	.word	0x40000c00
 800bdf0:	40010400 	.word	0x40010400
 800bdf4:	40014000 	.word	0x40014000
 800bdf8:	40014400 	.word	0x40014400
 800bdfc:	40014800 	.word	0x40014800
 800be00:	40001800 	.word	0x40001800
 800be04:	40001c00 	.word	0x40001c00
 800be08:	40002000 	.word	0x40002000

0800be0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b087      	sub	sp, #28
 800be10:	af00      	add	r7, sp, #0
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	6a1b      	ldr	r3, [r3, #32]
 800be1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6a1b      	ldr	r3, [r3, #32]
 800be22:	f023 0201 	bic.w	r2, r3, #1
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	699b      	ldr	r3, [r3, #24]
 800be2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800be36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	011b      	lsls	r3, r3, #4
 800be3c:	693a      	ldr	r2, [r7, #16]
 800be3e:	4313      	orrs	r3, r2
 800be40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f023 030a 	bic.w	r3, r3, #10
 800be48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be4a:	697a      	ldr	r2, [r7, #20]
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	4313      	orrs	r3, r2
 800be50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	693a      	ldr	r2, [r7, #16]
 800be56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	697a      	ldr	r2, [r7, #20]
 800be5c:	621a      	str	r2, [r3, #32]
}
 800be5e:	bf00      	nop
 800be60:	371c      	adds	r7, #28
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr

0800be6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be6a:	b480      	push	{r7}
 800be6c:	b087      	sub	sp, #28
 800be6e:	af00      	add	r7, sp, #0
 800be70:	60f8      	str	r0, [r7, #12]
 800be72:	60b9      	str	r1, [r7, #8]
 800be74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6a1b      	ldr	r3, [r3, #32]
 800be7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6a1b      	ldr	r3, [r3, #32]
 800be80:	f023 0210 	bic.w	r2, r3, #16
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	699b      	ldr	r3, [r3, #24]
 800be8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800be94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	031b      	lsls	r3, r3, #12
 800be9a:	693a      	ldr	r2, [r7, #16]
 800be9c:	4313      	orrs	r3, r2
 800be9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bea6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	011b      	lsls	r3, r3, #4
 800beac:	697a      	ldr	r2, [r7, #20]
 800beae:	4313      	orrs	r3, r2
 800beb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	693a      	ldr	r2, [r7, #16]
 800beb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	697a      	ldr	r2, [r7, #20]
 800bebc:	621a      	str	r2, [r3, #32]
}
 800bebe:	bf00      	nop
 800bec0:	371c      	adds	r7, #28
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr

0800beca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800beca:	b480      	push	{r7}
 800becc:	b085      	sub	sp, #20
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
 800bed2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bee0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bee2:	683a      	ldr	r2, [r7, #0]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	4313      	orrs	r3, r2
 800bee8:	f043 0307 	orr.w	r3, r3, #7
 800beec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	609a      	str	r2, [r3, #8]
}
 800bef4:	bf00      	nop
 800bef6:	3714      	adds	r7, #20
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b087      	sub	sp, #28
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	607a      	str	r2, [r7, #4]
 800bf0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bf1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	021a      	lsls	r2, r3, #8
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	431a      	orrs	r2, r3
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	4313      	orrs	r3, r2
 800bf28:	697a      	ldr	r2, [r7, #20]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	697a      	ldr	r2, [r7, #20]
 800bf32:	609a      	str	r2, [r3, #8]
}
 800bf34:	bf00      	nop
 800bf36:	371c      	adds	r7, #28
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b085      	sub	sp, #20
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d101      	bne.n	800bf58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf54:	2302      	movs	r3, #2
 800bf56:	e05a      	b.n	800c00e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2202      	movs	r2, #2
 800bf64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	68fa      	ldr	r2, [r7, #12]
 800bf86:	4313      	orrs	r3, r2
 800bf88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	68fa      	ldr	r2, [r7, #12]
 800bf90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a21      	ldr	r2, [pc, #132]	@ (800c01c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d022      	beq.n	800bfe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfa4:	d01d      	beq.n	800bfe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a1d      	ldr	r2, [pc, #116]	@ (800c020 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d018      	beq.n	800bfe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a1b      	ldr	r2, [pc, #108]	@ (800c024 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d013      	beq.n	800bfe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a1a      	ldr	r2, [pc, #104]	@ (800c028 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d00e      	beq.n	800bfe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a18      	ldr	r2, [pc, #96]	@ (800c02c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d009      	beq.n	800bfe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a17      	ldr	r2, [pc, #92]	@ (800c030 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d004      	beq.n	800bfe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4a15      	ldr	r2, [pc, #84]	@ (800c034 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d10c      	bne.n	800bffc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bfe8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	68ba      	ldr	r2, [r7, #8]
 800bff0:	4313      	orrs	r3, r2
 800bff2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	68ba      	ldr	r2, [r7, #8]
 800bffa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3714      	adds	r7, #20
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	40010000 	.word	0x40010000
 800c020:	40000400 	.word	0x40000400
 800c024:	40000800 	.word	0x40000800
 800c028:	40000c00 	.word	0x40000c00
 800c02c:	40010400 	.word	0x40010400
 800c030:	40014000 	.word	0x40014000
 800c034:	40001800 	.word	0x40001800

0800c038 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c040:	bf00      	nop
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c054:	bf00      	nop
 800c056:	370c      	adds	r7, #12
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d101      	bne.n	800c072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c06e:	2301      	movs	r3, #1
 800c070:	e042      	b.n	800c0f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d106      	bne.n	800c08c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f7fb fb38 	bl	80076fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2224      	movs	r2, #36	@ 0x24
 800c090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	68da      	ldr	r2, [r3, #12]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c0a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f001 f879 	bl	800d19c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	691a      	ldr	r2, [r3, #16]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c0b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	695a      	ldr	r2, [r3, #20]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c0c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68da      	ldr	r2, [r3, #12]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c0d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2220      	movs	r2, #32
 800c0e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2220      	movs	r2, #32
 800c0ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c0f6:	2300      	movs	r3, #0
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3708      	adds	r7, #8
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b08a      	sub	sp, #40	@ 0x28
 800c104:	af02      	add	r7, sp, #8
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	603b      	str	r3, [r7, #0]
 800c10c:	4613      	mov	r3, r2
 800c10e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c110:	2300      	movs	r3, #0
 800c112:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	2b20      	cmp	r3, #32
 800c11e:	d175      	bne.n	800c20c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d002      	beq.n	800c12c <HAL_UART_Transmit+0x2c>
 800c126:	88fb      	ldrh	r3, [r7, #6]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d101      	bne.n	800c130 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c12c:	2301      	movs	r3, #1
 800c12e:	e06e      	b.n	800c20e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2200      	movs	r2, #0
 800c134:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2221      	movs	r2, #33	@ 0x21
 800c13a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c13e:	f7fc f875 	bl	800822c <HAL_GetTick>
 800c142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	88fa      	ldrh	r2, [r7, #6]
 800c148:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	88fa      	ldrh	r2, [r7, #6]
 800c14e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c158:	d108      	bne.n	800c16c <HAL_UART_Transmit+0x6c>
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	691b      	ldr	r3, [r3, #16]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d104      	bne.n	800c16c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c162:	2300      	movs	r3, #0
 800c164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	61bb      	str	r3, [r7, #24]
 800c16a:	e003      	b.n	800c174 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c170:	2300      	movs	r3, #0
 800c172:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c174:	e02e      	b.n	800c1d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	9300      	str	r3, [sp, #0]
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	2200      	movs	r2, #0
 800c17e:	2180      	movs	r1, #128	@ 0x80
 800c180:	68f8      	ldr	r0, [r7, #12]
 800c182:	f000 fd4a 	bl	800cc1a <UART_WaitOnFlagUntilTimeout>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d005      	beq.n	800c198 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2220      	movs	r2, #32
 800c190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800c194:	2303      	movs	r3, #3
 800c196:	e03a      	b.n	800c20e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c198:	69fb      	ldr	r3, [r7, #28]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d10b      	bne.n	800c1b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	881b      	ldrh	r3, [r3, #0]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c1ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	3302      	adds	r3, #2
 800c1b2:	61bb      	str	r3, [r7, #24]
 800c1b4:	e007      	b.n	800c1c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c1b6:	69fb      	ldr	r3, [r7, #28]
 800c1b8:	781a      	ldrb	r2, [r3, #0]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c1c0:	69fb      	ldr	r3, [r7, #28]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	b29a      	uxth	r2, r3
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d1cb      	bne.n	800c176 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	2140      	movs	r1, #64	@ 0x40
 800c1e8:	68f8      	ldr	r0, [r7, #12]
 800c1ea:	f000 fd16 	bl	800cc1a <UART_WaitOnFlagUntilTimeout>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d005      	beq.n	800c200 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2220      	movs	r2, #32
 800c1f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800c1fc:	2303      	movs	r3, #3
 800c1fe:	e006      	b.n	800c20e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2220      	movs	r2, #32
 800c204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800c208:	2300      	movs	r3, #0
 800c20a:	e000      	b.n	800c20e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c20c:	2302      	movs	r3, #2
  }
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3720      	adds	r7, #32
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
	...

0800c218 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b08c      	sub	sp, #48	@ 0x30
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	60f8      	str	r0, [r7, #12]
 800c220:	60b9      	str	r1, [r7, #8]
 800c222:	4613      	mov	r3, r2
 800c224:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	2b20      	cmp	r3, #32
 800c230:	d162      	bne.n	800c2f8 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d002      	beq.n	800c23e <HAL_UART_Transmit_DMA+0x26>
 800c238:	88fb      	ldrh	r3, [r7, #6]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d101      	bne.n	800c242 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c23e:	2301      	movs	r3, #1
 800c240:	e05b      	b.n	800c2fa <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800c242:	68ba      	ldr	r2, [r7, #8]
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	88fa      	ldrh	r2, [r7, #6]
 800c24c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	88fa      	ldrh	r2, [r7, #6]
 800c252:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2200      	movs	r2, #0
 800c258:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2221      	movs	r2, #33	@ 0x21
 800c25e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c266:	4a27      	ldr	r2, [pc, #156]	@ (800c304 <HAL_UART_Transmit_DMA+0xec>)
 800c268:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c26e:	4a26      	ldr	r2, [pc, #152]	@ (800c308 <HAL_UART_Transmit_DMA+0xf0>)
 800c270:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c276:	4a25      	ldr	r2, [pc, #148]	@ (800c30c <HAL_UART_Transmit_DMA+0xf4>)
 800c278:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c27e:	2200      	movs	r2, #0
 800c280:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800c282:	f107 0308 	add.w	r3, r7, #8
 800c286:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800c28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c28e:	6819      	ldr	r1, [r3, #0]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	3304      	adds	r3, #4
 800c296:	461a      	mov	r2, r3
 800c298:	88fb      	ldrh	r3, [r7, #6]
 800c29a:	f7fc fe0f 	bl	8008ebc <HAL_DMA_Start_IT>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d008      	beq.n	800c2b6 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2210      	movs	r2, #16
 800c2a8:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2220      	movs	r2, #32
 800c2ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	e021      	b.n	800c2fa <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c2be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	3314      	adds	r3, #20
 800c2c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	e853 3f00 	ldrex	r3, [r3]
 800c2ce:	617b      	str	r3, [r7, #20]
   return(result);
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	3314      	adds	r3, #20
 800c2de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2e0:	627a      	str	r2, [r7, #36]	@ 0x24
 800c2e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e4:	6a39      	ldr	r1, [r7, #32]
 800c2e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2e8:	e841 2300 	strex	r3, r2, [r1]
 800c2ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2ee:	69fb      	ldr	r3, [r7, #28]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d1e5      	bne.n	800c2c0 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	e000      	b.n	800c2fa <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800c2f8:	2302      	movs	r3, #2
  }
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3730      	adds	r7, #48	@ 0x30
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	0800c969 	.word	0x0800c969
 800c308:	0800ca03 	.word	0x0800ca03
 800c30c:	0800cb87 	.word	0x0800cb87

0800c310 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b08c      	sub	sp, #48	@ 0x30
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	4613      	mov	r3, r2
 800c31c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c324:	b2db      	uxtb	r3, r3
 800c326:	2b20      	cmp	r3, #32
 800c328:	d146      	bne.n	800c3b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d002      	beq.n	800c336 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800c330:	88fb      	ldrh	r3, [r7, #6]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d101      	bne.n	800c33a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800c336:	2301      	movs	r3, #1
 800c338:	e03f      	b.n	800c3ba <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2201      	movs	r2, #1
 800c33e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2200      	movs	r2, #0
 800c344:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c346:	88fb      	ldrh	r3, [r7, #6]
 800c348:	461a      	mov	r2, r3
 800c34a:	68b9      	ldr	r1, [r7, #8]
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	f000 fcbd 	bl	800cccc <UART_Start_Receive_DMA>
 800c352:	4603      	mov	r3, r0
 800c354:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d125      	bne.n	800c3ac <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c360:	2300      	movs	r3, #0
 800c362:	613b      	str	r3, [r7, #16]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	613b      	str	r3, [r7, #16]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	613b      	str	r3, [r7, #16]
 800c374:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	330c      	adds	r3, #12
 800c37c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	e853 3f00 	ldrex	r3, [r3]
 800c384:	617b      	str	r3, [r7, #20]
   return(result);
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	f043 0310 	orr.w	r3, r3, #16
 800c38c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	330c      	adds	r3, #12
 800c394:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c396:	627a      	str	r2, [r7, #36]	@ 0x24
 800c398:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c39a:	6a39      	ldr	r1, [r7, #32]
 800c39c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c39e:	e841 2300 	strex	r3, r2, [r1]
 800c3a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3a4:	69fb      	ldr	r3, [r7, #28]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d1e5      	bne.n	800c376 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800c3aa:	e002      	b.n	800c3b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800c3b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c3b6:	e000      	b.n	800c3ba <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800c3b8:	2302      	movs	r3, #2
  }
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3730      	adds	r7, #48	@ 0x30
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
	...

0800c3c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b0ba      	sub	sp, #232	@ 0xe8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	695b      	ldr	r3, [r3, #20]
 800c3e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c3f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3fa:	f003 030f 	and.w	r3, r3, #15
 800c3fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c402:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c406:	2b00      	cmp	r3, #0
 800c408:	d10f      	bne.n	800c42a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c40a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c40e:	f003 0320 	and.w	r3, r3, #32
 800c412:	2b00      	cmp	r3, #0
 800c414:	d009      	beq.n	800c42a <HAL_UART_IRQHandler+0x66>
 800c416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c41a:	f003 0320 	and.w	r3, r3, #32
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d003      	beq.n	800c42a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 fdfc 	bl	800d020 <UART_Receive_IT>
      return;
 800c428:	e273      	b.n	800c912 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c42a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c42e:	2b00      	cmp	r3, #0
 800c430:	f000 80de 	beq.w	800c5f0 <HAL_UART_IRQHandler+0x22c>
 800c434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c438:	f003 0301 	and.w	r3, r3, #1
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d106      	bne.n	800c44e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c444:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c448:	2b00      	cmp	r3, #0
 800c44a:	f000 80d1 	beq.w	800c5f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c44e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c452:	f003 0301 	and.w	r3, r3, #1
 800c456:	2b00      	cmp	r3, #0
 800c458:	d00b      	beq.n	800c472 <HAL_UART_IRQHandler+0xae>
 800c45a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c45e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c462:	2b00      	cmp	r3, #0
 800c464:	d005      	beq.n	800c472 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c46a:	f043 0201 	orr.w	r2, r3, #1
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c476:	f003 0304 	and.w	r3, r3, #4
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00b      	beq.n	800c496 <HAL_UART_IRQHandler+0xd2>
 800c47e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c482:	f003 0301 	and.w	r3, r3, #1
 800c486:	2b00      	cmp	r3, #0
 800c488:	d005      	beq.n	800c496 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c48e:	f043 0202 	orr.w	r2, r3, #2
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c49a:	f003 0302 	and.w	r3, r3, #2
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d00b      	beq.n	800c4ba <HAL_UART_IRQHandler+0xf6>
 800c4a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4a6:	f003 0301 	and.w	r3, r3, #1
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d005      	beq.n	800c4ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4b2:	f043 0204 	orr.w	r2, r3, #4
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c4ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4be:	f003 0308 	and.w	r3, r3, #8
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d011      	beq.n	800c4ea <HAL_UART_IRQHandler+0x126>
 800c4c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4ca:	f003 0320 	and.w	r3, r3, #32
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d105      	bne.n	800c4de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c4d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4d6:	f003 0301 	and.w	r3, r3, #1
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d005      	beq.n	800c4ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4e2:	f043 0208 	orr.w	r2, r3, #8
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	f000 820a 	beq.w	800c908 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c4f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4f8:	f003 0320 	and.w	r3, r3, #32
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d008      	beq.n	800c512 <HAL_UART_IRQHandler+0x14e>
 800c500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c504:	f003 0320 	and.w	r3, r3, #32
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d002      	beq.n	800c512 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 fd87 	bl	800d020 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	695b      	ldr	r3, [r3, #20]
 800c518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c51c:	2b40      	cmp	r3, #64	@ 0x40
 800c51e:	bf0c      	ite	eq
 800c520:	2301      	moveq	r3, #1
 800c522:	2300      	movne	r3, #0
 800c524:	b2db      	uxtb	r3, r3
 800c526:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c52e:	f003 0308 	and.w	r3, r3, #8
 800c532:	2b00      	cmp	r3, #0
 800c534:	d103      	bne.n	800c53e <HAL_UART_IRQHandler+0x17a>
 800c536:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d04f      	beq.n	800c5de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 fc92 	bl	800ce68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	695b      	ldr	r3, [r3, #20]
 800c54a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c54e:	2b40      	cmp	r3, #64	@ 0x40
 800c550:	d141      	bne.n	800c5d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	3314      	adds	r3, #20
 800c558:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c55c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c560:	e853 3f00 	ldrex	r3, [r3]
 800c564:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c568:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c56c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c570:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	3314      	adds	r3, #20
 800c57a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c57e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c582:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c586:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c58a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c58e:	e841 2300 	strex	r3, r2, [r1]
 800c592:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d1d9      	bne.n	800c552 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d013      	beq.n	800c5ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5aa:	4a8a      	ldr	r2, [pc, #552]	@ (800c7d4 <HAL_UART_IRQHandler+0x410>)
 800c5ac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7fc fd4a 	bl	800904c <HAL_DMA_Abort_IT>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d016      	beq.n	800c5ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c5c8:	4610      	mov	r0, r2
 800c5ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5cc:	e00e      	b.n	800c5ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 f9c0 	bl	800c954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5d4:	e00a      	b.n	800c5ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 f9bc 	bl	800c954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5dc:	e006      	b.n	800c5ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 f9b8 	bl	800c954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c5ea:	e18d      	b.n	800c908 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5ec:	bf00      	nop
    return;
 800c5ee:	e18b      	b.n	800c908 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	f040 8167 	bne.w	800c8c8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c5fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5fe:	f003 0310 	and.w	r3, r3, #16
 800c602:	2b00      	cmp	r3, #0
 800c604:	f000 8160 	beq.w	800c8c8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800c608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c60c:	f003 0310 	and.w	r3, r3, #16
 800c610:	2b00      	cmp	r3, #0
 800c612:	f000 8159 	beq.w	800c8c8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c616:	2300      	movs	r3, #0
 800c618:	60bb      	str	r3, [r7, #8]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	60bb      	str	r3, [r7, #8]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	60bb      	str	r3, [r7, #8]
 800c62a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	695b      	ldr	r3, [r3, #20]
 800c632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c636:	2b40      	cmp	r3, #64	@ 0x40
 800c638:	f040 80ce 	bne.w	800c7d8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c648:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	f000 80a9 	beq.w	800c7a4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c656:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c65a:	429a      	cmp	r2, r3
 800c65c:	f080 80a2 	bcs.w	800c7a4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c666:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c66c:	69db      	ldr	r3, [r3, #28]
 800c66e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c672:	f000 8088 	beq.w	800c786 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	330c      	adds	r3, #12
 800c67c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c680:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c684:	e853 3f00 	ldrex	r3, [r3]
 800c688:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c68c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c690:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c694:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	330c      	adds	r3, #12
 800c69e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c6a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c6a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c6ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c6b2:	e841 2300 	strex	r3, r2, [r1]
 800c6b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c6ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d1d9      	bne.n	800c676 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	3314      	adds	r3, #20
 800c6c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c6cc:	e853 3f00 	ldrex	r3, [r3]
 800c6d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c6d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c6d4:	f023 0301 	bic.w	r3, r3, #1
 800c6d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	3314      	adds	r3, #20
 800c6e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c6e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c6ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c6ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c6f2:	e841 2300 	strex	r3, r2, [r1]
 800c6f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c6f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d1e1      	bne.n	800c6c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	3314      	adds	r3, #20
 800c704:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c706:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c708:	e853 3f00 	ldrex	r3, [r3]
 800c70c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c70e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c710:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c714:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	3314      	adds	r3, #20
 800c71e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c722:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c724:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c726:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c728:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c72a:	e841 2300 	strex	r3, r2, [r1]
 800c72e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c730:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1e3      	bne.n	800c6fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2220      	movs	r2, #32
 800c73a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2200      	movs	r2, #0
 800c742:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	330c      	adds	r3, #12
 800c74a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c74c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c74e:	e853 3f00 	ldrex	r3, [r3]
 800c752:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c756:	f023 0310 	bic.w	r3, r3, #16
 800c75a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	330c      	adds	r3, #12
 800c764:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c768:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c76a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c76c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c76e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c770:	e841 2300 	strex	r3, r2, [r1]
 800c774:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c776:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d1e3      	bne.n	800c744 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c780:	4618      	mov	r0, r3
 800c782:	f7fc fbf3 	bl	8008f6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2202      	movs	r2, #2
 800c78a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c794:	b29b      	uxth	r3, r3
 800c796:	1ad3      	subs	r3, r2, r3
 800c798:	b29b      	uxth	r3, r3
 800c79a:	4619      	mov	r1, r3
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f7f8 fcd9 	bl	8005154 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c7a2:	e0b3      	b.n	800c90c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c7a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	f040 80ad 	bne.w	800c90c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7b6:	69db      	ldr	r3, [r3, #28]
 800c7b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c7bc:	f040 80a6 	bne.w	800c90c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2202      	movs	r2, #2
 800c7c4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7f8 fcc1 	bl	8005154 <HAL_UARTEx_RxEventCallback>
      return;
 800c7d2:	e09b      	b.n	800c90c <HAL_UART_IRQHandler+0x548>
 800c7d4:	0800cf2f 	.word	0x0800cf2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	1ad3      	subs	r3, r2, r3
 800c7e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f000 808e 	beq.w	800c910 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800c7f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	f000 8089 	beq.w	800c910 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	330c      	adds	r3, #12
 800c804:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c808:	e853 3f00 	ldrex	r3, [r3]
 800c80c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c80e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c810:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c814:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	330c      	adds	r3, #12
 800c81e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c822:	647a      	str	r2, [r7, #68]	@ 0x44
 800c824:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c826:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c828:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c82a:	e841 2300 	strex	r3, r2, [r1]
 800c82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c832:	2b00      	cmp	r3, #0
 800c834:	d1e3      	bne.n	800c7fe <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	3314      	adds	r3, #20
 800c83c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c840:	e853 3f00 	ldrex	r3, [r3]
 800c844:	623b      	str	r3, [r7, #32]
   return(result);
 800c846:	6a3b      	ldr	r3, [r7, #32]
 800c848:	f023 0301 	bic.w	r3, r3, #1
 800c84c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	3314      	adds	r3, #20
 800c856:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c85a:	633a      	str	r2, [r7, #48]	@ 0x30
 800c85c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c85e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c862:	e841 2300 	strex	r3, r2, [r1]
 800c866:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d1e3      	bne.n	800c836 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2220      	movs	r2, #32
 800c872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2200      	movs	r2, #0
 800c87a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	330c      	adds	r3, #12
 800c882:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	e853 3f00 	ldrex	r3, [r3]
 800c88a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f023 0310 	bic.w	r3, r3, #16
 800c892:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	330c      	adds	r3, #12
 800c89c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c8a0:	61fa      	str	r2, [r7, #28]
 800c8a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a4:	69b9      	ldr	r1, [r7, #24]
 800c8a6:	69fa      	ldr	r2, [r7, #28]
 800c8a8:	e841 2300 	strex	r3, r2, [r1]
 800c8ac:	617b      	str	r3, [r7, #20]
   return(result);
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d1e3      	bne.n	800c87c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2202      	movs	r2, #2
 800c8b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c8ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c8be:	4619      	mov	r1, r3
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f7f8 fc47 	bl	8005154 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c8c6:	e023      	b.n	800c910 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c8c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d009      	beq.n	800c8e8 <HAL_UART_IRQHandler+0x524>
 800c8d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d003      	beq.n	800c8e8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 fb35 	bl	800cf50 <UART_Transmit_IT>
    return;
 800c8e6:	e014      	b.n	800c912 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c8e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00e      	beq.n	800c912 <HAL_UART_IRQHandler+0x54e>
 800c8f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d008      	beq.n	800c912 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f000 fb75 	bl	800cff0 <UART_EndTransmit_IT>
    return;
 800c906:	e004      	b.n	800c912 <HAL_UART_IRQHandler+0x54e>
    return;
 800c908:	bf00      	nop
 800c90a:	e002      	b.n	800c912 <HAL_UART_IRQHandler+0x54e>
      return;
 800c90c:	bf00      	nop
 800c90e:	e000      	b.n	800c912 <HAL_UART_IRQHandler+0x54e>
      return;
 800c910:	bf00      	nop
  }
}
 800c912:	37e8      	adds	r7, #232	@ 0xe8
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c920:	bf00      	nop
 800c922:	370c      	adds	r7, #12
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b083      	sub	sp, #12
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c934:	bf00      	nop
 800c936:	370c      	adds	r7, #12
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr

0800c940 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c940:	b480      	push	{r7}
 800c942:	b083      	sub	sp, #12
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c948:	bf00      	nop
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c95c:	bf00      	nop
 800c95e:	370c      	adds	r7, #12
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr

0800c968 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b090      	sub	sp, #64	@ 0x40
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c974:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c980:	2b00      	cmp	r3, #0
 800c982:	d137      	bne.n	800c9f4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800c984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c986:	2200      	movs	r2, #0
 800c988:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c98a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	3314      	adds	r3, #20
 800c990:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c994:	e853 3f00 	ldrex	r3, [r3]
 800c998:	623b      	str	r3, [r7, #32]
   return(result);
 800c99a:	6a3b      	ldr	r3, [r7, #32]
 800c99c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c9a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c9a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	3314      	adds	r3, #20
 800c9a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9aa:	633a      	str	r2, [r7, #48]	@ 0x30
 800c9ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c9b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9b2:	e841 2300 	strex	r3, r2, [r1]
 800c9b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d1e5      	bne.n	800c98a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c9be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	330c      	adds	r3, #12
 800c9c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	e853 3f00 	ldrex	r3, [r3]
 800c9cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	330c      	adds	r3, #12
 800c9dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c9de:	61fa      	str	r2, [r7, #28]
 800c9e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e2:	69b9      	ldr	r1, [r7, #24]
 800c9e4:	69fa      	ldr	r2, [r7, #28]
 800c9e6:	e841 2300 	strex	r3, r2, [r1]
 800c9ea:	617b      	str	r3, [r7, #20]
   return(result);
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1e5      	bne.n	800c9be <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c9f2:	e002      	b.n	800c9fa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c9f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c9f6:	f7f8 fbf3 	bl	80051e0 <HAL_UART_TxCpltCallback>
}
 800c9fa:	bf00      	nop
 800c9fc:	3740      	adds	r7, #64	@ 0x40
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b084      	sub	sp, #16
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca0e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ca10:	68f8      	ldr	r0, [r7, #12]
 800ca12:	f7ff ff81 	bl	800c918 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca16:	bf00      	nop
 800ca18:	3710      	adds	r7, #16
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}

0800ca1e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b09c      	sub	sp, #112	@ 0x70
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca2a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d172      	bne.n	800cb20 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ca3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ca40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	330c      	adds	r3, #12
 800ca46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca4a:	e853 3f00 	ldrex	r3, [r3]
 800ca4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ca50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca56:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ca58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	330c      	adds	r3, #12
 800ca5e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ca60:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ca62:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ca66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ca68:	e841 2300 	strex	r3, r2, [r1]
 800ca6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ca6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d1e5      	bne.n	800ca40 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	3314      	adds	r3, #20
 800ca7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca7e:	e853 3f00 	ldrex	r3, [r3]
 800ca82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ca84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca86:	f023 0301 	bic.w	r3, r3, #1
 800ca8a:	667b      	str	r3, [r7, #100]	@ 0x64
 800ca8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	3314      	adds	r3, #20
 800ca92:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ca94:	647a      	str	r2, [r7, #68]	@ 0x44
 800ca96:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ca9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca9c:	e841 2300 	strex	r3, r2, [r1]
 800caa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800caa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d1e5      	bne.n	800ca74 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800caa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	3314      	adds	r3, #20
 800caae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab2:	e853 3f00 	ldrex	r3, [r3]
 800cab6:	623b      	str	r3, [r7, #32]
   return(result);
 800cab8:	6a3b      	ldr	r3, [r7, #32]
 800caba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cabe:	663b      	str	r3, [r7, #96]	@ 0x60
 800cac0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	3314      	adds	r3, #20
 800cac6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cac8:	633a      	str	r2, [r7, #48]	@ 0x30
 800caca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cacc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cad0:	e841 2300 	strex	r3, r2, [r1]
 800cad4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1e5      	bne.n	800caa8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cadc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cade:	2220      	movs	r2, #32
 800cae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cae4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d119      	bne.n	800cb20 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800caec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	330c      	adds	r3, #12
 800caf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	e853 3f00 	ldrex	r3, [r3]
 800cafa:	60fb      	str	r3, [r7, #12]
   return(result);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f023 0310 	bic.w	r3, r3, #16
 800cb02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cb04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	330c      	adds	r3, #12
 800cb0a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cb0c:	61fa      	str	r2, [r7, #28]
 800cb0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb10:	69b9      	ldr	r1, [r7, #24]
 800cb12:	69fa      	ldr	r2, [r7, #28]
 800cb14:	e841 2300 	strex	r3, r2, [r1]
 800cb18:	617b      	str	r3, [r7, #20]
   return(result);
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d1e5      	bne.n	800caec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb22:	2200      	movs	r2, #0
 800cb24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d106      	bne.n	800cb3c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cb32:	4619      	mov	r1, r3
 800cb34:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cb36:	f7f8 fb0d 	bl	8005154 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cb3a:	e002      	b.n	800cb42 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800cb3c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cb3e:	f7ff fef5 	bl	800c92c <HAL_UART_RxCpltCallback>
}
 800cb42:	bf00      	nop
 800cb44:	3770      	adds	r7, #112	@ 0x70
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b084      	sub	sp, #16
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb56:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb62:	2b01      	cmp	r3, #1
 800cb64:	d108      	bne.n	800cb78 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cb6a:	085b      	lsrs	r3, r3, #1
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	4619      	mov	r1, r3
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f7f8 faef 	bl	8005154 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cb76:	e002      	b.n	800cb7e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800cb78:	68f8      	ldr	r0, [r7, #12]
 800cb7a:	f7ff fee1 	bl	800c940 <HAL_UART_RxHalfCpltCallback>
}
 800cb7e:	bf00      	nop
 800cb80:	3710      	adds	r7, #16
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cb86:	b580      	push	{r7, lr}
 800cb88:	b084      	sub	sp, #16
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb96:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	695b      	ldr	r3, [r3, #20]
 800cb9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cba2:	2b80      	cmp	r3, #128	@ 0x80
 800cba4:	bf0c      	ite	eq
 800cba6:	2301      	moveq	r3, #1
 800cba8:	2300      	movne	r3, #0
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	2b21      	cmp	r3, #33	@ 0x21
 800cbb8:	d108      	bne.n	800cbcc <UART_DMAError+0x46>
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d005      	beq.n	800cbcc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800cbc6:	68b8      	ldr	r0, [r7, #8]
 800cbc8:	f000 f926 	bl	800ce18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	695b      	ldr	r3, [r3, #20]
 800cbd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbd6:	2b40      	cmp	r3, #64	@ 0x40
 800cbd8:	bf0c      	ite	eq
 800cbda:	2301      	moveq	r3, #1
 800cbdc:	2300      	movne	r3, #0
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	2b22      	cmp	r3, #34	@ 0x22
 800cbec:	d108      	bne.n	800cc00 <UART_DMAError+0x7a>
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d005      	beq.n	800cc00 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800cbfa:	68b8      	ldr	r0, [r7, #8]
 800cbfc:	f000 f934 	bl	800ce68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc04:	f043 0210 	orr.w	r2, r3, #16
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cc0c:	68b8      	ldr	r0, [r7, #8]
 800cc0e:	f7ff fea1 	bl	800c954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc12:	bf00      	nop
 800cc14:	3710      	adds	r7, #16
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}

0800cc1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cc1a:	b580      	push	{r7, lr}
 800cc1c:	b086      	sub	sp, #24
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	60f8      	str	r0, [r7, #12]
 800cc22:	60b9      	str	r1, [r7, #8]
 800cc24:	603b      	str	r3, [r7, #0]
 800cc26:	4613      	mov	r3, r2
 800cc28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc2a:	e03b      	b.n	800cca4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc2c:	6a3b      	ldr	r3, [r7, #32]
 800cc2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc32:	d037      	beq.n	800cca4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc34:	f7fb fafa 	bl	800822c <HAL_GetTick>
 800cc38:	4602      	mov	r2, r0
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	1ad3      	subs	r3, r2, r3
 800cc3e:	6a3a      	ldr	r2, [r7, #32]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d302      	bcc.n	800cc4a <UART_WaitOnFlagUntilTimeout+0x30>
 800cc44:	6a3b      	ldr	r3, [r7, #32]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d101      	bne.n	800cc4e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cc4a:	2303      	movs	r3, #3
 800cc4c:	e03a      	b.n	800ccc4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	68db      	ldr	r3, [r3, #12]
 800cc54:	f003 0304 	and.w	r3, r3, #4
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d023      	beq.n	800cca4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	2b80      	cmp	r3, #128	@ 0x80
 800cc60:	d020      	beq.n	800cca4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	2b40      	cmp	r3, #64	@ 0x40
 800cc66:	d01d      	beq.n	800cca4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f003 0308 	and.w	r3, r3, #8
 800cc72:	2b08      	cmp	r3, #8
 800cc74:	d116      	bne.n	800cca4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800cc76:	2300      	movs	r3, #0
 800cc78:	617b      	str	r3, [r7, #20]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	617b      	str	r3, [r7, #20]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	617b      	str	r3, [r7, #20]
 800cc8a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f000 f8eb 	bl	800ce68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2208      	movs	r2, #8
 800cc96:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800cca0:	2301      	movs	r3, #1
 800cca2:	e00f      	b.n	800ccc4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	681a      	ldr	r2, [r3, #0]
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	4013      	ands	r3, r2
 800ccae:	68ba      	ldr	r2, [r7, #8]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	bf0c      	ite	eq
 800ccb4:	2301      	moveq	r3, #1
 800ccb6:	2300      	movne	r3, #0
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	461a      	mov	r2, r3
 800ccbc:	79fb      	ldrb	r3, [r7, #7]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d0b4      	beq.n	800cc2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ccc2:	2300      	movs	r3, #0
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3718      	adds	r7, #24
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b098      	sub	sp, #96	@ 0x60
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	60f8      	str	r0, [r7, #12]
 800ccd4:	60b9      	str	r1, [r7, #8]
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	88fa      	ldrh	r2, [r7, #6]
 800cce4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2200      	movs	r2, #0
 800ccea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2222      	movs	r2, #34	@ 0x22
 800ccf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccf8:	4a44      	ldr	r2, [pc, #272]	@ (800ce0c <UART_Start_Receive_DMA+0x140>)
 800ccfa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd00:	4a43      	ldr	r2, [pc, #268]	@ (800ce10 <UART_Start_Receive_DMA+0x144>)
 800cd02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd08:	4a42      	ldr	r2, [pc, #264]	@ (800ce14 <UART_Start_Receive_DMA+0x148>)
 800cd0a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd10:	2200      	movs	r2, #0
 800cd12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800cd14:	f107 0308 	add.w	r3, r7, #8
 800cd18:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	3304      	adds	r3, #4
 800cd24:	4619      	mov	r1, r3
 800cd26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	88fb      	ldrh	r3, [r7, #6]
 800cd2c:	f7fc f8c6 	bl	8008ebc <HAL_DMA_Start_IT>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d008      	beq.n	800cd48 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2210      	movs	r2, #16
 800cd3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2220      	movs	r2, #32
 800cd40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800cd44:	2301      	movs	r3, #1
 800cd46:	e05d      	b.n	800ce04 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800cd48:	2300      	movs	r3, #0
 800cd4a:	613b      	str	r3, [r7, #16]
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	613b      	str	r3, [r7, #16]
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	613b      	str	r3, [r7, #16]
 800cd5c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	691b      	ldr	r3, [r3, #16]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d019      	beq.n	800cd9a <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	330c      	adds	r3, #12
 800cd6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd70:	e853 3f00 	ldrex	r3, [r3]
 800cd74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cd76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cd7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	330c      	adds	r3, #12
 800cd84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cd86:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800cd88:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd8a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800cd8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cd8e:	e841 2300 	strex	r3, r2, [r1]
 800cd92:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cd94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d1e5      	bne.n	800cd66 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	3314      	adds	r3, #20
 800cda0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cda4:	e853 3f00 	ldrex	r3, [r3]
 800cda8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cdaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdac:	f043 0301 	orr.w	r3, r3, #1
 800cdb0:	657b      	str	r3, [r7, #84]	@ 0x54
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	3314      	adds	r3, #20
 800cdb8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cdba:	63ba      	str	r2, [r7, #56]	@ 0x38
 800cdbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdbe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cdc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cdc2:	e841 2300 	strex	r3, r2, [r1]
 800cdc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cdc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d1e5      	bne.n	800cd9a <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	3314      	adds	r3, #20
 800cdd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdd6:	69bb      	ldr	r3, [r7, #24]
 800cdd8:	e853 3f00 	ldrex	r3, [r3]
 800cddc:	617b      	str	r3, [r7, #20]
   return(result);
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cde4:	653b      	str	r3, [r7, #80]	@ 0x50
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	3314      	adds	r3, #20
 800cdec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cdee:	627a      	str	r2, [r7, #36]	@ 0x24
 800cdf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf2:	6a39      	ldr	r1, [r7, #32]
 800cdf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdf6:	e841 2300 	strex	r3, r2, [r1]
 800cdfa:	61fb      	str	r3, [r7, #28]
   return(result);
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d1e5      	bne.n	800cdce <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800ce02:	2300      	movs	r3, #0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3760      	adds	r7, #96	@ 0x60
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	0800ca1f 	.word	0x0800ca1f
 800ce10:	0800cb4b 	.word	0x0800cb4b
 800ce14:	0800cb87 	.word	0x0800cb87

0800ce18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b089      	sub	sp, #36	@ 0x24
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	330c      	adds	r3, #12
 800ce26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	e853 3f00 	ldrex	r3, [r3]
 800ce2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ce36:	61fb      	str	r3, [r7, #28]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	330c      	adds	r3, #12
 800ce3e:	69fa      	ldr	r2, [r7, #28]
 800ce40:	61ba      	str	r2, [r7, #24]
 800ce42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce44:	6979      	ldr	r1, [r7, #20]
 800ce46:	69ba      	ldr	r2, [r7, #24]
 800ce48:	e841 2300 	strex	r3, r2, [r1]
 800ce4c:	613b      	str	r3, [r7, #16]
   return(result);
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d1e5      	bne.n	800ce20 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2220      	movs	r2, #32
 800ce58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800ce5c:	bf00      	nop
 800ce5e:	3724      	adds	r7, #36	@ 0x24
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr

0800ce68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b095      	sub	sp, #84	@ 0x54
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	330c      	adds	r3, #12
 800ce76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce7a:	e853 3f00 	ldrex	r3, [r3]
 800ce7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ce80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	330c      	adds	r3, #12
 800ce8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ce90:	643a      	str	r2, [r7, #64]	@ 0x40
 800ce92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce98:	e841 2300 	strex	r3, r2, [r1]
 800ce9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d1e5      	bne.n	800ce70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	3314      	adds	r3, #20
 800ceaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceac:	6a3b      	ldr	r3, [r7, #32]
 800ceae:	e853 3f00 	ldrex	r3, [r3]
 800ceb2:	61fb      	str	r3, [r7, #28]
   return(result);
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	f023 0301 	bic.w	r3, r3, #1
 800ceba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	3314      	adds	r3, #20
 800cec2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cec4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ceca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cecc:	e841 2300 	strex	r3, r2, [r1]
 800ced0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ced2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d1e5      	bne.n	800cea4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d119      	bne.n	800cf14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	330c      	adds	r3, #12
 800cee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	e853 3f00 	ldrex	r3, [r3]
 800ceee:	60bb      	str	r3, [r7, #8]
   return(result);
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	f023 0310 	bic.w	r3, r3, #16
 800cef6:	647b      	str	r3, [r7, #68]	@ 0x44
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	330c      	adds	r3, #12
 800cefe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf00:	61ba      	str	r2, [r7, #24]
 800cf02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf04:	6979      	ldr	r1, [r7, #20]
 800cf06:	69ba      	ldr	r2, [r7, #24]
 800cf08:	e841 2300 	strex	r3, r2, [r1]
 800cf0c:	613b      	str	r3, [r7, #16]
   return(result);
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d1e5      	bne.n	800cee0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2220      	movs	r2, #32
 800cf18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800cf22:	bf00      	nop
 800cf24:	3754      	adds	r7, #84	@ 0x54
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr

0800cf2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b084      	sub	sp, #16
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cf42:	68f8      	ldr	r0, [r7, #12]
 800cf44:	f7ff fd06 	bl	800c954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf48:	bf00      	nop
 800cf4a:	3710      	adds	r7, #16
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b085      	sub	sp, #20
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	2b21      	cmp	r3, #33	@ 0x21
 800cf62:	d13e      	bne.n	800cfe2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	689b      	ldr	r3, [r3, #8]
 800cf68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf6c:	d114      	bne.n	800cf98 <UART_Transmit_IT+0x48>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	691b      	ldr	r3, [r3, #16]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d110      	bne.n	800cf98 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6a1b      	ldr	r3, [r3, #32]
 800cf7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	881b      	ldrh	r3, [r3, #0]
 800cf80:	461a      	mov	r2, r3
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cf8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6a1b      	ldr	r3, [r3, #32]
 800cf90:	1c9a      	adds	r2, r3, #2
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	621a      	str	r2, [r3, #32]
 800cf96:	e008      	b.n	800cfaa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6a1b      	ldr	r3, [r3, #32]
 800cf9c:	1c59      	adds	r1, r3, #1
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	6211      	str	r1, [r2, #32]
 800cfa2:	781a      	ldrb	r2, [r3, #0]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cfae:	b29b      	uxth	r3, r3
 800cfb0:	3b01      	subs	r3, #1
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10f      	bne.n	800cfde <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	68da      	ldr	r2, [r3, #12]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cfcc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	68da      	ldr	r2, [r3, #12]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cfdc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	e000      	b.n	800cfe4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cfe2:	2302      	movs	r3, #2
  }
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3714      	adds	r7, #20
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b082      	sub	sp, #8
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	68da      	ldr	r2, [r3, #12]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d006:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2220      	movs	r2, #32
 800d00c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f7f8 f8e5 	bl	80051e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d016:	2300      	movs	r3, #0
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3708      	adds	r7, #8
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b08c      	sub	sp, #48	@ 0x30
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800d028:	2300      	movs	r3, #0
 800d02a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800d02c:	2300      	movs	r3, #0
 800d02e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d036:	b2db      	uxtb	r3, r3
 800d038:	2b22      	cmp	r3, #34	@ 0x22
 800d03a:	f040 80aa 	bne.w	800d192 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d046:	d115      	bne.n	800d074 <UART_Receive_IT+0x54>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	691b      	ldr	r3, [r3, #16]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d111      	bne.n	800d074 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d054:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	685b      	ldr	r3, [r3, #4]
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d062:	b29a      	uxth	r2, r3
 800d064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d066:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d06c:	1c9a      	adds	r2, r3, #2
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	629a      	str	r2, [r3, #40]	@ 0x28
 800d072:	e024      	b.n	800d0be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d078:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	689b      	ldr	r3, [r3, #8]
 800d07e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d082:	d007      	beq.n	800d094 <UART_Receive_IT+0x74>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d10a      	bne.n	800d0a2 <UART_Receive_IT+0x82>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	691b      	ldr	r3, [r3, #16]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d106      	bne.n	800d0a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	b2da      	uxtb	r2, r3
 800d09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d09e:	701a      	strb	r2, [r3, #0]
 800d0a0:	e008      	b.n	800d0b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0ae:	b2da      	uxtb	r2, r3
 800d0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0b8:	1c5a      	adds	r2, r3, #1
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d15d      	bne.n	800d18e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	68da      	ldr	r2, [r3, #12]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f022 0220 	bic.w	r2, r2, #32
 800d0e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	68da      	ldr	r2, [r3, #12]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d0f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	695a      	ldr	r2, [r3, #20]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f022 0201 	bic.w	r2, r2, #1
 800d100:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2220      	movs	r2, #32
 800d106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2200      	movs	r2, #0
 800d10e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d114:	2b01      	cmp	r3, #1
 800d116:	d135      	bne.n	800d184 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	330c      	adds	r3, #12
 800d124:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	e853 3f00 	ldrex	r3, [r3]
 800d12c:	613b      	str	r3, [r7, #16]
   return(result);
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	f023 0310 	bic.w	r3, r3, #16
 800d134:	627b      	str	r3, [r7, #36]	@ 0x24
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	330c      	adds	r3, #12
 800d13c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d13e:	623a      	str	r2, [r7, #32]
 800d140:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d142:	69f9      	ldr	r1, [r7, #28]
 800d144:	6a3a      	ldr	r2, [r7, #32]
 800d146:	e841 2300 	strex	r3, r2, [r1]
 800d14a:	61bb      	str	r3, [r7, #24]
   return(result);
 800d14c:	69bb      	ldr	r3, [r7, #24]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d1e5      	bne.n	800d11e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f003 0310 	and.w	r3, r3, #16
 800d15c:	2b10      	cmp	r3, #16
 800d15e:	d10a      	bne.n	800d176 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d160:	2300      	movs	r3, #0
 800d162:	60fb      	str	r3, [r7, #12]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	60fb      	str	r3, [r7, #12]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	60fb      	str	r3, [r7, #12]
 800d174:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d17a:	4619      	mov	r1, r3
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f7f7 ffe9 	bl	8005154 <HAL_UARTEx_RxEventCallback>
 800d182:	e002      	b.n	800d18a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f7ff fbd1 	bl	800c92c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d18a:	2300      	movs	r3, #0
 800d18c:	e002      	b.n	800d194 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d18e:	2300      	movs	r3, #0
 800d190:	e000      	b.n	800d194 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d192:	2302      	movs	r3, #2
  }
}
 800d194:	4618      	mov	r0, r3
 800d196:	3730      	adds	r7, #48	@ 0x30
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d19c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d1a0:	b0c0      	sub	sp, #256	@ 0x100
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d1a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	691b      	ldr	r3, [r3, #16]
 800d1b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d1b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1b8:	68d9      	ldr	r1, [r3, #12]
 800d1ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	ea40 0301 	orr.w	r3, r0, r1
 800d1c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d1c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1ca:	689a      	ldr	r2, [r3, #8]
 800d1cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1d0:	691b      	ldr	r3, [r3, #16]
 800d1d2:	431a      	orrs	r2, r3
 800d1d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1d8:	695b      	ldr	r3, [r3, #20]
 800d1da:	431a      	orrs	r2, r3
 800d1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1e0:	69db      	ldr	r3, [r3, #28]
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d1e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	68db      	ldr	r3, [r3, #12]
 800d1f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d1f4:	f021 010c 	bic.w	r1, r1, #12
 800d1f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d202:	430b      	orrs	r3, r1
 800d204:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	695b      	ldr	r3, [r3, #20]
 800d20e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d216:	6999      	ldr	r1, [r3, #24]
 800d218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	ea40 0301 	orr.w	r3, r0, r1
 800d222:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	4b8f      	ldr	r3, [pc, #572]	@ (800d468 <UART_SetConfig+0x2cc>)
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d005      	beq.n	800d23c <UART_SetConfig+0xa0>
 800d230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	4b8d      	ldr	r3, [pc, #564]	@ (800d46c <UART_SetConfig+0x2d0>)
 800d238:	429a      	cmp	r2, r3
 800d23a:	d104      	bne.n	800d246 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d23c:	f7fd fdbe 	bl	800adbc <HAL_RCC_GetPCLK2Freq>
 800d240:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d244:	e003      	b.n	800d24e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d246:	f7fd fda5 	bl	800ad94 <HAL_RCC_GetPCLK1Freq>
 800d24a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d24e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d252:	69db      	ldr	r3, [r3, #28]
 800d254:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d258:	f040 810c 	bne.w	800d474 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d25c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d260:	2200      	movs	r2, #0
 800d262:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d266:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d26a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d26e:	4622      	mov	r2, r4
 800d270:	462b      	mov	r3, r5
 800d272:	1891      	adds	r1, r2, r2
 800d274:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d276:	415b      	adcs	r3, r3
 800d278:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d27a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d27e:	4621      	mov	r1, r4
 800d280:	eb12 0801 	adds.w	r8, r2, r1
 800d284:	4629      	mov	r1, r5
 800d286:	eb43 0901 	adc.w	r9, r3, r1
 800d28a:	f04f 0200 	mov.w	r2, #0
 800d28e:	f04f 0300 	mov.w	r3, #0
 800d292:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d296:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d29a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d29e:	4690      	mov	r8, r2
 800d2a0:	4699      	mov	r9, r3
 800d2a2:	4623      	mov	r3, r4
 800d2a4:	eb18 0303 	adds.w	r3, r8, r3
 800d2a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d2ac:	462b      	mov	r3, r5
 800d2ae:	eb49 0303 	adc.w	r3, r9, r3
 800d2b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d2b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d2c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d2c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d2ca:	460b      	mov	r3, r1
 800d2cc:	18db      	adds	r3, r3, r3
 800d2ce:	653b      	str	r3, [r7, #80]	@ 0x50
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	eb42 0303 	adc.w	r3, r2, r3
 800d2d6:	657b      	str	r3, [r7, #84]	@ 0x54
 800d2d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d2dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d2e0:	f7f3 fe30 	bl	8000f44 <__aeabi_uldivmod>
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	460b      	mov	r3, r1
 800d2e8:	4b61      	ldr	r3, [pc, #388]	@ (800d470 <UART_SetConfig+0x2d4>)
 800d2ea:	fba3 2302 	umull	r2, r3, r3, r2
 800d2ee:	095b      	lsrs	r3, r3, #5
 800d2f0:	011c      	lsls	r4, r3, #4
 800d2f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d2fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d300:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d304:	4642      	mov	r2, r8
 800d306:	464b      	mov	r3, r9
 800d308:	1891      	adds	r1, r2, r2
 800d30a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d30c:	415b      	adcs	r3, r3
 800d30e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d310:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d314:	4641      	mov	r1, r8
 800d316:	eb12 0a01 	adds.w	sl, r2, r1
 800d31a:	4649      	mov	r1, r9
 800d31c:	eb43 0b01 	adc.w	fp, r3, r1
 800d320:	f04f 0200 	mov.w	r2, #0
 800d324:	f04f 0300 	mov.w	r3, #0
 800d328:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d32c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d330:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d334:	4692      	mov	sl, r2
 800d336:	469b      	mov	fp, r3
 800d338:	4643      	mov	r3, r8
 800d33a:	eb1a 0303 	adds.w	r3, sl, r3
 800d33e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d342:	464b      	mov	r3, r9
 800d344:	eb4b 0303 	adc.w	r3, fp, r3
 800d348:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d34c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	2200      	movs	r2, #0
 800d354:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d358:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d35c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d360:	460b      	mov	r3, r1
 800d362:	18db      	adds	r3, r3, r3
 800d364:	643b      	str	r3, [r7, #64]	@ 0x40
 800d366:	4613      	mov	r3, r2
 800d368:	eb42 0303 	adc.w	r3, r2, r3
 800d36c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d36e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d372:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d376:	f7f3 fde5 	bl	8000f44 <__aeabi_uldivmod>
 800d37a:	4602      	mov	r2, r0
 800d37c:	460b      	mov	r3, r1
 800d37e:	4611      	mov	r1, r2
 800d380:	4b3b      	ldr	r3, [pc, #236]	@ (800d470 <UART_SetConfig+0x2d4>)
 800d382:	fba3 2301 	umull	r2, r3, r3, r1
 800d386:	095b      	lsrs	r3, r3, #5
 800d388:	2264      	movs	r2, #100	@ 0x64
 800d38a:	fb02 f303 	mul.w	r3, r2, r3
 800d38e:	1acb      	subs	r3, r1, r3
 800d390:	00db      	lsls	r3, r3, #3
 800d392:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d396:	4b36      	ldr	r3, [pc, #216]	@ (800d470 <UART_SetConfig+0x2d4>)
 800d398:	fba3 2302 	umull	r2, r3, r3, r2
 800d39c:	095b      	lsrs	r3, r3, #5
 800d39e:	005b      	lsls	r3, r3, #1
 800d3a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d3a4:	441c      	add	r4, r3
 800d3a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d3b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d3b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d3b8:	4642      	mov	r2, r8
 800d3ba:	464b      	mov	r3, r9
 800d3bc:	1891      	adds	r1, r2, r2
 800d3be:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d3c0:	415b      	adcs	r3, r3
 800d3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d3c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d3c8:	4641      	mov	r1, r8
 800d3ca:	1851      	adds	r1, r2, r1
 800d3cc:	6339      	str	r1, [r7, #48]	@ 0x30
 800d3ce:	4649      	mov	r1, r9
 800d3d0:	414b      	adcs	r3, r1
 800d3d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3d4:	f04f 0200 	mov.w	r2, #0
 800d3d8:	f04f 0300 	mov.w	r3, #0
 800d3dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d3e0:	4659      	mov	r1, fp
 800d3e2:	00cb      	lsls	r3, r1, #3
 800d3e4:	4651      	mov	r1, sl
 800d3e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d3ea:	4651      	mov	r1, sl
 800d3ec:	00ca      	lsls	r2, r1, #3
 800d3ee:	4610      	mov	r0, r2
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	4642      	mov	r2, r8
 800d3f6:	189b      	adds	r3, r3, r2
 800d3f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d3fc:	464b      	mov	r3, r9
 800d3fe:	460a      	mov	r2, r1
 800d400:	eb42 0303 	adc.w	r3, r2, r3
 800d404:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	2200      	movs	r2, #0
 800d410:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d414:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d418:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d41c:	460b      	mov	r3, r1
 800d41e:	18db      	adds	r3, r3, r3
 800d420:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d422:	4613      	mov	r3, r2
 800d424:	eb42 0303 	adc.w	r3, r2, r3
 800d428:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d42a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d42e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d432:	f7f3 fd87 	bl	8000f44 <__aeabi_uldivmod>
 800d436:	4602      	mov	r2, r0
 800d438:	460b      	mov	r3, r1
 800d43a:	4b0d      	ldr	r3, [pc, #52]	@ (800d470 <UART_SetConfig+0x2d4>)
 800d43c:	fba3 1302 	umull	r1, r3, r3, r2
 800d440:	095b      	lsrs	r3, r3, #5
 800d442:	2164      	movs	r1, #100	@ 0x64
 800d444:	fb01 f303 	mul.w	r3, r1, r3
 800d448:	1ad3      	subs	r3, r2, r3
 800d44a:	00db      	lsls	r3, r3, #3
 800d44c:	3332      	adds	r3, #50	@ 0x32
 800d44e:	4a08      	ldr	r2, [pc, #32]	@ (800d470 <UART_SetConfig+0x2d4>)
 800d450:	fba2 2303 	umull	r2, r3, r2, r3
 800d454:	095b      	lsrs	r3, r3, #5
 800d456:	f003 0207 	and.w	r2, r3, #7
 800d45a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4422      	add	r2, r4
 800d462:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d464:	e106      	b.n	800d674 <UART_SetConfig+0x4d8>
 800d466:	bf00      	nop
 800d468:	40011000 	.word	0x40011000
 800d46c:	40011400 	.word	0x40011400
 800d470:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d478:	2200      	movs	r2, #0
 800d47a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d47e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d482:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d486:	4642      	mov	r2, r8
 800d488:	464b      	mov	r3, r9
 800d48a:	1891      	adds	r1, r2, r2
 800d48c:	6239      	str	r1, [r7, #32]
 800d48e:	415b      	adcs	r3, r3
 800d490:	627b      	str	r3, [r7, #36]	@ 0x24
 800d492:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d496:	4641      	mov	r1, r8
 800d498:	1854      	adds	r4, r2, r1
 800d49a:	4649      	mov	r1, r9
 800d49c:	eb43 0501 	adc.w	r5, r3, r1
 800d4a0:	f04f 0200 	mov.w	r2, #0
 800d4a4:	f04f 0300 	mov.w	r3, #0
 800d4a8:	00eb      	lsls	r3, r5, #3
 800d4aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d4ae:	00e2      	lsls	r2, r4, #3
 800d4b0:	4614      	mov	r4, r2
 800d4b2:	461d      	mov	r5, r3
 800d4b4:	4643      	mov	r3, r8
 800d4b6:	18e3      	adds	r3, r4, r3
 800d4b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d4bc:	464b      	mov	r3, r9
 800d4be:	eb45 0303 	adc.w	r3, r5, r3
 800d4c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d4c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d4d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d4d6:	f04f 0200 	mov.w	r2, #0
 800d4da:	f04f 0300 	mov.w	r3, #0
 800d4de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d4e2:	4629      	mov	r1, r5
 800d4e4:	008b      	lsls	r3, r1, #2
 800d4e6:	4621      	mov	r1, r4
 800d4e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d4ec:	4621      	mov	r1, r4
 800d4ee:	008a      	lsls	r2, r1, #2
 800d4f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d4f4:	f7f3 fd26 	bl	8000f44 <__aeabi_uldivmod>
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	460b      	mov	r3, r1
 800d4fc:	4b60      	ldr	r3, [pc, #384]	@ (800d680 <UART_SetConfig+0x4e4>)
 800d4fe:	fba3 2302 	umull	r2, r3, r3, r2
 800d502:	095b      	lsrs	r3, r3, #5
 800d504:	011c      	lsls	r4, r3, #4
 800d506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d50a:	2200      	movs	r2, #0
 800d50c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d510:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d514:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d518:	4642      	mov	r2, r8
 800d51a:	464b      	mov	r3, r9
 800d51c:	1891      	adds	r1, r2, r2
 800d51e:	61b9      	str	r1, [r7, #24]
 800d520:	415b      	adcs	r3, r3
 800d522:	61fb      	str	r3, [r7, #28]
 800d524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d528:	4641      	mov	r1, r8
 800d52a:	1851      	adds	r1, r2, r1
 800d52c:	6139      	str	r1, [r7, #16]
 800d52e:	4649      	mov	r1, r9
 800d530:	414b      	adcs	r3, r1
 800d532:	617b      	str	r3, [r7, #20]
 800d534:	f04f 0200 	mov.w	r2, #0
 800d538:	f04f 0300 	mov.w	r3, #0
 800d53c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d540:	4659      	mov	r1, fp
 800d542:	00cb      	lsls	r3, r1, #3
 800d544:	4651      	mov	r1, sl
 800d546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d54a:	4651      	mov	r1, sl
 800d54c:	00ca      	lsls	r2, r1, #3
 800d54e:	4610      	mov	r0, r2
 800d550:	4619      	mov	r1, r3
 800d552:	4603      	mov	r3, r0
 800d554:	4642      	mov	r2, r8
 800d556:	189b      	adds	r3, r3, r2
 800d558:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d55c:	464b      	mov	r3, r9
 800d55e:	460a      	mov	r2, r1
 800d560:	eb42 0303 	adc.w	r3, r2, r3
 800d564:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d572:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d574:	f04f 0200 	mov.w	r2, #0
 800d578:	f04f 0300 	mov.w	r3, #0
 800d57c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d580:	4649      	mov	r1, r9
 800d582:	008b      	lsls	r3, r1, #2
 800d584:	4641      	mov	r1, r8
 800d586:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d58a:	4641      	mov	r1, r8
 800d58c:	008a      	lsls	r2, r1, #2
 800d58e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d592:	f7f3 fcd7 	bl	8000f44 <__aeabi_uldivmod>
 800d596:	4602      	mov	r2, r0
 800d598:	460b      	mov	r3, r1
 800d59a:	4611      	mov	r1, r2
 800d59c:	4b38      	ldr	r3, [pc, #224]	@ (800d680 <UART_SetConfig+0x4e4>)
 800d59e:	fba3 2301 	umull	r2, r3, r3, r1
 800d5a2:	095b      	lsrs	r3, r3, #5
 800d5a4:	2264      	movs	r2, #100	@ 0x64
 800d5a6:	fb02 f303 	mul.w	r3, r2, r3
 800d5aa:	1acb      	subs	r3, r1, r3
 800d5ac:	011b      	lsls	r3, r3, #4
 800d5ae:	3332      	adds	r3, #50	@ 0x32
 800d5b0:	4a33      	ldr	r2, [pc, #204]	@ (800d680 <UART_SetConfig+0x4e4>)
 800d5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5b6:	095b      	lsrs	r3, r3, #5
 800d5b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d5bc:	441c      	add	r4, r3
 800d5be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	673b      	str	r3, [r7, #112]	@ 0x70
 800d5c6:	677a      	str	r2, [r7, #116]	@ 0x74
 800d5c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d5cc:	4642      	mov	r2, r8
 800d5ce:	464b      	mov	r3, r9
 800d5d0:	1891      	adds	r1, r2, r2
 800d5d2:	60b9      	str	r1, [r7, #8]
 800d5d4:	415b      	adcs	r3, r3
 800d5d6:	60fb      	str	r3, [r7, #12]
 800d5d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d5dc:	4641      	mov	r1, r8
 800d5de:	1851      	adds	r1, r2, r1
 800d5e0:	6039      	str	r1, [r7, #0]
 800d5e2:	4649      	mov	r1, r9
 800d5e4:	414b      	adcs	r3, r1
 800d5e6:	607b      	str	r3, [r7, #4]
 800d5e8:	f04f 0200 	mov.w	r2, #0
 800d5ec:	f04f 0300 	mov.w	r3, #0
 800d5f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d5f4:	4659      	mov	r1, fp
 800d5f6:	00cb      	lsls	r3, r1, #3
 800d5f8:	4651      	mov	r1, sl
 800d5fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d5fe:	4651      	mov	r1, sl
 800d600:	00ca      	lsls	r2, r1, #3
 800d602:	4610      	mov	r0, r2
 800d604:	4619      	mov	r1, r3
 800d606:	4603      	mov	r3, r0
 800d608:	4642      	mov	r2, r8
 800d60a:	189b      	adds	r3, r3, r2
 800d60c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d60e:	464b      	mov	r3, r9
 800d610:	460a      	mov	r2, r1
 800d612:	eb42 0303 	adc.w	r3, r2, r3
 800d616:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	2200      	movs	r2, #0
 800d620:	663b      	str	r3, [r7, #96]	@ 0x60
 800d622:	667a      	str	r2, [r7, #100]	@ 0x64
 800d624:	f04f 0200 	mov.w	r2, #0
 800d628:	f04f 0300 	mov.w	r3, #0
 800d62c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d630:	4649      	mov	r1, r9
 800d632:	008b      	lsls	r3, r1, #2
 800d634:	4641      	mov	r1, r8
 800d636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d63a:	4641      	mov	r1, r8
 800d63c:	008a      	lsls	r2, r1, #2
 800d63e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d642:	f7f3 fc7f 	bl	8000f44 <__aeabi_uldivmod>
 800d646:	4602      	mov	r2, r0
 800d648:	460b      	mov	r3, r1
 800d64a:	4b0d      	ldr	r3, [pc, #52]	@ (800d680 <UART_SetConfig+0x4e4>)
 800d64c:	fba3 1302 	umull	r1, r3, r3, r2
 800d650:	095b      	lsrs	r3, r3, #5
 800d652:	2164      	movs	r1, #100	@ 0x64
 800d654:	fb01 f303 	mul.w	r3, r1, r3
 800d658:	1ad3      	subs	r3, r2, r3
 800d65a:	011b      	lsls	r3, r3, #4
 800d65c:	3332      	adds	r3, #50	@ 0x32
 800d65e:	4a08      	ldr	r2, [pc, #32]	@ (800d680 <UART_SetConfig+0x4e4>)
 800d660:	fba2 2303 	umull	r2, r3, r2, r3
 800d664:	095b      	lsrs	r3, r3, #5
 800d666:	f003 020f 	and.w	r2, r3, #15
 800d66a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4422      	add	r2, r4
 800d672:	609a      	str	r2, [r3, #8]
}
 800d674:	bf00      	nop
 800d676:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d67a:	46bd      	mov	sp, r7
 800d67c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d680:	51eb851f 	.word	0x51eb851f

0800d684 <calloc>:
 800d684:	4b02      	ldr	r3, [pc, #8]	@ (800d690 <calloc+0xc>)
 800d686:	460a      	mov	r2, r1
 800d688:	4601      	mov	r1, r0
 800d68a:	6818      	ldr	r0, [r3, #0]
 800d68c:	f000 b802 	b.w	800d694 <_calloc_r>
 800d690:	20000058 	.word	0x20000058

0800d694 <_calloc_r>:
 800d694:	b570      	push	{r4, r5, r6, lr}
 800d696:	fba1 5402 	umull	r5, r4, r1, r2
 800d69a:	b93c      	cbnz	r4, 800d6ac <_calloc_r+0x18>
 800d69c:	4629      	mov	r1, r5
 800d69e:	f000 f82f 	bl	800d700 <_malloc_r>
 800d6a2:	4606      	mov	r6, r0
 800d6a4:	b928      	cbnz	r0, 800d6b2 <_calloc_r+0x1e>
 800d6a6:	2600      	movs	r6, #0
 800d6a8:	4630      	mov	r0, r6
 800d6aa:	bd70      	pop	{r4, r5, r6, pc}
 800d6ac:	220c      	movs	r2, #12
 800d6ae:	6002      	str	r2, [r0, #0]
 800d6b0:	e7f9      	b.n	800d6a6 <_calloc_r+0x12>
 800d6b2:	462a      	mov	r2, r5
 800d6b4:	4621      	mov	r1, r4
 800d6b6:	f000 fe1c 	bl	800e2f2 <memset>
 800d6ba:	e7f5      	b.n	800d6a8 <_calloc_r+0x14>

0800d6bc <sbrk_aligned>:
 800d6bc:	b570      	push	{r4, r5, r6, lr}
 800d6be:	4e0f      	ldr	r6, [pc, #60]	@ (800d6fc <sbrk_aligned+0x40>)
 800d6c0:	460c      	mov	r4, r1
 800d6c2:	6831      	ldr	r1, [r6, #0]
 800d6c4:	4605      	mov	r5, r0
 800d6c6:	b911      	cbnz	r1, 800d6ce <sbrk_aligned+0x12>
 800d6c8:	f000 fe54 	bl	800e374 <_sbrk_r>
 800d6cc:	6030      	str	r0, [r6, #0]
 800d6ce:	4621      	mov	r1, r4
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	f000 fe4f 	bl	800e374 <_sbrk_r>
 800d6d6:	1c43      	adds	r3, r0, #1
 800d6d8:	d103      	bne.n	800d6e2 <sbrk_aligned+0x26>
 800d6da:	f04f 34ff 	mov.w	r4, #4294967295
 800d6de:	4620      	mov	r0, r4
 800d6e0:	bd70      	pop	{r4, r5, r6, pc}
 800d6e2:	1cc4      	adds	r4, r0, #3
 800d6e4:	f024 0403 	bic.w	r4, r4, #3
 800d6e8:	42a0      	cmp	r0, r4
 800d6ea:	d0f8      	beq.n	800d6de <sbrk_aligned+0x22>
 800d6ec:	1a21      	subs	r1, r4, r0
 800d6ee:	4628      	mov	r0, r5
 800d6f0:	f000 fe40 	bl	800e374 <_sbrk_r>
 800d6f4:	3001      	adds	r0, #1
 800d6f6:	d1f2      	bne.n	800d6de <sbrk_aligned+0x22>
 800d6f8:	e7ef      	b.n	800d6da <sbrk_aligned+0x1e>
 800d6fa:	bf00      	nop
 800d6fc:	20000918 	.word	0x20000918

0800d700 <_malloc_r>:
 800d700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d704:	1ccd      	adds	r5, r1, #3
 800d706:	f025 0503 	bic.w	r5, r5, #3
 800d70a:	3508      	adds	r5, #8
 800d70c:	2d0c      	cmp	r5, #12
 800d70e:	bf38      	it	cc
 800d710:	250c      	movcc	r5, #12
 800d712:	2d00      	cmp	r5, #0
 800d714:	4606      	mov	r6, r0
 800d716:	db01      	blt.n	800d71c <_malloc_r+0x1c>
 800d718:	42a9      	cmp	r1, r5
 800d71a:	d904      	bls.n	800d726 <_malloc_r+0x26>
 800d71c:	230c      	movs	r3, #12
 800d71e:	6033      	str	r3, [r6, #0]
 800d720:	2000      	movs	r0, #0
 800d722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d726:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d7fc <_malloc_r+0xfc>
 800d72a:	f000 f869 	bl	800d800 <__malloc_lock>
 800d72e:	f8d8 3000 	ldr.w	r3, [r8]
 800d732:	461c      	mov	r4, r3
 800d734:	bb44      	cbnz	r4, 800d788 <_malloc_r+0x88>
 800d736:	4629      	mov	r1, r5
 800d738:	4630      	mov	r0, r6
 800d73a:	f7ff ffbf 	bl	800d6bc <sbrk_aligned>
 800d73e:	1c43      	adds	r3, r0, #1
 800d740:	4604      	mov	r4, r0
 800d742:	d158      	bne.n	800d7f6 <_malloc_r+0xf6>
 800d744:	f8d8 4000 	ldr.w	r4, [r8]
 800d748:	4627      	mov	r7, r4
 800d74a:	2f00      	cmp	r7, #0
 800d74c:	d143      	bne.n	800d7d6 <_malloc_r+0xd6>
 800d74e:	2c00      	cmp	r4, #0
 800d750:	d04b      	beq.n	800d7ea <_malloc_r+0xea>
 800d752:	6823      	ldr	r3, [r4, #0]
 800d754:	4639      	mov	r1, r7
 800d756:	4630      	mov	r0, r6
 800d758:	eb04 0903 	add.w	r9, r4, r3
 800d75c:	f000 fe0a 	bl	800e374 <_sbrk_r>
 800d760:	4581      	cmp	r9, r0
 800d762:	d142      	bne.n	800d7ea <_malloc_r+0xea>
 800d764:	6821      	ldr	r1, [r4, #0]
 800d766:	1a6d      	subs	r5, r5, r1
 800d768:	4629      	mov	r1, r5
 800d76a:	4630      	mov	r0, r6
 800d76c:	f7ff ffa6 	bl	800d6bc <sbrk_aligned>
 800d770:	3001      	adds	r0, #1
 800d772:	d03a      	beq.n	800d7ea <_malloc_r+0xea>
 800d774:	6823      	ldr	r3, [r4, #0]
 800d776:	442b      	add	r3, r5
 800d778:	6023      	str	r3, [r4, #0]
 800d77a:	f8d8 3000 	ldr.w	r3, [r8]
 800d77e:	685a      	ldr	r2, [r3, #4]
 800d780:	bb62      	cbnz	r2, 800d7dc <_malloc_r+0xdc>
 800d782:	f8c8 7000 	str.w	r7, [r8]
 800d786:	e00f      	b.n	800d7a8 <_malloc_r+0xa8>
 800d788:	6822      	ldr	r2, [r4, #0]
 800d78a:	1b52      	subs	r2, r2, r5
 800d78c:	d420      	bmi.n	800d7d0 <_malloc_r+0xd0>
 800d78e:	2a0b      	cmp	r2, #11
 800d790:	d917      	bls.n	800d7c2 <_malloc_r+0xc2>
 800d792:	1961      	adds	r1, r4, r5
 800d794:	42a3      	cmp	r3, r4
 800d796:	6025      	str	r5, [r4, #0]
 800d798:	bf18      	it	ne
 800d79a:	6059      	strne	r1, [r3, #4]
 800d79c:	6863      	ldr	r3, [r4, #4]
 800d79e:	bf08      	it	eq
 800d7a0:	f8c8 1000 	streq.w	r1, [r8]
 800d7a4:	5162      	str	r2, [r4, r5]
 800d7a6:	604b      	str	r3, [r1, #4]
 800d7a8:	4630      	mov	r0, r6
 800d7aa:	f000 f82f 	bl	800d80c <__malloc_unlock>
 800d7ae:	f104 000b 	add.w	r0, r4, #11
 800d7b2:	1d23      	adds	r3, r4, #4
 800d7b4:	f020 0007 	bic.w	r0, r0, #7
 800d7b8:	1ac2      	subs	r2, r0, r3
 800d7ba:	bf1c      	itt	ne
 800d7bc:	1a1b      	subne	r3, r3, r0
 800d7be:	50a3      	strne	r3, [r4, r2]
 800d7c0:	e7af      	b.n	800d722 <_malloc_r+0x22>
 800d7c2:	6862      	ldr	r2, [r4, #4]
 800d7c4:	42a3      	cmp	r3, r4
 800d7c6:	bf0c      	ite	eq
 800d7c8:	f8c8 2000 	streq.w	r2, [r8]
 800d7cc:	605a      	strne	r2, [r3, #4]
 800d7ce:	e7eb      	b.n	800d7a8 <_malloc_r+0xa8>
 800d7d0:	4623      	mov	r3, r4
 800d7d2:	6864      	ldr	r4, [r4, #4]
 800d7d4:	e7ae      	b.n	800d734 <_malloc_r+0x34>
 800d7d6:	463c      	mov	r4, r7
 800d7d8:	687f      	ldr	r7, [r7, #4]
 800d7da:	e7b6      	b.n	800d74a <_malloc_r+0x4a>
 800d7dc:	461a      	mov	r2, r3
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	42a3      	cmp	r3, r4
 800d7e2:	d1fb      	bne.n	800d7dc <_malloc_r+0xdc>
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	6053      	str	r3, [r2, #4]
 800d7e8:	e7de      	b.n	800d7a8 <_malloc_r+0xa8>
 800d7ea:	230c      	movs	r3, #12
 800d7ec:	6033      	str	r3, [r6, #0]
 800d7ee:	4630      	mov	r0, r6
 800d7f0:	f000 f80c 	bl	800d80c <__malloc_unlock>
 800d7f4:	e794      	b.n	800d720 <_malloc_r+0x20>
 800d7f6:	6005      	str	r5, [r0, #0]
 800d7f8:	e7d6      	b.n	800d7a8 <_malloc_r+0xa8>
 800d7fa:	bf00      	nop
 800d7fc:	2000091c 	.word	0x2000091c

0800d800 <__malloc_lock>:
 800d800:	4801      	ldr	r0, [pc, #4]	@ (800d808 <__malloc_lock+0x8>)
 800d802:	f000 be04 	b.w	800e40e <__retarget_lock_acquire_recursive>
 800d806:	bf00      	nop
 800d808:	20000a60 	.word	0x20000a60

0800d80c <__malloc_unlock>:
 800d80c:	4801      	ldr	r0, [pc, #4]	@ (800d814 <__malloc_unlock+0x8>)
 800d80e:	f000 bdff 	b.w	800e410 <__retarget_lock_release_recursive>
 800d812:	bf00      	nop
 800d814:	20000a60 	.word	0x20000a60

0800d818 <__cvt>:
 800d818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d81c:	ec57 6b10 	vmov	r6, r7, d0
 800d820:	2f00      	cmp	r7, #0
 800d822:	460c      	mov	r4, r1
 800d824:	4619      	mov	r1, r3
 800d826:	463b      	mov	r3, r7
 800d828:	bfbb      	ittet	lt
 800d82a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d82e:	461f      	movlt	r7, r3
 800d830:	2300      	movge	r3, #0
 800d832:	232d      	movlt	r3, #45	@ 0x2d
 800d834:	700b      	strb	r3, [r1, #0]
 800d836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d838:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d83c:	4691      	mov	r9, r2
 800d83e:	f023 0820 	bic.w	r8, r3, #32
 800d842:	bfbc      	itt	lt
 800d844:	4632      	movlt	r2, r6
 800d846:	4616      	movlt	r6, r2
 800d848:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d84c:	d005      	beq.n	800d85a <__cvt+0x42>
 800d84e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d852:	d100      	bne.n	800d856 <__cvt+0x3e>
 800d854:	3401      	adds	r4, #1
 800d856:	2102      	movs	r1, #2
 800d858:	e000      	b.n	800d85c <__cvt+0x44>
 800d85a:	2103      	movs	r1, #3
 800d85c:	ab03      	add	r3, sp, #12
 800d85e:	9301      	str	r3, [sp, #4]
 800d860:	ab02      	add	r3, sp, #8
 800d862:	9300      	str	r3, [sp, #0]
 800d864:	ec47 6b10 	vmov	d0, r6, r7
 800d868:	4653      	mov	r3, sl
 800d86a:	4622      	mov	r2, r4
 800d86c:	f000 fe68 	bl	800e540 <_dtoa_r>
 800d870:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d874:	4605      	mov	r5, r0
 800d876:	d119      	bne.n	800d8ac <__cvt+0x94>
 800d878:	f019 0f01 	tst.w	r9, #1
 800d87c:	d00e      	beq.n	800d89c <__cvt+0x84>
 800d87e:	eb00 0904 	add.w	r9, r0, r4
 800d882:	2200      	movs	r2, #0
 800d884:	2300      	movs	r3, #0
 800d886:	4630      	mov	r0, r6
 800d888:	4639      	mov	r1, r7
 800d88a:	f7f3 f93d 	bl	8000b08 <__aeabi_dcmpeq>
 800d88e:	b108      	cbz	r0, 800d894 <__cvt+0x7c>
 800d890:	f8cd 900c 	str.w	r9, [sp, #12]
 800d894:	2230      	movs	r2, #48	@ 0x30
 800d896:	9b03      	ldr	r3, [sp, #12]
 800d898:	454b      	cmp	r3, r9
 800d89a:	d31e      	bcc.n	800d8da <__cvt+0xc2>
 800d89c:	9b03      	ldr	r3, [sp, #12]
 800d89e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8a0:	1b5b      	subs	r3, r3, r5
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	6013      	str	r3, [r2, #0]
 800d8a6:	b004      	add	sp, #16
 800d8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d8b0:	eb00 0904 	add.w	r9, r0, r4
 800d8b4:	d1e5      	bne.n	800d882 <__cvt+0x6a>
 800d8b6:	7803      	ldrb	r3, [r0, #0]
 800d8b8:	2b30      	cmp	r3, #48	@ 0x30
 800d8ba:	d10a      	bne.n	800d8d2 <__cvt+0xba>
 800d8bc:	2200      	movs	r2, #0
 800d8be:	2300      	movs	r3, #0
 800d8c0:	4630      	mov	r0, r6
 800d8c2:	4639      	mov	r1, r7
 800d8c4:	f7f3 f920 	bl	8000b08 <__aeabi_dcmpeq>
 800d8c8:	b918      	cbnz	r0, 800d8d2 <__cvt+0xba>
 800d8ca:	f1c4 0401 	rsb	r4, r4, #1
 800d8ce:	f8ca 4000 	str.w	r4, [sl]
 800d8d2:	f8da 3000 	ldr.w	r3, [sl]
 800d8d6:	4499      	add	r9, r3
 800d8d8:	e7d3      	b.n	800d882 <__cvt+0x6a>
 800d8da:	1c59      	adds	r1, r3, #1
 800d8dc:	9103      	str	r1, [sp, #12]
 800d8de:	701a      	strb	r2, [r3, #0]
 800d8e0:	e7d9      	b.n	800d896 <__cvt+0x7e>

0800d8e2 <__exponent>:
 800d8e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8e4:	2900      	cmp	r1, #0
 800d8e6:	bfba      	itte	lt
 800d8e8:	4249      	neglt	r1, r1
 800d8ea:	232d      	movlt	r3, #45	@ 0x2d
 800d8ec:	232b      	movge	r3, #43	@ 0x2b
 800d8ee:	2909      	cmp	r1, #9
 800d8f0:	7002      	strb	r2, [r0, #0]
 800d8f2:	7043      	strb	r3, [r0, #1]
 800d8f4:	dd29      	ble.n	800d94a <__exponent+0x68>
 800d8f6:	f10d 0307 	add.w	r3, sp, #7
 800d8fa:	461d      	mov	r5, r3
 800d8fc:	270a      	movs	r7, #10
 800d8fe:	461a      	mov	r2, r3
 800d900:	fbb1 f6f7 	udiv	r6, r1, r7
 800d904:	fb07 1416 	mls	r4, r7, r6, r1
 800d908:	3430      	adds	r4, #48	@ 0x30
 800d90a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d90e:	460c      	mov	r4, r1
 800d910:	2c63      	cmp	r4, #99	@ 0x63
 800d912:	f103 33ff 	add.w	r3, r3, #4294967295
 800d916:	4631      	mov	r1, r6
 800d918:	dcf1      	bgt.n	800d8fe <__exponent+0x1c>
 800d91a:	3130      	adds	r1, #48	@ 0x30
 800d91c:	1e94      	subs	r4, r2, #2
 800d91e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d922:	1c41      	adds	r1, r0, #1
 800d924:	4623      	mov	r3, r4
 800d926:	42ab      	cmp	r3, r5
 800d928:	d30a      	bcc.n	800d940 <__exponent+0x5e>
 800d92a:	f10d 0309 	add.w	r3, sp, #9
 800d92e:	1a9b      	subs	r3, r3, r2
 800d930:	42ac      	cmp	r4, r5
 800d932:	bf88      	it	hi
 800d934:	2300      	movhi	r3, #0
 800d936:	3302      	adds	r3, #2
 800d938:	4403      	add	r3, r0
 800d93a:	1a18      	subs	r0, r3, r0
 800d93c:	b003      	add	sp, #12
 800d93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d940:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d944:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d948:	e7ed      	b.n	800d926 <__exponent+0x44>
 800d94a:	2330      	movs	r3, #48	@ 0x30
 800d94c:	3130      	adds	r1, #48	@ 0x30
 800d94e:	7083      	strb	r3, [r0, #2]
 800d950:	70c1      	strb	r1, [r0, #3]
 800d952:	1d03      	adds	r3, r0, #4
 800d954:	e7f1      	b.n	800d93a <__exponent+0x58>
	...

0800d958 <_printf_float>:
 800d958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d95c:	b08d      	sub	sp, #52	@ 0x34
 800d95e:	460c      	mov	r4, r1
 800d960:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d964:	4616      	mov	r6, r2
 800d966:	461f      	mov	r7, r3
 800d968:	4605      	mov	r5, r0
 800d96a:	f000 fccb 	bl	800e304 <_localeconv_r>
 800d96e:	6803      	ldr	r3, [r0, #0]
 800d970:	9304      	str	r3, [sp, #16]
 800d972:	4618      	mov	r0, r3
 800d974:	f7f2 fc9c 	bl	80002b0 <strlen>
 800d978:	2300      	movs	r3, #0
 800d97a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d97c:	f8d8 3000 	ldr.w	r3, [r8]
 800d980:	9005      	str	r0, [sp, #20]
 800d982:	3307      	adds	r3, #7
 800d984:	f023 0307 	bic.w	r3, r3, #7
 800d988:	f103 0208 	add.w	r2, r3, #8
 800d98c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d990:	f8d4 b000 	ldr.w	fp, [r4]
 800d994:	f8c8 2000 	str.w	r2, [r8]
 800d998:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d99c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d9a0:	9307      	str	r3, [sp, #28]
 800d9a2:	f8cd 8018 	str.w	r8, [sp, #24]
 800d9a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d9aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9ae:	4b9c      	ldr	r3, [pc, #624]	@ (800dc20 <_printf_float+0x2c8>)
 800d9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d9b4:	f7f3 f8da 	bl	8000b6c <__aeabi_dcmpun>
 800d9b8:	bb70      	cbnz	r0, 800da18 <_printf_float+0xc0>
 800d9ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9be:	4b98      	ldr	r3, [pc, #608]	@ (800dc20 <_printf_float+0x2c8>)
 800d9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d9c4:	f7f3 f8b4 	bl	8000b30 <__aeabi_dcmple>
 800d9c8:	bb30      	cbnz	r0, 800da18 <_printf_float+0xc0>
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	4640      	mov	r0, r8
 800d9d0:	4649      	mov	r1, r9
 800d9d2:	f7f3 f8a3 	bl	8000b1c <__aeabi_dcmplt>
 800d9d6:	b110      	cbz	r0, 800d9de <_printf_float+0x86>
 800d9d8:	232d      	movs	r3, #45	@ 0x2d
 800d9da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d9de:	4a91      	ldr	r2, [pc, #580]	@ (800dc24 <_printf_float+0x2cc>)
 800d9e0:	4b91      	ldr	r3, [pc, #580]	@ (800dc28 <_printf_float+0x2d0>)
 800d9e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d9e6:	bf94      	ite	ls
 800d9e8:	4690      	movls	r8, r2
 800d9ea:	4698      	movhi	r8, r3
 800d9ec:	2303      	movs	r3, #3
 800d9ee:	6123      	str	r3, [r4, #16]
 800d9f0:	f02b 0304 	bic.w	r3, fp, #4
 800d9f4:	6023      	str	r3, [r4, #0]
 800d9f6:	f04f 0900 	mov.w	r9, #0
 800d9fa:	9700      	str	r7, [sp, #0]
 800d9fc:	4633      	mov	r3, r6
 800d9fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800da00:	4621      	mov	r1, r4
 800da02:	4628      	mov	r0, r5
 800da04:	f000 f9d2 	bl	800ddac <_printf_common>
 800da08:	3001      	adds	r0, #1
 800da0a:	f040 808d 	bne.w	800db28 <_printf_float+0x1d0>
 800da0e:	f04f 30ff 	mov.w	r0, #4294967295
 800da12:	b00d      	add	sp, #52	@ 0x34
 800da14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da18:	4642      	mov	r2, r8
 800da1a:	464b      	mov	r3, r9
 800da1c:	4640      	mov	r0, r8
 800da1e:	4649      	mov	r1, r9
 800da20:	f7f3 f8a4 	bl	8000b6c <__aeabi_dcmpun>
 800da24:	b140      	cbz	r0, 800da38 <_printf_float+0xe0>
 800da26:	464b      	mov	r3, r9
 800da28:	2b00      	cmp	r3, #0
 800da2a:	bfbc      	itt	lt
 800da2c:	232d      	movlt	r3, #45	@ 0x2d
 800da2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800da32:	4a7e      	ldr	r2, [pc, #504]	@ (800dc2c <_printf_float+0x2d4>)
 800da34:	4b7e      	ldr	r3, [pc, #504]	@ (800dc30 <_printf_float+0x2d8>)
 800da36:	e7d4      	b.n	800d9e2 <_printf_float+0x8a>
 800da38:	6863      	ldr	r3, [r4, #4]
 800da3a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800da3e:	9206      	str	r2, [sp, #24]
 800da40:	1c5a      	adds	r2, r3, #1
 800da42:	d13b      	bne.n	800dabc <_printf_float+0x164>
 800da44:	2306      	movs	r3, #6
 800da46:	6063      	str	r3, [r4, #4]
 800da48:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800da4c:	2300      	movs	r3, #0
 800da4e:	6022      	str	r2, [r4, #0]
 800da50:	9303      	str	r3, [sp, #12]
 800da52:	ab0a      	add	r3, sp, #40	@ 0x28
 800da54:	e9cd a301 	strd	sl, r3, [sp, #4]
 800da58:	ab09      	add	r3, sp, #36	@ 0x24
 800da5a:	9300      	str	r3, [sp, #0]
 800da5c:	6861      	ldr	r1, [r4, #4]
 800da5e:	ec49 8b10 	vmov	d0, r8, r9
 800da62:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800da66:	4628      	mov	r0, r5
 800da68:	f7ff fed6 	bl	800d818 <__cvt>
 800da6c:	9b06      	ldr	r3, [sp, #24]
 800da6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800da70:	2b47      	cmp	r3, #71	@ 0x47
 800da72:	4680      	mov	r8, r0
 800da74:	d129      	bne.n	800daca <_printf_float+0x172>
 800da76:	1cc8      	adds	r0, r1, #3
 800da78:	db02      	blt.n	800da80 <_printf_float+0x128>
 800da7a:	6863      	ldr	r3, [r4, #4]
 800da7c:	4299      	cmp	r1, r3
 800da7e:	dd41      	ble.n	800db04 <_printf_float+0x1ac>
 800da80:	f1aa 0a02 	sub.w	sl, sl, #2
 800da84:	fa5f fa8a 	uxtb.w	sl, sl
 800da88:	3901      	subs	r1, #1
 800da8a:	4652      	mov	r2, sl
 800da8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800da90:	9109      	str	r1, [sp, #36]	@ 0x24
 800da92:	f7ff ff26 	bl	800d8e2 <__exponent>
 800da96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da98:	1813      	adds	r3, r2, r0
 800da9a:	2a01      	cmp	r2, #1
 800da9c:	4681      	mov	r9, r0
 800da9e:	6123      	str	r3, [r4, #16]
 800daa0:	dc02      	bgt.n	800daa8 <_printf_float+0x150>
 800daa2:	6822      	ldr	r2, [r4, #0]
 800daa4:	07d2      	lsls	r2, r2, #31
 800daa6:	d501      	bpl.n	800daac <_printf_float+0x154>
 800daa8:	3301      	adds	r3, #1
 800daaa:	6123      	str	r3, [r4, #16]
 800daac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d0a2      	beq.n	800d9fa <_printf_float+0xa2>
 800dab4:	232d      	movs	r3, #45	@ 0x2d
 800dab6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800daba:	e79e      	b.n	800d9fa <_printf_float+0xa2>
 800dabc:	9a06      	ldr	r2, [sp, #24]
 800dabe:	2a47      	cmp	r2, #71	@ 0x47
 800dac0:	d1c2      	bne.n	800da48 <_printf_float+0xf0>
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d1c0      	bne.n	800da48 <_printf_float+0xf0>
 800dac6:	2301      	movs	r3, #1
 800dac8:	e7bd      	b.n	800da46 <_printf_float+0xee>
 800daca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dace:	d9db      	bls.n	800da88 <_printf_float+0x130>
 800dad0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800dad4:	d118      	bne.n	800db08 <_printf_float+0x1b0>
 800dad6:	2900      	cmp	r1, #0
 800dad8:	6863      	ldr	r3, [r4, #4]
 800dada:	dd0b      	ble.n	800daf4 <_printf_float+0x19c>
 800dadc:	6121      	str	r1, [r4, #16]
 800dade:	b913      	cbnz	r3, 800dae6 <_printf_float+0x18e>
 800dae0:	6822      	ldr	r2, [r4, #0]
 800dae2:	07d0      	lsls	r0, r2, #31
 800dae4:	d502      	bpl.n	800daec <_printf_float+0x194>
 800dae6:	3301      	adds	r3, #1
 800dae8:	440b      	add	r3, r1
 800daea:	6123      	str	r3, [r4, #16]
 800daec:	65a1      	str	r1, [r4, #88]	@ 0x58
 800daee:	f04f 0900 	mov.w	r9, #0
 800daf2:	e7db      	b.n	800daac <_printf_float+0x154>
 800daf4:	b913      	cbnz	r3, 800dafc <_printf_float+0x1a4>
 800daf6:	6822      	ldr	r2, [r4, #0]
 800daf8:	07d2      	lsls	r2, r2, #31
 800dafa:	d501      	bpl.n	800db00 <_printf_float+0x1a8>
 800dafc:	3302      	adds	r3, #2
 800dafe:	e7f4      	b.n	800daea <_printf_float+0x192>
 800db00:	2301      	movs	r3, #1
 800db02:	e7f2      	b.n	800daea <_printf_float+0x192>
 800db04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800db08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db0a:	4299      	cmp	r1, r3
 800db0c:	db05      	blt.n	800db1a <_printf_float+0x1c2>
 800db0e:	6823      	ldr	r3, [r4, #0]
 800db10:	6121      	str	r1, [r4, #16]
 800db12:	07d8      	lsls	r0, r3, #31
 800db14:	d5ea      	bpl.n	800daec <_printf_float+0x194>
 800db16:	1c4b      	adds	r3, r1, #1
 800db18:	e7e7      	b.n	800daea <_printf_float+0x192>
 800db1a:	2900      	cmp	r1, #0
 800db1c:	bfd4      	ite	le
 800db1e:	f1c1 0202 	rsble	r2, r1, #2
 800db22:	2201      	movgt	r2, #1
 800db24:	4413      	add	r3, r2
 800db26:	e7e0      	b.n	800daea <_printf_float+0x192>
 800db28:	6823      	ldr	r3, [r4, #0]
 800db2a:	055a      	lsls	r2, r3, #21
 800db2c:	d407      	bmi.n	800db3e <_printf_float+0x1e6>
 800db2e:	6923      	ldr	r3, [r4, #16]
 800db30:	4642      	mov	r2, r8
 800db32:	4631      	mov	r1, r6
 800db34:	4628      	mov	r0, r5
 800db36:	47b8      	blx	r7
 800db38:	3001      	adds	r0, #1
 800db3a:	d12b      	bne.n	800db94 <_printf_float+0x23c>
 800db3c:	e767      	b.n	800da0e <_printf_float+0xb6>
 800db3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800db42:	f240 80dd 	bls.w	800dd00 <_printf_float+0x3a8>
 800db46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800db4a:	2200      	movs	r2, #0
 800db4c:	2300      	movs	r3, #0
 800db4e:	f7f2 ffdb 	bl	8000b08 <__aeabi_dcmpeq>
 800db52:	2800      	cmp	r0, #0
 800db54:	d033      	beq.n	800dbbe <_printf_float+0x266>
 800db56:	4a37      	ldr	r2, [pc, #220]	@ (800dc34 <_printf_float+0x2dc>)
 800db58:	2301      	movs	r3, #1
 800db5a:	4631      	mov	r1, r6
 800db5c:	4628      	mov	r0, r5
 800db5e:	47b8      	blx	r7
 800db60:	3001      	adds	r0, #1
 800db62:	f43f af54 	beq.w	800da0e <_printf_float+0xb6>
 800db66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800db6a:	4543      	cmp	r3, r8
 800db6c:	db02      	blt.n	800db74 <_printf_float+0x21c>
 800db6e:	6823      	ldr	r3, [r4, #0]
 800db70:	07d8      	lsls	r0, r3, #31
 800db72:	d50f      	bpl.n	800db94 <_printf_float+0x23c>
 800db74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db78:	4631      	mov	r1, r6
 800db7a:	4628      	mov	r0, r5
 800db7c:	47b8      	blx	r7
 800db7e:	3001      	adds	r0, #1
 800db80:	f43f af45 	beq.w	800da0e <_printf_float+0xb6>
 800db84:	f04f 0900 	mov.w	r9, #0
 800db88:	f108 38ff 	add.w	r8, r8, #4294967295
 800db8c:	f104 0a1a 	add.w	sl, r4, #26
 800db90:	45c8      	cmp	r8, r9
 800db92:	dc09      	bgt.n	800dba8 <_printf_float+0x250>
 800db94:	6823      	ldr	r3, [r4, #0]
 800db96:	079b      	lsls	r3, r3, #30
 800db98:	f100 8103 	bmi.w	800dda2 <_printf_float+0x44a>
 800db9c:	68e0      	ldr	r0, [r4, #12]
 800db9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dba0:	4298      	cmp	r0, r3
 800dba2:	bfb8      	it	lt
 800dba4:	4618      	movlt	r0, r3
 800dba6:	e734      	b.n	800da12 <_printf_float+0xba>
 800dba8:	2301      	movs	r3, #1
 800dbaa:	4652      	mov	r2, sl
 800dbac:	4631      	mov	r1, r6
 800dbae:	4628      	mov	r0, r5
 800dbb0:	47b8      	blx	r7
 800dbb2:	3001      	adds	r0, #1
 800dbb4:	f43f af2b 	beq.w	800da0e <_printf_float+0xb6>
 800dbb8:	f109 0901 	add.w	r9, r9, #1
 800dbbc:	e7e8      	b.n	800db90 <_printf_float+0x238>
 800dbbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	dc39      	bgt.n	800dc38 <_printf_float+0x2e0>
 800dbc4:	4a1b      	ldr	r2, [pc, #108]	@ (800dc34 <_printf_float+0x2dc>)
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	4631      	mov	r1, r6
 800dbca:	4628      	mov	r0, r5
 800dbcc:	47b8      	blx	r7
 800dbce:	3001      	adds	r0, #1
 800dbd0:	f43f af1d 	beq.w	800da0e <_printf_float+0xb6>
 800dbd4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dbd8:	ea59 0303 	orrs.w	r3, r9, r3
 800dbdc:	d102      	bne.n	800dbe4 <_printf_float+0x28c>
 800dbde:	6823      	ldr	r3, [r4, #0]
 800dbe0:	07d9      	lsls	r1, r3, #31
 800dbe2:	d5d7      	bpl.n	800db94 <_printf_float+0x23c>
 800dbe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dbe8:	4631      	mov	r1, r6
 800dbea:	4628      	mov	r0, r5
 800dbec:	47b8      	blx	r7
 800dbee:	3001      	adds	r0, #1
 800dbf0:	f43f af0d 	beq.w	800da0e <_printf_float+0xb6>
 800dbf4:	f04f 0a00 	mov.w	sl, #0
 800dbf8:	f104 0b1a 	add.w	fp, r4, #26
 800dbfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbfe:	425b      	negs	r3, r3
 800dc00:	4553      	cmp	r3, sl
 800dc02:	dc01      	bgt.n	800dc08 <_printf_float+0x2b0>
 800dc04:	464b      	mov	r3, r9
 800dc06:	e793      	b.n	800db30 <_printf_float+0x1d8>
 800dc08:	2301      	movs	r3, #1
 800dc0a:	465a      	mov	r2, fp
 800dc0c:	4631      	mov	r1, r6
 800dc0e:	4628      	mov	r0, r5
 800dc10:	47b8      	blx	r7
 800dc12:	3001      	adds	r0, #1
 800dc14:	f43f aefb 	beq.w	800da0e <_printf_float+0xb6>
 800dc18:	f10a 0a01 	add.w	sl, sl, #1
 800dc1c:	e7ee      	b.n	800dbfc <_printf_float+0x2a4>
 800dc1e:	bf00      	nop
 800dc20:	7fefffff 	.word	0x7fefffff
 800dc24:	08012758 	.word	0x08012758
 800dc28:	0801275c 	.word	0x0801275c
 800dc2c:	08012760 	.word	0x08012760
 800dc30:	08012764 	.word	0x08012764
 800dc34:	08012768 	.word	0x08012768
 800dc38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dc3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dc3e:	4553      	cmp	r3, sl
 800dc40:	bfa8      	it	ge
 800dc42:	4653      	movge	r3, sl
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	4699      	mov	r9, r3
 800dc48:	dc36      	bgt.n	800dcb8 <_printf_float+0x360>
 800dc4a:	f04f 0b00 	mov.w	fp, #0
 800dc4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc52:	f104 021a 	add.w	r2, r4, #26
 800dc56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dc58:	9306      	str	r3, [sp, #24]
 800dc5a:	eba3 0309 	sub.w	r3, r3, r9
 800dc5e:	455b      	cmp	r3, fp
 800dc60:	dc31      	bgt.n	800dcc6 <_printf_float+0x36e>
 800dc62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc64:	459a      	cmp	sl, r3
 800dc66:	dc3a      	bgt.n	800dcde <_printf_float+0x386>
 800dc68:	6823      	ldr	r3, [r4, #0]
 800dc6a:	07da      	lsls	r2, r3, #31
 800dc6c:	d437      	bmi.n	800dcde <_printf_float+0x386>
 800dc6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc70:	ebaa 0903 	sub.w	r9, sl, r3
 800dc74:	9b06      	ldr	r3, [sp, #24]
 800dc76:	ebaa 0303 	sub.w	r3, sl, r3
 800dc7a:	4599      	cmp	r9, r3
 800dc7c:	bfa8      	it	ge
 800dc7e:	4699      	movge	r9, r3
 800dc80:	f1b9 0f00 	cmp.w	r9, #0
 800dc84:	dc33      	bgt.n	800dcee <_printf_float+0x396>
 800dc86:	f04f 0800 	mov.w	r8, #0
 800dc8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc8e:	f104 0b1a 	add.w	fp, r4, #26
 800dc92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc94:	ebaa 0303 	sub.w	r3, sl, r3
 800dc98:	eba3 0309 	sub.w	r3, r3, r9
 800dc9c:	4543      	cmp	r3, r8
 800dc9e:	f77f af79 	ble.w	800db94 <_printf_float+0x23c>
 800dca2:	2301      	movs	r3, #1
 800dca4:	465a      	mov	r2, fp
 800dca6:	4631      	mov	r1, r6
 800dca8:	4628      	mov	r0, r5
 800dcaa:	47b8      	blx	r7
 800dcac:	3001      	adds	r0, #1
 800dcae:	f43f aeae 	beq.w	800da0e <_printf_float+0xb6>
 800dcb2:	f108 0801 	add.w	r8, r8, #1
 800dcb6:	e7ec      	b.n	800dc92 <_printf_float+0x33a>
 800dcb8:	4642      	mov	r2, r8
 800dcba:	4631      	mov	r1, r6
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	47b8      	blx	r7
 800dcc0:	3001      	adds	r0, #1
 800dcc2:	d1c2      	bne.n	800dc4a <_printf_float+0x2f2>
 800dcc4:	e6a3      	b.n	800da0e <_printf_float+0xb6>
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	4631      	mov	r1, r6
 800dcca:	4628      	mov	r0, r5
 800dccc:	9206      	str	r2, [sp, #24]
 800dcce:	47b8      	blx	r7
 800dcd0:	3001      	adds	r0, #1
 800dcd2:	f43f ae9c 	beq.w	800da0e <_printf_float+0xb6>
 800dcd6:	9a06      	ldr	r2, [sp, #24]
 800dcd8:	f10b 0b01 	add.w	fp, fp, #1
 800dcdc:	e7bb      	b.n	800dc56 <_printf_float+0x2fe>
 800dcde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dce2:	4631      	mov	r1, r6
 800dce4:	4628      	mov	r0, r5
 800dce6:	47b8      	blx	r7
 800dce8:	3001      	adds	r0, #1
 800dcea:	d1c0      	bne.n	800dc6e <_printf_float+0x316>
 800dcec:	e68f      	b.n	800da0e <_printf_float+0xb6>
 800dcee:	9a06      	ldr	r2, [sp, #24]
 800dcf0:	464b      	mov	r3, r9
 800dcf2:	4442      	add	r2, r8
 800dcf4:	4631      	mov	r1, r6
 800dcf6:	4628      	mov	r0, r5
 800dcf8:	47b8      	blx	r7
 800dcfa:	3001      	adds	r0, #1
 800dcfc:	d1c3      	bne.n	800dc86 <_printf_float+0x32e>
 800dcfe:	e686      	b.n	800da0e <_printf_float+0xb6>
 800dd00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dd04:	f1ba 0f01 	cmp.w	sl, #1
 800dd08:	dc01      	bgt.n	800dd0e <_printf_float+0x3b6>
 800dd0a:	07db      	lsls	r3, r3, #31
 800dd0c:	d536      	bpl.n	800dd7c <_printf_float+0x424>
 800dd0e:	2301      	movs	r3, #1
 800dd10:	4642      	mov	r2, r8
 800dd12:	4631      	mov	r1, r6
 800dd14:	4628      	mov	r0, r5
 800dd16:	47b8      	blx	r7
 800dd18:	3001      	adds	r0, #1
 800dd1a:	f43f ae78 	beq.w	800da0e <_printf_float+0xb6>
 800dd1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd22:	4631      	mov	r1, r6
 800dd24:	4628      	mov	r0, r5
 800dd26:	47b8      	blx	r7
 800dd28:	3001      	adds	r0, #1
 800dd2a:	f43f ae70 	beq.w	800da0e <_printf_float+0xb6>
 800dd2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dd32:	2200      	movs	r2, #0
 800dd34:	2300      	movs	r3, #0
 800dd36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd3a:	f7f2 fee5 	bl	8000b08 <__aeabi_dcmpeq>
 800dd3e:	b9c0      	cbnz	r0, 800dd72 <_printf_float+0x41a>
 800dd40:	4653      	mov	r3, sl
 800dd42:	f108 0201 	add.w	r2, r8, #1
 800dd46:	4631      	mov	r1, r6
 800dd48:	4628      	mov	r0, r5
 800dd4a:	47b8      	blx	r7
 800dd4c:	3001      	adds	r0, #1
 800dd4e:	d10c      	bne.n	800dd6a <_printf_float+0x412>
 800dd50:	e65d      	b.n	800da0e <_printf_float+0xb6>
 800dd52:	2301      	movs	r3, #1
 800dd54:	465a      	mov	r2, fp
 800dd56:	4631      	mov	r1, r6
 800dd58:	4628      	mov	r0, r5
 800dd5a:	47b8      	blx	r7
 800dd5c:	3001      	adds	r0, #1
 800dd5e:	f43f ae56 	beq.w	800da0e <_printf_float+0xb6>
 800dd62:	f108 0801 	add.w	r8, r8, #1
 800dd66:	45d0      	cmp	r8, sl
 800dd68:	dbf3      	blt.n	800dd52 <_printf_float+0x3fa>
 800dd6a:	464b      	mov	r3, r9
 800dd6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800dd70:	e6df      	b.n	800db32 <_printf_float+0x1da>
 800dd72:	f04f 0800 	mov.w	r8, #0
 800dd76:	f104 0b1a 	add.w	fp, r4, #26
 800dd7a:	e7f4      	b.n	800dd66 <_printf_float+0x40e>
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	4642      	mov	r2, r8
 800dd80:	e7e1      	b.n	800dd46 <_printf_float+0x3ee>
 800dd82:	2301      	movs	r3, #1
 800dd84:	464a      	mov	r2, r9
 800dd86:	4631      	mov	r1, r6
 800dd88:	4628      	mov	r0, r5
 800dd8a:	47b8      	blx	r7
 800dd8c:	3001      	adds	r0, #1
 800dd8e:	f43f ae3e 	beq.w	800da0e <_printf_float+0xb6>
 800dd92:	f108 0801 	add.w	r8, r8, #1
 800dd96:	68e3      	ldr	r3, [r4, #12]
 800dd98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dd9a:	1a5b      	subs	r3, r3, r1
 800dd9c:	4543      	cmp	r3, r8
 800dd9e:	dcf0      	bgt.n	800dd82 <_printf_float+0x42a>
 800dda0:	e6fc      	b.n	800db9c <_printf_float+0x244>
 800dda2:	f04f 0800 	mov.w	r8, #0
 800dda6:	f104 0919 	add.w	r9, r4, #25
 800ddaa:	e7f4      	b.n	800dd96 <_printf_float+0x43e>

0800ddac <_printf_common>:
 800ddac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddb0:	4616      	mov	r6, r2
 800ddb2:	4698      	mov	r8, r3
 800ddb4:	688a      	ldr	r2, [r1, #8]
 800ddb6:	690b      	ldr	r3, [r1, #16]
 800ddb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	bfb8      	it	lt
 800ddc0:	4613      	movlt	r3, r2
 800ddc2:	6033      	str	r3, [r6, #0]
 800ddc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ddc8:	4607      	mov	r7, r0
 800ddca:	460c      	mov	r4, r1
 800ddcc:	b10a      	cbz	r2, 800ddd2 <_printf_common+0x26>
 800ddce:	3301      	adds	r3, #1
 800ddd0:	6033      	str	r3, [r6, #0]
 800ddd2:	6823      	ldr	r3, [r4, #0]
 800ddd4:	0699      	lsls	r1, r3, #26
 800ddd6:	bf42      	ittt	mi
 800ddd8:	6833      	ldrmi	r3, [r6, #0]
 800ddda:	3302      	addmi	r3, #2
 800dddc:	6033      	strmi	r3, [r6, #0]
 800ddde:	6825      	ldr	r5, [r4, #0]
 800dde0:	f015 0506 	ands.w	r5, r5, #6
 800dde4:	d106      	bne.n	800ddf4 <_printf_common+0x48>
 800dde6:	f104 0a19 	add.w	sl, r4, #25
 800ddea:	68e3      	ldr	r3, [r4, #12]
 800ddec:	6832      	ldr	r2, [r6, #0]
 800ddee:	1a9b      	subs	r3, r3, r2
 800ddf0:	42ab      	cmp	r3, r5
 800ddf2:	dc26      	bgt.n	800de42 <_printf_common+0x96>
 800ddf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ddf8:	6822      	ldr	r2, [r4, #0]
 800ddfa:	3b00      	subs	r3, #0
 800ddfc:	bf18      	it	ne
 800ddfe:	2301      	movne	r3, #1
 800de00:	0692      	lsls	r2, r2, #26
 800de02:	d42b      	bmi.n	800de5c <_printf_common+0xb0>
 800de04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800de08:	4641      	mov	r1, r8
 800de0a:	4638      	mov	r0, r7
 800de0c:	47c8      	blx	r9
 800de0e:	3001      	adds	r0, #1
 800de10:	d01e      	beq.n	800de50 <_printf_common+0xa4>
 800de12:	6823      	ldr	r3, [r4, #0]
 800de14:	6922      	ldr	r2, [r4, #16]
 800de16:	f003 0306 	and.w	r3, r3, #6
 800de1a:	2b04      	cmp	r3, #4
 800de1c:	bf02      	ittt	eq
 800de1e:	68e5      	ldreq	r5, [r4, #12]
 800de20:	6833      	ldreq	r3, [r6, #0]
 800de22:	1aed      	subeq	r5, r5, r3
 800de24:	68a3      	ldr	r3, [r4, #8]
 800de26:	bf0c      	ite	eq
 800de28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de2c:	2500      	movne	r5, #0
 800de2e:	4293      	cmp	r3, r2
 800de30:	bfc4      	itt	gt
 800de32:	1a9b      	subgt	r3, r3, r2
 800de34:	18ed      	addgt	r5, r5, r3
 800de36:	2600      	movs	r6, #0
 800de38:	341a      	adds	r4, #26
 800de3a:	42b5      	cmp	r5, r6
 800de3c:	d11a      	bne.n	800de74 <_printf_common+0xc8>
 800de3e:	2000      	movs	r0, #0
 800de40:	e008      	b.n	800de54 <_printf_common+0xa8>
 800de42:	2301      	movs	r3, #1
 800de44:	4652      	mov	r2, sl
 800de46:	4641      	mov	r1, r8
 800de48:	4638      	mov	r0, r7
 800de4a:	47c8      	blx	r9
 800de4c:	3001      	adds	r0, #1
 800de4e:	d103      	bne.n	800de58 <_printf_common+0xac>
 800de50:	f04f 30ff 	mov.w	r0, #4294967295
 800de54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de58:	3501      	adds	r5, #1
 800de5a:	e7c6      	b.n	800ddea <_printf_common+0x3e>
 800de5c:	18e1      	adds	r1, r4, r3
 800de5e:	1c5a      	adds	r2, r3, #1
 800de60:	2030      	movs	r0, #48	@ 0x30
 800de62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800de66:	4422      	add	r2, r4
 800de68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800de6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800de70:	3302      	adds	r3, #2
 800de72:	e7c7      	b.n	800de04 <_printf_common+0x58>
 800de74:	2301      	movs	r3, #1
 800de76:	4622      	mov	r2, r4
 800de78:	4641      	mov	r1, r8
 800de7a:	4638      	mov	r0, r7
 800de7c:	47c8      	blx	r9
 800de7e:	3001      	adds	r0, #1
 800de80:	d0e6      	beq.n	800de50 <_printf_common+0xa4>
 800de82:	3601      	adds	r6, #1
 800de84:	e7d9      	b.n	800de3a <_printf_common+0x8e>
	...

0800de88 <_printf_i>:
 800de88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de8c:	7e0f      	ldrb	r7, [r1, #24]
 800de8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800de90:	2f78      	cmp	r7, #120	@ 0x78
 800de92:	4691      	mov	r9, r2
 800de94:	4680      	mov	r8, r0
 800de96:	460c      	mov	r4, r1
 800de98:	469a      	mov	sl, r3
 800de9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800de9e:	d807      	bhi.n	800deb0 <_printf_i+0x28>
 800dea0:	2f62      	cmp	r7, #98	@ 0x62
 800dea2:	d80a      	bhi.n	800deba <_printf_i+0x32>
 800dea4:	2f00      	cmp	r7, #0
 800dea6:	f000 80d2 	beq.w	800e04e <_printf_i+0x1c6>
 800deaa:	2f58      	cmp	r7, #88	@ 0x58
 800deac:	f000 80b9 	beq.w	800e022 <_printf_i+0x19a>
 800deb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800deb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800deb8:	e03a      	b.n	800df30 <_printf_i+0xa8>
 800deba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800debe:	2b15      	cmp	r3, #21
 800dec0:	d8f6      	bhi.n	800deb0 <_printf_i+0x28>
 800dec2:	a101      	add	r1, pc, #4	@ (adr r1, 800dec8 <_printf_i+0x40>)
 800dec4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dec8:	0800df21 	.word	0x0800df21
 800decc:	0800df35 	.word	0x0800df35
 800ded0:	0800deb1 	.word	0x0800deb1
 800ded4:	0800deb1 	.word	0x0800deb1
 800ded8:	0800deb1 	.word	0x0800deb1
 800dedc:	0800deb1 	.word	0x0800deb1
 800dee0:	0800df35 	.word	0x0800df35
 800dee4:	0800deb1 	.word	0x0800deb1
 800dee8:	0800deb1 	.word	0x0800deb1
 800deec:	0800deb1 	.word	0x0800deb1
 800def0:	0800deb1 	.word	0x0800deb1
 800def4:	0800e035 	.word	0x0800e035
 800def8:	0800df5f 	.word	0x0800df5f
 800defc:	0800dfef 	.word	0x0800dfef
 800df00:	0800deb1 	.word	0x0800deb1
 800df04:	0800deb1 	.word	0x0800deb1
 800df08:	0800e057 	.word	0x0800e057
 800df0c:	0800deb1 	.word	0x0800deb1
 800df10:	0800df5f 	.word	0x0800df5f
 800df14:	0800deb1 	.word	0x0800deb1
 800df18:	0800deb1 	.word	0x0800deb1
 800df1c:	0800dff7 	.word	0x0800dff7
 800df20:	6833      	ldr	r3, [r6, #0]
 800df22:	1d1a      	adds	r2, r3, #4
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	6032      	str	r2, [r6, #0]
 800df28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800df2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800df30:	2301      	movs	r3, #1
 800df32:	e09d      	b.n	800e070 <_printf_i+0x1e8>
 800df34:	6833      	ldr	r3, [r6, #0]
 800df36:	6820      	ldr	r0, [r4, #0]
 800df38:	1d19      	adds	r1, r3, #4
 800df3a:	6031      	str	r1, [r6, #0]
 800df3c:	0606      	lsls	r6, r0, #24
 800df3e:	d501      	bpl.n	800df44 <_printf_i+0xbc>
 800df40:	681d      	ldr	r5, [r3, #0]
 800df42:	e003      	b.n	800df4c <_printf_i+0xc4>
 800df44:	0645      	lsls	r5, r0, #25
 800df46:	d5fb      	bpl.n	800df40 <_printf_i+0xb8>
 800df48:	f9b3 5000 	ldrsh.w	r5, [r3]
 800df4c:	2d00      	cmp	r5, #0
 800df4e:	da03      	bge.n	800df58 <_printf_i+0xd0>
 800df50:	232d      	movs	r3, #45	@ 0x2d
 800df52:	426d      	negs	r5, r5
 800df54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df58:	4859      	ldr	r0, [pc, #356]	@ (800e0c0 <_printf_i+0x238>)
 800df5a:	230a      	movs	r3, #10
 800df5c:	e011      	b.n	800df82 <_printf_i+0xfa>
 800df5e:	6821      	ldr	r1, [r4, #0]
 800df60:	6833      	ldr	r3, [r6, #0]
 800df62:	0608      	lsls	r0, r1, #24
 800df64:	f853 5b04 	ldr.w	r5, [r3], #4
 800df68:	d402      	bmi.n	800df70 <_printf_i+0xe8>
 800df6a:	0649      	lsls	r1, r1, #25
 800df6c:	bf48      	it	mi
 800df6e:	b2ad      	uxthmi	r5, r5
 800df70:	2f6f      	cmp	r7, #111	@ 0x6f
 800df72:	4853      	ldr	r0, [pc, #332]	@ (800e0c0 <_printf_i+0x238>)
 800df74:	6033      	str	r3, [r6, #0]
 800df76:	bf14      	ite	ne
 800df78:	230a      	movne	r3, #10
 800df7a:	2308      	moveq	r3, #8
 800df7c:	2100      	movs	r1, #0
 800df7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800df82:	6866      	ldr	r6, [r4, #4]
 800df84:	60a6      	str	r6, [r4, #8]
 800df86:	2e00      	cmp	r6, #0
 800df88:	bfa2      	ittt	ge
 800df8a:	6821      	ldrge	r1, [r4, #0]
 800df8c:	f021 0104 	bicge.w	r1, r1, #4
 800df90:	6021      	strge	r1, [r4, #0]
 800df92:	b90d      	cbnz	r5, 800df98 <_printf_i+0x110>
 800df94:	2e00      	cmp	r6, #0
 800df96:	d04b      	beq.n	800e030 <_printf_i+0x1a8>
 800df98:	4616      	mov	r6, r2
 800df9a:	fbb5 f1f3 	udiv	r1, r5, r3
 800df9e:	fb03 5711 	mls	r7, r3, r1, r5
 800dfa2:	5dc7      	ldrb	r7, [r0, r7]
 800dfa4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dfa8:	462f      	mov	r7, r5
 800dfaa:	42bb      	cmp	r3, r7
 800dfac:	460d      	mov	r5, r1
 800dfae:	d9f4      	bls.n	800df9a <_printf_i+0x112>
 800dfb0:	2b08      	cmp	r3, #8
 800dfb2:	d10b      	bne.n	800dfcc <_printf_i+0x144>
 800dfb4:	6823      	ldr	r3, [r4, #0]
 800dfb6:	07df      	lsls	r7, r3, #31
 800dfb8:	d508      	bpl.n	800dfcc <_printf_i+0x144>
 800dfba:	6923      	ldr	r3, [r4, #16]
 800dfbc:	6861      	ldr	r1, [r4, #4]
 800dfbe:	4299      	cmp	r1, r3
 800dfc0:	bfde      	ittt	le
 800dfc2:	2330      	movle	r3, #48	@ 0x30
 800dfc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dfc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dfcc:	1b92      	subs	r2, r2, r6
 800dfce:	6122      	str	r2, [r4, #16]
 800dfd0:	f8cd a000 	str.w	sl, [sp]
 800dfd4:	464b      	mov	r3, r9
 800dfd6:	aa03      	add	r2, sp, #12
 800dfd8:	4621      	mov	r1, r4
 800dfda:	4640      	mov	r0, r8
 800dfdc:	f7ff fee6 	bl	800ddac <_printf_common>
 800dfe0:	3001      	adds	r0, #1
 800dfe2:	d14a      	bne.n	800e07a <_printf_i+0x1f2>
 800dfe4:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe8:	b004      	add	sp, #16
 800dfea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfee:	6823      	ldr	r3, [r4, #0]
 800dff0:	f043 0320 	orr.w	r3, r3, #32
 800dff4:	6023      	str	r3, [r4, #0]
 800dff6:	4833      	ldr	r0, [pc, #204]	@ (800e0c4 <_printf_i+0x23c>)
 800dff8:	2778      	movs	r7, #120	@ 0x78
 800dffa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dffe:	6823      	ldr	r3, [r4, #0]
 800e000:	6831      	ldr	r1, [r6, #0]
 800e002:	061f      	lsls	r7, r3, #24
 800e004:	f851 5b04 	ldr.w	r5, [r1], #4
 800e008:	d402      	bmi.n	800e010 <_printf_i+0x188>
 800e00a:	065f      	lsls	r7, r3, #25
 800e00c:	bf48      	it	mi
 800e00e:	b2ad      	uxthmi	r5, r5
 800e010:	6031      	str	r1, [r6, #0]
 800e012:	07d9      	lsls	r1, r3, #31
 800e014:	bf44      	itt	mi
 800e016:	f043 0320 	orrmi.w	r3, r3, #32
 800e01a:	6023      	strmi	r3, [r4, #0]
 800e01c:	b11d      	cbz	r5, 800e026 <_printf_i+0x19e>
 800e01e:	2310      	movs	r3, #16
 800e020:	e7ac      	b.n	800df7c <_printf_i+0xf4>
 800e022:	4827      	ldr	r0, [pc, #156]	@ (800e0c0 <_printf_i+0x238>)
 800e024:	e7e9      	b.n	800dffa <_printf_i+0x172>
 800e026:	6823      	ldr	r3, [r4, #0]
 800e028:	f023 0320 	bic.w	r3, r3, #32
 800e02c:	6023      	str	r3, [r4, #0]
 800e02e:	e7f6      	b.n	800e01e <_printf_i+0x196>
 800e030:	4616      	mov	r6, r2
 800e032:	e7bd      	b.n	800dfb0 <_printf_i+0x128>
 800e034:	6833      	ldr	r3, [r6, #0]
 800e036:	6825      	ldr	r5, [r4, #0]
 800e038:	6961      	ldr	r1, [r4, #20]
 800e03a:	1d18      	adds	r0, r3, #4
 800e03c:	6030      	str	r0, [r6, #0]
 800e03e:	062e      	lsls	r6, r5, #24
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	d501      	bpl.n	800e048 <_printf_i+0x1c0>
 800e044:	6019      	str	r1, [r3, #0]
 800e046:	e002      	b.n	800e04e <_printf_i+0x1c6>
 800e048:	0668      	lsls	r0, r5, #25
 800e04a:	d5fb      	bpl.n	800e044 <_printf_i+0x1bc>
 800e04c:	8019      	strh	r1, [r3, #0]
 800e04e:	2300      	movs	r3, #0
 800e050:	6123      	str	r3, [r4, #16]
 800e052:	4616      	mov	r6, r2
 800e054:	e7bc      	b.n	800dfd0 <_printf_i+0x148>
 800e056:	6833      	ldr	r3, [r6, #0]
 800e058:	1d1a      	adds	r2, r3, #4
 800e05a:	6032      	str	r2, [r6, #0]
 800e05c:	681e      	ldr	r6, [r3, #0]
 800e05e:	6862      	ldr	r2, [r4, #4]
 800e060:	2100      	movs	r1, #0
 800e062:	4630      	mov	r0, r6
 800e064:	f7f2 f8d4 	bl	8000210 <memchr>
 800e068:	b108      	cbz	r0, 800e06e <_printf_i+0x1e6>
 800e06a:	1b80      	subs	r0, r0, r6
 800e06c:	6060      	str	r0, [r4, #4]
 800e06e:	6863      	ldr	r3, [r4, #4]
 800e070:	6123      	str	r3, [r4, #16]
 800e072:	2300      	movs	r3, #0
 800e074:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e078:	e7aa      	b.n	800dfd0 <_printf_i+0x148>
 800e07a:	6923      	ldr	r3, [r4, #16]
 800e07c:	4632      	mov	r2, r6
 800e07e:	4649      	mov	r1, r9
 800e080:	4640      	mov	r0, r8
 800e082:	47d0      	blx	sl
 800e084:	3001      	adds	r0, #1
 800e086:	d0ad      	beq.n	800dfe4 <_printf_i+0x15c>
 800e088:	6823      	ldr	r3, [r4, #0]
 800e08a:	079b      	lsls	r3, r3, #30
 800e08c:	d413      	bmi.n	800e0b6 <_printf_i+0x22e>
 800e08e:	68e0      	ldr	r0, [r4, #12]
 800e090:	9b03      	ldr	r3, [sp, #12]
 800e092:	4298      	cmp	r0, r3
 800e094:	bfb8      	it	lt
 800e096:	4618      	movlt	r0, r3
 800e098:	e7a6      	b.n	800dfe8 <_printf_i+0x160>
 800e09a:	2301      	movs	r3, #1
 800e09c:	4632      	mov	r2, r6
 800e09e:	4649      	mov	r1, r9
 800e0a0:	4640      	mov	r0, r8
 800e0a2:	47d0      	blx	sl
 800e0a4:	3001      	adds	r0, #1
 800e0a6:	d09d      	beq.n	800dfe4 <_printf_i+0x15c>
 800e0a8:	3501      	adds	r5, #1
 800e0aa:	68e3      	ldr	r3, [r4, #12]
 800e0ac:	9903      	ldr	r1, [sp, #12]
 800e0ae:	1a5b      	subs	r3, r3, r1
 800e0b0:	42ab      	cmp	r3, r5
 800e0b2:	dcf2      	bgt.n	800e09a <_printf_i+0x212>
 800e0b4:	e7eb      	b.n	800e08e <_printf_i+0x206>
 800e0b6:	2500      	movs	r5, #0
 800e0b8:	f104 0619 	add.w	r6, r4, #25
 800e0bc:	e7f5      	b.n	800e0aa <_printf_i+0x222>
 800e0be:	bf00      	nop
 800e0c0:	0801276a 	.word	0x0801276a
 800e0c4:	0801277b 	.word	0x0801277b

0800e0c8 <std>:
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	b510      	push	{r4, lr}
 800e0cc:	4604      	mov	r4, r0
 800e0ce:	e9c0 3300 	strd	r3, r3, [r0]
 800e0d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e0d6:	6083      	str	r3, [r0, #8]
 800e0d8:	8181      	strh	r1, [r0, #12]
 800e0da:	6643      	str	r3, [r0, #100]	@ 0x64
 800e0dc:	81c2      	strh	r2, [r0, #14]
 800e0de:	6183      	str	r3, [r0, #24]
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	2208      	movs	r2, #8
 800e0e4:	305c      	adds	r0, #92	@ 0x5c
 800e0e6:	f000 f904 	bl	800e2f2 <memset>
 800e0ea:	4b0d      	ldr	r3, [pc, #52]	@ (800e120 <std+0x58>)
 800e0ec:	6263      	str	r3, [r4, #36]	@ 0x24
 800e0ee:	4b0d      	ldr	r3, [pc, #52]	@ (800e124 <std+0x5c>)
 800e0f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e0f2:	4b0d      	ldr	r3, [pc, #52]	@ (800e128 <std+0x60>)
 800e0f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e0f6:	4b0d      	ldr	r3, [pc, #52]	@ (800e12c <std+0x64>)
 800e0f8:	6323      	str	r3, [r4, #48]	@ 0x30
 800e0fa:	4b0d      	ldr	r3, [pc, #52]	@ (800e130 <std+0x68>)
 800e0fc:	6224      	str	r4, [r4, #32]
 800e0fe:	429c      	cmp	r4, r3
 800e100:	d006      	beq.n	800e110 <std+0x48>
 800e102:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e106:	4294      	cmp	r4, r2
 800e108:	d002      	beq.n	800e110 <std+0x48>
 800e10a:	33d0      	adds	r3, #208	@ 0xd0
 800e10c:	429c      	cmp	r4, r3
 800e10e:	d105      	bne.n	800e11c <std+0x54>
 800e110:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e118:	f000 b978 	b.w	800e40c <__retarget_lock_init_recursive>
 800e11c:	bd10      	pop	{r4, pc}
 800e11e:	bf00      	nop
 800e120:	0800e24d 	.word	0x0800e24d
 800e124:	0800e26f 	.word	0x0800e26f
 800e128:	0800e2a7 	.word	0x0800e2a7
 800e12c:	0800e2cb 	.word	0x0800e2cb
 800e130:	20000920 	.word	0x20000920

0800e134 <stdio_exit_handler>:
 800e134:	4a02      	ldr	r2, [pc, #8]	@ (800e140 <stdio_exit_handler+0xc>)
 800e136:	4903      	ldr	r1, [pc, #12]	@ (800e144 <stdio_exit_handler+0x10>)
 800e138:	4803      	ldr	r0, [pc, #12]	@ (800e148 <stdio_exit_handler+0x14>)
 800e13a:	f000 b869 	b.w	800e210 <_fwalk_sglue>
 800e13e:	bf00      	nop
 800e140:	2000004c 	.word	0x2000004c
 800e144:	0800f979 	.word	0x0800f979
 800e148:	2000005c 	.word	0x2000005c

0800e14c <cleanup_stdio>:
 800e14c:	6841      	ldr	r1, [r0, #4]
 800e14e:	4b0c      	ldr	r3, [pc, #48]	@ (800e180 <cleanup_stdio+0x34>)
 800e150:	4299      	cmp	r1, r3
 800e152:	b510      	push	{r4, lr}
 800e154:	4604      	mov	r4, r0
 800e156:	d001      	beq.n	800e15c <cleanup_stdio+0x10>
 800e158:	f001 fc0e 	bl	800f978 <_fflush_r>
 800e15c:	68a1      	ldr	r1, [r4, #8]
 800e15e:	4b09      	ldr	r3, [pc, #36]	@ (800e184 <cleanup_stdio+0x38>)
 800e160:	4299      	cmp	r1, r3
 800e162:	d002      	beq.n	800e16a <cleanup_stdio+0x1e>
 800e164:	4620      	mov	r0, r4
 800e166:	f001 fc07 	bl	800f978 <_fflush_r>
 800e16a:	68e1      	ldr	r1, [r4, #12]
 800e16c:	4b06      	ldr	r3, [pc, #24]	@ (800e188 <cleanup_stdio+0x3c>)
 800e16e:	4299      	cmp	r1, r3
 800e170:	d004      	beq.n	800e17c <cleanup_stdio+0x30>
 800e172:	4620      	mov	r0, r4
 800e174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e178:	f001 bbfe 	b.w	800f978 <_fflush_r>
 800e17c:	bd10      	pop	{r4, pc}
 800e17e:	bf00      	nop
 800e180:	20000920 	.word	0x20000920
 800e184:	20000988 	.word	0x20000988
 800e188:	200009f0 	.word	0x200009f0

0800e18c <global_stdio_init.part.0>:
 800e18c:	b510      	push	{r4, lr}
 800e18e:	4b0b      	ldr	r3, [pc, #44]	@ (800e1bc <global_stdio_init.part.0+0x30>)
 800e190:	4c0b      	ldr	r4, [pc, #44]	@ (800e1c0 <global_stdio_init.part.0+0x34>)
 800e192:	4a0c      	ldr	r2, [pc, #48]	@ (800e1c4 <global_stdio_init.part.0+0x38>)
 800e194:	601a      	str	r2, [r3, #0]
 800e196:	4620      	mov	r0, r4
 800e198:	2200      	movs	r2, #0
 800e19a:	2104      	movs	r1, #4
 800e19c:	f7ff ff94 	bl	800e0c8 <std>
 800e1a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e1a4:	2201      	movs	r2, #1
 800e1a6:	2109      	movs	r1, #9
 800e1a8:	f7ff ff8e 	bl	800e0c8 <std>
 800e1ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e1b0:	2202      	movs	r2, #2
 800e1b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1b6:	2112      	movs	r1, #18
 800e1b8:	f7ff bf86 	b.w	800e0c8 <std>
 800e1bc:	20000a58 	.word	0x20000a58
 800e1c0:	20000920 	.word	0x20000920
 800e1c4:	0800e135 	.word	0x0800e135

0800e1c8 <__sfp_lock_acquire>:
 800e1c8:	4801      	ldr	r0, [pc, #4]	@ (800e1d0 <__sfp_lock_acquire+0x8>)
 800e1ca:	f000 b920 	b.w	800e40e <__retarget_lock_acquire_recursive>
 800e1ce:	bf00      	nop
 800e1d0:	20000a61 	.word	0x20000a61

0800e1d4 <__sfp_lock_release>:
 800e1d4:	4801      	ldr	r0, [pc, #4]	@ (800e1dc <__sfp_lock_release+0x8>)
 800e1d6:	f000 b91b 	b.w	800e410 <__retarget_lock_release_recursive>
 800e1da:	bf00      	nop
 800e1dc:	20000a61 	.word	0x20000a61

0800e1e0 <__sinit>:
 800e1e0:	b510      	push	{r4, lr}
 800e1e2:	4604      	mov	r4, r0
 800e1e4:	f7ff fff0 	bl	800e1c8 <__sfp_lock_acquire>
 800e1e8:	6a23      	ldr	r3, [r4, #32]
 800e1ea:	b11b      	cbz	r3, 800e1f4 <__sinit+0x14>
 800e1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1f0:	f7ff bff0 	b.w	800e1d4 <__sfp_lock_release>
 800e1f4:	4b04      	ldr	r3, [pc, #16]	@ (800e208 <__sinit+0x28>)
 800e1f6:	6223      	str	r3, [r4, #32]
 800e1f8:	4b04      	ldr	r3, [pc, #16]	@ (800e20c <__sinit+0x2c>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d1f5      	bne.n	800e1ec <__sinit+0xc>
 800e200:	f7ff ffc4 	bl	800e18c <global_stdio_init.part.0>
 800e204:	e7f2      	b.n	800e1ec <__sinit+0xc>
 800e206:	bf00      	nop
 800e208:	0800e14d 	.word	0x0800e14d
 800e20c:	20000a58 	.word	0x20000a58

0800e210 <_fwalk_sglue>:
 800e210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e214:	4607      	mov	r7, r0
 800e216:	4688      	mov	r8, r1
 800e218:	4614      	mov	r4, r2
 800e21a:	2600      	movs	r6, #0
 800e21c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e220:	f1b9 0901 	subs.w	r9, r9, #1
 800e224:	d505      	bpl.n	800e232 <_fwalk_sglue+0x22>
 800e226:	6824      	ldr	r4, [r4, #0]
 800e228:	2c00      	cmp	r4, #0
 800e22a:	d1f7      	bne.n	800e21c <_fwalk_sglue+0xc>
 800e22c:	4630      	mov	r0, r6
 800e22e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e232:	89ab      	ldrh	r3, [r5, #12]
 800e234:	2b01      	cmp	r3, #1
 800e236:	d907      	bls.n	800e248 <_fwalk_sglue+0x38>
 800e238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e23c:	3301      	adds	r3, #1
 800e23e:	d003      	beq.n	800e248 <_fwalk_sglue+0x38>
 800e240:	4629      	mov	r1, r5
 800e242:	4638      	mov	r0, r7
 800e244:	47c0      	blx	r8
 800e246:	4306      	orrs	r6, r0
 800e248:	3568      	adds	r5, #104	@ 0x68
 800e24a:	e7e9      	b.n	800e220 <_fwalk_sglue+0x10>

0800e24c <__sread>:
 800e24c:	b510      	push	{r4, lr}
 800e24e:	460c      	mov	r4, r1
 800e250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e254:	f000 f87c 	bl	800e350 <_read_r>
 800e258:	2800      	cmp	r0, #0
 800e25a:	bfab      	itete	ge
 800e25c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e25e:	89a3      	ldrhlt	r3, [r4, #12]
 800e260:	181b      	addge	r3, r3, r0
 800e262:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e266:	bfac      	ite	ge
 800e268:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e26a:	81a3      	strhlt	r3, [r4, #12]
 800e26c:	bd10      	pop	{r4, pc}

0800e26e <__swrite>:
 800e26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e272:	461f      	mov	r7, r3
 800e274:	898b      	ldrh	r3, [r1, #12]
 800e276:	05db      	lsls	r3, r3, #23
 800e278:	4605      	mov	r5, r0
 800e27a:	460c      	mov	r4, r1
 800e27c:	4616      	mov	r6, r2
 800e27e:	d505      	bpl.n	800e28c <__swrite+0x1e>
 800e280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e284:	2302      	movs	r3, #2
 800e286:	2200      	movs	r2, #0
 800e288:	f000 f850 	bl	800e32c <_lseek_r>
 800e28c:	89a3      	ldrh	r3, [r4, #12]
 800e28e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e292:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e296:	81a3      	strh	r3, [r4, #12]
 800e298:	4632      	mov	r2, r6
 800e29a:	463b      	mov	r3, r7
 800e29c:	4628      	mov	r0, r5
 800e29e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2a2:	f000 b877 	b.w	800e394 <_write_r>

0800e2a6 <__sseek>:
 800e2a6:	b510      	push	{r4, lr}
 800e2a8:	460c      	mov	r4, r1
 800e2aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2ae:	f000 f83d 	bl	800e32c <_lseek_r>
 800e2b2:	1c43      	adds	r3, r0, #1
 800e2b4:	89a3      	ldrh	r3, [r4, #12]
 800e2b6:	bf15      	itete	ne
 800e2b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e2ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e2be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e2c2:	81a3      	strheq	r3, [r4, #12]
 800e2c4:	bf18      	it	ne
 800e2c6:	81a3      	strhne	r3, [r4, #12]
 800e2c8:	bd10      	pop	{r4, pc}

0800e2ca <__sclose>:
 800e2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2ce:	f000 b81d 	b.w	800e30c <_close_r>

0800e2d2 <memcmp>:
 800e2d2:	b510      	push	{r4, lr}
 800e2d4:	3901      	subs	r1, #1
 800e2d6:	4402      	add	r2, r0
 800e2d8:	4290      	cmp	r0, r2
 800e2da:	d101      	bne.n	800e2e0 <memcmp+0xe>
 800e2dc:	2000      	movs	r0, #0
 800e2de:	e005      	b.n	800e2ec <memcmp+0x1a>
 800e2e0:	7803      	ldrb	r3, [r0, #0]
 800e2e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e2e6:	42a3      	cmp	r3, r4
 800e2e8:	d001      	beq.n	800e2ee <memcmp+0x1c>
 800e2ea:	1b18      	subs	r0, r3, r4
 800e2ec:	bd10      	pop	{r4, pc}
 800e2ee:	3001      	adds	r0, #1
 800e2f0:	e7f2      	b.n	800e2d8 <memcmp+0x6>

0800e2f2 <memset>:
 800e2f2:	4402      	add	r2, r0
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d100      	bne.n	800e2fc <memset+0xa>
 800e2fa:	4770      	bx	lr
 800e2fc:	f803 1b01 	strb.w	r1, [r3], #1
 800e300:	e7f9      	b.n	800e2f6 <memset+0x4>
	...

0800e304 <_localeconv_r>:
 800e304:	4800      	ldr	r0, [pc, #0]	@ (800e308 <_localeconv_r+0x4>)
 800e306:	4770      	bx	lr
 800e308:	20000198 	.word	0x20000198

0800e30c <_close_r>:
 800e30c:	b538      	push	{r3, r4, r5, lr}
 800e30e:	4d06      	ldr	r5, [pc, #24]	@ (800e328 <_close_r+0x1c>)
 800e310:	2300      	movs	r3, #0
 800e312:	4604      	mov	r4, r0
 800e314:	4608      	mov	r0, r1
 800e316:	602b      	str	r3, [r5, #0]
 800e318:	f7f9 fc60 	bl	8007bdc <_close>
 800e31c:	1c43      	adds	r3, r0, #1
 800e31e:	d102      	bne.n	800e326 <_close_r+0x1a>
 800e320:	682b      	ldr	r3, [r5, #0]
 800e322:	b103      	cbz	r3, 800e326 <_close_r+0x1a>
 800e324:	6023      	str	r3, [r4, #0]
 800e326:	bd38      	pop	{r3, r4, r5, pc}
 800e328:	20000a5c 	.word	0x20000a5c

0800e32c <_lseek_r>:
 800e32c:	b538      	push	{r3, r4, r5, lr}
 800e32e:	4d07      	ldr	r5, [pc, #28]	@ (800e34c <_lseek_r+0x20>)
 800e330:	4604      	mov	r4, r0
 800e332:	4608      	mov	r0, r1
 800e334:	4611      	mov	r1, r2
 800e336:	2200      	movs	r2, #0
 800e338:	602a      	str	r2, [r5, #0]
 800e33a:	461a      	mov	r2, r3
 800e33c:	f7f9 fc75 	bl	8007c2a <_lseek>
 800e340:	1c43      	adds	r3, r0, #1
 800e342:	d102      	bne.n	800e34a <_lseek_r+0x1e>
 800e344:	682b      	ldr	r3, [r5, #0]
 800e346:	b103      	cbz	r3, 800e34a <_lseek_r+0x1e>
 800e348:	6023      	str	r3, [r4, #0]
 800e34a:	bd38      	pop	{r3, r4, r5, pc}
 800e34c:	20000a5c 	.word	0x20000a5c

0800e350 <_read_r>:
 800e350:	b538      	push	{r3, r4, r5, lr}
 800e352:	4d07      	ldr	r5, [pc, #28]	@ (800e370 <_read_r+0x20>)
 800e354:	4604      	mov	r4, r0
 800e356:	4608      	mov	r0, r1
 800e358:	4611      	mov	r1, r2
 800e35a:	2200      	movs	r2, #0
 800e35c:	602a      	str	r2, [r5, #0]
 800e35e:	461a      	mov	r2, r3
 800e360:	f7f9 fc03 	bl	8007b6a <_read>
 800e364:	1c43      	adds	r3, r0, #1
 800e366:	d102      	bne.n	800e36e <_read_r+0x1e>
 800e368:	682b      	ldr	r3, [r5, #0]
 800e36a:	b103      	cbz	r3, 800e36e <_read_r+0x1e>
 800e36c:	6023      	str	r3, [r4, #0]
 800e36e:	bd38      	pop	{r3, r4, r5, pc}
 800e370:	20000a5c 	.word	0x20000a5c

0800e374 <_sbrk_r>:
 800e374:	b538      	push	{r3, r4, r5, lr}
 800e376:	4d06      	ldr	r5, [pc, #24]	@ (800e390 <_sbrk_r+0x1c>)
 800e378:	2300      	movs	r3, #0
 800e37a:	4604      	mov	r4, r0
 800e37c:	4608      	mov	r0, r1
 800e37e:	602b      	str	r3, [r5, #0]
 800e380:	f7f9 fc60 	bl	8007c44 <_sbrk>
 800e384:	1c43      	adds	r3, r0, #1
 800e386:	d102      	bne.n	800e38e <_sbrk_r+0x1a>
 800e388:	682b      	ldr	r3, [r5, #0]
 800e38a:	b103      	cbz	r3, 800e38e <_sbrk_r+0x1a>
 800e38c:	6023      	str	r3, [r4, #0]
 800e38e:	bd38      	pop	{r3, r4, r5, pc}
 800e390:	20000a5c 	.word	0x20000a5c

0800e394 <_write_r>:
 800e394:	b538      	push	{r3, r4, r5, lr}
 800e396:	4d07      	ldr	r5, [pc, #28]	@ (800e3b4 <_write_r+0x20>)
 800e398:	4604      	mov	r4, r0
 800e39a:	4608      	mov	r0, r1
 800e39c:	4611      	mov	r1, r2
 800e39e:	2200      	movs	r2, #0
 800e3a0:	602a      	str	r2, [r5, #0]
 800e3a2:	461a      	mov	r2, r3
 800e3a4:	f7f9 fbfe 	bl	8007ba4 <_write>
 800e3a8:	1c43      	adds	r3, r0, #1
 800e3aa:	d102      	bne.n	800e3b2 <_write_r+0x1e>
 800e3ac:	682b      	ldr	r3, [r5, #0]
 800e3ae:	b103      	cbz	r3, 800e3b2 <_write_r+0x1e>
 800e3b0:	6023      	str	r3, [r4, #0]
 800e3b2:	bd38      	pop	{r3, r4, r5, pc}
 800e3b4:	20000a5c 	.word	0x20000a5c

0800e3b8 <__errno>:
 800e3b8:	4b01      	ldr	r3, [pc, #4]	@ (800e3c0 <__errno+0x8>)
 800e3ba:	6818      	ldr	r0, [r3, #0]
 800e3bc:	4770      	bx	lr
 800e3be:	bf00      	nop
 800e3c0:	20000058 	.word	0x20000058

0800e3c4 <__libc_init_array>:
 800e3c4:	b570      	push	{r4, r5, r6, lr}
 800e3c6:	4d0d      	ldr	r5, [pc, #52]	@ (800e3fc <__libc_init_array+0x38>)
 800e3c8:	4c0d      	ldr	r4, [pc, #52]	@ (800e400 <__libc_init_array+0x3c>)
 800e3ca:	1b64      	subs	r4, r4, r5
 800e3cc:	10a4      	asrs	r4, r4, #2
 800e3ce:	2600      	movs	r6, #0
 800e3d0:	42a6      	cmp	r6, r4
 800e3d2:	d109      	bne.n	800e3e8 <__libc_init_array+0x24>
 800e3d4:	4d0b      	ldr	r5, [pc, #44]	@ (800e404 <__libc_init_array+0x40>)
 800e3d6:	4c0c      	ldr	r4, [pc, #48]	@ (800e408 <__libc_init_array+0x44>)
 800e3d8:	f004 f996 	bl	8012708 <_init>
 800e3dc:	1b64      	subs	r4, r4, r5
 800e3de:	10a4      	asrs	r4, r4, #2
 800e3e0:	2600      	movs	r6, #0
 800e3e2:	42a6      	cmp	r6, r4
 800e3e4:	d105      	bne.n	800e3f2 <__libc_init_array+0x2e>
 800e3e6:	bd70      	pop	{r4, r5, r6, pc}
 800e3e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3ec:	4798      	blx	r3
 800e3ee:	3601      	adds	r6, #1
 800e3f0:	e7ee      	b.n	800e3d0 <__libc_init_array+0xc>
 800e3f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3f6:	4798      	blx	r3
 800e3f8:	3601      	adds	r6, #1
 800e3fa:	e7f2      	b.n	800e3e2 <__libc_init_array+0x1e>
 800e3fc:	08012d10 	.word	0x08012d10
 800e400:	08012d10 	.word	0x08012d10
 800e404:	08012d10 	.word	0x08012d10
 800e408:	08012d14 	.word	0x08012d14

0800e40c <__retarget_lock_init_recursive>:
 800e40c:	4770      	bx	lr

0800e40e <__retarget_lock_acquire_recursive>:
 800e40e:	4770      	bx	lr

0800e410 <__retarget_lock_release_recursive>:
 800e410:	4770      	bx	lr

0800e412 <memcpy>:
 800e412:	440a      	add	r2, r1
 800e414:	4291      	cmp	r1, r2
 800e416:	f100 33ff 	add.w	r3, r0, #4294967295
 800e41a:	d100      	bne.n	800e41e <memcpy+0xc>
 800e41c:	4770      	bx	lr
 800e41e:	b510      	push	{r4, lr}
 800e420:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e424:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e428:	4291      	cmp	r1, r2
 800e42a:	d1f9      	bne.n	800e420 <memcpy+0xe>
 800e42c:	bd10      	pop	{r4, pc}

0800e42e <quorem>:
 800e42e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e432:	6903      	ldr	r3, [r0, #16]
 800e434:	690c      	ldr	r4, [r1, #16]
 800e436:	42a3      	cmp	r3, r4
 800e438:	4607      	mov	r7, r0
 800e43a:	db7e      	blt.n	800e53a <quorem+0x10c>
 800e43c:	3c01      	subs	r4, #1
 800e43e:	f101 0814 	add.w	r8, r1, #20
 800e442:	00a3      	lsls	r3, r4, #2
 800e444:	f100 0514 	add.w	r5, r0, #20
 800e448:	9300      	str	r3, [sp, #0]
 800e44a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e44e:	9301      	str	r3, [sp, #4]
 800e450:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e454:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e458:	3301      	adds	r3, #1
 800e45a:	429a      	cmp	r2, r3
 800e45c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e460:	fbb2 f6f3 	udiv	r6, r2, r3
 800e464:	d32e      	bcc.n	800e4c4 <quorem+0x96>
 800e466:	f04f 0a00 	mov.w	sl, #0
 800e46a:	46c4      	mov	ip, r8
 800e46c:	46ae      	mov	lr, r5
 800e46e:	46d3      	mov	fp, sl
 800e470:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e474:	b298      	uxth	r0, r3
 800e476:	fb06 a000 	mla	r0, r6, r0, sl
 800e47a:	0c02      	lsrs	r2, r0, #16
 800e47c:	0c1b      	lsrs	r3, r3, #16
 800e47e:	fb06 2303 	mla	r3, r6, r3, r2
 800e482:	f8de 2000 	ldr.w	r2, [lr]
 800e486:	b280      	uxth	r0, r0
 800e488:	b292      	uxth	r2, r2
 800e48a:	1a12      	subs	r2, r2, r0
 800e48c:	445a      	add	r2, fp
 800e48e:	f8de 0000 	ldr.w	r0, [lr]
 800e492:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e496:	b29b      	uxth	r3, r3
 800e498:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e49c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e4a0:	b292      	uxth	r2, r2
 800e4a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e4a6:	45e1      	cmp	r9, ip
 800e4a8:	f84e 2b04 	str.w	r2, [lr], #4
 800e4ac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e4b0:	d2de      	bcs.n	800e470 <quorem+0x42>
 800e4b2:	9b00      	ldr	r3, [sp, #0]
 800e4b4:	58eb      	ldr	r3, [r5, r3]
 800e4b6:	b92b      	cbnz	r3, 800e4c4 <quorem+0x96>
 800e4b8:	9b01      	ldr	r3, [sp, #4]
 800e4ba:	3b04      	subs	r3, #4
 800e4bc:	429d      	cmp	r5, r3
 800e4be:	461a      	mov	r2, r3
 800e4c0:	d32f      	bcc.n	800e522 <quorem+0xf4>
 800e4c2:	613c      	str	r4, [r7, #16]
 800e4c4:	4638      	mov	r0, r7
 800e4c6:	f001 f8cb 	bl	800f660 <__mcmp>
 800e4ca:	2800      	cmp	r0, #0
 800e4cc:	db25      	blt.n	800e51a <quorem+0xec>
 800e4ce:	4629      	mov	r1, r5
 800e4d0:	2000      	movs	r0, #0
 800e4d2:	f858 2b04 	ldr.w	r2, [r8], #4
 800e4d6:	f8d1 c000 	ldr.w	ip, [r1]
 800e4da:	fa1f fe82 	uxth.w	lr, r2
 800e4de:	fa1f f38c 	uxth.w	r3, ip
 800e4e2:	eba3 030e 	sub.w	r3, r3, lr
 800e4e6:	4403      	add	r3, r0
 800e4e8:	0c12      	lsrs	r2, r2, #16
 800e4ea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e4ee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4f8:	45c1      	cmp	r9, r8
 800e4fa:	f841 3b04 	str.w	r3, [r1], #4
 800e4fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e502:	d2e6      	bcs.n	800e4d2 <quorem+0xa4>
 800e504:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e508:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e50c:	b922      	cbnz	r2, 800e518 <quorem+0xea>
 800e50e:	3b04      	subs	r3, #4
 800e510:	429d      	cmp	r5, r3
 800e512:	461a      	mov	r2, r3
 800e514:	d30b      	bcc.n	800e52e <quorem+0x100>
 800e516:	613c      	str	r4, [r7, #16]
 800e518:	3601      	adds	r6, #1
 800e51a:	4630      	mov	r0, r6
 800e51c:	b003      	add	sp, #12
 800e51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e522:	6812      	ldr	r2, [r2, #0]
 800e524:	3b04      	subs	r3, #4
 800e526:	2a00      	cmp	r2, #0
 800e528:	d1cb      	bne.n	800e4c2 <quorem+0x94>
 800e52a:	3c01      	subs	r4, #1
 800e52c:	e7c6      	b.n	800e4bc <quorem+0x8e>
 800e52e:	6812      	ldr	r2, [r2, #0]
 800e530:	3b04      	subs	r3, #4
 800e532:	2a00      	cmp	r2, #0
 800e534:	d1ef      	bne.n	800e516 <quorem+0xe8>
 800e536:	3c01      	subs	r4, #1
 800e538:	e7ea      	b.n	800e510 <quorem+0xe2>
 800e53a:	2000      	movs	r0, #0
 800e53c:	e7ee      	b.n	800e51c <quorem+0xee>
	...

0800e540 <_dtoa_r>:
 800e540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e544:	69c7      	ldr	r7, [r0, #28]
 800e546:	b099      	sub	sp, #100	@ 0x64
 800e548:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e54c:	ec55 4b10 	vmov	r4, r5, d0
 800e550:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e552:	9109      	str	r1, [sp, #36]	@ 0x24
 800e554:	4683      	mov	fp, r0
 800e556:	920e      	str	r2, [sp, #56]	@ 0x38
 800e558:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e55a:	b97f      	cbnz	r7, 800e57c <_dtoa_r+0x3c>
 800e55c:	2010      	movs	r0, #16
 800e55e:	f000 fdfd 	bl	800f15c <malloc>
 800e562:	4602      	mov	r2, r0
 800e564:	f8cb 001c 	str.w	r0, [fp, #28]
 800e568:	b920      	cbnz	r0, 800e574 <_dtoa_r+0x34>
 800e56a:	4ba7      	ldr	r3, [pc, #668]	@ (800e808 <_dtoa_r+0x2c8>)
 800e56c:	21ef      	movs	r1, #239	@ 0xef
 800e56e:	48a7      	ldr	r0, [pc, #668]	@ (800e80c <_dtoa_r+0x2cc>)
 800e570:	f001 fa2a 	bl	800f9c8 <__assert_func>
 800e574:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e578:	6007      	str	r7, [r0, #0]
 800e57a:	60c7      	str	r7, [r0, #12]
 800e57c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e580:	6819      	ldr	r1, [r3, #0]
 800e582:	b159      	cbz	r1, 800e59c <_dtoa_r+0x5c>
 800e584:	685a      	ldr	r2, [r3, #4]
 800e586:	604a      	str	r2, [r1, #4]
 800e588:	2301      	movs	r3, #1
 800e58a:	4093      	lsls	r3, r2
 800e58c:	608b      	str	r3, [r1, #8]
 800e58e:	4658      	mov	r0, fp
 800e590:	f000 fe2c 	bl	800f1ec <_Bfree>
 800e594:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e598:	2200      	movs	r2, #0
 800e59a:	601a      	str	r2, [r3, #0]
 800e59c:	1e2b      	subs	r3, r5, #0
 800e59e:	bfb9      	ittee	lt
 800e5a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e5a4:	9303      	strlt	r3, [sp, #12]
 800e5a6:	2300      	movge	r3, #0
 800e5a8:	6033      	strge	r3, [r6, #0]
 800e5aa:	9f03      	ldr	r7, [sp, #12]
 800e5ac:	4b98      	ldr	r3, [pc, #608]	@ (800e810 <_dtoa_r+0x2d0>)
 800e5ae:	bfbc      	itt	lt
 800e5b0:	2201      	movlt	r2, #1
 800e5b2:	6032      	strlt	r2, [r6, #0]
 800e5b4:	43bb      	bics	r3, r7
 800e5b6:	d112      	bne.n	800e5de <_dtoa_r+0x9e>
 800e5b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e5ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e5be:	6013      	str	r3, [r2, #0]
 800e5c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e5c4:	4323      	orrs	r3, r4
 800e5c6:	f000 854d 	beq.w	800f064 <_dtoa_r+0xb24>
 800e5ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e5cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e824 <_dtoa_r+0x2e4>
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	f000 854f 	beq.w	800f074 <_dtoa_r+0xb34>
 800e5d6:	f10a 0303 	add.w	r3, sl, #3
 800e5da:	f000 bd49 	b.w	800f070 <_dtoa_r+0xb30>
 800e5de:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	ec51 0b17 	vmov	r0, r1, d7
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e5ee:	f7f2 fa8b 	bl	8000b08 <__aeabi_dcmpeq>
 800e5f2:	4680      	mov	r8, r0
 800e5f4:	b158      	cbz	r0, 800e60e <_dtoa_r+0xce>
 800e5f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	6013      	str	r3, [r2, #0]
 800e5fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e5fe:	b113      	cbz	r3, 800e606 <_dtoa_r+0xc6>
 800e600:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e602:	4b84      	ldr	r3, [pc, #528]	@ (800e814 <_dtoa_r+0x2d4>)
 800e604:	6013      	str	r3, [r2, #0]
 800e606:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e828 <_dtoa_r+0x2e8>
 800e60a:	f000 bd33 	b.w	800f074 <_dtoa_r+0xb34>
 800e60e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e612:	aa16      	add	r2, sp, #88	@ 0x58
 800e614:	a917      	add	r1, sp, #92	@ 0x5c
 800e616:	4658      	mov	r0, fp
 800e618:	f001 f8d2 	bl	800f7c0 <__d2b>
 800e61c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e620:	4681      	mov	r9, r0
 800e622:	2e00      	cmp	r6, #0
 800e624:	d077      	beq.n	800e716 <_dtoa_r+0x1d6>
 800e626:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e628:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e62c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e630:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e634:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e638:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e63c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e640:	4619      	mov	r1, r3
 800e642:	2200      	movs	r2, #0
 800e644:	4b74      	ldr	r3, [pc, #464]	@ (800e818 <_dtoa_r+0x2d8>)
 800e646:	f7f1 fe3f 	bl	80002c8 <__aeabi_dsub>
 800e64a:	a369      	add	r3, pc, #420	@ (adr r3, 800e7f0 <_dtoa_r+0x2b0>)
 800e64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e650:	f7f1 fff2 	bl	8000638 <__aeabi_dmul>
 800e654:	a368      	add	r3, pc, #416	@ (adr r3, 800e7f8 <_dtoa_r+0x2b8>)
 800e656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65a:	f7f1 fe37 	bl	80002cc <__adddf3>
 800e65e:	4604      	mov	r4, r0
 800e660:	4630      	mov	r0, r6
 800e662:	460d      	mov	r5, r1
 800e664:	f7f1 ff7e 	bl	8000564 <__aeabi_i2d>
 800e668:	a365      	add	r3, pc, #404	@ (adr r3, 800e800 <_dtoa_r+0x2c0>)
 800e66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66e:	f7f1 ffe3 	bl	8000638 <__aeabi_dmul>
 800e672:	4602      	mov	r2, r0
 800e674:	460b      	mov	r3, r1
 800e676:	4620      	mov	r0, r4
 800e678:	4629      	mov	r1, r5
 800e67a:	f7f1 fe27 	bl	80002cc <__adddf3>
 800e67e:	4604      	mov	r4, r0
 800e680:	460d      	mov	r5, r1
 800e682:	f7f2 fa89 	bl	8000b98 <__aeabi_d2iz>
 800e686:	2200      	movs	r2, #0
 800e688:	4607      	mov	r7, r0
 800e68a:	2300      	movs	r3, #0
 800e68c:	4620      	mov	r0, r4
 800e68e:	4629      	mov	r1, r5
 800e690:	f7f2 fa44 	bl	8000b1c <__aeabi_dcmplt>
 800e694:	b140      	cbz	r0, 800e6a8 <_dtoa_r+0x168>
 800e696:	4638      	mov	r0, r7
 800e698:	f7f1 ff64 	bl	8000564 <__aeabi_i2d>
 800e69c:	4622      	mov	r2, r4
 800e69e:	462b      	mov	r3, r5
 800e6a0:	f7f2 fa32 	bl	8000b08 <__aeabi_dcmpeq>
 800e6a4:	b900      	cbnz	r0, 800e6a8 <_dtoa_r+0x168>
 800e6a6:	3f01      	subs	r7, #1
 800e6a8:	2f16      	cmp	r7, #22
 800e6aa:	d851      	bhi.n	800e750 <_dtoa_r+0x210>
 800e6ac:	4b5b      	ldr	r3, [pc, #364]	@ (800e81c <_dtoa_r+0x2dc>)
 800e6ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e6ba:	f7f2 fa2f 	bl	8000b1c <__aeabi_dcmplt>
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	d048      	beq.n	800e754 <_dtoa_r+0x214>
 800e6c2:	3f01      	subs	r7, #1
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	9312      	str	r3, [sp, #72]	@ 0x48
 800e6c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e6ca:	1b9b      	subs	r3, r3, r6
 800e6cc:	1e5a      	subs	r2, r3, #1
 800e6ce:	bf44      	itt	mi
 800e6d0:	f1c3 0801 	rsbmi	r8, r3, #1
 800e6d4:	2300      	movmi	r3, #0
 800e6d6:	9208      	str	r2, [sp, #32]
 800e6d8:	bf54      	ite	pl
 800e6da:	f04f 0800 	movpl.w	r8, #0
 800e6de:	9308      	strmi	r3, [sp, #32]
 800e6e0:	2f00      	cmp	r7, #0
 800e6e2:	db39      	blt.n	800e758 <_dtoa_r+0x218>
 800e6e4:	9b08      	ldr	r3, [sp, #32]
 800e6e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e6e8:	443b      	add	r3, r7
 800e6ea:	9308      	str	r3, [sp, #32]
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6f2:	2b09      	cmp	r3, #9
 800e6f4:	d864      	bhi.n	800e7c0 <_dtoa_r+0x280>
 800e6f6:	2b05      	cmp	r3, #5
 800e6f8:	bfc4      	itt	gt
 800e6fa:	3b04      	subgt	r3, #4
 800e6fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e700:	f1a3 0302 	sub.w	r3, r3, #2
 800e704:	bfcc      	ite	gt
 800e706:	2400      	movgt	r4, #0
 800e708:	2401      	movle	r4, #1
 800e70a:	2b03      	cmp	r3, #3
 800e70c:	d863      	bhi.n	800e7d6 <_dtoa_r+0x296>
 800e70e:	e8df f003 	tbb	[pc, r3]
 800e712:	372a      	.short	0x372a
 800e714:	5535      	.short	0x5535
 800e716:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e71a:	441e      	add	r6, r3
 800e71c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e720:	2b20      	cmp	r3, #32
 800e722:	bfc1      	itttt	gt
 800e724:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e728:	409f      	lslgt	r7, r3
 800e72a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e72e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e732:	bfd6      	itet	le
 800e734:	f1c3 0320 	rsble	r3, r3, #32
 800e738:	ea47 0003 	orrgt.w	r0, r7, r3
 800e73c:	fa04 f003 	lslle.w	r0, r4, r3
 800e740:	f7f1 ff00 	bl	8000544 <__aeabi_ui2d>
 800e744:	2201      	movs	r2, #1
 800e746:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e74a:	3e01      	subs	r6, #1
 800e74c:	9214      	str	r2, [sp, #80]	@ 0x50
 800e74e:	e777      	b.n	800e640 <_dtoa_r+0x100>
 800e750:	2301      	movs	r3, #1
 800e752:	e7b8      	b.n	800e6c6 <_dtoa_r+0x186>
 800e754:	9012      	str	r0, [sp, #72]	@ 0x48
 800e756:	e7b7      	b.n	800e6c8 <_dtoa_r+0x188>
 800e758:	427b      	negs	r3, r7
 800e75a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e75c:	2300      	movs	r3, #0
 800e75e:	eba8 0807 	sub.w	r8, r8, r7
 800e762:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e764:	e7c4      	b.n	800e6f0 <_dtoa_r+0x1b0>
 800e766:	2300      	movs	r3, #0
 800e768:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e76a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	dc35      	bgt.n	800e7dc <_dtoa_r+0x29c>
 800e770:	2301      	movs	r3, #1
 800e772:	9300      	str	r3, [sp, #0]
 800e774:	9307      	str	r3, [sp, #28]
 800e776:	461a      	mov	r2, r3
 800e778:	920e      	str	r2, [sp, #56]	@ 0x38
 800e77a:	e00b      	b.n	800e794 <_dtoa_r+0x254>
 800e77c:	2301      	movs	r3, #1
 800e77e:	e7f3      	b.n	800e768 <_dtoa_r+0x228>
 800e780:	2300      	movs	r3, #0
 800e782:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e784:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e786:	18fb      	adds	r3, r7, r3
 800e788:	9300      	str	r3, [sp, #0]
 800e78a:	3301      	adds	r3, #1
 800e78c:	2b01      	cmp	r3, #1
 800e78e:	9307      	str	r3, [sp, #28]
 800e790:	bfb8      	it	lt
 800e792:	2301      	movlt	r3, #1
 800e794:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e798:	2100      	movs	r1, #0
 800e79a:	2204      	movs	r2, #4
 800e79c:	f102 0514 	add.w	r5, r2, #20
 800e7a0:	429d      	cmp	r5, r3
 800e7a2:	d91f      	bls.n	800e7e4 <_dtoa_r+0x2a4>
 800e7a4:	6041      	str	r1, [r0, #4]
 800e7a6:	4658      	mov	r0, fp
 800e7a8:	f000 fce0 	bl	800f16c <_Balloc>
 800e7ac:	4682      	mov	sl, r0
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	d13c      	bne.n	800e82c <_dtoa_r+0x2ec>
 800e7b2:	4b1b      	ldr	r3, [pc, #108]	@ (800e820 <_dtoa_r+0x2e0>)
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	f240 11af 	movw	r1, #431	@ 0x1af
 800e7ba:	e6d8      	b.n	800e56e <_dtoa_r+0x2e>
 800e7bc:	2301      	movs	r3, #1
 800e7be:	e7e0      	b.n	800e782 <_dtoa_r+0x242>
 800e7c0:	2401      	movs	r4, #1
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e7cc:	9300      	str	r3, [sp, #0]
 800e7ce:	9307      	str	r3, [sp, #28]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	2312      	movs	r3, #18
 800e7d4:	e7d0      	b.n	800e778 <_dtoa_r+0x238>
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7da:	e7f5      	b.n	800e7c8 <_dtoa_r+0x288>
 800e7dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7de:	9300      	str	r3, [sp, #0]
 800e7e0:	9307      	str	r3, [sp, #28]
 800e7e2:	e7d7      	b.n	800e794 <_dtoa_r+0x254>
 800e7e4:	3101      	adds	r1, #1
 800e7e6:	0052      	lsls	r2, r2, #1
 800e7e8:	e7d8      	b.n	800e79c <_dtoa_r+0x25c>
 800e7ea:	bf00      	nop
 800e7ec:	f3af 8000 	nop.w
 800e7f0:	636f4361 	.word	0x636f4361
 800e7f4:	3fd287a7 	.word	0x3fd287a7
 800e7f8:	8b60c8b3 	.word	0x8b60c8b3
 800e7fc:	3fc68a28 	.word	0x3fc68a28
 800e800:	509f79fb 	.word	0x509f79fb
 800e804:	3fd34413 	.word	0x3fd34413
 800e808:	08012799 	.word	0x08012799
 800e80c:	080127b0 	.word	0x080127b0
 800e810:	7ff00000 	.word	0x7ff00000
 800e814:	08012769 	.word	0x08012769
 800e818:	3ff80000 	.word	0x3ff80000
 800e81c:	080128a8 	.word	0x080128a8
 800e820:	08012808 	.word	0x08012808
 800e824:	08012795 	.word	0x08012795
 800e828:	08012768 	.word	0x08012768
 800e82c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e830:	6018      	str	r0, [r3, #0]
 800e832:	9b07      	ldr	r3, [sp, #28]
 800e834:	2b0e      	cmp	r3, #14
 800e836:	f200 80a4 	bhi.w	800e982 <_dtoa_r+0x442>
 800e83a:	2c00      	cmp	r4, #0
 800e83c:	f000 80a1 	beq.w	800e982 <_dtoa_r+0x442>
 800e840:	2f00      	cmp	r7, #0
 800e842:	dd33      	ble.n	800e8ac <_dtoa_r+0x36c>
 800e844:	4bad      	ldr	r3, [pc, #692]	@ (800eafc <_dtoa_r+0x5bc>)
 800e846:	f007 020f 	and.w	r2, r7, #15
 800e84a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e84e:	ed93 7b00 	vldr	d7, [r3]
 800e852:	05f8      	lsls	r0, r7, #23
 800e854:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e858:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e85c:	d516      	bpl.n	800e88c <_dtoa_r+0x34c>
 800e85e:	4ba8      	ldr	r3, [pc, #672]	@ (800eb00 <_dtoa_r+0x5c0>)
 800e860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e864:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e868:	f7f2 f810 	bl	800088c <__aeabi_ddiv>
 800e86c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e870:	f004 040f 	and.w	r4, r4, #15
 800e874:	2603      	movs	r6, #3
 800e876:	4da2      	ldr	r5, [pc, #648]	@ (800eb00 <_dtoa_r+0x5c0>)
 800e878:	b954      	cbnz	r4, 800e890 <_dtoa_r+0x350>
 800e87a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e87e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e882:	f7f2 f803 	bl	800088c <__aeabi_ddiv>
 800e886:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e88a:	e028      	b.n	800e8de <_dtoa_r+0x39e>
 800e88c:	2602      	movs	r6, #2
 800e88e:	e7f2      	b.n	800e876 <_dtoa_r+0x336>
 800e890:	07e1      	lsls	r1, r4, #31
 800e892:	d508      	bpl.n	800e8a6 <_dtoa_r+0x366>
 800e894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e898:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e89c:	f7f1 fecc 	bl	8000638 <__aeabi_dmul>
 800e8a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8a4:	3601      	adds	r6, #1
 800e8a6:	1064      	asrs	r4, r4, #1
 800e8a8:	3508      	adds	r5, #8
 800e8aa:	e7e5      	b.n	800e878 <_dtoa_r+0x338>
 800e8ac:	f000 80d2 	beq.w	800ea54 <_dtoa_r+0x514>
 800e8b0:	427c      	negs	r4, r7
 800e8b2:	4b92      	ldr	r3, [pc, #584]	@ (800eafc <_dtoa_r+0x5bc>)
 800e8b4:	4d92      	ldr	r5, [pc, #584]	@ (800eb00 <_dtoa_r+0x5c0>)
 800e8b6:	f004 020f 	and.w	r2, r4, #15
 800e8ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e8c6:	f7f1 feb7 	bl	8000638 <__aeabi_dmul>
 800e8ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8ce:	1124      	asrs	r4, r4, #4
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	2602      	movs	r6, #2
 800e8d4:	2c00      	cmp	r4, #0
 800e8d6:	f040 80b2 	bne.w	800ea3e <_dtoa_r+0x4fe>
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d1d3      	bne.n	800e886 <_dtoa_r+0x346>
 800e8de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e8e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	f000 80b7 	beq.w	800ea58 <_dtoa_r+0x518>
 800e8ea:	4b86      	ldr	r3, [pc, #536]	@ (800eb04 <_dtoa_r+0x5c4>)
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	4629      	mov	r1, r5
 800e8f2:	f7f2 f913 	bl	8000b1c <__aeabi_dcmplt>
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	f000 80ae 	beq.w	800ea58 <_dtoa_r+0x518>
 800e8fc:	9b07      	ldr	r3, [sp, #28]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	f000 80aa 	beq.w	800ea58 <_dtoa_r+0x518>
 800e904:	9b00      	ldr	r3, [sp, #0]
 800e906:	2b00      	cmp	r3, #0
 800e908:	dd37      	ble.n	800e97a <_dtoa_r+0x43a>
 800e90a:	1e7b      	subs	r3, r7, #1
 800e90c:	9304      	str	r3, [sp, #16]
 800e90e:	4620      	mov	r0, r4
 800e910:	4b7d      	ldr	r3, [pc, #500]	@ (800eb08 <_dtoa_r+0x5c8>)
 800e912:	2200      	movs	r2, #0
 800e914:	4629      	mov	r1, r5
 800e916:	f7f1 fe8f 	bl	8000638 <__aeabi_dmul>
 800e91a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e91e:	9c00      	ldr	r4, [sp, #0]
 800e920:	3601      	adds	r6, #1
 800e922:	4630      	mov	r0, r6
 800e924:	f7f1 fe1e 	bl	8000564 <__aeabi_i2d>
 800e928:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e92c:	f7f1 fe84 	bl	8000638 <__aeabi_dmul>
 800e930:	4b76      	ldr	r3, [pc, #472]	@ (800eb0c <_dtoa_r+0x5cc>)
 800e932:	2200      	movs	r2, #0
 800e934:	f7f1 fcca 	bl	80002cc <__adddf3>
 800e938:	4605      	mov	r5, r0
 800e93a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e93e:	2c00      	cmp	r4, #0
 800e940:	f040 808d 	bne.w	800ea5e <_dtoa_r+0x51e>
 800e944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e948:	4b71      	ldr	r3, [pc, #452]	@ (800eb10 <_dtoa_r+0x5d0>)
 800e94a:	2200      	movs	r2, #0
 800e94c:	f7f1 fcbc 	bl	80002c8 <__aeabi_dsub>
 800e950:	4602      	mov	r2, r0
 800e952:	460b      	mov	r3, r1
 800e954:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e958:	462a      	mov	r2, r5
 800e95a:	4633      	mov	r3, r6
 800e95c:	f7f2 f8fc 	bl	8000b58 <__aeabi_dcmpgt>
 800e960:	2800      	cmp	r0, #0
 800e962:	f040 828b 	bne.w	800ee7c <_dtoa_r+0x93c>
 800e966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e96a:	462a      	mov	r2, r5
 800e96c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e970:	f7f2 f8d4 	bl	8000b1c <__aeabi_dcmplt>
 800e974:	2800      	cmp	r0, #0
 800e976:	f040 8128 	bne.w	800ebca <_dtoa_r+0x68a>
 800e97a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e97e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e982:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e984:	2b00      	cmp	r3, #0
 800e986:	f2c0 815a 	blt.w	800ec3e <_dtoa_r+0x6fe>
 800e98a:	2f0e      	cmp	r7, #14
 800e98c:	f300 8157 	bgt.w	800ec3e <_dtoa_r+0x6fe>
 800e990:	4b5a      	ldr	r3, [pc, #360]	@ (800eafc <_dtoa_r+0x5bc>)
 800e992:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e996:	ed93 7b00 	vldr	d7, [r3]
 800e99a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	ed8d 7b00 	vstr	d7, [sp]
 800e9a2:	da03      	bge.n	800e9ac <_dtoa_r+0x46c>
 800e9a4:	9b07      	ldr	r3, [sp, #28]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	f340 8101 	ble.w	800ebae <_dtoa_r+0x66e>
 800e9ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e9b0:	4656      	mov	r6, sl
 800e9b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	4629      	mov	r1, r5
 800e9ba:	f7f1 ff67 	bl	800088c <__aeabi_ddiv>
 800e9be:	f7f2 f8eb 	bl	8000b98 <__aeabi_d2iz>
 800e9c2:	4680      	mov	r8, r0
 800e9c4:	f7f1 fdce 	bl	8000564 <__aeabi_i2d>
 800e9c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e9cc:	f7f1 fe34 	bl	8000638 <__aeabi_dmul>
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	460b      	mov	r3, r1
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	4629      	mov	r1, r5
 800e9d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e9dc:	f7f1 fc74 	bl	80002c8 <__aeabi_dsub>
 800e9e0:	f806 4b01 	strb.w	r4, [r6], #1
 800e9e4:	9d07      	ldr	r5, [sp, #28]
 800e9e6:	eba6 040a 	sub.w	r4, r6, sl
 800e9ea:	42a5      	cmp	r5, r4
 800e9ec:	4602      	mov	r2, r0
 800e9ee:	460b      	mov	r3, r1
 800e9f0:	f040 8117 	bne.w	800ec22 <_dtoa_r+0x6e2>
 800e9f4:	f7f1 fc6a 	bl	80002cc <__adddf3>
 800e9f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e9fc:	4604      	mov	r4, r0
 800e9fe:	460d      	mov	r5, r1
 800ea00:	f7f2 f8aa 	bl	8000b58 <__aeabi_dcmpgt>
 800ea04:	2800      	cmp	r0, #0
 800ea06:	f040 80f9 	bne.w	800ebfc <_dtoa_r+0x6bc>
 800ea0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea0e:	4620      	mov	r0, r4
 800ea10:	4629      	mov	r1, r5
 800ea12:	f7f2 f879 	bl	8000b08 <__aeabi_dcmpeq>
 800ea16:	b118      	cbz	r0, 800ea20 <_dtoa_r+0x4e0>
 800ea18:	f018 0f01 	tst.w	r8, #1
 800ea1c:	f040 80ee 	bne.w	800ebfc <_dtoa_r+0x6bc>
 800ea20:	4649      	mov	r1, r9
 800ea22:	4658      	mov	r0, fp
 800ea24:	f000 fbe2 	bl	800f1ec <_Bfree>
 800ea28:	2300      	movs	r3, #0
 800ea2a:	7033      	strb	r3, [r6, #0]
 800ea2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ea2e:	3701      	adds	r7, #1
 800ea30:	601f      	str	r7, [r3, #0]
 800ea32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	f000 831d 	beq.w	800f074 <_dtoa_r+0xb34>
 800ea3a:	601e      	str	r6, [r3, #0]
 800ea3c:	e31a      	b.n	800f074 <_dtoa_r+0xb34>
 800ea3e:	07e2      	lsls	r2, r4, #31
 800ea40:	d505      	bpl.n	800ea4e <_dtoa_r+0x50e>
 800ea42:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ea46:	f7f1 fdf7 	bl	8000638 <__aeabi_dmul>
 800ea4a:	3601      	adds	r6, #1
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	1064      	asrs	r4, r4, #1
 800ea50:	3508      	adds	r5, #8
 800ea52:	e73f      	b.n	800e8d4 <_dtoa_r+0x394>
 800ea54:	2602      	movs	r6, #2
 800ea56:	e742      	b.n	800e8de <_dtoa_r+0x39e>
 800ea58:	9c07      	ldr	r4, [sp, #28]
 800ea5a:	9704      	str	r7, [sp, #16]
 800ea5c:	e761      	b.n	800e922 <_dtoa_r+0x3e2>
 800ea5e:	4b27      	ldr	r3, [pc, #156]	@ (800eafc <_dtoa_r+0x5bc>)
 800ea60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ea62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ea66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ea6a:	4454      	add	r4, sl
 800ea6c:	2900      	cmp	r1, #0
 800ea6e:	d053      	beq.n	800eb18 <_dtoa_r+0x5d8>
 800ea70:	4928      	ldr	r1, [pc, #160]	@ (800eb14 <_dtoa_r+0x5d4>)
 800ea72:	2000      	movs	r0, #0
 800ea74:	f7f1 ff0a 	bl	800088c <__aeabi_ddiv>
 800ea78:	4633      	mov	r3, r6
 800ea7a:	462a      	mov	r2, r5
 800ea7c:	f7f1 fc24 	bl	80002c8 <__aeabi_dsub>
 800ea80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ea84:	4656      	mov	r6, sl
 800ea86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea8a:	f7f2 f885 	bl	8000b98 <__aeabi_d2iz>
 800ea8e:	4605      	mov	r5, r0
 800ea90:	f7f1 fd68 	bl	8000564 <__aeabi_i2d>
 800ea94:	4602      	mov	r2, r0
 800ea96:	460b      	mov	r3, r1
 800ea98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea9c:	f7f1 fc14 	bl	80002c8 <__aeabi_dsub>
 800eaa0:	3530      	adds	r5, #48	@ 0x30
 800eaa2:	4602      	mov	r2, r0
 800eaa4:	460b      	mov	r3, r1
 800eaa6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eaaa:	f806 5b01 	strb.w	r5, [r6], #1
 800eaae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eab2:	f7f2 f833 	bl	8000b1c <__aeabi_dcmplt>
 800eab6:	2800      	cmp	r0, #0
 800eab8:	d171      	bne.n	800eb9e <_dtoa_r+0x65e>
 800eaba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eabe:	4911      	ldr	r1, [pc, #68]	@ (800eb04 <_dtoa_r+0x5c4>)
 800eac0:	2000      	movs	r0, #0
 800eac2:	f7f1 fc01 	bl	80002c8 <__aeabi_dsub>
 800eac6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eaca:	f7f2 f827 	bl	8000b1c <__aeabi_dcmplt>
 800eace:	2800      	cmp	r0, #0
 800ead0:	f040 8095 	bne.w	800ebfe <_dtoa_r+0x6be>
 800ead4:	42a6      	cmp	r6, r4
 800ead6:	f43f af50 	beq.w	800e97a <_dtoa_r+0x43a>
 800eada:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eade:	4b0a      	ldr	r3, [pc, #40]	@ (800eb08 <_dtoa_r+0x5c8>)
 800eae0:	2200      	movs	r2, #0
 800eae2:	f7f1 fda9 	bl	8000638 <__aeabi_dmul>
 800eae6:	4b08      	ldr	r3, [pc, #32]	@ (800eb08 <_dtoa_r+0x5c8>)
 800eae8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eaec:	2200      	movs	r2, #0
 800eaee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eaf2:	f7f1 fda1 	bl	8000638 <__aeabi_dmul>
 800eaf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eafa:	e7c4      	b.n	800ea86 <_dtoa_r+0x546>
 800eafc:	080128a8 	.word	0x080128a8
 800eb00:	08012880 	.word	0x08012880
 800eb04:	3ff00000 	.word	0x3ff00000
 800eb08:	40240000 	.word	0x40240000
 800eb0c:	401c0000 	.word	0x401c0000
 800eb10:	40140000 	.word	0x40140000
 800eb14:	3fe00000 	.word	0x3fe00000
 800eb18:	4631      	mov	r1, r6
 800eb1a:	4628      	mov	r0, r5
 800eb1c:	f7f1 fd8c 	bl	8000638 <__aeabi_dmul>
 800eb20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb24:	9415      	str	r4, [sp, #84]	@ 0x54
 800eb26:	4656      	mov	r6, sl
 800eb28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb2c:	f7f2 f834 	bl	8000b98 <__aeabi_d2iz>
 800eb30:	4605      	mov	r5, r0
 800eb32:	f7f1 fd17 	bl	8000564 <__aeabi_i2d>
 800eb36:	4602      	mov	r2, r0
 800eb38:	460b      	mov	r3, r1
 800eb3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb3e:	f7f1 fbc3 	bl	80002c8 <__aeabi_dsub>
 800eb42:	3530      	adds	r5, #48	@ 0x30
 800eb44:	f806 5b01 	strb.w	r5, [r6], #1
 800eb48:	4602      	mov	r2, r0
 800eb4a:	460b      	mov	r3, r1
 800eb4c:	42a6      	cmp	r6, r4
 800eb4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eb52:	f04f 0200 	mov.w	r2, #0
 800eb56:	d124      	bne.n	800eba2 <_dtoa_r+0x662>
 800eb58:	4bac      	ldr	r3, [pc, #688]	@ (800ee0c <_dtoa_r+0x8cc>)
 800eb5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eb5e:	f7f1 fbb5 	bl	80002cc <__adddf3>
 800eb62:	4602      	mov	r2, r0
 800eb64:	460b      	mov	r3, r1
 800eb66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb6a:	f7f1 fff5 	bl	8000b58 <__aeabi_dcmpgt>
 800eb6e:	2800      	cmp	r0, #0
 800eb70:	d145      	bne.n	800ebfe <_dtoa_r+0x6be>
 800eb72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eb76:	49a5      	ldr	r1, [pc, #660]	@ (800ee0c <_dtoa_r+0x8cc>)
 800eb78:	2000      	movs	r0, #0
 800eb7a:	f7f1 fba5 	bl	80002c8 <__aeabi_dsub>
 800eb7e:	4602      	mov	r2, r0
 800eb80:	460b      	mov	r3, r1
 800eb82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb86:	f7f1 ffc9 	bl	8000b1c <__aeabi_dcmplt>
 800eb8a:	2800      	cmp	r0, #0
 800eb8c:	f43f aef5 	beq.w	800e97a <_dtoa_r+0x43a>
 800eb90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800eb92:	1e73      	subs	r3, r6, #1
 800eb94:	9315      	str	r3, [sp, #84]	@ 0x54
 800eb96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eb9a:	2b30      	cmp	r3, #48	@ 0x30
 800eb9c:	d0f8      	beq.n	800eb90 <_dtoa_r+0x650>
 800eb9e:	9f04      	ldr	r7, [sp, #16]
 800eba0:	e73e      	b.n	800ea20 <_dtoa_r+0x4e0>
 800eba2:	4b9b      	ldr	r3, [pc, #620]	@ (800ee10 <_dtoa_r+0x8d0>)
 800eba4:	f7f1 fd48 	bl	8000638 <__aeabi_dmul>
 800eba8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebac:	e7bc      	b.n	800eb28 <_dtoa_r+0x5e8>
 800ebae:	d10c      	bne.n	800ebca <_dtoa_r+0x68a>
 800ebb0:	4b98      	ldr	r3, [pc, #608]	@ (800ee14 <_dtoa_r+0x8d4>)
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebb8:	f7f1 fd3e 	bl	8000638 <__aeabi_dmul>
 800ebbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ebc0:	f7f1 ffc0 	bl	8000b44 <__aeabi_dcmpge>
 800ebc4:	2800      	cmp	r0, #0
 800ebc6:	f000 8157 	beq.w	800ee78 <_dtoa_r+0x938>
 800ebca:	2400      	movs	r4, #0
 800ebcc:	4625      	mov	r5, r4
 800ebce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebd0:	43db      	mvns	r3, r3
 800ebd2:	9304      	str	r3, [sp, #16]
 800ebd4:	4656      	mov	r6, sl
 800ebd6:	2700      	movs	r7, #0
 800ebd8:	4621      	mov	r1, r4
 800ebda:	4658      	mov	r0, fp
 800ebdc:	f000 fb06 	bl	800f1ec <_Bfree>
 800ebe0:	2d00      	cmp	r5, #0
 800ebe2:	d0dc      	beq.n	800eb9e <_dtoa_r+0x65e>
 800ebe4:	b12f      	cbz	r7, 800ebf2 <_dtoa_r+0x6b2>
 800ebe6:	42af      	cmp	r7, r5
 800ebe8:	d003      	beq.n	800ebf2 <_dtoa_r+0x6b2>
 800ebea:	4639      	mov	r1, r7
 800ebec:	4658      	mov	r0, fp
 800ebee:	f000 fafd 	bl	800f1ec <_Bfree>
 800ebf2:	4629      	mov	r1, r5
 800ebf4:	4658      	mov	r0, fp
 800ebf6:	f000 faf9 	bl	800f1ec <_Bfree>
 800ebfa:	e7d0      	b.n	800eb9e <_dtoa_r+0x65e>
 800ebfc:	9704      	str	r7, [sp, #16]
 800ebfe:	4633      	mov	r3, r6
 800ec00:	461e      	mov	r6, r3
 800ec02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec06:	2a39      	cmp	r2, #57	@ 0x39
 800ec08:	d107      	bne.n	800ec1a <_dtoa_r+0x6da>
 800ec0a:	459a      	cmp	sl, r3
 800ec0c:	d1f8      	bne.n	800ec00 <_dtoa_r+0x6c0>
 800ec0e:	9a04      	ldr	r2, [sp, #16]
 800ec10:	3201      	adds	r2, #1
 800ec12:	9204      	str	r2, [sp, #16]
 800ec14:	2230      	movs	r2, #48	@ 0x30
 800ec16:	f88a 2000 	strb.w	r2, [sl]
 800ec1a:	781a      	ldrb	r2, [r3, #0]
 800ec1c:	3201      	adds	r2, #1
 800ec1e:	701a      	strb	r2, [r3, #0]
 800ec20:	e7bd      	b.n	800eb9e <_dtoa_r+0x65e>
 800ec22:	4b7b      	ldr	r3, [pc, #492]	@ (800ee10 <_dtoa_r+0x8d0>)
 800ec24:	2200      	movs	r2, #0
 800ec26:	f7f1 fd07 	bl	8000638 <__aeabi_dmul>
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	4604      	mov	r4, r0
 800ec30:	460d      	mov	r5, r1
 800ec32:	f7f1 ff69 	bl	8000b08 <__aeabi_dcmpeq>
 800ec36:	2800      	cmp	r0, #0
 800ec38:	f43f aebb 	beq.w	800e9b2 <_dtoa_r+0x472>
 800ec3c:	e6f0      	b.n	800ea20 <_dtoa_r+0x4e0>
 800ec3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ec40:	2a00      	cmp	r2, #0
 800ec42:	f000 80db 	beq.w	800edfc <_dtoa_r+0x8bc>
 800ec46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec48:	2a01      	cmp	r2, #1
 800ec4a:	f300 80bf 	bgt.w	800edcc <_dtoa_r+0x88c>
 800ec4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ec50:	2a00      	cmp	r2, #0
 800ec52:	f000 80b7 	beq.w	800edc4 <_dtoa_r+0x884>
 800ec56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ec5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ec5c:	4646      	mov	r6, r8
 800ec5e:	9a08      	ldr	r2, [sp, #32]
 800ec60:	2101      	movs	r1, #1
 800ec62:	441a      	add	r2, r3
 800ec64:	4658      	mov	r0, fp
 800ec66:	4498      	add	r8, r3
 800ec68:	9208      	str	r2, [sp, #32]
 800ec6a:	f000 fb73 	bl	800f354 <__i2b>
 800ec6e:	4605      	mov	r5, r0
 800ec70:	b15e      	cbz	r6, 800ec8a <_dtoa_r+0x74a>
 800ec72:	9b08      	ldr	r3, [sp, #32]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	dd08      	ble.n	800ec8a <_dtoa_r+0x74a>
 800ec78:	42b3      	cmp	r3, r6
 800ec7a:	9a08      	ldr	r2, [sp, #32]
 800ec7c:	bfa8      	it	ge
 800ec7e:	4633      	movge	r3, r6
 800ec80:	eba8 0803 	sub.w	r8, r8, r3
 800ec84:	1af6      	subs	r6, r6, r3
 800ec86:	1ad3      	subs	r3, r2, r3
 800ec88:	9308      	str	r3, [sp, #32]
 800ec8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec8c:	b1f3      	cbz	r3, 800eccc <_dtoa_r+0x78c>
 800ec8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	f000 80b7 	beq.w	800ee04 <_dtoa_r+0x8c4>
 800ec96:	b18c      	cbz	r4, 800ecbc <_dtoa_r+0x77c>
 800ec98:	4629      	mov	r1, r5
 800ec9a:	4622      	mov	r2, r4
 800ec9c:	4658      	mov	r0, fp
 800ec9e:	f000 fc19 	bl	800f4d4 <__pow5mult>
 800eca2:	464a      	mov	r2, r9
 800eca4:	4601      	mov	r1, r0
 800eca6:	4605      	mov	r5, r0
 800eca8:	4658      	mov	r0, fp
 800ecaa:	f000 fb69 	bl	800f380 <__multiply>
 800ecae:	4649      	mov	r1, r9
 800ecb0:	9004      	str	r0, [sp, #16]
 800ecb2:	4658      	mov	r0, fp
 800ecb4:	f000 fa9a 	bl	800f1ec <_Bfree>
 800ecb8:	9b04      	ldr	r3, [sp, #16]
 800ecba:	4699      	mov	r9, r3
 800ecbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ecbe:	1b1a      	subs	r2, r3, r4
 800ecc0:	d004      	beq.n	800eccc <_dtoa_r+0x78c>
 800ecc2:	4649      	mov	r1, r9
 800ecc4:	4658      	mov	r0, fp
 800ecc6:	f000 fc05 	bl	800f4d4 <__pow5mult>
 800ecca:	4681      	mov	r9, r0
 800eccc:	2101      	movs	r1, #1
 800ecce:	4658      	mov	r0, fp
 800ecd0:	f000 fb40 	bl	800f354 <__i2b>
 800ecd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecd6:	4604      	mov	r4, r0
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	f000 81cf 	beq.w	800f07c <_dtoa_r+0xb3c>
 800ecde:	461a      	mov	r2, r3
 800ece0:	4601      	mov	r1, r0
 800ece2:	4658      	mov	r0, fp
 800ece4:	f000 fbf6 	bl	800f4d4 <__pow5mult>
 800ece8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecea:	2b01      	cmp	r3, #1
 800ecec:	4604      	mov	r4, r0
 800ecee:	f300 8095 	bgt.w	800ee1c <_dtoa_r+0x8dc>
 800ecf2:	9b02      	ldr	r3, [sp, #8]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	f040 8087 	bne.w	800ee08 <_dtoa_r+0x8c8>
 800ecfa:	9b03      	ldr	r3, [sp, #12]
 800ecfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	f040 8089 	bne.w	800ee18 <_dtoa_r+0x8d8>
 800ed06:	9b03      	ldr	r3, [sp, #12]
 800ed08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed0c:	0d1b      	lsrs	r3, r3, #20
 800ed0e:	051b      	lsls	r3, r3, #20
 800ed10:	b12b      	cbz	r3, 800ed1e <_dtoa_r+0x7de>
 800ed12:	9b08      	ldr	r3, [sp, #32]
 800ed14:	3301      	adds	r3, #1
 800ed16:	9308      	str	r3, [sp, #32]
 800ed18:	f108 0801 	add.w	r8, r8, #1
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	f000 81b0 	beq.w	800f088 <_dtoa_r+0xb48>
 800ed28:	6923      	ldr	r3, [r4, #16]
 800ed2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed2e:	6918      	ldr	r0, [r3, #16]
 800ed30:	f000 fac4 	bl	800f2bc <__hi0bits>
 800ed34:	f1c0 0020 	rsb	r0, r0, #32
 800ed38:	9b08      	ldr	r3, [sp, #32]
 800ed3a:	4418      	add	r0, r3
 800ed3c:	f010 001f 	ands.w	r0, r0, #31
 800ed40:	d077      	beq.n	800ee32 <_dtoa_r+0x8f2>
 800ed42:	f1c0 0320 	rsb	r3, r0, #32
 800ed46:	2b04      	cmp	r3, #4
 800ed48:	dd6b      	ble.n	800ee22 <_dtoa_r+0x8e2>
 800ed4a:	9b08      	ldr	r3, [sp, #32]
 800ed4c:	f1c0 001c 	rsb	r0, r0, #28
 800ed50:	4403      	add	r3, r0
 800ed52:	4480      	add	r8, r0
 800ed54:	4406      	add	r6, r0
 800ed56:	9308      	str	r3, [sp, #32]
 800ed58:	f1b8 0f00 	cmp.w	r8, #0
 800ed5c:	dd05      	ble.n	800ed6a <_dtoa_r+0x82a>
 800ed5e:	4649      	mov	r1, r9
 800ed60:	4642      	mov	r2, r8
 800ed62:	4658      	mov	r0, fp
 800ed64:	f000 fc10 	bl	800f588 <__lshift>
 800ed68:	4681      	mov	r9, r0
 800ed6a:	9b08      	ldr	r3, [sp, #32]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	dd05      	ble.n	800ed7c <_dtoa_r+0x83c>
 800ed70:	4621      	mov	r1, r4
 800ed72:	461a      	mov	r2, r3
 800ed74:	4658      	mov	r0, fp
 800ed76:	f000 fc07 	bl	800f588 <__lshift>
 800ed7a:	4604      	mov	r4, r0
 800ed7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d059      	beq.n	800ee36 <_dtoa_r+0x8f6>
 800ed82:	4621      	mov	r1, r4
 800ed84:	4648      	mov	r0, r9
 800ed86:	f000 fc6b 	bl	800f660 <__mcmp>
 800ed8a:	2800      	cmp	r0, #0
 800ed8c:	da53      	bge.n	800ee36 <_dtoa_r+0x8f6>
 800ed8e:	1e7b      	subs	r3, r7, #1
 800ed90:	9304      	str	r3, [sp, #16]
 800ed92:	4649      	mov	r1, r9
 800ed94:	2300      	movs	r3, #0
 800ed96:	220a      	movs	r2, #10
 800ed98:	4658      	mov	r0, fp
 800ed9a:	f000 fa49 	bl	800f230 <__multadd>
 800ed9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eda0:	4681      	mov	r9, r0
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	f000 8172 	beq.w	800f08c <_dtoa_r+0xb4c>
 800eda8:	2300      	movs	r3, #0
 800edaa:	4629      	mov	r1, r5
 800edac:	220a      	movs	r2, #10
 800edae:	4658      	mov	r0, fp
 800edb0:	f000 fa3e 	bl	800f230 <__multadd>
 800edb4:	9b00      	ldr	r3, [sp, #0]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	4605      	mov	r5, r0
 800edba:	dc67      	bgt.n	800ee8c <_dtoa_r+0x94c>
 800edbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edbe:	2b02      	cmp	r3, #2
 800edc0:	dc41      	bgt.n	800ee46 <_dtoa_r+0x906>
 800edc2:	e063      	b.n	800ee8c <_dtoa_r+0x94c>
 800edc4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800edc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800edca:	e746      	b.n	800ec5a <_dtoa_r+0x71a>
 800edcc:	9b07      	ldr	r3, [sp, #28]
 800edce:	1e5c      	subs	r4, r3, #1
 800edd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800edd2:	42a3      	cmp	r3, r4
 800edd4:	bfbf      	itttt	lt
 800edd6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800edd8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800edda:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800eddc:	1ae3      	sublt	r3, r4, r3
 800edde:	bfb4      	ite	lt
 800ede0:	18d2      	addlt	r2, r2, r3
 800ede2:	1b1c      	subge	r4, r3, r4
 800ede4:	9b07      	ldr	r3, [sp, #28]
 800ede6:	bfbc      	itt	lt
 800ede8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800edea:	2400      	movlt	r4, #0
 800edec:	2b00      	cmp	r3, #0
 800edee:	bfb5      	itete	lt
 800edf0:	eba8 0603 	sublt.w	r6, r8, r3
 800edf4:	9b07      	ldrge	r3, [sp, #28]
 800edf6:	2300      	movlt	r3, #0
 800edf8:	4646      	movge	r6, r8
 800edfa:	e730      	b.n	800ec5e <_dtoa_r+0x71e>
 800edfc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800edfe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ee00:	4646      	mov	r6, r8
 800ee02:	e735      	b.n	800ec70 <_dtoa_r+0x730>
 800ee04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ee06:	e75c      	b.n	800ecc2 <_dtoa_r+0x782>
 800ee08:	2300      	movs	r3, #0
 800ee0a:	e788      	b.n	800ed1e <_dtoa_r+0x7de>
 800ee0c:	3fe00000 	.word	0x3fe00000
 800ee10:	40240000 	.word	0x40240000
 800ee14:	40140000 	.word	0x40140000
 800ee18:	9b02      	ldr	r3, [sp, #8]
 800ee1a:	e780      	b.n	800ed1e <_dtoa_r+0x7de>
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee20:	e782      	b.n	800ed28 <_dtoa_r+0x7e8>
 800ee22:	d099      	beq.n	800ed58 <_dtoa_r+0x818>
 800ee24:	9a08      	ldr	r2, [sp, #32]
 800ee26:	331c      	adds	r3, #28
 800ee28:	441a      	add	r2, r3
 800ee2a:	4498      	add	r8, r3
 800ee2c:	441e      	add	r6, r3
 800ee2e:	9208      	str	r2, [sp, #32]
 800ee30:	e792      	b.n	800ed58 <_dtoa_r+0x818>
 800ee32:	4603      	mov	r3, r0
 800ee34:	e7f6      	b.n	800ee24 <_dtoa_r+0x8e4>
 800ee36:	9b07      	ldr	r3, [sp, #28]
 800ee38:	9704      	str	r7, [sp, #16]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	dc20      	bgt.n	800ee80 <_dtoa_r+0x940>
 800ee3e:	9300      	str	r3, [sp, #0]
 800ee40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee42:	2b02      	cmp	r3, #2
 800ee44:	dd1e      	ble.n	800ee84 <_dtoa_r+0x944>
 800ee46:	9b00      	ldr	r3, [sp, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	f47f aec0 	bne.w	800ebce <_dtoa_r+0x68e>
 800ee4e:	4621      	mov	r1, r4
 800ee50:	2205      	movs	r2, #5
 800ee52:	4658      	mov	r0, fp
 800ee54:	f000 f9ec 	bl	800f230 <__multadd>
 800ee58:	4601      	mov	r1, r0
 800ee5a:	4604      	mov	r4, r0
 800ee5c:	4648      	mov	r0, r9
 800ee5e:	f000 fbff 	bl	800f660 <__mcmp>
 800ee62:	2800      	cmp	r0, #0
 800ee64:	f77f aeb3 	ble.w	800ebce <_dtoa_r+0x68e>
 800ee68:	4656      	mov	r6, sl
 800ee6a:	2331      	movs	r3, #49	@ 0x31
 800ee6c:	f806 3b01 	strb.w	r3, [r6], #1
 800ee70:	9b04      	ldr	r3, [sp, #16]
 800ee72:	3301      	adds	r3, #1
 800ee74:	9304      	str	r3, [sp, #16]
 800ee76:	e6ae      	b.n	800ebd6 <_dtoa_r+0x696>
 800ee78:	9c07      	ldr	r4, [sp, #28]
 800ee7a:	9704      	str	r7, [sp, #16]
 800ee7c:	4625      	mov	r5, r4
 800ee7e:	e7f3      	b.n	800ee68 <_dtoa_r+0x928>
 800ee80:	9b07      	ldr	r3, [sp, #28]
 800ee82:	9300      	str	r3, [sp, #0]
 800ee84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	f000 8104 	beq.w	800f094 <_dtoa_r+0xb54>
 800ee8c:	2e00      	cmp	r6, #0
 800ee8e:	dd05      	ble.n	800ee9c <_dtoa_r+0x95c>
 800ee90:	4629      	mov	r1, r5
 800ee92:	4632      	mov	r2, r6
 800ee94:	4658      	mov	r0, fp
 800ee96:	f000 fb77 	bl	800f588 <__lshift>
 800ee9a:	4605      	mov	r5, r0
 800ee9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d05a      	beq.n	800ef58 <_dtoa_r+0xa18>
 800eea2:	6869      	ldr	r1, [r5, #4]
 800eea4:	4658      	mov	r0, fp
 800eea6:	f000 f961 	bl	800f16c <_Balloc>
 800eeaa:	4606      	mov	r6, r0
 800eeac:	b928      	cbnz	r0, 800eeba <_dtoa_r+0x97a>
 800eeae:	4b84      	ldr	r3, [pc, #528]	@ (800f0c0 <_dtoa_r+0xb80>)
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eeb6:	f7ff bb5a 	b.w	800e56e <_dtoa_r+0x2e>
 800eeba:	692a      	ldr	r2, [r5, #16]
 800eebc:	3202      	adds	r2, #2
 800eebe:	0092      	lsls	r2, r2, #2
 800eec0:	f105 010c 	add.w	r1, r5, #12
 800eec4:	300c      	adds	r0, #12
 800eec6:	f7ff faa4 	bl	800e412 <memcpy>
 800eeca:	2201      	movs	r2, #1
 800eecc:	4631      	mov	r1, r6
 800eece:	4658      	mov	r0, fp
 800eed0:	f000 fb5a 	bl	800f588 <__lshift>
 800eed4:	f10a 0301 	add.w	r3, sl, #1
 800eed8:	9307      	str	r3, [sp, #28]
 800eeda:	9b00      	ldr	r3, [sp, #0]
 800eedc:	4453      	add	r3, sl
 800eede:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eee0:	9b02      	ldr	r3, [sp, #8]
 800eee2:	f003 0301 	and.w	r3, r3, #1
 800eee6:	462f      	mov	r7, r5
 800eee8:	930a      	str	r3, [sp, #40]	@ 0x28
 800eeea:	4605      	mov	r5, r0
 800eeec:	9b07      	ldr	r3, [sp, #28]
 800eeee:	4621      	mov	r1, r4
 800eef0:	3b01      	subs	r3, #1
 800eef2:	4648      	mov	r0, r9
 800eef4:	9300      	str	r3, [sp, #0]
 800eef6:	f7ff fa9a 	bl	800e42e <quorem>
 800eefa:	4639      	mov	r1, r7
 800eefc:	9002      	str	r0, [sp, #8]
 800eefe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ef02:	4648      	mov	r0, r9
 800ef04:	f000 fbac 	bl	800f660 <__mcmp>
 800ef08:	462a      	mov	r2, r5
 800ef0a:	9008      	str	r0, [sp, #32]
 800ef0c:	4621      	mov	r1, r4
 800ef0e:	4658      	mov	r0, fp
 800ef10:	f000 fbc2 	bl	800f698 <__mdiff>
 800ef14:	68c2      	ldr	r2, [r0, #12]
 800ef16:	4606      	mov	r6, r0
 800ef18:	bb02      	cbnz	r2, 800ef5c <_dtoa_r+0xa1c>
 800ef1a:	4601      	mov	r1, r0
 800ef1c:	4648      	mov	r0, r9
 800ef1e:	f000 fb9f 	bl	800f660 <__mcmp>
 800ef22:	4602      	mov	r2, r0
 800ef24:	4631      	mov	r1, r6
 800ef26:	4658      	mov	r0, fp
 800ef28:	920e      	str	r2, [sp, #56]	@ 0x38
 800ef2a:	f000 f95f 	bl	800f1ec <_Bfree>
 800ef2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef32:	9e07      	ldr	r6, [sp, #28]
 800ef34:	ea43 0102 	orr.w	r1, r3, r2
 800ef38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef3a:	4319      	orrs	r1, r3
 800ef3c:	d110      	bne.n	800ef60 <_dtoa_r+0xa20>
 800ef3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ef42:	d029      	beq.n	800ef98 <_dtoa_r+0xa58>
 800ef44:	9b08      	ldr	r3, [sp, #32]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	dd02      	ble.n	800ef50 <_dtoa_r+0xa10>
 800ef4a:	9b02      	ldr	r3, [sp, #8]
 800ef4c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ef50:	9b00      	ldr	r3, [sp, #0]
 800ef52:	f883 8000 	strb.w	r8, [r3]
 800ef56:	e63f      	b.n	800ebd8 <_dtoa_r+0x698>
 800ef58:	4628      	mov	r0, r5
 800ef5a:	e7bb      	b.n	800eed4 <_dtoa_r+0x994>
 800ef5c:	2201      	movs	r2, #1
 800ef5e:	e7e1      	b.n	800ef24 <_dtoa_r+0x9e4>
 800ef60:	9b08      	ldr	r3, [sp, #32]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	db04      	blt.n	800ef70 <_dtoa_r+0xa30>
 800ef66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ef68:	430b      	orrs	r3, r1
 800ef6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ef6c:	430b      	orrs	r3, r1
 800ef6e:	d120      	bne.n	800efb2 <_dtoa_r+0xa72>
 800ef70:	2a00      	cmp	r2, #0
 800ef72:	dded      	ble.n	800ef50 <_dtoa_r+0xa10>
 800ef74:	4649      	mov	r1, r9
 800ef76:	2201      	movs	r2, #1
 800ef78:	4658      	mov	r0, fp
 800ef7a:	f000 fb05 	bl	800f588 <__lshift>
 800ef7e:	4621      	mov	r1, r4
 800ef80:	4681      	mov	r9, r0
 800ef82:	f000 fb6d 	bl	800f660 <__mcmp>
 800ef86:	2800      	cmp	r0, #0
 800ef88:	dc03      	bgt.n	800ef92 <_dtoa_r+0xa52>
 800ef8a:	d1e1      	bne.n	800ef50 <_dtoa_r+0xa10>
 800ef8c:	f018 0f01 	tst.w	r8, #1
 800ef90:	d0de      	beq.n	800ef50 <_dtoa_r+0xa10>
 800ef92:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ef96:	d1d8      	bne.n	800ef4a <_dtoa_r+0xa0a>
 800ef98:	9a00      	ldr	r2, [sp, #0]
 800ef9a:	2339      	movs	r3, #57	@ 0x39
 800ef9c:	7013      	strb	r3, [r2, #0]
 800ef9e:	4633      	mov	r3, r6
 800efa0:	461e      	mov	r6, r3
 800efa2:	3b01      	subs	r3, #1
 800efa4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800efa8:	2a39      	cmp	r2, #57	@ 0x39
 800efaa:	d052      	beq.n	800f052 <_dtoa_r+0xb12>
 800efac:	3201      	adds	r2, #1
 800efae:	701a      	strb	r2, [r3, #0]
 800efb0:	e612      	b.n	800ebd8 <_dtoa_r+0x698>
 800efb2:	2a00      	cmp	r2, #0
 800efb4:	dd07      	ble.n	800efc6 <_dtoa_r+0xa86>
 800efb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800efba:	d0ed      	beq.n	800ef98 <_dtoa_r+0xa58>
 800efbc:	9a00      	ldr	r2, [sp, #0]
 800efbe:	f108 0301 	add.w	r3, r8, #1
 800efc2:	7013      	strb	r3, [r2, #0]
 800efc4:	e608      	b.n	800ebd8 <_dtoa_r+0x698>
 800efc6:	9b07      	ldr	r3, [sp, #28]
 800efc8:	9a07      	ldr	r2, [sp, #28]
 800efca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800efce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efd0:	4293      	cmp	r3, r2
 800efd2:	d028      	beq.n	800f026 <_dtoa_r+0xae6>
 800efd4:	4649      	mov	r1, r9
 800efd6:	2300      	movs	r3, #0
 800efd8:	220a      	movs	r2, #10
 800efda:	4658      	mov	r0, fp
 800efdc:	f000 f928 	bl	800f230 <__multadd>
 800efe0:	42af      	cmp	r7, r5
 800efe2:	4681      	mov	r9, r0
 800efe4:	f04f 0300 	mov.w	r3, #0
 800efe8:	f04f 020a 	mov.w	r2, #10
 800efec:	4639      	mov	r1, r7
 800efee:	4658      	mov	r0, fp
 800eff0:	d107      	bne.n	800f002 <_dtoa_r+0xac2>
 800eff2:	f000 f91d 	bl	800f230 <__multadd>
 800eff6:	4607      	mov	r7, r0
 800eff8:	4605      	mov	r5, r0
 800effa:	9b07      	ldr	r3, [sp, #28]
 800effc:	3301      	adds	r3, #1
 800effe:	9307      	str	r3, [sp, #28]
 800f000:	e774      	b.n	800eeec <_dtoa_r+0x9ac>
 800f002:	f000 f915 	bl	800f230 <__multadd>
 800f006:	4629      	mov	r1, r5
 800f008:	4607      	mov	r7, r0
 800f00a:	2300      	movs	r3, #0
 800f00c:	220a      	movs	r2, #10
 800f00e:	4658      	mov	r0, fp
 800f010:	f000 f90e 	bl	800f230 <__multadd>
 800f014:	4605      	mov	r5, r0
 800f016:	e7f0      	b.n	800effa <_dtoa_r+0xaba>
 800f018:	9b00      	ldr	r3, [sp, #0]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	bfcc      	ite	gt
 800f01e:	461e      	movgt	r6, r3
 800f020:	2601      	movle	r6, #1
 800f022:	4456      	add	r6, sl
 800f024:	2700      	movs	r7, #0
 800f026:	4649      	mov	r1, r9
 800f028:	2201      	movs	r2, #1
 800f02a:	4658      	mov	r0, fp
 800f02c:	f000 faac 	bl	800f588 <__lshift>
 800f030:	4621      	mov	r1, r4
 800f032:	4681      	mov	r9, r0
 800f034:	f000 fb14 	bl	800f660 <__mcmp>
 800f038:	2800      	cmp	r0, #0
 800f03a:	dcb0      	bgt.n	800ef9e <_dtoa_r+0xa5e>
 800f03c:	d102      	bne.n	800f044 <_dtoa_r+0xb04>
 800f03e:	f018 0f01 	tst.w	r8, #1
 800f042:	d1ac      	bne.n	800ef9e <_dtoa_r+0xa5e>
 800f044:	4633      	mov	r3, r6
 800f046:	461e      	mov	r6, r3
 800f048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f04c:	2a30      	cmp	r2, #48	@ 0x30
 800f04e:	d0fa      	beq.n	800f046 <_dtoa_r+0xb06>
 800f050:	e5c2      	b.n	800ebd8 <_dtoa_r+0x698>
 800f052:	459a      	cmp	sl, r3
 800f054:	d1a4      	bne.n	800efa0 <_dtoa_r+0xa60>
 800f056:	9b04      	ldr	r3, [sp, #16]
 800f058:	3301      	adds	r3, #1
 800f05a:	9304      	str	r3, [sp, #16]
 800f05c:	2331      	movs	r3, #49	@ 0x31
 800f05e:	f88a 3000 	strb.w	r3, [sl]
 800f062:	e5b9      	b.n	800ebd8 <_dtoa_r+0x698>
 800f064:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f066:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f0c4 <_dtoa_r+0xb84>
 800f06a:	b11b      	cbz	r3, 800f074 <_dtoa_r+0xb34>
 800f06c:	f10a 0308 	add.w	r3, sl, #8
 800f070:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f072:	6013      	str	r3, [r2, #0]
 800f074:	4650      	mov	r0, sl
 800f076:	b019      	add	sp, #100	@ 0x64
 800f078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f07c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f07e:	2b01      	cmp	r3, #1
 800f080:	f77f ae37 	ble.w	800ecf2 <_dtoa_r+0x7b2>
 800f084:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f086:	930a      	str	r3, [sp, #40]	@ 0x28
 800f088:	2001      	movs	r0, #1
 800f08a:	e655      	b.n	800ed38 <_dtoa_r+0x7f8>
 800f08c:	9b00      	ldr	r3, [sp, #0]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	f77f aed6 	ble.w	800ee40 <_dtoa_r+0x900>
 800f094:	4656      	mov	r6, sl
 800f096:	4621      	mov	r1, r4
 800f098:	4648      	mov	r0, r9
 800f09a:	f7ff f9c8 	bl	800e42e <quorem>
 800f09e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f0a2:	f806 8b01 	strb.w	r8, [r6], #1
 800f0a6:	9b00      	ldr	r3, [sp, #0]
 800f0a8:	eba6 020a 	sub.w	r2, r6, sl
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	ddb3      	ble.n	800f018 <_dtoa_r+0xad8>
 800f0b0:	4649      	mov	r1, r9
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	220a      	movs	r2, #10
 800f0b6:	4658      	mov	r0, fp
 800f0b8:	f000 f8ba 	bl	800f230 <__multadd>
 800f0bc:	4681      	mov	r9, r0
 800f0be:	e7ea      	b.n	800f096 <_dtoa_r+0xb56>
 800f0c0:	08012808 	.word	0x08012808
 800f0c4:	0801278c 	.word	0x0801278c

0800f0c8 <_free_r>:
 800f0c8:	b538      	push	{r3, r4, r5, lr}
 800f0ca:	4605      	mov	r5, r0
 800f0cc:	2900      	cmp	r1, #0
 800f0ce:	d041      	beq.n	800f154 <_free_r+0x8c>
 800f0d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0d4:	1f0c      	subs	r4, r1, #4
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	bfb8      	it	lt
 800f0da:	18e4      	addlt	r4, r4, r3
 800f0dc:	f7fe fb90 	bl	800d800 <__malloc_lock>
 800f0e0:	4a1d      	ldr	r2, [pc, #116]	@ (800f158 <_free_r+0x90>)
 800f0e2:	6813      	ldr	r3, [r2, #0]
 800f0e4:	b933      	cbnz	r3, 800f0f4 <_free_r+0x2c>
 800f0e6:	6063      	str	r3, [r4, #4]
 800f0e8:	6014      	str	r4, [r2, #0]
 800f0ea:	4628      	mov	r0, r5
 800f0ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0f0:	f7fe bb8c 	b.w	800d80c <__malloc_unlock>
 800f0f4:	42a3      	cmp	r3, r4
 800f0f6:	d908      	bls.n	800f10a <_free_r+0x42>
 800f0f8:	6820      	ldr	r0, [r4, #0]
 800f0fa:	1821      	adds	r1, r4, r0
 800f0fc:	428b      	cmp	r3, r1
 800f0fe:	bf01      	itttt	eq
 800f100:	6819      	ldreq	r1, [r3, #0]
 800f102:	685b      	ldreq	r3, [r3, #4]
 800f104:	1809      	addeq	r1, r1, r0
 800f106:	6021      	streq	r1, [r4, #0]
 800f108:	e7ed      	b.n	800f0e6 <_free_r+0x1e>
 800f10a:	461a      	mov	r2, r3
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	b10b      	cbz	r3, 800f114 <_free_r+0x4c>
 800f110:	42a3      	cmp	r3, r4
 800f112:	d9fa      	bls.n	800f10a <_free_r+0x42>
 800f114:	6811      	ldr	r1, [r2, #0]
 800f116:	1850      	adds	r0, r2, r1
 800f118:	42a0      	cmp	r0, r4
 800f11a:	d10b      	bne.n	800f134 <_free_r+0x6c>
 800f11c:	6820      	ldr	r0, [r4, #0]
 800f11e:	4401      	add	r1, r0
 800f120:	1850      	adds	r0, r2, r1
 800f122:	4283      	cmp	r3, r0
 800f124:	6011      	str	r1, [r2, #0]
 800f126:	d1e0      	bne.n	800f0ea <_free_r+0x22>
 800f128:	6818      	ldr	r0, [r3, #0]
 800f12a:	685b      	ldr	r3, [r3, #4]
 800f12c:	6053      	str	r3, [r2, #4]
 800f12e:	4408      	add	r0, r1
 800f130:	6010      	str	r0, [r2, #0]
 800f132:	e7da      	b.n	800f0ea <_free_r+0x22>
 800f134:	d902      	bls.n	800f13c <_free_r+0x74>
 800f136:	230c      	movs	r3, #12
 800f138:	602b      	str	r3, [r5, #0]
 800f13a:	e7d6      	b.n	800f0ea <_free_r+0x22>
 800f13c:	6820      	ldr	r0, [r4, #0]
 800f13e:	1821      	adds	r1, r4, r0
 800f140:	428b      	cmp	r3, r1
 800f142:	bf04      	itt	eq
 800f144:	6819      	ldreq	r1, [r3, #0]
 800f146:	685b      	ldreq	r3, [r3, #4]
 800f148:	6063      	str	r3, [r4, #4]
 800f14a:	bf04      	itt	eq
 800f14c:	1809      	addeq	r1, r1, r0
 800f14e:	6021      	streq	r1, [r4, #0]
 800f150:	6054      	str	r4, [r2, #4]
 800f152:	e7ca      	b.n	800f0ea <_free_r+0x22>
 800f154:	bd38      	pop	{r3, r4, r5, pc}
 800f156:	bf00      	nop
 800f158:	2000091c 	.word	0x2000091c

0800f15c <malloc>:
 800f15c:	4b02      	ldr	r3, [pc, #8]	@ (800f168 <malloc+0xc>)
 800f15e:	4601      	mov	r1, r0
 800f160:	6818      	ldr	r0, [r3, #0]
 800f162:	f7fe bacd 	b.w	800d700 <_malloc_r>
 800f166:	bf00      	nop
 800f168:	20000058 	.word	0x20000058

0800f16c <_Balloc>:
 800f16c:	b570      	push	{r4, r5, r6, lr}
 800f16e:	69c6      	ldr	r6, [r0, #28]
 800f170:	4604      	mov	r4, r0
 800f172:	460d      	mov	r5, r1
 800f174:	b976      	cbnz	r6, 800f194 <_Balloc+0x28>
 800f176:	2010      	movs	r0, #16
 800f178:	f7ff fff0 	bl	800f15c <malloc>
 800f17c:	4602      	mov	r2, r0
 800f17e:	61e0      	str	r0, [r4, #28]
 800f180:	b920      	cbnz	r0, 800f18c <_Balloc+0x20>
 800f182:	4b18      	ldr	r3, [pc, #96]	@ (800f1e4 <_Balloc+0x78>)
 800f184:	4818      	ldr	r0, [pc, #96]	@ (800f1e8 <_Balloc+0x7c>)
 800f186:	216b      	movs	r1, #107	@ 0x6b
 800f188:	f000 fc1e 	bl	800f9c8 <__assert_func>
 800f18c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f190:	6006      	str	r6, [r0, #0]
 800f192:	60c6      	str	r6, [r0, #12]
 800f194:	69e6      	ldr	r6, [r4, #28]
 800f196:	68f3      	ldr	r3, [r6, #12]
 800f198:	b183      	cbz	r3, 800f1bc <_Balloc+0x50>
 800f19a:	69e3      	ldr	r3, [r4, #28]
 800f19c:	68db      	ldr	r3, [r3, #12]
 800f19e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f1a2:	b9b8      	cbnz	r0, 800f1d4 <_Balloc+0x68>
 800f1a4:	2101      	movs	r1, #1
 800f1a6:	fa01 f605 	lsl.w	r6, r1, r5
 800f1aa:	1d72      	adds	r2, r6, #5
 800f1ac:	0092      	lsls	r2, r2, #2
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	f7fe fa70 	bl	800d694 <_calloc_r>
 800f1b4:	b160      	cbz	r0, 800f1d0 <_Balloc+0x64>
 800f1b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f1ba:	e00e      	b.n	800f1da <_Balloc+0x6e>
 800f1bc:	2221      	movs	r2, #33	@ 0x21
 800f1be:	2104      	movs	r1, #4
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	f7fe fa67 	bl	800d694 <_calloc_r>
 800f1c6:	69e3      	ldr	r3, [r4, #28]
 800f1c8:	60f0      	str	r0, [r6, #12]
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d1e4      	bne.n	800f19a <_Balloc+0x2e>
 800f1d0:	2000      	movs	r0, #0
 800f1d2:	bd70      	pop	{r4, r5, r6, pc}
 800f1d4:	6802      	ldr	r2, [r0, #0]
 800f1d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f1da:	2300      	movs	r3, #0
 800f1dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f1e0:	e7f7      	b.n	800f1d2 <_Balloc+0x66>
 800f1e2:	bf00      	nop
 800f1e4:	08012799 	.word	0x08012799
 800f1e8:	08012819 	.word	0x08012819

0800f1ec <_Bfree>:
 800f1ec:	b570      	push	{r4, r5, r6, lr}
 800f1ee:	69c6      	ldr	r6, [r0, #28]
 800f1f0:	4605      	mov	r5, r0
 800f1f2:	460c      	mov	r4, r1
 800f1f4:	b976      	cbnz	r6, 800f214 <_Bfree+0x28>
 800f1f6:	2010      	movs	r0, #16
 800f1f8:	f7ff ffb0 	bl	800f15c <malloc>
 800f1fc:	4602      	mov	r2, r0
 800f1fe:	61e8      	str	r0, [r5, #28]
 800f200:	b920      	cbnz	r0, 800f20c <_Bfree+0x20>
 800f202:	4b09      	ldr	r3, [pc, #36]	@ (800f228 <_Bfree+0x3c>)
 800f204:	4809      	ldr	r0, [pc, #36]	@ (800f22c <_Bfree+0x40>)
 800f206:	218f      	movs	r1, #143	@ 0x8f
 800f208:	f000 fbde 	bl	800f9c8 <__assert_func>
 800f20c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f210:	6006      	str	r6, [r0, #0]
 800f212:	60c6      	str	r6, [r0, #12]
 800f214:	b13c      	cbz	r4, 800f226 <_Bfree+0x3a>
 800f216:	69eb      	ldr	r3, [r5, #28]
 800f218:	6862      	ldr	r2, [r4, #4]
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f220:	6021      	str	r1, [r4, #0]
 800f222:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f226:	bd70      	pop	{r4, r5, r6, pc}
 800f228:	08012799 	.word	0x08012799
 800f22c:	08012819 	.word	0x08012819

0800f230 <__multadd>:
 800f230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f234:	690d      	ldr	r5, [r1, #16]
 800f236:	4607      	mov	r7, r0
 800f238:	460c      	mov	r4, r1
 800f23a:	461e      	mov	r6, r3
 800f23c:	f101 0c14 	add.w	ip, r1, #20
 800f240:	2000      	movs	r0, #0
 800f242:	f8dc 3000 	ldr.w	r3, [ip]
 800f246:	b299      	uxth	r1, r3
 800f248:	fb02 6101 	mla	r1, r2, r1, r6
 800f24c:	0c1e      	lsrs	r6, r3, #16
 800f24e:	0c0b      	lsrs	r3, r1, #16
 800f250:	fb02 3306 	mla	r3, r2, r6, r3
 800f254:	b289      	uxth	r1, r1
 800f256:	3001      	adds	r0, #1
 800f258:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f25c:	4285      	cmp	r5, r0
 800f25e:	f84c 1b04 	str.w	r1, [ip], #4
 800f262:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f266:	dcec      	bgt.n	800f242 <__multadd+0x12>
 800f268:	b30e      	cbz	r6, 800f2ae <__multadd+0x7e>
 800f26a:	68a3      	ldr	r3, [r4, #8]
 800f26c:	42ab      	cmp	r3, r5
 800f26e:	dc19      	bgt.n	800f2a4 <__multadd+0x74>
 800f270:	6861      	ldr	r1, [r4, #4]
 800f272:	4638      	mov	r0, r7
 800f274:	3101      	adds	r1, #1
 800f276:	f7ff ff79 	bl	800f16c <_Balloc>
 800f27a:	4680      	mov	r8, r0
 800f27c:	b928      	cbnz	r0, 800f28a <__multadd+0x5a>
 800f27e:	4602      	mov	r2, r0
 800f280:	4b0c      	ldr	r3, [pc, #48]	@ (800f2b4 <__multadd+0x84>)
 800f282:	480d      	ldr	r0, [pc, #52]	@ (800f2b8 <__multadd+0x88>)
 800f284:	21ba      	movs	r1, #186	@ 0xba
 800f286:	f000 fb9f 	bl	800f9c8 <__assert_func>
 800f28a:	6922      	ldr	r2, [r4, #16]
 800f28c:	3202      	adds	r2, #2
 800f28e:	f104 010c 	add.w	r1, r4, #12
 800f292:	0092      	lsls	r2, r2, #2
 800f294:	300c      	adds	r0, #12
 800f296:	f7ff f8bc 	bl	800e412 <memcpy>
 800f29a:	4621      	mov	r1, r4
 800f29c:	4638      	mov	r0, r7
 800f29e:	f7ff ffa5 	bl	800f1ec <_Bfree>
 800f2a2:	4644      	mov	r4, r8
 800f2a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f2a8:	3501      	adds	r5, #1
 800f2aa:	615e      	str	r6, [r3, #20]
 800f2ac:	6125      	str	r5, [r4, #16]
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2b4:	08012808 	.word	0x08012808
 800f2b8:	08012819 	.word	0x08012819

0800f2bc <__hi0bits>:
 800f2bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	bf36      	itet	cc
 800f2c4:	0403      	lslcc	r3, r0, #16
 800f2c6:	2000      	movcs	r0, #0
 800f2c8:	2010      	movcc	r0, #16
 800f2ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f2ce:	bf3c      	itt	cc
 800f2d0:	021b      	lslcc	r3, r3, #8
 800f2d2:	3008      	addcc	r0, #8
 800f2d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f2d8:	bf3c      	itt	cc
 800f2da:	011b      	lslcc	r3, r3, #4
 800f2dc:	3004      	addcc	r0, #4
 800f2de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f2e2:	bf3c      	itt	cc
 800f2e4:	009b      	lslcc	r3, r3, #2
 800f2e6:	3002      	addcc	r0, #2
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	db05      	blt.n	800f2f8 <__hi0bits+0x3c>
 800f2ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f2f0:	f100 0001 	add.w	r0, r0, #1
 800f2f4:	bf08      	it	eq
 800f2f6:	2020      	moveq	r0, #32
 800f2f8:	4770      	bx	lr

0800f2fa <__lo0bits>:
 800f2fa:	6803      	ldr	r3, [r0, #0]
 800f2fc:	4602      	mov	r2, r0
 800f2fe:	f013 0007 	ands.w	r0, r3, #7
 800f302:	d00b      	beq.n	800f31c <__lo0bits+0x22>
 800f304:	07d9      	lsls	r1, r3, #31
 800f306:	d421      	bmi.n	800f34c <__lo0bits+0x52>
 800f308:	0798      	lsls	r0, r3, #30
 800f30a:	bf49      	itett	mi
 800f30c:	085b      	lsrmi	r3, r3, #1
 800f30e:	089b      	lsrpl	r3, r3, #2
 800f310:	2001      	movmi	r0, #1
 800f312:	6013      	strmi	r3, [r2, #0]
 800f314:	bf5c      	itt	pl
 800f316:	6013      	strpl	r3, [r2, #0]
 800f318:	2002      	movpl	r0, #2
 800f31a:	4770      	bx	lr
 800f31c:	b299      	uxth	r1, r3
 800f31e:	b909      	cbnz	r1, 800f324 <__lo0bits+0x2a>
 800f320:	0c1b      	lsrs	r3, r3, #16
 800f322:	2010      	movs	r0, #16
 800f324:	b2d9      	uxtb	r1, r3
 800f326:	b909      	cbnz	r1, 800f32c <__lo0bits+0x32>
 800f328:	3008      	adds	r0, #8
 800f32a:	0a1b      	lsrs	r3, r3, #8
 800f32c:	0719      	lsls	r1, r3, #28
 800f32e:	bf04      	itt	eq
 800f330:	091b      	lsreq	r3, r3, #4
 800f332:	3004      	addeq	r0, #4
 800f334:	0799      	lsls	r1, r3, #30
 800f336:	bf04      	itt	eq
 800f338:	089b      	lsreq	r3, r3, #2
 800f33a:	3002      	addeq	r0, #2
 800f33c:	07d9      	lsls	r1, r3, #31
 800f33e:	d403      	bmi.n	800f348 <__lo0bits+0x4e>
 800f340:	085b      	lsrs	r3, r3, #1
 800f342:	f100 0001 	add.w	r0, r0, #1
 800f346:	d003      	beq.n	800f350 <__lo0bits+0x56>
 800f348:	6013      	str	r3, [r2, #0]
 800f34a:	4770      	bx	lr
 800f34c:	2000      	movs	r0, #0
 800f34e:	4770      	bx	lr
 800f350:	2020      	movs	r0, #32
 800f352:	4770      	bx	lr

0800f354 <__i2b>:
 800f354:	b510      	push	{r4, lr}
 800f356:	460c      	mov	r4, r1
 800f358:	2101      	movs	r1, #1
 800f35a:	f7ff ff07 	bl	800f16c <_Balloc>
 800f35e:	4602      	mov	r2, r0
 800f360:	b928      	cbnz	r0, 800f36e <__i2b+0x1a>
 800f362:	4b05      	ldr	r3, [pc, #20]	@ (800f378 <__i2b+0x24>)
 800f364:	4805      	ldr	r0, [pc, #20]	@ (800f37c <__i2b+0x28>)
 800f366:	f240 1145 	movw	r1, #325	@ 0x145
 800f36a:	f000 fb2d 	bl	800f9c8 <__assert_func>
 800f36e:	2301      	movs	r3, #1
 800f370:	6144      	str	r4, [r0, #20]
 800f372:	6103      	str	r3, [r0, #16]
 800f374:	bd10      	pop	{r4, pc}
 800f376:	bf00      	nop
 800f378:	08012808 	.word	0x08012808
 800f37c:	08012819 	.word	0x08012819

0800f380 <__multiply>:
 800f380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f384:	4614      	mov	r4, r2
 800f386:	690a      	ldr	r2, [r1, #16]
 800f388:	6923      	ldr	r3, [r4, #16]
 800f38a:	429a      	cmp	r2, r3
 800f38c:	bfa8      	it	ge
 800f38e:	4623      	movge	r3, r4
 800f390:	460f      	mov	r7, r1
 800f392:	bfa4      	itt	ge
 800f394:	460c      	movge	r4, r1
 800f396:	461f      	movge	r7, r3
 800f398:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f39c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f3a0:	68a3      	ldr	r3, [r4, #8]
 800f3a2:	6861      	ldr	r1, [r4, #4]
 800f3a4:	eb0a 0609 	add.w	r6, sl, r9
 800f3a8:	42b3      	cmp	r3, r6
 800f3aa:	b085      	sub	sp, #20
 800f3ac:	bfb8      	it	lt
 800f3ae:	3101      	addlt	r1, #1
 800f3b0:	f7ff fedc 	bl	800f16c <_Balloc>
 800f3b4:	b930      	cbnz	r0, 800f3c4 <__multiply+0x44>
 800f3b6:	4602      	mov	r2, r0
 800f3b8:	4b44      	ldr	r3, [pc, #272]	@ (800f4cc <__multiply+0x14c>)
 800f3ba:	4845      	ldr	r0, [pc, #276]	@ (800f4d0 <__multiply+0x150>)
 800f3bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f3c0:	f000 fb02 	bl	800f9c8 <__assert_func>
 800f3c4:	f100 0514 	add.w	r5, r0, #20
 800f3c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f3cc:	462b      	mov	r3, r5
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	4543      	cmp	r3, r8
 800f3d2:	d321      	bcc.n	800f418 <__multiply+0x98>
 800f3d4:	f107 0114 	add.w	r1, r7, #20
 800f3d8:	f104 0214 	add.w	r2, r4, #20
 800f3dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f3e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f3e4:	9302      	str	r3, [sp, #8]
 800f3e6:	1b13      	subs	r3, r2, r4
 800f3e8:	3b15      	subs	r3, #21
 800f3ea:	f023 0303 	bic.w	r3, r3, #3
 800f3ee:	3304      	adds	r3, #4
 800f3f0:	f104 0715 	add.w	r7, r4, #21
 800f3f4:	42ba      	cmp	r2, r7
 800f3f6:	bf38      	it	cc
 800f3f8:	2304      	movcc	r3, #4
 800f3fa:	9301      	str	r3, [sp, #4]
 800f3fc:	9b02      	ldr	r3, [sp, #8]
 800f3fe:	9103      	str	r1, [sp, #12]
 800f400:	428b      	cmp	r3, r1
 800f402:	d80c      	bhi.n	800f41e <__multiply+0x9e>
 800f404:	2e00      	cmp	r6, #0
 800f406:	dd03      	ble.n	800f410 <__multiply+0x90>
 800f408:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d05b      	beq.n	800f4c8 <__multiply+0x148>
 800f410:	6106      	str	r6, [r0, #16]
 800f412:	b005      	add	sp, #20
 800f414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f418:	f843 2b04 	str.w	r2, [r3], #4
 800f41c:	e7d8      	b.n	800f3d0 <__multiply+0x50>
 800f41e:	f8b1 a000 	ldrh.w	sl, [r1]
 800f422:	f1ba 0f00 	cmp.w	sl, #0
 800f426:	d024      	beq.n	800f472 <__multiply+0xf2>
 800f428:	f104 0e14 	add.w	lr, r4, #20
 800f42c:	46a9      	mov	r9, r5
 800f42e:	f04f 0c00 	mov.w	ip, #0
 800f432:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f436:	f8d9 3000 	ldr.w	r3, [r9]
 800f43a:	fa1f fb87 	uxth.w	fp, r7
 800f43e:	b29b      	uxth	r3, r3
 800f440:	fb0a 330b 	mla	r3, sl, fp, r3
 800f444:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f448:	f8d9 7000 	ldr.w	r7, [r9]
 800f44c:	4463      	add	r3, ip
 800f44e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f452:	fb0a c70b 	mla	r7, sl, fp, ip
 800f456:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f460:	4572      	cmp	r2, lr
 800f462:	f849 3b04 	str.w	r3, [r9], #4
 800f466:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f46a:	d8e2      	bhi.n	800f432 <__multiply+0xb2>
 800f46c:	9b01      	ldr	r3, [sp, #4]
 800f46e:	f845 c003 	str.w	ip, [r5, r3]
 800f472:	9b03      	ldr	r3, [sp, #12]
 800f474:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f478:	3104      	adds	r1, #4
 800f47a:	f1b9 0f00 	cmp.w	r9, #0
 800f47e:	d021      	beq.n	800f4c4 <__multiply+0x144>
 800f480:	682b      	ldr	r3, [r5, #0]
 800f482:	f104 0c14 	add.w	ip, r4, #20
 800f486:	46ae      	mov	lr, r5
 800f488:	f04f 0a00 	mov.w	sl, #0
 800f48c:	f8bc b000 	ldrh.w	fp, [ip]
 800f490:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f494:	fb09 770b 	mla	r7, r9, fp, r7
 800f498:	4457      	add	r7, sl
 800f49a:	b29b      	uxth	r3, r3
 800f49c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f4a0:	f84e 3b04 	str.w	r3, [lr], #4
 800f4a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f4a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f4ac:	f8be 3000 	ldrh.w	r3, [lr]
 800f4b0:	fb09 330a 	mla	r3, r9, sl, r3
 800f4b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f4b8:	4562      	cmp	r2, ip
 800f4ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f4be:	d8e5      	bhi.n	800f48c <__multiply+0x10c>
 800f4c0:	9f01      	ldr	r7, [sp, #4]
 800f4c2:	51eb      	str	r3, [r5, r7]
 800f4c4:	3504      	adds	r5, #4
 800f4c6:	e799      	b.n	800f3fc <__multiply+0x7c>
 800f4c8:	3e01      	subs	r6, #1
 800f4ca:	e79b      	b.n	800f404 <__multiply+0x84>
 800f4cc:	08012808 	.word	0x08012808
 800f4d0:	08012819 	.word	0x08012819

0800f4d4 <__pow5mult>:
 800f4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4d8:	4615      	mov	r5, r2
 800f4da:	f012 0203 	ands.w	r2, r2, #3
 800f4de:	4607      	mov	r7, r0
 800f4e0:	460e      	mov	r6, r1
 800f4e2:	d007      	beq.n	800f4f4 <__pow5mult+0x20>
 800f4e4:	4c25      	ldr	r4, [pc, #148]	@ (800f57c <__pow5mult+0xa8>)
 800f4e6:	3a01      	subs	r2, #1
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f4ee:	f7ff fe9f 	bl	800f230 <__multadd>
 800f4f2:	4606      	mov	r6, r0
 800f4f4:	10ad      	asrs	r5, r5, #2
 800f4f6:	d03d      	beq.n	800f574 <__pow5mult+0xa0>
 800f4f8:	69fc      	ldr	r4, [r7, #28]
 800f4fa:	b97c      	cbnz	r4, 800f51c <__pow5mult+0x48>
 800f4fc:	2010      	movs	r0, #16
 800f4fe:	f7ff fe2d 	bl	800f15c <malloc>
 800f502:	4602      	mov	r2, r0
 800f504:	61f8      	str	r0, [r7, #28]
 800f506:	b928      	cbnz	r0, 800f514 <__pow5mult+0x40>
 800f508:	4b1d      	ldr	r3, [pc, #116]	@ (800f580 <__pow5mult+0xac>)
 800f50a:	481e      	ldr	r0, [pc, #120]	@ (800f584 <__pow5mult+0xb0>)
 800f50c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f510:	f000 fa5a 	bl	800f9c8 <__assert_func>
 800f514:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f518:	6004      	str	r4, [r0, #0]
 800f51a:	60c4      	str	r4, [r0, #12]
 800f51c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f520:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f524:	b94c      	cbnz	r4, 800f53a <__pow5mult+0x66>
 800f526:	f240 2171 	movw	r1, #625	@ 0x271
 800f52a:	4638      	mov	r0, r7
 800f52c:	f7ff ff12 	bl	800f354 <__i2b>
 800f530:	2300      	movs	r3, #0
 800f532:	f8c8 0008 	str.w	r0, [r8, #8]
 800f536:	4604      	mov	r4, r0
 800f538:	6003      	str	r3, [r0, #0]
 800f53a:	f04f 0900 	mov.w	r9, #0
 800f53e:	07eb      	lsls	r3, r5, #31
 800f540:	d50a      	bpl.n	800f558 <__pow5mult+0x84>
 800f542:	4631      	mov	r1, r6
 800f544:	4622      	mov	r2, r4
 800f546:	4638      	mov	r0, r7
 800f548:	f7ff ff1a 	bl	800f380 <__multiply>
 800f54c:	4631      	mov	r1, r6
 800f54e:	4680      	mov	r8, r0
 800f550:	4638      	mov	r0, r7
 800f552:	f7ff fe4b 	bl	800f1ec <_Bfree>
 800f556:	4646      	mov	r6, r8
 800f558:	106d      	asrs	r5, r5, #1
 800f55a:	d00b      	beq.n	800f574 <__pow5mult+0xa0>
 800f55c:	6820      	ldr	r0, [r4, #0]
 800f55e:	b938      	cbnz	r0, 800f570 <__pow5mult+0x9c>
 800f560:	4622      	mov	r2, r4
 800f562:	4621      	mov	r1, r4
 800f564:	4638      	mov	r0, r7
 800f566:	f7ff ff0b 	bl	800f380 <__multiply>
 800f56a:	6020      	str	r0, [r4, #0]
 800f56c:	f8c0 9000 	str.w	r9, [r0]
 800f570:	4604      	mov	r4, r0
 800f572:	e7e4      	b.n	800f53e <__pow5mult+0x6a>
 800f574:	4630      	mov	r0, r6
 800f576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f57a:	bf00      	nop
 800f57c:	08012874 	.word	0x08012874
 800f580:	08012799 	.word	0x08012799
 800f584:	08012819 	.word	0x08012819

0800f588 <__lshift>:
 800f588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f58c:	460c      	mov	r4, r1
 800f58e:	6849      	ldr	r1, [r1, #4]
 800f590:	6923      	ldr	r3, [r4, #16]
 800f592:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f596:	68a3      	ldr	r3, [r4, #8]
 800f598:	4607      	mov	r7, r0
 800f59a:	4691      	mov	r9, r2
 800f59c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f5a0:	f108 0601 	add.w	r6, r8, #1
 800f5a4:	42b3      	cmp	r3, r6
 800f5a6:	db0b      	blt.n	800f5c0 <__lshift+0x38>
 800f5a8:	4638      	mov	r0, r7
 800f5aa:	f7ff fddf 	bl	800f16c <_Balloc>
 800f5ae:	4605      	mov	r5, r0
 800f5b0:	b948      	cbnz	r0, 800f5c6 <__lshift+0x3e>
 800f5b2:	4602      	mov	r2, r0
 800f5b4:	4b28      	ldr	r3, [pc, #160]	@ (800f658 <__lshift+0xd0>)
 800f5b6:	4829      	ldr	r0, [pc, #164]	@ (800f65c <__lshift+0xd4>)
 800f5b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f5bc:	f000 fa04 	bl	800f9c8 <__assert_func>
 800f5c0:	3101      	adds	r1, #1
 800f5c2:	005b      	lsls	r3, r3, #1
 800f5c4:	e7ee      	b.n	800f5a4 <__lshift+0x1c>
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	f100 0114 	add.w	r1, r0, #20
 800f5cc:	f100 0210 	add.w	r2, r0, #16
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	4553      	cmp	r3, sl
 800f5d4:	db33      	blt.n	800f63e <__lshift+0xb6>
 800f5d6:	6920      	ldr	r0, [r4, #16]
 800f5d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f5dc:	f104 0314 	add.w	r3, r4, #20
 800f5e0:	f019 091f 	ands.w	r9, r9, #31
 800f5e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f5e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f5ec:	d02b      	beq.n	800f646 <__lshift+0xbe>
 800f5ee:	f1c9 0e20 	rsb	lr, r9, #32
 800f5f2:	468a      	mov	sl, r1
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	6818      	ldr	r0, [r3, #0]
 800f5f8:	fa00 f009 	lsl.w	r0, r0, r9
 800f5fc:	4310      	orrs	r0, r2
 800f5fe:	f84a 0b04 	str.w	r0, [sl], #4
 800f602:	f853 2b04 	ldr.w	r2, [r3], #4
 800f606:	459c      	cmp	ip, r3
 800f608:	fa22 f20e 	lsr.w	r2, r2, lr
 800f60c:	d8f3      	bhi.n	800f5f6 <__lshift+0x6e>
 800f60e:	ebac 0304 	sub.w	r3, ip, r4
 800f612:	3b15      	subs	r3, #21
 800f614:	f023 0303 	bic.w	r3, r3, #3
 800f618:	3304      	adds	r3, #4
 800f61a:	f104 0015 	add.w	r0, r4, #21
 800f61e:	4584      	cmp	ip, r0
 800f620:	bf38      	it	cc
 800f622:	2304      	movcc	r3, #4
 800f624:	50ca      	str	r2, [r1, r3]
 800f626:	b10a      	cbz	r2, 800f62c <__lshift+0xa4>
 800f628:	f108 0602 	add.w	r6, r8, #2
 800f62c:	3e01      	subs	r6, #1
 800f62e:	4638      	mov	r0, r7
 800f630:	612e      	str	r6, [r5, #16]
 800f632:	4621      	mov	r1, r4
 800f634:	f7ff fdda 	bl	800f1ec <_Bfree>
 800f638:	4628      	mov	r0, r5
 800f63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f63e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f642:	3301      	adds	r3, #1
 800f644:	e7c5      	b.n	800f5d2 <__lshift+0x4a>
 800f646:	3904      	subs	r1, #4
 800f648:	f853 2b04 	ldr.w	r2, [r3], #4
 800f64c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f650:	459c      	cmp	ip, r3
 800f652:	d8f9      	bhi.n	800f648 <__lshift+0xc0>
 800f654:	e7ea      	b.n	800f62c <__lshift+0xa4>
 800f656:	bf00      	nop
 800f658:	08012808 	.word	0x08012808
 800f65c:	08012819 	.word	0x08012819

0800f660 <__mcmp>:
 800f660:	690a      	ldr	r2, [r1, #16]
 800f662:	4603      	mov	r3, r0
 800f664:	6900      	ldr	r0, [r0, #16]
 800f666:	1a80      	subs	r0, r0, r2
 800f668:	b530      	push	{r4, r5, lr}
 800f66a:	d10e      	bne.n	800f68a <__mcmp+0x2a>
 800f66c:	3314      	adds	r3, #20
 800f66e:	3114      	adds	r1, #20
 800f670:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f674:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f678:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f67c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f680:	4295      	cmp	r5, r2
 800f682:	d003      	beq.n	800f68c <__mcmp+0x2c>
 800f684:	d205      	bcs.n	800f692 <__mcmp+0x32>
 800f686:	f04f 30ff 	mov.w	r0, #4294967295
 800f68a:	bd30      	pop	{r4, r5, pc}
 800f68c:	42a3      	cmp	r3, r4
 800f68e:	d3f3      	bcc.n	800f678 <__mcmp+0x18>
 800f690:	e7fb      	b.n	800f68a <__mcmp+0x2a>
 800f692:	2001      	movs	r0, #1
 800f694:	e7f9      	b.n	800f68a <__mcmp+0x2a>
	...

0800f698 <__mdiff>:
 800f698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f69c:	4689      	mov	r9, r1
 800f69e:	4606      	mov	r6, r0
 800f6a0:	4611      	mov	r1, r2
 800f6a2:	4648      	mov	r0, r9
 800f6a4:	4614      	mov	r4, r2
 800f6a6:	f7ff ffdb 	bl	800f660 <__mcmp>
 800f6aa:	1e05      	subs	r5, r0, #0
 800f6ac:	d112      	bne.n	800f6d4 <__mdiff+0x3c>
 800f6ae:	4629      	mov	r1, r5
 800f6b0:	4630      	mov	r0, r6
 800f6b2:	f7ff fd5b 	bl	800f16c <_Balloc>
 800f6b6:	4602      	mov	r2, r0
 800f6b8:	b928      	cbnz	r0, 800f6c6 <__mdiff+0x2e>
 800f6ba:	4b3f      	ldr	r3, [pc, #252]	@ (800f7b8 <__mdiff+0x120>)
 800f6bc:	f240 2137 	movw	r1, #567	@ 0x237
 800f6c0:	483e      	ldr	r0, [pc, #248]	@ (800f7bc <__mdiff+0x124>)
 800f6c2:	f000 f981 	bl	800f9c8 <__assert_func>
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f6cc:	4610      	mov	r0, r2
 800f6ce:	b003      	add	sp, #12
 800f6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6d4:	bfbc      	itt	lt
 800f6d6:	464b      	movlt	r3, r9
 800f6d8:	46a1      	movlt	r9, r4
 800f6da:	4630      	mov	r0, r6
 800f6dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f6e0:	bfba      	itte	lt
 800f6e2:	461c      	movlt	r4, r3
 800f6e4:	2501      	movlt	r5, #1
 800f6e6:	2500      	movge	r5, #0
 800f6e8:	f7ff fd40 	bl	800f16c <_Balloc>
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	b918      	cbnz	r0, 800f6f8 <__mdiff+0x60>
 800f6f0:	4b31      	ldr	r3, [pc, #196]	@ (800f7b8 <__mdiff+0x120>)
 800f6f2:	f240 2145 	movw	r1, #581	@ 0x245
 800f6f6:	e7e3      	b.n	800f6c0 <__mdiff+0x28>
 800f6f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f6fc:	6926      	ldr	r6, [r4, #16]
 800f6fe:	60c5      	str	r5, [r0, #12]
 800f700:	f109 0310 	add.w	r3, r9, #16
 800f704:	f109 0514 	add.w	r5, r9, #20
 800f708:	f104 0e14 	add.w	lr, r4, #20
 800f70c:	f100 0b14 	add.w	fp, r0, #20
 800f710:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f714:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f718:	9301      	str	r3, [sp, #4]
 800f71a:	46d9      	mov	r9, fp
 800f71c:	f04f 0c00 	mov.w	ip, #0
 800f720:	9b01      	ldr	r3, [sp, #4]
 800f722:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f726:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f72a:	9301      	str	r3, [sp, #4]
 800f72c:	fa1f f38a 	uxth.w	r3, sl
 800f730:	4619      	mov	r1, r3
 800f732:	b283      	uxth	r3, r0
 800f734:	1acb      	subs	r3, r1, r3
 800f736:	0c00      	lsrs	r0, r0, #16
 800f738:	4463      	add	r3, ip
 800f73a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f73e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f742:	b29b      	uxth	r3, r3
 800f744:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f748:	4576      	cmp	r6, lr
 800f74a:	f849 3b04 	str.w	r3, [r9], #4
 800f74e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f752:	d8e5      	bhi.n	800f720 <__mdiff+0x88>
 800f754:	1b33      	subs	r3, r6, r4
 800f756:	3b15      	subs	r3, #21
 800f758:	f023 0303 	bic.w	r3, r3, #3
 800f75c:	3415      	adds	r4, #21
 800f75e:	3304      	adds	r3, #4
 800f760:	42a6      	cmp	r6, r4
 800f762:	bf38      	it	cc
 800f764:	2304      	movcc	r3, #4
 800f766:	441d      	add	r5, r3
 800f768:	445b      	add	r3, fp
 800f76a:	461e      	mov	r6, r3
 800f76c:	462c      	mov	r4, r5
 800f76e:	4544      	cmp	r4, r8
 800f770:	d30e      	bcc.n	800f790 <__mdiff+0xf8>
 800f772:	f108 0103 	add.w	r1, r8, #3
 800f776:	1b49      	subs	r1, r1, r5
 800f778:	f021 0103 	bic.w	r1, r1, #3
 800f77c:	3d03      	subs	r5, #3
 800f77e:	45a8      	cmp	r8, r5
 800f780:	bf38      	it	cc
 800f782:	2100      	movcc	r1, #0
 800f784:	440b      	add	r3, r1
 800f786:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f78a:	b191      	cbz	r1, 800f7b2 <__mdiff+0x11a>
 800f78c:	6117      	str	r7, [r2, #16]
 800f78e:	e79d      	b.n	800f6cc <__mdiff+0x34>
 800f790:	f854 1b04 	ldr.w	r1, [r4], #4
 800f794:	46e6      	mov	lr, ip
 800f796:	0c08      	lsrs	r0, r1, #16
 800f798:	fa1c fc81 	uxtah	ip, ip, r1
 800f79c:	4471      	add	r1, lr
 800f79e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f7a2:	b289      	uxth	r1, r1
 800f7a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f7a8:	f846 1b04 	str.w	r1, [r6], #4
 800f7ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f7b0:	e7dd      	b.n	800f76e <__mdiff+0xd6>
 800f7b2:	3f01      	subs	r7, #1
 800f7b4:	e7e7      	b.n	800f786 <__mdiff+0xee>
 800f7b6:	bf00      	nop
 800f7b8:	08012808 	.word	0x08012808
 800f7bc:	08012819 	.word	0x08012819

0800f7c0 <__d2b>:
 800f7c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f7c4:	460f      	mov	r7, r1
 800f7c6:	2101      	movs	r1, #1
 800f7c8:	ec59 8b10 	vmov	r8, r9, d0
 800f7cc:	4616      	mov	r6, r2
 800f7ce:	f7ff fccd 	bl	800f16c <_Balloc>
 800f7d2:	4604      	mov	r4, r0
 800f7d4:	b930      	cbnz	r0, 800f7e4 <__d2b+0x24>
 800f7d6:	4602      	mov	r2, r0
 800f7d8:	4b23      	ldr	r3, [pc, #140]	@ (800f868 <__d2b+0xa8>)
 800f7da:	4824      	ldr	r0, [pc, #144]	@ (800f86c <__d2b+0xac>)
 800f7dc:	f240 310f 	movw	r1, #783	@ 0x30f
 800f7e0:	f000 f8f2 	bl	800f9c8 <__assert_func>
 800f7e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f7e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f7ec:	b10d      	cbz	r5, 800f7f2 <__d2b+0x32>
 800f7ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f7f2:	9301      	str	r3, [sp, #4]
 800f7f4:	f1b8 0300 	subs.w	r3, r8, #0
 800f7f8:	d023      	beq.n	800f842 <__d2b+0x82>
 800f7fa:	4668      	mov	r0, sp
 800f7fc:	9300      	str	r3, [sp, #0]
 800f7fe:	f7ff fd7c 	bl	800f2fa <__lo0bits>
 800f802:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f806:	b1d0      	cbz	r0, 800f83e <__d2b+0x7e>
 800f808:	f1c0 0320 	rsb	r3, r0, #32
 800f80c:	fa02 f303 	lsl.w	r3, r2, r3
 800f810:	430b      	orrs	r3, r1
 800f812:	40c2      	lsrs	r2, r0
 800f814:	6163      	str	r3, [r4, #20]
 800f816:	9201      	str	r2, [sp, #4]
 800f818:	9b01      	ldr	r3, [sp, #4]
 800f81a:	61a3      	str	r3, [r4, #24]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	bf0c      	ite	eq
 800f820:	2201      	moveq	r2, #1
 800f822:	2202      	movne	r2, #2
 800f824:	6122      	str	r2, [r4, #16]
 800f826:	b1a5      	cbz	r5, 800f852 <__d2b+0x92>
 800f828:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f82c:	4405      	add	r5, r0
 800f82e:	603d      	str	r5, [r7, #0]
 800f830:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f834:	6030      	str	r0, [r6, #0]
 800f836:	4620      	mov	r0, r4
 800f838:	b003      	add	sp, #12
 800f83a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f83e:	6161      	str	r1, [r4, #20]
 800f840:	e7ea      	b.n	800f818 <__d2b+0x58>
 800f842:	a801      	add	r0, sp, #4
 800f844:	f7ff fd59 	bl	800f2fa <__lo0bits>
 800f848:	9b01      	ldr	r3, [sp, #4]
 800f84a:	6163      	str	r3, [r4, #20]
 800f84c:	3020      	adds	r0, #32
 800f84e:	2201      	movs	r2, #1
 800f850:	e7e8      	b.n	800f824 <__d2b+0x64>
 800f852:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f856:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f85a:	6038      	str	r0, [r7, #0]
 800f85c:	6918      	ldr	r0, [r3, #16]
 800f85e:	f7ff fd2d 	bl	800f2bc <__hi0bits>
 800f862:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f866:	e7e5      	b.n	800f834 <__d2b+0x74>
 800f868:	08012808 	.word	0x08012808
 800f86c:	08012819 	.word	0x08012819

0800f870 <__sflush_r>:
 800f870:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f878:	0716      	lsls	r6, r2, #28
 800f87a:	4605      	mov	r5, r0
 800f87c:	460c      	mov	r4, r1
 800f87e:	d454      	bmi.n	800f92a <__sflush_r+0xba>
 800f880:	684b      	ldr	r3, [r1, #4]
 800f882:	2b00      	cmp	r3, #0
 800f884:	dc02      	bgt.n	800f88c <__sflush_r+0x1c>
 800f886:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f888:	2b00      	cmp	r3, #0
 800f88a:	dd48      	ble.n	800f91e <__sflush_r+0xae>
 800f88c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f88e:	2e00      	cmp	r6, #0
 800f890:	d045      	beq.n	800f91e <__sflush_r+0xae>
 800f892:	2300      	movs	r3, #0
 800f894:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f898:	682f      	ldr	r7, [r5, #0]
 800f89a:	6a21      	ldr	r1, [r4, #32]
 800f89c:	602b      	str	r3, [r5, #0]
 800f89e:	d030      	beq.n	800f902 <__sflush_r+0x92>
 800f8a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f8a2:	89a3      	ldrh	r3, [r4, #12]
 800f8a4:	0759      	lsls	r1, r3, #29
 800f8a6:	d505      	bpl.n	800f8b4 <__sflush_r+0x44>
 800f8a8:	6863      	ldr	r3, [r4, #4]
 800f8aa:	1ad2      	subs	r2, r2, r3
 800f8ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f8ae:	b10b      	cbz	r3, 800f8b4 <__sflush_r+0x44>
 800f8b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f8b2:	1ad2      	subs	r2, r2, r3
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f8b8:	6a21      	ldr	r1, [r4, #32]
 800f8ba:	4628      	mov	r0, r5
 800f8bc:	47b0      	blx	r6
 800f8be:	1c43      	adds	r3, r0, #1
 800f8c0:	89a3      	ldrh	r3, [r4, #12]
 800f8c2:	d106      	bne.n	800f8d2 <__sflush_r+0x62>
 800f8c4:	6829      	ldr	r1, [r5, #0]
 800f8c6:	291d      	cmp	r1, #29
 800f8c8:	d82b      	bhi.n	800f922 <__sflush_r+0xb2>
 800f8ca:	4a2a      	ldr	r2, [pc, #168]	@ (800f974 <__sflush_r+0x104>)
 800f8cc:	410a      	asrs	r2, r1
 800f8ce:	07d6      	lsls	r6, r2, #31
 800f8d0:	d427      	bmi.n	800f922 <__sflush_r+0xb2>
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	6062      	str	r2, [r4, #4]
 800f8d6:	04d9      	lsls	r1, r3, #19
 800f8d8:	6922      	ldr	r2, [r4, #16]
 800f8da:	6022      	str	r2, [r4, #0]
 800f8dc:	d504      	bpl.n	800f8e8 <__sflush_r+0x78>
 800f8de:	1c42      	adds	r2, r0, #1
 800f8e0:	d101      	bne.n	800f8e6 <__sflush_r+0x76>
 800f8e2:	682b      	ldr	r3, [r5, #0]
 800f8e4:	b903      	cbnz	r3, 800f8e8 <__sflush_r+0x78>
 800f8e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f8e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f8ea:	602f      	str	r7, [r5, #0]
 800f8ec:	b1b9      	cbz	r1, 800f91e <__sflush_r+0xae>
 800f8ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f8f2:	4299      	cmp	r1, r3
 800f8f4:	d002      	beq.n	800f8fc <__sflush_r+0x8c>
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	f7ff fbe6 	bl	800f0c8 <_free_r>
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800f900:	e00d      	b.n	800f91e <__sflush_r+0xae>
 800f902:	2301      	movs	r3, #1
 800f904:	4628      	mov	r0, r5
 800f906:	47b0      	blx	r6
 800f908:	4602      	mov	r2, r0
 800f90a:	1c50      	adds	r0, r2, #1
 800f90c:	d1c9      	bne.n	800f8a2 <__sflush_r+0x32>
 800f90e:	682b      	ldr	r3, [r5, #0]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d0c6      	beq.n	800f8a2 <__sflush_r+0x32>
 800f914:	2b1d      	cmp	r3, #29
 800f916:	d001      	beq.n	800f91c <__sflush_r+0xac>
 800f918:	2b16      	cmp	r3, #22
 800f91a:	d11e      	bne.n	800f95a <__sflush_r+0xea>
 800f91c:	602f      	str	r7, [r5, #0]
 800f91e:	2000      	movs	r0, #0
 800f920:	e022      	b.n	800f968 <__sflush_r+0xf8>
 800f922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f926:	b21b      	sxth	r3, r3
 800f928:	e01b      	b.n	800f962 <__sflush_r+0xf2>
 800f92a:	690f      	ldr	r7, [r1, #16]
 800f92c:	2f00      	cmp	r7, #0
 800f92e:	d0f6      	beq.n	800f91e <__sflush_r+0xae>
 800f930:	0793      	lsls	r3, r2, #30
 800f932:	680e      	ldr	r6, [r1, #0]
 800f934:	bf08      	it	eq
 800f936:	694b      	ldreq	r3, [r1, #20]
 800f938:	600f      	str	r7, [r1, #0]
 800f93a:	bf18      	it	ne
 800f93c:	2300      	movne	r3, #0
 800f93e:	eba6 0807 	sub.w	r8, r6, r7
 800f942:	608b      	str	r3, [r1, #8]
 800f944:	f1b8 0f00 	cmp.w	r8, #0
 800f948:	dde9      	ble.n	800f91e <__sflush_r+0xae>
 800f94a:	6a21      	ldr	r1, [r4, #32]
 800f94c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f94e:	4643      	mov	r3, r8
 800f950:	463a      	mov	r2, r7
 800f952:	4628      	mov	r0, r5
 800f954:	47b0      	blx	r6
 800f956:	2800      	cmp	r0, #0
 800f958:	dc08      	bgt.n	800f96c <__sflush_r+0xfc>
 800f95a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f95e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f962:	81a3      	strh	r3, [r4, #12]
 800f964:	f04f 30ff 	mov.w	r0, #4294967295
 800f968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f96c:	4407      	add	r7, r0
 800f96e:	eba8 0800 	sub.w	r8, r8, r0
 800f972:	e7e7      	b.n	800f944 <__sflush_r+0xd4>
 800f974:	dfbffffe 	.word	0xdfbffffe

0800f978 <_fflush_r>:
 800f978:	b538      	push	{r3, r4, r5, lr}
 800f97a:	690b      	ldr	r3, [r1, #16]
 800f97c:	4605      	mov	r5, r0
 800f97e:	460c      	mov	r4, r1
 800f980:	b913      	cbnz	r3, 800f988 <_fflush_r+0x10>
 800f982:	2500      	movs	r5, #0
 800f984:	4628      	mov	r0, r5
 800f986:	bd38      	pop	{r3, r4, r5, pc}
 800f988:	b118      	cbz	r0, 800f992 <_fflush_r+0x1a>
 800f98a:	6a03      	ldr	r3, [r0, #32]
 800f98c:	b90b      	cbnz	r3, 800f992 <_fflush_r+0x1a>
 800f98e:	f7fe fc27 	bl	800e1e0 <__sinit>
 800f992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d0f3      	beq.n	800f982 <_fflush_r+0xa>
 800f99a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f99c:	07d0      	lsls	r0, r2, #31
 800f99e:	d404      	bmi.n	800f9aa <_fflush_r+0x32>
 800f9a0:	0599      	lsls	r1, r3, #22
 800f9a2:	d402      	bmi.n	800f9aa <_fflush_r+0x32>
 800f9a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f9a6:	f7fe fd32 	bl	800e40e <__retarget_lock_acquire_recursive>
 800f9aa:	4628      	mov	r0, r5
 800f9ac:	4621      	mov	r1, r4
 800f9ae:	f7ff ff5f 	bl	800f870 <__sflush_r>
 800f9b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f9b4:	07da      	lsls	r2, r3, #31
 800f9b6:	4605      	mov	r5, r0
 800f9b8:	d4e4      	bmi.n	800f984 <_fflush_r+0xc>
 800f9ba:	89a3      	ldrh	r3, [r4, #12]
 800f9bc:	059b      	lsls	r3, r3, #22
 800f9be:	d4e1      	bmi.n	800f984 <_fflush_r+0xc>
 800f9c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f9c2:	f7fe fd25 	bl	800e410 <__retarget_lock_release_recursive>
 800f9c6:	e7dd      	b.n	800f984 <_fflush_r+0xc>

0800f9c8 <__assert_func>:
 800f9c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f9ca:	4614      	mov	r4, r2
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	4b09      	ldr	r3, [pc, #36]	@ (800f9f4 <__assert_func+0x2c>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	4605      	mov	r5, r0
 800f9d4:	68d8      	ldr	r0, [r3, #12]
 800f9d6:	b954      	cbnz	r4, 800f9ee <__assert_func+0x26>
 800f9d8:	4b07      	ldr	r3, [pc, #28]	@ (800f9f8 <__assert_func+0x30>)
 800f9da:	461c      	mov	r4, r3
 800f9dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f9e0:	9100      	str	r1, [sp, #0]
 800f9e2:	462b      	mov	r3, r5
 800f9e4:	4905      	ldr	r1, [pc, #20]	@ (800f9fc <__assert_func+0x34>)
 800f9e6:	f000 f82d 	bl	800fa44 <fiprintf>
 800f9ea:	f000 f83d 	bl	800fa68 <abort>
 800f9ee:	4b04      	ldr	r3, [pc, #16]	@ (800fa00 <__assert_func+0x38>)
 800f9f0:	e7f4      	b.n	800f9dc <__assert_func+0x14>
 800f9f2:	bf00      	nop
 800f9f4:	20000058 	.word	0x20000058
 800f9f8:	080129b5 	.word	0x080129b5
 800f9fc:	08012987 	.word	0x08012987
 800fa00:	0801297a 	.word	0x0801297a

0800fa04 <__ascii_mbtowc>:
 800fa04:	b082      	sub	sp, #8
 800fa06:	b901      	cbnz	r1, 800fa0a <__ascii_mbtowc+0x6>
 800fa08:	a901      	add	r1, sp, #4
 800fa0a:	b142      	cbz	r2, 800fa1e <__ascii_mbtowc+0x1a>
 800fa0c:	b14b      	cbz	r3, 800fa22 <__ascii_mbtowc+0x1e>
 800fa0e:	7813      	ldrb	r3, [r2, #0]
 800fa10:	600b      	str	r3, [r1, #0]
 800fa12:	7812      	ldrb	r2, [r2, #0]
 800fa14:	1e10      	subs	r0, r2, #0
 800fa16:	bf18      	it	ne
 800fa18:	2001      	movne	r0, #1
 800fa1a:	b002      	add	sp, #8
 800fa1c:	4770      	bx	lr
 800fa1e:	4610      	mov	r0, r2
 800fa20:	e7fb      	b.n	800fa1a <__ascii_mbtowc+0x16>
 800fa22:	f06f 0001 	mvn.w	r0, #1
 800fa26:	e7f8      	b.n	800fa1a <__ascii_mbtowc+0x16>

0800fa28 <__ascii_wctomb>:
 800fa28:	4603      	mov	r3, r0
 800fa2a:	4608      	mov	r0, r1
 800fa2c:	b141      	cbz	r1, 800fa40 <__ascii_wctomb+0x18>
 800fa2e:	2aff      	cmp	r2, #255	@ 0xff
 800fa30:	d904      	bls.n	800fa3c <__ascii_wctomb+0x14>
 800fa32:	228a      	movs	r2, #138	@ 0x8a
 800fa34:	601a      	str	r2, [r3, #0]
 800fa36:	f04f 30ff 	mov.w	r0, #4294967295
 800fa3a:	4770      	bx	lr
 800fa3c:	700a      	strb	r2, [r1, #0]
 800fa3e:	2001      	movs	r0, #1
 800fa40:	4770      	bx	lr
	...

0800fa44 <fiprintf>:
 800fa44:	b40e      	push	{r1, r2, r3}
 800fa46:	b503      	push	{r0, r1, lr}
 800fa48:	4601      	mov	r1, r0
 800fa4a:	ab03      	add	r3, sp, #12
 800fa4c:	4805      	ldr	r0, [pc, #20]	@ (800fa64 <fiprintf+0x20>)
 800fa4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa52:	6800      	ldr	r0, [r0, #0]
 800fa54:	9301      	str	r3, [sp, #4]
 800fa56:	f000 f837 	bl	800fac8 <_vfiprintf_r>
 800fa5a:	b002      	add	sp, #8
 800fa5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa60:	b003      	add	sp, #12
 800fa62:	4770      	bx	lr
 800fa64:	20000058 	.word	0x20000058

0800fa68 <abort>:
 800fa68:	b508      	push	{r3, lr}
 800fa6a:	2006      	movs	r0, #6
 800fa6c:	f000 fa00 	bl	800fe70 <raise>
 800fa70:	2001      	movs	r0, #1
 800fa72:	f7f8 f86f 	bl	8007b54 <_exit>

0800fa76 <__sfputc_r>:
 800fa76:	6893      	ldr	r3, [r2, #8]
 800fa78:	3b01      	subs	r3, #1
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	b410      	push	{r4}
 800fa7e:	6093      	str	r3, [r2, #8]
 800fa80:	da08      	bge.n	800fa94 <__sfputc_r+0x1e>
 800fa82:	6994      	ldr	r4, [r2, #24]
 800fa84:	42a3      	cmp	r3, r4
 800fa86:	db01      	blt.n	800fa8c <__sfputc_r+0x16>
 800fa88:	290a      	cmp	r1, #10
 800fa8a:	d103      	bne.n	800fa94 <__sfputc_r+0x1e>
 800fa8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa90:	f000 b932 	b.w	800fcf8 <__swbuf_r>
 800fa94:	6813      	ldr	r3, [r2, #0]
 800fa96:	1c58      	adds	r0, r3, #1
 800fa98:	6010      	str	r0, [r2, #0]
 800fa9a:	7019      	strb	r1, [r3, #0]
 800fa9c:	4608      	mov	r0, r1
 800fa9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800faa2:	4770      	bx	lr

0800faa4 <__sfputs_r>:
 800faa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faa6:	4606      	mov	r6, r0
 800faa8:	460f      	mov	r7, r1
 800faaa:	4614      	mov	r4, r2
 800faac:	18d5      	adds	r5, r2, r3
 800faae:	42ac      	cmp	r4, r5
 800fab0:	d101      	bne.n	800fab6 <__sfputs_r+0x12>
 800fab2:	2000      	movs	r0, #0
 800fab4:	e007      	b.n	800fac6 <__sfputs_r+0x22>
 800fab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800faba:	463a      	mov	r2, r7
 800fabc:	4630      	mov	r0, r6
 800fabe:	f7ff ffda 	bl	800fa76 <__sfputc_r>
 800fac2:	1c43      	adds	r3, r0, #1
 800fac4:	d1f3      	bne.n	800faae <__sfputs_r+0xa>
 800fac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fac8 <_vfiprintf_r>:
 800fac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800facc:	460d      	mov	r5, r1
 800face:	b09d      	sub	sp, #116	@ 0x74
 800fad0:	4614      	mov	r4, r2
 800fad2:	4698      	mov	r8, r3
 800fad4:	4606      	mov	r6, r0
 800fad6:	b118      	cbz	r0, 800fae0 <_vfiprintf_r+0x18>
 800fad8:	6a03      	ldr	r3, [r0, #32]
 800fada:	b90b      	cbnz	r3, 800fae0 <_vfiprintf_r+0x18>
 800fadc:	f7fe fb80 	bl	800e1e0 <__sinit>
 800fae0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fae2:	07d9      	lsls	r1, r3, #31
 800fae4:	d405      	bmi.n	800faf2 <_vfiprintf_r+0x2a>
 800fae6:	89ab      	ldrh	r3, [r5, #12]
 800fae8:	059a      	lsls	r2, r3, #22
 800faea:	d402      	bmi.n	800faf2 <_vfiprintf_r+0x2a>
 800faec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800faee:	f7fe fc8e 	bl	800e40e <__retarget_lock_acquire_recursive>
 800faf2:	89ab      	ldrh	r3, [r5, #12]
 800faf4:	071b      	lsls	r3, r3, #28
 800faf6:	d501      	bpl.n	800fafc <_vfiprintf_r+0x34>
 800faf8:	692b      	ldr	r3, [r5, #16]
 800fafa:	b99b      	cbnz	r3, 800fb24 <_vfiprintf_r+0x5c>
 800fafc:	4629      	mov	r1, r5
 800fafe:	4630      	mov	r0, r6
 800fb00:	f000 f938 	bl	800fd74 <__swsetup_r>
 800fb04:	b170      	cbz	r0, 800fb24 <_vfiprintf_r+0x5c>
 800fb06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb08:	07dc      	lsls	r4, r3, #31
 800fb0a:	d504      	bpl.n	800fb16 <_vfiprintf_r+0x4e>
 800fb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb10:	b01d      	add	sp, #116	@ 0x74
 800fb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb16:	89ab      	ldrh	r3, [r5, #12]
 800fb18:	0598      	lsls	r0, r3, #22
 800fb1a:	d4f7      	bmi.n	800fb0c <_vfiprintf_r+0x44>
 800fb1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fb1e:	f7fe fc77 	bl	800e410 <__retarget_lock_release_recursive>
 800fb22:	e7f3      	b.n	800fb0c <_vfiprintf_r+0x44>
 800fb24:	2300      	movs	r3, #0
 800fb26:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb28:	2320      	movs	r3, #32
 800fb2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fb2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb32:	2330      	movs	r3, #48	@ 0x30
 800fb34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fce4 <_vfiprintf_r+0x21c>
 800fb38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fb3c:	f04f 0901 	mov.w	r9, #1
 800fb40:	4623      	mov	r3, r4
 800fb42:	469a      	mov	sl, r3
 800fb44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb48:	b10a      	cbz	r2, 800fb4e <_vfiprintf_r+0x86>
 800fb4a:	2a25      	cmp	r2, #37	@ 0x25
 800fb4c:	d1f9      	bne.n	800fb42 <_vfiprintf_r+0x7a>
 800fb4e:	ebba 0b04 	subs.w	fp, sl, r4
 800fb52:	d00b      	beq.n	800fb6c <_vfiprintf_r+0xa4>
 800fb54:	465b      	mov	r3, fp
 800fb56:	4622      	mov	r2, r4
 800fb58:	4629      	mov	r1, r5
 800fb5a:	4630      	mov	r0, r6
 800fb5c:	f7ff ffa2 	bl	800faa4 <__sfputs_r>
 800fb60:	3001      	adds	r0, #1
 800fb62:	f000 80a7 	beq.w	800fcb4 <_vfiprintf_r+0x1ec>
 800fb66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb68:	445a      	add	r2, fp
 800fb6a:	9209      	str	r2, [sp, #36]	@ 0x24
 800fb6c:	f89a 3000 	ldrb.w	r3, [sl]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	f000 809f 	beq.w	800fcb4 <_vfiprintf_r+0x1ec>
 800fb76:	2300      	movs	r3, #0
 800fb78:	f04f 32ff 	mov.w	r2, #4294967295
 800fb7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb80:	f10a 0a01 	add.w	sl, sl, #1
 800fb84:	9304      	str	r3, [sp, #16]
 800fb86:	9307      	str	r3, [sp, #28]
 800fb88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fb8c:	931a      	str	r3, [sp, #104]	@ 0x68
 800fb8e:	4654      	mov	r4, sl
 800fb90:	2205      	movs	r2, #5
 800fb92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb96:	4853      	ldr	r0, [pc, #332]	@ (800fce4 <_vfiprintf_r+0x21c>)
 800fb98:	f7f0 fb3a 	bl	8000210 <memchr>
 800fb9c:	9a04      	ldr	r2, [sp, #16]
 800fb9e:	b9d8      	cbnz	r0, 800fbd8 <_vfiprintf_r+0x110>
 800fba0:	06d1      	lsls	r1, r2, #27
 800fba2:	bf44      	itt	mi
 800fba4:	2320      	movmi	r3, #32
 800fba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fbaa:	0713      	lsls	r3, r2, #28
 800fbac:	bf44      	itt	mi
 800fbae:	232b      	movmi	r3, #43	@ 0x2b
 800fbb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fbb4:	f89a 3000 	ldrb.w	r3, [sl]
 800fbb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800fbba:	d015      	beq.n	800fbe8 <_vfiprintf_r+0x120>
 800fbbc:	9a07      	ldr	r2, [sp, #28]
 800fbbe:	4654      	mov	r4, sl
 800fbc0:	2000      	movs	r0, #0
 800fbc2:	f04f 0c0a 	mov.w	ip, #10
 800fbc6:	4621      	mov	r1, r4
 800fbc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbcc:	3b30      	subs	r3, #48	@ 0x30
 800fbce:	2b09      	cmp	r3, #9
 800fbd0:	d94b      	bls.n	800fc6a <_vfiprintf_r+0x1a2>
 800fbd2:	b1b0      	cbz	r0, 800fc02 <_vfiprintf_r+0x13a>
 800fbd4:	9207      	str	r2, [sp, #28]
 800fbd6:	e014      	b.n	800fc02 <_vfiprintf_r+0x13a>
 800fbd8:	eba0 0308 	sub.w	r3, r0, r8
 800fbdc:	fa09 f303 	lsl.w	r3, r9, r3
 800fbe0:	4313      	orrs	r3, r2
 800fbe2:	9304      	str	r3, [sp, #16]
 800fbe4:	46a2      	mov	sl, r4
 800fbe6:	e7d2      	b.n	800fb8e <_vfiprintf_r+0xc6>
 800fbe8:	9b03      	ldr	r3, [sp, #12]
 800fbea:	1d19      	adds	r1, r3, #4
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	9103      	str	r1, [sp, #12]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	bfbb      	ittet	lt
 800fbf4:	425b      	neglt	r3, r3
 800fbf6:	f042 0202 	orrlt.w	r2, r2, #2
 800fbfa:	9307      	strge	r3, [sp, #28]
 800fbfc:	9307      	strlt	r3, [sp, #28]
 800fbfe:	bfb8      	it	lt
 800fc00:	9204      	strlt	r2, [sp, #16]
 800fc02:	7823      	ldrb	r3, [r4, #0]
 800fc04:	2b2e      	cmp	r3, #46	@ 0x2e
 800fc06:	d10a      	bne.n	800fc1e <_vfiprintf_r+0x156>
 800fc08:	7863      	ldrb	r3, [r4, #1]
 800fc0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc0c:	d132      	bne.n	800fc74 <_vfiprintf_r+0x1ac>
 800fc0e:	9b03      	ldr	r3, [sp, #12]
 800fc10:	1d1a      	adds	r2, r3, #4
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	9203      	str	r2, [sp, #12]
 800fc16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fc1a:	3402      	adds	r4, #2
 800fc1c:	9305      	str	r3, [sp, #20]
 800fc1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fcf4 <_vfiprintf_r+0x22c>
 800fc22:	7821      	ldrb	r1, [r4, #0]
 800fc24:	2203      	movs	r2, #3
 800fc26:	4650      	mov	r0, sl
 800fc28:	f7f0 faf2 	bl	8000210 <memchr>
 800fc2c:	b138      	cbz	r0, 800fc3e <_vfiprintf_r+0x176>
 800fc2e:	9b04      	ldr	r3, [sp, #16]
 800fc30:	eba0 000a 	sub.w	r0, r0, sl
 800fc34:	2240      	movs	r2, #64	@ 0x40
 800fc36:	4082      	lsls	r2, r0
 800fc38:	4313      	orrs	r3, r2
 800fc3a:	3401      	adds	r4, #1
 800fc3c:	9304      	str	r3, [sp, #16]
 800fc3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc42:	4829      	ldr	r0, [pc, #164]	@ (800fce8 <_vfiprintf_r+0x220>)
 800fc44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fc48:	2206      	movs	r2, #6
 800fc4a:	f7f0 fae1 	bl	8000210 <memchr>
 800fc4e:	2800      	cmp	r0, #0
 800fc50:	d03f      	beq.n	800fcd2 <_vfiprintf_r+0x20a>
 800fc52:	4b26      	ldr	r3, [pc, #152]	@ (800fcec <_vfiprintf_r+0x224>)
 800fc54:	bb1b      	cbnz	r3, 800fc9e <_vfiprintf_r+0x1d6>
 800fc56:	9b03      	ldr	r3, [sp, #12]
 800fc58:	3307      	adds	r3, #7
 800fc5a:	f023 0307 	bic.w	r3, r3, #7
 800fc5e:	3308      	adds	r3, #8
 800fc60:	9303      	str	r3, [sp, #12]
 800fc62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc64:	443b      	add	r3, r7
 800fc66:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc68:	e76a      	b.n	800fb40 <_vfiprintf_r+0x78>
 800fc6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc6e:	460c      	mov	r4, r1
 800fc70:	2001      	movs	r0, #1
 800fc72:	e7a8      	b.n	800fbc6 <_vfiprintf_r+0xfe>
 800fc74:	2300      	movs	r3, #0
 800fc76:	3401      	adds	r4, #1
 800fc78:	9305      	str	r3, [sp, #20]
 800fc7a:	4619      	mov	r1, r3
 800fc7c:	f04f 0c0a 	mov.w	ip, #10
 800fc80:	4620      	mov	r0, r4
 800fc82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc86:	3a30      	subs	r2, #48	@ 0x30
 800fc88:	2a09      	cmp	r2, #9
 800fc8a:	d903      	bls.n	800fc94 <_vfiprintf_r+0x1cc>
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d0c6      	beq.n	800fc1e <_vfiprintf_r+0x156>
 800fc90:	9105      	str	r1, [sp, #20]
 800fc92:	e7c4      	b.n	800fc1e <_vfiprintf_r+0x156>
 800fc94:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc98:	4604      	mov	r4, r0
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	e7f0      	b.n	800fc80 <_vfiprintf_r+0x1b8>
 800fc9e:	ab03      	add	r3, sp, #12
 800fca0:	9300      	str	r3, [sp, #0]
 800fca2:	462a      	mov	r2, r5
 800fca4:	4b12      	ldr	r3, [pc, #72]	@ (800fcf0 <_vfiprintf_r+0x228>)
 800fca6:	a904      	add	r1, sp, #16
 800fca8:	4630      	mov	r0, r6
 800fcaa:	f7fd fe55 	bl	800d958 <_printf_float>
 800fcae:	4607      	mov	r7, r0
 800fcb0:	1c78      	adds	r0, r7, #1
 800fcb2:	d1d6      	bne.n	800fc62 <_vfiprintf_r+0x19a>
 800fcb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fcb6:	07d9      	lsls	r1, r3, #31
 800fcb8:	d405      	bmi.n	800fcc6 <_vfiprintf_r+0x1fe>
 800fcba:	89ab      	ldrh	r3, [r5, #12]
 800fcbc:	059a      	lsls	r2, r3, #22
 800fcbe:	d402      	bmi.n	800fcc6 <_vfiprintf_r+0x1fe>
 800fcc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fcc2:	f7fe fba5 	bl	800e410 <__retarget_lock_release_recursive>
 800fcc6:	89ab      	ldrh	r3, [r5, #12]
 800fcc8:	065b      	lsls	r3, r3, #25
 800fcca:	f53f af1f 	bmi.w	800fb0c <_vfiprintf_r+0x44>
 800fcce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fcd0:	e71e      	b.n	800fb10 <_vfiprintf_r+0x48>
 800fcd2:	ab03      	add	r3, sp, #12
 800fcd4:	9300      	str	r3, [sp, #0]
 800fcd6:	462a      	mov	r2, r5
 800fcd8:	4b05      	ldr	r3, [pc, #20]	@ (800fcf0 <_vfiprintf_r+0x228>)
 800fcda:	a904      	add	r1, sp, #16
 800fcdc:	4630      	mov	r0, r6
 800fcde:	f7fe f8d3 	bl	800de88 <_printf_i>
 800fce2:	e7e4      	b.n	800fcae <_vfiprintf_r+0x1e6>
 800fce4:	08012ab7 	.word	0x08012ab7
 800fce8:	08012ac1 	.word	0x08012ac1
 800fcec:	0800d959 	.word	0x0800d959
 800fcf0:	0800faa5 	.word	0x0800faa5
 800fcf4:	08012abd 	.word	0x08012abd

0800fcf8 <__swbuf_r>:
 800fcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcfa:	460e      	mov	r6, r1
 800fcfc:	4614      	mov	r4, r2
 800fcfe:	4605      	mov	r5, r0
 800fd00:	b118      	cbz	r0, 800fd0a <__swbuf_r+0x12>
 800fd02:	6a03      	ldr	r3, [r0, #32]
 800fd04:	b90b      	cbnz	r3, 800fd0a <__swbuf_r+0x12>
 800fd06:	f7fe fa6b 	bl	800e1e0 <__sinit>
 800fd0a:	69a3      	ldr	r3, [r4, #24]
 800fd0c:	60a3      	str	r3, [r4, #8]
 800fd0e:	89a3      	ldrh	r3, [r4, #12]
 800fd10:	071a      	lsls	r2, r3, #28
 800fd12:	d501      	bpl.n	800fd18 <__swbuf_r+0x20>
 800fd14:	6923      	ldr	r3, [r4, #16]
 800fd16:	b943      	cbnz	r3, 800fd2a <__swbuf_r+0x32>
 800fd18:	4621      	mov	r1, r4
 800fd1a:	4628      	mov	r0, r5
 800fd1c:	f000 f82a 	bl	800fd74 <__swsetup_r>
 800fd20:	b118      	cbz	r0, 800fd2a <__swbuf_r+0x32>
 800fd22:	f04f 37ff 	mov.w	r7, #4294967295
 800fd26:	4638      	mov	r0, r7
 800fd28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd2a:	6823      	ldr	r3, [r4, #0]
 800fd2c:	6922      	ldr	r2, [r4, #16]
 800fd2e:	1a98      	subs	r0, r3, r2
 800fd30:	6963      	ldr	r3, [r4, #20]
 800fd32:	b2f6      	uxtb	r6, r6
 800fd34:	4283      	cmp	r3, r0
 800fd36:	4637      	mov	r7, r6
 800fd38:	dc05      	bgt.n	800fd46 <__swbuf_r+0x4e>
 800fd3a:	4621      	mov	r1, r4
 800fd3c:	4628      	mov	r0, r5
 800fd3e:	f7ff fe1b 	bl	800f978 <_fflush_r>
 800fd42:	2800      	cmp	r0, #0
 800fd44:	d1ed      	bne.n	800fd22 <__swbuf_r+0x2a>
 800fd46:	68a3      	ldr	r3, [r4, #8]
 800fd48:	3b01      	subs	r3, #1
 800fd4a:	60a3      	str	r3, [r4, #8]
 800fd4c:	6823      	ldr	r3, [r4, #0]
 800fd4e:	1c5a      	adds	r2, r3, #1
 800fd50:	6022      	str	r2, [r4, #0]
 800fd52:	701e      	strb	r6, [r3, #0]
 800fd54:	6962      	ldr	r2, [r4, #20]
 800fd56:	1c43      	adds	r3, r0, #1
 800fd58:	429a      	cmp	r2, r3
 800fd5a:	d004      	beq.n	800fd66 <__swbuf_r+0x6e>
 800fd5c:	89a3      	ldrh	r3, [r4, #12]
 800fd5e:	07db      	lsls	r3, r3, #31
 800fd60:	d5e1      	bpl.n	800fd26 <__swbuf_r+0x2e>
 800fd62:	2e0a      	cmp	r6, #10
 800fd64:	d1df      	bne.n	800fd26 <__swbuf_r+0x2e>
 800fd66:	4621      	mov	r1, r4
 800fd68:	4628      	mov	r0, r5
 800fd6a:	f7ff fe05 	bl	800f978 <_fflush_r>
 800fd6e:	2800      	cmp	r0, #0
 800fd70:	d0d9      	beq.n	800fd26 <__swbuf_r+0x2e>
 800fd72:	e7d6      	b.n	800fd22 <__swbuf_r+0x2a>

0800fd74 <__swsetup_r>:
 800fd74:	b538      	push	{r3, r4, r5, lr}
 800fd76:	4b29      	ldr	r3, [pc, #164]	@ (800fe1c <__swsetup_r+0xa8>)
 800fd78:	4605      	mov	r5, r0
 800fd7a:	6818      	ldr	r0, [r3, #0]
 800fd7c:	460c      	mov	r4, r1
 800fd7e:	b118      	cbz	r0, 800fd88 <__swsetup_r+0x14>
 800fd80:	6a03      	ldr	r3, [r0, #32]
 800fd82:	b90b      	cbnz	r3, 800fd88 <__swsetup_r+0x14>
 800fd84:	f7fe fa2c 	bl	800e1e0 <__sinit>
 800fd88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd8c:	0719      	lsls	r1, r3, #28
 800fd8e:	d422      	bmi.n	800fdd6 <__swsetup_r+0x62>
 800fd90:	06da      	lsls	r2, r3, #27
 800fd92:	d407      	bmi.n	800fda4 <__swsetup_r+0x30>
 800fd94:	2209      	movs	r2, #9
 800fd96:	602a      	str	r2, [r5, #0]
 800fd98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd9c:	81a3      	strh	r3, [r4, #12]
 800fd9e:	f04f 30ff 	mov.w	r0, #4294967295
 800fda2:	e033      	b.n	800fe0c <__swsetup_r+0x98>
 800fda4:	0758      	lsls	r0, r3, #29
 800fda6:	d512      	bpl.n	800fdce <__swsetup_r+0x5a>
 800fda8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fdaa:	b141      	cbz	r1, 800fdbe <__swsetup_r+0x4a>
 800fdac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fdb0:	4299      	cmp	r1, r3
 800fdb2:	d002      	beq.n	800fdba <__swsetup_r+0x46>
 800fdb4:	4628      	mov	r0, r5
 800fdb6:	f7ff f987 	bl	800f0c8 <_free_r>
 800fdba:	2300      	movs	r3, #0
 800fdbc:	6363      	str	r3, [r4, #52]	@ 0x34
 800fdbe:	89a3      	ldrh	r3, [r4, #12]
 800fdc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fdc4:	81a3      	strh	r3, [r4, #12]
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	6063      	str	r3, [r4, #4]
 800fdca:	6923      	ldr	r3, [r4, #16]
 800fdcc:	6023      	str	r3, [r4, #0]
 800fdce:	89a3      	ldrh	r3, [r4, #12]
 800fdd0:	f043 0308 	orr.w	r3, r3, #8
 800fdd4:	81a3      	strh	r3, [r4, #12]
 800fdd6:	6923      	ldr	r3, [r4, #16]
 800fdd8:	b94b      	cbnz	r3, 800fdee <__swsetup_r+0x7a>
 800fdda:	89a3      	ldrh	r3, [r4, #12]
 800fddc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fde0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fde4:	d003      	beq.n	800fdee <__swsetup_r+0x7a>
 800fde6:	4621      	mov	r1, r4
 800fde8:	4628      	mov	r0, r5
 800fdea:	f000 f883 	bl	800fef4 <__smakebuf_r>
 800fdee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdf2:	f013 0201 	ands.w	r2, r3, #1
 800fdf6:	d00a      	beq.n	800fe0e <__swsetup_r+0x9a>
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	60a2      	str	r2, [r4, #8]
 800fdfc:	6962      	ldr	r2, [r4, #20]
 800fdfe:	4252      	negs	r2, r2
 800fe00:	61a2      	str	r2, [r4, #24]
 800fe02:	6922      	ldr	r2, [r4, #16]
 800fe04:	b942      	cbnz	r2, 800fe18 <__swsetup_r+0xa4>
 800fe06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fe0a:	d1c5      	bne.n	800fd98 <__swsetup_r+0x24>
 800fe0c:	bd38      	pop	{r3, r4, r5, pc}
 800fe0e:	0799      	lsls	r1, r3, #30
 800fe10:	bf58      	it	pl
 800fe12:	6962      	ldrpl	r2, [r4, #20]
 800fe14:	60a2      	str	r2, [r4, #8]
 800fe16:	e7f4      	b.n	800fe02 <__swsetup_r+0x8e>
 800fe18:	2000      	movs	r0, #0
 800fe1a:	e7f7      	b.n	800fe0c <__swsetup_r+0x98>
 800fe1c:	20000058 	.word	0x20000058

0800fe20 <_raise_r>:
 800fe20:	291f      	cmp	r1, #31
 800fe22:	b538      	push	{r3, r4, r5, lr}
 800fe24:	4605      	mov	r5, r0
 800fe26:	460c      	mov	r4, r1
 800fe28:	d904      	bls.n	800fe34 <_raise_r+0x14>
 800fe2a:	2316      	movs	r3, #22
 800fe2c:	6003      	str	r3, [r0, #0]
 800fe2e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe32:	bd38      	pop	{r3, r4, r5, pc}
 800fe34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fe36:	b112      	cbz	r2, 800fe3e <_raise_r+0x1e>
 800fe38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe3c:	b94b      	cbnz	r3, 800fe52 <_raise_r+0x32>
 800fe3e:	4628      	mov	r0, r5
 800fe40:	f000 f830 	bl	800fea4 <_getpid_r>
 800fe44:	4622      	mov	r2, r4
 800fe46:	4601      	mov	r1, r0
 800fe48:	4628      	mov	r0, r5
 800fe4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe4e:	f000 b817 	b.w	800fe80 <_kill_r>
 800fe52:	2b01      	cmp	r3, #1
 800fe54:	d00a      	beq.n	800fe6c <_raise_r+0x4c>
 800fe56:	1c59      	adds	r1, r3, #1
 800fe58:	d103      	bne.n	800fe62 <_raise_r+0x42>
 800fe5a:	2316      	movs	r3, #22
 800fe5c:	6003      	str	r3, [r0, #0]
 800fe5e:	2001      	movs	r0, #1
 800fe60:	e7e7      	b.n	800fe32 <_raise_r+0x12>
 800fe62:	2100      	movs	r1, #0
 800fe64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fe68:	4620      	mov	r0, r4
 800fe6a:	4798      	blx	r3
 800fe6c:	2000      	movs	r0, #0
 800fe6e:	e7e0      	b.n	800fe32 <_raise_r+0x12>

0800fe70 <raise>:
 800fe70:	4b02      	ldr	r3, [pc, #8]	@ (800fe7c <raise+0xc>)
 800fe72:	4601      	mov	r1, r0
 800fe74:	6818      	ldr	r0, [r3, #0]
 800fe76:	f7ff bfd3 	b.w	800fe20 <_raise_r>
 800fe7a:	bf00      	nop
 800fe7c:	20000058 	.word	0x20000058

0800fe80 <_kill_r>:
 800fe80:	b538      	push	{r3, r4, r5, lr}
 800fe82:	4d07      	ldr	r5, [pc, #28]	@ (800fea0 <_kill_r+0x20>)
 800fe84:	2300      	movs	r3, #0
 800fe86:	4604      	mov	r4, r0
 800fe88:	4608      	mov	r0, r1
 800fe8a:	4611      	mov	r1, r2
 800fe8c:	602b      	str	r3, [r5, #0]
 800fe8e:	f7f7 fe51 	bl	8007b34 <_kill>
 800fe92:	1c43      	adds	r3, r0, #1
 800fe94:	d102      	bne.n	800fe9c <_kill_r+0x1c>
 800fe96:	682b      	ldr	r3, [r5, #0]
 800fe98:	b103      	cbz	r3, 800fe9c <_kill_r+0x1c>
 800fe9a:	6023      	str	r3, [r4, #0]
 800fe9c:	bd38      	pop	{r3, r4, r5, pc}
 800fe9e:	bf00      	nop
 800fea0:	20000a5c 	.word	0x20000a5c

0800fea4 <_getpid_r>:
 800fea4:	f7f7 be3e 	b.w	8007b24 <_getpid>

0800fea8 <__swhatbuf_r>:
 800fea8:	b570      	push	{r4, r5, r6, lr}
 800feaa:	460c      	mov	r4, r1
 800feac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feb0:	2900      	cmp	r1, #0
 800feb2:	b096      	sub	sp, #88	@ 0x58
 800feb4:	4615      	mov	r5, r2
 800feb6:	461e      	mov	r6, r3
 800feb8:	da0d      	bge.n	800fed6 <__swhatbuf_r+0x2e>
 800feba:	89a3      	ldrh	r3, [r4, #12]
 800febc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fec0:	f04f 0100 	mov.w	r1, #0
 800fec4:	bf14      	ite	ne
 800fec6:	2340      	movne	r3, #64	@ 0x40
 800fec8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fecc:	2000      	movs	r0, #0
 800fece:	6031      	str	r1, [r6, #0]
 800fed0:	602b      	str	r3, [r5, #0]
 800fed2:	b016      	add	sp, #88	@ 0x58
 800fed4:	bd70      	pop	{r4, r5, r6, pc}
 800fed6:	466a      	mov	r2, sp
 800fed8:	f000 f848 	bl	800ff6c <_fstat_r>
 800fedc:	2800      	cmp	r0, #0
 800fede:	dbec      	blt.n	800feba <__swhatbuf_r+0x12>
 800fee0:	9901      	ldr	r1, [sp, #4]
 800fee2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fee6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800feea:	4259      	negs	r1, r3
 800feec:	4159      	adcs	r1, r3
 800feee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fef2:	e7eb      	b.n	800fecc <__swhatbuf_r+0x24>

0800fef4 <__smakebuf_r>:
 800fef4:	898b      	ldrh	r3, [r1, #12]
 800fef6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fef8:	079d      	lsls	r5, r3, #30
 800fefa:	4606      	mov	r6, r0
 800fefc:	460c      	mov	r4, r1
 800fefe:	d507      	bpl.n	800ff10 <__smakebuf_r+0x1c>
 800ff00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ff04:	6023      	str	r3, [r4, #0]
 800ff06:	6123      	str	r3, [r4, #16]
 800ff08:	2301      	movs	r3, #1
 800ff0a:	6163      	str	r3, [r4, #20]
 800ff0c:	b003      	add	sp, #12
 800ff0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff10:	ab01      	add	r3, sp, #4
 800ff12:	466a      	mov	r2, sp
 800ff14:	f7ff ffc8 	bl	800fea8 <__swhatbuf_r>
 800ff18:	9f00      	ldr	r7, [sp, #0]
 800ff1a:	4605      	mov	r5, r0
 800ff1c:	4639      	mov	r1, r7
 800ff1e:	4630      	mov	r0, r6
 800ff20:	f7fd fbee 	bl	800d700 <_malloc_r>
 800ff24:	b948      	cbnz	r0, 800ff3a <__smakebuf_r+0x46>
 800ff26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff2a:	059a      	lsls	r2, r3, #22
 800ff2c:	d4ee      	bmi.n	800ff0c <__smakebuf_r+0x18>
 800ff2e:	f023 0303 	bic.w	r3, r3, #3
 800ff32:	f043 0302 	orr.w	r3, r3, #2
 800ff36:	81a3      	strh	r3, [r4, #12]
 800ff38:	e7e2      	b.n	800ff00 <__smakebuf_r+0xc>
 800ff3a:	89a3      	ldrh	r3, [r4, #12]
 800ff3c:	6020      	str	r0, [r4, #0]
 800ff3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff42:	81a3      	strh	r3, [r4, #12]
 800ff44:	9b01      	ldr	r3, [sp, #4]
 800ff46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ff4a:	b15b      	cbz	r3, 800ff64 <__smakebuf_r+0x70>
 800ff4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff50:	4630      	mov	r0, r6
 800ff52:	f000 f81d 	bl	800ff90 <_isatty_r>
 800ff56:	b128      	cbz	r0, 800ff64 <__smakebuf_r+0x70>
 800ff58:	89a3      	ldrh	r3, [r4, #12]
 800ff5a:	f023 0303 	bic.w	r3, r3, #3
 800ff5e:	f043 0301 	orr.w	r3, r3, #1
 800ff62:	81a3      	strh	r3, [r4, #12]
 800ff64:	89a3      	ldrh	r3, [r4, #12]
 800ff66:	431d      	orrs	r5, r3
 800ff68:	81a5      	strh	r5, [r4, #12]
 800ff6a:	e7cf      	b.n	800ff0c <__smakebuf_r+0x18>

0800ff6c <_fstat_r>:
 800ff6c:	b538      	push	{r3, r4, r5, lr}
 800ff6e:	4d07      	ldr	r5, [pc, #28]	@ (800ff8c <_fstat_r+0x20>)
 800ff70:	2300      	movs	r3, #0
 800ff72:	4604      	mov	r4, r0
 800ff74:	4608      	mov	r0, r1
 800ff76:	4611      	mov	r1, r2
 800ff78:	602b      	str	r3, [r5, #0]
 800ff7a:	f7f7 fe3b 	bl	8007bf4 <_fstat>
 800ff7e:	1c43      	adds	r3, r0, #1
 800ff80:	d102      	bne.n	800ff88 <_fstat_r+0x1c>
 800ff82:	682b      	ldr	r3, [r5, #0]
 800ff84:	b103      	cbz	r3, 800ff88 <_fstat_r+0x1c>
 800ff86:	6023      	str	r3, [r4, #0]
 800ff88:	bd38      	pop	{r3, r4, r5, pc}
 800ff8a:	bf00      	nop
 800ff8c:	20000a5c 	.word	0x20000a5c

0800ff90 <_isatty_r>:
 800ff90:	b538      	push	{r3, r4, r5, lr}
 800ff92:	4d06      	ldr	r5, [pc, #24]	@ (800ffac <_isatty_r+0x1c>)
 800ff94:	2300      	movs	r3, #0
 800ff96:	4604      	mov	r4, r0
 800ff98:	4608      	mov	r0, r1
 800ff9a:	602b      	str	r3, [r5, #0]
 800ff9c:	f7f7 fe3a 	bl	8007c14 <_isatty>
 800ffa0:	1c43      	adds	r3, r0, #1
 800ffa2:	d102      	bne.n	800ffaa <_isatty_r+0x1a>
 800ffa4:	682b      	ldr	r3, [r5, #0]
 800ffa6:	b103      	cbz	r3, 800ffaa <_isatty_r+0x1a>
 800ffa8:	6023      	str	r3, [r4, #0]
 800ffaa:	bd38      	pop	{r3, r4, r5, pc}
 800ffac:	20000a5c 	.word	0x20000a5c

0800ffb0 <pow>:
 800ffb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffb2:	ed2d 8b02 	vpush	{d8}
 800ffb6:	eeb0 8a40 	vmov.f32	s16, s0
 800ffba:	eef0 8a60 	vmov.f32	s17, s1
 800ffbe:	ec55 4b11 	vmov	r4, r5, d1
 800ffc2:	f000 fc75 	bl	80108b0 <__ieee754_pow>
 800ffc6:	4622      	mov	r2, r4
 800ffc8:	462b      	mov	r3, r5
 800ffca:	4620      	mov	r0, r4
 800ffcc:	4629      	mov	r1, r5
 800ffce:	ec57 6b10 	vmov	r6, r7, d0
 800ffd2:	f7f0 fdcb 	bl	8000b6c <__aeabi_dcmpun>
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	d13b      	bne.n	8010052 <pow+0xa2>
 800ffda:	ec51 0b18 	vmov	r0, r1, d8
 800ffde:	2200      	movs	r2, #0
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	f7f0 fd91 	bl	8000b08 <__aeabi_dcmpeq>
 800ffe6:	b1b8      	cbz	r0, 8010018 <pow+0x68>
 800ffe8:	2200      	movs	r2, #0
 800ffea:	2300      	movs	r3, #0
 800ffec:	4620      	mov	r0, r4
 800ffee:	4629      	mov	r1, r5
 800fff0:	f7f0 fd8a 	bl	8000b08 <__aeabi_dcmpeq>
 800fff4:	2800      	cmp	r0, #0
 800fff6:	d146      	bne.n	8010086 <pow+0xd6>
 800fff8:	ec45 4b10 	vmov	d0, r4, r5
 800fffc:	f000 f947 	bl	801028e <finite>
 8010000:	b338      	cbz	r0, 8010052 <pow+0xa2>
 8010002:	2200      	movs	r2, #0
 8010004:	2300      	movs	r3, #0
 8010006:	4620      	mov	r0, r4
 8010008:	4629      	mov	r1, r5
 801000a:	f7f0 fd87 	bl	8000b1c <__aeabi_dcmplt>
 801000e:	b300      	cbz	r0, 8010052 <pow+0xa2>
 8010010:	f7fe f9d2 	bl	800e3b8 <__errno>
 8010014:	2322      	movs	r3, #34	@ 0x22
 8010016:	e01b      	b.n	8010050 <pow+0xa0>
 8010018:	ec47 6b10 	vmov	d0, r6, r7
 801001c:	f000 f937 	bl	801028e <finite>
 8010020:	b9e0      	cbnz	r0, 801005c <pow+0xac>
 8010022:	eeb0 0a48 	vmov.f32	s0, s16
 8010026:	eef0 0a68 	vmov.f32	s1, s17
 801002a:	f000 f930 	bl	801028e <finite>
 801002e:	b1a8      	cbz	r0, 801005c <pow+0xac>
 8010030:	ec45 4b10 	vmov	d0, r4, r5
 8010034:	f000 f92b 	bl	801028e <finite>
 8010038:	b180      	cbz	r0, 801005c <pow+0xac>
 801003a:	4632      	mov	r2, r6
 801003c:	463b      	mov	r3, r7
 801003e:	4630      	mov	r0, r6
 8010040:	4639      	mov	r1, r7
 8010042:	f7f0 fd93 	bl	8000b6c <__aeabi_dcmpun>
 8010046:	2800      	cmp	r0, #0
 8010048:	d0e2      	beq.n	8010010 <pow+0x60>
 801004a:	f7fe f9b5 	bl	800e3b8 <__errno>
 801004e:	2321      	movs	r3, #33	@ 0x21
 8010050:	6003      	str	r3, [r0, #0]
 8010052:	ecbd 8b02 	vpop	{d8}
 8010056:	ec47 6b10 	vmov	d0, r6, r7
 801005a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801005c:	2200      	movs	r2, #0
 801005e:	2300      	movs	r3, #0
 8010060:	4630      	mov	r0, r6
 8010062:	4639      	mov	r1, r7
 8010064:	f7f0 fd50 	bl	8000b08 <__aeabi_dcmpeq>
 8010068:	2800      	cmp	r0, #0
 801006a:	d0f2      	beq.n	8010052 <pow+0xa2>
 801006c:	eeb0 0a48 	vmov.f32	s0, s16
 8010070:	eef0 0a68 	vmov.f32	s1, s17
 8010074:	f000 f90b 	bl	801028e <finite>
 8010078:	2800      	cmp	r0, #0
 801007a:	d0ea      	beq.n	8010052 <pow+0xa2>
 801007c:	ec45 4b10 	vmov	d0, r4, r5
 8010080:	f000 f905 	bl	801028e <finite>
 8010084:	e7c3      	b.n	801000e <pow+0x5e>
 8010086:	4f01      	ldr	r7, [pc, #4]	@ (801008c <pow+0xdc>)
 8010088:	2600      	movs	r6, #0
 801008a:	e7e2      	b.n	8010052 <pow+0xa2>
 801008c:	3ff00000 	.word	0x3ff00000

08010090 <sqrt>:
 8010090:	b538      	push	{r3, r4, r5, lr}
 8010092:	ed2d 8b02 	vpush	{d8}
 8010096:	ec55 4b10 	vmov	r4, r5, d0
 801009a:	f000 f95f 	bl	801035c <__ieee754_sqrt>
 801009e:	4622      	mov	r2, r4
 80100a0:	462b      	mov	r3, r5
 80100a2:	4620      	mov	r0, r4
 80100a4:	4629      	mov	r1, r5
 80100a6:	eeb0 8a40 	vmov.f32	s16, s0
 80100aa:	eef0 8a60 	vmov.f32	s17, s1
 80100ae:	f7f0 fd5d 	bl	8000b6c <__aeabi_dcmpun>
 80100b2:	b990      	cbnz	r0, 80100da <sqrt+0x4a>
 80100b4:	2200      	movs	r2, #0
 80100b6:	2300      	movs	r3, #0
 80100b8:	4620      	mov	r0, r4
 80100ba:	4629      	mov	r1, r5
 80100bc:	f7f0 fd2e 	bl	8000b1c <__aeabi_dcmplt>
 80100c0:	b158      	cbz	r0, 80100da <sqrt+0x4a>
 80100c2:	f7fe f979 	bl	800e3b8 <__errno>
 80100c6:	2321      	movs	r3, #33	@ 0x21
 80100c8:	6003      	str	r3, [r0, #0]
 80100ca:	2200      	movs	r2, #0
 80100cc:	2300      	movs	r3, #0
 80100ce:	4610      	mov	r0, r2
 80100d0:	4619      	mov	r1, r3
 80100d2:	f7f0 fbdb 	bl	800088c <__aeabi_ddiv>
 80100d6:	ec41 0b18 	vmov	d8, r0, r1
 80100da:	eeb0 0a48 	vmov.f32	s0, s16
 80100de:	eef0 0a68 	vmov.f32	s1, s17
 80100e2:	ecbd 8b02 	vpop	{d8}
 80100e6:	bd38      	pop	{r3, r4, r5, pc}

080100e8 <cos>:
 80100e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80100ea:	ec53 2b10 	vmov	r2, r3, d0
 80100ee:	4826      	ldr	r0, [pc, #152]	@ (8010188 <cos+0xa0>)
 80100f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80100f4:	4281      	cmp	r1, r0
 80100f6:	d806      	bhi.n	8010106 <cos+0x1e>
 80100f8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8010180 <cos+0x98>
 80100fc:	b005      	add	sp, #20
 80100fe:	f85d eb04 	ldr.w	lr, [sp], #4
 8010102:	f000 ba51 	b.w	80105a8 <__kernel_cos>
 8010106:	4821      	ldr	r0, [pc, #132]	@ (801018c <cos+0xa4>)
 8010108:	4281      	cmp	r1, r0
 801010a:	d908      	bls.n	801011e <cos+0x36>
 801010c:	4610      	mov	r0, r2
 801010e:	4619      	mov	r1, r3
 8010110:	f7f0 f8da 	bl	80002c8 <__aeabi_dsub>
 8010114:	ec41 0b10 	vmov	d0, r0, r1
 8010118:	b005      	add	sp, #20
 801011a:	f85d fb04 	ldr.w	pc, [sp], #4
 801011e:	4668      	mov	r0, sp
 8010120:	f001 f90a 	bl	8011338 <__ieee754_rem_pio2>
 8010124:	f000 0003 	and.w	r0, r0, #3
 8010128:	2801      	cmp	r0, #1
 801012a:	d00b      	beq.n	8010144 <cos+0x5c>
 801012c:	2802      	cmp	r0, #2
 801012e:	d015      	beq.n	801015c <cos+0x74>
 8010130:	b9d8      	cbnz	r0, 801016a <cos+0x82>
 8010132:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010136:	ed9d 0b00 	vldr	d0, [sp]
 801013a:	f000 fa35 	bl	80105a8 <__kernel_cos>
 801013e:	ec51 0b10 	vmov	r0, r1, d0
 8010142:	e7e7      	b.n	8010114 <cos+0x2c>
 8010144:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010148:	ed9d 0b00 	vldr	d0, [sp]
 801014c:	f000 faf4 	bl	8010738 <__kernel_sin>
 8010150:	ec53 2b10 	vmov	r2, r3, d0
 8010154:	4610      	mov	r0, r2
 8010156:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801015a:	e7db      	b.n	8010114 <cos+0x2c>
 801015c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010160:	ed9d 0b00 	vldr	d0, [sp]
 8010164:	f000 fa20 	bl	80105a8 <__kernel_cos>
 8010168:	e7f2      	b.n	8010150 <cos+0x68>
 801016a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801016e:	ed9d 0b00 	vldr	d0, [sp]
 8010172:	2001      	movs	r0, #1
 8010174:	f000 fae0 	bl	8010738 <__kernel_sin>
 8010178:	e7e1      	b.n	801013e <cos+0x56>
 801017a:	bf00      	nop
 801017c:	f3af 8000 	nop.w
	...
 8010188:	3fe921fb 	.word	0x3fe921fb
 801018c:	7fefffff 	.word	0x7fefffff

08010190 <acosf>:
 8010190:	b508      	push	{r3, lr}
 8010192:	ed2d 8b02 	vpush	{d8}
 8010196:	eeb0 8a40 	vmov.f32	s16, s0
 801019a:	f001 fad1 	bl	8011740 <__ieee754_acosf>
 801019e:	eeb4 8a48 	vcmp.f32	s16, s16
 80101a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101a6:	eef0 8a40 	vmov.f32	s17, s0
 80101aa:	d615      	bvs.n	80101d8 <acosf+0x48>
 80101ac:	eeb0 0a48 	vmov.f32	s0, s16
 80101b0:	f000 f866 	bl	8010280 <fabsf>
 80101b4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80101b8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80101bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101c0:	dd0a      	ble.n	80101d8 <acosf+0x48>
 80101c2:	f7fe f8f9 	bl	800e3b8 <__errno>
 80101c6:	ecbd 8b02 	vpop	{d8}
 80101ca:	2321      	movs	r3, #33	@ 0x21
 80101cc:	6003      	str	r3, [r0, #0]
 80101ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80101d2:	4804      	ldr	r0, [pc, #16]	@ (80101e4 <acosf+0x54>)
 80101d4:	f000 b866 	b.w	80102a4 <nanf>
 80101d8:	eeb0 0a68 	vmov.f32	s0, s17
 80101dc:	ecbd 8b02 	vpop	{d8}
 80101e0:	bd08      	pop	{r3, pc}
 80101e2:	bf00      	nop
 80101e4:	080129b5 	.word	0x080129b5

080101e8 <asinf>:
 80101e8:	b508      	push	{r3, lr}
 80101ea:	ed2d 8b02 	vpush	{d8}
 80101ee:	eeb0 8a40 	vmov.f32	s16, s0
 80101f2:	f001 fb9d 	bl	8011930 <__ieee754_asinf>
 80101f6:	eeb4 8a48 	vcmp.f32	s16, s16
 80101fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101fe:	eef0 8a40 	vmov.f32	s17, s0
 8010202:	d615      	bvs.n	8010230 <asinf+0x48>
 8010204:	eeb0 0a48 	vmov.f32	s0, s16
 8010208:	f000 f83a 	bl	8010280 <fabsf>
 801020c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010210:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010218:	dd0a      	ble.n	8010230 <asinf+0x48>
 801021a:	f7fe f8cd 	bl	800e3b8 <__errno>
 801021e:	ecbd 8b02 	vpop	{d8}
 8010222:	2321      	movs	r3, #33	@ 0x21
 8010224:	6003      	str	r3, [r0, #0]
 8010226:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801022a:	4804      	ldr	r0, [pc, #16]	@ (801023c <asinf+0x54>)
 801022c:	f000 b83a 	b.w	80102a4 <nanf>
 8010230:	eeb0 0a68 	vmov.f32	s0, s17
 8010234:	ecbd 8b02 	vpop	{d8}
 8010238:	bd08      	pop	{r3, pc}
 801023a:	bf00      	nop
 801023c:	080129b5 	.word	0x080129b5

08010240 <atan2f>:
 8010240:	f001 bc5c 	b.w	8011afc <__ieee754_atan2f>

08010244 <sqrtf>:
 8010244:	b508      	push	{r3, lr}
 8010246:	ed2d 8b02 	vpush	{d8}
 801024a:	eeb0 8a40 	vmov.f32	s16, s0
 801024e:	f000 f95f 	bl	8010510 <__ieee754_sqrtf>
 8010252:	eeb4 8a48 	vcmp.f32	s16, s16
 8010256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801025a:	d60c      	bvs.n	8010276 <sqrtf+0x32>
 801025c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801027c <sqrtf+0x38>
 8010260:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010268:	d505      	bpl.n	8010276 <sqrtf+0x32>
 801026a:	f7fe f8a5 	bl	800e3b8 <__errno>
 801026e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010272:	2321      	movs	r3, #33	@ 0x21
 8010274:	6003      	str	r3, [r0, #0]
 8010276:	ecbd 8b02 	vpop	{d8}
 801027a:	bd08      	pop	{r3, pc}
 801027c:	00000000 	.word	0x00000000

08010280 <fabsf>:
 8010280:	ee10 3a10 	vmov	r3, s0
 8010284:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010288:	ee00 3a10 	vmov	s0, r3
 801028c:	4770      	bx	lr

0801028e <finite>:
 801028e:	b082      	sub	sp, #8
 8010290:	ed8d 0b00 	vstr	d0, [sp]
 8010294:	9801      	ldr	r0, [sp, #4]
 8010296:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801029a:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801029e:	0fc0      	lsrs	r0, r0, #31
 80102a0:	b002      	add	sp, #8
 80102a2:	4770      	bx	lr

080102a4 <nanf>:
 80102a4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80102ac <nanf+0x8>
 80102a8:	4770      	bx	lr
 80102aa:	bf00      	nop
 80102ac:	7fc00000 	.word	0x7fc00000

080102b0 <fmaxf>:
 80102b0:	b508      	push	{r3, lr}
 80102b2:	ed2d 8b02 	vpush	{d8}
 80102b6:	eeb0 8a40 	vmov.f32	s16, s0
 80102ba:	eef0 8a60 	vmov.f32	s17, s1
 80102be:	f000 f831 	bl	8010324 <__fpclassifyf>
 80102c2:	b930      	cbnz	r0, 80102d2 <fmaxf+0x22>
 80102c4:	eeb0 8a68 	vmov.f32	s16, s17
 80102c8:	eeb0 0a48 	vmov.f32	s0, s16
 80102cc:	ecbd 8b02 	vpop	{d8}
 80102d0:	bd08      	pop	{r3, pc}
 80102d2:	eeb0 0a68 	vmov.f32	s0, s17
 80102d6:	f000 f825 	bl	8010324 <__fpclassifyf>
 80102da:	2800      	cmp	r0, #0
 80102dc:	d0f4      	beq.n	80102c8 <fmaxf+0x18>
 80102de:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80102e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102e6:	dded      	ble.n	80102c4 <fmaxf+0x14>
 80102e8:	e7ee      	b.n	80102c8 <fmaxf+0x18>

080102ea <fminf>:
 80102ea:	b508      	push	{r3, lr}
 80102ec:	ed2d 8b02 	vpush	{d8}
 80102f0:	eeb0 8a40 	vmov.f32	s16, s0
 80102f4:	eef0 8a60 	vmov.f32	s17, s1
 80102f8:	f000 f814 	bl	8010324 <__fpclassifyf>
 80102fc:	b930      	cbnz	r0, 801030c <fminf+0x22>
 80102fe:	eeb0 8a68 	vmov.f32	s16, s17
 8010302:	eeb0 0a48 	vmov.f32	s0, s16
 8010306:	ecbd 8b02 	vpop	{d8}
 801030a:	bd08      	pop	{r3, pc}
 801030c:	eeb0 0a68 	vmov.f32	s0, s17
 8010310:	f000 f808 	bl	8010324 <__fpclassifyf>
 8010314:	2800      	cmp	r0, #0
 8010316:	d0f4      	beq.n	8010302 <fminf+0x18>
 8010318:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801031c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010320:	d5ed      	bpl.n	80102fe <fminf+0x14>
 8010322:	e7ee      	b.n	8010302 <fminf+0x18>

08010324 <__fpclassifyf>:
 8010324:	ee10 3a10 	vmov	r3, s0
 8010328:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 801032c:	d00d      	beq.n	801034a <__fpclassifyf+0x26>
 801032e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8010332:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8010336:	d30a      	bcc.n	801034e <__fpclassifyf+0x2a>
 8010338:	4b07      	ldr	r3, [pc, #28]	@ (8010358 <__fpclassifyf+0x34>)
 801033a:	1e42      	subs	r2, r0, #1
 801033c:	429a      	cmp	r2, r3
 801033e:	d908      	bls.n	8010352 <__fpclassifyf+0x2e>
 8010340:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8010344:	4258      	negs	r0, r3
 8010346:	4158      	adcs	r0, r3
 8010348:	4770      	bx	lr
 801034a:	2002      	movs	r0, #2
 801034c:	4770      	bx	lr
 801034e:	2004      	movs	r0, #4
 8010350:	4770      	bx	lr
 8010352:	2003      	movs	r0, #3
 8010354:	4770      	bx	lr
 8010356:	bf00      	nop
 8010358:	007ffffe 	.word	0x007ffffe

0801035c <__ieee754_sqrt>:
 801035c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010360:	4a68      	ldr	r2, [pc, #416]	@ (8010504 <__ieee754_sqrt+0x1a8>)
 8010362:	ec55 4b10 	vmov	r4, r5, d0
 8010366:	43aa      	bics	r2, r5
 8010368:	462b      	mov	r3, r5
 801036a:	4621      	mov	r1, r4
 801036c:	d110      	bne.n	8010390 <__ieee754_sqrt+0x34>
 801036e:	4622      	mov	r2, r4
 8010370:	4620      	mov	r0, r4
 8010372:	4629      	mov	r1, r5
 8010374:	f7f0 f960 	bl	8000638 <__aeabi_dmul>
 8010378:	4602      	mov	r2, r0
 801037a:	460b      	mov	r3, r1
 801037c:	4620      	mov	r0, r4
 801037e:	4629      	mov	r1, r5
 8010380:	f7ef ffa4 	bl	80002cc <__adddf3>
 8010384:	4604      	mov	r4, r0
 8010386:	460d      	mov	r5, r1
 8010388:	ec45 4b10 	vmov	d0, r4, r5
 801038c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010390:	2d00      	cmp	r5, #0
 8010392:	dc0e      	bgt.n	80103b2 <__ieee754_sqrt+0x56>
 8010394:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010398:	4322      	orrs	r2, r4
 801039a:	d0f5      	beq.n	8010388 <__ieee754_sqrt+0x2c>
 801039c:	b19d      	cbz	r5, 80103c6 <__ieee754_sqrt+0x6a>
 801039e:	4622      	mov	r2, r4
 80103a0:	4620      	mov	r0, r4
 80103a2:	4629      	mov	r1, r5
 80103a4:	f7ef ff90 	bl	80002c8 <__aeabi_dsub>
 80103a8:	4602      	mov	r2, r0
 80103aa:	460b      	mov	r3, r1
 80103ac:	f7f0 fa6e 	bl	800088c <__aeabi_ddiv>
 80103b0:	e7e8      	b.n	8010384 <__ieee754_sqrt+0x28>
 80103b2:	152a      	asrs	r2, r5, #20
 80103b4:	d115      	bne.n	80103e2 <__ieee754_sqrt+0x86>
 80103b6:	2000      	movs	r0, #0
 80103b8:	e009      	b.n	80103ce <__ieee754_sqrt+0x72>
 80103ba:	0acb      	lsrs	r3, r1, #11
 80103bc:	3a15      	subs	r2, #21
 80103be:	0549      	lsls	r1, r1, #21
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d0fa      	beq.n	80103ba <__ieee754_sqrt+0x5e>
 80103c4:	e7f7      	b.n	80103b6 <__ieee754_sqrt+0x5a>
 80103c6:	462a      	mov	r2, r5
 80103c8:	e7fa      	b.n	80103c0 <__ieee754_sqrt+0x64>
 80103ca:	005b      	lsls	r3, r3, #1
 80103cc:	3001      	adds	r0, #1
 80103ce:	02dc      	lsls	r4, r3, #11
 80103d0:	d5fb      	bpl.n	80103ca <__ieee754_sqrt+0x6e>
 80103d2:	1e44      	subs	r4, r0, #1
 80103d4:	1b12      	subs	r2, r2, r4
 80103d6:	f1c0 0420 	rsb	r4, r0, #32
 80103da:	fa21 f404 	lsr.w	r4, r1, r4
 80103de:	4323      	orrs	r3, r4
 80103e0:	4081      	lsls	r1, r0
 80103e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80103e6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80103ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80103ee:	07d2      	lsls	r2, r2, #31
 80103f0:	bf5c      	itt	pl
 80103f2:	005b      	lslpl	r3, r3, #1
 80103f4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80103f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80103fc:	bf58      	it	pl
 80103fe:	0049      	lslpl	r1, r1, #1
 8010400:	2600      	movs	r6, #0
 8010402:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010406:	106d      	asrs	r5, r5, #1
 8010408:	0049      	lsls	r1, r1, #1
 801040a:	2016      	movs	r0, #22
 801040c:	4632      	mov	r2, r6
 801040e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8010412:	1917      	adds	r7, r2, r4
 8010414:	429f      	cmp	r7, r3
 8010416:	bfde      	ittt	le
 8010418:	193a      	addle	r2, r7, r4
 801041a:	1bdb      	suble	r3, r3, r7
 801041c:	1936      	addle	r6, r6, r4
 801041e:	0fcf      	lsrs	r7, r1, #31
 8010420:	3801      	subs	r0, #1
 8010422:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8010426:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801042a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801042e:	d1f0      	bne.n	8010412 <__ieee754_sqrt+0xb6>
 8010430:	4604      	mov	r4, r0
 8010432:	2720      	movs	r7, #32
 8010434:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010438:	429a      	cmp	r2, r3
 801043a:	eb00 0e0c 	add.w	lr, r0, ip
 801043e:	db02      	blt.n	8010446 <__ieee754_sqrt+0xea>
 8010440:	d113      	bne.n	801046a <__ieee754_sqrt+0x10e>
 8010442:	458e      	cmp	lr, r1
 8010444:	d811      	bhi.n	801046a <__ieee754_sqrt+0x10e>
 8010446:	f1be 0f00 	cmp.w	lr, #0
 801044a:	eb0e 000c 	add.w	r0, lr, ip
 801044e:	da42      	bge.n	80104d6 <__ieee754_sqrt+0x17a>
 8010450:	2800      	cmp	r0, #0
 8010452:	db40      	blt.n	80104d6 <__ieee754_sqrt+0x17a>
 8010454:	f102 0801 	add.w	r8, r2, #1
 8010458:	1a9b      	subs	r3, r3, r2
 801045a:	458e      	cmp	lr, r1
 801045c:	bf88      	it	hi
 801045e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010462:	eba1 010e 	sub.w	r1, r1, lr
 8010466:	4464      	add	r4, ip
 8010468:	4642      	mov	r2, r8
 801046a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801046e:	3f01      	subs	r7, #1
 8010470:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8010474:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010478:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801047c:	d1dc      	bne.n	8010438 <__ieee754_sqrt+0xdc>
 801047e:	4319      	orrs	r1, r3
 8010480:	d01b      	beq.n	80104ba <__ieee754_sqrt+0x15e>
 8010482:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010508 <__ieee754_sqrt+0x1ac>
 8010486:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801050c <__ieee754_sqrt+0x1b0>
 801048a:	e9da 0100 	ldrd	r0, r1, [sl]
 801048e:	e9db 2300 	ldrd	r2, r3, [fp]
 8010492:	f7ef ff19 	bl	80002c8 <__aeabi_dsub>
 8010496:	e9da 8900 	ldrd	r8, r9, [sl]
 801049a:	4602      	mov	r2, r0
 801049c:	460b      	mov	r3, r1
 801049e:	4640      	mov	r0, r8
 80104a0:	4649      	mov	r1, r9
 80104a2:	f7f0 fb45 	bl	8000b30 <__aeabi_dcmple>
 80104a6:	b140      	cbz	r0, 80104ba <__ieee754_sqrt+0x15e>
 80104a8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80104ac:	e9da 0100 	ldrd	r0, r1, [sl]
 80104b0:	e9db 2300 	ldrd	r2, r3, [fp]
 80104b4:	d111      	bne.n	80104da <__ieee754_sqrt+0x17e>
 80104b6:	3601      	adds	r6, #1
 80104b8:	463c      	mov	r4, r7
 80104ba:	1072      	asrs	r2, r6, #1
 80104bc:	0863      	lsrs	r3, r4, #1
 80104be:	07f1      	lsls	r1, r6, #31
 80104c0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80104c4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80104c8:	bf48      	it	mi
 80104ca:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80104ce:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80104d2:	4618      	mov	r0, r3
 80104d4:	e756      	b.n	8010384 <__ieee754_sqrt+0x28>
 80104d6:	4690      	mov	r8, r2
 80104d8:	e7be      	b.n	8010458 <__ieee754_sqrt+0xfc>
 80104da:	f7ef fef7 	bl	80002cc <__adddf3>
 80104de:	e9da 8900 	ldrd	r8, r9, [sl]
 80104e2:	4602      	mov	r2, r0
 80104e4:	460b      	mov	r3, r1
 80104e6:	4640      	mov	r0, r8
 80104e8:	4649      	mov	r1, r9
 80104ea:	f7f0 fb17 	bl	8000b1c <__aeabi_dcmplt>
 80104ee:	b120      	cbz	r0, 80104fa <__ieee754_sqrt+0x19e>
 80104f0:	1ca0      	adds	r0, r4, #2
 80104f2:	bf08      	it	eq
 80104f4:	3601      	addeq	r6, #1
 80104f6:	3402      	adds	r4, #2
 80104f8:	e7df      	b.n	80104ba <__ieee754_sqrt+0x15e>
 80104fa:	1c63      	adds	r3, r4, #1
 80104fc:	f023 0401 	bic.w	r4, r3, #1
 8010500:	e7db      	b.n	80104ba <__ieee754_sqrt+0x15e>
 8010502:	bf00      	nop
 8010504:	7ff00000 	.word	0x7ff00000
 8010508:	20000220 	.word	0x20000220
 801050c:	20000218 	.word	0x20000218

08010510 <__ieee754_sqrtf>:
 8010510:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010514:	4770      	bx	lr
	...

08010518 <round>:
 8010518:	ec51 0b10 	vmov	r0, r1, d0
 801051c:	b570      	push	{r4, r5, r6, lr}
 801051e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8010522:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8010526:	2a13      	cmp	r2, #19
 8010528:	460b      	mov	r3, r1
 801052a:	4605      	mov	r5, r0
 801052c:	dc1b      	bgt.n	8010566 <round+0x4e>
 801052e:	2a00      	cmp	r2, #0
 8010530:	da0b      	bge.n	801054a <round+0x32>
 8010532:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8010536:	3201      	adds	r2, #1
 8010538:	bf04      	itt	eq
 801053a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 801053e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8010542:	2200      	movs	r2, #0
 8010544:	4619      	mov	r1, r3
 8010546:	4610      	mov	r0, r2
 8010548:	e015      	b.n	8010576 <round+0x5e>
 801054a:	4c15      	ldr	r4, [pc, #84]	@ (80105a0 <round+0x88>)
 801054c:	4114      	asrs	r4, r2
 801054e:	ea04 0601 	and.w	r6, r4, r1
 8010552:	4306      	orrs	r6, r0
 8010554:	d00f      	beq.n	8010576 <round+0x5e>
 8010556:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 801055a:	fa41 f202 	asr.w	r2, r1, r2
 801055e:	4413      	add	r3, r2
 8010560:	ea23 0304 	bic.w	r3, r3, r4
 8010564:	e7ed      	b.n	8010542 <round+0x2a>
 8010566:	2a33      	cmp	r2, #51	@ 0x33
 8010568:	dd08      	ble.n	801057c <round+0x64>
 801056a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801056e:	d102      	bne.n	8010576 <round+0x5e>
 8010570:	4602      	mov	r2, r0
 8010572:	f7ef feab 	bl	80002cc <__adddf3>
 8010576:	ec41 0b10 	vmov	d0, r0, r1
 801057a:	bd70      	pop	{r4, r5, r6, pc}
 801057c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8010580:	f04f 34ff 	mov.w	r4, #4294967295
 8010584:	40f4      	lsrs	r4, r6
 8010586:	4204      	tst	r4, r0
 8010588:	d0f5      	beq.n	8010576 <round+0x5e>
 801058a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 801058e:	2201      	movs	r2, #1
 8010590:	408a      	lsls	r2, r1
 8010592:	1952      	adds	r2, r2, r5
 8010594:	bf28      	it	cs
 8010596:	3301      	addcs	r3, #1
 8010598:	ea22 0204 	bic.w	r2, r2, r4
 801059c:	e7d2      	b.n	8010544 <round+0x2c>
 801059e:	bf00      	nop
 80105a0:	000fffff 	.word	0x000fffff
 80105a4:	00000000 	.word	0x00000000

080105a8 <__kernel_cos>:
 80105a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105ac:	ec57 6b10 	vmov	r6, r7, d0
 80105b0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80105b4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80105b8:	ed8d 1b00 	vstr	d1, [sp]
 80105bc:	d206      	bcs.n	80105cc <__kernel_cos+0x24>
 80105be:	4630      	mov	r0, r6
 80105c0:	4639      	mov	r1, r7
 80105c2:	f7f0 fae9 	bl	8000b98 <__aeabi_d2iz>
 80105c6:	2800      	cmp	r0, #0
 80105c8:	f000 8088 	beq.w	80106dc <__kernel_cos+0x134>
 80105cc:	4632      	mov	r2, r6
 80105ce:	463b      	mov	r3, r7
 80105d0:	4630      	mov	r0, r6
 80105d2:	4639      	mov	r1, r7
 80105d4:	f7f0 f830 	bl	8000638 <__aeabi_dmul>
 80105d8:	4b51      	ldr	r3, [pc, #324]	@ (8010720 <__kernel_cos+0x178>)
 80105da:	2200      	movs	r2, #0
 80105dc:	4604      	mov	r4, r0
 80105de:	460d      	mov	r5, r1
 80105e0:	f7f0 f82a 	bl	8000638 <__aeabi_dmul>
 80105e4:	a340      	add	r3, pc, #256	@ (adr r3, 80106e8 <__kernel_cos+0x140>)
 80105e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ea:	4682      	mov	sl, r0
 80105ec:	468b      	mov	fp, r1
 80105ee:	4620      	mov	r0, r4
 80105f0:	4629      	mov	r1, r5
 80105f2:	f7f0 f821 	bl	8000638 <__aeabi_dmul>
 80105f6:	a33e      	add	r3, pc, #248	@ (adr r3, 80106f0 <__kernel_cos+0x148>)
 80105f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105fc:	f7ef fe66 	bl	80002cc <__adddf3>
 8010600:	4622      	mov	r2, r4
 8010602:	462b      	mov	r3, r5
 8010604:	f7f0 f818 	bl	8000638 <__aeabi_dmul>
 8010608:	a33b      	add	r3, pc, #236	@ (adr r3, 80106f8 <__kernel_cos+0x150>)
 801060a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801060e:	f7ef fe5b 	bl	80002c8 <__aeabi_dsub>
 8010612:	4622      	mov	r2, r4
 8010614:	462b      	mov	r3, r5
 8010616:	f7f0 f80f 	bl	8000638 <__aeabi_dmul>
 801061a:	a339      	add	r3, pc, #228	@ (adr r3, 8010700 <__kernel_cos+0x158>)
 801061c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010620:	f7ef fe54 	bl	80002cc <__adddf3>
 8010624:	4622      	mov	r2, r4
 8010626:	462b      	mov	r3, r5
 8010628:	f7f0 f806 	bl	8000638 <__aeabi_dmul>
 801062c:	a336      	add	r3, pc, #216	@ (adr r3, 8010708 <__kernel_cos+0x160>)
 801062e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010632:	f7ef fe49 	bl	80002c8 <__aeabi_dsub>
 8010636:	4622      	mov	r2, r4
 8010638:	462b      	mov	r3, r5
 801063a:	f7ef fffd 	bl	8000638 <__aeabi_dmul>
 801063e:	a334      	add	r3, pc, #208	@ (adr r3, 8010710 <__kernel_cos+0x168>)
 8010640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010644:	f7ef fe42 	bl	80002cc <__adddf3>
 8010648:	4622      	mov	r2, r4
 801064a:	462b      	mov	r3, r5
 801064c:	f7ef fff4 	bl	8000638 <__aeabi_dmul>
 8010650:	4622      	mov	r2, r4
 8010652:	462b      	mov	r3, r5
 8010654:	f7ef fff0 	bl	8000638 <__aeabi_dmul>
 8010658:	e9dd 2300 	ldrd	r2, r3, [sp]
 801065c:	4604      	mov	r4, r0
 801065e:	460d      	mov	r5, r1
 8010660:	4630      	mov	r0, r6
 8010662:	4639      	mov	r1, r7
 8010664:	f7ef ffe8 	bl	8000638 <__aeabi_dmul>
 8010668:	460b      	mov	r3, r1
 801066a:	4602      	mov	r2, r0
 801066c:	4629      	mov	r1, r5
 801066e:	4620      	mov	r0, r4
 8010670:	f7ef fe2a 	bl	80002c8 <__aeabi_dsub>
 8010674:	4b2b      	ldr	r3, [pc, #172]	@ (8010724 <__kernel_cos+0x17c>)
 8010676:	4598      	cmp	r8, r3
 8010678:	4606      	mov	r6, r0
 801067a:	460f      	mov	r7, r1
 801067c:	d810      	bhi.n	80106a0 <__kernel_cos+0xf8>
 801067e:	4602      	mov	r2, r0
 8010680:	460b      	mov	r3, r1
 8010682:	4650      	mov	r0, sl
 8010684:	4659      	mov	r1, fp
 8010686:	f7ef fe1f 	bl	80002c8 <__aeabi_dsub>
 801068a:	460b      	mov	r3, r1
 801068c:	4926      	ldr	r1, [pc, #152]	@ (8010728 <__kernel_cos+0x180>)
 801068e:	4602      	mov	r2, r0
 8010690:	2000      	movs	r0, #0
 8010692:	f7ef fe19 	bl	80002c8 <__aeabi_dsub>
 8010696:	ec41 0b10 	vmov	d0, r0, r1
 801069a:	b003      	add	sp, #12
 801069c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106a0:	4b22      	ldr	r3, [pc, #136]	@ (801072c <__kernel_cos+0x184>)
 80106a2:	4921      	ldr	r1, [pc, #132]	@ (8010728 <__kernel_cos+0x180>)
 80106a4:	4598      	cmp	r8, r3
 80106a6:	bf8c      	ite	hi
 80106a8:	4d21      	ldrhi	r5, [pc, #132]	@ (8010730 <__kernel_cos+0x188>)
 80106aa:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80106ae:	2400      	movs	r4, #0
 80106b0:	4622      	mov	r2, r4
 80106b2:	462b      	mov	r3, r5
 80106b4:	2000      	movs	r0, #0
 80106b6:	f7ef fe07 	bl	80002c8 <__aeabi_dsub>
 80106ba:	4622      	mov	r2, r4
 80106bc:	4680      	mov	r8, r0
 80106be:	4689      	mov	r9, r1
 80106c0:	462b      	mov	r3, r5
 80106c2:	4650      	mov	r0, sl
 80106c4:	4659      	mov	r1, fp
 80106c6:	f7ef fdff 	bl	80002c8 <__aeabi_dsub>
 80106ca:	4632      	mov	r2, r6
 80106cc:	463b      	mov	r3, r7
 80106ce:	f7ef fdfb 	bl	80002c8 <__aeabi_dsub>
 80106d2:	4602      	mov	r2, r0
 80106d4:	460b      	mov	r3, r1
 80106d6:	4640      	mov	r0, r8
 80106d8:	4649      	mov	r1, r9
 80106da:	e7da      	b.n	8010692 <__kernel_cos+0xea>
 80106dc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8010718 <__kernel_cos+0x170>
 80106e0:	e7db      	b.n	801069a <__kernel_cos+0xf2>
 80106e2:	bf00      	nop
 80106e4:	f3af 8000 	nop.w
 80106e8:	be8838d4 	.word	0xbe8838d4
 80106ec:	bda8fae9 	.word	0xbda8fae9
 80106f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80106f4:	3e21ee9e 	.word	0x3e21ee9e
 80106f8:	809c52ad 	.word	0x809c52ad
 80106fc:	3e927e4f 	.word	0x3e927e4f
 8010700:	19cb1590 	.word	0x19cb1590
 8010704:	3efa01a0 	.word	0x3efa01a0
 8010708:	16c15177 	.word	0x16c15177
 801070c:	3f56c16c 	.word	0x3f56c16c
 8010710:	5555554c 	.word	0x5555554c
 8010714:	3fa55555 	.word	0x3fa55555
 8010718:	00000000 	.word	0x00000000
 801071c:	3ff00000 	.word	0x3ff00000
 8010720:	3fe00000 	.word	0x3fe00000
 8010724:	3fd33332 	.word	0x3fd33332
 8010728:	3ff00000 	.word	0x3ff00000
 801072c:	3fe90000 	.word	0x3fe90000
 8010730:	3fd20000 	.word	0x3fd20000
 8010734:	00000000 	.word	0x00000000

08010738 <__kernel_sin>:
 8010738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801073c:	ec55 4b10 	vmov	r4, r5, d0
 8010740:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010744:	b085      	sub	sp, #20
 8010746:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801074a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801074e:	4680      	mov	r8, r0
 8010750:	d205      	bcs.n	801075e <__kernel_sin+0x26>
 8010752:	4620      	mov	r0, r4
 8010754:	4629      	mov	r1, r5
 8010756:	f7f0 fa1f 	bl	8000b98 <__aeabi_d2iz>
 801075a:	2800      	cmp	r0, #0
 801075c:	d052      	beq.n	8010804 <__kernel_sin+0xcc>
 801075e:	4622      	mov	r2, r4
 8010760:	462b      	mov	r3, r5
 8010762:	4620      	mov	r0, r4
 8010764:	4629      	mov	r1, r5
 8010766:	f7ef ff67 	bl	8000638 <__aeabi_dmul>
 801076a:	4682      	mov	sl, r0
 801076c:	468b      	mov	fp, r1
 801076e:	4602      	mov	r2, r0
 8010770:	460b      	mov	r3, r1
 8010772:	4620      	mov	r0, r4
 8010774:	4629      	mov	r1, r5
 8010776:	f7ef ff5f 	bl	8000638 <__aeabi_dmul>
 801077a:	a342      	add	r3, pc, #264	@ (adr r3, 8010884 <__kernel_sin+0x14c>)
 801077c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010780:	e9cd 0100 	strd	r0, r1, [sp]
 8010784:	4650      	mov	r0, sl
 8010786:	4659      	mov	r1, fp
 8010788:	f7ef ff56 	bl	8000638 <__aeabi_dmul>
 801078c:	a33f      	add	r3, pc, #252	@ (adr r3, 801088c <__kernel_sin+0x154>)
 801078e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010792:	f7ef fd99 	bl	80002c8 <__aeabi_dsub>
 8010796:	4652      	mov	r2, sl
 8010798:	465b      	mov	r3, fp
 801079a:	f7ef ff4d 	bl	8000638 <__aeabi_dmul>
 801079e:	a33d      	add	r3, pc, #244	@ (adr r3, 8010894 <__kernel_sin+0x15c>)
 80107a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a4:	f7ef fd92 	bl	80002cc <__adddf3>
 80107a8:	4652      	mov	r2, sl
 80107aa:	465b      	mov	r3, fp
 80107ac:	f7ef ff44 	bl	8000638 <__aeabi_dmul>
 80107b0:	a33a      	add	r3, pc, #232	@ (adr r3, 801089c <__kernel_sin+0x164>)
 80107b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b6:	f7ef fd87 	bl	80002c8 <__aeabi_dsub>
 80107ba:	4652      	mov	r2, sl
 80107bc:	465b      	mov	r3, fp
 80107be:	f7ef ff3b 	bl	8000638 <__aeabi_dmul>
 80107c2:	a338      	add	r3, pc, #224	@ (adr r3, 80108a4 <__kernel_sin+0x16c>)
 80107c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c8:	f7ef fd80 	bl	80002cc <__adddf3>
 80107cc:	4606      	mov	r6, r0
 80107ce:	460f      	mov	r7, r1
 80107d0:	f1b8 0f00 	cmp.w	r8, #0
 80107d4:	d11b      	bne.n	801080e <__kernel_sin+0xd6>
 80107d6:	4602      	mov	r2, r0
 80107d8:	460b      	mov	r3, r1
 80107da:	4650      	mov	r0, sl
 80107dc:	4659      	mov	r1, fp
 80107de:	f7ef ff2b 	bl	8000638 <__aeabi_dmul>
 80107e2:	a325      	add	r3, pc, #148	@ (adr r3, 8010878 <__kernel_sin+0x140>)
 80107e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e8:	f7ef fd6e 	bl	80002c8 <__aeabi_dsub>
 80107ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80107f0:	f7ef ff22 	bl	8000638 <__aeabi_dmul>
 80107f4:	4602      	mov	r2, r0
 80107f6:	460b      	mov	r3, r1
 80107f8:	4620      	mov	r0, r4
 80107fa:	4629      	mov	r1, r5
 80107fc:	f7ef fd66 	bl	80002cc <__adddf3>
 8010800:	4604      	mov	r4, r0
 8010802:	460d      	mov	r5, r1
 8010804:	ec45 4b10 	vmov	d0, r4, r5
 8010808:	b005      	add	sp, #20
 801080a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801080e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010812:	4b1b      	ldr	r3, [pc, #108]	@ (8010880 <__kernel_sin+0x148>)
 8010814:	2200      	movs	r2, #0
 8010816:	f7ef ff0f 	bl	8000638 <__aeabi_dmul>
 801081a:	4632      	mov	r2, r6
 801081c:	4680      	mov	r8, r0
 801081e:	4689      	mov	r9, r1
 8010820:	463b      	mov	r3, r7
 8010822:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010826:	f7ef ff07 	bl	8000638 <__aeabi_dmul>
 801082a:	4602      	mov	r2, r0
 801082c:	460b      	mov	r3, r1
 801082e:	4640      	mov	r0, r8
 8010830:	4649      	mov	r1, r9
 8010832:	f7ef fd49 	bl	80002c8 <__aeabi_dsub>
 8010836:	4652      	mov	r2, sl
 8010838:	465b      	mov	r3, fp
 801083a:	f7ef fefd 	bl	8000638 <__aeabi_dmul>
 801083e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010842:	f7ef fd41 	bl	80002c8 <__aeabi_dsub>
 8010846:	a30c      	add	r3, pc, #48	@ (adr r3, 8010878 <__kernel_sin+0x140>)
 8010848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801084c:	4606      	mov	r6, r0
 801084e:	460f      	mov	r7, r1
 8010850:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010854:	f7ef fef0 	bl	8000638 <__aeabi_dmul>
 8010858:	4602      	mov	r2, r0
 801085a:	460b      	mov	r3, r1
 801085c:	4630      	mov	r0, r6
 801085e:	4639      	mov	r1, r7
 8010860:	f7ef fd34 	bl	80002cc <__adddf3>
 8010864:	4602      	mov	r2, r0
 8010866:	460b      	mov	r3, r1
 8010868:	4620      	mov	r0, r4
 801086a:	4629      	mov	r1, r5
 801086c:	f7ef fd2c 	bl	80002c8 <__aeabi_dsub>
 8010870:	e7c6      	b.n	8010800 <__kernel_sin+0xc8>
 8010872:	bf00      	nop
 8010874:	f3af 8000 	nop.w
 8010878:	55555549 	.word	0x55555549
 801087c:	3fc55555 	.word	0x3fc55555
 8010880:	3fe00000 	.word	0x3fe00000
 8010884:	5acfd57c 	.word	0x5acfd57c
 8010888:	3de5d93a 	.word	0x3de5d93a
 801088c:	8a2b9ceb 	.word	0x8a2b9ceb
 8010890:	3e5ae5e6 	.word	0x3e5ae5e6
 8010894:	57b1fe7d 	.word	0x57b1fe7d
 8010898:	3ec71de3 	.word	0x3ec71de3
 801089c:	19c161d5 	.word	0x19c161d5
 80108a0:	3f2a01a0 	.word	0x3f2a01a0
 80108a4:	1110f8a6 	.word	0x1110f8a6
 80108a8:	3f811111 	.word	0x3f811111
 80108ac:	00000000 	.word	0x00000000

080108b0 <__ieee754_pow>:
 80108b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108b4:	b091      	sub	sp, #68	@ 0x44
 80108b6:	ed8d 1b00 	vstr	d1, [sp]
 80108ba:	e9dd 1900 	ldrd	r1, r9, [sp]
 80108be:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80108c2:	ea5a 0001 	orrs.w	r0, sl, r1
 80108c6:	ec57 6b10 	vmov	r6, r7, d0
 80108ca:	d113      	bne.n	80108f4 <__ieee754_pow+0x44>
 80108cc:	19b3      	adds	r3, r6, r6
 80108ce:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80108d2:	4152      	adcs	r2, r2
 80108d4:	4298      	cmp	r0, r3
 80108d6:	4b98      	ldr	r3, [pc, #608]	@ (8010b38 <__ieee754_pow+0x288>)
 80108d8:	4193      	sbcs	r3, r2
 80108da:	f080 84ea 	bcs.w	80112b2 <__ieee754_pow+0xa02>
 80108de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108e2:	4630      	mov	r0, r6
 80108e4:	4639      	mov	r1, r7
 80108e6:	f7ef fcf1 	bl	80002cc <__adddf3>
 80108ea:	ec41 0b10 	vmov	d0, r0, r1
 80108ee:	b011      	add	sp, #68	@ 0x44
 80108f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108f4:	4a91      	ldr	r2, [pc, #580]	@ (8010b3c <__ieee754_pow+0x28c>)
 80108f6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80108fa:	4590      	cmp	r8, r2
 80108fc:	463d      	mov	r5, r7
 80108fe:	4633      	mov	r3, r6
 8010900:	d806      	bhi.n	8010910 <__ieee754_pow+0x60>
 8010902:	d101      	bne.n	8010908 <__ieee754_pow+0x58>
 8010904:	2e00      	cmp	r6, #0
 8010906:	d1ea      	bne.n	80108de <__ieee754_pow+0x2e>
 8010908:	4592      	cmp	sl, r2
 801090a:	d801      	bhi.n	8010910 <__ieee754_pow+0x60>
 801090c:	d10e      	bne.n	801092c <__ieee754_pow+0x7c>
 801090e:	b169      	cbz	r1, 801092c <__ieee754_pow+0x7c>
 8010910:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8010914:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8010918:	431d      	orrs	r5, r3
 801091a:	d1e0      	bne.n	80108de <__ieee754_pow+0x2e>
 801091c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010920:	18db      	adds	r3, r3, r3
 8010922:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8010926:	4152      	adcs	r2, r2
 8010928:	429d      	cmp	r5, r3
 801092a:	e7d4      	b.n	80108d6 <__ieee754_pow+0x26>
 801092c:	2d00      	cmp	r5, #0
 801092e:	46c3      	mov	fp, r8
 8010930:	da3a      	bge.n	80109a8 <__ieee754_pow+0xf8>
 8010932:	4a83      	ldr	r2, [pc, #524]	@ (8010b40 <__ieee754_pow+0x290>)
 8010934:	4592      	cmp	sl, r2
 8010936:	d84d      	bhi.n	80109d4 <__ieee754_pow+0x124>
 8010938:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801093c:	4592      	cmp	sl, r2
 801093e:	f240 84c7 	bls.w	80112d0 <__ieee754_pow+0xa20>
 8010942:	ea4f 522a 	mov.w	r2, sl, asr #20
 8010946:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801094a:	2a14      	cmp	r2, #20
 801094c:	dd0f      	ble.n	801096e <__ieee754_pow+0xbe>
 801094e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8010952:	fa21 f402 	lsr.w	r4, r1, r2
 8010956:	fa04 f202 	lsl.w	r2, r4, r2
 801095a:	428a      	cmp	r2, r1
 801095c:	f040 84b8 	bne.w	80112d0 <__ieee754_pow+0xa20>
 8010960:	f004 0401 	and.w	r4, r4, #1
 8010964:	f1c4 0402 	rsb	r4, r4, #2
 8010968:	2900      	cmp	r1, #0
 801096a:	d158      	bne.n	8010a1e <__ieee754_pow+0x16e>
 801096c:	e00e      	b.n	801098c <__ieee754_pow+0xdc>
 801096e:	2900      	cmp	r1, #0
 8010970:	d154      	bne.n	8010a1c <__ieee754_pow+0x16c>
 8010972:	f1c2 0214 	rsb	r2, r2, #20
 8010976:	fa4a f402 	asr.w	r4, sl, r2
 801097a:	fa04 f202 	lsl.w	r2, r4, r2
 801097e:	4552      	cmp	r2, sl
 8010980:	f040 84a3 	bne.w	80112ca <__ieee754_pow+0xa1a>
 8010984:	f004 0401 	and.w	r4, r4, #1
 8010988:	f1c4 0402 	rsb	r4, r4, #2
 801098c:	4a6d      	ldr	r2, [pc, #436]	@ (8010b44 <__ieee754_pow+0x294>)
 801098e:	4592      	cmp	sl, r2
 8010990:	d12e      	bne.n	80109f0 <__ieee754_pow+0x140>
 8010992:	f1b9 0f00 	cmp.w	r9, #0
 8010996:	f280 8494 	bge.w	80112c2 <__ieee754_pow+0xa12>
 801099a:	496a      	ldr	r1, [pc, #424]	@ (8010b44 <__ieee754_pow+0x294>)
 801099c:	4632      	mov	r2, r6
 801099e:	463b      	mov	r3, r7
 80109a0:	2000      	movs	r0, #0
 80109a2:	f7ef ff73 	bl	800088c <__aeabi_ddiv>
 80109a6:	e7a0      	b.n	80108ea <__ieee754_pow+0x3a>
 80109a8:	2400      	movs	r4, #0
 80109aa:	bbc1      	cbnz	r1, 8010a1e <__ieee754_pow+0x16e>
 80109ac:	4a63      	ldr	r2, [pc, #396]	@ (8010b3c <__ieee754_pow+0x28c>)
 80109ae:	4592      	cmp	sl, r2
 80109b0:	d1ec      	bne.n	801098c <__ieee754_pow+0xdc>
 80109b2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80109b6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80109ba:	431a      	orrs	r2, r3
 80109bc:	f000 8479 	beq.w	80112b2 <__ieee754_pow+0xa02>
 80109c0:	4b61      	ldr	r3, [pc, #388]	@ (8010b48 <__ieee754_pow+0x298>)
 80109c2:	4598      	cmp	r8, r3
 80109c4:	d908      	bls.n	80109d8 <__ieee754_pow+0x128>
 80109c6:	f1b9 0f00 	cmp.w	r9, #0
 80109ca:	f2c0 8476 	blt.w	80112ba <__ieee754_pow+0xa0a>
 80109ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80109d2:	e78a      	b.n	80108ea <__ieee754_pow+0x3a>
 80109d4:	2402      	movs	r4, #2
 80109d6:	e7e8      	b.n	80109aa <__ieee754_pow+0xfa>
 80109d8:	f1b9 0f00 	cmp.w	r9, #0
 80109dc:	f04f 0000 	mov.w	r0, #0
 80109e0:	f04f 0100 	mov.w	r1, #0
 80109e4:	da81      	bge.n	80108ea <__ieee754_pow+0x3a>
 80109e6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80109ea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80109ee:	e77c      	b.n	80108ea <__ieee754_pow+0x3a>
 80109f0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80109f4:	d106      	bne.n	8010a04 <__ieee754_pow+0x154>
 80109f6:	4632      	mov	r2, r6
 80109f8:	463b      	mov	r3, r7
 80109fa:	4630      	mov	r0, r6
 80109fc:	4639      	mov	r1, r7
 80109fe:	f7ef fe1b 	bl	8000638 <__aeabi_dmul>
 8010a02:	e772      	b.n	80108ea <__ieee754_pow+0x3a>
 8010a04:	4a51      	ldr	r2, [pc, #324]	@ (8010b4c <__ieee754_pow+0x29c>)
 8010a06:	4591      	cmp	r9, r2
 8010a08:	d109      	bne.n	8010a1e <__ieee754_pow+0x16e>
 8010a0a:	2d00      	cmp	r5, #0
 8010a0c:	db07      	blt.n	8010a1e <__ieee754_pow+0x16e>
 8010a0e:	ec47 6b10 	vmov	d0, r6, r7
 8010a12:	b011      	add	sp, #68	@ 0x44
 8010a14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a18:	f7ff bca0 	b.w	801035c <__ieee754_sqrt>
 8010a1c:	2400      	movs	r4, #0
 8010a1e:	ec47 6b10 	vmov	d0, r6, r7
 8010a22:	9302      	str	r3, [sp, #8]
 8010a24:	f000 fe84 	bl	8011730 <fabs>
 8010a28:	9b02      	ldr	r3, [sp, #8]
 8010a2a:	ec51 0b10 	vmov	r0, r1, d0
 8010a2e:	bb53      	cbnz	r3, 8010a86 <__ieee754_pow+0x1d6>
 8010a30:	4b44      	ldr	r3, [pc, #272]	@ (8010b44 <__ieee754_pow+0x294>)
 8010a32:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d002      	beq.n	8010a40 <__ieee754_pow+0x190>
 8010a3a:	f1b8 0f00 	cmp.w	r8, #0
 8010a3e:	d122      	bne.n	8010a86 <__ieee754_pow+0x1d6>
 8010a40:	f1b9 0f00 	cmp.w	r9, #0
 8010a44:	da05      	bge.n	8010a52 <__ieee754_pow+0x1a2>
 8010a46:	4602      	mov	r2, r0
 8010a48:	460b      	mov	r3, r1
 8010a4a:	2000      	movs	r0, #0
 8010a4c:	493d      	ldr	r1, [pc, #244]	@ (8010b44 <__ieee754_pow+0x294>)
 8010a4e:	f7ef ff1d 	bl	800088c <__aeabi_ddiv>
 8010a52:	2d00      	cmp	r5, #0
 8010a54:	f6bf af49 	bge.w	80108ea <__ieee754_pow+0x3a>
 8010a58:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8010a5c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8010a60:	ea58 0804 	orrs.w	r8, r8, r4
 8010a64:	d108      	bne.n	8010a78 <__ieee754_pow+0x1c8>
 8010a66:	4602      	mov	r2, r0
 8010a68:	460b      	mov	r3, r1
 8010a6a:	4610      	mov	r0, r2
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	f7ef fc2b 	bl	80002c8 <__aeabi_dsub>
 8010a72:	4602      	mov	r2, r0
 8010a74:	460b      	mov	r3, r1
 8010a76:	e794      	b.n	80109a2 <__ieee754_pow+0xf2>
 8010a78:	2c01      	cmp	r4, #1
 8010a7a:	f47f af36 	bne.w	80108ea <__ieee754_pow+0x3a>
 8010a7e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010a82:	4619      	mov	r1, r3
 8010a84:	e731      	b.n	80108ea <__ieee754_pow+0x3a>
 8010a86:	0feb      	lsrs	r3, r5, #31
 8010a88:	3b01      	subs	r3, #1
 8010a8a:	ea53 0204 	orrs.w	r2, r3, r4
 8010a8e:	d102      	bne.n	8010a96 <__ieee754_pow+0x1e6>
 8010a90:	4632      	mov	r2, r6
 8010a92:	463b      	mov	r3, r7
 8010a94:	e7e9      	b.n	8010a6a <__ieee754_pow+0x1ba>
 8010a96:	3c01      	subs	r4, #1
 8010a98:	431c      	orrs	r4, r3
 8010a9a:	d016      	beq.n	8010aca <__ieee754_pow+0x21a>
 8010a9c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8010b28 <__ieee754_pow+0x278>
 8010aa0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8010aa4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010aa8:	f240 8112 	bls.w	8010cd0 <__ieee754_pow+0x420>
 8010aac:	4b28      	ldr	r3, [pc, #160]	@ (8010b50 <__ieee754_pow+0x2a0>)
 8010aae:	459a      	cmp	sl, r3
 8010ab0:	4b25      	ldr	r3, [pc, #148]	@ (8010b48 <__ieee754_pow+0x298>)
 8010ab2:	d916      	bls.n	8010ae2 <__ieee754_pow+0x232>
 8010ab4:	4598      	cmp	r8, r3
 8010ab6:	d80b      	bhi.n	8010ad0 <__ieee754_pow+0x220>
 8010ab8:	f1b9 0f00 	cmp.w	r9, #0
 8010abc:	da0b      	bge.n	8010ad6 <__ieee754_pow+0x226>
 8010abe:	2000      	movs	r0, #0
 8010ac0:	b011      	add	sp, #68	@ 0x44
 8010ac2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac6:	f001 ba43 	b.w	8011f50 <__math_oflow>
 8010aca:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8010b30 <__ieee754_pow+0x280>
 8010ace:	e7e7      	b.n	8010aa0 <__ieee754_pow+0x1f0>
 8010ad0:	f1b9 0f00 	cmp.w	r9, #0
 8010ad4:	dcf3      	bgt.n	8010abe <__ieee754_pow+0x20e>
 8010ad6:	2000      	movs	r0, #0
 8010ad8:	b011      	add	sp, #68	@ 0x44
 8010ada:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ade:	f001 ba2f 	b.w	8011f40 <__math_uflow>
 8010ae2:	4598      	cmp	r8, r3
 8010ae4:	d20c      	bcs.n	8010b00 <__ieee754_pow+0x250>
 8010ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010aea:	2200      	movs	r2, #0
 8010aec:	2300      	movs	r3, #0
 8010aee:	f7f0 f815 	bl	8000b1c <__aeabi_dcmplt>
 8010af2:	3800      	subs	r0, #0
 8010af4:	bf18      	it	ne
 8010af6:	2001      	movne	r0, #1
 8010af8:	f1b9 0f00 	cmp.w	r9, #0
 8010afc:	daec      	bge.n	8010ad8 <__ieee754_pow+0x228>
 8010afe:	e7df      	b.n	8010ac0 <__ieee754_pow+0x210>
 8010b00:	4b10      	ldr	r3, [pc, #64]	@ (8010b44 <__ieee754_pow+0x294>)
 8010b02:	4598      	cmp	r8, r3
 8010b04:	f04f 0200 	mov.w	r2, #0
 8010b08:	d924      	bls.n	8010b54 <__ieee754_pow+0x2a4>
 8010b0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b0e:	2300      	movs	r3, #0
 8010b10:	f7f0 f804 	bl	8000b1c <__aeabi_dcmplt>
 8010b14:	3800      	subs	r0, #0
 8010b16:	bf18      	it	ne
 8010b18:	2001      	movne	r0, #1
 8010b1a:	f1b9 0f00 	cmp.w	r9, #0
 8010b1e:	dccf      	bgt.n	8010ac0 <__ieee754_pow+0x210>
 8010b20:	e7da      	b.n	8010ad8 <__ieee754_pow+0x228>
 8010b22:	bf00      	nop
 8010b24:	f3af 8000 	nop.w
 8010b28:	00000000 	.word	0x00000000
 8010b2c:	3ff00000 	.word	0x3ff00000
 8010b30:	00000000 	.word	0x00000000
 8010b34:	bff00000 	.word	0xbff00000
 8010b38:	fff00000 	.word	0xfff00000
 8010b3c:	7ff00000 	.word	0x7ff00000
 8010b40:	433fffff 	.word	0x433fffff
 8010b44:	3ff00000 	.word	0x3ff00000
 8010b48:	3fefffff 	.word	0x3fefffff
 8010b4c:	3fe00000 	.word	0x3fe00000
 8010b50:	43f00000 	.word	0x43f00000
 8010b54:	4b5a      	ldr	r3, [pc, #360]	@ (8010cc0 <__ieee754_pow+0x410>)
 8010b56:	f7ef fbb7 	bl	80002c8 <__aeabi_dsub>
 8010b5a:	a351      	add	r3, pc, #324	@ (adr r3, 8010ca0 <__ieee754_pow+0x3f0>)
 8010b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b60:	4604      	mov	r4, r0
 8010b62:	460d      	mov	r5, r1
 8010b64:	f7ef fd68 	bl	8000638 <__aeabi_dmul>
 8010b68:	a34f      	add	r3, pc, #316	@ (adr r3, 8010ca8 <__ieee754_pow+0x3f8>)
 8010b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b6e:	4606      	mov	r6, r0
 8010b70:	460f      	mov	r7, r1
 8010b72:	4620      	mov	r0, r4
 8010b74:	4629      	mov	r1, r5
 8010b76:	f7ef fd5f 	bl	8000638 <__aeabi_dmul>
 8010b7a:	4b52      	ldr	r3, [pc, #328]	@ (8010cc4 <__ieee754_pow+0x414>)
 8010b7c:	4682      	mov	sl, r0
 8010b7e:	468b      	mov	fp, r1
 8010b80:	2200      	movs	r2, #0
 8010b82:	4620      	mov	r0, r4
 8010b84:	4629      	mov	r1, r5
 8010b86:	f7ef fd57 	bl	8000638 <__aeabi_dmul>
 8010b8a:	4602      	mov	r2, r0
 8010b8c:	460b      	mov	r3, r1
 8010b8e:	a148      	add	r1, pc, #288	@ (adr r1, 8010cb0 <__ieee754_pow+0x400>)
 8010b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b94:	f7ef fb98 	bl	80002c8 <__aeabi_dsub>
 8010b98:	4622      	mov	r2, r4
 8010b9a:	462b      	mov	r3, r5
 8010b9c:	f7ef fd4c 	bl	8000638 <__aeabi_dmul>
 8010ba0:	4602      	mov	r2, r0
 8010ba2:	460b      	mov	r3, r1
 8010ba4:	2000      	movs	r0, #0
 8010ba6:	4948      	ldr	r1, [pc, #288]	@ (8010cc8 <__ieee754_pow+0x418>)
 8010ba8:	f7ef fb8e 	bl	80002c8 <__aeabi_dsub>
 8010bac:	4622      	mov	r2, r4
 8010bae:	4680      	mov	r8, r0
 8010bb0:	4689      	mov	r9, r1
 8010bb2:	462b      	mov	r3, r5
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	4629      	mov	r1, r5
 8010bb8:	f7ef fd3e 	bl	8000638 <__aeabi_dmul>
 8010bbc:	4602      	mov	r2, r0
 8010bbe:	460b      	mov	r3, r1
 8010bc0:	4640      	mov	r0, r8
 8010bc2:	4649      	mov	r1, r9
 8010bc4:	f7ef fd38 	bl	8000638 <__aeabi_dmul>
 8010bc8:	a33b      	add	r3, pc, #236	@ (adr r3, 8010cb8 <__ieee754_pow+0x408>)
 8010bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bce:	f7ef fd33 	bl	8000638 <__aeabi_dmul>
 8010bd2:	4602      	mov	r2, r0
 8010bd4:	460b      	mov	r3, r1
 8010bd6:	4650      	mov	r0, sl
 8010bd8:	4659      	mov	r1, fp
 8010bda:	f7ef fb75 	bl	80002c8 <__aeabi_dsub>
 8010bde:	4602      	mov	r2, r0
 8010be0:	460b      	mov	r3, r1
 8010be2:	4680      	mov	r8, r0
 8010be4:	4689      	mov	r9, r1
 8010be6:	4630      	mov	r0, r6
 8010be8:	4639      	mov	r1, r7
 8010bea:	f7ef fb6f 	bl	80002cc <__adddf3>
 8010bee:	2400      	movs	r4, #0
 8010bf0:	4632      	mov	r2, r6
 8010bf2:	463b      	mov	r3, r7
 8010bf4:	4620      	mov	r0, r4
 8010bf6:	460d      	mov	r5, r1
 8010bf8:	f7ef fb66 	bl	80002c8 <__aeabi_dsub>
 8010bfc:	4602      	mov	r2, r0
 8010bfe:	460b      	mov	r3, r1
 8010c00:	4640      	mov	r0, r8
 8010c02:	4649      	mov	r1, r9
 8010c04:	f7ef fb60 	bl	80002c8 <__aeabi_dsub>
 8010c08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010c10:	2300      	movs	r3, #0
 8010c12:	9304      	str	r3, [sp, #16]
 8010c14:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010c18:	4606      	mov	r6, r0
 8010c1a:	460f      	mov	r7, r1
 8010c1c:	4652      	mov	r2, sl
 8010c1e:	465b      	mov	r3, fp
 8010c20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c24:	f7ef fb50 	bl	80002c8 <__aeabi_dsub>
 8010c28:	4622      	mov	r2, r4
 8010c2a:	462b      	mov	r3, r5
 8010c2c:	f7ef fd04 	bl	8000638 <__aeabi_dmul>
 8010c30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c34:	4680      	mov	r8, r0
 8010c36:	4689      	mov	r9, r1
 8010c38:	4630      	mov	r0, r6
 8010c3a:	4639      	mov	r1, r7
 8010c3c:	f7ef fcfc 	bl	8000638 <__aeabi_dmul>
 8010c40:	4602      	mov	r2, r0
 8010c42:	460b      	mov	r3, r1
 8010c44:	4640      	mov	r0, r8
 8010c46:	4649      	mov	r1, r9
 8010c48:	f7ef fb40 	bl	80002cc <__adddf3>
 8010c4c:	4652      	mov	r2, sl
 8010c4e:	465b      	mov	r3, fp
 8010c50:	4606      	mov	r6, r0
 8010c52:	460f      	mov	r7, r1
 8010c54:	4620      	mov	r0, r4
 8010c56:	4629      	mov	r1, r5
 8010c58:	f7ef fcee 	bl	8000638 <__aeabi_dmul>
 8010c5c:	460b      	mov	r3, r1
 8010c5e:	4602      	mov	r2, r0
 8010c60:	4680      	mov	r8, r0
 8010c62:	4689      	mov	r9, r1
 8010c64:	4630      	mov	r0, r6
 8010c66:	4639      	mov	r1, r7
 8010c68:	f7ef fb30 	bl	80002cc <__adddf3>
 8010c6c:	4b17      	ldr	r3, [pc, #92]	@ (8010ccc <__ieee754_pow+0x41c>)
 8010c6e:	4299      	cmp	r1, r3
 8010c70:	4604      	mov	r4, r0
 8010c72:	460d      	mov	r5, r1
 8010c74:	468a      	mov	sl, r1
 8010c76:	468b      	mov	fp, r1
 8010c78:	f340 82ef 	ble.w	801125a <__ieee754_pow+0x9aa>
 8010c7c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8010c80:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8010c84:	4303      	orrs	r3, r0
 8010c86:	f000 81e8 	beq.w	801105a <__ieee754_pow+0x7aa>
 8010c8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c8e:	2200      	movs	r2, #0
 8010c90:	2300      	movs	r3, #0
 8010c92:	f7ef ff43 	bl	8000b1c <__aeabi_dcmplt>
 8010c96:	3800      	subs	r0, #0
 8010c98:	bf18      	it	ne
 8010c9a:	2001      	movne	r0, #1
 8010c9c:	e710      	b.n	8010ac0 <__ieee754_pow+0x210>
 8010c9e:	bf00      	nop
 8010ca0:	60000000 	.word	0x60000000
 8010ca4:	3ff71547 	.word	0x3ff71547
 8010ca8:	f85ddf44 	.word	0xf85ddf44
 8010cac:	3e54ae0b 	.word	0x3e54ae0b
 8010cb0:	55555555 	.word	0x55555555
 8010cb4:	3fd55555 	.word	0x3fd55555
 8010cb8:	652b82fe 	.word	0x652b82fe
 8010cbc:	3ff71547 	.word	0x3ff71547
 8010cc0:	3ff00000 	.word	0x3ff00000
 8010cc4:	3fd00000 	.word	0x3fd00000
 8010cc8:	3fe00000 	.word	0x3fe00000
 8010ccc:	408fffff 	.word	0x408fffff
 8010cd0:	4bd5      	ldr	r3, [pc, #852]	@ (8011028 <__ieee754_pow+0x778>)
 8010cd2:	402b      	ands	r3, r5
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	b92b      	cbnz	r3, 8010ce4 <__ieee754_pow+0x434>
 8010cd8:	4bd4      	ldr	r3, [pc, #848]	@ (801102c <__ieee754_pow+0x77c>)
 8010cda:	f7ef fcad 	bl	8000638 <__aeabi_dmul>
 8010cde:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8010ce2:	468b      	mov	fp, r1
 8010ce4:	ea4f 532b 	mov.w	r3, fp, asr #20
 8010ce8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010cec:	4413      	add	r3, r2
 8010cee:	930a      	str	r3, [sp, #40]	@ 0x28
 8010cf0:	4bcf      	ldr	r3, [pc, #828]	@ (8011030 <__ieee754_pow+0x780>)
 8010cf2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8010cf6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8010cfa:	459b      	cmp	fp, r3
 8010cfc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010d00:	dd08      	ble.n	8010d14 <__ieee754_pow+0x464>
 8010d02:	4bcc      	ldr	r3, [pc, #816]	@ (8011034 <__ieee754_pow+0x784>)
 8010d04:	459b      	cmp	fp, r3
 8010d06:	f340 81a5 	ble.w	8011054 <__ieee754_pow+0x7a4>
 8010d0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d10:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8010d14:	f04f 0a00 	mov.w	sl, #0
 8010d18:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8010d1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d1e:	4bc6      	ldr	r3, [pc, #792]	@ (8011038 <__ieee754_pow+0x788>)
 8010d20:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010d24:	ed93 7b00 	vldr	d7, [r3]
 8010d28:	4629      	mov	r1, r5
 8010d2a:	ec53 2b17 	vmov	r2, r3, d7
 8010d2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010d32:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010d36:	f7ef fac7 	bl	80002c8 <__aeabi_dsub>
 8010d3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010d3e:	4606      	mov	r6, r0
 8010d40:	460f      	mov	r7, r1
 8010d42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010d46:	f7ef fac1 	bl	80002cc <__adddf3>
 8010d4a:	4602      	mov	r2, r0
 8010d4c:	460b      	mov	r3, r1
 8010d4e:	2000      	movs	r0, #0
 8010d50:	49ba      	ldr	r1, [pc, #744]	@ (801103c <__ieee754_pow+0x78c>)
 8010d52:	f7ef fd9b 	bl	800088c <__aeabi_ddiv>
 8010d56:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8010d5a:	4602      	mov	r2, r0
 8010d5c:	460b      	mov	r3, r1
 8010d5e:	4630      	mov	r0, r6
 8010d60:	4639      	mov	r1, r7
 8010d62:	f7ef fc69 	bl	8000638 <__aeabi_dmul>
 8010d66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010d6a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8010d6e:	106d      	asrs	r5, r5, #1
 8010d70:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8010d74:	f04f 0b00 	mov.w	fp, #0
 8010d78:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8010d7c:	4661      	mov	r1, ip
 8010d7e:	2200      	movs	r2, #0
 8010d80:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8010d84:	4658      	mov	r0, fp
 8010d86:	46e1      	mov	r9, ip
 8010d88:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8010d8c:	4614      	mov	r4, r2
 8010d8e:	461d      	mov	r5, r3
 8010d90:	f7ef fc52 	bl	8000638 <__aeabi_dmul>
 8010d94:	4602      	mov	r2, r0
 8010d96:	460b      	mov	r3, r1
 8010d98:	4630      	mov	r0, r6
 8010d9a:	4639      	mov	r1, r7
 8010d9c:	f7ef fa94 	bl	80002c8 <__aeabi_dsub>
 8010da0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010da4:	4606      	mov	r6, r0
 8010da6:	460f      	mov	r7, r1
 8010da8:	4620      	mov	r0, r4
 8010daa:	4629      	mov	r1, r5
 8010dac:	f7ef fa8c 	bl	80002c8 <__aeabi_dsub>
 8010db0:	4602      	mov	r2, r0
 8010db2:	460b      	mov	r3, r1
 8010db4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010db8:	f7ef fa86 	bl	80002c8 <__aeabi_dsub>
 8010dbc:	465a      	mov	r2, fp
 8010dbe:	464b      	mov	r3, r9
 8010dc0:	f7ef fc3a 	bl	8000638 <__aeabi_dmul>
 8010dc4:	4602      	mov	r2, r0
 8010dc6:	460b      	mov	r3, r1
 8010dc8:	4630      	mov	r0, r6
 8010dca:	4639      	mov	r1, r7
 8010dcc:	f7ef fa7c 	bl	80002c8 <__aeabi_dsub>
 8010dd0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010dd4:	f7ef fc30 	bl	8000638 <__aeabi_dmul>
 8010dd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ddc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010de0:	4610      	mov	r0, r2
 8010de2:	4619      	mov	r1, r3
 8010de4:	f7ef fc28 	bl	8000638 <__aeabi_dmul>
 8010de8:	a37d      	add	r3, pc, #500	@ (adr r3, 8010fe0 <__ieee754_pow+0x730>)
 8010dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dee:	4604      	mov	r4, r0
 8010df0:	460d      	mov	r5, r1
 8010df2:	f7ef fc21 	bl	8000638 <__aeabi_dmul>
 8010df6:	a37c      	add	r3, pc, #496	@ (adr r3, 8010fe8 <__ieee754_pow+0x738>)
 8010df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dfc:	f7ef fa66 	bl	80002cc <__adddf3>
 8010e00:	4622      	mov	r2, r4
 8010e02:	462b      	mov	r3, r5
 8010e04:	f7ef fc18 	bl	8000638 <__aeabi_dmul>
 8010e08:	a379      	add	r3, pc, #484	@ (adr r3, 8010ff0 <__ieee754_pow+0x740>)
 8010e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e0e:	f7ef fa5d 	bl	80002cc <__adddf3>
 8010e12:	4622      	mov	r2, r4
 8010e14:	462b      	mov	r3, r5
 8010e16:	f7ef fc0f 	bl	8000638 <__aeabi_dmul>
 8010e1a:	a377      	add	r3, pc, #476	@ (adr r3, 8010ff8 <__ieee754_pow+0x748>)
 8010e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e20:	f7ef fa54 	bl	80002cc <__adddf3>
 8010e24:	4622      	mov	r2, r4
 8010e26:	462b      	mov	r3, r5
 8010e28:	f7ef fc06 	bl	8000638 <__aeabi_dmul>
 8010e2c:	a374      	add	r3, pc, #464	@ (adr r3, 8011000 <__ieee754_pow+0x750>)
 8010e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e32:	f7ef fa4b 	bl	80002cc <__adddf3>
 8010e36:	4622      	mov	r2, r4
 8010e38:	462b      	mov	r3, r5
 8010e3a:	f7ef fbfd 	bl	8000638 <__aeabi_dmul>
 8010e3e:	a372      	add	r3, pc, #456	@ (adr r3, 8011008 <__ieee754_pow+0x758>)
 8010e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e44:	f7ef fa42 	bl	80002cc <__adddf3>
 8010e48:	4622      	mov	r2, r4
 8010e4a:	4606      	mov	r6, r0
 8010e4c:	460f      	mov	r7, r1
 8010e4e:	462b      	mov	r3, r5
 8010e50:	4620      	mov	r0, r4
 8010e52:	4629      	mov	r1, r5
 8010e54:	f7ef fbf0 	bl	8000638 <__aeabi_dmul>
 8010e58:	4602      	mov	r2, r0
 8010e5a:	460b      	mov	r3, r1
 8010e5c:	4630      	mov	r0, r6
 8010e5e:	4639      	mov	r1, r7
 8010e60:	f7ef fbea 	bl	8000638 <__aeabi_dmul>
 8010e64:	465a      	mov	r2, fp
 8010e66:	4604      	mov	r4, r0
 8010e68:	460d      	mov	r5, r1
 8010e6a:	464b      	mov	r3, r9
 8010e6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e70:	f7ef fa2c 	bl	80002cc <__adddf3>
 8010e74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010e78:	f7ef fbde 	bl	8000638 <__aeabi_dmul>
 8010e7c:	4622      	mov	r2, r4
 8010e7e:	462b      	mov	r3, r5
 8010e80:	f7ef fa24 	bl	80002cc <__adddf3>
 8010e84:	465a      	mov	r2, fp
 8010e86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010e8a:	464b      	mov	r3, r9
 8010e8c:	4658      	mov	r0, fp
 8010e8e:	4649      	mov	r1, r9
 8010e90:	f7ef fbd2 	bl	8000638 <__aeabi_dmul>
 8010e94:	4b6a      	ldr	r3, [pc, #424]	@ (8011040 <__ieee754_pow+0x790>)
 8010e96:	2200      	movs	r2, #0
 8010e98:	4606      	mov	r6, r0
 8010e9a:	460f      	mov	r7, r1
 8010e9c:	f7ef fa16 	bl	80002cc <__adddf3>
 8010ea0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010ea4:	f7ef fa12 	bl	80002cc <__adddf3>
 8010ea8:	46d8      	mov	r8, fp
 8010eaa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8010eae:	460d      	mov	r5, r1
 8010eb0:	465a      	mov	r2, fp
 8010eb2:	460b      	mov	r3, r1
 8010eb4:	4640      	mov	r0, r8
 8010eb6:	4649      	mov	r1, r9
 8010eb8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8010ebc:	f7ef fbbc 	bl	8000638 <__aeabi_dmul>
 8010ec0:	465c      	mov	r4, fp
 8010ec2:	4680      	mov	r8, r0
 8010ec4:	4689      	mov	r9, r1
 8010ec6:	4b5e      	ldr	r3, [pc, #376]	@ (8011040 <__ieee754_pow+0x790>)
 8010ec8:	2200      	movs	r2, #0
 8010eca:	4620      	mov	r0, r4
 8010ecc:	4629      	mov	r1, r5
 8010ece:	f7ef f9fb 	bl	80002c8 <__aeabi_dsub>
 8010ed2:	4632      	mov	r2, r6
 8010ed4:	463b      	mov	r3, r7
 8010ed6:	f7ef f9f7 	bl	80002c8 <__aeabi_dsub>
 8010eda:	4602      	mov	r2, r0
 8010edc:	460b      	mov	r3, r1
 8010ede:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010ee2:	f7ef f9f1 	bl	80002c8 <__aeabi_dsub>
 8010ee6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010eea:	f7ef fba5 	bl	8000638 <__aeabi_dmul>
 8010eee:	4622      	mov	r2, r4
 8010ef0:	4606      	mov	r6, r0
 8010ef2:	460f      	mov	r7, r1
 8010ef4:	462b      	mov	r3, r5
 8010ef6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010efa:	f7ef fb9d 	bl	8000638 <__aeabi_dmul>
 8010efe:	4602      	mov	r2, r0
 8010f00:	460b      	mov	r3, r1
 8010f02:	4630      	mov	r0, r6
 8010f04:	4639      	mov	r1, r7
 8010f06:	f7ef f9e1 	bl	80002cc <__adddf3>
 8010f0a:	4606      	mov	r6, r0
 8010f0c:	460f      	mov	r7, r1
 8010f0e:	4602      	mov	r2, r0
 8010f10:	460b      	mov	r3, r1
 8010f12:	4640      	mov	r0, r8
 8010f14:	4649      	mov	r1, r9
 8010f16:	f7ef f9d9 	bl	80002cc <__adddf3>
 8010f1a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8010f1e:	a33c      	add	r3, pc, #240	@ (adr r3, 8011010 <__ieee754_pow+0x760>)
 8010f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f24:	4658      	mov	r0, fp
 8010f26:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8010f2a:	460d      	mov	r5, r1
 8010f2c:	f7ef fb84 	bl	8000638 <__aeabi_dmul>
 8010f30:	465c      	mov	r4, fp
 8010f32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010f36:	4642      	mov	r2, r8
 8010f38:	464b      	mov	r3, r9
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	4629      	mov	r1, r5
 8010f3e:	f7ef f9c3 	bl	80002c8 <__aeabi_dsub>
 8010f42:	4602      	mov	r2, r0
 8010f44:	460b      	mov	r3, r1
 8010f46:	4630      	mov	r0, r6
 8010f48:	4639      	mov	r1, r7
 8010f4a:	f7ef f9bd 	bl	80002c8 <__aeabi_dsub>
 8010f4e:	a332      	add	r3, pc, #200	@ (adr r3, 8011018 <__ieee754_pow+0x768>)
 8010f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f54:	f7ef fb70 	bl	8000638 <__aeabi_dmul>
 8010f58:	a331      	add	r3, pc, #196	@ (adr r3, 8011020 <__ieee754_pow+0x770>)
 8010f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f5e:	4606      	mov	r6, r0
 8010f60:	460f      	mov	r7, r1
 8010f62:	4620      	mov	r0, r4
 8010f64:	4629      	mov	r1, r5
 8010f66:	f7ef fb67 	bl	8000638 <__aeabi_dmul>
 8010f6a:	4602      	mov	r2, r0
 8010f6c:	460b      	mov	r3, r1
 8010f6e:	4630      	mov	r0, r6
 8010f70:	4639      	mov	r1, r7
 8010f72:	f7ef f9ab 	bl	80002cc <__adddf3>
 8010f76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010f78:	4b32      	ldr	r3, [pc, #200]	@ (8011044 <__ieee754_pow+0x794>)
 8010f7a:	4413      	add	r3, r2
 8010f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f80:	f7ef f9a4 	bl	80002cc <__adddf3>
 8010f84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010f88:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010f8a:	f7ef faeb 	bl	8000564 <__aeabi_i2d>
 8010f8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010f90:	4b2d      	ldr	r3, [pc, #180]	@ (8011048 <__ieee754_pow+0x798>)
 8010f92:	4413      	add	r3, r2
 8010f94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f98:	4606      	mov	r6, r0
 8010f9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f9e:	460f      	mov	r7, r1
 8010fa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010fa4:	f7ef f992 	bl	80002cc <__adddf3>
 8010fa8:	4642      	mov	r2, r8
 8010faa:	464b      	mov	r3, r9
 8010fac:	f7ef f98e 	bl	80002cc <__adddf3>
 8010fb0:	4632      	mov	r2, r6
 8010fb2:	463b      	mov	r3, r7
 8010fb4:	f7ef f98a 	bl	80002cc <__adddf3>
 8010fb8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8010fbc:	4632      	mov	r2, r6
 8010fbe:	463b      	mov	r3, r7
 8010fc0:	4658      	mov	r0, fp
 8010fc2:	460d      	mov	r5, r1
 8010fc4:	f7ef f980 	bl	80002c8 <__aeabi_dsub>
 8010fc8:	4642      	mov	r2, r8
 8010fca:	464b      	mov	r3, r9
 8010fcc:	f7ef f97c 	bl	80002c8 <__aeabi_dsub>
 8010fd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010fd4:	f7ef f978 	bl	80002c8 <__aeabi_dsub>
 8010fd8:	465c      	mov	r4, fp
 8010fda:	4602      	mov	r2, r0
 8010fdc:	e036      	b.n	801104c <__ieee754_pow+0x79c>
 8010fde:	bf00      	nop
 8010fe0:	4a454eef 	.word	0x4a454eef
 8010fe4:	3fca7e28 	.word	0x3fca7e28
 8010fe8:	93c9db65 	.word	0x93c9db65
 8010fec:	3fcd864a 	.word	0x3fcd864a
 8010ff0:	a91d4101 	.word	0xa91d4101
 8010ff4:	3fd17460 	.word	0x3fd17460
 8010ff8:	518f264d 	.word	0x518f264d
 8010ffc:	3fd55555 	.word	0x3fd55555
 8011000:	db6fabff 	.word	0xdb6fabff
 8011004:	3fdb6db6 	.word	0x3fdb6db6
 8011008:	33333303 	.word	0x33333303
 801100c:	3fe33333 	.word	0x3fe33333
 8011010:	e0000000 	.word	0xe0000000
 8011014:	3feec709 	.word	0x3feec709
 8011018:	dc3a03fd 	.word	0xdc3a03fd
 801101c:	3feec709 	.word	0x3feec709
 8011020:	145b01f5 	.word	0x145b01f5
 8011024:	be3e2fe0 	.word	0xbe3e2fe0
 8011028:	7ff00000 	.word	0x7ff00000
 801102c:	43400000 	.word	0x43400000
 8011030:	0003988e 	.word	0x0003988e
 8011034:	000bb679 	.word	0x000bb679
 8011038:	08012ae8 	.word	0x08012ae8
 801103c:	3ff00000 	.word	0x3ff00000
 8011040:	40080000 	.word	0x40080000
 8011044:	08012ac8 	.word	0x08012ac8
 8011048:	08012ad8 	.word	0x08012ad8
 801104c:	460b      	mov	r3, r1
 801104e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011052:	e5d7      	b.n	8010c04 <__ieee754_pow+0x354>
 8011054:	f04f 0a01 	mov.w	sl, #1
 8011058:	e65e      	b.n	8010d18 <__ieee754_pow+0x468>
 801105a:	a3b4      	add	r3, pc, #720	@ (adr r3, 801132c <__ieee754_pow+0xa7c>)
 801105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011060:	4630      	mov	r0, r6
 8011062:	4639      	mov	r1, r7
 8011064:	f7ef f932 	bl	80002cc <__adddf3>
 8011068:	4642      	mov	r2, r8
 801106a:	e9cd 0100 	strd	r0, r1, [sp]
 801106e:	464b      	mov	r3, r9
 8011070:	4620      	mov	r0, r4
 8011072:	4629      	mov	r1, r5
 8011074:	f7ef f928 	bl	80002c8 <__aeabi_dsub>
 8011078:	4602      	mov	r2, r0
 801107a:	460b      	mov	r3, r1
 801107c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011080:	f7ef fd6a 	bl	8000b58 <__aeabi_dcmpgt>
 8011084:	2800      	cmp	r0, #0
 8011086:	f47f ae00 	bne.w	8010c8a <__ieee754_pow+0x3da>
 801108a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801108e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011092:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8011096:	fa43 fa0a 	asr.w	sl, r3, sl
 801109a:	44da      	add	sl, fp
 801109c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80110a0:	489d      	ldr	r0, [pc, #628]	@ (8011318 <__ieee754_pow+0xa68>)
 80110a2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80110a6:	4108      	asrs	r0, r1
 80110a8:	ea00 030a 	and.w	r3, r0, sl
 80110ac:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80110b0:	f1c1 0114 	rsb	r1, r1, #20
 80110b4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80110b8:	fa4a fa01 	asr.w	sl, sl, r1
 80110bc:	f1bb 0f00 	cmp.w	fp, #0
 80110c0:	4640      	mov	r0, r8
 80110c2:	4649      	mov	r1, r9
 80110c4:	f04f 0200 	mov.w	r2, #0
 80110c8:	bfb8      	it	lt
 80110ca:	f1ca 0a00 	rsblt	sl, sl, #0
 80110ce:	f7ef f8fb 	bl	80002c8 <__aeabi_dsub>
 80110d2:	4680      	mov	r8, r0
 80110d4:	4689      	mov	r9, r1
 80110d6:	4632      	mov	r2, r6
 80110d8:	463b      	mov	r3, r7
 80110da:	4640      	mov	r0, r8
 80110dc:	4649      	mov	r1, r9
 80110de:	f7ef f8f5 	bl	80002cc <__adddf3>
 80110e2:	2400      	movs	r4, #0
 80110e4:	a37c      	add	r3, pc, #496	@ (adr r3, 80112d8 <__ieee754_pow+0xa28>)
 80110e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ea:	4620      	mov	r0, r4
 80110ec:	460d      	mov	r5, r1
 80110ee:	f7ef faa3 	bl	8000638 <__aeabi_dmul>
 80110f2:	4642      	mov	r2, r8
 80110f4:	e9cd 0100 	strd	r0, r1, [sp]
 80110f8:	464b      	mov	r3, r9
 80110fa:	4620      	mov	r0, r4
 80110fc:	4629      	mov	r1, r5
 80110fe:	f7ef f8e3 	bl	80002c8 <__aeabi_dsub>
 8011102:	4602      	mov	r2, r0
 8011104:	460b      	mov	r3, r1
 8011106:	4630      	mov	r0, r6
 8011108:	4639      	mov	r1, r7
 801110a:	f7ef f8dd 	bl	80002c8 <__aeabi_dsub>
 801110e:	a374      	add	r3, pc, #464	@ (adr r3, 80112e0 <__ieee754_pow+0xa30>)
 8011110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011114:	f7ef fa90 	bl	8000638 <__aeabi_dmul>
 8011118:	a373      	add	r3, pc, #460	@ (adr r3, 80112e8 <__ieee754_pow+0xa38>)
 801111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111e:	4680      	mov	r8, r0
 8011120:	4689      	mov	r9, r1
 8011122:	4620      	mov	r0, r4
 8011124:	4629      	mov	r1, r5
 8011126:	f7ef fa87 	bl	8000638 <__aeabi_dmul>
 801112a:	4602      	mov	r2, r0
 801112c:	460b      	mov	r3, r1
 801112e:	4640      	mov	r0, r8
 8011130:	4649      	mov	r1, r9
 8011132:	f7ef f8cb 	bl	80002cc <__adddf3>
 8011136:	4604      	mov	r4, r0
 8011138:	460d      	mov	r5, r1
 801113a:	4602      	mov	r2, r0
 801113c:	460b      	mov	r3, r1
 801113e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011142:	f7ef f8c3 	bl	80002cc <__adddf3>
 8011146:	e9dd 2300 	ldrd	r2, r3, [sp]
 801114a:	4680      	mov	r8, r0
 801114c:	4689      	mov	r9, r1
 801114e:	f7ef f8bb 	bl	80002c8 <__aeabi_dsub>
 8011152:	4602      	mov	r2, r0
 8011154:	460b      	mov	r3, r1
 8011156:	4620      	mov	r0, r4
 8011158:	4629      	mov	r1, r5
 801115a:	f7ef f8b5 	bl	80002c8 <__aeabi_dsub>
 801115e:	4642      	mov	r2, r8
 8011160:	4606      	mov	r6, r0
 8011162:	460f      	mov	r7, r1
 8011164:	464b      	mov	r3, r9
 8011166:	4640      	mov	r0, r8
 8011168:	4649      	mov	r1, r9
 801116a:	f7ef fa65 	bl	8000638 <__aeabi_dmul>
 801116e:	a360      	add	r3, pc, #384	@ (adr r3, 80112f0 <__ieee754_pow+0xa40>)
 8011170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011174:	4604      	mov	r4, r0
 8011176:	460d      	mov	r5, r1
 8011178:	f7ef fa5e 	bl	8000638 <__aeabi_dmul>
 801117c:	a35e      	add	r3, pc, #376	@ (adr r3, 80112f8 <__ieee754_pow+0xa48>)
 801117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011182:	f7ef f8a1 	bl	80002c8 <__aeabi_dsub>
 8011186:	4622      	mov	r2, r4
 8011188:	462b      	mov	r3, r5
 801118a:	f7ef fa55 	bl	8000638 <__aeabi_dmul>
 801118e:	a35c      	add	r3, pc, #368	@ (adr r3, 8011300 <__ieee754_pow+0xa50>)
 8011190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011194:	f7ef f89a 	bl	80002cc <__adddf3>
 8011198:	4622      	mov	r2, r4
 801119a:	462b      	mov	r3, r5
 801119c:	f7ef fa4c 	bl	8000638 <__aeabi_dmul>
 80111a0:	a359      	add	r3, pc, #356	@ (adr r3, 8011308 <__ieee754_pow+0xa58>)
 80111a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111a6:	f7ef f88f 	bl	80002c8 <__aeabi_dsub>
 80111aa:	4622      	mov	r2, r4
 80111ac:	462b      	mov	r3, r5
 80111ae:	f7ef fa43 	bl	8000638 <__aeabi_dmul>
 80111b2:	a357      	add	r3, pc, #348	@ (adr r3, 8011310 <__ieee754_pow+0xa60>)
 80111b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111b8:	f7ef f888 	bl	80002cc <__adddf3>
 80111bc:	4622      	mov	r2, r4
 80111be:	462b      	mov	r3, r5
 80111c0:	f7ef fa3a 	bl	8000638 <__aeabi_dmul>
 80111c4:	4602      	mov	r2, r0
 80111c6:	460b      	mov	r3, r1
 80111c8:	4640      	mov	r0, r8
 80111ca:	4649      	mov	r1, r9
 80111cc:	f7ef f87c 	bl	80002c8 <__aeabi_dsub>
 80111d0:	4604      	mov	r4, r0
 80111d2:	460d      	mov	r5, r1
 80111d4:	4602      	mov	r2, r0
 80111d6:	460b      	mov	r3, r1
 80111d8:	4640      	mov	r0, r8
 80111da:	4649      	mov	r1, r9
 80111dc:	f7ef fa2c 	bl	8000638 <__aeabi_dmul>
 80111e0:	2200      	movs	r2, #0
 80111e2:	e9cd 0100 	strd	r0, r1, [sp]
 80111e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80111ea:	4620      	mov	r0, r4
 80111ec:	4629      	mov	r1, r5
 80111ee:	f7ef f86b 	bl	80002c8 <__aeabi_dsub>
 80111f2:	4602      	mov	r2, r0
 80111f4:	460b      	mov	r3, r1
 80111f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80111fa:	f7ef fb47 	bl	800088c <__aeabi_ddiv>
 80111fe:	4632      	mov	r2, r6
 8011200:	4604      	mov	r4, r0
 8011202:	460d      	mov	r5, r1
 8011204:	463b      	mov	r3, r7
 8011206:	4640      	mov	r0, r8
 8011208:	4649      	mov	r1, r9
 801120a:	f7ef fa15 	bl	8000638 <__aeabi_dmul>
 801120e:	4632      	mov	r2, r6
 8011210:	463b      	mov	r3, r7
 8011212:	f7ef f85b 	bl	80002cc <__adddf3>
 8011216:	4602      	mov	r2, r0
 8011218:	460b      	mov	r3, r1
 801121a:	4620      	mov	r0, r4
 801121c:	4629      	mov	r1, r5
 801121e:	f7ef f853 	bl	80002c8 <__aeabi_dsub>
 8011222:	4642      	mov	r2, r8
 8011224:	464b      	mov	r3, r9
 8011226:	f7ef f84f 	bl	80002c8 <__aeabi_dsub>
 801122a:	460b      	mov	r3, r1
 801122c:	4602      	mov	r2, r0
 801122e:	493b      	ldr	r1, [pc, #236]	@ (801131c <__ieee754_pow+0xa6c>)
 8011230:	2000      	movs	r0, #0
 8011232:	f7ef f849 	bl	80002c8 <__aeabi_dsub>
 8011236:	ec41 0b10 	vmov	d0, r0, r1
 801123a:	ee10 3a90 	vmov	r3, s1
 801123e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011242:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011246:	da30      	bge.n	80112aa <__ieee754_pow+0x9fa>
 8011248:	4650      	mov	r0, sl
 801124a:	f000 fdcd 	bl	8011de8 <scalbn>
 801124e:	ec51 0b10 	vmov	r0, r1, d0
 8011252:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011256:	f7ff bbd2 	b.w	80109fe <__ieee754_pow+0x14e>
 801125a:	4c31      	ldr	r4, [pc, #196]	@ (8011320 <__ieee754_pow+0xa70>)
 801125c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011260:	42a3      	cmp	r3, r4
 8011262:	d91a      	bls.n	801129a <__ieee754_pow+0x9ea>
 8011264:	4b2f      	ldr	r3, [pc, #188]	@ (8011324 <__ieee754_pow+0xa74>)
 8011266:	440b      	add	r3, r1
 8011268:	4303      	orrs	r3, r0
 801126a:	d009      	beq.n	8011280 <__ieee754_pow+0x9d0>
 801126c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011270:	2200      	movs	r2, #0
 8011272:	2300      	movs	r3, #0
 8011274:	f7ef fc52 	bl	8000b1c <__aeabi_dcmplt>
 8011278:	3800      	subs	r0, #0
 801127a:	bf18      	it	ne
 801127c:	2001      	movne	r0, #1
 801127e:	e42b      	b.n	8010ad8 <__ieee754_pow+0x228>
 8011280:	4642      	mov	r2, r8
 8011282:	464b      	mov	r3, r9
 8011284:	f7ef f820 	bl	80002c8 <__aeabi_dsub>
 8011288:	4632      	mov	r2, r6
 801128a:	463b      	mov	r3, r7
 801128c:	f7ef fc5a 	bl	8000b44 <__aeabi_dcmpge>
 8011290:	2800      	cmp	r0, #0
 8011292:	d1eb      	bne.n	801126c <__ieee754_pow+0x9bc>
 8011294:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8011334 <__ieee754_pow+0xa84>
 8011298:	e6f7      	b.n	801108a <__ieee754_pow+0x7da>
 801129a:	469a      	mov	sl, r3
 801129c:	4b22      	ldr	r3, [pc, #136]	@ (8011328 <__ieee754_pow+0xa78>)
 801129e:	459a      	cmp	sl, r3
 80112a0:	f63f aef3 	bhi.w	801108a <__ieee754_pow+0x7da>
 80112a4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80112a8:	e715      	b.n	80110d6 <__ieee754_pow+0x826>
 80112aa:	ec51 0b10 	vmov	r0, r1, d0
 80112ae:	4619      	mov	r1, r3
 80112b0:	e7cf      	b.n	8011252 <__ieee754_pow+0x9a2>
 80112b2:	491a      	ldr	r1, [pc, #104]	@ (801131c <__ieee754_pow+0xa6c>)
 80112b4:	2000      	movs	r0, #0
 80112b6:	f7ff bb18 	b.w	80108ea <__ieee754_pow+0x3a>
 80112ba:	2000      	movs	r0, #0
 80112bc:	2100      	movs	r1, #0
 80112be:	f7ff bb14 	b.w	80108ea <__ieee754_pow+0x3a>
 80112c2:	4630      	mov	r0, r6
 80112c4:	4639      	mov	r1, r7
 80112c6:	f7ff bb10 	b.w	80108ea <__ieee754_pow+0x3a>
 80112ca:	460c      	mov	r4, r1
 80112cc:	f7ff bb5e 	b.w	801098c <__ieee754_pow+0xdc>
 80112d0:	2400      	movs	r4, #0
 80112d2:	f7ff bb49 	b.w	8010968 <__ieee754_pow+0xb8>
 80112d6:	bf00      	nop
 80112d8:	00000000 	.word	0x00000000
 80112dc:	3fe62e43 	.word	0x3fe62e43
 80112e0:	fefa39ef 	.word	0xfefa39ef
 80112e4:	3fe62e42 	.word	0x3fe62e42
 80112e8:	0ca86c39 	.word	0x0ca86c39
 80112ec:	be205c61 	.word	0xbe205c61
 80112f0:	72bea4d0 	.word	0x72bea4d0
 80112f4:	3e663769 	.word	0x3e663769
 80112f8:	c5d26bf1 	.word	0xc5d26bf1
 80112fc:	3ebbbd41 	.word	0x3ebbbd41
 8011300:	af25de2c 	.word	0xaf25de2c
 8011304:	3f11566a 	.word	0x3f11566a
 8011308:	16bebd93 	.word	0x16bebd93
 801130c:	3f66c16c 	.word	0x3f66c16c
 8011310:	5555553e 	.word	0x5555553e
 8011314:	3fc55555 	.word	0x3fc55555
 8011318:	fff00000 	.word	0xfff00000
 801131c:	3ff00000 	.word	0x3ff00000
 8011320:	4090cbff 	.word	0x4090cbff
 8011324:	3f6f3400 	.word	0x3f6f3400
 8011328:	3fe00000 	.word	0x3fe00000
 801132c:	652b82fe 	.word	0x652b82fe
 8011330:	3c971547 	.word	0x3c971547
 8011334:	4090cc00 	.word	0x4090cc00

08011338 <__ieee754_rem_pio2>:
 8011338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801133c:	ec57 6b10 	vmov	r6, r7, d0
 8011340:	4bc5      	ldr	r3, [pc, #788]	@ (8011658 <__ieee754_rem_pio2+0x320>)
 8011342:	b08d      	sub	sp, #52	@ 0x34
 8011344:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8011348:	4598      	cmp	r8, r3
 801134a:	4604      	mov	r4, r0
 801134c:	9704      	str	r7, [sp, #16]
 801134e:	d807      	bhi.n	8011360 <__ieee754_rem_pio2+0x28>
 8011350:	2200      	movs	r2, #0
 8011352:	2300      	movs	r3, #0
 8011354:	ed80 0b00 	vstr	d0, [r0]
 8011358:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801135c:	2500      	movs	r5, #0
 801135e:	e028      	b.n	80113b2 <__ieee754_rem_pio2+0x7a>
 8011360:	4bbe      	ldr	r3, [pc, #760]	@ (801165c <__ieee754_rem_pio2+0x324>)
 8011362:	4598      	cmp	r8, r3
 8011364:	d878      	bhi.n	8011458 <__ieee754_rem_pio2+0x120>
 8011366:	9b04      	ldr	r3, [sp, #16]
 8011368:	4dbd      	ldr	r5, [pc, #756]	@ (8011660 <__ieee754_rem_pio2+0x328>)
 801136a:	2b00      	cmp	r3, #0
 801136c:	4630      	mov	r0, r6
 801136e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8011620 <__ieee754_rem_pio2+0x2e8>)
 8011370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011374:	4639      	mov	r1, r7
 8011376:	dd38      	ble.n	80113ea <__ieee754_rem_pio2+0xb2>
 8011378:	f7ee ffa6 	bl	80002c8 <__aeabi_dsub>
 801137c:	45a8      	cmp	r8, r5
 801137e:	4606      	mov	r6, r0
 8011380:	460f      	mov	r7, r1
 8011382:	d01a      	beq.n	80113ba <__ieee754_rem_pio2+0x82>
 8011384:	a3a8      	add	r3, pc, #672	@ (adr r3, 8011628 <__ieee754_rem_pio2+0x2f0>)
 8011386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801138a:	f7ee ff9d 	bl	80002c8 <__aeabi_dsub>
 801138e:	4602      	mov	r2, r0
 8011390:	460b      	mov	r3, r1
 8011392:	4680      	mov	r8, r0
 8011394:	4689      	mov	r9, r1
 8011396:	4630      	mov	r0, r6
 8011398:	4639      	mov	r1, r7
 801139a:	f7ee ff95 	bl	80002c8 <__aeabi_dsub>
 801139e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8011628 <__ieee754_rem_pio2+0x2f0>)
 80113a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a4:	f7ee ff90 	bl	80002c8 <__aeabi_dsub>
 80113a8:	e9c4 8900 	strd	r8, r9, [r4]
 80113ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80113b0:	2501      	movs	r5, #1
 80113b2:	4628      	mov	r0, r5
 80113b4:	b00d      	add	sp, #52	@ 0x34
 80113b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113ba:	a39d      	add	r3, pc, #628	@ (adr r3, 8011630 <__ieee754_rem_pio2+0x2f8>)
 80113bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c0:	f7ee ff82 	bl	80002c8 <__aeabi_dsub>
 80113c4:	a39c      	add	r3, pc, #624	@ (adr r3, 8011638 <__ieee754_rem_pio2+0x300>)
 80113c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ca:	4606      	mov	r6, r0
 80113cc:	460f      	mov	r7, r1
 80113ce:	f7ee ff7b 	bl	80002c8 <__aeabi_dsub>
 80113d2:	4602      	mov	r2, r0
 80113d4:	460b      	mov	r3, r1
 80113d6:	4680      	mov	r8, r0
 80113d8:	4689      	mov	r9, r1
 80113da:	4630      	mov	r0, r6
 80113dc:	4639      	mov	r1, r7
 80113de:	f7ee ff73 	bl	80002c8 <__aeabi_dsub>
 80113e2:	a395      	add	r3, pc, #596	@ (adr r3, 8011638 <__ieee754_rem_pio2+0x300>)
 80113e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e8:	e7dc      	b.n	80113a4 <__ieee754_rem_pio2+0x6c>
 80113ea:	f7ee ff6f 	bl	80002cc <__adddf3>
 80113ee:	45a8      	cmp	r8, r5
 80113f0:	4606      	mov	r6, r0
 80113f2:	460f      	mov	r7, r1
 80113f4:	d018      	beq.n	8011428 <__ieee754_rem_pio2+0xf0>
 80113f6:	a38c      	add	r3, pc, #560	@ (adr r3, 8011628 <__ieee754_rem_pio2+0x2f0>)
 80113f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113fc:	f7ee ff66 	bl	80002cc <__adddf3>
 8011400:	4602      	mov	r2, r0
 8011402:	460b      	mov	r3, r1
 8011404:	4680      	mov	r8, r0
 8011406:	4689      	mov	r9, r1
 8011408:	4630      	mov	r0, r6
 801140a:	4639      	mov	r1, r7
 801140c:	f7ee ff5c 	bl	80002c8 <__aeabi_dsub>
 8011410:	a385      	add	r3, pc, #532	@ (adr r3, 8011628 <__ieee754_rem_pio2+0x2f0>)
 8011412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011416:	f7ee ff59 	bl	80002cc <__adddf3>
 801141a:	f04f 35ff 	mov.w	r5, #4294967295
 801141e:	e9c4 8900 	strd	r8, r9, [r4]
 8011422:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011426:	e7c4      	b.n	80113b2 <__ieee754_rem_pio2+0x7a>
 8011428:	a381      	add	r3, pc, #516	@ (adr r3, 8011630 <__ieee754_rem_pio2+0x2f8>)
 801142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801142e:	f7ee ff4d 	bl	80002cc <__adddf3>
 8011432:	a381      	add	r3, pc, #516	@ (adr r3, 8011638 <__ieee754_rem_pio2+0x300>)
 8011434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011438:	4606      	mov	r6, r0
 801143a:	460f      	mov	r7, r1
 801143c:	f7ee ff46 	bl	80002cc <__adddf3>
 8011440:	4602      	mov	r2, r0
 8011442:	460b      	mov	r3, r1
 8011444:	4680      	mov	r8, r0
 8011446:	4689      	mov	r9, r1
 8011448:	4630      	mov	r0, r6
 801144a:	4639      	mov	r1, r7
 801144c:	f7ee ff3c 	bl	80002c8 <__aeabi_dsub>
 8011450:	a379      	add	r3, pc, #484	@ (adr r3, 8011638 <__ieee754_rem_pio2+0x300>)
 8011452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011456:	e7de      	b.n	8011416 <__ieee754_rem_pio2+0xde>
 8011458:	4b82      	ldr	r3, [pc, #520]	@ (8011664 <__ieee754_rem_pio2+0x32c>)
 801145a:	4598      	cmp	r8, r3
 801145c:	f200 80d1 	bhi.w	8011602 <__ieee754_rem_pio2+0x2ca>
 8011460:	f000 f966 	bl	8011730 <fabs>
 8011464:	ec57 6b10 	vmov	r6, r7, d0
 8011468:	a375      	add	r3, pc, #468	@ (adr r3, 8011640 <__ieee754_rem_pio2+0x308>)
 801146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801146e:	4630      	mov	r0, r6
 8011470:	4639      	mov	r1, r7
 8011472:	f7ef f8e1 	bl	8000638 <__aeabi_dmul>
 8011476:	4b7c      	ldr	r3, [pc, #496]	@ (8011668 <__ieee754_rem_pio2+0x330>)
 8011478:	2200      	movs	r2, #0
 801147a:	f7ee ff27 	bl	80002cc <__adddf3>
 801147e:	f7ef fb8b 	bl	8000b98 <__aeabi_d2iz>
 8011482:	4605      	mov	r5, r0
 8011484:	f7ef f86e 	bl	8000564 <__aeabi_i2d>
 8011488:	4602      	mov	r2, r0
 801148a:	460b      	mov	r3, r1
 801148c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011490:	a363      	add	r3, pc, #396	@ (adr r3, 8011620 <__ieee754_rem_pio2+0x2e8>)
 8011492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011496:	f7ef f8cf 	bl	8000638 <__aeabi_dmul>
 801149a:	4602      	mov	r2, r0
 801149c:	460b      	mov	r3, r1
 801149e:	4630      	mov	r0, r6
 80114a0:	4639      	mov	r1, r7
 80114a2:	f7ee ff11 	bl	80002c8 <__aeabi_dsub>
 80114a6:	a360      	add	r3, pc, #384	@ (adr r3, 8011628 <__ieee754_rem_pio2+0x2f0>)
 80114a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ac:	4682      	mov	sl, r0
 80114ae:	468b      	mov	fp, r1
 80114b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114b4:	f7ef f8c0 	bl	8000638 <__aeabi_dmul>
 80114b8:	2d1f      	cmp	r5, #31
 80114ba:	4606      	mov	r6, r0
 80114bc:	460f      	mov	r7, r1
 80114be:	dc0c      	bgt.n	80114da <__ieee754_rem_pio2+0x1a2>
 80114c0:	4b6a      	ldr	r3, [pc, #424]	@ (801166c <__ieee754_rem_pio2+0x334>)
 80114c2:	1e6a      	subs	r2, r5, #1
 80114c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114c8:	4543      	cmp	r3, r8
 80114ca:	d006      	beq.n	80114da <__ieee754_rem_pio2+0x1a2>
 80114cc:	4632      	mov	r2, r6
 80114ce:	463b      	mov	r3, r7
 80114d0:	4650      	mov	r0, sl
 80114d2:	4659      	mov	r1, fp
 80114d4:	f7ee fef8 	bl	80002c8 <__aeabi_dsub>
 80114d8:	e00e      	b.n	80114f8 <__ieee754_rem_pio2+0x1c0>
 80114da:	463b      	mov	r3, r7
 80114dc:	4632      	mov	r2, r6
 80114de:	4650      	mov	r0, sl
 80114e0:	4659      	mov	r1, fp
 80114e2:	f7ee fef1 	bl	80002c8 <__aeabi_dsub>
 80114e6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80114ea:	9305      	str	r3, [sp, #20]
 80114ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80114f0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80114f4:	2b10      	cmp	r3, #16
 80114f6:	dc02      	bgt.n	80114fe <__ieee754_rem_pio2+0x1c6>
 80114f8:	e9c4 0100 	strd	r0, r1, [r4]
 80114fc:	e039      	b.n	8011572 <__ieee754_rem_pio2+0x23a>
 80114fe:	a34c      	add	r3, pc, #304	@ (adr r3, 8011630 <__ieee754_rem_pio2+0x2f8>)
 8011500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011504:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011508:	f7ef f896 	bl	8000638 <__aeabi_dmul>
 801150c:	4606      	mov	r6, r0
 801150e:	460f      	mov	r7, r1
 8011510:	4602      	mov	r2, r0
 8011512:	460b      	mov	r3, r1
 8011514:	4650      	mov	r0, sl
 8011516:	4659      	mov	r1, fp
 8011518:	f7ee fed6 	bl	80002c8 <__aeabi_dsub>
 801151c:	4602      	mov	r2, r0
 801151e:	460b      	mov	r3, r1
 8011520:	4680      	mov	r8, r0
 8011522:	4689      	mov	r9, r1
 8011524:	4650      	mov	r0, sl
 8011526:	4659      	mov	r1, fp
 8011528:	f7ee fece 	bl	80002c8 <__aeabi_dsub>
 801152c:	4632      	mov	r2, r6
 801152e:	463b      	mov	r3, r7
 8011530:	f7ee feca 	bl	80002c8 <__aeabi_dsub>
 8011534:	a340      	add	r3, pc, #256	@ (adr r3, 8011638 <__ieee754_rem_pio2+0x300>)
 8011536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801153a:	4606      	mov	r6, r0
 801153c:	460f      	mov	r7, r1
 801153e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011542:	f7ef f879 	bl	8000638 <__aeabi_dmul>
 8011546:	4632      	mov	r2, r6
 8011548:	463b      	mov	r3, r7
 801154a:	f7ee febd 	bl	80002c8 <__aeabi_dsub>
 801154e:	4602      	mov	r2, r0
 8011550:	460b      	mov	r3, r1
 8011552:	4606      	mov	r6, r0
 8011554:	460f      	mov	r7, r1
 8011556:	4640      	mov	r0, r8
 8011558:	4649      	mov	r1, r9
 801155a:	f7ee feb5 	bl	80002c8 <__aeabi_dsub>
 801155e:	9a05      	ldr	r2, [sp, #20]
 8011560:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011564:	1ad3      	subs	r3, r2, r3
 8011566:	2b31      	cmp	r3, #49	@ 0x31
 8011568:	dc20      	bgt.n	80115ac <__ieee754_rem_pio2+0x274>
 801156a:	e9c4 0100 	strd	r0, r1, [r4]
 801156e:	46c2      	mov	sl, r8
 8011570:	46cb      	mov	fp, r9
 8011572:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011576:	4650      	mov	r0, sl
 8011578:	4642      	mov	r2, r8
 801157a:	464b      	mov	r3, r9
 801157c:	4659      	mov	r1, fp
 801157e:	f7ee fea3 	bl	80002c8 <__aeabi_dsub>
 8011582:	463b      	mov	r3, r7
 8011584:	4632      	mov	r2, r6
 8011586:	f7ee fe9f 	bl	80002c8 <__aeabi_dsub>
 801158a:	9b04      	ldr	r3, [sp, #16]
 801158c:	2b00      	cmp	r3, #0
 801158e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011592:	f6bf af0e 	bge.w	80113b2 <__ieee754_rem_pio2+0x7a>
 8011596:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801159a:	6063      	str	r3, [r4, #4]
 801159c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80115a0:	f8c4 8000 	str.w	r8, [r4]
 80115a4:	60a0      	str	r0, [r4, #8]
 80115a6:	60e3      	str	r3, [r4, #12]
 80115a8:	426d      	negs	r5, r5
 80115aa:	e702      	b.n	80113b2 <__ieee754_rem_pio2+0x7a>
 80115ac:	a326      	add	r3, pc, #152	@ (adr r3, 8011648 <__ieee754_rem_pio2+0x310>)
 80115ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80115b6:	f7ef f83f 	bl	8000638 <__aeabi_dmul>
 80115ba:	4606      	mov	r6, r0
 80115bc:	460f      	mov	r7, r1
 80115be:	4602      	mov	r2, r0
 80115c0:	460b      	mov	r3, r1
 80115c2:	4640      	mov	r0, r8
 80115c4:	4649      	mov	r1, r9
 80115c6:	f7ee fe7f 	bl	80002c8 <__aeabi_dsub>
 80115ca:	4602      	mov	r2, r0
 80115cc:	460b      	mov	r3, r1
 80115ce:	4682      	mov	sl, r0
 80115d0:	468b      	mov	fp, r1
 80115d2:	4640      	mov	r0, r8
 80115d4:	4649      	mov	r1, r9
 80115d6:	f7ee fe77 	bl	80002c8 <__aeabi_dsub>
 80115da:	4632      	mov	r2, r6
 80115dc:	463b      	mov	r3, r7
 80115de:	f7ee fe73 	bl	80002c8 <__aeabi_dsub>
 80115e2:	a31b      	add	r3, pc, #108	@ (adr r3, 8011650 <__ieee754_rem_pio2+0x318>)
 80115e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e8:	4606      	mov	r6, r0
 80115ea:	460f      	mov	r7, r1
 80115ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80115f0:	f7ef f822 	bl	8000638 <__aeabi_dmul>
 80115f4:	4632      	mov	r2, r6
 80115f6:	463b      	mov	r3, r7
 80115f8:	f7ee fe66 	bl	80002c8 <__aeabi_dsub>
 80115fc:	4606      	mov	r6, r0
 80115fe:	460f      	mov	r7, r1
 8011600:	e764      	b.n	80114cc <__ieee754_rem_pio2+0x194>
 8011602:	4b1b      	ldr	r3, [pc, #108]	@ (8011670 <__ieee754_rem_pio2+0x338>)
 8011604:	4598      	cmp	r8, r3
 8011606:	d935      	bls.n	8011674 <__ieee754_rem_pio2+0x33c>
 8011608:	4632      	mov	r2, r6
 801160a:	463b      	mov	r3, r7
 801160c:	4630      	mov	r0, r6
 801160e:	4639      	mov	r1, r7
 8011610:	f7ee fe5a 	bl	80002c8 <__aeabi_dsub>
 8011614:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011618:	e9c4 0100 	strd	r0, r1, [r4]
 801161c:	e69e      	b.n	801135c <__ieee754_rem_pio2+0x24>
 801161e:	bf00      	nop
 8011620:	54400000 	.word	0x54400000
 8011624:	3ff921fb 	.word	0x3ff921fb
 8011628:	1a626331 	.word	0x1a626331
 801162c:	3dd0b461 	.word	0x3dd0b461
 8011630:	1a600000 	.word	0x1a600000
 8011634:	3dd0b461 	.word	0x3dd0b461
 8011638:	2e037073 	.word	0x2e037073
 801163c:	3ba3198a 	.word	0x3ba3198a
 8011640:	6dc9c883 	.word	0x6dc9c883
 8011644:	3fe45f30 	.word	0x3fe45f30
 8011648:	2e000000 	.word	0x2e000000
 801164c:	3ba3198a 	.word	0x3ba3198a
 8011650:	252049c1 	.word	0x252049c1
 8011654:	397b839a 	.word	0x397b839a
 8011658:	3fe921fb 	.word	0x3fe921fb
 801165c:	4002d97b 	.word	0x4002d97b
 8011660:	3ff921fb 	.word	0x3ff921fb
 8011664:	413921fb 	.word	0x413921fb
 8011668:	3fe00000 	.word	0x3fe00000
 801166c:	08012af8 	.word	0x08012af8
 8011670:	7fefffff 	.word	0x7fefffff
 8011674:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011678:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801167c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011680:	4630      	mov	r0, r6
 8011682:	460f      	mov	r7, r1
 8011684:	f7ef fa88 	bl	8000b98 <__aeabi_d2iz>
 8011688:	f7ee ff6c 	bl	8000564 <__aeabi_i2d>
 801168c:	4602      	mov	r2, r0
 801168e:	460b      	mov	r3, r1
 8011690:	4630      	mov	r0, r6
 8011692:	4639      	mov	r1, r7
 8011694:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011698:	f7ee fe16 	bl	80002c8 <__aeabi_dsub>
 801169c:	4b22      	ldr	r3, [pc, #136]	@ (8011728 <__ieee754_rem_pio2+0x3f0>)
 801169e:	2200      	movs	r2, #0
 80116a0:	f7ee ffca 	bl	8000638 <__aeabi_dmul>
 80116a4:	460f      	mov	r7, r1
 80116a6:	4606      	mov	r6, r0
 80116a8:	f7ef fa76 	bl	8000b98 <__aeabi_d2iz>
 80116ac:	f7ee ff5a 	bl	8000564 <__aeabi_i2d>
 80116b0:	4602      	mov	r2, r0
 80116b2:	460b      	mov	r3, r1
 80116b4:	4630      	mov	r0, r6
 80116b6:	4639      	mov	r1, r7
 80116b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80116bc:	f7ee fe04 	bl	80002c8 <__aeabi_dsub>
 80116c0:	4b19      	ldr	r3, [pc, #100]	@ (8011728 <__ieee754_rem_pio2+0x3f0>)
 80116c2:	2200      	movs	r2, #0
 80116c4:	f7ee ffb8 	bl	8000638 <__aeabi_dmul>
 80116c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80116cc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80116d0:	f04f 0803 	mov.w	r8, #3
 80116d4:	2600      	movs	r6, #0
 80116d6:	2700      	movs	r7, #0
 80116d8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80116dc:	4632      	mov	r2, r6
 80116de:	463b      	mov	r3, r7
 80116e0:	46c2      	mov	sl, r8
 80116e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80116e6:	f7ef fa0f 	bl	8000b08 <__aeabi_dcmpeq>
 80116ea:	2800      	cmp	r0, #0
 80116ec:	d1f4      	bne.n	80116d8 <__ieee754_rem_pio2+0x3a0>
 80116ee:	4b0f      	ldr	r3, [pc, #60]	@ (801172c <__ieee754_rem_pio2+0x3f4>)
 80116f0:	9301      	str	r3, [sp, #4]
 80116f2:	2302      	movs	r3, #2
 80116f4:	9300      	str	r3, [sp, #0]
 80116f6:	462a      	mov	r2, r5
 80116f8:	4653      	mov	r3, sl
 80116fa:	4621      	mov	r1, r4
 80116fc:	a806      	add	r0, sp, #24
 80116fe:	f000 fc2f 	bl	8011f60 <__kernel_rem_pio2>
 8011702:	9b04      	ldr	r3, [sp, #16]
 8011704:	2b00      	cmp	r3, #0
 8011706:	4605      	mov	r5, r0
 8011708:	f6bf ae53 	bge.w	80113b2 <__ieee754_rem_pio2+0x7a>
 801170c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8011710:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011714:	e9c4 2300 	strd	r2, r3, [r4]
 8011718:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801171c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011720:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8011724:	e740      	b.n	80115a8 <__ieee754_rem_pio2+0x270>
 8011726:	bf00      	nop
 8011728:	41700000 	.word	0x41700000
 801172c:	08012b78 	.word	0x08012b78

08011730 <fabs>:
 8011730:	ec51 0b10 	vmov	r0, r1, d0
 8011734:	4602      	mov	r2, r0
 8011736:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801173a:	ec43 2b10 	vmov	d0, r2, r3
 801173e:	4770      	bx	lr

08011740 <__ieee754_acosf>:
 8011740:	b508      	push	{r3, lr}
 8011742:	ee10 3a10 	vmov	r3, s0
 8011746:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801174a:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801174e:	ed2d 8b0c 	vpush	{d8-d13}
 8011752:	d10a      	bne.n	801176a <__ieee754_acosf+0x2a>
 8011754:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 80118ec <__ieee754_acosf+0x1ac>
 8011758:	eddf 7a65 	vldr	s15, [pc, #404]	@ 80118f0 <__ieee754_acosf+0x1b0>
 801175c:	2b00      	cmp	r3, #0
 801175e:	bfc8      	it	gt
 8011760:	eeb0 0a67 	vmovgt.f32	s0, s15
 8011764:	ecbd 8b0c 	vpop	{d8-d13}
 8011768:	bd08      	pop	{r3, pc}
 801176a:	d904      	bls.n	8011776 <__ieee754_acosf+0x36>
 801176c:	ee30 8a40 	vsub.f32	s16, s0, s0
 8011770:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8011774:	e7f6      	b.n	8011764 <__ieee754_acosf+0x24>
 8011776:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 801177a:	d23c      	bcs.n	80117f6 <__ieee754_acosf+0xb6>
 801177c:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8011780:	f240 80b1 	bls.w	80118e6 <__ieee754_acosf+0x1a6>
 8011784:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011788:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 80118f4 <__ieee754_acosf+0x1b4>
 801178c:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80118f8 <__ieee754_acosf+0x1b8>
 8011790:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 80118fc <__ieee754_acosf+0x1bc>
 8011794:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011798:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8011900 <__ieee754_acosf+0x1c0>
 801179c:	eee7 6a27 	vfma.f32	s13, s14, s15
 80117a0:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8011904 <__ieee754_acosf+0x1c4>
 80117a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80117a8:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8011908 <__ieee754_acosf+0x1c8>
 80117ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 80117b0:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 801190c <__ieee754_acosf+0x1cc>
 80117b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80117b8:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8011910 <__ieee754_acosf+0x1d0>
 80117bc:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80117c0:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8011914 <__ieee754_acosf+0x1d4>
 80117c4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80117c8:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8011918 <__ieee754_acosf+0x1d8>
 80117cc:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80117d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80117d4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80117d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80117dc:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 801191c <__ieee754_acosf+0x1dc>
 80117e0:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80117e4:	eee0 7a46 	vfms.f32	s15, s0, s12
 80117e8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80117ec:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8011920 <__ieee754_acosf+0x1e0>
 80117f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80117f4:	e7b6      	b.n	8011764 <__ieee754_acosf+0x24>
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	eddf da3e 	vldr	s27, [pc, #248]	@ 80118f4 <__ieee754_acosf+0x1b4>
 80117fc:	eddf ca3e 	vldr	s25, [pc, #248]	@ 80118f8 <__ieee754_acosf+0x1b8>
 8011800:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 8011900 <__ieee754_acosf+0x1c0>
 8011804:	eddf ba3f 	vldr	s23, [pc, #252]	@ 8011904 <__ieee754_acosf+0x1c4>
 8011808:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 8011908 <__ieee754_acosf+0x1c8>
 801180c:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 801190c <__ieee754_acosf+0x1cc>
 8011810:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8011910 <__ieee754_acosf+0x1d0>
 8011814:	eddf aa39 	vldr	s21, [pc, #228]	@ 80118fc <__ieee754_acosf+0x1bc>
 8011818:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 8011914 <__ieee754_acosf+0x1d4>
 801181c:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 8011918 <__ieee754_acosf+0x1d8>
 8011820:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8011824:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011828:	da28      	bge.n	801187c <__ieee754_acosf+0x13c>
 801182a:	ee30 8a09 	vadd.f32	s16, s0, s18
 801182e:	ee28 0a27 	vmul.f32	s0, s16, s15
 8011832:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8011836:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801183a:	eeac ca80 	vfma.f32	s24, s25, s0
 801183e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8011842:	eeec ba00 	vfma.f32	s23, s24, s0
 8011846:	eeea 9a00 	vfma.f32	s19, s20, s0
 801184a:	eeab ba80 	vfma.f32	s22, s23, s0
 801184e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8011852:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8011856:	ee68 8a80 	vmul.f32	s17, s17, s0
 801185a:	f7fe fe59 	bl	8010510 <__ieee754_sqrtf>
 801185e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8011862:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8011924 <__ieee754_acosf+0x1e4>
 8011866:	eee0 7a07 	vfma.f32	s15, s0, s14
 801186a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801186e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011872:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8011928 <__ieee754_acosf+0x1e8>
 8011876:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801187a:	e773      	b.n	8011764 <__ieee754_acosf+0x24>
 801187c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8011880:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011884:	eeb0 0a48 	vmov.f32	s0, s16
 8011888:	f7fe fe42 	bl	8010510 <__ieee754_sqrtf>
 801188c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8011890:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8011894:	eeac ca88 	vfma.f32	s24, s25, s16
 8011898:	eeaa aa88 	vfma.f32	s20, s21, s16
 801189c:	eeec ba08 	vfma.f32	s23, s24, s16
 80118a0:	ee10 3a10 	vmov	r3, s0
 80118a4:	eeab ba88 	vfma.f32	s22, s23, s16
 80118a8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80118ac:	f023 030f 	bic.w	r3, r3, #15
 80118b0:	eeea 9a08 	vfma.f32	s19, s20, s16
 80118b4:	ee07 3a90 	vmov	s15, r3
 80118b8:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80118bc:	eeb0 6a48 	vmov.f32	s12, s16
 80118c0:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80118c4:	eea9 9a88 	vfma.f32	s18, s19, s16
 80118c8:	ee70 6a27 	vadd.f32	s13, s0, s15
 80118cc:	ee68 8a88 	vmul.f32	s17, s17, s16
 80118d0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80118d4:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80118d8:	eea0 7a26 	vfma.f32	s14, s0, s13
 80118dc:	ee37 0a87 	vadd.f32	s0, s15, s14
 80118e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80118e4:	e73e      	b.n	8011764 <__ieee754_acosf+0x24>
 80118e6:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 801192c <__ieee754_acosf+0x1ec>
 80118ea:	e73b      	b.n	8011764 <__ieee754_acosf+0x24>
 80118ec:	40490fdb 	.word	0x40490fdb
 80118f0:	00000000 	.word	0x00000000
 80118f4:	3811ef08 	.word	0x3811ef08
 80118f8:	3a4f7f04 	.word	0x3a4f7f04
 80118fc:	bf303361 	.word	0xbf303361
 8011900:	bd241146 	.word	0xbd241146
 8011904:	3e4e0aa8 	.word	0x3e4e0aa8
 8011908:	bea6b090 	.word	0xbea6b090
 801190c:	3e2aaaab 	.word	0x3e2aaaab
 8011910:	3d9dc62e 	.word	0x3d9dc62e
 8011914:	4001572d 	.word	0x4001572d
 8011918:	c019d139 	.word	0xc019d139
 801191c:	33a22168 	.word	0x33a22168
 8011920:	3fc90fda 	.word	0x3fc90fda
 8011924:	b3a22168 	.word	0xb3a22168
 8011928:	40490fda 	.word	0x40490fda
 801192c:	3fc90fdb 	.word	0x3fc90fdb

08011930 <__ieee754_asinf>:
 8011930:	b538      	push	{r3, r4, r5, lr}
 8011932:	ee10 5a10 	vmov	r5, s0
 8011936:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801193a:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 801193e:	ed2d 8b04 	vpush	{d8-d9}
 8011942:	d10c      	bne.n	801195e <__ieee754_asinf+0x2e>
 8011944:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8011abc <__ieee754_asinf+0x18c>
 8011948:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8011ac0 <__ieee754_asinf+0x190>
 801194c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011950:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011954:	eeb0 0a67 	vmov.f32	s0, s15
 8011958:	ecbd 8b04 	vpop	{d8-d9}
 801195c:	bd38      	pop	{r3, r4, r5, pc}
 801195e:	d904      	bls.n	801196a <__ieee754_asinf+0x3a>
 8011960:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011964:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011968:	e7f6      	b.n	8011958 <__ieee754_asinf+0x28>
 801196a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801196e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8011972:	d20b      	bcs.n	801198c <__ieee754_asinf+0x5c>
 8011974:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8011978:	d252      	bcs.n	8011a20 <__ieee754_asinf+0xf0>
 801197a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8011ac4 <__ieee754_asinf+0x194>
 801197e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011982:	eef4 7ae8 	vcmpe.f32	s15, s17
 8011986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801198a:	dce5      	bgt.n	8011958 <__ieee754_asinf+0x28>
 801198c:	f7fe fc78 	bl	8010280 <fabsf>
 8011990:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8011994:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011998:	ee28 8a27 	vmul.f32	s16, s16, s15
 801199c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8011ac8 <__ieee754_asinf+0x198>
 80119a0:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8011acc <__ieee754_asinf+0x19c>
 80119a4:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8011ad0 <__ieee754_asinf+0x1a0>
 80119a8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80119ac:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8011ad4 <__ieee754_asinf+0x1a4>
 80119b0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80119b4:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8011ad8 <__ieee754_asinf+0x1a8>
 80119b8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80119bc:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8011adc <__ieee754_asinf+0x1ac>
 80119c0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80119c4:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8011ae0 <__ieee754_asinf+0x1b0>
 80119c8:	eea7 9a88 	vfma.f32	s18, s15, s16
 80119cc:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8011ae4 <__ieee754_asinf+0x1b4>
 80119d0:	eee8 7a07 	vfma.f32	s15, s16, s14
 80119d4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8011ae8 <__ieee754_asinf+0x1b8>
 80119d8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80119dc:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8011aec <__ieee754_asinf+0x1bc>
 80119e0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80119e4:	eeb0 0a48 	vmov.f32	s0, s16
 80119e8:	eee7 8a88 	vfma.f32	s17, s15, s16
 80119ec:	f7fe fd90 	bl	8010510 <__ieee754_sqrtf>
 80119f0:	4b3f      	ldr	r3, [pc, #252]	@ (8011af0 <__ieee754_asinf+0x1c0>)
 80119f2:	ee29 9a08 	vmul.f32	s18, s18, s16
 80119f6:	429c      	cmp	r4, r3
 80119f8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80119fc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011a00:	d93d      	bls.n	8011a7e <__ieee754_asinf+0x14e>
 8011a02:	eea0 0a06 	vfma.f32	s0, s0, s12
 8011a06:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8011af4 <__ieee754_asinf+0x1c4>
 8011a0a:	eee0 7a26 	vfma.f32	s15, s0, s13
 8011a0e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8011ac0 <__ieee754_asinf+0x190>
 8011a12:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011a16:	2d00      	cmp	r5, #0
 8011a18:	bfd8      	it	le
 8011a1a:	eeb1 0a40 	vnegle.f32	s0, s0
 8011a1e:	e79b      	b.n	8011958 <__ieee754_asinf+0x28>
 8011a20:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011a24:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8011acc <__ieee754_asinf+0x19c>
 8011a28:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8011ac8 <__ieee754_asinf+0x198>
 8011a2c:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8011ae0 <__ieee754_asinf+0x1b0>
 8011a30:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011a34:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8011ad4 <__ieee754_asinf+0x1a4>
 8011a38:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a3c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8011ad8 <__ieee754_asinf+0x1a8>
 8011a40:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011a44:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8011adc <__ieee754_asinf+0x1ac>
 8011a48:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a4c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8011ad0 <__ieee754_asinf+0x1a0>
 8011a50:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011a54:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8011ae4 <__ieee754_asinf+0x1b4>
 8011a58:	eee7 6a86 	vfma.f32	s13, s15, s12
 8011a5c:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8011ae8 <__ieee754_asinf+0x1b8>
 8011a60:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011a64:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8011aec <__ieee754_asinf+0x1bc>
 8011a68:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011a6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011a70:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8011a74:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8011a78:	eea0 0a27 	vfma.f32	s0, s0, s15
 8011a7c:	e76c      	b.n	8011958 <__ieee754_asinf+0x28>
 8011a7e:	ee10 3a10 	vmov	r3, s0
 8011a82:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8011a86:	f023 030f 	bic.w	r3, r3, #15
 8011a8a:	ee07 3a10 	vmov	s14, r3
 8011a8e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8011a92:	ee70 5a00 	vadd.f32	s11, s0, s0
 8011a96:	ee30 0a07 	vadd.f32	s0, s0, s14
 8011a9a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011abc <__ieee754_asinf+0x18c>
 8011a9e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8011aa2:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8011af8 <__ieee754_asinf+0x1c8>
 8011aa6:	eee5 7a66 	vfms.f32	s15, s10, s13
 8011aaa:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8011aae:	eeb0 6a40 	vmov.f32	s12, s0
 8011ab2:	eea7 6a66 	vfms.f32	s12, s14, s13
 8011ab6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011aba:	e7aa      	b.n	8011a12 <__ieee754_asinf+0xe2>
 8011abc:	b33bbd2e 	.word	0xb33bbd2e
 8011ac0:	3fc90fdb 	.word	0x3fc90fdb
 8011ac4:	7149f2ca 	.word	0x7149f2ca
 8011ac8:	3a4f7f04 	.word	0x3a4f7f04
 8011acc:	3811ef08 	.word	0x3811ef08
 8011ad0:	3e2aaaab 	.word	0x3e2aaaab
 8011ad4:	bd241146 	.word	0xbd241146
 8011ad8:	3e4e0aa8 	.word	0x3e4e0aa8
 8011adc:	bea6b090 	.word	0xbea6b090
 8011ae0:	3d9dc62e 	.word	0x3d9dc62e
 8011ae4:	bf303361 	.word	0xbf303361
 8011ae8:	4001572d 	.word	0x4001572d
 8011aec:	c019d139 	.word	0xc019d139
 8011af0:	3f799999 	.word	0x3f799999
 8011af4:	333bbd2e 	.word	0x333bbd2e
 8011af8:	3f490fdb 	.word	0x3f490fdb

08011afc <__ieee754_atan2f>:
 8011afc:	ee10 2a90 	vmov	r2, s1
 8011b00:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8011b04:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011b08:	b510      	push	{r4, lr}
 8011b0a:	eef0 7a40 	vmov.f32	s15, s0
 8011b0e:	d806      	bhi.n	8011b1e <__ieee754_atan2f+0x22>
 8011b10:	ee10 0a10 	vmov	r0, s0
 8011b14:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8011b18:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011b1c:	d904      	bls.n	8011b28 <__ieee754_atan2f+0x2c>
 8011b1e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011b22:	eeb0 0a67 	vmov.f32	s0, s15
 8011b26:	bd10      	pop	{r4, pc}
 8011b28:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8011b2c:	d103      	bne.n	8011b36 <__ieee754_atan2f+0x3a>
 8011b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b32:	f000 b883 	b.w	8011c3c <atanf>
 8011b36:	1794      	asrs	r4, r2, #30
 8011b38:	f004 0402 	and.w	r4, r4, #2
 8011b3c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011b40:	b943      	cbnz	r3, 8011b54 <__ieee754_atan2f+0x58>
 8011b42:	2c02      	cmp	r4, #2
 8011b44:	d05e      	beq.n	8011c04 <__ieee754_atan2f+0x108>
 8011b46:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011c18 <__ieee754_atan2f+0x11c>
 8011b4a:	2c03      	cmp	r4, #3
 8011b4c:	bf08      	it	eq
 8011b4e:	eef0 7a47 	vmoveq.f32	s15, s14
 8011b52:	e7e6      	b.n	8011b22 <__ieee754_atan2f+0x26>
 8011b54:	b941      	cbnz	r1, 8011b68 <__ieee754_atan2f+0x6c>
 8011b56:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8011c1c <__ieee754_atan2f+0x120>
 8011b5a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011c20 <__ieee754_atan2f+0x124>
 8011b5e:	2800      	cmp	r0, #0
 8011b60:	bfb8      	it	lt
 8011b62:	eef0 7a47 	vmovlt.f32	s15, s14
 8011b66:	e7dc      	b.n	8011b22 <__ieee754_atan2f+0x26>
 8011b68:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011b6c:	d110      	bne.n	8011b90 <__ieee754_atan2f+0x94>
 8011b6e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011b72:	f104 34ff 	add.w	r4, r4, #4294967295
 8011b76:	d107      	bne.n	8011b88 <__ieee754_atan2f+0x8c>
 8011b78:	2c02      	cmp	r4, #2
 8011b7a:	d846      	bhi.n	8011c0a <__ieee754_atan2f+0x10e>
 8011b7c:	4b29      	ldr	r3, [pc, #164]	@ (8011c24 <__ieee754_atan2f+0x128>)
 8011b7e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011b82:	edd3 7a00 	vldr	s15, [r3]
 8011b86:	e7cc      	b.n	8011b22 <__ieee754_atan2f+0x26>
 8011b88:	2c02      	cmp	r4, #2
 8011b8a:	d841      	bhi.n	8011c10 <__ieee754_atan2f+0x114>
 8011b8c:	4b26      	ldr	r3, [pc, #152]	@ (8011c28 <__ieee754_atan2f+0x12c>)
 8011b8e:	e7f6      	b.n	8011b7e <__ieee754_atan2f+0x82>
 8011b90:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011b94:	d0df      	beq.n	8011b56 <__ieee754_atan2f+0x5a>
 8011b96:	1a5b      	subs	r3, r3, r1
 8011b98:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8011b9c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011ba0:	da1a      	bge.n	8011bd8 <__ieee754_atan2f+0xdc>
 8011ba2:	2a00      	cmp	r2, #0
 8011ba4:	da01      	bge.n	8011baa <__ieee754_atan2f+0xae>
 8011ba6:	313c      	adds	r1, #60	@ 0x3c
 8011ba8:	db19      	blt.n	8011bde <__ieee754_atan2f+0xe2>
 8011baa:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8011bae:	f7fe fb67 	bl	8010280 <fabsf>
 8011bb2:	f000 f843 	bl	8011c3c <atanf>
 8011bb6:	eef0 7a40 	vmov.f32	s15, s0
 8011bba:	2c01      	cmp	r4, #1
 8011bbc:	d012      	beq.n	8011be4 <__ieee754_atan2f+0xe8>
 8011bbe:	2c02      	cmp	r4, #2
 8011bc0:	d017      	beq.n	8011bf2 <__ieee754_atan2f+0xf6>
 8011bc2:	2c00      	cmp	r4, #0
 8011bc4:	d0ad      	beq.n	8011b22 <__ieee754_atan2f+0x26>
 8011bc6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8011c2c <__ieee754_atan2f+0x130>
 8011bca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011bce:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8011c30 <__ieee754_atan2f+0x134>
 8011bd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011bd6:	e7a4      	b.n	8011b22 <__ieee754_atan2f+0x26>
 8011bd8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8011c1c <__ieee754_atan2f+0x120>
 8011bdc:	e7ed      	b.n	8011bba <__ieee754_atan2f+0xbe>
 8011bde:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011c34 <__ieee754_atan2f+0x138>
 8011be2:	e7ea      	b.n	8011bba <__ieee754_atan2f+0xbe>
 8011be4:	ee17 3a90 	vmov	r3, s15
 8011be8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8011bec:	ee07 3a90 	vmov	s15, r3
 8011bf0:	e797      	b.n	8011b22 <__ieee754_atan2f+0x26>
 8011bf2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8011c2c <__ieee754_atan2f+0x130>
 8011bf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011bfa:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8011c30 <__ieee754_atan2f+0x134>
 8011bfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011c02:	e78e      	b.n	8011b22 <__ieee754_atan2f+0x26>
 8011c04:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8011c30 <__ieee754_atan2f+0x134>
 8011c08:	e78b      	b.n	8011b22 <__ieee754_atan2f+0x26>
 8011c0a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8011c38 <__ieee754_atan2f+0x13c>
 8011c0e:	e788      	b.n	8011b22 <__ieee754_atan2f+0x26>
 8011c10:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011c34 <__ieee754_atan2f+0x138>
 8011c14:	e785      	b.n	8011b22 <__ieee754_atan2f+0x26>
 8011c16:	bf00      	nop
 8011c18:	c0490fdb 	.word	0xc0490fdb
 8011c1c:	3fc90fdb 	.word	0x3fc90fdb
 8011c20:	bfc90fdb 	.word	0xbfc90fdb
 8011c24:	08012c8c 	.word	0x08012c8c
 8011c28:	08012c80 	.word	0x08012c80
 8011c2c:	33bbbd2e 	.word	0x33bbbd2e
 8011c30:	40490fdb 	.word	0x40490fdb
 8011c34:	00000000 	.word	0x00000000
 8011c38:	3f490fdb 	.word	0x3f490fdb

08011c3c <atanf>:
 8011c3c:	b538      	push	{r3, r4, r5, lr}
 8011c3e:	ee10 5a10 	vmov	r5, s0
 8011c42:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8011c46:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8011c4a:	eef0 7a40 	vmov.f32	s15, s0
 8011c4e:	d310      	bcc.n	8011c72 <atanf+0x36>
 8011c50:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8011c54:	d904      	bls.n	8011c60 <atanf+0x24>
 8011c56:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8011c5e:	bd38      	pop	{r3, r4, r5, pc}
 8011c60:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8011d98 <atanf+0x15c>
 8011c64:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8011d9c <atanf+0x160>
 8011c68:	2d00      	cmp	r5, #0
 8011c6a:	bfc8      	it	gt
 8011c6c:	eef0 7a47 	vmovgt.f32	s15, s14
 8011c70:	e7f3      	b.n	8011c5a <atanf+0x1e>
 8011c72:	4b4b      	ldr	r3, [pc, #300]	@ (8011da0 <atanf+0x164>)
 8011c74:	429c      	cmp	r4, r3
 8011c76:	d810      	bhi.n	8011c9a <atanf+0x5e>
 8011c78:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8011c7c:	d20a      	bcs.n	8011c94 <atanf+0x58>
 8011c7e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8011da4 <atanf+0x168>
 8011c82:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011c8a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c92:	dce2      	bgt.n	8011c5a <atanf+0x1e>
 8011c94:	f04f 33ff 	mov.w	r3, #4294967295
 8011c98:	e013      	b.n	8011cc2 <atanf+0x86>
 8011c9a:	f7fe faf1 	bl	8010280 <fabsf>
 8011c9e:	4b42      	ldr	r3, [pc, #264]	@ (8011da8 <atanf+0x16c>)
 8011ca0:	429c      	cmp	r4, r3
 8011ca2:	d84f      	bhi.n	8011d44 <atanf+0x108>
 8011ca4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8011ca8:	429c      	cmp	r4, r3
 8011caa:	d841      	bhi.n	8011d30 <atanf+0xf4>
 8011cac:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8011cb0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011cb4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011cb8:	2300      	movs	r3, #0
 8011cba:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011cbe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011cc2:	1c5a      	adds	r2, r3, #1
 8011cc4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011cc8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8011dac <atanf+0x170>
 8011ccc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8011db0 <atanf+0x174>
 8011cd0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8011db4 <atanf+0x178>
 8011cd4:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011cd8:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011cdc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8011db8 <atanf+0x17c>
 8011ce0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011ce4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8011dbc <atanf+0x180>
 8011ce8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011cec:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011dc0 <atanf+0x184>
 8011cf0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011cf4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8011dc4 <atanf+0x188>
 8011cf8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011cfc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8011dc8 <atanf+0x18c>
 8011d00:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011d04:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011dcc <atanf+0x190>
 8011d08:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011d0c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8011dd0 <atanf+0x194>
 8011d10:	eea7 5a26 	vfma.f32	s10, s14, s13
 8011d14:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8011dd4 <atanf+0x198>
 8011d18:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011d1c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011d20:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011d24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011d28:	d121      	bne.n	8011d6e <atanf+0x132>
 8011d2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d2e:	e794      	b.n	8011c5a <atanf+0x1e>
 8011d30:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011d34:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011d38:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011d3c:	2301      	movs	r3, #1
 8011d3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011d42:	e7be      	b.n	8011cc2 <atanf+0x86>
 8011d44:	4b24      	ldr	r3, [pc, #144]	@ (8011dd8 <atanf+0x19c>)
 8011d46:	429c      	cmp	r4, r3
 8011d48:	d80b      	bhi.n	8011d62 <atanf+0x126>
 8011d4a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8011d4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011d52:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011d56:	2302      	movs	r3, #2
 8011d58:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011d60:	e7af      	b.n	8011cc2 <atanf+0x86>
 8011d62:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011d66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011d6a:	2303      	movs	r3, #3
 8011d6c:	e7a9      	b.n	8011cc2 <atanf+0x86>
 8011d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8011ddc <atanf+0x1a0>)
 8011d70:	491b      	ldr	r1, [pc, #108]	@ (8011de0 <atanf+0x1a4>)
 8011d72:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011d76:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011d7a:	edd3 6a00 	vldr	s13, [r3]
 8011d7e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011d82:	2d00      	cmp	r5, #0
 8011d84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011d88:	edd2 7a00 	vldr	s15, [r2]
 8011d8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d90:	bfb8      	it	lt
 8011d92:	eef1 7a67 	vneglt.f32	s15, s15
 8011d96:	e760      	b.n	8011c5a <atanf+0x1e>
 8011d98:	bfc90fdb 	.word	0xbfc90fdb
 8011d9c:	3fc90fdb 	.word	0x3fc90fdb
 8011da0:	3edfffff 	.word	0x3edfffff
 8011da4:	7149f2ca 	.word	0x7149f2ca
 8011da8:	3f97ffff 	.word	0x3f97ffff
 8011dac:	3c8569d7 	.word	0x3c8569d7
 8011db0:	3d4bda59 	.word	0x3d4bda59
 8011db4:	bd6ef16b 	.word	0xbd6ef16b
 8011db8:	3d886b35 	.word	0x3d886b35
 8011dbc:	3dba2e6e 	.word	0x3dba2e6e
 8011dc0:	3e124925 	.word	0x3e124925
 8011dc4:	3eaaaaab 	.word	0x3eaaaaab
 8011dc8:	bd15a221 	.word	0xbd15a221
 8011dcc:	bd9d8795 	.word	0xbd9d8795
 8011dd0:	bde38e38 	.word	0xbde38e38
 8011dd4:	be4ccccd 	.word	0xbe4ccccd
 8011dd8:	401bffff 	.word	0x401bffff
 8011ddc:	08012ca8 	.word	0x08012ca8
 8011de0:	08012c98 	.word	0x08012c98
 8011de4:	00000000 	.word	0x00000000

08011de8 <scalbn>:
 8011de8:	b570      	push	{r4, r5, r6, lr}
 8011dea:	ec55 4b10 	vmov	r4, r5, d0
 8011dee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011df2:	4606      	mov	r6, r0
 8011df4:	462b      	mov	r3, r5
 8011df6:	b991      	cbnz	r1, 8011e1e <scalbn+0x36>
 8011df8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011dfc:	4323      	orrs	r3, r4
 8011dfe:	d03d      	beq.n	8011e7c <scalbn+0x94>
 8011e00:	4b35      	ldr	r3, [pc, #212]	@ (8011ed8 <scalbn+0xf0>)
 8011e02:	4620      	mov	r0, r4
 8011e04:	4629      	mov	r1, r5
 8011e06:	2200      	movs	r2, #0
 8011e08:	f7ee fc16 	bl	8000638 <__aeabi_dmul>
 8011e0c:	4b33      	ldr	r3, [pc, #204]	@ (8011edc <scalbn+0xf4>)
 8011e0e:	429e      	cmp	r6, r3
 8011e10:	4604      	mov	r4, r0
 8011e12:	460d      	mov	r5, r1
 8011e14:	da0f      	bge.n	8011e36 <scalbn+0x4e>
 8011e16:	a328      	add	r3, pc, #160	@ (adr r3, 8011eb8 <scalbn+0xd0>)
 8011e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e1c:	e01e      	b.n	8011e5c <scalbn+0x74>
 8011e1e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011e22:	4291      	cmp	r1, r2
 8011e24:	d10b      	bne.n	8011e3e <scalbn+0x56>
 8011e26:	4622      	mov	r2, r4
 8011e28:	4620      	mov	r0, r4
 8011e2a:	4629      	mov	r1, r5
 8011e2c:	f7ee fa4e 	bl	80002cc <__adddf3>
 8011e30:	4604      	mov	r4, r0
 8011e32:	460d      	mov	r5, r1
 8011e34:	e022      	b.n	8011e7c <scalbn+0x94>
 8011e36:	460b      	mov	r3, r1
 8011e38:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011e3c:	3936      	subs	r1, #54	@ 0x36
 8011e3e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011e42:	4296      	cmp	r6, r2
 8011e44:	dd0d      	ble.n	8011e62 <scalbn+0x7a>
 8011e46:	2d00      	cmp	r5, #0
 8011e48:	a11d      	add	r1, pc, #116	@ (adr r1, 8011ec0 <scalbn+0xd8>)
 8011e4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e4e:	da02      	bge.n	8011e56 <scalbn+0x6e>
 8011e50:	a11d      	add	r1, pc, #116	@ (adr r1, 8011ec8 <scalbn+0xe0>)
 8011e52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e56:	a31a      	add	r3, pc, #104	@ (adr r3, 8011ec0 <scalbn+0xd8>)
 8011e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e5c:	f7ee fbec 	bl	8000638 <__aeabi_dmul>
 8011e60:	e7e6      	b.n	8011e30 <scalbn+0x48>
 8011e62:	1872      	adds	r2, r6, r1
 8011e64:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011e68:	428a      	cmp	r2, r1
 8011e6a:	dcec      	bgt.n	8011e46 <scalbn+0x5e>
 8011e6c:	2a00      	cmp	r2, #0
 8011e6e:	dd08      	ble.n	8011e82 <scalbn+0x9a>
 8011e70:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011e74:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011e78:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011e7c:	ec45 4b10 	vmov	d0, r4, r5
 8011e80:	bd70      	pop	{r4, r5, r6, pc}
 8011e82:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8011e86:	da08      	bge.n	8011e9a <scalbn+0xb2>
 8011e88:	2d00      	cmp	r5, #0
 8011e8a:	a10b      	add	r1, pc, #44	@ (adr r1, 8011eb8 <scalbn+0xd0>)
 8011e8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e90:	dac1      	bge.n	8011e16 <scalbn+0x2e>
 8011e92:	a10f      	add	r1, pc, #60	@ (adr r1, 8011ed0 <scalbn+0xe8>)
 8011e94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e98:	e7bd      	b.n	8011e16 <scalbn+0x2e>
 8011e9a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011e9e:	3236      	adds	r2, #54	@ 0x36
 8011ea0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011ea4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011ea8:	4620      	mov	r0, r4
 8011eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8011ee0 <scalbn+0xf8>)
 8011eac:	4629      	mov	r1, r5
 8011eae:	2200      	movs	r2, #0
 8011eb0:	e7d4      	b.n	8011e5c <scalbn+0x74>
 8011eb2:	bf00      	nop
 8011eb4:	f3af 8000 	nop.w
 8011eb8:	c2f8f359 	.word	0xc2f8f359
 8011ebc:	01a56e1f 	.word	0x01a56e1f
 8011ec0:	8800759c 	.word	0x8800759c
 8011ec4:	7e37e43c 	.word	0x7e37e43c
 8011ec8:	8800759c 	.word	0x8800759c
 8011ecc:	fe37e43c 	.word	0xfe37e43c
 8011ed0:	c2f8f359 	.word	0xc2f8f359
 8011ed4:	81a56e1f 	.word	0x81a56e1f
 8011ed8:	43500000 	.word	0x43500000
 8011edc:	ffff3cb0 	.word	0xffff3cb0
 8011ee0:	3c900000 	.word	0x3c900000

08011ee4 <with_errno>:
 8011ee4:	b510      	push	{r4, lr}
 8011ee6:	ed2d 8b02 	vpush	{d8}
 8011eea:	eeb0 8a40 	vmov.f32	s16, s0
 8011eee:	eef0 8a60 	vmov.f32	s17, s1
 8011ef2:	4604      	mov	r4, r0
 8011ef4:	f7fc fa60 	bl	800e3b8 <__errno>
 8011ef8:	eeb0 0a48 	vmov.f32	s0, s16
 8011efc:	eef0 0a68 	vmov.f32	s1, s17
 8011f00:	ecbd 8b02 	vpop	{d8}
 8011f04:	6004      	str	r4, [r0, #0]
 8011f06:	bd10      	pop	{r4, pc}

08011f08 <xflow>:
 8011f08:	4603      	mov	r3, r0
 8011f0a:	b507      	push	{r0, r1, r2, lr}
 8011f0c:	ec51 0b10 	vmov	r0, r1, d0
 8011f10:	b183      	cbz	r3, 8011f34 <xflow+0x2c>
 8011f12:	4602      	mov	r2, r0
 8011f14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011f18:	e9cd 2300 	strd	r2, r3, [sp]
 8011f1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f20:	f7ee fb8a 	bl	8000638 <__aeabi_dmul>
 8011f24:	ec41 0b10 	vmov	d0, r0, r1
 8011f28:	2022      	movs	r0, #34	@ 0x22
 8011f2a:	b003      	add	sp, #12
 8011f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f30:	f7ff bfd8 	b.w	8011ee4 <with_errno>
 8011f34:	4602      	mov	r2, r0
 8011f36:	460b      	mov	r3, r1
 8011f38:	e7ee      	b.n	8011f18 <xflow+0x10>
 8011f3a:	0000      	movs	r0, r0
 8011f3c:	0000      	movs	r0, r0
	...

08011f40 <__math_uflow>:
 8011f40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011f48 <__math_uflow+0x8>
 8011f44:	f7ff bfe0 	b.w	8011f08 <xflow>
 8011f48:	00000000 	.word	0x00000000
 8011f4c:	10000000 	.word	0x10000000

08011f50 <__math_oflow>:
 8011f50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011f58 <__math_oflow+0x8>
 8011f54:	f7ff bfd8 	b.w	8011f08 <xflow>
 8011f58:	00000000 	.word	0x00000000
 8011f5c:	70000000 	.word	0x70000000

08011f60 <__kernel_rem_pio2>:
 8011f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f64:	ed2d 8b02 	vpush	{d8}
 8011f68:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8011f6c:	f112 0f14 	cmn.w	r2, #20
 8011f70:	9306      	str	r3, [sp, #24]
 8011f72:	9104      	str	r1, [sp, #16]
 8011f74:	4bbe      	ldr	r3, [pc, #760]	@ (8012270 <__kernel_rem_pio2+0x310>)
 8011f76:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8011f78:	9008      	str	r0, [sp, #32]
 8011f7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011f7e:	9300      	str	r3, [sp, #0]
 8011f80:	9b06      	ldr	r3, [sp, #24]
 8011f82:	f103 33ff 	add.w	r3, r3, #4294967295
 8011f86:	bfa8      	it	ge
 8011f88:	1ed4      	subge	r4, r2, #3
 8011f8a:	9305      	str	r3, [sp, #20]
 8011f8c:	bfb2      	itee	lt
 8011f8e:	2400      	movlt	r4, #0
 8011f90:	2318      	movge	r3, #24
 8011f92:	fb94 f4f3 	sdivge	r4, r4, r3
 8011f96:	f06f 0317 	mvn.w	r3, #23
 8011f9a:	fb04 3303 	mla	r3, r4, r3, r3
 8011f9e:	eb03 0b02 	add.w	fp, r3, r2
 8011fa2:	9b00      	ldr	r3, [sp, #0]
 8011fa4:	9a05      	ldr	r2, [sp, #20]
 8011fa6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8012260 <__kernel_rem_pio2+0x300>
 8011faa:	eb03 0802 	add.w	r8, r3, r2
 8011fae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011fb0:	1aa7      	subs	r7, r4, r2
 8011fb2:	ae20      	add	r6, sp, #128	@ 0x80
 8011fb4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011fb8:	2500      	movs	r5, #0
 8011fba:	4545      	cmp	r5, r8
 8011fbc:	dd13      	ble.n	8011fe6 <__kernel_rem_pio2+0x86>
 8011fbe:	9b06      	ldr	r3, [sp, #24]
 8011fc0:	aa20      	add	r2, sp, #128	@ 0x80
 8011fc2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011fc6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8011fca:	f04f 0800 	mov.w	r8, #0
 8011fce:	9b00      	ldr	r3, [sp, #0]
 8011fd0:	4598      	cmp	r8, r3
 8011fd2:	dc31      	bgt.n	8012038 <__kernel_rem_pio2+0xd8>
 8011fd4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8012260 <__kernel_rem_pio2+0x300>
 8011fd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011fdc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011fe0:	462f      	mov	r7, r5
 8011fe2:	2600      	movs	r6, #0
 8011fe4:	e01b      	b.n	801201e <__kernel_rem_pio2+0xbe>
 8011fe6:	42ef      	cmn	r7, r5
 8011fe8:	d407      	bmi.n	8011ffa <__kernel_rem_pio2+0x9a>
 8011fea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011fee:	f7ee fab9 	bl	8000564 <__aeabi_i2d>
 8011ff2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011ff6:	3501      	adds	r5, #1
 8011ff8:	e7df      	b.n	8011fba <__kernel_rem_pio2+0x5a>
 8011ffa:	ec51 0b18 	vmov	r0, r1, d8
 8011ffe:	e7f8      	b.n	8011ff2 <__kernel_rem_pio2+0x92>
 8012000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012004:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012008:	f7ee fb16 	bl	8000638 <__aeabi_dmul>
 801200c:	4602      	mov	r2, r0
 801200e:	460b      	mov	r3, r1
 8012010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012014:	f7ee f95a 	bl	80002cc <__adddf3>
 8012018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801201c:	3601      	adds	r6, #1
 801201e:	9b05      	ldr	r3, [sp, #20]
 8012020:	429e      	cmp	r6, r3
 8012022:	f1a7 0708 	sub.w	r7, r7, #8
 8012026:	ddeb      	ble.n	8012000 <__kernel_rem_pio2+0xa0>
 8012028:	ed9d 7b02 	vldr	d7, [sp, #8]
 801202c:	f108 0801 	add.w	r8, r8, #1
 8012030:	ecaa 7b02 	vstmia	sl!, {d7}
 8012034:	3508      	adds	r5, #8
 8012036:	e7ca      	b.n	8011fce <__kernel_rem_pio2+0x6e>
 8012038:	9b00      	ldr	r3, [sp, #0]
 801203a:	f8dd 8000 	ldr.w	r8, [sp]
 801203e:	aa0c      	add	r2, sp, #48	@ 0x30
 8012040:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012044:	930a      	str	r3, [sp, #40]	@ 0x28
 8012046:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8012048:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801204c:	9309      	str	r3, [sp, #36]	@ 0x24
 801204e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8012052:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012054:	ab98      	add	r3, sp, #608	@ 0x260
 8012056:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801205a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801205e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012062:	ac0c      	add	r4, sp, #48	@ 0x30
 8012064:	ab70      	add	r3, sp, #448	@ 0x1c0
 8012066:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801206a:	46a1      	mov	r9, r4
 801206c:	46c2      	mov	sl, r8
 801206e:	f1ba 0f00 	cmp.w	sl, #0
 8012072:	f1a5 0508 	sub.w	r5, r5, #8
 8012076:	dc77      	bgt.n	8012168 <__kernel_rem_pio2+0x208>
 8012078:	4658      	mov	r0, fp
 801207a:	ed9d 0b02 	vldr	d0, [sp, #8]
 801207e:	f7ff feb3 	bl	8011de8 <scalbn>
 8012082:	ec57 6b10 	vmov	r6, r7, d0
 8012086:	2200      	movs	r2, #0
 8012088:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801208c:	4630      	mov	r0, r6
 801208e:	4639      	mov	r1, r7
 8012090:	f7ee fad2 	bl	8000638 <__aeabi_dmul>
 8012094:	ec41 0b10 	vmov	d0, r0, r1
 8012098:	f000 faba 	bl	8012610 <floor>
 801209c:	4b75      	ldr	r3, [pc, #468]	@ (8012274 <__kernel_rem_pio2+0x314>)
 801209e:	ec51 0b10 	vmov	r0, r1, d0
 80120a2:	2200      	movs	r2, #0
 80120a4:	f7ee fac8 	bl	8000638 <__aeabi_dmul>
 80120a8:	4602      	mov	r2, r0
 80120aa:	460b      	mov	r3, r1
 80120ac:	4630      	mov	r0, r6
 80120ae:	4639      	mov	r1, r7
 80120b0:	f7ee f90a 	bl	80002c8 <__aeabi_dsub>
 80120b4:	460f      	mov	r7, r1
 80120b6:	4606      	mov	r6, r0
 80120b8:	f7ee fd6e 	bl	8000b98 <__aeabi_d2iz>
 80120bc:	9002      	str	r0, [sp, #8]
 80120be:	f7ee fa51 	bl	8000564 <__aeabi_i2d>
 80120c2:	4602      	mov	r2, r0
 80120c4:	460b      	mov	r3, r1
 80120c6:	4630      	mov	r0, r6
 80120c8:	4639      	mov	r1, r7
 80120ca:	f7ee f8fd 	bl	80002c8 <__aeabi_dsub>
 80120ce:	f1bb 0f00 	cmp.w	fp, #0
 80120d2:	4606      	mov	r6, r0
 80120d4:	460f      	mov	r7, r1
 80120d6:	dd6c      	ble.n	80121b2 <__kernel_rem_pio2+0x252>
 80120d8:	f108 31ff 	add.w	r1, r8, #4294967295
 80120dc:	ab0c      	add	r3, sp, #48	@ 0x30
 80120de:	9d02      	ldr	r5, [sp, #8]
 80120e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80120e4:	f1cb 0018 	rsb	r0, fp, #24
 80120e8:	fa43 f200 	asr.w	r2, r3, r0
 80120ec:	4415      	add	r5, r2
 80120ee:	4082      	lsls	r2, r0
 80120f0:	1a9b      	subs	r3, r3, r2
 80120f2:	aa0c      	add	r2, sp, #48	@ 0x30
 80120f4:	9502      	str	r5, [sp, #8]
 80120f6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80120fa:	f1cb 0217 	rsb	r2, fp, #23
 80120fe:	fa43 f902 	asr.w	r9, r3, r2
 8012102:	f1b9 0f00 	cmp.w	r9, #0
 8012106:	dd64      	ble.n	80121d2 <__kernel_rem_pio2+0x272>
 8012108:	9b02      	ldr	r3, [sp, #8]
 801210a:	2200      	movs	r2, #0
 801210c:	3301      	adds	r3, #1
 801210e:	9302      	str	r3, [sp, #8]
 8012110:	4615      	mov	r5, r2
 8012112:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8012116:	4590      	cmp	r8, r2
 8012118:	f300 80b8 	bgt.w	801228c <__kernel_rem_pio2+0x32c>
 801211c:	f1bb 0f00 	cmp.w	fp, #0
 8012120:	dd07      	ble.n	8012132 <__kernel_rem_pio2+0x1d2>
 8012122:	f1bb 0f01 	cmp.w	fp, #1
 8012126:	f000 80bf 	beq.w	80122a8 <__kernel_rem_pio2+0x348>
 801212a:	f1bb 0f02 	cmp.w	fp, #2
 801212e:	f000 80c6 	beq.w	80122be <__kernel_rem_pio2+0x35e>
 8012132:	f1b9 0f02 	cmp.w	r9, #2
 8012136:	d14c      	bne.n	80121d2 <__kernel_rem_pio2+0x272>
 8012138:	4632      	mov	r2, r6
 801213a:	463b      	mov	r3, r7
 801213c:	494e      	ldr	r1, [pc, #312]	@ (8012278 <__kernel_rem_pio2+0x318>)
 801213e:	2000      	movs	r0, #0
 8012140:	f7ee f8c2 	bl	80002c8 <__aeabi_dsub>
 8012144:	4606      	mov	r6, r0
 8012146:	460f      	mov	r7, r1
 8012148:	2d00      	cmp	r5, #0
 801214a:	d042      	beq.n	80121d2 <__kernel_rem_pio2+0x272>
 801214c:	4658      	mov	r0, fp
 801214e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8012268 <__kernel_rem_pio2+0x308>
 8012152:	f7ff fe49 	bl	8011de8 <scalbn>
 8012156:	4630      	mov	r0, r6
 8012158:	4639      	mov	r1, r7
 801215a:	ec53 2b10 	vmov	r2, r3, d0
 801215e:	f7ee f8b3 	bl	80002c8 <__aeabi_dsub>
 8012162:	4606      	mov	r6, r0
 8012164:	460f      	mov	r7, r1
 8012166:	e034      	b.n	80121d2 <__kernel_rem_pio2+0x272>
 8012168:	4b44      	ldr	r3, [pc, #272]	@ (801227c <__kernel_rem_pio2+0x31c>)
 801216a:	2200      	movs	r2, #0
 801216c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012170:	f7ee fa62 	bl	8000638 <__aeabi_dmul>
 8012174:	f7ee fd10 	bl	8000b98 <__aeabi_d2iz>
 8012178:	f7ee f9f4 	bl	8000564 <__aeabi_i2d>
 801217c:	4b40      	ldr	r3, [pc, #256]	@ (8012280 <__kernel_rem_pio2+0x320>)
 801217e:	2200      	movs	r2, #0
 8012180:	4606      	mov	r6, r0
 8012182:	460f      	mov	r7, r1
 8012184:	f7ee fa58 	bl	8000638 <__aeabi_dmul>
 8012188:	4602      	mov	r2, r0
 801218a:	460b      	mov	r3, r1
 801218c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012190:	f7ee f89a 	bl	80002c8 <__aeabi_dsub>
 8012194:	f7ee fd00 	bl	8000b98 <__aeabi_d2iz>
 8012198:	e9d5 2300 	ldrd	r2, r3, [r5]
 801219c:	f849 0b04 	str.w	r0, [r9], #4
 80121a0:	4639      	mov	r1, r7
 80121a2:	4630      	mov	r0, r6
 80121a4:	f7ee f892 	bl	80002cc <__adddf3>
 80121a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80121ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80121b0:	e75d      	b.n	801206e <__kernel_rem_pio2+0x10e>
 80121b2:	d107      	bne.n	80121c4 <__kernel_rem_pio2+0x264>
 80121b4:	f108 33ff 	add.w	r3, r8, #4294967295
 80121b8:	aa0c      	add	r2, sp, #48	@ 0x30
 80121ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80121be:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80121c2:	e79e      	b.n	8012102 <__kernel_rem_pio2+0x1a2>
 80121c4:	4b2f      	ldr	r3, [pc, #188]	@ (8012284 <__kernel_rem_pio2+0x324>)
 80121c6:	2200      	movs	r2, #0
 80121c8:	f7ee fcbc 	bl	8000b44 <__aeabi_dcmpge>
 80121cc:	2800      	cmp	r0, #0
 80121ce:	d143      	bne.n	8012258 <__kernel_rem_pio2+0x2f8>
 80121d0:	4681      	mov	r9, r0
 80121d2:	2200      	movs	r2, #0
 80121d4:	2300      	movs	r3, #0
 80121d6:	4630      	mov	r0, r6
 80121d8:	4639      	mov	r1, r7
 80121da:	f7ee fc95 	bl	8000b08 <__aeabi_dcmpeq>
 80121de:	2800      	cmp	r0, #0
 80121e0:	f000 80bf 	beq.w	8012362 <__kernel_rem_pio2+0x402>
 80121e4:	f108 33ff 	add.w	r3, r8, #4294967295
 80121e8:	2200      	movs	r2, #0
 80121ea:	9900      	ldr	r1, [sp, #0]
 80121ec:	428b      	cmp	r3, r1
 80121ee:	da6e      	bge.n	80122ce <__kernel_rem_pio2+0x36e>
 80121f0:	2a00      	cmp	r2, #0
 80121f2:	f000 8089 	beq.w	8012308 <__kernel_rem_pio2+0x3a8>
 80121f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80121fa:	ab0c      	add	r3, sp, #48	@ 0x30
 80121fc:	f1ab 0b18 	sub.w	fp, fp, #24
 8012200:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d0f6      	beq.n	80121f6 <__kernel_rem_pio2+0x296>
 8012208:	4658      	mov	r0, fp
 801220a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8012268 <__kernel_rem_pio2+0x308>
 801220e:	f7ff fdeb 	bl	8011de8 <scalbn>
 8012212:	f108 0301 	add.w	r3, r8, #1
 8012216:	00da      	lsls	r2, r3, #3
 8012218:	9205      	str	r2, [sp, #20]
 801221a:	ec55 4b10 	vmov	r4, r5, d0
 801221e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8012220:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801227c <__kernel_rem_pio2+0x31c>
 8012224:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8012228:	4646      	mov	r6, r8
 801222a:	f04f 0a00 	mov.w	sl, #0
 801222e:	2e00      	cmp	r6, #0
 8012230:	f280 80cf 	bge.w	80123d2 <__kernel_rem_pio2+0x472>
 8012234:	4644      	mov	r4, r8
 8012236:	2c00      	cmp	r4, #0
 8012238:	f2c0 80fd 	blt.w	8012436 <__kernel_rem_pio2+0x4d6>
 801223c:	4b12      	ldr	r3, [pc, #72]	@ (8012288 <__kernel_rem_pio2+0x328>)
 801223e:	461f      	mov	r7, r3
 8012240:	ab70      	add	r3, sp, #448	@ 0x1c0
 8012242:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012246:	9306      	str	r3, [sp, #24]
 8012248:	f04f 0a00 	mov.w	sl, #0
 801224c:	f04f 0b00 	mov.w	fp, #0
 8012250:	2600      	movs	r6, #0
 8012252:	eba8 0504 	sub.w	r5, r8, r4
 8012256:	e0e2      	b.n	801241e <__kernel_rem_pio2+0x4be>
 8012258:	f04f 0902 	mov.w	r9, #2
 801225c:	e754      	b.n	8012108 <__kernel_rem_pio2+0x1a8>
 801225e:	bf00      	nop
	...
 801226c:	3ff00000 	.word	0x3ff00000
 8012270:	08012cf8 	.word	0x08012cf8
 8012274:	40200000 	.word	0x40200000
 8012278:	3ff00000 	.word	0x3ff00000
 801227c:	3e700000 	.word	0x3e700000
 8012280:	41700000 	.word	0x41700000
 8012284:	3fe00000 	.word	0x3fe00000
 8012288:	08012cb8 	.word	0x08012cb8
 801228c:	f854 3b04 	ldr.w	r3, [r4], #4
 8012290:	b945      	cbnz	r5, 80122a4 <__kernel_rem_pio2+0x344>
 8012292:	b123      	cbz	r3, 801229e <__kernel_rem_pio2+0x33e>
 8012294:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8012298:	f844 3c04 	str.w	r3, [r4, #-4]
 801229c:	2301      	movs	r3, #1
 801229e:	3201      	adds	r2, #1
 80122a0:	461d      	mov	r5, r3
 80122a2:	e738      	b.n	8012116 <__kernel_rem_pio2+0x1b6>
 80122a4:	1acb      	subs	r3, r1, r3
 80122a6:	e7f7      	b.n	8012298 <__kernel_rem_pio2+0x338>
 80122a8:	f108 32ff 	add.w	r2, r8, #4294967295
 80122ac:	ab0c      	add	r3, sp, #48	@ 0x30
 80122ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122b2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80122b6:	a90c      	add	r1, sp, #48	@ 0x30
 80122b8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80122bc:	e739      	b.n	8012132 <__kernel_rem_pio2+0x1d2>
 80122be:	f108 32ff 	add.w	r2, r8, #4294967295
 80122c2:	ab0c      	add	r3, sp, #48	@ 0x30
 80122c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122c8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80122cc:	e7f3      	b.n	80122b6 <__kernel_rem_pio2+0x356>
 80122ce:	a90c      	add	r1, sp, #48	@ 0x30
 80122d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80122d4:	3b01      	subs	r3, #1
 80122d6:	430a      	orrs	r2, r1
 80122d8:	e787      	b.n	80121ea <__kernel_rem_pio2+0x28a>
 80122da:	3401      	adds	r4, #1
 80122dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80122e0:	2a00      	cmp	r2, #0
 80122e2:	d0fa      	beq.n	80122da <__kernel_rem_pio2+0x37a>
 80122e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80122e6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80122ea:	eb0d 0503 	add.w	r5, sp, r3
 80122ee:	9b06      	ldr	r3, [sp, #24]
 80122f0:	aa20      	add	r2, sp, #128	@ 0x80
 80122f2:	4443      	add	r3, r8
 80122f4:	f108 0701 	add.w	r7, r8, #1
 80122f8:	3d98      	subs	r5, #152	@ 0x98
 80122fa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80122fe:	4444      	add	r4, r8
 8012300:	42bc      	cmp	r4, r7
 8012302:	da04      	bge.n	801230e <__kernel_rem_pio2+0x3ae>
 8012304:	46a0      	mov	r8, r4
 8012306:	e6a2      	b.n	801204e <__kernel_rem_pio2+0xee>
 8012308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801230a:	2401      	movs	r4, #1
 801230c:	e7e6      	b.n	80122dc <__kernel_rem_pio2+0x37c>
 801230e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012310:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012314:	f7ee f926 	bl	8000564 <__aeabi_i2d>
 8012318:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80125e0 <__kernel_rem_pio2+0x680>
 801231c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012320:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012324:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012328:	46b2      	mov	sl, r6
 801232a:	f04f 0800 	mov.w	r8, #0
 801232e:	9b05      	ldr	r3, [sp, #20]
 8012330:	4598      	cmp	r8, r3
 8012332:	dd05      	ble.n	8012340 <__kernel_rem_pio2+0x3e0>
 8012334:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012338:	3701      	adds	r7, #1
 801233a:	eca5 7b02 	vstmia	r5!, {d7}
 801233e:	e7df      	b.n	8012300 <__kernel_rem_pio2+0x3a0>
 8012340:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8012344:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012348:	f7ee f976 	bl	8000638 <__aeabi_dmul>
 801234c:	4602      	mov	r2, r0
 801234e:	460b      	mov	r3, r1
 8012350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012354:	f7ed ffba 	bl	80002cc <__adddf3>
 8012358:	f108 0801 	add.w	r8, r8, #1
 801235c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012360:	e7e5      	b.n	801232e <__kernel_rem_pio2+0x3ce>
 8012362:	f1cb 0000 	rsb	r0, fp, #0
 8012366:	ec47 6b10 	vmov	d0, r6, r7
 801236a:	f7ff fd3d 	bl	8011de8 <scalbn>
 801236e:	ec55 4b10 	vmov	r4, r5, d0
 8012372:	4b9d      	ldr	r3, [pc, #628]	@ (80125e8 <__kernel_rem_pio2+0x688>)
 8012374:	2200      	movs	r2, #0
 8012376:	4620      	mov	r0, r4
 8012378:	4629      	mov	r1, r5
 801237a:	f7ee fbe3 	bl	8000b44 <__aeabi_dcmpge>
 801237e:	b300      	cbz	r0, 80123c2 <__kernel_rem_pio2+0x462>
 8012380:	4b9a      	ldr	r3, [pc, #616]	@ (80125ec <__kernel_rem_pio2+0x68c>)
 8012382:	2200      	movs	r2, #0
 8012384:	4620      	mov	r0, r4
 8012386:	4629      	mov	r1, r5
 8012388:	f7ee f956 	bl	8000638 <__aeabi_dmul>
 801238c:	f7ee fc04 	bl	8000b98 <__aeabi_d2iz>
 8012390:	4606      	mov	r6, r0
 8012392:	f7ee f8e7 	bl	8000564 <__aeabi_i2d>
 8012396:	4b94      	ldr	r3, [pc, #592]	@ (80125e8 <__kernel_rem_pio2+0x688>)
 8012398:	2200      	movs	r2, #0
 801239a:	f7ee f94d 	bl	8000638 <__aeabi_dmul>
 801239e:	460b      	mov	r3, r1
 80123a0:	4602      	mov	r2, r0
 80123a2:	4629      	mov	r1, r5
 80123a4:	4620      	mov	r0, r4
 80123a6:	f7ed ff8f 	bl	80002c8 <__aeabi_dsub>
 80123aa:	f7ee fbf5 	bl	8000b98 <__aeabi_d2iz>
 80123ae:	ab0c      	add	r3, sp, #48	@ 0x30
 80123b0:	f10b 0b18 	add.w	fp, fp, #24
 80123b4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80123b8:	f108 0801 	add.w	r8, r8, #1
 80123bc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80123c0:	e722      	b.n	8012208 <__kernel_rem_pio2+0x2a8>
 80123c2:	4620      	mov	r0, r4
 80123c4:	4629      	mov	r1, r5
 80123c6:	f7ee fbe7 	bl	8000b98 <__aeabi_d2iz>
 80123ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80123cc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80123d0:	e71a      	b.n	8012208 <__kernel_rem_pio2+0x2a8>
 80123d2:	ab0c      	add	r3, sp, #48	@ 0x30
 80123d4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80123d8:	f7ee f8c4 	bl	8000564 <__aeabi_i2d>
 80123dc:	4622      	mov	r2, r4
 80123de:	462b      	mov	r3, r5
 80123e0:	f7ee f92a 	bl	8000638 <__aeabi_dmul>
 80123e4:	4652      	mov	r2, sl
 80123e6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80123ea:	465b      	mov	r3, fp
 80123ec:	4620      	mov	r0, r4
 80123ee:	4629      	mov	r1, r5
 80123f0:	f7ee f922 	bl	8000638 <__aeabi_dmul>
 80123f4:	3e01      	subs	r6, #1
 80123f6:	4604      	mov	r4, r0
 80123f8:	460d      	mov	r5, r1
 80123fa:	e718      	b.n	801222e <__kernel_rem_pio2+0x2ce>
 80123fc:	9906      	ldr	r1, [sp, #24]
 80123fe:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8012402:	9106      	str	r1, [sp, #24]
 8012404:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8012408:	f7ee f916 	bl	8000638 <__aeabi_dmul>
 801240c:	4602      	mov	r2, r0
 801240e:	460b      	mov	r3, r1
 8012410:	4650      	mov	r0, sl
 8012412:	4659      	mov	r1, fp
 8012414:	f7ed ff5a 	bl	80002cc <__adddf3>
 8012418:	3601      	adds	r6, #1
 801241a:	4682      	mov	sl, r0
 801241c:	468b      	mov	fp, r1
 801241e:	9b00      	ldr	r3, [sp, #0]
 8012420:	429e      	cmp	r6, r3
 8012422:	dc01      	bgt.n	8012428 <__kernel_rem_pio2+0x4c8>
 8012424:	42b5      	cmp	r5, r6
 8012426:	dae9      	bge.n	80123fc <__kernel_rem_pio2+0x49c>
 8012428:	ab48      	add	r3, sp, #288	@ 0x120
 801242a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801242e:	e9c5 ab00 	strd	sl, fp, [r5]
 8012432:	3c01      	subs	r4, #1
 8012434:	e6ff      	b.n	8012236 <__kernel_rem_pio2+0x2d6>
 8012436:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8012438:	2b02      	cmp	r3, #2
 801243a:	dc0b      	bgt.n	8012454 <__kernel_rem_pio2+0x4f4>
 801243c:	2b00      	cmp	r3, #0
 801243e:	dc39      	bgt.n	80124b4 <__kernel_rem_pio2+0x554>
 8012440:	d05d      	beq.n	80124fe <__kernel_rem_pio2+0x59e>
 8012442:	9b02      	ldr	r3, [sp, #8]
 8012444:	f003 0007 	and.w	r0, r3, #7
 8012448:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801244c:	ecbd 8b02 	vpop	{d8}
 8012450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012454:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8012456:	2b03      	cmp	r3, #3
 8012458:	d1f3      	bne.n	8012442 <__kernel_rem_pio2+0x4e2>
 801245a:	9b05      	ldr	r3, [sp, #20]
 801245c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012460:	eb0d 0403 	add.w	r4, sp, r3
 8012464:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8012468:	4625      	mov	r5, r4
 801246a:	46c2      	mov	sl, r8
 801246c:	f1ba 0f00 	cmp.w	sl, #0
 8012470:	f1a5 0508 	sub.w	r5, r5, #8
 8012474:	dc6b      	bgt.n	801254e <__kernel_rem_pio2+0x5ee>
 8012476:	4645      	mov	r5, r8
 8012478:	2d01      	cmp	r5, #1
 801247a:	f1a4 0408 	sub.w	r4, r4, #8
 801247e:	f300 8087 	bgt.w	8012590 <__kernel_rem_pio2+0x630>
 8012482:	9c05      	ldr	r4, [sp, #20]
 8012484:	ab48      	add	r3, sp, #288	@ 0x120
 8012486:	441c      	add	r4, r3
 8012488:	2000      	movs	r0, #0
 801248a:	2100      	movs	r1, #0
 801248c:	f1b8 0f01 	cmp.w	r8, #1
 8012490:	f300 809c 	bgt.w	80125cc <__kernel_rem_pio2+0x66c>
 8012494:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8012498:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801249c:	f1b9 0f00 	cmp.w	r9, #0
 80124a0:	f040 80a6 	bne.w	80125f0 <__kernel_rem_pio2+0x690>
 80124a4:	9b04      	ldr	r3, [sp, #16]
 80124a6:	e9c3 7800 	strd	r7, r8, [r3]
 80124aa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80124ae:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80124b2:	e7c6      	b.n	8012442 <__kernel_rem_pio2+0x4e2>
 80124b4:	9d05      	ldr	r5, [sp, #20]
 80124b6:	ab48      	add	r3, sp, #288	@ 0x120
 80124b8:	441d      	add	r5, r3
 80124ba:	4644      	mov	r4, r8
 80124bc:	2000      	movs	r0, #0
 80124be:	2100      	movs	r1, #0
 80124c0:	2c00      	cmp	r4, #0
 80124c2:	da35      	bge.n	8012530 <__kernel_rem_pio2+0x5d0>
 80124c4:	f1b9 0f00 	cmp.w	r9, #0
 80124c8:	d038      	beq.n	801253c <__kernel_rem_pio2+0x5dc>
 80124ca:	4602      	mov	r2, r0
 80124cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80124d0:	9c04      	ldr	r4, [sp, #16]
 80124d2:	e9c4 2300 	strd	r2, r3, [r4]
 80124d6:	4602      	mov	r2, r0
 80124d8:	460b      	mov	r3, r1
 80124da:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80124de:	f7ed fef3 	bl	80002c8 <__aeabi_dsub>
 80124e2:	ad4a      	add	r5, sp, #296	@ 0x128
 80124e4:	2401      	movs	r4, #1
 80124e6:	45a0      	cmp	r8, r4
 80124e8:	da2b      	bge.n	8012542 <__kernel_rem_pio2+0x5e2>
 80124ea:	f1b9 0f00 	cmp.w	r9, #0
 80124ee:	d002      	beq.n	80124f6 <__kernel_rem_pio2+0x596>
 80124f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80124f4:	4619      	mov	r1, r3
 80124f6:	9b04      	ldr	r3, [sp, #16]
 80124f8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80124fc:	e7a1      	b.n	8012442 <__kernel_rem_pio2+0x4e2>
 80124fe:	9c05      	ldr	r4, [sp, #20]
 8012500:	ab48      	add	r3, sp, #288	@ 0x120
 8012502:	441c      	add	r4, r3
 8012504:	2000      	movs	r0, #0
 8012506:	2100      	movs	r1, #0
 8012508:	f1b8 0f00 	cmp.w	r8, #0
 801250c:	da09      	bge.n	8012522 <__kernel_rem_pio2+0x5c2>
 801250e:	f1b9 0f00 	cmp.w	r9, #0
 8012512:	d002      	beq.n	801251a <__kernel_rem_pio2+0x5ba>
 8012514:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012518:	4619      	mov	r1, r3
 801251a:	9b04      	ldr	r3, [sp, #16]
 801251c:	e9c3 0100 	strd	r0, r1, [r3]
 8012520:	e78f      	b.n	8012442 <__kernel_rem_pio2+0x4e2>
 8012522:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012526:	f7ed fed1 	bl	80002cc <__adddf3>
 801252a:	f108 38ff 	add.w	r8, r8, #4294967295
 801252e:	e7eb      	b.n	8012508 <__kernel_rem_pio2+0x5a8>
 8012530:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8012534:	f7ed feca 	bl	80002cc <__adddf3>
 8012538:	3c01      	subs	r4, #1
 801253a:	e7c1      	b.n	80124c0 <__kernel_rem_pio2+0x560>
 801253c:	4602      	mov	r2, r0
 801253e:	460b      	mov	r3, r1
 8012540:	e7c6      	b.n	80124d0 <__kernel_rem_pio2+0x570>
 8012542:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8012546:	f7ed fec1 	bl	80002cc <__adddf3>
 801254a:	3401      	adds	r4, #1
 801254c:	e7cb      	b.n	80124e6 <__kernel_rem_pio2+0x586>
 801254e:	ed95 7b00 	vldr	d7, [r5]
 8012552:	ed8d 7b00 	vstr	d7, [sp]
 8012556:	ed95 7b02 	vldr	d7, [r5, #8]
 801255a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801255e:	ec53 2b17 	vmov	r2, r3, d7
 8012562:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012566:	f7ed feb1 	bl	80002cc <__adddf3>
 801256a:	4602      	mov	r2, r0
 801256c:	460b      	mov	r3, r1
 801256e:	4606      	mov	r6, r0
 8012570:	460f      	mov	r7, r1
 8012572:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012576:	f7ed fea7 	bl	80002c8 <__aeabi_dsub>
 801257a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801257e:	f7ed fea5 	bl	80002cc <__adddf3>
 8012582:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012586:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801258a:	e9c5 6700 	strd	r6, r7, [r5]
 801258e:	e76d      	b.n	801246c <__kernel_rem_pio2+0x50c>
 8012590:	ed94 7b00 	vldr	d7, [r4]
 8012594:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8012598:	ec51 0b17 	vmov	r0, r1, d7
 801259c:	4652      	mov	r2, sl
 801259e:	465b      	mov	r3, fp
 80125a0:	ed8d 7b00 	vstr	d7, [sp]
 80125a4:	f7ed fe92 	bl	80002cc <__adddf3>
 80125a8:	4602      	mov	r2, r0
 80125aa:	460b      	mov	r3, r1
 80125ac:	4606      	mov	r6, r0
 80125ae:	460f      	mov	r7, r1
 80125b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125b4:	f7ed fe88 	bl	80002c8 <__aeabi_dsub>
 80125b8:	4652      	mov	r2, sl
 80125ba:	465b      	mov	r3, fp
 80125bc:	f7ed fe86 	bl	80002cc <__adddf3>
 80125c0:	3d01      	subs	r5, #1
 80125c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80125c6:	e9c4 6700 	strd	r6, r7, [r4]
 80125ca:	e755      	b.n	8012478 <__kernel_rem_pio2+0x518>
 80125cc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80125d0:	f7ed fe7c 	bl	80002cc <__adddf3>
 80125d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80125d8:	e758      	b.n	801248c <__kernel_rem_pio2+0x52c>
 80125da:	bf00      	nop
 80125dc:	f3af 8000 	nop.w
	...
 80125e8:	41700000 	.word	0x41700000
 80125ec:	3e700000 	.word	0x3e700000
 80125f0:	9b04      	ldr	r3, [sp, #16]
 80125f2:	9a04      	ldr	r2, [sp, #16]
 80125f4:	601f      	str	r7, [r3, #0]
 80125f6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80125fa:	605c      	str	r4, [r3, #4]
 80125fc:	609d      	str	r5, [r3, #8]
 80125fe:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012602:	60d3      	str	r3, [r2, #12]
 8012604:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012608:	6110      	str	r0, [r2, #16]
 801260a:	6153      	str	r3, [r2, #20]
 801260c:	e719      	b.n	8012442 <__kernel_rem_pio2+0x4e2>
 801260e:	bf00      	nop

08012610 <floor>:
 8012610:	ec51 0b10 	vmov	r0, r1, d0
 8012614:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801261c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8012620:	2e13      	cmp	r6, #19
 8012622:	460c      	mov	r4, r1
 8012624:	4605      	mov	r5, r0
 8012626:	4680      	mov	r8, r0
 8012628:	dc34      	bgt.n	8012694 <floor+0x84>
 801262a:	2e00      	cmp	r6, #0
 801262c:	da17      	bge.n	801265e <floor+0x4e>
 801262e:	a332      	add	r3, pc, #200	@ (adr r3, 80126f8 <floor+0xe8>)
 8012630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012634:	f7ed fe4a 	bl	80002cc <__adddf3>
 8012638:	2200      	movs	r2, #0
 801263a:	2300      	movs	r3, #0
 801263c:	f7ee fa8c 	bl	8000b58 <__aeabi_dcmpgt>
 8012640:	b150      	cbz	r0, 8012658 <floor+0x48>
 8012642:	2c00      	cmp	r4, #0
 8012644:	da55      	bge.n	80126f2 <floor+0xe2>
 8012646:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801264a:	432c      	orrs	r4, r5
 801264c:	2500      	movs	r5, #0
 801264e:	42ac      	cmp	r4, r5
 8012650:	4c2b      	ldr	r4, [pc, #172]	@ (8012700 <floor+0xf0>)
 8012652:	bf08      	it	eq
 8012654:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8012658:	4621      	mov	r1, r4
 801265a:	4628      	mov	r0, r5
 801265c:	e023      	b.n	80126a6 <floor+0x96>
 801265e:	4f29      	ldr	r7, [pc, #164]	@ (8012704 <floor+0xf4>)
 8012660:	4137      	asrs	r7, r6
 8012662:	ea01 0307 	and.w	r3, r1, r7
 8012666:	4303      	orrs	r3, r0
 8012668:	d01d      	beq.n	80126a6 <floor+0x96>
 801266a:	a323      	add	r3, pc, #140	@ (adr r3, 80126f8 <floor+0xe8>)
 801266c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012670:	f7ed fe2c 	bl	80002cc <__adddf3>
 8012674:	2200      	movs	r2, #0
 8012676:	2300      	movs	r3, #0
 8012678:	f7ee fa6e 	bl	8000b58 <__aeabi_dcmpgt>
 801267c:	2800      	cmp	r0, #0
 801267e:	d0eb      	beq.n	8012658 <floor+0x48>
 8012680:	2c00      	cmp	r4, #0
 8012682:	bfbe      	ittt	lt
 8012684:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8012688:	4133      	asrlt	r3, r6
 801268a:	18e4      	addlt	r4, r4, r3
 801268c:	ea24 0407 	bic.w	r4, r4, r7
 8012690:	2500      	movs	r5, #0
 8012692:	e7e1      	b.n	8012658 <floor+0x48>
 8012694:	2e33      	cmp	r6, #51	@ 0x33
 8012696:	dd0a      	ble.n	80126ae <floor+0x9e>
 8012698:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801269c:	d103      	bne.n	80126a6 <floor+0x96>
 801269e:	4602      	mov	r2, r0
 80126a0:	460b      	mov	r3, r1
 80126a2:	f7ed fe13 	bl	80002cc <__adddf3>
 80126a6:	ec41 0b10 	vmov	d0, r0, r1
 80126aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126ae:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80126b2:	f04f 37ff 	mov.w	r7, #4294967295
 80126b6:	40df      	lsrs	r7, r3
 80126b8:	4207      	tst	r7, r0
 80126ba:	d0f4      	beq.n	80126a6 <floor+0x96>
 80126bc:	a30e      	add	r3, pc, #56	@ (adr r3, 80126f8 <floor+0xe8>)
 80126be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c2:	f7ed fe03 	bl	80002cc <__adddf3>
 80126c6:	2200      	movs	r2, #0
 80126c8:	2300      	movs	r3, #0
 80126ca:	f7ee fa45 	bl	8000b58 <__aeabi_dcmpgt>
 80126ce:	2800      	cmp	r0, #0
 80126d0:	d0c2      	beq.n	8012658 <floor+0x48>
 80126d2:	2c00      	cmp	r4, #0
 80126d4:	da0a      	bge.n	80126ec <floor+0xdc>
 80126d6:	2e14      	cmp	r6, #20
 80126d8:	d101      	bne.n	80126de <floor+0xce>
 80126da:	3401      	adds	r4, #1
 80126dc:	e006      	b.n	80126ec <floor+0xdc>
 80126de:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80126e2:	2301      	movs	r3, #1
 80126e4:	40b3      	lsls	r3, r6
 80126e6:	441d      	add	r5, r3
 80126e8:	4545      	cmp	r5, r8
 80126ea:	d3f6      	bcc.n	80126da <floor+0xca>
 80126ec:	ea25 0507 	bic.w	r5, r5, r7
 80126f0:	e7b2      	b.n	8012658 <floor+0x48>
 80126f2:	2500      	movs	r5, #0
 80126f4:	462c      	mov	r4, r5
 80126f6:	e7af      	b.n	8012658 <floor+0x48>
 80126f8:	8800759c 	.word	0x8800759c
 80126fc:	7e37e43c 	.word	0x7e37e43c
 8012700:	bff00000 	.word	0xbff00000
 8012704:	000fffff 	.word	0x000fffff

08012708 <_init>:
 8012708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801270a:	bf00      	nop
 801270c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801270e:	bc08      	pop	{r3}
 8012710:	469e      	mov	lr, r3
 8012712:	4770      	bx	lr

08012714 <_fini>:
 8012714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012716:	bf00      	nop
 8012718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801271a:	bc08      	pop	{r3}
 801271c:	469e      	mov	lr, r3
 801271e:	4770      	bx	lr
