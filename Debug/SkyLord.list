
SkyLord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121d8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  080123a8  080123a8  000133a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012990  08012990  00014228  2**0
                  CONTENTS
  4 .ARM          00000008  08012990  08012990  00013990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012998  08012998  00014228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012998  08012998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801299c  0801299c  0001399c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000228  20000000  080129a0  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000798  20000228  08012bc8  00014228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009c0  08012bc8  000149c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba12  00000000  00000000  00014258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c7d  00000000  00000000  0002fc6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  000338e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010b6  00000000  00000000  00034e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d39  00000000  00000000  00035ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e2ec  00000000  00000000  0005cc17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4dc4  00000000  00000000  0007af03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015fcc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070cc  00000000  00000000  0015fd0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00166dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012390 	.word	0x08012390

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	08012390 	.word	0x08012390

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	@ 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_ldivmod>:
 8000ea4:	b97b      	cbnz	r3, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea6:	b972      	cbnz	r2, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bfbe      	ittt	lt
 8000eac:	2000      	movlt	r0, #0
 8000eae:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000eb2:	e006      	blt.n	8000ec2 <__aeabi_ldivmod+0x1e>
 8000eb4:	bf08      	it	eq
 8000eb6:	2800      	cmpeq	r0, #0
 8000eb8:	bf1c      	itt	ne
 8000eba:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ebe:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec2:	f000 b9b5 	b.w	8001230 <__aeabi_idiv0>
 8000ec6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	db09      	blt.n	8000ee6 <__aeabi_ldivmod+0x42>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db1a      	blt.n	8000f0c <__aeabi_ldivmod+0x68>
 8000ed6:	f000 f84d 	bl	8000f74 <__udivmoddi4>
 8000eda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	4240      	negs	r0, r0
 8000ee8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db1b      	blt.n	8000f28 <__aeabi_ldivmod+0x84>
 8000ef0:	f000 f840 	bl	8000f74 <__udivmoddi4>
 8000ef4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efc:	b004      	add	sp, #16
 8000efe:	4240      	negs	r0, r0
 8000f00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f04:	4252      	negs	r2, r2
 8000f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f0a:	4770      	bx	lr
 8000f0c:	4252      	negs	r2, r2
 8000f0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f12:	f000 f82f 	bl	8000f74 <__udivmoddi4>
 8000f16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f1e:	b004      	add	sp, #16
 8000f20:	4240      	negs	r0, r0
 8000f22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f26:	4770      	bx	lr
 8000f28:	4252      	negs	r2, r2
 8000f2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f2e:	f000 f821 	bl	8000f74 <__udivmoddi4>
 8000f32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3a:	b004      	add	sp, #16
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	4770      	bx	lr

08000f44 <__aeabi_uldivmod>:
 8000f44:	b953      	cbnz	r3, 8000f5c <__aeabi_uldivmod+0x18>
 8000f46:	b94a      	cbnz	r2, 8000f5c <__aeabi_uldivmod+0x18>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bf08      	it	eq
 8000f4c:	2800      	cmpeq	r0, #0
 8000f4e:	bf1c      	itt	ne
 8000f50:	f04f 31ff 	movne.w	r1, #4294967295
 8000f54:	f04f 30ff 	movne.w	r0, #4294967295
 8000f58:	f000 b96a 	b.w	8001230 <__aeabi_idiv0>
 8000f5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f64:	f000 f806 	bl	8000f74 <__udivmoddi4>
 8000f68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f70:	b004      	add	sp, #16
 8000f72:	4770      	bx	lr

08000f74 <__udivmoddi4>:
 8000f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f78:	9d08      	ldr	r5, [sp, #32]
 8000f7a:	460c      	mov	r4, r1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d14e      	bne.n	800101e <__udivmoddi4+0xaa>
 8000f80:	4694      	mov	ip, r2
 8000f82:	458c      	cmp	ip, r1
 8000f84:	4686      	mov	lr, r0
 8000f86:	fab2 f282 	clz	r2, r2
 8000f8a:	d962      	bls.n	8001052 <__udivmoddi4+0xde>
 8000f8c:	b14a      	cbz	r2, 8000fa2 <__udivmoddi4+0x2e>
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	4091      	lsls	r1, r2
 8000f94:	fa20 f303 	lsr.w	r3, r0, r3
 8000f98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f9c:	4319      	orrs	r1, r3
 8000f9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa6:	fa1f f68c 	uxth.w	r6, ip
 8000faa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fb2:	fb07 1114 	mls	r1, r7, r4, r1
 8000fb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fba:	fb04 f106 	mul.w	r1, r4, r6
 8000fbe:	4299      	cmp	r1, r3
 8000fc0:	d90a      	bls.n	8000fd8 <__udivmoddi4+0x64>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000fca:	f080 8112 	bcs.w	80011f2 <__udivmoddi4+0x27e>
 8000fce:	4299      	cmp	r1, r3
 8000fd0:	f240 810f 	bls.w	80011f2 <__udivmoddi4+0x27e>
 8000fd4:	3c02      	subs	r4, #2
 8000fd6:	4463      	add	r3, ip
 8000fd8:	1a59      	subs	r1, r3, r1
 8000fda:	fa1f f38e 	uxth.w	r3, lr
 8000fde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fe2:	fb07 1110 	mls	r1, r7, r0, r1
 8000fe6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fea:	fb00 f606 	mul.w	r6, r0, r6
 8000fee:	429e      	cmp	r6, r3
 8000ff0:	d90a      	bls.n	8001008 <__udivmoddi4+0x94>
 8000ff2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ffa:	f080 80fc 	bcs.w	80011f6 <__udivmoddi4+0x282>
 8000ffe:	429e      	cmp	r6, r3
 8001000:	f240 80f9 	bls.w	80011f6 <__udivmoddi4+0x282>
 8001004:	4463      	add	r3, ip
 8001006:	3802      	subs	r0, #2
 8001008:	1b9b      	subs	r3, r3, r6
 800100a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800100e:	2100      	movs	r1, #0
 8001010:	b11d      	cbz	r5, 800101a <__udivmoddi4+0xa6>
 8001012:	40d3      	lsrs	r3, r2
 8001014:	2200      	movs	r2, #0
 8001016:	e9c5 3200 	strd	r3, r2, [r5]
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	428b      	cmp	r3, r1
 8001020:	d905      	bls.n	800102e <__udivmoddi4+0xba>
 8001022:	b10d      	cbz	r5, 8001028 <__udivmoddi4+0xb4>
 8001024:	e9c5 0100 	strd	r0, r1, [r5]
 8001028:	2100      	movs	r1, #0
 800102a:	4608      	mov	r0, r1
 800102c:	e7f5      	b.n	800101a <__udivmoddi4+0xa6>
 800102e:	fab3 f183 	clz	r1, r3
 8001032:	2900      	cmp	r1, #0
 8001034:	d146      	bne.n	80010c4 <__udivmoddi4+0x150>
 8001036:	42a3      	cmp	r3, r4
 8001038:	d302      	bcc.n	8001040 <__udivmoddi4+0xcc>
 800103a:	4290      	cmp	r0, r2
 800103c:	f0c0 80f0 	bcc.w	8001220 <__udivmoddi4+0x2ac>
 8001040:	1a86      	subs	r6, r0, r2
 8001042:	eb64 0303 	sbc.w	r3, r4, r3
 8001046:	2001      	movs	r0, #1
 8001048:	2d00      	cmp	r5, #0
 800104a:	d0e6      	beq.n	800101a <__udivmoddi4+0xa6>
 800104c:	e9c5 6300 	strd	r6, r3, [r5]
 8001050:	e7e3      	b.n	800101a <__udivmoddi4+0xa6>
 8001052:	2a00      	cmp	r2, #0
 8001054:	f040 8090 	bne.w	8001178 <__udivmoddi4+0x204>
 8001058:	eba1 040c 	sub.w	r4, r1, ip
 800105c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001060:	fa1f f78c 	uxth.w	r7, ip
 8001064:	2101      	movs	r1, #1
 8001066:	fbb4 f6f8 	udiv	r6, r4, r8
 800106a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800106e:	fb08 4416 	mls	r4, r8, r6, r4
 8001072:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001076:	fb07 f006 	mul.w	r0, r7, r6
 800107a:	4298      	cmp	r0, r3
 800107c:	d908      	bls.n	8001090 <__udivmoddi4+0x11c>
 800107e:	eb1c 0303 	adds.w	r3, ip, r3
 8001082:	f106 34ff 	add.w	r4, r6, #4294967295
 8001086:	d202      	bcs.n	800108e <__udivmoddi4+0x11a>
 8001088:	4298      	cmp	r0, r3
 800108a:	f200 80cd 	bhi.w	8001228 <__udivmoddi4+0x2b4>
 800108e:	4626      	mov	r6, r4
 8001090:	1a1c      	subs	r4, r3, r0
 8001092:	fa1f f38e 	uxth.w	r3, lr
 8001096:	fbb4 f0f8 	udiv	r0, r4, r8
 800109a:	fb08 4410 	mls	r4, r8, r0, r4
 800109e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010a2:	fb00 f707 	mul.w	r7, r0, r7
 80010a6:	429f      	cmp	r7, r3
 80010a8:	d908      	bls.n	80010bc <__udivmoddi4+0x148>
 80010aa:	eb1c 0303 	adds.w	r3, ip, r3
 80010ae:	f100 34ff 	add.w	r4, r0, #4294967295
 80010b2:	d202      	bcs.n	80010ba <__udivmoddi4+0x146>
 80010b4:	429f      	cmp	r7, r3
 80010b6:	f200 80b0 	bhi.w	800121a <__udivmoddi4+0x2a6>
 80010ba:	4620      	mov	r0, r4
 80010bc:	1bdb      	subs	r3, r3, r7
 80010be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010c2:	e7a5      	b.n	8001010 <__udivmoddi4+0x9c>
 80010c4:	f1c1 0620 	rsb	r6, r1, #32
 80010c8:	408b      	lsls	r3, r1
 80010ca:	fa22 f706 	lsr.w	r7, r2, r6
 80010ce:	431f      	orrs	r7, r3
 80010d0:	fa20 fc06 	lsr.w	ip, r0, r6
 80010d4:	fa04 f301 	lsl.w	r3, r4, r1
 80010d8:	ea43 030c 	orr.w	r3, r3, ip
 80010dc:	40f4      	lsrs	r4, r6
 80010de:	fa00 f801 	lsl.w	r8, r0, r1
 80010e2:	0c38      	lsrs	r0, r7, #16
 80010e4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80010e8:	fbb4 fef0 	udiv	lr, r4, r0
 80010ec:	fa1f fc87 	uxth.w	ip, r7
 80010f0:	fb00 441e 	mls	r4, r0, lr, r4
 80010f4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010f8:	fb0e f90c 	mul.w	r9, lr, ip
 80010fc:	45a1      	cmp	r9, r4
 80010fe:	fa02 f201 	lsl.w	r2, r2, r1
 8001102:	d90a      	bls.n	800111a <__udivmoddi4+0x1a6>
 8001104:	193c      	adds	r4, r7, r4
 8001106:	f10e 3aff 	add.w	sl, lr, #4294967295
 800110a:	f080 8084 	bcs.w	8001216 <__udivmoddi4+0x2a2>
 800110e:	45a1      	cmp	r9, r4
 8001110:	f240 8081 	bls.w	8001216 <__udivmoddi4+0x2a2>
 8001114:	f1ae 0e02 	sub.w	lr, lr, #2
 8001118:	443c      	add	r4, r7
 800111a:	eba4 0409 	sub.w	r4, r4, r9
 800111e:	fa1f f983 	uxth.w	r9, r3
 8001122:	fbb4 f3f0 	udiv	r3, r4, r0
 8001126:	fb00 4413 	mls	r4, r0, r3, r4
 800112a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800112e:	fb03 fc0c 	mul.w	ip, r3, ip
 8001132:	45a4      	cmp	ip, r4
 8001134:	d907      	bls.n	8001146 <__udivmoddi4+0x1d2>
 8001136:	193c      	adds	r4, r7, r4
 8001138:	f103 30ff 	add.w	r0, r3, #4294967295
 800113c:	d267      	bcs.n	800120e <__udivmoddi4+0x29a>
 800113e:	45a4      	cmp	ip, r4
 8001140:	d965      	bls.n	800120e <__udivmoddi4+0x29a>
 8001142:	3b02      	subs	r3, #2
 8001144:	443c      	add	r4, r7
 8001146:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800114a:	fba0 9302 	umull	r9, r3, r0, r2
 800114e:	eba4 040c 	sub.w	r4, r4, ip
 8001152:	429c      	cmp	r4, r3
 8001154:	46ce      	mov	lr, r9
 8001156:	469c      	mov	ip, r3
 8001158:	d351      	bcc.n	80011fe <__udivmoddi4+0x28a>
 800115a:	d04e      	beq.n	80011fa <__udivmoddi4+0x286>
 800115c:	b155      	cbz	r5, 8001174 <__udivmoddi4+0x200>
 800115e:	ebb8 030e 	subs.w	r3, r8, lr
 8001162:	eb64 040c 	sbc.w	r4, r4, ip
 8001166:	fa04 f606 	lsl.w	r6, r4, r6
 800116a:	40cb      	lsrs	r3, r1
 800116c:	431e      	orrs	r6, r3
 800116e:	40cc      	lsrs	r4, r1
 8001170:	e9c5 6400 	strd	r6, r4, [r5]
 8001174:	2100      	movs	r1, #0
 8001176:	e750      	b.n	800101a <__udivmoddi4+0xa6>
 8001178:	f1c2 0320 	rsb	r3, r2, #32
 800117c:	fa20 f103 	lsr.w	r1, r0, r3
 8001180:	fa0c fc02 	lsl.w	ip, ip, r2
 8001184:	fa24 f303 	lsr.w	r3, r4, r3
 8001188:	4094      	lsls	r4, r2
 800118a:	430c      	orrs	r4, r1
 800118c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001190:	fa00 fe02 	lsl.w	lr, r0, r2
 8001194:	fa1f f78c 	uxth.w	r7, ip
 8001198:	fbb3 f0f8 	udiv	r0, r3, r8
 800119c:	fb08 3110 	mls	r1, r8, r0, r3
 80011a0:	0c23      	lsrs	r3, r4, #16
 80011a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011a6:	fb00 f107 	mul.w	r1, r0, r7
 80011aa:	4299      	cmp	r1, r3
 80011ac:	d908      	bls.n	80011c0 <__udivmoddi4+0x24c>
 80011ae:	eb1c 0303 	adds.w	r3, ip, r3
 80011b2:	f100 36ff 	add.w	r6, r0, #4294967295
 80011b6:	d22c      	bcs.n	8001212 <__udivmoddi4+0x29e>
 80011b8:	4299      	cmp	r1, r3
 80011ba:	d92a      	bls.n	8001212 <__udivmoddi4+0x29e>
 80011bc:	3802      	subs	r0, #2
 80011be:	4463      	add	r3, ip
 80011c0:	1a5b      	subs	r3, r3, r1
 80011c2:	b2a4      	uxth	r4, r4
 80011c4:	fbb3 f1f8 	udiv	r1, r3, r8
 80011c8:	fb08 3311 	mls	r3, r8, r1, r3
 80011cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011d0:	fb01 f307 	mul.w	r3, r1, r7
 80011d4:	42a3      	cmp	r3, r4
 80011d6:	d908      	bls.n	80011ea <__udivmoddi4+0x276>
 80011d8:	eb1c 0404 	adds.w	r4, ip, r4
 80011dc:	f101 36ff 	add.w	r6, r1, #4294967295
 80011e0:	d213      	bcs.n	800120a <__udivmoddi4+0x296>
 80011e2:	42a3      	cmp	r3, r4
 80011e4:	d911      	bls.n	800120a <__udivmoddi4+0x296>
 80011e6:	3902      	subs	r1, #2
 80011e8:	4464      	add	r4, ip
 80011ea:	1ae4      	subs	r4, r4, r3
 80011ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011f0:	e739      	b.n	8001066 <__udivmoddi4+0xf2>
 80011f2:	4604      	mov	r4, r0
 80011f4:	e6f0      	b.n	8000fd8 <__udivmoddi4+0x64>
 80011f6:	4608      	mov	r0, r1
 80011f8:	e706      	b.n	8001008 <__udivmoddi4+0x94>
 80011fa:	45c8      	cmp	r8, r9
 80011fc:	d2ae      	bcs.n	800115c <__udivmoddi4+0x1e8>
 80011fe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001202:	eb63 0c07 	sbc.w	ip, r3, r7
 8001206:	3801      	subs	r0, #1
 8001208:	e7a8      	b.n	800115c <__udivmoddi4+0x1e8>
 800120a:	4631      	mov	r1, r6
 800120c:	e7ed      	b.n	80011ea <__udivmoddi4+0x276>
 800120e:	4603      	mov	r3, r0
 8001210:	e799      	b.n	8001146 <__udivmoddi4+0x1d2>
 8001212:	4630      	mov	r0, r6
 8001214:	e7d4      	b.n	80011c0 <__udivmoddi4+0x24c>
 8001216:	46d6      	mov	lr, sl
 8001218:	e77f      	b.n	800111a <__udivmoddi4+0x1a6>
 800121a:	4463      	add	r3, ip
 800121c:	3802      	subs	r0, #2
 800121e:	e74d      	b.n	80010bc <__udivmoddi4+0x148>
 8001220:	4606      	mov	r6, r0
 8001222:	4623      	mov	r3, r4
 8001224:	4608      	mov	r0, r1
 8001226:	e70f      	b.n	8001048 <__udivmoddi4+0xd4>
 8001228:	3e02      	subs	r6, #2
 800122a:	4463      	add	r3, ip
 800122c:	e730      	b.n	8001090 <__udivmoddi4+0x11c>
 800122e:	bf00      	nop

08001230 <__aeabi_idiv0>:
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <bme280_getVals>:
static uint8_t bme_started_flag = 0;
static uint8_t last_measuring = 1;


void bme280_getVals()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af04      	add	r7, sp, #16
	uint8_t status;
    HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 800123a:	4b3c      	ldr	r3, [pc, #240]	@ (800132c <bme280_getVals+0xf8>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	2364      	movs	r3, #100	@ 0x64
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	2301      	movs	r3, #1
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	f107 030d 	add.w	r3, r7, #13
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	22f3      	movs	r2, #243	@ 0xf3
 8001250:	21ec      	movs	r1, #236	@ 0xec
 8001252:	f008 fd09 	bl	8009c68 <HAL_I2C_Mem_Read>
 8001256:	4603      	mov	r3, r0
 8001258:	73fb      	strb	r3, [r7, #15]
    BME->isUpdated = 0;
 800125a:	4b35      	ldr	r3, [pc, #212]	@ (8001330 <bme280_getVals+0xfc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    uint8_t current_measuring = ((status & (0x01 << 3)) == 0);
 8001264:	7b7b      	ldrb	r3, [r7, #13]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf0c      	ite	eq
 800126e:	2301      	moveq	r3, #1
 8001270:	2300      	movne	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	73bb      	strb	r3, [r7, #14]

    if ((last_measuring == 1) && (current_measuring == 0)) {
 8001276:	4b2f      	ldr	r3, [pc, #188]	@ (8001334 <bme280_getVals+0x100>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d14f      	bne.n	800131e <bme280_getVals+0xea>
 800127e:	7bbb      	ldrb	r3, [r7, #14]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d14c      	bne.n	800131e <bme280_getVals+0xea>
        uint8_t data[8];
        retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, data, 8, 20);
 8001284:	4b29      	ldr	r3, [pc, #164]	@ (800132c <bme280_getVals+0xf8>)
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	2314      	movs	r3, #20
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2308      	movs	r3, #8
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	22f7      	movs	r2, #247	@ 0xf7
 8001298:	21ec      	movs	r1, #236	@ 0xec
 800129a:	f008 fce5 	bl	8009c68 <HAL_I2C_Mem_Read>
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]
        if (retVal == HAL_OK && memcmp(data, BME->lastReadings, 8) != 0) {
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d13a      	bne.n	800131e <bme280_getVals+0xea>
 80012a8:	4b21      	ldr	r3, [pc, #132]	@ (8001330 <bme280_getVals+0xfc>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2208      	movs	r2, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f00c fe4e 	bl	800df56 <memcmp>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d02e      	beq.n	800131e <bme280_getVals+0xea>
            memcpy(BME->lastReadings, data, 8);
 80012c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <bme280_getVals+0xfc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3334      	adds	r3, #52	@ 0x34
 80012c6:	461a      	mov	r2, r3
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	cb03      	ldmia	r3!, {r0, r1}
 80012cc:	6010      	str	r0, [r2, #0]
 80012ce:	6051      	str	r1, [r2, #4]
            BME->isUpdated = 1;
 80012d0:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <bme280_getVals+0xfc>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            BME->adcVals.ut = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | ((int32_t)data[5] >> 4);
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	031a      	lsls	r2, r3, #12
 80012de:	7a3b      	ldrb	r3, [r7, #8]
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	431a      	orrs	r2, r3
 80012e4:	7a7b      	ldrb	r3, [r7, #9]
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4619      	mov	r1, r3
 80012ec:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <bme280_getVals+0xfc>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	609a      	str	r2, [r3, #8]
            BME->adcVals.up = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((int32_t)data[2] >> 4);
 80012f4:	793b      	ldrb	r3, [r7, #4]
 80012f6:	031a      	lsls	r2, r3, #12
 80012f8:	797b      	ldrb	r3, [r7, #5]
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	431a      	orrs	r2, r3
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4619      	mov	r1, r3
 8001306:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <bme280_getVals+0xfc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	60da      	str	r2, [r3, #12]
            BME->adcVals.uh = ((int32_t)data[6] << 8) | ((int32_t)data[7]);
 800130e:	7abb      	ldrb	r3, [r7, #10]
 8001310:	021a      	lsls	r2, r3, #8
 8001312:	7afb      	ldrb	r3, [r7, #11]
 8001314:	4619      	mov	r1, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <bme280_getVals+0xfc>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	611a      	str	r2, [r3, #16]
        }
    }
    last_measuring = current_measuring;
 800131e:	4a05      	ldr	r2, [pc, #20]	@ (8001334 <bme280_getVals+0x100>)
 8001320:	7bbb      	ldrb	r3, [r7, #14]
 8001322:	7013      	strb	r3, [r2, #0]
    UNUSED(retVal);
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000244 	.word	0x20000244
 8001330:	20000248 	.word	0x20000248
 8001334:	20000000 	.word	0x20000000

08001338 <bme280_calculate_altitude>:



void bme280_calculate_altitude() {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
    // Standard sea level pressure in hPa
    float p_seaLevel = 1013.25;
 800133e:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <bme280_calculate_altitude+0x98>)
 8001340:	607b      	str	r3, [r7, #4]

    // Calculate altitude from pressure using barometric formula
    float rawAltitude = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 8001342:	4b24      	ldr	r3, [pc, #144]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	ed93 7a06 	vldr	s14, [r3, #24]
 800134a:	edd7 7a01 	vldr	s15, [r7, #4]
 800134e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001352:	ee16 0a90 	vmov	r0, s13
 8001356:	f7ff f917 	bl	8000588 <__aeabi_f2d>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 80013c0 <bme280_calculate_altitude+0x88>
 8001362:	ec43 2b10 	vmov	d0, r2, r3
 8001366:	f00e fc67 	bl	800fc38 <pow>
 800136a:	ec53 2b10 	vmov	r2, r3, d0
 800136e:	f04f 0000 	mov.w	r0, #0
 8001372:	4919      	ldr	r1, [pc, #100]	@ (80013d8 <bme280_calculate_altitude+0xa0>)
 8001374:	f7fe ffa8 	bl	80002c8 <__aeabi_dsub>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	a311      	add	r3, pc, #68	@ (adr r3, 80013c8 <bme280_calculate_altitude+0x90>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7ff f957 	bl	8000638 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f7ff fc29 	bl	8000be8 <__aeabi_d2f>
 8001396:	4603      	mov	r3, r0
 8001398:	603b      	str	r3, [r7, #0]

    // Apply base altitude correction
    BME->altitude = rawAltitude - BME->base_altitude;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	ed97 7a00 	vldr	s14, [r7]
 80013aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ae:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	f3af 8000 	nop.w
 80013c0:	ccd9456c 	.word	0xccd9456c
 80013c4:	3fc85b95 	.word	0x3fc85b95
 80013c8:	00000000 	.word	0x00000000
 80013cc:	40e5a540 	.word	0x40e5a540
 80013d0:	447d5000 	.word	0x447d5000
 80013d4:	20000248 	.word	0x20000248
 80013d8:	3ff00000 	.word	0x3ff00000

080013dc <bme280_config>:

void bme280_config()
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	@ 0x38
 80013e0:	af04      	add	r7, sp, #16
    uint8_t params[25];
    HAL_StatusTypeDef retVal;

    BME->base_altitude = 0.0;
 80013e2:	4b99      	ldr	r3, [pc, #612]	@ (8001648 <bme280_config+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset and initialize I2C
    HAL_I2C_DeInit(I2C_);
 80013ec:	4b97      	ldr	r3, [pc, #604]	@ (800164c <bme280_config+0x270>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f008 fb0f 	bl	8009a14 <HAL_I2C_DeInit>
    HAL_Delay(5);
 80013f6:	2005      	movs	r0, #5
 80013f8:	f006 fd66 	bl	8007ec8 <HAL_Delay>
    HAL_I2C_Init(I2C_);
 80013fc:	4b93      	ldr	r3, [pc, #588]	@ (800164c <bme280_config+0x270>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f008 f9c3 	bl	800978c <HAL_I2C_Init>
    HAL_Delay(5);
 8001406:	2005      	movs	r0, #5
 8001408:	f006 fd5e 	bl	8007ec8 <HAL_Delay>

    // Read calibration parameters
    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 800140c:	4b8f      	ldr	r3, [pc, #572]	@ (800164c <bme280_config+0x270>)
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	23c8      	movs	r3, #200	@ 0xc8
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	2319      	movs	r3, #25
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	2288      	movs	r2, #136	@ 0x88
 8001420:	21ec      	movs	r1, #236	@ 0xec
 8001422:	f008 fc21 	bl	8009c68 <HAL_I2C_Mem_Read>
 8001426:	4603      	mov	r3, r0
 8001428:	77fb      	strb	r3, [r7, #31]

    BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 800142a:	793b      	ldrb	r3, [r7, #4]
 800142c:	4619      	mov	r1, r3
 800142e:	797b      	ldrb	r3, [r7, #5]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b84      	ldr	r3, [pc, #528]	@ (8001648 <bme280_config+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	b292      	uxth	r2, r2
 800143e:	801a      	strh	r2, [r3, #0]
    BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	b219      	sxth	r1, r3
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b21a      	sxth	r2, r3
 800144a:	4b7f      	ldr	r3, [pc, #508]	@ (8001648 <bme280_config+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	b212      	sxth	r2, r2
 8001454:	805a      	strh	r2, [r3, #2]
    BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001456:	7a3b      	ldrb	r3, [r7, #8]
 8001458:	b219      	sxth	r1, r3
 800145a:	7a7b      	ldrb	r3, [r7, #9]
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	b21a      	sxth	r2, r3
 8001460:	4b79      	ldr	r3, [pc, #484]	@ (8001648 <bme280_config+0x26c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	b212      	sxth	r2, r2
 800146a:	809a      	strh	r2, [r3, #4]
    BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 800146c:	7abb      	ldrb	r3, [r7, #10]
 800146e:	b21a      	sxth	r2, r3
 8001470:	7afb      	ldrb	r3, [r7, #11]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21b      	sxth	r3, r3
 8001476:	4313      	orrs	r3, r2
 8001478:	b21a      	sxth	r2, r3
 800147a:	4b73      	ldr	r3, [pc, #460]	@ (8001648 <bme280_config+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	b292      	uxth	r2, r2
 8001482:	80da      	strh	r2, [r3, #6]
    BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001484:	7b3b      	ldrb	r3, [r7, #12]
 8001486:	b219      	sxth	r1, r3
 8001488:	7b7b      	ldrb	r3, [r7, #13]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b21a      	sxth	r2, r3
 800148e:	4b6e      	ldr	r3, [pc, #440]	@ (8001648 <bme280_config+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	b212      	sxth	r2, r2
 8001498:	811a      	strh	r2, [r3, #8]
    BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800149a:	7bbb      	ldrb	r3, [r7, #14]
 800149c:	b219      	sxth	r1, r3
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	4b68      	ldr	r3, [pc, #416]	@ (8001648 <bme280_config+0x26c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	b212      	sxth	r2, r2
 80014ae:	815a      	strh	r2, [r3, #10]
    BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 80014b0:	7c3b      	ldrb	r3, [r7, #16]
 80014b2:	b219      	sxth	r1, r3
 80014b4:	7c7b      	ldrb	r3, [r7, #17]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	4b63      	ldr	r3, [pc, #396]	@ (8001648 <bme280_config+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	b212      	sxth	r2, r2
 80014c4:	819a      	strh	r2, [r3, #12]
    BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 80014c6:	7cbb      	ldrb	r3, [r7, #18]
 80014c8:	b219      	sxth	r1, r3
 80014ca:	7cfb      	ldrb	r3, [r7, #19]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	4b5d      	ldr	r3, [pc, #372]	@ (8001648 <bme280_config+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	b212      	sxth	r2, r2
 80014da:	81da      	strh	r2, [r3, #14]
    BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 80014dc:	7d3b      	ldrb	r3, [r7, #20]
 80014de:	b219      	sxth	r1, r3
 80014e0:	7d7b      	ldrb	r3, [r7, #21]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	4b58      	ldr	r3, [pc, #352]	@ (8001648 <bme280_config+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	b212      	sxth	r2, r2
 80014f0:	821a      	strh	r2, [r3, #16]
    BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 80014f2:	7dbb      	ldrb	r3, [r7, #22]
 80014f4:	b219      	sxth	r1, r3
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	4b52      	ldr	r3, [pc, #328]	@ (8001648 <bme280_config+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	b212      	sxth	r2, r2
 8001506:	825a      	strh	r2, [r3, #18]
    BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 8001508:	7e3b      	ldrb	r3, [r7, #24]
 800150a:	b219      	sxth	r1, r3
 800150c:	7e7b      	ldrb	r3, [r7, #25]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	4b4d      	ldr	r3, [pc, #308]	@ (8001648 <bme280_config+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	b212      	sxth	r2, r2
 800151c:	829a      	strh	r2, [r3, #20]
    BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 800151e:	7ebb      	ldrb	r3, [r7, #26]
 8001520:	b219      	sxth	r1, r3
 8001522:	7efb      	ldrb	r3, [r7, #27]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	b21a      	sxth	r2, r3
 8001528:	4b47      	ldr	r3, [pc, #284]	@ (8001648 <bme280_config+0x26c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	b212      	sxth	r2, r2
 8001532:	82da      	strh	r2, [r3, #22]
    BME->parameters->dig_H1 = params[24];
 8001534:	4b44      	ldr	r3, [pc, #272]	@ (8001648 <bme280_config+0x26c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	7f3a      	ldrb	r2, [r7, #28]
 800153c:	761a      	strb	r2, [r3, #24]

    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 800153e:	4b43      	ldr	r3, [pc, #268]	@ (800164c <bme280_config+0x270>)
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	2332      	movs	r3, #50	@ 0x32
 8001544:	9302      	str	r3, [sp, #8]
 8001546:	2307      	movs	r3, #7
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2301      	movs	r3, #1
 8001550:	22e1      	movs	r2, #225	@ 0xe1
 8001552:	21ec      	movs	r1, #236	@ 0xec
 8001554:	f008 fb88 	bl	8009c68 <HAL_I2C_Mem_Read>
 8001558:	4603      	mov	r3, r0
 800155a:	77fb      	strb	r3, [r7, #31]
    BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800155c:	793b      	ldrb	r3, [r7, #4]
 800155e:	b219      	sxth	r1, r3
 8001560:	797b      	ldrb	r3, [r7, #5]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b21a      	sxth	r2, r3
 8001566:	4b38      	ldr	r3, [pc, #224]	@ (8001648 <bme280_config+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	b212      	sxth	r2, r2
 8001570:	835a      	strh	r2, [r3, #26]
    BME->parameters->dig_H3 = params[2];
 8001572:	4b35      	ldr	r3, [pc, #212]	@ (8001648 <bme280_config+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	79ba      	ldrb	r2, [r7, #6]
 800157a:	771a      	strb	r2, [r3, #28]
    BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800157c:	7a3b      	ldrb	r3, [r7, #8]
 800157e:	b21b      	sxth	r3, r3
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	b219      	sxth	r1, r3
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	b21a      	sxth	r2, r3
 800158c:	4b2e      	ldr	r3, [pc, #184]	@ (8001648 <bme280_config+0x26c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	b212      	sxth	r2, r2
 8001596:	83da      	strh	r2, [r3, #30]
    BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001598:	7a3b      	ldrb	r3, [r7, #8]
 800159a:	091b      	lsrs	r3, r3, #4
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b219      	sxth	r1, r3
 80015a0:	7a7b      	ldrb	r3, [r7, #9]
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	4b28      	ldr	r3, [pc, #160]	@ (8001648 <bme280_config+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	b212      	sxth	r2, r2
 80015b0:	841a      	strh	r2, [r3, #32]
    BME->parameters->dig_H6 = params[6];
 80015b2:	7aba      	ldrb	r2, [r7, #10]
 80015b4:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <bme280_config+0x26c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b252      	sxtb	r2, r2
 80015bc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    uint8_t data_ctrl = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_output_speed;
 80015c4:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <bme280_config+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	799b      	ldrb	r3, [r3, #6]
 80015ca:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 80015cc:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <bme280_config+0x270>)
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	2332      	movs	r3, #50	@ 0x32
 80015d2:	9302      	str	r3, [sp, #8]
 80015d4:	2301      	movs	r3, #1
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	1cfb      	adds	r3, r7, #3
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2301      	movs	r3, #1
 80015de:	22f2      	movs	r2, #242	@ 0xf2
 80015e0:	21ec      	movs	r1, #236	@ 0xec
 80015e2:	f008 fa47 	bl	8009a74 <HAL_I2C_Mem_Write>
 80015e6:	4603      	mov	r3, r0
 80015e8:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);
 80015ee:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <bme280_config+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	795b      	ldrb	r3, [r3, #5]
 80015f4:	b25a      	sxtb	r2, r3
 80015f6:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <bme280_config+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	799b      	ldrb	r3, [r3, #6]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b25a      	sxtb	r2, r3
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <bme280_config+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	799b      	ldrb	r3, [r3, #6]
 800160a:	015b      	lsls	r3, r3, #5
 800160c:	b25b      	sxtb	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	b25b      	sxtb	r3, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <bme280_config+0x270>)
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	2332      	movs	r3, #50	@ 0x32
 800161c:	9302      	str	r3, [sp, #8]
 800161e:	2301      	movs	r3, #1
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	1cfb      	adds	r3, r7, #3
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2301      	movs	r3, #1
 8001628:	22f4      	movs	r2, #244	@ 0xf4
 800162a:	21ec      	movs	r1, #236	@ 0xec
 800162c:	f008 fa22 	bl	8009a74 <HAL_I2C_Mem_Write>
 8001630:	4603      	mov	r3, r0
 8001632:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	70fb      	strb	r3, [r7, #3]
    data_ctrl = (BME->device_config.bme280_standby_time << 5) | (BME->device_config.bme280_filter << 2);
 8001638:	4b03      	ldr	r3, [pc, #12]	@ (8001648 <bme280_config+0x26c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	79db      	ldrb	r3, [r3, #7]
 800163e:	015b      	lsls	r3, r3, #5
 8001640:	b25a      	sxtb	r2, r3
 8001642:	4b01      	ldr	r3, [pc, #4]	@ (8001648 <bme280_config+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	e003      	b.n	8001650 <bme280_config+0x274>
 8001648:	20000248 	.word	0x20000248
 800164c:	20000244 	.word	0x20000244
 8001650:	791b      	ldrb	r3, [r3, #4]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	b25b      	sxtb	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b25b      	sxtb	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800165e:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <bme280_config+0x2fc>)
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	2332      	movs	r3, #50	@ 0x32
 8001664:	9302      	str	r3, [sp, #8]
 8001666:	2301      	movs	r3, #1
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	1cfb      	adds	r3, r7, #3
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2301      	movs	r3, #1
 8001670:	22f5      	movs	r2, #245	@ 0xf5
 8001672:	21ec      	movs	r1, #236	@ 0xec
 8001674:	f008 f9fe 	bl	8009a74 <HAL_I2C_Mem_Write>
 8001678:	4603      	mov	r3, r0
 800167a:	77fb      	strb	r3, [r7, #31]

    // Take base altitude readings
    float base = 0.0;
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_Delay(100);
 8001682:	2064      	movs	r0, #100	@ 0x64
 8001684:	f006 fc20 	bl	8007ec8 <HAL_Delay>

    for(int i = 0; i < 50; i++) {
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
 800168c:	e011      	b.n	80016b2 <bme280_config+0x2d6>
        bme280_update();
 800168e:	f000 f861 	bl	8001754 <bme280_update>
        base += BME->altitude;
 8001692:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <bme280_config+0x300>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	edd3 7a08 	vldr	s15, [r3, #32]
 800169a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        HAL_Delay(30);
 80016a6:	201e      	movs	r0, #30
 80016a8:	f006 fc0e 	bl	8007ec8 <HAL_Delay>
    for(int i = 0; i < 50; i++) {
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	3301      	adds	r3, #1
 80016b0:	623b      	str	r3, [r7, #32]
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	2b31      	cmp	r3, #49	@ 0x31
 80016b6:	ddea      	ble.n	800168e <bme280_config+0x2b2>
    }
    BME->base_altitude = (base / 50.0);
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <bme280_config+0x300>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80016c0:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80016e0 <bme280_config+0x304>
 80016c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bme280_update();
 80016cc:	f000 f842 	bl	8001754 <bme280_update>

    UNUSED(retVal);
}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	@ 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000244 	.word	0x20000244
 80016dc:	20000248 	.word	0x20000248
 80016e0:	42480000 	.word	0x42480000

080016e4 <bme280_init>:

void bme280_init(BME_280_t* BME_sensor, I2C_HandleTypeDef* I2C_bme)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af04      	add	r7, sp, #16
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
    BME = BME_sensor;
 80016ee:	4a14      	ldr	r2, [pc, #80]	@ (8001740 <bme280_init+0x5c>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6013      	str	r3, [r2, #0]
    I2C_ = I2C_bme;
 80016f4:	4a13      	ldr	r2, [pc, #76]	@ (8001744 <bme280_init+0x60>)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	6013      	str	r3, [r2, #0]
    BME->parameters = &bme_params;
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <bme280_init+0x5c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a12      	ldr	r2, [pc, #72]	@ (8001748 <bme280_init+0x64>)
 8001700:	601a      	str	r2, [r3, #0]
    bme_started_flag = 0;
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <bme280_init+0x68>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]

    // Check BME280 ID
    uint8_t buf[1];
    HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8001708:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <bme280_init+0x60>)
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	2332      	movs	r3, #50	@ 0x32
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	2301      	movs	r3, #1
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2301      	movs	r3, #1
 800171c:	22d0      	movs	r2, #208	@ 0xd0
 800171e:	21ec      	movs	r1, #236	@ 0xec
 8001720:	f008 faa2 	bl	8009c68 <HAL_I2C_Mem_Read>
    if(*buf == 0x60)
 8001724:	7b3b      	ldrb	r3, [r7, #12]
 8001726:	2b60      	cmp	r3, #96	@ 0x60
 8001728:	d103      	bne.n	8001732 <bme280_init+0x4e>
        is_BME_ok = 1;
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <bme280_init+0x6c>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]
    else
        is_BME_ok = 0;
}
 8001730:	e002      	b.n	8001738 <bme280_init+0x54>
        is_BME_ok = 0;
 8001732:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <bme280_init+0x6c>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000248 	.word	0x20000248
 8001744:	20000244 	.word	0x20000244
 8001748:	20000714 	.word	0x20000714
 800174c:	2000024c 	.word	0x2000024c
 8001750:	20000738 	.word	0x20000738

08001754 <bme280_update>:

void bme280_update() {
 8001754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001758:	b0d2      	sub	sp, #328	@ 0x148
 800175a:	af00      	add	r7, sp, #0
    int32_t var1_t, var2_t, T, adc_T;
    bme280_getVals();
 800175c:	f7ff fd6a 	bl	8001234 <bme280_getVals>

    if(BME->isUpdated == 1){
 8001760:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <bme280_update+0x88>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001768:	2b01      	cmp	r3, #1
 800176a:	f040 840d 	bne.w	8001f88 <bme280_update+0x834>

    	if (!bme_started_flag) {
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <bme280_update+0x8c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d112      	bne.n	800179c <bme280_update+0x48>
    	    bme_started_flag = 1;
 8001776:	4a1a      	ldr	r2, [pc, #104]	@ (80017e0 <bme280_update+0x8c>)
 8001778:	2301      	movs	r3, #1
 800177a:	7013      	strb	r3, [r2, #0]
    	    BME->lastTime = HAL_GetTick();
 800177c:	f006 fb98 	bl	8007eb0 <HAL_GetTick>
 8001780:	ee07 0a90 	vmov	s15, r0
 8001784:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <bme280_update+0x88>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800178c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	    BME->deltaTime1 = 0.0f;
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <bme280_update+0x88>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	e041      	b.n	8001820 <bme280_update+0xcc>
    	} else {
    	    uint32_t now = HAL_GetTick();
 800179c:	f006 fb88 	bl	8007eb0 <HAL_GetTick>
 80017a0:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    	    BME->deltaTime1 = (now > BME->lastTime) ? (now - BME->lastTime) : 0.0f;
 80017a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017b0:	4b0a      	ldr	r3, [pc, #40]	@ (80017dc <bme280_update+0x88>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80017b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	dd12      	ble.n	80017e8 <bme280_update+0x94>
 80017c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80017c6:	ee07 3a90 	vmov	s15, r3
 80017ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ce:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <bme280_update+0x88>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	e007      	b.n	80017ec <bme280_update+0x98>
 80017dc:	20000248 	.word	0x20000248
 80017e0:	2000024c 	.word	0x2000024c
 80017e4:	00000000 	.word	0x00000000
 80017e8:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 80017e4 <bme280_update+0x90>
 80017ec:	4bda      	ldr	r3, [pc, #872]	@ (8001b58 <bme280_update+0x404>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->deltaTime1 = BME->deltaTime1 / 1000.0f;
 80017f4:	4bd8      	ldr	r3, [pc, #864]	@ (8001b58 <bme280_update+0x404>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80017fc:	4bd6      	ldr	r3, [pc, #856]	@ (8001b58 <bme280_update+0x404>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8001b5c <bme280_update+0x408>
 8001804:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001808:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->lastTime = now;
 800180c:	4bd2      	ldr	r3, [pc, #840]	@ (8001b58 <bme280_update+0x404>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001814:	ee07 2a90 	vmov	s15, r2
 8001818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800181c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	}

        //For temperature
        adc_T = BME->adcVals.ut;
 8001820:	4bcd      	ldr	r3, [pc, #820]	@ (8001b58 <bme280_update+0x404>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 800182a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800182e:	10da      	asrs	r2, r3, #3
 8001830:	4bc9      	ldr	r3, [pc, #804]	@ (8001b58 <bme280_update+0x404>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	1ad2      	subs	r2, r2, r3
 800183c:	4bc6      	ldr	r3, [pc, #792]	@ (8001b58 <bme280_update+0x404>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	12db      	asrs	r3, r3, #11
 800184c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001850:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001854:	111a      	asrs	r2, r3, #4
 8001856:	4bc0      	ldr	r3, [pc, #768]	@ (8001b58 <bme280_update+0x404>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	1ad1      	subs	r1, r2, r3
 8001860:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001864:	111a      	asrs	r2, r3, #4
 8001866:	4bbc      	ldr	r3, [pc, #752]	@ (8001b58 <bme280_update+0x404>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	131a      	asrs	r2, r3, #12
 8001876:	4bb8      	ldr	r3, [pc, #736]	@ (8001b58 <bme280_update+0x404>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	139b      	asrs	r3, r3, #14
 8001886:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        int32_t t_fine = var1_t + var2_t;
 800188a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800188e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001892:	4413      	add	r3, r2
 8001894:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        T = (t_fine * 5 + 128) >> 8;
 8001898:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	3380      	adds	r3, #128	@ 0x80
 80018a4:	121b      	asrs	r3, r3, #8
 80018a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        BME->temperature = (float)T / 100.0;
 80018aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b6:	4ba8      	ldr	r3, [pc, #672]	@ (8001b58 <bme280_update+0x404>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001b60 <bme280_update+0x40c>
 80018be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c2:	edc3 7a05 	vstr	s15, [r3, #20]

        //For pressure
        int64_t var1_p, var2_p, P, adc_P;
        adc_P = (int64_t)BME->adcVals.up;
 80018c6:	4ba4      	ldr	r3, [pc, #656]	@ (8001b58 <bme280_update+0x404>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	17da      	asrs	r2, r3, #31
 80018ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80018d0:	657a      	str	r2, [r7, #84]	@ 0x54
 80018d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80018d6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
        var1_p = ((int64_t)t_fine) - 128000;
 80018da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018de:	17da      	asrs	r2, r3, #31
 80018e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80018e4:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80018e8:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80018ec:	460b      	mov	r3, r1
 80018ee:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 80018f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018f4:	4613      	mov	r3, r2
 80018f6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80018fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001900:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 8001904:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001908:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800190c:	fb03 f102 	mul.w	r1, r3, r2
 8001910:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001914:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001918:	fb02 f303 	mul.w	r3, r2, r3
 800191c:	18ca      	adds	r2, r1, r3
 800191e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001922:	fba3 4503 	umull	r4, r5, r3, r3
 8001926:	1953      	adds	r3, r2, r5
 8001928:	461d      	mov	r5, r3
 800192a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b58 <bme280_update+0x404>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001934:	b21b      	sxth	r3, r3
 8001936:	17da      	asrs	r2, r3, #31
 8001938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800193c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001940:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001944:	4603      	mov	r3, r0
 8001946:	fb03 f205 	mul.w	r2, r3, r5
 800194a:	460b      	mov	r3, r1
 800194c:	fb04 f303 	mul.w	r3, r4, r3
 8001950:	4413      	add	r3, r2
 8001952:	4602      	mov	r2, r0
 8001954:	fba4 1202 	umull	r1, r2, r4, r2
 8001958:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800195c:	460a      	mov	r2, r1
 800195e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001962:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001966:	4413      	add	r3, r2
 8001968:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800196c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001970:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8001974:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001978:	4b77      	ldr	r3, [pc, #476]	@ (8001b58 <bme280_update+0x404>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001982:	b21b      	sxth	r3, r3
 8001984:	17da      	asrs	r2, r3, #31
 8001986:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800198a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800198e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001992:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001996:	462a      	mov	r2, r5
 8001998:	fb02 f203 	mul.w	r2, r2, r3
 800199c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80019a0:	4621      	mov	r1, r4
 80019a2:	fb01 f303 	mul.w	r3, r1, r3
 80019a6:	441a      	add	r2, r3
 80019a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019ac:	4621      	mov	r1, r4
 80019ae:	fba3 ab01 	umull	sl, fp, r3, r1
 80019b2:	eb02 030b 	add.w	r3, r2, fp
 80019b6:	469b      	mov	fp, r3
 80019b8:	f04f 0000 	mov.w	r0, #0
 80019bc:	f04f 0100 	mov.w	r1, #0
 80019c0:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80019c4:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 80019c8:	ea4f 404a 	mov.w	r0, sl, lsl #17
 80019cc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80019d0:	1814      	adds	r4, r2, r0
 80019d2:	643c      	str	r4, [r7, #64]	@ 0x40
 80019d4:	414b      	adcs	r3, r1
 80019d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80019d8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80019dc:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 80019e0:	4b5d      	ldr	r3, [pc, #372]	@ (8001b58 <bme280_update+0x404>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	17da      	asrs	r2, r3, #31
 80019ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80019f2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80019f6:	f04f 0000 	mov.w	r0, #0
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a02:	00d9      	lsls	r1, r3, #3
 8001a04:	2000      	movs	r0, #0
 8001a06:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a0a:	1814      	adds	r4, r2, r0
 8001a0c:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001a0e:	414b      	adcs	r3, r1
 8001a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a12:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001a16:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001a1a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a22:	fb03 f102 	mul.w	r1, r3, r2
 8001a26:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	18ca      	adds	r2, r1, r3
 8001a34:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a38:	fba3 8903 	umull	r8, r9, r3, r3
 8001a3c:	eb02 0309 	add.w	r3, r2, r9
 8001a40:	4699      	mov	r9, r3
 8001a42:	4b45      	ldr	r3, [pc, #276]	@ (8001b58 <bme280_update+0x404>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	17da      	asrs	r2, r3, #31
 8001a50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001a58:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	fb03 f209 	mul.w	r2, r3, r9
 8001a62:	460b      	mov	r3, r1
 8001a64:	fb08 f303 	mul.w	r3, r8, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	fba8 1202 	umull	r1, r2, r8, r2
 8001a70:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001a74:	460a      	mov	r2, r1
 8001a76:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001a7a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001a7e:	4413      	add	r3, r2
 8001a80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001a84:	f04f 0000 	mov.w	r0, #0
 8001a88:	f04f 0100 	mov.w	r1, #0
 8001a8c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001a90:	4623      	mov	r3, r4
 8001a92:	0a18      	lsrs	r0, r3, #8
 8001a94:	462b      	mov	r3, r5
 8001a96:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a9a:	462b      	mov	r3, r5
 8001a9c:	1219      	asrs	r1, r3, #8
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b58 <bme280_update+0x404>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	17da      	asrs	r2, r3, #31
 8001aac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001ab0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001ab4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ab8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001abc:	464a      	mov	r2, r9
 8001abe:	fb02 f203 	mul.w	r2, r2, r3
 8001ac2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001ac6:	4644      	mov	r4, r8
 8001ac8:	fb04 f303 	mul.w	r3, r4, r3
 8001acc:	441a      	add	r2, r3
 8001ace:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ad2:	4644      	mov	r4, r8
 8001ad4:	fba3 4304 	umull	r4, r3, r3, r4
 8001ad8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001adc:	4623      	mov	r3, r4
 8001ade:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ae6:	18d3      	adds	r3, r2, r3
 8001ae8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001af8:	464c      	mov	r4, r9
 8001afa:	0323      	lsls	r3, r4, #12
 8001afc:	4644      	mov	r4, r8
 8001afe:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001b02:	4644      	mov	r4, r8
 8001b04:	0322      	lsls	r2, r4, #12
 8001b06:	1884      	adds	r4, r0, r2
 8001b08:	633c      	str	r4, [r7, #48]	@ 0x30
 8001b0a:	eb41 0303 	adc.w	r3, r1, r3
 8001b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b10:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001b14:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
        var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8001b18:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001b1c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001b20:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001b24:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <bme280_update+0x404>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	88db      	ldrh	r3, [r3, #6]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2200      	movs	r2, #0
 8001b34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001b38:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001b3c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001b40:	462b      	mov	r3, r5
 8001b42:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001b46:	4642      	mov	r2, r8
 8001b48:	fb02 f203 	mul.w	r2, r2, r3
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	4621      	mov	r1, r4
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	e005      	b.n	8001b64 <bme280_update+0x410>
 8001b58:	20000248 	.word	0x20000248
 8001b5c:	447a0000 	.word	0x447a0000
 8001b60:	42c80000 	.word	0x42c80000
 8001b64:	4622      	mov	r2, r4
 8001b66:	4641      	mov	r1, r8
 8001b68:	fba2 1201 	umull	r1, r2, r2, r1
 8001b6c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001b70:	460a      	mov	r2, r1
 8001b72:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001b76:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	104a      	asrs	r2, r1, #1
 8001b90:	4629      	mov	r1, r5
 8001b92:	17cb      	asrs	r3, r1, #31
 8001b94:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        if(var1_p == 0)
 8001b98:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	d106      	bne.n	8001bae <bme280_update+0x45a>
        {
            P = 0;
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8001bac:	e14b      	b.n	8001e46 <bme280_update+0x6f2>
        }
        else
        {
            P = 1048576 - adc_P;
 8001bae:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 8001bb8:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001bba:	eb61 0303 	sbc.w	r3, r1, r3
 8001bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bc0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001bc4:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
            P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001bc8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001bcc:	f04f 0000 	mov.w	r0, #0
 8001bd0:	f04f 0100 	mov.w	r1, #0
 8001bd4:	07d9      	lsls	r1, r3, #31
 8001bd6:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001bda:	07d0      	lsls	r0, r2, #31
 8001bdc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001be0:	1a84      	subs	r4, r0, r2
 8001be2:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8001be6:	eb61 0303 	sbc.w	r3, r1, r3
 8001bea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001bee:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	462b      	mov	r3, r5
 8001bf6:	1891      	adds	r1, r2, r2
 8001bf8:	6239      	str	r1, [r7, #32]
 8001bfa:	415b      	adcs	r3, r3
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c02:	4621      	mov	r1, r4
 8001c04:	1851      	adds	r1, r2, r1
 8001c06:	61b9      	str	r1, [r7, #24]
 8001c08:	4629      	mov	r1, r5
 8001c0a:	414b      	adcs	r3, r1
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c1a:	4649      	mov	r1, r9
 8001c1c:	018b      	lsls	r3, r1, #6
 8001c1e:	4641      	mov	r1, r8
 8001c20:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c24:	4641      	mov	r1, r8
 8001c26:	018a      	lsls	r2, r1, #6
 8001c28:	4641      	mov	r1, r8
 8001c2a:	1889      	adds	r1, r1, r2
 8001c2c:	6139      	str	r1, [r7, #16]
 8001c2e:	4649      	mov	r1, r9
 8001c30:	eb43 0101 	adc.w	r1, r3, r1
 8001c34:	6179      	str	r1, [r7, #20]
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c42:	4649      	mov	r1, r9
 8001c44:	008b      	lsls	r3, r1, #2
 8001c46:	4641      	mov	r1, r8
 8001c48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c4c:	4641      	mov	r1, r8
 8001c4e:	008a      	lsls	r2, r1, #2
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	4603      	mov	r3, r0
 8001c56:	4622      	mov	r2, r4
 8001c58:	189b      	adds	r3, r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	462a      	mov	r2, r5
 8001c60:	eb42 0303 	adc.w	r3, r2, r3
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001c72:	4649      	mov	r1, r9
 8001c74:	008b      	lsls	r3, r1, #2
 8001c76:	4641      	mov	r1, r8
 8001c78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c7c:	4641      	mov	r1, r8
 8001c7e:	008a      	lsls	r2, r1, #2
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	4603      	mov	r3, r0
 8001c86:	4622      	mov	r2, r4
 8001c88:	189b      	adds	r3, r3, r2
 8001c8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001c8e:	462b      	mov	r3, r5
 8001c90:	460a      	mov	r2, r1
 8001c92:	eb42 0303 	adc.w	r3, r2, r3
 8001c96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c9a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001ca2:	f7ff f8ff 	bl	8000ea4 <__aeabi_ldivmod>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
            var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001cae:	4bb9      	ldr	r3, [pc, #740]	@ (8001f94 <bme280_update+0x840>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	17da      	asrs	r2, r3, #31
 8001cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001cbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001cc0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001cc4:	f04f 0000 	mov.w	r0, #0
 8001cc8:	f04f 0100 	mov.w	r1, #0
 8001ccc:	0b50      	lsrs	r0, r2, #13
 8001cce:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001cd2:	1359      	asrs	r1, r3, #13
 8001cd4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001cd8:	462b      	mov	r3, r5
 8001cda:	fb00 f203 	mul.w	r2, r0, r3
 8001cde:	4623      	mov	r3, r4
 8001ce0:	fb03 f301 	mul.w	r3, r3, r1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	4622      	mov	r2, r4
 8001ce8:	fba2 1200 	umull	r1, r2, r2, r0
 8001cec:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001cf6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001d00:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001d04:	f04f 0000 	mov.w	r0, #0
 8001d08:	f04f 0100 	mov.w	r1, #0
 8001d0c:	0b50      	lsrs	r0, r2, #13
 8001d0e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d12:	1359      	asrs	r1, r3, #13
 8001d14:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001d18:	462b      	mov	r3, r5
 8001d1a:	fb00 f203 	mul.w	r2, r0, r3
 8001d1e:	4623      	mov	r3, r4
 8001d20:	fb03 f301 	mul.w	r3, r3, r1
 8001d24:	4413      	add	r3, r2
 8001d26:	4622      	mov	r2, r4
 8001d28:	fba2 1200 	umull	r1, r2, r2, r0
 8001d2c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001d30:	460a      	mov	r2, r1
 8001d32:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001d36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	0e4a      	lsrs	r2, r1, #25
 8001d50:	4629      	mov	r1, r5
 8001d52:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001d56:	4629      	mov	r1, r5
 8001d58:	164b      	asrs	r3, r1, #25
 8001d5a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 8001d5e:	4b8d      	ldr	r3, [pc, #564]	@ (8001f94 <bme280_update+0x840>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	17da      	asrs	r2, r3, #31
 8001d6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001d6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d70:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001d74:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001d78:	462a      	mov	r2, r5
 8001d7a:	fb02 f203 	mul.w	r2, r2, r3
 8001d7e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001d82:	4621      	mov	r1, r4
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001d8e:	4621      	mov	r1, r4
 8001d90:	fba2 1201 	umull	r1, r2, r2, r1
 8001d94:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001d98:	460a      	mov	r2, r1
 8001d9a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001d9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001da2:	4413      	add	r3, r2
 8001da4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001db4:	4621      	mov	r1, r4
 8001db6:	0cca      	lsrs	r2, r1, #19
 8001db8:	4629      	mov	r1, r5
 8001dba:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	14cb      	asrs	r3, r1, #19
 8001dc2:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
            P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 8001dc6:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001dca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001dce:	1884      	adds	r4, r0, r2
 8001dd0:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001dd2:	eb41 0303 	adc.w	r3, r1, r3
 8001dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001dd8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001ddc:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001de0:	4621      	mov	r1, r4
 8001de2:	1889      	adds	r1, r1, r2
 8001de4:	6639      	str	r1, [r7, #96]	@ 0x60
 8001de6:	4629      	mov	r1, r5
 8001de8:	eb43 0101 	adc.w	r1, r3, r1
 8001dec:	6679      	str	r1, [r7, #100]	@ 0x64
 8001dee:	f04f 0000 	mov.w	r0, #0
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001dfa:	4623      	mov	r3, r4
 8001dfc:	0a18      	lsrs	r0, r3, #8
 8001dfe:	462b      	mov	r3, r5
 8001e00:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001e04:	462b      	mov	r3, r5
 8001e06:	1219      	asrs	r1, r3, #8
 8001e08:	4b62      	ldr	r3, [pc, #392]	@ (8001f94 <bme280_update+0x840>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	17da      	asrs	r2, r3, #31
 8001e16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e18:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001e26:	464c      	mov	r4, r9
 8001e28:	0123      	lsls	r3, r4, #4
 8001e2a:	4644      	mov	r4, r8
 8001e2c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001e30:	4644      	mov	r4, r8
 8001e32:	0122      	lsls	r2, r4, #4
 8001e34:	1884      	adds	r4, r0, r2
 8001e36:	603c      	str	r4, [r7, #0]
 8001e38:	eb41 0303 	adc.w	r3, r1, r3
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e42:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
        }

        BME->pressure = ((float)P / 256.0 / 100.0);
 8001e46:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001e4a:	f7fe ffed 	bl	8000e28 <__aeabi_l2f>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb99 	bl	8000588 <__aeabi_f2d>
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001f98 <bme280_update+0x844>)
 8001e5c:	f7fe fd16 	bl	800088c <__aeabi_ddiv>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f9c <bme280_update+0x848>)
 8001e6e:	f7fe fd0d 	bl	800088c <__aeabi_ddiv>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4947      	ldr	r1, [pc, #284]	@ (8001f94 <bme280_update+0x840>)
 8001e78:	680c      	ldr	r4, [r1, #0]
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe feb3 	bl	8000be8 <__aeabi_d2f>
 8001e82:	4603      	mov	r3, r0
 8001e84:	61a3      	str	r3, [r4, #24]

        //for humidity
        uint32_t var_h, adc_H;
        adc_H = BME->adcVals.uh;
 8001e86:	4b43      	ldr	r3, [pc, #268]	@ (8001f94 <bme280_update+0x840>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

        var_h = (t_fine - ((int32_t)76800));
 8001e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001e94:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001e98:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8001e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ea0:	039a      	lsls	r2, r3, #14
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	@ (8001f94 <bme280_update+0x840>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001eac:	051b      	lsls	r3, r3, #20
 8001eae:	1ad2      	subs	r2, r2, r3
 8001eb0:	4b38      	ldr	r3, [pc, #224]	@ (8001f94 <bme280_update+0x840>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ec0:	fb01 f303 	mul.w	r3, r1, r3
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001eca:	0bdb      	lsrs	r3, r3, #15
 8001ecc:	4a31      	ldr	r2, [pc, #196]	@ (8001f94 <bme280_update+0x840>)
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001edc:	fb01 f202 	mul.w	r2, r1, r2
 8001ee0:	0a92      	lsrs	r2, r2, #10
 8001ee2:	492c      	ldr	r1, [pc, #176]	@ (8001f94 <bme280_update+0x840>)
 8001ee4:	6809      	ldr	r1, [r1, #0]
 8001ee6:	6809      	ldr	r1, [r1, #0]
 8001ee8:	7f09      	ldrb	r1, [r1, #28]
 8001eea:	4608      	mov	r0, r1
 8001eec:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001ef0:	fb00 f101 	mul.w	r1, r0, r1
 8001ef4:	0ac9      	lsrs	r1, r1, #11
 8001ef6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001efa:	fb01 f202 	mul.w	r2, r1, r2
 8001efe:	0a92      	lsrs	r2, r2, #10
 8001f00:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001f04:	4923      	ldr	r1, [pc, #140]	@ (8001f94 <bme280_update+0x840>)
 8001f06:	6809      	ldr	r1, [r1, #0]
 8001f08:	6809      	ldr	r1, [r1, #0]
 8001f0a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001f0e:	fb01 f202 	mul.w	r2, r1, r2
 8001f12:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001f16:	0b92      	lsrs	r2, r2, #14
 8001f18:	fb02 f303 	mul.w	r3, r2, r3
 8001f1c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8001f20:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f24:	0bdb      	lsrs	r3, r3, #15
 8001f26:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f2a:	0bd2      	lsrs	r2, r2, #15
 8001f2c:	fb02 f303 	mul.w	r3, r2, r3
 8001f30:	09db      	lsrs	r3, r3, #7
 8001f32:	4a18      	ldr	r2, [pc, #96]	@ (8001f94 <bme280_update+0x840>)
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	7e12      	ldrb	r2, [r2, #24]
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h < 0 ? 0 : var_h);
        var_h = (var_h > 419430400 ? 419430400 : var_h);
 8001f4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f4e:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001f52:	bf28      	it	cs
 8001f54:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 8001f58:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 8001f5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f60:	0b1b      	lsrs	r3, r3, #12
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <bme280_update+0x840>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001fa0 <bme280_update+0x84c>
 8001f72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f76:	edc3 7a07 	vstr	s15, [r3, #28]

        // Calculate raw altitude (no filtering)
        bme280_calculate_altitude();
 8001f7a:	f7ff f9dd 	bl	8001338 <bme280_calculate_altitude>
        BME->isUpdated = 0;
 8001f7e:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <bme280_update+0x840>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
}
 8001f88:	bf00      	nop
 8001f8a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f94:	20000248 	.word	0x20000248
 8001f98:	40700000 	.word	0x40700000
 8001f9c:	40590000 	.word	0x40590000
 8001fa0:	44800000 	.word	0x44800000

08001fa4 <bmi088_init>:
	HAL_I2C_Init(BMI_I2c);

}
*/
uint8_t bmi088_init(bmi088_struct_t* BMI)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af04      	add	r7, sp, #16
 8001faa:	6078      	str	r0, [r7, #4]
	//quaternionSet_zero();
	uint8_t ret_val = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	73fb      	strb	r3, [r7, #15]
	BMI->flags.isGyroUpdated = 0;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
	BMI->flags.isAccelUpdated = 0;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	705a      	strb	r2, [r3, #1]
	is_time_updated = 0;
 8001fbc:	4b23      	ldr	r3, [pc, #140]	@ (800204c <bmi088_init+0xa8>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
	is_starded = 0;
 8001fc2:	4b23      	ldr	r3, [pc, #140]	@ (8002050 <bmi088_init+0xac>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	733b      	strb	r3, [r7, #12]

	if(BMI->device_config.offsets == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d107      	bne.n	8001fe4 <bmi088_init+0x40>
	{
		BMI->device_config.offsets = calloc(sizeof(*BMI->device_config.offsets), 1);
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	2018      	movs	r0, #24
 8001fd8:	f00b f996 	bl	800d308 <calloc>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	461a      	mov	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	615a      	str	r2, [r3, #20]

	}

	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68d8      	ldr	r0, [r3, #12]
 8001fe8:	2332      	movs	r3, #50	@ 0x32
 8001fea:	9302      	str	r3, [sp, #8]
 8001fec:	2301      	movs	r3, #1
 8001fee:	9301      	str	r3, [sp, #4]
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2130      	movs	r1, #48	@ 0x30
 8001ffc:	f007 fe34 	bl	8009c68 <HAL_I2C_Mem_Read>
 8002000:	4603      	mov	r3, r0
 8002002:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &buf[1], 1, 50);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68d8      	ldr	r0, [r3, #12]
 8002008:	2332      	movs	r3, #50	@ 0x32
 800200a:	9302      	str	r3, [sp, #8]
 800200c:	2301      	movs	r3, #1
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	f107 030c 	add.w	r3, r7, #12
 8002014:	3301      	adds	r3, #1
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2301      	movs	r3, #1
 800201a:	2200      	movs	r2, #0
 800201c:	21d0      	movs	r1, #208	@ 0xd0
 800201e:	f007 fe23 	bl	8009c68 <HAL_I2C_Mem_Read>
 8002022:	4603      	mov	r3, r0
 8002024:	73bb      	strb	r3, [r7, #14]
	UNUSED(ret);
	if(!(buf[0] == 0x1E))
 8002026:	7b3b      	ldrb	r3, [r7, #12]
 8002028:	2b1e      	cmp	r3, #30
 800202a:	d003      	beq.n	8002034 <bmi088_init+0x90>
	{
		ret_val = ret_val | 0x01;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
	}
	if(!(buf[1] == 0x0F))
 8002034:	7b7b      	ldrb	r3, [r7, #13]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	d003      	beq.n	8002042 <bmi088_init+0x9e>
	{
		ret_val = ret_val | 0x02;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	2000024d 	.word	0x2000024d
 8002050:	2000024e 	.word	0x2000024e

08002054 <bmi088_config>:

void bmi088_config(bmi088_struct_t* BMI)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af04      	add	r7, sp, #16
 800205a:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(BMI->device_config.acc_IRQ);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002062:	4618      	mov	r0, r3
 8002064:	f006 fca3 	bl	80089ae <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BMI->device_config.gyro_IRQ);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800206e:	4618      	mov	r0, r3
 8002070:	f006 fc9d 	bl	80089ae <HAL_NVIC_DisableIRQ>

	HAL_StatusTypeDef retVal = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 8002078:	2301      	movs	r3, #1
 800207a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68d8      	ldr	r0, [r3, #12]
 8002080:	2364      	movs	r3, #100	@ 0x64
 8002082:	9302      	str	r3, [sp, #8]
 8002084:	2301      	movs	r3, #1
 8002086:	9301      	str	r3, [sp, #4]
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2301      	movs	r3, #1
 8002090:	227c      	movs	r2, #124	@ 0x7c
 8002092:	2130      	movs	r1, #48	@ 0x30
 8002094:	f007 fcee 	bl	8009a74 <HAL_I2C_Mem_Write>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	4313      	orrs	r3, r2
 80020a0:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68d8      	ldr	r0, [r3, #12]
 80020aa:	2364      	movs	r3, #100	@ 0x64
 80020ac:	9302      	str	r3, [sp, #8]
 80020ae:	2301      	movs	r3, #1
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2301      	movs	r3, #1
 80020ba:	227d      	movs	r2, #125	@ 0x7d
 80020bc:	2130      	movs	r1, #48	@ 0x30
 80020be:	f007 fcd9 	bl	8009a74 <HAL_I2C_Mem_Write>
 80020c2:	4603      	mov	r3, r0
 80020c4:	461a      	mov	r2, r3
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 80020cc:	2014      	movs	r0, #20
 80020ce:	f005 fefb 	bl	8007ec8 <HAL_Delay>

	buf[0] = ACC_RESET;
 80020d2:	23b6      	movs	r3, #182	@ 0xb6
 80020d4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68d8      	ldr	r0, [r3, #12]
 80020da:	2364      	movs	r3, #100	@ 0x64
 80020dc:	9302      	str	r3, [sp, #8]
 80020de:	2301      	movs	r3, #1
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	f107 030c 	add.w	r3, r7, #12
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2301      	movs	r3, #1
 80020ea:	227e      	movs	r2, #126	@ 0x7e
 80020ec:	2130      	movs	r1, #48	@ 0x30
 80020ee:	f007 fcc1 	bl	8009a74 <HAL_I2C_Mem_Write>
 80020f2:	4603      	mov	r3, r0
 80020f4:	461a      	mov	r2, r3
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <bmi088_config+0xb4>
 8002102:	4bb4      	ldr	r3, [pc, #720]	@ (80023d4 <bmi088_config+0x380>)
 8002104:	22a1      	movs	r2, #161	@ 0xa1
 8002106:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002108:	200a      	movs	r0, #10
 800210a:	f005 fedd 	bl	8007ec8 <HAL_Delay>

	buf[0] = FIFO_RESET;
 800210e:	23b0      	movs	r3, #176	@ 0xb0
 8002110:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68d8      	ldr	r0, [r3, #12]
 8002116:	2364      	movs	r3, #100	@ 0x64
 8002118:	9302      	str	r3, [sp, #8]
 800211a:	2301      	movs	r3, #1
 800211c:	9301      	str	r3, [sp, #4]
 800211e:	f107 030c 	add.w	r3, r7, #12
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2301      	movs	r3, #1
 8002126:	227e      	movs	r2, #126	@ 0x7e
 8002128:	2130      	movs	r1, #48	@ 0x30
 800212a:	f007 fca3 	bl	8009a74 <HAL_I2C_Mem_Write>
 800212e:	4603      	mov	r3, r0
 8002130:	461a      	mov	r2, r3
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	4313      	orrs	r3, r2
 8002136:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <bmi088_config+0xf0>
 800213e:	4ba5      	ldr	r3, [pc, #660]	@ (80023d4 <bmi088_config+0x380>)
 8002140:	22a6      	movs	r2, #166	@ 0xa6
 8002142:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002144:	200a      	movs	r0, #10
 8002146:	f005 febf 	bl	8007ec8 <HAL_Delay>

	buf[0] = GYRO_RESET;
 800214a:	23b6      	movs	r3, #182	@ 0xb6
 800214c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68d8      	ldr	r0, [r3, #12]
 8002152:	2364      	movs	r3, #100	@ 0x64
 8002154:	9302      	str	r3, [sp, #8]
 8002156:	2301      	movs	r3, #1
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	f107 030c 	add.w	r3, r7, #12
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2301      	movs	r3, #1
 8002162:	2214      	movs	r2, #20
 8002164:	21d0      	movs	r1, #208	@ 0xd0
 8002166:	f007 fc85 	bl	8009a74 <HAL_I2C_Mem_Write>
 800216a:	4603      	mov	r3, r0
 800216c:	461a      	mov	r2, r3
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	4313      	orrs	r3, r2
 8002172:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <bmi088_config+0x12c>
 800217a:	4b96      	ldr	r3, [pc, #600]	@ (80023d4 <bmi088_config+0x380>)
 800217c:	22ab      	movs	r2, #171	@ 0xab
 800217e:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002180:	200a      	movs	r0, #10
 8002182:	f005 fea1 	bl	8007ec8 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->device_config.gyro_range;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7a9b      	ldrb	r3, [r3, #10]
 800218a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68d8      	ldr	r0, [r3, #12]
 8002190:	2364      	movs	r3, #100	@ 0x64
 8002192:	9302      	str	r3, [sp, #8]
 8002194:	2301      	movs	r3, #1
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	f107 030c 	add.w	r3, r7, #12
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2301      	movs	r3, #1
 80021a0:	220f      	movs	r2, #15
 80021a2:	21d0      	movs	r1, #208	@ 0xd0
 80021a4:	f007 fc66 	bl	8009a74 <HAL_I2C_Mem_Write>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <bmi088_config+0x16a>
 80021b8:	4b86      	ldr	r3, [pc, #536]	@ (80023d4 <bmi088_config+0x380>)
 80021ba:	22b1      	movs	r2, #177	@ 0xb1
 80021bc:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_bandWidth;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	7a5b      	ldrb	r3, [r3, #9]
 80021c2:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68d8      	ldr	r0, [r3, #12]
 80021c8:	2314      	movs	r3, #20
 80021ca:	9302      	str	r3, [sp, #8]
 80021cc:	2301      	movs	r3, #1
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	f107 030c 	add.w	r3, r7, #12
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2301      	movs	r3, #1
 80021d8:	2210      	movs	r2, #16
 80021da:	21d0      	movs	r1, #208	@ 0xd0
 80021dc:	f007 fc4a 	bl	8009a74 <HAL_I2C_Mem_Write>
 80021e0:	4603      	mov	r3, r0
 80021e2:	461a      	mov	r2, r3
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d002      	beq.n	80021f6 <bmi088_config+0x1a2>
 80021f0:	4b78      	ldr	r3, [pc, #480]	@ (80023d4 <bmi088_config+0x380>)
 80021f2:	22b5      	movs	r2, #181	@ 0xb5
 80021f4:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_powerMode;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	7a1b      	ldrb	r3, [r3, #8]
 80021fa:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68d8      	ldr	r0, [r3, #12]
 8002200:	2314      	movs	r3, #20
 8002202:	9302      	str	r3, [sp, #8]
 8002204:	2301      	movs	r3, #1
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	f107 030c 	add.w	r3, r7, #12
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2301      	movs	r3, #1
 8002210:	2211      	movs	r2, #17
 8002212:	21d0      	movs	r1, #208	@ 0xd0
 8002214:	f007 fc2e 	bl	8009a74 <HAL_I2C_Mem_Write>
 8002218:	4603      	mov	r3, r0
 800221a:	461a      	mov	r2, r3
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	4313      	orrs	r3, r2
 8002220:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <bmi088_config+0x1da>
 8002228:	4b6a      	ldr	r3, [pc, #424]	@ (80023d4 <bmi088_config+0x380>)
 800222a:	22b9      	movs	r2, #185	@ 0xb9
 800222c:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 800222e:	2014      	movs	r0, #20
 8002230:	f005 fe4a 	bl	8007ec8 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 8002234:	2380      	movs	r3, #128	@ 0x80
 8002236:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68d8      	ldr	r0, [r3, #12]
 800223c:	2314      	movs	r3, #20
 800223e:	9302      	str	r3, [sp, #8]
 8002240:	2301      	movs	r3, #1
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2301      	movs	r3, #1
 800224c:	2215      	movs	r2, #21
 800224e:	21d0      	movs	r1, #208	@ 0xd0
 8002250:	f007 fc10 	bl	8009a74 <HAL_I2C_Mem_Write>
 8002254:	4603      	mov	r3, r0
 8002256:	461a      	mov	r2, r3
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	4313      	orrs	r3, r2
 800225c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <bmi088_config+0x216>
 8002264:	4b5b      	ldr	r3, [pc, #364]	@ (80023d4 <bmi088_config+0x380>)
 8002266:	22bf      	movs	r2, #191	@ 0xbf
 8002268:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0) | (GYRO_INT_ACT_HIGH << 2);
 800226a:	2305      	movs	r3, #5
 800226c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68d8      	ldr	r0, [r3, #12]
 8002272:	2314      	movs	r3, #20
 8002274:	9302      	str	r3, [sp, #8]
 8002276:	2301      	movs	r3, #1
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	f107 030c 	add.w	r3, r7, #12
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	2301      	movs	r3, #1
 8002282:	2216      	movs	r2, #22
 8002284:	21d0      	movs	r1, #208	@ 0xd0
 8002286:	f007 fbf5 	bl	8009a74 <HAL_I2C_Mem_Write>
 800228a:	4603      	mov	r3, r0
 800228c:	461a      	mov	r2, r3
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	4313      	orrs	r3, r2
 8002292:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <bmi088_config+0x24c>
 800229a:	4b4e      	ldr	r3, [pc, #312]	@ (80023d4 <bmi088_config+0x380>)
 800229c:	22c3      	movs	r2, #195	@ 0xc3
 800229e:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_BOTH;
 80022a0:	2381      	movs	r3, #129	@ 0x81
 80022a2:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68d8      	ldr	r0, [r3, #12]
 80022a8:	2314      	movs	r3, #20
 80022aa:	9302      	str	r3, [sp, #8]
 80022ac:	2301      	movs	r3, #1
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	f107 030c 	add.w	r3, r7, #12
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	2301      	movs	r3, #1
 80022b8:	2218      	movs	r2, #24
 80022ba:	21d0      	movs	r1, #208	@ 0xd0
 80022bc:	f007 fbda 	bl	8009a74 <HAL_I2C_Mem_Write>
 80022c0:	4603      	mov	r3, r0
 80022c2:	461a      	mov	r2, r3
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <bmi088_config+0x282>
 80022d0:	4b40      	ldr	r3, [pc, #256]	@ (80023d4 <bmi088_config+0x380>)
 80022d2:	22c7      	movs	r2, #199	@ 0xc7
 80022d4:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 80022d6:	2304      	movs	r3, #4
 80022d8:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68d8      	ldr	r0, [r3, #12]
 80022de:	2314      	movs	r3, #20
 80022e0:	9302      	str	r3, [sp, #8]
 80022e2:	2301      	movs	r3, #1
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	f107 030c 	add.w	r3, r7, #12
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2301      	movs	r3, #1
 80022ee:	227d      	movs	r2, #125	@ 0x7d
 80022f0:	2130      	movs	r1, #48	@ 0x30
 80022f2:	f007 fbbf 	bl	8009a74 <HAL_I2C_Mem_Write>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <bmi088_config+0x2b8>
 8002306:	4b33      	ldr	r3, [pc, #204]	@ (80023d4 <bmi088_config+0x380>)
 8002308:	22cc      	movs	r2, #204	@ 0xcc
 800230a:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800230c:	2008      	movs	r0, #8
 800230e:	f005 fddb 	bl	8007ec8 <HAL_Delay>

	buf[0] = BMI->device_config.acc_powerMode;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	791b      	ldrb	r3, [r3, #4]
 8002316:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68d8      	ldr	r0, [r3, #12]
 800231c:	2314      	movs	r3, #20
 800231e:	9302      	str	r3, [sp, #8]
 8002320:	2301      	movs	r3, #1
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	2301      	movs	r3, #1
 800232c:	227c      	movs	r2, #124	@ 0x7c
 800232e:	2130      	movs	r1, #48	@ 0x30
 8002330:	f007 fba0 	bl	8009a74 <HAL_I2C_Mem_Write>
 8002334:	4603      	mov	r3, r0
 8002336:	461a      	mov	r2, r3
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	4313      	orrs	r3, r2
 800233c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <bmi088_config+0x2f6>
 8002344:	4b23      	ldr	r3, [pc, #140]	@ (80023d4 <bmi088_config+0x380>)
 8002346:	22d1      	movs	r2, #209	@ 0xd1
 8002348:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800234a:	2008      	movs	r0, #8
 800234c:	f005 fdbc 	bl	8007ec8 <HAL_Delay>

	buf[0] = (BMI->device_config.acc_bandwith << 4) | BMI->device_config.acc_outputDateRate;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	799b      	ldrb	r3, [r3, #6]
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	b25a      	sxtb	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	79db      	ldrb	r3, [r3, #7]
 800235c:	b25b      	sxtb	r3, r3
 800235e:	4313      	orrs	r3, r2
 8002360:	b25b      	sxtb	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68d8      	ldr	r0, [r3, #12]
 800236a:	2314      	movs	r3, #20
 800236c:	9302      	str	r3, [sp, #8]
 800236e:	2301      	movs	r3, #1
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	f107 030c 	add.w	r3, r7, #12
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2301      	movs	r3, #1
 800237a:	2240      	movs	r2, #64	@ 0x40
 800237c:	2130      	movs	r1, #48	@ 0x30
 800237e:	f007 fb79 	bl	8009a74 <HAL_I2C_Mem_Write>
 8002382:	4603      	mov	r3, r0
 8002384:	461a      	mov	r2, r3
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	4313      	orrs	r3, r2
 800238a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <bmi088_config+0x344>
 8002392:	4b10      	ldr	r3, [pc, #64]	@ (80023d4 <bmi088_config+0x380>)
 8002394:	22d6      	movs	r2, #214	@ 0xd6
 8002396:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.acc_range;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	795b      	ldrb	r3, [r3, #5]
 800239c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68d8      	ldr	r0, [r3, #12]
 80023a2:	2314      	movs	r3, #20
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	2301      	movs	r3, #1
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2301      	movs	r3, #1
 80023b2:	2241      	movs	r2, #65	@ 0x41
 80023b4:	2130      	movs	r1, #48	@ 0x30
 80023b6:	f007 fb5d 	bl	8009a74 <HAL_I2C_Mem_Write>
 80023ba:	4603      	mov	r3, r0
 80023bc:	461a      	mov	r2, r3
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <bmi088_config+0x384>
 80023ca:	4b02      	ldr	r3, [pc, #8]	@ (80023d4 <bmi088_config+0x380>)
 80023cc:	22da      	movs	r2, #218	@ 0xda
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e002      	b.n	80023d8 <bmi088_config+0x384>
 80023d2:	bf00      	nop
 80023d4:	20000250 	.word	0x20000250

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 80023d8:	230a      	movs	r3, #10
 80023da:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68d8      	ldr	r0, [r3, #12]
 80023e0:	2314      	movs	r3, #20
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	2301      	movs	r3, #1
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	f107 030c 	add.w	r3, r7, #12
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2301      	movs	r3, #1
 80023f0:	2253      	movs	r2, #83	@ 0x53
 80023f2:	2130      	movs	r1, #48	@ 0x30
 80023f4:	f007 fb3e 	bl	8009a74 <HAL_I2C_Mem_Write>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461a      	mov	r2, r3
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	4313      	orrs	r3, r2
 8002400:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 8002402:	2304      	movs	r3, #4
 8002404:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68d8      	ldr	r0, [r3, #12]
 800240a:	2314      	movs	r3, #20
 800240c:	9302      	str	r3, [sp, #8]
 800240e:	2301      	movs	r3, #1
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	f107 030c 	add.w	r3, r7, #12
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2301      	movs	r3, #1
 800241a:	2258      	movs	r2, #88	@ 0x58
 800241c:	2130      	movs	r1, #48	@ 0x30
 800241e:	f007 fb29 	bl	8009a74 <HAL_I2C_Mem_Write>
 8002422:	4603      	mov	r3, r0
 8002424:	461a      	mov	r2, r3
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	4313      	orrs	r3, r2
 800242a:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(BMI->device_config.acc_IRQ);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002432:	4618      	mov	r0, r3
 8002434:	f006 faad 	bl	8008992 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BMI->device_config.gyro_IRQ);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800243e:	4618      	mov	r0, r3
 8002440:	f006 faa7 	bl	8008992 <HAL_NVIC_EnableIRQ>
	HAL_Delay(70);
 8002444:	2046      	movs	r0, #70	@ 0x46
 8002446:	f005 fd3f 	bl	8007ec8 <HAL_Delay>
}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	0000      	movs	r0, r0
	...

08002458 <bmi088_update>:


void bmi088_update(bmi088_struct_t* BMI)
{
 8002458:	b5b0      	push	{r4, r5, r7, lr}
 800245a:	b092      	sub	sp, #72	@ 0x48
 800245c:	af04      	add	r7, sp, #16
 800245e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret_val = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		if(BMI->flags.isAccelUpdated)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	785b      	ldrb	r3, [r3, #1]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 820d 	beq.w	800288a <bmi088_update+0x432>
		{
			uint8_t raw_accel[9];
			uint8_t	raw_temp[2];

			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_accel, 9, 20);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68d8      	ldr	r0, [r3, #12]
 8002474:	2314      	movs	r3, #20
 8002476:	9302      	str	r3, [sp, #8]
 8002478:	2309      	movs	r3, #9
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2301      	movs	r3, #1
 8002484:	2212      	movs	r2, #18
 8002486:	2130      	movs	r1, #48	@ 0x30
 8002488:	f007 fbee 	bl	8009c68 <HAL_I2C_Mem_Read>
 800248c:	4603      	mov	r3, r0
 800248e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, raw_temp, 2, 20);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68d8      	ldr	r0, [r3, #12]
 8002496:	2314      	movs	r3, #20
 8002498:	9302      	str	r3, [sp, #8]
 800249a:	2302      	movs	r3, #2
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	f107 0310 	add.w	r3, r7, #16
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	2301      	movs	r3, #1
 80024a6:	2222      	movs	r2, #34	@ 0x22
 80024a8:	2130      	movs	r1, #48	@ 0x30
 80024aa:	f007 fbdd 	bl	8009c68 <HAL_I2C_Mem_Read>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			uint16_t Temp_uint11 = (raw_temp[0] << 3) | (raw_temp[1] >> 5);
 80024b4:	7c3b      	ldrb	r3, [r7, #16]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	7c7b      	ldrb	r3, [r7, #17]
 80024bc:	095b      	lsrs	r3, r3, #5
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	4313      	orrs	r3, r2
 80024c4:	b21b      	sxth	r3, r3
 80024c6:	86bb      	strh	r3, [r7, #52]	@ 0x34
			int16_t Temp_int11 = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	867b      	strh	r3, [r7, #50]	@ 0x32
			if (Temp_uint11 > 1023){
 80024cc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80024ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024d2:	d305      	bcc.n	80024e0 <bmi088_update+0x88>
				Temp_int11 = Temp_uint11 - 2048;
 80024d4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80024d6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80024da:	b29b      	uxth	r3, r3
 80024dc:	867b      	strh	r3, [r7, #50]	@ 0x32
 80024de:	e023      	b.n	8002528 <bmi088_update+0xd0>
			}
			else{
				Temp_int11 = Temp_uint11;
 80024e0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80024e2:	867b      	strh	r3, [r7, #50]	@ 0x32
				BMI->datas.temp = (float)Temp_int11 * 0.125 + 23.0;
 80024e4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80024e8:	ee07 3a90 	vmov	s15, r3
 80024ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f0:	ee17 0a90 	vmov	r0, s15
 80024f4:	f7fe f848 	bl	8000588 <__aeabi_f2d>
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8002500:	f7fe f89a 	bl	8000638 <__aeabi_dmul>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	4bcf      	ldr	r3, [pc, #828]	@ (8002850 <bmi088_update+0x3f8>)
 8002512:	f7fd fedb 	bl	80002cc <__adddf3>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	f7fe fb63 	bl	8000be8 <__aeabi_d2f>
 8002522:	4602      	mov	r2, r0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			uint32_t sensorTime = (raw_accel[8] << 16) | (raw_accel[7] << 8) | raw_accel[6];
 8002528:	7f3b      	ldrb	r3, [r7, #28]
 800252a:	041a      	lsls	r2, r3, #16
 800252c:	7efb      	ldrb	r3, [r7, #27]
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	4313      	orrs	r3, r2
 8002532:	7eba      	ldrb	r2, [r7, #26]
 8002534:	4313      	orrs	r3, r2
 8002536:	62fb      	str	r3, [r7, #44]	@ 0x2c

			BMI->datas.current_time= (float)sensorTime * 39.0625 / 1000000.0;
 8002538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002542:	ee17 0a90 	vmov	r0, s15
 8002546:	f7fe f81f 	bl	8000588 <__aeabi_f2d>
 800254a:	a3b9      	add	r3, pc, #740	@ (adr r3, 8002830 <bmi088_update+0x3d8>)
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	f7fe f872 	bl	8000638 <__aeabi_dmul>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	a3b6      	add	r3, pc, #728	@ (adr r3, 8002838 <bmi088_update+0x3e0>)
 800255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002562:	f7fe f993 	bl	800088c <__aeabi_ddiv>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f7fe fb3b 	bl	8000be8 <__aeabi_d2f>
 8002572:	4602      	mov	r2, r0
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	669a      	str	r2, [r3, #104]	@ 0x68

			int16_t acc_z_16 = (raw_accel[5] << 8) | raw_accel[4];
 8002578:	7e7b      	ldrb	r3, [r7, #25]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	b21a      	sxth	r2, r3
 800257e:	7e3b      	ldrb	r3, [r7, #24]
 8002580:	b21b      	sxth	r3, r3
 8002582:	4313      	orrs	r3, r2
 8002584:	857b      	strh	r3, [r7, #42]	@ 0x2a
			int16_t acc_y_16 = (raw_accel[3] << 8) | raw_accel[2];
 8002586:	7dfb      	ldrb	r3, [r7, #23]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	b21a      	sxth	r2, r3
 800258c:	7dbb      	ldrb	r3, [r7, #22]
 800258e:	b21b      	sxth	r3, r3
 8002590:	4313      	orrs	r3, r2
 8002592:	853b      	strh	r3, [r7, #40]	@ 0x28
			int16_t acc_x_16 = (raw_accel[1] << 8) | raw_accel[0];
 8002594:	7d7b      	ldrb	r3, [r7, #21]
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	b21a      	sxth	r2, r3
 800259a:	7d3b      	ldrb	r3, [r7, #20]
 800259c:	b21b      	sxth	r3, r3
 800259e:	4313      	orrs	r3, r2
 80025a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

			BMI->datas.acc_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Z_OFFSET)*9.81/1000;
 80025a2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80025a6:	ee07 3a90 	vmov	s15, r3
 80025aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ae:	ee17 0a90 	vmov	r0, s15
 80025b2:	f7fd ffe9 	bl	8000588 <__aeabi_f2d>
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	4ba6      	ldr	r3, [pc, #664]	@ (8002854 <bmi088_update+0x3fc>)
 80025bc:	f7fe f966 	bl	800088c <__aeabi_ddiv>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	4ba2      	ldr	r3, [pc, #648]	@ (8002858 <bmi088_update+0x400>)
 80025ce:	f7fe f833 	bl	8000638 <__aeabi_dmul>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	4b9f      	ldr	r3, [pc, #636]	@ (800285c <bmi088_update+0x404>)
 80025e0:	f7fe f82a 	bl	8000638 <__aeabi_dmul>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4614      	mov	r4, r2
 80025ea:	461d      	mov	r5, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	795b      	ldrb	r3, [r3, #5]
 80025f0:	3301      	adds	r3, #1
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025fa:	ee17 0a90 	vmov	r0, s15
 80025fe:	f7fd ffc3 	bl	8000588 <__aeabi_f2d>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	ec43 2b11 	vmov	d1, r2, r3
 800260a:	ed9f 0b8d 	vldr	d0, [pc, #564]	@ 8002840 <bmi088_update+0x3e8>
 800260e:	f00d fb13 	bl	800fc38 <pow>
 8002612:	ec53 2b10 	vmov	r2, r3, d0
 8002616:	4620      	mov	r0, r4
 8002618:	4629      	mov	r1, r5
 800261a:	f7fe f80d 	bl	8000638 <__aeabi_dmul>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4610      	mov	r0, r2
 8002624:	4619      	mov	r1, r3
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	4b8d      	ldr	r3, [pc, #564]	@ (8002860 <bmi088_update+0x408>)
 800262c:	f7fd fe4c 	bl	80002c8 <__aeabi_dsub>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	a383      	add	r3, pc, #524	@ (adr r3, 8002848 <bmi088_update+0x3f0>)
 800263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263e:	f7fd fffb 	bl	8000638 <__aeabi_dmul>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4610      	mov	r0, r2
 8002648:	4619      	mov	r1, r3
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	4b82      	ldr	r3, [pc, #520]	@ (8002858 <bmi088_update+0x400>)
 8002650:	f7fe f91c 	bl	800088c <__aeabi_ddiv>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	f7fe fac4 	bl	8000be8 <__aeabi_d2f>
 8002660:	4602      	mov	r2, r0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	661a      	str	r2, [r3, #96]	@ 0x60
			BMI->datas.acc_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Y_OFFSET)*9.81/1000;
 8002666:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800266a:	ee07 3a90 	vmov	s15, r3
 800266e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002672:	ee17 0a90 	vmov	r0, s15
 8002676:	f7fd ff87 	bl	8000588 <__aeabi_f2d>
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	4b75      	ldr	r3, [pc, #468]	@ (8002854 <bmi088_update+0x3fc>)
 8002680:	f7fe f904 	bl	800088c <__aeabi_ddiv>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	4b71      	ldr	r3, [pc, #452]	@ (8002858 <bmi088_update+0x400>)
 8002692:	f7fd ffd1 	bl	8000638 <__aeabi_dmul>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4610      	mov	r0, r2
 800269c:	4619      	mov	r1, r3
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	4b6e      	ldr	r3, [pc, #440]	@ (800285c <bmi088_update+0x404>)
 80026a4:	f7fd ffc8 	bl	8000638 <__aeabi_dmul>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4614      	mov	r4, r2
 80026ae:	461d      	mov	r5, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	795b      	ldrb	r3, [r3, #5]
 80026b4:	3301      	adds	r3, #1
 80026b6:	ee07 3a90 	vmov	s15, r3
 80026ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026be:	ee17 0a90 	vmov	r0, s15
 80026c2:	f7fd ff61 	bl	8000588 <__aeabi_f2d>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	ec43 2b11 	vmov	d1, r2, r3
 80026ce:	ed9f 0b5c 	vldr	d0, [pc, #368]	@ 8002840 <bmi088_update+0x3e8>
 80026d2:	f00d fab1 	bl	800fc38 <pow>
 80026d6:	ec53 2b10 	vmov	r2, r3, d0
 80026da:	4620      	mov	r0, r4
 80026dc:	4629      	mov	r1, r5
 80026de:	f7fd ffab 	bl	8000638 <__aeabi_dmul>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4610      	mov	r0, r2
 80026e8:	4619      	mov	r1, r3
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002864 <bmi088_update+0x40c>)
 80026f0:	f7fd fdec 	bl	80002cc <__adddf3>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4610      	mov	r0, r2
 80026fa:	4619      	mov	r1, r3
 80026fc:	a352      	add	r3, pc, #328	@ (adr r3, 8002848 <bmi088_update+0x3f0>)
 80026fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002702:	f7fd ff99 	bl	8000638 <__aeabi_dmul>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	4b51      	ldr	r3, [pc, #324]	@ (8002858 <bmi088_update+0x400>)
 8002714:	f7fe f8ba 	bl	800088c <__aeabi_ddiv>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4610      	mov	r0, r2
 800271e:	4619      	mov	r1, r3
 8002720:	f7fe fa62 	bl	8000be8 <__aeabi_d2f>
 8002724:	4602      	mov	r2, r0
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	65da      	str	r2, [r3, #92]	@ 0x5c
			BMI->datas.acc_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_X_OFFSET)*9.81/1000;
 800272a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800272e:	ee07 3a90 	vmov	s15, r3
 8002732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002736:	ee17 0a90 	vmov	r0, s15
 800273a:	f7fd ff25 	bl	8000588 <__aeabi_f2d>
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	4b44      	ldr	r3, [pc, #272]	@ (8002854 <bmi088_update+0x3fc>)
 8002744:	f7fe f8a2 	bl	800088c <__aeabi_ddiv>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4610      	mov	r0, r2
 800274e:	4619      	mov	r1, r3
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	4b40      	ldr	r3, [pc, #256]	@ (8002858 <bmi088_update+0x400>)
 8002756:	f7fd ff6f 	bl	8000638 <__aeabi_dmul>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	4b3d      	ldr	r3, [pc, #244]	@ (800285c <bmi088_update+0x404>)
 8002768:	f7fd ff66 	bl	8000638 <__aeabi_dmul>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4614      	mov	r4, r2
 8002772:	461d      	mov	r5, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	795b      	ldrb	r3, [r3, #5]
 8002778:	3301      	adds	r3, #1
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002782:	ee17 0a90 	vmov	r0, s15
 8002786:	f7fd feff 	bl	8000588 <__aeabi_f2d>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	ec43 2b11 	vmov	d1, r2, r3
 8002792:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 8002840 <bmi088_update+0x3e8>
 8002796:	f00d fa4f 	bl	800fc38 <pow>
 800279a:	ec53 2b10 	vmov	r2, r3, d0
 800279e:	4620      	mov	r0, r4
 80027a0:	4629      	mov	r1, r5
 80027a2:	f7fd ff49 	bl	8000638 <__aeabi_dmul>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002860 <bmi088_update+0x408>)
 80027b4:	f7fd fd8a 	bl	80002cc <__adddf3>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	a321      	add	r3, pc, #132	@ (adr r3, 8002848 <bmi088_update+0x3f0>)
 80027c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c6:	f7fd ff37 	bl	8000638 <__aeabi_dmul>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	4b20      	ldr	r3, [pc, #128]	@ (8002858 <bmi088_update+0x400>)
 80027d8:	f7fe f858 	bl	800088c <__aeabi_ddiv>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4610      	mov	r0, r2
 80027e2:	4619      	mov	r1, r3
 80027e4:	f7fe fa00 	bl	8000be8 <__aeabi_d2f>
 80027e8:	4602      	mov	r2, r0
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	659a      	str	r2, [r3, #88]	@ 0x58

			if(is_starded)
 80027ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002868 <bmi088_update+0x410>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d03c      	beq.n	8002870 <bmi088_update+0x418>
			{
				BMI->datas.delta_time = BMI->datas.current_time - BMI->datas.last_time < 0 ? 0.0 : BMI->datas.current_time - BMI->datas.last_time;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8002802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002806:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800280a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280e:	d502      	bpl.n	8002816 <bmi088_update+0x3be>
 8002810:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800286c <bmi088_update+0x414>
 8002814:	e007      	b.n	8002826 <bmi088_update+0x3ce>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8002822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
 800282c:	e023      	b.n	8002876 <bmi088_update+0x41e>
 800282e:	bf00      	nop
 8002830:	00000000 	.word	0x00000000
 8002834:	40438800 	.word	0x40438800
 8002838:	00000000 	.word	0x00000000
 800283c:	412e8480 	.word	0x412e8480
 8002840:	00000000 	.word	0x00000000
 8002844:	40000000 	.word	0x40000000
 8002848:	51eb851f 	.word	0x51eb851f
 800284c:	40239eb8 	.word	0x40239eb8
 8002850:	40370000 	.word	0x40370000
 8002854:	40e00000 	.word	0x40e00000
 8002858:	408f4000 	.word	0x408f4000
 800285c:	3ff80000 	.word	0x3ff80000
 8002860:	40100000 	.word	0x40100000
 8002864:	402e0000 	.word	0x402e0000
 8002868:	2000024e 	.word	0x2000024e
 800286c:	00000000 	.word	0x00000000
			}
			else
			{
				is_starded = 1;
 8002870:	4bd1      	ldr	r3, [pc, #836]	@ (8002bb8 <bmi088_update+0x760>)
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
			}

			BMI->datas.last_time = BMI->datas.current_time;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	66da      	str	r2, [r3, #108]	@ 0x6c
			BMI->flags.isAccelUpdated = 0;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	705a      	strb	r2, [r3, #1]
			is_time_updated = 1;
 8002884:	4bcd      	ldr	r3, [pc, #820]	@ (8002bbc <bmi088_update+0x764>)
 8002886:	2201      	movs	r2, #1
 8002888:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->flags.isGyroUpdated && is_time_updated)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 81b1 	beq.w	8002bf6 <bmi088_update+0x79e>
 8002894:	4bc9      	ldr	r3, [pc, #804]	@ (8002bbc <bmi088_update+0x764>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 81ac 	beq.w	8002bf6 <bmi088_update+0x79e>
		{
			if(is_starded){
 800289e:	4bc6      	ldr	r3, [pc, #792]	@ (8002bb8 <bmi088_update+0x760>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 819f 	beq.w	8002be6 <bmi088_update+0x78e>
				uint8_t	raw_gyro[6];
				ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_gyro, 6, 10);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68d8      	ldr	r0, [r3, #12]
 80028ac:	230a      	movs	r3, #10
 80028ae:	9302      	str	r3, [sp, #8]
 80028b0:	2306      	movs	r3, #6
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	f107 0308 	add.w	r3, r7, #8
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2301      	movs	r3, #1
 80028bc:	2202      	movs	r2, #2
 80028be:	21d0      	movs	r1, #208	@ 0xd0
 80028c0:	f007 f9d2 	bl	8009c68 <HAL_I2C_Mem_Read>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

				if(ret_val)
 80028ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 8190 	bne.w	8002bf4 <bmi088_update+0x79c>
					return;

				int16_t gyro_x_16 = (raw_gyro[1] << 8) | raw_gyro[0];
 80028d4:	7a7b      	ldrb	r3, [r7, #9]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	b21a      	sxth	r2, r3
 80028da:	7a3b      	ldrb	r3, [r7, #8]
 80028dc:	b21b      	sxth	r3, r3
 80028de:	4313      	orrs	r3, r2
 80028e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
				int16_t gyro_y_16 = (raw_gyro[3] << 8) | raw_gyro[2];
 80028e2:	7afb      	ldrb	r3, [r7, #11]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	b21a      	sxth	r2, r3
 80028e8:	7abb      	ldrb	r3, [r7, #10]
 80028ea:	b21b      	sxth	r3, r3
 80028ec:	4313      	orrs	r3, r2
 80028ee:	847b      	strh	r3, [r7, #34]	@ 0x22
				int16_t gyro_z_16 = (raw_gyro[5] << 8) | raw_gyro[4];
 80028f0:	7b7b      	ldrb	r3, [r7, #13]
 80028f2:	021b      	lsls	r3, r3, #8
 80028f4:	b21a      	sxth	r2, r3
 80028f6:	7b3b      	ldrb	r3, [r7, #12]
 80028f8:	b21b      	sxth	r3, r3
 80028fa:	4313      	orrs	r3, r2
 80028fc:	843b      	strh	r3, [r7, #32]

				BMI->datas.gyro_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[0]) * DEG_TO_RAD;
 80028fe:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002902:	ee07 3a90 	vmov	s15, r3
 8002906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800290a:	ee17 0a90 	vmov	r0, s15
 800290e:	f7fd fe3b 	bl	8000588 <__aeabi_f2d>
 8002912:	a3a5      	add	r3, pc, #660	@ (adr r3, 8002ba8 <bmi088_update+0x750>)
 8002914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002918:	f7fd ffb8 	bl	800088c <__aeabi_ddiv>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4614      	mov	r4, r2
 8002922:	461d      	mov	r5, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7a9b      	ldrb	r3, [r3, #10]
 8002928:	461a      	mov	r2, r3
 800292a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800292e:	4113      	asrs	r3, r2
 8002930:	ee07 3a90 	vmov	s15, r3
 8002934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002938:	ee17 0a90 	vmov	r0, s15
 800293c:	f7fd fe24 	bl	8000588 <__aeabi_f2d>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4620      	mov	r0, r4
 8002946:	4629      	mov	r1, r5
 8002948:	f7fd fe76 	bl	8000638 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4614      	mov	r4, r2
 8002952:	461d      	mov	r5, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd fe14 	bl	8000588 <__aeabi_f2d>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4620      	mov	r0, r4
 8002966:	4629      	mov	r1, r5
 8002968:	f7fd fcae 	bl	80002c8 <__aeabi_dsub>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	a38e      	add	r3, pc, #568	@ (adr r3, 8002bb0 <bmi088_update+0x758>)
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f7fd fe5d 	bl	8000638 <__aeabi_dmul>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	f7fe f92f 	bl	8000be8 <__aeabi_d2f>
 800298a:	4602      	mov	r2, r0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	619a      	str	r2, [r3, #24]
				BMI->datas.gyro_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[1]) * DEG_TO_RAD;
 8002990:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002994:	ee07 3a90 	vmov	s15, r3
 8002998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800299c:	ee17 0a90 	vmov	r0, s15
 80029a0:	f7fd fdf2 	bl	8000588 <__aeabi_f2d>
 80029a4:	a380      	add	r3, pc, #512	@ (adr r3, 8002ba8 <bmi088_update+0x750>)
 80029a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029aa:	f7fd ff6f 	bl	800088c <__aeabi_ddiv>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4614      	mov	r4, r2
 80029b4:	461d      	mov	r5, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	7a9b      	ldrb	r3, [r3, #10]
 80029ba:	461a      	mov	r2, r3
 80029bc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80029c0:	4113      	asrs	r3, r2
 80029c2:	ee07 3a90 	vmov	s15, r3
 80029c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ca:	ee17 0a90 	vmov	r0, s15
 80029ce:	f7fd fddb 	bl	8000588 <__aeabi_f2d>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4620      	mov	r0, r4
 80029d8:	4629      	mov	r1, r5
 80029da:	f7fd fe2d 	bl	8000638 <__aeabi_dmul>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4614      	mov	r4, r2
 80029e4:	461d      	mov	r5, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fd fdcb 	bl	8000588 <__aeabi_f2d>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4620      	mov	r0, r4
 80029f8:	4629      	mov	r1, r5
 80029fa:	f7fd fc65 	bl	80002c8 <__aeabi_dsub>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	a36a      	add	r3, pc, #424	@ (adr r3, 8002bb0 <bmi088_update+0x758>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f7fd fe14 	bl	8000638 <__aeabi_dmul>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4610      	mov	r0, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	f7fe f8e6 	bl	8000be8 <__aeabi_d2f>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	61da      	str	r2, [r3, #28]
				BMI->datas.gyro_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[2]) * DEG_TO_RAD;
 8002a22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a2e:	ee17 0a90 	vmov	r0, s15
 8002a32:	f7fd fda9 	bl	8000588 <__aeabi_f2d>
 8002a36:	a35c      	add	r3, pc, #368	@ (adr r3, 8002ba8 <bmi088_update+0x750>)
 8002a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3c:	f7fd ff26 	bl	800088c <__aeabi_ddiv>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4614      	mov	r4, r2
 8002a46:	461d      	mov	r5, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7a9b      	ldrb	r3, [r3, #10]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002a52:	4113      	asrs	r3, r2
 8002a54:	ee07 3a90 	vmov	s15, r3
 8002a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a5c:	ee17 0a90 	vmov	r0, s15
 8002a60:	f7fd fd92 	bl	8000588 <__aeabi_f2d>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4620      	mov	r0, r4
 8002a6a:	4629      	mov	r1, r5
 8002a6c:	f7fd fde4 	bl	8000638 <__aeabi_dmul>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4614      	mov	r4, r2
 8002a76:	461d      	mov	r5, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fd82 	bl	8000588 <__aeabi_f2d>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4620      	mov	r0, r4
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	f7fd fc1c 	bl	80002c8 <__aeabi_dsub>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	a345      	add	r3, pc, #276	@ (adr r3, 8002bb0 <bmi088_update+0x758>)
 8002a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9e:	f7fd fdcb 	bl	8000638 <__aeabi_dmul>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f7fe f89d 	bl	8000be8 <__aeabi_d2f>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	621a      	str	r2, [r3, #32]

				Orientation_Update(BMI->datas.gyro_y, -BMI->datas.gyro_x, BMI->datas.gyro_z,BMI->datas.acc_y,-BMI->datas.acc_x,BMI->datas.acc_z, BMI->datas.delta_time);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	ed93 7a07 	vldr	s14, [r3, #28]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ac0:	eef1 6a67 	vneg.f32	s13, s15
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	ed93 6a08 	vldr	s12, [r3, #32]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	edd3 5a17 	vldr	s11, [r3, #92]	@ 0x5c
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002ad6:	eef1 7a67 	vneg.f32	s15, s15
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	ed93 5a18 	vldr	s10, [r3, #96]	@ 0x60
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	edd3 4a1c 	vldr	s9, [r3, #112]	@ 0x70
 8002ae6:	eeb0 3a64 	vmov.f32	s6, s9
 8002aea:	eef0 2a45 	vmov.f32	s5, s10
 8002aee:	eeb0 2a67 	vmov.f32	s4, s15
 8002af2:	eef0 1a65 	vmov.f32	s3, s11
 8002af6:	eeb0 1a46 	vmov.f32	s2, s12
 8002afa:	eef0 0a66 	vmov.f32	s1, s13
 8002afe:	eeb0 0a47 	vmov.f32	s0, s14
 8002b02:	f003 f885 	bl	8005c10 <Orientation_Update>
				BMI->datas.yaw = quaternionToYaw();
 8002b06:	f003 fe1f 	bl	8006748 <quaternionToYaw>
 8002b0a:	eef0 7a40 	vmov.f32	s15, s0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				BMI->datas.pitch = quaternionToPitch();
 8002b14:	f003 fe76 	bl	8006804 <quaternionToPitch>
 8002b18:	eef0 7a40 	vmov.f32	s15, s0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
				BMI->datas.roll = quaternionToRoll();
 8002b22:	f003 fea7 	bl	8006874 <quaternionToRoll>
 8002b26:	eef0 7a40 	vmov.f32	s15, s0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
				BMI->datas.theta = quaternionToThetaZ();
 8002b30:	f003 fce2 	bl	80064f8 <quaternionToThetaZ>
 8002b34:	eef0 7a40 	vmov.f32	s15, s0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				BMI->datas.angle_x = quaternionToYawDegree1();
 8002b3e:	f002 fe53 	bl	80057e8 <quaternionToYawDegree1>
 8002b42:	eef0 7a40 	vmov.f32	s15, s0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
				BMI->datas.angle_y = quaternionToPitchDegree();
 8002b4c:	f003 fd64 	bl	8006618 <quaternionToPitchDegree>
 8002b50:	eef0 7a40 	vmov.f32	s15, s0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
				BMI->datas.angle_z = quaternionToRollDegree();
 8002b5a:	f003 fdad 	bl	80066b8 <quaternionToRollDegree>
 8002b5e:	eef0 7a40 	vmov.f32	s15, s0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

				ekf_predict(BMI->datas.gyro_y,-BMI->datas.gyro_x,BMI->datas.gyro_z,BMI->datas.delta_time);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b74:	eef1 7a67 	vneg.f32	s15, s15
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	edd3 6a08 	vldr	s13, [r3, #32]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	ed93 6a1c 	vldr	s12, [r3, #112]	@ 0x70
 8002b84:	eef0 1a46 	vmov.f32	s3, s12
 8002b88:	eeb0 1a66 	vmov.f32	s2, s13
 8002b8c:	eef0 0a67 	vmov.f32	s1, s15
 8002b90:	eeb0 0a47 	vmov.f32	s0, s14
 8002b94:	f002 fc0e 	bl	80053b4 <ekf_predict>
				BMI->datas.yaw1 = quaternionToYaw1();
 8002b98:	f002 fd32 	bl	8005600 <quaternionToYaw1>
 8002b9c:	eef0 7a40 	vmov.f32	s15, s0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	e00d      	b.n	8002bc0 <bmi088_update+0x768>
 8002ba4:	f3af 8000 	nop.w
 8002ba8:	00000000 	.word	0x00000000
 8002bac:	40dfffc0 	.word	0x40dfffc0
 8002bb0:	a0000000 	.word	0xa0000000
 8002bb4:	3f91df46 	.word	0x3f91df46
 8002bb8:	2000024e 	.word	0x2000024e
 8002bbc:	2000024d 	.word	0x2000024d
 8002bc0:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
				BMI->datas.pitch1 = quaternionToPitch1();
 8002bc4:	f002 fd7a 	bl	80056bc <quaternionToPitch1>
 8002bc8:	eef0 7a40 	vmov.f32	s15, s0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
				BMI->datas.roll1 = quaternionToRoll1();
 8002bd2:	f002 fdab 	bl	800572c <quaternionToRoll1>
 8002bd6:	eef0 7a40 	vmov.f32	s15, s0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
				is_gyro_renewed = 1;
 8002be0:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <bmi088_update+0x7a4>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
			}
			BMI->flags.isGyroUpdated = 0;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
			is_time_updated = 0;
 8002bec:	4b04      	ldr	r3, [pc, #16]	@ (8002c00 <bmi088_update+0x7a8>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	e000      	b.n	8002bf6 <bmi088_update+0x79e>
					return;
 8002bf4:	bf00      	nop
		}
}
 8002bf6:	3738      	adds	r7, #56	@ 0x38
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8002bfc:	2000024f 	.word	0x2000024f
 8002c00:	2000024d 	.word	0x2000024d

08002c04 <bmi088_set_accel_INT>:


void bmi088_set_accel_INT(bmi088_struct_t* BMI)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelUpdated = 1;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	705a      	strb	r2, [r3, #1]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <bmi088_set_gyro_INT>:

void bmi088_set_gyro_INT(bmi088_struct_t* BMI)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroUpdated = 1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <get_offset>:
	HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void get_offset(bmi088_struct_t* BMI)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	int offsetCounter = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		bmi088_update(BMI);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff fc07 	bl	8002458 <bmi088_update>
		if(is_gyro_renewed == 1)
 8002c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d08 <get_offset+0xd0>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d1f8      	bne.n	8002c44 <get_offset+0xc>
		{
			if(offsetCounter < 1000)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c58:	da2d      	bge.n	8002cb6 <get_offset+0x7e>
			{
				BMI->device_config.offsets->gyro_offset[0] += BMI->datas.gyro_x;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	ed93 7a00 	vldr	s14, [r3]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c70:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] += BMI->datas.gyro_y;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8a:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] += BMI->datas.gyro_z;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca4:	edc3 7a02 	vstr	s15, [r3, #8]
				offsetCounter++;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3301      	adds	r3, #1
 8002cac:	60fb      	str	r3, [r7, #12]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
				//quaternionSet_zero();
				break;
				//Error_Handler();
			}
			is_gyro_renewed = 0;
 8002cae:	4b16      	ldr	r3, [pc, #88]	@ (8002d08 <get_offset+0xd0>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
 8002cb4:	e7c6      	b.n	8002c44 <get_offset+0xc>
				BMI->device_config.offsets->gyro_offset[0] /= 1000.0;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	ed93 7a00 	vldr	s14, [r3]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002d0c <get_offset+0xd4>
 8002cc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cca:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] /= 1000.0;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	ed93 7a01 	vldr	s14, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002d0c <get_offset+0xd4>
 8002cde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ce2:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	ed93 7a02 	vldr	s14, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002d0c <get_offset+0xd4>
 8002cf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cfa:	edc3 7a02 	vstr	s15, [r3, #8]
				break;
 8002cfe:	bf00      	nop
		}

	}
}
 8002d00:	bf00      	nop
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	2000024f 	.word	0x2000024f
 8002d0c:	447a0000 	.word	0x447a0000

08002d10 <flight_algorithm_init>:

/**
 * @brief Initialize the flight algorithm
 */
void flight_algorithm_init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
    flight_algorithm_reset();
 8002d14:	f000 f802 	bl	8002d1c <flight_algorithm_reset>
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <flight_algorithm_reset>:

/**
 * @brief Reset flight algorithm to initial state
 */
void flight_algorithm_reset(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
    current_phase = PHASE_IDLE;
 8002d20:	4b18      	ldr	r3, [pc, #96]	@ (8002d84 <flight_algorithm_reset+0x68>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
    is_rising = 0;
 8002d26:	4b18      	ldr	r3, [pc, #96]	@ (8002d88 <flight_algorithm_reset+0x6c>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
    is_stabilized = 1;
 8002d2c:	4b17      	ldr	r3, [pc, #92]	@ (8002d8c <flight_algorithm_reset+0x70>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
    is_armed = 0;
 8002d32:	4b17      	ldr	r3, [pc, #92]	@ (8002d90 <flight_algorithm_reset+0x74>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
    drogue_deployed = 0;
 8002d38:	4b16      	ldr	r3, [pc, #88]	@ (8002d94 <flight_algorithm_reset+0x78>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
    main_deployed = 0;
 8002d3e:	4b16      	ldr	r3, [pc, #88]	@ (8002d98 <flight_algorithm_reset+0x7c>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
    altitude_decrease_count = 0;
 8002d44:	4b15      	ldr	r3, [pc, #84]	@ (8002d9c <flight_algorithm_reset+0x80>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]
    status_bits = 0;
 8002d4a:	4b15      	ldr	r3, [pc, #84]	@ (8002da0 <flight_algorithm_reset+0x84>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	801a      	strh	r2, [r3, #0]
    prev_altitude = 0.0f;
 8002d50:	4b14      	ldr	r3, [pc, #80]	@ (8002da4 <flight_algorithm_reset+0x88>)
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
    flight_start_time = 0;
 8002d58:	4b13      	ldr	r3, [pc, #76]	@ (8002da8 <flight_algorithm_reset+0x8c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
    deployed_velocity = 1;
 8002d5e:	4b13      	ldr	r3, [pc, #76]	@ (8002dac <flight_algorithm_reset+0x90>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
    deployed_angle = 1;
 8002d64:	4b12      	ldr	r3, [pc, #72]	@ (8002db0 <flight_algorithm_reset+0x94>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
    apogee_counter = 0;
 8002d6a:	4b12      	ldr	r3, [pc, #72]	@ (8002db4 <flight_algorithm_reset+0x98>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
    prev_velocity = 0;
 8002d70:	4b11      	ldr	r3, [pc, #68]	@ (8002db8 <flight_algorithm_reset+0x9c>)
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000254 	.word	0x20000254
 8002d88:	20000255 	.word	0x20000255
 8002d8c:	20000014 	.word	0x20000014
 8002d90:	20000256 	.word	0x20000256
 8002d94:	20000257 	.word	0x20000257
 8002d98:	20000258 	.word	0x20000258
 8002d9c:	20000268 	.word	0x20000268
 8002da0:	20000270 	.word	0x20000270
 8002da4:	2000026c 	.word	0x2000026c
 8002da8:	20000264 	.word	0x20000264
 8002dac:	20000016 	.word	0x20000016
 8002db0:	20000015 	.word	0x20000015
 8002db4:	2000025c 	.word	0x2000025c
 8002db8:	20000260 	.word	0x20000260

08002dbc <flight_algorithm_update>:

/**
 * @brief Update flight algorithm with sensor data
 */
void flight_algorithm_update(BME_280_t* bme, bmi088_struct_t* bmi, sensor_fusion_t* sensor_fusion)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
    // Calculate key metrics
    float total_acceleration = calculate_total_acceleration(bmi);
 8002dc8:	68b8      	ldr	r0, [r7, #8]
 8002dca:	f000 f935 	bl	8003038 <calculate_total_acceleration>
 8002dce:	ed87 0a05 	vstr	s0, [r7, #20]

    // Status bits are cumulative - once set they remain set
    // Each phase builds on the previous phase's status bits

    // State machine for flight phases
    switch (current_phase) {
 8002dd2:	4b88      	ldr	r3, [pc, #544]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	f200 8102 	bhi.w	8002fe0 <flight_algorithm_update+0x224>
 8002ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8002de4 <flight_algorithm_update+0x28>)
 8002dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de2:	bf00      	nop
 8002de4:	08002df9 	.word	0x08002df9
 8002de8:	08002e35 	.word	0x08002e35
 8002dec:	08002e67 	.word	0x08002e67
 8002df0:	08002fe1 	.word	0x08002fe1
 8002df4:	08002fe1 	.word	0x08002fe1
        case PHASE_IDLE:
            // Detect launch using acceleration threshold
            if (total_acceleration > launch_accel_threshold) {
 8002df8:	4b7f      	ldr	r3, [pc, #508]	@ (8002ff8 <flight_algorithm_update+0x23c>)
 8002dfa:	edd3 7a00 	vldr	s15, [r3]
 8002dfe:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0a:	dc00      	bgt.n	8002e0e <flight_algorithm_update+0x52>
                current_phase = PHASE_BOOST;
                is_rising = 1;
                flight_start_time = HAL_GetTick();
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
            }
            break;
 8002e0c:	e0e8      	b.n	8002fe0 <flight_algorithm_update+0x224>
                current_phase = PHASE_BOOST;
 8002e0e:	4b79      	ldr	r3, [pc, #484]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]
                is_rising = 1;
 8002e14:	4b79      	ldr	r3, [pc, #484]	@ (8002ffc <flight_algorithm_update+0x240>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
                flight_start_time = HAL_GetTick();
 8002e1a:	f005 f849 	bl	8007eb0 <HAL_GetTick>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4a77      	ldr	r2, [pc, #476]	@ (8003000 <flight_algorithm_update+0x244>)
 8002e22:	6013      	str	r3, [r2, #0]
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
 8002e24:	4b77      	ldr	r3, [pc, #476]	@ (8003004 <flight_algorithm_update+0x248>)
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	4b75      	ldr	r3, [pc, #468]	@ (8003004 <flight_algorithm_update+0x248>)
 8002e30:	801a      	strh	r2, [r3, #0]
            break;
 8002e32:	e0d5      	b.n	8002fe0 <flight_algorithm_update+0x224>

        case PHASE_BOOST:
            // After boost phase (typically 3-5 seconds)
            if (HAL_GetTick() - flight_start_time > 7000) {
 8002e34:	f005 f83c 	bl	8007eb0 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b71      	ldr	r3, [pc, #452]	@ (8003000 <flight_algorithm_update+0x244>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002e44:	4293      	cmp	r3, r2
 8002e46:	f240 80c8 	bls.w	8002fda <flight_algorithm_update+0x21e>
                current_phase = PHASE_COAST;
 8002e4a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	701a      	strb	r2, [r3, #0]
                is_stabilized = 1;
 8002e50:	4b6d      	ldr	r3, [pc, #436]	@ (8003008 <flight_algorithm_update+0x24c>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0002; // Set Bit 1: Motor burn prevention period ended
 8002e56:	4b6b      	ldr	r3, [pc, #428]	@ (8003004 <flight_algorithm_update+0x248>)
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	f043 0302 	orr.w	r3, r3, #2
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	4b68      	ldr	r3, [pc, #416]	@ (8003004 <flight_algorithm_update+0x248>)
 8002e62:	801a      	strh	r2, [r3, #0]
            }
            break;
 8002e64:	e0b9      	b.n	8002fda <flight_algorithm_update+0x21e>

        case PHASE_COAST:
            // Check minimum arming altitude
            if (bme->altitude > min_arming_altitude) {
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	ed93 7a08 	vldr	s14, [r3, #32]
 8002e6c:	4b67      	ldr	r3, [pc, #412]	@ (800300c <flight_algorithm_update+0x250>)
 8002e6e:	edd3 7a00 	vldr	s15, [r3]
 8002e72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7a:	dd09      	ble.n	8002e90 <flight_algorithm_update+0xd4>
                is_armed = 1;
 8002e7c:	4b64      	ldr	r3, [pc, #400]	@ (8003010 <flight_algorithm_update+0x254>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0004; // Set Bit 2: Minimum altitude threshold exceeded
 8002e82:	4b60      	ldr	r3, [pc, #384]	@ (8003004 <flight_algorithm_update+0x248>)
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	f043 0304 	orr.w	r3, r3, #4
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	4b5d      	ldr	r3, [pc, #372]	@ (8003004 <flight_algorithm_update+0x248>)
 8002e8e:	801a      	strh	r2, [r3, #0]
            }

            if (sensor_fusion->filtered_altitude > min_arming_altitude) {
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	ed93 7a00 	vldr	s14, [r3]
 8002e96:	4b5d      	ldr	r3, [pc, #372]	@ (800300c <flight_algorithm_update+0x250>)
 8002e98:	edd3 7a00 	vldr	s15, [r3]
 8002e9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea4:	dd09      	ble.n	8002eba <flight_algorithm_update+0xfe>
                                        is_armed = 1;
 8002ea6:	4b5a      	ldr	r3, [pc, #360]	@ (8003010 <flight_algorithm_update+0x254>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
                                        status_bits |= 0x0008; // Set Bit 2: Minimum altitude threshold exceeded
 8002eac:	4b55      	ldr	r3, [pc, #340]	@ (8003004 <flight_algorithm_update+0x248>)
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	f043 0308 	orr.w	r3, r3, #8
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	4b53      	ldr	r3, [pc, #332]	@ (8003004 <flight_algorithm_update+0x248>)
 8002eb8:	801a      	strh	r2, [r3, #0]
            }

            // Check if angle exceeds threshold
            if (is_armed && (fabs(bmi->datas.angle_y) > max_angle_threshold) && deployed_angle) {
 8002eba:	4b55      	ldr	r3, [pc, #340]	@ (8003010 <flight_algorithm_update+0x254>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d01f      	beq.n	8002f02 <flight_algorithm_update+0x146>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002ec8:	eeb0 7ae7 	vabs.f32	s14, s15
 8002ecc:	4b51      	ldr	r3, [pc, #324]	@ (8003014 <flight_algorithm_update+0x258>)
 8002ece:	edd3 7a00 	vldr	s15, [r3]
 8002ed2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eda:	dd12      	ble.n	8002f02 <flight_algorithm_update+0x146>
 8002edc:	4b4e      	ldr	r3, [pc, #312]	@ (8003018 <flight_algorithm_update+0x25c>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00e      	beq.n	8002f02 <flight_algorithm_update+0x146>
                drogue_deployed = 1;
 8002ee4:	4b4d      	ldr	r3, [pc, #308]	@ (800301c <flight_algorithm_update+0x260>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	701a      	strb	r2, [r3, #0]
                deployed_angle = 0;
 8002eea:	4b4b      	ldr	r3, [pc, #300]	@ (8003018 <flight_algorithm_update+0x25c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0008; // Set Bit 3: Rocket body angle exceeds threshold
 8002ef0:	4b44      	ldr	r3, [pc, #272]	@ (8003004 <flight_algorithm_update+0x248>)
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	f043 0308 	orr.w	r3, r3, #8
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	4b42      	ldr	r3, [pc, #264]	@ (8003004 <flight_algorithm_update+0x248>)
 8002efc:	801a      	strh	r2, [r3, #0]
                deploy_drogue_parachute();
 8002efe:	f000 f905 	bl	800310c <deploy_drogue_parachute>
                drogue_deployed = 1;
                deployed_velocity = 0;
                // deploy_drogue_parachute(); // Actual deployment command
            }*/

            if (is_armed && sensor_fusion->velocity < 0.0f && sensor_fusion->velocity < prev_velocity && deployed_velocity) {
 8002f02:	4b43      	ldr	r3, [pc, #268]	@ (8003010 <flight_algorithm_update+0x254>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d036      	beq.n	8002f78 <flight_algorithm_update+0x1bc>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f18:	d52e      	bpl.n	8002f78 <flight_algorithm_update+0x1bc>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f20:	4b3f      	ldr	r3, [pc, #252]	@ (8003020 <flight_algorithm_update+0x264>)
 8002f22:	edd3 7a00 	vldr	s15, [r3]
 8002f26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2e:	d523      	bpl.n	8002f78 <flight_algorithm_update+0x1bc>
 8002f30:	4b3c      	ldr	r3, [pc, #240]	@ (8003024 <flight_algorithm_update+0x268>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d01f      	beq.n	8002f78 <flight_algorithm_update+0x1bc>
                apogee_counter++;
 8002f38:	4b3b      	ldr	r3, [pc, #236]	@ (8003028 <flight_algorithm_update+0x26c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	4a3a      	ldr	r2, [pc, #232]	@ (8003028 <flight_algorithm_update+0x26c>)
 8002f40:	6013      	str	r3, [r2, #0]
                if (apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8002f42:	4b39      	ldr	r3, [pc, #228]	@ (8003028 <flight_algorithm_update+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	dd19      	ble.n	8002f7e <flight_algorithm_update+0x1c2>
                    status_bits |= 0x0010; // Set Bit 4: Rocket altitude started decreasing
 8002f4a:	4b2e      	ldr	r3, [pc, #184]	@ (8003004 <flight_algorithm_update+0x248>)
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	f043 0310 	orr.w	r3, r3, #16
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	4b2b      	ldr	r3, [pc, #172]	@ (8003004 <flight_algorithm_update+0x248>)
 8002f56:	801a      	strh	r2, [r3, #0]
                    status_bits |= 0x0020; // Set Bit 5: Drag parachute deployment command generated
 8002f58:	4b2a      	ldr	r3, [pc, #168]	@ (8003004 <flight_algorithm_update+0x248>)
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	f043 0320 	orr.w	r3, r3, #32
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	4b28      	ldr	r3, [pc, #160]	@ (8003004 <flight_algorithm_update+0x248>)
 8002f64:	801a      	strh	r2, [r3, #0]
                    drogue_deployed = 1;
 8002f66:	4b2d      	ldr	r3, [pc, #180]	@ (800301c <flight_algorithm_update+0x260>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
                    deployed_velocity = 0;
 8002f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003024 <flight_algorithm_update+0x268>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
                    deploy_drogue_parachute();
 8002f72:	f000 f8cb 	bl	800310c <deploy_drogue_parachute>
                if (apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8002f76:	e002      	b.n	8002f7e <flight_algorithm_update+0x1c2>
                }
            } else {
                apogee_counter = 0;
 8002f78:	4b2b      	ldr	r3, [pc, #172]	@ (8003028 <flight_algorithm_update+0x26c>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
            }
            prev_velocity = sensor_fusion->velocity;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4a27      	ldr	r2, [pc, #156]	@ (8003020 <flight_algorithm_update+0x264>)
 8002f84:	6013      	str	r3, [r2, #0]

            // Deploy main parachute at designated altitude
            if (drogue_deployed && bme->altitude < main_chute_altitude) {
 8002f86:	4b25      	ldr	r3, [pc, #148]	@ (800301c <flight_algorithm_update+0x260>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d027      	beq.n	8002fde <flight_algorithm_update+0x222>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	ed93 7a08 	vldr	s14, [r3, #32]
 8002f94:	4b25      	ldr	r3, [pc, #148]	@ (800302c <flight_algorithm_update+0x270>)
 8002f96:	edd3 7a00 	vldr	s15, [r3]
 8002f9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa2:	d400      	bmi.n	8002fa6 <flight_algorithm_update+0x1ea>
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
                main_deployed = 1;
                drogue_deployed = 0;
                deploy_main_parachute();
            }
            break;
 8002fa4:	e01b      	b.n	8002fde <flight_algorithm_update+0x222>
                current_phase = PHASE_MAIN_DESCENT;
 8002fa6:	4b13      	ldr	r3, [pc, #76]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002fa8:	2203      	movs	r2, #3
 8002faa:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0040; // Set Bit 6: Rocket altitude below specified altitude
 8002fac:	4b15      	ldr	r3, [pc, #84]	@ (8003004 <flight_algorithm_update+0x248>)
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	4b13      	ldr	r3, [pc, #76]	@ (8003004 <flight_algorithm_update+0x248>)
 8002fb8:	801a      	strh	r2, [r3, #0]
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
 8002fba:	4b12      	ldr	r3, [pc, #72]	@ (8003004 <flight_algorithm_update+0x248>)
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003004 <flight_algorithm_update+0x248>)
 8002fc6:	801a      	strh	r2, [r3, #0]
                main_deployed = 1;
 8002fc8:	4b19      	ldr	r3, [pc, #100]	@ (8003030 <flight_algorithm_update+0x274>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	701a      	strb	r2, [r3, #0]
                drogue_deployed = 0;
 8002fce:	4b13      	ldr	r3, [pc, #76]	@ (800301c <flight_algorithm_update+0x260>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
                deploy_main_parachute();
 8002fd4:	f000 f8f2 	bl	80031bc <deploy_main_parachute>
            break;
 8002fd8:	e001      	b.n	8002fde <flight_algorithm_update+0x222>
            break;
 8002fda:	bf00      	nop
 8002fdc:	e000      	b.n	8002fe0 <flight_algorithm_update+0x224>
            break;
 8002fde:	bf00      	nop

        case PHASE_LANDED:
            // No additional status bits to set after landing
            break;
    }
    deploy_parachute_update();
 8002fe0:	f000 f8b0 	bl	8003144 <deploy_parachute_update>
    prev_altitude = bme->altitude;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	4a12      	ldr	r2, [pc, #72]	@ (8003034 <flight_algorithm_update+0x278>)
 8002fea:	6013      	str	r3, [r2, #0]
}
 8002fec:	bf00      	nop
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	20000254 	.word	0x20000254
 8002ff8:	20000004 	.word	0x20000004
 8002ffc:	20000255 	.word	0x20000255
 8003000:	20000264 	.word	0x20000264
 8003004:	20000270 	.word	0x20000270
 8003008:	20000014 	.word	0x20000014
 800300c:	20000008 	.word	0x20000008
 8003010:	20000256 	.word	0x20000256
 8003014:	20000010 	.word	0x20000010
 8003018:	20000015 	.word	0x20000015
 800301c:	20000257 	.word	0x20000257
 8003020:	20000260 	.word	0x20000260
 8003024:	20000016 	.word	0x20000016
 8003028:	2000025c 	.word	0x2000025c
 800302c:	2000000c 	.word	0x2000000c
 8003030:	20000258 	.word	0x20000258
 8003034:	2000026c 	.word	0x2000026c

08003038 <calculate_total_acceleration>:

/**
 * @brief Calculate total acceleration magnitude
 */
static float calculate_total_acceleration(bmi088_struct_t* bmi)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800304c:	ee27 7a27 	vmul.f32	s14, s14, s15
                 (bmi->datas.acc_y * bmi->datas.acc_y) +
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800305c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 8003060:	ee37 7a27 	vadd.f32	s14, s14, s15
                 (bmi->datas.acc_z * bmi->datas.acc_z));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8003070:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 8003074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003078:	eeb0 0a67 	vmov.f32	s0, s15
 800307c:	f00c ff26 	bl	800fecc <sqrtf>
 8003080:	eef0 7a40 	vmov.f32	s15, s0
}
 8003084:	eeb0 0a67 	vmov.f32	s0, s15
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <flight_algorithm_get_status_bits>:

/**
 * @brief Get the current status bits
 */
uint16_t flight_algorithm_get_status_bits(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
    return status_bits;
 8003094:	4b03      	ldr	r3, [pc, #12]	@ (80030a4 <flight_algorithm_get_status_bits+0x14>)
 8003096:	881b      	ldrh	r3, [r3, #0]
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	20000270 	.word	0x20000270

080030a8 <flight_algorithm_set_parameters>:
 */
void flight_algorithm_set_parameters(float launch_accel_threshold_param,
                                   float min_arming_altitude_param,
                                   float main_chute_altitude_param,
                                   float max_angle_threshold_param)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80030b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80030b6:	ed87 1a01 	vstr	s2, [r7, #4]
 80030ba:	edc7 1a00 	vstr	s3, [r7]
    launch_accel_threshold = launch_accel_threshold_param;
 80030be:	4a09      	ldr	r2, [pc, #36]	@ (80030e4 <flight_algorithm_set_parameters+0x3c>)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6013      	str	r3, [r2, #0]
    min_arming_altitude = min_arming_altitude_param;
 80030c4:	4a08      	ldr	r2, [pc, #32]	@ (80030e8 <flight_algorithm_set_parameters+0x40>)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	6013      	str	r3, [r2, #0]
    main_chute_altitude = main_chute_altitude_param;
 80030ca:	4a08      	ldr	r2, [pc, #32]	@ (80030ec <flight_algorithm_set_parameters+0x44>)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6013      	str	r3, [r2, #0]
    max_angle_threshold = max_angle_threshold_param;
 80030d0:	4a07      	ldr	r2, [pc, #28]	@ (80030f0 <flight_algorithm_set_parameters+0x48>)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	6013      	str	r3, [r2, #0]
}
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	20000004 	.word	0x20000004
 80030e8:	20000008 	.word	0x20000008
 80030ec:	2000000c 	.word	0x2000000c
 80030f0:	20000010 	.word	0x20000010

080030f4 <flight_algorithm_get_start_time>:

uint32_t flight_algorithm_get_start_time(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
    return flight_start_time;
 80030f8:	4b03      	ldr	r3, [pc, #12]	@ (8003108 <flight_algorithm_get_start_time+0x14>)
 80030fa:	681b      	ldr	r3, [r3, #0]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000264 	.word	0x20000264

0800310c <deploy_drogue_parachute>:

void deploy_drogue_parachute(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
    if (!drogue_pulse_active) {
 8003110:	4b09      	ldr	r3, [pc, #36]	@ (8003138 <deploy_drogue_parachute+0x2c>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10c      	bne.n	8003132 <deploy_drogue_parachute+0x26>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8003118:	2201      	movs	r2, #1
 800311a:	2140      	movs	r1, #64	@ 0x40
 800311c:	4807      	ldr	r0, [pc, #28]	@ (800313c <deploy_drogue_parachute+0x30>)
 800311e:	f006 fb03 	bl	8009728 <HAL_GPIO_WritePin>
        drogue_pulse_start_time = HAL_GetTick();
 8003122:	f004 fec5 	bl	8007eb0 <HAL_GetTick>
 8003126:	4603      	mov	r3, r0
 8003128:	4a05      	ldr	r2, [pc, #20]	@ (8003140 <deploy_drogue_parachute+0x34>)
 800312a:	6013      	str	r3, [r2, #0]
        drogue_pulse_active = 1;
 800312c:	4b02      	ldr	r3, [pc, #8]	@ (8003138 <deploy_drogue_parachute+0x2c>)
 800312e:	2201      	movs	r2, #1
 8003130:	701a      	strb	r2, [r3, #0]
    }
}
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20000272 	.word	0x20000272
 800313c:	40020800 	.word	0x40020800
 8003140:	20000274 	.word	0x20000274

08003144 <deploy_parachute_update>:

void deploy_parachute_update(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
    if (drogue_pulse_active && (HAL_GetTick() - drogue_pulse_start_time >= 1000)) {
 8003148:	4b16      	ldr	r3, [pc, #88]	@ (80031a4 <deploy_parachute_update+0x60>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d010      	beq.n	8003172 <deploy_parachute_update+0x2e>
 8003150:	f004 feae 	bl	8007eb0 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	4b14      	ldr	r3, [pc, #80]	@ (80031a8 <deploy_parachute_update+0x64>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003160:	d307      	bcc.n	8003172 <deploy_parachute_update+0x2e>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8003162:	2200      	movs	r2, #0
 8003164:	2140      	movs	r1, #64	@ 0x40
 8003166:	4811      	ldr	r0, [pc, #68]	@ (80031ac <deploy_parachute_update+0x68>)
 8003168:	f006 fade 	bl	8009728 <HAL_GPIO_WritePin>
        drogue_pulse_active = 0;
 800316c:	4b0d      	ldr	r3, [pc, #52]	@ (80031a4 <deploy_parachute_update+0x60>)
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
    }
    if (main_pulse_active && (HAL_GetTick() - main_pulse_start_time >= 1000)) {
 8003172:	4b0f      	ldr	r3, [pc, #60]	@ (80031b0 <deploy_parachute_update+0x6c>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d011      	beq.n	800319e <deploy_parachute_update+0x5a>
 800317a:	f004 fe99 	bl	8007eb0 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	4b0c      	ldr	r3, [pc, #48]	@ (80031b4 <deploy_parachute_update+0x70>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800318a:	d308      	bcc.n	800319e <deploy_parachute_update+0x5a>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800318c:	2200      	movs	r2, #0
 800318e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003192:	4809      	ldr	r0, [pc, #36]	@ (80031b8 <deploy_parachute_update+0x74>)
 8003194:	f006 fac8 	bl	8009728 <HAL_GPIO_WritePin>
        main_pulse_active = 0;
 8003198:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <deploy_parachute_update+0x6c>)
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
    }
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000272 	.word	0x20000272
 80031a8:	20000274 	.word	0x20000274
 80031ac:	40020800 	.word	0x40020800
 80031b0:	20000278 	.word	0x20000278
 80031b4:	2000027c 	.word	0x2000027c
 80031b8:	40020000 	.word	0x40020000

080031bc <deploy_main_parachute>:

void deploy_main_parachute(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
    if (!main_pulse_active) {
 80031c0:	4b09      	ldr	r3, [pc, #36]	@ (80031e8 <deploy_main_parachute+0x2c>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10d      	bne.n	80031e4 <deploy_main_parachute+0x28>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80031c8:	2201      	movs	r2, #1
 80031ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80031ce:	4807      	ldr	r0, [pc, #28]	@ (80031ec <deploy_main_parachute+0x30>)
 80031d0:	f006 faaa 	bl	8009728 <HAL_GPIO_WritePin>
        main_pulse_start_time = HAL_GetTick();
 80031d4:	f004 fe6c 	bl	8007eb0 <HAL_GetTick>
 80031d8:	4603      	mov	r3, r0
 80031da:	4a05      	ldr	r2, [pc, #20]	@ (80031f0 <deploy_main_parachute+0x34>)
 80031dc:	6013      	str	r3, [r2, #0]
        main_pulse_active = 1;
 80031de:	4b02      	ldr	r3, [pc, #8]	@ (80031e8 <deploy_main_parachute+0x2c>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	701a      	strb	r2, [r3, #0]
    }
}
 80031e4:	bf00      	nop
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20000278 	.word	0x20000278
 80031ec:	40020000 	.word	0x40020000
 80031f0:	2000027c 	.word	0x2000027c

080031f4 <KalmanFilter_Init>:

/**
 * @brief Initialize the Kalman filter
 * @param kf Pointer to Kalman filter structure
 */
void KalmanFilter_Init(KalmanFilter_t *kf) {
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
    // Initialize state vector
    kf->x[0] = 0.0f;  // Altitude
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
    kf->x[1] = 0.0f;  // Velocity
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	605a      	str	r2, [r3, #4]
    kf->x[2] = 0.0f;  // Acceleration
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	609a      	str	r2, [r3, #8]

    // Initialize covariance matrix with initial uncertainty
    for (int i = 0; i < 3; i++) {
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	e01f      	b.n	800325a <KalmanFilter_Init+0x66>
        for (int j = 0; j < 3; j++) {
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	e016      	b.n	800324e <KalmanFilter_Init+0x5a>
            kf->P[i][j] = (i == j) ? 100.0f : 0.0f;
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	429a      	cmp	r2, r3
 8003226:	d101      	bne.n	800322c <KalmanFilter_Init+0x38>
 8003228:	491b      	ldr	r1, [pc, #108]	@ (8003298 <KalmanFilter_Init+0xa4>)
 800322a:	e001      	b.n	8003230 <KalmanFilter_Init+0x3c>
 800322c:	f04f 0100 	mov.w	r1, #0
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4613      	mov	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	4413      	add	r3, r2
 800323e:	3302      	adds	r3, #2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4403      	add	r3, r0
 8003244:	3304      	adds	r3, #4
 8003246:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 3; j++) {
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	3301      	adds	r3, #1
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b02      	cmp	r3, #2
 8003252:	dde5      	ble.n	8003220 <KalmanFilter_Init+0x2c>
    for (int i = 0; i < 3; i++) {
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3301      	adds	r3, #1
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b02      	cmp	r3, #2
 800325e:	dddc      	ble.n	800321a <KalmanFilter_Init+0x26>
        }
    }

    // Set noise parameters - these can be tuned
    kf->process_noise = 0.01f;         // Process noise
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a0e      	ldr	r2, [pc, #56]	@ (800329c <KalmanFilter_Init+0xa8>)
 8003264:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->measurement_noise_alt = 0.005f;  // Altitude measurement noise
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a0d      	ldr	r2, [pc, #52]	@ (80032a0 <KalmanFilter_Init+0xac>)
 800326a:	635a      	str	r2, [r3, #52]	@ 0x34
    kf->measurement_noise_acc = 5.0f;  // Acceleration measurement noise
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a0d      	ldr	r2, [pc, #52]	@ (80032a4 <KalmanFilter_Init+0xb0>)
 8003270:	639a      	str	r2, [r3, #56]	@ 0x38

    // Initialize apogee detection variables
    kf->apogee_detected = 0;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	63da      	str	r2, [r3, #60]	@ 0x3c
    kf->apogee_counter = 0;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	641a      	str	r2, [r3, #64]	@ 0x40
    kf->prev_velocity = 0.0f;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	645a      	str	r2, [r3, #68]	@ 0x44

    // Mach transition control
    kf->in_mach_transition = 0;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800328c:	bf00      	nop
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	42c80000 	.word	0x42c80000
 800329c:	3c23d70a 	.word	0x3c23d70a
 80032a0:	3ba3d70a 	.word	0x3ba3d70a
 80032a4:	40a00000 	.word	0x40a00000

080032a8 <KalmanFilter_Update>:
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 * @param dt Time step (seconds)
 * @return Filtered altitude
 */
float KalmanFilter_Update(KalmanFilter_t *kf, float altitude, float accel, float dt) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80032b4:	edc7 0a01 	vstr	s1, [r7, #4]
 80032b8:	ed87 1a00 	vstr	s2, [r7]
    // Check for Mach transition region (approximately 300-350 m/s)
    // Skip barometer readings in this region due to pressure anomalies
    if (fabsf(kf->x[1]) > 300.0f && fabsf(kf->x[1]) < 350.0f) {
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	edd3 7a01 	vldr	s15, [r3, #4]
 80032c2:	eef0 7ae7 	vabs.f32	s15, s15
 80032c6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800332c <KalmanFilter_Update+0x84>
 80032ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d2:	dd0f      	ble.n	80032f4 <KalmanFilter_Update+0x4c>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80032da:	eef0 7ae7 	vabs.f32	s15, s15
 80032de:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003330 <KalmanFilter_Update+0x88>
 80032e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ea:	d503      	bpl.n	80032f4 <KalmanFilter_Update+0x4c>
        kf->in_mach_transition = 1;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	649a      	str	r2, [r3, #72]	@ 0x48
 80032f2:	e002      	b.n	80032fa <KalmanFilter_Update+0x52>
    } else {
        kf->in_mach_transition = 0;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // Time update (prediction)
    KalmanFilter_TimeUpdate(kf, dt);
 80032fa:	ed97 0a00 	vldr	s0, [r7]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f818 	bl	8003334 <KalmanFilter_TimeUpdate>

    // Measurement update (correction)
    KalmanFilter_MeasurementUpdate(kf, altitude, accel);
 8003304:	edd7 0a01 	vldr	s1, [r7, #4]
 8003308:	ed97 0a02 	vldr	s0, [r7, #8]
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 fa1d 	bl	800374c <KalmanFilter_MeasurementUpdate>

    // Check for apogee
    KalmanFilter_DetectApogee(kf);
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f001 f96a 	bl	80045ec <KalmanFilter_DetectApogee>

    // Return filtered altitude
    return kf->x[0];
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	ee07 3a90 	vmov	s15, r3
}
 8003320:	eeb0 0a67 	vmov.f32	s0, s15
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	43960000 	.word	0x43960000
 8003330:	43af0000 	.word	0x43af0000

08003334 <KalmanFilter_TimeUpdate>:
/**
 * @brief Time update step of Kalman filter (prediction)
 * @param kf Pointer to Kalman filter structure
 * @param dt Time step (seconds)
 */
static void KalmanFilter_TimeUpdate(KalmanFilter_t *kf, float dt) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b0b6      	sub	sp, #216	@ 0xd8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	ed87 0a00 	vstr	s0, [r7]
    float dt2 = dt * dt;
 8003340:	edd7 7a00 	vldr	s15, [r7]
 8003344:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003348:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
    float dt3 = dt2 * dt;
 800334c:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003350:	edd7 7a00 	vldr	s15, [r7]
 8003354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003358:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
    float dt4 = dt2 * dt2;
 800335c:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003360:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003364:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac

    // State transition matrix F = [1 dt dt²/2; 0 1 dt; 0 0 1]
    // State prediction: x = F*x
    float x0_new = kf->x[0] + kf->x[1] * dt + kf->x[2] * dt2 / 2.0f;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	ed93 7a00 	vldr	s14, [r3]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	edd3 6a01 	vldr	s13, [r3, #4]
 8003374:	edd7 7a00 	vldr	s15, [r7]
 8003378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800337c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	edd3 6a02 	vldr	s13, [r3, #8]
 8003386:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800338a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800338e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003392:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800339a:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
    float x1_new = kf->x[1] + kf->x[2] * dt;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	edd3 6a02 	vldr	s13, [r3, #8]
 80033aa:	edd7 7a00 	vldr	s15, [r7]
 80033ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b6:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
    float x2_new = kf->x[2];  // Acceleration assumed constant
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    kf->x[0] = x0_new;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80033c8:	601a      	str	r2, [r3, #0]
    kf->x[1] = x1_new;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80033d0:	605a      	str	r2, [r3, #4]
    kf->x[2] = x2_new;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80033d8:	609a      	str	r2, [r3, #8]

    // Process noise covariance Q
    float q = kf->process_noise;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    float Q[3][3] = {
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80033e2:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80033e6:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80033ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80033ee:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80033f2:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80033f6:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80033fa:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80033fe:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003402:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003406:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800340a:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800340e:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 8003412:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003416:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800341a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800341e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003422:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003426:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
        {dt3/2.0f * q, dt2 * q, dt * q},
 800342a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800342e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003432:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003436:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800343a:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800343e:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
        {dt3/2.0f * q, dt2 * q, dt * q},
 8003442:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003446:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800344a:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800344e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
        {dt3/2.0f * q, dt2 * q, dt * q},
 8003452:	ed97 7a00 	vldr	s14, [r7]
 8003456:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800345a:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800345e:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
        {dt2/2.0f * q, dt * q, q}
 8003462:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003466:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800346a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800346e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003472:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003476:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
        {dt2/2.0f * q, dt * q, q}
 800347a:	ed97 7a00 	vldr	s14, [r7]
 800347e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003482:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003486:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 800348a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800348e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    };

    // State transition matrix F
    float F[3][3] = {
 8003492:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003496:	657b      	str	r3, [r7, #84]	@ 0x54
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	65bb      	str	r3, [r7, #88]	@ 0x58
        {1.0f, dt, dt2/2.0f},
 800349c:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80034a0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80034a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
    float F[3][3] = {
 80034a8:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80034b2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80034b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80034c8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80034cc:	677b      	str	r3, [r7, #116]	@ 0x74
        {0.0f, 1.0f, dt},
        {0.0f, 0.0f, 1.0f}
    };

    // Temporary matrices for calculation
    float FP[3][3] = {0};
 80034ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80034d2:	2224      	movs	r2, #36	@ 0x24
 80034d4:	2100      	movs	r1, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f00a fd4d 	bl	800df76 <memset>
    float FPFT[3][3] = {0};
 80034dc:	f107 030c 	add.w	r3, r7, #12
 80034e0:	2224      	movs	r2, #36	@ 0x24
 80034e2:	2100      	movs	r1, #0
 80034e4:	4618      	mov	r0, r3
 80034e6:	f00a fd46 	bl	800df76 <memset>

    // P = F*P*F' + Q
    // Step 1: FP = F*P
    for (int i = 0; i < 3; i++) {
 80034ea:	2300      	movs	r3, #0
 80034ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80034f0:	e06a      	b.n	80035c8 <KalmanFilter_TimeUpdate+0x294>
        for (int j = 0; j < 3; j++) {
 80034f2:	2300      	movs	r3, #0
 80034f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034f8:	e05d      	b.n	80035b6 <KalmanFilter_TimeUpdate+0x282>
            FP[i][j] = 0.0f;
 80034fa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80034fe:	4613      	mov	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4413      	add	r3, r2
 8003504:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	33d8      	adds	r3, #216	@ 0xd8
 800350e:	443b      	add	r3, r7
 8003510:	3ba8      	subs	r3, #168	@ 0xa8
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 8003518:	2300      	movs	r3, #0
 800351a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800351e:	e041      	b.n	80035a4 <KalmanFilter_TimeUpdate+0x270>
                FP[i][j] += F[i][k] * kf->P[k][j];
 8003520:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003524:	4613      	mov	r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4413      	add	r3, r2
 800352a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	33d8      	adds	r3, #216	@ 0xd8
 8003534:	443b      	add	r3, r7
 8003536:	3ba8      	subs	r3, #168	@ 0xa8
 8003538:	ed93 7a00 	vldr	s14, [r3]
 800353c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003540:	4613      	mov	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	4413      	add	r3, r2
 8003546:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	33d8      	adds	r3, #216	@ 0xd8
 8003550:	443b      	add	r3, r7
 8003552:	3b84      	subs	r3, #132	@ 0x84
 8003554:	edd3 6a00 	vldr	s13, [r3]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800355e:	4613      	mov	r3, r2
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	4413      	add	r3, r2
 8003564:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003568:	4413      	add	r3, r2
 800356a:	3302      	adds	r3, #2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	3304      	adds	r3, #4
 8003572:	edd3 7a00 	vldr	s15, [r3]
 8003576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800357a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800357e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003582:	4613      	mov	r3, r2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4413      	add	r3, r2
 8003588:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	33d8      	adds	r3, #216	@ 0xd8
 8003592:	443b      	add	r3, r7
 8003594:	3ba8      	subs	r3, #168	@ 0xa8
 8003596:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 800359a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800359e:	3301      	adds	r3, #1
 80035a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	ddb9      	ble.n	8003520 <KalmanFilter_TimeUpdate+0x1ec>
        for (int j = 0; j < 3; j++) {
 80035ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80035b0:	3301      	adds	r3, #1
 80035b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	dd9d      	ble.n	80034fa <KalmanFilter_TimeUpdate+0x1c6>
    for (int i = 0; i < 3; i++) {
 80035be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035c2:	3301      	adds	r3, #1
 80035c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80035c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	dd90      	ble.n	80034f2 <KalmanFilter_TimeUpdate+0x1be>
            }
        }
    }

    // Step 2: FPFT = FP*F'
    for (int i = 0; i < 3; i++) {
 80035d0:	2300      	movs	r3, #0
 80035d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035d6:	e069      	b.n	80036ac <KalmanFilter_TimeUpdate+0x378>
        for (int j = 0; j < 3; j++) {
 80035d8:	2300      	movs	r3, #0
 80035da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035de:	e05c      	b.n	800369a <KalmanFilter_TimeUpdate+0x366>
            FPFT[i][j] = 0.0f;
 80035e0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80035e4:	4613      	mov	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	4413      	add	r3, r2
 80035ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	33d8      	adds	r3, #216	@ 0xd8
 80035f4:	443b      	add	r3, r7
 80035f6:	3bcc      	subs	r3, #204	@ 0xcc
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 80035fe:	2300      	movs	r3, #0
 8003600:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003604:	e040      	b.n	8003688 <KalmanFilter_TimeUpdate+0x354>
                FPFT[i][j] += FP[i][k] * F[j][k];  // F'[k][j] = F[j][k]
 8003606:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800360a:	4613      	mov	r3, r2
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	4413      	add	r3, r2
 8003610:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	33d8      	adds	r3, #216	@ 0xd8
 800361a:	443b      	add	r3, r7
 800361c:	3bcc      	subs	r3, #204	@ 0xcc
 800361e:	ed93 7a00 	vldr	s14, [r3]
 8003622:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003626:	4613      	mov	r3, r2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	4413      	add	r3, r2
 800362c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	33d8      	adds	r3, #216	@ 0xd8
 8003636:	443b      	add	r3, r7
 8003638:	3ba8      	subs	r3, #168	@ 0xa8
 800363a:	edd3 6a00 	vldr	s13, [r3]
 800363e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003642:	4613      	mov	r3, r2
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	4413      	add	r3, r2
 8003648:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	33d8      	adds	r3, #216	@ 0xd8
 8003652:	443b      	add	r3, r7
 8003654:	3b84      	subs	r3, #132	@ 0x84
 8003656:	edd3 7a00 	vldr	s15, [r3]
 800365a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800365e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003662:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003666:	4613      	mov	r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	4413      	add	r3, r2
 800366c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	33d8      	adds	r3, #216	@ 0xd8
 8003676:	443b      	add	r3, r7
 8003678:	3bcc      	subs	r3, #204	@ 0xcc
 800367a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 800367e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003682:	3301      	adds	r3, #1
 8003684:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003688:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800368c:	2b02      	cmp	r3, #2
 800368e:	ddba      	ble.n	8003606 <KalmanFilter_TimeUpdate+0x2d2>
        for (int j = 0; j < 3; j++) {
 8003690:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003694:	3301      	adds	r3, #1
 8003696:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800369a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800369e:	2b02      	cmp	r3, #2
 80036a0:	dd9e      	ble.n	80035e0 <KalmanFilter_TimeUpdate+0x2ac>
    for (int i = 0; i < 3; i++) {
 80036a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80036a6:	3301      	adds	r3, #1
 80036a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	dd91      	ble.n	80035d8 <KalmanFilter_TimeUpdate+0x2a4>
            }
        }
    }

    // Step 3: P = FPFT + Q
    for (int i = 0; i < 3; i++) {
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80036ba:	e03e      	b.n	800373a <KalmanFilter_TimeUpdate+0x406>
        for (int j = 0; j < 3; j++) {
 80036bc:	2300      	movs	r3, #0
 80036be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036c2:	e031      	b.n	8003728 <KalmanFilter_TimeUpdate+0x3f4>
            kf->P[i][j] = FPFT[i][j] + Q[i][j];
 80036c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80036c8:	4613      	mov	r3, r2
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	4413      	add	r3, r2
 80036ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	33d8      	adds	r3, #216	@ 0xd8
 80036d8:	443b      	add	r3, r7
 80036da:	3bcc      	subs	r3, #204	@ 0xcc
 80036dc:	ed93 7a00 	vldr	s14, [r3]
 80036e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	33d8      	adds	r3, #216	@ 0xd8
 80036f4:	443b      	add	r3, r7
 80036f6:	3b60      	subs	r3, #96	@ 0x60
 80036f8:	edd3 7a00 	vldr	s15, [r3]
 80036fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003706:	4613      	mov	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4413      	add	r3, r2
 800370c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003710:	4413      	add	r3, r2
 8003712:	3302      	adds	r3, #2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	3304      	adds	r3, #4
 800371a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 800371e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003722:	3301      	adds	r3, #1
 8003724:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003728:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800372c:	2b02      	cmp	r3, #2
 800372e:	ddc9      	ble.n	80036c4 <KalmanFilter_TimeUpdate+0x390>
    for (int i = 0; i < 3; i++) {
 8003730:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003734:	3301      	adds	r3, #1
 8003736:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800373a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800373e:	2b02      	cmp	r3, #2
 8003740:	ddbc      	ble.n	80036bc <KalmanFilter_TimeUpdate+0x388>
        }
    }
}
 8003742:	bf00      	nop
 8003744:	bf00      	nop
 8003746:	37d8      	adds	r7, #216	@ 0xd8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <KalmanFilter_MeasurementUpdate>:
 * @brief Measurement update step of Kalman filter (correction)
 * @param kf Pointer to Kalman filter structure
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 */
static void KalmanFilter_MeasurementUpdate(KalmanFilter_t *kf, float altitude, float accel) {
 800374c:	b5b0      	push	{r4, r5, r7, lr}
 800374e:	b0f6      	sub	sp, #472	@ 0x1d8
 8003750:	af00      	add	r7, sp, #0
 8003752:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003756:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800375a:	6018      	str	r0, [r3, #0]
 800375c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003760:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003764:	ed83 0a00 	vstr	s0, [r3]
 8003768:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800376c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003770:	edc3 0a00 	vstr	s1, [r3]
    // In Mach transition region, only use acceleration measurement
    if (kf->in_mach_transition) {
 8003774:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003778:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 826b 	beq.w	8003c5c <KalmanFilter_MeasurementUpdate+0x510>
        // Only use acceleration measurement
        // H = [0 0 1]
        float H[1][3] = {{0.0f, 0.0f, 1.0f}};
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003796:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800379a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
        float z = accel;
 800379e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037a2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
        float y = z - kf->x[2];  // Innovation
 80037ac:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037b0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80037ba:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 80037be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037c2:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c

        // S = H*P*H' + R
        float HP[1][3] = {0};
 80037c6:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	605a      	str	r2, [r3, #4]
 80037d0:	609a      	str	r2, [r3, #8]
        float S = 0.0f;
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

        for (int i = 0; i < 3; i++) {
 80037da:	2300      	movs	r3, #0
 80037dc:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80037e0:	e044      	b.n	800386c <KalmanFilter_MeasurementUpdate+0x120>
            HP[0][i] = H[0][0]*kf->P[0][i] + H[0][1]*kf->P[1][i] + H[0][2]*kf->P[2][i];
 80037e2:	ed97 7a4e 	vldr	s14, [r7, #312]	@ 0x138
 80037e6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037ea:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80037f4:	3302      	adds	r3, #2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	3304      	adds	r3, #4
 80037fc:	edd3 7a00 	vldr	s15, [r3]
 8003800:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003804:	edd7 6a4f 	vldr	s13, [r7, #316]	@ 0x13c
 8003808:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800380c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003816:	3305      	adds	r3, #5
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	3304      	adds	r3, #4
 800381e:	edd3 7a00 	vldr	s15, [r3]
 8003822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003826:	ee37 7a27 	vadd.f32	s14, s14, s15
 800382a:	edd7 6a50 	vldr	s13, [r7, #320]	@ 0x140
 800382e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003832:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800383c:	3308      	adds	r3, #8
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	3304      	adds	r3, #4
 8003844:	edd3 7a00 	vldr	s15, [r3]
 8003848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800384c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003850:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800385a:	443b      	add	r3, r7
 800385c:	3bac      	subs	r3, #172	@ 0xac
 800385e:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003862:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003866:	3301      	adds	r3, #1
 8003868:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 800386c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003870:	2b02      	cmp	r3, #2
 8003872:	ddb6      	ble.n	80037e2 <KalmanFilter_MeasurementUpdate+0x96>
        }

        S = HP[0][0]*H[0][0] + HP[0][1]*H[0][1] + HP[0][2]*H[0][2] + kf->measurement_noise_acc;
 8003874:	ed97 7a4b 	vldr	s14, [r7, #300]	@ 0x12c
 8003878:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 800387c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003880:	edd7 6a4c 	vldr	s13, [r7, #304]	@ 0x130
 8003884:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 8003888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800388c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003890:	edd7 6a4d 	vldr	s13, [r7, #308]	@ 0x134
 8003894:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8003898:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800389c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038a0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038a4:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80038ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038b2:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148

        // K = P*H'*S^-1
        float K[3] = {0};
 80038b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	605a      	str	r2, [r3, #4]
 80038c0:	609a      	str	r2, [r3, #8]
        float S_inv = 1.0f / S;
 80038c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038c6:	ed97 7a52 	vldr	s14, [r7, #328]	@ 0x148
 80038ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038ce:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144

        for (int i = 0; i < 3; i++) {
 80038d2:	2300      	movs	r3, #0
 80038d4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80038d8:	e04f      	b.n	800397a <KalmanFilter_MeasurementUpdate+0x22e>
            K[i] = (kf->P[i][0]*H[0][0] + kf->P[i][1]*H[0][1] + kf->P[i][2]*H[0][2]) * S_inv;
 80038da:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038de:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80038e2:	6819      	ldr	r1, [r3, #0]
 80038e4:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80038e8:	4613      	mov	r3, r2
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	4413      	add	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	330c      	adds	r3, #12
 80038f4:	ed93 7a00 	vldr	s14, [r3]
 80038f8:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 80038fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003900:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003904:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003908:	6819      	ldr	r1, [r3, #0]
 800390a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	4613      	mov	r3, r2
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	3304      	adds	r3, #4
 800391c:	edd3 6a00 	vldr	s13, [r3]
 8003920:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 8003924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003928:	ee37 7a27 	vadd.f32	s14, s14, s15
 800392c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003930:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003934:	6819      	ldr	r1, [r3, #0]
 8003936:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 800393a:	4613      	mov	r3, r2
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	3314      	adds	r3, #20
 8003946:	edd3 6a00 	vldr	s13, [r3]
 800394a:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 800394e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003952:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003956:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 800395a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003968:	443b      	add	r3, r7
 800396a:	3bb8      	subs	r3, #184	@ 0xb8
 800396c:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003970:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003974:	3301      	adds	r3, #1
 8003976:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800397a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800397e:	2b02      	cmp	r3, #2
 8003980:	ddab      	ble.n	80038da <KalmanFilter_MeasurementUpdate+0x18e>
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 8003982:	2300      	movs	r3, #0
 8003984:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003988:	e029      	b.n	80039de <KalmanFilter_MeasurementUpdate+0x292>
            kf->x[i] += K[i] * y;
 800398a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800398e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	ed93 7a00 	vldr	s14, [r3]
 80039a0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80039aa:	443b      	add	r3, r7
 80039ac:	3bb8      	subs	r3, #184	@ 0xb8
 80039ae:	edd3 6a00 	vldr	s13, [r3]
 80039b2:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 80039b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039be:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039c2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 80039d4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80039d8:	3301      	adds	r3, #1
 80039da:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 80039de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	ddd1      	ble.n	800398a <KalmanFilter_MeasurementUpdate+0x23e>
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 80039e6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039ea:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80039ee:	4618      	mov	r0, r3
 80039f0:	2324      	movs	r3, #36	@ 0x24
 80039f2:	461a      	mov	r2, r3
 80039f4:	2100      	movs	r1, #0
 80039f6:	f00a fabe 	bl	800df76 <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 80039fa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039fe:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8003a02:	4618      	mov	r0, r3
 8003a04:	2324      	movs	r3, #36	@ 0x24
 8003a06:	461a      	mov	r2, r3
 8003a08:	2100      	movs	r1, #0
 8003a0a:	f00a fab4 	bl	800df76 <memset>

        for (int i = 0; i < 3; i++) {
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003a14:	e062      	b.n	8003adc <KalmanFilter_MeasurementUpdate+0x390>
            for (int j = 0; j < 3; j++) {
 8003a16:	2300      	movs	r3, #0
 8003a18:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003a1c:	e055      	b.n	8003aca <KalmanFilter_MeasurementUpdate+0x37e>
                KH[i][j] = K[i] * H[0][j];
 8003a1e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003a28:	443b      	add	r3, r7
 8003a2a:	3bb8      	subs	r3, #184	@ 0xb8
 8003a2c:	ed93 7a00 	vldr	s14, [r3]
 8003a30:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003a3a:	443b      	add	r3, r7
 8003a3c:	3ba0      	subs	r3, #160	@ 0xa0
 8003a3e:	edd3 7a00 	vldr	s15, [r3]
 8003a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a46:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a4a:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003a4e:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003a52:	4613      	mov	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4413      	add	r3, r2
 8003a58:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	edc3 7a00 	vstr	s15, [r3]
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 8003a66:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003a6a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d102      	bne.n	8003a78 <KalmanFilter_MeasurementUpdate+0x32c>
 8003a72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a76:	e001      	b.n	8003a7c <KalmanFilter_MeasurementUpdate+0x330>
 8003a78:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8003d68 <KalmanFilter_MeasurementUpdate+0x61c>
 8003a7c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a80:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003a84:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003a88:	4613      	mov	r3, r2
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	edd3 7a00 	vldr	s15, [r3]
 8003a9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aa0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003aa4:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003aa8:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003aac:	4613      	mov	r3, r2
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8003ac0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003aca:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	dda5      	ble.n	8003a1e <KalmanFilter_MeasurementUpdate+0x2d2>
        for (int i = 0; i < 3; i++) {
 8003ad2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003adc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	dd98      	ble.n	8003a16 <KalmanFilter_MeasurementUpdate+0x2ca>
            }
        }

        for (int i = 0; i < 3; i++) {
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003aea:	e076      	b.n	8003bda <KalmanFilter_MeasurementUpdate+0x48e>
            for (int j = 0; j < 3; j++) {
 8003aec:	2300      	movs	r3, #0
 8003aee:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003af2:	e069      	b.n	8003bc8 <KalmanFilter_MeasurementUpdate+0x47c>
                Pnew[i][j] = 0.0f;
 8003af4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003af8:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003afc:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003b00:	4613      	mov	r3, r2
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	4413      	add	r3, r2
 8003b06:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003b16:	2300      	movs	r3, #0
 8003b18:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003b1c:	e04b      	b.n	8003bb6 <KalmanFilter_MeasurementUpdate+0x46a>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 8003b1e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b22:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003b26:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	4413      	add	r3, r2
 8003b30:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	ed93 7a00 	vldr	s14, [r3]
 8003b3e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b42:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003b46:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	4413      	add	r3, r2
 8003b50:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	edd3 6a00 	vldr	s13, [r3]
 8003b5e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b62:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003b66:	6819      	ldr	r1, [r3, #0]
 8003b68:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	4413      	add	r3, r2
 8003b72:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003b76:	4413      	add	r3, r2
 8003b78:	3302      	adds	r3, #2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	3304      	adds	r3, #4
 8003b80:	edd3 7a00 	vldr	s15, [r3]
 8003b84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b8c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b90:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003b94:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003b98:	4613      	mov	r3, r2
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003bac:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003bb6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	ddaf      	ble.n	8003b1e <KalmanFilter_MeasurementUpdate+0x3d2>
            for (int j = 0; j < 3; j++) {
 8003bbe:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003bc8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	dd91      	ble.n	8003af4 <KalmanFilter_MeasurementUpdate+0x3a8>
        for (int i = 0; i < 3; i++) {
 8003bd0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003bda:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	dd84      	ble.n	8003aec <KalmanFilter_MeasurementUpdate+0x3a0>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8003be2:	2300      	movs	r3, #0
 8003be4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003be8:	e032      	b.n	8003c50 <KalmanFilter_MeasurementUpdate+0x504>
            for (int j = 0; j < 3; j++) {
 8003bea:	2300      	movs	r3, #0
 8003bec:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003bf0:	e025      	b.n	8003c3e <KalmanFilter_MeasurementUpdate+0x4f2>
                kf->P[i][j] = Pnew[i][j];
 8003bf2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003bf6:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003bfa:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003bfe:	4613      	mov	r3, r2
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	4413      	add	r3, r2
 8003c04:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003c08:	4413      	add	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	6819      	ldr	r1, [r3, #0]
 8003c10:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c14:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003c1e:	4613      	mov	r3, r2
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	4413      	add	r3, r2
 8003c24:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003c28:	4413      	add	r3, r2
 8003c2a:	3302      	adds	r3, #2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4403      	add	r3, r0
 8003c30:	3304      	adds	r3, #4
 8003c32:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 8003c34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003c38:	3301      	adds	r3, #1
 8003c3a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003c3e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	ddd5      	ble.n	8003bf2 <KalmanFilter_MeasurementUpdate+0x4a6>
        for (int i = 0; i < 3; i++) {
 8003c46:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003c50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	ddc8      	ble.n	8003bea <KalmanFilter_MeasurementUpdate+0x49e>
 8003c58:	f000 bcc2 	b.w	80045e0 <KalmanFilter_MeasurementUpdate+0xe94>
            }
        }
    } else {
        // Use both altitude and acceleration measurements
        // H = [1 0 0; 0 0 1]
        float H[2][3] = {
 8003c5c:	4b43      	ldr	r3, [pc, #268]	@ (8003d6c <KalmanFilter_MeasurementUpdate+0x620>)
 8003c5e:	f507 7484 	add.w	r4, r7, #264	@ 0x108
 8003c62:	461d      	mov	r5, r3
 8003c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003c6c:	e884 0003 	stmia.w	r4, {r0, r1}
            {1.0f, 0.0f, 0.0f},
            {0.0f, 0.0f, 1.0f}
        };

        float z[2] = {altitude, accel};
 8003c70:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c74:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003c7e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c82:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        float y[2] = {z[0] - kf->x[0], z[1] - kf->x[2]};  // Innovation
 8003c8c:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8003c90:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c94:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	edd3 7a00 	vldr	s15, [r3]
 8003c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ca2:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
 8003ca6:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8003caa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cae:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8003cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cbc:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

        // S = H*P*H' + R
        float HP[2][3] = {0};
 8003cc0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	605a      	str	r2, [r3, #4]
 8003cca:	609a      	str	r2, [r3, #8]
 8003ccc:	60da      	str	r2, [r3, #12]
 8003cce:	611a      	str	r2, [r3, #16]
 8003cd0:	615a      	str	r2, [r3, #20]
        float S[2][2] = {0};
 8003cd2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003cda:	461a      	mov	r2, r3
 8003cdc:	2300      	movs	r3, #0
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	6053      	str	r3, [r2, #4]
 8003ce2:	6093      	str	r3, [r2, #8]
 8003ce4:	60d3      	str	r3, [r2, #12]
        float R[2][2] = {
            {kf->measurement_noise_alt, 0.0f},
 8003ce6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cea:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
        float R[2][2] = {
 8003cf2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cf6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d00:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d0e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	609a      	str	r2, [r3, #8]
            {0.0f, kf->measurement_noise_acc}
 8003d18:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d1c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
        float R[2][2] = {
 8003d24:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d28:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003d2c:	60da      	str	r2, [r3, #12]
        };

        for (int i = 0; i < 2; i++) {
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003d34:	e079      	b.n	8003e2a <KalmanFilter_MeasurementUpdate+0x6de>
            for (int j = 0; j < 3; j++) {
 8003d36:	2300      	movs	r3, #0
 8003d38:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003d3c:	e06c      	b.n	8003e18 <KalmanFilter_MeasurementUpdate+0x6cc>
                HP[i][j] = 0.0f;
 8003d3e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003d42:	4613      	mov	r3, r2
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	4413      	add	r3, r2
 8003d48:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003d54:	443b      	add	r3, r7
 8003d56:	3bf8      	subs	r3, #248	@ 0xf8
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003d64:	e04f      	b.n	8003e06 <KalmanFilter_MeasurementUpdate+0x6ba>
 8003d66:	bf00      	nop
 8003d68:	00000000 	.word	0x00000000
 8003d6c:	080123a8 	.word	0x080123a8
 8003d70:	358637bd 	.word	0x358637bd
                    HP[i][j] += H[i][k] * kf->P[k][j];
 8003d74:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003d78:	4613      	mov	r3, r2
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003d8a:	443b      	add	r3, r7
 8003d8c:	3bf8      	subs	r3, #248	@ 0xf8
 8003d8e:	ed93 7a00 	vldr	s14, [r3]
 8003d92:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003d96:	4613      	mov	r3, r2
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003da8:	443b      	add	r3, r7
 8003daa:	3bd0      	subs	r3, #208	@ 0xd0
 8003dac:	edd3 6a00 	vldr	s13, [r3]
 8003db0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003db4:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003db8:	6819      	ldr	r1, [r3, #0]
 8003dba:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003dc8:	4413      	add	r3, r2
 8003dca:	3302      	adds	r3, #2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	edd3 7a00 	vldr	s15, [r3]
 8003dd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dde:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003de2:	4613      	mov	r3, r2
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	4413      	add	r3, r2
 8003de8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003df4:	443b      	add	r3, r7
 8003df6:	3bf8      	subs	r3, #248	@ 0xf8
 8003df8:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003dfc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003e00:	3301      	adds	r3, #1
 8003e02:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003e06:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	ddb2      	ble.n	8003d74 <KalmanFilter_MeasurementUpdate+0x628>
            for (int j = 0; j < 3; j++) {
 8003e0e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003e12:	3301      	adds	r3, #1
 8003e14:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003e18:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	dd8e      	ble.n	8003d3e <KalmanFilter_MeasurementUpdate+0x5f2>
        for (int i = 0; i < 2; i++) {
 8003e20:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003e24:	3301      	adds	r3, #1
 8003e26:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003e2a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	dd81      	ble.n	8003d36 <KalmanFilter_MeasurementUpdate+0x5ea>
                }
            }
        }

        for (int i = 0; i < 2; i++) {
 8003e32:	2300      	movs	r3, #0
 8003e34:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003e38:	e098      	b.n	8003f6c <KalmanFilter_MeasurementUpdate+0x820>
            for (int j = 0; j < 2; j++) {
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003e40:	e08a      	b.n	8003f58 <KalmanFilter_MeasurementUpdate+0x80c>
                S[i][j] = 0.0f;
 8003e42:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e46:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003e4a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003e4e:	0059      	lsls	r1, r3, #1
 8003e50:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003e54:	440b      	add	r3, r1
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003e60:	2300      	movs	r3, #0
 8003e62:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003e66:	e042      	b.n	8003eee <KalmanFilter_MeasurementUpdate+0x7a2>
                    S[i][j] += HP[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8003e68:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e6c:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003e70:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003e74:	0059      	lsls	r1, r3, #1
 8003e76:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003e7a:	440b      	add	r3, r1
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	ed93 7a00 	vldr	s14, [r3]
 8003e84:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8003e88:	4613      	mov	r3, r2
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003e92:	4413      	add	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003e9a:	443b      	add	r3, r7
 8003e9c:	3bf8      	subs	r3, #248	@ 0xf8
 8003e9e:	edd3 6a00 	vldr	s13, [r3]
 8003ea2:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	4413      	add	r3, r2
 8003eac:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003eb8:	443b      	add	r3, r7
 8003eba:	3bd0      	subs	r3, #208	@ 0xd0
 8003ebc:	edd3 7a00 	vldr	s15, [r3]
 8003ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ec8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ecc:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003ed0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003ed4:	0059      	lsls	r1, r3, #1
 8003ed6:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003eda:	440b      	add	r3, r1
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003ee4:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003ee8:	3301      	adds	r3, #1
 8003eea:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003eee:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	ddb8      	ble.n	8003e68 <KalmanFilter_MeasurementUpdate+0x71c>
                }
                S[i][j] += R[i][j];
 8003ef6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003efa:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003efe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f02:	0059      	lsls	r1, r3, #1
 8003f04:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003f08:	440b      	add	r3, r1
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	ed93 7a00 	vldr	s14, [r3]
 8003f12:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f16:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8003f1a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f1e:	0059      	lsls	r1, r3, #1
 8003f20:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003f24:	440b      	add	r3, r1
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	edd3 7a00 	vldr	s15, [r3]
 8003f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f32:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f36:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003f3a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f3e:	0059      	lsls	r1, r3, #1
 8003f40:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003f44:	440b      	add	r3, r1
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 8003f4e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003f52:	3301      	adds	r3, #1
 8003f54:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003f58:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	f77f af70 	ble.w	8003e42 <KalmanFilter_MeasurementUpdate+0x6f6>
        for (int i = 0; i < 2; i++) {
 8003f62:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f66:	3301      	adds	r3, #1
 8003f68:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003f6c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	f77f af62 	ble.w	8003e3a <KalmanFilter_MeasurementUpdate+0x6ee>
            }
        }

        // Calculate S^-1 (inverse of 2x2 matrix)
        float det = S[0][0] * S[1][1] - S[0][1] * S[1][0];
 8003f76:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f7e:	ed93 7a00 	vldr	s14, [r3]
 8003f82:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f92:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f9a:	edd3 6a01 	vldr	s13, [r3, #4]
 8003f9e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fa6:	edd3 7a02 	vldr	s15, [r3, #8]
 8003faa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fb2:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
        if (fabsf(det) < 1e-6f) {
 8003fb6:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 8003fba:	eef0 7ae7 	vabs.f32	s15, s15
 8003fbe:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 8003d70 <KalmanFilter_MeasurementUpdate+0x624>
 8003fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fca:	f100 8308 	bmi.w	80045de <KalmanFilter_MeasurementUpdate+0xe92>
            // Matrix is singular, skip update
            return;
        }

        float S_inv[2][2] = {
            {S[1][1] / det, -S[0][1] / det},
 8003fce:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fd6:	edd3 6a03 	vldr	s13, [r3, #12]
 8003fda:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003fe2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fe6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003fea:	edc3 7a00 	vstr	s15, [r3]
            {S[1][1] / det, -S[0][1] / det},
 8003fee:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ff6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ffa:	eef1 6a67 	vneg.f32	s13, s15
 8003ffe:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8004002:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8004006:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800400a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800400e:	edc3 7a01 	vstr	s15, [r3, #4]
            {-S[1][0] / det, S[0][0] / det}
 8004012:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800401a:	edd3 7a02 	vldr	s15, [r3, #8]
 800401e:	eef1 6a67 	vneg.f32	s13, s15
 8004022:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8004026:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 800402a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800402e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004032:	edc3 7a02 	vstr	s15, [r3, #8]
            {-S[1][0] / det, S[0][0] / det}
 8004036:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800403a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800403e:	edd3 6a00 	vldr	s13, [r3]
 8004042:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8004046:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 800404a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800404e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004052:	edc3 7a03 	vstr	s15, [r3, #12]
        };

        // K = P*H'*S^-1
        float PHt[3][2] = {0};
 8004056:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800405a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800405e:	461a      	mov	r2, r3
 8004060:	2300      	movs	r3, #0
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	6053      	str	r3, [r2, #4]
 8004066:	6093      	str	r3, [r2, #8]
 8004068:	60d3      	str	r3, [r2, #12]
 800406a:	6113      	str	r3, [r2, #16]
 800406c:	6153      	str	r3, [r2, #20]
        float K[3][2] = {0};
 800406e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004072:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004076:	461a      	mov	r2, r3
 8004078:	2300      	movs	r3, #0
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	6053      	str	r3, [r2, #4]
 800407e:	6093      	str	r3, [r2, #8]
 8004080:	60d3      	str	r3, [r2, #12]
 8004082:	6113      	str	r3, [r2, #16]
 8004084:	6153      	str	r3, [r2, #20]

        for (int i = 0; i < 3; i++) {
 8004086:	2300      	movs	r3, #0
 8004088:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800408c:	e06f      	b.n	800416e <KalmanFilter_MeasurementUpdate+0xa22>
            for (int j = 0; j < 2; j++) {
 800408e:	2300      	movs	r3, #0
 8004090:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8004094:	e062      	b.n	800415c <KalmanFilter_MeasurementUpdate+0xa10>
                PHt[i][j] = 0.0f;
 8004096:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800409a:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 800409e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80040a2:	0059      	lsls	r1, r3, #1
 80040a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80040a8:	440b      	add	r3, r1
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 80040b4:	2300      	movs	r3, #0
 80040b6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80040ba:	e046      	b.n	800414a <KalmanFilter_MeasurementUpdate+0x9fe>
                    PHt[i][j] += kf->P[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 80040bc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040c0:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 80040c4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80040c8:	0059      	lsls	r1, r3, #1
 80040ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80040ce:	440b      	add	r3, r1
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	ed93 7a00 	vldr	s14, [r3]
 80040d8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040dc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80040e0:	6819      	ldr	r1, [r3, #0]
 80040e2:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80040e6:	4613      	mov	r3, r2
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	4413      	add	r3, r2
 80040ec:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80040f0:	4413      	add	r3, r2
 80040f2:	3302      	adds	r3, #2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	3304      	adds	r3, #4
 80040fa:	edd3 6a00 	vldr	s13, [r3]
 80040fe:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8004102:	4613      	mov	r3, r2
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	4413      	add	r3, r2
 8004108:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 800410c:	4413      	add	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004114:	443b      	add	r3, r7
 8004116:	3bd0      	subs	r3, #208	@ 0xd0
 8004118:	edd3 7a00 	vldr	s15, [r3]
 800411c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004124:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004128:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 800412c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004130:	0059      	lsls	r1, r3, #1
 8004132:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004136:	440b      	add	r3, r1
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8004140:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004144:	3301      	adds	r3, #1
 8004146:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 800414a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800414e:	2b02      	cmp	r3, #2
 8004150:	ddb4      	ble.n	80040bc <KalmanFilter_MeasurementUpdate+0x970>
            for (int j = 0; j < 2; j++) {
 8004152:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004156:	3301      	adds	r3, #1
 8004158:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 800415c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004160:	2b01      	cmp	r3, #1
 8004162:	dd98      	ble.n	8004096 <KalmanFilter_MeasurementUpdate+0x94a>
        for (int i = 0; i < 3; i++) {
 8004164:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004168:	3301      	adds	r3, #1
 800416a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800416e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004172:	2b02      	cmp	r3, #2
 8004174:	dd8b      	ble.n	800408e <KalmanFilter_MeasurementUpdate+0x942>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8004176:	2300      	movs	r3, #0
 8004178:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800417c:	e069      	b.n	8004252 <KalmanFilter_MeasurementUpdate+0xb06>
            for (int j = 0; j < 2; j++) {
 800417e:	2300      	movs	r3, #0
 8004180:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004184:	e05c      	b.n	8004240 <KalmanFilter_MeasurementUpdate+0xaf4>
                K[i][j] = 0.0f;
 8004186:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800418a:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 800418e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004192:	0059      	lsls	r1, r3, #1
 8004194:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004198:	440b      	add	r3, r1
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 80041a4:	2300      	movs	r3, #0
 80041a6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80041aa:	e040      	b.n	800422e <KalmanFilter_MeasurementUpdate+0xae2>
                    K[i][j] += PHt[i][k] * S_inv[k][j];
 80041ac:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041b0:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80041b4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80041b8:	0059      	lsls	r1, r3, #1
 80041ba:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80041be:	440b      	add	r3, r1
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	ed93 7a00 	vldr	s14, [r3]
 80041c8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041cc:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 80041d0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80041d4:	0059      	lsls	r1, r3, #1
 80041d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80041da:	440b      	add	r3, r1
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	edd3 6a00 	vldr	s13, [r3]
 80041e4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041e8:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 80041ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80041f0:	0059      	lsls	r1, r3, #1
 80041f2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80041f6:	440b      	add	r3, r1
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	edd3 7a00 	vldr	s15, [r3]
 8004200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004208:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800420c:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004210:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004214:	0059      	lsls	r1, r3, #1
 8004216:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800421a:	440b      	add	r3, r1
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 8004224:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004228:	3301      	adds	r3, #1
 800422a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800422e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004232:	2b01      	cmp	r3, #1
 8004234:	ddba      	ble.n	80041ac <KalmanFilter_MeasurementUpdate+0xa60>
            for (int j = 0; j < 2; j++) {
 8004236:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800423a:	3301      	adds	r3, #1
 800423c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004240:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004244:	2b01      	cmp	r3, #1
 8004246:	dd9e      	ble.n	8004186 <KalmanFilter_MeasurementUpdate+0xa3a>
        for (int i = 0; i < 3; i++) {
 8004248:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800424c:	3301      	adds	r3, #1
 800424e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004252:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004256:	2b02      	cmp	r3, #2
 8004258:	dd91      	ble.n	800417e <KalmanFilter_MeasurementUpdate+0xa32>
                }
            }
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 800425a:	2300      	movs	r3, #0
 800425c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004260:	e042      	b.n	80042e8 <KalmanFilter_MeasurementUpdate+0xb9c>
            for (int j = 0; j < 2; j++) {
 8004262:	2300      	movs	r3, #0
 8004264:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8004268:	e035      	b.n	80042d6 <KalmanFilter_MeasurementUpdate+0xb8a>
                kf->x[i] += K[i][j] * y[j];
 800426a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800426e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	ed93 7a00 	vldr	s14, [r3]
 8004280:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004284:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004288:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800428c:	0059      	lsls	r1, r3, #1
 800428e:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004292:	440b      	add	r3, r1
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	edd3 6a00 	vldr	s13, [r3]
 800429c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80042a6:	443b      	add	r3, r7
 80042a8:	3be0      	subs	r3, #224	@ 0xe0
 80042aa:	edd3 7a00 	vldr	s15, [r3]
 80042ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042b6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042ba:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 80042cc:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80042d0:	3301      	adds	r3, #1
 80042d2:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80042d6:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80042da:	2b01      	cmp	r3, #1
 80042dc:	ddc5      	ble.n	800426a <KalmanFilter_MeasurementUpdate+0xb1e>
        for (int i = 0; i < 3; i++) {
 80042de:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80042e2:	3301      	adds	r3, #1
 80042e4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80042e8:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	ddb8      	ble.n	8004262 <KalmanFilter_MeasurementUpdate+0xb16>
            }
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 80042f0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042f4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80042f8:	4618      	mov	r0, r3
 80042fa:	2324      	movs	r3, #36	@ 0x24
 80042fc:	461a      	mov	r2, r3
 80042fe:	2100      	movs	r1, #0
 8004300:	f009 fe39 	bl	800df76 <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 8004304:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004308:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800430c:	4618      	mov	r0, r3
 800430e:	2324      	movs	r3, #36	@ 0x24
 8004310:	461a      	mov	r2, r3
 8004312:	2100      	movs	r1, #0
 8004314:	f009 fe2f 	bl	800df76 <memset>

        for (int i = 0; i < 3; i++) {
 8004318:	2300      	movs	r3, #0
 800431a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800431e:	e09e      	b.n	800445e <KalmanFilter_MeasurementUpdate+0xd12>
            for (int j = 0; j < 3; j++) {
 8004320:	2300      	movs	r3, #0
 8004322:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004326:	e090      	b.n	800444a <KalmanFilter_MeasurementUpdate+0xcfe>
                KH[i][j] = 0.0f;
 8004328:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800432c:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004330:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004334:	4613      	mov	r3, r2
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	4413      	add	r3, r2
 800433a:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 800434a:	2300      	movs	r3, #0
 800434c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8004350:	e045      	b.n	80043de <KalmanFilter_MeasurementUpdate+0xc92>
                    KH[i][j] += K[i][k] * H[k][j];
 8004352:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004356:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 800435a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800435e:	4613      	mov	r3, r2
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	4413      	add	r3, r2
 8004364:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	ed93 7a00 	vldr	s14, [r3]
 8004372:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004376:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 800437a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800437e:	0059      	lsls	r1, r3, #1
 8004380:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004384:	440b      	add	r3, r1
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	edd3 6a00 	vldr	s13, [r3]
 800438e:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8004392:	4613      	mov	r3, r2
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	4413      	add	r3, r2
 8004398:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80043a4:	443b      	add	r3, r7
 80043a6:	3bd0      	subs	r3, #208	@ 0xd0
 80043a8:	edd3 7a00 	vldr	s15, [r3]
 80043ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043b4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043b8:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80043bc:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80043c0:	4613      	mov	r3, r2
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	4413      	add	r3, r2
 80043c6:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 80043d4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80043d8:	3301      	adds	r3, #1
 80043da:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80043de:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	ddb5      	ble.n	8004352 <KalmanFilter_MeasurementUpdate+0xc06>
                }
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 80043e6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80043ea:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d102      	bne.n	80043f8 <KalmanFilter_MeasurementUpdate+0xcac>
 80043f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043f6:	e001      	b.n	80043fc <KalmanFilter_MeasurementUpdate+0xcb0>
 80043f8:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 80045e8 <KalmanFilter_MeasurementUpdate+0xe9c>
 80043fc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004400:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004404:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004408:	4613      	mov	r3, r2
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	4413      	add	r3, r2
 800440e:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004412:	4413      	add	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	edd3 7a00 	vldr	s15, [r3]
 800441c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004420:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004424:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8004428:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800442c:	4613      	mov	r3, r2
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	4413      	add	r3, r2
 8004432:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8004440:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004444:	3301      	adds	r3, #1
 8004446:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800444a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800444e:	2b02      	cmp	r3, #2
 8004450:	f77f af6a 	ble.w	8004328 <KalmanFilter_MeasurementUpdate+0xbdc>
        for (int i = 0; i < 3; i++) {
 8004454:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8004458:	3301      	adds	r3, #1
 800445a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800445e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8004462:	2b02      	cmp	r3, #2
 8004464:	f77f af5c 	ble.w	8004320 <KalmanFilter_MeasurementUpdate+0xbd4>
            }
        }

        for (int i = 0; i < 3; i++) {
 8004468:	2300      	movs	r3, #0
 800446a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800446e:	e076      	b.n	800455e <KalmanFilter_MeasurementUpdate+0xe12>
            for (int j = 0; j < 3; j++) {
 8004470:	2300      	movs	r3, #0
 8004472:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8004476:	e069      	b.n	800454c <KalmanFilter_MeasurementUpdate+0xe00>
                Pnew[i][j] = 0.0f;
 8004478:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800447c:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004480:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004484:	4613      	mov	r3, r2
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	4413      	add	r3, r2
 800448a:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 800449a:	2300      	movs	r3, #0
 800449c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80044a0:	e04b      	b.n	800453a <KalmanFilter_MeasurementUpdate+0xdee>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 80044a2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80044a6:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80044aa:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80044ae:	4613      	mov	r3, r2
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	4413      	add	r3, r2
 80044b4:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	ed93 7a00 	vldr	s14, [r3]
 80044c2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80044c6:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 80044ca:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80044ce:	4613      	mov	r3, r2
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	4413      	add	r3, r2
 80044d4:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80044d8:	4413      	add	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	edd3 6a00 	vldr	s13, [r3]
 80044e2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80044e6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80044ea:	6819      	ldr	r1, [r3, #0]
 80044ec:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80044f0:	4613      	mov	r3, r2
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	4413      	add	r3, r2
 80044f6:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80044fa:	4413      	add	r3, r2
 80044fc:	3302      	adds	r3, #2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	3304      	adds	r3, #4
 8004504:	edd3 7a00 	vldr	s15, [r3]
 8004508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800450c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004510:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004514:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004518:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 800451c:	4613      	mov	r3, r2
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	4413      	add	r3, r2
 8004522:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	440b      	add	r3, r1
 800452c:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8004530:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004534:	3301      	adds	r3, #1
 8004536:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800453a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800453e:	2b02      	cmp	r3, #2
 8004540:	ddaf      	ble.n	80044a2 <KalmanFilter_MeasurementUpdate+0xd56>
            for (int j = 0; j < 3; j++) {
 8004542:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004546:	3301      	adds	r3, #1
 8004548:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800454c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004550:	2b02      	cmp	r3, #2
 8004552:	dd91      	ble.n	8004478 <KalmanFilter_MeasurementUpdate+0xd2c>
        for (int i = 0; i < 3; i++) {
 8004554:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004558:	3301      	adds	r3, #1
 800455a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800455e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004562:	2b02      	cmp	r3, #2
 8004564:	dd84      	ble.n	8004470 <KalmanFilter_MeasurementUpdate+0xd24>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8004566:	2300      	movs	r3, #0
 8004568:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800456c:	e032      	b.n	80045d4 <KalmanFilter_MeasurementUpdate+0xe88>
            for (int j = 0; j < 3; j++) {
 800456e:	2300      	movs	r3, #0
 8004570:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004574:	e025      	b.n	80045c2 <KalmanFilter_MeasurementUpdate+0xe76>
                kf->P[i][j] = Pnew[i][j];
 8004576:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800457a:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 800457e:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8004582:	4613      	mov	r3, r2
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	4413      	add	r3, r2
 8004588:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	6819      	ldr	r1, [r3, #0]
 8004594:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004598:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80045a2:	4613      	mov	r3, r2
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	4413      	add	r3, r2
 80045a8:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80045ac:	4413      	add	r3, r2
 80045ae:	3302      	adds	r3, #2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4403      	add	r3, r0
 80045b4:	3304      	adds	r3, #4
 80045b6:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 80045b8:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80045bc:	3301      	adds	r3, #1
 80045be:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80045c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	ddd5      	ble.n	8004576 <KalmanFilter_MeasurementUpdate+0xe2a>
        for (int i = 0; i < 3; i++) {
 80045ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80045ce:	3301      	adds	r3, #1
 80045d0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80045d4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80045d8:	2b02      	cmp	r3, #2
 80045da:	ddc8      	ble.n	800456e <KalmanFilter_MeasurementUpdate+0xe22>
 80045dc:	e000      	b.n	80045e0 <KalmanFilter_MeasurementUpdate+0xe94>
            return;
 80045de:	bf00      	nop
            }
        }
    }
}
 80045e0:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bdb0      	pop	{r4, r5, r7, pc}
 80045e8:	00000000 	.word	0x00000000

080045ec <KalmanFilter_DetectApogee>:
/**
 * @brief Detect apogee based on velocity trend
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
static int KalmanFilter_DetectApogee(KalmanFilter_t *kf) {
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
    // Velocity is negative and magnitude is increasing
	if(kf->x[2] > 30.0){


	}
    if (kf->x[1] < 0.0f && kf->x[1] < kf->prev_velocity) {
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80045fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004602:	d517      	bpl.n	8004634 <KalmanFilter_DetectApogee+0x48>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	ed93 7a01 	vldr	s14, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004610:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004618:	d50c      	bpl.n	8004634 <KalmanFilter_DetectApogee+0x48>
        kf->apogee_counter++;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	641a      	str	r2, [r3, #64]	@ 0x40
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004628:	2b04      	cmp	r3, #4
 800462a:	dd06      	ble.n	800463a <KalmanFilter_DetectApogee+0x4e>
            kf->apogee_detected = 1;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	63da      	str	r2, [r3, #60]	@ 0x3c
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8004632:	e002      	b.n	800463a <KalmanFilter_DetectApogee+0x4e>
        }
    } else {
        kf->apogee_counter = 0;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    kf->prev_velocity = kf->x[1];
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	645a      	str	r2, [r3, #68]	@ 0x44
    return kf->apogee_detected;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004646:	4618      	mov	r0, r3
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <Kalman_Get_Velocity>:
float Kalman_Get_Velocity(KalmanFilter_t *kf){
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
	return kf->x[1];
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	ee07 3a90 	vmov	s15, r3
}
 8004662:	eeb0 0a67 	vmov.f32	s0, s15
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <KalmanFilter_IsApogeeDetected>:
/**
 * @brief Check if apogee has been detected
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
int KalmanFilter_IsApogeeDetected(KalmanFilter_t *kf) {
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
    return kf->apogee_detected;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800467c:	4618      	mov	r0, r3
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800468e:	f003 fba9 	bl	8007de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004692:	f000 f8c5 	bl	8004820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004696:	f000 fb09 	bl	8004cac <MX_GPIO_Init>
  MX_DMA_Init();
 800469a:	f000 facf 	bl	8004c3c <MX_DMA_Init>
  MX_I2C1_Init();
 800469e:	f000 f9cf 	bl	8004a40 <MX_I2C1_Init>
  MX_I2C3_Init();
 80046a2:	f000 f9fb 	bl	8004a9c <MX_I2C3_Init>
  MX_TIM2_Init();
 80046a6:	f000 fa27 	bl	8004af8 <MX_TIM2_Init>
  MX_UART5_Init();
 80046aa:	f000 fa73 	bl	8004b94 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80046ae:	f000 fa9b 	bl	8004be8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80046b2:	f000 f921 	bl	80048f8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80046b6:	f000 f971 	bl	800499c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

	MX_TIM2_Init();
 80046ba:	f000 fa1d 	bl	8004af8 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 80046be:	484a      	ldr	r0, [pc, #296]	@ (80047e8 <main+0x160>)
 80046c0:	f006 fef0 	bl	800b4a4 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80046c4:	2200      	movs	r2, #0
 80046c6:	2101      	movs	r1, #1
 80046c8:	201c      	movs	r0, #28
 80046ca:	f004 f946 	bl	800895a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80046ce:	201c      	movs	r0, #28
 80046d0:	f004 f95f 	bl	8008992 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 80046d4:	2201      	movs	r2, #1
 80046d6:	2100      	movs	r1, #0
 80046d8:	2028      	movs	r0, #40	@ 0x28
 80046da:	f004 f93e 	bl	800895a <HAL_NVIC_SetPriority>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buffer, 2);
 80046de:	2202      	movs	r2, #2
 80046e0:	4942      	ldr	r1, [pc, #264]	@ (80047ec <main+0x164>)
 80046e2:	4843      	ldr	r0, [pc, #268]	@ (80047f0 <main+0x168>)
 80046e4:	f003 fc58 	bl	8007f98 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buffer, 2);
 80046e8:	2202      	movs	r2, #2
 80046ea:	4942      	ldr	r1, [pc, #264]	@ (80047f4 <main+0x16c>)
 80046ec:	4842      	ldr	r0, [pc, #264]	@ (80047f8 <main+0x170>)
 80046ee:	f003 fc53 	bl	8007f98 <HAL_ADC_Start_DMA>

	bme280_begin();
 80046f2:	f000 fbbd 	bl	8004e70 <bme280_begin>
	HAL_Delay(1000);
 80046f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80046fa:	f003 fbe5 	bl	8007ec8 <HAL_Delay>
	bme280_config();
 80046fe:	f7fc fe6d 	bl	80013dc <bme280_config>

	bmi_imu_init();
 8004702:	f000 fbcd 	bl	8004ea0 <bmi_imu_init>
    bmi088_config(&BMI_sensor);
 8004706:	483d      	ldr	r0, [pc, #244]	@ (80047fc <main+0x174>)
 8004708:	f7fd fca4 	bl	8002054 <bmi088_config>
    get_offset(&BMI_sensor);
 800470c:	483b      	ldr	r0, [pc, #236]	@ (80047fc <main+0x174>)
 800470e:	f7fe fa93 	bl	8002c38 <get_offset>
	bme280_update();
 8004712:	f7fd f81f 	bl	8001754 <bme280_update>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004716:	2028      	movs	r0, #40	@ 0x28
 8004718:	f004 f93b 	bl	8008992 <HAL_NVIC_EnableIRQ>
	getInitialQuaternion();
 800471c:	f002 f908 	bl	8006930 <getInitialQuaternion>

	//Lora Ayarı
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, SET);

	sensor_fusion_init(&BME280_sensor);
 8004720:	4837      	ldr	r0, [pc, #220]	@ (8004800 <main+0x178>)
 8004722:	f002 fb85 	bl	8006e30 <sensor_fusion_init>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, usart1_rx_buffer, 36);
 8004726:	2224      	movs	r2, #36	@ 0x24
 8004728:	4936      	ldr	r1, [pc, #216]	@ (8004804 <main+0x17c>)
 800472a:	4837      	ldr	r0, [pc, #220]	@ (8004808 <main+0x180>)
 800472c:	f007 fc32 	bl	800bf94 <HAL_UARTEx_ReceiveToIdle_DMA>
	flight_algorithm_set_parameters(10.0,2000.0,500.0,60.0);
 8004730:	eddf 1a36 	vldr	s3, [pc, #216]	@ 800480c <main+0x184>
 8004734:	ed9f 1a36 	vldr	s2, [pc, #216]	@ 8004810 <main+0x188>
 8004738:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8004814 <main+0x18c>
 800473c:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8004740:	f7fe fcb2 	bl	80030a8 <flight_algorithm_set_parameters>


	uart_handler_init();
 8004744:	f003 f98c 	bl	8007a60 <uart_handler_init>
	flight_algorithm_init();
 8004748:	f7fe fae2 	bl	8002d10 <flight_algorithm_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  bmi088_update(&BMI_sensor);
 800474c:	482b      	ldr	r0, [pc, #172]	@ (80047fc <main+0x174>)
 800474e:	f7fd fe83 	bl	8002458 <bmi088_update>
		  sensor_fusion_update_mahony(&BMI_sensor, &sensor_output);
 8004752:	4931      	ldr	r1, [pc, #196]	@ (8004818 <main+0x190>)
 8004754:	4829      	ldr	r0, [pc, #164]	@ (80047fc <main+0x174>)
 8004756:	f002 fc71 	bl	800703c <sensor_fusion_update_mahony>
		  bme280_update();
 800475a:	f7fc fffb 	bl	8001754 <bme280_update>

		  // Process UART packets and handle mode changes
		  uart_handler_process_packets();
 800475e:	f003 f999 	bl	8007a94 <uart_handler_process_packets>

		  // Clear command flag if it was set
		  if (uart_handler_command_ready()) {
 8004762:	f003 fa95 	bl	8007c90 <uart_handler_command_ready>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d008      	beq.n	800477e <main+0xf6>
			  uart_handler_clear_command_flag();
 800476c:	f003 fabe 	bl	8007cec <uart_handler_clear_command_flag>
			  // Reset flight algorithm if switching to NORMAL mode
			  if (uart_handler_get_mode() == MODE_NORMAL) {
 8004770:	f003 fa82 	bl	8007c78 <uart_handler_get_mode>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <main+0xf6>
				  flight_algorithm_reset();
 800477a:	f7fe facf 	bl	8002d1c <flight_algorithm_reset>
			  }
		  }

		  if (tx_timer_flag) {
 800477e:	4b27      	ldr	r3, [pc, #156]	@ (800481c <main+0x194>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0e1      	beq.n	800474c <main+0xc4>
			tx_timer_flag = 0;
 8004788:	4b24      	ldr	r3, [pc, #144]	@ (800481c <main+0x194>)
 800478a:	2200      	movs	r2, #0
 800478c:	701a      	strb	r2, [r3, #0]
			//read_ADC();
			HSD_StatusCheck();
 800478e:	f000 fc43 	bl	8005018 <HSD_StatusCheck>
			//IMU_visual();
			SystemMode_t current_mode = uart_handler_get_mode();
 8004792:	f003 fa71 	bl	8007c78 <uart_handler_get_mode>
 8004796:	4603      	mov	r3, r0
 8004798:	71fb      	strb	r3, [r7, #7]

				switch (current_mode) {
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	2b02      	cmp	r3, #2
 800479e:	d01e      	beq.n	80047de <main+0x156>
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	dcd3      	bgt.n	800474c <main+0xc4>
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <main+0x126>
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d013      	beq.n	80047d4 <main+0x14c>
 80047ac:	e01a      	b.n	80047e4 <main+0x15c>
					case MODE_NORMAL:
						sensor_fusion_update_kalman(&BME280_sensor, &BMI_sensor, &sensor_output);
 80047ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004818 <main+0x190>)
 80047b0:	4912      	ldr	r1, [pc, #72]	@ (80047fc <main+0x174>)
 80047b2:	4813      	ldr	r0, [pc, #76]	@ (8004800 <main+0x178>)
 80047b4:	f002 fb90 	bl	8006ed8 <sensor_fusion_update_kalman>
						flight_algorithm_update(&BME280_sensor, &BMI_sensor, &sensor_output);
 80047b8:	4a17      	ldr	r2, [pc, #92]	@ (8004818 <main+0x190>)
 80047ba:	4910      	ldr	r1, [pc, #64]	@ (80047fc <main+0x174>)
 80047bc:	4810      	ldr	r0, [pc, #64]	@ (8004800 <main+0x178>)
 80047be:	f7fe fafd 	bl	8002dbc <flight_algorithm_update>
						uint16_t status_bits = flight_algorithm_get_status_bits();
 80047c2:	f7fe fc65 	bl	8003090 <flight_algorithm_get_status_bits>
 80047c6:	4603      	mov	r3, r0
 80047c8:	80bb      	strh	r3, [r7, #4]
						uart_handler_send_status(status_bits);
 80047ca:	88bb      	ldrh	r3, [r7, #4]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f003 faa5 	bl	8007d1c <uart_handler_send_status>
						break;
 80047d2:	e007      	b.n	80047e4 <main+0x15c>

					case MODE_SIT:
						test_modes_handle_sit(&BME280_sensor, &BMI_sensor);
 80047d4:	4909      	ldr	r1, [pc, #36]	@ (80047fc <main+0x174>)
 80047d6:	480a      	ldr	r0, [pc, #40]	@ (8004800 <main+0x178>)
 80047d8:	f003 f8c0 	bl	800795c <test_modes_handle_sit>
						break;
 80047dc:	e002      	b.n	80047e4 <main+0x15c>

					case MODE_SUT:
						algorithm_update_sut();
 80047de:	f003 f8d5 	bl	800798c <algorithm_update_sut>
						break;
 80047e2:	bf00      	nop
	  	  bmi088_update(&BMI_sensor);
 80047e4:	e7b2      	b.n	800474c <main+0xc4>
 80047e6:	bf00      	nop
 80047e8:	20000478 	.word	0x20000478
 80047ec:	20000744 	.word	0x20000744
 80047f0:	20000280 	.word	0x20000280
 80047f4:	20000748 	.word	0x20000748
 80047f8:	200002c8 	.word	0x200002c8
 80047fc:	20000654 	.word	0x20000654
 8004800:	20000610 	.word	0x20000610
 8004804:	200006f0 	.word	0x200006f0
 8004808:	20000508 	.word	0x20000508
 800480c:	42700000 	.word	0x42700000
 8004810:	43fa0000 	.word	0x43fa0000
 8004814:	44fa0000 	.word	0x44fa0000
 8004818:	200006d4 	.word	0x200006d4
 800481c:	20000740 	.word	0x20000740

08004820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b094      	sub	sp, #80	@ 0x50
 8004824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004826:	f107 031c 	add.w	r3, r7, #28
 800482a:	2234      	movs	r2, #52	@ 0x34
 800482c:	2100      	movs	r1, #0
 800482e:	4618      	mov	r0, r3
 8004830:	f009 fba1 	bl	800df76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004834:	f107 0308 	add.w	r3, r7, #8
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	605a      	str	r2, [r3, #4]
 800483e:	609a      	str	r2, [r3, #8]
 8004840:	60da      	str	r2, [r3, #12]
 8004842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004844:	2300      	movs	r3, #0
 8004846:	607b      	str	r3, [r7, #4]
 8004848:	4b29      	ldr	r3, [pc, #164]	@ (80048f0 <SystemClock_Config+0xd0>)
 800484a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484c:	4a28      	ldr	r2, [pc, #160]	@ (80048f0 <SystemClock_Config+0xd0>)
 800484e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004852:	6413      	str	r3, [r2, #64]	@ 0x40
 8004854:	4b26      	ldr	r3, [pc, #152]	@ (80048f0 <SystemClock_Config+0xd0>)
 8004856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800485c:	607b      	str	r3, [r7, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004860:	2300      	movs	r3, #0
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	4b23      	ldr	r3, [pc, #140]	@ (80048f4 <SystemClock_Config+0xd4>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a22      	ldr	r2, [pc, #136]	@ (80048f4 <SystemClock_Config+0xd4>)
 800486a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	4b20      	ldr	r3, [pc, #128]	@ (80048f4 <SystemClock_Config+0xd4>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004878:	603b      	str	r3, [r7, #0]
 800487a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800487c:	2301      	movs	r3, #1
 800487e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004880:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004884:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004886:	2302      	movs	r3, #2
 8004888:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800488a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800488e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004890:	2308      	movs	r3, #8
 8004892:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004894:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004898:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800489a:	2302      	movs	r3, #2
 800489c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800489e:	2302      	movs	r3, #2
 80048a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80048a2:	2302      	movs	r3, #2
 80048a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048a6:	f107 031c 	add.w	r3, r7, #28
 80048aa:	4618      	mov	r0, r3
 80048ac:	f006 fb0c 	bl	800aec8 <HAL_RCC_OscConfig>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80048b6:	f000 fbe5 	bl	8005084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80048ba:	230f      	movs	r3, #15
 80048bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80048be:	2302      	movs	r3, #2
 80048c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80048c2:	2300      	movs	r3, #0
 80048c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80048c6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80048ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80048cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80048d2:	f107 0308 	add.w	r3, r7, #8
 80048d6:	2105      	movs	r1, #5
 80048d8:	4618      	mov	r0, r3
 80048da:	f005 ffab 	bl	800a834 <HAL_RCC_ClockConfig>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80048e4:	f000 fbce 	bl	8005084 <Error_Handler>
  }
}
 80048e8:	bf00      	nop
 80048ea:	3750      	adds	r7, #80	@ 0x50
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40023800 	.word	0x40023800
 80048f4:	40007000 	.word	0x40007000

080048f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80048fe:	463b      	mov	r3, r7
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	605a      	str	r2, [r3, #4]
 8004906:	609a      	str	r2, [r3, #8]
 8004908:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800490a:	4b21      	ldr	r3, [pc, #132]	@ (8004990 <MX_ADC1_Init+0x98>)
 800490c:	4a21      	ldr	r2, [pc, #132]	@ (8004994 <MX_ADC1_Init+0x9c>)
 800490e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004910:	4b1f      	ldr	r3, [pc, #124]	@ (8004990 <MX_ADC1_Init+0x98>)
 8004912:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004916:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004918:	4b1d      	ldr	r3, [pc, #116]	@ (8004990 <MX_ADC1_Init+0x98>)
 800491a:	2200      	movs	r2, #0
 800491c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800491e:	4b1c      	ldr	r3, [pc, #112]	@ (8004990 <MX_ADC1_Init+0x98>)
 8004920:	2200      	movs	r2, #0
 8004922:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004924:	4b1a      	ldr	r3, [pc, #104]	@ (8004990 <MX_ADC1_Init+0x98>)
 8004926:	2201      	movs	r2, #1
 8004928:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800492a:	4b19      	ldr	r3, [pc, #100]	@ (8004990 <MX_ADC1_Init+0x98>)
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004932:	4b17      	ldr	r3, [pc, #92]	@ (8004990 <MX_ADC1_Init+0x98>)
 8004934:	2200      	movs	r2, #0
 8004936:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004938:	4b15      	ldr	r3, [pc, #84]	@ (8004990 <MX_ADC1_Init+0x98>)
 800493a:	4a17      	ldr	r2, [pc, #92]	@ (8004998 <MX_ADC1_Init+0xa0>)
 800493c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800493e:	4b14      	ldr	r3, [pc, #80]	@ (8004990 <MX_ADC1_Init+0x98>)
 8004940:	2200      	movs	r2, #0
 8004942:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004944:	4b12      	ldr	r3, [pc, #72]	@ (8004990 <MX_ADC1_Init+0x98>)
 8004946:	2201      	movs	r2, #1
 8004948:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800494a:	4b11      	ldr	r3, [pc, #68]	@ (8004990 <MX_ADC1_Init+0x98>)
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004952:	4b0f      	ldr	r3, [pc, #60]	@ (8004990 <MX_ADC1_Init+0x98>)
 8004954:	2201      	movs	r2, #1
 8004956:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004958:	480d      	ldr	r0, [pc, #52]	@ (8004990 <MX_ADC1_Init+0x98>)
 800495a:	f003 fad9 	bl	8007f10 <HAL_ADC_Init>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004964:	f000 fb8e 	bl	8005084 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004968:	2309      	movs	r3, #9
 800496a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800496c:	2301      	movs	r3, #1
 800496e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004970:	2307      	movs	r3, #7
 8004972:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004974:	463b      	mov	r3, r7
 8004976:	4619      	mov	r1, r3
 8004978:	4805      	ldr	r0, [pc, #20]	@ (8004990 <MX_ADC1_Init+0x98>)
 800497a:	f003 fc3f 	bl	80081fc <HAL_ADC_ConfigChannel>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004984:	f000 fb7e 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004988:	bf00      	nop
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20000280 	.word	0x20000280
 8004994:	40012000 	.word	0x40012000
 8004998:	0f000001 	.word	0x0f000001

0800499c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80049a2:	463b      	mov	r3, r7
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	605a      	str	r2, [r3, #4]
 80049aa:	609a      	str	r2, [r3, #8]
 80049ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80049ae:	4b21      	ldr	r3, [pc, #132]	@ (8004a34 <MX_ADC2_Init+0x98>)
 80049b0:	4a21      	ldr	r2, [pc, #132]	@ (8004a38 <MX_ADC2_Init+0x9c>)
 80049b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80049b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004a34 <MX_ADC2_Init+0x98>)
 80049b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80049ba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80049bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004a34 <MX_ADC2_Init+0x98>)
 80049be:	2200      	movs	r2, #0
 80049c0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80049c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004a34 <MX_ADC2_Init+0x98>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80049c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a34 <MX_ADC2_Init+0x98>)
 80049ca:	2201      	movs	r2, #1
 80049cc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80049ce:	4b19      	ldr	r3, [pc, #100]	@ (8004a34 <MX_ADC2_Init+0x98>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80049d6:	4b17      	ldr	r3, [pc, #92]	@ (8004a34 <MX_ADC2_Init+0x98>)
 80049d8:	2200      	movs	r2, #0
 80049da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80049dc:	4b15      	ldr	r3, [pc, #84]	@ (8004a34 <MX_ADC2_Init+0x98>)
 80049de:	4a17      	ldr	r2, [pc, #92]	@ (8004a3c <MX_ADC2_Init+0xa0>)
 80049e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80049e2:	4b14      	ldr	r3, [pc, #80]	@ (8004a34 <MX_ADC2_Init+0x98>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80049e8:	4b12      	ldr	r3, [pc, #72]	@ (8004a34 <MX_ADC2_Init+0x98>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80049ee:	4b11      	ldr	r3, [pc, #68]	@ (8004a34 <MX_ADC2_Init+0x98>)
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80049f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004a34 <MX_ADC2_Init+0x98>)
 80049f8:	2201      	movs	r2, #1
 80049fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80049fc:	480d      	ldr	r0, [pc, #52]	@ (8004a34 <MX_ADC2_Init+0x98>)
 80049fe:	f003 fa87 	bl	8007f10 <HAL_ADC_Init>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004a08:	f000 fb3c 	bl	8005084 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004a10:	2301      	movs	r3, #1
 8004a12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004a14:	2307      	movs	r3, #7
 8004a16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a18:	463b      	mov	r3, r7
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4805      	ldr	r0, [pc, #20]	@ (8004a34 <MX_ADC2_Init+0x98>)
 8004a1e:	f003 fbed 	bl	80081fc <HAL_ADC_ConfigChannel>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004a28:	f000 fb2c 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004a2c:	bf00      	nop
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	200002c8 	.word	0x200002c8
 8004a38:	40012100 	.word	0x40012100
 8004a3c:	0f000001 	.word	0x0f000001

08004a40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004a44:	4b12      	ldr	r3, [pc, #72]	@ (8004a90 <MX_I2C1_Init+0x50>)
 8004a46:	4a13      	ldr	r2, [pc, #76]	@ (8004a94 <MX_I2C1_Init+0x54>)
 8004a48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004a4a:	4b11      	ldr	r3, [pc, #68]	@ (8004a90 <MX_I2C1_Init+0x50>)
 8004a4c:	4a12      	ldr	r2, [pc, #72]	@ (8004a98 <MX_I2C1_Init+0x58>)
 8004a4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004a50:	4b0f      	ldr	r3, [pc, #60]	@ (8004a90 <MX_I2C1_Init+0x50>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004a56:	4b0e      	ldr	r3, [pc, #56]	@ (8004a90 <MX_I2C1_Init+0x50>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a90 <MX_I2C1_Init+0x50>)
 8004a5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004a62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a64:	4b0a      	ldr	r3, [pc, #40]	@ (8004a90 <MX_I2C1_Init+0x50>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004a6a:	4b09      	ldr	r3, [pc, #36]	@ (8004a90 <MX_I2C1_Init+0x50>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a70:	4b07      	ldr	r3, [pc, #28]	@ (8004a90 <MX_I2C1_Init+0x50>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a76:	4b06      	ldr	r3, [pc, #24]	@ (8004a90 <MX_I2C1_Init+0x50>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004a7c:	4804      	ldr	r0, [pc, #16]	@ (8004a90 <MX_I2C1_Init+0x50>)
 8004a7e:	f004 fe85 	bl	800978c <HAL_I2C_Init>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004a88:	f000 fafc 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004a8c:	bf00      	nop
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	200003d0 	.word	0x200003d0
 8004a94:	40005400 	.word	0x40005400
 8004a98:	000186a0 	.word	0x000186a0

08004a9c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004aa0:	4b12      	ldr	r3, [pc, #72]	@ (8004aec <MX_I2C3_Init+0x50>)
 8004aa2:	4a13      	ldr	r2, [pc, #76]	@ (8004af0 <MX_I2C3_Init+0x54>)
 8004aa4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8004aa6:	4b11      	ldr	r3, [pc, #68]	@ (8004aec <MX_I2C3_Init+0x50>)
 8004aa8:	4a12      	ldr	r2, [pc, #72]	@ (8004af4 <MX_I2C3_Init+0x58>)
 8004aaa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004aac:	4b0f      	ldr	r3, [pc, #60]	@ (8004aec <MX_I2C3_Init+0x50>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8004aec <MX_I2C3_Init+0x50>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8004aec <MX_I2C3_Init+0x50>)
 8004aba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004abe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8004aec <MX_I2C3_Init+0x50>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004ac6:	4b09      	ldr	r3, [pc, #36]	@ (8004aec <MX_I2C3_Init+0x50>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004acc:	4b07      	ldr	r3, [pc, #28]	@ (8004aec <MX_I2C3_Init+0x50>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004ad2:	4b06      	ldr	r3, [pc, #24]	@ (8004aec <MX_I2C3_Init+0x50>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004ad8:	4804      	ldr	r0, [pc, #16]	@ (8004aec <MX_I2C3_Init+0x50>)
 8004ada:	f004 fe57 	bl	800978c <HAL_I2C_Init>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004ae4:	f000 face 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004ae8:	bf00      	nop
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	20000424 	.word	0x20000424
 8004af0:	40005c00 	.word	0x40005c00
 8004af4:	000186a0 	.word	0x000186a0

08004af8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004afe:	f107 0308 	add.w	r3, r7, #8
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	605a      	str	r2, [r3, #4]
 8004b08:	609a      	str	r2, [r3, #8]
 8004b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b0c:	463b      	mov	r3, r7
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004b14:	4b1e      	ldr	r3, [pc, #120]	@ (8004b90 <MX_TIM2_Init+0x98>)
 8004b16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004b1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 8004b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8004b90 <MX_TIM2_Init+0x98>)
 8004b1e:	f242 3227 	movw	r2, #8999	@ 0x2327
 8004b22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b24:	4b1a      	ldr	r3, [pc, #104]	@ (8004b90 <MX_TIM2_Init+0x98>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8004b2a:	4b19      	ldr	r3, [pc, #100]	@ (8004b90 <MX_TIM2_Init+0x98>)
 8004b2c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004b30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b32:	4b17      	ldr	r3, [pc, #92]	@ (8004b90 <MX_TIM2_Init+0x98>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b38:	4b15      	ldr	r3, [pc, #84]	@ (8004b90 <MX_TIM2_Init+0x98>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004b3e:	4814      	ldr	r0, [pc, #80]	@ (8004b90 <MX_TIM2_Init+0x98>)
 8004b40:	f006 fc60 	bl	800b404 <HAL_TIM_Base_Init>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004b4a:	f000 fa9b 	bl	8005084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004b54:	f107 0308 	add.w	r3, r7, #8
 8004b58:	4619      	mov	r1, r3
 8004b5a:	480d      	ldr	r0, [pc, #52]	@ (8004b90 <MX_TIM2_Init+0x98>)
 8004b5c:	f006 fe02 	bl	800b764 <HAL_TIM_ConfigClockSource>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004b66:	f000 fa8d 	bl	8005084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004b72:	463b      	mov	r3, r7
 8004b74:	4619      	mov	r1, r3
 8004b76:	4806      	ldr	r0, [pc, #24]	@ (8004b90 <MX_TIM2_Init+0x98>)
 8004b78:	f007 f824 	bl	800bbc4 <HAL_TIMEx_MasterConfigSynchronization>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004b82:	f000 fa7f 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004b86:	bf00      	nop
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000478 	.word	0x20000478

08004b94 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004b98:	4b11      	ldr	r3, [pc, #68]	@ (8004be0 <MX_UART5_Init+0x4c>)
 8004b9a:	4a12      	ldr	r2, [pc, #72]	@ (8004be4 <MX_UART5_Init+0x50>)
 8004b9c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8004b9e:	4b10      	ldr	r3, [pc, #64]	@ (8004be0 <MX_UART5_Init+0x4c>)
 8004ba0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004ba4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8004be0 <MX_UART5_Init+0x4c>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004bac:	4b0c      	ldr	r3, [pc, #48]	@ (8004be0 <MX_UART5_Init+0x4c>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004be0 <MX_UART5_Init+0x4c>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004bb8:	4b09      	ldr	r3, [pc, #36]	@ (8004be0 <MX_UART5_Init+0x4c>)
 8004bba:	220c      	movs	r2, #12
 8004bbc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bbe:	4b08      	ldr	r3, [pc, #32]	@ (8004be0 <MX_UART5_Init+0x4c>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bc4:	4b06      	ldr	r3, [pc, #24]	@ (8004be0 <MX_UART5_Init+0x4c>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004bca:	4805      	ldr	r0, [pc, #20]	@ (8004be0 <MX_UART5_Init+0x4c>)
 8004bcc:	f007 f88a 	bl	800bce4 <HAL_UART_Init>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8004bd6:	f000 fa55 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004bda:	bf00      	nop
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	200004c0 	.word	0x200004c0
 8004be4:	40005000 	.word	0x40005000

08004be8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004bec:	4b11      	ldr	r3, [pc, #68]	@ (8004c34 <MX_USART1_UART_Init+0x4c>)
 8004bee:	4a12      	ldr	r2, [pc, #72]	@ (8004c38 <MX_USART1_UART_Init+0x50>)
 8004bf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004bf2:	4b10      	ldr	r3, [pc, #64]	@ (8004c34 <MX_USART1_UART_Init+0x4c>)
 8004bf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004bf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8004c34 <MX_USART1_UART_Init+0x4c>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004c00:	4b0c      	ldr	r3, [pc, #48]	@ (8004c34 <MX_USART1_UART_Init+0x4c>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004c06:	4b0b      	ldr	r3, [pc, #44]	@ (8004c34 <MX_USART1_UART_Init+0x4c>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004c0c:	4b09      	ldr	r3, [pc, #36]	@ (8004c34 <MX_USART1_UART_Init+0x4c>)
 8004c0e:	220c      	movs	r2, #12
 8004c10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c12:	4b08      	ldr	r3, [pc, #32]	@ (8004c34 <MX_USART1_UART_Init+0x4c>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c18:	4b06      	ldr	r3, [pc, #24]	@ (8004c34 <MX_USART1_UART_Init+0x4c>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004c1e:	4805      	ldr	r0, [pc, #20]	@ (8004c34 <MX_USART1_UART_Init+0x4c>)
 8004c20:	f007 f860 	bl	800bce4 <HAL_UART_Init>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004c2a:	f000 fa2b 	bl	8005084 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004c2e:	bf00      	nop
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20000508 	.word	0x20000508
 8004c38:	40011000 	.word	0x40011000

08004c3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004c42:	2300      	movs	r3, #0
 8004c44:	607b      	str	r3, [r7, #4]
 8004c46:	4b18      	ldr	r3, [pc, #96]	@ (8004ca8 <MX_DMA_Init+0x6c>)
 8004c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4a:	4a17      	ldr	r2, [pc, #92]	@ (8004ca8 <MX_DMA_Init+0x6c>)
 8004c4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c52:	4b15      	ldr	r3, [pc, #84]	@ (8004ca8 <MX_DMA_Init+0x6c>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c5a:	607b      	str	r3, [r7, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004c5e:	2200      	movs	r2, #0
 8004c60:	2100      	movs	r1, #0
 8004c62:	2038      	movs	r0, #56	@ 0x38
 8004c64:	f003 fe79 	bl	800895a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004c68:	2038      	movs	r0, #56	@ 0x38
 8004c6a:	f003 fe92 	bl	8008992 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2100      	movs	r1, #0
 8004c72:	203b      	movs	r0, #59	@ 0x3b
 8004c74:	f003 fe71 	bl	800895a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004c78:	203b      	movs	r0, #59	@ 0x3b
 8004c7a:	f003 fe8a 	bl	8008992 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2100      	movs	r1, #0
 8004c82:	2044      	movs	r0, #68	@ 0x44
 8004c84:	f003 fe69 	bl	800895a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8004c88:	2044      	movs	r0, #68	@ 0x44
 8004c8a:	f003 fe82 	bl	8008992 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8004c8e:	2200      	movs	r2, #0
 8004c90:	2100      	movs	r1, #0
 8004c92:	2046      	movs	r0, #70	@ 0x46
 8004c94:	f003 fe61 	bl	800895a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8004c98:	2046      	movs	r0, #70	@ 0x46
 8004c9a:	f003 fe7a 	bl	8008992 <HAL_NVIC_EnableIRQ>

}
 8004c9e:	bf00      	nop
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40023800 	.word	0x40023800

08004cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08a      	sub	sp, #40	@ 0x28
 8004cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cb2:	f107 0314 	add.w	r3, r7, #20
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	605a      	str	r2, [r3, #4]
 8004cbc:	609a      	str	r2, [r3, #8]
 8004cbe:	60da      	str	r2, [r3, #12]
 8004cc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	4b66      	ldr	r3, [pc, #408]	@ (8004e60 <MX_GPIO_Init+0x1b4>)
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cca:	4a65      	ldr	r2, [pc, #404]	@ (8004e60 <MX_GPIO_Init+0x1b4>)
 8004ccc:	f043 0304 	orr.w	r3, r3, #4
 8004cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cd2:	4b63      	ldr	r3, [pc, #396]	@ (8004e60 <MX_GPIO_Init+0x1b4>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	4b5f      	ldr	r3, [pc, #380]	@ (8004e60 <MX_GPIO_Init+0x1b4>)
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce6:	4a5e      	ldr	r2, [pc, #376]	@ (8004e60 <MX_GPIO_Init+0x1b4>)
 8004ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cee:	4b5c      	ldr	r3, [pc, #368]	@ (8004e60 <MX_GPIO_Init+0x1b4>)
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	4b58      	ldr	r3, [pc, #352]	@ (8004e60 <MX_GPIO_Init+0x1b4>)
 8004d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d02:	4a57      	ldr	r2, [pc, #348]	@ (8004e60 <MX_GPIO_Init+0x1b4>)
 8004d04:	f043 0302 	orr.w	r3, r3, #2
 8004d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d0a:	4b55      	ldr	r3, [pc, #340]	@ (8004e60 <MX_GPIO_Init+0x1b4>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	60bb      	str	r3, [r7, #8]
 8004d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d16:	2300      	movs	r3, #0
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	4b51      	ldr	r3, [pc, #324]	@ (8004e60 <MX_GPIO_Init+0x1b4>)
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1e:	4a50      	ldr	r2, [pc, #320]	@ (8004e60 <MX_GPIO_Init+0x1b4>)
 8004d20:	f043 0301 	orr.w	r3, r3, #1
 8004d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d26:	4b4e      	ldr	r3, [pc, #312]	@ (8004e60 <MX_GPIO_Init+0x1b4>)
 8004d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	607b      	str	r3, [r7, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d32:	2300      	movs	r3, #0
 8004d34:	603b      	str	r3, [r7, #0]
 8004d36:	4b4a      	ldr	r3, [pc, #296]	@ (8004e60 <MX_GPIO_Init+0x1b4>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3a:	4a49      	ldr	r2, [pc, #292]	@ (8004e60 <MX_GPIO_Init+0x1b4>)
 8004d3c:	f043 0308 	orr.w	r3, r3, #8
 8004d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d42:	4b47      	ldr	r3, [pc, #284]	@ (8004e60 <MX_GPIO_Init+0x1b4>)
 8004d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f240 4104 	movw	r1, #1028	@ 0x404
 8004d54:	4843      	ldr	r0, [pc, #268]	@ (8004e64 <MX_GPIO_Init+0x1b8>)
 8004d56:	f004 fce7 	bl	8009728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004d60:	4840      	ldr	r0, [pc, #256]	@ (8004e64 <MX_GPIO_Init+0x1b8>)
 8004d62:	f004 fce1 	bl	8009728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8004d66:	2200      	movs	r2, #0
 8004d68:	2140      	movs	r1, #64	@ 0x40
 8004d6a:	483f      	ldr	r0, [pc, #252]	@ (8004e68 <MX_GPIO_Init+0x1bc>)
 8004d6c:	f004 fcdc 	bl	8009728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8004d70:	2200      	movs	r2, #0
 8004d72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d76:	483d      	ldr	r0, [pc, #244]	@ (8004e6c <MX_GPIO_Init+0x1c0>)
 8004d78:	f004 fcd6 	bl	8009728 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8004d7c:	2321      	movs	r3, #33	@ 0x21
 8004d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d80:	2300      	movs	r3, #0
 8004d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d84:	2300      	movs	r3, #0
 8004d86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d88:	f107 0314 	add.w	r3, r7, #20
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4836      	ldr	r0, [pc, #216]	@ (8004e68 <MX_GPIO_Init+0x1bc>)
 8004d90:	f004 fa2a 	bl	80091e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14;
 8004d94:	f244 4304 	movw	r3, #17412	@ 0x4404
 8004d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004da2:	2300      	movs	r3, #0
 8004da4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004da6:	f107 0314 	add.w	r3, r7, #20
 8004daa:	4619      	mov	r1, r3
 8004dac:	482d      	ldr	r0, [pc, #180]	@ (8004e64 <MX_GPIO_Init+0x1b8>)
 8004dae:	f004 fa1b 	bl	80091e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004db2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004db8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dc2:	f107 0314 	add.w	r3, r7, #20
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4826      	ldr	r0, [pc, #152]	@ (8004e64 <MX_GPIO_Init+0x1b8>)
 8004dca:	f004 fa0d 	bl	80091e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004dce:	2340      	movs	r3, #64	@ 0x40
 8004dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dde:	f107 0314 	add.w	r3, r7, #20
 8004de2:	4619      	mov	r1, r3
 8004de4:	4820      	ldr	r0, [pc, #128]	@ (8004e68 <MX_GPIO_Init+0x1bc>)
 8004de6:	f004 f9ff 	bl	80091e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004dea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004df0:	2301      	movs	r3, #1
 8004df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dfc:	f107 0314 	add.w	r3, r7, #20
 8004e00:	4619      	mov	r1, r3
 8004e02:	481a      	ldr	r0, [pc, #104]	@ (8004e6c <MX_GPIO_Init+0x1c0>)
 8004e04:	f004 f9f0 	bl	80091e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004e08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004e0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e18:	f107 0314 	add.w	r3, r7, #20
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4813      	ldr	r0, [pc, #76]	@ (8004e6c <MX_GPIO_Init+0x1c0>)
 8004e20:	f004 f9e2 	bl	80091e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004e24:	2200      	movs	r2, #0
 8004e26:	2100      	movs	r1, #0
 8004e28:	2028      	movs	r0, #40	@ 0x28
 8004e2a:	f003 fd96 	bl	800895a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004e2e:	2028      	movs	r0, #40	@ 0x28
 8004e30:	f003 fdaf 	bl	8008992 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8004e34:	2200      	movs	r2, #0
 8004e36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004e3a:	480a      	ldr	r0, [pc, #40]	@ (8004e64 <MX_GPIO_Init+0x1b8>)
 8004e3c:	f004 fc74 	bl	8009728 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8004e40:	2032      	movs	r0, #50	@ 0x32
 8004e42:	f003 f841 	bl	8007ec8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8004e46:	2201      	movs	r2, #1
 8004e48:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004e4c:	4805      	ldr	r0, [pc, #20]	@ (8004e64 <MX_GPIO_Init+0x1b8>)
 8004e4e:	f004 fc6b 	bl	8009728 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8004e52:	2032      	movs	r0, #50	@ 0x32
 8004e54:	f003 f838 	bl	8007ec8 <HAL_Delay>
/* USER CODE END MX_GPIO_Init_2 */
}
 8004e58:	bf00      	nop
 8004e5a:	3728      	adds	r7, #40	@ 0x28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40023800 	.word	0x40023800
 8004e64:	40020400 	.word	0x40020400
 8004e68:	40020800 	.word	0x40020800
 8004e6c:	40020000 	.word	0x40020000

08004e70 <bme280_begin>:

/* USER CODE BEGIN 4 */
void bme280_begin()
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
	BME280_sensor.device_config.bme280_filter = 			BME280_FILTER_8;
 8004e74:	4b08      	ldr	r3, [pc, #32]	@ (8004e98 <bme280_begin+0x28>)
 8004e76:	2203      	movs	r2, #3
 8004e78:	711a      	strb	r2, [r3, #4]
	BME280_sensor.device_config.bme280_mode =				BME280_MODE_NORMAL;
 8004e7a:	4b07      	ldr	r3, [pc, #28]	@ (8004e98 <bme280_begin+0x28>)
 8004e7c:	2203      	movs	r2, #3
 8004e7e:	715a      	strb	r2, [r3, #5]
	BME280_sensor.device_config.bme280_output_speed =		BME280_OS_8;
 8004e80:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <bme280_begin+0x28>)
 8004e82:	2204      	movs	r2, #4
 8004e84:	719a      	strb	r2, [r3, #6]
	BME280_sensor.device_config.bme280_standby_time = 		BME280_STBY_20;
 8004e86:	4b04      	ldr	r3, [pc, #16]	@ (8004e98 <bme280_begin+0x28>)
 8004e88:	2207      	movs	r2, #7
 8004e8a:	71da      	strb	r2, [r3, #7]
	bme280_init(&BME280_sensor, &hi2c1);
 8004e8c:	4903      	ldr	r1, [pc, #12]	@ (8004e9c <bme280_begin+0x2c>)
 8004e8e:	4802      	ldr	r0, [pc, #8]	@ (8004e98 <bme280_begin+0x28>)
 8004e90:	f7fc fc28 	bl	80016e4 <bme280_init>

}
 8004e94:	bf00      	nop
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	20000610 	.word	0x20000610
 8004e9c:	200003d0 	.word	0x200003d0

08004ea0 <bmi_imu_init>:

//BMI sensor struct filled with configuration settings. Then called bmi088_init function.
uint8_t bmi_imu_init(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
	//Acc config
	BMI_sensor.device_config.acc_bandwith = ACC_BWP_OSR4;
 8004ea4:	4b13      	ldr	r3, [pc, #76]	@ (8004ef4 <bmi_imu_init+0x54>)
 8004ea6:	2208      	movs	r2, #8
 8004ea8:	719a      	strb	r2, [r3, #6]
	BMI_sensor.device_config.acc_outputDateRate = ACC_ODR_200;
 8004eaa:	4b12      	ldr	r3, [pc, #72]	@ (8004ef4 <bmi_imu_init+0x54>)
 8004eac:	2209      	movs	r2, #9
 8004eae:	71da      	strb	r2, [r3, #7]
	BMI_sensor.device_config.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8004eb0:	4b10      	ldr	r3, [pc, #64]	@ (8004ef4 <bmi_imu_init+0x54>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	711a      	strb	r2, [r3, #4]
	BMI_sensor.device_config.acc_range = ACC_RANGE_24G;
 8004eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef4 <bmi_imu_init+0x54>)
 8004eb8:	2203      	movs	r2, #3
 8004eba:	715a      	strb	r2, [r3, #5]

	// Gyro config
	BMI_sensor.device_config.gyro_bandWidth = GYRO_BW_116;
 8004ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef4 <bmi_imu_init+0x54>)
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	725a      	strb	r2, [r3, #9]
	BMI_sensor.device_config.gyro_range = GYRO_RANGE_2000;
 8004ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef4 <bmi_imu_init+0x54>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	729a      	strb	r2, [r3, #10]
	BMI_sensor.device_config.gyro_powerMode = GYRO_LPM_NORMAL;
 8004ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef4 <bmi_imu_init+0x54>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	721a      	strb	r2, [r3, #8]

	BMI_sensor.device_config.acc_IRQ = EXTI15_10_IRQn;
 8004ece:	4b09      	ldr	r3, [pc, #36]	@ (8004ef4 <bmi_imu_init+0x54>)
 8004ed0:	2228      	movs	r2, #40	@ 0x28
 8004ed2:	741a      	strb	r2, [r3, #16]
	BMI_sensor.device_config.gyro_IRQ = EXTI15_10_IRQn;
 8004ed4:	4b07      	ldr	r3, [pc, #28]	@ (8004ef4 <bmi_imu_init+0x54>)
 8004ed6:	2228      	movs	r2, #40	@ 0x28
 8004ed8:	745a      	strb	r2, [r3, #17]
	BMI_sensor.device_config.BMI_I2c = &IMU_I2C_HNDLR;
 8004eda:	4b06      	ldr	r3, [pc, #24]	@ (8004ef4 <bmi_imu_init+0x54>)
 8004edc:	4a06      	ldr	r2, [pc, #24]	@ (8004ef8 <bmi_imu_init+0x58>)
 8004ede:	60da      	str	r2, [r3, #12]
	BMI_sensor.device_config.offsets = NULL;	//Offset datas stored in backup sram for saving them unwanted reset.
 8004ee0:	4b04      	ldr	r3, [pc, #16]	@ (8004ef4 <bmi_imu_init+0x54>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	615a      	str	r2, [r3, #20]

	return	bmi088_init(&BMI_sensor);
 8004ee6:	4803      	ldr	r0, [pc, #12]	@ (8004ef4 <bmi_imu_init+0x54>)
 8004ee8:	f7fd f85c 	bl	8001fa4 <bmi088_init>
 8004eec:	4603      	mov	r3, r0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000654 	.word	0x20000654
 8004ef8:	20000424 	.word	0x20000424

08004efc <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_12)
 8004f06:	88fb      	ldrh	r3, [r7, #6]
 8004f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f0c:	d102      	bne.n	8004f14 <HAL_GPIO_EXTI_Callback+0x18>
	{
		bmi088_set_accel_INT(&BMI_sensor);
 8004f0e:	4807      	ldr	r0, [pc, #28]	@ (8004f2c <HAL_GPIO_EXTI_Callback+0x30>)
 8004f10:	f7fd fe78 	bl	8002c04 <bmi088_set_accel_INT>
	}
	if(GPIO_Pin == GPIO_PIN_13)
 8004f14:	88fb      	ldrh	r3, [r7, #6]
 8004f16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f1a:	d102      	bne.n	8004f22 <HAL_GPIO_EXTI_Callback+0x26>
	{
		bmi088_set_gyro_INT(&BMI_sensor);
 8004f1c:	4803      	ldr	r0, [pc, #12]	@ (8004f2c <HAL_GPIO_EXTI_Callback+0x30>)
 8004f1e:	f7fd fe7e 	bl	8002c1e <bmi088_set_gyro_INT>
	}
}
 8004f22:	bf00      	nop
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000654 	.word	0x20000654

08004f30 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	460b      	mov	r3, r1
 8004f3a:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1) {
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a0d      	ldr	r2, [pc, #52]	@ (8004f78 <HAL_UARTEx_RxEventCallback+0x48>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d114      	bne.n	8004f70 <HAL_UARTEx_RxEventCallback+0x40>
        usart1_packet_ready = 1;
 8004f46:	4b0d      	ldr	r3, [pc, #52]	@ (8004f7c <HAL_UARTEx_RxEventCallback+0x4c>)
 8004f48:	2201      	movs	r2, #1
 8004f4a:	701a      	strb	r2, [r3, #0]
        usart1_packet_size = Size;
 8004f4c:	4a0c      	ldr	r2, [pc, #48]	@ (8004f80 <HAL_UARTEx_RxEventCallback+0x50>)
 8004f4e:	887b      	ldrh	r3, [r7, #2]
 8004f50:	8013      	strh	r3, [r2, #0]
        // RX DMA'yı tekrar başlat
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, usart1_rx_buffer, sizeof(usart1_rx_buffer));
 8004f52:	2224      	movs	r2, #36	@ 0x24
 8004f54:	490b      	ldr	r1, [pc, #44]	@ (8004f84 <HAL_UARTEx_RxEventCallback+0x54>)
 8004f56:	480c      	ldr	r0, [pc, #48]	@ (8004f88 <HAL_UARTEx_RxEventCallback+0x58>)
 8004f58:	f007 f81c 	bl	800bf94 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT); // Half-transfer interrupt'ı devre dışı bırak
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f88 <HAL_UARTEx_RxEventCallback+0x58>)
 8004f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	4b08      	ldr	r3, [pc, #32]	@ (8004f88 <HAL_UARTEx_RxEventCallback+0x58>)
 8004f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0208 	bic.w	r2, r2, #8
 8004f6e:	601a      	str	r2, [r3, #0]
    }
}
 8004f70:	bf00      	nop
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40011000 	.word	0x40011000
 8004f7c:	2000073c 	.word	0x2000073c
 8004f80:	2000073e 	.word	0x2000073e
 8004f84:	200006f0 	.word	0x200006f0
 8004f88:	20000508 	.word	0x20000508

08004f8c <HAL_TIM_PeriodElapsedCallback>:

// Timer 2 interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f9c:	d102      	bne.n	8004fa4 <HAL_TIM_PeriodElapsedCallback+0x18>
        tx_timer_flag = 1;
 8004f9e:	4b04      	ldr	r3, [pc, #16]	@ (8004fb0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	701a      	strb	r2, [r3, #0]
    }
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	20000740 	.word	0x20000740

08004fb4 <HAL_UART_TxCpltCallback>:

// USART1 TX DMA tamam callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a05      	ldr	r2, [pc, #20]	@ (8004fd8 <HAL_UART_TxCpltCallback+0x24>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d102      	bne.n	8004fcc <HAL_UART_TxCpltCallback+0x18>
        usart1_tx_busy = 0;
 8004fc6:	4b05      	ldr	r3, [pc, #20]	@ (8004fdc <HAL_UART_TxCpltCallback+0x28>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	701a      	strb	r2, [r3, #0]
    }
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	40011000 	.word	0x40011000
 8004fdc:	20000741 	.word	0x20000741

08004fe0 <uart1_send_packet_dma>:

// USART1 TX DMA başlatma fonksiyonu
void uart1_send_packet_dma(uint8_t *data, uint16_t size)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	807b      	strh	r3, [r7, #2]
    if (!usart1_tx_busy) {
 8004fec:	4b08      	ldr	r3, [pc, #32]	@ (8005010 <uart1_send_packet_dma+0x30>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d108      	bne.n	8005008 <uart1_send_packet_dma+0x28>
        usart1_tx_busy = 1;
 8004ff6:	4b06      	ldr	r3, [pc, #24]	@ (8005010 <uart1_send_packet_dma+0x30>)
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_DMA(&huart1, data, size);
 8004ffc:	887b      	ldrh	r3, [r7, #2]
 8004ffe:	461a      	mov	r2, r3
 8005000:	6879      	ldr	r1, [r7, #4]
 8005002:	4804      	ldr	r0, [pc, #16]	@ (8005014 <uart1_send_packet_dma+0x34>)
 8005004:	f006 ff4a 	bl	800be9c <HAL_UART_Transmit_DMA>
    }
}
 8005008:	bf00      	nop
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	20000741 	.word	0x20000741
 8005014:	20000508 	.word	0x20000508

08005018 <HSD_StatusCheck>:
	// Voltaj
	sprintf(uart_buffer,"Akim: %u  | Voltaj: %u \r\n", v_current_raw, v_voltage_raw);
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
}

void HSD_StatusCheck(){
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
	// PC0 pinini oku
	GPIO_PinState pc0_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 800501e:	2101      	movs	r1, #1
 8005020:	4816      	ldr	r0, [pc, #88]	@ (800507c <HSD_StatusCheck+0x64>)
 8005022:	f004 fb69 	bl	80096f8 <HAL_GPIO_ReadPin>
 8005026:	4603      	mov	r3, r0
 8005028:	71fb      	strb	r3, [r7, #7]
	if (pc0_state == GPIO_PIN_RESET) { // low ise
 800502a:	79fb      	ldrb	r3, [r7, #7]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d106      	bne.n	800503e <HSD_StatusCheck+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // PB10 LED yak
 8005030:	2200      	movs	r2, #0
 8005032:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005036:	4812      	ldr	r0, [pc, #72]	@ (8005080 <HSD_StatusCheck+0x68>)
 8005038:	f004 fb76 	bl	8009728 <HAL_GPIO_WritePin>
 800503c:	e005      	b.n	800504a <HSD_StatusCheck+0x32>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // değilse söndür
 800503e:	2201      	movs	r2, #1
 8005040:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005044:	480e      	ldr	r0, [pc, #56]	@ (8005080 <HSD_StatusCheck+0x68>)
 8005046:	f004 fb6f 	bl	8009728 <HAL_GPIO_WritePin>
	}

	// PC5 pinini oku
	GPIO_PinState pc5_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 800504a:	2120      	movs	r1, #32
 800504c:	480b      	ldr	r0, [pc, #44]	@ (800507c <HSD_StatusCheck+0x64>)
 800504e:	f004 fb53 	bl	80096f8 <HAL_GPIO_ReadPin>
 8005052:	4603      	mov	r3, r0
 8005054:	71bb      	strb	r3, [r7, #6]
	if (pc5_state == GPIO_PIN_RESET) { // low ise
 8005056:	79bb      	ldrb	r3, [r7, #6]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d105      	bne.n	8005068 <HSD_StatusCheck+0x50>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // PB2 LED yak
 800505c:	2201      	movs	r2, #1
 800505e:	2104      	movs	r1, #4
 8005060:	4807      	ldr	r0, [pc, #28]	@ (8005080 <HSD_StatusCheck+0x68>)
 8005062:	f004 fb61 	bl	8009728 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // değilse söndür
	}
}
 8005066:	e004      	b.n	8005072 <HSD_StatusCheck+0x5a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // değilse söndür
 8005068:	2200      	movs	r2, #0
 800506a:	2104      	movs	r1, #4
 800506c:	4804      	ldr	r0, [pc, #16]	@ (8005080 <HSD_StatusCheck+0x68>)
 800506e:	f004 fb5b 	bl	8009728 <HAL_GPIO_WritePin>
}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	40020800 	.word	0x40020800
 8005080:	40020400 	.word	0x40020400

08005084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005088:	b672      	cpsid	i
}
 800508a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800508c:	bf00      	nop
 800508e:	e7fd      	b.n	800508c <Error_Handler+0x8>

08005090 <check_sum_hesapla_sit>:
        check_sum += normal_paket[i];
    }
    return (unsigned char) (check_sum % 256);
}

unsigned char check_sum_hesapla_sit(int a){
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 800509c:	2300      	movs	r3, #0
 800509e:	60bb      	str	r3, [r7, #8]
 80050a0:	e00a      	b.n	80050b8 <check_sum_hesapla_sit+0x28>
        check_sum += sit_paket[i];
 80050a2:	4a0e      	ldr	r2, [pc, #56]	@ (80050dc <check_sum_hesapla_sit+0x4c>)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4413      	add	r3, r2
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	3301      	adds	r3, #1
 80050b6:	60bb      	str	r3, [r7, #8]
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	429a      	cmp	r2, r3
 80050be:	dbf0      	blt.n	80050a2 <check_sum_hesapla_sit+0x12>
    }
    return (unsigned char) (check_sum % 256);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	425a      	negs	r2, r3
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	bf58      	it	pl
 80050ca:	4253      	negpl	r3, r2
 80050cc:	b2db      	uxtb	r3, r3
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	2000074c 	.word	0x2000074c

080050e0 <round2>:

// Float değerleri iki ondalık basamağa yuvarlamak için yardımcı fonksiyon
double round2(double value) {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	ed87 0b00 	vstr	d0, [r7]
    return round(value * 100.0) / 100.0;
 80050ea:	f04f 0200 	mov.w	r2, #0
 80050ee:	4b10      	ldr	r3, [pc, #64]	@ (8005130 <round2+0x50>)
 80050f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050f4:	f7fb faa0 	bl	8000638 <__aeabi_dmul>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	ec43 2b17 	vmov	d7, r2, r3
 8005100:	eeb0 0a47 	vmov.f32	s0, s14
 8005104:	eef0 0a67 	vmov.f32	s1, s15
 8005108:	f00b f84a 	bl	80101a0 <round>
 800510c:	ec51 0b10 	vmov	r0, r1, d0
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	4b06      	ldr	r3, [pc, #24]	@ (8005130 <round2+0x50>)
 8005116:	f7fb fbb9 	bl	800088c <__aeabi_ddiv>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	ec43 2b17 	vmov	d7, r2, r3
}
 8005122:	eeb0 0a47 	vmov.f32	s0, s14
 8005126:	eef0 0a67 	vmov.f32	s1, s15
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40590000 	.word	0x40590000

08005134 <addDataPacketSit>:
  normal_paket[56] = check_sum_hesapla_normal(56); // Check_sum = check_sum_hesapla();
  normal_paket[57] = 0x0D; // Sabit
  normal_paket[58] = 0x0A;
}

void addDataPacketSit(BME_280_t* BME, bmi088_struct_t* BMI){
 8005134:	b580      	push	{r7, lr}
 8005136:	b08a      	sub	sp, #40	@ 0x28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  sit_paket[0] = 0xAB; // Sabit
 800513e:	4b8f      	ldr	r3, [pc, #572]	@ (800537c <addDataPacketSit+0x248>)
 8005140:	22ab      	movs	r2, #171	@ 0xab
 8005142:	701a      	strb	r2, [r3, #0]

  FLOAT32_UINT8_DONUSTURUCU irtifa_float32_uint8_donusturucu;
  irtifa_float32_uint8_donusturucu.sayi = (float)round2(BME->base_altitude + BME->altitude); // Irtifa degerinin atamasini yapiyoruz.
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	edd3 7a08 	vldr	s15, [r3, #32]
 8005150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005154:	ee17 0a90 	vmov	r0, s15
 8005158:	f7fb fa16 	bl	8000588 <__aeabi_f2d>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	ec43 2b10 	vmov	d0, r2, r3
 8005164:	f7ff ffbc 	bl	80050e0 <round2>
 8005168:	ec53 2b10 	vmov	r2, r3, d0
 800516c:	4610      	mov	r0, r2
 800516e:	4619      	mov	r1, r3
 8005170:	f7fb fd3a 	bl	8000be8 <__aeabi_d2f>
 8005174:	4603      	mov	r3, r0
 8005176:	627b      	str	r3, [r7, #36]	@ 0x24
  sit_paket[1] = irtifa_float32_uint8_donusturucu.array[3];
 8005178:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800517c:	4b7f      	ldr	r3, [pc, #508]	@ (800537c <addDataPacketSit+0x248>)
 800517e:	705a      	strb	r2, [r3, #1]
  sit_paket[2] = irtifa_float32_uint8_donusturucu.array[2];
 8005180:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005184:	4b7d      	ldr	r3, [pc, #500]	@ (800537c <addDataPacketSit+0x248>)
 8005186:	709a      	strb	r2, [r3, #2]
  sit_paket[3] = irtifa_float32_uint8_donusturucu.array[1];
 8005188:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800518c:	4b7b      	ldr	r3, [pc, #492]	@ (800537c <addDataPacketSit+0x248>)
 800518e:	70da      	strb	r2, [r3, #3]
  sit_paket[4] = irtifa_float32_uint8_donusturucu.array[0];
 8005190:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005194:	4b79      	ldr	r3, [pc, #484]	@ (800537c <addDataPacketSit+0x248>)
 8005196:	711a      	strb	r2, [r3, #4]

  FLOAT32_UINT8_DONUSTURUCU basinc_float32_uint8_donusturucu;
  basinc_float32_uint8_donusturucu.sayi = (float)round2(BME->pressure); // Roket GPS Irtifa degerinin atamasini yapiyoruz.
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	4618      	mov	r0, r3
 800519e:	f7fb f9f3 	bl	8000588 <__aeabi_f2d>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	ec43 2b10 	vmov	d0, r2, r3
 80051aa:	f7ff ff99 	bl	80050e0 <round2>
 80051ae:	ec53 2b10 	vmov	r2, r3, d0
 80051b2:	4610      	mov	r0, r2
 80051b4:	4619      	mov	r1, r3
 80051b6:	f7fb fd17 	bl	8000be8 <__aeabi_d2f>
 80051ba:	4603      	mov	r3, r0
 80051bc:	623b      	str	r3, [r7, #32]
  sit_paket[5] = basinc_float32_uint8_donusturucu.array[3];
 80051be:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80051c2:	4b6e      	ldr	r3, [pc, #440]	@ (800537c <addDataPacketSit+0x248>)
 80051c4:	715a      	strb	r2, [r3, #5]
  sit_paket[6] = basinc_float32_uint8_donusturucu.array[2];
 80051c6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80051ca:	4b6c      	ldr	r3, [pc, #432]	@ (800537c <addDataPacketSit+0x248>)
 80051cc:	719a      	strb	r2, [r3, #6]
  sit_paket[7] = basinc_float32_uint8_donusturucu.array[1];
 80051ce:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80051d2:	4b6a      	ldr	r3, [pc, #424]	@ (800537c <addDataPacketSit+0x248>)
 80051d4:	71da      	strb	r2, [r3, #7]
  sit_paket[8] = basinc_float32_uint8_donusturucu.array[0];
 80051d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80051da:	4b68      	ldr	r3, [pc, #416]	@ (800537c <addDataPacketSit+0x248>)
 80051dc:	721a      	strb	r2, [r3, #8]

  FLOAT32_UINT8_DONUSTURUCU ivme_x_float32_uint8_donusturucu;
  ivme_x_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.acc_x); // Ivme X degerinin atamasini yapiyoruz.
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fb f9d0 	bl	8000588 <__aeabi_f2d>
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	ec43 2b10 	vmov	d0, r2, r3
 80051f0:	f7ff ff76 	bl	80050e0 <round2>
 80051f4:	ec53 2b10 	vmov	r2, r3, d0
 80051f8:	4610      	mov	r0, r2
 80051fa:	4619      	mov	r1, r3
 80051fc:	f7fb fcf4 	bl	8000be8 <__aeabi_d2f>
 8005200:	4603      	mov	r3, r0
 8005202:	61fb      	str	r3, [r7, #28]
  sit_paket[9] = ivme_x_float32_uint8_donusturucu.array[3];
 8005204:	7ffa      	ldrb	r2, [r7, #31]
 8005206:	4b5d      	ldr	r3, [pc, #372]	@ (800537c <addDataPacketSit+0x248>)
 8005208:	725a      	strb	r2, [r3, #9]
  sit_paket[10] = ivme_x_float32_uint8_donusturucu.array[2];
 800520a:	7fba      	ldrb	r2, [r7, #30]
 800520c:	4b5b      	ldr	r3, [pc, #364]	@ (800537c <addDataPacketSit+0x248>)
 800520e:	729a      	strb	r2, [r3, #10]
  sit_paket[11] = ivme_x_float32_uint8_donusturucu.array[1];
 8005210:	7f7a      	ldrb	r2, [r7, #29]
 8005212:	4b5a      	ldr	r3, [pc, #360]	@ (800537c <addDataPacketSit+0x248>)
 8005214:	72da      	strb	r2, [r3, #11]
  sit_paket[12] = ivme_x_float32_uint8_donusturucu.array[0];
 8005216:	7f3a      	ldrb	r2, [r7, #28]
 8005218:	4b58      	ldr	r3, [pc, #352]	@ (800537c <addDataPacketSit+0x248>)
 800521a:	731a      	strb	r2, [r3, #12]

  FLOAT32_UINT8_DONUSTURUCU ivme_y_float32_uint8_donusturucu;
  ivme_y_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.acc_y); // Ivme Y degerinin atamasini yapiyoruz.
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005220:	4618      	mov	r0, r3
 8005222:	f7fb f9b1 	bl	8000588 <__aeabi_f2d>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	ec43 2b10 	vmov	d0, r2, r3
 800522e:	f7ff ff57 	bl	80050e0 <round2>
 8005232:	ec53 2b10 	vmov	r2, r3, d0
 8005236:	4610      	mov	r0, r2
 8005238:	4619      	mov	r1, r3
 800523a:	f7fb fcd5 	bl	8000be8 <__aeabi_d2f>
 800523e:	4603      	mov	r3, r0
 8005240:	61bb      	str	r3, [r7, #24]
  sit_paket[13] = ivme_y_float32_uint8_donusturucu.array[3];
 8005242:	7efa      	ldrb	r2, [r7, #27]
 8005244:	4b4d      	ldr	r3, [pc, #308]	@ (800537c <addDataPacketSit+0x248>)
 8005246:	735a      	strb	r2, [r3, #13]
  sit_paket[14] = ivme_y_float32_uint8_donusturucu.array[2];
 8005248:	7eba      	ldrb	r2, [r7, #26]
 800524a:	4b4c      	ldr	r3, [pc, #304]	@ (800537c <addDataPacketSit+0x248>)
 800524c:	739a      	strb	r2, [r3, #14]
  sit_paket[15] = ivme_y_float32_uint8_donusturucu.array[1];
 800524e:	7e7a      	ldrb	r2, [r7, #25]
 8005250:	4b4a      	ldr	r3, [pc, #296]	@ (800537c <addDataPacketSit+0x248>)
 8005252:	73da      	strb	r2, [r3, #15]
  sit_paket[16] = ivme_y_float32_uint8_donusturucu.array[0];
 8005254:	7e3a      	ldrb	r2, [r7, #24]
 8005256:	4b49      	ldr	r3, [pc, #292]	@ (800537c <addDataPacketSit+0x248>)
 8005258:	741a      	strb	r2, [r3, #16]

  FLOAT32_UINT8_DONUSTURUCU ivme_z_float32_uint8_donusturucu;
  ivme_z_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.acc_z); // Ivme Z degerinin atamasini yapiyoruz.
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800525e:	4618      	mov	r0, r3
 8005260:	f7fb f992 	bl	8000588 <__aeabi_f2d>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	ec43 2b10 	vmov	d0, r2, r3
 800526c:	f7ff ff38 	bl	80050e0 <round2>
 8005270:	ec53 2b10 	vmov	r2, r3, d0
 8005274:	4610      	mov	r0, r2
 8005276:	4619      	mov	r1, r3
 8005278:	f7fb fcb6 	bl	8000be8 <__aeabi_d2f>
 800527c:	4603      	mov	r3, r0
 800527e:	617b      	str	r3, [r7, #20]
  sit_paket[17] = ivme_z_float32_uint8_donusturucu.array[3];
 8005280:	7dfa      	ldrb	r2, [r7, #23]
 8005282:	4b3e      	ldr	r3, [pc, #248]	@ (800537c <addDataPacketSit+0x248>)
 8005284:	745a      	strb	r2, [r3, #17]
  sit_paket[18] = ivme_z_float32_uint8_donusturucu.array[2];
 8005286:	7dba      	ldrb	r2, [r7, #22]
 8005288:	4b3c      	ldr	r3, [pc, #240]	@ (800537c <addDataPacketSit+0x248>)
 800528a:	749a      	strb	r2, [r3, #18]
  sit_paket[19] = ivme_z_float32_uint8_donusturucu.array[1];
 800528c:	7d7a      	ldrb	r2, [r7, #21]
 800528e:	4b3b      	ldr	r3, [pc, #236]	@ (800537c <addDataPacketSit+0x248>)
 8005290:	74da      	strb	r2, [r3, #19]
  sit_paket[20] = ivme_z_float32_uint8_donusturucu.array[0];
 8005292:	7d3a      	ldrb	r2, [r7, #20]
 8005294:	4b39      	ldr	r3, [pc, #228]	@ (800537c <addDataPacketSit+0x248>)
 8005296:	751a      	strb	r2, [r3, #20]

  FLOAT32_UINT8_DONUSTURUCU jiroskop_x_float32_uint8_donusturucu;
  jiroskop_x_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.angle_x); // Jiroskop X degerinin atamasini yapiyoruz.
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529c:	4618      	mov	r0, r3
 800529e:	f7fb f973 	bl	8000588 <__aeabi_f2d>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	ec43 2b10 	vmov	d0, r2, r3
 80052aa:	f7ff ff19 	bl	80050e0 <round2>
 80052ae:	ec53 2b10 	vmov	r2, r3, d0
 80052b2:	4610      	mov	r0, r2
 80052b4:	4619      	mov	r1, r3
 80052b6:	f7fb fc97 	bl	8000be8 <__aeabi_d2f>
 80052ba:	4603      	mov	r3, r0
 80052bc:	613b      	str	r3, [r7, #16]
  sit_paket[21] = jiroskop_x_float32_uint8_donusturucu.array[3];
 80052be:	7cfa      	ldrb	r2, [r7, #19]
 80052c0:	4b2e      	ldr	r3, [pc, #184]	@ (800537c <addDataPacketSit+0x248>)
 80052c2:	755a      	strb	r2, [r3, #21]
  sit_paket[22] = jiroskop_x_float32_uint8_donusturucu.array[2];
 80052c4:	7cba      	ldrb	r2, [r7, #18]
 80052c6:	4b2d      	ldr	r3, [pc, #180]	@ (800537c <addDataPacketSit+0x248>)
 80052c8:	759a      	strb	r2, [r3, #22]
  sit_paket[23] = jiroskop_x_float32_uint8_donusturucu.array[1];
 80052ca:	7c7a      	ldrb	r2, [r7, #17]
 80052cc:	4b2b      	ldr	r3, [pc, #172]	@ (800537c <addDataPacketSit+0x248>)
 80052ce:	75da      	strb	r2, [r3, #23]
  sit_paket[24] = jiroskop_x_float32_uint8_donusturucu.array[0];
 80052d0:	7c3a      	ldrb	r2, [r7, #16]
 80052d2:	4b2a      	ldr	r3, [pc, #168]	@ (800537c <addDataPacketSit+0x248>)
 80052d4:	761a      	strb	r2, [r3, #24]

  FLOAT32_UINT8_DONUSTURUCU jiroskop_y_float32_uint8_donusturucu;
  jiroskop_y_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.angle_y); // Jiroskop Y degerinin atamasini yapiyoruz.
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fb f954 	bl	8000588 <__aeabi_f2d>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	ec43 2b10 	vmov	d0, r2, r3
 80052e8:	f7ff fefa 	bl	80050e0 <round2>
 80052ec:	ec53 2b10 	vmov	r2, r3, d0
 80052f0:	4610      	mov	r0, r2
 80052f2:	4619      	mov	r1, r3
 80052f4:	f7fb fc78 	bl	8000be8 <__aeabi_d2f>
 80052f8:	4603      	mov	r3, r0
 80052fa:	60fb      	str	r3, [r7, #12]
  sit_paket[25] = jiroskop_y_float32_uint8_donusturucu.array[3];
 80052fc:	7bfa      	ldrb	r2, [r7, #15]
 80052fe:	4b1f      	ldr	r3, [pc, #124]	@ (800537c <addDataPacketSit+0x248>)
 8005300:	765a      	strb	r2, [r3, #25]
  sit_paket[26] = jiroskop_y_float32_uint8_donusturucu.array[2];
 8005302:	7bba      	ldrb	r2, [r7, #14]
 8005304:	4b1d      	ldr	r3, [pc, #116]	@ (800537c <addDataPacketSit+0x248>)
 8005306:	769a      	strb	r2, [r3, #26]
  sit_paket[27] = jiroskop_y_float32_uint8_donusturucu.array[1];
 8005308:	7b7a      	ldrb	r2, [r7, #13]
 800530a:	4b1c      	ldr	r3, [pc, #112]	@ (800537c <addDataPacketSit+0x248>)
 800530c:	76da      	strb	r2, [r3, #27]
  sit_paket[28] = jiroskop_y_float32_uint8_donusturucu.array[0];
 800530e:	7b3a      	ldrb	r2, [r7, #12]
 8005310:	4b1a      	ldr	r3, [pc, #104]	@ (800537c <addDataPacketSit+0x248>)
 8005312:	771a      	strb	r2, [r3, #28]
  FLOAT32_UINT8_DONUSTURUCU jiroskop_z_float32_uint8_donusturucu;
  jiroskop_z_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.angle_z); // Jiroskop Z degerinin atamasini yapiyoruz.
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005318:	4618      	mov	r0, r3
 800531a:	f7fb f935 	bl	8000588 <__aeabi_f2d>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	ec43 2b10 	vmov	d0, r2, r3
 8005326:	f7ff fedb 	bl	80050e0 <round2>
 800532a:	ec53 2b10 	vmov	r2, r3, d0
 800532e:	4610      	mov	r0, r2
 8005330:	4619      	mov	r1, r3
 8005332:	f7fb fc59 	bl	8000be8 <__aeabi_d2f>
 8005336:	4603      	mov	r3, r0
 8005338:	60bb      	str	r3, [r7, #8]
  sit_paket[29] = jiroskop_z_float32_uint8_donusturucu.array[3];
 800533a:	7afa      	ldrb	r2, [r7, #11]
 800533c:	4b0f      	ldr	r3, [pc, #60]	@ (800537c <addDataPacketSit+0x248>)
 800533e:	775a      	strb	r2, [r3, #29]
  sit_paket[30] = jiroskop_z_float32_uint8_donusturucu.array[2];
 8005340:	7aba      	ldrb	r2, [r7, #10]
 8005342:	4b0e      	ldr	r3, [pc, #56]	@ (800537c <addDataPacketSit+0x248>)
 8005344:	779a      	strb	r2, [r3, #30]
  sit_paket[31] = jiroskop_z_float32_uint8_donusturucu.array[1];
 8005346:	7a7a      	ldrb	r2, [r7, #9]
 8005348:	4b0c      	ldr	r3, [pc, #48]	@ (800537c <addDataPacketSit+0x248>)
 800534a:	77da      	strb	r2, [r3, #31]
  sit_paket[32] = jiroskop_z_float32_uint8_donusturucu.array[0];
 800534c:	7a3a      	ldrb	r2, [r7, #8]
 800534e:	4b0b      	ldr	r3, [pc, #44]	@ (800537c <addDataPacketSit+0x248>)
 8005350:	f883 2020 	strb.w	r2, [r3, #32]

  sit_paket[33] = check_sum_hesapla_sit(33); // Check_sum = check_sum_hesapla();
 8005354:	2021      	movs	r0, #33	@ 0x21
 8005356:	f7ff fe9b 	bl	8005090 <check_sum_hesapla_sit>
 800535a:	4603      	mov	r3, r0
 800535c:	461a      	mov	r2, r3
 800535e:	4b07      	ldr	r3, [pc, #28]	@ (800537c <addDataPacketSit+0x248>)
 8005360:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  sit_paket[34] = 0x0D;
 8005364:	4b05      	ldr	r3, [pc, #20]	@ (800537c <addDataPacketSit+0x248>)
 8005366:	220d      	movs	r2, #13
 8005368:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  sit_paket[35] = 0x0A;
 800536c:	4b03      	ldr	r3, [pc, #12]	@ (800537c <addDataPacketSit+0x248>)
 800536e:	220a      	movs	r2, #10
 8005370:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

}
 8005374:	bf00      	nop
 8005376:	3728      	adds	r7, #40	@ 0x28
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	2000074c 	.word	0x2000074c

08005380 <uint8_arrayi_float32_ye_donustur>:

float uint8_arrayi_float32_ye_donustur(uint8_t byte_array_u8[4]) {
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
    FLOAT32_UINT8_DONUSTURUCU float32_uint8_donusturucu;
    float32_uint8_donusturucu.array[0] = byte_array_u8[3];
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	78db      	ldrb	r3, [r3, #3]
 800538c:	733b      	strb	r3, [r7, #12]
    float32_uint8_donusturucu.array[1] = byte_array_u8[2];
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	789b      	ldrb	r3, [r3, #2]
 8005392:	737b      	strb	r3, [r7, #13]
    float32_uint8_donusturucu.array[2] = byte_array_u8[1];
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	785b      	ldrb	r3, [r3, #1]
 8005398:	73bb      	strb	r3, [r7, #14]
    float32_uint8_donusturucu.array[3] = byte_array_u8[0];
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	73fb      	strb	r3, [r7, #15]
    return float32_uint8_donusturucu.sayi;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	ee07 3a90 	vmov	s15, r3
}
 80053a6:	eeb0 0a67 	vmov.f32	s0, s15
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <ekf_predict>:
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++)
            P[i][j] = (i == j) ? 1e-3f : 0.0f;
}

void ekf_predict(float gx, float gy, float gz, float dt) {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b09e      	sub	sp, #120	@ 0x78
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80053be:	edc7 0a02 	vstr	s1, [r7, #8]
 80053c2:	ed87 1a01 	vstr	s2, [r7, #4]
 80053c6:	edc7 1a00 	vstr	s3, [r7]

    // Gyro'dan omega matrisi
    float Omega[4][4] = {
 80053ca:	f04f 0300 	mov.w	r3, #0
 80053ce:	623b      	str	r3, [r7, #32]
        {0, -gx, -gy, -gz},
 80053d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80053d4:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 80053d8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        {0, -gx, -gy, -gz},
 80053dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80053e0:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 80053e4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        {0, -gx, -gy, -gz},
 80053e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80053ec:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 80053f0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	63bb      	str	r3, [r7, #56]	@ 0x38
        {gx,  0,  gz, -gy},
 8005402:	edd7 7a02 	vldr	s15, [r7, #8]
 8005406:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 800540a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	643b      	str	r3, [r7, #64]	@ 0x40
        {gy, -gz,  0,  gx},
 8005412:	edd7 7a01 	vldr	s15, [r7, #4]
 8005416:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 800541a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 800541e:	f04f 0300 	mov.w	r3, #0
 8005422:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	653b      	str	r3, [r7, #80]	@ 0x50
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	657b      	str	r3, [r7, #84]	@ 0x54
        {gz,  gy, -gx,  0}
 8005430:	edd7 7a03 	vldr	s15, [r7, #12]
 8005434:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005438:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	65fb      	str	r3, [r7, #92]	@ 0x5c
    };

    // dq = 0.5 * Omega * q
    float dq[4] = {0};
 8005442:	f107 0310 	add.w	r3, r7, #16
 8005446:	2200      	movs	r2, #0
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	605a      	str	r2, [r3, #4]
 800544c:	609a      	str	r2, [r3, #8]
 800544e:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < 4; i++) {
 8005450:	2300      	movs	r3, #0
 8005452:	677b      	str	r3, [r7, #116]	@ 0x74
 8005454:	e043      	b.n	80054de <ekf_predict+0x12a>
        for (int j = 0; j < 4; j++) {
 8005456:	2300      	movs	r3, #0
 8005458:	673b      	str	r3, [r7, #112]	@ 0x70
 800545a:	e024      	b.n	80054a6 <ekf_predict+0xf2>
            dq[i] += Omega[i][j] * q[j];
 800545c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	3378      	adds	r3, #120	@ 0x78
 8005462:	443b      	add	r3, r7
 8005464:	3b68      	subs	r3, #104	@ 0x68
 8005466:	ed93 7a00 	vldr	s14, [r3]
 800546a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800546c:	009a      	lsls	r2, r3, #2
 800546e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	3378      	adds	r3, #120	@ 0x78
 8005476:	443b      	add	r3, r7
 8005478:	3b58      	subs	r3, #88	@ 0x58
 800547a:	edd3 6a00 	vldr	s13, [r3]
 800547e:	4a5d      	ldr	r2, [pc, #372]	@ (80055f4 <ekf_predict+0x240>)
 8005480:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	edd3 7a00 	vldr	s15, [r3]
 800548a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800548e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005492:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	3378      	adds	r3, #120	@ 0x78
 8005498:	443b      	add	r3, r7
 800549a:	3b68      	subs	r3, #104	@ 0x68
 800549c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 4; j++) {
 80054a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054a2:	3301      	adds	r3, #1
 80054a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80054a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	ddd7      	ble.n	800545c <ekf_predict+0xa8>
        }
        dq[i] *= 0.5f * dt;
 80054ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	3378      	adds	r3, #120	@ 0x78
 80054b2:	443b      	add	r3, r7
 80054b4:	3b68      	subs	r3, #104	@ 0x68
 80054b6:	ed93 7a00 	vldr	s14, [r3]
 80054ba:	edd7 7a00 	vldr	s15, [r7]
 80054be:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80054c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80054c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	3378      	adds	r3, #120	@ 0x78
 80054d0:	443b      	add	r3, r7
 80054d2:	3b68      	subs	r3, #104	@ 0x68
 80054d4:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 80054d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054da:	3301      	adds	r3, #1
 80054dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80054de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	ddb8      	ble.n	8005456 <ekf_predict+0xa2>
    }

    // q = q + dq
    for (int i = 0; i < 4; i++)
 80054e4:	2300      	movs	r3, #0
 80054e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80054e8:	e017      	b.n	800551a <ekf_predict+0x166>
        q[i] += dq[i];
 80054ea:	4a42      	ldr	r2, [pc, #264]	@ (80055f4 <ekf_predict+0x240>)
 80054ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	ed93 7a00 	vldr	s14, [r3]
 80054f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	3378      	adds	r3, #120	@ 0x78
 80054fc:	443b      	add	r3, r7
 80054fe:	3b68      	subs	r3, #104	@ 0x68
 8005500:	edd3 7a00 	vldr	s15, [r3]
 8005504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005508:	4a3a      	ldr	r2, [pc, #232]	@ (80055f4 <ekf_predict+0x240>)
 800550a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8005514:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005516:	3301      	adds	r3, #1
 8005518:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800551a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800551c:	2b03      	cmp	r3, #3
 800551e:	dde4      	ble.n	80054ea <ekf_predict+0x136>

    // Normalize
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8005520:	4b34      	ldr	r3, [pc, #208]	@ (80055f4 <ekf_predict+0x240>)
 8005522:	ed93 7a00 	vldr	s14, [r3]
 8005526:	4b33      	ldr	r3, [pc, #204]	@ (80055f4 <ekf_predict+0x240>)
 8005528:	edd3 7a00 	vldr	s15, [r3]
 800552c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005530:	4b30      	ldr	r3, [pc, #192]	@ (80055f4 <ekf_predict+0x240>)
 8005532:	edd3 6a01 	vldr	s13, [r3, #4]
 8005536:	4b2f      	ldr	r3, [pc, #188]	@ (80055f4 <ekf_predict+0x240>)
 8005538:	edd3 7a01 	vldr	s15, [r3, #4]
 800553c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005540:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005544:	4b2b      	ldr	r3, [pc, #172]	@ (80055f4 <ekf_predict+0x240>)
 8005546:	edd3 6a02 	vldr	s13, [r3, #8]
 800554a:	4b2a      	ldr	r3, [pc, #168]	@ (80055f4 <ekf_predict+0x240>)
 800554c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005550:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005554:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005558:	4b26      	ldr	r3, [pc, #152]	@ (80055f4 <ekf_predict+0x240>)
 800555a:	edd3 6a03 	vldr	s13, [r3, #12]
 800555e:	4b25      	ldr	r3, [pc, #148]	@ (80055f4 <ekf_predict+0x240>)
 8005560:	edd3 7a03 	vldr	s15, [r3, #12]
 8005564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800556c:	eeb0 0a67 	vmov.f32	s0, s15
 8005570:	f00a fcac 	bl	800fecc <sqrtf>
 8005574:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
    for (int i = 0; i < 4; i++)
 8005578:	2300      	movs	r3, #0
 800557a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800557c:	e012      	b.n	80055a4 <ekf_predict+0x1f0>
        q[i] /= norm;
 800557e:	4a1d      	ldr	r2, [pc, #116]	@ (80055f4 <ekf_predict+0x240>)
 8005580:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	edd3 6a00 	vldr	s13, [r3]
 800558a:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800558e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005592:	4a18      	ldr	r2, [pc, #96]	@ (80055f4 <ekf_predict+0x240>)
 8005594:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 800559e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055a0:	3301      	adds	r3, #1
 80055a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	dde9      	ble.n	800557e <ekf_predict+0x1ca>

    // P = P + Q
    for (int i = 0; i < 4; i++)
 80055aa:	2300      	movs	r3, #0
 80055ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80055ae:	e018      	b.n	80055e2 <ekf_predict+0x22e>
        P[i][i] += Q_val;
 80055b0:	4911      	ldr	r1, [pc, #68]	@ (80055f8 <ekf_predict+0x244>)
 80055b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80055b4:	4613      	mov	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	440b      	add	r3, r1
 80055be:	edd3 7a00 	vldr	s15, [r3]
 80055c2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80055fc <ekf_predict+0x248>
 80055c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80055ca:	490b      	ldr	r1, [pc, #44]	@ (80055f8 <ekf_predict+0x244>)
 80055cc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 80055dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055de:	3301      	adds	r3, #1
 80055e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80055e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	dde3      	ble.n	80055b0 <ekf_predict+0x1fc>
}
 80055e8:	bf00      	nop
 80055ea:	bf00      	nop
 80055ec:	3778      	adds	r7, #120	@ 0x78
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20000018 	.word	0x20000018
 80055f8:	20000770 	.word	0x20000770
 80055fc:	3727c5ac 	.word	0x3727c5ac

08005600 <quaternionToYaw1>:

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
    return acosf(safeValue) * (180.0f / 3.14f);
}

float quaternionToYaw1(){
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 8005606:	4b2a      	ldr	r3, [pc, #168]	@ (80056b0 <quaternionToYaw1+0xb0>)
 8005608:	ed93 7a01 	vldr	s14, [r3, #4]
 800560c:	4b28      	ldr	r3, [pc, #160]	@ (80056b0 <quaternionToYaw1+0xb0>)
 800560e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005612:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005616:	4b26      	ldr	r3, [pc, #152]	@ (80056b0 <quaternionToYaw1+0xb0>)
 8005618:	edd3 6a00 	vldr	s13, [r3]
 800561c:	4b24      	ldr	r3, [pc, #144]	@ (80056b0 <quaternionToYaw1+0xb0>)
 800561e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005622:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800562a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800562e:	4b20      	ldr	r3, [pc, #128]	@ (80056b0 <quaternionToYaw1+0xb0>)
 8005630:	ed93 7a00 	vldr	s14, [r3]
 8005634:	4b1e      	ldr	r3, [pc, #120]	@ (80056b0 <quaternionToYaw1+0xb0>)
 8005636:	edd3 7a00 	vldr	s15, [r3]
 800563a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800563e:	4b1c      	ldr	r3, [pc, #112]	@ (80056b0 <quaternionToYaw1+0xb0>)
 8005640:	edd3 6a01 	vldr	s13, [r3, #4]
 8005644:	4b1a      	ldr	r3, [pc, #104]	@ (80056b0 <quaternionToYaw1+0xb0>)
 8005646:	edd3 7a01 	vldr	s15, [r3, #4]
 800564a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800564e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005652:	4b17      	ldr	r3, [pc, #92]	@ (80056b0 <quaternionToYaw1+0xb0>)
 8005654:	edd3 6a02 	vldr	s13, [r3, #8]
 8005658:	4b15      	ldr	r3, [pc, #84]	@ (80056b0 <quaternionToYaw1+0xb0>)
 800565a:	edd3 7a02 	vldr	s15, [r3, #8]
 800565e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005662:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005666:	4b12      	ldr	r3, [pc, #72]	@ (80056b0 <quaternionToYaw1+0xb0>)
 8005668:	edd3 6a03 	vldr	s13, [r3, #12]
 800566c:	4b10      	ldr	r3, [pc, #64]	@ (80056b0 <quaternionToYaw1+0xb0>)
 800566e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800567a:	eef0 0a67 	vmov.f32	s1, s15
 800567e:	eeb0 0a46 	vmov.f32	s0, s12
 8005682:	f00a fc21 	bl	800fec8 <atan2f>
 8005686:	eef0 7a40 	vmov.f32	s15, s0
 800568a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80056b4 <quaternionToYaw1+0xb4>
 800568e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005692:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80056b8 <quaternionToYaw1+0xb8>
 8005696:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800569a:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	ee07 3a90 	vmov	s15, r3
}
 80056a4:	eeb0 0a67 	vmov.f32	s0, s15
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20000018 	.word	0x20000018
 80056b4:	43340000 	.word	0x43340000
 80056b8:	40490fd0 	.word	0x40490fd0

080056bc <quaternionToPitch1>:

float quaternionToPitch1(){
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 80056c2:	4b17      	ldr	r3, [pc, #92]	@ (8005720 <quaternionToPitch1+0x64>)
 80056c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80056c8:	4b15      	ldr	r3, [pc, #84]	@ (8005720 <quaternionToPitch1+0x64>)
 80056ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80056ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056d2:	4b13      	ldr	r3, [pc, #76]	@ (8005720 <quaternionToPitch1+0x64>)
 80056d4:	edd3 6a00 	vldr	s13, [r3]
 80056d8:	4b11      	ldr	r3, [pc, #68]	@ (8005720 <quaternionToPitch1+0x64>)
 80056da:	edd3 7a02 	vldr	s15, [r3, #8]
 80056de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80056ea:	eeb0 0a67 	vmov.f32	s0, s15
 80056ee:	f00a fbbf 	bl	800fe70 <asinf>
 80056f2:	eef0 7a40 	vmov.f32	s15, s0
 80056f6:	eef1 7a67 	vneg.f32	s15, s15
 80056fa:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005724 <quaternionToPitch1+0x68>
 80056fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005702:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005728 <quaternionToPitch1+0x6c>
 8005706:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800570a:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	ee07 3a90 	vmov	s15, r3
}
 8005714:	eeb0 0a67 	vmov.f32	s0, s15
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000018 	.word	0x20000018
 8005724:	43340000 	.word	0x43340000
 8005728:	40490fd0 	.word	0x40490fd0

0800572c <quaternionToRoll1>:

float quaternionToRoll1(){
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 8005732:	4b2a      	ldr	r3, [pc, #168]	@ (80057dc <quaternionToRoll1+0xb0>)
 8005734:	ed93 7a00 	vldr	s14, [r3]
 8005738:	4b28      	ldr	r3, [pc, #160]	@ (80057dc <quaternionToRoll1+0xb0>)
 800573a:	edd3 7a01 	vldr	s15, [r3, #4]
 800573e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005742:	4b26      	ldr	r3, [pc, #152]	@ (80057dc <quaternionToRoll1+0xb0>)
 8005744:	edd3 6a02 	vldr	s13, [r3, #8]
 8005748:	4b24      	ldr	r3, [pc, #144]	@ (80057dc <quaternionToRoll1+0xb0>)
 800574a:	edd3 7a03 	vldr	s15, [r3, #12]
 800574e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005756:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800575a:	4b20      	ldr	r3, [pc, #128]	@ (80057dc <quaternionToRoll1+0xb0>)
 800575c:	ed93 7a00 	vldr	s14, [r3]
 8005760:	4b1e      	ldr	r3, [pc, #120]	@ (80057dc <quaternionToRoll1+0xb0>)
 8005762:	edd3 7a00 	vldr	s15, [r3]
 8005766:	ee27 7a27 	vmul.f32	s14, s14, s15
 800576a:	4b1c      	ldr	r3, [pc, #112]	@ (80057dc <quaternionToRoll1+0xb0>)
 800576c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005770:	4b1a      	ldr	r3, [pc, #104]	@ (80057dc <quaternionToRoll1+0xb0>)
 8005772:	edd3 7a01 	vldr	s15, [r3, #4]
 8005776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800577a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800577e:	4b17      	ldr	r3, [pc, #92]	@ (80057dc <quaternionToRoll1+0xb0>)
 8005780:	edd3 6a02 	vldr	s13, [r3, #8]
 8005784:	4b15      	ldr	r3, [pc, #84]	@ (80057dc <quaternionToRoll1+0xb0>)
 8005786:	edd3 7a02 	vldr	s15, [r3, #8]
 800578a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800578e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005792:	4b12      	ldr	r3, [pc, #72]	@ (80057dc <quaternionToRoll1+0xb0>)
 8005794:	edd3 6a03 	vldr	s13, [r3, #12]
 8005798:	4b10      	ldr	r3, [pc, #64]	@ (80057dc <quaternionToRoll1+0xb0>)
 800579a:	edd3 7a03 	vldr	s15, [r3, #12]
 800579e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057a6:	eef0 0a67 	vmov.f32	s1, s15
 80057aa:	eeb0 0a46 	vmov.f32	s0, s12
 80057ae:	f00a fb8b 	bl	800fec8 <atan2f>
 80057b2:	eef0 7a40 	vmov.f32	s15, s0
 80057b6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80057e0 <quaternionToRoll1+0xb4>
 80057ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80057be:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80057e4 <quaternionToRoll1+0xb8>
 80057c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057c6:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	ee07 3a90 	vmov	s15, r3
}
 80057d0:	eeb0 0a67 	vmov.f32	s0, s15
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	20000018 	.word	0x20000018
 80057e0:	43340000 	.word	0x43340000
 80057e4:	40490fd0 	.word	0x40490fd0

080057e8 <quaternionToYawDegree1>:

float quaternionToYawDegree1(){
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 80057ee:	4b20      	ldr	r3, [pc, #128]	@ (8005870 <quaternionToYawDegree1+0x88>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	4b1e      	ldr	r3, [pc, #120]	@ (8005870 <quaternionToYawDegree1+0x88>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	613b      	str	r3, [r7, #16]
 80057fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005870 <quaternionToYawDegree1+0x88>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	4b1b      	ldr	r3, [pc, #108]	@ (8005870 <quaternionToYawDegree1+0x88>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	60bb      	str	r3, [r7, #8]
    float siny_cosp = 2.0f * (w * z + x * y);
 8005806:	ed97 7a05 	vldr	s14, [r7, #20]
 800580a:	edd7 7a02 	vldr	s15, [r7, #8]
 800580e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005812:	edd7 6a04 	vldr	s13, [r7, #16]
 8005816:	edd7 7a03 	vldr	s15, [r7, #12]
 800581a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800581e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005822:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005826:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
 800582a:	edd7 7a03 	vldr	s15, [r7, #12]
 800582e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005832:	edd7 7a02 	vldr	s15, [r7, #8]
 8005836:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800583a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800583e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005842:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800584a:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
 800584e:	edd7 0a00 	vldr	s1, [r7]
 8005852:	ed97 0a01 	vldr	s0, [r7, #4]
 8005856:	f00a fb37 	bl	800fec8 <atan2f>
 800585a:	eef0 7a40 	vmov.f32	s15, s0
 800585e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005874 <quaternionToYawDegree1+0x8c>
 8005862:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005866:	eeb0 0a67 	vmov.f32	s0, s15
 800586a:	3718      	adds	r7, #24
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	20000018 	.word	0x20000018
 8005874:	42652ee0 	.word	0x42652ee0

08005878 <UpdateMahonyGains>:

uint8_t Gain = 0;
uint8_t gyroOnlyMode = 0;


void UpdateMahonyGains(float ax, float ay, float az) {
 8005878:	b580      	push	{r7, lr}
 800587a:	b08c      	sub	sp, #48	@ 0x30
 800587c:	af00      	add	r7, sp, #0
 800587e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005882:	edc7 0a02 	vstr	s1, [r7, #8]
 8005886:	ed87 1a01 	vstr	s2, [r7, #4]
    // Quaternion normalize edilmemişse gravity yön tahmini hatalı olur
    float norm_q = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 800588a:	4bd5      	ldr	r3, [pc, #852]	@ (8005be0 <UpdateMahonyGains+0x368>)
 800588c:	ed93 7a00 	vldr	s14, [r3]
 8005890:	4bd3      	ldr	r3, [pc, #844]	@ (8005be0 <UpdateMahonyGains+0x368>)
 8005892:	edd3 7a00 	vldr	s15, [r3]
 8005896:	ee27 7a27 	vmul.f32	s14, s14, s15
 800589a:	4bd1      	ldr	r3, [pc, #836]	@ (8005be0 <UpdateMahonyGains+0x368>)
 800589c:	edd3 6a01 	vldr	s13, [r3, #4]
 80058a0:	4bcf      	ldr	r3, [pc, #828]	@ (8005be0 <UpdateMahonyGains+0x368>)
 80058a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80058a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058ae:	4bcc      	ldr	r3, [pc, #816]	@ (8005be0 <UpdateMahonyGains+0x368>)
 80058b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80058b4:	4bca      	ldr	r3, [pc, #808]	@ (8005be0 <UpdateMahonyGains+0x368>)
 80058b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80058ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058c2:	4bc7      	ldr	r3, [pc, #796]	@ (8005be0 <UpdateMahonyGains+0x368>)
 80058c4:	edd3 6a03 	vldr	s13, [r3, #12]
 80058c8:	4bc5      	ldr	r3, [pc, #788]	@ (8005be0 <UpdateMahonyGains+0x368>)
 80058ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80058ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058d6:	eeb0 0a67 	vmov.f32	s0, s15
 80058da:	f00a faf7 	bl	800fecc <sqrtf>
 80058de:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    if (norm_q == 0.0f) return; // Koruma
 80058e2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80058e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80058ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ee:	f000 8172 	beq.w	8005bd6 <UpdateMahonyGains+0x35e>
    q[0] /= norm_q;
 80058f2:	4bbb      	ldr	r3, [pc, #748]	@ (8005be0 <UpdateMahonyGains+0x368>)
 80058f4:	edd3 6a00 	vldr	s13, [r3]
 80058f8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80058fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005900:	4bb7      	ldr	r3, [pc, #732]	@ (8005be0 <UpdateMahonyGains+0x368>)
 8005902:	edc3 7a00 	vstr	s15, [r3]
    q[1] /= norm_q;
 8005906:	4bb6      	ldr	r3, [pc, #728]	@ (8005be0 <UpdateMahonyGains+0x368>)
 8005908:	edd3 6a01 	vldr	s13, [r3, #4]
 800590c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005914:	4bb2      	ldr	r3, [pc, #712]	@ (8005be0 <UpdateMahonyGains+0x368>)
 8005916:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] /= norm_q;
 800591a:	4bb1      	ldr	r3, [pc, #708]	@ (8005be0 <UpdateMahonyGains+0x368>)
 800591c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005920:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005928:	4bad      	ldr	r3, [pc, #692]	@ (8005be0 <UpdateMahonyGains+0x368>)
 800592a:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] /= norm_q;
 800592e:	4bac      	ldr	r3, [pc, #688]	@ (8005be0 <UpdateMahonyGains+0x368>)
 8005930:	edd3 6a03 	vldr	s13, [r3, #12]
 8005934:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800593c:	4ba8      	ldr	r3, [pc, #672]	@ (8005be0 <UpdateMahonyGains+0x368>)
 800593e:	edc3 7a03 	vstr	s15, [r3, #12]

    // Gravity yön vektörü (tam vektör formu)
    float gx = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 8005942:	4ba7      	ldr	r3, [pc, #668]	@ (8005be0 <UpdateMahonyGains+0x368>)
 8005944:	ed93 7a01 	vldr	s14, [r3, #4]
 8005948:	4ba5      	ldr	r3, [pc, #660]	@ (8005be0 <UpdateMahonyGains+0x368>)
 800594a:	edd3 7a03 	vldr	s15, [r3, #12]
 800594e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005952:	4ba3      	ldr	r3, [pc, #652]	@ (8005be0 <UpdateMahonyGains+0x368>)
 8005954:	edd3 6a00 	vldr	s13, [r3]
 8005958:	4ba1      	ldr	r3, [pc, #644]	@ (8005be0 <UpdateMahonyGains+0x368>)
 800595a:	edd3 7a02 	vldr	s15, [r3, #8]
 800595e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005962:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005966:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800596a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 800596e:	4b9c      	ldr	r3, [pc, #624]	@ (8005be0 <UpdateMahonyGains+0x368>)
 8005970:	ed93 7a00 	vldr	s14, [r3]
 8005974:	4b9a      	ldr	r3, [pc, #616]	@ (8005be0 <UpdateMahonyGains+0x368>)
 8005976:	edd3 7a01 	vldr	s15, [r3, #4]
 800597a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800597e:	4b98      	ldr	r3, [pc, #608]	@ (8005be0 <UpdateMahonyGains+0x368>)
 8005980:	edd3 6a02 	vldr	s13, [r3, #8]
 8005984:	4b96      	ldr	r3, [pc, #600]	@ (8005be0 <UpdateMahonyGains+0x368>)
 8005986:	edd3 7a03 	vldr	s15, [r3, #12]
 800598a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800598e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005992:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005996:	edc7 7a08 	vstr	s15, [r7, #32]
    float gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 800599a:	4b91      	ldr	r3, [pc, #580]	@ (8005be0 <UpdateMahonyGains+0x368>)
 800599c:	ed93 7a00 	vldr	s14, [r3]
 80059a0:	4b8f      	ldr	r3, [pc, #572]	@ (8005be0 <UpdateMahonyGains+0x368>)
 80059a2:	edd3 7a00 	vldr	s15, [r3]
 80059a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059aa:	4b8d      	ldr	r3, [pc, #564]	@ (8005be0 <UpdateMahonyGains+0x368>)
 80059ac:	edd3 6a01 	vldr	s13, [r3, #4]
 80059b0:	4b8b      	ldr	r3, [pc, #556]	@ (8005be0 <UpdateMahonyGains+0x368>)
 80059b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80059b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059be:	4b88      	ldr	r3, [pc, #544]	@ (8005be0 <UpdateMahonyGains+0x368>)
 80059c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80059c4:	4b86      	ldr	r3, [pc, #536]	@ (8005be0 <UpdateMahonyGains+0x368>)
 80059c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80059ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059d2:	4b83      	ldr	r3, [pc, #524]	@ (8005be0 <UpdateMahonyGains+0x368>)
 80059d4:	edd3 6a03 	vldr	s13, [r3, #12]
 80059d8:	4b81      	ldr	r3, [pc, #516]	@ (8005be0 <UpdateMahonyGains+0x368>)
 80059da:	edd3 7a03 	vldr	s15, [r3, #12]
 80059de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059e6:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalize gravity tahmini
    float recipNormG = invSqrt(gx * gx + gy * gy + gz * gz);
 80059ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80059ee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80059f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80059f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80059fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8005a02:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8005a0e:	f001 f8cb 	bl	8006ba8 <invSqrt>
 8005a12:	ed87 0a06 	vstr	s0, [r7, #24]
    gx *= recipNormG;
 8005a16:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005a1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8005a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a22:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy *= recipNormG;
 8005a26:	ed97 7a08 	vldr	s14, [r7, #32]
 8005a2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8005a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a32:	edc7 7a08 	vstr	s15, [r7, #32]
    gz *= recipNormG;
 8005a36:	ed97 7a07 	vldr	s14, [r7, #28]
 8005a3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8005a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a42:	edc7 7a07 	vstr	s15, [r7, #28]

    // İvmeölçer zaten normalize edilmiş olarak gelmeli (gelmiyorsa normalize et!)
    float recipNormA = invSqrt(ax * ax + ay * ay + az * az);
 8005a46:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a4a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005a4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005a56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a5e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a66:	eeb0 0a67 	vmov.f32	s0, s15
 8005a6a:	f001 f89d 	bl	8006ba8 <invSqrt>
 8005a6e:	ed87 0a05 	vstr	s0, [r7, #20]
    ax *= recipNormA;
 8005a72:	ed97 7a03 	vldr	s14, [r7, #12]
 8005a76:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a7e:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNormA;
 8005a82:	ed97 7a02 	vldr	s14, [r7, #8]
 8005a86:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a8e:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNormA;
 8005a92:	ed97 7a01 	vldr	s14, [r7, #4]
 8005a96:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9e:	edc7 7a01 	vstr	s15, [r7, #4]

    // Dot product
    float dot = ax * gx + ay * gy + az * gz;
 8005aa2:	ed97 7a03 	vldr	s14, [r7, #12]
 8005aa6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005aaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005aae:	edd7 6a02 	vldr	s13, [r7, #8]
 8005ab2:	edd7 7a08 	vldr	s15, [r7, #32]
 8005ab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005aba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005abe:	edd7 6a01 	vldr	s13, [r7, #4]
 8005ac2:	edd7 7a07 	vldr	s15, [r7, #28]
 8005ac6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ace:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dot > 1.0f) dot = 1.0f;
 8005ad2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005ad6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ada:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae2:	dd02      	ble.n	8005aea <UpdateMahonyGains+0x272>
 8005ae4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dot < -1.0f) dot = -1.0f;
 8005aea:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005aee:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005af2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005afa:	d501      	bpl.n	8005b00 <UpdateMahonyGains+0x288>
 8005afc:	4b39      	ldr	r3, [pc, #228]	@ (8005be4 <UpdateMahonyGains+0x36c>)
 8005afe:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Açı farkı (derece)
    float accErrorAngle = acosf(dot) * (180.0f / 3.1415926f);
 8005b00:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8005b04:	f00a f988 	bl	800fe18 <acosf>
 8005b08:	eef0 7a40 	vmov.f32	s15, s0
 8005b0c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005be8 <UpdateMahonyGains+0x370>
 8005b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b14:	edc7 7a04 	vstr	s15, [r7, #16]

    // Duruma göre kazanç ayarla
    if (accErrorAngle > 30.0f) {
 8005b18:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b1c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8005b20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b28:	dd0a      	ble.n	8005b40 <UpdateMahonyGains+0x2c8>
        Gain = 1;
 8005b2a:	4b30      	ldr	r3, [pc, #192]	@ (8005bec <UpdateMahonyGains+0x374>)
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	701a      	strb	r2, [r3, #0]
        twoKp = 0.2f;
 8005b30:	4b2f      	ldr	r3, [pc, #188]	@ (8005bf0 <UpdateMahonyGains+0x378>)
 8005b32:	4a30      	ldr	r2, [pc, #192]	@ (8005bf4 <UpdateMahonyGains+0x37c>)
 8005b34:	601a      	str	r2, [r3, #0]
        twoKi = 0.0f;
 8005b36:	4b30      	ldr	r3, [pc, #192]	@ (8005bf8 <UpdateMahonyGains+0x380>)
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	e01d      	b.n	8005b7c <UpdateMahonyGains+0x304>
    } else if (accErrorAngle > 10.0f) {
 8005b40:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b44:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005b48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b50:	dd0a      	ble.n	8005b68 <UpdateMahonyGains+0x2f0>
        Gain = 2;
 8005b52:	4b26      	ldr	r3, [pc, #152]	@ (8005bec <UpdateMahonyGains+0x374>)
 8005b54:	2202      	movs	r2, #2
 8005b56:	701a      	strb	r2, [r3, #0]
        twoKp = 2.0f;
 8005b58:	4b25      	ldr	r3, [pc, #148]	@ (8005bf0 <UpdateMahonyGains+0x378>)
 8005b5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005b5e:	601a      	str	r2, [r3, #0]
        twoKi = 0.01f;
 8005b60:	4b25      	ldr	r3, [pc, #148]	@ (8005bf8 <UpdateMahonyGains+0x380>)
 8005b62:	4a26      	ldr	r2, [pc, #152]	@ (8005bfc <UpdateMahonyGains+0x384>)
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	e009      	b.n	8005b7c <UpdateMahonyGains+0x304>
    } else {
        Gain = 3;
 8005b68:	4b20      	ldr	r3, [pc, #128]	@ (8005bec <UpdateMahonyGains+0x374>)
 8005b6a:	2203      	movs	r2, #3
 8005b6c:	701a      	strb	r2, [r3, #0]
        twoKp = 8.0f;
 8005b6e:	4b20      	ldr	r3, [pc, #128]	@ (8005bf0 <UpdateMahonyGains+0x378>)
 8005b70:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8005b74:	601a      	str	r2, [r3, #0]
        twoKi = 0.05f;
 8005b76:	4b20      	ldr	r3, [pc, #128]	@ (8005bf8 <UpdateMahonyGains+0x380>)
 8005b78:	4a21      	ldr	r2, [pc, #132]	@ (8005c00 <UpdateMahonyGains+0x388>)
 8005b7a:	601a      	str	r2, [r3, #0]
    }

    // Güvenlik: kazanç sınırla (opsiyonel ama önerilir)
    twoKp = fmaxf(TWO_KP_MIN, fminf(twoKp, TWO_KP_MAX));
 8005b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8005bf0 <UpdateMahonyGains+0x378>)
 8005b7e:	edd3 7a00 	vldr	s15, [r3]
 8005b82:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 8005b86:	eeb0 0a67 	vmov.f32	s0, s15
 8005b8a:	f00a f9f2 	bl	800ff72 <fminf>
 8005b8e:	eef0 7a40 	vmov.f32	s15, s0
 8005b92:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8005c04 <UpdateMahonyGains+0x38c>
 8005b96:	eeb0 0a67 	vmov.f32	s0, s15
 8005b9a:	f00a f9cd 	bl	800ff38 <fmaxf>
 8005b9e:	eef0 7a40 	vmov.f32	s15, s0
 8005ba2:	4b13      	ldr	r3, [pc, #76]	@ (8005bf0 <UpdateMahonyGains+0x378>)
 8005ba4:	edc3 7a00 	vstr	s15, [r3]
    twoKi = fmaxf(TWO_KI_MIN, fminf(twoKi, TWO_KI_MAX));
 8005ba8:	4b13      	ldr	r3, [pc, #76]	@ (8005bf8 <UpdateMahonyGains+0x380>)
 8005baa:	edd3 7a00 	vldr	s15, [r3]
 8005bae:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8005c08 <UpdateMahonyGains+0x390>
 8005bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8005bb6:	f00a f9dc 	bl	800ff72 <fminf>
 8005bba:	eef0 7a40 	vmov.f32	s15, s0
 8005bbe:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8005c0c <UpdateMahonyGains+0x394>
 8005bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8005bc6:	f00a f9b7 	bl	800ff38 <fmaxf>
 8005bca:	eef0 7a40 	vmov.f32	s15, s0
 8005bce:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf8 <UpdateMahonyGains+0x380>)
 8005bd0:	edc3 7a00 	vstr	s15, [r3]
 8005bd4:	e000      	b.n	8005bd8 <UpdateMahonyGains+0x360>
    if (norm_q == 0.0f) return; // Koruma
 8005bd6:	bf00      	nop
}
 8005bd8:	3730      	adds	r7, #48	@ 0x30
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20000028 	.word	0x20000028
 8005be4:	bf800000 	.word	0xbf800000
 8005be8:	42652ee2 	.word	0x42652ee2
 8005bec:	200007bc 	.word	0x200007bc
 8005bf0:	20000038 	.word	0x20000038
 8005bf4:	3e4ccccd 	.word	0x3e4ccccd
 8005bf8:	2000003c 	.word	0x2000003c
 8005bfc:	3c23d70a 	.word	0x3c23d70a
 8005c00:	3d4ccccd 	.word	0x3d4ccccd
 8005c04:	3dcccccd 	.word	0x3dcccccd
 8005c08:	3d4ccccd 	.word	0x3d4ccccd
 8005c0c:	00000000 	.word	0x00000000

08005c10 <Orientation_Update>:





void Orientation_Update(float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08a      	sub	sp, #40	@ 0x28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	ed87 0a07 	vstr	s0, [r7, #28]
 8005c1a:	edc7 0a06 	vstr	s1, [r7, #24]
 8005c1e:	ed87 1a05 	vstr	s2, [r7, #20]
 8005c22:	edc7 1a04 	vstr	s3, [r7, #16]
 8005c26:	ed87 2a03 	vstr	s4, [r7, #12]
 8005c2a:	edc7 2a02 	vstr	s5, [r7, #8]
 8005c2e:	ed87 3a01 	vstr	s6, [r7, #4]
	static float ax_f = 0, ay_f = 0, az_f = 0;
    const float alpha = 0.3f;
 8005c32:	4b60      	ldr	r3, [pc, #384]	@ (8005db4 <Orientation_Update+0x1a4>)
 8005c34:	627b      	str	r3, [r7, #36]	@ 0x24

    // LPF filtre
    ax_f = alpha * ax + (1.0f - alpha) * ax_f;
 8005c36:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005c3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c46:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005c4a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005c4e:	4b5a      	ldr	r3, [pc, #360]	@ (8005db8 <Orientation_Update+0x1a8>)
 8005c50:	edd3 7a00 	vldr	s15, [r3]
 8005c54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c5c:	4b56      	ldr	r3, [pc, #344]	@ (8005db8 <Orientation_Update+0x1a8>)
 8005c5e:	edc3 7a00 	vstr	s15, [r3]
    ay_f = alpha * ay + (1.0f - alpha) * ay_f;
 8005c62:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005c66:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c72:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005c76:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005c7a:	4b50      	ldr	r3, [pc, #320]	@ (8005dbc <Orientation_Update+0x1ac>)
 8005c7c:	edd3 7a00 	vldr	s15, [r3]
 8005c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c88:	4b4c      	ldr	r3, [pc, #304]	@ (8005dbc <Orientation_Update+0x1ac>)
 8005c8a:	edc3 7a00 	vstr	s15, [r3]
    az_f = alpha * az + (1.0f - alpha) * az_f;
 8005c8e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005c92:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c9e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005ca2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005ca6:	4b46      	ldr	r3, [pc, #280]	@ (8005dc0 <Orientation_Update+0x1b0>)
 8005ca8:	edd3 7a00 	vldr	s15, [r3]
 8005cac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cb4:	4b42      	ldr	r3, [pc, #264]	@ (8005dc0 <Orientation_Update+0x1b0>)
 8005cb6:	edc3 7a00 	vstr	s15, [r3]

    // Kazançları güncelle
    UpdateMahonyGains(ax_f, ay_f, az_f);
 8005cba:	4b3f      	ldr	r3, [pc, #252]	@ (8005db8 <Orientation_Update+0x1a8>)
 8005cbc:	edd3 7a00 	vldr	s15, [r3]
 8005cc0:	4b3e      	ldr	r3, [pc, #248]	@ (8005dbc <Orientation_Update+0x1ac>)
 8005cc2:	ed93 7a00 	vldr	s14, [r3]
 8005cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8005dc0 <Orientation_Update+0x1b0>)
 8005cc8:	edd3 6a00 	vldr	s13, [r3]
 8005ccc:	eeb0 1a66 	vmov.f32	s2, s13
 8005cd0:	eef0 0a47 	vmov.f32	s1, s14
 8005cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8005cd8:	f7ff fdce 	bl	8005878 <UpdateMahonyGains>

    // Acc magnitude
    float accMag = sqrtf(ax_f*ax_f + ay_f*ay_f + az_f*az_f);
 8005cdc:	4b36      	ldr	r3, [pc, #216]	@ (8005db8 <Orientation_Update+0x1a8>)
 8005cde:	ed93 7a00 	vldr	s14, [r3]
 8005ce2:	4b35      	ldr	r3, [pc, #212]	@ (8005db8 <Orientation_Update+0x1a8>)
 8005ce4:	edd3 7a00 	vldr	s15, [r3]
 8005ce8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cec:	4b33      	ldr	r3, [pc, #204]	@ (8005dbc <Orientation_Update+0x1ac>)
 8005cee:	edd3 6a00 	vldr	s13, [r3]
 8005cf2:	4b32      	ldr	r3, [pc, #200]	@ (8005dbc <Orientation_Update+0x1ac>)
 8005cf4:	edd3 7a00 	vldr	s15, [r3]
 8005cf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d00:	4b2f      	ldr	r3, [pc, #188]	@ (8005dc0 <Orientation_Update+0x1b0>)
 8005d02:	edd3 6a00 	vldr	s13, [r3]
 8005d06:	4b2e      	ldr	r3, [pc, #184]	@ (8005dc0 <Orientation_Update+0x1b0>)
 8005d08:	edd3 7a00 	vldr	s15, [r3]
 8005d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d14:	eeb0 0a67 	vmov.f32	s0, s15
 8005d18:	f00a f8d8 	bl	800fecc <sqrtf>
 8005d1c:	ed87 0a08 	vstr	s0, [r7, #32]

    if (gyroOnlyMode) {
 8005d20:	4b28      	ldr	r3, [pc, #160]	@ (8005dc4 <Orientation_Update+0x1b4>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00c      	beq.n	8005d42 <Orientation_Update+0x132>
            if (accMag < ACC_THRESHOLD_LOW)
 8005d28:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d2c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005dc8 <Orientation_Update+0x1b8>
 8005d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d38:	d50f      	bpl.n	8005d5a <Orientation_Update+0x14a>
                gyroOnlyMode = 0;
 8005d3a:	4b22      	ldr	r3, [pc, #136]	@ (8005dc4 <Orientation_Update+0x1b4>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	701a      	strb	r2, [r3, #0]
 8005d40:	e00b      	b.n	8005d5a <Orientation_Update+0x14a>
	} else {
		if (accMag > ACC_THRESHOLD_HIGH)
 8005d42:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d46:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005dcc <Orientation_Update+0x1bc>
 8005d4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d52:	dd02      	ble.n	8005d5a <Orientation_Update+0x14a>
			gyroOnlyMode = 1;
 8005d54:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc4 <Orientation_Update+0x1b4>)
 8005d56:	2201      	movs	r2, #1
 8005d58:	701a      	strb	r2, [r3, #0]
	}



    // Filtre çağrısı
    if (gyroOnlyMode)
 8005d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8005dc4 <Orientation_Update+0x1b4>)
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <Orientation_Update+0x168>
        updateQuaternion(gx, gy, gz, dt);
 8005d62:	edd7 1a01 	vldr	s3, [r7, #4]
 8005d66:	ed97 1a05 	vldr	s2, [r7, #20]
 8005d6a:	edd7 0a06 	vldr	s1, [r7, #24]
 8005d6e:	ed97 0a07 	vldr	s0, [r7, #28]
 8005d72:	f000 f82d 	bl	8005dd0 <updateQuaternion>
    else
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
}
 8005d76:	e018      	b.n	8005daa <Orientation_Update+0x19a>
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
 8005d78:	4b0f      	ldr	r3, [pc, #60]	@ (8005db8 <Orientation_Update+0x1a8>)
 8005d7a:	edd3 7a00 	vldr	s15, [r3]
 8005d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8005dbc <Orientation_Update+0x1ac>)
 8005d80:	ed93 7a00 	vldr	s14, [r3]
 8005d84:	4b0e      	ldr	r3, [pc, #56]	@ (8005dc0 <Orientation_Update+0x1b0>)
 8005d86:	edd3 6a00 	vldr	s13, [r3]
 8005d8a:	ed97 3a01 	vldr	s6, [r7, #4]
 8005d8e:	eef0 2a66 	vmov.f32	s5, s13
 8005d92:	eeb0 2a47 	vmov.f32	s4, s14
 8005d96:	eef0 1a67 	vmov.f32	s3, s15
 8005d9a:	ed97 1a05 	vldr	s2, [r7, #20]
 8005d9e:	edd7 0a06 	vldr	s1, [r7, #24]
 8005da2:	ed97 0a07 	vldr	s0, [r7, #28]
 8005da6:	f000 f93b 	bl	8006020 <MahonyAHRSupdateIMU>
}
 8005daa:	bf00      	nop
 8005dac:	3728      	adds	r7, #40	@ 0x28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	3e99999a 	.word	0x3e99999a
 8005db8:	200007c0 	.word	0x200007c0
 8005dbc:	200007c4 	.word	0x200007c4
 8005dc0:	200007c8 	.word	0x200007c8
 8005dc4:	200007bd 	.word	0x200007bd
 8005dc8:	41d3d2db 	.word	0x41d3d2db
 8005dcc:	420172a2 	.word	0x420172a2

08005dd0 <updateQuaternion>:


void updateQuaternion(float gx, float gy, float gz, float dt) {
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08a      	sub	sp, #40	@ 0x28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	ed87 0a03 	vstr	s0, [r7, #12]
 8005dda:	edc7 0a02 	vstr	s1, [r7, #8]
 8005dde:	ed87 1a01 	vstr	s2, [r7, #4]
 8005de2:	edc7 1a00 	vstr	s3, [r7]

    // Quaternion türevleri
    float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 8005de6:	4b8c      	ldr	r3, [pc, #560]	@ (8006018 <updateQuaternion+0x248>)
 8005de8:	edd3 7a01 	vldr	s15, [r3, #4]
 8005dec:	eeb1 7a67 	vneg.f32	s14, s15
 8005df0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005df4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005df8:	4b87      	ldr	r3, [pc, #540]	@ (8006018 <updateQuaternion+0x248>)
 8005dfa:	edd3 6a02 	vldr	s13, [r3, #8]
 8005dfe:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e0a:	4b83      	ldr	r3, [pc, #524]	@ (8006018 <updateQuaternion+0x248>)
 8005e0c:	edd3 6a03 	vldr	s13, [r3, #12]
 8005e10:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e1c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e24:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float qDot2 = 0.5f * ( q[0] * gx + q[2] * gz - q[3] * gy);
 8005e28:	4b7b      	ldr	r3, [pc, #492]	@ (8006018 <updateQuaternion+0x248>)
 8005e2a:	ed93 7a00 	vldr	s14, [r3]
 8005e2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e36:	4b78      	ldr	r3, [pc, #480]	@ (8006018 <updateQuaternion+0x248>)
 8005e38:	edd3 6a02 	vldr	s13, [r3, #8]
 8005e3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e48:	4b73      	ldr	r3, [pc, #460]	@ (8006018 <updateQuaternion+0x248>)
 8005e4a:	edd3 6a03 	vldr	s13, [r3, #12]
 8005e4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e5a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e62:	edc7 7a08 	vstr	s15, [r7, #32]
    float qDot3 = 0.5f * ( q[0] * gy - q[1] * gz + q[3] * gx);
 8005e66:	4b6c      	ldr	r3, [pc, #432]	@ (8006018 <updateQuaternion+0x248>)
 8005e68:	ed93 7a00 	vldr	s14, [r3]
 8005e6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e74:	4b68      	ldr	r3, [pc, #416]	@ (8006018 <updateQuaternion+0x248>)
 8005e76:	edd3 6a01 	vldr	s13, [r3, #4]
 8005e7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e86:	4b64      	ldr	r3, [pc, #400]	@ (8006018 <updateQuaternion+0x248>)
 8005e88:	edd3 6a03 	vldr	s13, [r3, #12]
 8005e8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e98:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ea0:	edc7 7a07 	vstr	s15, [r7, #28]
    float qDot4 = 0.5f * ( q[0] * gz + q[1] * gy - q[2] * gx);
 8005ea4:	4b5c      	ldr	r3, [pc, #368]	@ (8006018 <updateQuaternion+0x248>)
 8005ea6:	ed93 7a00 	vldr	s14, [r3]
 8005eaa:	edd7 7a01 	vldr	s15, [r7, #4]
 8005eae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005eb2:	4b59      	ldr	r3, [pc, #356]	@ (8006018 <updateQuaternion+0x248>)
 8005eb4:	edd3 6a01 	vldr	s13, [r3, #4]
 8005eb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ebc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ec0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ec4:	4b54      	ldr	r3, [pc, #336]	@ (8006018 <updateQuaternion+0x248>)
 8005ec6:	edd3 6a02 	vldr	s13, [r3, #8]
 8005eca:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ece:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ed6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ede:	edc7 7a06 	vstr	s15, [r7, #24]

    // Entegrasyon
    q[0] += qDot1 * dt;
 8005ee2:	4b4d      	ldr	r3, [pc, #308]	@ (8006018 <updateQuaternion+0x248>)
 8005ee4:	ed93 7a00 	vldr	s14, [r3]
 8005ee8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005eec:	edd7 7a00 	vldr	s15, [r7]
 8005ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ef8:	4b47      	ldr	r3, [pc, #284]	@ (8006018 <updateQuaternion+0x248>)
 8005efa:	edc3 7a00 	vstr	s15, [r3]
    q[1] += qDot2 * dt;
 8005efe:	4b46      	ldr	r3, [pc, #280]	@ (8006018 <updateQuaternion+0x248>)
 8005f00:	ed93 7a01 	vldr	s14, [r3, #4]
 8005f04:	edd7 6a08 	vldr	s13, [r7, #32]
 8005f08:	edd7 7a00 	vldr	s15, [r7]
 8005f0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f14:	4b40      	ldr	r3, [pc, #256]	@ (8006018 <updateQuaternion+0x248>)
 8005f16:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] += qDot3 * dt;
 8005f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8006018 <updateQuaternion+0x248>)
 8005f1c:	ed93 7a02 	vldr	s14, [r3, #8]
 8005f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f24:	edd7 7a00 	vldr	s15, [r7]
 8005f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f30:	4b39      	ldr	r3, [pc, #228]	@ (8006018 <updateQuaternion+0x248>)
 8005f32:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] += qDot4 * dt;
 8005f36:	4b38      	ldr	r3, [pc, #224]	@ (8006018 <updateQuaternion+0x248>)
 8005f38:	ed93 7a03 	vldr	s14, [r3, #12]
 8005f3c:	edd7 6a06 	vldr	s13, [r7, #24]
 8005f40:	edd7 7a00 	vldr	s15, [r7]
 8005f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f4c:	4b32      	ldr	r3, [pc, #200]	@ (8006018 <updateQuaternion+0x248>)
 8005f4e:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalize et
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8005f52:	4b31      	ldr	r3, [pc, #196]	@ (8006018 <updateQuaternion+0x248>)
 8005f54:	ed93 7a00 	vldr	s14, [r3]
 8005f58:	4b2f      	ldr	r3, [pc, #188]	@ (8006018 <updateQuaternion+0x248>)
 8005f5a:	edd3 7a00 	vldr	s15, [r3]
 8005f5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f62:	4b2d      	ldr	r3, [pc, #180]	@ (8006018 <updateQuaternion+0x248>)
 8005f64:	edd3 6a01 	vldr	s13, [r3, #4]
 8005f68:	4b2b      	ldr	r3, [pc, #172]	@ (8006018 <updateQuaternion+0x248>)
 8005f6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8005f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f76:	4b28      	ldr	r3, [pc, #160]	@ (8006018 <updateQuaternion+0x248>)
 8005f78:	edd3 6a02 	vldr	s13, [r3, #8]
 8005f7c:	4b26      	ldr	r3, [pc, #152]	@ (8006018 <updateQuaternion+0x248>)
 8005f7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f8a:	4b23      	ldr	r3, [pc, #140]	@ (8006018 <updateQuaternion+0x248>)
 8005f8c:	edd3 6a03 	vldr	s13, [r3, #12]
 8005f90:	4b21      	ldr	r3, [pc, #132]	@ (8006018 <updateQuaternion+0x248>)
 8005f92:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8005fa2:	f009 ff93 	bl	800fecc <sqrtf>
 8005fa6:	ed87 0a05 	vstr	s0, [r7, #20]
    if (norm > 1e-6f) {
 8005faa:	edd7 7a05 	vldr	s15, [r7, #20]
 8005fae:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800601c <updateQuaternion+0x24c>
 8005fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fba:	dc00      	bgt.n	8005fbe <updateQuaternion+0x1ee>
        q[0] /= norm;
        q[1] /= norm;
        q[2] /= norm;
        q[3] /= norm;
    }
}
 8005fbc:	e027      	b.n	800600e <updateQuaternion+0x23e>
        q[0] /= norm;
 8005fbe:	4b16      	ldr	r3, [pc, #88]	@ (8006018 <updateQuaternion+0x248>)
 8005fc0:	edd3 6a00 	vldr	s13, [r3]
 8005fc4:	ed97 7a05 	vldr	s14, [r7, #20]
 8005fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fcc:	4b12      	ldr	r3, [pc, #72]	@ (8006018 <updateQuaternion+0x248>)
 8005fce:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= norm;
 8005fd2:	4b11      	ldr	r3, [pc, #68]	@ (8006018 <updateQuaternion+0x248>)
 8005fd4:	edd3 6a01 	vldr	s13, [r3, #4]
 8005fd8:	ed97 7a05 	vldr	s14, [r7, #20]
 8005fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8006018 <updateQuaternion+0x248>)
 8005fe2:	edc3 7a01 	vstr	s15, [r3, #4]
        q[2] /= norm;
 8005fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8006018 <updateQuaternion+0x248>)
 8005fe8:	edd3 6a02 	vldr	s13, [r3, #8]
 8005fec:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ff4:	4b08      	ldr	r3, [pc, #32]	@ (8006018 <updateQuaternion+0x248>)
 8005ff6:	edc3 7a02 	vstr	s15, [r3, #8]
        q[3] /= norm;
 8005ffa:	4b07      	ldr	r3, [pc, #28]	@ (8006018 <updateQuaternion+0x248>)
 8005ffc:	edd3 6a03 	vldr	s13, [r3, #12]
 8006000:	ed97 7a05 	vldr	s14, [r7, #20]
 8006004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006008:	4b03      	ldr	r3, [pc, #12]	@ (8006018 <updateQuaternion+0x248>)
 800600a:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800600e:	bf00      	nop
 8006010:	3728      	adds	r7, #40	@ 0x28
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	20000028 	.word	0x20000028
 800601c:	358637bd 	.word	0x358637bd

08006020 <MahonyAHRSupdateIMU>:
        q[2] /= norm_q;
        q[3] /= norm_q;
    }
}

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax_f, float ay_f, float az_f, float dt) {
 8006020:	b580      	push	{r7, lr}
 8006022:	b092      	sub	sp, #72	@ 0x48
 8006024:	af00      	add	r7, sp, #0
 8006026:	ed87 0a07 	vstr	s0, [r7, #28]
 800602a:	edc7 0a06 	vstr	s1, [r7, #24]
 800602e:	ed87 1a05 	vstr	s2, [r7, #20]
 8006032:	edc7 1a04 	vstr	s3, [r7, #16]
 8006036:	ed87 2a03 	vstr	s4, [r7, #12]
 800603a:	edc7 2a02 	vstr	s5, [r7, #8]
 800603e:	ed87 3a01 	vstr	s6, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
		if(!((ax_f == 0.0f) && (ay_f == 0.0f) && (az_f == 0.0f))) {
 8006042:	edd7 7a04 	vldr	s15, [r7, #16]
 8006046:	eef5 7a40 	vcmp.f32	s15, #0.0
 800604a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800604e:	d10e      	bne.n	800606e <MahonyAHRSupdateIMU+0x4e>
 8006050:	edd7 7a03 	vldr	s15, [r7, #12]
 8006054:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800605c:	d107      	bne.n	800606e <MahonyAHRSupdateIMU+0x4e>
 800605e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006062:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800606a:	f000 8138 	beq.w	80062de <MahonyAHRSupdateIMU+0x2be>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax_f * ax_f + ay_f * ay_f + az_f * az_f);
 800606e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006072:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006076:	edd7 7a03 	vldr	s15, [r7, #12]
 800607a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800607e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006082:	edd7 7a02 	vldr	s15, [r7, #8]
 8006086:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800608a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800608e:	eeb0 0a67 	vmov.f32	s0, s15
 8006092:	f000 fd89 	bl	8006ba8 <invSqrt>
 8006096:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax_f *= recipNorm;
 800609a:	ed97 7a04 	vldr	s14, [r7, #16]
 800609e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80060a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a6:	edc7 7a04 	vstr	s15, [r7, #16]
		ay_f *= recipNorm;
 80060aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80060ae:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80060b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b6:	edc7 7a03 	vstr	s15, [r7, #12]
		az_f *= recipNorm;
 80060ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80060be:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80060c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c6:	edc7 7a02 	vstr	s15, [r7, #8]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 80060ca:	4b66      	ldr	r3, [pc, #408]	@ (8006264 <MahonyAHRSupdateIMU+0x244>)
 80060cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80060d0:	4b64      	ldr	r3, [pc, #400]	@ (8006264 <MahonyAHRSupdateIMU+0x244>)
 80060d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80060d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060da:	4b62      	ldr	r3, [pc, #392]	@ (8006264 <MahonyAHRSupdateIMU+0x244>)
 80060dc:	edd3 6a00 	vldr	s13, [r3]
 80060e0:	4b60      	ldr	r3, [pc, #384]	@ (8006264 <MahonyAHRSupdateIMU+0x244>)
 80060e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80060e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060ee:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 80060f2:	4b5c      	ldr	r3, [pc, #368]	@ (8006264 <MahonyAHRSupdateIMU+0x244>)
 80060f4:	ed93 7a00 	vldr	s14, [r3]
 80060f8:	4b5a      	ldr	r3, [pc, #360]	@ (8006264 <MahonyAHRSupdateIMU+0x244>)
 80060fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80060fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006102:	4b58      	ldr	r3, [pc, #352]	@ (8006264 <MahonyAHRSupdateIMU+0x244>)
 8006104:	edd3 6a02 	vldr	s13, [r3, #8]
 8006108:	4b56      	ldr	r3, [pc, #344]	@ (8006264 <MahonyAHRSupdateIMU+0x244>)
 800610a:	edd3 7a03 	vldr	s15, [r3, #12]
 800610e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006116:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 800611a:	4b52      	ldr	r3, [pc, #328]	@ (8006264 <MahonyAHRSupdateIMU+0x244>)
 800611c:	ed93 7a00 	vldr	s14, [r3]
 8006120:	4b50      	ldr	r3, [pc, #320]	@ (8006264 <MahonyAHRSupdateIMU+0x244>)
 8006122:	edd3 7a00 	vldr	s15, [r3]
 8006126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800612a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800612e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006132:	4b4c      	ldr	r3, [pc, #304]	@ (8006264 <MahonyAHRSupdateIMU+0x244>)
 8006134:	edd3 6a03 	vldr	s13, [r3, #12]
 8006138:	4b4a      	ldr	r3, [pc, #296]	@ (8006264 <MahonyAHRSupdateIMU+0x244>)
 800613a:	edd3 7a03 	vldr	s15, [r3, #12]
 800613e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006146:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay_f * halfvz - az_f * halfvy);
 800614a:	ed97 7a03 	vldr	s14, [r7, #12]
 800614e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8006152:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006156:	edd7 6a02 	vldr	s13, [r7, #8]
 800615a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800615e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006166:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az_f * halfvx - ax_f * halfvz);
 800616a:	ed97 7a02 	vldr	s14, [r7, #8]
 800616e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8006172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006176:	edd7 6a04 	vldr	s13, [r7, #16]
 800617a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800617e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006186:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax_f * halfvy - ay_f * halfvx);
 800618a:	ed97 7a04 	vldr	s14, [r7, #16]
 800618e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8006192:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006196:	edd7 6a03 	vldr	s13, [r7, #12]
 800619a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800619e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061a6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 80061aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006268 <MahonyAHRSupdateIMU+0x248>)
 80061ac:	edd3 7a00 	vldr	s15, [r3]
 80061b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b8:	dd5e      	ble.n	8006278 <MahonyAHRSupdateIMU+0x258>
			integralFBx += twoKi * halfex * dt;	// integral error scaled by Ki
 80061ba:	4b2b      	ldr	r3, [pc, #172]	@ (8006268 <MahonyAHRSupdateIMU+0x248>)
 80061bc:	ed93 7a00 	vldr	s14, [r3]
 80061c0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80061c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80061cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061d0:	4b26      	ldr	r3, [pc, #152]	@ (800626c <MahonyAHRSupdateIMU+0x24c>)
 80061d2:	edd3 7a00 	vldr	s15, [r3]
 80061d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061da:	4b24      	ldr	r3, [pc, #144]	@ (800626c <MahonyAHRSupdateIMU+0x24c>)
 80061dc:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * dt;
 80061e0:	4b21      	ldr	r3, [pc, #132]	@ (8006268 <MahonyAHRSupdateIMU+0x248>)
 80061e2:	ed93 7a00 	vldr	s14, [r3]
 80061e6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80061ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80061f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061f6:	4b1e      	ldr	r3, [pc, #120]	@ (8006270 <MahonyAHRSupdateIMU+0x250>)
 80061f8:	edd3 7a00 	vldr	s15, [r3]
 80061fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006200:	4b1b      	ldr	r3, [pc, #108]	@ (8006270 <MahonyAHRSupdateIMU+0x250>)
 8006202:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * dt;
 8006206:	4b18      	ldr	r3, [pc, #96]	@ (8006268 <MahonyAHRSupdateIMU+0x248>)
 8006208:	ed93 7a00 	vldr	s14, [r3]
 800620c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006210:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006214:	edd7 7a01 	vldr	s15, [r7, #4]
 8006218:	ee27 7a27 	vmul.f32	s14, s14, s15
 800621c:	4b15      	ldr	r3, [pc, #84]	@ (8006274 <MahonyAHRSupdateIMU+0x254>)
 800621e:	edd3 7a00 	vldr	s15, [r3]
 8006222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006226:	4b13      	ldr	r3, [pc, #76]	@ (8006274 <MahonyAHRSupdateIMU+0x254>)
 8006228:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 800622c:	4b0f      	ldr	r3, [pc, #60]	@ (800626c <MahonyAHRSupdateIMU+0x24c>)
 800622e:	edd3 7a00 	vldr	s15, [r3]
 8006232:	ed97 7a07 	vldr	s14, [r7, #28]
 8006236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800623a:	edc7 7a07 	vstr	s15, [r7, #28]
			gy += integralFBy;
 800623e:	4b0c      	ldr	r3, [pc, #48]	@ (8006270 <MahonyAHRSupdateIMU+0x250>)
 8006240:	edd3 7a00 	vldr	s15, [r3]
 8006244:	ed97 7a06 	vldr	s14, [r7, #24]
 8006248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800624c:	edc7 7a06 	vstr	s15, [r7, #24]
			gz += integralFBz;
 8006250:	4b08      	ldr	r3, [pc, #32]	@ (8006274 <MahonyAHRSupdateIMU+0x254>)
 8006252:	edd3 7a00 	vldr	s15, [r3]
 8006256:	ed97 7a05 	vldr	s14, [r7, #20]
 800625a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800625e:	edc7 7a05 	vstr	s15, [r7, #20]
 8006262:	e015      	b.n	8006290 <MahonyAHRSupdateIMU+0x270>
 8006264:	20000028 	.word	0x20000028
 8006268:	2000003c 	.word	0x2000003c
 800626c:	200007b0 	.word	0x200007b0
 8006270:	200007b4 	.word	0x200007b4
 8006274:	200007b8 	.word	0x200007b8
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8006278:	4b9a      	ldr	r3, [pc, #616]	@ (80064e4 <MahonyAHRSupdateIMU+0x4c4>)
 800627a:	f04f 0200 	mov.w	r2, #0
 800627e:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8006280:	4b99      	ldr	r3, [pc, #612]	@ (80064e8 <MahonyAHRSupdateIMU+0x4c8>)
 8006282:	f04f 0200 	mov.w	r2, #0
 8006286:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8006288:	4b98      	ldr	r3, [pc, #608]	@ (80064ec <MahonyAHRSupdateIMU+0x4cc>)
 800628a:	f04f 0200 	mov.w	r2, #0
 800628e:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8006290:	4b97      	ldr	r3, [pc, #604]	@ (80064f0 <MahonyAHRSupdateIMU+0x4d0>)
 8006292:	ed93 7a00 	vldr	s14, [r3]
 8006296:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800629a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629e:	ed97 7a07 	vldr	s14, [r7, #28]
 80062a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062a6:	edc7 7a07 	vstr	s15, [r7, #28]
		gy += twoKp * halfey;
 80062aa:	4b91      	ldr	r3, [pc, #580]	@ (80064f0 <MahonyAHRSupdateIMU+0x4d0>)
 80062ac:	ed93 7a00 	vldr	s14, [r3]
 80062b0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80062b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80062bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062c0:	edc7 7a06 	vstr	s15, [r7, #24]
		gz += twoKp * halfez;
 80062c4:	4b8a      	ldr	r3, [pc, #552]	@ (80064f0 <MahonyAHRSupdateIMU+0x4d0>)
 80062c6:	ed93 7a00 	vldr	s14, [r3]
 80062ca:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80062ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80062d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062da:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * dt);		// pre-multiply common factors
 80062de:	edd7 7a01 	vldr	s15, [r7, #4]
 80062e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80062e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80062ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f2:	edc7 7a07 	vstr	s15, [r7, #28]
	gy *= (0.5f * dt);
 80062f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80062fa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80062fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006302:	ed97 7a06 	vldr	s14, [r7, #24]
 8006306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800630a:	edc7 7a06 	vstr	s15, [r7, #24]
	gz *= (0.5f * dt);
 800630e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006312:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006316:	ee67 7a87 	vmul.f32	s15, s15, s14
 800631a:	ed97 7a05 	vldr	s14, [r7, #20]
 800631e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006322:	edc7 7a05 	vstr	s15, [r7, #20]
	qa = q[0];
 8006326:	4b73      	ldr	r3, [pc, #460]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 800632c:	4b71      	ldr	r3, [pc, #452]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8006332:	4b70      	ldr	r3, [pc, #448]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8006338:	4b6e      	ldr	r3, [pc, #440]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 800633a:	ed93 7a00 	vldr	s14, [r3]
 800633e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006342:	eef1 6a67 	vneg.f32	s13, s15
 8006346:	edd7 7a07 	vldr	s15, [r7, #28]
 800634a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800634e:	ed97 6a08 	vldr	s12, [r7, #32]
 8006352:	edd7 7a06 	vldr	s15, [r7, #24]
 8006356:	ee66 7a27 	vmul.f32	s15, s12, s15
 800635a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800635e:	4b65      	ldr	r3, [pc, #404]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 8006360:	ed93 6a03 	vldr	s12, [r3, #12]
 8006364:	edd7 7a05 	vldr	s15, [r7, #20]
 8006368:	ee66 7a27 	vmul.f32	s15, s12, s15
 800636c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006374:	4b5f      	ldr	r3, [pc, #380]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 8006376:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 800637a:	4b5e      	ldr	r3, [pc, #376]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 800637c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006380:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006384:	edd7 7a07 	vldr	s15, [r7, #28]
 8006388:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800638c:	ed97 6a08 	vldr	s12, [r7, #32]
 8006390:	edd7 7a05 	vldr	s15, [r7, #20]
 8006394:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006398:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800639c:	4b55      	ldr	r3, [pc, #340]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 800639e:	ed93 6a03 	vldr	s12, [r3, #12]
 80063a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80063a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80063aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80063ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063b2:	4b50      	ldr	r3, [pc, #320]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 80063b4:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 80063b8:	4b4e      	ldr	r3, [pc, #312]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 80063ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80063be:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80063c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80063c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80063ca:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 80063ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80063d2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80063d6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80063da:	4b46      	ldr	r3, [pc, #280]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 80063dc:	ed93 6a03 	vldr	s12, [r3, #12]
 80063e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80063e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80063e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063f0:	4b40      	ldr	r3, [pc, #256]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 80063f2:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] += (qa * gz + qb * gy - qc * gx);
 80063f6:	4b3f      	ldr	r3, [pc, #252]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 80063f8:	ed93 7a03 	vldr	s14, [r3, #12]
 80063fc:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006400:	edd7 7a05 	vldr	s15, [r7, #20]
 8006404:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006408:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 800640c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006410:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006414:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006418:	ed97 6a08 	vldr	s12, [r7, #32]
 800641c:	edd7 7a07 	vldr	s15, [r7, #28]
 8006420:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006424:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006428:	ee77 7a27 	vadd.f32	s15, s14, s15
 800642c:	4b31      	ldr	r3, [pc, #196]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 800642e:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8006432:	4b30      	ldr	r3, [pc, #192]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 8006434:	ed93 7a00 	vldr	s14, [r3]
 8006438:	4b2e      	ldr	r3, [pc, #184]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 800643a:	edd3 7a00 	vldr	s15, [r3]
 800643e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006442:	4b2c      	ldr	r3, [pc, #176]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 8006444:	edd3 6a01 	vldr	s13, [r3, #4]
 8006448:	4b2a      	ldr	r3, [pc, #168]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 800644a:	edd3 7a01 	vldr	s15, [r3, #4]
 800644e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006452:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006456:	4b27      	ldr	r3, [pc, #156]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 8006458:	edd3 6a02 	vldr	s13, [r3, #8]
 800645c:	4b25      	ldr	r3, [pc, #148]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 800645e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006466:	ee37 7a27 	vadd.f32	s14, s14, s15
 800646a:	4b22      	ldr	r3, [pc, #136]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 800646c:	edd3 6a03 	vldr	s13, [r3, #12]
 8006470:	4b20      	ldr	r3, [pc, #128]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 8006472:	edd3 7a03 	vldr	s15, [r3, #12]
 8006476:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800647a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800647e:	eeb0 0a67 	vmov.f32	s0, s15
 8006482:	f000 fb91 	bl	8006ba8 <invSqrt>
 8006486:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 800648a:	4b1a      	ldr	r3, [pc, #104]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 800648c:	ed93 7a00 	vldr	s14, [r3]
 8006490:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006498:	4b16      	ldr	r3, [pc, #88]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 800649a:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 800649e:	4b15      	ldr	r3, [pc, #84]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 80064a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80064a4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80064a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ac:	4b11      	ldr	r3, [pc, #68]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 80064ae:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] *= recipNorm;
 80064b2:	4b10      	ldr	r3, [pc, #64]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 80064b4:	ed93 7a02 	vldr	s14, [r3, #8]
 80064b8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80064bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064c0:	4b0c      	ldr	r3, [pc, #48]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 80064c2:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] *= recipNorm;
 80064c6:	4b0b      	ldr	r3, [pc, #44]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 80064c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80064cc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80064d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064d4:	4b07      	ldr	r3, [pc, #28]	@ (80064f4 <MahonyAHRSupdateIMU+0x4d4>)
 80064d6:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80064da:	bf00      	nop
 80064dc:	3748      	adds	r7, #72	@ 0x48
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	200007b0 	.word	0x200007b0
 80064e8:	200007b4 	.word	0x200007b4
 80064ec:	200007b8 	.word	0x200007b8
 80064f0:	20000038 	.word	0x20000038
 80064f4:	20000028 	.word	0x20000028

080064f8 <quaternionToThetaZ>:


float quaternionToThetaZ() {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
    float r13 = 2 * q[1] * q[3] + 2 * q[2] * q[0];
 80064fe:	4b44      	ldr	r3, [pc, #272]	@ (8006610 <quaternionToThetaZ+0x118>)
 8006500:	edd3 7a01 	vldr	s15, [r3, #4]
 8006504:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006508:	4b41      	ldr	r3, [pc, #260]	@ (8006610 <quaternionToThetaZ+0x118>)
 800650a:	edd3 7a03 	vldr	s15, [r3, #12]
 800650e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006512:	4b3f      	ldr	r3, [pc, #252]	@ (8006610 <quaternionToThetaZ+0x118>)
 8006514:	edd3 7a02 	vldr	s15, [r3, #8]
 8006518:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800651c:	4b3c      	ldr	r3, [pc, #240]	@ (8006610 <quaternionToThetaZ+0x118>)
 800651e:	edd3 7a00 	vldr	s15, [r3]
 8006522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800652a:	edc7 7a05 	vstr	s15, [r7, #20]
    float r23 = 2 * q[2] * q[3] - 2 * q[1] * q[0];
 800652e:	4b38      	ldr	r3, [pc, #224]	@ (8006610 <quaternionToThetaZ+0x118>)
 8006530:	edd3 7a02 	vldr	s15, [r3, #8]
 8006534:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006538:	4b35      	ldr	r3, [pc, #212]	@ (8006610 <quaternionToThetaZ+0x118>)
 800653a:	edd3 7a03 	vldr	s15, [r3, #12]
 800653e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006542:	4b33      	ldr	r3, [pc, #204]	@ (8006610 <quaternionToThetaZ+0x118>)
 8006544:	edd3 7a01 	vldr	s15, [r3, #4]
 8006548:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800654c:	4b30      	ldr	r3, [pc, #192]	@ (8006610 <quaternionToThetaZ+0x118>)
 800654e:	edd3 7a00 	vldr	s15, [r3]
 8006552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800655a:	edc7 7a04 	vstr	s15, [r7, #16]
    float r33 = 1 - 2 * q[1] * q[1] - 2 * q[2] * q[2];
 800655e:	4b2c      	ldr	r3, [pc, #176]	@ (8006610 <quaternionToThetaZ+0x118>)
 8006560:	edd3 7a01 	vldr	s15, [r3, #4]
 8006564:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006568:	4b29      	ldr	r3, [pc, #164]	@ (8006610 <quaternionToThetaZ+0x118>)
 800656a:	edd3 7a01 	vldr	s15, [r3, #4]
 800656e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006572:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006576:	ee37 7a67 	vsub.f32	s14, s14, s15
 800657a:	4b25      	ldr	r3, [pc, #148]	@ (8006610 <quaternionToThetaZ+0x118>)
 800657c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006580:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006584:	4b22      	ldr	r3, [pc, #136]	@ (8006610 <quaternionToThetaZ+0x118>)
 8006586:	edd3 7a02 	vldr	s15, [r3, #8]
 800658a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800658e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006592:	edc7 7a03 	vstr	s15, [r7, #12]

    float dotProduct = r33;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	60bb      	str	r3, [r7, #8]
    float magnitude = sqrtf(r13 * r13 + r23 * r23 + r33 * r33);
 800659a:	edd7 7a05 	vldr	s15, [r7, #20]
 800659e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80065a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80065a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80065aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80065b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80065b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065ba:	eeb0 0a67 	vmov.f32	s0, s15
 80065be:	f009 fc85 	bl	800fecc <sqrtf>
 80065c2:	ed87 0a01 	vstr	s0, [r7, #4]

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
 80065c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80065ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80065ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80065d2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80065d6:	eeb0 0a66 	vmov.f32	s0, s13
 80065da:	f009 fcca 	bl	800ff72 <fminf>
 80065de:	eef0 7a40 	vmov.f32	s15, s0
 80065e2:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80065e6:	eeb0 0a67 	vmov.f32	s0, s15
 80065ea:	f009 fca5 	bl	800ff38 <fmaxf>
 80065ee:	ed87 0a00 	vstr	s0, [r7]
    return acosf(safeValue) * (180.0f / 3.14f);
 80065f2:	ed97 0a00 	vldr	s0, [r7]
 80065f6:	f009 fc0f 	bl	800fe18 <acosf>
 80065fa:	eef0 7a40 	vmov.f32	s15, s0
 80065fe:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006614 <quaternionToThetaZ+0x11c>
 8006602:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006606:	eeb0 0a67 	vmov.f32	s0, s15
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	20000028 	.word	0x20000028
 8006614:	42654ca3 	.word	0x42654ca3

08006618 <quaternionToPitchDegree>:
    float siny_cosp = 2.0f * (w * z + x * y);
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
}

float quaternionToPitchDegree() {
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 800661e:	4b22      	ldr	r3, [pc, #136]	@ (80066a8 <quaternionToPitchDegree+0x90>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	617b      	str	r3, [r7, #20]
 8006624:	4b20      	ldr	r3, [pc, #128]	@ (80066a8 <quaternionToPitchDegree+0x90>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	613b      	str	r3, [r7, #16]
 800662a:	4b1f      	ldr	r3, [pc, #124]	@ (80066a8 <quaternionToPitchDegree+0x90>)
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	4b1d      	ldr	r3, [pc, #116]	@ (80066a8 <quaternionToPitchDegree+0x90>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	60bb      	str	r3, [r7, #8]
    float sinp = 2.0f * (w * y - z * x);
 8006636:	ed97 7a05 	vldr	s14, [r7, #20]
 800663a:	edd7 7a03 	vldr	s15, [r7, #12]
 800663e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006642:	edd7 6a02 	vldr	s13, [r7, #8]
 8006646:	edd7 7a04 	vldr	s15, [r7, #16]
 800664a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800664e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006652:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006656:	edc7 7a01 	vstr	s15, [r7, #4]
    if (fabsf(sinp) >= 1.0f)
 800665a:	edd7 7a01 	vldr	s15, [r7, #4]
 800665e:	eef0 7ae7 	vabs.f32	s15, s15
 8006662:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800666a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800666e:	db0c      	blt.n	800668a <quaternionToPitchDegree+0x72>
        return (sinp > 0 ? 90.0f : -90.0f); // clamp
 8006670:	edd7 7a01 	vldr	s15, [r7, #4]
 8006674:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800667c:	dd02      	ble.n	8006684 <quaternionToPitchDegree+0x6c>
 800667e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80066ac <quaternionToPitchDegree+0x94>
 8006682:	e00c      	b.n	800669e <quaternionToPitchDegree+0x86>
 8006684:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80066b0 <quaternionToPitchDegree+0x98>
 8006688:	e009      	b.n	800669e <quaternionToPitchDegree+0x86>
    else
        return asinf(sinp) * (180.0f / 3.14159265f);
 800668a:	ed97 0a01 	vldr	s0, [r7, #4]
 800668e:	f009 fbef 	bl	800fe70 <asinf>
 8006692:	eef0 7a40 	vmov.f32	s15, s0
 8006696:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80066b4 <quaternionToPitchDegree+0x9c>
 800669a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800669e:	eeb0 0a67 	vmov.f32	s0, s15
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20000028 	.word	0x20000028
 80066ac:	42b40000 	.word	0x42b40000
 80066b0:	c2b40000 	.word	0xc2b40000
 80066b4:	42652ee0 	.word	0x42652ee0

080066b8 <quaternionToRollDegree>:

float quaternionToRollDegree(){
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 80066be:	4b20      	ldr	r3, [pc, #128]	@ (8006740 <quaternionToRollDegree+0x88>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	4b1e      	ldr	r3, [pc, #120]	@ (8006740 <quaternionToRollDegree+0x88>)
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	613b      	str	r3, [r7, #16]
 80066ca:	4b1d      	ldr	r3, [pc, #116]	@ (8006740 <quaternionToRollDegree+0x88>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006740 <quaternionToRollDegree+0x88>)
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	60bb      	str	r3, [r7, #8]
    float sinr_cosp = 2.0f * (w * x + y * z);
 80066d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80066da:	edd7 7a04 	vldr	s15, [r7, #16]
 80066de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066e2:	edd7 6a03 	vldr	s13, [r7, #12]
 80066e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80066ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80066f6:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosr_cosp = 1.0f - 2.0f * (x * x + y * y);
 80066fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80066fe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006702:	edd7 7a03 	vldr	s15, [r7, #12]
 8006706:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800670a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800670e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006712:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800671a:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(sinr_cosp, cosr_cosp) * (180.0f / 3.14159265f);
 800671e:	edd7 0a00 	vldr	s1, [r7]
 8006722:	ed97 0a01 	vldr	s0, [r7, #4]
 8006726:	f009 fbcf 	bl	800fec8 <atan2f>
 800672a:	eef0 7a40 	vmov.f32	s15, s0
 800672e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006744 <quaternionToRollDegree+0x8c>
 8006732:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006736:	eeb0 0a67 	vmov.f32	s0, s15
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	20000028 	.word	0x20000028
 8006744:	42652ee0 	.word	0x42652ee0

08006748 <quaternionToYaw>:


float quaternionToYaw(){
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 800674e:	4b2a      	ldr	r3, [pc, #168]	@ (80067f8 <quaternionToYaw+0xb0>)
 8006750:	ed93 7a01 	vldr	s14, [r3, #4]
 8006754:	4b28      	ldr	r3, [pc, #160]	@ (80067f8 <quaternionToYaw+0xb0>)
 8006756:	edd3 7a02 	vldr	s15, [r3, #8]
 800675a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800675e:	4b26      	ldr	r3, [pc, #152]	@ (80067f8 <quaternionToYaw+0xb0>)
 8006760:	edd3 6a00 	vldr	s13, [r3]
 8006764:	4b24      	ldr	r3, [pc, #144]	@ (80067f8 <quaternionToYaw+0xb0>)
 8006766:	edd3 7a03 	vldr	s15, [r3, #12]
 800676a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800676e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006772:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8006776:	4b20      	ldr	r3, [pc, #128]	@ (80067f8 <quaternionToYaw+0xb0>)
 8006778:	ed93 7a00 	vldr	s14, [r3]
 800677c:	4b1e      	ldr	r3, [pc, #120]	@ (80067f8 <quaternionToYaw+0xb0>)
 800677e:	edd3 7a00 	vldr	s15, [r3]
 8006782:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006786:	4b1c      	ldr	r3, [pc, #112]	@ (80067f8 <quaternionToYaw+0xb0>)
 8006788:	edd3 6a01 	vldr	s13, [r3, #4]
 800678c:	4b1a      	ldr	r3, [pc, #104]	@ (80067f8 <quaternionToYaw+0xb0>)
 800678e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006792:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006796:	ee37 7a27 	vadd.f32	s14, s14, s15
 800679a:	4b17      	ldr	r3, [pc, #92]	@ (80067f8 <quaternionToYaw+0xb0>)
 800679c:	edd3 6a02 	vldr	s13, [r3, #8]
 80067a0:	4b15      	ldr	r3, [pc, #84]	@ (80067f8 <quaternionToYaw+0xb0>)
 80067a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80067a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80067ae:	4b12      	ldr	r3, [pc, #72]	@ (80067f8 <quaternionToYaw+0xb0>)
 80067b0:	edd3 6a03 	vldr	s13, [r3, #12]
 80067b4:	4b10      	ldr	r3, [pc, #64]	@ (80067f8 <quaternionToYaw+0xb0>)
 80067b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80067ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067c2:	eef0 0a67 	vmov.f32	s1, s15
 80067c6:	eeb0 0a46 	vmov.f32	s0, s12
 80067ca:	f009 fb7d 	bl	800fec8 <atan2f>
 80067ce:	eef0 7a40 	vmov.f32	s15, s0
 80067d2:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80067fc <quaternionToYaw+0xb4>
 80067d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80067da:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006800 <quaternionToYaw+0xb8>
 80067de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067e2:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	ee07 3a90 	vmov	s15, r3
}
 80067ec:	eeb0 0a67 	vmov.f32	s0, s15
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20000028 	.word	0x20000028
 80067fc:	43340000 	.word	0x43340000
 8006800:	40490fd0 	.word	0x40490fd0

08006804 <quaternionToPitch>:

float quaternionToPitch(){
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 800680a:	4b17      	ldr	r3, [pc, #92]	@ (8006868 <quaternionToPitch+0x64>)
 800680c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006810:	4b15      	ldr	r3, [pc, #84]	@ (8006868 <quaternionToPitch+0x64>)
 8006812:	edd3 7a03 	vldr	s15, [r3, #12]
 8006816:	ee27 7a27 	vmul.f32	s14, s14, s15
 800681a:	4b13      	ldr	r3, [pc, #76]	@ (8006868 <quaternionToPitch+0x64>)
 800681c:	edd3 6a00 	vldr	s13, [r3]
 8006820:	4b11      	ldr	r3, [pc, #68]	@ (8006868 <quaternionToPitch+0x64>)
 8006822:	edd3 7a02 	vldr	s15, [r3, #8]
 8006826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800682a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800682e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006832:	eeb0 0a67 	vmov.f32	s0, s15
 8006836:	f009 fb1b 	bl	800fe70 <asinf>
 800683a:	eef0 7a40 	vmov.f32	s15, s0
 800683e:	eef1 7a67 	vneg.f32	s15, s15
 8006842:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800686c <quaternionToPitch+0x68>
 8006846:	ee27 7a87 	vmul.f32	s14, s15, s14
 800684a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006870 <quaternionToPitch+0x6c>
 800684e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006852:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	ee07 3a90 	vmov	s15, r3
}
 800685c:	eeb0 0a67 	vmov.f32	s0, s15
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20000028 	.word	0x20000028
 800686c:	43340000 	.word	0x43340000
 8006870:	40490fd0 	.word	0x40490fd0

08006874 <quaternionToRoll>:

float quaternionToRoll(){
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 800687a:	4b2a      	ldr	r3, [pc, #168]	@ (8006924 <quaternionToRoll+0xb0>)
 800687c:	ed93 7a00 	vldr	s14, [r3]
 8006880:	4b28      	ldr	r3, [pc, #160]	@ (8006924 <quaternionToRoll+0xb0>)
 8006882:	edd3 7a01 	vldr	s15, [r3, #4]
 8006886:	ee27 7a27 	vmul.f32	s14, s14, s15
 800688a:	4b26      	ldr	r3, [pc, #152]	@ (8006924 <quaternionToRoll+0xb0>)
 800688c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006890:	4b24      	ldr	r3, [pc, #144]	@ (8006924 <quaternionToRoll+0xb0>)
 8006892:	edd3 7a03 	vldr	s15, [r3, #12]
 8006896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800689a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800689e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80068a2:	4b20      	ldr	r3, [pc, #128]	@ (8006924 <quaternionToRoll+0xb0>)
 80068a4:	ed93 7a00 	vldr	s14, [r3]
 80068a8:	4b1e      	ldr	r3, [pc, #120]	@ (8006924 <quaternionToRoll+0xb0>)
 80068aa:	edd3 7a00 	vldr	s15, [r3]
 80068ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068b2:	4b1c      	ldr	r3, [pc, #112]	@ (8006924 <quaternionToRoll+0xb0>)
 80068b4:	edd3 6a01 	vldr	s13, [r3, #4]
 80068b8:	4b1a      	ldr	r3, [pc, #104]	@ (8006924 <quaternionToRoll+0xb0>)
 80068ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80068be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068c6:	4b17      	ldr	r3, [pc, #92]	@ (8006924 <quaternionToRoll+0xb0>)
 80068c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80068cc:	4b15      	ldr	r3, [pc, #84]	@ (8006924 <quaternionToRoll+0xb0>)
 80068ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80068d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068da:	4b12      	ldr	r3, [pc, #72]	@ (8006924 <quaternionToRoll+0xb0>)
 80068dc:	edd3 6a03 	vldr	s13, [r3, #12]
 80068e0:	4b10      	ldr	r3, [pc, #64]	@ (8006924 <quaternionToRoll+0xb0>)
 80068e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80068e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068ee:	eef0 0a67 	vmov.f32	s1, s15
 80068f2:	eeb0 0a46 	vmov.f32	s0, s12
 80068f6:	f009 fae7 	bl	800fec8 <atan2f>
 80068fa:	eef0 7a40 	vmov.f32	s15, s0
 80068fe:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006928 <quaternionToRoll+0xb4>
 8006902:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006906:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800692c <quaternionToRoll+0xb8>
 800690a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800690e:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	ee07 3a90 	vmov	s15, r3
}
 8006918:	eeb0 0a67 	vmov.f32	s0, s15
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	20000028 	.word	0x20000028
 8006928:	43340000 	.word	0x43340000
 800692c:	40490fd0 	.word	0x40490fd0

08006930 <getInitialQuaternion>:

void getInitialQuaternion() {
 8006930:	b5b0      	push	{r4, r5, r7, lr}
 8006932:	b092      	sub	sp, #72	@ 0x48
 8006934:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.datas.acc_z * BMI_sensor.datas.acc_z + BMI_sensor.datas.acc_x * BMI_sensor.datas.acc_x + BMI_sensor.datas.acc_y * BMI_sensor.datas.acc_y);
 8006936:	4b98      	ldr	r3, [pc, #608]	@ (8006b98 <getInitialQuaternion+0x268>)
 8006938:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 800693c:	4b96      	ldr	r3, [pc, #600]	@ (8006b98 <getInitialQuaternion+0x268>)
 800693e:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8006942:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006946:	4b94      	ldr	r3, [pc, #592]	@ (8006b98 <getInitialQuaternion+0x268>)
 8006948:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800694c:	4b92      	ldr	r3, [pc, #584]	@ (8006b98 <getInitialQuaternion+0x268>)
 800694e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8006952:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006956:	ee37 7a27 	vadd.f32	s14, s14, s15
 800695a:	4b8f      	ldr	r3, [pc, #572]	@ (8006b98 <getInitialQuaternion+0x268>)
 800695c:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8006960:	4b8d      	ldr	r3, [pc, #564]	@ (8006b98 <getInitialQuaternion+0x268>)
 8006962:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8006966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800696a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800696e:	ee17 0a90 	vmov	r0, s15
 8006972:	f7f9 fe09 	bl	8000588 <__aeabi_f2d>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	ec43 2b10 	vmov	d0, r2, r3
 800697e:	f009 f9cb 	bl	800fd18 <sqrt>
 8006982:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.datas.acc_y;
 8006986:	4b84      	ldr	r3, [pc, #528]	@ (8006b98 <getInitialQuaternion+0x268>)
 8006988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800698a:	4618      	mov	r0, r3
 800698c:	f7f9 fdfc 	bl	8000588 <__aeabi_f2d>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)-BMI_sensor.datas.acc_z;
 8006998:	4b7f      	ldr	r3, [pc, #508]	@ (8006b98 <getInitialQuaternion+0x268>)
 800699a:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800699e:	eef1 7a67 	vneg.f32	s15, s15
 80069a2:	ee17 3a90 	vmov	r3, s15
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7f9 fdee 	bl	8000588 <__aeabi_f2d>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] = (double)BMI_sensor.datas.acc_x;
 80069b4:	4b78      	ldr	r3, [pc, #480]	@ (8006b98 <getInitialQuaternion+0x268>)
 80069b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7f9 fde5 	bl	8000588 <__aeabi_f2d>
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    accel_temp[0] /= norm;
 80069c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80069ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80069ce:	f7f9 ff5d 	bl	800088c <__aeabi_ddiv>
 80069d2:	4602      	mov	r2, r0
 80069d4:	460b      	mov	r3, r1
 80069d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 80069da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80069de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80069e2:	f7f9 ff53 	bl	800088c <__aeabi_ddiv>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 80069ee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80069f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80069f6:	f7f9 ff49 	bl	800088c <__aeabi_ddiv>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 8006a02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a06:	f04f 0000 	mov.w	r0, #0
 8006a0a:	4964      	ldr	r1, [pc, #400]	@ (8006b9c <getInitialQuaternion+0x26c>)
 8006a0c:	f7f9 fc5c 	bl	80002c8 <__aeabi_dsub>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	ec43 2b17 	vmov	d7, r2, r3
 8006a18:	eeb0 0a47 	vmov.f32	s0, s14
 8006a1c:	eef0 0a67 	vmov.f32	s1, s15
 8006a20:	f009 f97a 	bl	800fd18 <sqrt>
 8006a24:	ec51 0b10 	vmov	r0, r1, d0
 8006a28:	f04f 0200 	mov.w	r2, #0
 8006a2c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ba0 <getInitialQuaternion+0x270>)
 8006a2e:	f7f9 fe03 	bl	8000638 <__aeabi_dmul>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 8006a3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a3e:	f04f 0000 	mov.w	r0, #0
 8006a42:	4957      	ldr	r1, [pc, #348]	@ (8006ba0 <getInitialQuaternion+0x270>)
 8006a44:	f7f9 ff22 	bl	800088c <__aeabi_ddiv>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 8006a50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006a54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006a58:	f7f9 fdee 	bl	8000638 <__aeabi_dmul>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4610      	mov	r0, r2
 8006a62:	4619      	mov	r1, r3
 8006a64:	f04f 0200 	mov.w	r2, #0
 8006a68:	4b4d      	ldr	r3, [pc, #308]	@ (8006ba0 <getInitialQuaternion+0x270>)
 8006a6a:	f7f9 fde5 	bl	8000638 <__aeabi_dmul>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 8006a76:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8006a7a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006a7e:	f7f9 fddb 	bl	8000638 <__aeabi_dmul>
 8006a82:	4602      	mov	r2, r0
 8006a84:	460b      	mov	r3, r1
 8006a86:	4610      	mov	r0, r2
 8006a88:	4619      	mov	r1, r3
 8006a8a:	f04f 0200 	mov.w	r2, #0
 8006a8e:	4b44      	ldr	r3, [pc, #272]	@ (8006ba0 <getInitialQuaternion+0x270>)
 8006a90:	f7f9 fdd2 	bl	8000638 <__aeabi_dmul>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 8006a9c:	f04f 0200 	mov.w	r2, #0
 8006aa0:	f04f 0300 	mov.w	r3, #0
 8006aa4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8006aa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ab0:	f7f9 fdc2 	bl	8000638 <__aeabi_dmul>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4614      	mov	r4, r2
 8006aba:	461d      	mov	r5, r3
 8006abc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ac0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ac4:	f7f9 fdb8 	bl	8000638 <__aeabi_dmul>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4620      	mov	r0, r4
 8006ace:	4629      	mov	r1, r5
 8006ad0:	f7f9 fbfc 	bl	80002cc <__adddf3>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4614      	mov	r4, r2
 8006ada:	461d      	mov	r5, r3
 8006adc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006ae0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ae4:	f7f9 fda8 	bl	8000638 <__aeabi_dmul>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	4620      	mov	r0, r4
 8006aee:	4629      	mov	r1, r5
 8006af0:	f7f9 fbec 	bl	80002cc <__adddf3>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4614      	mov	r4, r2
 8006afa:	461d      	mov	r5, r3
 8006afc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006b00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b04:	f7f9 fd98 	bl	8000638 <__aeabi_dmul>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	4629      	mov	r1, r5
 8006b10:	f7f9 fbdc 	bl	80002cc <__adddf3>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	ec43 2b17 	vmov	d7, r2, r3
 8006b1c:	eeb0 0a47 	vmov.f32	s0, s14
 8006b20:	eef0 0a67 	vmov.f32	s1, s15
 8006b24:	f009 f8f8 	bl	800fd18 <sqrt>
 8006b28:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

    q[0] = q_temp[0] / norm;
 8006b2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b34:	f7f9 feaa 	bl	800088c <__aeabi_ddiv>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	4619      	mov	r1, r3
 8006b40:	f7fa f852 	bl	8000be8 <__aeabi_d2f>
 8006b44:	4603      	mov	r3, r0
 8006b46:	4a17      	ldr	r2, [pc, #92]	@ (8006ba4 <getInitialQuaternion+0x274>)
 8006b48:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 8006b4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b52:	f7f9 fe9b 	bl	800088c <__aeabi_ddiv>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	f7fa f843 	bl	8000be8 <__aeabi_d2f>
 8006b62:	4603      	mov	r3, r0
 8006b64:	4a0f      	ldr	r2, [pc, #60]	@ (8006ba4 <getInitialQuaternion+0x274>)
 8006b66:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 8006b68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006b6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b70:	f7f9 fe8c 	bl	800088c <__aeabi_ddiv>
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	4610      	mov	r0, r2
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	f7fa f834 	bl	8000be8 <__aeabi_d2f>
 8006b80:	4603      	mov	r3, r0
 8006b82:	4a08      	ldr	r2, [pc, #32]	@ (8006ba4 <getInitialQuaternion+0x274>)
 8006b84:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 8006b86:	4b07      	ldr	r3, [pc, #28]	@ (8006ba4 <getInitialQuaternion+0x274>)
 8006b88:	f04f 0200 	mov.w	r2, #0
 8006b8c:	60da      	str	r2, [r3, #12]
}
 8006b8e:	bf00      	nop
 8006b90:	3748      	adds	r7, #72	@ 0x48
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bdb0      	pop	{r4, r5, r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20000654 	.word	0x20000654
 8006b9c:	3ff00000 	.word	0x3ff00000
 8006ba0:	3fe00000 	.word	0x3fe00000
 8006ba4:	20000028 	.word	0x20000028

08006ba8 <invSqrt>:

float invSqrt(float x) {
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8006bb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8006bb6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006bba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bbe:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8006bc6:	f107 0310 	add.w	r3, r7, #16
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	105a      	asrs	r2, r3, #1
 8006bd2:	4b12      	ldr	r3, [pc, #72]	@ (8006c1c <invSqrt+0x74>)
 8006bd4:	1a9b      	subs	r3, r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8006bd8:	f107 030c 	add.w	r3, r7, #12
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8006be0:	ed97 7a04 	vldr	s14, [r7, #16]
 8006be4:	edd7 7a05 	vldr	s15, [r7, #20]
 8006be8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bec:	edd7 7a04 	vldr	s15, [r7, #16]
 8006bf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bf4:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8006bf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006bfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8006c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c04:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	ee07 3a90 	vmov	s15, r3
}
 8006c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	5f3759df 	.word	0x5f3759df

08006c20 <calculate_accel_std_deviation>:
/**
 * @brief İvme değerlerinin standart sapmasını hesapla
 * @return Standart sapma değeri
 */
static float calculate_accel_std_deviation(void)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
    // Buffer dolmadıysa ve çok az veri varsa
    if (!accel_buffer_full && accel_buffer_index < 2) return 0.0f;
 8006c26:	4b3d      	ldr	r3, [pc, #244]	@ (8006d1c <calculate_accel_std_deviation+0xfc>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d106      	bne.n	8006c3c <calculate_accel_std_deviation+0x1c>
 8006c2e:	4b3c      	ldr	r3, [pc, #240]	@ (8006d20 <calculate_accel_std_deviation+0x100>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d802      	bhi.n	8006c3c <calculate_accel_std_deviation+0x1c>
 8006c36:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8006d24 <calculate_accel_std_deviation+0x104>
 8006c3a:	e069      	b.n	8006d10 <calculate_accel_std_deviation+0xf0>

    int count = accel_buffer_full ? ACCEL_BUFFER_SIZE : accel_buffer_index;
 8006c3c:	4b37      	ldr	r3, [pc, #220]	@ (8006d1c <calculate_accel_std_deviation+0xfc>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <calculate_accel_std_deviation+0x2a>
 8006c44:	4b36      	ldr	r3, [pc, #216]	@ (8006d20 <calculate_accel_std_deviation+0x100>)
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	e000      	b.n	8006c4c <calculate_accel_std_deviation+0x2c>
 8006c4a:	2305      	movs	r3, #5
 8006c4c:	607b      	str	r3, [r7, #4]
    float sum = 0.0f;
 8006c4e:	f04f 0300 	mov.w	r3, #0
 8006c52:	617b      	str	r3, [r7, #20]
    float mean = 0.0f;
 8006c54:	f04f 0300 	mov.w	r3, #0
 8006c58:	603b      	str	r3, [r7, #0]
    float variance = 0.0f;
 8006c5a:	f04f 0300 	mov.w	r3, #0
 8006c5e:	613b      	str	r3, [r7, #16]

    // Ortalama hesapla
    for (int i = 0; i < count; i++) {
 8006c60:	2300      	movs	r3, #0
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	e00e      	b.n	8006c84 <calculate_accel_std_deviation+0x64>
        sum += accel_buffer[i];
 8006c66:	4a30      	ldr	r2, [pc, #192]	@ (8006d28 <calculate_accel_std_deviation+0x108>)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	edd3 7a00 	vldr	s15, [r3]
 8006c72:	ed97 7a05 	vldr	s14, [r7, #20]
 8006c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c7a:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < count; i++) {
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3301      	adds	r3, #1
 8006c82:	60fb      	str	r3, [r7, #12]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	dbec      	blt.n	8006c66 <calculate_accel_std_deviation+0x46>
    }
    mean = sum / count;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c96:	edd7 6a05 	vldr	s13, [r7, #20]
 8006c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c9e:	edc7 7a00 	vstr	s15, [r7]

    // Varyans hesapla
    for (int i = 0; i < count; i++) {
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60bb      	str	r3, [r7, #8]
 8006ca6:	e01e      	b.n	8006ce6 <calculate_accel_std_deviation+0xc6>
        variance += (accel_buffer[i] - mean) * (accel_buffer[i] - mean);
 8006ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8006d28 <calculate_accel_std_deviation+0x108>)
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	ed93 7a00 	vldr	s14, [r3]
 8006cb4:	edd7 7a00 	vldr	s15, [r7]
 8006cb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8006d28 <calculate_accel_std_deviation+0x108>)
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	edd3 6a00 	vldr	s13, [r3]
 8006cc8:	edd7 7a00 	vldr	s15, [r7]
 8006ccc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd4:	ed97 7a04 	vldr	s14, [r7, #16]
 8006cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cdc:	edc7 7a04 	vstr	s15, [r7, #16]
    for (int i = 0; i < count; i++) {
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	60bb      	str	r3, [r7, #8]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	dbdc      	blt.n	8006ca8 <calculate_accel_std_deviation+0x88>
    }
    variance /= count;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	ee07 3a90 	vmov	s15, r3
 8006cf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006cf8:	edd7 6a04 	vldr	s13, [r7, #16]
 8006cfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d00:	edc7 7a04 	vstr	s15, [r7, #16]

    return sqrtf(variance);
 8006d04:	ed97 0a04 	vldr	s0, [r7, #16]
 8006d08:	f009 f8e0 	bl	800fecc <sqrtf>
 8006d0c:	eef0 7a40 	vmov.f32	s15, s0
}
 8006d10:	eeb0 0a67 	vmov.f32	s0, s15
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	2000083d 	.word	0x2000083d
 8006d20:	2000083c 	.word	0x2000083c
 8006d24:	00000000 	.word	0x00000000
 8006d28:	20000828 	.word	0x20000828

08006d2c <detect_accel_failure>:
 * @brief İvme sensörünün arızalı olup olmadığını kontrol et
 * @param accel İvme değeri (m/s²)
 * @return 1: Arıza tespit edildi, 0: Arıza yok
 */
static uint8_t detect_accel_failure(float accel)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b088      	sub	sp, #32
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	ed87 0a01 	vstr	s0, [r7, #4]
    float accel_abs = fabsf(accel);
 8006d36:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d3a:	eef0 7ae7 	vabs.f32	s15, s15
 8006d3e:	edc7 7a05 	vstr	s15, [r7, #20]
    float max_accel, max_std;

    // Buffer güncelleme
    accel_buffer[accel_buffer_index] = accel_abs;
 8006d42:	4b31      	ldr	r3, [pc, #196]	@ (8006e08 <detect_accel_failure+0xdc>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	4a31      	ldr	r2, [pc, #196]	@ (8006e0c <detect_accel_failure+0xe0>)
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	601a      	str	r2, [r3, #0]
    accel_buffer_index = (accel_buffer_index + 1) % ACCEL_BUFFER_SIZE;
 8006d50:	4b2d      	ldr	r3, [pc, #180]	@ (8006e08 <detect_accel_failure+0xdc>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	4b2e      	ldr	r3, [pc, #184]	@ (8006e10 <detect_accel_failure+0xe4>)
 8006d58:	fb83 1302 	smull	r1, r3, r3, r2
 8006d5c:	1059      	asrs	r1, r3, #1
 8006d5e:	17d3      	asrs	r3, r2, #31
 8006d60:	1ac9      	subs	r1, r1, r3
 8006d62:	460b      	mov	r3, r1
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	440b      	add	r3, r1
 8006d68:	1ad1      	subs	r1, r2, r3
 8006d6a:	b2ca      	uxtb	r2, r1
 8006d6c:	4b26      	ldr	r3, [pc, #152]	@ (8006e08 <detect_accel_failure+0xdc>)
 8006d6e:	701a      	strb	r2, [r3, #0]
    if (accel_buffer_index == 0) {
 8006d70:	4b25      	ldr	r3, [pc, #148]	@ (8006e08 <detect_accel_failure+0xdc>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d102      	bne.n	8006d7e <detect_accel_failure+0x52>
        accel_buffer_full = 1;
 8006d78:	4b26      	ldr	r3, [pc, #152]	@ (8006e14 <detect_accel_failure+0xe8>)
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	701a      	strb	r2, [r3, #0]
    }

    // Standart sapma hesapla
    float std_dev = calculate_accel_std_deviation();
 8006d7e:	f7ff ff4f 	bl	8006c20 <calculate_accel_std_deviation>
 8006d82:	ed87 0a04 	vstr	s0, [r7, #16]

    // Uçuş başlangıç zamanını flight_algorithm'dan al
	uint32_t algorithm_start_time = flight_algorithm_get_start_time();
 8006d86:	f7fc f9b5 	bl	80030f4 <flight_algorithm_get_start_time>
 8006d8a:	60f8      	str	r0, [r7, #12]

	// Uçuş başlamışsa flight_algorithm'dan gelen zamanı kullan
	if (algorithm_start_time > 0) {
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <detect_accel_failure+0x6c>
		flight_start_time = algorithm_start_time;
 8006d92:	4a21      	ldr	r2, [pc, #132]	@ (8006e18 <detect_accel_failure+0xec>)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6013      	str	r3, [r2, #0]
	}

	// Uçuş fazına göre limit değerlerini belirle
	if (flight_start_time == 0) {
 8006d98:	4b1f      	ldr	r3, [pc, #124]	@ (8006e18 <detect_accel_failure+0xec>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d104      	bne.n	8006daa <detect_accel_failure+0x7e>
		max_accel = 200.0f;  // Yer hazırlığında gerçekçi olmayan çok yüksek değer
 8006da0:	4b1e      	ldr	r3, [pc, #120]	@ (8006e1c <detect_accel_failure+0xf0>)
 8006da2:	61fb      	str	r3, [r7, #28]
		max_std = 100.0f;    // Yer hazırlığında çok yüksek standart sapma eşiği
 8006da4:	4b1e      	ldr	r3, [pc, #120]	@ (8006e20 <detect_accel_failure+0xf4>)
 8006da6:	61bb      	str	r3, [r7, #24]
 8006da8:	e014      	b.n	8006dd4 <detect_accel_failure+0xa8>
	}
	else {
		// *** UÇUŞ BAŞLADI - NORMAL ARIZA TESPİTİ ***
		uint32_t flight_elapsed_time = HAL_GetTick() - flight_start_time;
 8006daa:	f001 f881 	bl	8007eb0 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	4b19      	ldr	r3, [pc, #100]	@ (8006e18 <detect_accel_failure+0xec>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	60bb      	str	r3, [r7, #8]

		if (flight_elapsed_time < THRUST_PHASE_DURATION_MS) {
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d804      	bhi.n	8006dcc <detect_accel_failure+0xa0>
			// İtki fazı - Yüksek limitler
			max_accel = ACCEL_MAX_VALUE_THRUST;
 8006dc2:	4b18      	ldr	r3, [pc, #96]	@ (8006e24 <detect_accel_failure+0xf8>)
 8006dc4:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_THRUST;
 8006dc6:	4b18      	ldr	r3, [pc, #96]	@ (8006e28 <detect_accel_failure+0xfc>)
 8006dc8:	61bb      	str	r3, [r7, #24]
 8006dca:	e003      	b.n	8006dd4 <detect_accel_failure+0xa8>
		} else {
			// Seyir fazı - Düşük limitler
			max_accel = ACCEL_MAX_VALUE_CRUISE;
 8006dcc:	4b16      	ldr	r3, [pc, #88]	@ (8006e28 <detect_accel_failure+0xfc>)
 8006dce:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_CRUISE;
 8006dd0:	4b16      	ldr	r3, [pc, #88]	@ (8006e2c <detect_accel_failure+0x100>)
 8006dd2:	61bb      	str	r3, [r7, #24]
		}
	}

    // İvme değeri veya standart sapma limitler dışındaysa
    if (accel_abs > max_accel || std_dev > max_std) {
 8006dd4:	ed97 7a05 	vldr	s14, [r7, #20]
 8006dd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8006ddc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006de4:	dc08      	bgt.n	8006df8 <detect_accel_failure+0xcc>
 8006de6:	ed97 7a04 	vldr	s14, [r7, #16]
 8006dea:	edd7 7a06 	vldr	s15, [r7, #24]
 8006dee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006df6:	dd01      	ble.n	8006dfc <detect_accel_failure+0xd0>
        return 1;  // Arıza tespit edildi
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e000      	b.n	8006dfe <detect_accel_failure+0xd2>
    }

    return 0;  // Arıza yok
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3720      	adds	r7, #32
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	2000083c 	.word	0x2000083c
 8006e0c:	20000828 	.word	0x20000828
 8006e10:	66666667 	.word	0x66666667
 8006e14:	2000083d 	.word	0x2000083d
 8006e18:	20000824 	.word	0x20000824
 8006e1c:	43480000 	.word	0x43480000
 8006e20:	42c80000 	.word	0x42c80000
 8006e24:	43160000 	.word	0x43160000
 8006e28:	42480000 	.word	0x42480000
 8006e2c:	41700000 	.word	0x41700000

08006e30 <sensor_fusion_init>:

/**
 * @brief Initialize the sensor fusion module
 */
void sensor_fusion_init(BME_280_t* BME)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
    KalmanFilter_Init(&kalman);
 8006e38:	481b      	ldr	r0, [pc, #108]	@ (8006ea8 <sensor_fusion_init+0x78>)
 8006e3a:	f7fc f9db 	bl	80031f4 <KalmanFilter_Init>

    // Sensörlerinize göre gürültü değerlerini ayarlayın
    kalman.process_noise = 0.1f;         // Model gürültüsü
 8006e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ea8 <sensor_fusion_init+0x78>)
 8006e40:	4a1a      	ldr	r2, [pc, #104]	@ (8006eac <sensor_fusion_init+0x7c>)
 8006e42:	631a      	str	r2, [r3, #48]	@ 0x30
    kalman.measurement_noise_alt = 0.005f;  // BME280 yükseklik gürültüsü
 8006e44:	4b18      	ldr	r3, [pc, #96]	@ (8006ea8 <sensor_fusion_init+0x78>)
 8006e46:	4a1a      	ldr	r2, [pc, #104]	@ (8006eb0 <sensor_fusion_init+0x80>)
 8006e48:	635a      	str	r2, [r3, #52]	@ 0x34
    kalman.measurement_noise_acc = 5.0f;  // BMI088 ivme gürültüsü
 8006e4a:	4b17      	ldr	r3, [pc, #92]	@ (8006ea8 <sensor_fusion_init+0x78>)
 8006e4c:	4a19      	ldr	r2, [pc, #100]	@ (8006eb4 <sensor_fusion_init+0x84>)
 8006e4e:	639a      	str	r2, [r3, #56]	@ 0x38


    // İvme arıza tespit değişkenlerini sıfırla
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8006e50:	2300      	movs	r3, #0
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	e009      	b.n	8006e6a <sensor_fusion_init+0x3a>
        accel_buffer[i] = 0.0f;
 8006e56:	4a18      	ldr	r2, [pc, #96]	@ (8006eb8 <sensor_fusion_init+0x88>)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f04f 0200 	mov.w	r2, #0
 8006e62:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3301      	adds	r3, #1
 8006e68:	60fb      	str	r3, [r7, #12]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b04      	cmp	r3, #4
 8006e6e:	ddf2      	ble.n	8006e56 <sensor_fusion_init+0x26>
    }
    accel_buffer_index = 0;
 8006e70:	4b12      	ldr	r3, [pc, #72]	@ (8006ebc <sensor_fusion_init+0x8c>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	701a      	strb	r2, [r3, #0]
    accel_buffer_full = 0;
 8006e76:	4b12      	ldr	r3, [pc, #72]	@ (8006ec0 <sensor_fusion_init+0x90>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	701a      	strb	r2, [r3, #0]
    accel_failure_detected = 0;
 8006e7c:	4b11      	ldr	r3, [pc, #68]	@ (8006ec4 <sensor_fusion_init+0x94>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	701a      	strb	r2, [r3, #0]

    initialized = 1;
 8006e82:	4b11      	ldr	r3, [pc, #68]	@ (8006ec8 <sensor_fusion_init+0x98>)
 8006e84:	2201      	movs	r2, #1
 8006e86:	701a      	strb	r2, [r3, #0]
    reference_altitude = BME->base_altitude;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8006ecc <sensor_fusion_init+0x9c>)
 8006e8e:	6013      	str	r3, [r2, #0]
    last_kalman_update_time = HAL_GetTick();
 8006e90:	f001 f80e 	bl	8007eb0 <HAL_GetTick>
 8006e94:	4603      	mov	r3, r0
 8006e96:	4a0e      	ldr	r2, [pc, #56]	@ (8006ed0 <sensor_fusion_init+0xa0>)
 8006e98:	6013      	str	r3, [r2, #0]
    flight_start_time = 0;
 8006e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8006ed4 <sensor_fusion_init+0xa4>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	601a      	str	r2, [r3, #0]
}
 8006ea0:	bf00      	nop
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	200007cc 	.word	0x200007cc
 8006eac:	3dcccccd 	.word	0x3dcccccd
 8006eb0:	3ba3d70a 	.word	0x3ba3d70a
 8006eb4:	40a00000 	.word	0x40a00000
 8006eb8:	20000828 	.word	0x20000828
 8006ebc:	2000083c 	.word	0x2000083c
 8006ec0:	2000083d 	.word	0x2000083d
 8006ec4:	2000083e 	.word	0x2000083e
 8006ec8:	20000818 	.word	0x20000818
 8006ecc:	2000081c 	.word	0x2000081c
 8006ed0:	20000820 	.word	0x20000820
 8006ed4:	20000824 	.word	0x20000824

08006ed8 <sensor_fusion_update_kalman>:

/**
 * @brief Update sensor fusion with new measurements (Kalman filter)
 */
void sensor_fusion_update_kalman(BME_280_t* BME, bmi088_struct_t* BMI, sensor_fusion_t* sensor)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b08a      	sub	sp, #40	@ 0x28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
    // Get current time for automatic delta calculation
    uint32_t current_time = HAL_GetTick();
 8006ee4:	f000 ffe4 	bl	8007eb0 <HAL_GetTick>
 8006ee8:	6238      	str	r0, [r7, #32]

    // Calculate time difference in seconds
    float time_sec = (current_time - last_kalman_update_time) / 1000.0f;
 8006eea:	4b4b      	ldr	r3, [pc, #300]	@ (8007018 <sensor_fusion_update_kalman+0x140>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6a3a      	ldr	r2, [r7, #32]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006efa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800701c <sensor_fusion_update_kalman+0x144>
 8006efe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f02:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Update the last update time
    last_kalman_update_time = current_time;
 8006f06:	4a44      	ldr	r2, [pc, #272]	@ (8007018 <sensor_fusion_update_kalman+0x140>)
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	6013      	str	r3, [r2, #0]

    float altitude = BME->altitude;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	61fb      	str	r3, [r7, #28]

    // Ensure time is valid (never zero or negative)
    if (time_sec <= 0.001f) {
 8006f12:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006f16:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8007020 <sensor_fusion_update_kalman+0x148>
 8006f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f22:	d801      	bhi.n	8006f28 <sensor_fusion_update_kalman+0x50>
        time_sec = 0.01f; // Use default time step if invalid
 8006f24:	4b3f      	ldr	r3, [pc, #252]	@ (8007024 <sensor_fusion_update_kalman+0x14c>)
 8006f26:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calculate vertical acceleration by compensating for gravity using IMU orientation
    float angle_rad = BMI->datas.theta * (M_PI / 180.0f);  // dereceyse radyana çevir
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7f9 fb2b 	bl	8000588 <__aeabi_f2d>
 8006f32:	a335      	add	r3, pc, #212	@ (adr r3, 8007008 <sensor_fusion_update_kalman+0x130>)
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	f7f9 fb7e 	bl	8000638 <__aeabi_dmul>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4610      	mov	r0, r2
 8006f42:	4619      	mov	r1, r3
 8006f44:	f7f9 fe50 	bl	8000be8 <__aeabi_d2f>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	61bb      	str	r3, [r7, #24]

    // Yerçekimi ivmesinin lokal z eksenindeki bileşeni
    float g_local_z = 9.81f * cos(angle_rad);
 8006f4c:	69b8      	ldr	r0, [r7, #24]
 8006f4e:	f7f9 fb1b 	bl	8000588 <__aeabi_f2d>
 8006f52:	4602      	mov	r2, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	ec43 2b10 	vmov	d0, r2, r3
 8006f5a:	f008 ff09 	bl	800fd70 <cos>
 8006f5e:	ec51 0b10 	vmov	r0, r1, d0
 8006f62:	a32b      	add	r3, pc, #172	@ (adr r3, 8007010 <sensor_fusion_update_kalman+0x138>)
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	f7f9 fb66 	bl	8000638 <__aeabi_dmul>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4610      	mov	r0, r2
 8006f72:	4619      	mov	r1, r3
 8006f74:	f7f9 fe38 	bl	8000be8 <__aeabi_d2f>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	617b      	str	r3, [r7, #20]

    // Gerçek ivmeyi hesapla:
    float accel_z_corrected = BMI->datas.acc_z - g_local_z;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8006f82:	edd7 7a05 	vldr	s15, [r7, #20]
 8006f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f8a:	edc7 7a04 	vstr	s15, [r7, #16]

    // İvme sensörü arıza tespiti
    accel_failure_detected = detect_accel_failure(accel_z_corrected);
 8006f8e:	ed97 0a04 	vldr	s0, [r7, #16]
 8006f92:	f7ff fecb 	bl	8006d2c <detect_accel_failure>
 8006f96:	4603      	mov	r3, r0
 8006f98:	461a      	mov	r2, r3
 8006f9a:	4b23      	ldr	r3, [pc, #140]	@ (8007028 <sensor_fusion_update_kalman+0x150>)
 8006f9c:	701a      	strb	r2, [r3, #0]

    // Arıza durumuna göre Kalman filtresi parametrelerini güncelle
    if (accel_failure_detected) {
 8006f9e:	4b22      	ldr	r3, [pc, #136]	@ (8007028 <sensor_fusion_update_kalman+0x150>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <sensor_fusion_update_kalman+0xd6>
        // Arıza tespit edildi - ivme sensörüne çok az güven
        kalman.measurement_noise_acc = 50.0f;
 8006fa6:	4b21      	ldr	r3, [pc, #132]	@ (800702c <sensor_fusion_update_kalman+0x154>)
 8006fa8:	4a21      	ldr	r2, [pc, #132]	@ (8007030 <sensor_fusion_update_kalman+0x158>)
 8006faa:	639a      	str	r2, [r3, #56]	@ 0x38
 8006fac:	e002      	b.n	8006fb4 <sensor_fusion_update_kalman+0xdc>
    } else {
        // Normal durum - normal güven
        kalman.measurement_noise_acc = 0.3f;
 8006fae:	4b1f      	ldr	r3, [pc, #124]	@ (800702c <sensor_fusion_update_kalman+0x154>)
 8006fb0:	4a20      	ldr	r2, [pc, #128]	@ (8007034 <sensor_fusion_update_kalman+0x15c>)
 8006fb2:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Only update if initialized
    if (initialized) {
 8006fb4:	4b20      	ldr	r3, [pc, #128]	@ (8007038 <sensor_fusion_update_kalman+0x160>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d020      	beq.n	8006ffe <sensor_fusion_update_kalman+0x126>
        sensor->filtered_altitude = KalmanFilter_Update(&kalman, altitude, accel_z_corrected, time_sec);
 8006fbc:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 8006fc0:	edd7 0a04 	vldr	s1, [r7, #16]
 8006fc4:	ed97 0a07 	vldr	s0, [r7, #28]
 8006fc8:	4818      	ldr	r0, [pc, #96]	@ (800702c <sensor_fusion_update_kalman+0x154>)
 8006fca:	f7fc f96d 	bl	80032a8 <KalmanFilter_Update>
 8006fce:	eef0 7a40 	vmov.f32	s15, s0
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	edc3 7a00 	vstr	s15, [r3]
        sensor->apogeeDetect = KalmanFilter_IsApogeeDetected(&kalman);
 8006fd8:	4814      	ldr	r0, [pc, #80]	@ (800702c <sensor_fusion_update_kalman+0x154>)
 8006fda:	f7fd fb49 	bl	8004670 <KalmanFilter_IsApogeeDetected>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	761a      	strb	r2, [r3, #24]
        sensor->velocity = Kalman_Get_Velocity(&kalman);
 8006fe6:	4811      	ldr	r0, [pc, #68]	@ (800702c <sensor_fusion_update_kalman+0x154>)
 8006fe8:	f7fd fb33 	bl	8004652 <Kalman_Get_Velocity>
 8006fec:	eef0 7a40 	vmov.f32	s15, s0
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	edc3 7a01 	vstr	s15, [r3, #4]
            sensor->velocity = (sensor->filtered_altitude - prev_altitude) / time_sec;
        }
        prev_altitude = sensor->filtered_altitude;*/

        // Arıza durumunu sensor yapısına ekleyelim (telemetri için kullanılabilir)
        sensor->accel_failure = accel_failure_detected;
 8006ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8007028 <sensor_fusion_update_kalman+0x150>)
 8006ff8:	781a      	ldrb	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	765a      	strb	r2, [r3, #25]
    }
}
 8006ffe:	bf00      	nop
 8007000:	3728      	adds	r7, #40	@ 0x28
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	a2529d39 	.word	0xa2529d39
 800700c:	3f91df46 	.word	0x3f91df46
 8007010:	60000000 	.word	0x60000000
 8007014:	40239eb8 	.word	0x40239eb8
 8007018:	20000820 	.word	0x20000820
 800701c:	447a0000 	.word	0x447a0000
 8007020:	3a83126f 	.word	0x3a83126f
 8007024:	3c23d70a 	.word	0x3c23d70a
 8007028:	2000083e 	.word	0x2000083e
 800702c:	200007cc 	.word	0x200007cc
 8007030:	42480000 	.word	0x42480000
 8007034:	3e99999a 	.word	0x3e99999a
 8007038:	20000818 	.word	0x20000818

0800703c <sensor_fusion_update_mahony>:

/**
 * @brief Update orientation using Mahony filter
 */
void sensor_fusion_update_mahony(bmi088_struct_t* BMI, sensor_fusion_t *sensor)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
		sensor->yaw = quaternionToYaw();
		sensor->pitch = quaternionToPitch();
		sensor->roll = quaternionToRoll();
		BMI->isUpdated = 0;
	}*/
}
 8007046:	bf00      	nop
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
	...

08007054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800705a:	2300      	movs	r3, #0
 800705c:	607b      	str	r3, [r7, #4]
 800705e:	4b10      	ldr	r3, [pc, #64]	@ (80070a0 <HAL_MspInit+0x4c>)
 8007060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007062:	4a0f      	ldr	r2, [pc, #60]	@ (80070a0 <HAL_MspInit+0x4c>)
 8007064:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007068:	6453      	str	r3, [r2, #68]	@ 0x44
 800706a:	4b0d      	ldr	r3, [pc, #52]	@ (80070a0 <HAL_MspInit+0x4c>)
 800706c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800706e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007072:	607b      	str	r3, [r7, #4]
 8007074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007076:	2300      	movs	r3, #0
 8007078:	603b      	str	r3, [r7, #0]
 800707a:	4b09      	ldr	r3, [pc, #36]	@ (80070a0 <HAL_MspInit+0x4c>)
 800707c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800707e:	4a08      	ldr	r2, [pc, #32]	@ (80070a0 <HAL_MspInit+0x4c>)
 8007080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007084:	6413      	str	r3, [r2, #64]	@ 0x40
 8007086:	4b06      	ldr	r3, [pc, #24]	@ (80070a0 <HAL_MspInit+0x4c>)
 8007088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800708a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800708e:	603b      	str	r3, [r7, #0]
 8007090:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007092:	bf00      	nop
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	40023800 	.word	0x40023800

080070a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b08c      	sub	sp, #48	@ 0x30
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070ac:	f107 031c 	add.w	r3, r7, #28
 80070b0:	2200      	movs	r2, #0
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	605a      	str	r2, [r3, #4]
 80070b6:	609a      	str	r2, [r3, #8]
 80070b8:	60da      	str	r2, [r3, #12]
 80070ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a5e      	ldr	r2, [pc, #376]	@ (800723c <HAL_ADC_MspInit+0x198>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d158      	bne.n	8007178 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80070c6:	2300      	movs	r3, #0
 80070c8:	61bb      	str	r3, [r7, #24]
 80070ca:	4b5d      	ldr	r3, [pc, #372]	@ (8007240 <HAL_ADC_MspInit+0x19c>)
 80070cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ce:	4a5c      	ldr	r2, [pc, #368]	@ (8007240 <HAL_ADC_MspInit+0x19c>)
 80070d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80070d6:	4b5a      	ldr	r3, [pc, #360]	@ (8007240 <HAL_ADC_MspInit+0x19c>)
 80070d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070de:	61bb      	str	r3, [r7, #24]
 80070e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070e2:	2300      	movs	r3, #0
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	4b56      	ldr	r3, [pc, #344]	@ (8007240 <HAL_ADC_MspInit+0x19c>)
 80070e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ea:	4a55      	ldr	r2, [pc, #340]	@ (8007240 <HAL_ADC_MspInit+0x19c>)
 80070ec:	f043 0302 	orr.w	r3, r3, #2
 80070f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80070f2:	4b53      	ldr	r3, [pc, #332]	@ (8007240 <HAL_ADC_MspInit+0x19c>)
 80070f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	617b      	str	r3, [r7, #20]
 80070fc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80070fe:	2302      	movs	r3, #2
 8007100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007102:	2303      	movs	r3, #3
 8007104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007106:	2300      	movs	r3, #0
 8007108:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800710a:	f107 031c 	add.w	r3, r7, #28
 800710e:	4619      	mov	r1, r3
 8007110:	484c      	ldr	r0, [pc, #304]	@ (8007244 <HAL_ADC_MspInit+0x1a0>)
 8007112:	f002 f869 	bl	80091e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8007116:	4b4c      	ldr	r3, [pc, #304]	@ (8007248 <HAL_ADC_MspInit+0x1a4>)
 8007118:	4a4c      	ldr	r2, [pc, #304]	@ (800724c <HAL_ADC_MspInit+0x1a8>)
 800711a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800711c:	4b4a      	ldr	r3, [pc, #296]	@ (8007248 <HAL_ADC_MspInit+0x1a4>)
 800711e:	2200      	movs	r2, #0
 8007120:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007122:	4b49      	ldr	r3, [pc, #292]	@ (8007248 <HAL_ADC_MspInit+0x1a4>)
 8007124:	2200      	movs	r2, #0
 8007126:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007128:	4b47      	ldr	r3, [pc, #284]	@ (8007248 <HAL_ADC_MspInit+0x1a4>)
 800712a:	2200      	movs	r2, #0
 800712c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800712e:	4b46      	ldr	r3, [pc, #280]	@ (8007248 <HAL_ADC_MspInit+0x1a4>)
 8007130:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007134:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007136:	4b44      	ldr	r3, [pc, #272]	@ (8007248 <HAL_ADC_MspInit+0x1a4>)
 8007138:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800713c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800713e:	4b42      	ldr	r3, [pc, #264]	@ (8007248 <HAL_ADC_MspInit+0x1a4>)
 8007140:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007144:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007146:	4b40      	ldr	r3, [pc, #256]	@ (8007248 <HAL_ADC_MspInit+0x1a4>)
 8007148:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800714c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800714e:	4b3e      	ldr	r3, [pc, #248]	@ (8007248 <HAL_ADC_MspInit+0x1a4>)
 8007150:	2200      	movs	r2, #0
 8007152:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007154:	4b3c      	ldr	r3, [pc, #240]	@ (8007248 <HAL_ADC_MspInit+0x1a4>)
 8007156:	2200      	movs	r2, #0
 8007158:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800715a:	483b      	ldr	r0, [pc, #236]	@ (8007248 <HAL_ADC_MspInit+0x1a4>)
 800715c:	f001 fc42 	bl	80089e4 <HAL_DMA_Init>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8007166:	f7fd ff8d 	bl	8005084 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a36      	ldr	r2, [pc, #216]	@ (8007248 <HAL_ADC_MspInit+0x1a4>)
 800716e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007170:	4a35      	ldr	r2, [pc, #212]	@ (8007248 <HAL_ADC_MspInit+0x1a4>)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8007176:	e05d      	b.n	8007234 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a34      	ldr	r2, [pc, #208]	@ (8007250 <HAL_ADC_MspInit+0x1ac>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d158      	bne.n	8007234 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007182:	2300      	movs	r3, #0
 8007184:	613b      	str	r3, [r7, #16]
 8007186:	4b2e      	ldr	r3, [pc, #184]	@ (8007240 <HAL_ADC_MspInit+0x19c>)
 8007188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800718a:	4a2d      	ldr	r2, [pc, #180]	@ (8007240 <HAL_ADC_MspInit+0x19c>)
 800718c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007190:	6453      	str	r3, [r2, #68]	@ 0x44
 8007192:	4b2b      	ldr	r3, [pc, #172]	@ (8007240 <HAL_ADC_MspInit+0x19c>)
 8007194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007196:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800719a:	613b      	str	r3, [r7, #16]
 800719c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800719e:	2300      	movs	r3, #0
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	4b27      	ldr	r3, [pc, #156]	@ (8007240 <HAL_ADC_MspInit+0x19c>)
 80071a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071a6:	4a26      	ldr	r2, [pc, #152]	@ (8007240 <HAL_ADC_MspInit+0x19c>)
 80071a8:	f043 0302 	orr.w	r3, r3, #2
 80071ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80071ae:	4b24      	ldr	r3, [pc, #144]	@ (8007240 <HAL_ADC_MspInit+0x19c>)
 80071b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80071ba:	2301      	movs	r3, #1
 80071bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80071be:	2303      	movs	r3, #3
 80071c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071c2:	2300      	movs	r3, #0
 80071c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071c6:	f107 031c 	add.w	r3, r7, #28
 80071ca:	4619      	mov	r1, r3
 80071cc:	481d      	ldr	r0, [pc, #116]	@ (8007244 <HAL_ADC_MspInit+0x1a0>)
 80071ce:	f002 f80b 	bl	80091e8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream3;
 80071d2:	4b20      	ldr	r3, [pc, #128]	@ (8007254 <HAL_ADC_MspInit+0x1b0>)
 80071d4:	4a20      	ldr	r2, [pc, #128]	@ (8007258 <HAL_ADC_MspInit+0x1b4>)
 80071d6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80071d8:	4b1e      	ldr	r3, [pc, #120]	@ (8007254 <HAL_ADC_MspInit+0x1b0>)
 80071da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80071de:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80071e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007254 <HAL_ADC_MspInit+0x1b0>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80071e6:	4b1b      	ldr	r3, [pc, #108]	@ (8007254 <HAL_ADC_MspInit+0x1b0>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80071ec:	4b19      	ldr	r3, [pc, #100]	@ (8007254 <HAL_ADC_MspInit+0x1b0>)
 80071ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80071f2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80071f4:	4b17      	ldr	r3, [pc, #92]	@ (8007254 <HAL_ADC_MspInit+0x1b0>)
 80071f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071fa:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80071fc:	4b15      	ldr	r3, [pc, #84]	@ (8007254 <HAL_ADC_MspInit+0x1b0>)
 80071fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007202:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8007204:	4b13      	ldr	r3, [pc, #76]	@ (8007254 <HAL_ADC_MspInit+0x1b0>)
 8007206:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800720a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800720c:	4b11      	ldr	r3, [pc, #68]	@ (8007254 <HAL_ADC_MspInit+0x1b0>)
 800720e:	2200      	movs	r2, #0
 8007210:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007212:	4b10      	ldr	r3, [pc, #64]	@ (8007254 <HAL_ADC_MspInit+0x1b0>)
 8007214:	2200      	movs	r2, #0
 8007216:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8007218:	480e      	ldr	r0, [pc, #56]	@ (8007254 <HAL_ADC_MspInit+0x1b0>)
 800721a:	f001 fbe3 	bl	80089e4 <HAL_DMA_Init>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8007224:	f7fd ff2e 	bl	8005084 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a0a      	ldr	r2, [pc, #40]	@ (8007254 <HAL_ADC_MspInit+0x1b0>)
 800722c:	639a      	str	r2, [r3, #56]	@ 0x38
 800722e:	4a09      	ldr	r2, [pc, #36]	@ (8007254 <HAL_ADC_MspInit+0x1b0>)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8007234:	bf00      	nop
 8007236:	3730      	adds	r7, #48	@ 0x30
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	40012000 	.word	0x40012000
 8007240:	40023800 	.word	0x40023800
 8007244:	40020400 	.word	0x40020400
 8007248:	20000310 	.word	0x20000310
 800724c:	40026410 	.word	0x40026410
 8007250:	40012100 	.word	0x40012100
 8007254:	20000370 	.word	0x20000370
 8007258:	40026458 	.word	0x40026458

0800725c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08c      	sub	sp, #48	@ 0x30
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007264:	f107 031c 	add.w	r3, r7, #28
 8007268:	2200      	movs	r2, #0
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	605a      	str	r2, [r3, #4]
 800726e:	609a      	str	r2, [r3, #8]
 8007270:	60da      	str	r2, [r3, #12]
 8007272:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a42      	ldr	r2, [pc, #264]	@ (8007384 <HAL_I2C_MspInit+0x128>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d12d      	bne.n	80072da <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800727e:	2300      	movs	r3, #0
 8007280:	61bb      	str	r3, [r7, #24]
 8007282:	4b41      	ldr	r3, [pc, #260]	@ (8007388 <HAL_I2C_MspInit+0x12c>)
 8007284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007286:	4a40      	ldr	r2, [pc, #256]	@ (8007388 <HAL_I2C_MspInit+0x12c>)
 8007288:	f043 0302 	orr.w	r3, r3, #2
 800728c:	6313      	str	r3, [r2, #48]	@ 0x30
 800728e:	4b3e      	ldr	r3, [pc, #248]	@ (8007388 <HAL_I2C_MspInit+0x12c>)
 8007290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	61bb      	str	r3, [r7, #24]
 8007298:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800729a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800729e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80072a0:	2312      	movs	r3, #18
 80072a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072a4:	2300      	movs	r3, #0
 80072a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072a8:	2303      	movs	r3, #3
 80072aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80072ac:	2304      	movs	r3, #4
 80072ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072b0:	f107 031c 	add.w	r3, r7, #28
 80072b4:	4619      	mov	r1, r3
 80072b6:	4835      	ldr	r0, [pc, #212]	@ (800738c <HAL_I2C_MspInit+0x130>)
 80072b8:	f001 ff96 	bl	80091e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80072bc:	2300      	movs	r3, #0
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	4b31      	ldr	r3, [pc, #196]	@ (8007388 <HAL_I2C_MspInit+0x12c>)
 80072c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c4:	4a30      	ldr	r2, [pc, #192]	@ (8007388 <HAL_I2C_MspInit+0x12c>)
 80072c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80072ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80072cc:	4b2e      	ldr	r3, [pc, #184]	@ (8007388 <HAL_I2C_MspInit+0x12c>)
 80072ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072d4:	617b      	str	r3, [r7, #20]
 80072d6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80072d8:	e050      	b.n	800737c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a2c      	ldr	r2, [pc, #176]	@ (8007390 <HAL_I2C_MspInit+0x134>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d14b      	bne.n	800737c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80072e4:	2300      	movs	r3, #0
 80072e6:	613b      	str	r3, [r7, #16]
 80072e8:	4b27      	ldr	r3, [pc, #156]	@ (8007388 <HAL_I2C_MspInit+0x12c>)
 80072ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ec:	4a26      	ldr	r2, [pc, #152]	@ (8007388 <HAL_I2C_MspInit+0x12c>)
 80072ee:	f043 0304 	orr.w	r3, r3, #4
 80072f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80072f4:	4b24      	ldr	r3, [pc, #144]	@ (8007388 <HAL_I2C_MspInit+0x12c>)
 80072f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	613b      	str	r3, [r7, #16]
 80072fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007300:	2300      	movs	r3, #0
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	4b20      	ldr	r3, [pc, #128]	@ (8007388 <HAL_I2C_MspInit+0x12c>)
 8007306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007308:	4a1f      	ldr	r2, [pc, #124]	@ (8007388 <HAL_I2C_MspInit+0x12c>)
 800730a:	f043 0301 	orr.w	r3, r3, #1
 800730e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007310:	4b1d      	ldr	r3, [pc, #116]	@ (8007388 <HAL_I2C_MspInit+0x12c>)
 8007312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	60fb      	str	r3, [r7, #12]
 800731a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800731c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007322:	2312      	movs	r3, #18
 8007324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007326:	2301      	movs	r3, #1
 8007328:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800732a:	2303      	movs	r3, #3
 800732c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800732e:	2304      	movs	r3, #4
 8007330:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007332:	f107 031c 	add.w	r3, r7, #28
 8007336:	4619      	mov	r1, r3
 8007338:	4816      	ldr	r0, [pc, #88]	@ (8007394 <HAL_I2C_MspInit+0x138>)
 800733a:	f001 ff55 	bl	80091e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800733e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007344:	2312      	movs	r3, #18
 8007346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007348:	2301      	movs	r3, #1
 800734a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800734c:	2303      	movs	r3, #3
 800734e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007350:	2304      	movs	r3, #4
 8007352:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007354:	f107 031c 	add.w	r3, r7, #28
 8007358:	4619      	mov	r1, r3
 800735a:	480f      	ldr	r0, [pc, #60]	@ (8007398 <HAL_I2C_MspInit+0x13c>)
 800735c:	f001 ff44 	bl	80091e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007360:	2300      	movs	r3, #0
 8007362:	60bb      	str	r3, [r7, #8]
 8007364:	4b08      	ldr	r3, [pc, #32]	@ (8007388 <HAL_I2C_MspInit+0x12c>)
 8007366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007368:	4a07      	ldr	r2, [pc, #28]	@ (8007388 <HAL_I2C_MspInit+0x12c>)
 800736a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800736e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007370:	4b05      	ldr	r3, [pc, #20]	@ (8007388 <HAL_I2C_MspInit+0x12c>)
 8007372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007374:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007378:	60bb      	str	r3, [r7, #8]
 800737a:	68bb      	ldr	r3, [r7, #8]
}
 800737c:	bf00      	nop
 800737e:	3730      	adds	r7, #48	@ 0x30
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	40005400 	.word	0x40005400
 8007388:	40023800 	.word	0x40023800
 800738c:	40020400 	.word	0x40020400
 8007390:	40005c00 	.word	0x40005c00
 8007394:	40020800 	.word	0x40020800
 8007398:	40020000 	.word	0x40020000

0800739c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a15      	ldr	r2, [pc, #84]	@ (8007400 <HAL_I2C_MspDeInit+0x64>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d10f      	bne.n	80073ce <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80073ae:	4b15      	ldr	r3, [pc, #84]	@ (8007404 <HAL_I2C_MspDeInit+0x68>)
 80073b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b2:	4a14      	ldr	r2, [pc, #80]	@ (8007404 <HAL_I2C_MspDeInit+0x68>)
 80073b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80073b8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80073ba:	2180      	movs	r1, #128	@ 0x80
 80073bc:	4812      	ldr	r0, [pc, #72]	@ (8007408 <HAL_I2C_MspDeInit+0x6c>)
 80073be:	f002 f8a7 	bl	8009510 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80073c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80073c6:	4810      	ldr	r0, [pc, #64]	@ (8007408 <HAL_I2C_MspDeInit+0x6c>)
 80073c8:	f002 f8a2 	bl	8009510 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80073cc:	e014      	b.n	80073f8 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a0e      	ldr	r2, [pc, #56]	@ (800740c <HAL_I2C_MspDeInit+0x70>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d10f      	bne.n	80073f8 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80073d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007404 <HAL_I2C_MspDeInit+0x68>)
 80073da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073dc:	4a09      	ldr	r2, [pc, #36]	@ (8007404 <HAL_I2C_MspDeInit+0x68>)
 80073de:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80073e2:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80073e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80073e8:	4809      	ldr	r0, [pc, #36]	@ (8007410 <HAL_I2C_MspDeInit+0x74>)
 80073ea:	f002 f891 	bl	8009510 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80073ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80073f2:	4808      	ldr	r0, [pc, #32]	@ (8007414 <HAL_I2C_MspDeInit+0x78>)
 80073f4:	f002 f88c 	bl	8009510 <HAL_GPIO_DeInit>
}
 80073f8:	bf00      	nop
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	40005400 	.word	0x40005400
 8007404:	40023800 	.word	0x40023800
 8007408:	40020400 	.word	0x40020400
 800740c:	40005c00 	.word	0x40005c00
 8007410:	40020800 	.word	0x40020800
 8007414:	40020000 	.word	0x40020000

08007418 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007428:	d115      	bne.n	8007456 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
 800742e:	4b0c      	ldr	r3, [pc, #48]	@ (8007460 <HAL_TIM_Base_MspInit+0x48>)
 8007430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007432:	4a0b      	ldr	r2, [pc, #44]	@ (8007460 <HAL_TIM_Base_MspInit+0x48>)
 8007434:	f043 0301 	orr.w	r3, r3, #1
 8007438:	6413      	str	r3, [r2, #64]	@ 0x40
 800743a:	4b09      	ldr	r3, [pc, #36]	@ (8007460 <HAL_TIM_Base_MspInit+0x48>)
 800743c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007446:	2200      	movs	r2, #0
 8007448:	2100      	movs	r1, #0
 800744a:	201c      	movs	r0, #28
 800744c:	f001 fa85 	bl	800895a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007450:	201c      	movs	r0, #28
 8007452:	f001 fa9e 	bl	8008992 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8007456:	bf00      	nop
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	40023800 	.word	0x40023800

08007464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08e      	sub	sp, #56	@ 0x38
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800746c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007470:	2200      	movs	r2, #0
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	605a      	str	r2, [r3, #4]
 8007476:	609a      	str	r2, [r3, #8]
 8007478:	60da      	str	r2, [r3, #12]
 800747a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a83      	ldr	r2, [pc, #524]	@ (8007690 <HAL_UART_MspInit+0x22c>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d14b      	bne.n	800751e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8007486:	2300      	movs	r3, #0
 8007488:	623b      	str	r3, [r7, #32]
 800748a:	4b82      	ldr	r3, [pc, #520]	@ (8007694 <HAL_UART_MspInit+0x230>)
 800748c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748e:	4a81      	ldr	r2, [pc, #516]	@ (8007694 <HAL_UART_MspInit+0x230>)
 8007490:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007494:	6413      	str	r3, [r2, #64]	@ 0x40
 8007496:	4b7f      	ldr	r3, [pc, #508]	@ (8007694 <HAL_UART_MspInit+0x230>)
 8007498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800749e:	623b      	str	r3, [r7, #32]
 80074a0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80074a2:	2300      	movs	r3, #0
 80074a4:	61fb      	str	r3, [r7, #28]
 80074a6:	4b7b      	ldr	r3, [pc, #492]	@ (8007694 <HAL_UART_MspInit+0x230>)
 80074a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074aa:	4a7a      	ldr	r2, [pc, #488]	@ (8007694 <HAL_UART_MspInit+0x230>)
 80074ac:	f043 0304 	orr.w	r3, r3, #4
 80074b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80074b2:	4b78      	ldr	r3, [pc, #480]	@ (8007694 <HAL_UART_MspInit+0x230>)
 80074b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b6:	f003 0304 	and.w	r3, r3, #4
 80074ba:	61fb      	str	r3, [r7, #28]
 80074bc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80074be:	2300      	movs	r3, #0
 80074c0:	61bb      	str	r3, [r7, #24]
 80074c2:	4b74      	ldr	r3, [pc, #464]	@ (8007694 <HAL_UART_MspInit+0x230>)
 80074c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074c6:	4a73      	ldr	r2, [pc, #460]	@ (8007694 <HAL_UART_MspInit+0x230>)
 80074c8:	f043 0308 	orr.w	r3, r3, #8
 80074cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80074ce:	4b71      	ldr	r3, [pc, #452]	@ (8007694 <HAL_UART_MspInit+0x230>)
 80074d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d2:	f003 0308 	and.w	r3, r3, #8
 80074d6:	61bb      	str	r3, [r7, #24]
 80074d8:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80074da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80074de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074e0:	2302      	movs	r3, #2
 80074e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074e8:	2303      	movs	r3, #3
 80074ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80074ec:	2308      	movs	r3, #8
 80074ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074f4:	4619      	mov	r1, r3
 80074f6:	4868      	ldr	r0, [pc, #416]	@ (8007698 <HAL_UART_MspInit+0x234>)
 80074f8:	f001 fe76 	bl	80091e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80074fc:	2304      	movs	r3, #4
 80074fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007500:	2302      	movs	r3, #2
 8007502:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007504:	2300      	movs	r3, #0
 8007506:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007508:	2303      	movs	r3, #3
 800750a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800750c:	2308      	movs	r3, #8
 800750e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007510:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007514:	4619      	mov	r1, r3
 8007516:	4861      	ldr	r0, [pc, #388]	@ (800769c <HAL_UART_MspInit+0x238>)
 8007518:	f001 fe66 	bl	80091e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800751c:	e0b4      	b.n	8007688 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART1)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a5f      	ldr	r2, [pc, #380]	@ (80076a0 <HAL_UART_MspInit+0x23c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	f040 80af 	bne.w	8007688 <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART1_CLK_ENABLE();
 800752a:	2300      	movs	r3, #0
 800752c:	617b      	str	r3, [r7, #20]
 800752e:	4b59      	ldr	r3, [pc, #356]	@ (8007694 <HAL_UART_MspInit+0x230>)
 8007530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007532:	4a58      	ldr	r2, [pc, #352]	@ (8007694 <HAL_UART_MspInit+0x230>)
 8007534:	f043 0310 	orr.w	r3, r3, #16
 8007538:	6453      	str	r3, [r2, #68]	@ 0x44
 800753a:	4b56      	ldr	r3, [pc, #344]	@ (8007694 <HAL_UART_MspInit+0x230>)
 800753c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800753e:	f003 0310 	and.w	r3, r3, #16
 8007542:	617b      	str	r3, [r7, #20]
 8007544:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007546:	2300      	movs	r3, #0
 8007548:	613b      	str	r3, [r7, #16]
 800754a:	4b52      	ldr	r3, [pc, #328]	@ (8007694 <HAL_UART_MspInit+0x230>)
 800754c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800754e:	4a51      	ldr	r2, [pc, #324]	@ (8007694 <HAL_UART_MspInit+0x230>)
 8007550:	f043 0301 	orr.w	r3, r3, #1
 8007554:	6313      	str	r3, [r2, #48]	@ 0x30
 8007556:	4b4f      	ldr	r3, [pc, #316]	@ (8007694 <HAL_UART_MspInit+0x230>)
 8007558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	613b      	str	r3, [r7, #16]
 8007560:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007562:	2300      	movs	r3, #0
 8007564:	60fb      	str	r3, [r7, #12]
 8007566:	4b4b      	ldr	r3, [pc, #300]	@ (8007694 <HAL_UART_MspInit+0x230>)
 8007568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800756a:	4a4a      	ldr	r2, [pc, #296]	@ (8007694 <HAL_UART_MspInit+0x230>)
 800756c:	f043 0302 	orr.w	r3, r3, #2
 8007570:	6313      	str	r3, [r2, #48]	@ 0x30
 8007572:	4b48      	ldr	r3, [pc, #288]	@ (8007694 <HAL_UART_MspInit+0x230>)
 8007574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	60fb      	str	r3, [r7, #12]
 800757c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800757e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007582:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007584:	2302      	movs	r3, #2
 8007586:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007588:	2300      	movs	r3, #0
 800758a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800758c:	2303      	movs	r3, #3
 800758e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007590:	2307      	movs	r3, #7
 8007592:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007594:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007598:	4619      	mov	r1, r3
 800759a:	4842      	ldr	r0, [pc, #264]	@ (80076a4 <HAL_UART_MspInit+0x240>)
 800759c:	f001 fe24 	bl	80091e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80075a0:	2340      	movs	r3, #64	@ 0x40
 80075a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075a4:	2302      	movs	r3, #2
 80075a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075a8:	2300      	movs	r3, #0
 80075aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075ac:	2303      	movs	r3, #3
 80075ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80075b0:	2307      	movs	r3, #7
 80075b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075b8:	4619      	mov	r1, r3
 80075ba:	483b      	ldr	r0, [pc, #236]	@ (80076a8 <HAL_UART_MspInit+0x244>)
 80075bc:	f001 fe14 	bl	80091e8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80075c0:	4b3a      	ldr	r3, [pc, #232]	@ (80076ac <HAL_UART_MspInit+0x248>)
 80075c2:	4a3b      	ldr	r2, [pc, #236]	@ (80076b0 <HAL_UART_MspInit+0x24c>)
 80075c4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80075c6:	4b39      	ldr	r3, [pc, #228]	@ (80076ac <HAL_UART_MspInit+0x248>)
 80075c8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80075cc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80075ce:	4b37      	ldr	r3, [pc, #220]	@ (80076ac <HAL_UART_MspInit+0x248>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80075d4:	4b35      	ldr	r3, [pc, #212]	@ (80076ac <HAL_UART_MspInit+0x248>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80075da:	4b34      	ldr	r3, [pc, #208]	@ (80076ac <HAL_UART_MspInit+0x248>)
 80075dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80075e0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80075e2:	4b32      	ldr	r3, [pc, #200]	@ (80076ac <HAL_UART_MspInit+0x248>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80075e8:	4b30      	ldr	r3, [pc, #192]	@ (80076ac <HAL_UART_MspInit+0x248>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80075ee:	4b2f      	ldr	r3, [pc, #188]	@ (80076ac <HAL_UART_MspInit+0x248>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80075f4:	4b2d      	ldr	r3, [pc, #180]	@ (80076ac <HAL_UART_MspInit+0x248>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80075fa:	4b2c      	ldr	r3, [pc, #176]	@ (80076ac <HAL_UART_MspInit+0x248>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007600:	482a      	ldr	r0, [pc, #168]	@ (80076ac <HAL_UART_MspInit+0x248>)
 8007602:	f001 f9ef 	bl	80089e4 <HAL_DMA_Init>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 800760c:	f7fd fd3a 	bl	8005084 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a26      	ldr	r2, [pc, #152]	@ (80076ac <HAL_UART_MspInit+0x248>)
 8007614:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007616:	4a25      	ldr	r2, [pc, #148]	@ (80076ac <HAL_UART_MspInit+0x248>)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800761c:	4b25      	ldr	r3, [pc, #148]	@ (80076b4 <HAL_UART_MspInit+0x250>)
 800761e:	4a26      	ldr	r2, [pc, #152]	@ (80076b8 <HAL_UART_MspInit+0x254>)
 8007620:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8007622:	4b24      	ldr	r3, [pc, #144]	@ (80076b4 <HAL_UART_MspInit+0x250>)
 8007624:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007628:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800762a:	4b22      	ldr	r3, [pc, #136]	@ (80076b4 <HAL_UART_MspInit+0x250>)
 800762c:	2240      	movs	r2, #64	@ 0x40
 800762e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007630:	4b20      	ldr	r3, [pc, #128]	@ (80076b4 <HAL_UART_MspInit+0x250>)
 8007632:	2200      	movs	r2, #0
 8007634:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007636:	4b1f      	ldr	r3, [pc, #124]	@ (80076b4 <HAL_UART_MspInit+0x250>)
 8007638:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800763c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800763e:	4b1d      	ldr	r3, [pc, #116]	@ (80076b4 <HAL_UART_MspInit+0x250>)
 8007640:	2200      	movs	r2, #0
 8007642:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007644:	4b1b      	ldr	r3, [pc, #108]	@ (80076b4 <HAL_UART_MspInit+0x250>)
 8007646:	2200      	movs	r2, #0
 8007648:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800764a:	4b1a      	ldr	r3, [pc, #104]	@ (80076b4 <HAL_UART_MspInit+0x250>)
 800764c:	2200      	movs	r2, #0
 800764e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007650:	4b18      	ldr	r3, [pc, #96]	@ (80076b4 <HAL_UART_MspInit+0x250>)
 8007652:	2200      	movs	r2, #0
 8007654:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007656:	4b17      	ldr	r3, [pc, #92]	@ (80076b4 <HAL_UART_MspInit+0x250>)
 8007658:	2200      	movs	r2, #0
 800765a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800765c:	4815      	ldr	r0, [pc, #84]	@ (80076b4 <HAL_UART_MspInit+0x250>)
 800765e:	f001 f9c1 	bl	80089e4 <HAL_DMA_Init>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <HAL_UART_MspInit+0x208>
      Error_Handler();
 8007668:	f7fd fd0c 	bl	8005084 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a11      	ldr	r2, [pc, #68]	@ (80076b4 <HAL_UART_MspInit+0x250>)
 8007670:	639a      	str	r2, [r3, #56]	@ 0x38
 8007672:	4a10      	ldr	r2, [pc, #64]	@ (80076b4 <HAL_UART_MspInit+0x250>)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007678:	2200      	movs	r2, #0
 800767a:	2100      	movs	r1, #0
 800767c:	2025      	movs	r0, #37	@ 0x25
 800767e:	f001 f96c 	bl	800895a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007682:	2025      	movs	r0, #37	@ 0x25
 8007684:	f001 f985 	bl	8008992 <HAL_NVIC_EnableIRQ>
}
 8007688:	bf00      	nop
 800768a:	3738      	adds	r7, #56	@ 0x38
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	40005000 	.word	0x40005000
 8007694:	40023800 	.word	0x40023800
 8007698:	40020800 	.word	0x40020800
 800769c:	40020c00 	.word	0x40020c00
 80076a0:	40011000 	.word	0x40011000
 80076a4:	40020000 	.word	0x40020000
 80076a8:	40020400 	.word	0x40020400
 80076ac:	20000550 	.word	0x20000550
 80076b0:	40026488 	.word	0x40026488
 80076b4:	200005b0 	.word	0x200005b0
 80076b8:	400264b8 	.word	0x400264b8

080076bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80076bc:	b480      	push	{r7}
 80076be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80076c0:	bf00      	nop
 80076c2:	e7fd      	b.n	80076c0 <NMI_Handler+0x4>

080076c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80076c4:	b480      	push	{r7}
 80076c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80076c8:	bf00      	nop
 80076ca:	e7fd      	b.n	80076c8 <HardFault_Handler+0x4>

080076cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80076cc:	b480      	push	{r7}
 80076ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80076d0:	bf00      	nop
 80076d2:	e7fd      	b.n	80076d0 <MemManage_Handler+0x4>

080076d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80076d4:	b480      	push	{r7}
 80076d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80076d8:	bf00      	nop
 80076da:	e7fd      	b.n	80076d8 <BusFault_Handler+0x4>

080076dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80076dc:	b480      	push	{r7}
 80076de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80076e0:	bf00      	nop
 80076e2:	e7fd      	b.n	80076e0 <UsageFault_Handler+0x4>

080076e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80076e4:	b480      	push	{r7}
 80076e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80076e8:	bf00      	nop
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80076f2:	b480      	push	{r7}
 80076f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80076f6:	bf00      	nop
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007700:	b480      	push	{r7}
 8007702:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007704:	bf00      	nop
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007712:	f000 fbb9 	bl	8007e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007716:	bf00      	nop
 8007718:	bd80      	pop	{r7, pc}
	...

0800771c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007720:	4802      	ldr	r0, [pc, #8]	@ (800772c <TIM2_IRQHandler+0x10>)
 8007722:	f003 ff2f 	bl	800b584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007726:	bf00      	nop
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20000478 	.word	0x20000478

08007730 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007734:	4802      	ldr	r0, [pc, #8]	@ (8007740 <USART1_IRQHandler+0x10>)
 8007736:	f004 fc87 	bl	800c048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800773a:	bf00      	nop
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20000508 	.word	0x20000508

08007744 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8007748:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800774c:	f002 f806 	bl	800975c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007750:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007754:	f002 f802 	bl	800975c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007758:	bf00      	nop
 800775a:	bd80      	pop	{r7, pc}

0800775c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007760:	4802      	ldr	r0, [pc, #8]	@ (800776c <DMA2_Stream0_IRQHandler+0x10>)
 8007762:	f001 fad7 	bl	8008d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007766:	bf00      	nop
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	20000310 	.word	0x20000310

08007770 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007774:	4802      	ldr	r0, [pc, #8]	@ (8007780 <DMA2_Stream3_IRQHandler+0x10>)
 8007776:	f001 facd 	bl	8008d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800777a:	bf00      	nop
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	20000370 	.word	0x20000370

08007784 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007788:	4802      	ldr	r0, [pc, #8]	@ (8007794 <DMA2_Stream5_IRQHandler+0x10>)
 800778a:	f001 fac3 	bl	8008d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800778e:	bf00      	nop
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20000550 	.word	0x20000550

08007798 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800779c:	4802      	ldr	r0, [pc, #8]	@ (80077a8 <DMA2_Stream7_IRQHandler+0x10>)
 800779e:	f001 fab9 	bl	8008d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80077a2:	bf00      	nop
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	200005b0 	.word	0x200005b0

080077ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
  return 1;
 80077b0:	2301      	movs	r3, #1
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <_kill>:

int _kill(int pid, int sig)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80077c6:	f006 fc39 	bl	800e03c <__errno>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2216      	movs	r2, #22
 80077ce:	601a      	str	r2, [r3, #0]
  return -1;
 80077d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <_exit>:

void _exit (int status)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80077e4:	f04f 31ff 	mov.w	r1, #4294967295
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff ffe7 	bl	80077bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80077ee:	bf00      	nop
 80077f0:	e7fd      	b.n	80077ee <_exit+0x12>

080077f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b086      	sub	sp, #24
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077fe:	2300      	movs	r3, #0
 8007800:	617b      	str	r3, [r7, #20]
 8007802:	e00a      	b.n	800781a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007804:	f3af 8000 	nop.w
 8007808:	4601      	mov	r1, r0
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	1c5a      	adds	r2, r3, #1
 800780e:	60ba      	str	r2, [r7, #8]
 8007810:	b2ca      	uxtb	r2, r1
 8007812:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	3301      	adds	r3, #1
 8007818:	617b      	str	r3, [r7, #20]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	429a      	cmp	r2, r3
 8007820:	dbf0      	blt.n	8007804 <_read+0x12>
  }

  return len;
 8007822:	687b      	ldr	r3, [r7, #4]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007838:	2300      	movs	r3, #0
 800783a:	617b      	str	r3, [r7, #20]
 800783c:	e009      	b.n	8007852 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	1c5a      	adds	r2, r3, #1
 8007842:	60ba      	str	r2, [r7, #8]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	4618      	mov	r0, r3
 8007848:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	3301      	adds	r3, #1
 8007850:	617b      	str	r3, [r7, #20]
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	429a      	cmp	r2, r3
 8007858:	dbf1      	blt.n	800783e <_write+0x12>
  }
  return len;
 800785a:	687b      	ldr	r3, [r7, #4]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3718      	adds	r7, #24
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <_close>:

int _close(int file)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800786c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007870:	4618      	mov	r0, r3
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800788c:	605a      	str	r2, [r3, #4]
  return 0;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <_isatty>:

int _isatty(int file)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80078a4:	2301      	movs	r3, #1
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b085      	sub	sp, #20
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	60f8      	str	r0, [r7, #12]
 80078ba:	60b9      	str	r1, [r7, #8]
 80078bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80078d4:	4a14      	ldr	r2, [pc, #80]	@ (8007928 <_sbrk+0x5c>)
 80078d6:	4b15      	ldr	r3, [pc, #84]	@ (800792c <_sbrk+0x60>)
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80078e0:	4b13      	ldr	r3, [pc, #76]	@ (8007930 <_sbrk+0x64>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d102      	bne.n	80078ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80078e8:	4b11      	ldr	r3, [pc, #68]	@ (8007930 <_sbrk+0x64>)
 80078ea:	4a12      	ldr	r2, [pc, #72]	@ (8007934 <_sbrk+0x68>)
 80078ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80078ee:	4b10      	ldr	r3, [pc, #64]	@ (8007930 <_sbrk+0x64>)
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4413      	add	r3, r2
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d207      	bcs.n	800790c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80078fc:	f006 fb9e 	bl	800e03c <__errno>
 8007900:	4603      	mov	r3, r0
 8007902:	220c      	movs	r2, #12
 8007904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007906:	f04f 33ff 	mov.w	r3, #4294967295
 800790a:	e009      	b.n	8007920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800790c:	4b08      	ldr	r3, [pc, #32]	@ (8007930 <_sbrk+0x64>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007912:	4b07      	ldr	r3, [pc, #28]	@ (8007930 <_sbrk+0x64>)
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4413      	add	r3, r2
 800791a:	4a05      	ldr	r2, [pc, #20]	@ (8007930 <_sbrk+0x64>)
 800791c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800791e:	68fb      	ldr	r3, [r7, #12]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3718      	adds	r7, #24
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	20020000 	.word	0x20020000
 800792c:	00000400 	.word	0x00000400
 8007930:	20000840 	.word	0x20000840
 8007934:	200009c0 	.word	0x200009c0

08007938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007938:	b480      	push	{r7}
 800793a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800793c:	4b06      	ldr	r3, [pc, #24]	@ (8007958 <SystemInit+0x20>)
 800793e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007942:	4a05      	ldr	r2, [pc, #20]	@ (8007958 <SystemInit+0x20>)
 8007944:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007948:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800794c:	bf00      	nop
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	e000ed00 	.word	0xe000ed00

0800795c <test_modes_handle_sit>:

/**
 * @brief Handle SIT (Sensor Interface Test) mode
 */
void test_modes_handle_sit(BME_280_t* bme, bmi088_struct_t* bmi)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
	addDataPacketSit(bme, bmi);
 8007966:	6839      	ldr	r1, [r7, #0]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f7fd fbe3 	bl	8005134 <addDataPacketSit>
   // if (!usart1_tx_busy) {
       // uart1_send_packet_dma((uint8_t*)sit_paket, 36);
    	HAL_UART_Transmit(&huart1, (uint8_t*)sit_paket, 36, 100);
 800796e:	2364      	movs	r3, #100	@ 0x64
 8007970:	2224      	movs	r2, #36	@ 0x24
 8007972:	4904      	ldr	r1, [pc, #16]	@ (8007984 <test_modes_handle_sit+0x28>)
 8007974:	4804      	ldr	r0, [pc, #16]	@ (8007988 <test_modes_handle_sit+0x2c>)
 8007976:	f004 fa05 	bl	800bd84 <HAL_UART_Transmit>
    //}
}
 800797a:	bf00      	nop
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	2000074c 	.word	0x2000074c
 8007988:	20000508 	.word	0x20000508

0800798c <algorithm_update_sut>:


void algorithm_update_sut(void)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b08a      	sub	sp, #40	@ 0x28
 8007990:	af00      	add	r7, sp, #0
    // Check if SUT data is ready
    if (uart_handler_sut_data_ready()) {
 8007992:	f000 f989 	bl	8007ca8 <uart_handler_sut_data_ready>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d013      	beq.n	80079c4 <algorithm_update_sut+0x38>
        uart_handler_clear_sut_flag();
 800799c:	f000 f9b2 	bl	8007d04 <uart_handler_clear_sut_flag>

        sut_data_t sut_data;
        if (uart_handler_get_sut_data(&sut_data)) {
 80079a0:	1d3b      	adds	r3, r7, #4
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 f98c 	bl	8007cc0 <uart_handler_get_sut_data>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00a      	beq.n	80079c4 <algorithm_update_sut+0x38>
            // Process SUT data through test modes handler
            uint16_t status_bits = test_modes_handle_sut(&sut_data, &sensor_output);
 80079ae:	1d3b      	adds	r3, r7, #4
 80079b0:	4906      	ldr	r1, [pc, #24]	@ (80079cc <algorithm_update_sut+0x40>)
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 f80c 	bl	80079d0 <test_modes_handle_sut>
 80079b8:	4603      	mov	r3, r0
 80079ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
            uart_handler_send_status(status_bits);
 80079bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 f9ac 	bl	8007d1c <uart_handler_send_status>
        }
    }
}
 80079c4:	bf00      	nop
 80079c6:	3728      	adds	r7, #40	@ 0x28
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	200006d4 	.word	0x200006d4

080079d0 <test_modes_handle_sut>:

/**
 * @brief Handle SUT (System Under Test) mode
 */
uint16_t test_modes_handle_sut(sut_data_t* sut_data, sensor_fusion_t* sensor_output)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b0b4      	sub	sp, #208	@ 0xd0
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
    // Convert SUT data to BME and BMI structures
    BME_280_t bme_sut = {0};
 80079da:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80079de:	2244      	movs	r2, #68	@ 0x44
 80079e0:	2100      	movs	r1, #0
 80079e2:	4618      	mov	r0, r3
 80079e4:	f006 fac7 	bl	800df76 <memset>
    bmi088_struct_t bmi_sut = {0};
 80079e8:	f107 0308 	add.w	r3, r7, #8
 80079ec:	2280      	movs	r2, #128	@ 0x80
 80079ee:	2100      	movs	r1, #0
 80079f0:	4618      	mov	r0, r3
 80079f2:	f006 fac0 	bl	800df76 <memset>

    // Fill BME data
    bme_sut.altitude = sut_data->altitude;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    bme_sut.pressure = sut_data->pressure;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    // Fill BMI data
    bmi_sut.datas.acc_x = sut_data->acc_x;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	663b      	str	r3, [r7, #96]	@ 0x60
    bmi_sut.datas.acc_y = sut_data->acc_y;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	667b      	str	r3, [r7, #100]	@ 0x64
    bmi_sut.datas.acc_z = sut_data->acc_z;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	66bb      	str	r3, [r7, #104]	@ 0x68
    bmi_sut.datas.gyro_x = sut_data->gyro_x;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	623b      	str	r3, [r7, #32]
    bmi_sut.datas.angle_y = sut_data->gyro_y;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	633b      	str	r3, [r7, #48]	@ 0x30
    bmi_sut.datas.gyro_z = sut_data->gyro_z;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	69db      	ldr	r3, [r3, #28]
 8007a28:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Process synthetic data through sensor fusion first
    //sensor_fusion_update_mahony(&bmi_sut, sensor_output);
	sensor_fusion_update_kalman(&bme_sut, &bmi_sut, sensor_output);
 8007a2a:	f107 0108 	add.w	r1, r7, #8
 8007a2e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7ff fa4f 	bl	8006ed8 <sensor_fusion_update_kalman>

    // Then run flight algorithm with fused data
    flight_algorithm_update(&bme_sut, &bmi_sut, sensor_output);
 8007a3a:	f107 0108 	add.w	r1, r7, #8
 8007a3e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fb f9b9 	bl	8002dbc <flight_algorithm_update>
    uint16_t status_bits = flight_algorithm_get_status_bits();
 8007a4a:	f7fb fb21 	bl	8003090 <flight_algorithm_get_status_bits>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce

    return status_bits;
 8007a54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	37d0      	adds	r7, #208	@ 0xd0
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <uart_handler_init>:

/**
 * @brief Initialize UART handler
 */
void uart_handler_init(void)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0
    current_mode = MODE_NORMAL;
 8007a64:	4b07      	ldr	r3, [pc, #28]	@ (8007a84 <uart_handler_init+0x24>)
 8007a66:	2200      	movs	r2, #0
 8007a68:	701a      	strb	r2, [r3, #0]
    command_packet_ready = 0;
 8007a6a:	4b07      	ldr	r3, [pc, #28]	@ (8007a88 <uart_handler_init+0x28>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	701a      	strb	r2, [r3, #0]
    sut_packet_ready = 0;
 8007a70:	4b06      	ldr	r3, [pc, #24]	@ (8007a8c <uart_handler_init+0x2c>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	701a      	strb	r2, [r3, #0]
    memset(&latest_sut_data, 0, sizeof(latest_sut_data));
 8007a76:	2220      	movs	r2, #32
 8007a78:	2100      	movs	r1, #0
 8007a7a:	4805      	ldr	r0, [pc, #20]	@ (8007a90 <uart_handler_init+0x30>)
 8007a7c:	f006 fa7b 	bl	800df76 <memset>
}
 8007a80:	bf00      	nop
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	20000844 	.word	0x20000844
 8007a88:	20000845 	.word	0x20000845
 8007a8c:	20000846 	.word	0x20000846
 8007a90:	20000848 	.word	0x20000848

08007a94 <uart_handler_process_packets>:

/**
 * @brief Process incoming UART packets (call from main loop)
 */
void uart_handler_process_packets(void)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	af00      	add	r7, sp, #0
    if (usart1_packet_ready) {
 8007a98:	4b14      	ldr	r3, [pc, #80]	@ (8007aec <uart_handler_process_packets+0x58>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d021      	beq.n	8007ae6 <uart_handler_process_packets+0x52>
        usart1_packet_ready = 0; // Clear flag immediately
 8007aa2:	4b12      	ldr	r3, [pc, #72]	@ (8007aec <uart_handler_process_packets+0x58>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	701a      	strb	r2, [r3, #0]

        // Command packet (5 bytes with header 0xAA)
        if (usart1_rx_buffer[0] == CMD_HEADER && usart1_packet_size == 5) {
 8007aa8:	4b11      	ldr	r3, [pc, #68]	@ (8007af0 <uart_handler_process_packets+0x5c>)
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2baa      	cmp	r3, #170	@ 0xaa
 8007aae:	d10b      	bne.n	8007ac8 <uart_handler_process_packets+0x34>
 8007ab0:	4b10      	ldr	r3, [pc, #64]	@ (8007af4 <uart_handler_process_packets+0x60>)
 8007ab2:	881b      	ldrh	r3, [r3, #0]
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	2b05      	cmp	r3, #5
 8007ab8:	d106      	bne.n	8007ac8 <uart_handler_process_packets+0x34>
            command_packet_ready = 1;
 8007aba:	4b0f      	ldr	r3, [pc, #60]	@ (8007af8 <uart_handler_process_packets+0x64>)
 8007abc:	2201      	movs	r2, #1
 8007abe:	701a      	strb	r2, [r3, #0]
            process_command_packet(usart1_rx_buffer);
 8007ac0:	480b      	ldr	r0, [pc, #44]	@ (8007af0 <uart_handler_process_packets+0x5c>)
 8007ac2:	f000 f81d 	bl	8007b00 <process_command_packet>
        else if (usart1_rx_buffer[0] == PACKET_HEADER && usart1_packet_size == 36) {
            sut_packet_ready = 1;
            process_sut_packet(usart1_rx_buffer);
        }
    }
}
 8007ac6:	e00e      	b.n	8007ae6 <uart_handler_process_packets+0x52>
        else if (usart1_rx_buffer[0] == PACKET_HEADER && usart1_packet_size == 36) {
 8007ac8:	4b09      	ldr	r3, [pc, #36]	@ (8007af0 <uart_handler_process_packets+0x5c>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2bab      	cmp	r3, #171	@ 0xab
 8007ace:	d10a      	bne.n	8007ae6 <uart_handler_process_packets+0x52>
 8007ad0:	4b08      	ldr	r3, [pc, #32]	@ (8007af4 <uart_handler_process_packets+0x60>)
 8007ad2:	881b      	ldrh	r3, [r3, #0]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b24      	cmp	r3, #36	@ 0x24
 8007ad8:	d105      	bne.n	8007ae6 <uart_handler_process_packets+0x52>
            sut_packet_ready = 1;
 8007ada:	4b08      	ldr	r3, [pc, #32]	@ (8007afc <uart_handler_process_packets+0x68>)
 8007adc:	2201      	movs	r2, #1
 8007ade:	701a      	strb	r2, [r3, #0]
            process_sut_packet(usart1_rx_buffer);
 8007ae0:	4803      	ldr	r0, [pc, #12]	@ (8007af0 <uart_handler_process_packets+0x5c>)
 8007ae2:	f000 f843 	bl	8007b6c <process_sut_packet>
}
 8007ae6:	bf00      	nop
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	2000073c 	.word	0x2000073c
 8007af0:	200006f0 	.word	0x200006f0
 8007af4:	2000073e 	.word	0x2000073e
 8007af8:	20000845 	.word	0x20000845
 8007afc:	20000846 	.word	0x20000846

08007b00 <process_command_packet>:
/**
 * @brief Process command packet from buffer
 * @param buffer Pointer to received buffer
 */
void process_command_packet(uint8_t* buffer)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
    if (buffer[0] == CMD_HEADER) {
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2baa      	cmp	r3, #170	@ 0xaa
 8007b0e:	d124      	bne.n	8007b5a <process_command_packet+0x5a>
        uint8_t command = buffer[1];
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	785b      	ldrb	r3, [r3, #1]
 8007b14:	73fb      	strb	r3, [r7, #15]
        //uint8_t checksum = buffer[2];
        uint8_t footer1 = buffer[3];
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	78db      	ldrb	r3, [r3, #3]
 8007b1a:	73bb      	strb	r3, [r7, #14]
        uint8_t footer2 = buffer[4];
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	791b      	ldrb	r3, [r3, #4]
 8007b20:	737b      	strb	r3, [r7, #13]

        if (footer1 == CMD_FOOTER1 && footer2 == CMD_FOOTER2) {
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	2b0d      	cmp	r3, #13
 8007b26:	d118      	bne.n	8007b5a <process_command_packet+0x5a>
 8007b28:	7b7b      	ldrb	r3, [r7, #13]
 8007b2a:	2b0a      	cmp	r3, #10
 8007b2c:	d115      	bne.n	8007b5a <process_command_packet+0x5a>
            switch (command) {
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
 8007b30:	2b24      	cmp	r3, #36	@ 0x24
 8007b32:	d00e      	beq.n	8007b52 <process_command_packet+0x52>
 8007b34:	2b24      	cmp	r3, #36	@ 0x24
 8007b36:	dc10      	bgt.n	8007b5a <process_command_packet+0x5a>
 8007b38:	2b20      	cmp	r3, #32
 8007b3a:	d002      	beq.n	8007b42 <process_command_packet+0x42>
 8007b3c:	2b22      	cmp	r3, #34	@ 0x22
 8007b3e:	d004      	beq.n	8007b4a <process_command_packet+0x4a>
                    current_mode = MODE_NORMAL;
                    break;
            }
        }
    }
}
 8007b40:	e00b      	b.n	8007b5a <process_command_packet+0x5a>
                    current_mode = MODE_SIT;
 8007b42:	4b09      	ldr	r3, [pc, #36]	@ (8007b68 <process_command_packet+0x68>)
 8007b44:	2201      	movs	r2, #1
 8007b46:	701a      	strb	r2, [r3, #0]
                    break;
 8007b48:	e007      	b.n	8007b5a <process_command_packet+0x5a>
                    current_mode = MODE_SUT;
 8007b4a:	4b07      	ldr	r3, [pc, #28]	@ (8007b68 <process_command_packet+0x68>)
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	701a      	strb	r2, [r3, #0]
                    break;
 8007b50:	e003      	b.n	8007b5a <process_command_packet+0x5a>
                    current_mode = MODE_NORMAL;
 8007b52:	4b05      	ldr	r3, [pc, #20]	@ (8007b68 <process_command_packet+0x68>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	701a      	strb	r2, [r3, #0]
                    break;
 8007b58:	bf00      	nop
}
 8007b5a:	bf00      	nop
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	20000844 	.word	0x20000844

08007b6c <process_sut_packet>:
/**
 * @brief Process SUT data packet from buffer
 * @param buffer Pointer to received buffer
 */
void process_sut_packet(uint8_t* buffer)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
    // Header, footer and checksum verification
    if (buffer[0] != PACKET_HEADER) return;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	2bab      	cmp	r3, #171	@ 0xab
 8007b7a:	d172      	bne.n	8007c62 <process_sut_packet+0xf6>
    if (buffer[34] != CMD_FOOTER1 || buffer[35] != CMD_FOOTER2) return;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	3322      	adds	r3, #34	@ 0x22
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	2b0d      	cmp	r3, #13
 8007b84:	d16f      	bne.n	8007c66 <process_sut_packet+0xfa>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	3323      	adds	r3, #35	@ 0x23
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	2b0a      	cmp	r3, #10
 8007b8e:	d16a      	bne.n	8007c66 <process_sut_packet+0xfa>

    uint8_t calculated_checksum = 0;
 8007b90:	2300      	movs	r3, #0
 8007b92:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 33; i++) {
 8007b94:	2300      	movs	r3, #0
 8007b96:	60bb      	str	r3, [r7, #8]
 8007b98:	e009      	b.n	8007bae <process_sut_packet+0x42>
        calculated_checksum += buffer[i];
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	781a      	ldrb	r2, [r3, #0]
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 33; i++) {
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	3301      	adds	r3, #1
 8007bac:	60bb      	str	r3, [r7, #8]
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2b20      	cmp	r3, #32
 8007bb2:	ddf2      	ble.n	8007b9a <process_sut_packet+0x2e>
    }
    calculated_checksum %= 256;
    if (calculated_checksum != buffer[33]) return;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3321      	adds	r3, #33	@ 0x21
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	7bfa      	ldrb	r2, [r7, #15]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d154      	bne.n	8007c6a <process_sut_packet+0xfe>

    // Parse data
    latest_sut_data.altitude = uint8_arrayi_float32_ye_donustur(&buffer[1]);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fd fbdb 	bl	8005380 <uint8_arrayi_float32_ye_donustur>
 8007bca:	eef0 7a40 	vmov.f32	s15, s0
 8007bce:	4b29      	ldr	r3, [pc, #164]	@ (8007c74 <process_sut_packet+0x108>)
 8007bd0:	edc3 7a00 	vstr	s15, [r3]
    latest_sut_data.pressure = uint8_arrayi_float32_ye_donustur(&buffer[5]);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3305      	adds	r3, #5
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fd fbd1 	bl	8005380 <uint8_arrayi_float32_ye_donustur>
 8007bde:	eef0 7a40 	vmov.f32	s15, s0
 8007be2:	4b24      	ldr	r3, [pc, #144]	@ (8007c74 <process_sut_packet+0x108>)
 8007be4:	edc3 7a01 	vstr	s15, [r3, #4]
    latest_sut_data.acc_x = uint8_arrayi_float32_ye_donustur(&buffer[9]);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	3309      	adds	r3, #9
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7fd fbc7 	bl	8005380 <uint8_arrayi_float32_ye_donustur>
 8007bf2:	eef0 7a40 	vmov.f32	s15, s0
 8007bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8007c74 <process_sut_packet+0x108>)
 8007bf8:	edc3 7a02 	vstr	s15, [r3, #8]
    latest_sut_data.acc_y = uint8_arrayi_float32_ye_donustur(&buffer[13]);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	330d      	adds	r3, #13
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fd fbbd 	bl	8005380 <uint8_arrayi_float32_ye_donustur>
 8007c06:	eef0 7a40 	vmov.f32	s15, s0
 8007c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8007c74 <process_sut_packet+0x108>)
 8007c0c:	edc3 7a03 	vstr	s15, [r3, #12]
    latest_sut_data.acc_z = uint8_arrayi_float32_ye_donustur(&buffer[17]);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	3311      	adds	r3, #17
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fd fbb3 	bl	8005380 <uint8_arrayi_float32_ye_donustur>
 8007c1a:	eef0 7a40 	vmov.f32	s15, s0
 8007c1e:	4b15      	ldr	r3, [pc, #84]	@ (8007c74 <process_sut_packet+0x108>)
 8007c20:	edc3 7a04 	vstr	s15, [r3, #16]
    latest_sut_data.gyro_x = uint8_arrayi_float32_ye_donustur(&buffer[21]);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3315      	adds	r3, #21
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fd fba9 	bl	8005380 <uint8_arrayi_float32_ye_donustur>
 8007c2e:	eef0 7a40 	vmov.f32	s15, s0
 8007c32:	4b10      	ldr	r3, [pc, #64]	@ (8007c74 <process_sut_packet+0x108>)
 8007c34:	edc3 7a05 	vstr	s15, [r3, #20]
    latest_sut_data.gyro_y = uint8_arrayi_float32_ye_donustur(&buffer[25]);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3319      	adds	r3, #25
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fd fb9f 	bl	8005380 <uint8_arrayi_float32_ye_donustur>
 8007c42:	eef0 7a40 	vmov.f32	s15, s0
 8007c46:	4b0b      	ldr	r3, [pc, #44]	@ (8007c74 <process_sut_packet+0x108>)
 8007c48:	edc3 7a06 	vstr	s15, [r3, #24]
    latest_sut_data.gyro_z = uint8_arrayi_float32_ye_donustur(&buffer[29]);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	331d      	adds	r3, #29
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7fd fb95 	bl	8005380 <uint8_arrayi_float32_ye_donustur>
 8007c56:	eef0 7a40 	vmov.f32	s15, s0
 8007c5a:	4b06      	ldr	r3, [pc, #24]	@ (8007c74 <process_sut_packet+0x108>)
 8007c5c:	edc3 7a07 	vstr	s15, [r3, #28]
 8007c60:	e004      	b.n	8007c6c <process_sut_packet+0x100>
    if (buffer[0] != PACKET_HEADER) return;
 8007c62:	bf00      	nop
 8007c64:	e002      	b.n	8007c6c <process_sut_packet+0x100>
    if (buffer[34] != CMD_FOOTER1 || buffer[35] != CMD_FOOTER2) return;
 8007c66:	bf00      	nop
 8007c68:	e000      	b.n	8007c6c <process_sut_packet+0x100>
    if (calculated_checksum != buffer[33]) return;
 8007c6a:	bf00      	nop
}
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	20000848 	.word	0x20000848

08007c78 <uart_handler_get_mode>:

/**
 * @brief Get current system mode
 */
SystemMode_t uart_handler_get_mode(void)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	af00      	add	r7, sp, #0
    return current_mode;
 8007c7c:	4b03      	ldr	r3, [pc, #12]	@ (8007c8c <uart_handler_get_mode+0x14>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	20000844 	.word	0x20000844

08007c90 <uart_handler_command_ready>:

/**
 * @brief Check if command packet is ready
 */
uint8_t uart_handler_command_ready(void)
{
 8007c90:	b480      	push	{r7}
 8007c92:	af00      	add	r7, sp, #0
    return command_packet_ready;
 8007c94:	4b03      	ldr	r3, [pc, #12]	@ (8007ca4 <uart_handler_command_ready+0x14>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	b2db      	uxtb	r3, r3
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	20000845 	.word	0x20000845

08007ca8 <uart_handler_sut_data_ready>:

/**
 * @brief Check if SUT data packet is ready
 */
uint8_t uart_handler_sut_data_ready(void)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	af00      	add	r7, sp, #0
    return sut_packet_ready;
 8007cac:	4b03      	ldr	r3, [pc, #12]	@ (8007cbc <uart_handler_sut_data_ready+0x14>)
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	b2db      	uxtb	r3, r3
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	20000846 	.word	0x20000846

08007cc0 <uart_handler_get_sut_data>:

/**
 * @brief Get the latest SUT data
 */
uint8_t uart_handler_get_sut_data(sut_data_t* data)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
    if (data == NULL) return 0;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <uart_handler_get_sut_data+0x12>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	e005      	b.n	8007cde <uart_handler_get_sut_data+0x1e>

    memcpy(data, &latest_sut_data, sizeof(sut_data_t));
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	4904      	ldr	r1, [pc, #16]	@ (8007ce8 <uart_handler_get_sut_data+0x28>)
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f006 f9dd 	bl	800e096 <memcpy>
    return 1;
 8007cdc:	2301      	movs	r3, #1
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20000848 	.word	0x20000848

08007cec <uart_handler_clear_command_flag>:

/**
 * @brief Clear command ready flag
 */
void uart_handler_clear_command_flag(void)
{
 8007cec:	b480      	push	{r7}
 8007cee:	af00      	add	r7, sp, #0
    command_packet_ready = 0;
 8007cf0:	4b03      	ldr	r3, [pc, #12]	@ (8007d00 <uart_handler_clear_command_flag+0x14>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	701a      	strb	r2, [r3, #0]
}
 8007cf6:	bf00      	nop
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	20000845 	.word	0x20000845

08007d04 <uart_handler_clear_sut_flag>:

/**
 * @brief Clear SUT data ready flag
 */
void uart_handler_clear_sut_flag(void)
{
 8007d04:	b480      	push	{r7}
 8007d06:	af00      	add	r7, sp, #0
    sut_packet_ready = 0;
 8007d08:	4b03      	ldr	r3, [pc, #12]	@ (8007d18 <uart_handler_clear_sut_flag+0x14>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	701a      	strb	r2, [r3, #0]
}
 8007d0e:	bf00      	nop
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	20000846 	.word	0x20000846

08007d1c <uart_handler_send_status>:

/**
 * @brief Send status packet (for SUT mode)
 */
void uart_handler_send_status(uint16_t status_bits)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	4603      	mov	r3, r0
 8007d24:	80fb      	strh	r3, [r7, #6]
    if (!usart1_tx_busy) {
 8007d26:	4b18      	ldr	r3, [pc, #96]	@ (8007d88 <uart_handler_send_status+0x6c>)
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d127      	bne.n	8007d80 <uart_handler_send_status+0x64>
        // Use static buffer for DMA safety
        status_packet_dma[0] = 0xAA;
 8007d30:	4b16      	ldr	r3, [pc, #88]	@ (8007d8c <uart_handler_send_status+0x70>)
 8007d32:	22aa      	movs	r2, #170	@ 0xaa
 8007d34:	701a      	strb	r2, [r3, #0]
        status_packet_dma[1] = status_bits & 0xFF;         // Low byte of status
 8007d36:	88fb      	ldrh	r3, [r7, #6]
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	4b14      	ldr	r3, [pc, #80]	@ (8007d8c <uart_handler_send_status+0x70>)
 8007d3c:	705a      	strb	r2, [r3, #1]
        status_packet_dma[2] = (status_bits >> 8) & 0xFF;  // High byte of status
 8007d3e:	88fb      	ldrh	r3, [r7, #6]
 8007d40:	0a1b      	lsrs	r3, r3, #8
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	4b11      	ldr	r3, [pc, #68]	@ (8007d8c <uart_handler_send_status+0x70>)
 8007d48:	709a      	strb	r2, [r3, #2]

        // Calculate checksum (only for header and status bytes)
        status_packet_dma[3] = (status_packet_dma[0] + status_packet_dma[1] + status_packet_dma[2]) % 256;
 8007d4a:	4b10      	ldr	r3, [pc, #64]	@ (8007d8c <uart_handler_send_status+0x70>)
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	4b0e      	ldr	r3, [pc, #56]	@ (8007d8c <uart_handler_send_status+0x70>)
 8007d52:	785b      	ldrb	r3, [r3, #1]
 8007d54:	4413      	add	r3, r2
 8007d56:	4a0d      	ldr	r2, [pc, #52]	@ (8007d8c <uart_handler_send_status+0x70>)
 8007d58:	7892      	ldrb	r2, [r2, #2]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	425a      	negs	r2, r3
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	b2d2      	uxtb	r2, r2
 8007d62:	bf58      	it	pl
 8007d64:	4253      	negpl	r3, r2
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	4b08      	ldr	r3, [pc, #32]	@ (8007d8c <uart_handler_send_status+0x70>)
 8007d6a:	70da      	strb	r2, [r3, #3]

        status_packet_dma[4] = 0x0D;
 8007d6c:	4b07      	ldr	r3, [pc, #28]	@ (8007d8c <uart_handler_send_status+0x70>)
 8007d6e:	220d      	movs	r2, #13
 8007d70:	711a      	strb	r2, [r3, #4]
        status_packet_dma[5] = 0x0A;
 8007d72:	4b06      	ldr	r3, [pc, #24]	@ (8007d8c <uart_handler_send_status+0x70>)
 8007d74:	220a      	movs	r2, #10
 8007d76:	715a      	strb	r2, [r3, #5]

        uart1_send_packet_dma(status_packet_dma, 6);
 8007d78:	2106      	movs	r1, #6
 8007d7a:	4804      	ldr	r0, [pc, #16]	@ (8007d8c <uart_handler_send_status+0x70>)
 8007d7c:	f7fd f930 	bl	8004fe0 <uart1_send_packet_dma>
    }
}
 8007d80:	bf00      	nop
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	20000741 	.word	0x20000741
 8007d8c:	20000868 	.word	0x20000868

08007d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007d90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007dc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007d94:	f7ff fdd0 	bl	8007938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007d98:	480c      	ldr	r0, [pc, #48]	@ (8007dcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007d9a:	490d      	ldr	r1, [pc, #52]	@ (8007dd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8007dd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007da0:	e002      	b.n	8007da8 <LoopCopyDataInit>

08007da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007da6:	3304      	adds	r3, #4

08007da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007dac:	d3f9      	bcc.n	8007da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007dae:	4a0a      	ldr	r2, [pc, #40]	@ (8007dd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007db0:	4c0a      	ldr	r4, [pc, #40]	@ (8007ddc <LoopFillZerobss+0x22>)
  movs r3, #0
 8007db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007db4:	e001      	b.n	8007dba <LoopFillZerobss>

08007db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007db8:	3204      	adds	r2, #4

08007dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007dbc:	d3fb      	bcc.n	8007db6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8007dbe:	f006 f943 	bl	800e048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007dc2:	f7fc fc61 	bl	8004688 <main>
  bx  lr    
 8007dc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007dc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007dd0:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8007dd4:	080129a0 	.word	0x080129a0
  ldr r2, =_sbss
 8007dd8:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8007ddc:	200009c0 	.word	0x200009c0

08007de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007de0:	e7fe      	b.n	8007de0 <ADC_IRQHandler>
	...

08007de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007de8:	4b0e      	ldr	r3, [pc, #56]	@ (8007e24 <HAL_Init+0x40>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a0d      	ldr	r2, [pc, #52]	@ (8007e24 <HAL_Init+0x40>)
 8007dee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007df2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007df4:	4b0b      	ldr	r3, [pc, #44]	@ (8007e24 <HAL_Init+0x40>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a0a      	ldr	r2, [pc, #40]	@ (8007e24 <HAL_Init+0x40>)
 8007dfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007dfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007e00:	4b08      	ldr	r3, [pc, #32]	@ (8007e24 <HAL_Init+0x40>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a07      	ldr	r2, [pc, #28]	@ (8007e24 <HAL_Init+0x40>)
 8007e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007e0c:	2003      	movs	r0, #3
 8007e0e:	f000 fd99 	bl	8008944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007e12:	200f      	movs	r0, #15
 8007e14:	f000 f808 	bl	8007e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007e18:	f7ff f91c 	bl	8007054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	40023c00 	.word	0x40023c00

08007e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007e30:	4b12      	ldr	r3, [pc, #72]	@ (8007e7c <HAL_InitTick+0x54>)
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	4b12      	ldr	r3, [pc, #72]	@ (8007e80 <HAL_InitTick+0x58>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 fdbf 	bl	80089ca <HAL_SYSTICK_Config>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e00e      	b.n	8007e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b0f      	cmp	r3, #15
 8007e5a:	d80a      	bhi.n	8007e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	f04f 30ff 	mov.w	r0, #4294967295
 8007e64:	f000 fd79 	bl	800895a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007e68:	4a06      	ldr	r2, [pc, #24]	@ (8007e84 <HAL_InitTick+0x5c>)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e000      	b.n	8007e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	20000040 	.word	0x20000040
 8007e80:	20000048 	.word	0x20000048
 8007e84:	20000044 	.word	0x20000044

08007e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007e8c:	4b06      	ldr	r3, [pc, #24]	@ (8007ea8 <HAL_IncTick+0x20>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	461a      	mov	r2, r3
 8007e92:	4b06      	ldr	r3, [pc, #24]	@ (8007eac <HAL_IncTick+0x24>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4413      	add	r3, r2
 8007e98:	4a04      	ldr	r2, [pc, #16]	@ (8007eac <HAL_IncTick+0x24>)
 8007e9a:	6013      	str	r3, [r2, #0]
}
 8007e9c:	bf00      	nop
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	20000048 	.word	0x20000048
 8007eac:	20000870 	.word	0x20000870

08007eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8007eb4:	4b03      	ldr	r3, [pc, #12]	@ (8007ec4 <HAL_GetTick+0x14>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	20000870 	.word	0x20000870

08007ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007ed0:	f7ff ffee 	bl	8007eb0 <HAL_GetTick>
 8007ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee0:	d005      	beq.n	8007eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8007f0c <HAL_Delay+0x44>)
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	4413      	add	r3, r2
 8007eec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007eee:	bf00      	nop
 8007ef0:	f7ff ffde 	bl	8007eb0 <HAL_GetTick>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d8f7      	bhi.n	8007ef0 <HAL_Delay+0x28>
  {
  }
}
 8007f00:	bf00      	nop
 8007f02:	bf00      	nop
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20000048 	.word	0x20000048

08007f10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e033      	b.n	8007f8e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d109      	bne.n	8007f42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7ff f8b8 	bl	80070a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f46:	f003 0310 	and.w	r3, r3, #16
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d118      	bne.n	8007f80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f52:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007f56:	f023 0302 	bic.w	r3, r3, #2
 8007f5a:	f043 0202 	orr.w	r2, r3, #2
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fa7c 	bl	8008460 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f72:	f023 0303 	bic.w	r3, r3, #3
 8007f76:	f043 0201 	orr.w	r2, r3, #1
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8007f7e:	e001      	b.n	8007f84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
	...

08007f98 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b088      	sub	sp, #32
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d101      	bne.n	8007fba <HAL_ADC_Start_DMA+0x22>
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	e0eb      	b.n	8008192 <HAL_ADC_Start_DMA+0x1fa>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d018      	beq.n	8008002 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689a      	ldr	r2, [r3, #8]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f042 0201 	orr.w	r2, r2, #1
 8007fde:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007fe0:	4b6e      	ldr	r3, [pc, #440]	@ (800819c <HAL_ADC_Start_DMA+0x204>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a6e      	ldr	r2, [pc, #440]	@ (80081a0 <HAL_ADC_Start_DMA+0x208>)
 8007fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fea:	0c9a      	lsrs	r2, r3, #18
 8007fec:	4613      	mov	r3, r2
 8007fee:	005b      	lsls	r3, r3, #1
 8007ff0:	4413      	add	r3, r2
 8007ff2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8007ff4:	e002      	b.n	8007ffc <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1f9      	bne.n	8007ff6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800800c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008010:	d107      	bne.n	8008022 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689a      	ldr	r2, [r3, #8]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008020:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f003 0301 	and.w	r3, r3, #1
 800802c:	2b01      	cmp	r3, #1
 800802e:	f040 80a3 	bne.w	8008178 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008036:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800803a:	f023 0301 	bic.w	r3, r3, #1
 800803e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008050:	2b00      	cmp	r3, #0
 8008052:	d007      	beq.n	8008064 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008058:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800805c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008068:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800806c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008070:	d106      	bne.n	8008080 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008076:	f023 0206 	bic.w	r2, r3, #6
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	645a      	str	r2, [r3, #68]	@ 0x44
 800807e:	e002      	b.n	8008086 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800808e:	4b45      	ldr	r3, [pc, #276]	@ (80081a4 <HAL_ADC_Start_DMA+0x20c>)
 8008090:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008096:	4a44      	ldr	r2, [pc, #272]	@ (80081a8 <HAL_ADC_Start_DMA+0x210>)
 8008098:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800809e:	4a43      	ldr	r2, [pc, #268]	@ (80081ac <HAL_ADC_Start_DMA+0x214>)
 80080a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a6:	4a42      	ldr	r2, [pc, #264]	@ (80081b0 <HAL_ADC_Start_DMA+0x218>)
 80080a8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80080b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	685a      	ldr	r2, [r3, #4]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80080c2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	689a      	ldr	r2, [r3, #8]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80080d2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	334c      	adds	r3, #76	@ 0x4c
 80080de:	4619      	mov	r1, r3
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f000 fd2c 	bl	8008b40 <HAL_DMA_Start_IT>
 80080e8:	4603      	mov	r3, r0
 80080ea:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f003 031f 	and.w	r3, r3, #31
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d12a      	bne.n	800814e <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a2d      	ldr	r2, [pc, #180]	@ (80081b4 <HAL_ADC_Start_DMA+0x21c>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d015      	beq.n	800812e <HAL_ADC_Start_DMA+0x196>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a2c      	ldr	r2, [pc, #176]	@ (80081b8 <HAL_ADC_Start_DMA+0x220>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d105      	bne.n	8008118 <HAL_ADC_Start_DMA+0x180>
 800810c:	4b25      	ldr	r3, [pc, #148]	@ (80081a4 <HAL_ADC_Start_DMA+0x20c>)
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	f003 031f 	and.w	r3, r3, #31
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00a      	beq.n	800812e <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a27      	ldr	r2, [pc, #156]	@ (80081bc <HAL_ADC_Start_DMA+0x224>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d136      	bne.n	8008190 <HAL_ADC_Start_DMA+0x1f8>
 8008122:	4b20      	ldr	r3, [pc, #128]	@ (80081a4 <HAL_ADC_Start_DMA+0x20c>)
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f003 0310 	and.w	r3, r3, #16
 800812a:	2b00      	cmp	r3, #0
 800812c:	d130      	bne.n	8008190 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d129      	bne.n	8008190 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	689a      	ldr	r2, [r3, #8]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800814a:	609a      	str	r2, [r3, #8]
 800814c:	e020      	b.n	8008190 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a18      	ldr	r2, [pc, #96]	@ (80081b4 <HAL_ADC_Start_DMA+0x21c>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d11b      	bne.n	8008190 <HAL_ADC_Start_DMA+0x1f8>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008162:	2b00      	cmp	r3, #0
 8008164:	d114      	bne.n	8008190 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	689a      	ldr	r2, [r3, #8]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008174:	609a      	str	r2, [r3, #8]
 8008176:	e00b      	b.n	8008190 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800817c:	f043 0210 	orr.w	r2, r3, #16
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008188:	f043 0201 	orr.w	r2, r3, #1
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8008190:	7ffb      	ldrb	r3, [r7, #31]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3720      	adds	r7, #32
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	20000040 	.word	0x20000040
 80081a0:	431bde83 	.word	0x431bde83
 80081a4:	40012300 	.word	0x40012300
 80081a8:	08008659 	.word	0x08008659
 80081ac:	08008713 	.word	0x08008713
 80081b0:	0800872f 	.word	0x0800872f
 80081b4:	40012000 	.word	0x40012000
 80081b8:	40012100 	.word	0x40012100
 80081bc:	40012200 	.word	0x40012200

080081c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008206:	2300      	movs	r3, #0
 8008208:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008210:	2b01      	cmp	r3, #1
 8008212:	d101      	bne.n	8008218 <HAL_ADC_ConfigChannel+0x1c>
 8008214:	2302      	movs	r3, #2
 8008216:	e113      	b.n	8008440 <HAL_ADC_ConfigChannel+0x244>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b09      	cmp	r3, #9
 8008226:	d925      	bls.n	8008274 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68d9      	ldr	r1, [r3, #12]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	b29b      	uxth	r3, r3
 8008234:	461a      	mov	r2, r3
 8008236:	4613      	mov	r3, r2
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	4413      	add	r3, r2
 800823c:	3b1e      	subs	r3, #30
 800823e:	2207      	movs	r2, #7
 8008240:	fa02 f303 	lsl.w	r3, r2, r3
 8008244:	43da      	mvns	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	400a      	ands	r2, r1
 800824c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68d9      	ldr	r1, [r3, #12]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	689a      	ldr	r2, [r3, #8]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	b29b      	uxth	r3, r3
 800825e:	4618      	mov	r0, r3
 8008260:	4603      	mov	r3, r0
 8008262:	005b      	lsls	r3, r3, #1
 8008264:	4403      	add	r3, r0
 8008266:	3b1e      	subs	r3, #30
 8008268:	409a      	lsls	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	60da      	str	r2, [r3, #12]
 8008272:	e022      	b.n	80082ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	6919      	ldr	r1, [r3, #16]
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	b29b      	uxth	r3, r3
 8008280:	461a      	mov	r2, r3
 8008282:	4613      	mov	r3, r2
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	4413      	add	r3, r2
 8008288:	2207      	movs	r2, #7
 800828a:	fa02 f303 	lsl.w	r3, r2, r3
 800828e:	43da      	mvns	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	400a      	ands	r2, r1
 8008296:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	6919      	ldr	r1, [r3, #16]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	689a      	ldr	r2, [r3, #8]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	4618      	mov	r0, r3
 80082aa:	4603      	mov	r3, r0
 80082ac:	005b      	lsls	r3, r3, #1
 80082ae:	4403      	add	r3, r0
 80082b0:	409a      	lsls	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	2b06      	cmp	r3, #6
 80082c0:	d824      	bhi.n	800830c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	4613      	mov	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	3b05      	subs	r3, #5
 80082d4:	221f      	movs	r2, #31
 80082d6:	fa02 f303 	lsl.w	r3, r2, r3
 80082da:	43da      	mvns	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	400a      	ands	r2, r1
 80082e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	4618      	mov	r0, r3
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	4613      	mov	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	3b05      	subs	r3, #5
 80082fe:	fa00 f203 	lsl.w	r2, r0, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	430a      	orrs	r2, r1
 8008308:	635a      	str	r2, [r3, #52]	@ 0x34
 800830a:	e04c      	b.n	80083a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	2b0c      	cmp	r3, #12
 8008312:	d824      	bhi.n	800835e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	4613      	mov	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	3b23      	subs	r3, #35	@ 0x23
 8008326:	221f      	movs	r2, #31
 8008328:	fa02 f303 	lsl.w	r3, r2, r3
 800832c:	43da      	mvns	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	400a      	ands	r2, r1
 8008334:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	b29b      	uxth	r3, r3
 8008342:	4618      	mov	r0, r3
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	4613      	mov	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	3b23      	subs	r3, #35	@ 0x23
 8008350:	fa00 f203 	lsl.w	r2, r0, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	430a      	orrs	r2, r1
 800835a:	631a      	str	r2, [r3, #48]	@ 0x30
 800835c:	e023      	b.n	80083a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	685a      	ldr	r2, [r3, #4]
 8008368:	4613      	mov	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	3b41      	subs	r3, #65	@ 0x41
 8008370:	221f      	movs	r2, #31
 8008372:	fa02 f303 	lsl.w	r3, r2, r3
 8008376:	43da      	mvns	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	400a      	ands	r2, r1
 800837e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	b29b      	uxth	r3, r3
 800838c:	4618      	mov	r0, r3
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	4613      	mov	r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	3b41      	subs	r3, #65	@ 0x41
 800839a:	fa00 f203 	lsl.w	r2, r0, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	430a      	orrs	r2, r1
 80083a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80083a6:	4b29      	ldr	r3, [pc, #164]	@ (800844c <HAL_ADC_ConfigChannel+0x250>)
 80083a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a28      	ldr	r2, [pc, #160]	@ (8008450 <HAL_ADC_ConfigChannel+0x254>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d10f      	bne.n	80083d4 <HAL_ADC_ConfigChannel+0x1d8>
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b12      	cmp	r3, #18
 80083ba:	d10b      	bne.n	80083d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008450 <HAL_ADC_ConfigChannel+0x254>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d12b      	bne.n	8008436 <HAL_ADC_ConfigChannel+0x23a>
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a1c      	ldr	r2, [pc, #112]	@ (8008454 <HAL_ADC_ConfigChannel+0x258>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d003      	beq.n	80083f0 <HAL_ADC_ConfigChannel+0x1f4>
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b11      	cmp	r3, #17
 80083ee:	d122      	bne.n	8008436 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a11      	ldr	r2, [pc, #68]	@ (8008454 <HAL_ADC_ConfigChannel+0x258>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d111      	bne.n	8008436 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008412:	4b11      	ldr	r3, [pc, #68]	@ (8008458 <HAL_ADC_ConfigChannel+0x25c>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a11      	ldr	r2, [pc, #68]	@ (800845c <HAL_ADC_ConfigChannel+0x260>)
 8008418:	fba2 2303 	umull	r2, r3, r2, r3
 800841c:	0c9a      	lsrs	r2, r3, #18
 800841e:	4613      	mov	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	005b      	lsls	r3, r3, #1
 8008426:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8008428:	e002      	b.n	8008430 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	3b01      	subs	r3, #1
 800842e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1f9      	bne.n	800842a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	40012300 	.word	0x40012300
 8008450:	40012000 	.word	0x40012000
 8008454:	10000012 	.word	0x10000012
 8008458:	20000040 	.word	0x20000040
 800845c:	431bde83 	.word	0x431bde83

08008460 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008468:	4b79      	ldr	r3, [pc, #484]	@ (8008650 <ADC_Init+0x1f0>)
 800846a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	431a      	orrs	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008494:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6859      	ldr	r1, [r3, #4]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	021a      	lsls	r2, r3, #8
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	430a      	orrs	r2, r1
 80084a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80084b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6859      	ldr	r1, [r3, #4]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	689a      	ldr	r2, [r3, #8]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	430a      	orrs	r2, r1
 80084ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	689a      	ldr	r2, [r3, #8]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80084da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6899      	ldr	r1, [r3, #8]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68da      	ldr	r2, [r3, #12]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f2:	4a58      	ldr	r2, [pc, #352]	@ (8008654 <ADC_Init+0x1f4>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d022      	beq.n	800853e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	689a      	ldr	r2, [r3, #8]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008506:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	6899      	ldr	r1, [r3, #8]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	430a      	orrs	r2, r1
 8008518:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689a      	ldr	r2, [r3, #8]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8008528:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	6899      	ldr	r1, [r3, #8]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	609a      	str	r2, [r3, #8]
 800853c:	e00f      	b.n	800855e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800854c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800855c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	689a      	ldr	r2, [r3, #8]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f022 0202 	bic.w	r2, r2, #2
 800856c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	6899      	ldr	r1, [r3, #8]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	7e1b      	ldrb	r3, [r3, #24]
 8008578:	005a      	lsls	r2, r3, #1
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d01b      	beq.n	80085c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800859a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	685a      	ldr	r2, [r3, #4]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80085aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6859      	ldr	r1, [r3, #4]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085b6:	3b01      	subs	r3, #1
 80085b8:	035a      	lsls	r2, r3, #13
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	430a      	orrs	r2, r1
 80085c0:	605a      	str	r2, [r3, #4]
 80085c2:	e007      	b.n	80085d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80085d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80085e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	69db      	ldr	r3, [r3, #28]
 80085ee:	3b01      	subs	r3, #1
 80085f0:	051a      	lsls	r2, r3, #20
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689a      	ldr	r2, [r3, #8]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008608:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6899      	ldr	r1, [r3, #8]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008616:	025a      	lsls	r2, r3, #9
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	430a      	orrs	r2, r1
 800861e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	689a      	ldr	r2, [r3, #8]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800862e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6899      	ldr	r1, [r3, #8]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	029a      	lsls	r2, r3, #10
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	430a      	orrs	r2, r1
 8008642:	609a      	str	r2, [r3, #8]
}
 8008644:	bf00      	nop
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	40012300 	.word	0x40012300
 8008654:	0f000001 	.word	0x0f000001

08008658 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008664:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800866a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800866e:	2b00      	cmp	r3, #0
 8008670:	d13c      	bne.n	80086ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008676:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d12b      	bne.n	80086e4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008690:	2b00      	cmp	r3, #0
 8008692:	d127      	bne.n	80086e4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800869a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d006      	beq.n	80086b0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d119      	bne.n	80086e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f022 0220 	bic.w	r2, r2, #32
 80086be:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d105      	bne.n	80086e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086dc:	f043 0201 	orr.w	r2, r3, #1
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f7ff fd6b 	bl	80081c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80086ea:	e00e      	b.n	800870a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f0:	f003 0310 	and.w	r3, r3, #16
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d003      	beq.n	8008700 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f7ff fd75 	bl	80081e8 <HAL_ADC_ErrorCallback>
}
 80086fe:	e004      	b.n	800870a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	4798      	blx	r3
}
 800870a:	bf00      	nop
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b084      	sub	sp, #16
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800871e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f7ff fd57 	bl	80081d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008726:	bf00      	nop
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b084      	sub	sp, #16
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800873a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2240      	movs	r2, #64	@ 0x40
 8008740:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008746:	f043 0204 	orr.w	r2, r3, #4
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f7ff fd4a 	bl	80081e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008754:	bf00      	nop
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f003 0307 	and.w	r3, r3, #7
 800876a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800876c:	4b0c      	ldr	r3, [pc, #48]	@ (80087a0 <__NVIC_SetPriorityGrouping+0x44>)
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008778:	4013      	ands	r3, r2
 800877a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008784:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800878c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800878e:	4a04      	ldr	r2, [pc, #16]	@ (80087a0 <__NVIC_SetPriorityGrouping+0x44>)
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	60d3      	str	r3, [r2, #12]
}
 8008794:	bf00      	nop
 8008796:	3714      	adds	r7, #20
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	e000ed00 	.word	0xe000ed00

080087a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80087a4:	b480      	push	{r7}
 80087a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80087a8:	4b04      	ldr	r3, [pc, #16]	@ (80087bc <__NVIC_GetPriorityGrouping+0x18>)
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	0a1b      	lsrs	r3, r3, #8
 80087ae:	f003 0307 	and.w	r3, r3, #7
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr
 80087bc:	e000ed00 	.word	0xe000ed00

080087c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	4603      	mov	r3, r0
 80087c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	db0b      	blt.n	80087ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	f003 021f 	and.w	r2, r3, #31
 80087d8:	4907      	ldr	r1, [pc, #28]	@ (80087f8 <__NVIC_EnableIRQ+0x38>)
 80087da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087de:	095b      	lsrs	r3, r3, #5
 80087e0:	2001      	movs	r0, #1
 80087e2:	fa00 f202 	lsl.w	r2, r0, r2
 80087e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80087ea:	bf00      	nop
 80087ec:	370c      	adds	r7, #12
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	e000e100 	.word	0xe000e100

080087fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	4603      	mov	r3, r0
 8008804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800880a:	2b00      	cmp	r3, #0
 800880c:	db12      	blt.n	8008834 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800880e:	79fb      	ldrb	r3, [r7, #7]
 8008810:	f003 021f 	and.w	r2, r3, #31
 8008814:	490a      	ldr	r1, [pc, #40]	@ (8008840 <__NVIC_DisableIRQ+0x44>)
 8008816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800881a:	095b      	lsrs	r3, r3, #5
 800881c:	2001      	movs	r0, #1
 800881e:	fa00 f202 	lsl.w	r2, r0, r2
 8008822:	3320      	adds	r3, #32
 8008824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008828:	f3bf 8f4f 	dsb	sy
}
 800882c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800882e:	f3bf 8f6f 	isb	sy
}
 8008832:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	e000e100 	.word	0xe000e100

08008844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	4603      	mov	r3, r0
 800884c:	6039      	str	r1, [r7, #0]
 800884e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008854:	2b00      	cmp	r3, #0
 8008856:	db0a      	blt.n	800886e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	b2da      	uxtb	r2, r3
 800885c:	490c      	ldr	r1, [pc, #48]	@ (8008890 <__NVIC_SetPriority+0x4c>)
 800885e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008862:	0112      	lsls	r2, r2, #4
 8008864:	b2d2      	uxtb	r2, r2
 8008866:	440b      	add	r3, r1
 8008868:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800886c:	e00a      	b.n	8008884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	b2da      	uxtb	r2, r3
 8008872:	4908      	ldr	r1, [pc, #32]	@ (8008894 <__NVIC_SetPriority+0x50>)
 8008874:	79fb      	ldrb	r3, [r7, #7]
 8008876:	f003 030f 	and.w	r3, r3, #15
 800887a:	3b04      	subs	r3, #4
 800887c:	0112      	lsls	r2, r2, #4
 800887e:	b2d2      	uxtb	r2, r2
 8008880:	440b      	add	r3, r1
 8008882:	761a      	strb	r2, [r3, #24]
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	e000e100 	.word	0xe000e100
 8008894:	e000ed00 	.word	0xe000ed00

08008898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008898:	b480      	push	{r7}
 800889a:	b089      	sub	sp, #36	@ 0x24
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f003 0307 	and.w	r3, r3, #7
 80088aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	f1c3 0307 	rsb	r3, r3, #7
 80088b2:	2b04      	cmp	r3, #4
 80088b4:	bf28      	it	cs
 80088b6:	2304      	movcs	r3, #4
 80088b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	3304      	adds	r3, #4
 80088be:	2b06      	cmp	r3, #6
 80088c0:	d902      	bls.n	80088c8 <NVIC_EncodePriority+0x30>
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	3b03      	subs	r3, #3
 80088c6:	e000      	b.n	80088ca <NVIC_EncodePriority+0x32>
 80088c8:	2300      	movs	r3, #0
 80088ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088cc:	f04f 32ff 	mov.w	r2, #4294967295
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	fa02 f303 	lsl.w	r3, r2, r3
 80088d6:	43da      	mvns	r2, r3
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	401a      	ands	r2, r3
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80088e0:	f04f 31ff 	mov.w	r1, #4294967295
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	fa01 f303 	lsl.w	r3, r1, r3
 80088ea:	43d9      	mvns	r1, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088f0:	4313      	orrs	r3, r2
         );
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3724      	adds	r7, #36	@ 0x24
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
	...

08008900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	3b01      	subs	r3, #1
 800890c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008910:	d301      	bcc.n	8008916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008912:	2301      	movs	r3, #1
 8008914:	e00f      	b.n	8008936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008916:	4a0a      	ldr	r2, [pc, #40]	@ (8008940 <SysTick_Config+0x40>)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3b01      	subs	r3, #1
 800891c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800891e:	210f      	movs	r1, #15
 8008920:	f04f 30ff 	mov.w	r0, #4294967295
 8008924:	f7ff ff8e 	bl	8008844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008928:	4b05      	ldr	r3, [pc, #20]	@ (8008940 <SysTick_Config+0x40>)
 800892a:	2200      	movs	r2, #0
 800892c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800892e:	4b04      	ldr	r3, [pc, #16]	@ (8008940 <SysTick_Config+0x40>)
 8008930:	2207      	movs	r2, #7
 8008932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	e000e010 	.word	0xe000e010

08008944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7ff ff05 	bl	800875c <__NVIC_SetPriorityGrouping>
}
 8008952:	bf00      	nop
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800895a:	b580      	push	{r7, lr}
 800895c:	b086      	sub	sp, #24
 800895e:	af00      	add	r7, sp, #0
 8008960:	4603      	mov	r3, r0
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	607a      	str	r2, [r7, #4]
 8008966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008968:	2300      	movs	r3, #0
 800896a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800896c:	f7ff ff1a 	bl	80087a4 <__NVIC_GetPriorityGrouping>
 8008970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	68b9      	ldr	r1, [r7, #8]
 8008976:	6978      	ldr	r0, [r7, #20]
 8008978:	f7ff ff8e 	bl	8008898 <NVIC_EncodePriority>
 800897c:	4602      	mov	r2, r0
 800897e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008982:	4611      	mov	r1, r2
 8008984:	4618      	mov	r0, r3
 8008986:	f7ff ff5d 	bl	8008844 <__NVIC_SetPriority>
}
 800898a:	bf00      	nop
 800898c:	3718      	adds	r7, #24
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b082      	sub	sp, #8
 8008996:	af00      	add	r7, sp, #0
 8008998:	4603      	mov	r3, r0
 800899a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800899c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7ff ff0d 	bl	80087c0 <__NVIC_EnableIRQ>
}
 80089a6:	bf00      	nop
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b082      	sub	sp, #8
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	4603      	mov	r3, r0
 80089b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80089b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089bc:	4618      	mov	r0, r3
 80089be:	f7ff ff1d 	bl	80087fc <__NVIC_DisableIRQ>
}
 80089c2:	bf00      	nop
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7ff ff94 	bl	8008900 <SysTick_Config>
 80089d8:	4603      	mov	r3, r0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
	...

080089e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80089f0:	f7ff fa5e 	bl	8007eb0 <HAL_GetTick>
 80089f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d101      	bne.n	8008a00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	e099      	b.n	8008b34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2202      	movs	r2, #2
 8008a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f022 0201 	bic.w	r2, r2, #1
 8008a1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008a20:	e00f      	b.n	8008a42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008a22:	f7ff fa45 	bl	8007eb0 <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	2b05      	cmp	r3, #5
 8008a2e:	d908      	bls.n	8008a42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2220      	movs	r2, #32
 8008a34:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2203      	movs	r2, #3
 8008a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e078      	b.n	8008b34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1e8      	bne.n	8008a22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	4b38      	ldr	r3, [pc, #224]	@ (8008b3c <HAL_DMA_Init+0x158>)
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685a      	ldr	r2, [r3, #4]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a98:	2b04      	cmp	r3, #4
 8008a9a:	d107      	bne.n	8008aac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	697a      	ldr	r2, [r7, #20]
 8008ab2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	f023 0307 	bic.w	r3, r3, #7
 8008ac2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad2:	2b04      	cmp	r3, #4
 8008ad4:	d117      	bne.n	8008b06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00e      	beq.n	8008b06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fb01 	bl	80090f0 <DMA_CheckFifoParam>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d008      	beq.n	8008b06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2240      	movs	r2, #64	@ 0x40
 8008af8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8008b02:	2301      	movs	r3, #1
 8008b04:	e016      	b.n	8008b34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	697a      	ldr	r2, [r7, #20]
 8008b0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fab8 	bl	8009084 <DMA_CalcBaseAndBitshift>
 8008b14:	4603      	mov	r3, r0
 8008b16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b1c:	223f      	movs	r2, #63	@ 0x3f
 8008b1e:	409a      	lsls	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	f010803f 	.word	0xf010803f

08008b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
 8008b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d101      	bne.n	8008b66 <HAL_DMA_Start_IT+0x26>
 8008b62:	2302      	movs	r3, #2
 8008b64:	e040      	b.n	8008be8 <HAL_DMA_Start_IT+0xa8>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d12f      	bne.n	8008bda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	68b9      	ldr	r1, [r7, #8]
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 fa4a 	bl	8009028 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b98:	223f      	movs	r2, #63	@ 0x3f
 8008b9a:	409a      	lsls	r2, r3
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f042 0216 	orr.w	r2, r2, #22
 8008bae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d007      	beq.n	8008bc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f042 0208 	orr.w	r2, r2, #8
 8008bc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f042 0201 	orr.w	r2, r2, #1
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	e005      	b.n	8008be6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008be2:	2302      	movs	r3, #2
 8008be4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3718      	adds	r7, #24
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bfc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008bfe:	f7ff f957 	bl	8007eb0 <HAL_GetTick>
 8008c02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d008      	beq.n	8008c22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2280      	movs	r2, #128	@ 0x80
 8008c14:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e052      	b.n	8008cc8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f022 0216 	bic.w	r2, r2, #22
 8008c30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	695a      	ldr	r2, [r3, #20]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d103      	bne.n	8008c52 <HAL_DMA_Abort+0x62>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d007      	beq.n	8008c62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f022 0208 	bic.w	r2, r2, #8
 8008c60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f022 0201 	bic.w	r2, r2, #1
 8008c70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008c72:	e013      	b.n	8008c9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008c74:	f7ff f91c 	bl	8007eb0 <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	2b05      	cmp	r3, #5
 8008c80:	d90c      	bls.n	8008c9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2220      	movs	r2, #32
 8008c86:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2203      	movs	r2, #3
 8008c8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e015      	b.n	8008cc8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1e4      	bne.n	8008c74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cae:	223f      	movs	r2, #63	@ 0x3f
 8008cb0:	409a      	lsls	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d004      	beq.n	8008cee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2280      	movs	r2, #128	@ 0x80
 8008ce8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e00c      	b.n	8008d08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2205      	movs	r2, #5
 8008cf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f022 0201 	bic.w	r2, r2, #1
 8008d04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008d20:	4b8e      	ldr	r3, [pc, #568]	@ (8008f5c <HAL_DMA_IRQHandler+0x248>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a8e      	ldr	r2, [pc, #568]	@ (8008f60 <HAL_DMA_IRQHandler+0x24c>)
 8008d26:	fba2 2303 	umull	r2, r3, r2, r3
 8008d2a:	0a9b      	lsrs	r3, r3, #10
 8008d2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d3e:	2208      	movs	r2, #8
 8008d40:	409a      	lsls	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	4013      	ands	r3, r2
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d01a      	beq.n	8008d80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 0304 	and.w	r3, r3, #4
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d013      	beq.n	8008d80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f022 0204 	bic.w	r2, r2, #4
 8008d66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d6c:	2208      	movs	r2, #8
 8008d6e:	409a      	lsls	r2, r3
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d78:	f043 0201 	orr.w	r2, r3, #1
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d84:	2201      	movs	r2, #1
 8008d86:	409a      	lsls	r2, r3
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d012      	beq.n	8008db6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	695b      	ldr	r3, [r3, #20]
 8008d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00b      	beq.n	8008db6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008da2:	2201      	movs	r2, #1
 8008da4:	409a      	lsls	r2, r3
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dae:	f043 0202 	orr.w	r2, r3, #2
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dba:	2204      	movs	r2, #4
 8008dbc:	409a      	lsls	r2, r3
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d012      	beq.n	8008dec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0302 	and.w	r3, r3, #2
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00b      	beq.n	8008dec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dd8:	2204      	movs	r2, #4
 8008dda:	409a      	lsls	r2, r3
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008de4:	f043 0204 	orr.w	r2, r3, #4
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008df0:	2210      	movs	r2, #16
 8008df2:	409a      	lsls	r2, r3
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4013      	ands	r3, r2
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d043      	beq.n	8008e84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0308 	and.w	r3, r3, #8
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d03c      	beq.n	8008e84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e0e:	2210      	movs	r2, #16
 8008e10:	409a      	lsls	r2, r3
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d018      	beq.n	8008e56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d108      	bne.n	8008e44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d024      	beq.n	8008e84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	4798      	blx	r3
 8008e42:	e01f      	b.n	8008e84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d01b      	beq.n	8008e84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	4798      	blx	r3
 8008e54:	e016      	b.n	8008e84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d107      	bne.n	8008e74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 0208 	bic.w	r2, r2, #8
 8008e72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e88:	2220      	movs	r2, #32
 8008e8a:	409a      	lsls	r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	4013      	ands	r3, r2
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 808f 	beq.w	8008fb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 0310 	and.w	r3, r3, #16
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 8087 	beq.w	8008fb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008eaa:	2220      	movs	r2, #32
 8008eac:	409a      	lsls	r2, r3
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	2b05      	cmp	r3, #5
 8008ebc:	d136      	bne.n	8008f2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f022 0216 	bic.w	r2, r2, #22
 8008ecc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	695a      	ldr	r2, [r3, #20]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008edc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d103      	bne.n	8008eee <HAL_DMA_IRQHandler+0x1da>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d007      	beq.n	8008efe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f022 0208 	bic.w	r2, r2, #8
 8008efc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f02:	223f      	movs	r2, #63	@ 0x3f
 8008f04:	409a      	lsls	r2, r3
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d07e      	beq.n	8009020 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	4798      	blx	r3
        }
        return;
 8008f2a:	e079      	b.n	8009020 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d01d      	beq.n	8008f76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d10d      	bne.n	8008f64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d031      	beq.n	8008fb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	4798      	blx	r3
 8008f58:	e02c      	b.n	8008fb4 <HAL_DMA_IRQHandler+0x2a0>
 8008f5a:	bf00      	nop
 8008f5c:	20000040 	.word	0x20000040
 8008f60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d023      	beq.n	8008fb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	4798      	blx	r3
 8008f74:	e01e      	b.n	8008fb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10f      	bne.n	8008fa4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f022 0210 	bic.w	r2, r2, #16
 8008f92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d003      	beq.n	8008fb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d032      	beq.n	8009022 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d022      	beq.n	800900e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2205      	movs	r2, #5
 8008fcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f022 0201 	bic.w	r2, r2, #1
 8008fde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	60bb      	str	r3, [r7, #8]
 8008fe6:	697a      	ldr	r2, [r7, #20]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d307      	bcc.n	8008ffc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 0301 	and.w	r3, r3, #1
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1f2      	bne.n	8008fe0 <HAL_DMA_IRQHandler+0x2cc>
 8008ffa:	e000      	b.n	8008ffe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008ffc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2201      	movs	r2, #1
 8009002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009012:	2b00      	cmp	r3, #0
 8009014:	d005      	beq.n	8009022 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	4798      	blx	r3
 800901e:	e000      	b.n	8009022 <HAL_DMA_IRQHandler+0x30e>
        return;
 8009020:	bf00      	nop
    }
  }
}
 8009022:	3718      	adds	r7, #24
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]
 8009034:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009044:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	2b40      	cmp	r3, #64	@ 0x40
 8009054:	d108      	bne.n	8009068 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009066:	e007      	b.n	8009078 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	60da      	str	r2, [r3, #12]
}
 8009078:	bf00      	nop
 800907a:	3714      	adds	r7, #20
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	b2db      	uxtb	r3, r3
 8009092:	3b10      	subs	r3, #16
 8009094:	4a14      	ldr	r2, [pc, #80]	@ (80090e8 <DMA_CalcBaseAndBitshift+0x64>)
 8009096:	fba2 2303 	umull	r2, r3, r2, r3
 800909a:	091b      	lsrs	r3, r3, #4
 800909c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800909e:	4a13      	ldr	r2, [pc, #76]	@ (80090ec <DMA_CalcBaseAndBitshift+0x68>)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	4413      	add	r3, r2
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	461a      	mov	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2b03      	cmp	r3, #3
 80090b0:	d909      	bls.n	80090c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80090ba:	f023 0303 	bic.w	r3, r3, #3
 80090be:	1d1a      	adds	r2, r3, #4
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80090c4:	e007      	b.n	80090d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80090ce:	f023 0303 	bic.w	r3, r3, #3
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	aaaaaaab 	.word	0xaaaaaaab
 80090ec:	080123d8 	.word	0x080123d8

080090f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009100:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d11f      	bne.n	800914a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	2b03      	cmp	r3, #3
 800910e:	d856      	bhi.n	80091be <DMA_CheckFifoParam+0xce>
 8009110:	a201      	add	r2, pc, #4	@ (adr r2, 8009118 <DMA_CheckFifoParam+0x28>)
 8009112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009116:	bf00      	nop
 8009118:	08009129 	.word	0x08009129
 800911c:	0800913b 	.word	0x0800913b
 8009120:	08009129 	.word	0x08009129
 8009124:	080091bf 	.word	0x080091bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800912c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d046      	beq.n	80091c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009138:	e043      	b.n	80091c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800913e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009142:	d140      	bne.n	80091c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009148:	e03d      	b.n	80091c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009152:	d121      	bne.n	8009198 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	2b03      	cmp	r3, #3
 8009158:	d837      	bhi.n	80091ca <DMA_CheckFifoParam+0xda>
 800915a:	a201      	add	r2, pc, #4	@ (adr r2, 8009160 <DMA_CheckFifoParam+0x70>)
 800915c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009160:	08009171 	.word	0x08009171
 8009164:	08009177 	.word	0x08009177
 8009168:	08009171 	.word	0x08009171
 800916c:	08009189 	.word	0x08009189
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	73fb      	strb	r3, [r7, #15]
      break;
 8009174:	e030      	b.n	80091d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800917a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d025      	beq.n	80091ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009186:	e022      	b.n	80091ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800918c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009190:	d11f      	bne.n	80091d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009196:	e01c      	b.n	80091d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2b02      	cmp	r3, #2
 800919c:	d903      	bls.n	80091a6 <DMA_CheckFifoParam+0xb6>
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	2b03      	cmp	r3, #3
 80091a2:	d003      	beq.n	80091ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80091a4:	e018      	b.n	80091d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	73fb      	strb	r3, [r7, #15]
      break;
 80091aa:	e015      	b.n	80091d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00e      	beq.n	80091d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	73fb      	strb	r3, [r7, #15]
      break;
 80091bc:	e00b      	b.n	80091d6 <DMA_CheckFifoParam+0xe6>
      break;
 80091be:	bf00      	nop
 80091c0:	e00a      	b.n	80091d8 <DMA_CheckFifoParam+0xe8>
      break;
 80091c2:	bf00      	nop
 80091c4:	e008      	b.n	80091d8 <DMA_CheckFifoParam+0xe8>
      break;
 80091c6:	bf00      	nop
 80091c8:	e006      	b.n	80091d8 <DMA_CheckFifoParam+0xe8>
      break;
 80091ca:	bf00      	nop
 80091cc:	e004      	b.n	80091d8 <DMA_CheckFifoParam+0xe8>
      break;
 80091ce:	bf00      	nop
 80091d0:	e002      	b.n	80091d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80091d2:	bf00      	nop
 80091d4:	e000      	b.n	80091d8 <DMA_CheckFifoParam+0xe8>
      break;
 80091d6:	bf00      	nop
    }
  } 
  
  return status; 
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop

080091e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b089      	sub	sp, #36	@ 0x24
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80091f2:	2300      	movs	r3, #0
 80091f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80091f6:	2300      	movs	r3, #0
 80091f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80091fa:	2300      	movs	r3, #0
 80091fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80091fe:	2300      	movs	r3, #0
 8009200:	61fb      	str	r3, [r7, #28]
 8009202:	e165      	b.n	80094d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009204:	2201      	movs	r2, #1
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	fa02 f303 	lsl.w	r3, r2, r3
 800920c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	697a      	ldr	r2, [r7, #20]
 8009214:	4013      	ands	r3, r2
 8009216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	429a      	cmp	r2, r3
 800921e:	f040 8154 	bne.w	80094ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	f003 0303 	and.w	r3, r3, #3
 800922a:	2b01      	cmp	r3, #1
 800922c:	d005      	beq.n	800923a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009236:	2b02      	cmp	r3, #2
 8009238:	d130      	bne.n	800929c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	005b      	lsls	r3, r3, #1
 8009244:	2203      	movs	r2, #3
 8009246:	fa02 f303 	lsl.w	r3, r2, r3
 800924a:	43db      	mvns	r3, r3
 800924c:	69ba      	ldr	r2, [r7, #24]
 800924e:	4013      	ands	r3, r2
 8009250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	68da      	ldr	r2, [r3, #12]
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	fa02 f303 	lsl.w	r3, r2, r3
 800925e:	69ba      	ldr	r2, [r7, #24]
 8009260:	4313      	orrs	r3, r2
 8009262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009270:	2201      	movs	r2, #1
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	fa02 f303 	lsl.w	r3, r2, r3
 8009278:	43db      	mvns	r3, r3
 800927a:	69ba      	ldr	r2, [r7, #24]
 800927c:	4013      	ands	r3, r2
 800927e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	091b      	lsrs	r3, r3, #4
 8009286:	f003 0201 	and.w	r2, r3, #1
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	fa02 f303 	lsl.w	r3, r2, r3
 8009290:	69ba      	ldr	r2, [r7, #24]
 8009292:	4313      	orrs	r3, r2
 8009294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	69ba      	ldr	r2, [r7, #24]
 800929a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	f003 0303 	and.w	r3, r3, #3
 80092a4:	2b03      	cmp	r3, #3
 80092a6:	d017      	beq.n	80092d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	005b      	lsls	r3, r3, #1
 80092b2:	2203      	movs	r2, #3
 80092b4:	fa02 f303 	lsl.w	r3, r2, r3
 80092b8:	43db      	mvns	r3, r3
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	4013      	ands	r3, r2
 80092be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	689a      	ldr	r2, [r3, #8]
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	005b      	lsls	r3, r3, #1
 80092c8:	fa02 f303 	lsl.w	r3, r2, r3
 80092cc:	69ba      	ldr	r2, [r7, #24]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	69ba      	ldr	r2, [r7, #24]
 80092d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	f003 0303 	and.w	r3, r3, #3
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d123      	bne.n	800932c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	08da      	lsrs	r2, r3, #3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	3208      	adds	r2, #8
 80092ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	f003 0307 	and.w	r3, r3, #7
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	220f      	movs	r2, #15
 80092fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009300:	43db      	mvns	r3, r3
 8009302:	69ba      	ldr	r2, [r7, #24]
 8009304:	4013      	ands	r3, r2
 8009306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	691a      	ldr	r2, [r3, #16]
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	f003 0307 	and.w	r3, r3, #7
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	fa02 f303 	lsl.w	r3, r2, r3
 8009318:	69ba      	ldr	r2, [r7, #24]
 800931a:	4313      	orrs	r3, r2
 800931c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	08da      	lsrs	r2, r3, #3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	3208      	adds	r2, #8
 8009326:	69b9      	ldr	r1, [r7, #24]
 8009328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	005b      	lsls	r3, r3, #1
 8009336:	2203      	movs	r2, #3
 8009338:	fa02 f303 	lsl.w	r3, r2, r3
 800933c:	43db      	mvns	r3, r3
 800933e:	69ba      	ldr	r2, [r7, #24]
 8009340:	4013      	ands	r3, r2
 8009342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	f003 0203 	and.w	r2, r3, #3
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	005b      	lsls	r3, r3, #1
 8009350:	fa02 f303 	lsl.w	r3, r2, r3
 8009354:	69ba      	ldr	r2, [r7, #24]
 8009356:	4313      	orrs	r3, r2
 8009358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	69ba      	ldr	r2, [r7, #24]
 800935e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 80ae 	beq.w	80094ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800936e:	2300      	movs	r3, #0
 8009370:	60fb      	str	r3, [r7, #12]
 8009372:	4b5d      	ldr	r3, [pc, #372]	@ (80094e8 <HAL_GPIO_Init+0x300>)
 8009374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009376:	4a5c      	ldr	r2, [pc, #368]	@ (80094e8 <HAL_GPIO_Init+0x300>)
 8009378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800937c:	6453      	str	r3, [r2, #68]	@ 0x44
 800937e:	4b5a      	ldr	r3, [pc, #360]	@ (80094e8 <HAL_GPIO_Init+0x300>)
 8009380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009386:	60fb      	str	r3, [r7, #12]
 8009388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800938a:	4a58      	ldr	r2, [pc, #352]	@ (80094ec <HAL_GPIO_Init+0x304>)
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	089b      	lsrs	r3, r3, #2
 8009390:	3302      	adds	r3, #2
 8009392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	f003 0303 	and.w	r3, r3, #3
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	220f      	movs	r2, #15
 80093a2:	fa02 f303 	lsl.w	r3, r2, r3
 80093a6:	43db      	mvns	r3, r3
 80093a8:	69ba      	ldr	r2, [r7, #24]
 80093aa:	4013      	ands	r3, r2
 80093ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a4f      	ldr	r2, [pc, #316]	@ (80094f0 <HAL_GPIO_Init+0x308>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d025      	beq.n	8009402 <HAL_GPIO_Init+0x21a>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a4e      	ldr	r2, [pc, #312]	@ (80094f4 <HAL_GPIO_Init+0x30c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d01f      	beq.n	80093fe <HAL_GPIO_Init+0x216>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a4d      	ldr	r2, [pc, #308]	@ (80094f8 <HAL_GPIO_Init+0x310>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d019      	beq.n	80093fa <HAL_GPIO_Init+0x212>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a4c      	ldr	r2, [pc, #304]	@ (80094fc <HAL_GPIO_Init+0x314>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d013      	beq.n	80093f6 <HAL_GPIO_Init+0x20e>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a4b      	ldr	r2, [pc, #300]	@ (8009500 <HAL_GPIO_Init+0x318>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d00d      	beq.n	80093f2 <HAL_GPIO_Init+0x20a>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a4a      	ldr	r2, [pc, #296]	@ (8009504 <HAL_GPIO_Init+0x31c>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d007      	beq.n	80093ee <HAL_GPIO_Init+0x206>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a49      	ldr	r2, [pc, #292]	@ (8009508 <HAL_GPIO_Init+0x320>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d101      	bne.n	80093ea <HAL_GPIO_Init+0x202>
 80093e6:	2306      	movs	r3, #6
 80093e8:	e00c      	b.n	8009404 <HAL_GPIO_Init+0x21c>
 80093ea:	2307      	movs	r3, #7
 80093ec:	e00a      	b.n	8009404 <HAL_GPIO_Init+0x21c>
 80093ee:	2305      	movs	r3, #5
 80093f0:	e008      	b.n	8009404 <HAL_GPIO_Init+0x21c>
 80093f2:	2304      	movs	r3, #4
 80093f4:	e006      	b.n	8009404 <HAL_GPIO_Init+0x21c>
 80093f6:	2303      	movs	r3, #3
 80093f8:	e004      	b.n	8009404 <HAL_GPIO_Init+0x21c>
 80093fa:	2302      	movs	r3, #2
 80093fc:	e002      	b.n	8009404 <HAL_GPIO_Init+0x21c>
 80093fe:	2301      	movs	r3, #1
 8009400:	e000      	b.n	8009404 <HAL_GPIO_Init+0x21c>
 8009402:	2300      	movs	r3, #0
 8009404:	69fa      	ldr	r2, [r7, #28]
 8009406:	f002 0203 	and.w	r2, r2, #3
 800940a:	0092      	lsls	r2, r2, #2
 800940c:	4093      	lsls	r3, r2
 800940e:	69ba      	ldr	r2, [r7, #24]
 8009410:	4313      	orrs	r3, r2
 8009412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009414:	4935      	ldr	r1, [pc, #212]	@ (80094ec <HAL_GPIO_Init+0x304>)
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	089b      	lsrs	r3, r3, #2
 800941a:	3302      	adds	r3, #2
 800941c:	69ba      	ldr	r2, [r7, #24]
 800941e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009422:	4b3a      	ldr	r3, [pc, #232]	@ (800950c <HAL_GPIO_Init+0x324>)
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	43db      	mvns	r3, r3
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	4013      	ands	r3, r2
 8009430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800943a:	2b00      	cmp	r3, #0
 800943c:	d003      	beq.n	8009446 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800943e:	69ba      	ldr	r2, [r7, #24]
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	4313      	orrs	r3, r2
 8009444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009446:	4a31      	ldr	r2, [pc, #196]	@ (800950c <HAL_GPIO_Init+0x324>)
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800944c:	4b2f      	ldr	r3, [pc, #188]	@ (800950c <HAL_GPIO_Init+0x324>)
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	43db      	mvns	r3, r3
 8009456:	69ba      	ldr	r2, [r7, #24]
 8009458:	4013      	ands	r3, r2
 800945a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d003      	beq.n	8009470 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8009468:	69ba      	ldr	r2, [r7, #24]
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	4313      	orrs	r3, r2
 800946e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009470:	4a26      	ldr	r2, [pc, #152]	@ (800950c <HAL_GPIO_Init+0x324>)
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009476:	4b25      	ldr	r3, [pc, #148]	@ (800950c <HAL_GPIO_Init+0x324>)
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	43db      	mvns	r3, r3
 8009480:	69ba      	ldr	r2, [r7, #24]
 8009482:	4013      	ands	r3, r2
 8009484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d003      	beq.n	800949a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8009492:	69ba      	ldr	r2, [r7, #24]
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	4313      	orrs	r3, r2
 8009498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800949a:	4a1c      	ldr	r2, [pc, #112]	@ (800950c <HAL_GPIO_Init+0x324>)
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80094a0:	4b1a      	ldr	r3, [pc, #104]	@ (800950c <HAL_GPIO_Init+0x324>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	43db      	mvns	r3, r3
 80094aa:	69ba      	ldr	r2, [r7, #24]
 80094ac:	4013      	ands	r3, r2
 80094ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d003      	beq.n	80094c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80094bc:	69ba      	ldr	r2, [r7, #24]
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80094c4:	4a11      	ldr	r2, [pc, #68]	@ (800950c <HAL_GPIO_Init+0x324>)
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	3301      	adds	r3, #1
 80094ce:	61fb      	str	r3, [r7, #28]
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	2b0f      	cmp	r3, #15
 80094d4:	f67f ae96 	bls.w	8009204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80094d8:	bf00      	nop
 80094da:	bf00      	nop
 80094dc:	3724      	adds	r7, #36	@ 0x24
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	40023800 	.word	0x40023800
 80094ec:	40013800 	.word	0x40013800
 80094f0:	40020000 	.word	0x40020000
 80094f4:	40020400 	.word	0x40020400
 80094f8:	40020800 	.word	0x40020800
 80094fc:	40020c00 	.word	0x40020c00
 8009500:	40021000 	.word	0x40021000
 8009504:	40021400 	.word	0x40021400
 8009508:	40021800 	.word	0x40021800
 800950c:	40013c00 	.word	0x40013c00

08009510 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009510:	b480      	push	{r7}
 8009512:	b087      	sub	sp, #28
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800951a:	2300      	movs	r3, #0
 800951c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800951e:	2300      	movs	r3, #0
 8009520:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8009522:	2300      	movs	r3, #0
 8009524:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009526:	2300      	movs	r3, #0
 8009528:	617b      	str	r3, [r7, #20]
 800952a:	e0c7      	b.n	80096bc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800952c:	2201      	movs	r2, #1
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	fa02 f303 	lsl.w	r3, r2, r3
 8009534:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8009536:	683a      	ldr	r2, [r7, #0]
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	4013      	ands	r3, r2
 800953c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	429a      	cmp	r2, r3
 8009544:	f040 80b7 	bne.w	80096b6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009548:	4a62      	ldr	r2, [pc, #392]	@ (80096d4 <HAL_GPIO_DeInit+0x1c4>)
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	089b      	lsrs	r3, r3, #2
 800954e:	3302      	adds	r3, #2
 8009550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009554:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	f003 0303 	and.w	r3, r3, #3
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	220f      	movs	r2, #15
 8009560:	fa02 f303 	lsl.w	r3, r2, r3
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	4013      	ands	r3, r2
 8009568:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a5a      	ldr	r2, [pc, #360]	@ (80096d8 <HAL_GPIO_DeInit+0x1c8>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d025      	beq.n	80095be <HAL_GPIO_DeInit+0xae>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a59      	ldr	r2, [pc, #356]	@ (80096dc <HAL_GPIO_DeInit+0x1cc>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d01f      	beq.n	80095ba <HAL_GPIO_DeInit+0xaa>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a58      	ldr	r2, [pc, #352]	@ (80096e0 <HAL_GPIO_DeInit+0x1d0>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d019      	beq.n	80095b6 <HAL_GPIO_DeInit+0xa6>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a57      	ldr	r2, [pc, #348]	@ (80096e4 <HAL_GPIO_DeInit+0x1d4>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d013      	beq.n	80095b2 <HAL_GPIO_DeInit+0xa2>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a56      	ldr	r2, [pc, #344]	@ (80096e8 <HAL_GPIO_DeInit+0x1d8>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d00d      	beq.n	80095ae <HAL_GPIO_DeInit+0x9e>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a55      	ldr	r2, [pc, #340]	@ (80096ec <HAL_GPIO_DeInit+0x1dc>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d007      	beq.n	80095aa <HAL_GPIO_DeInit+0x9a>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a54      	ldr	r2, [pc, #336]	@ (80096f0 <HAL_GPIO_DeInit+0x1e0>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d101      	bne.n	80095a6 <HAL_GPIO_DeInit+0x96>
 80095a2:	2306      	movs	r3, #6
 80095a4:	e00c      	b.n	80095c0 <HAL_GPIO_DeInit+0xb0>
 80095a6:	2307      	movs	r3, #7
 80095a8:	e00a      	b.n	80095c0 <HAL_GPIO_DeInit+0xb0>
 80095aa:	2305      	movs	r3, #5
 80095ac:	e008      	b.n	80095c0 <HAL_GPIO_DeInit+0xb0>
 80095ae:	2304      	movs	r3, #4
 80095b0:	e006      	b.n	80095c0 <HAL_GPIO_DeInit+0xb0>
 80095b2:	2303      	movs	r3, #3
 80095b4:	e004      	b.n	80095c0 <HAL_GPIO_DeInit+0xb0>
 80095b6:	2302      	movs	r3, #2
 80095b8:	e002      	b.n	80095c0 <HAL_GPIO_DeInit+0xb0>
 80095ba:	2301      	movs	r3, #1
 80095bc:	e000      	b.n	80095c0 <HAL_GPIO_DeInit+0xb0>
 80095be:	2300      	movs	r3, #0
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	f002 0203 	and.w	r2, r2, #3
 80095c6:	0092      	lsls	r2, r2, #2
 80095c8:	4093      	lsls	r3, r2
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d132      	bne.n	8009636 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80095d0:	4b48      	ldr	r3, [pc, #288]	@ (80096f4 <HAL_GPIO_DeInit+0x1e4>)
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	43db      	mvns	r3, r3
 80095d8:	4946      	ldr	r1, [pc, #280]	@ (80096f4 <HAL_GPIO_DeInit+0x1e4>)
 80095da:	4013      	ands	r3, r2
 80095dc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80095de:	4b45      	ldr	r3, [pc, #276]	@ (80096f4 <HAL_GPIO_DeInit+0x1e4>)
 80095e0:	685a      	ldr	r2, [r3, #4]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	43db      	mvns	r3, r3
 80095e6:	4943      	ldr	r1, [pc, #268]	@ (80096f4 <HAL_GPIO_DeInit+0x1e4>)
 80095e8:	4013      	ands	r3, r2
 80095ea:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80095ec:	4b41      	ldr	r3, [pc, #260]	@ (80096f4 <HAL_GPIO_DeInit+0x1e4>)
 80095ee:	68da      	ldr	r2, [r3, #12]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	43db      	mvns	r3, r3
 80095f4:	493f      	ldr	r1, [pc, #252]	@ (80096f4 <HAL_GPIO_DeInit+0x1e4>)
 80095f6:	4013      	ands	r3, r2
 80095f8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80095fa:	4b3e      	ldr	r3, [pc, #248]	@ (80096f4 <HAL_GPIO_DeInit+0x1e4>)
 80095fc:	689a      	ldr	r2, [r3, #8]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	43db      	mvns	r3, r3
 8009602:	493c      	ldr	r1, [pc, #240]	@ (80096f4 <HAL_GPIO_DeInit+0x1e4>)
 8009604:	4013      	ands	r3, r2
 8009606:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	f003 0303 	and.w	r3, r3, #3
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	220f      	movs	r2, #15
 8009612:	fa02 f303 	lsl.w	r3, r2, r3
 8009616:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009618:	4a2e      	ldr	r2, [pc, #184]	@ (80096d4 <HAL_GPIO_DeInit+0x1c4>)
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	089b      	lsrs	r3, r3, #2
 800961e:	3302      	adds	r3, #2
 8009620:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	43da      	mvns	r2, r3
 8009628:	482a      	ldr	r0, [pc, #168]	@ (80096d4 <HAL_GPIO_DeInit+0x1c4>)
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	089b      	lsrs	r3, r3, #2
 800962e:	400a      	ands	r2, r1
 8009630:	3302      	adds	r3, #2
 8009632:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	005b      	lsls	r3, r3, #1
 800963e:	2103      	movs	r1, #3
 8009640:	fa01 f303 	lsl.w	r3, r1, r3
 8009644:	43db      	mvns	r3, r3
 8009646:	401a      	ands	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	08da      	lsrs	r2, r3, #3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	3208      	adds	r2, #8
 8009654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	f003 0307 	and.w	r3, r3, #7
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	220f      	movs	r2, #15
 8009662:	fa02 f303 	lsl.w	r3, r2, r3
 8009666:	43db      	mvns	r3, r3
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	08d2      	lsrs	r2, r2, #3
 800966c:	4019      	ands	r1, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	3208      	adds	r2, #8
 8009672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68da      	ldr	r2, [r3, #12]
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	005b      	lsls	r3, r3, #1
 800967e:	2103      	movs	r1, #3
 8009680:	fa01 f303 	lsl.w	r3, r1, r3
 8009684:	43db      	mvns	r3, r3
 8009686:	401a      	ands	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685a      	ldr	r2, [r3, #4]
 8009690:	2101      	movs	r1, #1
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	fa01 f303 	lsl.w	r3, r1, r3
 8009698:	43db      	mvns	r3, r3
 800969a:	401a      	ands	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	689a      	ldr	r2, [r3, #8]
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	005b      	lsls	r3, r3, #1
 80096a8:	2103      	movs	r1, #3
 80096aa:	fa01 f303 	lsl.w	r3, r1, r3
 80096ae:	43db      	mvns	r3, r3
 80096b0:	401a      	ands	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	3301      	adds	r3, #1
 80096ba:	617b      	str	r3, [r7, #20]
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	2b0f      	cmp	r3, #15
 80096c0:	f67f af34 	bls.w	800952c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80096c4:	bf00      	nop
 80096c6:	bf00      	nop
 80096c8:	371c      	adds	r7, #28
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	40013800 	.word	0x40013800
 80096d8:	40020000 	.word	0x40020000
 80096dc:	40020400 	.word	0x40020400
 80096e0:	40020800 	.word	0x40020800
 80096e4:	40020c00 	.word	0x40020c00
 80096e8:	40021000 	.word	0x40021000
 80096ec:	40021400 	.word	0x40021400
 80096f0:	40021800 	.word	0x40021800
 80096f4:	40013c00 	.word	0x40013c00

080096f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	460b      	mov	r3, r1
 8009702:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	691a      	ldr	r2, [r3, #16]
 8009708:	887b      	ldrh	r3, [r7, #2]
 800970a:	4013      	ands	r3, r2
 800970c:	2b00      	cmp	r3, #0
 800970e:	d002      	beq.n	8009716 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009710:	2301      	movs	r3, #1
 8009712:	73fb      	strb	r3, [r7, #15]
 8009714:	e001      	b.n	800971a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009716:	2300      	movs	r3, #0
 8009718:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800971a:	7bfb      	ldrb	r3, [r7, #15]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	460b      	mov	r3, r1
 8009732:	807b      	strh	r3, [r7, #2]
 8009734:	4613      	mov	r3, r2
 8009736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009738:	787b      	ldrb	r3, [r7, #1]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d003      	beq.n	8009746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800973e:	887a      	ldrh	r2, [r7, #2]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009744:	e003      	b.n	800974e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009746:	887b      	ldrh	r3, [r7, #2]
 8009748:	041a      	lsls	r2, r3, #16
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	619a      	str	r2, [r3, #24]
}
 800974e:	bf00      	nop
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
	...

0800975c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009766:	4b08      	ldr	r3, [pc, #32]	@ (8009788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009768:	695a      	ldr	r2, [r3, #20]
 800976a:	88fb      	ldrh	r3, [r7, #6]
 800976c:	4013      	ands	r3, r2
 800976e:	2b00      	cmp	r3, #0
 8009770:	d006      	beq.n	8009780 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009772:	4a05      	ldr	r2, [pc, #20]	@ (8009788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009774:	88fb      	ldrh	r3, [r7, #6]
 8009776:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009778:	88fb      	ldrh	r3, [r7, #6]
 800977a:	4618      	mov	r0, r3
 800977c:	f7fb fbbe 	bl	8004efc <HAL_GPIO_EXTI_Callback>
  }
}
 8009780:	bf00      	nop
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	40013c00 	.word	0x40013c00

0800978c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e12b      	b.n	80099f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d106      	bne.n	80097b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7fd fd52 	bl	800725c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2224      	movs	r2, #36	@ 0x24
 80097bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f022 0201 	bic.w	r2, r2, #1
 80097ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80097de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80097ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80097f0:	f001 f912 	bl	800aa18 <HAL_RCC_GetPCLK1Freq>
 80097f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	4a81      	ldr	r2, [pc, #516]	@ (8009a00 <HAL_I2C_Init+0x274>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d807      	bhi.n	8009810 <HAL_I2C_Init+0x84>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4a80      	ldr	r2, [pc, #512]	@ (8009a04 <HAL_I2C_Init+0x278>)
 8009804:	4293      	cmp	r3, r2
 8009806:	bf94      	ite	ls
 8009808:	2301      	movls	r3, #1
 800980a:	2300      	movhi	r3, #0
 800980c:	b2db      	uxtb	r3, r3
 800980e:	e006      	b.n	800981e <HAL_I2C_Init+0x92>
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4a7d      	ldr	r2, [pc, #500]	@ (8009a08 <HAL_I2C_Init+0x27c>)
 8009814:	4293      	cmp	r3, r2
 8009816:	bf94      	ite	ls
 8009818:	2301      	movls	r3, #1
 800981a:	2300      	movhi	r3, #0
 800981c:	b2db      	uxtb	r3, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d001      	beq.n	8009826 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e0e7      	b.n	80099f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	4a78      	ldr	r2, [pc, #480]	@ (8009a0c <HAL_I2C_Init+0x280>)
 800982a:	fba2 2303 	umull	r2, r3, r2, r3
 800982e:	0c9b      	lsrs	r3, r3, #18
 8009830:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	430a      	orrs	r2, r1
 8009844:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	6a1b      	ldr	r3, [r3, #32]
 800984c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	4a6a      	ldr	r2, [pc, #424]	@ (8009a00 <HAL_I2C_Init+0x274>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d802      	bhi.n	8009860 <HAL_I2C_Init+0xd4>
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	3301      	adds	r3, #1
 800985e:	e009      	b.n	8009874 <HAL_I2C_Init+0xe8>
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009866:	fb02 f303 	mul.w	r3, r2, r3
 800986a:	4a69      	ldr	r2, [pc, #420]	@ (8009a10 <HAL_I2C_Init+0x284>)
 800986c:	fba2 2303 	umull	r2, r3, r2, r3
 8009870:	099b      	lsrs	r3, r3, #6
 8009872:	3301      	adds	r3, #1
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	6812      	ldr	r2, [r2, #0]
 8009878:	430b      	orrs	r3, r1
 800987a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	69db      	ldr	r3, [r3, #28]
 8009882:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009886:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	495c      	ldr	r1, [pc, #368]	@ (8009a00 <HAL_I2C_Init+0x274>)
 8009890:	428b      	cmp	r3, r1
 8009892:	d819      	bhi.n	80098c8 <HAL_I2C_Init+0x13c>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	1e59      	subs	r1, r3, #1
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	005b      	lsls	r3, r3, #1
 800989e:	fbb1 f3f3 	udiv	r3, r1, r3
 80098a2:	1c59      	adds	r1, r3, #1
 80098a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80098a8:	400b      	ands	r3, r1
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00a      	beq.n	80098c4 <HAL_I2C_Init+0x138>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	1e59      	subs	r1, r3, #1
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	005b      	lsls	r3, r3, #1
 80098b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80098bc:	3301      	adds	r3, #1
 80098be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098c2:	e051      	b.n	8009968 <HAL_I2C_Init+0x1dc>
 80098c4:	2304      	movs	r3, #4
 80098c6:	e04f      	b.n	8009968 <HAL_I2C_Init+0x1dc>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d111      	bne.n	80098f4 <HAL_I2C_Init+0x168>
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	1e58      	subs	r0, r3, #1
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6859      	ldr	r1, [r3, #4]
 80098d8:	460b      	mov	r3, r1
 80098da:	005b      	lsls	r3, r3, #1
 80098dc:	440b      	add	r3, r1
 80098de:	fbb0 f3f3 	udiv	r3, r0, r3
 80098e2:	3301      	adds	r3, #1
 80098e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	bf0c      	ite	eq
 80098ec:	2301      	moveq	r3, #1
 80098ee:	2300      	movne	r3, #0
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	e012      	b.n	800991a <HAL_I2C_Init+0x18e>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	1e58      	subs	r0, r3, #1
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6859      	ldr	r1, [r3, #4]
 80098fc:	460b      	mov	r3, r1
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	440b      	add	r3, r1
 8009902:	0099      	lsls	r1, r3, #2
 8009904:	440b      	add	r3, r1
 8009906:	fbb0 f3f3 	udiv	r3, r0, r3
 800990a:	3301      	adds	r3, #1
 800990c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009910:	2b00      	cmp	r3, #0
 8009912:	bf0c      	ite	eq
 8009914:	2301      	moveq	r3, #1
 8009916:	2300      	movne	r3, #0
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b00      	cmp	r3, #0
 800991c:	d001      	beq.n	8009922 <HAL_I2C_Init+0x196>
 800991e:	2301      	movs	r3, #1
 8009920:	e022      	b.n	8009968 <HAL_I2C_Init+0x1dc>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d10e      	bne.n	8009948 <HAL_I2C_Init+0x1bc>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	1e58      	subs	r0, r3, #1
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6859      	ldr	r1, [r3, #4]
 8009932:	460b      	mov	r3, r1
 8009934:	005b      	lsls	r3, r3, #1
 8009936:	440b      	add	r3, r1
 8009938:	fbb0 f3f3 	udiv	r3, r0, r3
 800993c:	3301      	adds	r3, #1
 800993e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009946:	e00f      	b.n	8009968 <HAL_I2C_Init+0x1dc>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	1e58      	subs	r0, r3, #1
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6859      	ldr	r1, [r3, #4]
 8009950:	460b      	mov	r3, r1
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	440b      	add	r3, r1
 8009956:	0099      	lsls	r1, r3, #2
 8009958:	440b      	add	r3, r1
 800995a:	fbb0 f3f3 	udiv	r3, r0, r3
 800995e:	3301      	adds	r3, #1
 8009960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009964:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009968:	6879      	ldr	r1, [r7, #4]
 800996a:	6809      	ldr	r1, [r1, #0]
 800996c:	4313      	orrs	r3, r2
 800996e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	69da      	ldr	r2, [r3, #28]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a1b      	ldr	r3, [r3, #32]
 8009982:	431a      	orrs	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	430a      	orrs	r2, r1
 800998a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009996:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	6911      	ldr	r1, [r2, #16]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	68d2      	ldr	r2, [r2, #12]
 80099a2:	4311      	orrs	r1, r2
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	6812      	ldr	r2, [r2, #0]
 80099a8:	430b      	orrs	r3, r1
 80099aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	695a      	ldr	r2, [r3, #20]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	431a      	orrs	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	430a      	orrs	r2, r1
 80099c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f042 0201 	orr.w	r2, r2, #1
 80099d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2220      	movs	r2, #32
 80099e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	000186a0 	.word	0x000186a0
 8009a04:	001e847f 	.word	0x001e847f
 8009a08:	003d08ff 	.word	0x003d08ff
 8009a0c:	431bde83 	.word	0x431bde83
 8009a10:	10624dd3 	.word	0x10624dd3

08009a14 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d101      	bne.n	8009a26 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e021      	b.n	8009a6a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2224      	movs	r2, #36	@ 0x24
 8009a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f022 0201 	bic.w	r2, r2, #1
 8009a3c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7fd fcac 	bl	800739c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
	...

08009a74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b088      	sub	sp, #32
 8009a78:	af02      	add	r7, sp, #8
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	4608      	mov	r0, r1
 8009a7e:	4611      	mov	r1, r2
 8009a80:	461a      	mov	r2, r3
 8009a82:	4603      	mov	r3, r0
 8009a84:	817b      	strh	r3, [r7, #10]
 8009a86:	460b      	mov	r3, r1
 8009a88:	813b      	strh	r3, [r7, #8]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009a8e:	f7fe fa0f 	bl	8007eb0 <HAL_GetTick>
 8009a92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	2b20      	cmp	r3, #32
 8009a9e:	f040 80d9 	bne.w	8009c54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	2319      	movs	r3, #25
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	496d      	ldr	r1, [pc, #436]	@ (8009c60 <HAL_I2C_Mem_Write+0x1ec>)
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f000 fc8b 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d001      	beq.n	8009abc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009ab8:	2302      	movs	r3, #2
 8009aba:	e0cc      	b.n	8009c56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d101      	bne.n	8009aca <HAL_I2C_Mem_Write+0x56>
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	e0c5      	b.n	8009c56 <HAL_I2C_Mem_Write+0x1e2>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0301 	and.w	r3, r3, #1
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d007      	beq.n	8009af0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f042 0201 	orr.w	r2, r2, #1
 8009aee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009afe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2221      	movs	r2, #33	@ 0x21
 8009b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2240      	movs	r2, #64	@ 0x40
 8009b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2200      	movs	r2, #0
 8009b14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6a3a      	ldr	r2, [r7, #32]
 8009b1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009b20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	4a4d      	ldr	r2, [pc, #308]	@ (8009c64 <HAL_I2C_Mem_Write+0x1f0>)
 8009b30:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b32:	88f8      	ldrh	r0, [r7, #6]
 8009b34:	893a      	ldrh	r2, [r7, #8]
 8009b36:	8979      	ldrh	r1, [r7, #10]
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	9301      	str	r3, [sp, #4]
 8009b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	4603      	mov	r3, r0
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f000 fac2 	bl	800a0cc <I2C_RequestMemoryWrite>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d052      	beq.n	8009bf4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e081      	b.n	8009c56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f000 fd50 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00d      	beq.n	8009b7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b66:	2b04      	cmp	r3, #4
 8009b68:	d107      	bne.n	8009b7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e06b      	b.n	8009c56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b82:	781a      	ldrb	r2, [r3, #0]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b8e:	1c5a      	adds	r2, r3, #1
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	695b      	ldr	r3, [r3, #20]
 8009bb4:	f003 0304 	and.w	r3, r3, #4
 8009bb8:	2b04      	cmp	r3, #4
 8009bba:	d11b      	bne.n	8009bf4 <HAL_I2C_Mem_Write+0x180>
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d017      	beq.n	8009bf4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc8:	781a      	ldrb	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd4:	1c5a      	adds	r2, r3, #1
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bde:	3b01      	subs	r3, #1
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	3b01      	subs	r3, #1
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1aa      	bne.n	8009b52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f000 fd43 	bl	800a68c <I2C_WaitOnBTFFlagUntilTimeout>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00d      	beq.n	8009c28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c10:	2b04      	cmp	r3, #4
 8009c12:	d107      	bne.n	8009c24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	e016      	b.n	8009c56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2220      	movs	r2, #32
 8009c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009c50:	2300      	movs	r3, #0
 8009c52:	e000      	b.n	8009c56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009c54:	2302      	movs	r3, #2
  }
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3718      	adds	r7, #24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	00100002 	.word	0x00100002
 8009c64:	ffff0000 	.word	0xffff0000

08009c68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b08c      	sub	sp, #48	@ 0x30
 8009c6c:	af02      	add	r7, sp, #8
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	4608      	mov	r0, r1
 8009c72:	4611      	mov	r1, r2
 8009c74:	461a      	mov	r2, r3
 8009c76:	4603      	mov	r3, r0
 8009c78:	817b      	strh	r3, [r7, #10]
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	813b      	strh	r3, [r7, #8]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009c82:	f7fe f915 	bl	8007eb0 <HAL_GetTick>
 8009c86:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	2b20      	cmp	r3, #32
 8009c92:	f040 8214 	bne.w	800a0be <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	2319      	movs	r3, #25
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	497b      	ldr	r1, [pc, #492]	@ (8009e8c <HAL_I2C_Mem_Read+0x224>)
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f000 fb91 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009cac:	2302      	movs	r3, #2
 8009cae:	e207      	b.n	800a0c0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d101      	bne.n	8009cbe <HAL_I2C_Mem_Read+0x56>
 8009cba:	2302      	movs	r3, #2
 8009cbc:	e200      	b.n	800a0c0 <HAL_I2C_Mem_Read+0x458>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f003 0301 	and.w	r3, r3, #1
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d007      	beq.n	8009ce4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f042 0201 	orr.w	r2, r2, #1
 8009ce2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009cf2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2222      	movs	r2, #34	@ 0x22
 8009cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2240      	movs	r2, #64	@ 0x40
 8009d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	4a5b      	ldr	r2, [pc, #364]	@ (8009e90 <HAL_I2C_Mem_Read+0x228>)
 8009d24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009d26:	88f8      	ldrh	r0, [r7, #6]
 8009d28:	893a      	ldrh	r2, [r7, #8]
 8009d2a:	8979      	ldrh	r1, [r7, #10]
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2e:	9301      	str	r3, [sp, #4]
 8009d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	4603      	mov	r3, r0
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	f000 fa5e 	bl	800a1f8 <I2C_RequestMemoryRead>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d001      	beq.n	8009d46 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	e1bc      	b.n	800a0c0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d113      	bne.n	8009d76 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d4e:	2300      	movs	r3, #0
 8009d50:	623b      	str	r3, [r7, #32]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	695b      	ldr	r3, [r3, #20]
 8009d58:	623b      	str	r3, [r7, #32]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	699b      	ldr	r3, [r3, #24]
 8009d60:	623b      	str	r3, [r7, #32]
 8009d62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	e190      	b.n	800a098 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d11b      	bne.n	8009db6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d8e:	2300      	movs	r3, #0
 8009d90:	61fb      	str	r3, [r7, #28]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	695b      	ldr	r3, [r3, #20]
 8009d98:	61fb      	str	r3, [r7, #28]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	699b      	ldr	r3, [r3, #24]
 8009da0:	61fb      	str	r3, [r7, #28]
 8009da2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	e170      	b.n	800a098 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d11b      	bne.n	8009df6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009dcc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ddc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009dde:	2300      	movs	r3, #0
 8009de0:	61bb      	str	r3, [r7, #24]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	695b      	ldr	r3, [r3, #20]
 8009de8:	61bb      	str	r3, [r7, #24]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	699b      	ldr	r3, [r3, #24]
 8009df0:	61bb      	str	r3, [r7, #24]
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	e150      	b.n	800a098 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009df6:	2300      	movs	r3, #0
 8009df8:	617b      	str	r3, [r7, #20]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	695b      	ldr	r3, [r3, #20]
 8009e00:	617b      	str	r3, [r7, #20]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	699b      	ldr	r3, [r3, #24]
 8009e08:	617b      	str	r3, [r7, #20]
 8009e0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009e0c:	e144      	b.n	800a098 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	f200 80f1 	bhi.w	8009ffa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d123      	bne.n	8009e68 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f000 fc79 	bl	800a71c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d001      	beq.n	8009e34 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e145      	b.n	800a0c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	691a      	ldr	r2, [r3, #16]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e3e:	b2d2      	uxtb	r2, r2
 8009e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e46:	1c5a      	adds	r2, r3, #1
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e50:	3b01      	subs	r3, #1
 8009e52:	b29a      	uxth	r2, r3
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009e66:	e117      	b.n	800a098 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d14e      	bne.n	8009f0e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e76:	2200      	movs	r2, #0
 8009e78:	4906      	ldr	r1, [pc, #24]	@ (8009e94 <HAL_I2C_Mem_Read+0x22c>)
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f000 faa4 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d008      	beq.n	8009e98 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	e11a      	b.n	800a0c0 <HAL_I2C_Mem_Read+0x458>
 8009e8a:	bf00      	nop
 8009e8c:	00100002 	.word	0x00100002
 8009e90:	ffff0000 	.word	0xffff0000
 8009e94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ea6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	691a      	ldr	r2, [r3, #16]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb2:	b2d2      	uxtb	r2, r2
 8009eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eba:	1c5a      	adds	r2, r3, #1
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	b29a      	uxth	r2, r3
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	691a      	ldr	r2, [r3, #16]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ee4:	b2d2      	uxtb	r2, r2
 8009ee6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eec:	1c5a      	adds	r2, r3, #1
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	b29a      	uxth	r2, r3
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	3b01      	subs	r3, #1
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009f0c:	e0c4      	b.n	800a098 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f10:	9300      	str	r3, [sp, #0]
 8009f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f14:	2200      	movs	r2, #0
 8009f16:	496c      	ldr	r1, [pc, #432]	@ (800a0c8 <HAL_I2C_Mem_Read+0x460>)
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f000 fa55 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d001      	beq.n	8009f28 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	e0cb      	b.n	800a0c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	691a      	ldr	r2, [r3, #16]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f42:	b2d2      	uxtb	r2, r2
 8009f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f4a:	1c5a      	adds	r2, r3, #1
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f54:	3b01      	subs	r3, #1
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	3b01      	subs	r3, #1
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f70:	2200      	movs	r2, #0
 8009f72:	4955      	ldr	r1, [pc, #340]	@ (800a0c8 <HAL_I2C_Mem_Read+0x460>)
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f000 fa27 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e09d      	b.n	800a0c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	691a      	ldr	r2, [r3, #16]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f9e:	b2d2      	uxtb	r2, r2
 8009fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fa6:	1c5a      	adds	r2, r3, #1
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	691a      	ldr	r2, [r3, #16]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd0:	b2d2      	uxtb	r2, r2
 8009fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd8:	1c5a      	adds	r2, r3, #1
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	b29a      	uxth	r2, r3
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009ff8:	e04e      	b.n	800a098 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ffc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f000 fb8c 	bl	800a71c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d001      	beq.n	800a00e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	e058      	b.n	800a0c0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	691a      	ldr	r2, [r3, #16]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a018:	b2d2      	uxtb	r2, r2
 800a01a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a020:	1c5a      	adds	r2, r3, #1
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a02a:	3b01      	subs	r3, #1
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a036:	b29b      	uxth	r3, r3
 800a038:	3b01      	subs	r3, #1
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	695b      	ldr	r3, [r3, #20]
 800a046:	f003 0304 	and.w	r3, r3, #4
 800a04a:	2b04      	cmp	r3, #4
 800a04c:	d124      	bne.n	800a098 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a052:	2b03      	cmp	r3, #3
 800a054:	d107      	bne.n	800a066 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a064:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	691a      	ldr	r2, [r3, #16]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a070:	b2d2      	uxtb	r2, r2
 800a072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a078:	1c5a      	adds	r2, r3, #1
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a082:	3b01      	subs	r3, #1
 800a084:	b29a      	uxth	r2, r3
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a08e:	b29b      	uxth	r3, r3
 800a090:	3b01      	subs	r3, #1
 800a092:	b29a      	uxth	r2, r3
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f47f aeb6 	bne.w	8009e0e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2220      	movs	r2, #32
 800a0a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	e000      	b.n	800a0c0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800a0be:	2302      	movs	r3, #2
  }
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3728      	adds	r7, #40	@ 0x28
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	00010004 	.word	0x00010004

0800a0cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b088      	sub	sp, #32
 800a0d0:	af02      	add	r7, sp, #8
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	4608      	mov	r0, r1
 800a0d6:	4611      	mov	r1, r2
 800a0d8:	461a      	mov	r2, r3
 800a0da:	4603      	mov	r3, r0
 800a0dc:	817b      	strh	r3, [r7, #10]
 800a0de:	460b      	mov	r3, r1
 800a0e0:	813b      	strh	r3, [r7, #8]
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a0f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f000 f960 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00d      	beq.n	800a12a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a11c:	d103      	bne.n	800a126 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a124:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a126:	2303      	movs	r3, #3
 800a128:	e05f      	b.n	800a1ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a12a:	897b      	ldrh	r3, [r7, #10]
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	461a      	mov	r2, r3
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a138:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13c:	6a3a      	ldr	r2, [r7, #32]
 800a13e:	492d      	ldr	r1, [pc, #180]	@ (800a1f4 <I2C_RequestMemoryWrite+0x128>)
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f000 f9bb 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d001      	beq.n	800a150 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	e04c      	b.n	800a1ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a150:	2300      	movs	r3, #0
 800a152:	617b      	str	r3, [r7, #20]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	617b      	str	r3, [r7, #20]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	617b      	str	r3, [r7, #20]
 800a164:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a168:	6a39      	ldr	r1, [r7, #32]
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 fa46 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00d      	beq.n	800a192 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a17a:	2b04      	cmp	r3, #4
 800a17c:	d107      	bne.n	800a18e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a18c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e02b      	b.n	800a1ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a192:	88fb      	ldrh	r3, [r7, #6]
 800a194:	2b01      	cmp	r3, #1
 800a196:	d105      	bne.n	800a1a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a198:	893b      	ldrh	r3, [r7, #8]
 800a19a:	b2da      	uxtb	r2, r3
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	611a      	str	r2, [r3, #16]
 800a1a2:	e021      	b.n	800a1e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1a4:	893b      	ldrh	r3, [r7, #8]
 800a1a6:	0a1b      	lsrs	r3, r3, #8
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1b4:	6a39      	ldr	r1, [r7, #32]
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 fa20 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00d      	beq.n	800a1de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1c6:	2b04      	cmp	r3, #4
 800a1c8:	d107      	bne.n	800a1da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e005      	b.n	800a1ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1de:	893b      	ldrh	r3, [r7, #8]
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3718      	adds	r7, #24
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	00010002 	.word	0x00010002

0800a1f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b088      	sub	sp, #32
 800a1fc:	af02      	add	r7, sp, #8
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	4608      	mov	r0, r1
 800a202:	4611      	mov	r1, r2
 800a204:	461a      	mov	r2, r3
 800a206:	4603      	mov	r3, r0
 800a208:	817b      	strh	r3, [r7, #10]
 800a20a:	460b      	mov	r3, r1
 800a20c:	813b      	strh	r3, [r7, #8]
 800a20e:	4613      	mov	r3, r2
 800a210:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a220:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a230:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	2200      	movs	r2, #0
 800a23a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f000 f8c2 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00d      	beq.n	800a266 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a258:	d103      	bne.n	800a262 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a260:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	e0aa      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a266:	897b      	ldrh	r3, [r7, #10]
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	461a      	mov	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a274:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a278:	6a3a      	ldr	r2, [r7, #32]
 800a27a:	4952      	ldr	r1, [pc, #328]	@ (800a3c4 <I2C_RequestMemoryRead+0x1cc>)
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f000 f91d 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	e097      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a28c:	2300      	movs	r3, #0
 800a28e:	617b      	str	r3, [r7, #20]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	695b      	ldr	r3, [r3, #20]
 800a296:	617b      	str	r3, [r7, #20]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	699b      	ldr	r3, [r3, #24]
 800a29e:	617b      	str	r3, [r7, #20]
 800a2a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2a4:	6a39      	ldr	r1, [r7, #32]
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f000 f9a8 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00d      	beq.n	800a2ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2b6:	2b04      	cmp	r3, #4
 800a2b8:	d107      	bne.n	800a2ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e076      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a2ce:	88fb      	ldrh	r3, [r7, #6]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d105      	bne.n	800a2e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2d4:	893b      	ldrh	r3, [r7, #8]
 800a2d6:	b2da      	uxtb	r2, r3
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	611a      	str	r2, [r3, #16]
 800a2de:	e021      	b.n	800a324 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a2e0:	893b      	ldrh	r3, [r7, #8]
 800a2e2:	0a1b      	lsrs	r3, r3, #8
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	b2da      	uxtb	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2f0:	6a39      	ldr	r1, [r7, #32]
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 f982 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00d      	beq.n	800a31a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a302:	2b04      	cmp	r3, #4
 800a304:	d107      	bne.n	800a316 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a314:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e050      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a31a:	893b      	ldrh	r3, [r7, #8]
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a326:	6a39      	ldr	r1, [r7, #32]
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f000 f967 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00d      	beq.n	800a350 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a338:	2b04      	cmp	r3, #4
 800a33a:	d107      	bne.n	800a34c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a34a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e035      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a35e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	6a3b      	ldr	r3, [r7, #32]
 800a366:	2200      	movs	r2, #0
 800a368:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f000 f82b 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00d      	beq.n	800a394 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a386:	d103      	bne.n	800a390 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a38e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a390:	2303      	movs	r3, #3
 800a392:	e013      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a394:	897b      	ldrh	r3, [r7, #10]
 800a396:	b2db      	uxtb	r3, r3
 800a398:	f043 0301 	orr.w	r3, r3, #1
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a6:	6a3a      	ldr	r2, [r7, #32]
 800a3a8:	4906      	ldr	r1, [pc, #24]	@ (800a3c4 <I2C_RequestMemoryRead+0x1cc>)
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f000 f886 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e000      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3718      	adds	r7, #24
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	00010002 	.word	0x00010002

0800a3c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	603b      	str	r3, [r7, #0]
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3d8:	e048      	b.n	800a46c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e0:	d044      	beq.n	800a46c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3e2:	f7fd fd65 	bl	8007eb0 <HAL_GetTick>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d302      	bcc.n	800a3f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d139      	bne.n	800a46c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	0c1b      	lsrs	r3, r3, #16
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d10d      	bne.n	800a41e <I2C_WaitOnFlagUntilTimeout+0x56>
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	695b      	ldr	r3, [r3, #20]
 800a408:	43da      	mvns	r2, r3
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	4013      	ands	r3, r2
 800a40e:	b29b      	uxth	r3, r3
 800a410:	2b00      	cmp	r3, #0
 800a412:	bf0c      	ite	eq
 800a414:	2301      	moveq	r3, #1
 800a416:	2300      	movne	r3, #0
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	461a      	mov	r2, r3
 800a41c:	e00c      	b.n	800a438 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	43da      	mvns	r2, r3
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	4013      	ands	r3, r2
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	bf0c      	ite	eq
 800a430:	2301      	moveq	r3, #1
 800a432:	2300      	movne	r3, #0
 800a434:	b2db      	uxtb	r3, r3
 800a436:	461a      	mov	r2, r3
 800a438:	79fb      	ldrb	r3, [r7, #7]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d116      	bne.n	800a46c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2220      	movs	r2, #32
 800a448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a458:	f043 0220 	orr.w	r2, r3, #32
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e023      	b.n	800a4b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	0c1b      	lsrs	r3, r3, #16
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b01      	cmp	r3, #1
 800a474:	d10d      	bne.n	800a492 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	695b      	ldr	r3, [r3, #20]
 800a47c:	43da      	mvns	r2, r3
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	4013      	ands	r3, r2
 800a482:	b29b      	uxth	r3, r3
 800a484:	2b00      	cmp	r3, #0
 800a486:	bf0c      	ite	eq
 800a488:	2301      	moveq	r3, #1
 800a48a:	2300      	movne	r3, #0
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	461a      	mov	r2, r3
 800a490:	e00c      	b.n	800a4ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	699b      	ldr	r3, [r3, #24]
 800a498:	43da      	mvns	r2, r3
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	4013      	ands	r3, r2
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	bf0c      	ite	eq
 800a4a4:	2301      	moveq	r3, #1
 800a4a6:	2300      	movne	r3, #0
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	79fb      	ldrb	r3, [r7, #7]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d093      	beq.n	800a3da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	607a      	str	r2, [r7, #4]
 800a4c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a4ca:	e071      	b.n	800a5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a4d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4da:	d123      	bne.n	800a524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a4f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2220      	movs	r2, #32
 800a500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a510:	f043 0204 	orr.w	r2, r3, #4
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	e067      	b.n	800a5f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52a:	d041      	beq.n	800a5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a52c:	f7fd fcc0 	bl	8007eb0 <HAL_GetTick>
 800a530:	4602      	mov	r2, r0
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d302      	bcc.n	800a542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d136      	bne.n	800a5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	0c1b      	lsrs	r3, r3, #16
 800a546:	b2db      	uxtb	r3, r3
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d10c      	bne.n	800a566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	695b      	ldr	r3, [r3, #20]
 800a552:	43da      	mvns	r2, r3
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	4013      	ands	r3, r2
 800a558:	b29b      	uxth	r3, r3
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	bf14      	ite	ne
 800a55e:	2301      	movne	r3, #1
 800a560:	2300      	moveq	r3, #0
 800a562:	b2db      	uxtb	r3, r3
 800a564:	e00b      	b.n	800a57e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	699b      	ldr	r3, [r3, #24]
 800a56c:	43da      	mvns	r2, r3
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	4013      	ands	r3, r2
 800a572:	b29b      	uxth	r3, r3
 800a574:	2b00      	cmp	r3, #0
 800a576:	bf14      	ite	ne
 800a578:	2301      	movne	r3, #1
 800a57a:	2300      	moveq	r3, #0
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d016      	beq.n	800a5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2200      	movs	r2, #0
 800a586:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2220      	movs	r2, #32
 800a58c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a59c:	f043 0220 	orr.w	r2, r3, #32
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e021      	b.n	800a5f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	0c1b      	lsrs	r3, r3, #16
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d10c      	bne.n	800a5d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	695b      	ldr	r3, [r3, #20]
 800a5c0:	43da      	mvns	r2, r3
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	bf14      	ite	ne
 800a5cc:	2301      	movne	r3, #1
 800a5ce:	2300      	moveq	r3, #0
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	e00b      	b.n	800a5ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	43da      	mvns	r2, r3
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	4013      	ands	r3, r2
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	bf14      	ite	ne
 800a5e6:	2301      	movne	r3, #1
 800a5e8:	2300      	moveq	r3, #0
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f47f af6d 	bne.w	800a4cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a608:	e034      	b.n	800a674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f000 f8e3 	bl	800a7d6 <I2C_IsAcknowledgeFailed>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d001      	beq.n	800a61a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e034      	b.n	800a684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a620:	d028      	beq.n	800a674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a622:	f7fd fc45 	bl	8007eb0 <HAL_GetTick>
 800a626:	4602      	mov	r2, r0
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d302      	bcc.n	800a638 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d11d      	bne.n	800a674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a642:	2b80      	cmp	r3, #128	@ 0x80
 800a644:	d016      	beq.n	800a674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2200      	movs	r2, #0
 800a64a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2220      	movs	r2, #32
 800a650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a660:	f043 0220 	orr.w	r2, r3, #32
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	e007      	b.n	800a684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	695b      	ldr	r3, [r3, #20]
 800a67a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a67e:	2b80      	cmp	r3, #128	@ 0x80
 800a680:	d1c3      	bne.n	800a60a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a682:	2300      	movs	r3, #0
}
 800a684:	4618      	mov	r0, r3
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a698:	e034      	b.n	800a704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f000 f89b 	bl	800a7d6 <I2C_IsAcknowledgeFailed>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e034      	b.n	800a714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b0:	d028      	beq.n	800a704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6b2:	f7fd fbfd 	bl	8007eb0 <HAL_GetTick>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	1ad3      	subs	r3, r2, r3
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d302      	bcc.n	800a6c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d11d      	bne.n	800a704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	f003 0304 	and.w	r3, r3, #4
 800a6d2:	2b04      	cmp	r3, #4
 800a6d4:	d016      	beq.n	800a704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2220      	movs	r2, #32
 800a6e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6f0:	f043 0220 	orr.w	r2, r3, #32
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	e007      	b.n	800a714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	695b      	ldr	r3, [r3, #20]
 800a70a:	f003 0304 	and.w	r3, r3, #4
 800a70e:	2b04      	cmp	r3, #4
 800a710:	d1c3      	bne.n	800a69a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a712:	2300      	movs	r3, #0
}
 800a714:	4618      	mov	r0, r3
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a728:	e049      	b.n	800a7be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	695b      	ldr	r3, [r3, #20]
 800a730:	f003 0310 	and.w	r3, r3, #16
 800a734:	2b10      	cmp	r3, #16
 800a736:	d119      	bne.n	800a76c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f06f 0210 	mvn.w	r2, #16
 800a740:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2220      	movs	r2, #32
 800a74c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	e030      	b.n	800a7ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a76c:	f7fd fba0 	bl	8007eb0 <HAL_GetTick>
 800a770:	4602      	mov	r2, r0
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d302      	bcc.n	800a782 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d11d      	bne.n	800a7be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	695b      	ldr	r3, [r3, #20]
 800a788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a78c:	2b40      	cmp	r3, #64	@ 0x40
 800a78e:	d016      	beq.n	800a7be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2220      	movs	r2, #32
 800a79a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7aa:	f043 0220 	orr.w	r2, r3, #32
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	e007      	b.n	800a7ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	695b      	ldr	r3, [r3, #20]
 800a7c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7c8:	2b40      	cmp	r3, #64	@ 0x40
 800a7ca:	d1ae      	bne.n	800a72a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a7d6:	b480      	push	{r7}
 800a7d8:	b083      	sub	sp, #12
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7ec:	d11b      	bne.n	800a826 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a7f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2220      	movs	r2, #32
 800a802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a812:	f043 0204 	orr.w	r2, r3, #4
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	e000      	b.n	800a828 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d101      	bne.n	800a848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a844:	2301      	movs	r3, #1
 800a846:	e0cc      	b.n	800a9e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a848:	4b68      	ldr	r3, [pc, #416]	@ (800a9ec <HAL_RCC_ClockConfig+0x1b8>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f003 030f 	and.w	r3, r3, #15
 800a850:	683a      	ldr	r2, [r7, #0]
 800a852:	429a      	cmp	r2, r3
 800a854:	d90c      	bls.n	800a870 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a856:	4b65      	ldr	r3, [pc, #404]	@ (800a9ec <HAL_RCC_ClockConfig+0x1b8>)
 800a858:	683a      	ldr	r2, [r7, #0]
 800a85a:	b2d2      	uxtb	r2, r2
 800a85c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a85e:	4b63      	ldr	r3, [pc, #396]	@ (800a9ec <HAL_RCC_ClockConfig+0x1b8>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 030f 	and.w	r3, r3, #15
 800a866:	683a      	ldr	r2, [r7, #0]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d001      	beq.n	800a870 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	e0b8      	b.n	800a9e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 0302 	and.w	r3, r3, #2
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d020      	beq.n	800a8be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f003 0304 	and.w	r3, r3, #4
 800a884:	2b00      	cmp	r3, #0
 800a886:	d005      	beq.n	800a894 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a888:	4b59      	ldr	r3, [pc, #356]	@ (800a9f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	4a58      	ldr	r2, [pc, #352]	@ (800a9f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a88e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a892:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f003 0308 	and.w	r3, r3, #8
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d005      	beq.n	800a8ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a8a0:	4b53      	ldr	r3, [pc, #332]	@ (800a9f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	4a52      	ldr	r2, [pc, #328]	@ (800a9f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a8a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a8aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8ac:	4b50      	ldr	r3, [pc, #320]	@ (800a9f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	689b      	ldr	r3, [r3, #8]
 800a8b8:	494d      	ldr	r1, [pc, #308]	@ (800a9f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 0301 	and.w	r3, r3, #1
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d044      	beq.n	800a954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d107      	bne.n	800a8e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8d2:	4b47      	ldr	r3, [pc, #284]	@ (800a9f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d119      	bne.n	800a912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e07f      	b.n	800a9e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	2b02      	cmp	r3, #2
 800a8e8:	d003      	beq.n	800a8f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a8ee:	2b03      	cmp	r3, #3
 800a8f0:	d107      	bne.n	800a902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a8f2:	4b3f      	ldr	r3, [pc, #252]	@ (800a9f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d109      	bne.n	800a912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	e06f      	b.n	800a9e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a902:	4b3b      	ldr	r3, [pc, #236]	@ (800a9f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f003 0302 	and.w	r3, r3, #2
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d101      	bne.n	800a912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	e067      	b.n	800a9e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a912:	4b37      	ldr	r3, [pc, #220]	@ (800a9f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	f023 0203 	bic.w	r2, r3, #3
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	4934      	ldr	r1, [pc, #208]	@ (800a9f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a920:	4313      	orrs	r3, r2
 800a922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a924:	f7fd fac4 	bl	8007eb0 <HAL_GetTick>
 800a928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a92a:	e00a      	b.n	800a942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a92c:	f7fd fac0 	bl	8007eb0 <HAL_GetTick>
 800a930:	4602      	mov	r2, r0
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	1ad3      	subs	r3, r2, r3
 800a936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d901      	bls.n	800a942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a93e:	2303      	movs	r3, #3
 800a940:	e04f      	b.n	800a9e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a942:	4b2b      	ldr	r3, [pc, #172]	@ (800a9f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	f003 020c 	and.w	r2, r3, #12
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	429a      	cmp	r2, r3
 800a952:	d1eb      	bne.n	800a92c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a954:	4b25      	ldr	r3, [pc, #148]	@ (800a9ec <HAL_RCC_ClockConfig+0x1b8>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 030f 	and.w	r3, r3, #15
 800a95c:	683a      	ldr	r2, [r7, #0]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d20c      	bcs.n	800a97c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a962:	4b22      	ldr	r3, [pc, #136]	@ (800a9ec <HAL_RCC_ClockConfig+0x1b8>)
 800a964:	683a      	ldr	r2, [r7, #0]
 800a966:	b2d2      	uxtb	r2, r2
 800a968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a96a:	4b20      	ldr	r3, [pc, #128]	@ (800a9ec <HAL_RCC_ClockConfig+0x1b8>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f003 030f 	and.w	r3, r3, #15
 800a972:	683a      	ldr	r2, [r7, #0]
 800a974:	429a      	cmp	r2, r3
 800a976:	d001      	beq.n	800a97c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	e032      	b.n	800a9e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 0304 	and.w	r3, r3, #4
 800a984:	2b00      	cmp	r3, #0
 800a986:	d008      	beq.n	800a99a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a988:	4b19      	ldr	r3, [pc, #100]	@ (800a9f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	4916      	ldr	r1, [pc, #88]	@ (800a9f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a996:	4313      	orrs	r3, r2
 800a998:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f003 0308 	and.w	r3, r3, #8
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d009      	beq.n	800a9ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a9a6:	4b12      	ldr	r3, [pc, #72]	@ (800a9f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	691b      	ldr	r3, [r3, #16]
 800a9b2:	00db      	lsls	r3, r3, #3
 800a9b4:	490e      	ldr	r1, [pc, #56]	@ (800a9f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a9ba:	f000 f855 	bl	800aa68 <HAL_RCC_GetSysClockFreq>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a9f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	091b      	lsrs	r3, r3, #4
 800a9c6:	f003 030f 	and.w	r3, r3, #15
 800a9ca:	490a      	ldr	r1, [pc, #40]	@ (800a9f4 <HAL_RCC_ClockConfig+0x1c0>)
 800a9cc:	5ccb      	ldrb	r3, [r1, r3]
 800a9ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d2:	4a09      	ldr	r2, [pc, #36]	@ (800a9f8 <HAL_RCC_ClockConfig+0x1c4>)
 800a9d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a9d6:	4b09      	ldr	r3, [pc, #36]	@ (800a9fc <HAL_RCC_ClockConfig+0x1c8>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fd fa24 	bl	8007e28 <HAL_InitTick>

  return HAL_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	40023c00 	.word	0x40023c00
 800a9f0:	40023800 	.word	0x40023800
 800a9f4:	080123c0 	.word	0x080123c0
 800a9f8:	20000040 	.word	0x20000040
 800a9fc:	20000044 	.word	0x20000044

0800aa00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa00:	b480      	push	{r7}
 800aa02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aa04:	4b03      	ldr	r3, [pc, #12]	@ (800aa14 <HAL_RCC_GetHCLKFreq+0x14>)
 800aa06:	681b      	ldr	r3, [r3, #0]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	20000040 	.word	0x20000040

0800aa18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aa1c:	f7ff fff0 	bl	800aa00 <HAL_RCC_GetHCLKFreq>
 800aa20:	4602      	mov	r2, r0
 800aa22:	4b05      	ldr	r3, [pc, #20]	@ (800aa38 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	0a9b      	lsrs	r3, r3, #10
 800aa28:	f003 0307 	and.w	r3, r3, #7
 800aa2c:	4903      	ldr	r1, [pc, #12]	@ (800aa3c <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa2e:	5ccb      	ldrb	r3, [r1, r3]
 800aa30:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	40023800 	.word	0x40023800
 800aa3c:	080123d0 	.word	0x080123d0

0800aa40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aa44:	f7ff ffdc 	bl	800aa00 <HAL_RCC_GetHCLKFreq>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	4b05      	ldr	r3, [pc, #20]	@ (800aa60 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	0b5b      	lsrs	r3, r3, #13
 800aa50:	f003 0307 	and.w	r3, r3, #7
 800aa54:	4903      	ldr	r1, [pc, #12]	@ (800aa64 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa56:	5ccb      	ldrb	r3, [r1, r3]
 800aa58:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	40023800 	.word	0x40023800
 800aa64:	080123d0 	.word	0x080123d0

0800aa68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa6c:	b0ae      	sub	sp, #184	@ 0xb8
 800aa6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800aa70:	2300      	movs	r3, #0
 800aa72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800aa76:	2300      	movs	r3, #0
 800aa78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800aa82:	2300      	movs	r3, #0
 800aa84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aa8e:	4bcb      	ldr	r3, [pc, #812]	@ (800adbc <HAL_RCC_GetSysClockFreq+0x354>)
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	f003 030c 	and.w	r3, r3, #12
 800aa96:	2b0c      	cmp	r3, #12
 800aa98:	f200 8206 	bhi.w	800aea8 <HAL_RCC_GetSysClockFreq+0x440>
 800aa9c:	a201      	add	r2, pc, #4	@ (adr r2, 800aaa4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800aa9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa2:	bf00      	nop
 800aaa4:	0800aad9 	.word	0x0800aad9
 800aaa8:	0800aea9 	.word	0x0800aea9
 800aaac:	0800aea9 	.word	0x0800aea9
 800aab0:	0800aea9 	.word	0x0800aea9
 800aab4:	0800aae1 	.word	0x0800aae1
 800aab8:	0800aea9 	.word	0x0800aea9
 800aabc:	0800aea9 	.word	0x0800aea9
 800aac0:	0800aea9 	.word	0x0800aea9
 800aac4:	0800aae9 	.word	0x0800aae9
 800aac8:	0800aea9 	.word	0x0800aea9
 800aacc:	0800aea9 	.word	0x0800aea9
 800aad0:	0800aea9 	.word	0x0800aea9
 800aad4:	0800acd9 	.word	0x0800acd9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800aad8:	4bb9      	ldr	r3, [pc, #740]	@ (800adc0 <HAL_RCC_GetSysClockFreq+0x358>)
 800aada:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800aade:	e1e7      	b.n	800aeb0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800aae0:	4bb8      	ldr	r3, [pc, #736]	@ (800adc4 <HAL_RCC_GetSysClockFreq+0x35c>)
 800aae2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800aae6:	e1e3      	b.n	800aeb0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aae8:	4bb4      	ldr	r3, [pc, #720]	@ (800adbc <HAL_RCC_GetSysClockFreq+0x354>)
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aaf0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aaf4:	4bb1      	ldr	r3, [pc, #708]	@ (800adbc <HAL_RCC_GetSysClockFreq+0x354>)
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d071      	beq.n	800abe4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab00:	4bae      	ldr	r3, [pc, #696]	@ (800adbc <HAL_RCC_GetSysClockFreq+0x354>)
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	099b      	lsrs	r3, r3, #6
 800ab06:	2200      	movs	r2, #0
 800ab08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ab0c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800ab10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ab14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ab22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ab26:	4622      	mov	r2, r4
 800ab28:	462b      	mov	r3, r5
 800ab2a:	f04f 0000 	mov.w	r0, #0
 800ab2e:	f04f 0100 	mov.w	r1, #0
 800ab32:	0159      	lsls	r1, r3, #5
 800ab34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ab38:	0150      	lsls	r0, r2, #5
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	4621      	mov	r1, r4
 800ab40:	1a51      	subs	r1, r2, r1
 800ab42:	6439      	str	r1, [r7, #64]	@ 0x40
 800ab44:	4629      	mov	r1, r5
 800ab46:	eb63 0301 	sbc.w	r3, r3, r1
 800ab4a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab4c:	f04f 0200 	mov.w	r2, #0
 800ab50:	f04f 0300 	mov.w	r3, #0
 800ab54:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800ab58:	4649      	mov	r1, r9
 800ab5a:	018b      	lsls	r3, r1, #6
 800ab5c:	4641      	mov	r1, r8
 800ab5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ab62:	4641      	mov	r1, r8
 800ab64:	018a      	lsls	r2, r1, #6
 800ab66:	4641      	mov	r1, r8
 800ab68:	1a51      	subs	r1, r2, r1
 800ab6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ab6c:	4649      	mov	r1, r9
 800ab6e:	eb63 0301 	sbc.w	r3, r3, r1
 800ab72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab74:	f04f 0200 	mov.w	r2, #0
 800ab78:	f04f 0300 	mov.w	r3, #0
 800ab7c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800ab80:	4649      	mov	r1, r9
 800ab82:	00cb      	lsls	r3, r1, #3
 800ab84:	4641      	mov	r1, r8
 800ab86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab8a:	4641      	mov	r1, r8
 800ab8c:	00ca      	lsls	r2, r1, #3
 800ab8e:	4610      	mov	r0, r2
 800ab90:	4619      	mov	r1, r3
 800ab92:	4603      	mov	r3, r0
 800ab94:	4622      	mov	r2, r4
 800ab96:	189b      	adds	r3, r3, r2
 800ab98:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab9a:	462b      	mov	r3, r5
 800ab9c:	460a      	mov	r2, r1
 800ab9e:	eb42 0303 	adc.w	r3, r2, r3
 800aba2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aba4:	f04f 0200 	mov.w	r2, #0
 800aba8:	f04f 0300 	mov.w	r3, #0
 800abac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800abb0:	4629      	mov	r1, r5
 800abb2:	024b      	lsls	r3, r1, #9
 800abb4:	4621      	mov	r1, r4
 800abb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800abba:	4621      	mov	r1, r4
 800abbc:	024a      	lsls	r2, r1, #9
 800abbe:	4610      	mov	r0, r2
 800abc0:	4619      	mov	r1, r3
 800abc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abc6:	2200      	movs	r2, #0
 800abc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800abcc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800abd0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800abd4:	f7f6 f9b6 	bl	8000f44 <__aeabi_uldivmod>
 800abd8:	4602      	mov	r2, r0
 800abda:	460b      	mov	r3, r1
 800abdc:	4613      	mov	r3, r2
 800abde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800abe2:	e067      	b.n	800acb4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800abe4:	4b75      	ldr	r3, [pc, #468]	@ (800adbc <HAL_RCC_GetSysClockFreq+0x354>)
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	099b      	lsrs	r3, r3, #6
 800abea:	2200      	movs	r2, #0
 800abec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800abf0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800abf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800abf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800abfe:	2300      	movs	r3, #0
 800ac00:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ac02:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800ac06:	4622      	mov	r2, r4
 800ac08:	462b      	mov	r3, r5
 800ac0a:	f04f 0000 	mov.w	r0, #0
 800ac0e:	f04f 0100 	mov.w	r1, #0
 800ac12:	0159      	lsls	r1, r3, #5
 800ac14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ac18:	0150      	lsls	r0, r2, #5
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	4621      	mov	r1, r4
 800ac20:	1a51      	subs	r1, r2, r1
 800ac22:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ac24:	4629      	mov	r1, r5
 800ac26:	eb63 0301 	sbc.w	r3, r3, r1
 800ac2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac2c:	f04f 0200 	mov.w	r2, #0
 800ac30:	f04f 0300 	mov.w	r3, #0
 800ac34:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800ac38:	4649      	mov	r1, r9
 800ac3a:	018b      	lsls	r3, r1, #6
 800ac3c:	4641      	mov	r1, r8
 800ac3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ac42:	4641      	mov	r1, r8
 800ac44:	018a      	lsls	r2, r1, #6
 800ac46:	4641      	mov	r1, r8
 800ac48:	ebb2 0a01 	subs.w	sl, r2, r1
 800ac4c:	4649      	mov	r1, r9
 800ac4e:	eb63 0b01 	sbc.w	fp, r3, r1
 800ac52:	f04f 0200 	mov.w	r2, #0
 800ac56:	f04f 0300 	mov.w	r3, #0
 800ac5a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ac5e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ac62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac66:	4692      	mov	sl, r2
 800ac68:	469b      	mov	fp, r3
 800ac6a:	4623      	mov	r3, r4
 800ac6c:	eb1a 0303 	adds.w	r3, sl, r3
 800ac70:	623b      	str	r3, [r7, #32]
 800ac72:	462b      	mov	r3, r5
 800ac74:	eb4b 0303 	adc.w	r3, fp, r3
 800ac78:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac7a:	f04f 0200 	mov.w	r2, #0
 800ac7e:	f04f 0300 	mov.w	r3, #0
 800ac82:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800ac86:	4629      	mov	r1, r5
 800ac88:	028b      	lsls	r3, r1, #10
 800ac8a:	4621      	mov	r1, r4
 800ac8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ac90:	4621      	mov	r1, r4
 800ac92:	028a      	lsls	r2, r1, #10
 800ac94:	4610      	mov	r0, r2
 800ac96:	4619      	mov	r1, r3
 800ac98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	673b      	str	r3, [r7, #112]	@ 0x70
 800aca0:	677a      	str	r2, [r7, #116]	@ 0x74
 800aca2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800aca6:	f7f6 f94d 	bl	8000f44 <__aeabi_uldivmod>
 800acaa:	4602      	mov	r2, r0
 800acac:	460b      	mov	r3, r1
 800acae:	4613      	mov	r3, r2
 800acb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800acb4:	4b41      	ldr	r3, [pc, #260]	@ (800adbc <HAL_RCC_GetSysClockFreq+0x354>)
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	0c1b      	lsrs	r3, r3, #16
 800acba:	f003 0303 	and.w	r3, r3, #3
 800acbe:	3301      	adds	r3, #1
 800acc0:	005b      	lsls	r3, r3, #1
 800acc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800acc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800acca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800acce:	fbb2 f3f3 	udiv	r3, r2, r3
 800acd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800acd6:	e0eb      	b.n	800aeb0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800acd8:	4b38      	ldr	r3, [pc, #224]	@ (800adbc <HAL_RCC_GetSysClockFreq+0x354>)
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ace0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ace4:	4b35      	ldr	r3, [pc, #212]	@ (800adbc <HAL_RCC_GetSysClockFreq+0x354>)
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d06b      	beq.n	800adc8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800acf0:	4b32      	ldr	r3, [pc, #200]	@ (800adbc <HAL_RCC_GetSysClockFreq+0x354>)
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	099b      	lsrs	r3, r3, #6
 800acf6:	2200      	movs	r2, #0
 800acf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800acfa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800acfc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800acfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad02:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad04:	2300      	movs	r3, #0
 800ad06:	667b      	str	r3, [r7, #100]	@ 0x64
 800ad08:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800ad0c:	4622      	mov	r2, r4
 800ad0e:	462b      	mov	r3, r5
 800ad10:	f04f 0000 	mov.w	r0, #0
 800ad14:	f04f 0100 	mov.w	r1, #0
 800ad18:	0159      	lsls	r1, r3, #5
 800ad1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ad1e:	0150      	lsls	r0, r2, #5
 800ad20:	4602      	mov	r2, r0
 800ad22:	460b      	mov	r3, r1
 800ad24:	4621      	mov	r1, r4
 800ad26:	1a51      	subs	r1, r2, r1
 800ad28:	61b9      	str	r1, [r7, #24]
 800ad2a:	4629      	mov	r1, r5
 800ad2c:	eb63 0301 	sbc.w	r3, r3, r1
 800ad30:	61fb      	str	r3, [r7, #28]
 800ad32:	f04f 0200 	mov.w	r2, #0
 800ad36:	f04f 0300 	mov.w	r3, #0
 800ad3a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800ad3e:	4659      	mov	r1, fp
 800ad40:	018b      	lsls	r3, r1, #6
 800ad42:	4651      	mov	r1, sl
 800ad44:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ad48:	4651      	mov	r1, sl
 800ad4a:	018a      	lsls	r2, r1, #6
 800ad4c:	4651      	mov	r1, sl
 800ad4e:	ebb2 0801 	subs.w	r8, r2, r1
 800ad52:	4659      	mov	r1, fp
 800ad54:	eb63 0901 	sbc.w	r9, r3, r1
 800ad58:	f04f 0200 	mov.w	r2, #0
 800ad5c:	f04f 0300 	mov.w	r3, #0
 800ad60:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ad64:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ad68:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ad6c:	4690      	mov	r8, r2
 800ad6e:	4699      	mov	r9, r3
 800ad70:	4623      	mov	r3, r4
 800ad72:	eb18 0303 	adds.w	r3, r8, r3
 800ad76:	613b      	str	r3, [r7, #16]
 800ad78:	462b      	mov	r3, r5
 800ad7a:	eb49 0303 	adc.w	r3, r9, r3
 800ad7e:	617b      	str	r3, [r7, #20]
 800ad80:	f04f 0200 	mov.w	r2, #0
 800ad84:	f04f 0300 	mov.w	r3, #0
 800ad88:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	024b      	lsls	r3, r1, #9
 800ad90:	4621      	mov	r1, r4
 800ad92:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800ad96:	4621      	mov	r1, r4
 800ad98:	024a      	lsls	r2, r1, #9
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ada2:	2200      	movs	r2, #0
 800ada4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ada6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800ada8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800adac:	f7f6 f8ca 	bl	8000f44 <__aeabi_uldivmod>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4613      	mov	r3, r2
 800adb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800adba:	e065      	b.n	800ae88 <HAL_RCC_GetSysClockFreq+0x420>
 800adbc:	40023800 	.word	0x40023800
 800adc0:	00f42400 	.word	0x00f42400
 800adc4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800adc8:	4b3d      	ldr	r3, [pc, #244]	@ (800aec0 <HAL_RCC_GetSysClockFreq+0x458>)
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	099b      	lsrs	r3, r3, #6
 800adce:	2200      	movs	r2, #0
 800add0:	4618      	mov	r0, r3
 800add2:	4611      	mov	r1, r2
 800add4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800add8:	653b      	str	r3, [r7, #80]	@ 0x50
 800adda:	2300      	movs	r3, #0
 800addc:	657b      	str	r3, [r7, #84]	@ 0x54
 800adde:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800ade2:	4642      	mov	r2, r8
 800ade4:	464b      	mov	r3, r9
 800ade6:	f04f 0000 	mov.w	r0, #0
 800adea:	f04f 0100 	mov.w	r1, #0
 800adee:	0159      	lsls	r1, r3, #5
 800adf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800adf4:	0150      	lsls	r0, r2, #5
 800adf6:	4602      	mov	r2, r0
 800adf8:	460b      	mov	r3, r1
 800adfa:	4641      	mov	r1, r8
 800adfc:	1a51      	subs	r1, r2, r1
 800adfe:	60b9      	str	r1, [r7, #8]
 800ae00:	4649      	mov	r1, r9
 800ae02:	eb63 0301 	sbc.w	r3, r3, r1
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	f04f 0200 	mov.w	r2, #0
 800ae0c:	f04f 0300 	mov.w	r3, #0
 800ae10:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800ae14:	4659      	mov	r1, fp
 800ae16:	018b      	lsls	r3, r1, #6
 800ae18:	4651      	mov	r1, sl
 800ae1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ae1e:	4651      	mov	r1, sl
 800ae20:	018a      	lsls	r2, r1, #6
 800ae22:	4651      	mov	r1, sl
 800ae24:	1a54      	subs	r4, r2, r1
 800ae26:	4659      	mov	r1, fp
 800ae28:	eb63 0501 	sbc.w	r5, r3, r1
 800ae2c:	f04f 0200 	mov.w	r2, #0
 800ae30:	f04f 0300 	mov.w	r3, #0
 800ae34:	00eb      	lsls	r3, r5, #3
 800ae36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ae3a:	00e2      	lsls	r2, r4, #3
 800ae3c:	4614      	mov	r4, r2
 800ae3e:	461d      	mov	r5, r3
 800ae40:	4643      	mov	r3, r8
 800ae42:	18e3      	adds	r3, r4, r3
 800ae44:	603b      	str	r3, [r7, #0]
 800ae46:	464b      	mov	r3, r9
 800ae48:	eb45 0303 	adc.w	r3, r5, r3
 800ae4c:	607b      	str	r3, [r7, #4]
 800ae4e:	f04f 0200 	mov.w	r2, #0
 800ae52:	f04f 0300 	mov.w	r3, #0
 800ae56:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ae5a:	4629      	mov	r1, r5
 800ae5c:	028b      	lsls	r3, r1, #10
 800ae5e:	4621      	mov	r1, r4
 800ae60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ae64:	4621      	mov	r1, r4
 800ae66:	028a      	lsls	r2, r1, #10
 800ae68:	4610      	mov	r0, r2
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae70:	2200      	movs	r2, #0
 800ae72:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae74:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ae76:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ae7a:	f7f6 f863 	bl	8000f44 <__aeabi_uldivmod>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	460b      	mov	r3, r1
 800ae82:	4613      	mov	r3, r2
 800ae84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800ae88:	4b0d      	ldr	r3, [pc, #52]	@ (800aec0 <HAL_RCC_GetSysClockFreq+0x458>)
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	0f1b      	lsrs	r3, r3, #28
 800ae8e:	f003 0307 	and.w	r3, r3, #7
 800ae92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800ae96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ae9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ae9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aea2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800aea6:	e003      	b.n	800aeb0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aea8:	4b06      	ldr	r3, [pc, #24]	@ (800aec4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800aeaa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800aeae:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aeb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	37b8      	adds	r7, #184	@ 0xb8
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aebe:	bf00      	nop
 800aec0:	40023800 	.word	0x40023800
 800aec4:	00f42400 	.word	0x00f42400

0800aec8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d101      	bne.n	800aeda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aed6:	2301      	movs	r3, #1
 800aed8:	e28d      	b.n	800b3f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f003 0301 	and.w	r3, r3, #1
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	f000 8083 	beq.w	800afee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800aee8:	4b94      	ldr	r3, [pc, #592]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	f003 030c 	and.w	r3, r3, #12
 800aef0:	2b04      	cmp	r3, #4
 800aef2:	d019      	beq.n	800af28 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800aef4:	4b91      	ldr	r3, [pc, #580]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	f003 030c 	and.w	r3, r3, #12
        || \
 800aefc:	2b08      	cmp	r3, #8
 800aefe:	d106      	bne.n	800af0e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800af00:	4b8e      	ldr	r3, [pc, #568]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800af08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af0c:	d00c      	beq.n	800af28 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af0e:	4b8b      	ldr	r3, [pc, #556]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800af16:	2b0c      	cmp	r3, #12
 800af18:	d112      	bne.n	800af40 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af1a:	4b88      	ldr	r3, [pc, #544]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800af22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af26:	d10b      	bne.n	800af40 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af28:	4b84      	ldr	r3, [pc, #528]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af30:	2b00      	cmp	r3, #0
 800af32:	d05b      	beq.n	800afec <HAL_RCC_OscConfig+0x124>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d157      	bne.n	800afec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	e25a      	b.n	800b3f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af48:	d106      	bne.n	800af58 <HAL_RCC_OscConfig+0x90>
 800af4a:	4b7c      	ldr	r3, [pc, #496]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a7b      	ldr	r2, [pc, #492]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800af50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af54:	6013      	str	r3, [r2, #0]
 800af56:	e01d      	b.n	800af94 <HAL_RCC_OscConfig+0xcc>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800af60:	d10c      	bne.n	800af7c <HAL_RCC_OscConfig+0xb4>
 800af62:	4b76      	ldr	r3, [pc, #472]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a75      	ldr	r2, [pc, #468]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800af68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800af6c:	6013      	str	r3, [r2, #0]
 800af6e:	4b73      	ldr	r3, [pc, #460]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a72      	ldr	r2, [pc, #456]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800af74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af78:	6013      	str	r3, [r2, #0]
 800af7a:	e00b      	b.n	800af94 <HAL_RCC_OscConfig+0xcc>
 800af7c:	4b6f      	ldr	r3, [pc, #444]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a6e      	ldr	r2, [pc, #440]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800af82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af86:	6013      	str	r3, [r2, #0]
 800af88:	4b6c      	ldr	r3, [pc, #432]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a6b      	ldr	r2, [pc, #428]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800af8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800af92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d013      	beq.n	800afc4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af9c:	f7fc ff88 	bl	8007eb0 <HAL_GetTick>
 800afa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afa2:	e008      	b.n	800afb6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800afa4:	f7fc ff84 	bl	8007eb0 <HAL_GetTick>
 800afa8:	4602      	mov	r2, r0
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	2b64      	cmp	r3, #100	@ 0x64
 800afb0:	d901      	bls.n	800afb6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e21f      	b.n	800b3f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afb6:	4b61      	ldr	r3, [pc, #388]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d0f0      	beq.n	800afa4 <HAL_RCC_OscConfig+0xdc>
 800afc2:	e014      	b.n	800afee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afc4:	f7fc ff74 	bl	8007eb0 <HAL_GetTick>
 800afc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800afca:	e008      	b.n	800afde <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800afcc:	f7fc ff70 	bl	8007eb0 <HAL_GetTick>
 800afd0:	4602      	mov	r2, r0
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	1ad3      	subs	r3, r2, r3
 800afd6:	2b64      	cmp	r3, #100	@ 0x64
 800afd8:	d901      	bls.n	800afde <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800afda:	2303      	movs	r3, #3
 800afdc:	e20b      	b.n	800b3f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800afde:	4b57      	ldr	r3, [pc, #348]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1f0      	bne.n	800afcc <HAL_RCC_OscConfig+0x104>
 800afea:	e000      	b.n	800afee <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f003 0302 	and.w	r3, r3, #2
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d06f      	beq.n	800b0da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800affa:	4b50      	ldr	r3, [pc, #320]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	f003 030c 	and.w	r3, r3, #12
 800b002:	2b00      	cmp	r3, #0
 800b004:	d017      	beq.n	800b036 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800b006:	4b4d      	ldr	r3, [pc, #308]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	f003 030c 	and.w	r3, r3, #12
        || \
 800b00e:	2b08      	cmp	r3, #8
 800b010:	d105      	bne.n	800b01e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800b012:	4b4a      	ldr	r3, [pc, #296]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00b      	beq.n	800b036 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b01e:	4b47      	ldr	r3, [pc, #284]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800b026:	2b0c      	cmp	r3, #12
 800b028:	d11c      	bne.n	800b064 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b02a:	4b44      	ldr	r3, [pc, #272]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b032:	2b00      	cmp	r3, #0
 800b034:	d116      	bne.n	800b064 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b036:	4b41      	ldr	r3, [pc, #260]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f003 0302 	and.w	r3, r3, #2
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d005      	beq.n	800b04e <HAL_RCC_OscConfig+0x186>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	2b01      	cmp	r3, #1
 800b048:	d001      	beq.n	800b04e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800b04a:	2301      	movs	r3, #1
 800b04c:	e1d3      	b.n	800b3f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b04e:	4b3b      	ldr	r3, [pc, #236]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	00db      	lsls	r3, r3, #3
 800b05c:	4937      	ldr	r1, [pc, #220]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800b05e:	4313      	orrs	r3, r2
 800b060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b062:	e03a      	b.n	800b0da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d020      	beq.n	800b0ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b06c:	4b34      	ldr	r3, [pc, #208]	@ (800b140 <HAL_RCC_OscConfig+0x278>)
 800b06e:	2201      	movs	r2, #1
 800b070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b072:	f7fc ff1d 	bl	8007eb0 <HAL_GetTick>
 800b076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b078:	e008      	b.n	800b08c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b07a:	f7fc ff19 	bl	8007eb0 <HAL_GetTick>
 800b07e:	4602      	mov	r2, r0
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	1ad3      	subs	r3, r2, r3
 800b084:	2b02      	cmp	r3, #2
 800b086:	d901      	bls.n	800b08c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800b088:	2303      	movs	r3, #3
 800b08a:	e1b4      	b.n	800b3f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b08c:	4b2b      	ldr	r3, [pc, #172]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f003 0302 	and.w	r3, r3, #2
 800b094:	2b00      	cmp	r3, #0
 800b096:	d0f0      	beq.n	800b07a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b098:	4b28      	ldr	r3, [pc, #160]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	691b      	ldr	r3, [r3, #16]
 800b0a4:	00db      	lsls	r3, r3, #3
 800b0a6:	4925      	ldr	r1, [pc, #148]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	600b      	str	r3, [r1, #0]
 800b0ac:	e015      	b.n	800b0da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b0ae:	4b24      	ldr	r3, [pc, #144]	@ (800b140 <HAL_RCC_OscConfig+0x278>)
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0b4:	f7fc fefc 	bl	8007eb0 <HAL_GetTick>
 800b0b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b0ba:	e008      	b.n	800b0ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b0bc:	f7fc fef8 	bl	8007eb0 <HAL_GetTick>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	1ad3      	subs	r3, r2, r3
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d901      	bls.n	800b0ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	e193      	b.n	800b3f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b0ce:	4b1b      	ldr	r3, [pc, #108]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f003 0302 	and.w	r3, r3, #2
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1f0      	bne.n	800b0bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f003 0308 	and.w	r3, r3, #8
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d036      	beq.n	800b154 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	695b      	ldr	r3, [r3, #20]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d016      	beq.n	800b11c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b0ee:	4b15      	ldr	r3, [pc, #84]	@ (800b144 <HAL_RCC_OscConfig+0x27c>)
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0f4:	f7fc fedc 	bl	8007eb0 <HAL_GetTick>
 800b0f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b0fa:	e008      	b.n	800b10e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b0fc:	f7fc fed8 	bl	8007eb0 <HAL_GetTick>
 800b100:	4602      	mov	r2, r0
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	1ad3      	subs	r3, r2, r3
 800b106:	2b02      	cmp	r3, #2
 800b108:	d901      	bls.n	800b10e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800b10a:	2303      	movs	r3, #3
 800b10c:	e173      	b.n	800b3f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b10e:	4b0b      	ldr	r3, [pc, #44]	@ (800b13c <HAL_RCC_OscConfig+0x274>)
 800b110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b112:	f003 0302 	and.w	r3, r3, #2
 800b116:	2b00      	cmp	r3, #0
 800b118:	d0f0      	beq.n	800b0fc <HAL_RCC_OscConfig+0x234>
 800b11a:	e01b      	b.n	800b154 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b11c:	4b09      	ldr	r3, [pc, #36]	@ (800b144 <HAL_RCC_OscConfig+0x27c>)
 800b11e:	2200      	movs	r2, #0
 800b120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b122:	f7fc fec5 	bl	8007eb0 <HAL_GetTick>
 800b126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b128:	e00e      	b.n	800b148 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b12a:	f7fc fec1 	bl	8007eb0 <HAL_GetTick>
 800b12e:	4602      	mov	r2, r0
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	1ad3      	subs	r3, r2, r3
 800b134:	2b02      	cmp	r3, #2
 800b136:	d907      	bls.n	800b148 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800b138:	2303      	movs	r3, #3
 800b13a:	e15c      	b.n	800b3f6 <HAL_RCC_OscConfig+0x52e>
 800b13c:	40023800 	.word	0x40023800
 800b140:	42470000 	.word	0x42470000
 800b144:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b148:	4b8a      	ldr	r3, [pc, #552]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b14a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b14c:	f003 0302 	and.w	r3, r3, #2
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1ea      	bne.n	800b12a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f003 0304 	and.w	r3, r3, #4
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f000 8097 	beq.w	800b290 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b162:	2300      	movs	r3, #0
 800b164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b166:	4b83      	ldr	r3, [pc, #524]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b16a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d10f      	bne.n	800b192 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b172:	2300      	movs	r3, #0
 800b174:	60bb      	str	r3, [r7, #8]
 800b176:	4b7f      	ldr	r3, [pc, #508]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b17a:	4a7e      	ldr	r2, [pc, #504]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b17c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b180:	6413      	str	r3, [r2, #64]	@ 0x40
 800b182:	4b7c      	ldr	r3, [pc, #496]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b18a:	60bb      	str	r3, [r7, #8]
 800b18c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b18e:	2301      	movs	r3, #1
 800b190:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b192:	4b79      	ldr	r3, [pc, #484]	@ (800b378 <HAL_RCC_OscConfig+0x4b0>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d118      	bne.n	800b1d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b19e:	4b76      	ldr	r3, [pc, #472]	@ (800b378 <HAL_RCC_OscConfig+0x4b0>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a75      	ldr	r2, [pc, #468]	@ (800b378 <HAL_RCC_OscConfig+0x4b0>)
 800b1a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b1a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b1aa:	f7fc fe81 	bl	8007eb0 <HAL_GetTick>
 800b1ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b1b0:	e008      	b.n	800b1c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1b2:	f7fc fe7d 	bl	8007eb0 <HAL_GetTick>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	1ad3      	subs	r3, r2, r3
 800b1bc:	2b02      	cmp	r3, #2
 800b1be:	d901      	bls.n	800b1c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800b1c0:	2303      	movs	r3, #3
 800b1c2:	e118      	b.n	800b3f6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b1c4:	4b6c      	ldr	r3, [pc, #432]	@ (800b378 <HAL_RCC_OscConfig+0x4b0>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d0f0      	beq.n	800b1b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d106      	bne.n	800b1e6 <HAL_RCC_OscConfig+0x31e>
 800b1d8:	4b66      	ldr	r3, [pc, #408]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b1da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1dc:	4a65      	ldr	r2, [pc, #404]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b1de:	f043 0301 	orr.w	r3, r3, #1
 800b1e2:	6713      	str	r3, [r2, #112]	@ 0x70
 800b1e4:	e01c      	b.n	800b220 <HAL_RCC_OscConfig+0x358>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	2b05      	cmp	r3, #5
 800b1ec:	d10c      	bne.n	800b208 <HAL_RCC_OscConfig+0x340>
 800b1ee:	4b61      	ldr	r3, [pc, #388]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b1f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1f2:	4a60      	ldr	r2, [pc, #384]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b1f4:	f043 0304 	orr.w	r3, r3, #4
 800b1f8:	6713      	str	r3, [r2, #112]	@ 0x70
 800b1fa:	4b5e      	ldr	r3, [pc, #376]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b1fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1fe:	4a5d      	ldr	r2, [pc, #372]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b200:	f043 0301 	orr.w	r3, r3, #1
 800b204:	6713      	str	r3, [r2, #112]	@ 0x70
 800b206:	e00b      	b.n	800b220 <HAL_RCC_OscConfig+0x358>
 800b208:	4b5a      	ldr	r3, [pc, #360]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b20a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b20c:	4a59      	ldr	r2, [pc, #356]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b20e:	f023 0301 	bic.w	r3, r3, #1
 800b212:	6713      	str	r3, [r2, #112]	@ 0x70
 800b214:	4b57      	ldr	r3, [pc, #348]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b218:	4a56      	ldr	r2, [pc, #344]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b21a:	f023 0304 	bic.w	r3, r3, #4
 800b21e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d015      	beq.n	800b254 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b228:	f7fc fe42 	bl	8007eb0 <HAL_GetTick>
 800b22c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b22e:	e00a      	b.n	800b246 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b230:	f7fc fe3e 	bl	8007eb0 <HAL_GetTick>
 800b234:	4602      	mov	r2, r0
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b23e:	4293      	cmp	r3, r2
 800b240:	d901      	bls.n	800b246 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800b242:	2303      	movs	r3, #3
 800b244:	e0d7      	b.n	800b3f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b246:	4b4b      	ldr	r3, [pc, #300]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b24a:	f003 0302 	and.w	r3, r3, #2
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d0ee      	beq.n	800b230 <HAL_RCC_OscConfig+0x368>
 800b252:	e014      	b.n	800b27e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b254:	f7fc fe2c 	bl	8007eb0 <HAL_GetTick>
 800b258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b25a:	e00a      	b.n	800b272 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b25c:	f7fc fe28 	bl	8007eb0 <HAL_GetTick>
 800b260:	4602      	mov	r2, r0
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	1ad3      	subs	r3, r2, r3
 800b266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d901      	bls.n	800b272 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b26e:	2303      	movs	r3, #3
 800b270:	e0c1      	b.n	800b3f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b272:	4b40      	ldr	r3, [pc, #256]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b276:	f003 0302 	and.w	r3, r3, #2
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1ee      	bne.n	800b25c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b27e:	7dfb      	ldrb	r3, [r7, #23]
 800b280:	2b01      	cmp	r3, #1
 800b282:	d105      	bne.n	800b290 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b284:	4b3b      	ldr	r3, [pc, #236]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b288:	4a3a      	ldr	r2, [pc, #232]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b28a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b28e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	699b      	ldr	r3, [r3, #24]
 800b294:	2b00      	cmp	r3, #0
 800b296:	f000 80ad 	beq.w	800b3f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b29a:	4b36      	ldr	r3, [pc, #216]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	f003 030c 	and.w	r3, r3, #12
 800b2a2:	2b08      	cmp	r3, #8
 800b2a4:	d060      	beq.n	800b368 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	699b      	ldr	r3, [r3, #24]
 800b2aa:	2b02      	cmp	r3, #2
 800b2ac:	d145      	bne.n	800b33a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b2ae:	4b33      	ldr	r3, [pc, #204]	@ (800b37c <HAL_RCC_OscConfig+0x4b4>)
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2b4:	f7fc fdfc 	bl	8007eb0 <HAL_GetTick>
 800b2b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2ba:	e008      	b.n	800b2ce <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2bc:	f7fc fdf8 	bl	8007eb0 <HAL_GetTick>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	1ad3      	subs	r3, r2, r3
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	d901      	bls.n	800b2ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	e093      	b.n	800b3f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2ce:	4b29      	ldr	r3, [pc, #164]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1f0      	bne.n	800b2bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	69da      	ldr	r2, [r3, #28]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a1b      	ldr	r3, [r3, #32]
 800b2e2:	431a      	orrs	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2e8:	019b      	lsls	r3, r3, #6
 800b2ea:	431a      	orrs	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2f0:	085b      	lsrs	r3, r3, #1
 800b2f2:	3b01      	subs	r3, #1
 800b2f4:	041b      	lsls	r3, r3, #16
 800b2f6:	431a      	orrs	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2fc:	061b      	lsls	r3, r3, #24
 800b2fe:	431a      	orrs	r2, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b304:	071b      	lsls	r3, r3, #28
 800b306:	491b      	ldr	r1, [pc, #108]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b308:	4313      	orrs	r3, r2
 800b30a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b30c:	4b1b      	ldr	r3, [pc, #108]	@ (800b37c <HAL_RCC_OscConfig+0x4b4>)
 800b30e:	2201      	movs	r2, #1
 800b310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b312:	f7fc fdcd 	bl	8007eb0 <HAL_GetTick>
 800b316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b318:	e008      	b.n	800b32c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b31a:	f7fc fdc9 	bl	8007eb0 <HAL_GetTick>
 800b31e:	4602      	mov	r2, r0
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	1ad3      	subs	r3, r2, r3
 800b324:	2b02      	cmp	r3, #2
 800b326:	d901      	bls.n	800b32c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800b328:	2303      	movs	r3, #3
 800b32a:	e064      	b.n	800b3f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b32c:	4b11      	ldr	r3, [pc, #68]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b334:	2b00      	cmp	r3, #0
 800b336:	d0f0      	beq.n	800b31a <HAL_RCC_OscConfig+0x452>
 800b338:	e05c      	b.n	800b3f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b33a:	4b10      	ldr	r3, [pc, #64]	@ (800b37c <HAL_RCC_OscConfig+0x4b4>)
 800b33c:	2200      	movs	r2, #0
 800b33e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b340:	f7fc fdb6 	bl	8007eb0 <HAL_GetTick>
 800b344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b346:	e008      	b.n	800b35a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b348:	f7fc fdb2 	bl	8007eb0 <HAL_GetTick>
 800b34c:	4602      	mov	r2, r0
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	2b02      	cmp	r3, #2
 800b354:	d901      	bls.n	800b35a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800b356:	2303      	movs	r3, #3
 800b358:	e04d      	b.n	800b3f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b35a:	4b06      	ldr	r3, [pc, #24]	@ (800b374 <HAL_RCC_OscConfig+0x4ac>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1f0      	bne.n	800b348 <HAL_RCC_OscConfig+0x480>
 800b366:	e045      	b.n	800b3f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d107      	bne.n	800b380 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	e040      	b.n	800b3f6 <HAL_RCC_OscConfig+0x52e>
 800b374:	40023800 	.word	0x40023800
 800b378:	40007000 	.word	0x40007000
 800b37c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b380:	4b1f      	ldr	r3, [pc, #124]	@ (800b400 <HAL_RCC_OscConfig+0x538>)
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	699b      	ldr	r3, [r3, #24]
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d030      	beq.n	800b3f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b398:	429a      	cmp	r2, r3
 800b39a:	d129      	bne.n	800b3f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d122      	bne.n	800b3f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b3b0:	4013      	ands	r3, r2
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b3b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d119      	bne.n	800b3f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3c6:	085b      	lsrs	r3, r3, #1
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d10f      	bne.n	800b3f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d107      	bne.n	800b3f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d001      	beq.n	800b3f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e000      	b.n	800b3f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3718      	adds	r7, #24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	40023800 	.word	0x40023800

0800b404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d101      	bne.n	800b416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	e041      	b.n	800b49a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d106      	bne.n	800b430 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f7fb fff4 	bl	8007418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2202      	movs	r2, #2
 800b434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	3304      	adds	r3, #4
 800b440:	4619      	mov	r1, r3
 800b442:	4610      	mov	r0, r2
 800b444:	f000 fa7e 	bl	800b944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2201      	movs	r2, #1
 800b484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2201      	movs	r2, #1
 800b494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3708      	adds	r7, #8
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
	...

0800b4a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b085      	sub	sp, #20
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d001      	beq.n	800b4bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	e04e      	b.n	800b55a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2202      	movs	r2, #2
 800b4c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	68da      	ldr	r2, [r3, #12]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f042 0201 	orr.w	r2, r2, #1
 800b4d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a23      	ldr	r2, [pc, #140]	@ (800b568 <HAL_TIM_Base_Start_IT+0xc4>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d022      	beq.n	800b524 <HAL_TIM_Base_Start_IT+0x80>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4e6:	d01d      	beq.n	800b524 <HAL_TIM_Base_Start_IT+0x80>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a1f      	ldr	r2, [pc, #124]	@ (800b56c <HAL_TIM_Base_Start_IT+0xc8>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d018      	beq.n	800b524 <HAL_TIM_Base_Start_IT+0x80>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a1e      	ldr	r2, [pc, #120]	@ (800b570 <HAL_TIM_Base_Start_IT+0xcc>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d013      	beq.n	800b524 <HAL_TIM_Base_Start_IT+0x80>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a1c      	ldr	r2, [pc, #112]	@ (800b574 <HAL_TIM_Base_Start_IT+0xd0>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d00e      	beq.n	800b524 <HAL_TIM_Base_Start_IT+0x80>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a1b      	ldr	r2, [pc, #108]	@ (800b578 <HAL_TIM_Base_Start_IT+0xd4>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d009      	beq.n	800b524 <HAL_TIM_Base_Start_IT+0x80>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a19      	ldr	r2, [pc, #100]	@ (800b57c <HAL_TIM_Base_Start_IT+0xd8>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d004      	beq.n	800b524 <HAL_TIM_Base_Start_IT+0x80>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a18      	ldr	r2, [pc, #96]	@ (800b580 <HAL_TIM_Base_Start_IT+0xdc>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d111      	bne.n	800b548 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	f003 0307 	and.w	r3, r3, #7
 800b52e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2b06      	cmp	r3, #6
 800b534:	d010      	beq.n	800b558 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f042 0201 	orr.w	r2, r2, #1
 800b544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b546:	e007      	b.n	800b558 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f042 0201 	orr.w	r2, r2, #1
 800b556:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b558:	2300      	movs	r3, #0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3714      	adds	r7, #20
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr
 800b566:	bf00      	nop
 800b568:	40010000 	.word	0x40010000
 800b56c:	40000400 	.word	0x40000400
 800b570:	40000800 	.word	0x40000800
 800b574:	40000c00 	.word	0x40000c00
 800b578:	40010400 	.word	0x40010400
 800b57c:	40014000 	.word	0x40014000
 800b580:	40001800 	.word	0x40001800

0800b584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	691b      	ldr	r3, [r3, #16]
 800b59a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	f003 0302 	and.w	r3, r3, #2
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d020      	beq.n	800b5e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f003 0302 	and.w	r3, r3, #2
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d01b      	beq.n	800b5e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f06f 0202 	mvn.w	r2, #2
 800b5b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2201      	movs	r2, #1
 800b5be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	699b      	ldr	r3, [r3, #24]
 800b5c6:	f003 0303 	and.w	r3, r3, #3
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d003      	beq.n	800b5d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 f999 	bl	800b906 <HAL_TIM_IC_CaptureCallback>
 800b5d4:	e005      	b.n	800b5e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 f98b 	bl	800b8f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 f99c 	bl	800b91a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	f003 0304 	and.w	r3, r3, #4
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d020      	beq.n	800b634 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f003 0304 	and.w	r3, r3, #4
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d01b      	beq.n	800b634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f06f 0204 	mvn.w	r2, #4
 800b604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2202      	movs	r2, #2
 800b60a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	699b      	ldr	r3, [r3, #24]
 800b612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b616:	2b00      	cmp	r3, #0
 800b618:	d003      	beq.n	800b622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 f973 	bl	800b906 <HAL_TIM_IC_CaptureCallback>
 800b620:	e005      	b.n	800b62e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 f965 	bl	800b8f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f976 	bl	800b91a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	f003 0308 	and.w	r3, r3, #8
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d020      	beq.n	800b680 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f003 0308 	and.w	r3, r3, #8
 800b644:	2b00      	cmp	r3, #0
 800b646:	d01b      	beq.n	800b680 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f06f 0208 	mvn.w	r2, #8
 800b650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2204      	movs	r2, #4
 800b656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	69db      	ldr	r3, [r3, #28]
 800b65e:	f003 0303 	and.w	r3, r3, #3
 800b662:	2b00      	cmp	r3, #0
 800b664:	d003      	beq.n	800b66e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 f94d 	bl	800b906 <HAL_TIM_IC_CaptureCallback>
 800b66c:	e005      	b.n	800b67a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 f93f 	bl	800b8f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 f950 	bl	800b91a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	f003 0310 	and.w	r3, r3, #16
 800b686:	2b00      	cmp	r3, #0
 800b688:	d020      	beq.n	800b6cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f003 0310 	and.w	r3, r3, #16
 800b690:	2b00      	cmp	r3, #0
 800b692:	d01b      	beq.n	800b6cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f06f 0210 	mvn.w	r2, #16
 800b69c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2208      	movs	r2, #8
 800b6a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	69db      	ldr	r3, [r3, #28]
 800b6aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d003      	beq.n	800b6ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 f927 	bl	800b906 <HAL_TIM_IC_CaptureCallback>
 800b6b8:	e005      	b.n	800b6c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 f919 	bl	800b8f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 f92a 	bl	800b91a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	f003 0301 	and.w	r3, r3, #1
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00c      	beq.n	800b6f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f003 0301 	and.w	r3, r3, #1
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d007      	beq.n	800b6f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f06f 0201 	mvn.w	r2, #1
 800b6e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f7f9 fc4e 	bl	8004f8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00c      	beq.n	800b714 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b700:	2b00      	cmp	r3, #0
 800b702:	d007      	beq.n	800b714 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b70c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 fade 	bl	800bcd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00c      	beq.n	800b738 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b724:	2b00      	cmp	r3, #0
 800b726:	d007      	beq.n	800b738 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f8fb 	bl	800b92e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	f003 0320 	and.w	r3, r3, #32
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d00c      	beq.n	800b75c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f003 0320 	and.w	r3, r3, #32
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d007      	beq.n	800b75c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f06f 0220 	mvn.w	r2, #32
 800b754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 fab0 	bl	800bcbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b75c:	bf00      	nop
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b76e:	2300      	movs	r3, #0
 800b770:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d101      	bne.n	800b780 <HAL_TIM_ConfigClockSource+0x1c>
 800b77c:	2302      	movs	r3, #2
 800b77e:	e0b4      	b.n	800b8ea <HAL_TIM_ConfigClockSource+0x186>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2201      	movs	r2, #1
 800b784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2202      	movs	r2, #2
 800b78c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b79e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b7a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	68ba      	ldr	r2, [r7, #8]
 800b7ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b7b8:	d03e      	beq.n	800b838 <HAL_TIM_ConfigClockSource+0xd4>
 800b7ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b7be:	f200 8087 	bhi.w	800b8d0 <HAL_TIM_ConfigClockSource+0x16c>
 800b7c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7c6:	f000 8086 	beq.w	800b8d6 <HAL_TIM_ConfigClockSource+0x172>
 800b7ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7ce:	d87f      	bhi.n	800b8d0 <HAL_TIM_ConfigClockSource+0x16c>
 800b7d0:	2b70      	cmp	r3, #112	@ 0x70
 800b7d2:	d01a      	beq.n	800b80a <HAL_TIM_ConfigClockSource+0xa6>
 800b7d4:	2b70      	cmp	r3, #112	@ 0x70
 800b7d6:	d87b      	bhi.n	800b8d0 <HAL_TIM_ConfigClockSource+0x16c>
 800b7d8:	2b60      	cmp	r3, #96	@ 0x60
 800b7da:	d050      	beq.n	800b87e <HAL_TIM_ConfigClockSource+0x11a>
 800b7dc:	2b60      	cmp	r3, #96	@ 0x60
 800b7de:	d877      	bhi.n	800b8d0 <HAL_TIM_ConfigClockSource+0x16c>
 800b7e0:	2b50      	cmp	r3, #80	@ 0x50
 800b7e2:	d03c      	beq.n	800b85e <HAL_TIM_ConfigClockSource+0xfa>
 800b7e4:	2b50      	cmp	r3, #80	@ 0x50
 800b7e6:	d873      	bhi.n	800b8d0 <HAL_TIM_ConfigClockSource+0x16c>
 800b7e8:	2b40      	cmp	r3, #64	@ 0x40
 800b7ea:	d058      	beq.n	800b89e <HAL_TIM_ConfigClockSource+0x13a>
 800b7ec:	2b40      	cmp	r3, #64	@ 0x40
 800b7ee:	d86f      	bhi.n	800b8d0 <HAL_TIM_ConfigClockSource+0x16c>
 800b7f0:	2b30      	cmp	r3, #48	@ 0x30
 800b7f2:	d064      	beq.n	800b8be <HAL_TIM_ConfigClockSource+0x15a>
 800b7f4:	2b30      	cmp	r3, #48	@ 0x30
 800b7f6:	d86b      	bhi.n	800b8d0 <HAL_TIM_ConfigClockSource+0x16c>
 800b7f8:	2b20      	cmp	r3, #32
 800b7fa:	d060      	beq.n	800b8be <HAL_TIM_ConfigClockSource+0x15a>
 800b7fc:	2b20      	cmp	r3, #32
 800b7fe:	d867      	bhi.n	800b8d0 <HAL_TIM_ConfigClockSource+0x16c>
 800b800:	2b00      	cmp	r3, #0
 800b802:	d05c      	beq.n	800b8be <HAL_TIM_ConfigClockSource+0x15a>
 800b804:	2b10      	cmp	r3, #16
 800b806:	d05a      	beq.n	800b8be <HAL_TIM_ConfigClockSource+0x15a>
 800b808:	e062      	b.n	800b8d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b81a:	f000 f9b3 	bl	800bb84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b82c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	68ba      	ldr	r2, [r7, #8]
 800b834:	609a      	str	r2, [r3, #8]
      break;
 800b836:	e04f      	b.n	800b8d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b848:	f000 f99c 	bl	800bb84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	689a      	ldr	r2, [r3, #8]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b85a:	609a      	str	r2, [r3, #8]
      break;
 800b85c:	e03c      	b.n	800b8d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b86a:	461a      	mov	r2, r3
 800b86c:	f000 f910 	bl	800ba90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	2150      	movs	r1, #80	@ 0x50
 800b876:	4618      	mov	r0, r3
 800b878:	f000 f969 	bl	800bb4e <TIM_ITRx_SetConfig>
      break;
 800b87c:	e02c      	b.n	800b8d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b88a:	461a      	mov	r2, r3
 800b88c:	f000 f92f 	bl	800baee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2160      	movs	r1, #96	@ 0x60
 800b896:	4618      	mov	r0, r3
 800b898:	f000 f959 	bl	800bb4e <TIM_ITRx_SetConfig>
      break;
 800b89c:	e01c      	b.n	800b8d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	f000 f8f0 	bl	800ba90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2140      	movs	r1, #64	@ 0x40
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f000 f949 	bl	800bb4e <TIM_ITRx_SetConfig>
      break;
 800b8bc:	e00c      	b.n	800b8d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	4610      	mov	r0, r2
 800b8ca:	f000 f940 	bl	800bb4e <TIM_ITRx_SetConfig>
      break;
 800b8ce:	e003      	b.n	800b8d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	73fb      	strb	r3, [r7, #15]
      break;
 800b8d4:	e000      	b.n	800b8d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b8d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b8f2:	b480      	push	{r7}
 800b8f4:	b083      	sub	sp, #12
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b8fa:	bf00      	nop
 800b8fc:	370c      	adds	r7, #12
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr

0800b906 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b906:	b480      	push	{r7}
 800b908:	b083      	sub	sp, #12
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b90e:	bf00      	nop
 800b910:	370c      	adds	r7, #12
 800b912:	46bd      	mov	sp, r7
 800b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b918:	4770      	bx	lr

0800b91a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b91a:	b480      	push	{r7}
 800b91c:	b083      	sub	sp, #12
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b922:	bf00      	nop
 800b924:	370c      	adds	r7, #12
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr

0800b92e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b92e:	b480      	push	{r7}
 800b930:	b083      	sub	sp, #12
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b936:	bf00      	nop
 800b938:	370c      	adds	r7, #12
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
	...

0800b944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b944:	b480      	push	{r7}
 800b946:	b085      	sub	sp, #20
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	4a43      	ldr	r2, [pc, #268]	@ (800ba64 <TIM_Base_SetConfig+0x120>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d013      	beq.n	800b984 <TIM_Base_SetConfig+0x40>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b962:	d00f      	beq.n	800b984 <TIM_Base_SetConfig+0x40>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	4a40      	ldr	r2, [pc, #256]	@ (800ba68 <TIM_Base_SetConfig+0x124>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d00b      	beq.n	800b984 <TIM_Base_SetConfig+0x40>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4a3f      	ldr	r2, [pc, #252]	@ (800ba6c <TIM_Base_SetConfig+0x128>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d007      	beq.n	800b984 <TIM_Base_SetConfig+0x40>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4a3e      	ldr	r2, [pc, #248]	@ (800ba70 <TIM_Base_SetConfig+0x12c>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d003      	beq.n	800b984 <TIM_Base_SetConfig+0x40>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4a3d      	ldr	r2, [pc, #244]	@ (800ba74 <TIM_Base_SetConfig+0x130>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d108      	bne.n	800b996 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b98a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	4313      	orrs	r3, r2
 800b994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	4a32      	ldr	r2, [pc, #200]	@ (800ba64 <TIM_Base_SetConfig+0x120>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d02b      	beq.n	800b9f6 <TIM_Base_SetConfig+0xb2>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9a4:	d027      	beq.n	800b9f6 <TIM_Base_SetConfig+0xb2>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	4a2f      	ldr	r2, [pc, #188]	@ (800ba68 <TIM_Base_SetConfig+0x124>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d023      	beq.n	800b9f6 <TIM_Base_SetConfig+0xb2>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	4a2e      	ldr	r2, [pc, #184]	@ (800ba6c <TIM_Base_SetConfig+0x128>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d01f      	beq.n	800b9f6 <TIM_Base_SetConfig+0xb2>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	4a2d      	ldr	r2, [pc, #180]	@ (800ba70 <TIM_Base_SetConfig+0x12c>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d01b      	beq.n	800b9f6 <TIM_Base_SetConfig+0xb2>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4a2c      	ldr	r2, [pc, #176]	@ (800ba74 <TIM_Base_SetConfig+0x130>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d017      	beq.n	800b9f6 <TIM_Base_SetConfig+0xb2>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4a2b      	ldr	r2, [pc, #172]	@ (800ba78 <TIM_Base_SetConfig+0x134>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d013      	beq.n	800b9f6 <TIM_Base_SetConfig+0xb2>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	4a2a      	ldr	r2, [pc, #168]	@ (800ba7c <TIM_Base_SetConfig+0x138>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d00f      	beq.n	800b9f6 <TIM_Base_SetConfig+0xb2>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4a29      	ldr	r2, [pc, #164]	@ (800ba80 <TIM_Base_SetConfig+0x13c>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d00b      	beq.n	800b9f6 <TIM_Base_SetConfig+0xb2>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4a28      	ldr	r2, [pc, #160]	@ (800ba84 <TIM_Base_SetConfig+0x140>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d007      	beq.n	800b9f6 <TIM_Base_SetConfig+0xb2>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4a27      	ldr	r2, [pc, #156]	@ (800ba88 <TIM_Base_SetConfig+0x144>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d003      	beq.n	800b9f6 <TIM_Base_SetConfig+0xb2>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4a26      	ldr	r2, [pc, #152]	@ (800ba8c <TIM_Base_SetConfig+0x148>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d108      	bne.n	800ba08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b9fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	68fa      	ldr	r2, [r7, #12]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	695b      	ldr	r3, [r3, #20]
 800ba12:	4313      	orrs	r3, r2
 800ba14:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	689a      	ldr	r2, [r3, #8]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4a0e      	ldr	r2, [pc, #56]	@ (800ba64 <TIM_Base_SetConfig+0x120>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d003      	beq.n	800ba36 <TIM_Base_SetConfig+0xf2>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4a10      	ldr	r2, [pc, #64]	@ (800ba74 <TIM_Base_SetConfig+0x130>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d103      	bne.n	800ba3e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	691a      	ldr	r2, [r3, #16]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f043 0204 	orr.w	r2, r3, #4
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	601a      	str	r2, [r3, #0]
}
 800ba56:	bf00      	nop
 800ba58:	3714      	adds	r7, #20
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	40010000 	.word	0x40010000
 800ba68:	40000400 	.word	0x40000400
 800ba6c:	40000800 	.word	0x40000800
 800ba70:	40000c00 	.word	0x40000c00
 800ba74:	40010400 	.word	0x40010400
 800ba78:	40014000 	.word	0x40014000
 800ba7c:	40014400 	.word	0x40014400
 800ba80:	40014800 	.word	0x40014800
 800ba84:	40001800 	.word	0x40001800
 800ba88:	40001c00 	.word	0x40001c00
 800ba8c:	40002000 	.word	0x40002000

0800ba90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b087      	sub	sp, #28
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6a1b      	ldr	r3, [r3, #32]
 800baa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	6a1b      	ldr	r3, [r3, #32]
 800baa6:	f023 0201 	bic.w	r2, r3, #1
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	699b      	ldr	r3, [r3, #24]
 800bab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800baba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	011b      	lsls	r3, r3, #4
 800bac0:	693a      	ldr	r2, [r7, #16]
 800bac2:	4313      	orrs	r3, r2
 800bac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	f023 030a 	bic.w	r3, r3, #10
 800bacc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bace:	697a      	ldr	r2, [r7, #20]
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	4313      	orrs	r3, r2
 800bad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	693a      	ldr	r2, [r7, #16]
 800bada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	697a      	ldr	r2, [r7, #20]
 800bae0:	621a      	str	r2, [r3, #32]
}
 800bae2:	bf00      	nop
 800bae4:	371c      	adds	r7, #28
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr

0800baee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800baee:	b480      	push	{r7}
 800baf0:	b087      	sub	sp, #28
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	60f8      	str	r0, [r7, #12]
 800baf6:	60b9      	str	r1, [r7, #8]
 800baf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	6a1b      	ldr	r3, [r3, #32]
 800bafe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	6a1b      	ldr	r3, [r3, #32]
 800bb04:	f023 0210 	bic.w	r2, r3, #16
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	699b      	ldr	r3, [r3, #24]
 800bb10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bb18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	031b      	lsls	r3, r3, #12
 800bb1e:	693a      	ldr	r2, [r7, #16]
 800bb20:	4313      	orrs	r3, r2
 800bb22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bb2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	011b      	lsls	r3, r3, #4
 800bb30:	697a      	ldr	r2, [r7, #20]
 800bb32:	4313      	orrs	r3, r2
 800bb34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	693a      	ldr	r2, [r7, #16]
 800bb3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	697a      	ldr	r2, [r7, #20]
 800bb40:	621a      	str	r2, [r3, #32]
}
 800bb42:	bf00      	nop
 800bb44:	371c      	adds	r7, #28
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr

0800bb4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb4e:	b480      	push	{r7}
 800bb50:	b085      	sub	sp, #20
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
 800bb56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb66:	683a      	ldr	r2, [r7, #0]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	f043 0307 	orr.w	r3, r3, #7
 800bb70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	68fa      	ldr	r2, [r7, #12]
 800bb76:	609a      	str	r2, [r3, #8]
}
 800bb78:	bf00      	nop
 800bb7a:	3714      	adds	r7, #20
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b087      	sub	sp, #28
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	607a      	str	r2, [r7, #4]
 800bb90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	689b      	ldr	r3, [r3, #8]
 800bb96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bb9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	021a      	lsls	r2, r3, #8
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	431a      	orrs	r2, r3
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	697a      	ldr	r2, [r7, #20]
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	697a      	ldr	r2, [r7, #20]
 800bbb6:	609a      	str	r2, [r3, #8]
}
 800bbb8:	bf00      	nop
 800bbba:	371c      	adds	r7, #28
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr

0800bbc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b085      	sub	sp, #20
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d101      	bne.n	800bbdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bbd8:	2302      	movs	r3, #2
 800bbda:	e05a      	b.n	800bc92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2202      	movs	r2, #2
 800bbe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	68fa      	ldr	r2, [r7, #12]
 800bc14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a21      	ldr	r2, [pc, #132]	@ (800bca0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d022      	beq.n	800bc66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc28:	d01d      	beq.n	800bc66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a1d      	ldr	r2, [pc, #116]	@ (800bca4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d018      	beq.n	800bc66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a1b      	ldr	r2, [pc, #108]	@ (800bca8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d013      	beq.n	800bc66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4a1a      	ldr	r2, [pc, #104]	@ (800bcac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d00e      	beq.n	800bc66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4a18      	ldr	r2, [pc, #96]	@ (800bcb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d009      	beq.n	800bc66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4a17      	ldr	r2, [pc, #92]	@ (800bcb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d004      	beq.n	800bc66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4a15      	ldr	r2, [pc, #84]	@ (800bcb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d10c      	bne.n	800bc80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	4313      	orrs	r3, r2
 800bc76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	68ba      	ldr	r2, [r7, #8]
 800bc7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2201      	movs	r2, #1
 800bc84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3714      	adds	r7, #20
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	40010000 	.word	0x40010000
 800bca4:	40000400 	.word	0x40000400
 800bca8:	40000800 	.word	0x40000800
 800bcac:	40000c00 	.word	0x40000c00
 800bcb0:	40010400 	.word	0x40010400
 800bcb4:	40014000 	.word	0x40014000
 800bcb8:	40001800 	.word	0x40001800

0800bcbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bcc4:	bf00      	nop
 800bcc6:	370c      	adds	r7, #12
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr

0800bcd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bcd8:	bf00      	nop
 800bcda:	370c      	adds	r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d101      	bne.n	800bcf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e042      	b.n	800bd7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d106      	bne.n	800bd10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2200      	movs	r2, #0
 800bd06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f7fb fbaa 	bl	8007464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2224      	movs	r2, #36	@ 0x24
 800bd14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	68da      	ldr	r2, [r3, #12]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bd26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f001 f879 	bl	800ce20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	691a      	ldr	r2, [r3, #16]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bd3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	695a      	ldr	r2, [r3, #20]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bd4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	68da      	ldr	r2, [r3, #12]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bd5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2220      	movs	r2, #32
 800bd68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2220      	movs	r2, #32
 800bd70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2200      	movs	r2, #0
 800bd78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3708      	adds	r7, #8
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b08a      	sub	sp, #40	@ 0x28
 800bd88:	af02      	add	r7, sp, #8
 800bd8a:	60f8      	str	r0, [r7, #12]
 800bd8c:	60b9      	str	r1, [r7, #8]
 800bd8e:	603b      	str	r3, [r7, #0]
 800bd90:	4613      	mov	r3, r2
 800bd92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bd94:	2300      	movs	r3, #0
 800bd96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	2b20      	cmp	r3, #32
 800bda2:	d175      	bne.n	800be90 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d002      	beq.n	800bdb0 <HAL_UART_Transmit+0x2c>
 800bdaa:	88fb      	ldrh	r3, [r7, #6]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d101      	bne.n	800bdb4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	e06e      	b.n	800be92 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2221      	movs	r2, #33	@ 0x21
 800bdbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bdc2:	f7fc f875 	bl	8007eb0 <HAL_GetTick>
 800bdc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	88fa      	ldrh	r2, [r7, #6]
 800bdcc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	88fa      	ldrh	r2, [r7, #6]
 800bdd2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	689b      	ldr	r3, [r3, #8]
 800bdd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bddc:	d108      	bne.n	800bdf0 <HAL_UART_Transmit+0x6c>
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	691b      	ldr	r3, [r3, #16]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d104      	bne.n	800bdf0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bde6:	2300      	movs	r3, #0
 800bde8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	61bb      	str	r3, [r7, #24]
 800bdee:	e003      	b.n	800bdf8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bdf8:	e02e      	b.n	800be58 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	9300      	str	r3, [sp, #0]
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	2200      	movs	r2, #0
 800be02:	2180      	movs	r1, #128	@ 0x80
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	f000 fd4a 	bl	800c89e <UART_WaitOnFlagUntilTimeout>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d005      	beq.n	800be1c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2220      	movs	r2, #32
 800be14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800be18:	2303      	movs	r3, #3
 800be1a:	e03a      	b.n	800be92 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d10b      	bne.n	800be3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800be22:	69bb      	ldr	r3, [r7, #24]
 800be24:	881b      	ldrh	r3, [r3, #0]
 800be26:	461a      	mov	r2, r3
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	3302      	adds	r3, #2
 800be36:	61bb      	str	r3, [r7, #24]
 800be38:	e007      	b.n	800be4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800be3a:	69fb      	ldr	r3, [r7, #28]
 800be3c:	781a      	ldrb	r2, [r3, #0]
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	3301      	adds	r3, #1
 800be48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800be4e:	b29b      	uxth	r3, r3
 800be50:	3b01      	subs	r3, #1
 800be52:	b29a      	uxth	r2, r3
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d1cb      	bne.n	800bdfa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	9300      	str	r3, [sp, #0]
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	2200      	movs	r2, #0
 800be6a:	2140      	movs	r1, #64	@ 0x40
 800be6c:	68f8      	ldr	r0, [r7, #12]
 800be6e:	f000 fd16 	bl	800c89e <UART_WaitOnFlagUntilTimeout>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d005      	beq.n	800be84 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2220      	movs	r2, #32
 800be7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800be80:	2303      	movs	r3, #3
 800be82:	e006      	b.n	800be92 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2220      	movs	r2, #32
 800be88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800be8c:	2300      	movs	r3, #0
 800be8e:	e000      	b.n	800be92 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800be90:	2302      	movs	r3, #2
  }
}
 800be92:	4618      	mov	r0, r3
 800be94:	3720      	adds	r7, #32
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
	...

0800be9c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b08c      	sub	sp, #48	@ 0x30
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	4613      	mov	r3, r2
 800bea8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	2b20      	cmp	r3, #32
 800beb4:	d162      	bne.n	800bf7c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d002      	beq.n	800bec2 <HAL_UART_Transmit_DMA+0x26>
 800bebc:	88fb      	ldrh	r3, [r7, #6]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d101      	bne.n	800bec6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800bec2:	2301      	movs	r3, #1
 800bec4:	e05b      	b.n	800bf7e <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800bec6:	68ba      	ldr	r2, [r7, #8]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	88fa      	ldrh	r2, [r7, #6]
 800bed0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	88fa      	ldrh	r2, [r7, #6]
 800bed6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2200      	movs	r2, #0
 800bedc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2221      	movs	r2, #33	@ 0x21
 800bee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800beea:	4a27      	ldr	r2, [pc, #156]	@ (800bf88 <HAL_UART_Transmit_DMA+0xec>)
 800beec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bef2:	4a26      	ldr	r2, [pc, #152]	@ (800bf8c <HAL_UART_Transmit_DMA+0xf0>)
 800bef4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800befa:	4a25      	ldr	r2, [pc, #148]	@ (800bf90 <HAL_UART_Transmit_DMA+0xf4>)
 800befc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf02:	2200      	movs	r2, #0
 800bf04:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800bf06:	f107 0308 	add.w	r3, r7, #8
 800bf0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800bf10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf12:	6819      	ldr	r1, [r3, #0]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	3304      	adds	r3, #4
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	88fb      	ldrh	r3, [r7, #6]
 800bf1e:	f7fc fe0f 	bl	8008b40 <HAL_DMA_Start_IT>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d008      	beq.n	800bf3a <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2210      	movs	r2, #16
 800bf2c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2220      	movs	r2, #32
 800bf32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800bf36:	2301      	movs	r3, #1
 800bf38:	e021      	b.n	800bf7e <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bf42:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	3314      	adds	r3, #20
 800bf4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	e853 3f00 	ldrex	r3, [r3]
 800bf52:	617b      	str	r3, [r7, #20]
   return(result);
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	3314      	adds	r3, #20
 800bf62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf64:	627a      	str	r2, [r7, #36]	@ 0x24
 800bf66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf68:	6a39      	ldr	r1, [r7, #32]
 800bf6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf6c:	e841 2300 	strex	r3, r2, [r1]
 800bf70:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf72:	69fb      	ldr	r3, [r7, #28]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d1e5      	bne.n	800bf44 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	e000      	b.n	800bf7e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800bf7c:	2302      	movs	r3, #2
  }
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3730      	adds	r7, #48	@ 0x30
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	0800c5ed 	.word	0x0800c5ed
 800bf8c:	0800c687 	.word	0x0800c687
 800bf90:	0800c80b 	.word	0x0800c80b

0800bf94 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b08c      	sub	sp, #48	@ 0x30
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	2b20      	cmp	r3, #32
 800bfac:	d146      	bne.n	800c03c <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d002      	beq.n	800bfba <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800bfb4:	88fb      	ldrh	r3, [r7, #6]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d101      	bne.n	800bfbe <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e03f      	b.n	800c03e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800bfca:	88fb      	ldrh	r3, [r7, #6]
 800bfcc:	461a      	mov	r2, r3
 800bfce:	68b9      	ldr	r1, [r7, #8]
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f000 fcbd 	bl	800c950 <UART_Start_Receive_DMA>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d125      	bne.n	800c030 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	613b      	str	r3, [r7, #16]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	613b      	str	r3, [r7, #16]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	613b      	str	r3, [r7, #16]
 800bff8:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	330c      	adds	r3, #12
 800c000:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	e853 3f00 	ldrex	r3, [r3]
 800c008:	617b      	str	r3, [r7, #20]
   return(result);
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	f043 0310 	orr.w	r3, r3, #16
 800c010:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	330c      	adds	r3, #12
 800c018:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c01a:	627a      	str	r2, [r7, #36]	@ 0x24
 800c01c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01e:	6a39      	ldr	r1, [r7, #32]
 800c020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c022:	e841 2300 	strex	r3, r2, [r1]
 800c026:	61fb      	str	r3, [r7, #28]
   return(result);
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d1e5      	bne.n	800bffa <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800c02e:	e002      	b.n	800c036 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800c036:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c03a:	e000      	b.n	800c03e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800c03c:	2302      	movs	r3, #2
  }
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3730      	adds	r7, #48	@ 0x30
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
	...

0800c048 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b0ba      	sub	sp, #232	@ 0xe8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	68db      	ldr	r3, [r3, #12]
 800c060:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	695b      	ldr	r3, [r3, #20]
 800c06a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c06e:	2300      	movs	r3, #0
 800c070:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c074:	2300      	movs	r3, #0
 800c076:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c07a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c07e:	f003 030f 	and.w	r3, r3, #15
 800c082:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d10f      	bne.n	800c0ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c08e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c092:	f003 0320 	and.w	r3, r3, #32
 800c096:	2b00      	cmp	r3, #0
 800c098:	d009      	beq.n	800c0ae <HAL_UART_IRQHandler+0x66>
 800c09a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c09e:	f003 0320 	and.w	r3, r3, #32
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d003      	beq.n	800c0ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 fdfc 	bl	800cca4 <UART_Receive_IT>
      return;
 800c0ac:	e273      	b.n	800c596 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c0ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	f000 80de 	beq.w	800c274 <HAL_UART_IRQHandler+0x22c>
 800c0b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0bc:	f003 0301 	and.w	r3, r3, #1
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d106      	bne.n	800c0d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c0c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	f000 80d1 	beq.w	800c274 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c0d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0d6:	f003 0301 	and.w	r3, r3, #1
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00b      	beq.n	800c0f6 <HAL_UART_IRQHandler+0xae>
 800c0de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d005      	beq.n	800c0f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0ee:	f043 0201 	orr.w	r2, r3, #1
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c0f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0fa:	f003 0304 	and.w	r3, r3, #4
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00b      	beq.n	800c11a <HAL_UART_IRQHandler+0xd2>
 800c102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c106:	f003 0301 	and.w	r3, r3, #1
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d005      	beq.n	800c11a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c112:	f043 0202 	orr.w	r2, r3, #2
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c11a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c11e:	f003 0302 	and.w	r3, r3, #2
 800c122:	2b00      	cmp	r3, #0
 800c124:	d00b      	beq.n	800c13e <HAL_UART_IRQHandler+0xf6>
 800c126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c12a:	f003 0301 	and.w	r3, r3, #1
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d005      	beq.n	800c13e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c136:	f043 0204 	orr.w	r2, r3, #4
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c13e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c142:	f003 0308 	and.w	r3, r3, #8
 800c146:	2b00      	cmp	r3, #0
 800c148:	d011      	beq.n	800c16e <HAL_UART_IRQHandler+0x126>
 800c14a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c14e:	f003 0320 	and.w	r3, r3, #32
 800c152:	2b00      	cmp	r3, #0
 800c154:	d105      	bne.n	800c162 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c15a:	f003 0301 	and.w	r3, r3, #1
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d005      	beq.n	800c16e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c166:	f043 0208 	orr.w	r2, r3, #8
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c172:	2b00      	cmp	r3, #0
 800c174:	f000 820a 	beq.w	800c58c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c17c:	f003 0320 	and.w	r3, r3, #32
 800c180:	2b00      	cmp	r3, #0
 800c182:	d008      	beq.n	800c196 <HAL_UART_IRQHandler+0x14e>
 800c184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c188:	f003 0320 	and.w	r3, r3, #32
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d002      	beq.n	800c196 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 fd87 	bl	800cca4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	695b      	ldr	r3, [r3, #20]
 800c19c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1a0:	2b40      	cmp	r3, #64	@ 0x40
 800c1a2:	bf0c      	ite	eq
 800c1a4:	2301      	moveq	r3, #1
 800c1a6:	2300      	movne	r3, #0
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1b2:	f003 0308 	and.w	r3, r3, #8
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d103      	bne.n	800c1c2 <HAL_UART_IRQHandler+0x17a>
 800c1ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d04f      	beq.n	800c262 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fc92 	bl	800caec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	695b      	ldr	r3, [r3, #20]
 800c1ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1d2:	2b40      	cmp	r3, #64	@ 0x40
 800c1d4:	d141      	bne.n	800c25a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	3314      	adds	r3, #20
 800c1dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c1e4:	e853 3f00 	ldrex	r3, [r3]
 800c1e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c1ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c1f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c1f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	3314      	adds	r3, #20
 800c1fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c202:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c206:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c20e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c212:	e841 2300 	strex	r3, r2, [r1]
 800c216:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c21a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1d9      	bne.n	800c1d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c226:	2b00      	cmp	r3, #0
 800c228:	d013      	beq.n	800c252 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c22e:	4a8a      	ldr	r2, [pc, #552]	@ (800c458 <HAL_UART_IRQHandler+0x410>)
 800c230:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c236:	4618      	mov	r0, r3
 800c238:	f7fc fd4a 	bl	8008cd0 <HAL_DMA_Abort_IT>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d016      	beq.n	800c270 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c24c:	4610      	mov	r0, r2
 800c24e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c250:	e00e      	b.n	800c270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 f9c0 	bl	800c5d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c258:	e00a      	b.n	800c270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f000 f9bc 	bl	800c5d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c260:	e006      	b.n	800c270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 f9b8 	bl	800c5d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c26e:	e18d      	b.n	800c58c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c270:	bf00      	nop
    return;
 800c272:	e18b      	b.n	800c58c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c278:	2b01      	cmp	r3, #1
 800c27a:	f040 8167 	bne.w	800c54c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c27e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c282:	f003 0310 	and.w	r3, r3, #16
 800c286:	2b00      	cmp	r3, #0
 800c288:	f000 8160 	beq.w	800c54c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800c28c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c290:	f003 0310 	and.w	r3, r3, #16
 800c294:	2b00      	cmp	r3, #0
 800c296:	f000 8159 	beq.w	800c54c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c29a:	2300      	movs	r3, #0
 800c29c:	60bb      	str	r3, [r7, #8]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	60bb      	str	r3, [r7, #8]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	60bb      	str	r3, [r7, #8]
 800c2ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	695b      	ldr	r3, [r3, #20]
 800c2b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2ba:	2b40      	cmp	r3, #64	@ 0x40
 800c2bc:	f040 80ce 	bne.w	800c45c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c2cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f000 80a9 	beq.w	800c428 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c2da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	f080 80a2 	bcs.w	800c428 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c2ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2f0:	69db      	ldr	r3, [r3, #28]
 800c2f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c2f6:	f000 8088 	beq.w	800c40a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	330c      	adds	r3, #12
 800c300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c304:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c308:	e853 3f00 	ldrex	r3, [r3]
 800c30c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c310:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c318:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	330c      	adds	r3, #12
 800c322:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c326:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c32a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c332:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c336:	e841 2300 	strex	r3, r2, [r1]
 800c33a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c33e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c342:	2b00      	cmp	r3, #0
 800c344:	d1d9      	bne.n	800c2fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	3314      	adds	r3, #20
 800c34c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c34e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c350:	e853 3f00 	ldrex	r3, [r3]
 800c354:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c356:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c358:	f023 0301 	bic.w	r3, r3, #1
 800c35c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	3314      	adds	r3, #20
 800c366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c36a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c36e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c370:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c372:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c376:	e841 2300 	strex	r3, r2, [r1]
 800c37a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c37c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d1e1      	bne.n	800c346 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	3314      	adds	r3, #20
 800c388:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c38a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c38c:	e853 3f00 	ldrex	r3, [r3]
 800c390:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c394:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c398:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	3314      	adds	r3, #20
 800c3a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c3a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c3a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c3ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c3ae:	e841 2300 	strex	r3, r2, [r1]
 800c3b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c3b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d1e3      	bne.n	800c382 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2220      	movs	r2, #32
 800c3be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	330c      	adds	r3, #12
 800c3ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3d2:	e853 3f00 	ldrex	r3, [r3]
 800c3d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c3d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3da:	f023 0310 	bic.w	r3, r3, #16
 800c3de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	330c      	adds	r3, #12
 800c3e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c3ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c3ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c3f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c3f4:	e841 2300 	strex	r3, r2, [r1]
 800c3f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c3fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d1e3      	bne.n	800c3c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c404:	4618      	mov	r0, r3
 800c406:	f7fc fbf3 	bl	8008bf0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2202      	movs	r2, #2
 800c40e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c418:	b29b      	uxth	r3, r3
 800c41a:	1ad3      	subs	r3, r2, r3
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	4619      	mov	r1, r3
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f7f8 fd85 	bl	8004f30 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c426:	e0b3      	b.n	800c590 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c42c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c430:	429a      	cmp	r2, r3
 800c432:	f040 80ad 	bne.w	800c590 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c43a:	69db      	ldr	r3, [r3, #28]
 800c43c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c440:	f040 80a6 	bne.w	800c590 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2202      	movs	r2, #2
 800c448:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c44e:	4619      	mov	r1, r3
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f7f8 fd6d 	bl	8004f30 <HAL_UARTEx_RxEventCallback>
      return;
 800c456:	e09b      	b.n	800c590 <HAL_UART_IRQHandler+0x548>
 800c458:	0800cbb3 	.word	0x0800cbb3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c464:	b29b      	uxth	r3, r3
 800c466:	1ad3      	subs	r3, r2, r3
 800c468:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c470:	b29b      	uxth	r3, r3
 800c472:	2b00      	cmp	r3, #0
 800c474:	f000 808e 	beq.w	800c594 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800c478:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f000 8089 	beq.w	800c594 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	330c      	adds	r3, #12
 800c488:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c48a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c48c:	e853 3f00 	ldrex	r3, [r3]
 800c490:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c494:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c498:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	330c      	adds	r3, #12
 800c4a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c4a6:	647a      	str	r2, [r7, #68]	@ 0x44
 800c4a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c4ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c4ae:	e841 2300 	strex	r3, r2, [r1]
 800c4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c4b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d1e3      	bne.n	800c482 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	3314      	adds	r3, #20
 800c4c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c4:	e853 3f00 	ldrex	r3, [r3]
 800c4c8:	623b      	str	r3, [r7, #32]
   return(result);
 800c4ca:	6a3b      	ldr	r3, [r7, #32]
 800c4cc:	f023 0301 	bic.w	r3, r3, #1
 800c4d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	3314      	adds	r3, #20
 800c4da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c4de:	633a      	str	r2, [r7, #48]	@ 0x30
 800c4e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c4e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4e6:	e841 2300 	strex	r3, r2, [r1]
 800c4ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d1e3      	bne.n	800c4ba <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2220      	movs	r2, #32
 800c4f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	330c      	adds	r3, #12
 800c506:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	e853 3f00 	ldrex	r3, [r3]
 800c50e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f023 0310 	bic.w	r3, r3, #16
 800c516:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	330c      	adds	r3, #12
 800c520:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c524:	61fa      	str	r2, [r7, #28]
 800c526:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c528:	69b9      	ldr	r1, [r7, #24]
 800c52a:	69fa      	ldr	r2, [r7, #28]
 800c52c:	e841 2300 	strex	r3, r2, [r1]
 800c530:	617b      	str	r3, [r7, #20]
   return(result);
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1e3      	bne.n	800c500 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2202      	movs	r2, #2
 800c53c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c53e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c542:	4619      	mov	r1, r3
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f7f8 fcf3 	bl	8004f30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c54a:	e023      	b.n	800c594 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c54c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c554:	2b00      	cmp	r3, #0
 800c556:	d009      	beq.n	800c56c <HAL_UART_IRQHandler+0x524>
 800c558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c55c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c560:	2b00      	cmp	r3, #0
 800c562:	d003      	beq.n	800c56c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 fb35 	bl	800cbd4 <UART_Transmit_IT>
    return;
 800c56a:	e014      	b.n	800c596 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c56c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c574:	2b00      	cmp	r3, #0
 800c576:	d00e      	beq.n	800c596 <HAL_UART_IRQHandler+0x54e>
 800c578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c57c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c580:	2b00      	cmp	r3, #0
 800c582:	d008      	beq.n	800c596 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 fb75 	bl	800cc74 <UART_EndTransmit_IT>
    return;
 800c58a:	e004      	b.n	800c596 <HAL_UART_IRQHandler+0x54e>
    return;
 800c58c:	bf00      	nop
 800c58e:	e002      	b.n	800c596 <HAL_UART_IRQHandler+0x54e>
      return;
 800c590:	bf00      	nop
 800c592:	e000      	b.n	800c596 <HAL_UART_IRQHandler+0x54e>
      return;
 800c594:	bf00      	nop
  }
}
 800c596:	37e8      	adds	r7, #232	@ 0xe8
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c5a4:	bf00      	nop
 800c5a6:	370c      	adds	r7, #12
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c5b8:	bf00      	nop
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c5cc:	bf00      	nop
 800c5ce:	370c      	adds	r7, #12
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr

0800c5d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c5e0:	bf00      	nop
 800c5e2:	370c      	adds	r7, #12
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr

0800c5ec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b090      	sub	sp, #64	@ 0x40
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c604:	2b00      	cmp	r3, #0
 800c606:	d137      	bne.n	800c678 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800c608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c60a:	2200      	movs	r2, #0
 800c60c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c60e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	3314      	adds	r3, #20
 800c614:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c618:	e853 3f00 	ldrex	r3, [r3]
 800c61c:	623b      	str	r3, [r7, #32]
   return(result);
 800c61e:	6a3b      	ldr	r3, [r7, #32]
 800c620:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c624:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	3314      	adds	r3, #20
 800c62c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c62e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c630:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c632:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c634:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c636:	e841 2300 	strex	r3, r2, [r1]
 800c63a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1e5      	bne.n	800c60e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	330c      	adds	r3, #12
 800c648:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	e853 3f00 	ldrex	r3, [r3]
 800c650:	60fb      	str	r3, [r7, #12]
   return(result);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c658:	637b      	str	r3, [r7, #52]	@ 0x34
 800c65a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	330c      	adds	r3, #12
 800c660:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c662:	61fa      	str	r2, [r7, #28]
 800c664:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c666:	69b9      	ldr	r1, [r7, #24]
 800c668:	69fa      	ldr	r2, [r7, #28]
 800c66a:	e841 2300 	strex	r3, r2, [r1]
 800c66e:	617b      	str	r3, [r7, #20]
   return(result);
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d1e5      	bne.n	800c642 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c676:	e002      	b.n	800c67e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c678:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c67a:	f7f8 fc9b 	bl	8004fb4 <HAL_UART_TxCpltCallback>
}
 800c67e:	bf00      	nop
 800c680:	3740      	adds	r7, #64	@ 0x40
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c686:	b580      	push	{r7, lr}
 800c688:	b084      	sub	sp, #16
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c692:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c694:	68f8      	ldr	r0, [r7, #12]
 800c696:	f7ff ff81 	bl	800c59c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c69a:	bf00      	nop
 800c69c:	3710      	adds	r7, #16
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b09c      	sub	sp, #112	@ 0x70
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6ae:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d172      	bne.n	800c7a4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c6be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	330c      	adds	r3, #12
 800c6ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6ce:	e853 3f00 	ldrex	r3, [r3]
 800c6d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c6d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c6da:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c6dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	330c      	adds	r3, #12
 800c6e2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c6e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c6e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c6ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c6ec:	e841 2300 	strex	r3, r2, [r1]
 800c6f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c6f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d1e5      	bne.n	800c6c4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	3314      	adds	r3, #20
 800c6fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c702:	e853 3f00 	ldrex	r3, [r3]
 800c706:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c70a:	f023 0301 	bic.w	r3, r3, #1
 800c70e:	667b      	str	r3, [r7, #100]	@ 0x64
 800c710:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	3314      	adds	r3, #20
 800c716:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c718:	647a      	str	r2, [r7, #68]	@ 0x44
 800c71a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c71e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c720:	e841 2300 	strex	r3, r2, [r1]
 800c724:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d1e5      	bne.n	800c6f8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c72c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	3314      	adds	r3, #20
 800c732:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c736:	e853 3f00 	ldrex	r3, [r3]
 800c73a:	623b      	str	r3, [r7, #32]
   return(result);
 800c73c:	6a3b      	ldr	r3, [r7, #32]
 800c73e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c742:	663b      	str	r3, [r7, #96]	@ 0x60
 800c744:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	3314      	adds	r3, #20
 800c74a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c74c:	633a      	str	r2, [r7, #48]	@ 0x30
 800c74e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c750:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c752:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c754:	e841 2300 	strex	r3, r2, [r1]
 800c758:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d1e5      	bne.n	800c72c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c760:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c762:	2220      	movs	r2, #32
 800c764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c768:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c76a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d119      	bne.n	800c7a4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	330c      	adds	r3, #12
 800c776:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	e853 3f00 	ldrex	r3, [r3]
 800c77e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f023 0310 	bic.w	r3, r3, #16
 800c786:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	330c      	adds	r3, #12
 800c78e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c790:	61fa      	str	r2, [r7, #28]
 800c792:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c794:	69b9      	ldr	r1, [r7, #24]
 800c796:	69fa      	ldr	r2, [r7, #28]
 800c798:	e841 2300 	strex	r3, r2, [r1]
 800c79c:	617b      	str	r3, [r7, #20]
   return(result);
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d1e5      	bne.n	800c770 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c7a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d106      	bne.n	800c7c0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c7b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c7ba:	f7f8 fbb9 	bl	8004f30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c7be:	e002      	b.n	800c7c6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800c7c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c7c2:	f7ff fef5 	bl	800c5b0 <HAL_UART_RxCpltCallback>
}
 800c7c6:	bf00      	nop
 800c7c8:	3770      	adds	r7, #112	@ 0x70
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}

0800c7ce <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c7ce:	b580      	push	{r7, lr}
 800c7d0:	b084      	sub	sp, #16
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7da:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d108      	bne.n	800c7fc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c7ee:	085b      	lsrs	r3, r3, #1
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	68f8      	ldr	r0, [r7, #12]
 800c7f6:	f7f8 fb9b 	bl	8004f30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c7fa:	e002      	b.n	800c802 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800c7fc:	68f8      	ldr	r0, [r7, #12]
 800c7fe:	f7ff fee1 	bl	800c5c4 <HAL_UART_RxHalfCpltCallback>
}
 800c802:	bf00      	nop
 800c804:	3710      	adds	r7, #16
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}

0800c80a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c80a:	b580      	push	{r7, lr}
 800c80c:	b084      	sub	sp, #16
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c812:	2300      	movs	r3, #0
 800c814:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c81a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	695b      	ldr	r3, [r3, #20]
 800c822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c826:	2b80      	cmp	r3, #128	@ 0x80
 800c828:	bf0c      	ite	eq
 800c82a:	2301      	moveq	r3, #1
 800c82c:	2300      	movne	r3, #0
 800c82e:	b2db      	uxtb	r3, r3
 800c830:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	2b21      	cmp	r3, #33	@ 0x21
 800c83c:	d108      	bne.n	800c850 <UART_DMAError+0x46>
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d005      	beq.n	800c850 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	2200      	movs	r2, #0
 800c848:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800c84a:	68b8      	ldr	r0, [r7, #8]
 800c84c:	f000 f926 	bl	800ca9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	695b      	ldr	r3, [r3, #20]
 800c856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c85a:	2b40      	cmp	r3, #64	@ 0x40
 800c85c:	bf0c      	ite	eq
 800c85e:	2301      	moveq	r3, #1
 800c860:	2300      	movne	r3, #0
 800c862:	b2db      	uxtb	r3, r3
 800c864:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	2b22      	cmp	r3, #34	@ 0x22
 800c870:	d108      	bne.n	800c884 <UART_DMAError+0x7a>
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d005      	beq.n	800c884 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	2200      	movs	r2, #0
 800c87c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800c87e:	68b8      	ldr	r0, [r7, #8]
 800c880:	f000 f934 	bl	800caec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c888:	f043 0210 	orr.w	r2, r3, #16
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c890:	68b8      	ldr	r0, [r7, #8]
 800c892:	f7ff fea1 	bl	800c5d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c896:	bf00      	nop
 800c898:	3710      	adds	r7, #16
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}

0800c89e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c89e:	b580      	push	{r7, lr}
 800c8a0:	b086      	sub	sp, #24
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	60f8      	str	r0, [r7, #12]
 800c8a6:	60b9      	str	r1, [r7, #8]
 800c8a8:	603b      	str	r3, [r7, #0]
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8ae:	e03b      	b.n	800c928 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c8b0:	6a3b      	ldr	r3, [r7, #32]
 800c8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8b6:	d037      	beq.n	800c928 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8b8:	f7fb fafa 	bl	8007eb0 <HAL_GetTick>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	1ad3      	subs	r3, r2, r3
 800c8c2:	6a3a      	ldr	r2, [r7, #32]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d302      	bcc.n	800c8ce <UART_WaitOnFlagUntilTimeout+0x30>
 800c8c8:	6a3b      	ldr	r3, [r7, #32]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d101      	bne.n	800c8d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c8ce:	2303      	movs	r3, #3
 800c8d0:	e03a      	b.n	800c948 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	68db      	ldr	r3, [r3, #12]
 800c8d8:	f003 0304 	and.w	r3, r3, #4
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d023      	beq.n	800c928 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	2b80      	cmp	r3, #128	@ 0x80
 800c8e4:	d020      	beq.n	800c928 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	2b40      	cmp	r3, #64	@ 0x40
 800c8ea:	d01d      	beq.n	800c928 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f003 0308 	and.w	r3, r3, #8
 800c8f6:	2b08      	cmp	r3, #8
 800c8f8:	d116      	bne.n	800c928 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	617b      	str	r3, [r7, #20]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	617b      	str	r3, [r7, #20]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	617b      	str	r3, [r7, #20]
 800c90e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c910:	68f8      	ldr	r0, [r7, #12]
 800c912:	f000 f8eb 	bl	800caec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2208      	movs	r2, #8
 800c91a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2200      	movs	r2, #0
 800c920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800c924:	2301      	movs	r3, #1
 800c926:	e00f      	b.n	800c948 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	4013      	ands	r3, r2
 800c932:	68ba      	ldr	r2, [r7, #8]
 800c934:	429a      	cmp	r2, r3
 800c936:	bf0c      	ite	eq
 800c938:	2301      	moveq	r3, #1
 800c93a:	2300      	movne	r3, #0
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	461a      	mov	r2, r3
 800c940:	79fb      	ldrb	r3, [r7, #7]
 800c942:	429a      	cmp	r2, r3
 800c944:	d0b4      	beq.n	800c8b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c946:	2300      	movs	r3, #0
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3718      	adds	r7, #24
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b098      	sub	sp, #96	@ 0x60
 800c954:	af00      	add	r7, sp, #0
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	60b9      	str	r1, [r7, #8]
 800c95a:	4613      	mov	r3, r2
 800c95c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c95e:	68ba      	ldr	r2, [r7, #8]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	88fa      	ldrh	r2, [r7, #6]
 800c968:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2200      	movs	r2, #0
 800c96e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2222      	movs	r2, #34	@ 0x22
 800c974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c97c:	4a44      	ldr	r2, [pc, #272]	@ (800ca90 <UART_Start_Receive_DMA+0x140>)
 800c97e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c984:	4a43      	ldr	r2, [pc, #268]	@ (800ca94 <UART_Start_Receive_DMA+0x144>)
 800c986:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c98c:	4a42      	ldr	r2, [pc, #264]	@ (800ca98 <UART_Start_Receive_DMA+0x148>)
 800c98e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c994:	2200      	movs	r2, #0
 800c996:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c998:	f107 0308 	add.w	r3, r7, #8
 800c99c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	3304      	adds	r3, #4
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	88fb      	ldrh	r3, [r7, #6]
 800c9b0:	f7fc f8c6 	bl	8008b40 <HAL_DMA_Start_IT>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d008      	beq.n	800c9cc <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2210      	movs	r2, #16
 800c9be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2220      	movs	r2, #32
 800c9c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	e05d      	b.n	800ca88 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	613b      	str	r3, [r7, #16]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	613b      	str	r3, [r7, #16]
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	613b      	str	r3, [r7, #16]
 800c9e0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	691b      	ldr	r3, [r3, #16]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d019      	beq.n	800ca1e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	330c      	adds	r3, #12
 800c9f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9f4:	e853 3f00 	ldrex	r3, [r3]
 800c9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c9fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ca00:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	330c      	adds	r3, #12
 800ca08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ca0a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ca0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca0e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ca10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ca12:	e841 2300 	strex	r3, r2, [r1]
 800ca16:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ca18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d1e5      	bne.n	800c9ea <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	3314      	adds	r3, #20
 800ca24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca28:	e853 3f00 	ldrex	r3, [r3]
 800ca2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca30:	f043 0301 	orr.w	r3, r3, #1
 800ca34:	657b      	str	r3, [r7, #84]	@ 0x54
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	3314      	adds	r3, #20
 800ca3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ca3e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ca40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca42:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ca44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca46:	e841 2300 	strex	r3, r2, [r1]
 800ca4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ca4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d1e5      	bne.n	800ca1e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	3314      	adds	r3, #20
 800ca58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca5a:	69bb      	ldr	r3, [r7, #24]
 800ca5c:	e853 3f00 	ldrex	r3, [r3]
 800ca60:	617b      	str	r3, [r7, #20]
   return(result);
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca68:	653b      	str	r3, [r7, #80]	@ 0x50
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	3314      	adds	r3, #20
 800ca70:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ca72:	627a      	str	r2, [r7, #36]	@ 0x24
 800ca74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca76:	6a39      	ldr	r1, [r7, #32]
 800ca78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca7a:	e841 2300 	strex	r3, r2, [r1]
 800ca7e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca80:	69fb      	ldr	r3, [r7, #28]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d1e5      	bne.n	800ca52 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800ca86:	2300      	movs	r3, #0
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3760      	adds	r7, #96	@ 0x60
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}
 800ca90:	0800c6a3 	.word	0x0800c6a3
 800ca94:	0800c7cf 	.word	0x0800c7cf
 800ca98:	0800c80b 	.word	0x0800c80b

0800ca9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b089      	sub	sp, #36	@ 0x24
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	330c      	adds	r3, #12
 800caaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	e853 3f00 	ldrex	r3, [r3]
 800cab2:	60bb      	str	r3, [r7, #8]
   return(result);
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800caba:	61fb      	str	r3, [r7, #28]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	330c      	adds	r3, #12
 800cac2:	69fa      	ldr	r2, [r7, #28]
 800cac4:	61ba      	str	r2, [r7, #24]
 800cac6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cac8:	6979      	ldr	r1, [r7, #20]
 800caca:	69ba      	ldr	r2, [r7, #24]
 800cacc:	e841 2300 	strex	r3, r2, [r1]
 800cad0:	613b      	str	r3, [r7, #16]
   return(result);
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d1e5      	bne.n	800caa4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2220      	movs	r2, #32
 800cadc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800cae0:	bf00      	nop
 800cae2:	3724      	adds	r7, #36	@ 0x24
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr

0800caec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800caec:	b480      	push	{r7}
 800caee:	b095      	sub	sp, #84	@ 0x54
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	330c      	adds	r3, #12
 800cafa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cafc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cafe:	e853 3f00 	ldrex	r3, [r3]
 800cb02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cb04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	330c      	adds	r3, #12
 800cb12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb14:	643a      	str	r2, [r7, #64]	@ 0x40
 800cb16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cb1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cb1c:	e841 2300 	strex	r3, r2, [r1]
 800cb20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cb22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d1e5      	bne.n	800caf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	3314      	adds	r3, #20
 800cb2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb30:	6a3b      	ldr	r3, [r7, #32]
 800cb32:	e853 3f00 	ldrex	r3, [r3]
 800cb36:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	f023 0301 	bic.w	r3, r3, #1
 800cb3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	3314      	adds	r3, #20
 800cb46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cb4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb50:	e841 2300 	strex	r3, r2, [r1]
 800cb54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d1e5      	bne.n	800cb28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d119      	bne.n	800cb98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	330c      	adds	r3, #12
 800cb6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	e853 3f00 	ldrex	r3, [r3]
 800cb72:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	f023 0310 	bic.w	r3, r3, #16
 800cb7a:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	330c      	adds	r3, #12
 800cb82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb84:	61ba      	str	r2, [r7, #24]
 800cb86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb88:	6979      	ldr	r1, [r7, #20]
 800cb8a:	69ba      	ldr	r2, [r7, #24]
 800cb8c:	e841 2300 	strex	r3, r2, [r1]
 800cb90:	613b      	str	r3, [r7, #16]
   return(result);
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d1e5      	bne.n	800cb64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2220      	movs	r2, #32
 800cb9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800cba6:	bf00      	nop
 800cba8:	3754      	adds	r7, #84	@ 0x54
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr

0800cbb2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b084      	sub	sp, #16
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cbc6:	68f8      	ldr	r0, [r7, #12]
 800cbc8:	f7ff fd06 	bl	800c5d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbcc:	bf00      	nop
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b085      	sub	sp, #20
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	2b21      	cmp	r3, #33	@ 0x21
 800cbe6:	d13e      	bne.n	800cc66 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	689b      	ldr	r3, [r3, #8]
 800cbec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbf0:	d114      	bne.n	800cc1c <UART_Transmit_IT+0x48>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	691b      	ldr	r3, [r3, #16]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d110      	bne.n	800cc1c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6a1b      	ldr	r3, [r3, #32]
 800cbfe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	881b      	ldrh	r3, [r3, #0]
 800cc04:	461a      	mov	r2, r3
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc0e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6a1b      	ldr	r3, [r3, #32]
 800cc14:	1c9a      	adds	r2, r3, #2
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	621a      	str	r2, [r3, #32]
 800cc1a:	e008      	b.n	800cc2e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6a1b      	ldr	r3, [r3, #32]
 800cc20:	1c59      	adds	r1, r3, #1
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	6211      	str	r1, [r2, #32]
 800cc26:	781a      	ldrb	r2, [r3, #0]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	3b01      	subs	r3, #1
 800cc36:	b29b      	uxth	r3, r3
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d10f      	bne.n	800cc62 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	68da      	ldr	r2, [r3, #12]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	68da      	ldr	r2, [r3, #12]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cc60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cc62:	2300      	movs	r3, #0
 800cc64:	e000      	b.n	800cc68 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cc66:	2302      	movs	r3, #2
  }
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3714      	adds	r7, #20
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr

0800cc74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	68da      	ldr	r2, [r3, #12]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cc8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2220      	movs	r2, #32
 800cc90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f7f8 f98d 	bl	8004fb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b08c      	sub	sp, #48	@ 0x30
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800ccac:	2300      	movs	r3, #0
 800ccae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	2b22      	cmp	r3, #34	@ 0x22
 800ccbe:	f040 80aa 	bne.w	800ce16 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ccca:	d115      	bne.n	800ccf8 <UART_Receive_IT+0x54>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	691b      	ldr	r3, [r3, #16]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d111      	bne.n	800ccf8 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccd8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cce6:	b29a      	uxth	r2, r3
 800cce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccf0:	1c9a      	adds	r2, r3, #2
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	629a      	str	r2, [r3, #40]	@ 0x28
 800ccf6:	e024      	b.n	800cd42 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	689b      	ldr	r3, [r3, #8]
 800cd02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd06:	d007      	beq.n	800cd18 <UART_Receive_IT+0x74>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	689b      	ldr	r3, [r3, #8]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d10a      	bne.n	800cd26 <UART_Receive_IT+0x82>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	691b      	ldr	r3, [r3, #16]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d106      	bne.n	800cd26 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	b2da      	uxtb	r2, r3
 800cd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd22:	701a      	strb	r2, [r3, #0]
 800cd24:	e008      	b.n	800cd38 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd32:	b2da      	uxtb	r2, r3
 800cd34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd3c:	1c5a      	adds	r2, r3, #1
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	3b01      	subs	r3, #1
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	4619      	mov	r1, r3
 800cd50:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d15d      	bne.n	800ce12 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	68da      	ldr	r2, [r3, #12]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f022 0220 	bic.w	r2, r2, #32
 800cd64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	68da      	ldr	r2, [r3, #12]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	695a      	ldr	r2, [r3, #20]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f022 0201 	bic.w	r2, r2, #1
 800cd84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2220      	movs	r2, #32
 800cd8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2200      	movs	r2, #0
 800cd92:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d135      	bne.n	800ce08 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	330c      	adds	r3, #12
 800cda8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	e853 3f00 	ldrex	r3, [r3]
 800cdb0:	613b      	str	r3, [r7, #16]
   return(result);
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	f023 0310 	bic.w	r3, r3, #16
 800cdb8:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	330c      	adds	r3, #12
 800cdc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdc2:	623a      	str	r2, [r7, #32]
 800cdc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc6:	69f9      	ldr	r1, [r7, #28]
 800cdc8:	6a3a      	ldr	r2, [r7, #32]
 800cdca:	e841 2300 	strex	r3, r2, [r1]
 800cdce:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdd0:	69bb      	ldr	r3, [r7, #24]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d1e5      	bne.n	800cda2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f003 0310 	and.w	r3, r3, #16
 800cde0:	2b10      	cmp	r3, #16
 800cde2:	d10a      	bne.n	800cdfa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cde4:	2300      	movs	r3, #0
 800cde6:	60fb      	str	r3, [r7, #12]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	60fb      	str	r3, [r7, #12]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	60fb      	str	r3, [r7, #12]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cdfe:	4619      	mov	r1, r3
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7f8 f895 	bl	8004f30 <HAL_UARTEx_RxEventCallback>
 800ce06:	e002      	b.n	800ce0e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f7ff fbd1 	bl	800c5b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	e002      	b.n	800ce18 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ce12:	2300      	movs	r3, #0
 800ce14:	e000      	b.n	800ce18 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ce16:	2302      	movs	r3, #2
  }
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3730      	adds	r7, #48	@ 0x30
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}

0800ce20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce24:	b0c0      	sub	sp, #256	@ 0x100
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	691b      	ldr	r3, [r3, #16]
 800ce34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ce38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce3c:	68d9      	ldr	r1, [r3, #12]
 800ce3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	ea40 0301 	orr.w	r3, r0, r1
 800ce48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ce4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce4e:	689a      	ldr	r2, [r3, #8]
 800ce50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce54:	691b      	ldr	r3, [r3, #16]
 800ce56:	431a      	orrs	r2, r3
 800ce58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce5c:	695b      	ldr	r3, [r3, #20]
 800ce5e:	431a      	orrs	r2, r3
 800ce60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce64:	69db      	ldr	r3, [r3, #28]
 800ce66:	4313      	orrs	r3, r2
 800ce68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ce6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ce78:	f021 010c 	bic.w	r1, r1, #12
 800ce7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ce86:	430b      	orrs	r3, r1
 800ce88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ce8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	695b      	ldr	r3, [r3, #20]
 800ce92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ce96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce9a:	6999      	ldr	r1, [r3, #24]
 800ce9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	ea40 0301 	orr.w	r3, r0, r1
 800cea6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	4b8f      	ldr	r3, [pc, #572]	@ (800d0ec <UART_SetConfig+0x2cc>)
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d005      	beq.n	800cec0 <UART_SetConfig+0xa0>
 800ceb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	4b8d      	ldr	r3, [pc, #564]	@ (800d0f0 <UART_SetConfig+0x2d0>)
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d104      	bne.n	800ceca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cec0:	f7fd fdbe 	bl	800aa40 <HAL_RCC_GetPCLK2Freq>
 800cec4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800cec8:	e003      	b.n	800ced2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ceca:	f7fd fda5 	bl	800aa18 <HAL_RCC_GetPCLK1Freq>
 800cece:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ced2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ced6:	69db      	ldr	r3, [r3, #28]
 800ced8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cedc:	f040 810c 	bne.w	800d0f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cee4:	2200      	movs	r2, #0
 800cee6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ceea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ceee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800cef2:	4622      	mov	r2, r4
 800cef4:	462b      	mov	r3, r5
 800cef6:	1891      	adds	r1, r2, r2
 800cef8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800cefa:	415b      	adcs	r3, r3
 800cefc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cefe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800cf02:	4621      	mov	r1, r4
 800cf04:	eb12 0801 	adds.w	r8, r2, r1
 800cf08:	4629      	mov	r1, r5
 800cf0a:	eb43 0901 	adc.w	r9, r3, r1
 800cf0e:	f04f 0200 	mov.w	r2, #0
 800cf12:	f04f 0300 	mov.w	r3, #0
 800cf16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cf1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cf1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cf22:	4690      	mov	r8, r2
 800cf24:	4699      	mov	r9, r3
 800cf26:	4623      	mov	r3, r4
 800cf28:	eb18 0303 	adds.w	r3, r8, r3
 800cf2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cf30:	462b      	mov	r3, r5
 800cf32:	eb49 0303 	adc.w	r3, r9, r3
 800cf36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cf3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	2200      	movs	r2, #0
 800cf42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cf46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800cf4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cf4e:	460b      	mov	r3, r1
 800cf50:	18db      	adds	r3, r3, r3
 800cf52:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf54:	4613      	mov	r3, r2
 800cf56:	eb42 0303 	adc.w	r3, r2, r3
 800cf5a:	657b      	str	r3, [r7, #84]	@ 0x54
 800cf5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800cf60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800cf64:	f7f3 ffee 	bl	8000f44 <__aeabi_uldivmod>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	4b61      	ldr	r3, [pc, #388]	@ (800d0f4 <UART_SetConfig+0x2d4>)
 800cf6e:	fba3 2302 	umull	r2, r3, r3, r2
 800cf72:	095b      	lsrs	r3, r3, #5
 800cf74:	011c      	lsls	r4, r3, #4
 800cf76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cf80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800cf84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800cf88:	4642      	mov	r2, r8
 800cf8a:	464b      	mov	r3, r9
 800cf8c:	1891      	adds	r1, r2, r2
 800cf8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800cf90:	415b      	adcs	r3, r3
 800cf92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800cf98:	4641      	mov	r1, r8
 800cf9a:	eb12 0a01 	adds.w	sl, r2, r1
 800cf9e:	4649      	mov	r1, r9
 800cfa0:	eb43 0b01 	adc.w	fp, r3, r1
 800cfa4:	f04f 0200 	mov.w	r2, #0
 800cfa8:	f04f 0300 	mov.w	r3, #0
 800cfac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cfb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cfb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cfb8:	4692      	mov	sl, r2
 800cfba:	469b      	mov	fp, r3
 800cfbc:	4643      	mov	r3, r8
 800cfbe:	eb1a 0303 	adds.w	r3, sl, r3
 800cfc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cfc6:	464b      	mov	r3, r9
 800cfc8:	eb4b 0303 	adc.w	r3, fp, r3
 800cfcc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cfd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cfdc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800cfe0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	18db      	adds	r3, r3, r3
 800cfe8:	643b      	str	r3, [r7, #64]	@ 0x40
 800cfea:	4613      	mov	r3, r2
 800cfec:	eb42 0303 	adc.w	r3, r2, r3
 800cff0:	647b      	str	r3, [r7, #68]	@ 0x44
 800cff2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800cff6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800cffa:	f7f3 ffa3 	bl	8000f44 <__aeabi_uldivmod>
 800cffe:	4602      	mov	r2, r0
 800d000:	460b      	mov	r3, r1
 800d002:	4611      	mov	r1, r2
 800d004:	4b3b      	ldr	r3, [pc, #236]	@ (800d0f4 <UART_SetConfig+0x2d4>)
 800d006:	fba3 2301 	umull	r2, r3, r3, r1
 800d00a:	095b      	lsrs	r3, r3, #5
 800d00c:	2264      	movs	r2, #100	@ 0x64
 800d00e:	fb02 f303 	mul.w	r3, r2, r3
 800d012:	1acb      	subs	r3, r1, r3
 800d014:	00db      	lsls	r3, r3, #3
 800d016:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d01a:	4b36      	ldr	r3, [pc, #216]	@ (800d0f4 <UART_SetConfig+0x2d4>)
 800d01c:	fba3 2302 	umull	r2, r3, r3, r2
 800d020:	095b      	lsrs	r3, r3, #5
 800d022:	005b      	lsls	r3, r3, #1
 800d024:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d028:	441c      	add	r4, r3
 800d02a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d02e:	2200      	movs	r2, #0
 800d030:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d034:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d038:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d03c:	4642      	mov	r2, r8
 800d03e:	464b      	mov	r3, r9
 800d040:	1891      	adds	r1, r2, r2
 800d042:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d044:	415b      	adcs	r3, r3
 800d046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d048:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d04c:	4641      	mov	r1, r8
 800d04e:	1851      	adds	r1, r2, r1
 800d050:	6339      	str	r1, [r7, #48]	@ 0x30
 800d052:	4649      	mov	r1, r9
 800d054:	414b      	adcs	r3, r1
 800d056:	637b      	str	r3, [r7, #52]	@ 0x34
 800d058:	f04f 0200 	mov.w	r2, #0
 800d05c:	f04f 0300 	mov.w	r3, #0
 800d060:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d064:	4659      	mov	r1, fp
 800d066:	00cb      	lsls	r3, r1, #3
 800d068:	4651      	mov	r1, sl
 800d06a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d06e:	4651      	mov	r1, sl
 800d070:	00ca      	lsls	r2, r1, #3
 800d072:	4610      	mov	r0, r2
 800d074:	4619      	mov	r1, r3
 800d076:	4603      	mov	r3, r0
 800d078:	4642      	mov	r2, r8
 800d07a:	189b      	adds	r3, r3, r2
 800d07c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d080:	464b      	mov	r3, r9
 800d082:	460a      	mov	r2, r1
 800d084:	eb42 0303 	adc.w	r3, r2, r3
 800d088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d08c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d098:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d09c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	18db      	adds	r3, r3, r3
 800d0a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	eb42 0303 	adc.w	r3, r2, r3
 800d0ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d0ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d0b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d0b6:	f7f3 ff45 	bl	8000f44 <__aeabi_uldivmod>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	460b      	mov	r3, r1
 800d0be:	4b0d      	ldr	r3, [pc, #52]	@ (800d0f4 <UART_SetConfig+0x2d4>)
 800d0c0:	fba3 1302 	umull	r1, r3, r3, r2
 800d0c4:	095b      	lsrs	r3, r3, #5
 800d0c6:	2164      	movs	r1, #100	@ 0x64
 800d0c8:	fb01 f303 	mul.w	r3, r1, r3
 800d0cc:	1ad3      	subs	r3, r2, r3
 800d0ce:	00db      	lsls	r3, r3, #3
 800d0d0:	3332      	adds	r3, #50	@ 0x32
 800d0d2:	4a08      	ldr	r2, [pc, #32]	@ (800d0f4 <UART_SetConfig+0x2d4>)
 800d0d4:	fba2 2303 	umull	r2, r3, r2, r3
 800d0d8:	095b      	lsrs	r3, r3, #5
 800d0da:	f003 0207 	and.w	r2, r3, #7
 800d0de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4422      	add	r2, r4
 800d0e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d0e8:	e106      	b.n	800d2f8 <UART_SetConfig+0x4d8>
 800d0ea:	bf00      	nop
 800d0ec:	40011000 	.word	0x40011000
 800d0f0:	40011400 	.word	0x40011400
 800d0f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d0f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d102:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d106:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d10a:	4642      	mov	r2, r8
 800d10c:	464b      	mov	r3, r9
 800d10e:	1891      	adds	r1, r2, r2
 800d110:	6239      	str	r1, [r7, #32]
 800d112:	415b      	adcs	r3, r3
 800d114:	627b      	str	r3, [r7, #36]	@ 0x24
 800d116:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d11a:	4641      	mov	r1, r8
 800d11c:	1854      	adds	r4, r2, r1
 800d11e:	4649      	mov	r1, r9
 800d120:	eb43 0501 	adc.w	r5, r3, r1
 800d124:	f04f 0200 	mov.w	r2, #0
 800d128:	f04f 0300 	mov.w	r3, #0
 800d12c:	00eb      	lsls	r3, r5, #3
 800d12e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d132:	00e2      	lsls	r2, r4, #3
 800d134:	4614      	mov	r4, r2
 800d136:	461d      	mov	r5, r3
 800d138:	4643      	mov	r3, r8
 800d13a:	18e3      	adds	r3, r4, r3
 800d13c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d140:	464b      	mov	r3, r9
 800d142:	eb45 0303 	adc.w	r3, r5, r3
 800d146:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d14a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d14e:	685b      	ldr	r3, [r3, #4]
 800d150:	2200      	movs	r2, #0
 800d152:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d156:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d15a:	f04f 0200 	mov.w	r2, #0
 800d15e:	f04f 0300 	mov.w	r3, #0
 800d162:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d166:	4629      	mov	r1, r5
 800d168:	008b      	lsls	r3, r1, #2
 800d16a:	4621      	mov	r1, r4
 800d16c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d170:	4621      	mov	r1, r4
 800d172:	008a      	lsls	r2, r1, #2
 800d174:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d178:	f7f3 fee4 	bl	8000f44 <__aeabi_uldivmod>
 800d17c:	4602      	mov	r2, r0
 800d17e:	460b      	mov	r3, r1
 800d180:	4b60      	ldr	r3, [pc, #384]	@ (800d304 <UART_SetConfig+0x4e4>)
 800d182:	fba3 2302 	umull	r2, r3, r3, r2
 800d186:	095b      	lsrs	r3, r3, #5
 800d188:	011c      	lsls	r4, r3, #4
 800d18a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d18e:	2200      	movs	r2, #0
 800d190:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d194:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d198:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d19c:	4642      	mov	r2, r8
 800d19e:	464b      	mov	r3, r9
 800d1a0:	1891      	adds	r1, r2, r2
 800d1a2:	61b9      	str	r1, [r7, #24]
 800d1a4:	415b      	adcs	r3, r3
 800d1a6:	61fb      	str	r3, [r7, #28]
 800d1a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d1ac:	4641      	mov	r1, r8
 800d1ae:	1851      	adds	r1, r2, r1
 800d1b0:	6139      	str	r1, [r7, #16]
 800d1b2:	4649      	mov	r1, r9
 800d1b4:	414b      	adcs	r3, r1
 800d1b6:	617b      	str	r3, [r7, #20]
 800d1b8:	f04f 0200 	mov.w	r2, #0
 800d1bc:	f04f 0300 	mov.w	r3, #0
 800d1c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d1c4:	4659      	mov	r1, fp
 800d1c6:	00cb      	lsls	r3, r1, #3
 800d1c8:	4651      	mov	r1, sl
 800d1ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d1ce:	4651      	mov	r1, sl
 800d1d0:	00ca      	lsls	r2, r1, #3
 800d1d2:	4610      	mov	r0, r2
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	4642      	mov	r2, r8
 800d1da:	189b      	adds	r3, r3, r2
 800d1dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d1e0:	464b      	mov	r3, r9
 800d1e2:	460a      	mov	r2, r1
 800d1e4:	eb42 0303 	adc.w	r3, r2, r3
 800d1e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d1ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d1f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d1f8:	f04f 0200 	mov.w	r2, #0
 800d1fc:	f04f 0300 	mov.w	r3, #0
 800d200:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d204:	4649      	mov	r1, r9
 800d206:	008b      	lsls	r3, r1, #2
 800d208:	4641      	mov	r1, r8
 800d20a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d20e:	4641      	mov	r1, r8
 800d210:	008a      	lsls	r2, r1, #2
 800d212:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d216:	f7f3 fe95 	bl	8000f44 <__aeabi_uldivmod>
 800d21a:	4602      	mov	r2, r0
 800d21c:	460b      	mov	r3, r1
 800d21e:	4611      	mov	r1, r2
 800d220:	4b38      	ldr	r3, [pc, #224]	@ (800d304 <UART_SetConfig+0x4e4>)
 800d222:	fba3 2301 	umull	r2, r3, r3, r1
 800d226:	095b      	lsrs	r3, r3, #5
 800d228:	2264      	movs	r2, #100	@ 0x64
 800d22a:	fb02 f303 	mul.w	r3, r2, r3
 800d22e:	1acb      	subs	r3, r1, r3
 800d230:	011b      	lsls	r3, r3, #4
 800d232:	3332      	adds	r3, #50	@ 0x32
 800d234:	4a33      	ldr	r2, [pc, #204]	@ (800d304 <UART_SetConfig+0x4e4>)
 800d236:	fba2 2303 	umull	r2, r3, r2, r3
 800d23a:	095b      	lsrs	r3, r3, #5
 800d23c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d240:	441c      	add	r4, r3
 800d242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d246:	2200      	movs	r2, #0
 800d248:	673b      	str	r3, [r7, #112]	@ 0x70
 800d24a:	677a      	str	r2, [r7, #116]	@ 0x74
 800d24c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d250:	4642      	mov	r2, r8
 800d252:	464b      	mov	r3, r9
 800d254:	1891      	adds	r1, r2, r2
 800d256:	60b9      	str	r1, [r7, #8]
 800d258:	415b      	adcs	r3, r3
 800d25a:	60fb      	str	r3, [r7, #12]
 800d25c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d260:	4641      	mov	r1, r8
 800d262:	1851      	adds	r1, r2, r1
 800d264:	6039      	str	r1, [r7, #0]
 800d266:	4649      	mov	r1, r9
 800d268:	414b      	adcs	r3, r1
 800d26a:	607b      	str	r3, [r7, #4]
 800d26c:	f04f 0200 	mov.w	r2, #0
 800d270:	f04f 0300 	mov.w	r3, #0
 800d274:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d278:	4659      	mov	r1, fp
 800d27a:	00cb      	lsls	r3, r1, #3
 800d27c:	4651      	mov	r1, sl
 800d27e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d282:	4651      	mov	r1, sl
 800d284:	00ca      	lsls	r2, r1, #3
 800d286:	4610      	mov	r0, r2
 800d288:	4619      	mov	r1, r3
 800d28a:	4603      	mov	r3, r0
 800d28c:	4642      	mov	r2, r8
 800d28e:	189b      	adds	r3, r3, r2
 800d290:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d292:	464b      	mov	r3, r9
 800d294:	460a      	mov	r2, r1
 800d296:	eb42 0303 	adc.w	r3, r2, r3
 800d29a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d29c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	663b      	str	r3, [r7, #96]	@ 0x60
 800d2a6:	667a      	str	r2, [r7, #100]	@ 0x64
 800d2a8:	f04f 0200 	mov.w	r2, #0
 800d2ac:	f04f 0300 	mov.w	r3, #0
 800d2b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d2b4:	4649      	mov	r1, r9
 800d2b6:	008b      	lsls	r3, r1, #2
 800d2b8:	4641      	mov	r1, r8
 800d2ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2be:	4641      	mov	r1, r8
 800d2c0:	008a      	lsls	r2, r1, #2
 800d2c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d2c6:	f7f3 fe3d 	bl	8000f44 <__aeabi_uldivmod>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d304 <UART_SetConfig+0x4e4>)
 800d2d0:	fba3 1302 	umull	r1, r3, r3, r2
 800d2d4:	095b      	lsrs	r3, r3, #5
 800d2d6:	2164      	movs	r1, #100	@ 0x64
 800d2d8:	fb01 f303 	mul.w	r3, r1, r3
 800d2dc:	1ad3      	subs	r3, r2, r3
 800d2de:	011b      	lsls	r3, r3, #4
 800d2e0:	3332      	adds	r3, #50	@ 0x32
 800d2e2:	4a08      	ldr	r2, [pc, #32]	@ (800d304 <UART_SetConfig+0x4e4>)
 800d2e4:	fba2 2303 	umull	r2, r3, r2, r3
 800d2e8:	095b      	lsrs	r3, r3, #5
 800d2ea:	f003 020f 	and.w	r2, r3, #15
 800d2ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4422      	add	r2, r4
 800d2f6:	609a      	str	r2, [r3, #8]
}
 800d2f8:	bf00      	nop
 800d2fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d2fe:	46bd      	mov	sp, r7
 800d300:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d304:	51eb851f 	.word	0x51eb851f

0800d308 <calloc>:
 800d308:	4b02      	ldr	r3, [pc, #8]	@ (800d314 <calloc+0xc>)
 800d30a:	460a      	mov	r2, r1
 800d30c:	4601      	mov	r1, r0
 800d30e:	6818      	ldr	r0, [r3, #0]
 800d310:	f000 b802 	b.w	800d318 <_calloc_r>
 800d314:	20000058 	.word	0x20000058

0800d318 <_calloc_r>:
 800d318:	b570      	push	{r4, r5, r6, lr}
 800d31a:	fba1 5402 	umull	r5, r4, r1, r2
 800d31e:	b93c      	cbnz	r4, 800d330 <_calloc_r+0x18>
 800d320:	4629      	mov	r1, r5
 800d322:	f000 f82f 	bl	800d384 <_malloc_r>
 800d326:	4606      	mov	r6, r0
 800d328:	b928      	cbnz	r0, 800d336 <_calloc_r+0x1e>
 800d32a:	2600      	movs	r6, #0
 800d32c:	4630      	mov	r0, r6
 800d32e:	bd70      	pop	{r4, r5, r6, pc}
 800d330:	220c      	movs	r2, #12
 800d332:	6002      	str	r2, [r0, #0]
 800d334:	e7f9      	b.n	800d32a <_calloc_r+0x12>
 800d336:	462a      	mov	r2, r5
 800d338:	4621      	mov	r1, r4
 800d33a:	f000 fe1c 	bl	800df76 <memset>
 800d33e:	e7f5      	b.n	800d32c <_calloc_r+0x14>

0800d340 <sbrk_aligned>:
 800d340:	b570      	push	{r4, r5, r6, lr}
 800d342:	4e0f      	ldr	r6, [pc, #60]	@ (800d380 <sbrk_aligned+0x40>)
 800d344:	460c      	mov	r4, r1
 800d346:	6831      	ldr	r1, [r6, #0]
 800d348:	4605      	mov	r5, r0
 800d34a:	b911      	cbnz	r1, 800d352 <sbrk_aligned+0x12>
 800d34c:	f000 fe54 	bl	800dff8 <_sbrk_r>
 800d350:	6030      	str	r0, [r6, #0]
 800d352:	4621      	mov	r1, r4
 800d354:	4628      	mov	r0, r5
 800d356:	f000 fe4f 	bl	800dff8 <_sbrk_r>
 800d35a:	1c43      	adds	r3, r0, #1
 800d35c:	d103      	bne.n	800d366 <sbrk_aligned+0x26>
 800d35e:	f04f 34ff 	mov.w	r4, #4294967295
 800d362:	4620      	mov	r0, r4
 800d364:	bd70      	pop	{r4, r5, r6, pc}
 800d366:	1cc4      	adds	r4, r0, #3
 800d368:	f024 0403 	bic.w	r4, r4, #3
 800d36c:	42a0      	cmp	r0, r4
 800d36e:	d0f8      	beq.n	800d362 <sbrk_aligned+0x22>
 800d370:	1a21      	subs	r1, r4, r0
 800d372:	4628      	mov	r0, r5
 800d374:	f000 fe40 	bl	800dff8 <_sbrk_r>
 800d378:	3001      	adds	r0, #1
 800d37a:	d1f2      	bne.n	800d362 <sbrk_aligned+0x22>
 800d37c:	e7ef      	b.n	800d35e <sbrk_aligned+0x1e>
 800d37e:	bf00      	nop
 800d380:	20000874 	.word	0x20000874

0800d384 <_malloc_r>:
 800d384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d388:	1ccd      	adds	r5, r1, #3
 800d38a:	f025 0503 	bic.w	r5, r5, #3
 800d38e:	3508      	adds	r5, #8
 800d390:	2d0c      	cmp	r5, #12
 800d392:	bf38      	it	cc
 800d394:	250c      	movcc	r5, #12
 800d396:	2d00      	cmp	r5, #0
 800d398:	4606      	mov	r6, r0
 800d39a:	db01      	blt.n	800d3a0 <_malloc_r+0x1c>
 800d39c:	42a9      	cmp	r1, r5
 800d39e:	d904      	bls.n	800d3aa <_malloc_r+0x26>
 800d3a0:	230c      	movs	r3, #12
 800d3a2:	6033      	str	r3, [r6, #0]
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d480 <_malloc_r+0xfc>
 800d3ae:	f000 f869 	bl	800d484 <__malloc_lock>
 800d3b2:	f8d8 3000 	ldr.w	r3, [r8]
 800d3b6:	461c      	mov	r4, r3
 800d3b8:	bb44      	cbnz	r4, 800d40c <_malloc_r+0x88>
 800d3ba:	4629      	mov	r1, r5
 800d3bc:	4630      	mov	r0, r6
 800d3be:	f7ff ffbf 	bl	800d340 <sbrk_aligned>
 800d3c2:	1c43      	adds	r3, r0, #1
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	d158      	bne.n	800d47a <_malloc_r+0xf6>
 800d3c8:	f8d8 4000 	ldr.w	r4, [r8]
 800d3cc:	4627      	mov	r7, r4
 800d3ce:	2f00      	cmp	r7, #0
 800d3d0:	d143      	bne.n	800d45a <_malloc_r+0xd6>
 800d3d2:	2c00      	cmp	r4, #0
 800d3d4:	d04b      	beq.n	800d46e <_malloc_r+0xea>
 800d3d6:	6823      	ldr	r3, [r4, #0]
 800d3d8:	4639      	mov	r1, r7
 800d3da:	4630      	mov	r0, r6
 800d3dc:	eb04 0903 	add.w	r9, r4, r3
 800d3e0:	f000 fe0a 	bl	800dff8 <_sbrk_r>
 800d3e4:	4581      	cmp	r9, r0
 800d3e6:	d142      	bne.n	800d46e <_malloc_r+0xea>
 800d3e8:	6821      	ldr	r1, [r4, #0]
 800d3ea:	1a6d      	subs	r5, r5, r1
 800d3ec:	4629      	mov	r1, r5
 800d3ee:	4630      	mov	r0, r6
 800d3f0:	f7ff ffa6 	bl	800d340 <sbrk_aligned>
 800d3f4:	3001      	adds	r0, #1
 800d3f6:	d03a      	beq.n	800d46e <_malloc_r+0xea>
 800d3f8:	6823      	ldr	r3, [r4, #0]
 800d3fa:	442b      	add	r3, r5
 800d3fc:	6023      	str	r3, [r4, #0]
 800d3fe:	f8d8 3000 	ldr.w	r3, [r8]
 800d402:	685a      	ldr	r2, [r3, #4]
 800d404:	bb62      	cbnz	r2, 800d460 <_malloc_r+0xdc>
 800d406:	f8c8 7000 	str.w	r7, [r8]
 800d40a:	e00f      	b.n	800d42c <_malloc_r+0xa8>
 800d40c:	6822      	ldr	r2, [r4, #0]
 800d40e:	1b52      	subs	r2, r2, r5
 800d410:	d420      	bmi.n	800d454 <_malloc_r+0xd0>
 800d412:	2a0b      	cmp	r2, #11
 800d414:	d917      	bls.n	800d446 <_malloc_r+0xc2>
 800d416:	1961      	adds	r1, r4, r5
 800d418:	42a3      	cmp	r3, r4
 800d41a:	6025      	str	r5, [r4, #0]
 800d41c:	bf18      	it	ne
 800d41e:	6059      	strne	r1, [r3, #4]
 800d420:	6863      	ldr	r3, [r4, #4]
 800d422:	bf08      	it	eq
 800d424:	f8c8 1000 	streq.w	r1, [r8]
 800d428:	5162      	str	r2, [r4, r5]
 800d42a:	604b      	str	r3, [r1, #4]
 800d42c:	4630      	mov	r0, r6
 800d42e:	f000 f82f 	bl	800d490 <__malloc_unlock>
 800d432:	f104 000b 	add.w	r0, r4, #11
 800d436:	1d23      	adds	r3, r4, #4
 800d438:	f020 0007 	bic.w	r0, r0, #7
 800d43c:	1ac2      	subs	r2, r0, r3
 800d43e:	bf1c      	itt	ne
 800d440:	1a1b      	subne	r3, r3, r0
 800d442:	50a3      	strne	r3, [r4, r2]
 800d444:	e7af      	b.n	800d3a6 <_malloc_r+0x22>
 800d446:	6862      	ldr	r2, [r4, #4]
 800d448:	42a3      	cmp	r3, r4
 800d44a:	bf0c      	ite	eq
 800d44c:	f8c8 2000 	streq.w	r2, [r8]
 800d450:	605a      	strne	r2, [r3, #4]
 800d452:	e7eb      	b.n	800d42c <_malloc_r+0xa8>
 800d454:	4623      	mov	r3, r4
 800d456:	6864      	ldr	r4, [r4, #4]
 800d458:	e7ae      	b.n	800d3b8 <_malloc_r+0x34>
 800d45a:	463c      	mov	r4, r7
 800d45c:	687f      	ldr	r7, [r7, #4]
 800d45e:	e7b6      	b.n	800d3ce <_malloc_r+0x4a>
 800d460:	461a      	mov	r2, r3
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	42a3      	cmp	r3, r4
 800d466:	d1fb      	bne.n	800d460 <_malloc_r+0xdc>
 800d468:	2300      	movs	r3, #0
 800d46a:	6053      	str	r3, [r2, #4]
 800d46c:	e7de      	b.n	800d42c <_malloc_r+0xa8>
 800d46e:	230c      	movs	r3, #12
 800d470:	6033      	str	r3, [r6, #0]
 800d472:	4630      	mov	r0, r6
 800d474:	f000 f80c 	bl	800d490 <__malloc_unlock>
 800d478:	e794      	b.n	800d3a4 <_malloc_r+0x20>
 800d47a:	6005      	str	r5, [r0, #0]
 800d47c:	e7d6      	b.n	800d42c <_malloc_r+0xa8>
 800d47e:	bf00      	nop
 800d480:	20000878 	.word	0x20000878

0800d484 <__malloc_lock>:
 800d484:	4801      	ldr	r0, [pc, #4]	@ (800d48c <__malloc_lock+0x8>)
 800d486:	f000 be04 	b.w	800e092 <__retarget_lock_acquire_recursive>
 800d48a:	bf00      	nop
 800d48c:	200009bc 	.word	0x200009bc

0800d490 <__malloc_unlock>:
 800d490:	4801      	ldr	r0, [pc, #4]	@ (800d498 <__malloc_unlock+0x8>)
 800d492:	f000 bdff 	b.w	800e094 <__retarget_lock_release_recursive>
 800d496:	bf00      	nop
 800d498:	200009bc 	.word	0x200009bc

0800d49c <__cvt>:
 800d49c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4a0:	ec57 6b10 	vmov	r6, r7, d0
 800d4a4:	2f00      	cmp	r7, #0
 800d4a6:	460c      	mov	r4, r1
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	463b      	mov	r3, r7
 800d4ac:	bfbb      	ittet	lt
 800d4ae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d4b2:	461f      	movlt	r7, r3
 800d4b4:	2300      	movge	r3, #0
 800d4b6:	232d      	movlt	r3, #45	@ 0x2d
 800d4b8:	700b      	strb	r3, [r1, #0]
 800d4ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d4bc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d4c0:	4691      	mov	r9, r2
 800d4c2:	f023 0820 	bic.w	r8, r3, #32
 800d4c6:	bfbc      	itt	lt
 800d4c8:	4632      	movlt	r2, r6
 800d4ca:	4616      	movlt	r6, r2
 800d4cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d4d0:	d005      	beq.n	800d4de <__cvt+0x42>
 800d4d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d4d6:	d100      	bne.n	800d4da <__cvt+0x3e>
 800d4d8:	3401      	adds	r4, #1
 800d4da:	2102      	movs	r1, #2
 800d4dc:	e000      	b.n	800d4e0 <__cvt+0x44>
 800d4de:	2103      	movs	r1, #3
 800d4e0:	ab03      	add	r3, sp, #12
 800d4e2:	9301      	str	r3, [sp, #4]
 800d4e4:	ab02      	add	r3, sp, #8
 800d4e6:	9300      	str	r3, [sp, #0]
 800d4e8:	ec47 6b10 	vmov	d0, r6, r7
 800d4ec:	4653      	mov	r3, sl
 800d4ee:	4622      	mov	r2, r4
 800d4f0:	f000 fe6a 	bl	800e1c8 <_dtoa_r>
 800d4f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d4f8:	4605      	mov	r5, r0
 800d4fa:	d119      	bne.n	800d530 <__cvt+0x94>
 800d4fc:	f019 0f01 	tst.w	r9, #1
 800d500:	d00e      	beq.n	800d520 <__cvt+0x84>
 800d502:	eb00 0904 	add.w	r9, r0, r4
 800d506:	2200      	movs	r2, #0
 800d508:	2300      	movs	r3, #0
 800d50a:	4630      	mov	r0, r6
 800d50c:	4639      	mov	r1, r7
 800d50e:	f7f3 fafb 	bl	8000b08 <__aeabi_dcmpeq>
 800d512:	b108      	cbz	r0, 800d518 <__cvt+0x7c>
 800d514:	f8cd 900c 	str.w	r9, [sp, #12]
 800d518:	2230      	movs	r2, #48	@ 0x30
 800d51a:	9b03      	ldr	r3, [sp, #12]
 800d51c:	454b      	cmp	r3, r9
 800d51e:	d31e      	bcc.n	800d55e <__cvt+0xc2>
 800d520:	9b03      	ldr	r3, [sp, #12]
 800d522:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d524:	1b5b      	subs	r3, r3, r5
 800d526:	4628      	mov	r0, r5
 800d528:	6013      	str	r3, [r2, #0]
 800d52a:	b004      	add	sp, #16
 800d52c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d530:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d534:	eb00 0904 	add.w	r9, r0, r4
 800d538:	d1e5      	bne.n	800d506 <__cvt+0x6a>
 800d53a:	7803      	ldrb	r3, [r0, #0]
 800d53c:	2b30      	cmp	r3, #48	@ 0x30
 800d53e:	d10a      	bne.n	800d556 <__cvt+0xba>
 800d540:	2200      	movs	r2, #0
 800d542:	2300      	movs	r3, #0
 800d544:	4630      	mov	r0, r6
 800d546:	4639      	mov	r1, r7
 800d548:	f7f3 fade 	bl	8000b08 <__aeabi_dcmpeq>
 800d54c:	b918      	cbnz	r0, 800d556 <__cvt+0xba>
 800d54e:	f1c4 0401 	rsb	r4, r4, #1
 800d552:	f8ca 4000 	str.w	r4, [sl]
 800d556:	f8da 3000 	ldr.w	r3, [sl]
 800d55a:	4499      	add	r9, r3
 800d55c:	e7d3      	b.n	800d506 <__cvt+0x6a>
 800d55e:	1c59      	adds	r1, r3, #1
 800d560:	9103      	str	r1, [sp, #12]
 800d562:	701a      	strb	r2, [r3, #0]
 800d564:	e7d9      	b.n	800d51a <__cvt+0x7e>

0800d566 <__exponent>:
 800d566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d568:	2900      	cmp	r1, #0
 800d56a:	bfba      	itte	lt
 800d56c:	4249      	neglt	r1, r1
 800d56e:	232d      	movlt	r3, #45	@ 0x2d
 800d570:	232b      	movge	r3, #43	@ 0x2b
 800d572:	2909      	cmp	r1, #9
 800d574:	7002      	strb	r2, [r0, #0]
 800d576:	7043      	strb	r3, [r0, #1]
 800d578:	dd29      	ble.n	800d5ce <__exponent+0x68>
 800d57a:	f10d 0307 	add.w	r3, sp, #7
 800d57e:	461d      	mov	r5, r3
 800d580:	270a      	movs	r7, #10
 800d582:	461a      	mov	r2, r3
 800d584:	fbb1 f6f7 	udiv	r6, r1, r7
 800d588:	fb07 1416 	mls	r4, r7, r6, r1
 800d58c:	3430      	adds	r4, #48	@ 0x30
 800d58e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d592:	460c      	mov	r4, r1
 800d594:	2c63      	cmp	r4, #99	@ 0x63
 800d596:	f103 33ff 	add.w	r3, r3, #4294967295
 800d59a:	4631      	mov	r1, r6
 800d59c:	dcf1      	bgt.n	800d582 <__exponent+0x1c>
 800d59e:	3130      	adds	r1, #48	@ 0x30
 800d5a0:	1e94      	subs	r4, r2, #2
 800d5a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d5a6:	1c41      	adds	r1, r0, #1
 800d5a8:	4623      	mov	r3, r4
 800d5aa:	42ab      	cmp	r3, r5
 800d5ac:	d30a      	bcc.n	800d5c4 <__exponent+0x5e>
 800d5ae:	f10d 0309 	add.w	r3, sp, #9
 800d5b2:	1a9b      	subs	r3, r3, r2
 800d5b4:	42ac      	cmp	r4, r5
 800d5b6:	bf88      	it	hi
 800d5b8:	2300      	movhi	r3, #0
 800d5ba:	3302      	adds	r3, #2
 800d5bc:	4403      	add	r3, r0
 800d5be:	1a18      	subs	r0, r3, r0
 800d5c0:	b003      	add	sp, #12
 800d5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d5c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d5cc:	e7ed      	b.n	800d5aa <__exponent+0x44>
 800d5ce:	2330      	movs	r3, #48	@ 0x30
 800d5d0:	3130      	adds	r1, #48	@ 0x30
 800d5d2:	7083      	strb	r3, [r0, #2]
 800d5d4:	70c1      	strb	r1, [r0, #3]
 800d5d6:	1d03      	adds	r3, r0, #4
 800d5d8:	e7f1      	b.n	800d5be <__exponent+0x58>
	...

0800d5dc <_printf_float>:
 800d5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e0:	b08d      	sub	sp, #52	@ 0x34
 800d5e2:	460c      	mov	r4, r1
 800d5e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d5e8:	4616      	mov	r6, r2
 800d5ea:	461f      	mov	r7, r3
 800d5ec:	4605      	mov	r5, r0
 800d5ee:	f000 fccb 	bl	800df88 <_localeconv_r>
 800d5f2:	6803      	ldr	r3, [r0, #0]
 800d5f4:	9304      	str	r3, [sp, #16]
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7f2 fe5a 	bl	80002b0 <strlen>
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800d600:	f8d8 3000 	ldr.w	r3, [r8]
 800d604:	9005      	str	r0, [sp, #20]
 800d606:	3307      	adds	r3, #7
 800d608:	f023 0307 	bic.w	r3, r3, #7
 800d60c:	f103 0208 	add.w	r2, r3, #8
 800d610:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d614:	f8d4 b000 	ldr.w	fp, [r4]
 800d618:	f8c8 2000 	str.w	r2, [r8]
 800d61c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d620:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d624:	9307      	str	r3, [sp, #28]
 800d626:	f8cd 8018 	str.w	r8, [sp, #24]
 800d62a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d62e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d632:	4b9c      	ldr	r3, [pc, #624]	@ (800d8a4 <_printf_float+0x2c8>)
 800d634:	f04f 32ff 	mov.w	r2, #4294967295
 800d638:	f7f3 fa98 	bl	8000b6c <__aeabi_dcmpun>
 800d63c:	bb70      	cbnz	r0, 800d69c <_printf_float+0xc0>
 800d63e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d642:	4b98      	ldr	r3, [pc, #608]	@ (800d8a4 <_printf_float+0x2c8>)
 800d644:	f04f 32ff 	mov.w	r2, #4294967295
 800d648:	f7f3 fa72 	bl	8000b30 <__aeabi_dcmple>
 800d64c:	bb30      	cbnz	r0, 800d69c <_printf_float+0xc0>
 800d64e:	2200      	movs	r2, #0
 800d650:	2300      	movs	r3, #0
 800d652:	4640      	mov	r0, r8
 800d654:	4649      	mov	r1, r9
 800d656:	f7f3 fa61 	bl	8000b1c <__aeabi_dcmplt>
 800d65a:	b110      	cbz	r0, 800d662 <_printf_float+0x86>
 800d65c:	232d      	movs	r3, #45	@ 0x2d
 800d65e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d662:	4a91      	ldr	r2, [pc, #580]	@ (800d8a8 <_printf_float+0x2cc>)
 800d664:	4b91      	ldr	r3, [pc, #580]	@ (800d8ac <_printf_float+0x2d0>)
 800d666:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d66a:	bf94      	ite	ls
 800d66c:	4690      	movls	r8, r2
 800d66e:	4698      	movhi	r8, r3
 800d670:	2303      	movs	r3, #3
 800d672:	6123      	str	r3, [r4, #16]
 800d674:	f02b 0304 	bic.w	r3, fp, #4
 800d678:	6023      	str	r3, [r4, #0]
 800d67a:	f04f 0900 	mov.w	r9, #0
 800d67e:	9700      	str	r7, [sp, #0]
 800d680:	4633      	mov	r3, r6
 800d682:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d684:	4621      	mov	r1, r4
 800d686:	4628      	mov	r0, r5
 800d688:	f000 f9d2 	bl	800da30 <_printf_common>
 800d68c:	3001      	adds	r0, #1
 800d68e:	f040 808d 	bne.w	800d7ac <_printf_float+0x1d0>
 800d692:	f04f 30ff 	mov.w	r0, #4294967295
 800d696:	b00d      	add	sp, #52	@ 0x34
 800d698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d69c:	4642      	mov	r2, r8
 800d69e:	464b      	mov	r3, r9
 800d6a0:	4640      	mov	r0, r8
 800d6a2:	4649      	mov	r1, r9
 800d6a4:	f7f3 fa62 	bl	8000b6c <__aeabi_dcmpun>
 800d6a8:	b140      	cbz	r0, 800d6bc <_printf_float+0xe0>
 800d6aa:	464b      	mov	r3, r9
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	bfbc      	itt	lt
 800d6b0:	232d      	movlt	r3, #45	@ 0x2d
 800d6b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d6b6:	4a7e      	ldr	r2, [pc, #504]	@ (800d8b0 <_printf_float+0x2d4>)
 800d6b8:	4b7e      	ldr	r3, [pc, #504]	@ (800d8b4 <_printf_float+0x2d8>)
 800d6ba:	e7d4      	b.n	800d666 <_printf_float+0x8a>
 800d6bc:	6863      	ldr	r3, [r4, #4]
 800d6be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d6c2:	9206      	str	r2, [sp, #24]
 800d6c4:	1c5a      	adds	r2, r3, #1
 800d6c6:	d13b      	bne.n	800d740 <_printf_float+0x164>
 800d6c8:	2306      	movs	r3, #6
 800d6ca:	6063      	str	r3, [r4, #4]
 800d6cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	6022      	str	r2, [r4, #0]
 800d6d4:	9303      	str	r3, [sp, #12]
 800d6d6:	ab0a      	add	r3, sp, #40	@ 0x28
 800d6d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d6dc:	ab09      	add	r3, sp, #36	@ 0x24
 800d6de:	9300      	str	r3, [sp, #0]
 800d6e0:	6861      	ldr	r1, [r4, #4]
 800d6e2:	ec49 8b10 	vmov	d0, r8, r9
 800d6e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d6ea:	4628      	mov	r0, r5
 800d6ec:	f7ff fed6 	bl	800d49c <__cvt>
 800d6f0:	9b06      	ldr	r3, [sp, #24]
 800d6f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d6f4:	2b47      	cmp	r3, #71	@ 0x47
 800d6f6:	4680      	mov	r8, r0
 800d6f8:	d129      	bne.n	800d74e <_printf_float+0x172>
 800d6fa:	1cc8      	adds	r0, r1, #3
 800d6fc:	db02      	blt.n	800d704 <_printf_float+0x128>
 800d6fe:	6863      	ldr	r3, [r4, #4]
 800d700:	4299      	cmp	r1, r3
 800d702:	dd41      	ble.n	800d788 <_printf_float+0x1ac>
 800d704:	f1aa 0a02 	sub.w	sl, sl, #2
 800d708:	fa5f fa8a 	uxtb.w	sl, sl
 800d70c:	3901      	subs	r1, #1
 800d70e:	4652      	mov	r2, sl
 800d710:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d714:	9109      	str	r1, [sp, #36]	@ 0x24
 800d716:	f7ff ff26 	bl	800d566 <__exponent>
 800d71a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d71c:	1813      	adds	r3, r2, r0
 800d71e:	2a01      	cmp	r2, #1
 800d720:	4681      	mov	r9, r0
 800d722:	6123      	str	r3, [r4, #16]
 800d724:	dc02      	bgt.n	800d72c <_printf_float+0x150>
 800d726:	6822      	ldr	r2, [r4, #0]
 800d728:	07d2      	lsls	r2, r2, #31
 800d72a:	d501      	bpl.n	800d730 <_printf_float+0x154>
 800d72c:	3301      	adds	r3, #1
 800d72e:	6123      	str	r3, [r4, #16]
 800d730:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d734:	2b00      	cmp	r3, #0
 800d736:	d0a2      	beq.n	800d67e <_printf_float+0xa2>
 800d738:	232d      	movs	r3, #45	@ 0x2d
 800d73a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d73e:	e79e      	b.n	800d67e <_printf_float+0xa2>
 800d740:	9a06      	ldr	r2, [sp, #24]
 800d742:	2a47      	cmp	r2, #71	@ 0x47
 800d744:	d1c2      	bne.n	800d6cc <_printf_float+0xf0>
 800d746:	2b00      	cmp	r3, #0
 800d748:	d1c0      	bne.n	800d6cc <_printf_float+0xf0>
 800d74a:	2301      	movs	r3, #1
 800d74c:	e7bd      	b.n	800d6ca <_printf_float+0xee>
 800d74e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d752:	d9db      	bls.n	800d70c <_printf_float+0x130>
 800d754:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d758:	d118      	bne.n	800d78c <_printf_float+0x1b0>
 800d75a:	2900      	cmp	r1, #0
 800d75c:	6863      	ldr	r3, [r4, #4]
 800d75e:	dd0b      	ble.n	800d778 <_printf_float+0x19c>
 800d760:	6121      	str	r1, [r4, #16]
 800d762:	b913      	cbnz	r3, 800d76a <_printf_float+0x18e>
 800d764:	6822      	ldr	r2, [r4, #0]
 800d766:	07d0      	lsls	r0, r2, #31
 800d768:	d502      	bpl.n	800d770 <_printf_float+0x194>
 800d76a:	3301      	adds	r3, #1
 800d76c:	440b      	add	r3, r1
 800d76e:	6123      	str	r3, [r4, #16]
 800d770:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d772:	f04f 0900 	mov.w	r9, #0
 800d776:	e7db      	b.n	800d730 <_printf_float+0x154>
 800d778:	b913      	cbnz	r3, 800d780 <_printf_float+0x1a4>
 800d77a:	6822      	ldr	r2, [r4, #0]
 800d77c:	07d2      	lsls	r2, r2, #31
 800d77e:	d501      	bpl.n	800d784 <_printf_float+0x1a8>
 800d780:	3302      	adds	r3, #2
 800d782:	e7f4      	b.n	800d76e <_printf_float+0x192>
 800d784:	2301      	movs	r3, #1
 800d786:	e7f2      	b.n	800d76e <_printf_float+0x192>
 800d788:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d78c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d78e:	4299      	cmp	r1, r3
 800d790:	db05      	blt.n	800d79e <_printf_float+0x1c2>
 800d792:	6823      	ldr	r3, [r4, #0]
 800d794:	6121      	str	r1, [r4, #16]
 800d796:	07d8      	lsls	r0, r3, #31
 800d798:	d5ea      	bpl.n	800d770 <_printf_float+0x194>
 800d79a:	1c4b      	adds	r3, r1, #1
 800d79c:	e7e7      	b.n	800d76e <_printf_float+0x192>
 800d79e:	2900      	cmp	r1, #0
 800d7a0:	bfd4      	ite	le
 800d7a2:	f1c1 0202 	rsble	r2, r1, #2
 800d7a6:	2201      	movgt	r2, #1
 800d7a8:	4413      	add	r3, r2
 800d7aa:	e7e0      	b.n	800d76e <_printf_float+0x192>
 800d7ac:	6823      	ldr	r3, [r4, #0]
 800d7ae:	055a      	lsls	r2, r3, #21
 800d7b0:	d407      	bmi.n	800d7c2 <_printf_float+0x1e6>
 800d7b2:	6923      	ldr	r3, [r4, #16]
 800d7b4:	4642      	mov	r2, r8
 800d7b6:	4631      	mov	r1, r6
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	47b8      	blx	r7
 800d7bc:	3001      	adds	r0, #1
 800d7be:	d12b      	bne.n	800d818 <_printf_float+0x23c>
 800d7c0:	e767      	b.n	800d692 <_printf_float+0xb6>
 800d7c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d7c6:	f240 80dd 	bls.w	800d984 <_printf_float+0x3a8>
 800d7ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	f7f3 f999 	bl	8000b08 <__aeabi_dcmpeq>
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	d033      	beq.n	800d842 <_printf_float+0x266>
 800d7da:	4a37      	ldr	r2, [pc, #220]	@ (800d8b8 <_printf_float+0x2dc>)
 800d7dc:	2301      	movs	r3, #1
 800d7de:	4631      	mov	r1, r6
 800d7e0:	4628      	mov	r0, r5
 800d7e2:	47b8      	blx	r7
 800d7e4:	3001      	adds	r0, #1
 800d7e6:	f43f af54 	beq.w	800d692 <_printf_float+0xb6>
 800d7ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d7ee:	4543      	cmp	r3, r8
 800d7f0:	db02      	blt.n	800d7f8 <_printf_float+0x21c>
 800d7f2:	6823      	ldr	r3, [r4, #0]
 800d7f4:	07d8      	lsls	r0, r3, #31
 800d7f6:	d50f      	bpl.n	800d818 <_printf_float+0x23c>
 800d7f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7fc:	4631      	mov	r1, r6
 800d7fe:	4628      	mov	r0, r5
 800d800:	47b8      	blx	r7
 800d802:	3001      	adds	r0, #1
 800d804:	f43f af45 	beq.w	800d692 <_printf_float+0xb6>
 800d808:	f04f 0900 	mov.w	r9, #0
 800d80c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d810:	f104 0a1a 	add.w	sl, r4, #26
 800d814:	45c8      	cmp	r8, r9
 800d816:	dc09      	bgt.n	800d82c <_printf_float+0x250>
 800d818:	6823      	ldr	r3, [r4, #0]
 800d81a:	079b      	lsls	r3, r3, #30
 800d81c:	f100 8103 	bmi.w	800da26 <_printf_float+0x44a>
 800d820:	68e0      	ldr	r0, [r4, #12]
 800d822:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d824:	4298      	cmp	r0, r3
 800d826:	bfb8      	it	lt
 800d828:	4618      	movlt	r0, r3
 800d82a:	e734      	b.n	800d696 <_printf_float+0xba>
 800d82c:	2301      	movs	r3, #1
 800d82e:	4652      	mov	r2, sl
 800d830:	4631      	mov	r1, r6
 800d832:	4628      	mov	r0, r5
 800d834:	47b8      	blx	r7
 800d836:	3001      	adds	r0, #1
 800d838:	f43f af2b 	beq.w	800d692 <_printf_float+0xb6>
 800d83c:	f109 0901 	add.w	r9, r9, #1
 800d840:	e7e8      	b.n	800d814 <_printf_float+0x238>
 800d842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d844:	2b00      	cmp	r3, #0
 800d846:	dc39      	bgt.n	800d8bc <_printf_float+0x2e0>
 800d848:	4a1b      	ldr	r2, [pc, #108]	@ (800d8b8 <_printf_float+0x2dc>)
 800d84a:	2301      	movs	r3, #1
 800d84c:	4631      	mov	r1, r6
 800d84e:	4628      	mov	r0, r5
 800d850:	47b8      	blx	r7
 800d852:	3001      	adds	r0, #1
 800d854:	f43f af1d 	beq.w	800d692 <_printf_float+0xb6>
 800d858:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d85c:	ea59 0303 	orrs.w	r3, r9, r3
 800d860:	d102      	bne.n	800d868 <_printf_float+0x28c>
 800d862:	6823      	ldr	r3, [r4, #0]
 800d864:	07d9      	lsls	r1, r3, #31
 800d866:	d5d7      	bpl.n	800d818 <_printf_float+0x23c>
 800d868:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d86c:	4631      	mov	r1, r6
 800d86e:	4628      	mov	r0, r5
 800d870:	47b8      	blx	r7
 800d872:	3001      	adds	r0, #1
 800d874:	f43f af0d 	beq.w	800d692 <_printf_float+0xb6>
 800d878:	f04f 0a00 	mov.w	sl, #0
 800d87c:	f104 0b1a 	add.w	fp, r4, #26
 800d880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d882:	425b      	negs	r3, r3
 800d884:	4553      	cmp	r3, sl
 800d886:	dc01      	bgt.n	800d88c <_printf_float+0x2b0>
 800d888:	464b      	mov	r3, r9
 800d88a:	e793      	b.n	800d7b4 <_printf_float+0x1d8>
 800d88c:	2301      	movs	r3, #1
 800d88e:	465a      	mov	r2, fp
 800d890:	4631      	mov	r1, r6
 800d892:	4628      	mov	r0, r5
 800d894:	47b8      	blx	r7
 800d896:	3001      	adds	r0, #1
 800d898:	f43f aefb 	beq.w	800d692 <_printf_float+0xb6>
 800d89c:	f10a 0a01 	add.w	sl, sl, #1
 800d8a0:	e7ee      	b.n	800d880 <_printf_float+0x2a4>
 800d8a2:	bf00      	nop
 800d8a4:	7fefffff 	.word	0x7fefffff
 800d8a8:	080123e0 	.word	0x080123e0
 800d8ac:	080123e4 	.word	0x080123e4
 800d8b0:	080123e8 	.word	0x080123e8
 800d8b4:	080123ec 	.word	0x080123ec
 800d8b8:	080123f0 	.word	0x080123f0
 800d8bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d8be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d8c2:	4553      	cmp	r3, sl
 800d8c4:	bfa8      	it	ge
 800d8c6:	4653      	movge	r3, sl
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	4699      	mov	r9, r3
 800d8cc:	dc36      	bgt.n	800d93c <_printf_float+0x360>
 800d8ce:	f04f 0b00 	mov.w	fp, #0
 800d8d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8d6:	f104 021a 	add.w	r2, r4, #26
 800d8da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d8dc:	9306      	str	r3, [sp, #24]
 800d8de:	eba3 0309 	sub.w	r3, r3, r9
 800d8e2:	455b      	cmp	r3, fp
 800d8e4:	dc31      	bgt.n	800d94a <_printf_float+0x36e>
 800d8e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8e8:	459a      	cmp	sl, r3
 800d8ea:	dc3a      	bgt.n	800d962 <_printf_float+0x386>
 800d8ec:	6823      	ldr	r3, [r4, #0]
 800d8ee:	07da      	lsls	r2, r3, #31
 800d8f0:	d437      	bmi.n	800d962 <_printf_float+0x386>
 800d8f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8f4:	ebaa 0903 	sub.w	r9, sl, r3
 800d8f8:	9b06      	ldr	r3, [sp, #24]
 800d8fa:	ebaa 0303 	sub.w	r3, sl, r3
 800d8fe:	4599      	cmp	r9, r3
 800d900:	bfa8      	it	ge
 800d902:	4699      	movge	r9, r3
 800d904:	f1b9 0f00 	cmp.w	r9, #0
 800d908:	dc33      	bgt.n	800d972 <_printf_float+0x396>
 800d90a:	f04f 0800 	mov.w	r8, #0
 800d90e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d912:	f104 0b1a 	add.w	fp, r4, #26
 800d916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d918:	ebaa 0303 	sub.w	r3, sl, r3
 800d91c:	eba3 0309 	sub.w	r3, r3, r9
 800d920:	4543      	cmp	r3, r8
 800d922:	f77f af79 	ble.w	800d818 <_printf_float+0x23c>
 800d926:	2301      	movs	r3, #1
 800d928:	465a      	mov	r2, fp
 800d92a:	4631      	mov	r1, r6
 800d92c:	4628      	mov	r0, r5
 800d92e:	47b8      	blx	r7
 800d930:	3001      	adds	r0, #1
 800d932:	f43f aeae 	beq.w	800d692 <_printf_float+0xb6>
 800d936:	f108 0801 	add.w	r8, r8, #1
 800d93a:	e7ec      	b.n	800d916 <_printf_float+0x33a>
 800d93c:	4642      	mov	r2, r8
 800d93e:	4631      	mov	r1, r6
 800d940:	4628      	mov	r0, r5
 800d942:	47b8      	blx	r7
 800d944:	3001      	adds	r0, #1
 800d946:	d1c2      	bne.n	800d8ce <_printf_float+0x2f2>
 800d948:	e6a3      	b.n	800d692 <_printf_float+0xb6>
 800d94a:	2301      	movs	r3, #1
 800d94c:	4631      	mov	r1, r6
 800d94e:	4628      	mov	r0, r5
 800d950:	9206      	str	r2, [sp, #24]
 800d952:	47b8      	blx	r7
 800d954:	3001      	adds	r0, #1
 800d956:	f43f ae9c 	beq.w	800d692 <_printf_float+0xb6>
 800d95a:	9a06      	ldr	r2, [sp, #24]
 800d95c:	f10b 0b01 	add.w	fp, fp, #1
 800d960:	e7bb      	b.n	800d8da <_printf_float+0x2fe>
 800d962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d966:	4631      	mov	r1, r6
 800d968:	4628      	mov	r0, r5
 800d96a:	47b8      	blx	r7
 800d96c:	3001      	adds	r0, #1
 800d96e:	d1c0      	bne.n	800d8f2 <_printf_float+0x316>
 800d970:	e68f      	b.n	800d692 <_printf_float+0xb6>
 800d972:	9a06      	ldr	r2, [sp, #24]
 800d974:	464b      	mov	r3, r9
 800d976:	4442      	add	r2, r8
 800d978:	4631      	mov	r1, r6
 800d97a:	4628      	mov	r0, r5
 800d97c:	47b8      	blx	r7
 800d97e:	3001      	adds	r0, #1
 800d980:	d1c3      	bne.n	800d90a <_printf_float+0x32e>
 800d982:	e686      	b.n	800d692 <_printf_float+0xb6>
 800d984:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d988:	f1ba 0f01 	cmp.w	sl, #1
 800d98c:	dc01      	bgt.n	800d992 <_printf_float+0x3b6>
 800d98e:	07db      	lsls	r3, r3, #31
 800d990:	d536      	bpl.n	800da00 <_printf_float+0x424>
 800d992:	2301      	movs	r3, #1
 800d994:	4642      	mov	r2, r8
 800d996:	4631      	mov	r1, r6
 800d998:	4628      	mov	r0, r5
 800d99a:	47b8      	blx	r7
 800d99c:	3001      	adds	r0, #1
 800d99e:	f43f ae78 	beq.w	800d692 <_printf_float+0xb6>
 800d9a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9a6:	4631      	mov	r1, r6
 800d9a8:	4628      	mov	r0, r5
 800d9aa:	47b8      	blx	r7
 800d9ac:	3001      	adds	r0, #1
 800d9ae:	f43f ae70 	beq.w	800d692 <_printf_float+0xb6>
 800d9b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d9be:	f7f3 f8a3 	bl	8000b08 <__aeabi_dcmpeq>
 800d9c2:	b9c0      	cbnz	r0, 800d9f6 <_printf_float+0x41a>
 800d9c4:	4653      	mov	r3, sl
 800d9c6:	f108 0201 	add.w	r2, r8, #1
 800d9ca:	4631      	mov	r1, r6
 800d9cc:	4628      	mov	r0, r5
 800d9ce:	47b8      	blx	r7
 800d9d0:	3001      	adds	r0, #1
 800d9d2:	d10c      	bne.n	800d9ee <_printf_float+0x412>
 800d9d4:	e65d      	b.n	800d692 <_printf_float+0xb6>
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	465a      	mov	r2, fp
 800d9da:	4631      	mov	r1, r6
 800d9dc:	4628      	mov	r0, r5
 800d9de:	47b8      	blx	r7
 800d9e0:	3001      	adds	r0, #1
 800d9e2:	f43f ae56 	beq.w	800d692 <_printf_float+0xb6>
 800d9e6:	f108 0801 	add.w	r8, r8, #1
 800d9ea:	45d0      	cmp	r8, sl
 800d9ec:	dbf3      	blt.n	800d9d6 <_printf_float+0x3fa>
 800d9ee:	464b      	mov	r3, r9
 800d9f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d9f4:	e6df      	b.n	800d7b6 <_printf_float+0x1da>
 800d9f6:	f04f 0800 	mov.w	r8, #0
 800d9fa:	f104 0b1a 	add.w	fp, r4, #26
 800d9fe:	e7f4      	b.n	800d9ea <_printf_float+0x40e>
 800da00:	2301      	movs	r3, #1
 800da02:	4642      	mov	r2, r8
 800da04:	e7e1      	b.n	800d9ca <_printf_float+0x3ee>
 800da06:	2301      	movs	r3, #1
 800da08:	464a      	mov	r2, r9
 800da0a:	4631      	mov	r1, r6
 800da0c:	4628      	mov	r0, r5
 800da0e:	47b8      	blx	r7
 800da10:	3001      	adds	r0, #1
 800da12:	f43f ae3e 	beq.w	800d692 <_printf_float+0xb6>
 800da16:	f108 0801 	add.w	r8, r8, #1
 800da1a:	68e3      	ldr	r3, [r4, #12]
 800da1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800da1e:	1a5b      	subs	r3, r3, r1
 800da20:	4543      	cmp	r3, r8
 800da22:	dcf0      	bgt.n	800da06 <_printf_float+0x42a>
 800da24:	e6fc      	b.n	800d820 <_printf_float+0x244>
 800da26:	f04f 0800 	mov.w	r8, #0
 800da2a:	f104 0919 	add.w	r9, r4, #25
 800da2e:	e7f4      	b.n	800da1a <_printf_float+0x43e>

0800da30 <_printf_common>:
 800da30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da34:	4616      	mov	r6, r2
 800da36:	4698      	mov	r8, r3
 800da38:	688a      	ldr	r2, [r1, #8]
 800da3a:	690b      	ldr	r3, [r1, #16]
 800da3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800da40:	4293      	cmp	r3, r2
 800da42:	bfb8      	it	lt
 800da44:	4613      	movlt	r3, r2
 800da46:	6033      	str	r3, [r6, #0]
 800da48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800da4c:	4607      	mov	r7, r0
 800da4e:	460c      	mov	r4, r1
 800da50:	b10a      	cbz	r2, 800da56 <_printf_common+0x26>
 800da52:	3301      	adds	r3, #1
 800da54:	6033      	str	r3, [r6, #0]
 800da56:	6823      	ldr	r3, [r4, #0]
 800da58:	0699      	lsls	r1, r3, #26
 800da5a:	bf42      	ittt	mi
 800da5c:	6833      	ldrmi	r3, [r6, #0]
 800da5e:	3302      	addmi	r3, #2
 800da60:	6033      	strmi	r3, [r6, #0]
 800da62:	6825      	ldr	r5, [r4, #0]
 800da64:	f015 0506 	ands.w	r5, r5, #6
 800da68:	d106      	bne.n	800da78 <_printf_common+0x48>
 800da6a:	f104 0a19 	add.w	sl, r4, #25
 800da6e:	68e3      	ldr	r3, [r4, #12]
 800da70:	6832      	ldr	r2, [r6, #0]
 800da72:	1a9b      	subs	r3, r3, r2
 800da74:	42ab      	cmp	r3, r5
 800da76:	dc26      	bgt.n	800dac6 <_printf_common+0x96>
 800da78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800da7c:	6822      	ldr	r2, [r4, #0]
 800da7e:	3b00      	subs	r3, #0
 800da80:	bf18      	it	ne
 800da82:	2301      	movne	r3, #1
 800da84:	0692      	lsls	r2, r2, #26
 800da86:	d42b      	bmi.n	800dae0 <_printf_common+0xb0>
 800da88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800da8c:	4641      	mov	r1, r8
 800da8e:	4638      	mov	r0, r7
 800da90:	47c8      	blx	r9
 800da92:	3001      	adds	r0, #1
 800da94:	d01e      	beq.n	800dad4 <_printf_common+0xa4>
 800da96:	6823      	ldr	r3, [r4, #0]
 800da98:	6922      	ldr	r2, [r4, #16]
 800da9a:	f003 0306 	and.w	r3, r3, #6
 800da9e:	2b04      	cmp	r3, #4
 800daa0:	bf02      	ittt	eq
 800daa2:	68e5      	ldreq	r5, [r4, #12]
 800daa4:	6833      	ldreq	r3, [r6, #0]
 800daa6:	1aed      	subeq	r5, r5, r3
 800daa8:	68a3      	ldr	r3, [r4, #8]
 800daaa:	bf0c      	ite	eq
 800daac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dab0:	2500      	movne	r5, #0
 800dab2:	4293      	cmp	r3, r2
 800dab4:	bfc4      	itt	gt
 800dab6:	1a9b      	subgt	r3, r3, r2
 800dab8:	18ed      	addgt	r5, r5, r3
 800daba:	2600      	movs	r6, #0
 800dabc:	341a      	adds	r4, #26
 800dabe:	42b5      	cmp	r5, r6
 800dac0:	d11a      	bne.n	800daf8 <_printf_common+0xc8>
 800dac2:	2000      	movs	r0, #0
 800dac4:	e008      	b.n	800dad8 <_printf_common+0xa8>
 800dac6:	2301      	movs	r3, #1
 800dac8:	4652      	mov	r2, sl
 800daca:	4641      	mov	r1, r8
 800dacc:	4638      	mov	r0, r7
 800dace:	47c8      	blx	r9
 800dad0:	3001      	adds	r0, #1
 800dad2:	d103      	bne.n	800dadc <_printf_common+0xac>
 800dad4:	f04f 30ff 	mov.w	r0, #4294967295
 800dad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dadc:	3501      	adds	r5, #1
 800dade:	e7c6      	b.n	800da6e <_printf_common+0x3e>
 800dae0:	18e1      	adds	r1, r4, r3
 800dae2:	1c5a      	adds	r2, r3, #1
 800dae4:	2030      	movs	r0, #48	@ 0x30
 800dae6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800daea:	4422      	add	r2, r4
 800daec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800daf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800daf4:	3302      	adds	r3, #2
 800daf6:	e7c7      	b.n	800da88 <_printf_common+0x58>
 800daf8:	2301      	movs	r3, #1
 800dafa:	4622      	mov	r2, r4
 800dafc:	4641      	mov	r1, r8
 800dafe:	4638      	mov	r0, r7
 800db00:	47c8      	blx	r9
 800db02:	3001      	adds	r0, #1
 800db04:	d0e6      	beq.n	800dad4 <_printf_common+0xa4>
 800db06:	3601      	adds	r6, #1
 800db08:	e7d9      	b.n	800dabe <_printf_common+0x8e>
	...

0800db0c <_printf_i>:
 800db0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db10:	7e0f      	ldrb	r7, [r1, #24]
 800db12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800db14:	2f78      	cmp	r7, #120	@ 0x78
 800db16:	4691      	mov	r9, r2
 800db18:	4680      	mov	r8, r0
 800db1a:	460c      	mov	r4, r1
 800db1c:	469a      	mov	sl, r3
 800db1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800db22:	d807      	bhi.n	800db34 <_printf_i+0x28>
 800db24:	2f62      	cmp	r7, #98	@ 0x62
 800db26:	d80a      	bhi.n	800db3e <_printf_i+0x32>
 800db28:	2f00      	cmp	r7, #0
 800db2a:	f000 80d2 	beq.w	800dcd2 <_printf_i+0x1c6>
 800db2e:	2f58      	cmp	r7, #88	@ 0x58
 800db30:	f000 80b9 	beq.w	800dca6 <_printf_i+0x19a>
 800db34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800db3c:	e03a      	b.n	800dbb4 <_printf_i+0xa8>
 800db3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800db42:	2b15      	cmp	r3, #21
 800db44:	d8f6      	bhi.n	800db34 <_printf_i+0x28>
 800db46:	a101      	add	r1, pc, #4	@ (adr r1, 800db4c <_printf_i+0x40>)
 800db48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db4c:	0800dba5 	.word	0x0800dba5
 800db50:	0800dbb9 	.word	0x0800dbb9
 800db54:	0800db35 	.word	0x0800db35
 800db58:	0800db35 	.word	0x0800db35
 800db5c:	0800db35 	.word	0x0800db35
 800db60:	0800db35 	.word	0x0800db35
 800db64:	0800dbb9 	.word	0x0800dbb9
 800db68:	0800db35 	.word	0x0800db35
 800db6c:	0800db35 	.word	0x0800db35
 800db70:	0800db35 	.word	0x0800db35
 800db74:	0800db35 	.word	0x0800db35
 800db78:	0800dcb9 	.word	0x0800dcb9
 800db7c:	0800dbe3 	.word	0x0800dbe3
 800db80:	0800dc73 	.word	0x0800dc73
 800db84:	0800db35 	.word	0x0800db35
 800db88:	0800db35 	.word	0x0800db35
 800db8c:	0800dcdb 	.word	0x0800dcdb
 800db90:	0800db35 	.word	0x0800db35
 800db94:	0800dbe3 	.word	0x0800dbe3
 800db98:	0800db35 	.word	0x0800db35
 800db9c:	0800db35 	.word	0x0800db35
 800dba0:	0800dc7b 	.word	0x0800dc7b
 800dba4:	6833      	ldr	r3, [r6, #0]
 800dba6:	1d1a      	adds	r2, r3, #4
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	6032      	str	r2, [r6, #0]
 800dbac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dbb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	e09d      	b.n	800dcf4 <_printf_i+0x1e8>
 800dbb8:	6833      	ldr	r3, [r6, #0]
 800dbba:	6820      	ldr	r0, [r4, #0]
 800dbbc:	1d19      	adds	r1, r3, #4
 800dbbe:	6031      	str	r1, [r6, #0]
 800dbc0:	0606      	lsls	r6, r0, #24
 800dbc2:	d501      	bpl.n	800dbc8 <_printf_i+0xbc>
 800dbc4:	681d      	ldr	r5, [r3, #0]
 800dbc6:	e003      	b.n	800dbd0 <_printf_i+0xc4>
 800dbc8:	0645      	lsls	r5, r0, #25
 800dbca:	d5fb      	bpl.n	800dbc4 <_printf_i+0xb8>
 800dbcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dbd0:	2d00      	cmp	r5, #0
 800dbd2:	da03      	bge.n	800dbdc <_printf_i+0xd0>
 800dbd4:	232d      	movs	r3, #45	@ 0x2d
 800dbd6:	426d      	negs	r5, r5
 800dbd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbdc:	4859      	ldr	r0, [pc, #356]	@ (800dd44 <_printf_i+0x238>)
 800dbde:	230a      	movs	r3, #10
 800dbe0:	e011      	b.n	800dc06 <_printf_i+0xfa>
 800dbe2:	6821      	ldr	r1, [r4, #0]
 800dbe4:	6833      	ldr	r3, [r6, #0]
 800dbe6:	0608      	lsls	r0, r1, #24
 800dbe8:	f853 5b04 	ldr.w	r5, [r3], #4
 800dbec:	d402      	bmi.n	800dbf4 <_printf_i+0xe8>
 800dbee:	0649      	lsls	r1, r1, #25
 800dbf0:	bf48      	it	mi
 800dbf2:	b2ad      	uxthmi	r5, r5
 800dbf4:	2f6f      	cmp	r7, #111	@ 0x6f
 800dbf6:	4853      	ldr	r0, [pc, #332]	@ (800dd44 <_printf_i+0x238>)
 800dbf8:	6033      	str	r3, [r6, #0]
 800dbfa:	bf14      	ite	ne
 800dbfc:	230a      	movne	r3, #10
 800dbfe:	2308      	moveq	r3, #8
 800dc00:	2100      	movs	r1, #0
 800dc02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dc06:	6866      	ldr	r6, [r4, #4]
 800dc08:	60a6      	str	r6, [r4, #8]
 800dc0a:	2e00      	cmp	r6, #0
 800dc0c:	bfa2      	ittt	ge
 800dc0e:	6821      	ldrge	r1, [r4, #0]
 800dc10:	f021 0104 	bicge.w	r1, r1, #4
 800dc14:	6021      	strge	r1, [r4, #0]
 800dc16:	b90d      	cbnz	r5, 800dc1c <_printf_i+0x110>
 800dc18:	2e00      	cmp	r6, #0
 800dc1a:	d04b      	beq.n	800dcb4 <_printf_i+0x1a8>
 800dc1c:	4616      	mov	r6, r2
 800dc1e:	fbb5 f1f3 	udiv	r1, r5, r3
 800dc22:	fb03 5711 	mls	r7, r3, r1, r5
 800dc26:	5dc7      	ldrb	r7, [r0, r7]
 800dc28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dc2c:	462f      	mov	r7, r5
 800dc2e:	42bb      	cmp	r3, r7
 800dc30:	460d      	mov	r5, r1
 800dc32:	d9f4      	bls.n	800dc1e <_printf_i+0x112>
 800dc34:	2b08      	cmp	r3, #8
 800dc36:	d10b      	bne.n	800dc50 <_printf_i+0x144>
 800dc38:	6823      	ldr	r3, [r4, #0]
 800dc3a:	07df      	lsls	r7, r3, #31
 800dc3c:	d508      	bpl.n	800dc50 <_printf_i+0x144>
 800dc3e:	6923      	ldr	r3, [r4, #16]
 800dc40:	6861      	ldr	r1, [r4, #4]
 800dc42:	4299      	cmp	r1, r3
 800dc44:	bfde      	ittt	le
 800dc46:	2330      	movle	r3, #48	@ 0x30
 800dc48:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dc4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dc50:	1b92      	subs	r2, r2, r6
 800dc52:	6122      	str	r2, [r4, #16]
 800dc54:	f8cd a000 	str.w	sl, [sp]
 800dc58:	464b      	mov	r3, r9
 800dc5a:	aa03      	add	r2, sp, #12
 800dc5c:	4621      	mov	r1, r4
 800dc5e:	4640      	mov	r0, r8
 800dc60:	f7ff fee6 	bl	800da30 <_printf_common>
 800dc64:	3001      	adds	r0, #1
 800dc66:	d14a      	bne.n	800dcfe <_printf_i+0x1f2>
 800dc68:	f04f 30ff 	mov.w	r0, #4294967295
 800dc6c:	b004      	add	sp, #16
 800dc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc72:	6823      	ldr	r3, [r4, #0]
 800dc74:	f043 0320 	orr.w	r3, r3, #32
 800dc78:	6023      	str	r3, [r4, #0]
 800dc7a:	4833      	ldr	r0, [pc, #204]	@ (800dd48 <_printf_i+0x23c>)
 800dc7c:	2778      	movs	r7, #120	@ 0x78
 800dc7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dc82:	6823      	ldr	r3, [r4, #0]
 800dc84:	6831      	ldr	r1, [r6, #0]
 800dc86:	061f      	lsls	r7, r3, #24
 800dc88:	f851 5b04 	ldr.w	r5, [r1], #4
 800dc8c:	d402      	bmi.n	800dc94 <_printf_i+0x188>
 800dc8e:	065f      	lsls	r7, r3, #25
 800dc90:	bf48      	it	mi
 800dc92:	b2ad      	uxthmi	r5, r5
 800dc94:	6031      	str	r1, [r6, #0]
 800dc96:	07d9      	lsls	r1, r3, #31
 800dc98:	bf44      	itt	mi
 800dc9a:	f043 0320 	orrmi.w	r3, r3, #32
 800dc9e:	6023      	strmi	r3, [r4, #0]
 800dca0:	b11d      	cbz	r5, 800dcaa <_printf_i+0x19e>
 800dca2:	2310      	movs	r3, #16
 800dca4:	e7ac      	b.n	800dc00 <_printf_i+0xf4>
 800dca6:	4827      	ldr	r0, [pc, #156]	@ (800dd44 <_printf_i+0x238>)
 800dca8:	e7e9      	b.n	800dc7e <_printf_i+0x172>
 800dcaa:	6823      	ldr	r3, [r4, #0]
 800dcac:	f023 0320 	bic.w	r3, r3, #32
 800dcb0:	6023      	str	r3, [r4, #0]
 800dcb2:	e7f6      	b.n	800dca2 <_printf_i+0x196>
 800dcb4:	4616      	mov	r6, r2
 800dcb6:	e7bd      	b.n	800dc34 <_printf_i+0x128>
 800dcb8:	6833      	ldr	r3, [r6, #0]
 800dcba:	6825      	ldr	r5, [r4, #0]
 800dcbc:	6961      	ldr	r1, [r4, #20]
 800dcbe:	1d18      	adds	r0, r3, #4
 800dcc0:	6030      	str	r0, [r6, #0]
 800dcc2:	062e      	lsls	r6, r5, #24
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	d501      	bpl.n	800dccc <_printf_i+0x1c0>
 800dcc8:	6019      	str	r1, [r3, #0]
 800dcca:	e002      	b.n	800dcd2 <_printf_i+0x1c6>
 800dccc:	0668      	lsls	r0, r5, #25
 800dcce:	d5fb      	bpl.n	800dcc8 <_printf_i+0x1bc>
 800dcd0:	8019      	strh	r1, [r3, #0]
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	6123      	str	r3, [r4, #16]
 800dcd6:	4616      	mov	r6, r2
 800dcd8:	e7bc      	b.n	800dc54 <_printf_i+0x148>
 800dcda:	6833      	ldr	r3, [r6, #0]
 800dcdc:	1d1a      	adds	r2, r3, #4
 800dcde:	6032      	str	r2, [r6, #0]
 800dce0:	681e      	ldr	r6, [r3, #0]
 800dce2:	6862      	ldr	r2, [r4, #4]
 800dce4:	2100      	movs	r1, #0
 800dce6:	4630      	mov	r0, r6
 800dce8:	f7f2 fa92 	bl	8000210 <memchr>
 800dcec:	b108      	cbz	r0, 800dcf2 <_printf_i+0x1e6>
 800dcee:	1b80      	subs	r0, r0, r6
 800dcf0:	6060      	str	r0, [r4, #4]
 800dcf2:	6863      	ldr	r3, [r4, #4]
 800dcf4:	6123      	str	r3, [r4, #16]
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dcfc:	e7aa      	b.n	800dc54 <_printf_i+0x148>
 800dcfe:	6923      	ldr	r3, [r4, #16]
 800dd00:	4632      	mov	r2, r6
 800dd02:	4649      	mov	r1, r9
 800dd04:	4640      	mov	r0, r8
 800dd06:	47d0      	blx	sl
 800dd08:	3001      	adds	r0, #1
 800dd0a:	d0ad      	beq.n	800dc68 <_printf_i+0x15c>
 800dd0c:	6823      	ldr	r3, [r4, #0]
 800dd0e:	079b      	lsls	r3, r3, #30
 800dd10:	d413      	bmi.n	800dd3a <_printf_i+0x22e>
 800dd12:	68e0      	ldr	r0, [r4, #12]
 800dd14:	9b03      	ldr	r3, [sp, #12]
 800dd16:	4298      	cmp	r0, r3
 800dd18:	bfb8      	it	lt
 800dd1a:	4618      	movlt	r0, r3
 800dd1c:	e7a6      	b.n	800dc6c <_printf_i+0x160>
 800dd1e:	2301      	movs	r3, #1
 800dd20:	4632      	mov	r2, r6
 800dd22:	4649      	mov	r1, r9
 800dd24:	4640      	mov	r0, r8
 800dd26:	47d0      	blx	sl
 800dd28:	3001      	adds	r0, #1
 800dd2a:	d09d      	beq.n	800dc68 <_printf_i+0x15c>
 800dd2c:	3501      	adds	r5, #1
 800dd2e:	68e3      	ldr	r3, [r4, #12]
 800dd30:	9903      	ldr	r1, [sp, #12]
 800dd32:	1a5b      	subs	r3, r3, r1
 800dd34:	42ab      	cmp	r3, r5
 800dd36:	dcf2      	bgt.n	800dd1e <_printf_i+0x212>
 800dd38:	e7eb      	b.n	800dd12 <_printf_i+0x206>
 800dd3a:	2500      	movs	r5, #0
 800dd3c:	f104 0619 	add.w	r6, r4, #25
 800dd40:	e7f5      	b.n	800dd2e <_printf_i+0x222>
 800dd42:	bf00      	nop
 800dd44:	080123f2 	.word	0x080123f2
 800dd48:	08012403 	.word	0x08012403

0800dd4c <std>:
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	b510      	push	{r4, lr}
 800dd50:	4604      	mov	r4, r0
 800dd52:	e9c0 3300 	strd	r3, r3, [r0]
 800dd56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd5a:	6083      	str	r3, [r0, #8]
 800dd5c:	8181      	strh	r1, [r0, #12]
 800dd5e:	6643      	str	r3, [r0, #100]	@ 0x64
 800dd60:	81c2      	strh	r2, [r0, #14]
 800dd62:	6183      	str	r3, [r0, #24]
 800dd64:	4619      	mov	r1, r3
 800dd66:	2208      	movs	r2, #8
 800dd68:	305c      	adds	r0, #92	@ 0x5c
 800dd6a:	f000 f904 	bl	800df76 <memset>
 800dd6e:	4b0d      	ldr	r3, [pc, #52]	@ (800dda4 <std+0x58>)
 800dd70:	6263      	str	r3, [r4, #36]	@ 0x24
 800dd72:	4b0d      	ldr	r3, [pc, #52]	@ (800dda8 <std+0x5c>)
 800dd74:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dd76:	4b0d      	ldr	r3, [pc, #52]	@ (800ddac <std+0x60>)
 800dd78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dd7a:	4b0d      	ldr	r3, [pc, #52]	@ (800ddb0 <std+0x64>)
 800dd7c:	6323      	str	r3, [r4, #48]	@ 0x30
 800dd7e:	4b0d      	ldr	r3, [pc, #52]	@ (800ddb4 <std+0x68>)
 800dd80:	6224      	str	r4, [r4, #32]
 800dd82:	429c      	cmp	r4, r3
 800dd84:	d006      	beq.n	800dd94 <std+0x48>
 800dd86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dd8a:	4294      	cmp	r4, r2
 800dd8c:	d002      	beq.n	800dd94 <std+0x48>
 800dd8e:	33d0      	adds	r3, #208	@ 0xd0
 800dd90:	429c      	cmp	r4, r3
 800dd92:	d105      	bne.n	800dda0 <std+0x54>
 800dd94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dd98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd9c:	f000 b978 	b.w	800e090 <__retarget_lock_init_recursive>
 800dda0:	bd10      	pop	{r4, pc}
 800dda2:	bf00      	nop
 800dda4:	0800ded1 	.word	0x0800ded1
 800dda8:	0800def3 	.word	0x0800def3
 800ddac:	0800df2b 	.word	0x0800df2b
 800ddb0:	0800df4f 	.word	0x0800df4f
 800ddb4:	2000087c 	.word	0x2000087c

0800ddb8 <stdio_exit_handler>:
 800ddb8:	4a02      	ldr	r2, [pc, #8]	@ (800ddc4 <stdio_exit_handler+0xc>)
 800ddba:	4903      	ldr	r1, [pc, #12]	@ (800ddc8 <stdio_exit_handler+0x10>)
 800ddbc:	4803      	ldr	r0, [pc, #12]	@ (800ddcc <stdio_exit_handler+0x14>)
 800ddbe:	f000 b869 	b.w	800de94 <_fwalk_sglue>
 800ddc2:	bf00      	nop
 800ddc4:	2000004c 	.word	0x2000004c
 800ddc8:	0800f601 	.word	0x0800f601
 800ddcc:	2000005c 	.word	0x2000005c

0800ddd0 <cleanup_stdio>:
 800ddd0:	6841      	ldr	r1, [r0, #4]
 800ddd2:	4b0c      	ldr	r3, [pc, #48]	@ (800de04 <cleanup_stdio+0x34>)
 800ddd4:	4299      	cmp	r1, r3
 800ddd6:	b510      	push	{r4, lr}
 800ddd8:	4604      	mov	r4, r0
 800ddda:	d001      	beq.n	800dde0 <cleanup_stdio+0x10>
 800dddc:	f001 fc10 	bl	800f600 <_fflush_r>
 800dde0:	68a1      	ldr	r1, [r4, #8]
 800dde2:	4b09      	ldr	r3, [pc, #36]	@ (800de08 <cleanup_stdio+0x38>)
 800dde4:	4299      	cmp	r1, r3
 800dde6:	d002      	beq.n	800ddee <cleanup_stdio+0x1e>
 800dde8:	4620      	mov	r0, r4
 800ddea:	f001 fc09 	bl	800f600 <_fflush_r>
 800ddee:	68e1      	ldr	r1, [r4, #12]
 800ddf0:	4b06      	ldr	r3, [pc, #24]	@ (800de0c <cleanup_stdio+0x3c>)
 800ddf2:	4299      	cmp	r1, r3
 800ddf4:	d004      	beq.n	800de00 <cleanup_stdio+0x30>
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddfc:	f001 bc00 	b.w	800f600 <_fflush_r>
 800de00:	bd10      	pop	{r4, pc}
 800de02:	bf00      	nop
 800de04:	2000087c 	.word	0x2000087c
 800de08:	200008e4 	.word	0x200008e4
 800de0c:	2000094c 	.word	0x2000094c

0800de10 <global_stdio_init.part.0>:
 800de10:	b510      	push	{r4, lr}
 800de12:	4b0b      	ldr	r3, [pc, #44]	@ (800de40 <global_stdio_init.part.0+0x30>)
 800de14:	4c0b      	ldr	r4, [pc, #44]	@ (800de44 <global_stdio_init.part.0+0x34>)
 800de16:	4a0c      	ldr	r2, [pc, #48]	@ (800de48 <global_stdio_init.part.0+0x38>)
 800de18:	601a      	str	r2, [r3, #0]
 800de1a:	4620      	mov	r0, r4
 800de1c:	2200      	movs	r2, #0
 800de1e:	2104      	movs	r1, #4
 800de20:	f7ff ff94 	bl	800dd4c <std>
 800de24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800de28:	2201      	movs	r2, #1
 800de2a:	2109      	movs	r1, #9
 800de2c:	f7ff ff8e 	bl	800dd4c <std>
 800de30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800de34:	2202      	movs	r2, #2
 800de36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de3a:	2112      	movs	r1, #18
 800de3c:	f7ff bf86 	b.w	800dd4c <std>
 800de40:	200009b4 	.word	0x200009b4
 800de44:	2000087c 	.word	0x2000087c
 800de48:	0800ddb9 	.word	0x0800ddb9

0800de4c <__sfp_lock_acquire>:
 800de4c:	4801      	ldr	r0, [pc, #4]	@ (800de54 <__sfp_lock_acquire+0x8>)
 800de4e:	f000 b920 	b.w	800e092 <__retarget_lock_acquire_recursive>
 800de52:	bf00      	nop
 800de54:	200009bd 	.word	0x200009bd

0800de58 <__sfp_lock_release>:
 800de58:	4801      	ldr	r0, [pc, #4]	@ (800de60 <__sfp_lock_release+0x8>)
 800de5a:	f000 b91b 	b.w	800e094 <__retarget_lock_release_recursive>
 800de5e:	bf00      	nop
 800de60:	200009bd 	.word	0x200009bd

0800de64 <__sinit>:
 800de64:	b510      	push	{r4, lr}
 800de66:	4604      	mov	r4, r0
 800de68:	f7ff fff0 	bl	800de4c <__sfp_lock_acquire>
 800de6c:	6a23      	ldr	r3, [r4, #32]
 800de6e:	b11b      	cbz	r3, 800de78 <__sinit+0x14>
 800de70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de74:	f7ff bff0 	b.w	800de58 <__sfp_lock_release>
 800de78:	4b04      	ldr	r3, [pc, #16]	@ (800de8c <__sinit+0x28>)
 800de7a:	6223      	str	r3, [r4, #32]
 800de7c:	4b04      	ldr	r3, [pc, #16]	@ (800de90 <__sinit+0x2c>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d1f5      	bne.n	800de70 <__sinit+0xc>
 800de84:	f7ff ffc4 	bl	800de10 <global_stdio_init.part.0>
 800de88:	e7f2      	b.n	800de70 <__sinit+0xc>
 800de8a:	bf00      	nop
 800de8c:	0800ddd1 	.word	0x0800ddd1
 800de90:	200009b4 	.word	0x200009b4

0800de94 <_fwalk_sglue>:
 800de94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de98:	4607      	mov	r7, r0
 800de9a:	4688      	mov	r8, r1
 800de9c:	4614      	mov	r4, r2
 800de9e:	2600      	movs	r6, #0
 800dea0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dea4:	f1b9 0901 	subs.w	r9, r9, #1
 800dea8:	d505      	bpl.n	800deb6 <_fwalk_sglue+0x22>
 800deaa:	6824      	ldr	r4, [r4, #0]
 800deac:	2c00      	cmp	r4, #0
 800deae:	d1f7      	bne.n	800dea0 <_fwalk_sglue+0xc>
 800deb0:	4630      	mov	r0, r6
 800deb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deb6:	89ab      	ldrh	r3, [r5, #12]
 800deb8:	2b01      	cmp	r3, #1
 800deba:	d907      	bls.n	800decc <_fwalk_sglue+0x38>
 800debc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dec0:	3301      	adds	r3, #1
 800dec2:	d003      	beq.n	800decc <_fwalk_sglue+0x38>
 800dec4:	4629      	mov	r1, r5
 800dec6:	4638      	mov	r0, r7
 800dec8:	47c0      	blx	r8
 800deca:	4306      	orrs	r6, r0
 800decc:	3568      	adds	r5, #104	@ 0x68
 800dece:	e7e9      	b.n	800dea4 <_fwalk_sglue+0x10>

0800ded0 <__sread>:
 800ded0:	b510      	push	{r4, lr}
 800ded2:	460c      	mov	r4, r1
 800ded4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ded8:	f000 f87c 	bl	800dfd4 <_read_r>
 800dedc:	2800      	cmp	r0, #0
 800dede:	bfab      	itete	ge
 800dee0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dee2:	89a3      	ldrhlt	r3, [r4, #12]
 800dee4:	181b      	addge	r3, r3, r0
 800dee6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800deea:	bfac      	ite	ge
 800deec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800deee:	81a3      	strhlt	r3, [r4, #12]
 800def0:	bd10      	pop	{r4, pc}

0800def2 <__swrite>:
 800def2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800def6:	461f      	mov	r7, r3
 800def8:	898b      	ldrh	r3, [r1, #12]
 800defa:	05db      	lsls	r3, r3, #23
 800defc:	4605      	mov	r5, r0
 800defe:	460c      	mov	r4, r1
 800df00:	4616      	mov	r6, r2
 800df02:	d505      	bpl.n	800df10 <__swrite+0x1e>
 800df04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df08:	2302      	movs	r3, #2
 800df0a:	2200      	movs	r2, #0
 800df0c:	f000 f850 	bl	800dfb0 <_lseek_r>
 800df10:	89a3      	ldrh	r3, [r4, #12]
 800df12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800df1a:	81a3      	strh	r3, [r4, #12]
 800df1c:	4632      	mov	r2, r6
 800df1e:	463b      	mov	r3, r7
 800df20:	4628      	mov	r0, r5
 800df22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df26:	f000 b877 	b.w	800e018 <_write_r>

0800df2a <__sseek>:
 800df2a:	b510      	push	{r4, lr}
 800df2c:	460c      	mov	r4, r1
 800df2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df32:	f000 f83d 	bl	800dfb0 <_lseek_r>
 800df36:	1c43      	adds	r3, r0, #1
 800df38:	89a3      	ldrh	r3, [r4, #12]
 800df3a:	bf15      	itete	ne
 800df3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800df3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800df42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800df46:	81a3      	strheq	r3, [r4, #12]
 800df48:	bf18      	it	ne
 800df4a:	81a3      	strhne	r3, [r4, #12]
 800df4c:	bd10      	pop	{r4, pc}

0800df4e <__sclose>:
 800df4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df52:	f000 b81d 	b.w	800df90 <_close_r>

0800df56 <memcmp>:
 800df56:	b510      	push	{r4, lr}
 800df58:	3901      	subs	r1, #1
 800df5a:	4402      	add	r2, r0
 800df5c:	4290      	cmp	r0, r2
 800df5e:	d101      	bne.n	800df64 <memcmp+0xe>
 800df60:	2000      	movs	r0, #0
 800df62:	e005      	b.n	800df70 <memcmp+0x1a>
 800df64:	7803      	ldrb	r3, [r0, #0]
 800df66:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800df6a:	42a3      	cmp	r3, r4
 800df6c:	d001      	beq.n	800df72 <memcmp+0x1c>
 800df6e:	1b18      	subs	r0, r3, r4
 800df70:	bd10      	pop	{r4, pc}
 800df72:	3001      	adds	r0, #1
 800df74:	e7f2      	b.n	800df5c <memcmp+0x6>

0800df76 <memset>:
 800df76:	4402      	add	r2, r0
 800df78:	4603      	mov	r3, r0
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d100      	bne.n	800df80 <memset+0xa>
 800df7e:	4770      	bx	lr
 800df80:	f803 1b01 	strb.w	r1, [r3], #1
 800df84:	e7f9      	b.n	800df7a <memset+0x4>
	...

0800df88 <_localeconv_r>:
 800df88:	4800      	ldr	r0, [pc, #0]	@ (800df8c <_localeconv_r+0x4>)
 800df8a:	4770      	bx	lr
 800df8c:	20000198 	.word	0x20000198

0800df90 <_close_r>:
 800df90:	b538      	push	{r3, r4, r5, lr}
 800df92:	4d06      	ldr	r5, [pc, #24]	@ (800dfac <_close_r+0x1c>)
 800df94:	2300      	movs	r3, #0
 800df96:	4604      	mov	r4, r0
 800df98:	4608      	mov	r0, r1
 800df9a:	602b      	str	r3, [r5, #0]
 800df9c:	f7f9 fc62 	bl	8007864 <_close>
 800dfa0:	1c43      	adds	r3, r0, #1
 800dfa2:	d102      	bne.n	800dfaa <_close_r+0x1a>
 800dfa4:	682b      	ldr	r3, [r5, #0]
 800dfa6:	b103      	cbz	r3, 800dfaa <_close_r+0x1a>
 800dfa8:	6023      	str	r3, [r4, #0]
 800dfaa:	bd38      	pop	{r3, r4, r5, pc}
 800dfac:	200009b8 	.word	0x200009b8

0800dfb0 <_lseek_r>:
 800dfb0:	b538      	push	{r3, r4, r5, lr}
 800dfb2:	4d07      	ldr	r5, [pc, #28]	@ (800dfd0 <_lseek_r+0x20>)
 800dfb4:	4604      	mov	r4, r0
 800dfb6:	4608      	mov	r0, r1
 800dfb8:	4611      	mov	r1, r2
 800dfba:	2200      	movs	r2, #0
 800dfbc:	602a      	str	r2, [r5, #0]
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	f7f9 fc77 	bl	80078b2 <_lseek>
 800dfc4:	1c43      	adds	r3, r0, #1
 800dfc6:	d102      	bne.n	800dfce <_lseek_r+0x1e>
 800dfc8:	682b      	ldr	r3, [r5, #0]
 800dfca:	b103      	cbz	r3, 800dfce <_lseek_r+0x1e>
 800dfcc:	6023      	str	r3, [r4, #0]
 800dfce:	bd38      	pop	{r3, r4, r5, pc}
 800dfd0:	200009b8 	.word	0x200009b8

0800dfd4 <_read_r>:
 800dfd4:	b538      	push	{r3, r4, r5, lr}
 800dfd6:	4d07      	ldr	r5, [pc, #28]	@ (800dff4 <_read_r+0x20>)
 800dfd8:	4604      	mov	r4, r0
 800dfda:	4608      	mov	r0, r1
 800dfdc:	4611      	mov	r1, r2
 800dfde:	2200      	movs	r2, #0
 800dfe0:	602a      	str	r2, [r5, #0]
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	f7f9 fc05 	bl	80077f2 <_read>
 800dfe8:	1c43      	adds	r3, r0, #1
 800dfea:	d102      	bne.n	800dff2 <_read_r+0x1e>
 800dfec:	682b      	ldr	r3, [r5, #0]
 800dfee:	b103      	cbz	r3, 800dff2 <_read_r+0x1e>
 800dff0:	6023      	str	r3, [r4, #0]
 800dff2:	bd38      	pop	{r3, r4, r5, pc}
 800dff4:	200009b8 	.word	0x200009b8

0800dff8 <_sbrk_r>:
 800dff8:	b538      	push	{r3, r4, r5, lr}
 800dffa:	4d06      	ldr	r5, [pc, #24]	@ (800e014 <_sbrk_r+0x1c>)
 800dffc:	2300      	movs	r3, #0
 800dffe:	4604      	mov	r4, r0
 800e000:	4608      	mov	r0, r1
 800e002:	602b      	str	r3, [r5, #0]
 800e004:	f7f9 fc62 	bl	80078cc <_sbrk>
 800e008:	1c43      	adds	r3, r0, #1
 800e00a:	d102      	bne.n	800e012 <_sbrk_r+0x1a>
 800e00c:	682b      	ldr	r3, [r5, #0]
 800e00e:	b103      	cbz	r3, 800e012 <_sbrk_r+0x1a>
 800e010:	6023      	str	r3, [r4, #0]
 800e012:	bd38      	pop	{r3, r4, r5, pc}
 800e014:	200009b8 	.word	0x200009b8

0800e018 <_write_r>:
 800e018:	b538      	push	{r3, r4, r5, lr}
 800e01a:	4d07      	ldr	r5, [pc, #28]	@ (800e038 <_write_r+0x20>)
 800e01c:	4604      	mov	r4, r0
 800e01e:	4608      	mov	r0, r1
 800e020:	4611      	mov	r1, r2
 800e022:	2200      	movs	r2, #0
 800e024:	602a      	str	r2, [r5, #0]
 800e026:	461a      	mov	r2, r3
 800e028:	f7f9 fc00 	bl	800782c <_write>
 800e02c:	1c43      	adds	r3, r0, #1
 800e02e:	d102      	bne.n	800e036 <_write_r+0x1e>
 800e030:	682b      	ldr	r3, [r5, #0]
 800e032:	b103      	cbz	r3, 800e036 <_write_r+0x1e>
 800e034:	6023      	str	r3, [r4, #0]
 800e036:	bd38      	pop	{r3, r4, r5, pc}
 800e038:	200009b8 	.word	0x200009b8

0800e03c <__errno>:
 800e03c:	4b01      	ldr	r3, [pc, #4]	@ (800e044 <__errno+0x8>)
 800e03e:	6818      	ldr	r0, [r3, #0]
 800e040:	4770      	bx	lr
 800e042:	bf00      	nop
 800e044:	20000058 	.word	0x20000058

0800e048 <__libc_init_array>:
 800e048:	b570      	push	{r4, r5, r6, lr}
 800e04a:	4d0d      	ldr	r5, [pc, #52]	@ (800e080 <__libc_init_array+0x38>)
 800e04c:	4c0d      	ldr	r4, [pc, #52]	@ (800e084 <__libc_init_array+0x3c>)
 800e04e:	1b64      	subs	r4, r4, r5
 800e050:	10a4      	asrs	r4, r4, #2
 800e052:	2600      	movs	r6, #0
 800e054:	42a6      	cmp	r6, r4
 800e056:	d109      	bne.n	800e06c <__libc_init_array+0x24>
 800e058:	4d0b      	ldr	r5, [pc, #44]	@ (800e088 <__libc_init_array+0x40>)
 800e05a:	4c0c      	ldr	r4, [pc, #48]	@ (800e08c <__libc_init_array+0x44>)
 800e05c:	f004 f998 	bl	8012390 <_init>
 800e060:	1b64      	subs	r4, r4, r5
 800e062:	10a4      	asrs	r4, r4, #2
 800e064:	2600      	movs	r6, #0
 800e066:	42a6      	cmp	r6, r4
 800e068:	d105      	bne.n	800e076 <__libc_init_array+0x2e>
 800e06a:	bd70      	pop	{r4, r5, r6, pc}
 800e06c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e070:	4798      	blx	r3
 800e072:	3601      	adds	r6, #1
 800e074:	e7ee      	b.n	800e054 <__libc_init_array+0xc>
 800e076:	f855 3b04 	ldr.w	r3, [r5], #4
 800e07a:	4798      	blx	r3
 800e07c:	3601      	adds	r6, #1
 800e07e:	e7f2      	b.n	800e066 <__libc_init_array+0x1e>
 800e080:	08012998 	.word	0x08012998
 800e084:	08012998 	.word	0x08012998
 800e088:	08012998 	.word	0x08012998
 800e08c:	0801299c 	.word	0x0801299c

0800e090 <__retarget_lock_init_recursive>:
 800e090:	4770      	bx	lr

0800e092 <__retarget_lock_acquire_recursive>:
 800e092:	4770      	bx	lr

0800e094 <__retarget_lock_release_recursive>:
 800e094:	4770      	bx	lr

0800e096 <memcpy>:
 800e096:	440a      	add	r2, r1
 800e098:	4291      	cmp	r1, r2
 800e09a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e09e:	d100      	bne.n	800e0a2 <memcpy+0xc>
 800e0a0:	4770      	bx	lr
 800e0a2:	b510      	push	{r4, lr}
 800e0a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0ac:	4291      	cmp	r1, r2
 800e0ae:	d1f9      	bne.n	800e0a4 <memcpy+0xe>
 800e0b0:	bd10      	pop	{r4, pc}

0800e0b2 <quorem>:
 800e0b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b6:	6903      	ldr	r3, [r0, #16]
 800e0b8:	690c      	ldr	r4, [r1, #16]
 800e0ba:	42a3      	cmp	r3, r4
 800e0bc:	4607      	mov	r7, r0
 800e0be:	db7e      	blt.n	800e1be <quorem+0x10c>
 800e0c0:	3c01      	subs	r4, #1
 800e0c2:	f101 0814 	add.w	r8, r1, #20
 800e0c6:	00a3      	lsls	r3, r4, #2
 800e0c8:	f100 0514 	add.w	r5, r0, #20
 800e0cc:	9300      	str	r3, [sp, #0]
 800e0ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0d2:	9301      	str	r3, [sp, #4]
 800e0d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e0d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0dc:	3301      	adds	r3, #1
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e0e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800e0e8:	d32e      	bcc.n	800e148 <quorem+0x96>
 800e0ea:	f04f 0a00 	mov.w	sl, #0
 800e0ee:	46c4      	mov	ip, r8
 800e0f0:	46ae      	mov	lr, r5
 800e0f2:	46d3      	mov	fp, sl
 800e0f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e0f8:	b298      	uxth	r0, r3
 800e0fa:	fb06 a000 	mla	r0, r6, r0, sl
 800e0fe:	0c02      	lsrs	r2, r0, #16
 800e100:	0c1b      	lsrs	r3, r3, #16
 800e102:	fb06 2303 	mla	r3, r6, r3, r2
 800e106:	f8de 2000 	ldr.w	r2, [lr]
 800e10a:	b280      	uxth	r0, r0
 800e10c:	b292      	uxth	r2, r2
 800e10e:	1a12      	subs	r2, r2, r0
 800e110:	445a      	add	r2, fp
 800e112:	f8de 0000 	ldr.w	r0, [lr]
 800e116:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e120:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e124:	b292      	uxth	r2, r2
 800e126:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e12a:	45e1      	cmp	r9, ip
 800e12c:	f84e 2b04 	str.w	r2, [lr], #4
 800e130:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e134:	d2de      	bcs.n	800e0f4 <quorem+0x42>
 800e136:	9b00      	ldr	r3, [sp, #0]
 800e138:	58eb      	ldr	r3, [r5, r3]
 800e13a:	b92b      	cbnz	r3, 800e148 <quorem+0x96>
 800e13c:	9b01      	ldr	r3, [sp, #4]
 800e13e:	3b04      	subs	r3, #4
 800e140:	429d      	cmp	r5, r3
 800e142:	461a      	mov	r2, r3
 800e144:	d32f      	bcc.n	800e1a6 <quorem+0xf4>
 800e146:	613c      	str	r4, [r7, #16]
 800e148:	4638      	mov	r0, r7
 800e14a:	f001 f8cd 	bl	800f2e8 <__mcmp>
 800e14e:	2800      	cmp	r0, #0
 800e150:	db25      	blt.n	800e19e <quorem+0xec>
 800e152:	4629      	mov	r1, r5
 800e154:	2000      	movs	r0, #0
 800e156:	f858 2b04 	ldr.w	r2, [r8], #4
 800e15a:	f8d1 c000 	ldr.w	ip, [r1]
 800e15e:	fa1f fe82 	uxth.w	lr, r2
 800e162:	fa1f f38c 	uxth.w	r3, ip
 800e166:	eba3 030e 	sub.w	r3, r3, lr
 800e16a:	4403      	add	r3, r0
 800e16c:	0c12      	lsrs	r2, r2, #16
 800e16e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e172:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e176:	b29b      	uxth	r3, r3
 800e178:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e17c:	45c1      	cmp	r9, r8
 800e17e:	f841 3b04 	str.w	r3, [r1], #4
 800e182:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e186:	d2e6      	bcs.n	800e156 <quorem+0xa4>
 800e188:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e18c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e190:	b922      	cbnz	r2, 800e19c <quorem+0xea>
 800e192:	3b04      	subs	r3, #4
 800e194:	429d      	cmp	r5, r3
 800e196:	461a      	mov	r2, r3
 800e198:	d30b      	bcc.n	800e1b2 <quorem+0x100>
 800e19a:	613c      	str	r4, [r7, #16]
 800e19c:	3601      	adds	r6, #1
 800e19e:	4630      	mov	r0, r6
 800e1a0:	b003      	add	sp, #12
 800e1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1a6:	6812      	ldr	r2, [r2, #0]
 800e1a8:	3b04      	subs	r3, #4
 800e1aa:	2a00      	cmp	r2, #0
 800e1ac:	d1cb      	bne.n	800e146 <quorem+0x94>
 800e1ae:	3c01      	subs	r4, #1
 800e1b0:	e7c6      	b.n	800e140 <quorem+0x8e>
 800e1b2:	6812      	ldr	r2, [r2, #0]
 800e1b4:	3b04      	subs	r3, #4
 800e1b6:	2a00      	cmp	r2, #0
 800e1b8:	d1ef      	bne.n	800e19a <quorem+0xe8>
 800e1ba:	3c01      	subs	r4, #1
 800e1bc:	e7ea      	b.n	800e194 <quorem+0xe2>
 800e1be:	2000      	movs	r0, #0
 800e1c0:	e7ee      	b.n	800e1a0 <quorem+0xee>
 800e1c2:	0000      	movs	r0, r0
 800e1c4:	0000      	movs	r0, r0
	...

0800e1c8 <_dtoa_r>:
 800e1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1cc:	69c7      	ldr	r7, [r0, #28]
 800e1ce:	b099      	sub	sp, #100	@ 0x64
 800e1d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e1d4:	ec55 4b10 	vmov	r4, r5, d0
 800e1d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e1da:	9109      	str	r1, [sp, #36]	@ 0x24
 800e1dc:	4683      	mov	fp, r0
 800e1de:	920e      	str	r2, [sp, #56]	@ 0x38
 800e1e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e1e2:	b97f      	cbnz	r7, 800e204 <_dtoa_r+0x3c>
 800e1e4:	2010      	movs	r0, #16
 800e1e6:	f000 fdfd 	bl	800ede4 <malloc>
 800e1ea:	4602      	mov	r2, r0
 800e1ec:	f8cb 001c 	str.w	r0, [fp, #28]
 800e1f0:	b920      	cbnz	r0, 800e1fc <_dtoa_r+0x34>
 800e1f2:	4ba7      	ldr	r3, [pc, #668]	@ (800e490 <_dtoa_r+0x2c8>)
 800e1f4:	21ef      	movs	r1, #239	@ 0xef
 800e1f6:	48a7      	ldr	r0, [pc, #668]	@ (800e494 <_dtoa_r+0x2cc>)
 800e1f8:	f001 fa2a 	bl	800f650 <__assert_func>
 800e1fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e200:	6007      	str	r7, [r0, #0]
 800e202:	60c7      	str	r7, [r0, #12]
 800e204:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e208:	6819      	ldr	r1, [r3, #0]
 800e20a:	b159      	cbz	r1, 800e224 <_dtoa_r+0x5c>
 800e20c:	685a      	ldr	r2, [r3, #4]
 800e20e:	604a      	str	r2, [r1, #4]
 800e210:	2301      	movs	r3, #1
 800e212:	4093      	lsls	r3, r2
 800e214:	608b      	str	r3, [r1, #8]
 800e216:	4658      	mov	r0, fp
 800e218:	f000 fe2c 	bl	800ee74 <_Bfree>
 800e21c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e220:	2200      	movs	r2, #0
 800e222:	601a      	str	r2, [r3, #0]
 800e224:	1e2b      	subs	r3, r5, #0
 800e226:	bfb9      	ittee	lt
 800e228:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e22c:	9303      	strlt	r3, [sp, #12]
 800e22e:	2300      	movge	r3, #0
 800e230:	6033      	strge	r3, [r6, #0]
 800e232:	9f03      	ldr	r7, [sp, #12]
 800e234:	4b98      	ldr	r3, [pc, #608]	@ (800e498 <_dtoa_r+0x2d0>)
 800e236:	bfbc      	itt	lt
 800e238:	2201      	movlt	r2, #1
 800e23a:	6032      	strlt	r2, [r6, #0]
 800e23c:	43bb      	bics	r3, r7
 800e23e:	d112      	bne.n	800e266 <_dtoa_r+0x9e>
 800e240:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e242:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e246:	6013      	str	r3, [r2, #0]
 800e248:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e24c:	4323      	orrs	r3, r4
 800e24e:	f000 854d 	beq.w	800ecec <_dtoa_r+0xb24>
 800e252:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e254:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e4ac <_dtoa_r+0x2e4>
 800e258:	2b00      	cmp	r3, #0
 800e25a:	f000 854f 	beq.w	800ecfc <_dtoa_r+0xb34>
 800e25e:	f10a 0303 	add.w	r3, sl, #3
 800e262:	f000 bd49 	b.w	800ecf8 <_dtoa_r+0xb30>
 800e266:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e26a:	2200      	movs	r2, #0
 800e26c:	ec51 0b17 	vmov	r0, r1, d7
 800e270:	2300      	movs	r3, #0
 800e272:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e276:	f7f2 fc47 	bl	8000b08 <__aeabi_dcmpeq>
 800e27a:	4680      	mov	r8, r0
 800e27c:	b158      	cbz	r0, 800e296 <_dtoa_r+0xce>
 800e27e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e280:	2301      	movs	r3, #1
 800e282:	6013      	str	r3, [r2, #0]
 800e284:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e286:	b113      	cbz	r3, 800e28e <_dtoa_r+0xc6>
 800e288:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e28a:	4b84      	ldr	r3, [pc, #528]	@ (800e49c <_dtoa_r+0x2d4>)
 800e28c:	6013      	str	r3, [r2, #0]
 800e28e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e4b0 <_dtoa_r+0x2e8>
 800e292:	f000 bd33 	b.w	800ecfc <_dtoa_r+0xb34>
 800e296:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e29a:	aa16      	add	r2, sp, #88	@ 0x58
 800e29c:	a917      	add	r1, sp, #92	@ 0x5c
 800e29e:	4658      	mov	r0, fp
 800e2a0:	f001 f8d2 	bl	800f448 <__d2b>
 800e2a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e2a8:	4681      	mov	r9, r0
 800e2aa:	2e00      	cmp	r6, #0
 800e2ac:	d077      	beq.n	800e39e <_dtoa_r+0x1d6>
 800e2ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e2b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e2c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e2c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	4b74      	ldr	r3, [pc, #464]	@ (800e4a0 <_dtoa_r+0x2d8>)
 800e2ce:	f7f1 fffb 	bl	80002c8 <__aeabi_dsub>
 800e2d2:	a369      	add	r3, pc, #420	@ (adr r3, 800e478 <_dtoa_r+0x2b0>)
 800e2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d8:	f7f2 f9ae 	bl	8000638 <__aeabi_dmul>
 800e2dc:	a368      	add	r3, pc, #416	@ (adr r3, 800e480 <_dtoa_r+0x2b8>)
 800e2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e2:	f7f1 fff3 	bl	80002cc <__adddf3>
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	4630      	mov	r0, r6
 800e2ea:	460d      	mov	r5, r1
 800e2ec:	f7f2 f93a 	bl	8000564 <__aeabi_i2d>
 800e2f0:	a365      	add	r3, pc, #404	@ (adr r3, 800e488 <_dtoa_r+0x2c0>)
 800e2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f6:	f7f2 f99f 	bl	8000638 <__aeabi_dmul>
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	4620      	mov	r0, r4
 800e300:	4629      	mov	r1, r5
 800e302:	f7f1 ffe3 	bl	80002cc <__adddf3>
 800e306:	4604      	mov	r4, r0
 800e308:	460d      	mov	r5, r1
 800e30a:	f7f2 fc45 	bl	8000b98 <__aeabi_d2iz>
 800e30e:	2200      	movs	r2, #0
 800e310:	4607      	mov	r7, r0
 800e312:	2300      	movs	r3, #0
 800e314:	4620      	mov	r0, r4
 800e316:	4629      	mov	r1, r5
 800e318:	f7f2 fc00 	bl	8000b1c <__aeabi_dcmplt>
 800e31c:	b140      	cbz	r0, 800e330 <_dtoa_r+0x168>
 800e31e:	4638      	mov	r0, r7
 800e320:	f7f2 f920 	bl	8000564 <__aeabi_i2d>
 800e324:	4622      	mov	r2, r4
 800e326:	462b      	mov	r3, r5
 800e328:	f7f2 fbee 	bl	8000b08 <__aeabi_dcmpeq>
 800e32c:	b900      	cbnz	r0, 800e330 <_dtoa_r+0x168>
 800e32e:	3f01      	subs	r7, #1
 800e330:	2f16      	cmp	r7, #22
 800e332:	d851      	bhi.n	800e3d8 <_dtoa_r+0x210>
 800e334:	4b5b      	ldr	r3, [pc, #364]	@ (800e4a4 <_dtoa_r+0x2dc>)
 800e336:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e342:	f7f2 fbeb 	bl	8000b1c <__aeabi_dcmplt>
 800e346:	2800      	cmp	r0, #0
 800e348:	d048      	beq.n	800e3dc <_dtoa_r+0x214>
 800e34a:	3f01      	subs	r7, #1
 800e34c:	2300      	movs	r3, #0
 800e34e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e350:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e352:	1b9b      	subs	r3, r3, r6
 800e354:	1e5a      	subs	r2, r3, #1
 800e356:	bf44      	itt	mi
 800e358:	f1c3 0801 	rsbmi	r8, r3, #1
 800e35c:	2300      	movmi	r3, #0
 800e35e:	9208      	str	r2, [sp, #32]
 800e360:	bf54      	ite	pl
 800e362:	f04f 0800 	movpl.w	r8, #0
 800e366:	9308      	strmi	r3, [sp, #32]
 800e368:	2f00      	cmp	r7, #0
 800e36a:	db39      	blt.n	800e3e0 <_dtoa_r+0x218>
 800e36c:	9b08      	ldr	r3, [sp, #32]
 800e36e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e370:	443b      	add	r3, r7
 800e372:	9308      	str	r3, [sp, #32]
 800e374:	2300      	movs	r3, #0
 800e376:	930a      	str	r3, [sp, #40]	@ 0x28
 800e378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e37a:	2b09      	cmp	r3, #9
 800e37c:	d864      	bhi.n	800e448 <_dtoa_r+0x280>
 800e37e:	2b05      	cmp	r3, #5
 800e380:	bfc4      	itt	gt
 800e382:	3b04      	subgt	r3, #4
 800e384:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e388:	f1a3 0302 	sub.w	r3, r3, #2
 800e38c:	bfcc      	ite	gt
 800e38e:	2400      	movgt	r4, #0
 800e390:	2401      	movle	r4, #1
 800e392:	2b03      	cmp	r3, #3
 800e394:	d863      	bhi.n	800e45e <_dtoa_r+0x296>
 800e396:	e8df f003 	tbb	[pc, r3]
 800e39a:	372a      	.short	0x372a
 800e39c:	5535      	.short	0x5535
 800e39e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e3a2:	441e      	add	r6, r3
 800e3a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e3a8:	2b20      	cmp	r3, #32
 800e3aa:	bfc1      	itttt	gt
 800e3ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e3b0:	409f      	lslgt	r7, r3
 800e3b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e3b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e3ba:	bfd6      	itet	le
 800e3bc:	f1c3 0320 	rsble	r3, r3, #32
 800e3c0:	ea47 0003 	orrgt.w	r0, r7, r3
 800e3c4:	fa04 f003 	lslle.w	r0, r4, r3
 800e3c8:	f7f2 f8bc 	bl	8000544 <__aeabi_ui2d>
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e3d2:	3e01      	subs	r6, #1
 800e3d4:	9214      	str	r2, [sp, #80]	@ 0x50
 800e3d6:	e777      	b.n	800e2c8 <_dtoa_r+0x100>
 800e3d8:	2301      	movs	r3, #1
 800e3da:	e7b8      	b.n	800e34e <_dtoa_r+0x186>
 800e3dc:	9012      	str	r0, [sp, #72]	@ 0x48
 800e3de:	e7b7      	b.n	800e350 <_dtoa_r+0x188>
 800e3e0:	427b      	negs	r3, r7
 800e3e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	eba8 0807 	sub.w	r8, r8, r7
 800e3ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e3ec:	e7c4      	b.n	800e378 <_dtoa_r+0x1b0>
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	dc35      	bgt.n	800e464 <_dtoa_r+0x29c>
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	9300      	str	r3, [sp, #0]
 800e3fc:	9307      	str	r3, [sp, #28]
 800e3fe:	461a      	mov	r2, r3
 800e400:	920e      	str	r2, [sp, #56]	@ 0x38
 800e402:	e00b      	b.n	800e41c <_dtoa_r+0x254>
 800e404:	2301      	movs	r3, #1
 800e406:	e7f3      	b.n	800e3f0 <_dtoa_r+0x228>
 800e408:	2300      	movs	r3, #0
 800e40a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e40c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e40e:	18fb      	adds	r3, r7, r3
 800e410:	9300      	str	r3, [sp, #0]
 800e412:	3301      	adds	r3, #1
 800e414:	2b01      	cmp	r3, #1
 800e416:	9307      	str	r3, [sp, #28]
 800e418:	bfb8      	it	lt
 800e41a:	2301      	movlt	r3, #1
 800e41c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e420:	2100      	movs	r1, #0
 800e422:	2204      	movs	r2, #4
 800e424:	f102 0514 	add.w	r5, r2, #20
 800e428:	429d      	cmp	r5, r3
 800e42a:	d91f      	bls.n	800e46c <_dtoa_r+0x2a4>
 800e42c:	6041      	str	r1, [r0, #4]
 800e42e:	4658      	mov	r0, fp
 800e430:	f000 fce0 	bl	800edf4 <_Balloc>
 800e434:	4682      	mov	sl, r0
 800e436:	2800      	cmp	r0, #0
 800e438:	d13c      	bne.n	800e4b4 <_dtoa_r+0x2ec>
 800e43a:	4b1b      	ldr	r3, [pc, #108]	@ (800e4a8 <_dtoa_r+0x2e0>)
 800e43c:	4602      	mov	r2, r0
 800e43e:	f240 11af 	movw	r1, #431	@ 0x1af
 800e442:	e6d8      	b.n	800e1f6 <_dtoa_r+0x2e>
 800e444:	2301      	movs	r3, #1
 800e446:	e7e0      	b.n	800e40a <_dtoa_r+0x242>
 800e448:	2401      	movs	r4, #1
 800e44a:	2300      	movs	r3, #0
 800e44c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e44e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e450:	f04f 33ff 	mov.w	r3, #4294967295
 800e454:	9300      	str	r3, [sp, #0]
 800e456:	9307      	str	r3, [sp, #28]
 800e458:	2200      	movs	r2, #0
 800e45a:	2312      	movs	r3, #18
 800e45c:	e7d0      	b.n	800e400 <_dtoa_r+0x238>
 800e45e:	2301      	movs	r3, #1
 800e460:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e462:	e7f5      	b.n	800e450 <_dtoa_r+0x288>
 800e464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e466:	9300      	str	r3, [sp, #0]
 800e468:	9307      	str	r3, [sp, #28]
 800e46a:	e7d7      	b.n	800e41c <_dtoa_r+0x254>
 800e46c:	3101      	adds	r1, #1
 800e46e:	0052      	lsls	r2, r2, #1
 800e470:	e7d8      	b.n	800e424 <_dtoa_r+0x25c>
 800e472:	bf00      	nop
 800e474:	f3af 8000 	nop.w
 800e478:	636f4361 	.word	0x636f4361
 800e47c:	3fd287a7 	.word	0x3fd287a7
 800e480:	8b60c8b3 	.word	0x8b60c8b3
 800e484:	3fc68a28 	.word	0x3fc68a28
 800e488:	509f79fb 	.word	0x509f79fb
 800e48c:	3fd34413 	.word	0x3fd34413
 800e490:	08012421 	.word	0x08012421
 800e494:	08012438 	.word	0x08012438
 800e498:	7ff00000 	.word	0x7ff00000
 800e49c:	080123f1 	.word	0x080123f1
 800e4a0:	3ff80000 	.word	0x3ff80000
 800e4a4:	08012530 	.word	0x08012530
 800e4a8:	08012490 	.word	0x08012490
 800e4ac:	0801241d 	.word	0x0801241d
 800e4b0:	080123f0 	.word	0x080123f0
 800e4b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e4b8:	6018      	str	r0, [r3, #0]
 800e4ba:	9b07      	ldr	r3, [sp, #28]
 800e4bc:	2b0e      	cmp	r3, #14
 800e4be:	f200 80a4 	bhi.w	800e60a <_dtoa_r+0x442>
 800e4c2:	2c00      	cmp	r4, #0
 800e4c4:	f000 80a1 	beq.w	800e60a <_dtoa_r+0x442>
 800e4c8:	2f00      	cmp	r7, #0
 800e4ca:	dd33      	ble.n	800e534 <_dtoa_r+0x36c>
 800e4cc:	4bad      	ldr	r3, [pc, #692]	@ (800e784 <_dtoa_r+0x5bc>)
 800e4ce:	f007 020f 	and.w	r2, r7, #15
 800e4d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4d6:	ed93 7b00 	vldr	d7, [r3]
 800e4da:	05f8      	lsls	r0, r7, #23
 800e4dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e4e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e4e4:	d516      	bpl.n	800e514 <_dtoa_r+0x34c>
 800e4e6:	4ba8      	ldr	r3, [pc, #672]	@ (800e788 <_dtoa_r+0x5c0>)
 800e4e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e4ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e4f0:	f7f2 f9cc 	bl	800088c <__aeabi_ddiv>
 800e4f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4f8:	f004 040f 	and.w	r4, r4, #15
 800e4fc:	2603      	movs	r6, #3
 800e4fe:	4da2      	ldr	r5, [pc, #648]	@ (800e788 <_dtoa_r+0x5c0>)
 800e500:	b954      	cbnz	r4, 800e518 <_dtoa_r+0x350>
 800e502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e50a:	f7f2 f9bf 	bl	800088c <__aeabi_ddiv>
 800e50e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e512:	e028      	b.n	800e566 <_dtoa_r+0x39e>
 800e514:	2602      	movs	r6, #2
 800e516:	e7f2      	b.n	800e4fe <_dtoa_r+0x336>
 800e518:	07e1      	lsls	r1, r4, #31
 800e51a:	d508      	bpl.n	800e52e <_dtoa_r+0x366>
 800e51c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e520:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e524:	f7f2 f888 	bl	8000638 <__aeabi_dmul>
 800e528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e52c:	3601      	adds	r6, #1
 800e52e:	1064      	asrs	r4, r4, #1
 800e530:	3508      	adds	r5, #8
 800e532:	e7e5      	b.n	800e500 <_dtoa_r+0x338>
 800e534:	f000 80d2 	beq.w	800e6dc <_dtoa_r+0x514>
 800e538:	427c      	negs	r4, r7
 800e53a:	4b92      	ldr	r3, [pc, #584]	@ (800e784 <_dtoa_r+0x5bc>)
 800e53c:	4d92      	ldr	r5, [pc, #584]	@ (800e788 <_dtoa_r+0x5c0>)
 800e53e:	f004 020f 	and.w	r2, r4, #15
 800e542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e54e:	f7f2 f873 	bl	8000638 <__aeabi_dmul>
 800e552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e556:	1124      	asrs	r4, r4, #4
 800e558:	2300      	movs	r3, #0
 800e55a:	2602      	movs	r6, #2
 800e55c:	2c00      	cmp	r4, #0
 800e55e:	f040 80b2 	bne.w	800e6c6 <_dtoa_r+0x4fe>
 800e562:	2b00      	cmp	r3, #0
 800e564:	d1d3      	bne.n	800e50e <_dtoa_r+0x346>
 800e566:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e568:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	f000 80b7 	beq.w	800e6e0 <_dtoa_r+0x518>
 800e572:	4b86      	ldr	r3, [pc, #536]	@ (800e78c <_dtoa_r+0x5c4>)
 800e574:	2200      	movs	r2, #0
 800e576:	4620      	mov	r0, r4
 800e578:	4629      	mov	r1, r5
 800e57a:	f7f2 facf 	bl	8000b1c <__aeabi_dcmplt>
 800e57e:	2800      	cmp	r0, #0
 800e580:	f000 80ae 	beq.w	800e6e0 <_dtoa_r+0x518>
 800e584:	9b07      	ldr	r3, [sp, #28]
 800e586:	2b00      	cmp	r3, #0
 800e588:	f000 80aa 	beq.w	800e6e0 <_dtoa_r+0x518>
 800e58c:	9b00      	ldr	r3, [sp, #0]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	dd37      	ble.n	800e602 <_dtoa_r+0x43a>
 800e592:	1e7b      	subs	r3, r7, #1
 800e594:	9304      	str	r3, [sp, #16]
 800e596:	4620      	mov	r0, r4
 800e598:	4b7d      	ldr	r3, [pc, #500]	@ (800e790 <_dtoa_r+0x5c8>)
 800e59a:	2200      	movs	r2, #0
 800e59c:	4629      	mov	r1, r5
 800e59e:	f7f2 f84b 	bl	8000638 <__aeabi_dmul>
 800e5a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5a6:	9c00      	ldr	r4, [sp, #0]
 800e5a8:	3601      	adds	r6, #1
 800e5aa:	4630      	mov	r0, r6
 800e5ac:	f7f1 ffda 	bl	8000564 <__aeabi_i2d>
 800e5b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e5b4:	f7f2 f840 	bl	8000638 <__aeabi_dmul>
 800e5b8:	4b76      	ldr	r3, [pc, #472]	@ (800e794 <_dtoa_r+0x5cc>)
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f7f1 fe86 	bl	80002cc <__adddf3>
 800e5c0:	4605      	mov	r5, r0
 800e5c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e5c6:	2c00      	cmp	r4, #0
 800e5c8:	f040 808d 	bne.w	800e6e6 <_dtoa_r+0x51e>
 800e5cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5d0:	4b71      	ldr	r3, [pc, #452]	@ (800e798 <_dtoa_r+0x5d0>)
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	f7f1 fe78 	bl	80002c8 <__aeabi_dsub>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	460b      	mov	r3, r1
 800e5dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e5e0:	462a      	mov	r2, r5
 800e5e2:	4633      	mov	r3, r6
 800e5e4:	f7f2 fab8 	bl	8000b58 <__aeabi_dcmpgt>
 800e5e8:	2800      	cmp	r0, #0
 800e5ea:	f040 828b 	bne.w	800eb04 <_dtoa_r+0x93c>
 800e5ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5f2:	462a      	mov	r2, r5
 800e5f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e5f8:	f7f2 fa90 	bl	8000b1c <__aeabi_dcmplt>
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	f040 8128 	bne.w	800e852 <_dtoa_r+0x68a>
 800e602:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e606:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e60a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	f2c0 815a 	blt.w	800e8c6 <_dtoa_r+0x6fe>
 800e612:	2f0e      	cmp	r7, #14
 800e614:	f300 8157 	bgt.w	800e8c6 <_dtoa_r+0x6fe>
 800e618:	4b5a      	ldr	r3, [pc, #360]	@ (800e784 <_dtoa_r+0x5bc>)
 800e61a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e61e:	ed93 7b00 	vldr	d7, [r3]
 800e622:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e624:	2b00      	cmp	r3, #0
 800e626:	ed8d 7b00 	vstr	d7, [sp]
 800e62a:	da03      	bge.n	800e634 <_dtoa_r+0x46c>
 800e62c:	9b07      	ldr	r3, [sp, #28]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	f340 8101 	ble.w	800e836 <_dtoa_r+0x66e>
 800e634:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e638:	4656      	mov	r6, sl
 800e63a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e63e:	4620      	mov	r0, r4
 800e640:	4629      	mov	r1, r5
 800e642:	f7f2 f923 	bl	800088c <__aeabi_ddiv>
 800e646:	f7f2 faa7 	bl	8000b98 <__aeabi_d2iz>
 800e64a:	4680      	mov	r8, r0
 800e64c:	f7f1 ff8a 	bl	8000564 <__aeabi_i2d>
 800e650:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e654:	f7f1 fff0 	bl	8000638 <__aeabi_dmul>
 800e658:	4602      	mov	r2, r0
 800e65a:	460b      	mov	r3, r1
 800e65c:	4620      	mov	r0, r4
 800e65e:	4629      	mov	r1, r5
 800e660:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e664:	f7f1 fe30 	bl	80002c8 <__aeabi_dsub>
 800e668:	f806 4b01 	strb.w	r4, [r6], #1
 800e66c:	9d07      	ldr	r5, [sp, #28]
 800e66e:	eba6 040a 	sub.w	r4, r6, sl
 800e672:	42a5      	cmp	r5, r4
 800e674:	4602      	mov	r2, r0
 800e676:	460b      	mov	r3, r1
 800e678:	f040 8117 	bne.w	800e8aa <_dtoa_r+0x6e2>
 800e67c:	f7f1 fe26 	bl	80002cc <__adddf3>
 800e680:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e684:	4604      	mov	r4, r0
 800e686:	460d      	mov	r5, r1
 800e688:	f7f2 fa66 	bl	8000b58 <__aeabi_dcmpgt>
 800e68c:	2800      	cmp	r0, #0
 800e68e:	f040 80f9 	bne.w	800e884 <_dtoa_r+0x6bc>
 800e692:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e696:	4620      	mov	r0, r4
 800e698:	4629      	mov	r1, r5
 800e69a:	f7f2 fa35 	bl	8000b08 <__aeabi_dcmpeq>
 800e69e:	b118      	cbz	r0, 800e6a8 <_dtoa_r+0x4e0>
 800e6a0:	f018 0f01 	tst.w	r8, #1
 800e6a4:	f040 80ee 	bne.w	800e884 <_dtoa_r+0x6bc>
 800e6a8:	4649      	mov	r1, r9
 800e6aa:	4658      	mov	r0, fp
 800e6ac:	f000 fbe2 	bl	800ee74 <_Bfree>
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	7033      	strb	r3, [r6, #0]
 800e6b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e6b6:	3701      	adds	r7, #1
 800e6b8:	601f      	str	r7, [r3, #0]
 800e6ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f000 831d 	beq.w	800ecfc <_dtoa_r+0xb34>
 800e6c2:	601e      	str	r6, [r3, #0]
 800e6c4:	e31a      	b.n	800ecfc <_dtoa_r+0xb34>
 800e6c6:	07e2      	lsls	r2, r4, #31
 800e6c8:	d505      	bpl.n	800e6d6 <_dtoa_r+0x50e>
 800e6ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e6ce:	f7f1 ffb3 	bl	8000638 <__aeabi_dmul>
 800e6d2:	3601      	adds	r6, #1
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	1064      	asrs	r4, r4, #1
 800e6d8:	3508      	adds	r5, #8
 800e6da:	e73f      	b.n	800e55c <_dtoa_r+0x394>
 800e6dc:	2602      	movs	r6, #2
 800e6de:	e742      	b.n	800e566 <_dtoa_r+0x39e>
 800e6e0:	9c07      	ldr	r4, [sp, #28]
 800e6e2:	9704      	str	r7, [sp, #16]
 800e6e4:	e761      	b.n	800e5aa <_dtoa_r+0x3e2>
 800e6e6:	4b27      	ldr	r3, [pc, #156]	@ (800e784 <_dtoa_r+0x5bc>)
 800e6e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e6ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e6ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e6f2:	4454      	add	r4, sl
 800e6f4:	2900      	cmp	r1, #0
 800e6f6:	d053      	beq.n	800e7a0 <_dtoa_r+0x5d8>
 800e6f8:	4928      	ldr	r1, [pc, #160]	@ (800e79c <_dtoa_r+0x5d4>)
 800e6fa:	2000      	movs	r0, #0
 800e6fc:	f7f2 f8c6 	bl	800088c <__aeabi_ddiv>
 800e700:	4633      	mov	r3, r6
 800e702:	462a      	mov	r2, r5
 800e704:	f7f1 fde0 	bl	80002c8 <__aeabi_dsub>
 800e708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e70c:	4656      	mov	r6, sl
 800e70e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e712:	f7f2 fa41 	bl	8000b98 <__aeabi_d2iz>
 800e716:	4605      	mov	r5, r0
 800e718:	f7f1 ff24 	bl	8000564 <__aeabi_i2d>
 800e71c:	4602      	mov	r2, r0
 800e71e:	460b      	mov	r3, r1
 800e720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e724:	f7f1 fdd0 	bl	80002c8 <__aeabi_dsub>
 800e728:	3530      	adds	r5, #48	@ 0x30
 800e72a:	4602      	mov	r2, r0
 800e72c:	460b      	mov	r3, r1
 800e72e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e732:	f806 5b01 	strb.w	r5, [r6], #1
 800e736:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e73a:	f7f2 f9ef 	bl	8000b1c <__aeabi_dcmplt>
 800e73e:	2800      	cmp	r0, #0
 800e740:	d171      	bne.n	800e826 <_dtoa_r+0x65e>
 800e742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e746:	4911      	ldr	r1, [pc, #68]	@ (800e78c <_dtoa_r+0x5c4>)
 800e748:	2000      	movs	r0, #0
 800e74a:	f7f1 fdbd 	bl	80002c8 <__aeabi_dsub>
 800e74e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e752:	f7f2 f9e3 	bl	8000b1c <__aeabi_dcmplt>
 800e756:	2800      	cmp	r0, #0
 800e758:	f040 8095 	bne.w	800e886 <_dtoa_r+0x6be>
 800e75c:	42a6      	cmp	r6, r4
 800e75e:	f43f af50 	beq.w	800e602 <_dtoa_r+0x43a>
 800e762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e766:	4b0a      	ldr	r3, [pc, #40]	@ (800e790 <_dtoa_r+0x5c8>)
 800e768:	2200      	movs	r2, #0
 800e76a:	f7f1 ff65 	bl	8000638 <__aeabi_dmul>
 800e76e:	4b08      	ldr	r3, [pc, #32]	@ (800e790 <_dtoa_r+0x5c8>)
 800e770:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e774:	2200      	movs	r2, #0
 800e776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e77a:	f7f1 ff5d 	bl	8000638 <__aeabi_dmul>
 800e77e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e782:	e7c4      	b.n	800e70e <_dtoa_r+0x546>
 800e784:	08012530 	.word	0x08012530
 800e788:	08012508 	.word	0x08012508
 800e78c:	3ff00000 	.word	0x3ff00000
 800e790:	40240000 	.word	0x40240000
 800e794:	401c0000 	.word	0x401c0000
 800e798:	40140000 	.word	0x40140000
 800e79c:	3fe00000 	.word	0x3fe00000
 800e7a0:	4631      	mov	r1, r6
 800e7a2:	4628      	mov	r0, r5
 800e7a4:	f7f1 ff48 	bl	8000638 <__aeabi_dmul>
 800e7a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e7ac:	9415      	str	r4, [sp, #84]	@ 0x54
 800e7ae:	4656      	mov	r6, sl
 800e7b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7b4:	f7f2 f9f0 	bl	8000b98 <__aeabi_d2iz>
 800e7b8:	4605      	mov	r5, r0
 800e7ba:	f7f1 fed3 	bl	8000564 <__aeabi_i2d>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7c6:	f7f1 fd7f 	bl	80002c8 <__aeabi_dsub>
 800e7ca:	3530      	adds	r5, #48	@ 0x30
 800e7cc:	f806 5b01 	strb.w	r5, [r6], #1
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	42a6      	cmp	r6, r4
 800e7d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e7da:	f04f 0200 	mov.w	r2, #0
 800e7de:	d124      	bne.n	800e82a <_dtoa_r+0x662>
 800e7e0:	4bac      	ldr	r3, [pc, #688]	@ (800ea94 <_dtoa_r+0x8cc>)
 800e7e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e7e6:	f7f1 fd71 	bl	80002cc <__adddf3>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7f2:	f7f2 f9b1 	bl	8000b58 <__aeabi_dcmpgt>
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	d145      	bne.n	800e886 <_dtoa_r+0x6be>
 800e7fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e7fe:	49a5      	ldr	r1, [pc, #660]	@ (800ea94 <_dtoa_r+0x8cc>)
 800e800:	2000      	movs	r0, #0
 800e802:	f7f1 fd61 	bl	80002c8 <__aeabi_dsub>
 800e806:	4602      	mov	r2, r0
 800e808:	460b      	mov	r3, r1
 800e80a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e80e:	f7f2 f985 	bl	8000b1c <__aeabi_dcmplt>
 800e812:	2800      	cmp	r0, #0
 800e814:	f43f aef5 	beq.w	800e602 <_dtoa_r+0x43a>
 800e818:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e81a:	1e73      	subs	r3, r6, #1
 800e81c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e81e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e822:	2b30      	cmp	r3, #48	@ 0x30
 800e824:	d0f8      	beq.n	800e818 <_dtoa_r+0x650>
 800e826:	9f04      	ldr	r7, [sp, #16]
 800e828:	e73e      	b.n	800e6a8 <_dtoa_r+0x4e0>
 800e82a:	4b9b      	ldr	r3, [pc, #620]	@ (800ea98 <_dtoa_r+0x8d0>)
 800e82c:	f7f1 ff04 	bl	8000638 <__aeabi_dmul>
 800e830:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e834:	e7bc      	b.n	800e7b0 <_dtoa_r+0x5e8>
 800e836:	d10c      	bne.n	800e852 <_dtoa_r+0x68a>
 800e838:	4b98      	ldr	r3, [pc, #608]	@ (800ea9c <_dtoa_r+0x8d4>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e840:	f7f1 fefa 	bl	8000638 <__aeabi_dmul>
 800e844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e848:	f7f2 f97c 	bl	8000b44 <__aeabi_dcmpge>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	f000 8157 	beq.w	800eb00 <_dtoa_r+0x938>
 800e852:	2400      	movs	r4, #0
 800e854:	4625      	mov	r5, r4
 800e856:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e858:	43db      	mvns	r3, r3
 800e85a:	9304      	str	r3, [sp, #16]
 800e85c:	4656      	mov	r6, sl
 800e85e:	2700      	movs	r7, #0
 800e860:	4621      	mov	r1, r4
 800e862:	4658      	mov	r0, fp
 800e864:	f000 fb06 	bl	800ee74 <_Bfree>
 800e868:	2d00      	cmp	r5, #0
 800e86a:	d0dc      	beq.n	800e826 <_dtoa_r+0x65e>
 800e86c:	b12f      	cbz	r7, 800e87a <_dtoa_r+0x6b2>
 800e86e:	42af      	cmp	r7, r5
 800e870:	d003      	beq.n	800e87a <_dtoa_r+0x6b2>
 800e872:	4639      	mov	r1, r7
 800e874:	4658      	mov	r0, fp
 800e876:	f000 fafd 	bl	800ee74 <_Bfree>
 800e87a:	4629      	mov	r1, r5
 800e87c:	4658      	mov	r0, fp
 800e87e:	f000 faf9 	bl	800ee74 <_Bfree>
 800e882:	e7d0      	b.n	800e826 <_dtoa_r+0x65e>
 800e884:	9704      	str	r7, [sp, #16]
 800e886:	4633      	mov	r3, r6
 800e888:	461e      	mov	r6, r3
 800e88a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e88e:	2a39      	cmp	r2, #57	@ 0x39
 800e890:	d107      	bne.n	800e8a2 <_dtoa_r+0x6da>
 800e892:	459a      	cmp	sl, r3
 800e894:	d1f8      	bne.n	800e888 <_dtoa_r+0x6c0>
 800e896:	9a04      	ldr	r2, [sp, #16]
 800e898:	3201      	adds	r2, #1
 800e89a:	9204      	str	r2, [sp, #16]
 800e89c:	2230      	movs	r2, #48	@ 0x30
 800e89e:	f88a 2000 	strb.w	r2, [sl]
 800e8a2:	781a      	ldrb	r2, [r3, #0]
 800e8a4:	3201      	adds	r2, #1
 800e8a6:	701a      	strb	r2, [r3, #0]
 800e8a8:	e7bd      	b.n	800e826 <_dtoa_r+0x65e>
 800e8aa:	4b7b      	ldr	r3, [pc, #492]	@ (800ea98 <_dtoa_r+0x8d0>)
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f7f1 fec3 	bl	8000638 <__aeabi_dmul>
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	4604      	mov	r4, r0
 800e8b8:	460d      	mov	r5, r1
 800e8ba:	f7f2 f925 	bl	8000b08 <__aeabi_dcmpeq>
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	f43f aebb 	beq.w	800e63a <_dtoa_r+0x472>
 800e8c4:	e6f0      	b.n	800e6a8 <_dtoa_r+0x4e0>
 800e8c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e8c8:	2a00      	cmp	r2, #0
 800e8ca:	f000 80db 	beq.w	800ea84 <_dtoa_r+0x8bc>
 800e8ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8d0:	2a01      	cmp	r2, #1
 800e8d2:	f300 80bf 	bgt.w	800ea54 <_dtoa_r+0x88c>
 800e8d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e8d8:	2a00      	cmp	r2, #0
 800e8da:	f000 80b7 	beq.w	800ea4c <_dtoa_r+0x884>
 800e8de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e8e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e8e4:	4646      	mov	r6, r8
 800e8e6:	9a08      	ldr	r2, [sp, #32]
 800e8e8:	2101      	movs	r1, #1
 800e8ea:	441a      	add	r2, r3
 800e8ec:	4658      	mov	r0, fp
 800e8ee:	4498      	add	r8, r3
 800e8f0:	9208      	str	r2, [sp, #32]
 800e8f2:	f000 fb73 	bl	800efdc <__i2b>
 800e8f6:	4605      	mov	r5, r0
 800e8f8:	b15e      	cbz	r6, 800e912 <_dtoa_r+0x74a>
 800e8fa:	9b08      	ldr	r3, [sp, #32]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	dd08      	ble.n	800e912 <_dtoa_r+0x74a>
 800e900:	42b3      	cmp	r3, r6
 800e902:	9a08      	ldr	r2, [sp, #32]
 800e904:	bfa8      	it	ge
 800e906:	4633      	movge	r3, r6
 800e908:	eba8 0803 	sub.w	r8, r8, r3
 800e90c:	1af6      	subs	r6, r6, r3
 800e90e:	1ad3      	subs	r3, r2, r3
 800e910:	9308      	str	r3, [sp, #32]
 800e912:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e914:	b1f3      	cbz	r3, 800e954 <_dtoa_r+0x78c>
 800e916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e918:	2b00      	cmp	r3, #0
 800e91a:	f000 80b7 	beq.w	800ea8c <_dtoa_r+0x8c4>
 800e91e:	b18c      	cbz	r4, 800e944 <_dtoa_r+0x77c>
 800e920:	4629      	mov	r1, r5
 800e922:	4622      	mov	r2, r4
 800e924:	4658      	mov	r0, fp
 800e926:	f000 fc19 	bl	800f15c <__pow5mult>
 800e92a:	464a      	mov	r2, r9
 800e92c:	4601      	mov	r1, r0
 800e92e:	4605      	mov	r5, r0
 800e930:	4658      	mov	r0, fp
 800e932:	f000 fb69 	bl	800f008 <__multiply>
 800e936:	4649      	mov	r1, r9
 800e938:	9004      	str	r0, [sp, #16]
 800e93a:	4658      	mov	r0, fp
 800e93c:	f000 fa9a 	bl	800ee74 <_Bfree>
 800e940:	9b04      	ldr	r3, [sp, #16]
 800e942:	4699      	mov	r9, r3
 800e944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e946:	1b1a      	subs	r2, r3, r4
 800e948:	d004      	beq.n	800e954 <_dtoa_r+0x78c>
 800e94a:	4649      	mov	r1, r9
 800e94c:	4658      	mov	r0, fp
 800e94e:	f000 fc05 	bl	800f15c <__pow5mult>
 800e952:	4681      	mov	r9, r0
 800e954:	2101      	movs	r1, #1
 800e956:	4658      	mov	r0, fp
 800e958:	f000 fb40 	bl	800efdc <__i2b>
 800e95c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e95e:	4604      	mov	r4, r0
 800e960:	2b00      	cmp	r3, #0
 800e962:	f000 81cf 	beq.w	800ed04 <_dtoa_r+0xb3c>
 800e966:	461a      	mov	r2, r3
 800e968:	4601      	mov	r1, r0
 800e96a:	4658      	mov	r0, fp
 800e96c:	f000 fbf6 	bl	800f15c <__pow5mult>
 800e970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e972:	2b01      	cmp	r3, #1
 800e974:	4604      	mov	r4, r0
 800e976:	f300 8095 	bgt.w	800eaa4 <_dtoa_r+0x8dc>
 800e97a:	9b02      	ldr	r3, [sp, #8]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	f040 8087 	bne.w	800ea90 <_dtoa_r+0x8c8>
 800e982:	9b03      	ldr	r3, [sp, #12]
 800e984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e988:	2b00      	cmp	r3, #0
 800e98a:	f040 8089 	bne.w	800eaa0 <_dtoa_r+0x8d8>
 800e98e:	9b03      	ldr	r3, [sp, #12]
 800e990:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e994:	0d1b      	lsrs	r3, r3, #20
 800e996:	051b      	lsls	r3, r3, #20
 800e998:	b12b      	cbz	r3, 800e9a6 <_dtoa_r+0x7de>
 800e99a:	9b08      	ldr	r3, [sp, #32]
 800e99c:	3301      	adds	r3, #1
 800e99e:	9308      	str	r3, [sp, #32]
 800e9a0:	f108 0801 	add.w	r8, r8, #1
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e9a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	f000 81b0 	beq.w	800ed10 <_dtoa_r+0xb48>
 800e9b0:	6923      	ldr	r3, [r4, #16]
 800e9b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e9b6:	6918      	ldr	r0, [r3, #16]
 800e9b8:	f000 fac4 	bl	800ef44 <__hi0bits>
 800e9bc:	f1c0 0020 	rsb	r0, r0, #32
 800e9c0:	9b08      	ldr	r3, [sp, #32]
 800e9c2:	4418      	add	r0, r3
 800e9c4:	f010 001f 	ands.w	r0, r0, #31
 800e9c8:	d077      	beq.n	800eaba <_dtoa_r+0x8f2>
 800e9ca:	f1c0 0320 	rsb	r3, r0, #32
 800e9ce:	2b04      	cmp	r3, #4
 800e9d0:	dd6b      	ble.n	800eaaa <_dtoa_r+0x8e2>
 800e9d2:	9b08      	ldr	r3, [sp, #32]
 800e9d4:	f1c0 001c 	rsb	r0, r0, #28
 800e9d8:	4403      	add	r3, r0
 800e9da:	4480      	add	r8, r0
 800e9dc:	4406      	add	r6, r0
 800e9de:	9308      	str	r3, [sp, #32]
 800e9e0:	f1b8 0f00 	cmp.w	r8, #0
 800e9e4:	dd05      	ble.n	800e9f2 <_dtoa_r+0x82a>
 800e9e6:	4649      	mov	r1, r9
 800e9e8:	4642      	mov	r2, r8
 800e9ea:	4658      	mov	r0, fp
 800e9ec:	f000 fc10 	bl	800f210 <__lshift>
 800e9f0:	4681      	mov	r9, r0
 800e9f2:	9b08      	ldr	r3, [sp, #32]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	dd05      	ble.n	800ea04 <_dtoa_r+0x83c>
 800e9f8:	4621      	mov	r1, r4
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	4658      	mov	r0, fp
 800e9fe:	f000 fc07 	bl	800f210 <__lshift>
 800ea02:	4604      	mov	r4, r0
 800ea04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d059      	beq.n	800eabe <_dtoa_r+0x8f6>
 800ea0a:	4621      	mov	r1, r4
 800ea0c:	4648      	mov	r0, r9
 800ea0e:	f000 fc6b 	bl	800f2e8 <__mcmp>
 800ea12:	2800      	cmp	r0, #0
 800ea14:	da53      	bge.n	800eabe <_dtoa_r+0x8f6>
 800ea16:	1e7b      	subs	r3, r7, #1
 800ea18:	9304      	str	r3, [sp, #16]
 800ea1a:	4649      	mov	r1, r9
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	220a      	movs	r2, #10
 800ea20:	4658      	mov	r0, fp
 800ea22:	f000 fa49 	bl	800eeb8 <__multadd>
 800ea26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea28:	4681      	mov	r9, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	f000 8172 	beq.w	800ed14 <_dtoa_r+0xb4c>
 800ea30:	2300      	movs	r3, #0
 800ea32:	4629      	mov	r1, r5
 800ea34:	220a      	movs	r2, #10
 800ea36:	4658      	mov	r0, fp
 800ea38:	f000 fa3e 	bl	800eeb8 <__multadd>
 800ea3c:	9b00      	ldr	r3, [sp, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	4605      	mov	r5, r0
 800ea42:	dc67      	bgt.n	800eb14 <_dtoa_r+0x94c>
 800ea44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea46:	2b02      	cmp	r3, #2
 800ea48:	dc41      	bgt.n	800eace <_dtoa_r+0x906>
 800ea4a:	e063      	b.n	800eb14 <_dtoa_r+0x94c>
 800ea4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ea4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ea52:	e746      	b.n	800e8e2 <_dtoa_r+0x71a>
 800ea54:	9b07      	ldr	r3, [sp, #28]
 800ea56:	1e5c      	subs	r4, r3, #1
 800ea58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea5a:	42a3      	cmp	r3, r4
 800ea5c:	bfbf      	itttt	lt
 800ea5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ea60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ea62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ea64:	1ae3      	sublt	r3, r4, r3
 800ea66:	bfb4      	ite	lt
 800ea68:	18d2      	addlt	r2, r2, r3
 800ea6a:	1b1c      	subge	r4, r3, r4
 800ea6c:	9b07      	ldr	r3, [sp, #28]
 800ea6e:	bfbc      	itt	lt
 800ea70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ea72:	2400      	movlt	r4, #0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	bfb5      	itete	lt
 800ea78:	eba8 0603 	sublt.w	r6, r8, r3
 800ea7c:	9b07      	ldrge	r3, [sp, #28]
 800ea7e:	2300      	movlt	r3, #0
 800ea80:	4646      	movge	r6, r8
 800ea82:	e730      	b.n	800e8e6 <_dtoa_r+0x71e>
 800ea84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ea86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ea88:	4646      	mov	r6, r8
 800ea8a:	e735      	b.n	800e8f8 <_dtoa_r+0x730>
 800ea8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea8e:	e75c      	b.n	800e94a <_dtoa_r+0x782>
 800ea90:	2300      	movs	r3, #0
 800ea92:	e788      	b.n	800e9a6 <_dtoa_r+0x7de>
 800ea94:	3fe00000 	.word	0x3fe00000
 800ea98:	40240000 	.word	0x40240000
 800ea9c:	40140000 	.word	0x40140000
 800eaa0:	9b02      	ldr	r3, [sp, #8]
 800eaa2:	e780      	b.n	800e9a6 <_dtoa_r+0x7de>
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800eaa8:	e782      	b.n	800e9b0 <_dtoa_r+0x7e8>
 800eaaa:	d099      	beq.n	800e9e0 <_dtoa_r+0x818>
 800eaac:	9a08      	ldr	r2, [sp, #32]
 800eaae:	331c      	adds	r3, #28
 800eab0:	441a      	add	r2, r3
 800eab2:	4498      	add	r8, r3
 800eab4:	441e      	add	r6, r3
 800eab6:	9208      	str	r2, [sp, #32]
 800eab8:	e792      	b.n	800e9e0 <_dtoa_r+0x818>
 800eaba:	4603      	mov	r3, r0
 800eabc:	e7f6      	b.n	800eaac <_dtoa_r+0x8e4>
 800eabe:	9b07      	ldr	r3, [sp, #28]
 800eac0:	9704      	str	r7, [sp, #16]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	dc20      	bgt.n	800eb08 <_dtoa_r+0x940>
 800eac6:	9300      	str	r3, [sp, #0]
 800eac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaca:	2b02      	cmp	r3, #2
 800eacc:	dd1e      	ble.n	800eb0c <_dtoa_r+0x944>
 800eace:	9b00      	ldr	r3, [sp, #0]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	f47f aec0 	bne.w	800e856 <_dtoa_r+0x68e>
 800ead6:	4621      	mov	r1, r4
 800ead8:	2205      	movs	r2, #5
 800eada:	4658      	mov	r0, fp
 800eadc:	f000 f9ec 	bl	800eeb8 <__multadd>
 800eae0:	4601      	mov	r1, r0
 800eae2:	4604      	mov	r4, r0
 800eae4:	4648      	mov	r0, r9
 800eae6:	f000 fbff 	bl	800f2e8 <__mcmp>
 800eaea:	2800      	cmp	r0, #0
 800eaec:	f77f aeb3 	ble.w	800e856 <_dtoa_r+0x68e>
 800eaf0:	4656      	mov	r6, sl
 800eaf2:	2331      	movs	r3, #49	@ 0x31
 800eaf4:	f806 3b01 	strb.w	r3, [r6], #1
 800eaf8:	9b04      	ldr	r3, [sp, #16]
 800eafa:	3301      	adds	r3, #1
 800eafc:	9304      	str	r3, [sp, #16]
 800eafe:	e6ae      	b.n	800e85e <_dtoa_r+0x696>
 800eb00:	9c07      	ldr	r4, [sp, #28]
 800eb02:	9704      	str	r7, [sp, #16]
 800eb04:	4625      	mov	r5, r4
 800eb06:	e7f3      	b.n	800eaf0 <_dtoa_r+0x928>
 800eb08:	9b07      	ldr	r3, [sp, #28]
 800eb0a:	9300      	str	r3, [sp, #0]
 800eb0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	f000 8104 	beq.w	800ed1c <_dtoa_r+0xb54>
 800eb14:	2e00      	cmp	r6, #0
 800eb16:	dd05      	ble.n	800eb24 <_dtoa_r+0x95c>
 800eb18:	4629      	mov	r1, r5
 800eb1a:	4632      	mov	r2, r6
 800eb1c:	4658      	mov	r0, fp
 800eb1e:	f000 fb77 	bl	800f210 <__lshift>
 800eb22:	4605      	mov	r5, r0
 800eb24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d05a      	beq.n	800ebe0 <_dtoa_r+0xa18>
 800eb2a:	6869      	ldr	r1, [r5, #4]
 800eb2c:	4658      	mov	r0, fp
 800eb2e:	f000 f961 	bl	800edf4 <_Balloc>
 800eb32:	4606      	mov	r6, r0
 800eb34:	b928      	cbnz	r0, 800eb42 <_dtoa_r+0x97a>
 800eb36:	4b84      	ldr	r3, [pc, #528]	@ (800ed48 <_dtoa_r+0xb80>)
 800eb38:	4602      	mov	r2, r0
 800eb3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eb3e:	f7ff bb5a 	b.w	800e1f6 <_dtoa_r+0x2e>
 800eb42:	692a      	ldr	r2, [r5, #16]
 800eb44:	3202      	adds	r2, #2
 800eb46:	0092      	lsls	r2, r2, #2
 800eb48:	f105 010c 	add.w	r1, r5, #12
 800eb4c:	300c      	adds	r0, #12
 800eb4e:	f7ff faa2 	bl	800e096 <memcpy>
 800eb52:	2201      	movs	r2, #1
 800eb54:	4631      	mov	r1, r6
 800eb56:	4658      	mov	r0, fp
 800eb58:	f000 fb5a 	bl	800f210 <__lshift>
 800eb5c:	f10a 0301 	add.w	r3, sl, #1
 800eb60:	9307      	str	r3, [sp, #28]
 800eb62:	9b00      	ldr	r3, [sp, #0]
 800eb64:	4453      	add	r3, sl
 800eb66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb68:	9b02      	ldr	r3, [sp, #8]
 800eb6a:	f003 0301 	and.w	r3, r3, #1
 800eb6e:	462f      	mov	r7, r5
 800eb70:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb72:	4605      	mov	r5, r0
 800eb74:	9b07      	ldr	r3, [sp, #28]
 800eb76:	4621      	mov	r1, r4
 800eb78:	3b01      	subs	r3, #1
 800eb7a:	4648      	mov	r0, r9
 800eb7c:	9300      	str	r3, [sp, #0]
 800eb7e:	f7ff fa98 	bl	800e0b2 <quorem>
 800eb82:	4639      	mov	r1, r7
 800eb84:	9002      	str	r0, [sp, #8]
 800eb86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800eb8a:	4648      	mov	r0, r9
 800eb8c:	f000 fbac 	bl	800f2e8 <__mcmp>
 800eb90:	462a      	mov	r2, r5
 800eb92:	9008      	str	r0, [sp, #32]
 800eb94:	4621      	mov	r1, r4
 800eb96:	4658      	mov	r0, fp
 800eb98:	f000 fbc2 	bl	800f320 <__mdiff>
 800eb9c:	68c2      	ldr	r2, [r0, #12]
 800eb9e:	4606      	mov	r6, r0
 800eba0:	bb02      	cbnz	r2, 800ebe4 <_dtoa_r+0xa1c>
 800eba2:	4601      	mov	r1, r0
 800eba4:	4648      	mov	r0, r9
 800eba6:	f000 fb9f 	bl	800f2e8 <__mcmp>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	4631      	mov	r1, r6
 800ebae:	4658      	mov	r0, fp
 800ebb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800ebb2:	f000 f95f 	bl	800ee74 <_Bfree>
 800ebb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ebba:	9e07      	ldr	r6, [sp, #28]
 800ebbc:	ea43 0102 	orr.w	r1, r3, r2
 800ebc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebc2:	4319      	orrs	r1, r3
 800ebc4:	d110      	bne.n	800ebe8 <_dtoa_r+0xa20>
 800ebc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ebca:	d029      	beq.n	800ec20 <_dtoa_r+0xa58>
 800ebcc:	9b08      	ldr	r3, [sp, #32]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	dd02      	ble.n	800ebd8 <_dtoa_r+0xa10>
 800ebd2:	9b02      	ldr	r3, [sp, #8]
 800ebd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ebd8:	9b00      	ldr	r3, [sp, #0]
 800ebda:	f883 8000 	strb.w	r8, [r3]
 800ebde:	e63f      	b.n	800e860 <_dtoa_r+0x698>
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	e7bb      	b.n	800eb5c <_dtoa_r+0x994>
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	e7e1      	b.n	800ebac <_dtoa_r+0x9e4>
 800ebe8:	9b08      	ldr	r3, [sp, #32]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	db04      	blt.n	800ebf8 <_dtoa_r+0xa30>
 800ebee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ebf0:	430b      	orrs	r3, r1
 800ebf2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ebf4:	430b      	orrs	r3, r1
 800ebf6:	d120      	bne.n	800ec3a <_dtoa_r+0xa72>
 800ebf8:	2a00      	cmp	r2, #0
 800ebfa:	dded      	ble.n	800ebd8 <_dtoa_r+0xa10>
 800ebfc:	4649      	mov	r1, r9
 800ebfe:	2201      	movs	r2, #1
 800ec00:	4658      	mov	r0, fp
 800ec02:	f000 fb05 	bl	800f210 <__lshift>
 800ec06:	4621      	mov	r1, r4
 800ec08:	4681      	mov	r9, r0
 800ec0a:	f000 fb6d 	bl	800f2e8 <__mcmp>
 800ec0e:	2800      	cmp	r0, #0
 800ec10:	dc03      	bgt.n	800ec1a <_dtoa_r+0xa52>
 800ec12:	d1e1      	bne.n	800ebd8 <_dtoa_r+0xa10>
 800ec14:	f018 0f01 	tst.w	r8, #1
 800ec18:	d0de      	beq.n	800ebd8 <_dtoa_r+0xa10>
 800ec1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ec1e:	d1d8      	bne.n	800ebd2 <_dtoa_r+0xa0a>
 800ec20:	9a00      	ldr	r2, [sp, #0]
 800ec22:	2339      	movs	r3, #57	@ 0x39
 800ec24:	7013      	strb	r3, [r2, #0]
 800ec26:	4633      	mov	r3, r6
 800ec28:	461e      	mov	r6, r3
 800ec2a:	3b01      	subs	r3, #1
 800ec2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ec30:	2a39      	cmp	r2, #57	@ 0x39
 800ec32:	d052      	beq.n	800ecda <_dtoa_r+0xb12>
 800ec34:	3201      	adds	r2, #1
 800ec36:	701a      	strb	r2, [r3, #0]
 800ec38:	e612      	b.n	800e860 <_dtoa_r+0x698>
 800ec3a:	2a00      	cmp	r2, #0
 800ec3c:	dd07      	ble.n	800ec4e <_dtoa_r+0xa86>
 800ec3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ec42:	d0ed      	beq.n	800ec20 <_dtoa_r+0xa58>
 800ec44:	9a00      	ldr	r2, [sp, #0]
 800ec46:	f108 0301 	add.w	r3, r8, #1
 800ec4a:	7013      	strb	r3, [r2, #0]
 800ec4c:	e608      	b.n	800e860 <_dtoa_r+0x698>
 800ec4e:	9b07      	ldr	r3, [sp, #28]
 800ec50:	9a07      	ldr	r2, [sp, #28]
 800ec52:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ec56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d028      	beq.n	800ecae <_dtoa_r+0xae6>
 800ec5c:	4649      	mov	r1, r9
 800ec5e:	2300      	movs	r3, #0
 800ec60:	220a      	movs	r2, #10
 800ec62:	4658      	mov	r0, fp
 800ec64:	f000 f928 	bl	800eeb8 <__multadd>
 800ec68:	42af      	cmp	r7, r5
 800ec6a:	4681      	mov	r9, r0
 800ec6c:	f04f 0300 	mov.w	r3, #0
 800ec70:	f04f 020a 	mov.w	r2, #10
 800ec74:	4639      	mov	r1, r7
 800ec76:	4658      	mov	r0, fp
 800ec78:	d107      	bne.n	800ec8a <_dtoa_r+0xac2>
 800ec7a:	f000 f91d 	bl	800eeb8 <__multadd>
 800ec7e:	4607      	mov	r7, r0
 800ec80:	4605      	mov	r5, r0
 800ec82:	9b07      	ldr	r3, [sp, #28]
 800ec84:	3301      	adds	r3, #1
 800ec86:	9307      	str	r3, [sp, #28]
 800ec88:	e774      	b.n	800eb74 <_dtoa_r+0x9ac>
 800ec8a:	f000 f915 	bl	800eeb8 <__multadd>
 800ec8e:	4629      	mov	r1, r5
 800ec90:	4607      	mov	r7, r0
 800ec92:	2300      	movs	r3, #0
 800ec94:	220a      	movs	r2, #10
 800ec96:	4658      	mov	r0, fp
 800ec98:	f000 f90e 	bl	800eeb8 <__multadd>
 800ec9c:	4605      	mov	r5, r0
 800ec9e:	e7f0      	b.n	800ec82 <_dtoa_r+0xaba>
 800eca0:	9b00      	ldr	r3, [sp, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	bfcc      	ite	gt
 800eca6:	461e      	movgt	r6, r3
 800eca8:	2601      	movle	r6, #1
 800ecaa:	4456      	add	r6, sl
 800ecac:	2700      	movs	r7, #0
 800ecae:	4649      	mov	r1, r9
 800ecb0:	2201      	movs	r2, #1
 800ecb2:	4658      	mov	r0, fp
 800ecb4:	f000 faac 	bl	800f210 <__lshift>
 800ecb8:	4621      	mov	r1, r4
 800ecba:	4681      	mov	r9, r0
 800ecbc:	f000 fb14 	bl	800f2e8 <__mcmp>
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	dcb0      	bgt.n	800ec26 <_dtoa_r+0xa5e>
 800ecc4:	d102      	bne.n	800eccc <_dtoa_r+0xb04>
 800ecc6:	f018 0f01 	tst.w	r8, #1
 800ecca:	d1ac      	bne.n	800ec26 <_dtoa_r+0xa5e>
 800eccc:	4633      	mov	r3, r6
 800ecce:	461e      	mov	r6, r3
 800ecd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ecd4:	2a30      	cmp	r2, #48	@ 0x30
 800ecd6:	d0fa      	beq.n	800ecce <_dtoa_r+0xb06>
 800ecd8:	e5c2      	b.n	800e860 <_dtoa_r+0x698>
 800ecda:	459a      	cmp	sl, r3
 800ecdc:	d1a4      	bne.n	800ec28 <_dtoa_r+0xa60>
 800ecde:	9b04      	ldr	r3, [sp, #16]
 800ece0:	3301      	adds	r3, #1
 800ece2:	9304      	str	r3, [sp, #16]
 800ece4:	2331      	movs	r3, #49	@ 0x31
 800ece6:	f88a 3000 	strb.w	r3, [sl]
 800ecea:	e5b9      	b.n	800e860 <_dtoa_r+0x698>
 800ecec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ecee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ed4c <_dtoa_r+0xb84>
 800ecf2:	b11b      	cbz	r3, 800ecfc <_dtoa_r+0xb34>
 800ecf4:	f10a 0308 	add.w	r3, sl, #8
 800ecf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ecfa:	6013      	str	r3, [r2, #0]
 800ecfc:	4650      	mov	r0, sl
 800ecfe:	b019      	add	sp, #100	@ 0x64
 800ed00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed06:	2b01      	cmp	r3, #1
 800ed08:	f77f ae37 	ble.w	800e97a <_dtoa_r+0x7b2>
 800ed0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed10:	2001      	movs	r0, #1
 800ed12:	e655      	b.n	800e9c0 <_dtoa_r+0x7f8>
 800ed14:	9b00      	ldr	r3, [sp, #0]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	f77f aed6 	ble.w	800eac8 <_dtoa_r+0x900>
 800ed1c:	4656      	mov	r6, sl
 800ed1e:	4621      	mov	r1, r4
 800ed20:	4648      	mov	r0, r9
 800ed22:	f7ff f9c6 	bl	800e0b2 <quorem>
 800ed26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ed2a:	f806 8b01 	strb.w	r8, [r6], #1
 800ed2e:	9b00      	ldr	r3, [sp, #0]
 800ed30:	eba6 020a 	sub.w	r2, r6, sl
 800ed34:	4293      	cmp	r3, r2
 800ed36:	ddb3      	ble.n	800eca0 <_dtoa_r+0xad8>
 800ed38:	4649      	mov	r1, r9
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	220a      	movs	r2, #10
 800ed3e:	4658      	mov	r0, fp
 800ed40:	f000 f8ba 	bl	800eeb8 <__multadd>
 800ed44:	4681      	mov	r9, r0
 800ed46:	e7ea      	b.n	800ed1e <_dtoa_r+0xb56>
 800ed48:	08012490 	.word	0x08012490
 800ed4c:	08012414 	.word	0x08012414

0800ed50 <_free_r>:
 800ed50:	b538      	push	{r3, r4, r5, lr}
 800ed52:	4605      	mov	r5, r0
 800ed54:	2900      	cmp	r1, #0
 800ed56:	d041      	beq.n	800eddc <_free_r+0x8c>
 800ed58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed5c:	1f0c      	subs	r4, r1, #4
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	bfb8      	it	lt
 800ed62:	18e4      	addlt	r4, r4, r3
 800ed64:	f7fe fb8e 	bl	800d484 <__malloc_lock>
 800ed68:	4a1d      	ldr	r2, [pc, #116]	@ (800ede0 <_free_r+0x90>)
 800ed6a:	6813      	ldr	r3, [r2, #0]
 800ed6c:	b933      	cbnz	r3, 800ed7c <_free_r+0x2c>
 800ed6e:	6063      	str	r3, [r4, #4]
 800ed70:	6014      	str	r4, [r2, #0]
 800ed72:	4628      	mov	r0, r5
 800ed74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed78:	f7fe bb8a 	b.w	800d490 <__malloc_unlock>
 800ed7c:	42a3      	cmp	r3, r4
 800ed7e:	d908      	bls.n	800ed92 <_free_r+0x42>
 800ed80:	6820      	ldr	r0, [r4, #0]
 800ed82:	1821      	adds	r1, r4, r0
 800ed84:	428b      	cmp	r3, r1
 800ed86:	bf01      	itttt	eq
 800ed88:	6819      	ldreq	r1, [r3, #0]
 800ed8a:	685b      	ldreq	r3, [r3, #4]
 800ed8c:	1809      	addeq	r1, r1, r0
 800ed8e:	6021      	streq	r1, [r4, #0]
 800ed90:	e7ed      	b.n	800ed6e <_free_r+0x1e>
 800ed92:	461a      	mov	r2, r3
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	b10b      	cbz	r3, 800ed9c <_free_r+0x4c>
 800ed98:	42a3      	cmp	r3, r4
 800ed9a:	d9fa      	bls.n	800ed92 <_free_r+0x42>
 800ed9c:	6811      	ldr	r1, [r2, #0]
 800ed9e:	1850      	adds	r0, r2, r1
 800eda0:	42a0      	cmp	r0, r4
 800eda2:	d10b      	bne.n	800edbc <_free_r+0x6c>
 800eda4:	6820      	ldr	r0, [r4, #0]
 800eda6:	4401      	add	r1, r0
 800eda8:	1850      	adds	r0, r2, r1
 800edaa:	4283      	cmp	r3, r0
 800edac:	6011      	str	r1, [r2, #0]
 800edae:	d1e0      	bne.n	800ed72 <_free_r+0x22>
 800edb0:	6818      	ldr	r0, [r3, #0]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	6053      	str	r3, [r2, #4]
 800edb6:	4408      	add	r0, r1
 800edb8:	6010      	str	r0, [r2, #0]
 800edba:	e7da      	b.n	800ed72 <_free_r+0x22>
 800edbc:	d902      	bls.n	800edc4 <_free_r+0x74>
 800edbe:	230c      	movs	r3, #12
 800edc0:	602b      	str	r3, [r5, #0]
 800edc2:	e7d6      	b.n	800ed72 <_free_r+0x22>
 800edc4:	6820      	ldr	r0, [r4, #0]
 800edc6:	1821      	adds	r1, r4, r0
 800edc8:	428b      	cmp	r3, r1
 800edca:	bf04      	itt	eq
 800edcc:	6819      	ldreq	r1, [r3, #0]
 800edce:	685b      	ldreq	r3, [r3, #4]
 800edd0:	6063      	str	r3, [r4, #4]
 800edd2:	bf04      	itt	eq
 800edd4:	1809      	addeq	r1, r1, r0
 800edd6:	6021      	streq	r1, [r4, #0]
 800edd8:	6054      	str	r4, [r2, #4]
 800edda:	e7ca      	b.n	800ed72 <_free_r+0x22>
 800eddc:	bd38      	pop	{r3, r4, r5, pc}
 800edde:	bf00      	nop
 800ede0:	20000878 	.word	0x20000878

0800ede4 <malloc>:
 800ede4:	4b02      	ldr	r3, [pc, #8]	@ (800edf0 <malloc+0xc>)
 800ede6:	4601      	mov	r1, r0
 800ede8:	6818      	ldr	r0, [r3, #0]
 800edea:	f7fe bacb 	b.w	800d384 <_malloc_r>
 800edee:	bf00      	nop
 800edf0:	20000058 	.word	0x20000058

0800edf4 <_Balloc>:
 800edf4:	b570      	push	{r4, r5, r6, lr}
 800edf6:	69c6      	ldr	r6, [r0, #28]
 800edf8:	4604      	mov	r4, r0
 800edfa:	460d      	mov	r5, r1
 800edfc:	b976      	cbnz	r6, 800ee1c <_Balloc+0x28>
 800edfe:	2010      	movs	r0, #16
 800ee00:	f7ff fff0 	bl	800ede4 <malloc>
 800ee04:	4602      	mov	r2, r0
 800ee06:	61e0      	str	r0, [r4, #28]
 800ee08:	b920      	cbnz	r0, 800ee14 <_Balloc+0x20>
 800ee0a:	4b18      	ldr	r3, [pc, #96]	@ (800ee6c <_Balloc+0x78>)
 800ee0c:	4818      	ldr	r0, [pc, #96]	@ (800ee70 <_Balloc+0x7c>)
 800ee0e:	216b      	movs	r1, #107	@ 0x6b
 800ee10:	f000 fc1e 	bl	800f650 <__assert_func>
 800ee14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee18:	6006      	str	r6, [r0, #0]
 800ee1a:	60c6      	str	r6, [r0, #12]
 800ee1c:	69e6      	ldr	r6, [r4, #28]
 800ee1e:	68f3      	ldr	r3, [r6, #12]
 800ee20:	b183      	cbz	r3, 800ee44 <_Balloc+0x50>
 800ee22:	69e3      	ldr	r3, [r4, #28]
 800ee24:	68db      	ldr	r3, [r3, #12]
 800ee26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ee2a:	b9b8      	cbnz	r0, 800ee5c <_Balloc+0x68>
 800ee2c:	2101      	movs	r1, #1
 800ee2e:	fa01 f605 	lsl.w	r6, r1, r5
 800ee32:	1d72      	adds	r2, r6, #5
 800ee34:	0092      	lsls	r2, r2, #2
 800ee36:	4620      	mov	r0, r4
 800ee38:	f7fe fa6e 	bl	800d318 <_calloc_r>
 800ee3c:	b160      	cbz	r0, 800ee58 <_Balloc+0x64>
 800ee3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ee42:	e00e      	b.n	800ee62 <_Balloc+0x6e>
 800ee44:	2221      	movs	r2, #33	@ 0x21
 800ee46:	2104      	movs	r1, #4
 800ee48:	4620      	mov	r0, r4
 800ee4a:	f7fe fa65 	bl	800d318 <_calloc_r>
 800ee4e:	69e3      	ldr	r3, [r4, #28]
 800ee50:	60f0      	str	r0, [r6, #12]
 800ee52:	68db      	ldr	r3, [r3, #12]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d1e4      	bne.n	800ee22 <_Balloc+0x2e>
 800ee58:	2000      	movs	r0, #0
 800ee5a:	bd70      	pop	{r4, r5, r6, pc}
 800ee5c:	6802      	ldr	r2, [r0, #0]
 800ee5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ee62:	2300      	movs	r3, #0
 800ee64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ee68:	e7f7      	b.n	800ee5a <_Balloc+0x66>
 800ee6a:	bf00      	nop
 800ee6c:	08012421 	.word	0x08012421
 800ee70:	080124a1 	.word	0x080124a1

0800ee74 <_Bfree>:
 800ee74:	b570      	push	{r4, r5, r6, lr}
 800ee76:	69c6      	ldr	r6, [r0, #28]
 800ee78:	4605      	mov	r5, r0
 800ee7a:	460c      	mov	r4, r1
 800ee7c:	b976      	cbnz	r6, 800ee9c <_Bfree+0x28>
 800ee7e:	2010      	movs	r0, #16
 800ee80:	f7ff ffb0 	bl	800ede4 <malloc>
 800ee84:	4602      	mov	r2, r0
 800ee86:	61e8      	str	r0, [r5, #28]
 800ee88:	b920      	cbnz	r0, 800ee94 <_Bfree+0x20>
 800ee8a:	4b09      	ldr	r3, [pc, #36]	@ (800eeb0 <_Bfree+0x3c>)
 800ee8c:	4809      	ldr	r0, [pc, #36]	@ (800eeb4 <_Bfree+0x40>)
 800ee8e:	218f      	movs	r1, #143	@ 0x8f
 800ee90:	f000 fbde 	bl	800f650 <__assert_func>
 800ee94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee98:	6006      	str	r6, [r0, #0]
 800ee9a:	60c6      	str	r6, [r0, #12]
 800ee9c:	b13c      	cbz	r4, 800eeae <_Bfree+0x3a>
 800ee9e:	69eb      	ldr	r3, [r5, #28]
 800eea0:	6862      	ldr	r2, [r4, #4]
 800eea2:	68db      	ldr	r3, [r3, #12]
 800eea4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eea8:	6021      	str	r1, [r4, #0]
 800eeaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eeae:	bd70      	pop	{r4, r5, r6, pc}
 800eeb0:	08012421 	.word	0x08012421
 800eeb4:	080124a1 	.word	0x080124a1

0800eeb8 <__multadd>:
 800eeb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eebc:	690d      	ldr	r5, [r1, #16]
 800eebe:	4607      	mov	r7, r0
 800eec0:	460c      	mov	r4, r1
 800eec2:	461e      	mov	r6, r3
 800eec4:	f101 0c14 	add.w	ip, r1, #20
 800eec8:	2000      	movs	r0, #0
 800eeca:	f8dc 3000 	ldr.w	r3, [ip]
 800eece:	b299      	uxth	r1, r3
 800eed0:	fb02 6101 	mla	r1, r2, r1, r6
 800eed4:	0c1e      	lsrs	r6, r3, #16
 800eed6:	0c0b      	lsrs	r3, r1, #16
 800eed8:	fb02 3306 	mla	r3, r2, r6, r3
 800eedc:	b289      	uxth	r1, r1
 800eede:	3001      	adds	r0, #1
 800eee0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eee4:	4285      	cmp	r5, r0
 800eee6:	f84c 1b04 	str.w	r1, [ip], #4
 800eeea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eeee:	dcec      	bgt.n	800eeca <__multadd+0x12>
 800eef0:	b30e      	cbz	r6, 800ef36 <__multadd+0x7e>
 800eef2:	68a3      	ldr	r3, [r4, #8]
 800eef4:	42ab      	cmp	r3, r5
 800eef6:	dc19      	bgt.n	800ef2c <__multadd+0x74>
 800eef8:	6861      	ldr	r1, [r4, #4]
 800eefa:	4638      	mov	r0, r7
 800eefc:	3101      	adds	r1, #1
 800eefe:	f7ff ff79 	bl	800edf4 <_Balloc>
 800ef02:	4680      	mov	r8, r0
 800ef04:	b928      	cbnz	r0, 800ef12 <__multadd+0x5a>
 800ef06:	4602      	mov	r2, r0
 800ef08:	4b0c      	ldr	r3, [pc, #48]	@ (800ef3c <__multadd+0x84>)
 800ef0a:	480d      	ldr	r0, [pc, #52]	@ (800ef40 <__multadd+0x88>)
 800ef0c:	21ba      	movs	r1, #186	@ 0xba
 800ef0e:	f000 fb9f 	bl	800f650 <__assert_func>
 800ef12:	6922      	ldr	r2, [r4, #16]
 800ef14:	3202      	adds	r2, #2
 800ef16:	f104 010c 	add.w	r1, r4, #12
 800ef1a:	0092      	lsls	r2, r2, #2
 800ef1c:	300c      	adds	r0, #12
 800ef1e:	f7ff f8ba 	bl	800e096 <memcpy>
 800ef22:	4621      	mov	r1, r4
 800ef24:	4638      	mov	r0, r7
 800ef26:	f7ff ffa5 	bl	800ee74 <_Bfree>
 800ef2a:	4644      	mov	r4, r8
 800ef2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ef30:	3501      	adds	r5, #1
 800ef32:	615e      	str	r6, [r3, #20]
 800ef34:	6125      	str	r5, [r4, #16]
 800ef36:	4620      	mov	r0, r4
 800ef38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef3c:	08012490 	.word	0x08012490
 800ef40:	080124a1 	.word	0x080124a1

0800ef44 <__hi0bits>:
 800ef44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ef48:	4603      	mov	r3, r0
 800ef4a:	bf36      	itet	cc
 800ef4c:	0403      	lslcc	r3, r0, #16
 800ef4e:	2000      	movcs	r0, #0
 800ef50:	2010      	movcc	r0, #16
 800ef52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ef56:	bf3c      	itt	cc
 800ef58:	021b      	lslcc	r3, r3, #8
 800ef5a:	3008      	addcc	r0, #8
 800ef5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ef60:	bf3c      	itt	cc
 800ef62:	011b      	lslcc	r3, r3, #4
 800ef64:	3004      	addcc	r0, #4
 800ef66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef6a:	bf3c      	itt	cc
 800ef6c:	009b      	lslcc	r3, r3, #2
 800ef6e:	3002      	addcc	r0, #2
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	db05      	blt.n	800ef80 <__hi0bits+0x3c>
 800ef74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ef78:	f100 0001 	add.w	r0, r0, #1
 800ef7c:	bf08      	it	eq
 800ef7e:	2020      	moveq	r0, #32
 800ef80:	4770      	bx	lr

0800ef82 <__lo0bits>:
 800ef82:	6803      	ldr	r3, [r0, #0]
 800ef84:	4602      	mov	r2, r0
 800ef86:	f013 0007 	ands.w	r0, r3, #7
 800ef8a:	d00b      	beq.n	800efa4 <__lo0bits+0x22>
 800ef8c:	07d9      	lsls	r1, r3, #31
 800ef8e:	d421      	bmi.n	800efd4 <__lo0bits+0x52>
 800ef90:	0798      	lsls	r0, r3, #30
 800ef92:	bf49      	itett	mi
 800ef94:	085b      	lsrmi	r3, r3, #1
 800ef96:	089b      	lsrpl	r3, r3, #2
 800ef98:	2001      	movmi	r0, #1
 800ef9a:	6013      	strmi	r3, [r2, #0]
 800ef9c:	bf5c      	itt	pl
 800ef9e:	6013      	strpl	r3, [r2, #0]
 800efa0:	2002      	movpl	r0, #2
 800efa2:	4770      	bx	lr
 800efa4:	b299      	uxth	r1, r3
 800efa6:	b909      	cbnz	r1, 800efac <__lo0bits+0x2a>
 800efa8:	0c1b      	lsrs	r3, r3, #16
 800efaa:	2010      	movs	r0, #16
 800efac:	b2d9      	uxtb	r1, r3
 800efae:	b909      	cbnz	r1, 800efb4 <__lo0bits+0x32>
 800efb0:	3008      	adds	r0, #8
 800efb2:	0a1b      	lsrs	r3, r3, #8
 800efb4:	0719      	lsls	r1, r3, #28
 800efb6:	bf04      	itt	eq
 800efb8:	091b      	lsreq	r3, r3, #4
 800efba:	3004      	addeq	r0, #4
 800efbc:	0799      	lsls	r1, r3, #30
 800efbe:	bf04      	itt	eq
 800efc0:	089b      	lsreq	r3, r3, #2
 800efc2:	3002      	addeq	r0, #2
 800efc4:	07d9      	lsls	r1, r3, #31
 800efc6:	d403      	bmi.n	800efd0 <__lo0bits+0x4e>
 800efc8:	085b      	lsrs	r3, r3, #1
 800efca:	f100 0001 	add.w	r0, r0, #1
 800efce:	d003      	beq.n	800efd8 <__lo0bits+0x56>
 800efd0:	6013      	str	r3, [r2, #0]
 800efd2:	4770      	bx	lr
 800efd4:	2000      	movs	r0, #0
 800efd6:	4770      	bx	lr
 800efd8:	2020      	movs	r0, #32
 800efda:	4770      	bx	lr

0800efdc <__i2b>:
 800efdc:	b510      	push	{r4, lr}
 800efde:	460c      	mov	r4, r1
 800efe0:	2101      	movs	r1, #1
 800efe2:	f7ff ff07 	bl	800edf4 <_Balloc>
 800efe6:	4602      	mov	r2, r0
 800efe8:	b928      	cbnz	r0, 800eff6 <__i2b+0x1a>
 800efea:	4b05      	ldr	r3, [pc, #20]	@ (800f000 <__i2b+0x24>)
 800efec:	4805      	ldr	r0, [pc, #20]	@ (800f004 <__i2b+0x28>)
 800efee:	f240 1145 	movw	r1, #325	@ 0x145
 800eff2:	f000 fb2d 	bl	800f650 <__assert_func>
 800eff6:	2301      	movs	r3, #1
 800eff8:	6144      	str	r4, [r0, #20]
 800effa:	6103      	str	r3, [r0, #16]
 800effc:	bd10      	pop	{r4, pc}
 800effe:	bf00      	nop
 800f000:	08012490 	.word	0x08012490
 800f004:	080124a1 	.word	0x080124a1

0800f008 <__multiply>:
 800f008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f00c:	4614      	mov	r4, r2
 800f00e:	690a      	ldr	r2, [r1, #16]
 800f010:	6923      	ldr	r3, [r4, #16]
 800f012:	429a      	cmp	r2, r3
 800f014:	bfa8      	it	ge
 800f016:	4623      	movge	r3, r4
 800f018:	460f      	mov	r7, r1
 800f01a:	bfa4      	itt	ge
 800f01c:	460c      	movge	r4, r1
 800f01e:	461f      	movge	r7, r3
 800f020:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f024:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f028:	68a3      	ldr	r3, [r4, #8]
 800f02a:	6861      	ldr	r1, [r4, #4]
 800f02c:	eb0a 0609 	add.w	r6, sl, r9
 800f030:	42b3      	cmp	r3, r6
 800f032:	b085      	sub	sp, #20
 800f034:	bfb8      	it	lt
 800f036:	3101      	addlt	r1, #1
 800f038:	f7ff fedc 	bl	800edf4 <_Balloc>
 800f03c:	b930      	cbnz	r0, 800f04c <__multiply+0x44>
 800f03e:	4602      	mov	r2, r0
 800f040:	4b44      	ldr	r3, [pc, #272]	@ (800f154 <__multiply+0x14c>)
 800f042:	4845      	ldr	r0, [pc, #276]	@ (800f158 <__multiply+0x150>)
 800f044:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f048:	f000 fb02 	bl	800f650 <__assert_func>
 800f04c:	f100 0514 	add.w	r5, r0, #20
 800f050:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f054:	462b      	mov	r3, r5
 800f056:	2200      	movs	r2, #0
 800f058:	4543      	cmp	r3, r8
 800f05a:	d321      	bcc.n	800f0a0 <__multiply+0x98>
 800f05c:	f107 0114 	add.w	r1, r7, #20
 800f060:	f104 0214 	add.w	r2, r4, #20
 800f064:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f068:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f06c:	9302      	str	r3, [sp, #8]
 800f06e:	1b13      	subs	r3, r2, r4
 800f070:	3b15      	subs	r3, #21
 800f072:	f023 0303 	bic.w	r3, r3, #3
 800f076:	3304      	adds	r3, #4
 800f078:	f104 0715 	add.w	r7, r4, #21
 800f07c:	42ba      	cmp	r2, r7
 800f07e:	bf38      	it	cc
 800f080:	2304      	movcc	r3, #4
 800f082:	9301      	str	r3, [sp, #4]
 800f084:	9b02      	ldr	r3, [sp, #8]
 800f086:	9103      	str	r1, [sp, #12]
 800f088:	428b      	cmp	r3, r1
 800f08a:	d80c      	bhi.n	800f0a6 <__multiply+0x9e>
 800f08c:	2e00      	cmp	r6, #0
 800f08e:	dd03      	ble.n	800f098 <__multiply+0x90>
 800f090:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f094:	2b00      	cmp	r3, #0
 800f096:	d05b      	beq.n	800f150 <__multiply+0x148>
 800f098:	6106      	str	r6, [r0, #16]
 800f09a:	b005      	add	sp, #20
 800f09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0a0:	f843 2b04 	str.w	r2, [r3], #4
 800f0a4:	e7d8      	b.n	800f058 <__multiply+0x50>
 800f0a6:	f8b1 a000 	ldrh.w	sl, [r1]
 800f0aa:	f1ba 0f00 	cmp.w	sl, #0
 800f0ae:	d024      	beq.n	800f0fa <__multiply+0xf2>
 800f0b0:	f104 0e14 	add.w	lr, r4, #20
 800f0b4:	46a9      	mov	r9, r5
 800f0b6:	f04f 0c00 	mov.w	ip, #0
 800f0ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f0be:	f8d9 3000 	ldr.w	r3, [r9]
 800f0c2:	fa1f fb87 	uxth.w	fp, r7
 800f0c6:	b29b      	uxth	r3, r3
 800f0c8:	fb0a 330b 	mla	r3, sl, fp, r3
 800f0cc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f0d0:	f8d9 7000 	ldr.w	r7, [r9]
 800f0d4:	4463      	add	r3, ip
 800f0d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f0da:	fb0a c70b 	mla	r7, sl, fp, ip
 800f0de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f0e8:	4572      	cmp	r2, lr
 800f0ea:	f849 3b04 	str.w	r3, [r9], #4
 800f0ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f0f2:	d8e2      	bhi.n	800f0ba <__multiply+0xb2>
 800f0f4:	9b01      	ldr	r3, [sp, #4]
 800f0f6:	f845 c003 	str.w	ip, [r5, r3]
 800f0fa:	9b03      	ldr	r3, [sp, #12]
 800f0fc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f100:	3104      	adds	r1, #4
 800f102:	f1b9 0f00 	cmp.w	r9, #0
 800f106:	d021      	beq.n	800f14c <__multiply+0x144>
 800f108:	682b      	ldr	r3, [r5, #0]
 800f10a:	f104 0c14 	add.w	ip, r4, #20
 800f10e:	46ae      	mov	lr, r5
 800f110:	f04f 0a00 	mov.w	sl, #0
 800f114:	f8bc b000 	ldrh.w	fp, [ip]
 800f118:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f11c:	fb09 770b 	mla	r7, r9, fp, r7
 800f120:	4457      	add	r7, sl
 800f122:	b29b      	uxth	r3, r3
 800f124:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f128:	f84e 3b04 	str.w	r3, [lr], #4
 800f12c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f130:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f134:	f8be 3000 	ldrh.w	r3, [lr]
 800f138:	fb09 330a 	mla	r3, r9, sl, r3
 800f13c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f140:	4562      	cmp	r2, ip
 800f142:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f146:	d8e5      	bhi.n	800f114 <__multiply+0x10c>
 800f148:	9f01      	ldr	r7, [sp, #4]
 800f14a:	51eb      	str	r3, [r5, r7]
 800f14c:	3504      	adds	r5, #4
 800f14e:	e799      	b.n	800f084 <__multiply+0x7c>
 800f150:	3e01      	subs	r6, #1
 800f152:	e79b      	b.n	800f08c <__multiply+0x84>
 800f154:	08012490 	.word	0x08012490
 800f158:	080124a1 	.word	0x080124a1

0800f15c <__pow5mult>:
 800f15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f160:	4615      	mov	r5, r2
 800f162:	f012 0203 	ands.w	r2, r2, #3
 800f166:	4607      	mov	r7, r0
 800f168:	460e      	mov	r6, r1
 800f16a:	d007      	beq.n	800f17c <__pow5mult+0x20>
 800f16c:	4c25      	ldr	r4, [pc, #148]	@ (800f204 <__pow5mult+0xa8>)
 800f16e:	3a01      	subs	r2, #1
 800f170:	2300      	movs	r3, #0
 800f172:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f176:	f7ff fe9f 	bl	800eeb8 <__multadd>
 800f17a:	4606      	mov	r6, r0
 800f17c:	10ad      	asrs	r5, r5, #2
 800f17e:	d03d      	beq.n	800f1fc <__pow5mult+0xa0>
 800f180:	69fc      	ldr	r4, [r7, #28]
 800f182:	b97c      	cbnz	r4, 800f1a4 <__pow5mult+0x48>
 800f184:	2010      	movs	r0, #16
 800f186:	f7ff fe2d 	bl	800ede4 <malloc>
 800f18a:	4602      	mov	r2, r0
 800f18c:	61f8      	str	r0, [r7, #28]
 800f18e:	b928      	cbnz	r0, 800f19c <__pow5mult+0x40>
 800f190:	4b1d      	ldr	r3, [pc, #116]	@ (800f208 <__pow5mult+0xac>)
 800f192:	481e      	ldr	r0, [pc, #120]	@ (800f20c <__pow5mult+0xb0>)
 800f194:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f198:	f000 fa5a 	bl	800f650 <__assert_func>
 800f19c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f1a0:	6004      	str	r4, [r0, #0]
 800f1a2:	60c4      	str	r4, [r0, #12]
 800f1a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f1a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f1ac:	b94c      	cbnz	r4, 800f1c2 <__pow5mult+0x66>
 800f1ae:	f240 2171 	movw	r1, #625	@ 0x271
 800f1b2:	4638      	mov	r0, r7
 800f1b4:	f7ff ff12 	bl	800efdc <__i2b>
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800f1be:	4604      	mov	r4, r0
 800f1c0:	6003      	str	r3, [r0, #0]
 800f1c2:	f04f 0900 	mov.w	r9, #0
 800f1c6:	07eb      	lsls	r3, r5, #31
 800f1c8:	d50a      	bpl.n	800f1e0 <__pow5mult+0x84>
 800f1ca:	4631      	mov	r1, r6
 800f1cc:	4622      	mov	r2, r4
 800f1ce:	4638      	mov	r0, r7
 800f1d0:	f7ff ff1a 	bl	800f008 <__multiply>
 800f1d4:	4631      	mov	r1, r6
 800f1d6:	4680      	mov	r8, r0
 800f1d8:	4638      	mov	r0, r7
 800f1da:	f7ff fe4b 	bl	800ee74 <_Bfree>
 800f1de:	4646      	mov	r6, r8
 800f1e0:	106d      	asrs	r5, r5, #1
 800f1e2:	d00b      	beq.n	800f1fc <__pow5mult+0xa0>
 800f1e4:	6820      	ldr	r0, [r4, #0]
 800f1e6:	b938      	cbnz	r0, 800f1f8 <__pow5mult+0x9c>
 800f1e8:	4622      	mov	r2, r4
 800f1ea:	4621      	mov	r1, r4
 800f1ec:	4638      	mov	r0, r7
 800f1ee:	f7ff ff0b 	bl	800f008 <__multiply>
 800f1f2:	6020      	str	r0, [r4, #0]
 800f1f4:	f8c0 9000 	str.w	r9, [r0]
 800f1f8:	4604      	mov	r4, r0
 800f1fa:	e7e4      	b.n	800f1c6 <__pow5mult+0x6a>
 800f1fc:	4630      	mov	r0, r6
 800f1fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f202:	bf00      	nop
 800f204:	080124fc 	.word	0x080124fc
 800f208:	08012421 	.word	0x08012421
 800f20c:	080124a1 	.word	0x080124a1

0800f210 <__lshift>:
 800f210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f214:	460c      	mov	r4, r1
 800f216:	6849      	ldr	r1, [r1, #4]
 800f218:	6923      	ldr	r3, [r4, #16]
 800f21a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f21e:	68a3      	ldr	r3, [r4, #8]
 800f220:	4607      	mov	r7, r0
 800f222:	4691      	mov	r9, r2
 800f224:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f228:	f108 0601 	add.w	r6, r8, #1
 800f22c:	42b3      	cmp	r3, r6
 800f22e:	db0b      	blt.n	800f248 <__lshift+0x38>
 800f230:	4638      	mov	r0, r7
 800f232:	f7ff fddf 	bl	800edf4 <_Balloc>
 800f236:	4605      	mov	r5, r0
 800f238:	b948      	cbnz	r0, 800f24e <__lshift+0x3e>
 800f23a:	4602      	mov	r2, r0
 800f23c:	4b28      	ldr	r3, [pc, #160]	@ (800f2e0 <__lshift+0xd0>)
 800f23e:	4829      	ldr	r0, [pc, #164]	@ (800f2e4 <__lshift+0xd4>)
 800f240:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f244:	f000 fa04 	bl	800f650 <__assert_func>
 800f248:	3101      	adds	r1, #1
 800f24a:	005b      	lsls	r3, r3, #1
 800f24c:	e7ee      	b.n	800f22c <__lshift+0x1c>
 800f24e:	2300      	movs	r3, #0
 800f250:	f100 0114 	add.w	r1, r0, #20
 800f254:	f100 0210 	add.w	r2, r0, #16
 800f258:	4618      	mov	r0, r3
 800f25a:	4553      	cmp	r3, sl
 800f25c:	db33      	blt.n	800f2c6 <__lshift+0xb6>
 800f25e:	6920      	ldr	r0, [r4, #16]
 800f260:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f264:	f104 0314 	add.w	r3, r4, #20
 800f268:	f019 091f 	ands.w	r9, r9, #31
 800f26c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f270:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f274:	d02b      	beq.n	800f2ce <__lshift+0xbe>
 800f276:	f1c9 0e20 	rsb	lr, r9, #32
 800f27a:	468a      	mov	sl, r1
 800f27c:	2200      	movs	r2, #0
 800f27e:	6818      	ldr	r0, [r3, #0]
 800f280:	fa00 f009 	lsl.w	r0, r0, r9
 800f284:	4310      	orrs	r0, r2
 800f286:	f84a 0b04 	str.w	r0, [sl], #4
 800f28a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f28e:	459c      	cmp	ip, r3
 800f290:	fa22 f20e 	lsr.w	r2, r2, lr
 800f294:	d8f3      	bhi.n	800f27e <__lshift+0x6e>
 800f296:	ebac 0304 	sub.w	r3, ip, r4
 800f29a:	3b15      	subs	r3, #21
 800f29c:	f023 0303 	bic.w	r3, r3, #3
 800f2a0:	3304      	adds	r3, #4
 800f2a2:	f104 0015 	add.w	r0, r4, #21
 800f2a6:	4584      	cmp	ip, r0
 800f2a8:	bf38      	it	cc
 800f2aa:	2304      	movcc	r3, #4
 800f2ac:	50ca      	str	r2, [r1, r3]
 800f2ae:	b10a      	cbz	r2, 800f2b4 <__lshift+0xa4>
 800f2b0:	f108 0602 	add.w	r6, r8, #2
 800f2b4:	3e01      	subs	r6, #1
 800f2b6:	4638      	mov	r0, r7
 800f2b8:	612e      	str	r6, [r5, #16]
 800f2ba:	4621      	mov	r1, r4
 800f2bc:	f7ff fdda 	bl	800ee74 <_Bfree>
 800f2c0:	4628      	mov	r0, r5
 800f2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	e7c5      	b.n	800f25a <__lshift+0x4a>
 800f2ce:	3904      	subs	r1, #4
 800f2d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800f2d8:	459c      	cmp	ip, r3
 800f2da:	d8f9      	bhi.n	800f2d0 <__lshift+0xc0>
 800f2dc:	e7ea      	b.n	800f2b4 <__lshift+0xa4>
 800f2de:	bf00      	nop
 800f2e0:	08012490 	.word	0x08012490
 800f2e4:	080124a1 	.word	0x080124a1

0800f2e8 <__mcmp>:
 800f2e8:	690a      	ldr	r2, [r1, #16]
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	6900      	ldr	r0, [r0, #16]
 800f2ee:	1a80      	subs	r0, r0, r2
 800f2f0:	b530      	push	{r4, r5, lr}
 800f2f2:	d10e      	bne.n	800f312 <__mcmp+0x2a>
 800f2f4:	3314      	adds	r3, #20
 800f2f6:	3114      	adds	r1, #20
 800f2f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f2fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f300:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f304:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f308:	4295      	cmp	r5, r2
 800f30a:	d003      	beq.n	800f314 <__mcmp+0x2c>
 800f30c:	d205      	bcs.n	800f31a <__mcmp+0x32>
 800f30e:	f04f 30ff 	mov.w	r0, #4294967295
 800f312:	bd30      	pop	{r4, r5, pc}
 800f314:	42a3      	cmp	r3, r4
 800f316:	d3f3      	bcc.n	800f300 <__mcmp+0x18>
 800f318:	e7fb      	b.n	800f312 <__mcmp+0x2a>
 800f31a:	2001      	movs	r0, #1
 800f31c:	e7f9      	b.n	800f312 <__mcmp+0x2a>
	...

0800f320 <__mdiff>:
 800f320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f324:	4689      	mov	r9, r1
 800f326:	4606      	mov	r6, r0
 800f328:	4611      	mov	r1, r2
 800f32a:	4648      	mov	r0, r9
 800f32c:	4614      	mov	r4, r2
 800f32e:	f7ff ffdb 	bl	800f2e8 <__mcmp>
 800f332:	1e05      	subs	r5, r0, #0
 800f334:	d112      	bne.n	800f35c <__mdiff+0x3c>
 800f336:	4629      	mov	r1, r5
 800f338:	4630      	mov	r0, r6
 800f33a:	f7ff fd5b 	bl	800edf4 <_Balloc>
 800f33e:	4602      	mov	r2, r0
 800f340:	b928      	cbnz	r0, 800f34e <__mdiff+0x2e>
 800f342:	4b3f      	ldr	r3, [pc, #252]	@ (800f440 <__mdiff+0x120>)
 800f344:	f240 2137 	movw	r1, #567	@ 0x237
 800f348:	483e      	ldr	r0, [pc, #248]	@ (800f444 <__mdiff+0x124>)
 800f34a:	f000 f981 	bl	800f650 <__assert_func>
 800f34e:	2301      	movs	r3, #1
 800f350:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f354:	4610      	mov	r0, r2
 800f356:	b003      	add	sp, #12
 800f358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f35c:	bfbc      	itt	lt
 800f35e:	464b      	movlt	r3, r9
 800f360:	46a1      	movlt	r9, r4
 800f362:	4630      	mov	r0, r6
 800f364:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f368:	bfba      	itte	lt
 800f36a:	461c      	movlt	r4, r3
 800f36c:	2501      	movlt	r5, #1
 800f36e:	2500      	movge	r5, #0
 800f370:	f7ff fd40 	bl	800edf4 <_Balloc>
 800f374:	4602      	mov	r2, r0
 800f376:	b918      	cbnz	r0, 800f380 <__mdiff+0x60>
 800f378:	4b31      	ldr	r3, [pc, #196]	@ (800f440 <__mdiff+0x120>)
 800f37a:	f240 2145 	movw	r1, #581	@ 0x245
 800f37e:	e7e3      	b.n	800f348 <__mdiff+0x28>
 800f380:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f384:	6926      	ldr	r6, [r4, #16]
 800f386:	60c5      	str	r5, [r0, #12]
 800f388:	f109 0310 	add.w	r3, r9, #16
 800f38c:	f109 0514 	add.w	r5, r9, #20
 800f390:	f104 0e14 	add.w	lr, r4, #20
 800f394:	f100 0b14 	add.w	fp, r0, #20
 800f398:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f39c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f3a0:	9301      	str	r3, [sp, #4]
 800f3a2:	46d9      	mov	r9, fp
 800f3a4:	f04f 0c00 	mov.w	ip, #0
 800f3a8:	9b01      	ldr	r3, [sp, #4]
 800f3aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f3ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f3b2:	9301      	str	r3, [sp, #4]
 800f3b4:	fa1f f38a 	uxth.w	r3, sl
 800f3b8:	4619      	mov	r1, r3
 800f3ba:	b283      	uxth	r3, r0
 800f3bc:	1acb      	subs	r3, r1, r3
 800f3be:	0c00      	lsrs	r0, r0, #16
 800f3c0:	4463      	add	r3, ip
 800f3c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f3c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f3d0:	4576      	cmp	r6, lr
 800f3d2:	f849 3b04 	str.w	r3, [r9], #4
 800f3d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f3da:	d8e5      	bhi.n	800f3a8 <__mdiff+0x88>
 800f3dc:	1b33      	subs	r3, r6, r4
 800f3de:	3b15      	subs	r3, #21
 800f3e0:	f023 0303 	bic.w	r3, r3, #3
 800f3e4:	3415      	adds	r4, #21
 800f3e6:	3304      	adds	r3, #4
 800f3e8:	42a6      	cmp	r6, r4
 800f3ea:	bf38      	it	cc
 800f3ec:	2304      	movcc	r3, #4
 800f3ee:	441d      	add	r5, r3
 800f3f0:	445b      	add	r3, fp
 800f3f2:	461e      	mov	r6, r3
 800f3f4:	462c      	mov	r4, r5
 800f3f6:	4544      	cmp	r4, r8
 800f3f8:	d30e      	bcc.n	800f418 <__mdiff+0xf8>
 800f3fa:	f108 0103 	add.w	r1, r8, #3
 800f3fe:	1b49      	subs	r1, r1, r5
 800f400:	f021 0103 	bic.w	r1, r1, #3
 800f404:	3d03      	subs	r5, #3
 800f406:	45a8      	cmp	r8, r5
 800f408:	bf38      	it	cc
 800f40a:	2100      	movcc	r1, #0
 800f40c:	440b      	add	r3, r1
 800f40e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f412:	b191      	cbz	r1, 800f43a <__mdiff+0x11a>
 800f414:	6117      	str	r7, [r2, #16]
 800f416:	e79d      	b.n	800f354 <__mdiff+0x34>
 800f418:	f854 1b04 	ldr.w	r1, [r4], #4
 800f41c:	46e6      	mov	lr, ip
 800f41e:	0c08      	lsrs	r0, r1, #16
 800f420:	fa1c fc81 	uxtah	ip, ip, r1
 800f424:	4471      	add	r1, lr
 800f426:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f42a:	b289      	uxth	r1, r1
 800f42c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f430:	f846 1b04 	str.w	r1, [r6], #4
 800f434:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f438:	e7dd      	b.n	800f3f6 <__mdiff+0xd6>
 800f43a:	3f01      	subs	r7, #1
 800f43c:	e7e7      	b.n	800f40e <__mdiff+0xee>
 800f43e:	bf00      	nop
 800f440:	08012490 	.word	0x08012490
 800f444:	080124a1 	.word	0x080124a1

0800f448 <__d2b>:
 800f448:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f44c:	460f      	mov	r7, r1
 800f44e:	2101      	movs	r1, #1
 800f450:	ec59 8b10 	vmov	r8, r9, d0
 800f454:	4616      	mov	r6, r2
 800f456:	f7ff fccd 	bl	800edf4 <_Balloc>
 800f45a:	4604      	mov	r4, r0
 800f45c:	b930      	cbnz	r0, 800f46c <__d2b+0x24>
 800f45e:	4602      	mov	r2, r0
 800f460:	4b23      	ldr	r3, [pc, #140]	@ (800f4f0 <__d2b+0xa8>)
 800f462:	4824      	ldr	r0, [pc, #144]	@ (800f4f4 <__d2b+0xac>)
 800f464:	f240 310f 	movw	r1, #783	@ 0x30f
 800f468:	f000 f8f2 	bl	800f650 <__assert_func>
 800f46c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f470:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f474:	b10d      	cbz	r5, 800f47a <__d2b+0x32>
 800f476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f47a:	9301      	str	r3, [sp, #4]
 800f47c:	f1b8 0300 	subs.w	r3, r8, #0
 800f480:	d023      	beq.n	800f4ca <__d2b+0x82>
 800f482:	4668      	mov	r0, sp
 800f484:	9300      	str	r3, [sp, #0]
 800f486:	f7ff fd7c 	bl	800ef82 <__lo0bits>
 800f48a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f48e:	b1d0      	cbz	r0, 800f4c6 <__d2b+0x7e>
 800f490:	f1c0 0320 	rsb	r3, r0, #32
 800f494:	fa02 f303 	lsl.w	r3, r2, r3
 800f498:	430b      	orrs	r3, r1
 800f49a:	40c2      	lsrs	r2, r0
 800f49c:	6163      	str	r3, [r4, #20]
 800f49e:	9201      	str	r2, [sp, #4]
 800f4a0:	9b01      	ldr	r3, [sp, #4]
 800f4a2:	61a3      	str	r3, [r4, #24]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	bf0c      	ite	eq
 800f4a8:	2201      	moveq	r2, #1
 800f4aa:	2202      	movne	r2, #2
 800f4ac:	6122      	str	r2, [r4, #16]
 800f4ae:	b1a5      	cbz	r5, 800f4da <__d2b+0x92>
 800f4b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f4b4:	4405      	add	r5, r0
 800f4b6:	603d      	str	r5, [r7, #0]
 800f4b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f4bc:	6030      	str	r0, [r6, #0]
 800f4be:	4620      	mov	r0, r4
 800f4c0:	b003      	add	sp, #12
 800f4c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4c6:	6161      	str	r1, [r4, #20]
 800f4c8:	e7ea      	b.n	800f4a0 <__d2b+0x58>
 800f4ca:	a801      	add	r0, sp, #4
 800f4cc:	f7ff fd59 	bl	800ef82 <__lo0bits>
 800f4d0:	9b01      	ldr	r3, [sp, #4]
 800f4d2:	6163      	str	r3, [r4, #20]
 800f4d4:	3020      	adds	r0, #32
 800f4d6:	2201      	movs	r2, #1
 800f4d8:	e7e8      	b.n	800f4ac <__d2b+0x64>
 800f4da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f4de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f4e2:	6038      	str	r0, [r7, #0]
 800f4e4:	6918      	ldr	r0, [r3, #16]
 800f4e6:	f7ff fd2d 	bl	800ef44 <__hi0bits>
 800f4ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f4ee:	e7e5      	b.n	800f4bc <__d2b+0x74>
 800f4f0:	08012490 	.word	0x08012490
 800f4f4:	080124a1 	.word	0x080124a1

0800f4f8 <__sflush_r>:
 800f4f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f500:	0716      	lsls	r6, r2, #28
 800f502:	4605      	mov	r5, r0
 800f504:	460c      	mov	r4, r1
 800f506:	d454      	bmi.n	800f5b2 <__sflush_r+0xba>
 800f508:	684b      	ldr	r3, [r1, #4]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	dc02      	bgt.n	800f514 <__sflush_r+0x1c>
 800f50e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f510:	2b00      	cmp	r3, #0
 800f512:	dd48      	ble.n	800f5a6 <__sflush_r+0xae>
 800f514:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f516:	2e00      	cmp	r6, #0
 800f518:	d045      	beq.n	800f5a6 <__sflush_r+0xae>
 800f51a:	2300      	movs	r3, #0
 800f51c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f520:	682f      	ldr	r7, [r5, #0]
 800f522:	6a21      	ldr	r1, [r4, #32]
 800f524:	602b      	str	r3, [r5, #0]
 800f526:	d030      	beq.n	800f58a <__sflush_r+0x92>
 800f528:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f52a:	89a3      	ldrh	r3, [r4, #12]
 800f52c:	0759      	lsls	r1, r3, #29
 800f52e:	d505      	bpl.n	800f53c <__sflush_r+0x44>
 800f530:	6863      	ldr	r3, [r4, #4]
 800f532:	1ad2      	subs	r2, r2, r3
 800f534:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f536:	b10b      	cbz	r3, 800f53c <__sflush_r+0x44>
 800f538:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f53a:	1ad2      	subs	r2, r2, r3
 800f53c:	2300      	movs	r3, #0
 800f53e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f540:	6a21      	ldr	r1, [r4, #32]
 800f542:	4628      	mov	r0, r5
 800f544:	47b0      	blx	r6
 800f546:	1c43      	adds	r3, r0, #1
 800f548:	89a3      	ldrh	r3, [r4, #12]
 800f54a:	d106      	bne.n	800f55a <__sflush_r+0x62>
 800f54c:	6829      	ldr	r1, [r5, #0]
 800f54e:	291d      	cmp	r1, #29
 800f550:	d82b      	bhi.n	800f5aa <__sflush_r+0xb2>
 800f552:	4a2a      	ldr	r2, [pc, #168]	@ (800f5fc <__sflush_r+0x104>)
 800f554:	410a      	asrs	r2, r1
 800f556:	07d6      	lsls	r6, r2, #31
 800f558:	d427      	bmi.n	800f5aa <__sflush_r+0xb2>
 800f55a:	2200      	movs	r2, #0
 800f55c:	6062      	str	r2, [r4, #4]
 800f55e:	04d9      	lsls	r1, r3, #19
 800f560:	6922      	ldr	r2, [r4, #16]
 800f562:	6022      	str	r2, [r4, #0]
 800f564:	d504      	bpl.n	800f570 <__sflush_r+0x78>
 800f566:	1c42      	adds	r2, r0, #1
 800f568:	d101      	bne.n	800f56e <__sflush_r+0x76>
 800f56a:	682b      	ldr	r3, [r5, #0]
 800f56c:	b903      	cbnz	r3, 800f570 <__sflush_r+0x78>
 800f56e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f570:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f572:	602f      	str	r7, [r5, #0]
 800f574:	b1b9      	cbz	r1, 800f5a6 <__sflush_r+0xae>
 800f576:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f57a:	4299      	cmp	r1, r3
 800f57c:	d002      	beq.n	800f584 <__sflush_r+0x8c>
 800f57e:	4628      	mov	r0, r5
 800f580:	f7ff fbe6 	bl	800ed50 <_free_r>
 800f584:	2300      	movs	r3, #0
 800f586:	6363      	str	r3, [r4, #52]	@ 0x34
 800f588:	e00d      	b.n	800f5a6 <__sflush_r+0xae>
 800f58a:	2301      	movs	r3, #1
 800f58c:	4628      	mov	r0, r5
 800f58e:	47b0      	blx	r6
 800f590:	4602      	mov	r2, r0
 800f592:	1c50      	adds	r0, r2, #1
 800f594:	d1c9      	bne.n	800f52a <__sflush_r+0x32>
 800f596:	682b      	ldr	r3, [r5, #0]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d0c6      	beq.n	800f52a <__sflush_r+0x32>
 800f59c:	2b1d      	cmp	r3, #29
 800f59e:	d001      	beq.n	800f5a4 <__sflush_r+0xac>
 800f5a0:	2b16      	cmp	r3, #22
 800f5a2:	d11e      	bne.n	800f5e2 <__sflush_r+0xea>
 800f5a4:	602f      	str	r7, [r5, #0]
 800f5a6:	2000      	movs	r0, #0
 800f5a8:	e022      	b.n	800f5f0 <__sflush_r+0xf8>
 800f5aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5ae:	b21b      	sxth	r3, r3
 800f5b0:	e01b      	b.n	800f5ea <__sflush_r+0xf2>
 800f5b2:	690f      	ldr	r7, [r1, #16]
 800f5b4:	2f00      	cmp	r7, #0
 800f5b6:	d0f6      	beq.n	800f5a6 <__sflush_r+0xae>
 800f5b8:	0793      	lsls	r3, r2, #30
 800f5ba:	680e      	ldr	r6, [r1, #0]
 800f5bc:	bf08      	it	eq
 800f5be:	694b      	ldreq	r3, [r1, #20]
 800f5c0:	600f      	str	r7, [r1, #0]
 800f5c2:	bf18      	it	ne
 800f5c4:	2300      	movne	r3, #0
 800f5c6:	eba6 0807 	sub.w	r8, r6, r7
 800f5ca:	608b      	str	r3, [r1, #8]
 800f5cc:	f1b8 0f00 	cmp.w	r8, #0
 800f5d0:	dde9      	ble.n	800f5a6 <__sflush_r+0xae>
 800f5d2:	6a21      	ldr	r1, [r4, #32]
 800f5d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f5d6:	4643      	mov	r3, r8
 800f5d8:	463a      	mov	r2, r7
 800f5da:	4628      	mov	r0, r5
 800f5dc:	47b0      	blx	r6
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	dc08      	bgt.n	800f5f4 <__sflush_r+0xfc>
 800f5e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5ea:	81a3      	strh	r3, [r4, #12]
 800f5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5f4:	4407      	add	r7, r0
 800f5f6:	eba8 0800 	sub.w	r8, r8, r0
 800f5fa:	e7e7      	b.n	800f5cc <__sflush_r+0xd4>
 800f5fc:	dfbffffe 	.word	0xdfbffffe

0800f600 <_fflush_r>:
 800f600:	b538      	push	{r3, r4, r5, lr}
 800f602:	690b      	ldr	r3, [r1, #16]
 800f604:	4605      	mov	r5, r0
 800f606:	460c      	mov	r4, r1
 800f608:	b913      	cbnz	r3, 800f610 <_fflush_r+0x10>
 800f60a:	2500      	movs	r5, #0
 800f60c:	4628      	mov	r0, r5
 800f60e:	bd38      	pop	{r3, r4, r5, pc}
 800f610:	b118      	cbz	r0, 800f61a <_fflush_r+0x1a>
 800f612:	6a03      	ldr	r3, [r0, #32]
 800f614:	b90b      	cbnz	r3, 800f61a <_fflush_r+0x1a>
 800f616:	f7fe fc25 	bl	800de64 <__sinit>
 800f61a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d0f3      	beq.n	800f60a <_fflush_r+0xa>
 800f622:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f624:	07d0      	lsls	r0, r2, #31
 800f626:	d404      	bmi.n	800f632 <_fflush_r+0x32>
 800f628:	0599      	lsls	r1, r3, #22
 800f62a:	d402      	bmi.n	800f632 <_fflush_r+0x32>
 800f62c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f62e:	f7fe fd30 	bl	800e092 <__retarget_lock_acquire_recursive>
 800f632:	4628      	mov	r0, r5
 800f634:	4621      	mov	r1, r4
 800f636:	f7ff ff5f 	bl	800f4f8 <__sflush_r>
 800f63a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f63c:	07da      	lsls	r2, r3, #31
 800f63e:	4605      	mov	r5, r0
 800f640:	d4e4      	bmi.n	800f60c <_fflush_r+0xc>
 800f642:	89a3      	ldrh	r3, [r4, #12]
 800f644:	059b      	lsls	r3, r3, #22
 800f646:	d4e1      	bmi.n	800f60c <_fflush_r+0xc>
 800f648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f64a:	f7fe fd23 	bl	800e094 <__retarget_lock_release_recursive>
 800f64e:	e7dd      	b.n	800f60c <_fflush_r+0xc>

0800f650 <__assert_func>:
 800f650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f652:	4614      	mov	r4, r2
 800f654:	461a      	mov	r2, r3
 800f656:	4b09      	ldr	r3, [pc, #36]	@ (800f67c <__assert_func+0x2c>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	4605      	mov	r5, r0
 800f65c:	68d8      	ldr	r0, [r3, #12]
 800f65e:	b954      	cbnz	r4, 800f676 <__assert_func+0x26>
 800f660:	4b07      	ldr	r3, [pc, #28]	@ (800f680 <__assert_func+0x30>)
 800f662:	461c      	mov	r4, r3
 800f664:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f668:	9100      	str	r1, [sp, #0]
 800f66a:	462b      	mov	r3, r5
 800f66c:	4905      	ldr	r1, [pc, #20]	@ (800f684 <__assert_func+0x34>)
 800f66e:	f000 f82d 	bl	800f6cc <fiprintf>
 800f672:	f000 f83d 	bl	800f6f0 <abort>
 800f676:	4b04      	ldr	r3, [pc, #16]	@ (800f688 <__assert_func+0x38>)
 800f678:	e7f4      	b.n	800f664 <__assert_func+0x14>
 800f67a:	bf00      	nop
 800f67c:	20000058 	.word	0x20000058
 800f680:	0801263d 	.word	0x0801263d
 800f684:	0801260f 	.word	0x0801260f
 800f688:	08012602 	.word	0x08012602

0800f68c <__ascii_mbtowc>:
 800f68c:	b082      	sub	sp, #8
 800f68e:	b901      	cbnz	r1, 800f692 <__ascii_mbtowc+0x6>
 800f690:	a901      	add	r1, sp, #4
 800f692:	b142      	cbz	r2, 800f6a6 <__ascii_mbtowc+0x1a>
 800f694:	b14b      	cbz	r3, 800f6aa <__ascii_mbtowc+0x1e>
 800f696:	7813      	ldrb	r3, [r2, #0]
 800f698:	600b      	str	r3, [r1, #0]
 800f69a:	7812      	ldrb	r2, [r2, #0]
 800f69c:	1e10      	subs	r0, r2, #0
 800f69e:	bf18      	it	ne
 800f6a0:	2001      	movne	r0, #1
 800f6a2:	b002      	add	sp, #8
 800f6a4:	4770      	bx	lr
 800f6a6:	4610      	mov	r0, r2
 800f6a8:	e7fb      	b.n	800f6a2 <__ascii_mbtowc+0x16>
 800f6aa:	f06f 0001 	mvn.w	r0, #1
 800f6ae:	e7f8      	b.n	800f6a2 <__ascii_mbtowc+0x16>

0800f6b0 <__ascii_wctomb>:
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	4608      	mov	r0, r1
 800f6b4:	b141      	cbz	r1, 800f6c8 <__ascii_wctomb+0x18>
 800f6b6:	2aff      	cmp	r2, #255	@ 0xff
 800f6b8:	d904      	bls.n	800f6c4 <__ascii_wctomb+0x14>
 800f6ba:	228a      	movs	r2, #138	@ 0x8a
 800f6bc:	601a      	str	r2, [r3, #0]
 800f6be:	f04f 30ff 	mov.w	r0, #4294967295
 800f6c2:	4770      	bx	lr
 800f6c4:	700a      	strb	r2, [r1, #0]
 800f6c6:	2001      	movs	r0, #1
 800f6c8:	4770      	bx	lr
	...

0800f6cc <fiprintf>:
 800f6cc:	b40e      	push	{r1, r2, r3}
 800f6ce:	b503      	push	{r0, r1, lr}
 800f6d0:	4601      	mov	r1, r0
 800f6d2:	ab03      	add	r3, sp, #12
 800f6d4:	4805      	ldr	r0, [pc, #20]	@ (800f6ec <fiprintf+0x20>)
 800f6d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6da:	6800      	ldr	r0, [r0, #0]
 800f6dc:	9301      	str	r3, [sp, #4]
 800f6de:	f000 f837 	bl	800f750 <_vfiprintf_r>
 800f6e2:	b002      	add	sp, #8
 800f6e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6e8:	b003      	add	sp, #12
 800f6ea:	4770      	bx	lr
 800f6ec:	20000058 	.word	0x20000058

0800f6f0 <abort>:
 800f6f0:	b508      	push	{r3, lr}
 800f6f2:	2006      	movs	r0, #6
 800f6f4:	f000 fa00 	bl	800faf8 <raise>
 800f6f8:	2001      	movs	r0, #1
 800f6fa:	f7f8 f86f 	bl	80077dc <_exit>

0800f6fe <__sfputc_r>:
 800f6fe:	6893      	ldr	r3, [r2, #8]
 800f700:	3b01      	subs	r3, #1
 800f702:	2b00      	cmp	r3, #0
 800f704:	b410      	push	{r4}
 800f706:	6093      	str	r3, [r2, #8]
 800f708:	da08      	bge.n	800f71c <__sfputc_r+0x1e>
 800f70a:	6994      	ldr	r4, [r2, #24]
 800f70c:	42a3      	cmp	r3, r4
 800f70e:	db01      	blt.n	800f714 <__sfputc_r+0x16>
 800f710:	290a      	cmp	r1, #10
 800f712:	d103      	bne.n	800f71c <__sfputc_r+0x1e>
 800f714:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f718:	f000 b932 	b.w	800f980 <__swbuf_r>
 800f71c:	6813      	ldr	r3, [r2, #0]
 800f71e:	1c58      	adds	r0, r3, #1
 800f720:	6010      	str	r0, [r2, #0]
 800f722:	7019      	strb	r1, [r3, #0]
 800f724:	4608      	mov	r0, r1
 800f726:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f72a:	4770      	bx	lr

0800f72c <__sfputs_r>:
 800f72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f72e:	4606      	mov	r6, r0
 800f730:	460f      	mov	r7, r1
 800f732:	4614      	mov	r4, r2
 800f734:	18d5      	adds	r5, r2, r3
 800f736:	42ac      	cmp	r4, r5
 800f738:	d101      	bne.n	800f73e <__sfputs_r+0x12>
 800f73a:	2000      	movs	r0, #0
 800f73c:	e007      	b.n	800f74e <__sfputs_r+0x22>
 800f73e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f742:	463a      	mov	r2, r7
 800f744:	4630      	mov	r0, r6
 800f746:	f7ff ffda 	bl	800f6fe <__sfputc_r>
 800f74a:	1c43      	adds	r3, r0, #1
 800f74c:	d1f3      	bne.n	800f736 <__sfputs_r+0xa>
 800f74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f750 <_vfiprintf_r>:
 800f750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f754:	460d      	mov	r5, r1
 800f756:	b09d      	sub	sp, #116	@ 0x74
 800f758:	4614      	mov	r4, r2
 800f75a:	4698      	mov	r8, r3
 800f75c:	4606      	mov	r6, r0
 800f75e:	b118      	cbz	r0, 800f768 <_vfiprintf_r+0x18>
 800f760:	6a03      	ldr	r3, [r0, #32]
 800f762:	b90b      	cbnz	r3, 800f768 <_vfiprintf_r+0x18>
 800f764:	f7fe fb7e 	bl	800de64 <__sinit>
 800f768:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f76a:	07d9      	lsls	r1, r3, #31
 800f76c:	d405      	bmi.n	800f77a <_vfiprintf_r+0x2a>
 800f76e:	89ab      	ldrh	r3, [r5, #12]
 800f770:	059a      	lsls	r2, r3, #22
 800f772:	d402      	bmi.n	800f77a <_vfiprintf_r+0x2a>
 800f774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f776:	f7fe fc8c 	bl	800e092 <__retarget_lock_acquire_recursive>
 800f77a:	89ab      	ldrh	r3, [r5, #12]
 800f77c:	071b      	lsls	r3, r3, #28
 800f77e:	d501      	bpl.n	800f784 <_vfiprintf_r+0x34>
 800f780:	692b      	ldr	r3, [r5, #16]
 800f782:	b99b      	cbnz	r3, 800f7ac <_vfiprintf_r+0x5c>
 800f784:	4629      	mov	r1, r5
 800f786:	4630      	mov	r0, r6
 800f788:	f000 f938 	bl	800f9fc <__swsetup_r>
 800f78c:	b170      	cbz	r0, 800f7ac <_vfiprintf_r+0x5c>
 800f78e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f790:	07dc      	lsls	r4, r3, #31
 800f792:	d504      	bpl.n	800f79e <_vfiprintf_r+0x4e>
 800f794:	f04f 30ff 	mov.w	r0, #4294967295
 800f798:	b01d      	add	sp, #116	@ 0x74
 800f79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f79e:	89ab      	ldrh	r3, [r5, #12]
 800f7a0:	0598      	lsls	r0, r3, #22
 800f7a2:	d4f7      	bmi.n	800f794 <_vfiprintf_r+0x44>
 800f7a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7a6:	f7fe fc75 	bl	800e094 <__retarget_lock_release_recursive>
 800f7aa:	e7f3      	b.n	800f794 <_vfiprintf_r+0x44>
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7b0:	2320      	movs	r3, #32
 800f7b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f7b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7ba:	2330      	movs	r3, #48	@ 0x30
 800f7bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f96c <_vfiprintf_r+0x21c>
 800f7c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f7c4:	f04f 0901 	mov.w	r9, #1
 800f7c8:	4623      	mov	r3, r4
 800f7ca:	469a      	mov	sl, r3
 800f7cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7d0:	b10a      	cbz	r2, 800f7d6 <_vfiprintf_r+0x86>
 800f7d2:	2a25      	cmp	r2, #37	@ 0x25
 800f7d4:	d1f9      	bne.n	800f7ca <_vfiprintf_r+0x7a>
 800f7d6:	ebba 0b04 	subs.w	fp, sl, r4
 800f7da:	d00b      	beq.n	800f7f4 <_vfiprintf_r+0xa4>
 800f7dc:	465b      	mov	r3, fp
 800f7de:	4622      	mov	r2, r4
 800f7e0:	4629      	mov	r1, r5
 800f7e2:	4630      	mov	r0, r6
 800f7e4:	f7ff ffa2 	bl	800f72c <__sfputs_r>
 800f7e8:	3001      	adds	r0, #1
 800f7ea:	f000 80a7 	beq.w	800f93c <_vfiprintf_r+0x1ec>
 800f7ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7f0:	445a      	add	r2, fp
 800f7f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800f7f4:	f89a 3000 	ldrb.w	r3, [sl]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	f000 809f 	beq.w	800f93c <_vfiprintf_r+0x1ec>
 800f7fe:	2300      	movs	r3, #0
 800f800:	f04f 32ff 	mov.w	r2, #4294967295
 800f804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f808:	f10a 0a01 	add.w	sl, sl, #1
 800f80c:	9304      	str	r3, [sp, #16]
 800f80e:	9307      	str	r3, [sp, #28]
 800f810:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f814:	931a      	str	r3, [sp, #104]	@ 0x68
 800f816:	4654      	mov	r4, sl
 800f818:	2205      	movs	r2, #5
 800f81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f81e:	4853      	ldr	r0, [pc, #332]	@ (800f96c <_vfiprintf_r+0x21c>)
 800f820:	f7f0 fcf6 	bl	8000210 <memchr>
 800f824:	9a04      	ldr	r2, [sp, #16]
 800f826:	b9d8      	cbnz	r0, 800f860 <_vfiprintf_r+0x110>
 800f828:	06d1      	lsls	r1, r2, #27
 800f82a:	bf44      	itt	mi
 800f82c:	2320      	movmi	r3, #32
 800f82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f832:	0713      	lsls	r3, r2, #28
 800f834:	bf44      	itt	mi
 800f836:	232b      	movmi	r3, #43	@ 0x2b
 800f838:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f83c:	f89a 3000 	ldrb.w	r3, [sl]
 800f840:	2b2a      	cmp	r3, #42	@ 0x2a
 800f842:	d015      	beq.n	800f870 <_vfiprintf_r+0x120>
 800f844:	9a07      	ldr	r2, [sp, #28]
 800f846:	4654      	mov	r4, sl
 800f848:	2000      	movs	r0, #0
 800f84a:	f04f 0c0a 	mov.w	ip, #10
 800f84e:	4621      	mov	r1, r4
 800f850:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f854:	3b30      	subs	r3, #48	@ 0x30
 800f856:	2b09      	cmp	r3, #9
 800f858:	d94b      	bls.n	800f8f2 <_vfiprintf_r+0x1a2>
 800f85a:	b1b0      	cbz	r0, 800f88a <_vfiprintf_r+0x13a>
 800f85c:	9207      	str	r2, [sp, #28]
 800f85e:	e014      	b.n	800f88a <_vfiprintf_r+0x13a>
 800f860:	eba0 0308 	sub.w	r3, r0, r8
 800f864:	fa09 f303 	lsl.w	r3, r9, r3
 800f868:	4313      	orrs	r3, r2
 800f86a:	9304      	str	r3, [sp, #16]
 800f86c:	46a2      	mov	sl, r4
 800f86e:	e7d2      	b.n	800f816 <_vfiprintf_r+0xc6>
 800f870:	9b03      	ldr	r3, [sp, #12]
 800f872:	1d19      	adds	r1, r3, #4
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	9103      	str	r1, [sp, #12]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	bfbb      	ittet	lt
 800f87c:	425b      	neglt	r3, r3
 800f87e:	f042 0202 	orrlt.w	r2, r2, #2
 800f882:	9307      	strge	r3, [sp, #28]
 800f884:	9307      	strlt	r3, [sp, #28]
 800f886:	bfb8      	it	lt
 800f888:	9204      	strlt	r2, [sp, #16]
 800f88a:	7823      	ldrb	r3, [r4, #0]
 800f88c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f88e:	d10a      	bne.n	800f8a6 <_vfiprintf_r+0x156>
 800f890:	7863      	ldrb	r3, [r4, #1]
 800f892:	2b2a      	cmp	r3, #42	@ 0x2a
 800f894:	d132      	bne.n	800f8fc <_vfiprintf_r+0x1ac>
 800f896:	9b03      	ldr	r3, [sp, #12]
 800f898:	1d1a      	adds	r2, r3, #4
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	9203      	str	r2, [sp, #12]
 800f89e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f8a2:	3402      	adds	r4, #2
 800f8a4:	9305      	str	r3, [sp, #20]
 800f8a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f97c <_vfiprintf_r+0x22c>
 800f8aa:	7821      	ldrb	r1, [r4, #0]
 800f8ac:	2203      	movs	r2, #3
 800f8ae:	4650      	mov	r0, sl
 800f8b0:	f7f0 fcae 	bl	8000210 <memchr>
 800f8b4:	b138      	cbz	r0, 800f8c6 <_vfiprintf_r+0x176>
 800f8b6:	9b04      	ldr	r3, [sp, #16]
 800f8b8:	eba0 000a 	sub.w	r0, r0, sl
 800f8bc:	2240      	movs	r2, #64	@ 0x40
 800f8be:	4082      	lsls	r2, r0
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	3401      	adds	r4, #1
 800f8c4:	9304      	str	r3, [sp, #16]
 800f8c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8ca:	4829      	ldr	r0, [pc, #164]	@ (800f970 <_vfiprintf_r+0x220>)
 800f8cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f8d0:	2206      	movs	r2, #6
 800f8d2:	f7f0 fc9d 	bl	8000210 <memchr>
 800f8d6:	2800      	cmp	r0, #0
 800f8d8:	d03f      	beq.n	800f95a <_vfiprintf_r+0x20a>
 800f8da:	4b26      	ldr	r3, [pc, #152]	@ (800f974 <_vfiprintf_r+0x224>)
 800f8dc:	bb1b      	cbnz	r3, 800f926 <_vfiprintf_r+0x1d6>
 800f8de:	9b03      	ldr	r3, [sp, #12]
 800f8e0:	3307      	adds	r3, #7
 800f8e2:	f023 0307 	bic.w	r3, r3, #7
 800f8e6:	3308      	adds	r3, #8
 800f8e8:	9303      	str	r3, [sp, #12]
 800f8ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8ec:	443b      	add	r3, r7
 800f8ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8f0:	e76a      	b.n	800f7c8 <_vfiprintf_r+0x78>
 800f8f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8f6:	460c      	mov	r4, r1
 800f8f8:	2001      	movs	r0, #1
 800f8fa:	e7a8      	b.n	800f84e <_vfiprintf_r+0xfe>
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	3401      	adds	r4, #1
 800f900:	9305      	str	r3, [sp, #20]
 800f902:	4619      	mov	r1, r3
 800f904:	f04f 0c0a 	mov.w	ip, #10
 800f908:	4620      	mov	r0, r4
 800f90a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f90e:	3a30      	subs	r2, #48	@ 0x30
 800f910:	2a09      	cmp	r2, #9
 800f912:	d903      	bls.n	800f91c <_vfiprintf_r+0x1cc>
 800f914:	2b00      	cmp	r3, #0
 800f916:	d0c6      	beq.n	800f8a6 <_vfiprintf_r+0x156>
 800f918:	9105      	str	r1, [sp, #20]
 800f91a:	e7c4      	b.n	800f8a6 <_vfiprintf_r+0x156>
 800f91c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f920:	4604      	mov	r4, r0
 800f922:	2301      	movs	r3, #1
 800f924:	e7f0      	b.n	800f908 <_vfiprintf_r+0x1b8>
 800f926:	ab03      	add	r3, sp, #12
 800f928:	9300      	str	r3, [sp, #0]
 800f92a:	462a      	mov	r2, r5
 800f92c:	4b12      	ldr	r3, [pc, #72]	@ (800f978 <_vfiprintf_r+0x228>)
 800f92e:	a904      	add	r1, sp, #16
 800f930:	4630      	mov	r0, r6
 800f932:	f7fd fe53 	bl	800d5dc <_printf_float>
 800f936:	4607      	mov	r7, r0
 800f938:	1c78      	adds	r0, r7, #1
 800f93a:	d1d6      	bne.n	800f8ea <_vfiprintf_r+0x19a>
 800f93c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f93e:	07d9      	lsls	r1, r3, #31
 800f940:	d405      	bmi.n	800f94e <_vfiprintf_r+0x1fe>
 800f942:	89ab      	ldrh	r3, [r5, #12]
 800f944:	059a      	lsls	r2, r3, #22
 800f946:	d402      	bmi.n	800f94e <_vfiprintf_r+0x1fe>
 800f948:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f94a:	f7fe fba3 	bl	800e094 <__retarget_lock_release_recursive>
 800f94e:	89ab      	ldrh	r3, [r5, #12]
 800f950:	065b      	lsls	r3, r3, #25
 800f952:	f53f af1f 	bmi.w	800f794 <_vfiprintf_r+0x44>
 800f956:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f958:	e71e      	b.n	800f798 <_vfiprintf_r+0x48>
 800f95a:	ab03      	add	r3, sp, #12
 800f95c:	9300      	str	r3, [sp, #0]
 800f95e:	462a      	mov	r2, r5
 800f960:	4b05      	ldr	r3, [pc, #20]	@ (800f978 <_vfiprintf_r+0x228>)
 800f962:	a904      	add	r1, sp, #16
 800f964:	4630      	mov	r0, r6
 800f966:	f7fe f8d1 	bl	800db0c <_printf_i>
 800f96a:	e7e4      	b.n	800f936 <_vfiprintf_r+0x1e6>
 800f96c:	0801273f 	.word	0x0801273f
 800f970:	08012749 	.word	0x08012749
 800f974:	0800d5dd 	.word	0x0800d5dd
 800f978:	0800f72d 	.word	0x0800f72d
 800f97c:	08012745 	.word	0x08012745

0800f980 <__swbuf_r>:
 800f980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f982:	460e      	mov	r6, r1
 800f984:	4614      	mov	r4, r2
 800f986:	4605      	mov	r5, r0
 800f988:	b118      	cbz	r0, 800f992 <__swbuf_r+0x12>
 800f98a:	6a03      	ldr	r3, [r0, #32]
 800f98c:	b90b      	cbnz	r3, 800f992 <__swbuf_r+0x12>
 800f98e:	f7fe fa69 	bl	800de64 <__sinit>
 800f992:	69a3      	ldr	r3, [r4, #24]
 800f994:	60a3      	str	r3, [r4, #8]
 800f996:	89a3      	ldrh	r3, [r4, #12]
 800f998:	071a      	lsls	r2, r3, #28
 800f99a:	d501      	bpl.n	800f9a0 <__swbuf_r+0x20>
 800f99c:	6923      	ldr	r3, [r4, #16]
 800f99e:	b943      	cbnz	r3, 800f9b2 <__swbuf_r+0x32>
 800f9a0:	4621      	mov	r1, r4
 800f9a2:	4628      	mov	r0, r5
 800f9a4:	f000 f82a 	bl	800f9fc <__swsetup_r>
 800f9a8:	b118      	cbz	r0, 800f9b2 <__swbuf_r+0x32>
 800f9aa:	f04f 37ff 	mov.w	r7, #4294967295
 800f9ae:	4638      	mov	r0, r7
 800f9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9b2:	6823      	ldr	r3, [r4, #0]
 800f9b4:	6922      	ldr	r2, [r4, #16]
 800f9b6:	1a98      	subs	r0, r3, r2
 800f9b8:	6963      	ldr	r3, [r4, #20]
 800f9ba:	b2f6      	uxtb	r6, r6
 800f9bc:	4283      	cmp	r3, r0
 800f9be:	4637      	mov	r7, r6
 800f9c0:	dc05      	bgt.n	800f9ce <__swbuf_r+0x4e>
 800f9c2:	4621      	mov	r1, r4
 800f9c4:	4628      	mov	r0, r5
 800f9c6:	f7ff fe1b 	bl	800f600 <_fflush_r>
 800f9ca:	2800      	cmp	r0, #0
 800f9cc:	d1ed      	bne.n	800f9aa <__swbuf_r+0x2a>
 800f9ce:	68a3      	ldr	r3, [r4, #8]
 800f9d0:	3b01      	subs	r3, #1
 800f9d2:	60a3      	str	r3, [r4, #8]
 800f9d4:	6823      	ldr	r3, [r4, #0]
 800f9d6:	1c5a      	adds	r2, r3, #1
 800f9d8:	6022      	str	r2, [r4, #0]
 800f9da:	701e      	strb	r6, [r3, #0]
 800f9dc:	6962      	ldr	r2, [r4, #20]
 800f9de:	1c43      	adds	r3, r0, #1
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	d004      	beq.n	800f9ee <__swbuf_r+0x6e>
 800f9e4:	89a3      	ldrh	r3, [r4, #12]
 800f9e6:	07db      	lsls	r3, r3, #31
 800f9e8:	d5e1      	bpl.n	800f9ae <__swbuf_r+0x2e>
 800f9ea:	2e0a      	cmp	r6, #10
 800f9ec:	d1df      	bne.n	800f9ae <__swbuf_r+0x2e>
 800f9ee:	4621      	mov	r1, r4
 800f9f0:	4628      	mov	r0, r5
 800f9f2:	f7ff fe05 	bl	800f600 <_fflush_r>
 800f9f6:	2800      	cmp	r0, #0
 800f9f8:	d0d9      	beq.n	800f9ae <__swbuf_r+0x2e>
 800f9fa:	e7d6      	b.n	800f9aa <__swbuf_r+0x2a>

0800f9fc <__swsetup_r>:
 800f9fc:	b538      	push	{r3, r4, r5, lr}
 800f9fe:	4b29      	ldr	r3, [pc, #164]	@ (800faa4 <__swsetup_r+0xa8>)
 800fa00:	4605      	mov	r5, r0
 800fa02:	6818      	ldr	r0, [r3, #0]
 800fa04:	460c      	mov	r4, r1
 800fa06:	b118      	cbz	r0, 800fa10 <__swsetup_r+0x14>
 800fa08:	6a03      	ldr	r3, [r0, #32]
 800fa0a:	b90b      	cbnz	r3, 800fa10 <__swsetup_r+0x14>
 800fa0c:	f7fe fa2a 	bl	800de64 <__sinit>
 800fa10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa14:	0719      	lsls	r1, r3, #28
 800fa16:	d422      	bmi.n	800fa5e <__swsetup_r+0x62>
 800fa18:	06da      	lsls	r2, r3, #27
 800fa1a:	d407      	bmi.n	800fa2c <__swsetup_r+0x30>
 800fa1c:	2209      	movs	r2, #9
 800fa1e:	602a      	str	r2, [r5, #0]
 800fa20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa24:	81a3      	strh	r3, [r4, #12]
 800fa26:	f04f 30ff 	mov.w	r0, #4294967295
 800fa2a:	e033      	b.n	800fa94 <__swsetup_r+0x98>
 800fa2c:	0758      	lsls	r0, r3, #29
 800fa2e:	d512      	bpl.n	800fa56 <__swsetup_r+0x5a>
 800fa30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa32:	b141      	cbz	r1, 800fa46 <__swsetup_r+0x4a>
 800fa34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa38:	4299      	cmp	r1, r3
 800fa3a:	d002      	beq.n	800fa42 <__swsetup_r+0x46>
 800fa3c:	4628      	mov	r0, r5
 800fa3e:	f7ff f987 	bl	800ed50 <_free_r>
 800fa42:	2300      	movs	r3, #0
 800fa44:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa46:	89a3      	ldrh	r3, [r4, #12]
 800fa48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fa4c:	81a3      	strh	r3, [r4, #12]
 800fa4e:	2300      	movs	r3, #0
 800fa50:	6063      	str	r3, [r4, #4]
 800fa52:	6923      	ldr	r3, [r4, #16]
 800fa54:	6023      	str	r3, [r4, #0]
 800fa56:	89a3      	ldrh	r3, [r4, #12]
 800fa58:	f043 0308 	orr.w	r3, r3, #8
 800fa5c:	81a3      	strh	r3, [r4, #12]
 800fa5e:	6923      	ldr	r3, [r4, #16]
 800fa60:	b94b      	cbnz	r3, 800fa76 <__swsetup_r+0x7a>
 800fa62:	89a3      	ldrh	r3, [r4, #12]
 800fa64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fa68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa6c:	d003      	beq.n	800fa76 <__swsetup_r+0x7a>
 800fa6e:	4621      	mov	r1, r4
 800fa70:	4628      	mov	r0, r5
 800fa72:	f000 f883 	bl	800fb7c <__smakebuf_r>
 800fa76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa7a:	f013 0201 	ands.w	r2, r3, #1
 800fa7e:	d00a      	beq.n	800fa96 <__swsetup_r+0x9a>
 800fa80:	2200      	movs	r2, #0
 800fa82:	60a2      	str	r2, [r4, #8]
 800fa84:	6962      	ldr	r2, [r4, #20]
 800fa86:	4252      	negs	r2, r2
 800fa88:	61a2      	str	r2, [r4, #24]
 800fa8a:	6922      	ldr	r2, [r4, #16]
 800fa8c:	b942      	cbnz	r2, 800faa0 <__swsetup_r+0xa4>
 800fa8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fa92:	d1c5      	bne.n	800fa20 <__swsetup_r+0x24>
 800fa94:	bd38      	pop	{r3, r4, r5, pc}
 800fa96:	0799      	lsls	r1, r3, #30
 800fa98:	bf58      	it	pl
 800fa9a:	6962      	ldrpl	r2, [r4, #20]
 800fa9c:	60a2      	str	r2, [r4, #8]
 800fa9e:	e7f4      	b.n	800fa8a <__swsetup_r+0x8e>
 800faa0:	2000      	movs	r0, #0
 800faa2:	e7f7      	b.n	800fa94 <__swsetup_r+0x98>
 800faa4:	20000058 	.word	0x20000058

0800faa8 <_raise_r>:
 800faa8:	291f      	cmp	r1, #31
 800faaa:	b538      	push	{r3, r4, r5, lr}
 800faac:	4605      	mov	r5, r0
 800faae:	460c      	mov	r4, r1
 800fab0:	d904      	bls.n	800fabc <_raise_r+0x14>
 800fab2:	2316      	movs	r3, #22
 800fab4:	6003      	str	r3, [r0, #0]
 800fab6:	f04f 30ff 	mov.w	r0, #4294967295
 800faba:	bd38      	pop	{r3, r4, r5, pc}
 800fabc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fabe:	b112      	cbz	r2, 800fac6 <_raise_r+0x1e>
 800fac0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fac4:	b94b      	cbnz	r3, 800fada <_raise_r+0x32>
 800fac6:	4628      	mov	r0, r5
 800fac8:	f000 f830 	bl	800fb2c <_getpid_r>
 800facc:	4622      	mov	r2, r4
 800face:	4601      	mov	r1, r0
 800fad0:	4628      	mov	r0, r5
 800fad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fad6:	f000 b817 	b.w	800fb08 <_kill_r>
 800fada:	2b01      	cmp	r3, #1
 800fadc:	d00a      	beq.n	800faf4 <_raise_r+0x4c>
 800fade:	1c59      	adds	r1, r3, #1
 800fae0:	d103      	bne.n	800faea <_raise_r+0x42>
 800fae2:	2316      	movs	r3, #22
 800fae4:	6003      	str	r3, [r0, #0]
 800fae6:	2001      	movs	r0, #1
 800fae8:	e7e7      	b.n	800faba <_raise_r+0x12>
 800faea:	2100      	movs	r1, #0
 800faec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800faf0:	4620      	mov	r0, r4
 800faf2:	4798      	blx	r3
 800faf4:	2000      	movs	r0, #0
 800faf6:	e7e0      	b.n	800faba <_raise_r+0x12>

0800faf8 <raise>:
 800faf8:	4b02      	ldr	r3, [pc, #8]	@ (800fb04 <raise+0xc>)
 800fafa:	4601      	mov	r1, r0
 800fafc:	6818      	ldr	r0, [r3, #0]
 800fafe:	f7ff bfd3 	b.w	800faa8 <_raise_r>
 800fb02:	bf00      	nop
 800fb04:	20000058 	.word	0x20000058

0800fb08 <_kill_r>:
 800fb08:	b538      	push	{r3, r4, r5, lr}
 800fb0a:	4d07      	ldr	r5, [pc, #28]	@ (800fb28 <_kill_r+0x20>)
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	4604      	mov	r4, r0
 800fb10:	4608      	mov	r0, r1
 800fb12:	4611      	mov	r1, r2
 800fb14:	602b      	str	r3, [r5, #0]
 800fb16:	f7f7 fe51 	bl	80077bc <_kill>
 800fb1a:	1c43      	adds	r3, r0, #1
 800fb1c:	d102      	bne.n	800fb24 <_kill_r+0x1c>
 800fb1e:	682b      	ldr	r3, [r5, #0]
 800fb20:	b103      	cbz	r3, 800fb24 <_kill_r+0x1c>
 800fb22:	6023      	str	r3, [r4, #0]
 800fb24:	bd38      	pop	{r3, r4, r5, pc}
 800fb26:	bf00      	nop
 800fb28:	200009b8 	.word	0x200009b8

0800fb2c <_getpid_r>:
 800fb2c:	f7f7 be3e 	b.w	80077ac <_getpid>

0800fb30 <__swhatbuf_r>:
 800fb30:	b570      	push	{r4, r5, r6, lr}
 800fb32:	460c      	mov	r4, r1
 800fb34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb38:	2900      	cmp	r1, #0
 800fb3a:	b096      	sub	sp, #88	@ 0x58
 800fb3c:	4615      	mov	r5, r2
 800fb3e:	461e      	mov	r6, r3
 800fb40:	da0d      	bge.n	800fb5e <__swhatbuf_r+0x2e>
 800fb42:	89a3      	ldrh	r3, [r4, #12]
 800fb44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fb48:	f04f 0100 	mov.w	r1, #0
 800fb4c:	bf14      	ite	ne
 800fb4e:	2340      	movne	r3, #64	@ 0x40
 800fb50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fb54:	2000      	movs	r0, #0
 800fb56:	6031      	str	r1, [r6, #0]
 800fb58:	602b      	str	r3, [r5, #0]
 800fb5a:	b016      	add	sp, #88	@ 0x58
 800fb5c:	bd70      	pop	{r4, r5, r6, pc}
 800fb5e:	466a      	mov	r2, sp
 800fb60:	f000 f848 	bl	800fbf4 <_fstat_r>
 800fb64:	2800      	cmp	r0, #0
 800fb66:	dbec      	blt.n	800fb42 <__swhatbuf_r+0x12>
 800fb68:	9901      	ldr	r1, [sp, #4]
 800fb6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fb6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fb72:	4259      	negs	r1, r3
 800fb74:	4159      	adcs	r1, r3
 800fb76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb7a:	e7eb      	b.n	800fb54 <__swhatbuf_r+0x24>

0800fb7c <__smakebuf_r>:
 800fb7c:	898b      	ldrh	r3, [r1, #12]
 800fb7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb80:	079d      	lsls	r5, r3, #30
 800fb82:	4606      	mov	r6, r0
 800fb84:	460c      	mov	r4, r1
 800fb86:	d507      	bpl.n	800fb98 <__smakebuf_r+0x1c>
 800fb88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fb8c:	6023      	str	r3, [r4, #0]
 800fb8e:	6123      	str	r3, [r4, #16]
 800fb90:	2301      	movs	r3, #1
 800fb92:	6163      	str	r3, [r4, #20]
 800fb94:	b003      	add	sp, #12
 800fb96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb98:	ab01      	add	r3, sp, #4
 800fb9a:	466a      	mov	r2, sp
 800fb9c:	f7ff ffc8 	bl	800fb30 <__swhatbuf_r>
 800fba0:	9f00      	ldr	r7, [sp, #0]
 800fba2:	4605      	mov	r5, r0
 800fba4:	4639      	mov	r1, r7
 800fba6:	4630      	mov	r0, r6
 800fba8:	f7fd fbec 	bl	800d384 <_malloc_r>
 800fbac:	b948      	cbnz	r0, 800fbc2 <__smakebuf_r+0x46>
 800fbae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbb2:	059a      	lsls	r2, r3, #22
 800fbb4:	d4ee      	bmi.n	800fb94 <__smakebuf_r+0x18>
 800fbb6:	f023 0303 	bic.w	r3, r3, #3
 800fbba:	f043 0302 	orr.w	r3, r3, #2
 800fbbe:	81a3      	strh	r3, [r4, #12]
 800fbc0:	e7e2      	b.n	800fb88 <__smakebuf_r+0xc>
 800fbc2:	89a3      	ldrh	r3, [r4, #12]
 800fbc4:	6020      	str	r0, [r4, #0]
 800fbc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fbca:	81a3      	strh	r3, [r4, #12]
 800fbcc:	9b01      	ldr	r3, [sp, #4]
 800fbce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fbd2:	b15b      	cbz	r3, 800fbec <__smakebuf_r+0x70>
 800fbd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbd8:	4630      	mov	r0, r6
 800fbda:	f000 f81d 	bl	800fc18 <_isatty_r>
 800fbde:	b128      	cbz	r0, 800fbec <__smakebuf_r+0x70>
 800fbe0:	89a3      	ldrh	r3, [r4, #12]
 800fbe2:	f023 0303 	bic.w	r3, r3, #3
 800fbe6:	f043 0301 	orr.w	r3, r3, #1
 800fbea:	81a3      	strh	r3, [r4, #12]
 800fbec:	89a3      	ldrh	r3, [r4, #12]
 800fbee:	431d      	orrs	r5, r3
 800fbf0:	81a5      	strh	r5, [r4, #12]
 800fbf2:	e7cf      	b.n	800fb94 <__smakebuf_r+0x18>

0800fbf4 <_fstat_r>:
 800fbf4:	b538      	push	{r3, r4, r5, lr}
 800fbf6:	4d07      	ldr	r5, [pc, #28]	@ (800fc14 <_fstat_r+0x20>)
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	4604      	mov	r4, r0
 800fbfc:	4608      	mov	r0, r1
 800fbfe:	4611      	mov	r1, r2
 800fc00:	602b      	str	r3, [r5, #0]
 800fc02:	f7f7 fe3b 	bl	800787c <_fstat>
 800fc06:	1c43      	adds	r3, r0, #1
 800fc08:	d102      	bne.n	800fc10 <_fstat_r+0x1c>
 800fc0a:	682b      	ldr	r3, [r5, #0]
 800fc0c:	b103      	cbz	r3, 800fc10 <_fstat_r+0x1c>
 800fc0e:	6023      	str	r3, [r4, #0]
 800fc10:	bd38      	pop	{r3, r4, r5, pc}
 800fc12:	bf00      	nop
 800fc14:	200009b8 	.word	0x200009b8

0800fc18 <_isatty_r>:
 800fc18:	b538      	push	{r3, r4, r5, lr}
 800fc1a:	4d06      	ldr	r5, [pc, #24]	@ (800fc34 <_isatty_r+0x1c>)
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	4604      	mov	r4, r0
 800fc20:	4608      	mov	r0, r1
 800fc22:	602b      	str	r3, [r5, #0]
 800fc24:	f7f7 fe3a 	bl	800789c <_isatty>
 800fc28:	1c43      	adds	r3, r0, #1
 800fc2a:	d102      	bne.n	800fc32 <_isatty_r+0x1a>
 800fc2c:	682b      	ldr	r3, [r5, #0]
 800fc2e:	b103      	cbz	r3, 800fc32 <_isatty_r+0x1a>
 800fc30:	6023      	str	r3, [r4, #0]
 800fc32:	bd38      	pop	{r3, r4, r5, pc}
 800fc34:	200009b8 	.word	0x200009b8

0800fc38 <pow>:
 800fc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc3a:	ed2d 8b02 	vpush	{d8}
 800fc3e:	eeb0 8a40 	vmov.f32	s16, s0
 800fc42:	eef0 8a60 	vmov.f32	s17, s1
 800fc46:	ec55 4b11 	vmov	r4, r5, d1
 800fc4a:	f000 fc75 	bl	8010538 <__ieee754_pow>
 800fc4e:	4622      	mov	r2, r4
 800fc50:	462b      	mov	r3, r5
 800fc52:	4620      	mov	r0, r4
 800fc54:	4629      	mov	r1, r5
 800fc56:	ec57 6b10 	vmov	r6, r7, d0
 800fc5a:	f7f0 ff87 	bl	8000b6c <__aeabi_dcmpun>
 800fc5e:	2800      	cmp	r0, #0
 800fc60:	d13b      	bne.n	800fcda <pow+0xa2>
 800fc62:	ec51 0b18 	vmov	r0, r1, d8
 800fc66:	2200      	movs	r2, #0
 800fc68:	2300      	movs	r3, #0
 800fc6a:	f7f0 ff4d 	bl	8000b08 <__aeabi_dcmpeq>
 800fc6e:	b1b8      	cbz	r0, 800fca0 <pow+0x68>
 800fc70:	2200      	movs	r2, #0
 800fc72:	2300      	movs	r3, #0
 800fc74:	4620      	mov	r0, r4
 800fc76:	4629      	mov	r1, r5
 800fc78:	f7f0 ff46 	bl	8000b08 <__aeabi_dcmpeq>
 800fc7c:	2800      	cmp	r0, #0
 800fc7e:	d146      	bne.n	800fd0e <pow+0xd6>
 800fc80:	ec45 4b10 	vmov	d0, r4, r5
 800fc84:	f000 f947 	bl	800ff16 <finite>
 800fc88:	b338      	cbz	r0, 800fcda <pow+0xa2>
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	4620      	mov	r0, r4
 800fc90:	4629      	mov	r1, r5
 800fc92:	f7f0 ff43 	bl	8000b1c <__aeabi_dcmplt>
 800fc96:	b300      	cbz	r0, 800fcda <pow+0xa2>
 800fc98:	f7fe f9d0 	bl	800e03c <__errno>
 800fc9c:	2322      	movs	r3, #34	@ 0x22
 800fc9e:	e01b      	b.n	800fcd8 <pow+0xa0>
 800fca0:	ec47 6b10 	vmov	d0, r6, r7
 800fca4:	f000 f937 	bl	800ff16 <finite>
 800fca8:	b9e0      	cbnz	r0, 800fce4 <pow+0xac>
 800fcaa:	eeb0 0a48 	vmov.f32	s0, s16
 800fcae:	eef0 0a68 	vmov.f32	s1, s17
 800fcb2:	f000 f930 	bl	800ff16 <finite>
 800fcb6:	b1a8      	cbz	r0, 800fce4 <pow+0xac>
 800fcb8:	ec45 4b10 	vmov	d0, r4, r5
 800fcbc:	f000 f92b 	bl	800ff16 <finite>
 800fcc0:	b180      	cbz	r0, 800fce4 <pow+0xac>
 800fcc2:	4632      	mov	r2, r6
 800fcc4:	463b      	mov	r3, r7
 800fcc6:	4630      	mov	r0, r6
 800fcc8:	4639      	mov	r1, r7
 800fcca:	f7f0 ff4f 	bl	8000b6c <__aeabi_dcmpun>
 800fcce:	2800      	cmp	r0, #0
 800fcd0:	d0e2      	beq.n	800fc98 <pow+0x60>
 800fcd2:	f7fe f9b3 	bl	800e03c <__errno>
 800fcd6:	2321      	movs	r3, #33	@ 0x21
 800fcd8:	6003      	str	r3, [r0, #0]
 800fcda:	ecbd 8b02 	vpop	{d8}
 800fcde:	ec47 6b10 	vmov	d0, r6, r7
 800fce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fce4:	2200      	movs	r2, #0
 800fce6:	2300      	movs	r3, #0
 800fce8:	4630      	mov	r0, r6
 800fcea:	4639      	mov	r1, r7
 800fcec:	f7f0 ff0c 	bl	8000b08 <__aeabi_dcmpeq>
 800fcf0:	2800      	cmp	r0, #0
 800fcf2:	d0f2      	beq.n	800fcda <pow+0xa2>
 800fcf4:	eeb0 0a48 	vmov.f32	s0, s16
 800fcf8:	eef0 0a68 	vmov.f32	s1, s17
 800fcfc:	f000 f90b 	bl	800ff16 <finite>
 800fd00:	2800      	cmp	r0, #0
 800fd02:	d0ea      	beq.n	800fcda <pow+0xa2>
 800fd04:	ec45 4b10 	vmov	d0, r4, r5
 800fd08:	f000 f905 	bl	800ff16 <finite>
 800fd0c:	e7c3      	b.n	800fc96 <pow+0x5e>
 800fd0e:	4f01      	ldr	r7, [pc, #4]	@ (800fd14 <pow+0xdc>)
 800fd10:	2600      	movs	r6, #0
 800fd12:	e7e2      	b.n	800fcda <pow+0xa2>
 800fd14:	3ff00000 	.word	0x3ff00000

0800fd18 <sqrt>:
 800fd18:	b538      	push	{r3, r4, r5, lr}
 800fd1a:	ed2d 8b02 	vpush	{d8}
 800fd1e:	ec55 4b10 	vmov	r4, r5, d0
 800fd22:	f000 f95f 	bl	800ffe4 <__ieee754_sqrt>
 800fd26:	4622      	mov	r2, r4
 800fd28:	462b      	mov	r3, r5
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	4629      	mov	r1, r5
 800fd2e:	eeb0 8a40 	vmov.f32	s16, s0
 800fd32:	eef0 8a60 	vmov.f32	s17, s1
 800fd36:	f7f0 ff19 	bl	8000b6c <__aeabi_dcmpun>
 800fd3a:	b990      	cbnz	r0, 800fd62 <sqrt+0x4a>
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	2300      	movs	r3, #0
 800fd40:	4620      	mov	r0, r4
 800fd42:	4629      	mov	r1, r5
 800fd44:	f7f0 feea 	bl	8000b1c <__aeabi_dcmplt>
 800fd48:	b158      	cbz	r0, 800fd62 <sqrt+0x4a>
 800fd4a:	f7fe f977 	bl	800e03c <__errno>
 800fd4e:	2321      	movs	r3, #33	@ 0x21
 800fd50:	6003      	str	r3, [r0, #0]
 800fd52:	2200      	movs	r2, #0
 800fd54:	2300      	movs	r3, #0
 800fd56:	4610      	mov	r0, r2
 800fd58:	4619      	mov	r1, r3
 800fd5a:	f7f0 fd97 	bl	800088c <__aeabi_ddiv>
 800fd5e:	ec41 0b18 	vmov	d8, r0, r1
 800fd62:	eeb0 0a48 	vmov.f32	s0, s16
 800fd66:	eef0 0a68 	vmov.f32	s1, s17
 800fd6a:	ecbd 8b02 	vpop	{d8}
 800fd6e:	bd38      	pop	{r3, r4, r5, pc}

0800fd70 <cos>:
 800fd70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd72:	ec53 2b10 	vmov	r2, r3, d0
 800fd76:	4826      	ldr	r0, [pc, #152]	@ (800fe10 <cos+0xa0>)
 800fd78:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fd7c:	4281      	cmp	r1, r0
 800fd7e:	d806      	bhi.n	800fd8e <cos+0x1e>
 800fd80:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800fe08 <cos+0x98>
 800fd84:	b005      	add	sp, #20
 800fd86:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd8a:	f000 ba51 	b.w	8010230 <__kernel_cos>
 800fd8e:	4821      	ldr	r0, [pc, #132]	@ (800fe14 <cos+0xa4>)
 800fd90:	4281      	cmp	r1, r0
 800fd92:	d908      	bls.n	800fda6 <cos+0x36>
 800fd94:	4610      	mov	r0, r2
 800fd96:	4619      	mov	r1, r3
 800fd98:	f7f0 fa96 	bl	80002c8 <__aeabi_dsub>
 800fd9c:	ec41 0b10 	vmov	d0, r0, r1
 800fda0:	b005      	add	sp, #20
 800fda2:	f85d fb04 	ldr.w	pc, [sp], #4
 800fda6:	4668      	mov	r0, sp
 800fda8:	f001 f90a 	bl	8010fc0 <__ieee754_rem_pio2>
 800fdac:	f000 0003 	and.w	r0, r0, #3
 800fdb0:	2801      	cmp	r0, #1
 800fdb2:	d00b      	beq.n	800fdcc <cos+0x5c>
 800fdb4:	2802      	cmp	r0, #2
 800fdb6:	d015      	beq.n	800fde4 <cos+0x74>
 800fdb8:	b9d8      	cbnz	r0, 800fdf2 <cos+0x82>
 800fdba:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fdbe:	ed9d 0b00 	vldr	d0, [sp]
 800fdc2:	f000 fa35 	bl	8010230 <__kernel_cos>
 800fdc6:	ec51 0b10 	vmov	r0, r1, d0
 800fdca:	e7e7      	b.n	800fd9c <cos+0x2c>
 800fdcc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fdd0:	ed9d 0b00 	vldr	d0, [sp]
 800fdd4:	f000 faf4 	bl	80103c0 <__kernel_sin>
 800fdd8:	ec53 2b10 	vmov	r2, r3, d0
 800fddc:	4610      	mov	r0, r2
 800fdde:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800fde2:	e7db      	b.n	800fd9c <cos+0x2c>
 800fde4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fde8:	ed9d 0b00 	vldr	d0, [sp]
 800fdec:	f000 fa20 	bl	8010230 <__kernel_cos>
 800fdf0:	e7f2      	b.n	800fdd8 <cos+0x68>
 800fdf2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fdf6:	ed9d 0b00 	vldr	d0, [sp]
 800fdfa:	2001      	movs	r0, #1
 800fdfc:	f000 fae0 	bl	80103c0 <__kernel_sin>
 800fe00:	e7e1      	b.n	800fdc6 <cos+0x56>
 800fe02:	bf00      	nop
 800fe04:	f3af 8000 	nop.w
	...
 800fe10:	3fe921fb 	.word	0x3fe921fb
 800fe14:	7fefffff 	.word	0x7fefffff

0800fe18 <acosf>:
 800fe18:	b508      	push	{r3, lr}
 800fe1a:	ed2d 8b02 	vpush	{d8}
 800fe1e:	eeb0 8a40 	vmov.f32	s16, s0
 800fe22:	f001 fad1 	bl	80113c8 <__ieee754_acosf>
 800fe26:	eeb4 8a48 	vcmp.f32	s16, s16
 800fe2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe2e:	eef0 8a40 	vmov.f32	s17, s0
 800fe32:	d615      	bvs.n	800fe60 <acosf+0x48>
 800fe34:	eeb0 0a48 	vmov.f32	s0, s16
 800fe38:	f000 f866 	bl	800ff08 <fabsf>
 800fe3c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fe40:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800fe44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe48:	dd0a      	ble.n	800fe60 <acosf+0x48>
 800fe4a:	f7fe f8f7 	bl	800e03c <__errno>
 800fe4e:	ecbd 8b02 	vpop	{d8}
 800fe52:	2321      	movs	r3, #33	@ 0x21
 800fe54:	6003      	str	r3, [r0, #0]
 800fe56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fe5a:	4804      	ldr	r0, [pc, #16]	@ (800fe6c <acosf+0x54>)
 800fe5c:	f000 b866 	b.w	800ff2c <nanf>
 800fe60:	eeb0 0a68 	vmov.f32	s0, s17
 800fe64:	ecbd 8b02 	vpop	{d8}
 800fe68:	bd08      	pop	{r3, pc}
 800fe6a:	bf00      	nop
 800fe6c:	0801263d 	.word	0x0801263d

0800fe70 <asinf>:
 800fe70:	b508      	push	{r3, lr}
 800fe72:	ed2d 8b02 	vpush	{d8}
 800fe76:	eeb0 8a40 	vmov.f32	s16, s0
 800fe7a:	f001 fb9d 	bl	80115b8 <__ieee754_asinf>
 800fe7e:	eeb4 8a48 	vcmp.f32	s16, s16
 800fe82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe86:	eef0 8a40 	vmov.f32	s17, s0
 800fe8a:	d615      	bvs.n	800feb8 <asinf+0x48>
 800fe8c:	eeb0 0a48 	vmov.f32	s0, s16
 800fe90:	f000 f83a 	bl	800ff08 <fabsf>
 800fe94:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fe98:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800fe9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fea0:	dd0a      	ble.n	800feb8 <asinf+0x48>
 800fea2:	f7fe f8cb 	bl	800e03c <__errno>
 800fea6:	ecbd 8b02 	vpop	{d8}
 800feaa:	2321      	movs	r3, #33	@ 0x21
 800feac:	6003      	str	r3, [r0, #0]
 800feae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800feb2:	4804      	ldr	r0, [pc, #16]	@ (800fec4 <asinf+0x54>)
 800feb4:	f000 b83a 	b.w	800ff2c <nanf>
 800feb8:	eeb0 0a68 	vmov.f32	s0, s17
 800febc:	ecbd 8b02 	vpop	{d8}
 800fec0:	bd08      	pop	{r3, pc}
 800fec2:	bf00      	nop
 800fec4:	0801263d 	.word	0x0801263d

0800fec8 <atan2f>:
 800fec8:	f001 bc5c 	b.w	8011784 <__ieee754_atan2f>

0800fecc <sqrtf>:
 800fecc:	b508      	push	{r3, lr}
 800fece:	ed2d 8b02 	vpush	{d8}
 800fed2:	eeb0 8a40 	vmov.f32	s16, s0
 800fed6:	f000 f95f 	bl	8010198 <__ieee754_sqrtf>
 800feda:	eeb4 8a48 	vcmp.f32	s16, s16
 800fede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fee2:	d60c      	bvs.n	800fefe <sqrtf+0x32>
 800fee4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ff04 <sqrtf+0x38>
 800fee8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800feec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fef0:	d505      	bpl.n	800fefe <sqrtf+0x32>
 800fef2:	f7fe f8a3 	bl	800e03c <__errno>
 800fef6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800fefa:	2321      	movs	r3, #33	@ 0x21
 800fefc:	6003      	str	r3, [r0, #0]
 800fefe:	ecbd 8b02 	vpop	{d8}
 800ff02:	bd08      	pop	{r3, pc}
 800ff04:	00000000 	.word	0x00000000

0800ff08 <fabsf>:
 800ff08:	ee10 3a10 	vmov	r3, s0
 800ff0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ff10:	ee00 3a10 	vmov	s0, r3
 800ff14:	4770      	bx	lr

0800ff16 <finite>:
 800ff16:	b082      	sub	sp, #8
 800ff18:	ed8d 0b00 	vstr	d0, [sp]
 800ff1c:	9801      	ldr	r0, [sp, #4]
 800ff1e:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800ff22:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ff26:	0fc0      	lsrs	r0, r0, #31
 800ff28:	b002      	add	sp, #8
 800ff2a:	4770      	bx	lr

0800ff2c <nanf>:
 800ff2c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ff34 <nanf+0x8>
 800ff30:	4770      	bx	lr
 800ff32:	bf00      	nop
 800ff34:	7fc00000 	.word	0x7fc00000

0800ff38 <fmaxf>:
 800ff38:	b508      	push	{r3, lr}
 800ff3a:	ed2d 8b02 	vpush	{d8}
 800ff3e:	eeb0 8a40 	vmov.f32	s16, s0
 800ff42:	eef0 8a60 	vmov.f32	s17, s1
 800ff46:	f000 f831 	bl	800ffac <__fpclassifyf>
 800ff4a:	b930      	cbnz	r0, 800ff5a <fmaxf+0x22>
 800ff4c:	eeb0 8a68 	vmov.f32	s16, s17
 800ff50:	eeb0 0a48 	vmov.f32	s0, s16
 800ff54:	ecbd 8b02 	vpop	{d8}
 800ff58:	bd08      	pop	{r3, pc}
 800ff5a:	eeb0 0a68 	vmov.f32	s0, s17
 800ff5e:	f000 f825 	bl	800ffac <__fpclassifyf>
 800ff62:	2800      	cmp	r0, #0
 800ff64:	d0f4      	beq.n	800ff50 <fmaxf+0x18>
 800ff66:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ff6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff6e:	dded      	ble.n	800ff4c <fmaxf+0x14>
 800ff70:	e7ee      	b.n	800ff50 <fmaxf+0x18>

0800ff72 <fminf>:
 800ff72:	b508      	push	{r3, lr}
 800ff74:	ed2d 8b02 	vpush	{d8}
 800ff78:	eeb0 8a40 	vmov.f32	s16, s0
 800ff7c:	eef0 8a60 	vmov.f32	s17, s1
 800ff80:	f000 f814 	bl	800ffac <__fpclassifyf>
 800ff84:	b930      	cbnz	r0, 800ff94 <fminf+0x22>
 800ff86:	eeb0 8a68 	vmov.f32	s16, s17
 800ff8a:	eeb0 0a48 	vmov.f32	s0, s16
 800ff8e:	ecbd 8b02 	vpop	{d8}
 800ff92:	bd08      	pop	{r3, pc}
 800ff94:	eeb0 0a68 	vmov.f32	s0, s17
 800ff98:	f000 f808 	bl	800ffac <__fpclassifyf>
 800ff9c:	2800      	cmp	r0, #0
 800ff9e:	d0f4      	beq.n	800ff8a <fminf+0x18>
 800ffa0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ffa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffa8:	d5ed      	bpl.n	800ff86 <fminf+0x14>
 800ffaa:	e7ee      	b.n	800ff8a <fminf+0x18>

0800ffac <__fpclassifyf>:
 800ffac:	ee10 3a10 	vmov	r3, s0
 800ffb0:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800ffb4:	d00d      	beq.n	800ffd2 <__fpclassifyf+0x26>
 800ffb6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800ffba:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800ffbe:	d30a      	bcc.n	800ffd6 <__fpclassifyf+0x2a>
 800ffc0:	4b07      	ldr	r3, [pc, #28]	@ (800ffe0 <__fpclassifyf+0x34>)
 800ffc2:	1e42      	subs	r2, r0, #1
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	d908      	bls.n	800ffda <__fpclassifyf+0x2e>
 800ffc8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800ffcc:	4258      	negs	r0, r3
 800ffce:	4158      	adcs	r0, r3
 800ffd0:	4770      	bx	lr
 800ffd2:	2002      	movs	r0, #2
 800ffd4:	4770      	bx	lr
 800ffd6:	2004      	movs	r0, #4
 800ffd8:	4770      	bx	lr
 800ffda:	2003      	movs	r0, #3
 800ffdc:	4770      	bx	lr
 800ffde:	bf00      	nop
 800ffe0:	007ffffe 	.word	0x007ffffe

0800ffe4 <__ieee754_sqrt>:
 800ffe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe8:	4a68      	ldr	r2, [pc, #416]	@ (801018c <__ieee754_sqrt+0x1a8>)
 800ffea:	ec55 4b10 	vmov	r4, r5, d0
 800ffee:	43aa      	bics	r2, r5
 800fff0:	462b      	mov	r3, r5
 800fff2:	4621      	mov	r1, r4
 800fff4:	d110      	bne.n	8010018 <__ieee754_sqrt+0x34>
 800fff6:	4622      	mov	r2, r4
 800fff8:	4620      	mov	r0, r4
 800fffa:	4629      	mov	r1, r5
 800fffc:	f7f0 fb1c 	bl	8000638 <__aeabi_dmul>
 8010000:	4602      	mov	r2, r0
 8010002:	460b      	mov	r3, r1
 8010004:	4620      	mov	r0, r4
 8010006:	4629      	mov	r1, r5
 8010008:	f7f0 f960 	bl	80002cc <__adddf3>
 801000c:	4604      	mov	r4, r0
 801000e:	460d      	mov	r5, r1
 8010010:	ec45 4b10 	vmov	d0, r4, r5
 8010014:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010018:	2d00      	cmp	r5, #0
 801001a:	dc0e      	bgt.n	801003a <__ieee754_sqrt+0x56>
 801001c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010020:	4322      	orrs	r2, r4
 8010022:	d0f5      	beq.n	8010010 <__ieee754_sqrt+0x2c>
 8010024:	b19d      	cbz	r5, 801004e <__ieee754_sqrt+0x6a>
 8010026:	4622      	mov	r2, r4
 8010028:	4620      	mov	r0, r4
 801002a:	4629      	mov	r1, r5
 801002c:	f7f0 f94c 	bl	80002c8 <__aeabi_dsub>
 8010030:	4602      	mov	r2, r0
 8010032:	460b      	mov	r3, r1
 8010034:	f7f0 fc2a 	bl	800088c <__aeabi_ddiv>
 8010038:	e7e8      	b.n	801000c <__ieee754_sqrt+0x28>
 801003a:	152a      	asrs	r2, r5, #20
 801003c:	d115      	bne.n	801006a <__ieee754_sqrt+0x86>
 801003e:	2000      	movs	r0, #0
 8010040:	e009      	b.n	8010056 <__ieee754_sqrt+0x72>
 8010042:	0acb      	lsrs	r3, r1, #11
 8010044:	3a15      	subs	r2, #21
 8010046:	0549      	lsls	r1, r1, #21
 8010048:	2b00      	cmp	r3, #0
 801004a:	d0fa      	beq.n	8010042 <__ieee754_sqrt+0x5e>
 801004c:	e7f7      	b.n	801003e <__ieee754_sqrt+0x5a>
 801004e:	462a      	mov	r2, r5
 8010050:	e7fa      	b.n	8010048 <__ieee754_sqrt+0x64>
 8010052:	005b      	lsls	r3, r3, #1
 8010054:	3001      	adds	r0, #1
 8010056:	02dc      	lsls	r4, r3, #11
 8010058:	d5fb      	bpl.n	8010052 <__ieee754_sqrt+0x6e>
 801005a:	1e44      	subs	r4, r0, #1
 801005c:	1b12      	subs	r2, r2, r4
 801005e:	f1c0 0420 	rsb	r4, r0, #32
 8010062:	fa21 f404 	lsr.w	r4, r1, r4
 8010066:	4323      	orrs	r3, r4
 8010068:	4081      	lsls	r1, r0
 801006a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801006e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8010072:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010076:	07d2      	lsls	r2, r2, #31
 8010078:	bf5c      	itt	pl
 801007a:	005b      	lslpl	r3, r3, #1
 801007c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010080:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010084:	bf58      	it	pl
 8010086:	0049      	lslpl	r1, r1, #1
 8010088:	2600      	movs	r6, #0
 801008a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801008e:	106d      	asrs	r5, r5, #1
 8010090:	0049      	lsls	r1, r1, #1
 8010092:	2016      	movs	r0, #22
 8010094:	4632      	mov	r2, r6
 8010096:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801009a:	1917      	adds	r7, r2, r4
 801009c:	429f      	cmp	r7, r3
 801009e:	bfde      	ittt	le
 80100a0:	193a      	addle	r2, r7, r4
 80100a2:	1bdb      	suble	r3, r3, r7
 80100a4:	1936      	addle	r6, r6, r4
 80100a6:	0fcf      	lsrs	r7, r1, #31
 80100a8:	3801      	subs	r0, #1
 80100aa:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80100ae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80100b2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80100b6:	d1f0      	bne.n	801009a <__ieee754_sqrt+0xb6>
 80100b8:	4604      	mov	r4, r0
 80100ba:	2720      	movs	r7, #32
 80100bc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80100c0:	429a      	cmp	r2, r3
 80100c2:	eb00 0e0c 	add.w	lr, r0, ip
 80100c6:	db02      	blt.n	80100ce <__ieee754_sqrt+0xea>
 80100c8:	d113      	bne.n	80100f2 <__ieee754_sqrt+0x10e>
 80100ca:	458e      	cmp	lr, r1
 80100cc:	d811      	bhi.n	80100f2 <__ieee754_sqrt+0x10e>
 80100ce:	f1be 0f00 	cmp.w	lr, #0
 80100d2:	eb0e 000c 	add.w	r0, lr, ip
 80100d6:	da42      	bge.n	801015e <__ieee754_sqrt+0x17a>
 80100d8:	2800      	cmp	r0, #0
 80100da:	db40      	blt.n	801015e <__ieee754_sqrt+0x17a>
 80100dc:	f102 0801 	add.w	r8, r2, #1
 80100e0:	1a9b      	subs	r3, r3, r2
 80100e2:	458e      	cmp	lr, r1
 80100e4:	bf88      	it	hi
 80100e6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80100ea:	eba1 010e 	sub.w	r1, r1, lr
 80100ee:	4464      	add	r4, ip
 80100f0:	4642      	mov	r2, r8
 80100f2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80100f6:	3f01      	subs	r7, #1
 80100f8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80100fc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010100:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8010104:	d1dc      	bne.n	80100c0 <__ieee754_sqrt+0xdc>
 8010106:	4319      	orrs	r1, r3
 8010108:	d01b      	beq.n	8010142 <__ieee754_sqrt+0x15e>
 801010a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010190 <__ieee754_sqrt+0x1ac>
 801010e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010194 <__ieee754_sqrt+0x1b0>
 8010112:	e9da 0100 	ldrd	r0, r1, [sl]
 8010116:	e9db 2300 	ldrd	r2, r3, [fp]
 801011a:	f7f0 f8d5 	bl	80002c8 <__aeabi_dsub>
 801011e:	e9da 8900 	ldrd	r8, r9, [sl]
 8010122:	4602      	mov	r2, r0
 8010124:	460b      	mov	r3, r1
 8010126:	4640      	mov	r0, r8
 8010128:	4649      	mov	r1, r9
 801012a:	f7f0 fd01 	bl	8000b30 <__aeabi_dcmple>
 801012e:	b140      	cbz	r0, 8010142 <__ieee754_sqrt+0x15e>
 8010130:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010134:	e9da 0100 	ldrd	r0, r1, [sl]
 8010138:	e9db 2300 	ldrd	r2, r3, [fp]
 801013c:	d111      	bne.n	8010162 <__ieee754_sqrt+0x17e>
 801013e:	3601      	adds	r6, #1
 8010140:	463c      	mov	r4, r7
 8010142:	1072      	asrs	r2, r6, #1
 8010144:	0863      	lsrs	r3, r4, #1
 8010146:	07f1      	lsls	r1, r6, #31
 8010148:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801014c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8010150:	bf48      	it	mi
 8010152:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8010156:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801015a:	4618      	mov	r0, r3
 801015c:	e756      	b.n	801000c <__ieee754_sqrt+0x28>
 801015e:	4690      	mov	r8, r2
 8010160:	e7be      	b.n	80100e0 <__ieee754_sqrt+0xfc>
 8010162:	f7f0 f8b3 	bl	80002cc <__adddf3>
 8010166:	e9da 8900 	ldrd	r8, r9, [sl]
 801016a:	4602      	mov	r2, r0
 801016c:	460b      	mov	r3, r1
 801016e:	4640      	mov	r0, r8
 8010170:	4649      	mov	r1, r9
 8010172:	f7f0 fcd3 	bl	8000b1c <__aeabi_dcmplt>
 8010176:	b120      	cbz	r0, 8010182 <__ieee754_sqrt+0x19e>
 8010178:	1ca0      	adds	r0, r4, #2
 801017a:	bf08      	it	eq
 801017c:	3601      	addeq	r6, #1
 801017e:	3402      	adds	r4, #2
 8010180:	e7df      	b.n	8010142 <__ieee754_sqrt+0x15e>
 8010182:	1c63      	adds	r3, r4, #1
 8010184:	f023 0401 	bic.w	r4, r3, #1
 8010188:	e7db      	b.n	8010142 <__ieee754_sqrt+0x15e>
 801018a:	bf00      	nop
 801018c:	7ff00000 	.word	0x7ff00000
 8010190:	20000220 	.word	0x20000220
 8010194:	20000218 	.word	0x20000218

08010198 <__ieee754_sqrtf>:
 8010198:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801019c:	4770      	bx	lr
	...

080101a0 <round>:
 80101a0:	ec51 0b10 	vmov	r0, r1, d0
 80101a4:	b570      	push	{r4, r5, r6, lr}
 80101a6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80101aa:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 80101ae:	2a13      	cmp	r2, #19
 80101b0:	460b      	mov	r3, r1
 80101b2:	4605      	mov	r5, r0
 80101b4:	dc1b      	bgt.n	80101ee <round+0x4e>
 80101b6:	2a00      	cmp	r2, #0
 80101b8:	da0b      	bge.n	80101d2 <round+0x32>
 80101ba:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80101be:	3201      	adds	r2, #1
 80101c0:	bf04      	itt	eq
 80101c2:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80101c6:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80101ca:	2200      	movs	r2, #0
 80101cc:	4619      	mov	r1, r3
 80101ce:	4610      	mov	r0, r2
 80101d0:	e015      	b.n	80101fe <round+0x5e>
 80101d2:	4c15      	ldr	r4, [pc, #84]	@ (8010228 <round+0x88>)
 80101d4:	4114      	asrs	r4, r2
 80101d6:	ea04 0601 	and.w	r6, r4, r1
 80101da:	4306      	orrs	r6, r0
 80101dc:	d00f      	beq.n	80101fe <round+0x5e>
 80101de:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80101e2:	fa41 f202 	asr.w	r2, r1, r2
 80101e6:	4413      	add	r3, r2
 80101e8:	ea23 0304 	bic.w	r3, r3, r4
 80101ec:	e7ed      	b.n	80101ca <round+0x2a>
 80101ee:	2a33      	cmp	r2, #51	@ 0x33
 80101f0:	dd08      	ble.n	8010204 <round+0x64>
 80101f2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80101f6:	d102      	bne.n	80101fe <round+0x5e>
 80101f8:	4602      	mov	r2, r0
 80101fa:	f7f0 f867 	bl	80002cc <__adddf3>
 80101fe:	ec41 0b10 	vmov	d0, r0, r1
 8010202:	bd70      	pop	{r4, r5, r6, pc}
 8010204:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8010208:	f04f 34ff 	mov.w	r4, #4294967295
 801020c:	40f4      	lsrs	r4, r6
 801020e:	4204      	tst	r4, r0
 8010210:	d0f5      	beq.n	80101fe <round+0x5e>
 8010212:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8010216:	2201      	movs	r2, #1
 8010218:	408a      	lsls	r2, r1
 801021a:	1952      	adds	r2, r2, r5
 801021c:	bf28      	it	cs
 801021e:	3301      	addcs	r3, #1
 8010220:	ea22 0204 	bic.w	r2, r2, r4
 8010224:	e7d2      	b.n	80101cc <round+0x2c>
 8010226:	bf00      	nop
 8010228:	000fffff 	.word	0x000fffff
 801022c:	00000000 	.word	0x00000000

08010230 <__kernel_cos>:
 8010230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010234:	ec57 6b10 	vmov	r6, r7, d0
 8010238:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801023c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8010240:	ed8d 1b00 	vstr	d1, [sp]
 8010244:	d206      	bcs.n	8010254 <__kernel_cos+0x24>
 8010246:	4630      	mov	r0, r6
 8010248:	4639      	mov	r1, r7
 801024a:	f7f0 fca5 	bl	8000b98 <__aeabi_d2iz>
 801024e:	2800      	cmp	r0, #0
 8010250:	f000 8088 	beq.w	8010364 <__kernel_cos+0x134>
 8010254:	4632      	mov	r2, r6
 8010256:	463b      	mov	r3, r7
 8010258:	4630      	mov	r0, r6
 801025a:	4639      	mov	r1, r7
 801025c:	f7f0 f9ec 	bl	8000638 <__aeabi_dmul>
 8010260:	4b51      	ldr	r3, [pc, #324]	@ (80103a8 <__kernel_cos+0x178>)
 8010262:	2200      	movs	r2, #0
 8010264:	4604      	mov	r4, r0
 8010266:	460d      	mov	r5, r1
 8010268:	f7f0 f9e6 	bl	8000638 <__aeabi_dmul>
 801026c:	a340      	add	r3, pc, #256	@ (adr r3, 8010370 <__kernel_cos+0x140>)
 801026e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010272:	4682      	mov	sl, r0
 8010274:	468b      	mov	fp, r1
 8010276:	4620      	mov	r0, r4
 8010278:	4629      	mov	r1, r5
 801027a:	f7f0 f9dd 	bl	8000638 <__aeabi_dmul>
 801027e:	a33e      	add	r3, pc, #248	@ (adr r3, 8010378 <__kernel_cos+0x148>)
 8010280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010284:	f7f0 f822 	bl	80002cc <__adddf3>
 8010288:	4622      	mov	r2, r4
 801028a:	462b      	mov	r3, r5
 801028c:	f7f0 f9d4 	bl	8000638 <__aeabi_dmul>
 8010290:	a33b      	add	r3, pc, #236	@ (adr r3, 8010380 <__kernel_cos+0x150>)
 8010292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010296:	f7f0 f817 	bl	80002c8 <__aeabi_dsub>
 801029a:	4622      	mov	r2, r4
 801029c:	462b      	mov	r3, r5
 801029e:	f7f0 f9cb 	bl	8000638 <__aeabi_dmul>
 80102a2:	a339      	add	r3, pc, #228	@ (adr r3, 8010388 <__kernel_cos+0x158>)
 80102a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a8:	f7f0 f810 	bl	80002cc <__adddf3>
 80102ac:	4622      	mov	r2, r4
 80102ae:	462b      	mov	r3, r5
 80102b0:	f7f0 f9c2 	bl	8000638 <__aeabi_dmul>
 80102b4:	a336      	add	r3, pc, #216	@ (adr r3, 8010390 <__kernel_cos+0x160>)
 80102b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ba:	f7f0 f805 	bl	80002c8 <__aeabi_dsub>
 80102be:	4622      	mov	r2, r4
 80102c0:	462b      	mov	r3, r5
 80102c2:	f7f0 f9b9 	bl	8000638 <__aeabi_dmul>
 80102c6:	a334      	add	r3, pc, #208	@ (adr r3, 8010398 <__kernel_cos+0x168>)
 80102c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102cc:	f7ef fffe 	bl	80002cc <__adddf3>
 80102d0:	4622      	mov	r2, r4
 80102d2:	462b      	mov	r3, r5
 80102d4:	f7f0 f9b0 	bl	8000638 <__aeabi_dmul>
 80102d8:	4622      	mov	r2, r4
 80102da:	462b      	mov	r3, r5
 80102dc:	f7f0 f9ac 	bl	8000638 <__aeabi_dmul>
 80102e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102e4:	4604      	mov	r4, r0
 80102e6:	460d      	mov	r5, r1
 80102e8:	4630      	mov	r0, r6
 80102ea:	4639      	mov	r1, r7
 80102ec:	f7f0 f9a4 	bl	8000638 <__aeabi_dmul>
 80102f0:	460b      	mov	r3, r1
 80102f2:	4602      	mov	r2, r0
 80102f4:	4629      	mov	r1, r5
 80102f6:	4620      	mov	r0, r4
 80102f8:	f7ef ffe6 	bl	80002c8 <__aeabi_dsub>
 80102fc:	4b2b      	ldr	r3, [pc, #172]	@ (80103ac <__kernel_cos+0x17c>)
 80102fe:	4598      	cmp	r8, r3
 8010300:	4606      	mov	r6, r0
 8010302:	460f      	mov	r7, r1
 8010304:	d810      	bhi.n	8010328 <__kernel_cos+0xf8>
 8010306:	4602      	mov	r2, r0
 8010308:	460b      	mov	r3, r1
 801030a:	4650      	mov	r0, sl
 801030c:	4659      	mov	r1, fp
 801030e:	f7ef ffdb 	bl	80002c8 <__aeabi_dsub>
 8010312:	460b      	mov	r3, r1
 8010314:	4926      	ldr	r1, [pc, #152]	@ (80103b0 <__kernel_cos+0x180>)
 8010316:	4602      	mov	r2, r0
 8010318:	2000      	movs	r0, #0
 801031a:	f7ef ffd5 	bl	80002c8 <__aeabi_dsub>
 801031e:	ec41 0b10 	vmov	d0, r0, r1
 8010322:	b003      	add	sp, #12
 8010324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010328:	4b22      	ldr	r3, [pc, #136]	@ (80103b4 <__kernel_cos+0x184>)
 801032a:	4921      	ldr	r1, [pc, #132]	@ (80103b0 <__kernel_cos+0x180>)
 801032c:	4598      	cmp	r8, r3
 801032e:	bf8c      	ite	hi
 8010330:	4d21      	ldrhi	r5, [pc, #132]	@ (80103b8 <__kernel_cos+0x188>)
 8010332:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8010336:	2400      	movs	r4, #0
 8010338:	4622      	mov	r2, r4
 801033a:	462b      	mov	r3, r5
 801033c:	2000      	movs	r0, #0
 801033e:	f7ef ffc3 	bl	80002c8 <__aeabi_dsub>
 8010342:	4622      	mov	r2, r4
 8010344:	4680      	mov	r8, r0
 8010346:	4689      	mov	r9, r1
 8010348:	462b      	mov	r3, r5
 801034a:	4650      	mov	r0, sl
 801034c:	4659      	mov	r1, fp
 801034e:	f7ef ffbb 	bl	80002c8 <__aeabi_dsub>
 8010352:	4632      	mov	r2, r6
 8010354:	463b      	mov	r3, r7
 8010356:	f7ef ffb7 	bl	80002c8 <__aeabi_dsub>
 801035a:	4602      	mov	r2, r0
 801035c:	460b      	mov	r3, r1
 801035e:	4640      	mov	r0, r8
 8010360:	4649      	mov	r1, r9
 8010362:	e7da      	b.n	801031a <__kernel_cos+0xea>
 8010364:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80103a0 <__kernel_cos+0x170>
 8010368:	e7db      	b.n	8010322 <__kernel_cos+0xf2>
 801036a:	bf00      	nop
 801036c:	f3af 8000 	nop.w
 8010370:	be8838d4 	.word	0xbe8838d4
 8010374:	bda8fae9 	.word	0xbda8fae9
 8010378:	bdb4b1c4 	.word	0xbdb4b1c4
 801037c:	3e21ee9e 	.word	0x3e21ee9e
 8010380:	809c52ad 	.word	0x809c52ad
 8010384:	3e927e4f 	.word	0x3e927e4f
 8010388:	19cb1590 	.word	0x19cb1590
 801038c:	3efa01a0 	.word	0x3efa01a0
 8010390:	16c15177 	.word	0x16c15177
 8010394:	3f56c16c 	.word	0x3f56c16c
 8010398:	5555554c 	.word	0x5555554c
 801039c:	3fa55555 	.word	0x3fa55555
 80103a0:	00000000 	.word	0x00000000
 80103a4:	3ff00000 	.word	0x3ff00000
 80103a8:	3fe00000 	.word	0x3fe00000
 80103ac:	3fd33332 	.word	0x3fd33332
 80103b0:	3ff00000 	.word	0x3ff00000
 80103b4:	3fe90000 	.word	0x3fe90000
 80103b8:	3fd20000 	.word	0x3fd20000
 80103bc:	00000000 	.word	0x00000000

080103c0 <__kernel_sin>:
 80103c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103c4:	ec55 4b10 	vmov	r4, r5, d0
 80103c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80103cc:	b085      	sub	sp, #20
 80103ce:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80103d2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80103d6:	4680      	mov	r8, r0
 80103d8:	d205      	bcs.n	80103e6 <__kernel_sin+0x26>
 80103da:	4620      	mov	r0, r4
 80103dc:	4629      	mov	r1, r5
 80103de:	f7f0 fbdb 	bl	8000b98 <__aeabi_d2iz>
 80103e2:	2800      	cmp	r0, #0
 80103e4:	d052      	beq.n	801048c <__kernel_sin+0xcc>
 80103e6:	4622      	mov	r2, r4
 80103e8:	462b      	mov	r3, r5
 80103ea:	4620      	mov	r0, r4
 80103ec:	4629      	mov	r1, r5
 80103ee:	f7f0 f923 	bl	8000638 <__aeabi_dmul>
 80103f2:	4682      	mov	sl, r0
 80103f4:	468b      	mov	fp, r1
 80103f6:	4602      	mov	r2, r0
 80103f8:	460b      	mov	r3, r1
 80103fa:	4620      	mov	r0, r4
 80103fc:	4629      	mov	r1, r5
 80103fe:	f7f0 f91b 	bl	8000638 <__aeabi_dmul>
 8010402:	a342      	add	r3, pc, #264	@ (adr r3, 801050c <__kernel_sin+0x14c>)
 8010404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010408:	e9cd 0100 	strd	r0, r1, [sp]
 801040c:	4650      	mov	r0, sl
 801040e:	4659      	mov	r1, fp
 8010410:	f7f0 f912 	bl	8000638 <__aeabi_dmul>
 8010414:	a33f      	add	r3, pc, #252	@ (adr r3, 8010514 <__kernel_sin+0x154>)
 8010416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801041a:	f7ef ff55 	bl	80002c8 <__aeabi_dsub>
 801041e:	4652      	mov	r2, sl
 8010420:	465b      	mov	r3, fp
 8010422:	f7f0 f909 	bl	8000638 <__aeabi_dmul>
 8010426:	a33d      	add	r3, pc, #244	@ (adr r3, 801051c <__kernel_sin+0x15c>)
 8010428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042c:	f7ef ff4e 	bl	80002cc <__adddf3>
 8010430:	4652      	mov	r2, sl
 8010432:	465b      	mov	r3, fp
 8010434:	f7f0 f900 	bl	8000638 <__aeabi_dmul>
 8010438:	a33a      	add	r3, pc, #232	@ (adr r3, 8010524 <__kernel_sin+0x164>)
 801043a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801043e:	f7ef ff43 	bl	80002c8 <__aeabi_dsub>
 8010442:	4652      	mov	r2, sl
 8010444:	465b      	mov	r3, fp
 8010446:	f7f0 f8f7 	bl	8000638 <__aeabi_dmul>
 801044a:	a338      	add	r3, pc, #224	@ (adr r3, 801052c <__kernel_sin+0x16c>)
 801044c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010450:	f7ef ff3c 	bl	80002cc <__adddf3>
 8010454:	4606      	mov	r6, r0
 8010456:	460f      	mov	r7, r1
 8010458:	f1b8 0f00 	cmp.w	r8, #0
 801045c:	d11b      	bne.n	8010496 <__kernel_sin+0xd6>
 801045e:	4602      	mov	r2, r0
 8010460:	460b      	mov	r3, r1
 8010462:	4650      	mov	r0, sl
 8010464:	4659      	mov	r1, fp
 8010466:	f7f0 f8e7 	bl	8000638 <__aeabi_dmul>
 801046a:	a325      	add	r3, pc, #148	@ (adr r3, 8010500 <__kernel_sin+0x140>)
 801046c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010470:	f7ef ff2a 	bl	80002c8 <__aeabi_dsub>
 8010474:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010478:	f7f0 f8de 	bl	8000638 <__aeabi_dmul>
 801047c:	4602      	mov	r2, r0
 801047e:	460b      	mov	r3, r1
 8010480:	4620      	mov	r0, r4
 8010482:	4629      	mov	r1, r5
 8010484:	f7ef ff22 	bl	80002cc <__adddf3>
 8010488:	4604      	mov	r4, r0
 801048a:	460d      	mov	r5, r1
 801048c:	ec45 4b10 	vmov	d0, r4, r5
 8010490:	b005      	add	sp, #20
 8010492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801049a:	4b1b      	ldr	r3, [pc, #108]	@ (8010508 <__kernel_sin+0x148>)
 801049c:	2200      	movs	r2, #0
 801049e:	f7f0 f8cb 	bl	8000638 <__aeabi_dmul>
 80104a2:	4632      	mov	r2, r6
 80104a4:	4680      	mov	r8, r0
 80104a6:	4689      	mov	r9, r1
 80104a8:	463b      	mov	r3, r7
 80104aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80104ae:	f7f0 f8c3 	bl	8000638 <__aeabi_dmul>
 80104b2:	4602      	mov	r2, r0
 80104b4:	460b      	mov	r3, r1
 80104b6:	4640      	mov	r0, r8
 80104b8:	4649      	mov	r1, r9
 80104ba:	f7ef ff05 	bl	80002c8 <__aeabi_dsub>
 80104be:	4652      	mov	r2, sl
 80104c0:	465b      	mov	r3, fp
 80104c2:	f7f0 f8b9 	bl	8000638 <__aeabi_dmul>
 80104c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80104ca:	f7ef fefd 	bl	80002c8 <__aeabi_dsub>
 80104ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8010500 <__kernel_sin+0x140>)
 80104d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d4:	4606      	mov	r6, r0
 80104d6:	460f      	mov	r7, r1
 80104d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80104dc:	f7f0 f8ac 	bl	8000638 <__aeabi_dmul>
 80104e0:	4602      	mov	r2, r0
 80104e2:	460b      	mov	r3, r1
 80104e4:	4630      	mov	r0, r6
 80104e6:	4639      	mov	r1, r7
 80104e8:	f7ef fef0 	bl	80002cc <__adddf3>
 80104ec:	4602      	mov	r2, r0
 80104ee:	460b      	mov	r3, r1
 80104f0:	4620      	mov	r0, r4
 80104f2:	4629      	mov	r1, r5
 80104f4:	f7ef fee8 	bl	80002c8 <__aeabi_dsub>
 80104f8:	e7c6      	b.n	8010488 <__kernel_sin+0xc8>
 80104fa:	bf00      	nop
 80104fc:	f3af 8000 	nop.w
 8010500:	55555549 	.word	0x55555549
 8010504:	3fc55555 	.word	0x3fc55555
 8010508:	3fe00000 	.word	0x3fe00000
 801050c:	5acfd57c 	.word	0x5acfd57c
 8010510:	3de5d93a 	.word	0x3de5d93a
 8010514:	8a2b9ceb 	.word	0x8a2b9ceb
 8010518:	3e5ae5e6 	.word	0x3e5ae5e6
 801051c:	57b1fe7d 	.word	0x57b1fe7d
 8010520:	3ec71de3 	.word	0x3ec71de3
 8010524:	19c161d5 	.word	0x19c161d5
 8010528:	3f2a01a0 	.word	0x3f2a01a0
 801052c:	1110f8a6 	.word	0x1110f8a6
 8010530:	3f811111 	.word	0x3f811111
 8010534:	00000000 	.word	0x00000000

08010538 <__ieee754_pow>:
 8010538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801053c:	b091      	sub	sp, #68	@ 0x44
 801053e:	ed8d 1b00 	vstr	d1, [sp]
 8010542:	e9dd 1900 	ldrd	r1, r9, [sp]
 8010546:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801054a:	ea5a 0001 	orrs.w	r0, sl, r1
 801054e:	ec57 6b10 	vmov	r6, r7, d0
 8010552:	d113      	bne.n	801057c <__ieee754_pow+0x44>
 8010554:	19b3      	adds	r3, r6, r6
 8010556:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801055a:	4152      	adcs	r2, r2
 801055c:	4298      	cmp	r0, r3
 801055e:	4b98      	ldr	r3, [pc, #608]	@ (80107c0 <__ieee754_pow+0x288>)
 8010560:	4193      	sbcs	r3, r2
 8010562:	f080 84ea 	bcs.w	8010f3a <__ieee754_pow+0xa02>
 8010566:	e9dd 2300 	ldrd	r2, r3, [sp]
 801056a:	4630      	mov	r0, r6
 801056c:	4639      	mov	r1, r7
 801056e:	f7ef fead 	bl	80002cc <__adddf3>
 8010572:	ec41 0b10 	vmov	d0, r0, r1
 8010576:	b011      	add	sp, #68	@ 0x44
 8010578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801057c:	4a91      	ldr	r2, [pc, #580]	@ (80107c4 <__ieee754_pow+0x28c>)
 801057e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010582:	4590      	cmp	r8, r2
 8010584:	463d      	mov	r5, r7
 8010586:	4633      	mov	r3, r6
 8010588:	d806      	bhi.n	8010598 <__ieee754_pow+0x60>
 801058a:	d101      	bne.n	8010590 <__ieee754_pow+0x58>
 801058c:	2e00      	cmp	r6, #0
 801058e:	d1ea      	bne.n	8010566 <__ieee754_pow+0x2e>
 8010590:	4592      	cmp	sl, r2
 8010592:	d801      	bhi.n	8010598 <__ieee754_pow+0x60>
 8010594:	d10e      	bne.n	80105b4 <__ieee754_pow+0x7c>
 8010596:	b169      	cbz	r1, 80105b4 <__ieee754_pow+0x7c>
 8010598:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801059c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80105a0:	431d      	orrs	r5, r3
 80105a2:	d1e0      	bne.n	8010566 <__ieee754_pow+0x2e>
 80105a4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80105a8:	18db      	adds	r3, r3, r3
 80105aa:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80105ae:	4152      	adcs	r2, r2
 80105b0:	429d      	cmp	r5, r3
 80105b2:	e7d4      	b.n	801055e <__ieee754_pow+0x26>
 80105b4:	2d00      	cmp	r5, #0
 80105b6:	46c3      	mov	fp, r8
 80105b8:	da3a      	bge.n	8010630 <__ieee754_pow+0xf8>
 80105ba:	4a83      	ldr	r2, [pc, #524]	@ (80107c8 <__ieee754_pow+0x290>)
 80105bc:	4592      	cmp	sl, r2
 80105be:	d84d      	bhi.n	801065c <__ieee754_pow+0x124>
 80105c0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80105c4:	4592      	cmp	sl, r2
 80105c6:	f240 84c7 	bls.w	8010f58 <__ieee754_pow+0xa20>
 80105ca:	ea4f 522a 	mov.w	r2, sl, asr #20
 80105ce:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80105d2:	2a14      	cmp	r2, #20
 80105d4:	dd0f      	ble.n	80105f6 <__ieee754_pow+0xbe>
 80105d6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80105da:	fa21 f402 	lsr.w	r4, r1, r2
 80105de:	fa04 f202 	lsl.w	r2, r4, r2
 80105e2:	428a      	cmp	r2, r1
 80105e4:	f040 84b8 	bne.w	8010f58 <__ieee754_pow+0xa20>
 80105e8:	f004 0401 	and.w	r4, r4, #1
 80105ec:	f1c4 0402 	rsb	r4, r4, #2
 80105f0:	2900      	cmp	r1, #0
 80105f2:	d158      	bne.n	80106a6 <__ieee754_pow+0x16e>
 80105f4:	e00e      	b.n	8010614 <__ieee754_pow+0xdc>
 80105f6:	2900      	cmp	r1, #0
 80105f8:	d154      	bne.n	80106a4 <__ieee754_pow+0x16c>
 80105fa:	f1c2 0214 	rsb	r2, r2, #20
 80105fe:	fa4a f402 	asr.w	r4, sl, r2
 8010602:	fa04 f202 	lsl.w	r2, r4, r2
 8010606:	4552      	cmp	r2, sl
 8010608:	f040 84a3 	bne.w	8010f52 <__ieee754_pow+0xa1a>
 801060c:	f004 0401 	and.w	r4, r4, #1
 8010610:	f1c4 0402 	rsb	r4, r4, #2
 8010614:	4a6d      	ldr	r2, [pc, #436]	@ (80107cc <__ieee754_pow+0x294>)
 8010616:	4592      	cmp	sl, r2
 8010618:	d12e      	bne.n	8010678 <__ieee754_pow+0x140>
 801061a:	f1b9 0f00 	cmp.w	r9, #0
 801061e:	f280 8494 	bge.w	8010f4a <__ieee754_pow+0xa12>
 8010622:	496a      	ldr	r1, [pc, #424]	@ (80107cc <__ieee754_pow+0x294>)
 8010624:	4632      	mov	r2, r6
 8010626:	463b      	mov	r3, r7
 8010628:	2000      	movs	r0, #0
 801062a:	f7f0 f92f 	bl	800088c <__aeabi_ddiv>
 801062e:	e7a0      	b.n	8010572 <__ieee754_pow+0x3a>
 8010630:	2400      	movs	r4, #0
 8010632:	bbc1      	cbnz	r1, 80106a6 <__ieee754_pow+0x16e>
 8010634:	4a63      	ldr	r2, [pc, #396]	@ (80107c4 <__ieee754_pow+0x28c>)
 8010636:	4592      	cmp	sl, r2
 8010638:	d1ec      	bne.n	8010614 <__ieee754_pow+0xdc>
 801063a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801063e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8010642:	431a      	orrs	r2, r3
 8010644:	f000 8479 	beq.w	8010f3a <__ieee754_pow+0xa02>
 8010648:	4b61      	ldr	r3, [pc, #388]	@ (80107d0 <__ieee754_pow+0x298>)
 801064a:	4598      	cmp	r8, r3
 801064c:	d908      	bls.n	8010660 <__ieee754_pow+0x128>
 801064e:	f1b9 0f00 	cmp.w	r9, #0
 8010652:	f2c0 8476 	blt.w	8010f42 <__ieee754_pow+0xa0a>
 8010656:	e9dd 0100 	ldrd	r0, r1, [sp]
 801065a:	e78a      	b.n	8010572 <__ieee754_pow+0x3a>
 801065c:	2402      	movs	r4, #2
 801065e:	e7e8      	b.n	8010632 <__ieee754_pow+0xfa>
 8010660:	f1b9 0f00 	cmp.w	r9, #0
 8010664:	f04f 0000 	mov.w	r0, #0
 8010668:	f04f 0100 	mov.w	r1, #0
 801066c:	da81      	bge.n	8010572 <__ieee754_pow+0x3a>
 801066e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010672:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010676:	e77c      	b.n	8010572 <__ieee754_pow+0x3a>
 8010678:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801067c:	d106      	bne.n	801068c <__ieee754_pow+0x154>
 801067e:	4632      	mov	r2, r6
 8010680:	463b      	mov	r3, r7
 8010682:	4630      	mov	r0, r6
 8010684:	4639      	mov	r1, r7
 8010686:	f7ef ffd7 	bl	8000638 <__aeabi_dmul>
 801068a:	e772      	b.n	8010572 <__ieee754_pow+0x3a>
 801068c:	4a51      	ldr	r2, [pc, #324]	@ (80107d4 <__ieee754_pow+0x29c>)
 801068e:	4591      	cmp	r9, r2
 8010690:	d109      	bne.n	80106a6 <__ieee754_pow+0x16e>
 8010692:	2d00      	cmp	r5, #0
 8010694:	db07      	blt.n	80106a6 <__ieee754_pow+0x16e>
 8010696:	ec47 6b10 	vmov	d0, r6, r7
 801069a:	b011      	add	sp, #68	@ 0x44
 801069c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106a0:	f7ff bca0 	b.w	800ffe4 <__ieee754_sqrt>
 80106a4:	2400      	movs	r4, #0
 80106a6:	ec47 6b10 	vmov	d0, r6, r7
 80106aa:	9302      	str	r3, [sp, #8]
 80106ac:	f000 fe84 	bl	80113b8 <fabs>
 80106b0:	9b02      	ldr	r3, [sp, #8]
 80106b2:	ec51 0b10 	vmov	r0, r1, d0
 80106b6:	bb53      	cbnz	r3, 801070e <__ieee754_pow+0x1d6>
 80106b8:	4b44      	ldr	r3, [pc, #272]	@ (80107cc <__ieee754_pow+0x294>)
 80106ba:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80106be:	429a      	cmp	r2, r3
 80106c0:	d002      	beq.n	80106c8 <__ieee754_pow+0x190>
 80106c2:	f1b8 0f00 	cmp.w	r8, #0
 80106c6:	d122      	bne.n	801070e <__ieee754_pow+0x1d6>
 80106c8:	f1b9 0f00 	cmp.w	r9, #0
 80106cc:	da05      	bge.n	80106da <__ieee754_pow+0x1a2>
 80106ce:	4602      	mov	r2, r0
 80106d0:	460b      	mov	r3, r1
 80106d2:	2000      	movs	r0, #0
 80106d4:	493d      	ldr	r1, [pc, #244]	@ (80107cc <__ieee754_pow+0x294>)
 80106d6:	f7f0 f8d9 	bl	800088c <__aeabi_ddiv>
 80106da:	2d00      	cmp	r5, #0
 80106dc:	f6bf af49 	bge.w	8010572 <__ieee754_pow+0x3a>
 80106e0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80106e4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80106e8:	ea58 0804 	orrs.w	r8, r8, r4
 80106ec:	d108      	bne.n	8010700 <__ieee754_pow+0x1c8>
 80106ee:	4602      	mov	r2, r0
 80106f0:	460b      	mov	r3, r1
 80106f2:	4610      	mov	r0, r2
 80106f4:	4619      	mov	r1, r3
 80106f6:	f7ef fde7 	bl	80002c8 <__aeabi_dsub>
 80106fa:	4602      	mov	r2, r0
 80106fc:	460b      	mov	r3, r1
 80106fe:	e794      	b.n	801062a <__ieee754_pow+0xf2>
 8010700:	2c01      	cmp	r4, #1
 8010702:	f47f af36 	bne.w	8010572 <__ieee754_pow+0x3a>
 8010706:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801070a:	4619      	mov	r1, r3
 801070c:	e731      	b.n	8010572 <__ieee754_pow+0x3a>
 801070e:	0feb      	lsrs	r3, r5, #31
 8010710:	3b01      	subs	r3, #1
 8010712:	ea53 0204 	orrs.w	r2, r3, r4
 8010716:	d102      	bne.n	801071e <__ieee754_pow+0x1e6>
 8010718:	4632      	mov	r2, r6
 801071a:	463b      	mov	r3, r7
 801071c:	e7e9      	b.n	80106f2 <__ieee754_pow+0x1ba>
 801071e:	3c01      	subs	r4, #1
 8010720:	431c      	orrs	r4, r3
 8010722:	d016      	beq.n	8010752 <__ieee754_pow+0x21a>
 8010724:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80107b0 <__ieee754_pow+0x278>
 8010728:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801072c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010730:	f240 8112 	bls.w	8010958 <__ieee754_pow+0x420>
 8010734:	4b28      	ldr	r3, [pc, #160]	@ (80107d8 <__ieee754_pow+0x2a0>)
 8010736:	459a      	cmp	sl, r3
 8010738:	4b25      	ldr	r3, [pc, #148]	@ (80107d0 <__ieee754_pow+0x298>)
 801073a:	d916      	bls.n	801076a <__ieee754_pow+0x232>
 801073c:	4598      	cmp	r8, r3
 801073e:	d80b      	bhi.n	8010758 <__ieee754_pow+0x220>
 8010740:	f1b9 0f00 	cmp.w	r9, #0
 8010744:	da0b      	bge.n	801075e <__ieee754_pow+0x226>
 8010746:	2000      	movs	r0, #0
 8010748:	b011      	add	sp, #68	@ 0x44
 801074a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801074e:	f001 ba43 	b.w	8011bd8 <__math_oflow>
 8010752:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80107b8 <__ieee754_pow+0x280>
 8010756:	e7e7      	b.n	8010728 <__ieee754_pow+0x1f0>
 8010758:	f1b9 0f00 	cmp.w	r9, #0
 801075c:	dcf3      	bgt.n	8010746 <__ieee754_pow+0x20e>
 801075e:	2000      	movs	r0, #0
 8010760:	b011      	add	sp, #68	@ 0x44
 8010762:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010766:	f001 ba2f 	b.w	8011bc8 <__math_uflow>
 801076a:	4598      	cmp	r8, r3
 801076c:	d20c      	bcs.n	8010788 <__ieee754_pow+0x250>
 801076e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010772:	2200      	movs	r2, #0
 8010774:	2300      	movs	r3, #0
 8010776:	f7f0 f9d1 	bl	8000b1c <__aeabi_dcmplt>
 801077a:	3800      	subs	r0, #0
 801077c:	bf18      	it	ne
 801077e:	2001      	movne	r0, #1
 8010780:	f1b9 0f00 	cmp.w	r9, #0
 8010784:	daec      	bge.n	8010760 <__ieee754_pow+0x228>
 8010786:	e7df      	b.n	8010748 <__ieee754_pow+0x210>
 8010788:	4b10      	ldr	r3, [pc, #64]	@ (80107cc <__ieee754_pow+0x294>)
 801078a:	4598      	cmp	r8, r3
 801078c:	f04f 0200 	mov.w	r2, #0
 8010790:	d924      	bls.n	80107dc <__ieee754_pow+0x2a4>
 8010792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010796:	2300      	movs	r3, #0
 8010798:	f7f0 f9c0 	bl	8000b1c <__aeabi_dcmplt>
 801079c:	3800      	subs	r0, #0
 801079e:	bf18      	it	ne
 80107a0:	2001      	movne	r0, #1
 80107a2:	f1b9 0f00 	cmp.w	r9, #0
 80107a6:	dccf      	bgt.n	8010748 <__ieee754_pow+0x210>
 80107a8:	e7da      	b.n	8010760 <__ieee754_pow+0x228>
 80107aa:	bf00      	nop
 80107ac:	f3af 8000 	nop.w
 80107b0:	00000000 	.word	0x00000000
 80107b4:	3ff00000 	.word	0x3ff00000
 80107b8:	00000000 	.word	0x00000000
 80107bc:	bff00000 	.word	0xbff00000
 80107c0:	fff00000 	.word	0xfff00000
 80107c4:	7ff00000 	.word	0x7ff00000
 80107c8:	433fffff 	.word	0x433fffff
 80107cc:	3ff00000 	.word	0x3ff00000
 80107d0:	3fefffff 	.word	0x3fefffff
 80107d4:	3fe00000 	.word	0x3fe00000
 80107d8:	43f00000 	.word	0x43f00000
 80107dc:	4b5a      	ldr	r3, [pc, #360]	@ (8010948 <__ieee754_pow+0x410>)
 80107de:	f7ef fd73 	bl	80002c8 <__aeabi_dsub>
 80107e2:	a351      	add	r3, pc, #324	@ (adr r3, 8010928 <__ieee754_pow+0x3f0>)
 80107e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e8:	4604      	mov	r4, r0
 80107ea:	460d      	mov	r5, r1
 80107ec:	f7ef ff24 	bl	8000638 <__aeabi_dmul>
 80107f0:	a34f      	add	r3, pc, #316	@ (adr r3, 8010930 <__ieee754_pow+0x3f8>)
 80107f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f6:	4606      	mov	r6, r0
 80107f8:	460f      	mov	r7, r1
 80107fa:	4620      	mov	r0, r4
 80107fc:	4629      	mov	r1, r5
 80107fe:	f7ef ff1b 	bl	8000638 <__aeabi_dmul>
 8010802:	4b52      	ldr	r3, [pc, #328]	@ (801094c <__ieee754_pow+0x414>)
 8010804:	4682      	mov	sl, r0
 8010806:	468b      	mov	fp, r1
 8010808:	2200      	movs	r2, #0
 801080a:	4620      	mov	r0, r4
 801080c:	4629      	mov	r1, r5
 801080e:	f7ef ff13 	bl	8000638 <__aeabi_dmul>
 8010812:	4602      	mov	r2, r0
 8010814:	460b      	mov	r3, r1
 8010816:	a148      	add	r1, pc, #288	@ (adr r1, 8010938 <__ieee754_pow+0x400>)
 8010818:	e9d1 0100 	ldrd	r0, r1, [r1]
 801081c:	f7ef fd54 	bl	80002c8 <__aeabi_dsub>
 8010820:	4622      	mov	r2, r4
 8010822:	462b      	mov	r3, r5
 8010824:	f7ef ff08 	bl	8000638 <__aeabi_dmul>
 8010828:	4602      	mov	r2, r0
 801082a:	460b      	mov	r3, r1
 801082c:	2000      	movs	r0, #0
 801082e:	4948      	ldr	r1, [pc, #288]	@ (8010950 <__ieee754_pow+0x418>)
 8010830:	f7ef fd4a 	bl	80002c8 <__aeabi_dsub>
 8010834:	4622      	mov	r2, r4
 8010836:	4680      	mov	r8, r0
 8010838:	4689      	mov	r9, r1
 801083a:	462b      	mov	r3, r5
 801083c:	4620      	mov	r0, r4
 801083e:	4629      	mov	r1, r5
 8010840:	f7ef fefa 	bl	8000638 <__aeabi_dmul>
 8010844:	4602      	mov	r2, r0
 8010846:	460b      	mov	r3, r1
 8010848:	4640      	mov	r0, r8
 801084a:	4649      	mov	r1, r9
 801084c:	f7ef fef4 	bl	8000638 <__aeabi_dmul>
 8010850:	a33b      	add	r3, pc, #236	@ (adr r3, 8010940 <__ieee754_pow+0x408>)
 8010852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010856:	f7ef feef 	bl	8000638 <__aeabi_dmul>
 801085a:	4602      	mov	r2, r0
 801085c:	460b      	mov	r3, r1
 801085e:	4650      	mov	r0, sl
 8010860:	4659      	mov	r1, fp
 8010862:	f7ef fd31 	bl	80002c8 <__aeabi_dsub>
 8010866:	4602      	mov	r2, r0
 8010868:	460b      	mov	r3, r1
 801086a:	4680      	mov	r8, r0
 801086c:	4689      	mov	r9, r1
 801086e:	4630      	mov	r0, r6
 8010870:	4639      	mov	r1, r7
 8010872:	f7ef fd2b 	bl	80002cc <__adddf3>
 8010876:	2400      	movs	r4, #0
 8010878:	4632      	mov	r2, r6
 801087a:	463b      	mov	r3, r7
 801087c:	4620      	mov	r0, r4
 801087e:	460d      	mov	r5, r1
 8010880:	f7ef fd22 	bl	80002c8 <__aeabi_dsub>
 8010884:	4602      	mov	r2, r0
 8010886:	460b      	mov	r3, r1
 8010888:	4640      	mov	r0, r8
 801088a:	4649      	mov	r1, r9
 801088c:	f7ef fd1c 	bl	80002c8 <__aeabi_dsub>
 8010890:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010894:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010898:	2300      	movs	r3, #0
 801089a:	9304      	str	r3, [sp, #16]
 801089c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80108a0:	4606      	mov	r6, r0
 80108a2:	460f      	mov	r7, r1
 80108a4:	4652      	mov	r2, sl
 80108a6:	465b      	mov	r3, fp
 80108a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80108ac:	f7ef fd0c 	bl	80002c8 <__aeabi_dsub>
 80108b0:	4622      	mov	r2, r4
 80108b2:	462b      	mov	r3, r5
 80108b4:	f7ef fec0 	bl	8000638 <__aeabi_dmul>
 80108b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108bc:	4680      	mov	r8, r0
 80108be:	4689      	mov	r9, r1
 80108c0:	4630      	mov	r0, r6
 80108c2:	4639      	mov	r1, r7
 80108c4:	f7ef feb8 	bl	8000638 <__aeabi_dmul>
 80108c8:	4602      	mov	r2, r0
 80108ca:	460b      	mov	r3, r1
 80108cc:	4640      	mov	r0, r8
 80108ce:	4649      	mov	r1, r9
 80108d0:	f7ef fcfc 	bl	80002cc <__adddf3>
 80108d4:	4652      	mov	r2, sl
 80108d6:	465b      	mov	r3, fp
 80108d8:	4606      	mov	r6, r0
 80108da:	460f      	mov	r7, r1
 80108dc:	4620      	mov	r0, r4
 80108de:	4629      	mov	r1, r5
 80108e0:	f7ef feaa 	bl	8000638 <__aeabi_dmul>
 80108e4:	460b      	mov	r3, r1
 80108e6:	4602      	mov	r2, r0
 80108e8:	4680      	mov	r8, r0
 80108ea:	4689      	mov	r9, r1
 80108ec:	4630      	mov	r0, r6
 80108ee:	4639      	mov	r1, r7
 80108f0:	f7ef fcec 	bl	80002cc <__adddf3>
 80108f4:	4b17      	ldr	r3, [pc, #92]	@ (8010954 <__ieee754_pow+0x41c>)
 80108f6:	4299      	cmp	r1, r3
 80108f8:	4604      	mov	r4, r0
 80108fa:	460d      	mov	r5, r1
 80108fc:	468a      	mov	sl, r1
 80108fe:	468b      	mov	fp, r1
 8010900:	f340 82ef 	ble.w	8010ee2 <__ieee754_pow+0x9aa>
 8010904:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8010908:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801090c:	4303      	orrs	r3, r0
 801090e:	f000 81e8 	beq.w	8010ce2 <__ieee754_pow+0x7aa>
 8010912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010916:	2200      	movs	r2, #0
 8010918:	2300      	movs	r3, #0
 801091a:	f7f0 f8ff 	bl	8000b1c <__aeabi_dcmplt>
 801091e:	3800      	subs	r0, #0
 8010920:	bf18      	it	ne
 8010922:	2001      	movne	r0, #1
 8010924:	e710      	b.n	8010748 <__ieee754_pow+0x210>
 8010926:	bf00      	nop
 8010928:	60000000 	.word	0x60000000
 801092c:	3ff71547 	.word	0x3ff71547
 8010930:	f85ddf44 	.word	0xf85ddf44
 8010934:	3e54ae0b 	.word	0x3e54ae0b
 8010938:	55555555 	.word	0x55555555
 801093c:	3fd55555 	.word	0x3fd55555
 8010940:	652b82fe 	.word	0x652b82fe
 8010944:	3ff71547 	.word	0x3ff71547
 8010948:	3ff00000 	.word	0x3ff00000
 801094c:	3fd00000 	.word	0x3fd00000
 8010950:	3fe00000 	.word	0x3fe00000
 8010954:	408fffff 	.word	0x408fffff
 8010958:	4bd5      	ldr	r3, [pc, #852]	@ (8010cb0 <__ieee754_pow+0x778>)
 801095a:	402b      	ands	r3, r5
 801095c:	2200      	movs	r2, #0
 801095e:	b92b      	cbnz	r3, 801096c <__ieee754_pow+0x434>
 8010960:	4bd4      	ldr	r3, [pc, #848]	@ (8010cb4 <__ieee754_pow+0x77c>)
 8010962:	f7ef fe69 	bl	8000638 <__aeabi_dmul>
 8010966:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801096a:	468b      	mov	fp, r1
 801096c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8010970:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010974:	4413      	add	r3, r2
 8010976:	930a      	str	r3, [sp, #40]	@ 0x28
 8010978:	4bcf      	ldr	r3, [pc, #828]	@ (8010cb8 <__ieee754_pow+0x780>)
 801097a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801097e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8010982:	459b      	cmp	fp, r3
 8010984:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010988:	dd08      	ble.n	801099c <__ieee754_pow+0x464>
 801098a:	4bcc      	ldr	r3, [pc, #816]	@ (8010cbc <__ieee754_pow+0x784>)
 801098c:	459b      	cmp	fp, r3
 801098e:	f340 81a5 	ble.w	8010cdc <__ieee754_pow+0x7a4>
 8010992:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010994:	3301      	adds	r3, #1
 8010996:	930a      	str	r3, [sp, #40]	@ 0x28
 8010998:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801099c:	f04f 0a00 	mov.w	sl, #0
 80109a0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80109a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80109a6:	4bc6      	ldr	r3, [pc, #792]	@ (8010cc0 <__ieee754_pow+0x788>)
 80109a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80109ac:	ed93 7b00 	vldr	d7, [r3]
 80109b0:	4629      	mov	r1, r5
 80109b2:	ec53 2b17 	vmov	r2, r3, d7
 80109b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80109ba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80109be:	f7ef fc83 	bl	80002c8 <__aeabi_dsub>
 80109c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80109c6:	4606      	mov	r6, r0
 80109c8:	460f      	mov	r7, r1
 80109ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80109ce:	f7ef fc7d 	bl	80002cc <__adddf3>
 80109d2:	4602      	mov	r2, r0
 80109d4:	460b      	mov	r3, r1
 80109d6:	2000      	movs	r0, #0
 80109d8:	49ba      	ldr	r1, [pc, #744]	@ (8010cc4 <__ieee754_pow+0x78c>)
 80109da:	f7ef ff57 	bl	800088c <__aeabi_ddiv>
 80109de:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80109e2:	4602      	mov	r2, r0
 80109e4:	460b      	mov	r3, r1
 80109e6:	4630      	mov	r0, r6
 80109e8:	4639      	mov	r1, r7
 80109ea:	f7ef fe25 	bl	8000638 <__aeabi_dmul>
 80109ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80109f2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80109f6:	106d      	asrs	r5, r5, #1
 80109f8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80109fc:	f04f 0b00 	mov.w	fp, #0
 8010a00:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8010a04:	4661      	mov	r1, ip
 8010a06:	2200      	movs	r2, #0
 8010a08:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8010a0c:	4658      	mov	r0, fp
 8010a0e:	46e1      	mov	r9, ip
 8010a10:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8010a14:	4614      	mov	r4, r2
 8010a16:	461d      	mov	r5, r3
 8010a18:	f7ef fe0e 	bl	8000638 <__aeabi_dmul>
 8010a1c:	4602      	mov	r2, r0
 8010a1e:	460b      	mov	r3, r1
 8010a20:	4630      	mov	r0, r6
 8010a22:	4639      	mov	r1, r7
 8010a24:	f7ef fc50 	bl	80002c8 <__aeabi_dsub>
 8010a28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010a2c:	4606      	mov	r6, r0
 8010a2e:	460f      	mov	r7, r1
 8010a30:	4620      	mov	r0, r4
 8010a32:	4629      	mov	r1, r5
 8010a34:	f7ef fc48 	bl	80002c8 <__aeabi_dsub>
 8010a38:	4602      	mov	r2, r0
 8010a3a:	460b      	mov	r3, r1
 8010a3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010a40:	f7ef fc42 	bl	80002c8 <__aeabi_dsub>
 8010a44:	465a      	mov	r2, fp
 8010a46:	464b      	mov	r3, r9
 8010a48:	f7ef fdf6 	bl	8000638 <__aeabi_dmul>
 8010a4c:	4602      	mov	r2, r0
 8010a4e:	460b      	mov	r3, r1
 8010a50:	4630      	mov	r0, r6
 8010a52:	4639      	mov	r1, r7
 8010a54:	f7ef fc38 	bl	80002c8 <__aeabi_dsub>
 8010a58:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010a5c:	f7ef fdec 	bl	8000638 <__aeabi_dmul>
 8010a60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a64:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010a68:	4610      	mov	r0, r2
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	f7ef fde4 	bl	8000638 <__aeabi_dmul>
 8010a70:	a37d      	add	r3, pc, #500	@ (adr r3, 8010c68 <__ieee754_pow+0x730>)
 8010a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a76:	4604      	mov	r4, r0
 8010a78:	460d      	mov	r5, r1
 8010a7a:	f7ef fddd 	bl	8000638 <__aeabi_dmul>
 8010a7e:	a37c      	add	r3, pc, #496	@ (adr r3, 8010c70 <__ieee754_pow+0x738>)
 8010a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a84:	f7ef fc22 	bl	80002cc <__adddf3>
 8010a88:	4622      	mov	r2, r4
 8010a8a:	462b      	mov	r3, r5
 8010a8c:	f7ef fdd4 	bl	8000638 <__aeabi_dmul>
 8010a90:	a379      	add	r3, pc, #484	@ (adr r3, 8010c78 <__ieee754_pow+0x740>)
 8010a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a96:	f7ef fc19 	bl	80002cc <__adddf3>
 8010a9a:	4622      	mov	r2, r4
 8010a9c:	462b      	mov	r3, r5
 8010a9e:	f7ef fdcb 	bl	8000638 <__aeabi_dmul>
 8010aa2:	a377      	add	r3, pc, #476	@ (adr r3, 8010c80 <__ieee754_pow+0x748>)
 8010aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa8:	f7ef fc10 	bl	80002cc <__adddf3>
 8010aac:	4622      	mov	r2, r4
 8010aae:	462b      	mov	r3, r5
 8010ab0:	f7ef fdc2 	bl	8000638 <__aeabi_dmul>
 8010ab4:	a374      	add	r3, pc, #464	@ (adr r3, 8010c88 <__ieee754_pow+0x750>)
 8010ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aba:	f7ef fc07 	bl	80002cc <__adddf3>
 8010abe:	4622      	mov	r2, r4
 8010ac0:	462b      	mov	r3, r5
 8010ac2:	f7ef fdb9 	bl	8000638 <__aeabi_dmul>
 8010ac6:	a372      	add	r3, pc, #456	@ (adr r3, 8010c90 <__ieee754_pow+0x758>)
 8010ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010acc:	f7ef fbfe 	bl	80002cc <__adddf3>
 8010ad0:	4622      	mov	r2, r4
 8010ad2:	4606      	mov	r6, r0
 8010ad4:	460f      	mov	r7, r1
 8010ad6:	462b      	mov	r3, r5
 8010ad8:	4620      	mov	r0, r4
 8010ada:	4629      	mov	r1, r5
 8010adc:	f7ef fdac 	bl	8000638 <__aeabi_dmul>
 8010ae0:	4602      	mov	r2, r0
 8010ae2:	460b      	mov	r3, r1
 8010ae4:	4630      	mov	r0, r6
 8010ae6:	4639      	mov	r1, r7
 8010ae8:	f7ef fda6 	bl	8000638 <__aeabi_dmul>
 8010aec:	465a      	mov	r2, fp
 8010aee:	4604      	mov	r4, r0
 8010af0:	460d      	mov	r5, r1
 8010af2:	464b      	mov	r3, r9
 8010af4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010af8:	f7ef fbe8 	bl	80002cc <__adddf3>
 8010afc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010b00:	f7ef fd9a 	bl	8000638 <__aeabi_dmul>
 8010b04:	4622      	mov	r2, r4
 8010b06:	462b      	mov	r3, r5
 8010b08:	f7ef fbe0 	bl	80002cc <__adddf3>
 8010b0c:	465a      	mov	r2, fp
 8010b0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010b12:	464b      	mov	r3, r9
 8010b14:	4658      	mov	r0, fp
 8010b16:	4649      	mov	r1, r9
 8010b18:	f7ef fd8e 	bl	8000638 <__aeabi_dmul>
 8010b1c:	4b6a      	ldr	r3, [pc, #424]	@ (8010cc8 <__ieee754_pow+0x790>)
 8010b1e:	2200      	movs	r2, #0
 8010b20:	4606      	mov	r6, r0
 8010b22:	460f      	mov	r7, r1
 8010b24:	f7ef fbd2 	bl	80002cc <__adddf3>
 8010b28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010b2c:	f7ef fbce 	bl	80002cc <__adddf3>
 8010b30:	46d8      	mov	r8, fp
 8010b32:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8010b36:	460d      	mov	r5, r1
 8010b38:	465a      	mov	r2, fp
 8010b3a:	460b      	mov	r3, r1
 8010b3c:	4640      	mov	r0, r8
 8010b3e:	4649      	mov	r1, r9
 8010b40:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8010b44:	f7ef fd78 	bl	8000638 <__aeabi_dmul>
 8010b48:	465c      	mov	r4, fp
 8010b4a:	4680      	mov	r8, r0
 8010b4c:	4689      	mov	r9, r1
 8010b4e:	4b5e      	ldr	r3, [pc, #376]	@ (8010cc8 <__ieee754_pow+0x790>)
 8010b50:	2200      	movs	r2, #0
 8010b52:	4620      	mov	r0, r4
 8010b54:	4629      	mov	r1, r5
 8010b56:	f7ef fbb7 	bl	80002c8 <__aeabi_dsub>
 8010b5a:	4632      	mov	r2, r6
 8010b5c:	463b      	mov	r3, r7
 8010b5e:	f7ef fbb3 	bl	80002c8 <__aeabi_dsub>
 8010b62:	4602      	mov	r2, r0
 8010b64:	460b      	mov	r3, r1
 8010b66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010b6a:	f7ef fbad 	bl	80002c8 <__aeabi_dsub>
 8010b6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b72:	f7ef fd61 	bl	8000638 <__aeabi_dmul>
 8010b76:	4622      	mov	r2, r4
 8010b78:	4606      	mov	r6, r0
 8010b7a:	460f      	mov	r7, r1
 8010b7c:	462b      	mov	r3, r5
 8010b7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010b82:	f7ef fd59 	bl	8000638 <__aeabi_dmul>
 8010b86:	4602      	mov	r2, r0
 8010b88:	460b      	mov	r3, r1
 8010b8a:	4630      	mov	r0, r6
 8010b8c:	4639      	mov	r1, r7
 8010b8e:	f7ef fb9d 	bl	80002cc <__adddf3>
 8010b92:	4606      	mov	r6, r0
 8010b94:	460f      	mov	r7, r1
 8010b96:	4602      	mov	r2, r0
 8010b98:	460b      	mov	r3, r1
 8010b9a:	4640      	mov	r0, r8
 8010b9c:	4649      	mov	r1, r9
 8010b9e:	f7ef fb95 	bl	80002cc <__adddf3>
 8010ba2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8010ba6:	a33c      	add	r3, pc, #240	@ (adr r3, 8010c98 <__ieee754_pow+0x760>)
 8010ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bac:	4658      	mov	r0, fp
 8010bae:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8010bb2:	460d      	mov	r5, r1
 8010bb4:	f7ef fd40 	bl	8000638 <__aeabi_dmul>
 8010bb8:	465c      	mov	r4, fp
 8010bba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010bbe:	4642      	mov	r2, r8
 8010bc0:	464b      	mov	r3, r9
 8010bc2:	4620      	mov	r0, r4
 8010bc4:	4629      	mov	r1, r5
 8010bc6:	f7ef fb7f 	bl	80002c8 <__aeabi_dsub>
 8010bca:	4602      	mov	r2, r0
 8010bcc:	460b      	mov	r3, r1
 8010bce:	4630      	mov	r0, r6
 8010bd0:	4639      	mov	r1, r7
 8010bd2:	f7ef fb79 	bl	80002c8 <__aeabi_dsub>
 8010bd6:	a332      	add	r3, pc, #200	@ (adr r3, 8010ca0 <__ieee754_pow+0x768>)
 8010bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bdc:	f7ef fd2c 	bl	8000638 <__aeabi_dmul>
 8010be0:	a331      	add	r3, pc, #196	@ (adr r3, 8010ca8 <__ieee754_pow+0x770>)
 8010be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be6:	4606      	mov	r6, r0
 8010be8:	460f      	mov	r7, r1
 8010bea:	4620      	mov	r0, r4
 8010bec:	4629      	mov	r1, r5
 8010bee:	f7ef fd23 	bl	8000638 <__aeabi_dmul>
 8010bf2:	4602      	mov	r2, r0
 8010bf4:	460b      	mov	r3, r1
 8010bf6:	4630      	mov	r0, r6
 8010bf8:	4639      	mov	r1, r7
 8010bfa:	f7ef fb67 	bl	80002cc <__adddf3>
 8010bfe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010c00:	4b32      	ldr	r3, [pc, #200]	@ (8010ccc <__ieee754_pow+0x794>)
 8010c02:	4413      	add	r3, r2
 8010c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c08:	f7ef fb60 	bl	80002cc <__adddf3>
 8010c0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010c10:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010c12:	f7ef fca7 	bl	8000564 <__aeabi_i2d>
 8010c16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010c18:	4b2d      	ldr	r3, [pc, #180]	@ (8010cd0 <__ieee754_pow+0x798>)
 8010c1a:	4413      	add	r3, r2
 8010c1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010c20:	4606      	mov	r6, r0
 8010c22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c26:	460f      	mov	r7, r1
 8010c28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c2c:	f7ef fb4e 	bl	80002cc <__adddf3>
 8010c30:	4642      	mov	r2, r8
 8010c32:	464b      	mov	r3, r9
 8010c34:	f7ef fb4a 	bl	80002cc <__adddf3>
 8010c38:	4632      	mov	r2, r6
 8010c3a:	463b      	mov	r3, r7
 8010c3c:	f7ef fb46 	bl	80002cc <__adddf3>
 8010c40:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8010c44:	4632      	mov	r2, r6
 8010c46:	463b      	mov	r3, r7
 8010c48:	4658      	mov	r0, fp
 8010c4a:	460d      	mov	r5, r1
 8010c4c:	f7ef fb3c 	bl	80002c8 <__aeabi_dsub>
 8010c50:	4642      	mov	r2, r8
 8010c52:	464b      	mov	r3, r9
 8010c54:	f7ef fb38 	bl	80002c8 <__aeabi_dsub>
 8010c58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c5c:	f7ef fb34 	bl	80002c8 <__aeabi_dsub>
 8010c60:	465c      	mov	r4, fp
 8010c62:	4602      	mov	r2, r0
 8010c64:	e036      	b.n	8010cd4 <__ieee754_pow+0x79c>
 8010c66:	bf00      	nop
 8010c68:	4a454eef 	.word	0x4a454eef
 8010c6c:	3fca7e28 	.word	0x3fca7e28
 8010c70:	93c9db65 	.word	0x93c9db65
 8010c74:	3fcd864a 	.word	0x3fcd864a
 8010c78:	a91d4101 	.word	0xa91d4101
 8010c7c:	3fd17460 	.word	0x3fd17460
 8010c80:	518f264d 	.word	0x518f264d
 8010c84:	3fd55555 	.word	0x3fd55555
 8010c88:	db6fabff 	.word	0xdb6fabff
 8010c8c:	3fdb6db6 	.word	0x3fdb6db6
 8010c90:	33333303 	.word	0x33333303
 8010c94:	3fe33333 	.word	0x3fe33333
 8010c98:	e0000000 	.word	0xe0000000
 8010c9c:	3feec709 	.word	0x3feec709
 8010ca0:	dc3a03fd 	.word	0xdc3a03fd
 8010ca4:	3feec709 	.word	0x3feec709
 8010ca8:	145b01f5 	.word	0x145b01f5
 8010cac:	be3e2fe0 	.word	0xbe3e2fe0
 8010cb0:	7ff00000 	.word	0x7ff00000
 8010cb4:	43400000 	.word	0x43400000
 8010cb8:	0003988e 	.word	0x0003988e
 8010cbc:	000bb679 	.word	0x000bb679
 8010cc0:	08012770 	.word	0x08012770
 8010cc4:	3ff00000 	.word	0x3ff00000
 8010cc8:	40080000 	.word	0x40080000
 8010ccc:	08012750 	.word	0x08012750
 8010cd0:	08012760 	.word	0x08012760
 8010cd4:	460b      	mov	r3, r1
 8010cd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010cda:	e5d7      	b.n	801088c <__ieee754_pow+0x354>
 8010cdc:	f04f 0a01 	mov.w	sl, #1
 8010ce0:	e65e      	b.n	80109a0 <__ieee754_pow+0x468>
 8010ce2:	a3b4      	add	r3, pc, #720	@ (adr r3, 8010fb4 <__ieee754_pow+0xa7c>)
 8010ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce8:	4630      	mov	r0, r6
 8010cea:	4639      	mov	r1, r7
 8010cec:	f7ef faee 	bl	80002cc <__adddf3>
 8010cf0:	4642      	mov	r2, r8
 8010cf2:	e9cd 0100 	strd	r0, r1, [sp]
 8010cf6:	464b      	mov	r3, r9
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	4629      	mov	r1, r5
 8010cfc:	f7ef fae4 	bl	80002c8 <__aeabi_dsub>
 8010d00:	4602      	mov	r2, r0
 8010d02:	460b      	mov	r3, r1
 8010d04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d08:	f7ef ff26 	bl	8000b58 <__aeabi_dcmpgt>
 8010d0c:	2800      	cmp	r0, #0
 8010d0e:	f47f ae00 	bne.w	8010912 <__ieee754_pow+0x3da>
 8010d12:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8010d16:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010d1a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8010d1e:	fa43 fa0a 	asr.w	sl, r3, sl
 8010d22:	44da      	add	sl, fp
 8010d24:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010d28:	489d      	ldr	r0, [pc, #628]	@ (8010fa0 <__ieee754_pow+0xa68>)
 8010d2a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8010d2e:	4108      	asrs	r0, r1
 8010d30:	ea00 030a 	and.w	r3, r0, sl
 8010d34:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010d38:	f1c1 0114 	rsb	r1, r1, #20
 8010d3c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8010d40:	fa4a fa01 	asr.w	sl, sl, r1
 8010d44:	f1bb 0f00 	cmp.w	fp, #0
 8010d48:	4640      	mov	r0, r8
 8010d4a:	4649      	mov	r1, r9
 8010d4c:	f04f 0200 	mov.w	r2, #0
 8010d50:	bfb8      	it	lt
 8010d52:	f1ca 0a00 	rsblt	sl, sl, #0
 8010d56:	f7ef fab7 	bl	80002c8 <__aeabi_dsub>
 8010d5a:	4680      	mov	r8, r0
 8010d5c:	4689      	mov	r9, r1
 8010d5e:	4632      	mov	r2, r6
 8010d60:	463b      	mov	r3, r7
 8010d62:	4640      	mov	r0, r8
 8010d64:	4649      	mov	r1, r9
 8010d66:	f7ef fab1 	bl	80002cc <__adddf3>
 8010d6a:	2400      	movs	r4, #0
 8010d6c:	a37c      	add	r3, pc, #496	@ (adr r3, 8010f60 <__ieee754_pow+0xa28>)
 8010d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d72:	4620      	mov	r0, r4
 8010d74:	460d      	mov	r5, r1
 8010d76:	f7ef fc5f 	bl	8000638 <__aeabi_dmul>
 8010d7a:	4642      	mov	r2, r8
 8010d7c:	e9cd 0100 	strd	r0, r1, [sp]
 8010d80:	464b      	mov	r3, r9
 8010d82:	4620      	mov	r0, r4
 8010d84:	4629      	mov	r1, r5
 8010d86:	f7ef fa9f 	bl	80002c8 <__aeabi_dsub>
 8010d8a:	4602      	mov	r2, r0
 8010d8c:	460b      	mov	r3, r1
 8010d8e:	4630      	mov	r0, r6
 8010d90:	4639      	mov	r1, r7
 8010d92:	f7ef fa99 	bl	80002c8 <__aeabi_dsub>
 8010d96:	a374      	add	r3, pc, #464	@ (adr r3, 8010f68 <__ieee754_pow+0xa30>)
 8010d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d9c:	f7ef fc4c 	bl	8000638 <__aeabi_dmul>
 8010da0:	a373      	add	r3, pc, #460	@ (adr r3, 8010f70 <__ieee754_pow+0xa38>)
 8010da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da6:	4680      	mov	r8, r0
 8010da8:	4689      	mov	r9, r1
 8010daa:	4620      	mov	r0, r4
 8010dac:	4629      	mov	r1, r5
 8010dae:	f7ef fc43 	bl	8000638 <__aeabi_dmul>
 8010db2:	4602      	mov	r2, r0
 8010db4:	460b      	mov	r3, r1
 8010db6:	4640      	mov	r0, r8
 8010db8:	4649      	mov	r1, r9
 8010dba:	f7ef fa87 	bl	80002cc <__adddf3>
 8010dbe:	4604      	mov	r4, r0
 8010dc0:	460d      	mov	r5, r1
 8010dc2:	4602      	mov	r2, r0
 8010dc4:	460b      	mov	r3, r1
 8010dc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010dca:	f7ef fa7f 	bl	80002cc <__adddf3>
 8010dce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010dd2:	4680      	mov	r8, r0
 8010dd4:	4689      	mov	r9, r1
 8010dd6:	f7ef fa77 	bl	80002c8 <__aeabi_dsub>
 8010dda:	4602      	mov	r2, r0
 8010ddc:	460b      	mov	r3, r1
 8010dde:	4620      	mov	r0, r4
 8010de0:	4629      	mov	r1, r5
 8010de2:	f7ef fa71 	bl	80002c8 <__aeabi_dsub>
 8010de6:	4642      	mov	r2, r8
 8010de8:	4606      	mov	r6, r0
 8010dea:	460f      	mov	r7, r1
 8010dec:	464b      	mov	r3, r9
 8010dee:	4640      	mov	r0, r8
 8010df0:	4649      	mov	r1, r9
 8010df2:	f7ef fc21 	bl	8000638 <__aeabi_dmul>
 8010df6:	a360      	add	r3, pc, #384	@ (adr r3, 8010f78 <__ieee754_pow+0xa40>)
 8010df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dfc:	4604      	mov	r4, r0
 8010dfe:	460d      	mov	r5, r1
 8010e00:	f7ef fc1a 	bl	8000638 <__aeabi_dmul>
 8010e04:	a35e      	add	r3, pc, #376	@ (adr r3, 8010f80 <__ieee754_pow+0xa48>)
 8010e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e0a:	f7ef fa5d 	bl	80002c8 <__aeabi_dsub>
 8010e0e:	4622      	mov	r2, r4
 8010e10:	462b      	mov	r3, r5
 8010e12:	f7ef fc11 	bl	8000638 <__aeabi_dmul>
 8010e16:	a35c      	add	r3, pc, #368	@ (adr r3, 8010f88 <__ieee754_pow+0xa50>)
 8010e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e1c:	f7ef fa56 	bl	80002cc <__adddf3>
 8010e20:	4622      	mov	r2, r4
 8010e22:	462b      	mov	r3, r5
 8010e24:	f7ef fc08 	bl	8000638 <__aeabi_dmul>
 8010e28:	a359      	add	r3, pc, #356	@ (adr r3, 8010f90 <__ieee754_pow+0xa58>)
 8010e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e2e:	f7ef fa4b 	bl	80002c8 <__aeabi_dsub>
 8010e32:	4622      	mov	r2, r4
 8010e34:	462b      	mov	r3, r5
 8010e36:	f7ef fbff 	bl	8000638 <__aeabi_dmul>
 8010e3a:	a357      	add	r3, pc, #348	@ (adr r3, 8010f98 <__ieee754_pow+0xa60>)
 8010e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e40:	f7ef fa44 	bl	80002cc <__adddf3>
 8010e44:	4622      	mov	r2, r4
 8010e46:	462b      	mov	r3, r5
 8010e48:	f7ef fbf6 	bl	8000638 <__aeabi_dmul>
 8010e4c:	4602      	mov	r2, r0
 8010e4e:	460b      	mov	r3, r1
 8010e50:	4640      	mov	r0, r8
 8010e52:	4649      	mov	r1, r9
 8010e54:	f7ef fa38 	bl	80002c8 <__aeabi_dsub>
 8010e58:	4604      	mov	r4, r0
 8010e5a:	460d      	mov	r5, r1
 8010e5c:	4602      	mov	r2, r0
 8010e5e:	460b      	mov	r3, r1
 8010e60:	4640      	mov	r0, r8
 8010e62:	4649      	mov	r1, r9
 8010e64:	f7ef fbe8 	bl	8000638 <__aeabi_dmul>
 8010e68:	2200      	movs	r2, #0
 8010e6a:	e9cd 0100 	strd	r0, r1, [sp]
 8010e6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010e72:	4620      	mov	r0, r4
 8010e74:	4629      	mov	r1, r5
 8010e76:	f7ef fa27 	bl	80002c8 <__aeabi_dsub>
 8010e7a:	4602      	mov	r2, r0
 8010e7c:	460b      	mov	r3, r1
 8010e7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e82:	f7ef fd03 	bl	800088c <__aeabi_ddiv>
 8010e86:	4632      	mov	r2, r6
 8010e88:	4604      	mov	r4, r0
 8010e8a:	460d      	mov	r5, r1
 8010e8c:	463b      	mov	r3, r7
 8010e8e:	4640      	mov	r0, r8
 8010e90:	4649      	mov	r1, r9
 8010e92:	f7ef fbd1 	bl	8000638 <__aeabi_dmul>
 8010e96:	4632      	mov	r2, r6
 8010e98:	463b      	mov	r3, r7
 8010e9a:	f7ef fa17 	bl	80002cc <__adddf3>
 8010e9e:	4602      	mov	r2, r0
 8010ea0:	460b      	mov	r3, r1
 8010ea2:	4620      	mov	r0, r4
 8010ea4:	4629      	mov	r1, r5
 8010ea6:	f7ef fa0f 	bl	80002c8 <__aeabi_dsub>
 8010eaa:	4642      	mov	r2, r8
 8010eac:	464b      	mov	r3, r9
 8010eae:	f7ef fa0b 	bl	80002c8 <__aeabi_dsub>
 8010eb2:	460b      	mov	r3, r1
 8010eb4:	4602      	mov	r2, r0
 8010eb6:	493b      	ldr	r1, [pc, #236]	@ (8010fa4 <__ieee754_pow+0xa6c>)
 8010eb8:	2000      	movs	r0, #0
 8010eba:	f7ef fa05 	bl	80002c8 <__aeabi_dsub>
 8010ebe:	ec41 0b10 	vmov	d0, r0, r1
 8010ec2:	ee10 3a90 	vmov	r3, s1
 8010ec6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010eca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010ece:	da30      	bge.n	8010f32 <__ieee754_pow+0x9fa>
 8010ed0:	4650      	mov	r0, sl
 8010ed2:	f000 fdcd 	bl	8011a70 <scalbn>
 8010ed6:	ec51 0b10 	vmov	r0, r1, d0
 8010eda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ede:	f7ff bbd2 	b.w	8010686 <__ieee754_pow+0x14e>
 8010ee2:	4c31      	ldr	r4, [pc, #196]	@ (8010fa8 <__ieee754_pow+0xa70>)
 8010ee4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010ee8:	42a3      	cmp	r3, r4
 8010eea:	d91a      	bls.n	8010f22 <__ieee754_pow+0x9ea>
 8010eec:	4b2f      	ldr	r3, [pc, #188]	@ (8010fac <__ieee754_pow+0xa74>)
 8010eee:	440b      	add	r3, r1
 8010ef0:	4303      	orrs	r3, r0
 8010ef2:	d009      	beq.n	8010f08 <__ieee754_pow+0x9d0>
 8010ef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	2300      	movs	r3, #0
 8010efc:	f7ef fe0e 	bl	8000b1c <__aeabi_dcmplt>
 8010f00:	3800      	subs	r0, #0
 8010f02:	bf18      	it	ne
 8010f04:	2001      	movne	r0, #1
 8010f06:	e42b      	b.n	8010760 <__ieee754_pow+0x228>
 8010f08:	4642      	mov	r2, r8
 8010f0a:	464b      	mov	r3, r9
 8010f0c:	f7ef f9dc 	bl	80002c8 <__aeabi_dsub>
 8010f10:	4632      	mov	r2, r6
 8010f12:	463b      	mov	r3, r7
 8010f14:	f7ef fe16 	bl	8000b44 <__aeabi_dcmpge>
 8010f18:	2800      	cmp	r0, #0
 8010f1a:	d1eb      	bne.n	8010ef4 <__ieee754_pow+0x9bc>
 8010f1c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8010fbc <__ieee754_pow+0xa84>
 8010f20:	e6f7      	b.n	8010d12 <__ieee754_pow+0x7da>
 8010f22:	469a      	mov	sl, r3
 8010f24:	4b22      	ldr	r3, [pc, #136]	@ (8010fb0 <__ieee754_pow+0xa78>)
 8010f26:	459a      	cmp	sl, r3
 8010f28:	f63f aef3 	bhi.w	8010d12 <__ieee754_pow+0x7da>
 8010f2c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010f30:	e715      	b.n	8010d5e <__ieee754_pow+0x826>
 8010f32:	ec51 0b10 	vmov	r0, r1, d0
 8010f36:	4619      	mov	r1, r3
 8010f38:	e7cf      	b.n	8010eda <__ieee754_pow+0x9a2>
 8010f3a:	491a      	ldr	r1, [pc, #104]	@ (8010fa4 <__ieee754_pow+0xa6c>)
 8010f3c:	2000      	movs	r0, #0
 8010f3e:	f7ff bb18 	b.w	8010572 <__ieee754_pow+0x3a>
 8010f42:	2000      	movs	r0, #0
 8010f44:	2100      	movs	r1, #0
 8010f46:	f7ff bb14 	b.w	8010572 <__ieee754_pow+0x3a>
 8010f4a:	4630      	mov	r0, r6
 8010f4c:	4639      	mov	r1, r7
 8010f4e:	f7ff bb10 	b.w	8010572 <__ieee754_pow+0x3a>
 8010f52:	460c      	mov	r4, r1
 8010f54:	f7ff bb5e 	b.w	8010614 <__ieee754_pow+0xdc>
 8010f58:	2400      	movs	r4, #0
 8010f5a:	f7ff bb49 	b.w	80105f0 <__ieee754_pow+0xb8>
 8010f5e:	bf00      	nop
 8010f60:	00000000 	.word	0x00000000
 8010f64:	3fe62e43 	.word	0x3fe62e43
 8010f68:	fefa39ef 	.word	0xfefa39ef
 8010f6c:	3fe62e42 	.word	0x3fe62e42
 8010f70:	0ca86c39 	.word	0x0ca86c39
 8010f74:	be205c61 	.word	0xbe205c61
 8010f78:	72bea4d0 	.word	0x72bea4d0
 8010f7c:	3e663769 	.word	0x3e663769
 8010f80:	c5d26bf1 	.word	0xc5d26bf1
 8010f84:	3ebbbd41 	.word	0x3ebbbd41
 8010f88:	af25de2c 	.word	0xaf25de2c
 8010f8c:	3f11566a 	.word	0x3f11566a
 8010f90:	16bebd93 	.word	0x16bebd93
 8010f94:	3f66c16c 	.word	0x3f66c16c
 8010f98:	5555553e 	.word	0x5555553e
 8010f9c:	3fc55555 	.word	0x3fc55555
 8010fa0:	fff00000 	.word	0xfff00000
 8010fa4:	3ff00000 	.word	0x3ff00000
 8010fa8:	4090cbff 	.word	0x4090cbff
 8010fac:	3f6f3400 	.word	0x3f6f3400
 8010fb0:	3fe00000 	.word	0x3fe00000
 8010fb4:	652b82fe 	.word	0x652b82fe
 8010fb8:	3c971547 	.word	0x3c971547
 8010fbc:	4090cc00 	.word	0x4090cc00

08010fc0 <__ieee754_rem_pio2>:
 8010fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc4:	ec57 6b10 	vmov	r6, r7, d0
 8010fc8:	4bc5      	ldr	r3, [pc, #788]	@ (80112e0 <__ieee754_rem_pio2+0x320>)
 8010fca:	b08d      	sub	sp, #52	@ 0x34
 8010fcc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010fd0:	4598      	cmp	r8, r3
 8010fd2:	4604      	mov	r4, r0
 8010fd4:	9704      	str	r7, [sp, #16]
 8010fd6:	d807      	bhi.n	8010fe8 <__ieee754_rem_pio2+0x28>
 8010fd8:	2200      	movs	r2, #0
 8010fda:	2300      	movs	r3, #0
 8010fdc:	ed80 0b00 	vstr	d0, [r0]
 8010fe0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010fe4:	2500      	movs	r5, #0
 8010fe6:	e028      	b.n	801103a <__ieee754_rem_pio2+0x7a>
 8010fe8:	4bbe      	ldr	r3, [pc, #760]	@ (80112e4 <__ieee754_rem_pio2+0x324>)
 8010fea:	4598      	cmp	r8, r3
 8010fec:	d878      	bhi.n	80110e0 <__ieee754_rem_pio2+0x120>
 8010fee:	9b04      	ldr	r3, [sp, #16]
 8010ff0:	4dbd      	ldr	r5, [pc, #756]	@ (80112e8 <__ieee754_rem_pio2+0x328>)
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	4630      	mov	r0, r6
 8010ff6:	a3ac      	add	r3, pc, #688	@ (adr r3, 80112a8 <__ieee754_rem_pio2+0x2e8>)
 8010ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ffc:	4639      	mov	r1, r7
 8010ffe:	dd38      	ble.n	8011072 <__ieee754_rem_pio2+0xb2>
 8011000:	f7ef f962 	bl	80002c8 <__aeabi_dsub>
 8011004:	45a8      	cmp	r8, r5
 8011006:	4606      	mov	r6, r0
 8011008:	460f      	mov	r7, r1
 801100a:	d01a      	beq.n	8011042 <__ieee754_rem_pio2+0x82>
 801100c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80112b0 <__ieee754_rem_pio2+0x2f0>)
 801100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011012:	f7ef f959 	bl	80002c8 <__aeabi_dsub>
 8011016:	4602      	mov	r2, r0
 8011018:	460b      	mov	r3, r1
 801101a:	4680      	mov	r8, r0
 801101c:	4689      	mov	r9, r1
 801101e:	4630      	mov	r0, r6
 8011020:	4639      	mov	r1, r7
 8011022:	f7ef f951 	bl	80002c8 <__aeabi_dsub>
 8011026:	a3a2      	add	r3, pc, #648	@ (adr r3, 80112b0 <__ieee754_rem_pio2+0x2f0>)
 8011028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801102c:	f7ef f94c 	bl	80002c8 <__aeabi_dsub>
 8011030:	e9c4 8900 	strd	r8, r9, [r4]
 8011034:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011038:	2501      	movs	r5, #1
 801103a:	4628      	mov	r0, r5
 801103c:	b00d      	add	sp, #52	@ 0x34
 801103e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011042:	a39d      	add	r3, pc, #628	@ (adr r3, 80112b8 <__ieee754_rem_pio2+0x2f8>)
 8011044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011048:	f7ef f93e 	bl	80002c8 <__aeabi_dsub>
 801104c:	a39c      	add	r3, pc, #624	@ (adr r3, 80112c0 <__ieee754_rem_pio2+0x300>)
 801104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011052:	4606      	mov	r6, r0
 8011054:	460f      	mov	r7, r1
 8011056:	f7ef f937 	bl	80002c8 <__aeabi_dsub>
 801105a:	4602      	mov	r2, r0
 801105c:	460b      	mov	r3, r1
 801105e:	4680      	mov	r8, r0
 8011060:	4689      	mov	r9, r1
 8011062:	4630      	mov	r0, r6
 8011064:	4639      	mov	r1, r7
 8011066:	f7ef f92f 	bl	80002c8 <__aeabi_dsub>
 801106a:	a395      	add	r3, pc, #596	@ (adr r3, 80112c0 <__ieee754_rem_pio2+0x300>)
 801106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011070:	e7dc      	b.n	801102c <__ieee754_rem_pio2+0x6c>
 8011072:	f7ef f92b 	bl	80002cc <__adddf3>
 8011076:	45a8      	cmp	r8, r5
 8011078:	4606      	mov	r6, r0
 801107a:	460f      	mov	r7, r1
 801107c:	d018      	beq.n	80110b0 <__ieee754_rem_pio2+0xf0>
 801107e:	a38c      	add	r3, pc, #560	@ (adr r3, 80112b0 <__ieee754_rem_pio2+0x2f0>)
 8011080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011084:	f7ef f922 	bl	80002cc <__adddf3>
 8011088:	4602      	mov	r2, r0
 801108a:	460b      	mov	r3, r1
 801108c:	4680      	mov	r8, r0
 801108e:	4689      	mov	r9, r1
 8011090:	4630      	mov	r0, r6
 8011092:	4639      	mov	r1, r7
 8011094:	f7ef f918 	bl	80002c8 <__aeabi_dsub>
 8011098:	a385      	add	r3, pc, #532	@ (adr r3, 80112b0 <__ieee754_rem_pio2+0x2f0>)
 801109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801109e:	f7ef f915 	bl	80002cc <__adddf3>
 80110a2:	f04f 35ff 	mov.w	r5, #4294967295
 80110a6:	e9c4 8900 	strd	r8, r9, [r4]
 80110aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80110ae:	e7c4      	b.n	801103a <__ieee754_rem_pio2+0x7a>
 80110b0:	a381      	add	r3, pc, #516	@ (adr r3, 80112b8 <__ieee754_rem_pio2+0x2f8>)
 80110b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b6:	f7ef f909 	bl	80002cc <__adddf3>
 80110ba:	a381      	add	r3, pc, #516	@ (adr r3, 80112c0 <__ieee754_rem_pio2+0x300>)
 80110bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c0:	4606      	mov	r6, r0
 80110c2:	460f      	mov	r7, r1
 80110c4:	f7ef f902 	bl	80002cc <__adddf3>
 80110c8:	4602      	mov	r2, r0
 80110ca:	460b      	mov	r3, r1
 80110cc:	4680      	mov	r8, r0
 80110ce:	4689      	mov	r9, r1
 80110d0:	4630      	mov	r0, r6
 80110d2:	4639      	mov	r1, r7
 80110d4:	f7ef f8f8 	bl	80002c8 <__aeabi_dsub>
 80110d8:	a379      	add	r3, pc, #484	@ (adr r3, 80112c0 <__ieee754_rem_pio2+0x300>)
 80110da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110de:	e7de      	b.n	801109e <__ieee754_rem_pio2+0xde>
 80110e0:	4b82      	ldr	r3, [pc, #520]	@ (80112ec <__ieee754_rem_pio2+0x32c>)
 80110e2:	4598      	cmp	r8, r3
 80110e4:	f200 80d1 	bhi.w	801128a <__ieee754_rem_pio2+0x2ca>
 80110e8:	f000 f966 	bl	80113b8 <fabs>
 80110ec:	ec57 6b10 	vmov	r6, r7, d0
 80110f0:	a375      	add	r3, pc, #468	@ (adr r3, 80112c8 <__ieee754_rem_pio2+0x308>)
 80110f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f6:	4630      	mov	r0, r6
 80110f8:	4639      	mov	r1, r7
 80110fa:	f7ef fa9d 	bl	8000638 <__aeabi_dmul>
 80110fe:	4b7c      	ldr	r3, [pc, #496]	@ (80112f0 <__ieee754_rem_pio2+0x330>)
 8011100:	2200      	movs	r2, #0
 8011102:	f7ef f8e3 	bl	80002cc <__adddf3>
 8011106:	f7ef fd47 	bl	8000b98 <__aeabi_d2iz>
 801110a:	4605      	mov	r5, r0
 801110c:	f7ef fa2a 	bl	8000564 <__aeabi_i2d>
 8011110:	4602      	mov	r2, r0
 8011112:	460b      	mov	r3, r1
 8011114:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011118:	a363      	add	r3, pc, #396	@ (adr r3, 80112a8 <__ieee754_rem_pio2+0x2e8>)
 801111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111e:	f7ef fa8b 	bl	8000638 <__aeabi_dmul>
 8011122:	4602      	mov	r2, r0
 8011124:	460b      	mov	r3, r1
 8011126:	4630      	mov	r0, r6
 8011128:	4639      	mov	r1, r7
 801112a:	f7ef f8cd 	bl	80002c8 <__aeabi_dsub>
 801112e:	a360      	add	r3, pc, #384	@ (adr r3, 80112b0 <__ieee754_rem_pio2+0x2f0>)
 8011130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011134:	4682      	mov	sl, r0
 8011136:	468b      	mov	fp, r1
 8011138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801113c:	f7ef fa7c 	bl	8000638 <__aeabi_dmul>
 8011140:	2d1f      	cmp	r5, #31
 8011142:	4606      	mov	r6, r0
 8011144:	460f      	mov	r7, r1
 8011146:	dc0c      	bgt.n	8011162 <__ieee754_rem_pio2+0x1a2>
 8011148:	4b6a      	ldr	r3, [pc, #424]	@ (80112f4 <__ieee754_rem_pio2+0x334>)
 801114a:	1e6a      	subs	r2, r5, #1
 801114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011150:	4543      	cmp	r3, r8
 8011152:	d006      	beq.n	8011162 <__ieee754_rem_pio2+0x1a2>
 8011154:	4632      	mov	r2, r6
 8011156:	463b      	mov	r3, r7
 8011158:	4650      	mov	r0, sl
 801115a:	4659      	mov	r1, fp
 801115c:	f7ef f8b4 	bl	80002c8 <__aeabi_dsub>
 8011160:	e00e      	b.n	8011180 <__ieee754_rem_pio2+0x1c0>
 8011162:	463b      	mov	r3, r7
 8011164:	4632      	mov	r2, r6
 8011166:	4650      	mov	r0, sl
 8011168:	4659      	mov	r1, fp
 801116a:	f7ef f8ad 	bl	80002c8 <__aeabi_dsub>
 801116e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011172:	9305      	str	r3, [sp, #20]
 8011174:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011178:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801117c:	2b10      	cmp	r3, #16
 801117e:	dc02      	bgt.n	8011186 <__ieee754_rem_pio2+0x1c6>
 8011180:	e9c4 0100 	strd	r0, r1, [r4]
 8011184:	e039      	b.n	80111fa <__ieee754_rem_pio2+0x23a>
 8011186:	a34c      	add	r3, pc, #304	@ (adr r3, 80112b8 <__ieee754_rem_pio2+0x2f8>)
 8011188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801118c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011190:	f7ef fa52 	bl	8000638 <__aeabi_dmul>
 8011194:	4606      	mov	r6, r0
 8011196:	460f      	mov	r7, r1
 8011198:	4602      	mov	r2, r0
 801119a:	460b      	mov	r3, r1
 801119c:	4650      	mov	r0, sl
 801119e:	4659      	mov	r1, fp
 80111a0:	f7ef f892 	bl	80002c8 <__aeabi_dsub>
 80111a4:	4602      	mov	r2, r0
 80111a6:	460b      	mov	r3, r1
 80111a8:	4680      	mov	r8, r0
 80111aa:	4689      	mov	r9, r1
 80111ac:	4650      	mov	r0, sl
 80111ae:	4659      	mov	r1, fp
 80111b0:	f7ef f88a 	bl	80002c8 <__aeabi_dsub>
 80111b4:	4632      	mov	r2, r6
 80111b6:	463b      	mov	r3, r7
 80111b8:	f7ef f886 	bl	80002c8 <__aeabi_dsub>
 80111bc:	a340      	add	r3, pc, #256	@ (adr r3, 80112c0 <__ieee754_rem_pio2+0x300>)
 80111be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111c2:	4606      	mov	r6, r0
 80111c4:	460f      	mov	r7, r1
 80111c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80111ca:	f7ef fa35 	bl	8000638 <__aeabi_dmul>
 80111ce:	4632      	mov	r2, r6
 80111d0:	463b      	mov	r3, r7
 80111d2:	f7ef f879 	bl	80002c8 <__aeabi_dsub>
 80111d6:	4602      	mov	r2, r0
 80111d8:	460b      	mov	r3, r1
 80111da:	4606      	mov	r6, r0
 80111dc:	460f      	mov	r7, r1
 80111de:	4640      	mov	r0, r8
 80111e0:	4649      	mov	r1, r9
 80111e2:	f7ef f871 	bl	80002c8 <__aeabi_dsub>
 80111e6:	9a05      	ldr	r2, [sp, #20]
 80111e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80111ec:	1ad3      	subs	r3, r2, r3
 80111ee:	2b31      	cmp	r3, #49	@ 0x31
 80111f0:	dc20      	bgt.n	8011234 <__ieee754_rem_pio2+0x274>
 80111f2:	e9c4 0100 	strd	r0, r1, [r4]
 80111f6:	46c2      	mov	sl, r8
 80111f8:	46cb      	mov	fp, r9
 80111fa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80111fe:	4650      	mov	r0, sl
 8011200:	4642      	mov	r2, r8
 8011202:	464b      	mov	r3, r9
 8011204:	4659      	mov	r1, fp
 8011206:	f7ef f85f 	bl	80002c8 <__aeabi_dsub>
 801120a:	463b      	mov	r3, r7
 801120c:	4632      	mov	r2, r6
 801120e:	f7ef f85b 	bl	80002c8 <__aeabi_dsub>
 8011212:	9b04      	ldr	r3, [sp, #16]
 8011214:	2b00      	cmp	r3, #0
 8011216:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801121a:	f6bf af0e 	bge.w	801103a <__ieee754_rem_pio2+0x7a>
 801121e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8011222:	6063      	str	r3, [r4, #4]
 8011224:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011228:	f8c4 8000 	str.w	r8, [r4]
 801122c:	60a0      	str	r0, [r4, #8]
 801122e:	60e3      	str	r3, [r4, #12]
 8011230:	426d      	negs	r5, r5
 8011232:	e702      	b.n	801103a <__ieee754_rem_pio2+0x7a>
 8011234:	a326      	add	r3, pc, #152	@ (adr r3, 80112d0 <__ieee754_rem_pio2+0x310>)
 8011236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801123a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801123e:	f7ef f9fb 	bl	8000638 <__aeabi_dmul>
 8011242:	4606      	mov	r6, r0
 8011244:	460f      	mov	r7, r1
 8011246:	4602      	mov	r2, r0
 8011248:	460b      	mov	r3, r1
 801124a:	4640      	mov	r0, r8
 801124c:	4649      	mov	r1, r9
 801124e:	f7ef f83b 	bl	80002c8 <__aeabi_dsub>
 8011252:	4602      	mov	r2, r0
 8011254:	460b      	mov	r3, r1
 8011256:	4682      	mov	sl, r0
 8011258:	468b      	mov	fp, r1
 801125a:	4640      	mov	r0, r8
 801125c:	4649      	mov	r1, r9
 801125e:	f7ef f833 	bl	80002c8 <__aeabi_dsub>
 8011262:	4632      	mov	r2, r6
 8011264:	463b      	mov	r3, r7
 8011266:	f7ef f82f 	bl	80002c8 <__aeabi_dsub>
 801126a:	a31b      	add	r3, pc, #108	@ (adr r3, 80112d8 <__ieee754_rem_pio2+0x318>)
 801126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011270:	4606      	mov	r6, r0
 8011272:	460f      	mov	r7, r1
 8011274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011278:	f7ef f9de 	bl	8000638 <__aeabi_dmul>
 801127c:	4632      	mov	r2, r6
 801127e:	463b      	mov	r3, r7
 8011280:	f7ef f822 	bl	80002c8 <__aeabi_dsub>
 8011284:	4606      	mov	r6, r0
 8011286:	460f      	mov	r7, r1
 8011288:	e764      	b.n	8011154 <__ieee754_rem_pio2+0x194>
 801128a:	4b1b      	ldr	r3, [pc, #108]	@ (80112f8 <__ieee754_rem_pio2+0x338>)
 801128c:	4598      	cmp	r8, r3
 801128e:	d935      	bls.n	80112fc <__ieee754_rem_pio2+0x33c>
 8011290:	4632      	mov	r2, r6
 8011292:	463b      	mov	r3, r7
 8011294:	4630      	mov	r0, r6
 8011296:	4639      	mov	r1, r7
 8011298:	f7ef f816 	bl	80002c8 <__aeabi_dsub>
 801129c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80112a0:	e9c4 0100 	strd	r0, r1, [r4]
 80112a4:	e69e      	b.n	8010fe4 <__ieee754_rem_pio2+0x24>
 80112a6:	bf00      	nop
 80112a8:	54400000 	.word	0x54400000
 80112ac:	3ff921fb 	.word	0x3ff921fb
 80112b0:	1a626331 	.word	0x1a626331
 80112b4:	3dd0b461 	.word	0x3dd0b461
 80112b8:	1a600000 	.word	0x1a600000
 80112bc:	3dd0b461 	.word	0x3dd0b461
 80112c0:	2e037073 	.word	0x2e037073
 80112c4:	3ba3198a 	.word	0x3ba3198a
 80112c8:	6dc9c883 	.word	0x6dc9c883
 80112cc:	3fe45f30 	.word	0x3fe45f30
 80112d0:	2e000000 	.word	0x2e000000
 80112d4:	3ba3198a 	.word	0x3ba3198a
 80112d8:	252049c1 	.word	0x252049c1
 80112dc:	397b839a 	.word	0x397b839a
 80112e0:	3fe921fb 	.word	0x3fe921fb
 80112e4:	4002d97b 	.word	0x4002d97b
 80112e8:	3ff921fb 	.word	0x3ff921fb
 80112ec:	413921fb 	.word	0x413921fb
 80112f0:	3fe00000 	.word	0x3fe00000
 80112f4:	08012780 	.word	0x08012780
 80112f8:	7fefffff 	.word	0x7fefffff
 80112fc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011300:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8011304:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011308:	4630      	mov	r0, r6
 801130a:	460f      	mov	r7, r1
 801130c:	f7ef fc44 	bl	8000b98 <__aeabi_d2iz>
 8011310:	f7ef f928 	bl	8000564 <__aeabi_i2d>
 8011314:	4602      	mov	r2, r0
 8011316:	460b      	mov	r3, r1
 8011318:	4630      	mov	r0, r6
 801131a:	4639      	mov	r1, r7
 801131c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011320:	f7ee ffd2 	bl	80002c8 <__aeabi_dsub>
 8011324:	4b22      	ldr	r3, [pc, #136]	@ (80113b0 <__ieee754_rem_pio2+0x3f0>)
 8011326:	2200      	movs	r2, #0
 8011328:	f7ef f986 	bl	8000638 <__aeabi_dmul>
 801132c:	460f      	mov	r7, r1
 801132e:	4606      	mov	r6, r0
 8011330:	f7ef fc32 	bl	8000b98 <__aeabi_d2iz>
 8011334:	f7ef f916 	bl	8000564 <__aeabi_i2d>
 8011338:	4602      	mov	r2, r0
 801133a:	460b      	mov	r3, r1
 801133c:	4630      	mov	r0, r6
 801133e:	4639      	mov	r1, r7
 8011340:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011344:	f7ee ffc0 	bl	80002c8 <__aeabi_dsub>
 8011348:	4b19      	ldr	r3, [pc, #100]	@ (80113b0 <__ieee754_rem_pio2+0x3f0>)
 801134a:	2200      	movs	r2, #0
 801134c:	f7ef f974 	bl	8000638 <__aeabi_dmul>
 8011350:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8011354:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8011358:	f04f 0803 	mov.w	r8, #3
 801135c:	2600      	movs	r6, #0
 801135e:	2700      	movs	r7, #0
 8011360:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011364:	4632      	mov	r2, r6
 8011366:	463b      	mov	r3, r7
 8011368:	46c2      	mov	sl, r8
 801136a:	f108 38ff 	add.w	r8, r8, #4294967295
 801136e:	f7ef fbcb 	bl	8000b08 <__aeabi_dcmpeq>
 8011372:	2800      	cmp	r0, #0
 8011374:	d1f4      	bne.n	8011360 <__ieee754_rem_pio2+0x3a0>
 8011376:	4b0f      	ldr	r3, [pc, #60]	@ (80113b4 <__ieee754_rem_pio2+0x3f4>)
 8011378:	9301      	str	r3, [sp, #4]
 801137a:	2302      	movs	r3, #2
 801137c:	9300      	str	r3, [sp, #0]
 801137e:	462a      	mov	r2, r5
 8011380:	4653      	mov	r3, sl
 8011382:	4621      	mov	r1, r4
 8011384:	a806      	add	r0, sp, #24
 8011386:	f000 fc2f 	bl	8011be8 <__kernel_rem_pio2>
 801138a:	9b04      	ldr	r3, [sp, #16]
 801138c:	2b00      	cmp	r3, #0
 801138e:	4605      	mov	r5, r0
 8011390:	f6bf ae53 	bge.w	801103a <__ieee754_rem_pio2+0x7a>
 8011394:	e9d4 2100 	ldrd	r2, r1, [r4]
 8011398:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801139c:	e9c4 2300 	strd	r2, r3, [r4]
 80113a0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80113a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80113a8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80113ac:	e740      	b.n	8011230 <__ieee754_rem_pio2+0x270>
 80113ae:	bf00      	nop
 80113b0:	41700000 	.word	0x41700000
 80113b4:	08012800 	.word	0x08012800

080113b8 <fabs>:
 80113b8:	ec51 0b10 	vmov	r0, r1, d0
 80113bc:	4602      	mov	r2, r0
 80113be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80113c2:	ec43 2b10 	vmov	d0, r2, r3
 80113c6:	4770      	bx	lr

080113c8 <__ieee754_acosf>:
 80113c8:	b508      	push	{r3, lr}
 80113ca:	ee10 3a10 	vmov	r3, s0
 80113ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80113d2:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80113d6:	ed2d 8b0c 	vpush	{d8-d13}
 80113da:	d10a      	bne.n	80113f2 <__ieee754_acosf+0x2a>
 80113dc:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8011574 <__ieee754_acosf+0x1ac>
 80113e0:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8011578 <__ieee754_acosf+0x1b0>
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	bfc8      	it	gt
 80113e8:	eeb0 0a67 	vmovgt.f32	s0, s15
 80113ec:	ecbd 8b0c 	vpop	{d8-d13}
 80113f0:	bd08      	pop	{r3, pc}
 80113f2:	d904      	bls.n	80113fe <__ieee754_acosf+0x36>
 80113f4:	ee30 8a40 	vsub.f32	s16, s0, s0
 80113f8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80113fc:	e7f6      	b.n	80113ec <__ieee754_acosf+0x24>
 80113fe:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8011402:	d23c      	bcs.n	801147e <__ieee754_acosf+0xb6>
 8011404:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8011408:	f240 80b1 	bls.w	801156e <__ieee754_acosf+0x1a6>
 801140c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011410:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 801157c <__ieee754_acosf+0x1b4>
 8011414:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8011580 <__ieee754_acosf+0x1b8>
 8011418:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 8011584 <__ieee754_acosf+0x1bc>
 801141c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011420:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8011588 <__ieee754_acosf+0x1c0>
 8011424:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011428:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801158c <__ieee754_acosf+0x1c4>
 801142c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011430:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8011590 <__ieee754_acosf+0x1c8>
 8011434:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011438:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8011594 <__ieee754_acosf+0x1cc>
 801143c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011440:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8011598 <__ieee754_acosf+0x1d0>
 8011444:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8011448:	eddf 6a54 	vldr	s13, [pc, #336]	@ 801159c <__ieee754_acosf+0x1d4>
 801144c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011450:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 80115a0 <__ieee754_acosf+0x1d8>
 8011454:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011458:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801145c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011460:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011464:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 80115a4 <__ieee754_acosf+0x1dc>
 8011468:	ee87 6a26 	vdiv.f32	s12, s14, s13
 801146c:	eee0 7a46 	vfms.f32	s15, s0, s12
 8011470:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011474:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 80115a8 <__ieee754_acosf+0x1e0>
 8011478:	ee30 0a67 	vsub.f32	s0, s0, s15
 801147c:	e7b6      	b.n	80113ec <__ieee754_acosf+0x24>
 801147e:	2b00      	cmp	r3, #0
 8011480:	eddf da3e 	vldr	s27, [pc, #248]	@ 801157c <__ieee754_acosf+0x1b4>
 8011484:	eddf ca3e 	vldr	s25, [pc, #248]	@ 8011580 <__ieee754_acosf+0x1b8>
 8011488:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 8011588 <__ieee754_acosf+0x1c0>
 801148c:	eddf ba3f 	vldr	s23, [pc, #252]	@ 801158c <__ieee754_acosf+0x1c4>
 8011490:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 8011590 <__ieee754_acosf+0x1c8>
 8011494:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 8011594 <__ieee754_acosf+0x1cc>
 8011498:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8011598 <__ieee754_acosf+0x1d0>
 801149c:	eddf aa39 	vldr	s21, [pc, #228]	@ 8011584 <__ieee754_acosf+0x1bc>
 80114a0:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 801159c <__ieee754_acosf+0x1d4>
 80114a4:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 80115a0 <__ieee754_acosf+0x1d8>
 80114a8:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 80114ac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80114b0:	da28      	bge.n	8011504 <__ieee754_acosf+0x13c>
 80114b2:	ee30 8a09 	vadd.f32	s16, s0, s18
 80114b6:	ee28 0a27 	vmul.f32	s0, s16, s15
 80114ba:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80114be:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80114c2:	eeac ca80 	vfma.f32	s24, s25, s0
 80114c6:	eeaa aa80 	vfma.f32	s20, s21, s0
 80114ca:	eeec ba00 	vfma.f32	s23, s24, s0
 80114ce:	eeea 9a00 	vfma.f32	s19, s20, s0
 80114d2:	eeab ba80 	vfma.f32	s22, s23, s0
 80114d6:	eea9 9a80 	vfma.f32	s18, s19, s0
 80114da:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80114de:	ee68 8a80 	vmul.f32	s17, s17, s0
 80114e2:	f7fe fe59 	bl	8010198 <__ieee754_sqrtf>
 80114e6:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80114ea:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80115ac <__ieee754_acosf+0x1e4>
 80114ee:	eee0 7a07 	vfma.f32	s15, s0, s14
 80114f2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80114f6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80114fa:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 80115b0 <__ieee754_acosf+0x1e8>
 80114fe:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011502:	e773      	b.n	80113ec <__ieee754_acosf+0x24>
 8011504:	ee39 8a40 	vsub.f32	s16, s18, s0
 8011508:	ee28 8a27 	vmul.f32	s16, s16, s15
 801150c:	eeb0 0a48 	vmov.f32	s0, s16
 8011510:	f7fe fe42 	bl	8010198 <__ieee754_sqrtf>
 8011514:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8011518:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801151c:	eeac ca88 	vfma.f32	s24, s25, s16
 8011520:	eeaa aa88 	vfma.f32	s20, s21, s16
 8011524:	eeec ba08 	vfma.f32	s23, s24, s16
 8011528:	ee10 3a10 	vmov	r3, s0
 801152c:	eeab ba88 	vfma.f32	s22, s23, s16
 8011530:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8011534:	f023 030f 	bic.w	r3, r3, #15
 8011538:	eeea 9a08 	vfma.f32	s19, s20, s16
 801153c:	ee07 3a90 	vmov	s15, r3
 8011540:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8011544:	eeb0 6a48 	vmov.f32	s12, s16
 8011548:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801154c:	eea9 9a88 	vfma.f32	s18, s19, s16
 8011550:	ee70 6a27 	vadd.f32	s13, s0, s15
 8011554:	ee68 8a88 	vmul.f32	s17, s17, s16
 8011558:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801155c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8011560:	eea0 7a26 	vfma.f32	s14, s0, s13
 8011564:	ee37 0a87 	vadd.f32	s0, s15, s14
 8011568:	ee30 0a00 	vadd.f32	s0, s0, s0
 801156c:	e73e      	b.n	80113ec <__ieee754_acosf+0x24>
 801156e:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80115b4 <__ieee754_acosf+0x1ec>
 8011572:	e73b      	b.n	80113ec <__ieee754_acosf+0x24>
 8011574:	40490fdb 	.word	0x40490fdb
 8011578:	00000000 	.word	0x00000000
 801157c:	3811ef08 	.word	0x3811ef08
 8011580:	3a4f7f04 	.word	0x3a4f7f04
 8011584:	bf303361 	.word	0xbf303361
 8011588:	bd241146 	.word	0xbd241146
 801158c:	3e4e0aa8 	.word	0x3e4e0aa8
 8011590:	bea6b090 	.word	0xbea6b090
 8011594:	3e2aaaab 	.word	0x3e2aaaab
 8011598:	3d9dc62e 	.word	0x3d9dc62e
 801159c:	4001572d 	.word	0x4001572d
 80115a0:	c019d139 	.word	0xc019d139
 80115a4:	33a22168 	.word	0x33a22168
 80115a8:	3fc90fda 	.word	0x3fc90fda
 80115ac:	b3a22168 	.word	0xb3a22168
 80115b0:	40490fda 	.word	0x40490fda
 80115b4:	3fc90fdb 	.word	0x3fc90fdb

080115b8 <__ieee754_asinf>:
 80115b8:	b538      	push	{r3, r4, r5, lr}
 80115ba:	ee10 5a10 	vmov	r5, s0
 80115be:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80115c2:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 80115c6:	ed2d 8b04 	vpush	{d8-d9}
 80115ca:	d10c      	bne.n	80115e6 <__ieee754_asinf+0x2e>
 80115cc:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8011744 <__ieee754_asinf+0x18c>
 80115d0:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8011748 <__ieee754_asinf+0x190>
 80115d4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80115d8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80115dc:	eeb0 0a67 	vmov.f32	s0, s15
 80115e0:	ecbd 8b04 	vpop	{d8-d9}
 80115e4:	bd38      	pop	{r3, r4, r5, pc}
 80115e6:	d904      	bls.n	80115f2 <__ieee754_asinf+0x3a>
 80115e8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80115ec:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80115f0:	e7f6      	b.n	80115e0 <__ieee754_asinf+0x28>
 80115f2:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80115f6:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80115fa:	d20b      	bcs.n	8011614 <__ieee754_asinf+0x5c>
 80115fc:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8011600:	d252      	bcs.n	80116a8 <__ieee754_asinf+0xf0>
 8011602:	eddf 7a52 	vldr	s15, [pc, #328]	@ 801174c <__ieee754_asinf+0x194>
 8011606:	ee70 7a27 	vadd.f32	s15, s0, s15
 801160a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801160e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011612:	dce5      	bgt.n	80115e0 <__ieee754_asinf+0x28>
 8011614:	f7fe fc78 	bl	800ff08 <fabsf>
 8011618:	ee38 8ac0 	vsub.f32	s16, s17, s0
 801161c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011620:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011624:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8011750 <__ieee754_asinf+0x198>
 8011628:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8011754 <__ieee754_asinf+0x19c>
 801162c:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8011758 <__ieee754_asinf+0x1a0>
 8011630:	eea8 7a27 	vfma.f32	s14, s16, s15
 8011634:	eddf 7a49 	vldr	s15, [pc, #292]	@ 801175c <__ieee754_asinf+0x1a4>
 8011638:	eee7 7a08 	vfma.f32	s15, s14, s16
 801163c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8011760 <__ieee754_asinf+0x1a8>
 8011640:	eea7 7a88 	vfma.f32	s14, s15, s16
 8011644:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8011764 <__ieee754_asinf+0x1ac>
 8011648:	eee7 7a08 	vfma.f32	s15, s14, s16
 801164c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8011768 <__ieee754_asinf+0x1b0>
 8011650:	eea7 9a88 	vfma.f32	s18, s15, s16
 8011654:	eddf 7a45 	vldr	s15, [pc, #276]	@ 801176c <__ieee754_asinf+0x1b4>
 8011658:	eee8 7a07 	vfma.f32	s15, s16, s14
 801165c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8011770 <__ieee754_asinf+0x1b8>
 8011660:	eea7 7a88 	vfma.f32	s14, s15, s16
 8011664:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8011774 <__ieee754_asinf+0x1bc>
 8011668:	eee7 7a08 	vfma.f32	s15, s14, s16
 801166c:	eeb0 0a48 	vmov.f32	s0, s16
 8011670:	eee7 8a88 	vfma.f32	s17, s15, s16
 8011674:	f7fe fd90 	bl	8010198 <__ieee754_sqrtf>
 8011678:	4b3f      	ldr	r3, [pc, #252]	@ (8011778 <__ieee754_asinf+0x1c0>)
 801167a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801167e:	429c      	cmp	r4, r3
 8011680:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8011684:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011688:	d93d      	bls.n	8011706 <__ieee754_asinf+0x14e>
 801168a:	eea0 0a06 	vfma.f32	s0, s0, s12
 801168e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 801177c <__ieee754_asinf+0x1c4>
 8011692:	eee0 7a26 	vfma.f32	s15, s0, s13
 8011696:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8011748 <__ieee754_asinf+0x190>
 801169a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801169e:	2d00      	cmp	r5, #0
 80116a0:	bfd8      	it	le
 80116a2:	eeb1 0a40 	vnegle.f32	s0, s0
 80116a6:	e79b      	b.n	80115e0 <__ieee754_asinf+0x28>
 80116a8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80116ac:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8011754 <__ieee754_asinf+0x19c>
 80116b0:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8011750 <__ieee754_asinf+0x198>
 80116b4:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8011768 <__ieee754_asinf+0x1b0>
 80116b8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80116bc:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801175c <__ieee754_asinf+0x1a4>
 80116c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80116c4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8011760 <__ieee754_asinf+0x1a8>
 80116c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80116cc:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8011764 <__ieee754_asinf+0x1ac>
 80116d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80116d4:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8011758 <__ieee754_asinf+0x1a0>
 80116d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80116dc:	eddf 6a23 	vldr	s13, [pc, #140]	@ 801176c <__ieee754_asinf+0x1b4>
 80116e0:	eee7 6a86 	vfma.f32	s13, s15, s12
 80116e4:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8011770 <__ieee754_asinf+0x1b8>
 80116e8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80116ec:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8011774 <__ieee754_asinf+0x1bc>
 80116f0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80116f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80116f8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80116fc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8011700:	eea0 0a27 	vfma.f32	s0, s0, s15
 8011704:	e76c      	b.n	80115e0 <__ieee754_asinf+0x28>
 8011706:	ee10 3a10 	vmov	r3, s0
 801170a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801170e:	f023 030f 	bic.w	r3, r3, #15
 8011712:	ee07 3a10 	vmov	s14, r3
 8011716:	eea7 8a47 	vfms.f32	s16, s14, s14
 801171a:	ee70 5a00 	vadd.f32	s11, s0, s0
 801171e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8011722:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011744 <__ieee754_asinf+0x18c>
 8011726:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801172a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8011780 <__ieee754_asinf+0x1c8>
 801172e:	eee5 7a66 	vfms.f32	s15, s10, s13
 8011732:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8011736:	eeb0 6a40 	vmov.f32	s12, s0
 801173a:	eea7 6a66 	vfms.f32	s12, s14, s13
 801173e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011742:	e7aa      	b.n	801169a <__ieee754_asinf+0xe2>
 8011744:	b33bbd2e 	.word	0xb33bbd2e
 8011748:	3fc90fdb 	.word	0x3fc90fdb
 801174c:	7149f2ca 	.word	0x7149f2ca
 8011750:	3a4f7f04 	.word	0x3a4f7f04
 8011754:	3811ef08 	.word	0x3811ef08
 8011758:	3e2aaaab 	.word	0x3e2aaaab
 801175c:	bd241146 	.word	0xbd241146
 8011760:	3e4e0aa8 	.word	0x3e4e0aa8
 8011764:	bea6b090 	.word	0xbea6b090
 8011768:	3d9dc62e 	.word	0x3d9dc62e
 801176c:	bf303361 	.word	0xbf303361
 8011770:	4001572d 	.word	0x4001572d
 8011774:	c019d139 	.word	0xc019d139
 8011778:	3f799999 	.word	0x3f799999
 801177c:	333bbd2e 	.word	0x333bbd2e
 8011780:	3f490fdb 	.word	0x3f490fdb

08011784 <__ieee754_atan2f>:
 8011784:	ee10 2a90 	vmov	r2, s1
 8011788:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 801178c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011790:	b510      	push	{r4, lr}
 8011792:	eef0 7a40 	vmov.f32	s15, s0
 8011796:	d806      	bhi.n	80117a6 <__ieee754_atan2f+0x22>
 8011798:	ee10 0a10 	vmov	r0, s0
 801179c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80117a0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80117a4:	d904      	bls.n	80117b0 <__ieee754_atan2f+0x2c>
 80117a6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80117aa:	eeb0 0a67 	vmov.f32	s0, s15
 80117ae:	bd10      	pop	{r4, pc}
 80117b0:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80117b4:	d103      	bne.n	80117be <__ieee754_atan2f+0x3a>
 80117b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117ba:	f000 b883 	b.w	80118c4 <atanf>
 80117be:	1794      	asrs	r4, r2, #30
 80117c0:	f004 0402 	and.w	r4, r4, #2
 80117c4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80117c8:	b943      	cbnz	r3, 80117dc <__ieee754_atan2f+0x58>
 80117ca:	2c02      	cmp	r4, #2
 80117cc:	d05e      	beq.n	801188c <__ieee754_atan2f+0x108>
 80117ce:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80118a0 <__ieee754_atan2f+0x11c>
 80117d2:	2c03      	cmp	r4, #3
 80117d4:	bf08      	it	eq
 80117d6:	eef0 7a47 	vmoveq.f32	s15, s14
 80117da:	e7e6      	b.n	80117aa <__ieee754_atan2f+0x26>
 80117dc:	b941      	cbnz	r1, 80117f0 <__ieee754_atan2f+0x6c>
 80117de:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80118a4 <__ieee754_atan2f+0x120>
 80117e2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80118a8 <__ieee754_atan2f+0x124>
 80117e6:	2800      	cmp	r0, #0
 80117e8:	bfb8      	it	lt
 80117ea:	eef0 7a47 	vmovlt.f32	s15, s14
 80117ee:	e7dc      	b.n	80117aa <__ieee754_atan2f+0x26>
 80117f0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80117f4:	d110      	bne.n	8011818 <__ieee754_atan2f+0x94>
 80117f6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80117fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80117fe:	d107      	bne.n	8011810 <__ieee754_atan2f+0x8c>
 8011800:	2c02      	cmp	r4, #2
 8011802:	d846      	bhi.n	8011892 <__ieee754_atan2f+0x10e>
 8011804:	4b29      	ldr	r3, [pc, #164]	@ (80118ac <__ieee754_atan2f+0x128>)
 8011806:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801180a:	edd3 7a00 	vldr	s15, [r3]
 801180e:	e7cc      	b.n	80117aa <__ieee754_atan2f+0x26>
 8011810:	2c02      	cmp	r4, #2
 8011812:	d841      	bhi.n	8011898 <__ieee754_atan2f+0x114>
 8011814:	4b26      	ldr	r3, [pc, #152]	@ (80118b0 <__ieee754_atan2f+0x12c>)
 8011816:	e7f6      	b.n	8011806 <__ieee754_atan2f+0x82>
 8011818:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801181c:	d0df      	beq.n	80117de <__ieee754_atan2f+0x5a>
 801181e:	1a5b      	subs	r3, r3, r1
 8011820:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8011824:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011828:	da1a      	bge.n	8011860 <__ieee754_atan2f+0xdc>
 801182a:	2a00      	cmp	r2, #0
 801182c:	da01      	bge.n	8011832 <__ieee754_atan2f+0xae>
 801182e:	313c      	adds	r1, #60	@ 0x3c
 8011830:	db19      	blt.n	8011866 <__ieee754_atan2f+0xe2>
 8011832:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8011836:	f7fe fb67 	bl	800ff08 <fabsf>
 801183a:	f000 f843 	bl	80118c4 <atanf>
 801183e:	eef0 7a40 	vmov.f32	s15, s0
 8011842:	2c01      	cmp	r4, #1
 8011844:	d012      	beq.n	801186c <__ieee754_atan2f+0xe8>
 8011846:	2c02      	cmp	r4, #2
 8011848:	d017      	beq.n	801187a <__ieee754_atan2f+0xf6>
 801184a:	2c00      	cmp	r4, #0
 801184c:	d0ad      	beq.n	80117aa <__ieee754_atan2f+0x26>
 801184e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80118b4 <__ieee754_atan2f+0x130>
 8011852:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011856:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80118b8 <__ieee754_atan2f+0x134>
 801185a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801185e:	e7a4      	b.n	80117aa <__ieee754_atan2f+0x26>
 8011860:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80118a4 <__ieee754_atan2f+0x120>
 8011864:	e7ed      	b.n	8011842 <__ieee754_atan2f+0xbe>
 8011866:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80118bc <__ieee754_atan2f+0x138>
 801186a:	e7ea      	b.n	8011842 <__ieee754_atan2f+0xbe>
 801186c:	ee17 3a90 	vmov	r3, s15
 8011870:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8011874:	ee07 3a90 	vmov	s15, r3
 8011878:	e797      	b.n	80117aa <__ieee754_atan2f+0x26>
 801187a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80118b4 <__ieee754_atan2f+0x130>
 801187e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011882:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80118b8 <__ieee754_atan2f+0x134>
 8011886:	ee77 7a67 	vsub.f32	s15, s14, s15
 801188a:	e78e      	b.n	80117aa <__ieee754_atan2f+0x26>
 801188c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80118b8 <__ieee754_atan2f+0x134>
 8011890:	e78b      	b.n	80117aa <__ieee754_atan2f+0x26>
 8011892:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80118c0 <__ieee754_atan2f+0x13c>
 8011896:	e788      	b.n	80117aa <__ieee754_atan2f+0x26>
 8011898:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80118bc <__ieee754_atan2f+0x138>
 801189c:	e785      	b.n	80117aa <__ieee754_atan2f+0x26>
 801189e:	bf00      	nop
 80118a0:	c0490fdb 	.word	0xc0490fdb
 80118a4:	3fc90fdb 	.word	0x3fc90fdb
 80118a8:	bfc90fdb 	.word	0xbfc90fdb
 80118ac:	08012914 	.word	0x08012914
 80118b0:	08012908 	.word	0x08012908
 80118b4:	33bbbd2e 	.word	0x33bbbd2e
 80118b8:	40490fdb 	.word	0x40490fdb
 80118bc:	00000000 	.word	0x00000000
 80118c0:	3f490fdb 	.word	0x3f490fdb

080118c4 <atanf>:
 80118c4:	b538      	push	{r3, r4, r5, lr}
 80118c6:	ee10 5a10 	vmov	r5, s0
 80118ca:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80118ce:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80118d2:	eef0 7a40 	vmov.f32	s15, s0
 80118d6:	d310      	bcc.n	80118fa <atanf+0x36>
 80118d8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80118dc:	d904      	bls.n	80118e8 <atanf+0x24>
 80118de:	ee70 7a00 	vadd.f32	s15, s0, s0
 80118e2:	eeb0 0a67 	vmov.f32	s0, s15
 80118e6:	bd38      	pop	{r3, r4, r5, pc}
 80118e8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8011a20 <atanf+0x15c>
 80118ec:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8011a24 <atanf+0x160>
 80118f0:	2d00      	cmp	r5, #0
 80118f2:	bfc8      	it	gt
 80118f4:	eef0 7a47 	vmovgt.f32	s15, s14
 80118f8:	e7f3      	b.n	80118e2 <atanf+0x1e>
 80118fa:	4b4b      	ldr	r3, [pc, #300]	@ (8011a28 <atanf+0x164>)
 80118fc:	429c      	cmp	r4, r3
 80118fe:	d810      	bhi.n	8011922 <atanf+0x5e>
 8011900:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8011904:	d20a      	bcs.n	801191c <atanf+0x58>
 8011906:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8011a2c <atanf+0x168>
 801190a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801190e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011912:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801191a:	dce2      	bgt.n	80118e2 <atanf+0x1e>
 801191c:	f04f 33ff 	mov.w	r3, #4294967295
 8011920:	e013      	b.n	801194a <atanf+0x86>
 8011922:	f7fe faf1 	bl	800ff08 <fabsf>
 8011926:	4b42      	ldr	r3, [pc, #264]	@ (8011a30 <atanf+0x16c>)
 8011928:	429c      	cmp	r4, r3
 801192a:	d84f      	bhi.n	80119cc <atanf+0x108>
 801192c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8011930:	429c      	cmp	r4, r3
 8011932:	d841      	bhi.n	80119b8 <atanf+0xf4>
 8011934:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8011938:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801193c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011940:	2300      	movs	r3, #0
 8011942:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011946:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801194a:	1c5a      	adds	r2, r3, #1
 801194c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011950:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8011a34 <atanf+0x170>
 8011954:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8011a38 <atanf+0x174>
 8011958:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8011a3c <atanf+0x178>
 801195c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011960:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011964:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8011a40 <atanf+0x17c>
 8011968:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801196c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8011a44 <atanf+0x180>
 8011970:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011974:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011a48 <atanf+0x184>
 8011978:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801197c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8011a4c <atanf+0x188>
 8011980:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011984:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8011a50 <atanf+0x18c>
 8011988:	eea6 5a87 	vfma.f32	s10, s13, s14
 801198c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011a54 <atanf+0x190>
 8011990:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011994:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8011a58 <atanf+0x194>
 8011998:	eea7 5a26 	vfma.f32	s10, s14, s13
 801199c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8011a5c <atanf+0x198>
 80119a0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80119a4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80119a8:	eea5 7a86 	vfma.f32	s14, s11, s12
 80119ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80119b0:	d121      	bne.n	80119f6 <atanf+0x132>
 80119b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80119b6:	e794      	b.n	80118e2 <atanf+0x1e>
 80119b8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80119bc:	ee30 7a67 	vsub.f32	s14, s0, s15
 80119c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80119c4:	2301      	movs	r3, #1
 80119c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80119ca:	e7be      	b.n	801194a <atanf+0x86>
 80119cc:	4b24      	ldr	r3, [pc, #144]	@ (8011a60 <atanf+0x19c>)
 80119ce:	429c      	cmp	r4, r3
 80119d0:	d80b      	bhi.n	80119ea <atanf+0x126>
 80119d2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80119d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80119da:	eea0 7a27 	vfma.f32	s14, s0, s15
 80119de:	2302      	movs	r3, #2
 80119e0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80119e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80119e8:	e7af      	b.n	801194a <atanf+0x86>
 80119ea:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80119ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80119f2:	2303      	movs	r3, #3
 80119f4:	e7a9      	b.n	801194a <atanf+0x86>
 80119f6:	4a1b      	ldr	r2, [pc, #108]	@ (8011a64 <atanf+0x1a0>)
 80119f8:	491b      	ldr	r1, [pc, #108]	@ (8011a68 <atanf+0x1a4>)
 80119fa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80119fe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011a02:	edd3 6a00 	vldr	s13, [r3]
 8011a06:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011a0a:	2d00      	cmp	r5, #0
 8011a0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011a10:	edd2 7a00 	vldr	s15, [r2]
 8011a14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011a18:	bfb8      	it	lt
 8011a1a:	eef1 7a67 	vneglt.f32	s15, s15
 8011a1e:	e760      	b.n	80118e2 <atanf+0x1e>
 8011a20:	bfc90fdb 	.word	0xbfc90fdb
 8011a24:	3fc90fdb 	.word	0x3fc90fdb
 8011a28:	3edfffff 	.word	0x3edfffff
 8011a2c:	7149f2ca 	.word	0x7149f2ca
 8011a30:	3f97ffff 	.word	0x3f97ffff
 8011a34:	3c8569d7 	.word	0x3c8569d7
 8011a38:	3d4bda59 	.word	0x3d4bda59
 8011a3c:	bd6ef16b 	.word	0xbd6ef16b
 8011a40:	3d886b35 	.word	0x3d886b35
 8011a44:	3dba2e6e 	.word	0x3dba2e6e
 8011a48:	3e124925 	.word	0x3e124925
 8011a4c:	3eaaaaab 	.word	0x3eaaaaab
 8011a50:	bd15a221 	.word	0xbd15a221
 8011a54:	bd9d8795 	.word	0xbd9d8795
 8011a58:	bde38e38 	.word	0xbde38e38
 8011a5c:	be4ccccd 	.word	0xbe4ccccd
 8011a60:	401bffff 	.word	0x401bffff
 8011a64:	08012930 	.word	0x08012930
 8011a68:	08012920 	.word	0x08012920
 8011a6c:	00000000 	.word	0x00000000

08011a70 <scalbn>:
 8011a70:	b570      	push	{r4, r5, r6, lr}
 8011a72:	ec55 4b10 	vmov	r4, r5, d0
 8011a76:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011a7a:	4606      	mov	r6, r0
 8011a7c:	462b      	mov	r3, r5
 8011a7e:	b991      	cbnz	r1, 8011aa6 <scalbn+0x36>
 8011a80:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011a84:	4323      	orrs	r3, r4
 8011a86:	d03d      	beq.n	8011b04 <scalbn+0x94>
 8011a88:	4b35      	ldr	r3, [pc, #212]	@ (8011b60 <scalbn+0xf0>)
 8011a8a:	4620      	mov	r0, r4
 8011a8c:	4629      	mov	r1, r5
 8011a8e:	2200      	movs	r2, #0
 8011a90:	f7ee fdd2 	bl	8000638 <__aeabi_dmul>
 8011a94:	4b33      	ldr	r3, [pc, #204]	@ (8011b64 <scalbn+0xf4>)
 8011a96:	429e      	cmp	r6, r3
 8011a98:	4604      	mov	r4, r0
 8011a9a:	460d      	mov	r5, r1
 8011a9c:	da0f      	bge.n	8011abe <scalbn+0x4e>
 8011a9e:	a328      	add	r3, pc, #160	@ (adr r3, 8011b40 <scalbn+0xd0>)
 8011aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa4:	e01e      	b.n	8011ae4 <scalbn+0x74>
 8011aa6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011aaa:	4291      	cmp	r1, r2
 8011aac:	d10b      	bne.n	8011ac6 <scalbn+0x56>
 8011aae:	4622      	mov	r2, r4
 8011ab0:	4620      	mov	r0, r4
 8011ab2:	4629      	mov	r1, r5
 8011ab4:	f7ee fc0a 	bl	80002cc <__adddf3>
 8011ab8:	4604      	mov	r4, r0
 8011aba:	460d      	mov	r5, r1
 8011abc:	e022      	b.n	8011b04 <scalbn+0x94>
 8011abe:	460b      	mov	r3, r1
 8011ac0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011ac4:	3936      	subs	r1, #54	@ 0x36
 8011ac6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011aca:	4296      	cmp	r6, r2
 8011acc:	dd0d      	ble.n	8011aea <scalbn+0x7a>
 8011ace:	2d00      	cmp	r5, #0
 8011ad0:	a11d      	add	r1, pc, #116	@ (adr r1, 8011b48 <scalbn+0xd8>)
 8011ad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ad6:	da02      	bge.n	8011ade <scalbn+0x6e>
 8011ad8:	a11d      	add	r1, pc, #116	@ (adr r1, 8011b50 <scalbn+0xe0>)
 8011ada:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ade:	a31a      	add	r3, pc, #104	@ (adr r3, 8011b48 <scalbn+0xd8>)
 8011ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae4:	f7ee fda8 	bl	8000638 <__aeabi_dmul>
 8011ae8:	e7e6      	b.n	8011ab8 <scalbn+0x48>
 8011aea:	1872      	adds	r2, r6, r1
 8011aec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011af0:	428a      	cmp	r2, r1
 8011af2:	dcec      	bgt.n	8011ace <scalbn+0x5e>
 8011af4:	2a00      	cmp	r2, #0
 8011af6:	dd08      	ble.n	8011b0a <scalbn+0x9a>
 8011af8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011afc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011b00:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011b04:	ec45 4b10 	vmov	d0, r4, r5
 8011b08:	bd70      	pop	{r4, r5, r6, pc}
 8011b0a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8011b0e:	da08      	bge.n	8011b22 <scalbn+0xb2>
 8011b10:	2d00      	cmp	r5, #0
 8011b12:	a10b      	add	r1, pc, #44	@ (adr r1, 8011b40 <scalbn+0xd0>)
 8011b14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b18:	dac1      	bge.n	8011a9e <scalbn+0x2e>
 8011b1a:	a10f      	add	r1, pc, #60	@ (adr r1, 8011b58 <scalbn+0xe8>)
 8011b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b20:	e7bd      	b.n	8011a9e <scalbn+0x2e>
 8011b22:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011b26:	3236      	adds	r2, #54	@ 0x36
 8011b28:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011b2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011b30:	4620      	mov	r0, r4
 8011b32:	4b0d      	ldr	r3, [pc, #52]	@ (8011b68 <scalbn+0xf8>)
 8011b34:	4629      	mov	r1, r5
 8011b36:	2200      	movs	r2, #0
 8011b38:	e7d4      	b.n	8011ae4 <scalbn+0x74>
 8011b3a:	bf00      	nop
 8011b3c:	f3af 8000 	nop.w
 8011b40:	c2f8f359 	.word	0xc2f8f359
 8011b44:	01a56e1f 	.word	0x01a56e1f
 8011b48:	8800759c 	.word	0x8800759c
 8011b4c:	7e37e43c 	.word	0x7e37e43c
 8011b50:	8800759c 	.word	0x8800759c
 8011b54:	fe37e43c 	.word	0xfe37e43c
 8011b58:	c2f8f359 	.word	0xc2f8f359
 8011b5c:	81a56e1f 	.word	0x81a56e1f
 8011b60:	43500000 	.word	0x43500000
 8011b64:	ffff3cb0 	.word	0xffff3cb0
 8011b68:	3c900000 	.word	0x3c900000

08011b6c <with_errno>:
 8011b6c:	b510      	push	{r4, lr}
 8011b6e:	ed2d 8b02 	vpush	{d8}
 8011b72:	eeb0 8a40 	vmov.f32	s16, s0
 8011b76:	eef0 8a60 	vmov.f32	s17, s1
 8011b7a:	4604      	mov	r4, r0
 8011b7c:	f7fc fa5e 	bl	800e03c <__errno>
 8011b80:	eeb0 0a48 	vmov.f32	s0, s16
 8011b84:	eef0 0a68 	vmov.f32	s1, s17
 8011b88:	ecbd 8b02 	vpop	{d8}
 8011b8c:	6004      	str	r4, [r0, #0]
 8011b8e:	bd10      	pop	{r4, pc}

08011b90 <xflow>:
 8011b90:	4603      	mov	r3, r0
 8011b92:	b507      	push	{r0, r1, r2, lr}
 8011b94:	ec51 0b10 	vmov	r0, r1, d0
 8011b98:	b183      	cbz	r3, 8011bbc <xflow+0x2c>
 8011b9a:	4602      	mov	r2, r0
 8011b9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011ba0:	e9cd 2300 	strd	r2, r3, [sp]
 8011ba4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ba8:	f7ee fd46 	bl	8000638 <__aeabi_dmul>
 8011bac:	ec41 0b10 	vmov	d0, r0, r1
 8011bb0:	2022      	movs	r0, #34	@ 0x22
 8011bb2:	b003      	add	sp, #12
 8011bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011bb8:	f7ff bfd8 	b.w	8011b6c <with_errno>
 8011bbc:	4602      	mov	r2, r0
 8011bbe:	460b      	mov	r3, r1
 8011bc0:	e7ee      	b.n	8011ba0 <xflow+0x10>
 8011bc2:	0000      	movs	r0, r0
 8011bc4:	0000      	movs	r0, r0
	...

08011bc8 <__math_uflow>:
 8011bc8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011bd0 <__math_uflow+0x8>
 8011bcc:	f7ff bfe0 	b.w	8011b90 <xflow>
 8011bd0:	00000000 	.word	0x00000000
 8011bd4:	10000000 	.word	0x10000000

08011bd8 <__math_oflow>:
 8011bd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011be0 <__math_oflow+0x8>
 8011bdc:	f7ff bfd8 	b.w	8011b90 <xflow>
 8011be0:	00000000 	.word	0x00000000
 8011be4:	70000000 	.word	0x70000000

08011be8 <__kernel_rem_pio2>:
 8011be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bec:	ed2d 8b02 	vpush	{d8}
 8011bf0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8011bf4:	f112 0f14 	cmn.w	r2, #20
 8011bf8:	9306      	str	r3, [sp, #24]
 8011bfa:	9104      	str	r1, [sp, #16]
 8011bfc:	4bbe      	ldr	r3, [pc, #760]	@ (8011ef8 <__kernel_rem_pio2+0x310>)
 8011bfe:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8011c00:	9008      	str	r0, [sp, #32]
 8011c02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011c06:	9300      	str	r3, [sp, #0]
 8011c08:	9b06      	ldr	r3, [sp, #24]
 8011c0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8011c0e:	bfa8      	it	ge
 8011c10:	1ed4      	subge	r4, r2, #3
 8011c12:	9305      	str	r3, [sp, #20]
 8011c14:	bfb2      	itee	lt
 8011c16:	2400      	movlt	r4, #0
 8011c18:	2318      	movge	r3, #24
 8011c1a:	fb94 f4f3 	sdivge	r4, r4, r3
 8011c1e:	f06f 0317 	mvn.w	r3, #23
 8011c22:	fb04 3303 	mla	r3, r4, r3, r3
 8011c26:	eb03 0b02 	add.w	fp, r3, r2
 8011c2a:	9b00      	ldr	r3, [sp, #0]
 8011c2c:	9a05      	ldr	r2, [sp, #20]
 8011c2e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8011ee8 <__kernel_rem_pio2+0x300>
 8011c32:	eb03 0802 	add.w	r8, r3, r2
 8011c36:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011c38:	1aa7      	subs	r7, r4, r2
 8011c3a:	ae20      	add	r6, sp, #128	@ 0x80
 8011c3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011c40:	2500      	movs	r5, #0
 8011c42:	4545      	cmp	r5, r8
 8011c44:	dd13      	ble.n	8011c6e <__kernel_rem_pio2+0x86>
 8011c46:	9b06      	ldr	r3, [sp, #24]
 8011c48:	aa20      	add	r2, sp, #128	@ 0x80
 8011c4a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011c4e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8011c52:	f04f 0800 	mov.w	r8, #0
 8011c56:	9b00      	ldr	r3, [sp, #0]
 8011c58:	4598      	cmp	r8, r3
 8011c5a:	dc31      	bgt.n	8011cc0 <__kernel_rem_pio2+0xd8>
 8011c5c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8011ee8 <__kernel_rem_pio2+0x300>
 8011c60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011c64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011c68:	462f      	mov	r7, r5
 8011c6a:	2600      	movs	r6, #0
 8011c6c:	e01b      	b.n	8011ca6 <__kernel_rem_pio2+0xbe>
 8011c6e:	42ef      	cmn	r7, r5
 8011c70:	d407      	bmi.n	8011c82 <__kernel_rem_pio2+0x9a>
 8011c72:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011c76:	f7ee fc75 	bl	8000564 <__aeabi_i2d>
 8011c7a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011c7e:	3501      	adds	r5, #1
 8011c80:	e7df      	b.n	8011c42 <__kernel_rem_pio2+0x5a>
 8011c82:	ec51 0b18 	vmov	r0, r1, d8
 8011c86:	e7f8      	b.n	8011c7a <__kernel_rem_pio2+0x92>
 8011c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011c8c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011c90:	f7ee fcd2 	bl	8000638 <__aeabi_dmul>
 8011c94:	4602      	mov	r2, r0
 8011c96:	460b      	mov	r3, r1
 8011c98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c9c:	f7ee fb16 	bl	80002cc <__adddf3>
 8011ca0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ca4:	3601      	adds	r6, #1
 8011ca6:	9b05      	ldr	r3, [sp, #20]
 8011ca8:	429e      	cmp	r6, r3
 8011caa:	f1a7 0708 	sub.w	r7, r7, #8
 8011cae:	ddeb      	ble.n	8011c88 <__kernel_rem_pio2+0xa0>
 8011cb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011cb4:	f108 0801 	add.w	r8, r8, #1
 8011cb8:	ecaa 7b02 	vstmia	sl!, {d7}
 8011cbc:	3508      	adds	r5, #8
 8011cbe:	e7ca      	b.n	8011c56 <__kernel_rem_pio2+0x6e>
 8011cc0:	9b00      	ldr	r3, [sp, #0]
 8011cc2:	f8dd 8000 	ldr.w	r8, [sp]
 8011cc6:	aa0c      	add	r2, sp, #48	@ 0x30
 8011cc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011ccc:	930a      	str	r3, [sp, #40]	@ 0x28
 8011cce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011cd0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cd6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8011cda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011cdc:	ab98      	add	r3, sp, #608	@ 0x260
 8011cde:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011ce2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8011ce6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011cea:	ac0c      	add	r4, sp, #48	@ 0x30
 8011cec:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011cee:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8011cf2:	46a1      	mov	r9, r4
 8011cf4:	46c2      	mov	sl, r8
 8011cf6:	f1ba 0f00 	cmp.w	sl, #0
 8011cfa:	f1a5 0508 	sub.w	r5, r5, #8
 8011cfe:	dc77      	bgt.n	8011df0 <__kernel_rem_pio2+0x208>
 8011d00:	4658      	mov	r0, fp
 8011d02:	ed9d 0b02 	vldr	d0, [sp, #8]
 8011d06:	f7ff feb3 	bl	8011a70 <scalbn>
 8011d0a:	ec57 6b10 	vmov	r6, r7, d0
 8011d0e:	2200      	movs	r2, #0
 8011d10:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8011d14:	4630      	mov	r0, r6
 8011d16:	4639      	mov	r1, r7
 8011d18:	f7ee fc8e 	bl	8000638 <__aeabi_dmul>
 8011d1c:	ec41 0b10 	vmov	d0, r0, r1
 8011d20:	f000 faba 	bl	8012298 <floor>
 8011d24:	4b75      	ldr	r3, [pc, #468]	@ (8011efc <__kernel_rem_pio2+0x314>)
 8011d26:	ec51 0b10 	vmov	r0, r1, d0
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	f7ee fc84 	bl	8000638 <__aeabi_dmul>
 8011d30:	4602      	mov	r2, r0
 8011d32:	460b      	mov	r3, r1
 8011d34:	4630      	mov	r0, r6
 8011d36:	4639      	mov	r1, r7
 8011d38:	f7ee fac6 	bl	80002c8 <__aeabi_dsub>
 8011d3c:	460f      	mov	r7, r1
 8011d3e:	4606      	mov	r6, r0
 8011d40:	f7ee ff2a 	bl	8000b98 <__aeabi_d2iz>
 8011d44:	9002      	str	r0, [sp, #8]
 8011d46:	f7ee fc0d 	bl	8000564 <__aeabi_i2d>
 8011d4a:	4602      	mov	r2, r0
 8011d4c:	460b      	mov	r3, r1
 8011d4e:	4630      	mov	r0, r6
 8011d50:	4639      	mov	r1, r7
 8011d52:	f7ee fab9 	bl	80002c8 <__aeabi_dsub>
 8011d56:	f1bb 0f00 	cmp.w	fp, #0
 8011d5a:	4606      	mov	r6, r0
 8011d5c:	460f      	mov	r7, r1
 8011d5e:	dd6c      	ble.n	8011e3a <__kernel_rem_pio2+0x252>
 8011d60:	f108 31ff 	add.w	r1, r8, #4294967295
 8011d64:	ab0c      	add	r3, sp, #48	@ 0x30
 8011d66:	9d02      	ldr	r5, [sp, #8]
 8011d68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011d6c:	f1cb 0018 	rsb	r0, fp, #24
 8011d70:	fa43 f200 	asr.w	r2, r3, r0
 8011d74:	4415      	add	r5, r2
 8011d76:	4082      	lsls	r2, r0
 8011d78:	1a9b      	subs	r3, r3, r2
 8011d7a:	aa0c      	add	r2, sp, #48	@ 0x30
 8011d7c:	9502      	str	r5, [sp, #8]
 8011d7e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011d82:	f1cb 0217 	rsb	r2, fp, #23
 8011d86:	fa43 f902 	asr.w	r9, r3, r2
 8011d8a:	f1b9 0f00 	cmp.w	r9, #0
 8011d8e:	dd64      	ble.n	8011e5a <__kernel_rem_pio2+0x272>
 8011d90:	9b02      	ldr	r3, [sp, #8]
 8011d92:	2200      	movs	r2, #0
 8011d94:	3301      	adds	r3, #1
 8011d96:	9302      	str	r3, [sp, #8]
 8011d98:	4615      	mov	r5, r2
 8011d9a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8011d9e:	4590      	cmp	r8, r2
 8011da0:	f300 80b8 	bgt.w	8011f14 <__kernel_rem_pio2+0x32c>
 8011da4:	f1bb 0f00 	cmp.w	fp, #0
 8011da8:	dd07      	ble.n	8011dba <__kernel_rem_pio2+0x1d2>
 8011daa:	f1bb 0f01 	cmp.w	fp, #1
 8011dae:	f000 80bf 	beq.w	8011f30 <__kernel_rem_pio2+0x348>
 8011db2:	f1bb 0f02 	cmp.w	fp, #2
 8011db6:	f000 80c6 	beq.w	8011f46 <__kernel_rem_pio2+0x35e>
 8011dba:	f1b9 0f02 	cmp.w	r9, #2
 8011dbe:	d14c      	bne.n	8011e5a <__kernel_rem_pio2+0x272>
 8011dc0:	4632      	mov	r2, r6
 8011dc2:	463b      	mov	r3, r7
 8011dc4:	494e      	ldr	r1, [pc, #312]	@ (8011f00 <__kernel_rem_pio2+0x318>)
 8011dc6:	2000      	movs	r0, #0
 8011dc8:	f7ee fa7e 	bl	80002c8 <__aeabi_dsub>
 8011dcc:	4606      	mov	r6, r0
 8011dce:	460f      	mov	r7, r1
 8011dd0:	2d00      	cmp	r5, #0
 8011dd2:	d042      	beq.n	8011e5a <__kernel_rem_pio2+0x272>
 8011dd4:	4658      	mov	r0, fp
 8011dd6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8011ef0 <__kernel_rem_pio2+0x308>
 8011dda:	f7ff fe49 	bl	8011a70 <scalbn>
 8011dde:	4630      	mov	r0, r6
 8011de0:	4639      	mov	r1, r7
 8011de2:	ec53 2b10 	vmov	r2, r3, d0
 8011de6:	f7ee fa6f 	bl	80002c8 <__aeabi_dsub>
 8011dea:	4606      	mov	r6, r0
 8011dec:	460f      	mov	r7, r1
 8011dee:	e034      	b.n	8011e5a <__kernel_rem_pio2+0x272>
 8011df0:	4b44      	ldr	r3, [pc, #272]	@ (8011f04 <__kernel_rem_pio2+0x31c>)
 8011df2:	2200      	movs	r2, #0
 8011df4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011df8:	f7ee fc1e 	bl	8000638 <__aeabi_dmul>
 8011dfc:	f7ee fecc 	bl	8000b98 <__aeabi_d2iz>
 8011e00:	f7ee fbb0 	bl	8000564 <__aeabi_i2d>
 8011e04:	4b40      	ldr	r3, [pc, #256]	@ (8011f08 <__kernel_rem_pio2+0x320>)
 8011e06:	2200      	movs	r2, #0
 8011e08:	4606      	mov	r6, r0
 8011e0a:	460f      	mov	r7, r1
 8011e0c:	f7ee fc14 	bl	8000638 <__aeabi_dmul>
 8011e10:	4602      	mov	r2, r0
 8011e12:	460b      	mov	r3, r1
 8011e14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e18:	f7ee fa56 	bl	80002c8 <__aeabi_dsub>
 8011e1c:	f7ee febc 	bl	8000b98 <__aeabi_d2iz>
 8011e20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011e24:	f849 0b04 	str.w	r0, [r9], #4
 8011e28:	4639      	mov	r1, r7
 8011e2a:	4630      	mov	r0, r6
 8011e2c:	f7ee fa4e 	bl	80002cc <__adddf3>
 8011e30:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e38:	e75d      	b.n	8011cf6 <__kernel_rem_pio2+0x10e>
 8011e3a:	d107      	bne.n	8011e4c <__kernel_rem_pio2+0x264>
 8011e3c:	f108 33ff 	add.w	r3, r8, #4294967295
 8011e40:	aa0c      	add	r2, sp, #48	@ 0x30
 8011e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e46:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8011e4a:	e79e      	b.n	8011d8a <__kernel_rem_pio2+0x1a2>
 8011e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8011f0c <__kernel_rem_pio2+0x324>)
 8011e4e:	2200      	movs	r2, #0
 8011e50:	f7ee fe78 	bl	8000b44 <__aeabi_dcmpge>
 8011e54:	2800      	cmp	r0, #0
 8011e56:	d143      	bne.n	8011ee0 <__kernel_rem_pio2+0x2f8>
 8011e58:	4681      	mov	r9, r0
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	4630      	mov	r0, r6
 8011e60:	4639      	mov	r1, r7
 8011e62:	f7ee fe51 	bl	8000b08 <__aeabi_dcmpeq>
 8011e66:	2800      	cmp	r0, #0
 8011e68:	f000 80bf 	beq.w	8011fea <__kernel_rem_pio2+0x402>
 8011e6c:	f108 33ff 	add.w	r3, r8, #4294967295
 8011e70:	2200      	movs	r2, #0
 8011e72:	9900      	ldr	r1, [sp, #0]
 8011e74:	428b      	cmp	r3, r1
 8011e76:	da6e      	bge.n	8011f56 <__kernel_rem_pio2+0x36e>
 8011e78:	2a00      	cmp	r2, #0
 8011e7a:	f000 8089 	beq.w	8011f90 <__kernel_rem_pio2+0x3a8>
 8011e7e:	f108 38ff 	add.w	r8, r8, #4294967295
 8011e82:	ab0c      	add	r3, sp, #48	@ 0x30
 8011e84:	f1ab 0b18 	sub.w	fp, fp, #24
 8011e88:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d0f6      	beq.n	8011e7e <__kernel_rem_pio2+0x296>
 8011e90:	4658      	mov	r0, fp
 8011e92:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8011ef0 <__kernel_rem_pio2+0x308>
 8011e96:	f7ff fdeb 	bl	8011a70 <scalbn>
 8011e9a:	f108 0301 	add.w	r3, r8, #1
 8011e9e:	00da      	lsls	r2, r3, #3
 8011ea0:	9205      	str	r2, [sp, #20]
 8011ea2:	ec55 4b10 	vmov	r4, r5, d0
 8011ea6:	aa70      	add	r2, sp, #448	@ 0x1c0
 8011ea8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8011f04 <__kernel_rem_pio2+0x31c>
 8011eac:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8011eb0:	4646      	mov	r6, r8
 8011eb2:	f04f 0a00 	mov.w	sl, #0
 8011eb6:	2e00      	cmp	r6, #0
 8011eb8:	f280 80cf 	bge.w	801205a <__kernel_rem_pio2+0x472>
 8011ebc:	4644      	mov	r4, r8
 8011ebe:	2c00      	cmp	r4, #0
 8011ec0:	f2c0 80fd 	blt.w	80120be <__kernel_rem_pio2+0x4d6>
 8011ec4:	4b12      	ldr	r3, [pc, #72]	@ (8011f10 <__kernel_rem_pio2+0x328>)
 8011ec6:	461f      	mov	r7, r3
 8011ec8:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011eca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011ece:	9306      	str	r3, [sp, #24]
 8011ed0:	f04f 0a00 	mov.w	sl, #0
 8011ed4:	f04f 0b00 	mov.w	fp, #0
 8011ed8:	2600      	movs	r6, #0
 8011eda:	eba8 0504 	sub.w	r5, r8, r4
 8011ede:	e0e2      	b.n	80120a6 <__kernel_rem_pio2+0x4be>
 8011ee0:	f04f 0902 	mov.w	r9, #2
 8011ee4:	e754      	b.n	8011d90 <__kernel_rem_pio2+0x1a8>
 8011ee6:	bf00      	nop
	...
 8011ef4:	3ff00000 	.word	0x3ff00000
 8011ef8:	08012980 	.word	0x08012980
 8011efc:	40200000 	.word	0x40200000
 8011f00:	3ff00000 	.word	0x3ff00000
 8011f04:	3e700000 	.word	0x3e700000
 8011f08:	41700000 	.word	0x41700000
 8011f0c:	3fe00000 	.word	0x3fe00000
 8011f10:	08012940 	.word	0x08012940
 8011f14:	f854 3b04 	ldr.w	r3, [r4], #4
 8011f18:	b945      	cbnz	r5, 8011f2c <__kernel_rem_pio2+0x344>
 8011f1a:	b123      	cbz	r3, 8011f26 <__kernel_rem_pio2+0x33e>
 8011f1c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8011f20:	f844 3c04 	str.w	r3, [r4, #-4]
 8011f24:	2301      	movs	r3, #1
 8011f26:	3201      	adds	r2, #1
 8011f28:	461d      	mov	r5, r3
 8011f2a:	e738      	b.n	8011d9e <__kernel_rem_pio2+0x1b6>
 8011f2c:	1acb      	subs	r3, r1, r3
 8011f2e:	e7f7      	b.n	8011f20 <__kernel_rem_pio2+0x338>
 8011f30:	f108 32ff 	add.w	r2, r8, #4294967295
 8011f34:	ab0c      	add	r3, sp, #48	@ 0x30
 8011f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f3a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011f3e:	a90c      	add	r1, sp, #48	@ 0x30
 8011f40:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011f44:	e739      	b.n	8011dba <__kernel_rem_pio2+0x1d2>
 8011f46:	f108 32ff 	add.w	r2, r8, #4294967295
 8011f4a:	ab0c      	add	r3, sp, #48	@ 0x30
 8011f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f50:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011f54:	e7f3      	b.n	8011f3e <__kernel_rem_pio2+0x356>
 8011f56:	a90c      	add	r1, sp, #48	@ 0x30
 8011f58:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011f5c:	3b01      	subs	r3, #1
 8011f5e:	430a      	orrs	r2, r1
 8011f60:	e787      	b.n	8011e72 <__kernel_rem_pio2+0x28a>
 8011f62:	3401      	adds	r4, #1
 8011f64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011f68:	2a00      	cmp	r2, #0
 8011f6a:	d0fa      	beq.n	8011f62 <__kernel_rem_pio2+0x37a>
 8011f6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f6e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011f72:	eb0d 0503 	add.w	r5, sp, r3
 8011f76:	9b06      	ldr	r3, [sp, #24]
 8011f78:	aa20      	add	r2, sp, #128	@ 0x80
 8011f7a:	4443      	add	r3, r8
 8011f7c:	f108 0701 	add.w	r7, r8, #1
 8011f80:	3d98      	subs	r5, #152	@ 0x98
 8011f82:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8011f86:	4444      	add	r4, r8
 8011f88:	42bc      	cmp	r4, r7
 8011f8a:	da04      	bge.n	8011f96 <__kernel_rem_pio2+0x3ae>
 8011f8c:	46a0      	mov	r8, r4
 8011f8e:	e6a2      	b.n	8011cd6 <__kernel_rem_pio2+0xee>
 8011f90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f92:	2401      	movs	r4, #1
 8011f94:	e7e6      	b.n	8011f64 <__kernel_rem_pio2+0x37c>
 8011f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f98:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011f9c:	f7ee fae2 	bl	8000564 <__aeabi_i2d>
 8011fa0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8012268 <__kernel_rem_pio2+0x680>
 8011fa4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011fa8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011fac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011fb0:	46b2      	mov	sl, r6
 8011fb2:	f04f 0800 	mov.w	r8, #0
 8011fb6:	9b05      	ldr	r3, [sp, #20]
 8011fb8:	4598      	cmp	r8, r3
 8011fba:	dd05      	ble.n	8011fc8 <__kernel_rem_pio2+0x3e0>
 8011fbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011fc0:	3701      	adds	r7, #1
 8011fc2:	eca5 7b02 	vstmia	r5!, {d7}
 8011fc6:	e7df      	b.n	8011f88 <__kernel_rem_pio2+0x3a0>
 8011fc8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8011fcc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011fd0:	f7ee fb32 	bl	8000638 <__aeabi_dmul>
 8011fd4:	4602      	mov	r2, r0
 8011fd6:	460b      	mov	r3, r1
 8011fd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fdc:	f7ee f976 	bl	80002cc <__adddf3>
 8011fe0:	f108 0801 	add.w	r8, r8, #1
 8011fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fe8:	e7e5      	b.n	8011fb6 <__kernel_rem_pio2+0x3ce>
 8011fea:	f1cb 0000 	rsb	r0, fp, #0
 8011fee:	ec47 6b10 	vmov	d0, r6, r7
 8011ff2:	f7ff fd3d 	bl	8011a70 <scalbn>
 8011ff6:	ec55 4b10 	vmov	r4, r5, d0
 8011ffa:	4b9d      	ldr	r3, [pc, #628]	@ (8012270 <__kernel_rem_pio2+0x688>)
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	4620      	mov	r0, r4
 8012000:	4629      	mov	r1, r5
 8012002:	f7ee fd9f 	bl	8000b44 <__aeabi_dcmpge>
 8012006:	b300      	cbz	r0, 801204a <__kernel_rem_pio2+0x462>
 8012008:	4b9a      	ldr	r3, [pc, #616]	@ (8012274 <__kernel_rem_pio2+0x68c>)
 801200a:	2200      	movs	r2, #0
 801200c:	4620      	mov	r0, r4
 801200e:	4629      	mov	r1, r5
 8012010:	f7ee fb12 	bl	8000638 <__aeabi_dmul>
 8012014:	f7ee fdc0 	bl	8000b98 <__aeabi_d2iz>
 8012018:	4606      	mov	r6, r0
 801201a:	f7ee faa3 	bl	8000564 <__aeabi_i2d>
 801201e:	4b94      	ldr	r3, [pc, #592]	@ (8012270 <__kernel_rem_pio2+0x688>)
 8012020:	2200      	movs	r2, #0
 8012022:	f7ee fb09 	bl	8000638 <__aeabi_dmul>
 8012026:	460b      	mov	r3, r1
 8012028:	4602      	mov	r2, r0
 801202a:	4629      	mov	r1, r5
 801202c:	4620      	mov	r0, r4
 801202e:	f7ee f94b 	bl	80002c8 <__aeabi_dsub>
 8012032:	f7ee fdb1 	bl	8000b98 <__aeabi_d2iz>
 8012036:	ab0c      	add	r3, sp, #48	@ 0x30
 8012038:	f10b 0b18 	add.w	fp, fp, #24
 801203c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8012040:	f108 0801 	add.w	r8, r8, #1
 8012044:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8012048:	e722      	b.n	8011e90 <__kernel_rem_pio2+0x2a8>
 801204a:	4620      	mov	r0, r4
 801204c:	4629      	mov	r1, r5
 801204e:	f7ee fda3 	bl	8000b98 <__aeabi_d2iz>
 8012052:	ab0c      	add	r3, sp, #48	@ 0x30
 8012054:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8012058:	e71a      	b.n	8011e90 <__kernel_rem_pio2+0x2a8>
 801205a:	ab0c      	add	r3, sp, #48	@ 0x30
 801205c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012060:	f7ee fa80 	bl	8000564 <__aeabi_i2d>
 8012064:	4622      	mov	r2, r4
 8012066:	462b      	mov	r3, r5
 8012068:	f7ee fae6 	bl	8000638 <__aeabi_dmul>
 801206c:	4652      	mov	r2, sl
 801206e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8012072:	465b      	mov	r3, fp
 8012074:	4620      	mov	r0, r4
 8012076:	4629      	mov	r1, r5
 8012078:	f7ee fade 	bl	8000638 <__aeabi_dmul>
 801207c:	3e01      	subs	r6, #1
 801207e:	4604      	mov	r4, r0
 8012080:	460d      	mov	r5, r1
 8012082:	e718      	b.n	8011eb6 <__kernel_rem_pio2+0x2ce>
 8012084:	9906      	ldr	r1, [sp, #24]
 8012086:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801208a:	9106      	str	r1, [sp, #24]
 801208c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8012090:	f7ee fad2 	bl	8000638 <__aeabi_dmul>
 8012094:	4602      	mov	r2, r0
 8012096:	460b      	mov	r3, r1
 8012098:	4650      	mov	r0, sl
 801209a:	4659      	mov	r1, fp
 801209c:	f7ee f916 	bl	80002cc <__adddf3>
 80120a0:	3601      	adds	r6, #1
 80120a2:	4682      	mov	sl, r0
 80120a4:	468b      	mov	fp, r1
 80120a6:	9b00      	ldr	r3, [sp, #0]
 80120a8:	429e      	cmp	r6, r3
 80120aa:	dc01      	bgt.n	80120b0 <__kernel_rem_pio2+0x4c8>
 80120ac:	42b5      	cmp	r5, r6
 80120ae:	dae9      	bge.n	8012084 <__kernel_rem_pio2+0x49c>
 80120b0:	ab48      	add	r3, sp, #288	@ 0x120
 80120b2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80120b6:	e9c5 ab00 	strd	sl, fp, [r5]
 80120ba:	3c01      	subs	r4, #1
 80120bc:	e6ff      	b.n	8011ebe <__kernel_rem_pio2+0x2d6>
 80120be:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80120c0:	2b02      	cmp	r3, #2
 80120c2:	dc0b      	bgt.n	80120dc <__kernel_rem_pio2+0x4f4>
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	dc39      	bgt.n	801213c <__kernel_rem_pio2+0x554>
 80120c8:	d05d      	beq.n	8012186 <__kernel_rem_pio2+0x59e>
 80120ca:	9b02      	ldr	r3, [sp, #8]
 80120cc:	f003 0007 	and.w	r0, r3, #7
 80120d0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80120d4:	ecbd 8b02 	vpop	{d8}
 80120d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120dc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80120de:	2b03      	cmp	r3, #3
 80120e0:	d1f3      	bne.n	80120ca <__kernel_rem_pio2+0x4e2>
 80120e2:	9b05      	ldr	r3, [sp, #20]
 80120e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80120e8:	eb0d 0403 	add.w	r4, sp, r3
 80120ec:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80120f0:	4625      	mov	r5, r4
 80120f2:	46c2      	mov	sl, r8
 80120f4:	f1ba 0f00 	cmp.w	sl, #0
 80120f8:	f1a5 0508 	sub.w	r5, r5, #8
 80120fc:	dc6b      	bgt.n	80121d6 <__kernel_rem_pio2+0x5ee>
 80120fe:	4645      	mov	r5, r8
 8012100:	2d01      	cmp	r5, #1
 8012102:	f1a4 0408 	sub.w	r4, r4, #8
 8012106:	f300 8087 	bgt.w	8012218 <__kernel_rem_pio2+0x630>
 801210a:	9c05      	ldr	r4, [sp, #20]
 801210c:	ab48      	add	r3, sp, #288	@ 0x120
 801210e:	441c      	add	r4, r3
 8012110:	2000      	movs	r0, #0
 8012112:	2100      	movs	r1, #0
 8012114:	f1b8 0f01 	cmp.w	r8, #1
 8012118:	f300 809c 	bgt.w	8012254 <__kernel_rem_pio2+0x66c>
 801211c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8012120:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8012124:	f1b9 0f00 	cmp.w	r9, #0
 8012128:	f040 80a6 	bne.w	8012278 <__kernel_rem_pio2+0x690>
 801212c:	9b04      	ldr	r3, [sp, #16]
 801212e:	e9c3 7800 	strd	r7, r8, [r3]
 8012132:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012136:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801213a:	e7c6      	b.n	80120ca <__kernel_rem_pio2+0x4e2>
 801213c:	9d05      	ldr	r5, [sp, #20]
 801213e:	ab48      	add	r3, sp, #288	@ 0x120
 8012140:	441d      	add	r5, r3
 8012142:	4644      	mov	r4, r8
 8012144:	2000      	movs	r0, #0
 8012146:	2100      	movs	r1, #0
 8012148:	2c00      	cmp	r4, #0
 801214a:	da35      	bge.n	80121b8 <__kernel_rem_pio2+0x5d0>
 801214c:	f1b9 0f00 	cmp.w	r9, #0
 8012150:	d038      	beq.n	80121c4 <__kernel_rem_pio2+0x5dc>
 8012152:	4602      	mov	r2, r0
 8012154:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012158:	9c04      	ldr	r4, [sp, #16]
 801215a:	e9c4 2300 	strd	r2, r3, [r4]
 801215e:	4602      	mov	r2, r0
 8012160:	460b      	mov	r3, r1
 8012162:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8012166:	f7ee f8af 	bl	80002c8 <__aeabi_dsub>
 801216a:	ad4a      	add	r5, sp, #296	@ 0x128
 801216c:	2401      	movs	r4, #1
 801216e:	45a0      	cmp	r8, r4
 8012170:	da2b      	bge.n	80121ca <__kernel_rem_pio2+0x5e2>
 8012172:	f1b9 0f00 	cmp.w	r9, #0
 8012176:	d002      	beq.n	801217e <__kernel_rem_pio2+0x596>
 8012178:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801217c:	4619      	mov	r1, r3
 801217e:	9b04      	ldr	r3, [sp, #16]
 8012180:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012184:	e7a1      	b.n	80120ca <__kernel_rem_pio2+0x4e2>
 8012186:	9c05      	ldr	r4, [sp, #20]
 8012188:	ab48      	add	r3, sp, #288	@ 0x120
 801218a:	441c      	add	r4, r3
 801218c:	2000      	movs	r0, #0
 801218e:	2100      	movs	r1, #0
 8012190:	f1b8 0f00 	cmp.w	r8, #0
 8012194:	da09      	bge.n	80121aa <__kernel_rem_pio2+0x5c2>
 8012196:	f1b9 0f00 	cmp.w	r9, #0
 801219a:	d002      	beq.n	80121a2 <__kernel_rem_pio2+0x5ba>
 801219c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80121a0:	4619      	mov	r1, r3
 80121a2:	9b04      	ldr	r3, [sp, #16]
 80121a4:	e9c3 0100 	strd	r0, r1, [r3]
 80121a8:	e78f      	b.n	80120ca <__kernel_rem_pio2+0x4e2>
 80121aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80121ae:	f7ee f88d 	bl	80002cc <__adddf3>
 80121b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80121b6:	e7eb      	b.n	8012190 <__kernel_rem_pio2+0x5a8>
 80121b8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80121bc:	f7ee f886 	bl	80002cc <__adddf3>
 80121c0:	3c01      	subs	r4, #1
 80121c2:	e7c1      	b.n	8012148 <__kernel_rem_pio2+0x560>
 80121c4:	4602      	mov	r2, r0
 80121c6:	460b      	mov	r3, r1
 80121c8:	e7c6      	b.n	8012158 <__kernel_rem_pio2+0x570>
 80121ca:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80121ce:	f7ee f87d 	bl	80002cc <__adddf3>
 80121d2:	3401      	adds	r4, #1
 80121d4:	e7cb      	b.n	801216e <__kernel_rem_pio2+0x586>
 80121d6:	ed95 7b00 	vldr	d7, [r5]
 80121da:	ed8d 7b00 	vstr	d7, [sp]
 80121de:	ed95 7b02 	vldr	d7, [r5, #8]
 80121e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121e6:	ec53 2b17 	vmov	r2, r3, d7
 80121ea:	ed8d 7b06 	vstr	d7, [sp, #24]
 80121ee:	f7ee f86d 	bl	80002cc <__adddf3>
 80121f2:	4602      	mov	r2, r0
 80121f4:	460b      	mov	r3, r1
 80121f6:	4606      	mov	r6, r0
 80121f8:	460f      	mov	r7, r1
 80121fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121fe:	f7ee f863 	bl	80002c8 <__aeabi_dsub>
 8012202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012206:	f7ee f861 	bl	80002cc <__adddf3>
 801220a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801220e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8012212:	e9c5 6700 	strd	r6, r7, [r5]
 8012216:	e76d      	b.n	80120f4 <__kernel_rem_pio2+0x50c>
 8012218:	ed94 7b00 	vldr	d7, [r4]
 801221c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8012220:	ec51 0b17 	vmov	r0, r1, d7
 8012224:	4652      	mov	r2, sl
 8012226:	465b      	mov	r3, fp
 8012228:	ed8d 7b00 	vstr	d7, [sp]
 801222c:	f7ee f84e 	bl	80002cc <__adddf3>
 8012230:	4602      	mov	r2, r0
 8012232:	460b      	mov	r3, r1
 8012234:	4606      	mov	r6, r0
 8012236:	460f      	mov	r7, r1
 8012238:	e9dd 0100 	ldrd	r0, r1, [sp]
 801223c:	f7ee f844 	bl	80002c8 <__aeabi_dsub>
 8012240:	4652      	mov	r2, sl
 8012242:	465b      	mov	r3, fp
 8012244:	f7ee f842 	bl	80002cc <__adddf3>
 8012248:	3d01      	subs	r5, #1
 801224a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801224e:	e9c4 6700 	strd	r6, r7, [r4]
 8012252:	e755      	b.n	8012100 <__kernel_rem_pio2+0x518>
 8012254:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012258:	f7ee f838 	bl	80002cc <__adddf3>
 801225c:	f108 38ff 	add.w	r8, r8, #4294967295
 8012260:	e758      	b.n	8012114 <__kernel_rem_pio2+0x52c>
 8012262:	bf00      	nop
 8012264:	f3af 8000 	nop.w
	...
 8012270:	41700000 	.word	0x41700000
 8012274:	3e700000 	.word	0x3e700000
 8012278:	9b04      	ldr	r3, [sp, #16]
 801227a:	9a04      	ldr	r2, [sp, #16]
 801227c:	601f      	str	r7, [r3, #0]
 801227e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8012282:	605c      	str	r4, [r3, #4]
 8012284:	609d      	str	r5, [r3, #8]
 8012286:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801228a:	60d3      	str	r3, [r2, #12]
 801228c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012290:	6110      	str	r0, [r2, #16]
 8012292:	6153      	str	r3, [r2, #20]
 8012294:	e719      	b.n	80120ca <__kernel_rem_pio2+0x4e2>
 8012296:	bf00      	nop

08012298 <floor>:
 8012298:	ec51 0b10 	vmov	r0, r1, d0
 801229c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80122a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122a4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80122a8:	2e13      	cmp	r6, #19
 80122aa:	460c      	mov	r4, r1
 80122ac:	4605      	mov	r5, r0
 80122ae:	4680      	mov	r8, r0
 80122b0:	dc34      	bgt.n	801231c <floor+0x84>
 80122b2:	2e00      	cmp	r6, #0
 80122b4:	da17      	bge.n	80122e6 <floor+0x4e>
 80122b6:	a332      	add	r3, pc, #200	@ (adr r3, 8012380 <floor+0xe8>)
 80122b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122bc:	f7ee f806 	bl	80002cc <__adddf3>
 80122c0:	2200      	movs	r2, #0
 80122c2:	2300      	movs	r3, #0
 80122c4:	f7ee fc48 	bl	8000b58 <__aeabi_dcmpgt>
 80122c8:	b150      	cbz	r0, 80122e0 <floor+0x48>
 80122ca:	2c00      	cmp	r4, #0
 80122cc:	da55      	bge.n	801237a <floor+0xe2>
 80122ce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80122d2:	432c      	orrs	r4, r5
 80122d4:	2500      	movs	r5, #0
 80122d6:	42ac      	cmp	r4, r5
 80122d8:	4c2b      	ldr	r4, [pc, #172]	@ (8012388 <floor+0xf0>)
 80122da:	bf08      	it	eq
 80122dc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80122e0:	4621      	mov	r1, r4
 80122e2:	4628      	mov	r0, r5
 80122e4:	e023      	b.n	801232e <floor+0x96>
 80122e6:	4f29      	ldr	r7, [pc, #164]	@ (801238c <floor+0xf4>)
 80122e8:	4137      	asrs	r7, r6
 80122ea:	ea01 0307 	and.w	r3, r1, r7
 80122ee:	4303      	orrs	r3, r0
 80122f0:	d01d      	beq.n	801232e <floor+0x96>
 80122f2:	a323      	add	r3, pc, #140	@ (adr r3, 8012380 <floor+0xe8>)
 80122f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f8:	f7ed ffe8 	bl	80002cc <__adddf3>
 80122fc:	2200      	movs	r2, #0
 80122fe:	2300      	movs	r3, #0
 8012300:	f7ee fc2a 	bl	8000b58 <__aeabi_dcmpgt>
 8012304:	2800      	cmp	r0, #0
 8012306:	d0eb      	beq.n	80122e0 <floor+0x48>
 8012308:	2c00      	cmp	r4, #0
 801230a:	bfbe      	ittt	lt
 801230c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8012310:	4133      	asrlt	r3, r6
 8012312:	18e4      	addlt	r4, r4, r3
 8012314:	ea24 0407 	bic.w	r4, r4, r7
 8012318:	2500      	movs	r5, #0
 801231a:	e7e1      	b.n	80122e0 <floor+0x48>
 801231c:	2e33      	cmp	r6, #51	@ 0x33
 801231e:	dd0a      	ble.n	8012336 <floor+0x9e>
 8012320:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8012324:	d103      	bne.n	801232e <floor+0x96>
 8012326:	4602      	mov	r2, r0
 8012328:	460b      	mov	r3, r1
 801232a:	f7ed ffcf 	bl	80002cc <__adddf3>
 801232e:	ec41 0b10 	vmov	d0, r0, r1
 8012332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012336:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801233a:	f04f 37ff 	mov.w	r7, #4294967295
 801233e:	40df      	lsrs	r7, r3
 8012340:	4207      	tst	r7, r0
 8012342:	d0f4      	beq.n	801232e <floor+0x96>
 8012344:	a30e      	add	r3, pc, #56	@ (adr r3, 8012380 <floor+0xe8>)
 8012346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801234a:	f7ed ffbf 	bl	80002cc <__adddf3>
 801234e:	2200      	movs	r2, #0
 8012350:	2300      	movs	r3, #0
 8012352:	f7ee fc01 	bl	8000b58 <__aeabi_dcmpgt>
 8012356:	2800      	cmp	r0, #0
 8012358:	d0c2      	beq.n	80122e0 <floor+0x48>
 801235a:	2c00      	cmp	r4, #0
 801235c:	da0a      	bge.n	8012374 <floor+0xdc>
 801235e:	2e14      	cmp	r6, #20
 8012360:	d101      	bne.n	8012366 <floor+0xce>
 8012362:	3401      	adds	r4, #1
 8012364:	e006      	b.n	8012374 <floor+0xdc>
 8012366:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801236a:	2301      	movs	r3, #1
 801236c:	40b3      	lsls	r3, r6
 801236e:	441d      	add	r5, r3
 8012370:	4545      	cmp	r5, r8
 8012372:	d3f6      	bcc.n	8012362 <floor+0xca>
 8012374:	ea25 0507 	bic.w	r5, r5, r7
 8012378:	e7b2      	b.n	80122e0 <floor+0x48>
 801237a:	2500      	movs	r5, #0
 801237c:	462c      	mov	r4, r5
 801237e:	e7af      	b.n	80122e0 <floor+0x48>
 8012380:	8800759c 	.word	0x8800759c
 8012384:	7e37e43c 	.word	0x7e37e43c
 8012388:	bff00000 	.word	0xbff00000
 801238c:	000fffff 	.word	0x000fffff

08012390 <_init>:
 8012390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012392:	bf00      	nop
 8012394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012396:	bc08      	pop	{r3}
 8012398:	469e      	mov	lr, r3
 801239a:	4770      	bx	lr

0801239c <_fini>:
 801239c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801239e:	bf00      	nop
 80123a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123a2:	bc08      	pop	{r3}
 80123a4:	469e      	mov	lr, r3
 80123a6:	4770      	bx	lr
