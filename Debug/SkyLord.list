
SkyLord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001538c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  08015560  08015560  00016560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015d60  08015d60  00017214  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08015d60  08015d60  00016d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015d68  08015d68  00017214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015d68  08015d68  00016d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015d6c  08015d6c  00016d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  08015d70  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001794  20000214  08015f84  00017214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019a8  08015f84  000179a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cfb5  00000000  00000000  00017244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040bc  00000000  00000000  000341f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  000382b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001148  00000000  00000000  000398c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000277aa  00000000  00000000  0003aa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ea45  00000000  00000000  000621b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5c3d  00000000  00000000  00080bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166834  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007afc  00000000  00000000  00166878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0016e374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000214 	.word	0x20000214
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015544 	.word	0x08015544

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000218 	.word	0x20000218
 800020c:	08015544 	.word	0x08015544

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	@ 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000f02:	f000 ba09 	b.w	8001318 <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000f98:	f000 b9be 	b.w	8001318 <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	468e      	mov	lr, r1
 8001028:	4604      	mov	r4, r0
 800102a:	4688      	mov	r8, r1
 800102c:	2b00      	cmp	r3, #0
 800102e:	d14a      	bne.n	80010c6 <__udivmoddi4+0xa6>
 8001030:	428a      	cmp	r2, r1
 8001032:	4617      	mov	r7, r2
 8001034:	d962      	bls.n	80010fc <__udivmoddi4+0xdc>
 8001036:	fab2 f682 	clz	r6, r2
 800103a:	b14e      	cbz	r6, 8001050 <__udivmoddi4+0x30>
 800103c:	f1c6 0320 	rsb	r3, r6, #32
 8001040:	fa01 f806 	lsl.w	r8, r1, r6
 8001044:	fa20 f303 	lsr.w	r3, r0, r3
 8001048:	40b7      	lsls	r7, r6
 800104a:	ea43 0808 	orr.w	r8, r3, r8
 800104e:	40b4      	lsls	r4, r6
 8001050:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001054:	fa1f fc87 	uxth.w	ip, r7
 8001058:	fbb8 f1fe 	udiv	r1, r8, lr
 800105c:	0c23      	lsrs	r3, r4, #16
 800105e:	fb0e 8811 	mls	r8, lr, r1, r8
 8001062:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001066:	fb01 f20c 	mul.w	r2, r1, ip
 800106a:	429a      	cmp	r2, r3
 800106c:	d909      	bls.n	8001082 <__udivmoddi4+0x62>
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8001074:	f080 80ea 	bcs.w	800124c <__udivmoddi4+0x22c>
 8001078:	429a      	cmp	r2, r3
 800107a:	f240 80e7 	bls.w	800124c <__udivmoddi4+0x22c>
 800107e:	3902      	subs	r1, #2
 8001080:	443b      	add	r3, r7
 8001082:	1a9a      	subs	r2, r3, r2
 8001084:	b2a3      	uxth	r3, r4
 8001086:	fbb2 f0fe 	udiv	r0, r2, lr
 800108a:	fb0e 2210 	mls	r2, lr, r0, r2
 800108e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001092:	fb00 fc0c 	mul.w	ip, r0, ip
 8001096:	459c      	cmp	ip, r3
 8001098:	d909      	bls.n	80010ae <__udivmoddi4+0x8e>
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80010a0:	f080 80d6 	bcs.w	8001250 <__udivmoddi4+0x230>
 80010a4:	459c      	cmp	ip, r3
 80010a6:	f240 80d3 	bls.w	8001250 <__udivmoddi4+0x230>
 80010aa:	443b      	add	r3, r7
 80010ac:	3802      	subs	r0, #2
 80010ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80010b2:	eba3 030c 	sub.w	r3, r3, ip
 80010b6:	2100      	movs	r1, #0
 80010b8:	b11d      	cbz	r5, 80010c2 <__udivmoddi4+0xa2>
 80010ba:	40f3      	lsrs	r3, r6
 80010bc:	2200      	movs	r2, #0
 80010be:	e9c5 3200 	strd	r3, r2, [r5]
 80010c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c6:	428b      	cmp	r3, r1
 80010c8:	d905      	bls.n	80010d6 <__udivmoddi4+0xb6>
 80010ca:	b10d      	cbz	r5, 80010d0 <__udivmoddi4+0xb0>
 80010cc:	e9c5 0100 	strd	r0, r1, [r5]
 80010d0:	2100      	movs	r1, #0
 80010d2:	4608      	mov	r0, r1
 80010d4:	e7f5      	b.n	80010c2 <__udivmoddi4+0xa2>
 80010d6:	fab3 f183 	clz	r1, r3
 80010da:	2900      	cmp	r1, #0
 80010dc:	d146      	bne.n	800116c <__udivmoddi4+0x14c>
 80010de:	4573      	cmp	r3, lr
 80010e0:	d302      	bcc.n	80010e8 <__udivmoddi4+0xc8>
 80010e2:	4282      	cmp	r2, r0
 80010e4:	f200 8105 	bhi.w	80012f2 <__udivmoddi4+0x2d2>
 80010e8:	1a84      	subs	r4, r0, r2
 80010ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80010ee:	2001      	movs	r0, #1
 80010f0:	4690      	mov	r8, r2
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	d0e5      	beq.n	80010c2 <__udivmoddi4+0xa2>
 80010f6:	e9c5 4800 	strd	r4, r8, [r5]
 80010fa:	e7e2      	b.n	80010c2 <__udivmoddi4+0xa2>
 80010fc:	2a00      	cmp	r2, #0
 80010fe:	f000 8090 	beq.w	8001222 <__udivmoddi4+0x202>
 8001102:	fab2 f682 	clz	r6, r2
 8001106:	2e00      	cmp	r6, #0
 8001108:	f040 80a4 	bne.w	8001254 <__udivmoddi4+0x234>
 800110c:	1a8a      	subs	r2, r1, r2
 800110e:	0c03      	lsrs	r3, r0, #16
 8001110:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001114:	b280      	uxth	r0, r0
 8001116:	b2bc      	uxth	r4, r7
 8001118:	2101      	movs	r1, #1
 800111a:	fbb2 fcfe 	udiv	ip, r2, lr
 800111e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001126:	fb04 f20c 	mul.w	r2, r4, ip
 800112a:	429a      	cmp	r2, r3
 800112c:	d907      	bls.n	800113e <__udivmoddi4+0x11e>
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8001134:	d202      	bcs.n	800113c <__udivmoddi4+0x11c>
 8001136:	429a      	cmp	r2, r3
 8001138:	f200 80e0 	bhi.w	80012fc <__udivmoddi4+0x2dc>
 800113c:	46c4      	mov	ip, r8
 800113e:	1a9b      	subs	r3, r3, r2
 8001140:	fbb3 f2fe 	udiv	r2, r3, lr
 8001144:	fb0e 3312 	mls	r3, lr, r2, r3
 8001148:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800114c:	fb02 f404 	mul.w	r4, r2, r4
 8001150:	429c      	cmp	r4, r3
 8001152:	d907      	bls.n	8001164 <__udivmoddi4+0x144>
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800115a:	d202      	bcs.n	8001162 <__udivmoddi4+0x142>
 800115c:	429c      	cmp	r4, r3
 800115e:	f200 80ca 	bhi.w	80012f6 <__udivmoddi4+0x2d6>
 8001162:	4602      	mov	r2, r0
 8001164:	1b1b      	subs	r3, r3, r4
 8001166:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800116a:	e7a5      	b.n	80010b8 <__udivmoddi4+0x98>
 800116c:	f1c1 0620 	rsb	r6, r1, #32
 8001170:	408b      	lsls	r3, r1
 8001172:	fa22 f706 	lsr.w	r7, r2, r6
 8001176:	431f      	orrs	r7, r3
 8001178:	fa0e f401 	lsl.w	r4, lr, r1
 800117c:	fa20 f306 	lsr.w	r3, r0, r6
 8001180:	fa2e fe06 	lsr.w	lr, lr, r6
 8001184:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001188:	4323      	orrs	r3, r4
 800118a:	fa00 f801 	lsl.w	r8, r0, r1
 800118e:	fa1f fc87 	uxth.w	ip, r7
 8001192:	fbbe f0f9 	udiv	r0, lr, r9
 8001196:	0c1c      	lsrs	r4, r3, #16
 8001198:	fb09 ee10 	mls	lr, r9, r0, lr
 800119c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80011a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80011a4:	45a6      	cmp	lr, r4
 80011a6:	fa02 f201 	lsl.w	r2, r2, r1
 80011aa:	d909      	bls.n	80011c0 <__udivmoddi4+0x1a0>
 80011ac:	193c      	adds	r4, r7, r4
 80011ae:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80011b2:	f080 809c 	bcs.w	80012ee <__udivmoddi4+0x2ce>
 80011b6:	45a6      	cmp	lr, r4
 80011b8:	f240 8099 	bls.w	80012ee <__udivmoddi4+0x2ce>
 80011bc:	3802      	subs	r0, #2
 80011be:	443c      	add	r4, r7
 80011c0:	eba4 040e 	sub.w	r4, r4, lr
 80011c4:	fa1f fe83 	uxth.w	lr, r3
 80011c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80011cc:	fb09 4413 	mls	r4, r9, r3, r4
 80011d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80011d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80011d8:	45a4      	cmp	ip, r4
 80011da:	d908      	bls.n	80011ee <__udivmoddi4+0x1ce>
 80011dc:	193c      	adds	r4, r7, r4
 80011de:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80011e2:	f080 8082 	bcs.w	80012ea <__udivmoddi4+0x2ca>
 80011e6:	45a4      	cmp	ip, r4
 80011e8:	d97f      	bls.n	80012ea <__udivmoddi4+0x2ca>
 80011ea:	3b02      	subs	r3, #2
 80011ec:	443c      	add	r4, r7
 80011ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80011f2:	eba4 040c 	sub.w	r4, r4, ip
 80011f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80011fa:	4564      	cmp	r4, ip
 80011fc:	4673      	mov	r3, lr
 80011fe:	46e1      	mov	r9, ip
 8001200:	d362      	bcc.n	80012c8 <__udivmoddi4+0x2a8>
 8001202:	d05f      	beq.n	80012c4 <__udivmoddi4+0x2a4>
 8001204:	b15d      	cbz	r5, 800121e <__udivmoddi4+0x1fe>
 8001206:	ebb8 0203 	subs.w	r2, r8, r3
 800120a:	eb64 0409 	sbc.w	r4, r4, r9
 800120e:	fa04 f606 	lsl.w	r6, r4, r6
 8001212:	fa22 f301 	lsr.w	r3, r2, r1
 8001216:	431e      	orrs	r6, r3
 8001218:	40cc      	lsrs	r4, r1
 800121a:	e9c5 6400 	strd	r6, r4, [r5]
 800121e:	2100      	movs	r1, #0
 8001220:	e74f      	b.n	80010c2 <__udivmoddi4+0xa2>
 8001222:	fbb1 fcf2 	udiv	ip, r1, r2
 8001226:	0c01      	lsrs	r1, r0, #16
 8001228:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800122c:	b280      	uxth	r0, r0
 800122e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001232:	463b      	mov	r3, r7
 8001234:	4638      	mov	r0, r7
 8001236:	463c      	mov	r4, r7
 8001238:	46b8      	mov	r8, r7
 800123a:	46be      	mov	lr, r7
 800123c:	2620      	movs	r6, #32
 800123e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001242:	eba2 0208 	sub.w	r2, r2, r8
 8001246:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800124a:	e766      	b.n	800111a <__udivmoddi4+0xfa>
 800124c:	4601      	mov	r1, r0
 800124e:	e718      	b.n	8001082 <__udivmoddi4+0x62>
 8001250:	4610      	mov	r0, r2
 8001252:	e72c      	b.n	80010ae <__udivmoddi4+0x8e>
 8001254:	f1c6 0220 	rsb	r2, r6, #32
 8001258:	fa2e f302 	lsr.w	r3, lr, r2
 800125c:	40b7      	lsls	r7, r6
 800125e:	40b1      	lsls	r1, r6
 8001260:	fa20 f202 	lsr.w	r2, r0, r2
 8001264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001268:	430a      	orrs	r2, r1
 800126a:	fbb3 f8fe 	udiv	r8, r3, lr
 800126e:	b2bc      	uxth	r4, r7
 8001270:	fb0e 3318 	mls	r3, lr, r8, r3
 8001274:	0c11      	lsrs	r1, r2, #16
 8001276:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800127a:	fb08 f904 	mul.w	r9, r8, r4
 800127e:	40b0      	lsls	r0, r6
 8001280:	4589      	cmp	r9, r1
 8001282:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001286:	b280      	uxth	r0, r0
 8001288:	d93e      	bls.n	8001308 <__udivmoddi4+0x2e8>
 800128a:	1879      	adds	r1, r7, r1
 800128c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8001290:	d201      	bcs.n	8001296 <__udivmoddi4+0x276>
 8001292:	4589      	cmp	r9, r1
 8001294:	d81f      	bhi.n	80012d6 <__udivmoddi4+0x2b6>
 8001296:	eba1 0109 	sub.w	r1, r1, r9
 800129a:	fbb1 f9fe 	udiv	r9, r1, lr
 800129e:	fb09 f804 	mul.w	r8, r9, r4
 80012a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80012a6:	b292      	uxth	r2, r2
 80012a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012ac:	4542      	cmp	r2, r8
 80012ae:	d229      	bcs.n	8001304 <__udivmoddi4+0x2e4>
 80012b0:	18ba      	adds	r2, r7, r2
 80012b2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80012b6:	d2c4      	bcs.n	8001242 <__udivmoddi4+0x222>
 80012b8:	4542      	cmp	r2, r8
 80012ba:	d2c2      	bcs.n	8001242 <__udivmoddi4+0x222>
 80012bc:	f1a9 0102 	sub.w	r1, r9, #2
 80012c0:	443a      	add	r2, r7
 80012c2:	e7be      	b.n	8001242 <__udivmoddi4+0x222>
 80012c4:	45f0      	cmp	r8, lr
 80012c6:	d29d      	bcs.n	8001204 <__udivmoddi4+0x1e4>
 80012c8:	ebbe 0302 	subs.w	r3, lr, r2
 80012cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80012d0:	3801      	subs	r0, #1
 80012d2:	46e1      	mov	r9, ip
 80012d4:	e796      	b.n	8001204 <__udivmoddi4+0x1e4>
 80012d6:	eba7 0909 	sub.w	r9, r7, r9
 80012da:	4449      	add	r1, r9
 80012dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80012e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80012e4:	fb09 f804 	mul.w	r8, r9, r4
 80012e8:	e7db      	b.n	80012a2 <__udivmoddi4+0x282>
 80012ea:	4673      	mov	r3, lr
 80012ec:	e77f      	b.n	80011ee <__udivmoddi4+0x1ce>
 80012ee:	4650      	mov	r0, sl
 80012f0:	e766      	b.n	80011c0 <__udivmoddi4+0x1a0>
 80012f2:	4608      	mov	r0, r1
 80012f4:	e6fd      	b.n	80010f2 <__udivmoddi4+0xd2>
 80012f6:	443b      	add	r3, r7
 80012f8:	3a02      	subs	r2, #2
 80012fa:	e733      	b.n	8001164 <__udivmoddi4+0x144>
 80012fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8001300:	443b      	add	r3, r7
 8001302:	e71c      	b.n	800113e <__udivmoddi4+0x11e>
 8001304:	4649      	mov	r1, r9
 8001306:	e79c      	b.n	8001242 <__udivmoddi4+0x222>
 8001308:	eba1 0109 	sub.w	r1, r1, r9
 800130c:	46c4      	mov	ip, r8
 800130e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001312:	fb09 f804 	mul.w	r8, r9, r4
 8001316:	e7c4      	b.n	80012a2 <__udivmoddi4+0x282>

08001318 <__aeabi_idiv0>:
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop

0800131c <bme280_getVals>:
static uint8_t bme_started_flag = 0;
static uint8_t last_measuring = 1;


void bme280_getVals()
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af04      	add	r7, sp, #16
	uint8_t status;
    HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 8001322:	4b3c      	ldr	r3, [pc, #240]	@ (8001414 <bme280_getVals+0xf8>)
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	2364      	movs	r3, #100	@ 0x64
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	2301      	movs	r3, #1
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	f107 030d 	add.w	r3, r7, #13
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	22f3      	movs	r2, #243	@ 0xf3
 8001338:	21ec      	movs	r1, #236	@ 0xec
 800133a:	f009 fa45 	bl	800a7c8 <HAL_I2C_Mem_Read>
 800133e:	4603      	mov	r3, r0
 8001340:	73fb      	strb	r3, [r7, #15]
    BME->isUpdated = 0;
 8001342:	4b35      	ldr	r3, [pc, #212]	@ (8001418 <bme280_getVals+0xfc>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    uint8_t current_measuring = ((status & (0x01 << 3)) == 0);
 800134c:	7b7b      	ldrb	r3, [r7, #13]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b00      	cmp	r3, #0
 8001354:	bf0c      	ite	eq
 8001356:	2301      	moveq	r3, #1
 8001358:	2300      	movne	r3, #0
 800135a:	b2db      	uxtb	r3, r3
 800135c:	73bb      	strb	r3, [r7, #14]

    if ((last_measuring == 1) && (current_measuring == 0)) {
 800135e:	4b2f      	ldr	r3, [pc, #188]	@ (800141c <bme280_getVals+0x100>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d14f      	bne.n	8001406 <bme280_getVals+0xea>
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d14c      	bne.n	8001406 <bme280_getVals+0xea>
        uint8_t data[8];
        retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, data, 8, 20);
 800136c:	4b29      	ldr	r3, [pc, #164]	@ (8001414 <bme280_getVals+0xf8>)
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	2314      	movs	r3, #20
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	2308      	movs	r3, #8
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2301      	movs	r3, #1
 800137e:	22f7      	movs	r2, #247	@ 0xf7
 8001380:	21ec      	movs	r1, #236	@ 0xec
 8001382:	f009 fa21 	bl	800a7c8 <HAL_I2C_Mem_Read>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]
        if (retVal == HAL_OK && memcmp(data, BME->lastReadings, 8) != 0) {
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d13a      	bne.n	8001406 <bme280_getVals+0xea>
 8001390:	4b21      	ldr	r3, [pc, #132]	@ (8001418 <bme280_getVals+0xfc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	2208      	movs	r2, #8
 800139c:	4618      	mov	r0, r3
 800139e:	f00e fc7b 	bl	800fc98 <memcmp>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d02e      	beq.n	8001406 <bme280_getVals+0xea>
            memcpy(BME->lastReadings, data, 8);
 80013a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <bme280_getVals+0xfc>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3334      	adds	r3, #52	@ 0x34
 80013ae:	461a      	mov	r2, r3
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	cb03      	ldmia	r3!, {r0, r1}
 80013b4:	6010      	str	r0, [r2, #0]
 80013b6:	6051      	str	r1, [r2, #4]
            BME->isUpdated = 1;
 80013b8:	4b17      	ldr	r3, [pc, #92]	@ (8001418 <bme280_getVals+0xfc>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2201      	movs	r2, #1
 80013be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            BME->adcVals.ut = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | ((int32_t)data[5] >> 4);
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	031a      	lsls	r2, r3, #12
 80013c6:	7a3b      	ldrb	r3, [r7, #8]
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	431a      	orrs	r2, r3
 80013cc:	7a7b      	ldrb	r3, [r7, #9]
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	4619      	mov	r1, r3
 80013d4:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <bme280_getVals+0xfc>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	609a      	str	r2, [r3, #8]
            BME->adcVals.up = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((int32_t)data[2] >> 4);
 80013dc:	793b      	ldrb	r3, [r7, #4]
 80013de:	031a      	lsls	r2, r3, #12
 80013e0:	797b      	ldrb	r3, [r7, #5]
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	431a      	orrs	r2, r3
 80013e6:	79bb      	ldrb	r3, [r7, #6]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	4619      	mov	r1, r3
 80013ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <bme280_getVals+0xfc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	60da      	str	r2, [r3, #12]
            BME->adcVals.uh = ((int32_t)data[6] << 8) | ((int32_t)data[7]);
 80013f6:	7abb      	ldrb	r3, [r7, #10]
 80013f8:	021a      	lsls	r2, r3, #8
 80013fa:	7afb      	ldrb	r3, [r7, #11]
 80013fc:	4619      	mov	r1, r3
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <bme280_getVals+0xfc>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	611a      	str	r2, [r3, #16]
        }
    }
    last_measuring = current_measuring;
 8001406:	4a05      	ldr	r2, [pc, #20]	@ (800141c <bme280_getVals+0x100>)
 8001408:	7bbb      	ldrb	r3, [r7, #14]
 800140a:	7013      	strb	r3, [r2, #0]
    UNUSED(retVal);
}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000230 	.word	0x20000230
 8001418:	20000234 	.word	0x20000234
 800141c:	20000000 	.word	0x20000000

08001420 <bme280_calculate_altitude>:



void bme280_calculate_altitude() {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
    // Standard sea level pressure in hPa
    float p_seaLevel = 1013.25;
 8001426:	4b24      	ldr	r3, [pc, #144]	@ (80014b8 <bme280_calculate_altitude+0x98>)
 8001428:	607b      	str	r3, [r7, #4]

    // Calculate altitude from pressure using barometric formula
    float rawAltitude = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 800142a:	4b24      	ldr	r3, [pc, #144]	@ (80014bc <bme280_calculate_altitude+0x9c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001432:	edd7 7a01 	vldr	s15, [r7, #4]
 8001436:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800143a:	ee16 0a90 	vmov	r0, s13
 800143e:	f7ff f8a3 	bl	8000588 <__aeabi_f2d>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 80014a8 <bme280_calculate_altitude+0x88>
 800144a:	ec43 2b10 	vmov	d0, r2, r3
 800144e:	f011 fd59 	bl	8012f04 <pow>
 8001452:	ec53 2b10 	vmov	r2, r3, d0
 8001456:	f04f 0000 	mov.w	r0, #0
 800145a:	4919      	ldr	r1, [pc, #100]	@ (80014c0 <bme280_calculate_altitude+0xa0>)
 800145c:	f7fe ff34 	bl	80002c8 <__aeabi_dsub>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	a311      	add	r3, pc, #68	@ (adr r3, 80014b0 <bme280_calculate_altitude+0x90>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	f7ff f8e3 	bl	8000638 <__aeabi_dmul>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff fbd5 	bl	8000c28 <__aeabi_d2f>
 800147e:	4603      	mov	r3, r0
 8001480:	603b      	str	r3, [r7, #0]

    // Apply base altitude correction
    BME->altitude = rawAltitude - BME->base_altitude;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <bme280_calculate_altitude+0x9c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <bme280_calculate_altitude+0x9c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	ed97 7a00 	vldr	s14, [r7]
 8001492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001496:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	f3af 8000 	nop.w
 80014a8:	ccd9456c 	.word	0xccd9456c
 80014ac:	3fc85b95 	.word	0x3fc85b95
 80014b0:	00000000 	.word	0x00000000
 80014b4:	40e5a540 	.word	0x40e5a540
 80014b8:	447d5000 	.word	0x447d5000
 80014bc:	20000234 	.word	0x20000234
 80014c0:	3ff00000 	.word	0x3ff00000

080014c4 <bme280_config>:

void bme280_config()
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08e      	sub	sp, #56	@ 0x38
 80014c8:	af04      	add	r7, sp, #16
    uint8_t params[25];
    HAL_StatusTypeDef retVal;

    BME->base_altitude = 0.0;
 80014ca:	4b96      	ldr	r3, [pc, #600]	@ (8001724 <bme280_config+0x260>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset and initialize I2C
    HAL_I2C_DeInit(I2C_);
 80014d4:	4b94      	ldr	r3, [pc, #592]	@ (8001728 <bme280_config+0x264>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f009 f84b 	bl	800a574 <HAL_I2C_DeInit>
    HAL_Delay(5);
 80014de:	2005      	movs	r0, #5
 80014e0:	f007 faa2 	bl	8008a28 <HAL_Delay>
    HAL_I2C_Init(I2C_);
 80014e4:	4b90      	ldr	r3, [pc, #576]	@ (8001728 <bme280_config+0x264>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f008 feff 	bl	800a2ec <HAL_I2C_Init>
    HAL_Delay(5);
 80014ee:	2005      	movs	r0, #5
 80014f0:	f007 fa9a 	bl	8008a28 <HAL_Delay>

    // Read calibration parameters
    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 80014f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001728 <bme280_config+0x264>)
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	23c8      	movs	r3, #200	@ 0xc8
 80014fa:	9302      	str	r3, [sp, #8]
 80014fc:	2319      	movs	r3, #25
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2301      	movs	r3, #1
 8001506:	2288      	movs	r2, #136	@ 0x88
 8001508:	21ec      	movs	r1, #236	@ 0xec
 800150a:	f009 f95d 	bl	800a7c8 <HAL_I2C_Mem_Read>
 800150e:	4603      	mov	r3, r0
 8001510:	77fb      	strb	r3, [r7, #31]

    BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 8001512:	793b      	ldrb	r3, [r7, #4]
 8001514:	4619      	mov	r1, r3
 8001516:	797b      	ldrb	r3, [r7, #5]
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	b29a      	uxth	r2, r3
 800151c:	4b81      	ldr	r3, [pc, #516]	@ (8001724 <bme280_config+0x260>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	b292      	uxth	r2, r2
 8001526:	801a      	strh	r2, [r3, #0]
    BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 8001528:	79bb      	ldrb	r3, [r7, #6]
 800152a:	b219      	sxth	r1, r3
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	b21b      	sxth	r3, r3
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	b21a      	sxth	r2, r3
 8001534:	4b7b      	ldr	r3, [pc, #492]	@ (8001724 <bme280_config+0x260>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	b212      	sxth	r2, r2
 800153e:	805a      	strh	r2, [r3, #2]
    BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001540:	7a3b      	ldrb	r3, [r7, #8]
 8001542:	b219      	sxth	r1, r3
 8001544:	7a7b      	ldrb	r3, [r7, #9]
 8001546:	b21b      	sxth	r3, r3
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	b21a      	sxth	r2, r3
 800154c:	4b75      	ldr	r3, [pc, #468]	@ (8001724 <bme280_config+0x260>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	b212      	sxth	r2, r2
 8001556:	809a      	strh	r2, [r3, #4]
    BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 8001558:	7abb      	ldrb	r3, [r7, #10]
 800155a:	b21a      	sxth	r2, r3
 800155c:	7afb      	ldrb	r3, [r7, #11]
 800155e:	b21b      	sxth	r3, r3
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b21b      	sxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b21a      	sxth	r2, r3
 8001568:	4b6e      	ldr	r3, [pc, #440]	@ (8001724 <bme280_config+0x260>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	b292      	uxth	r2, r2
 8001570:	80da      	strh	r2, [r3, #6]
    BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001572:	7b3b      	ldrb	r3, [r7, #12]
 8001574:	b219      	sxth	r1, r3
 8001576:	7b7b      	ldrb	r3, [r7, #13]
 8001578:	b21b      	sxth	r3, r3
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	b21a      	sxth	r2, r3
 800157e:	4b69      	ldr	r3, [pc, #420]	@ (8001724 <bme280_config+0x260>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	b212      	sxth	r2, r2
 8001588:	811a      	strh	r2, [r3, #8]
    BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800158a:	7bbb      	ldrb	r3, [r7, #14]
 800158c:	b219      	sxth	r1, r3
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	b21b      	sxth	r3, r3
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	4b63      	ldr	r3, [pc, #396]	@ (8001724 <bme280_config+0x260>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	b212      	sxth	r2, r2
 80015a0:	815a      	strh	r2, [r3, #10]
    BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 80015a2:	7c3b      	ldrb	r3, [r7, #16]
 80015a4:	b219      	sxth	r1, r3
 80015a6:	7c7b      	ldrb	r3, [r7, #17]
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001724 <bme280_config+0x260>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	b212      	sxth	r2, r2
 80015b8:	819a      	strh	r2, [r3, #12]
    BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 80015ba:	7cbb      	ldrb	r3, [r7, #18]
 80015bc:	b219      	sxth	r1, r3
 80015be:	7cfb      	ldrb	r3, [r7, #19]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	4b57      	ldr	r3, [pc, #348]	@ (8001724 <bme280_config+0x260>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	b212      	sxth	r2, r2
 80015d0:	81da      	strh	r2, [r3, #14]
    BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 80015d2:	7d3b      	ldrb	r3, [r7, #20]
 80015d4:	b219      	sxth	r1, r3
 80015d6:	7d7b      	ldrb	r3, [r7, #21]
 80015d8:	b21b      	sxth	r3, r3
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	b21a      	sxth	r2, r3
 80015de:	4b51      	ldr	r3, [pc, #324]	@ (8001724 <bme280_config+0x260>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	b212      	sxth	r2, r2
 80015e8:	821a      	strh	r2, [r3, #16]
    BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 80015ea:	7dbb      	ldrb	r3, [r7, #22]
 80015ec:	b219      	sxth	r1, r3
 80015ee:	7dfb      	ldrb	r3, [r7, #23]
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001724 <bme280_config+0x260>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	b212      	sxth	r2, r2
 8001600:	825a      	strh	r2, [r3, #18]
    BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 8001602:	7e3b      	ldrb	r3, [r7, #24]
 8001604:	b219      	sxth	r1, r3
 8001606:	7e7b      	ldrb	r3, [r7, #25]
 8001608:	b21b      	sxth	r3, r3
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	b21a      	sxth	r2, r3
 800160e:	4b45      	ldr	r3, [pc, #276]	@ (8001724 <bme280_config+0x260>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	b212      	sxth	r2, r2
 8001618:	829a      	strh	r2, [r3, #20]
    BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 800161a:	7ebb      	ldrb	r3, [r7, #26]
 800161c:	b219      	sxth	r1, r3
 800161e:	7efb      	ldrb	r3, [r7, #27]
 8001620:	b21b      	sxth	r3, r3
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	b21a      	sxth	r2, r3
 8001626:	4b3f      	ldr	r3, [pc, #252]	@ (8001724 <bme280_config+0x260>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	b212      	sxth	r2, r2
 8001630:	82da      	strh	r2, [r3, #22]
    BME->parameters->dig_H1 = params[24];
 8001632:	4b3c      	ldr	r3, [pc, #240]	@ (8001724 <bme280_config+0x260>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	7f3a      	ldrb	r2, [r7, #28]
 800163a:	761a      	strb	r2, [r3, #24]

    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 800163c:	4b3a      	ldr	r3, [pc, #232]	@ (8001728 <bme280_config+0x264>)
 800163e:	6818      	ldr	r0, [r3, #0]
 8001640:	2332      	movs	r3, #50	@ 0x32
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	2307      	movs	r3, #7
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	2301      	movs	r3, #1
 800164e:	22e1      	movs	r2, #225	@ 0xe1
 8001650:	21ec      	movs	r1, #236	@ 0xec
 8001652:	f009 f8b9 	bl	800a7c8 <HAL_I2C_Mem_Read>
 8001656:	4603      	mov	r3, r0
 8001658:	77fb      	strb	r3, [r7, #31]
    BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800165a:	793b      	ldrb	r3, [r7, #4]
 800165c:	b219      	sxth	r1, r3
 800165e:	797b      	ldrb	r3, [r7, #5]
 8001660:	b21b      	sxth	r3, r3
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	b21a      	sxth	r2, r3
 8001666:	4b2f      	ldr	r3, [pc, #188]	@ (8001724 <bme280_config+0x260>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	b212      	sxth	r2, r2
 8001670:	835a      	strh	r2, [r3, #26]
    BME->parameters->dig_H3 = params[2];
 8001672:	4b2c      	ldr	r3, [pc, #176]	@ (8001724 <bme280_config+0x260>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	79ba      	ldrb	r2, [r7, #6]
 800167a:	771a      	strb	r2, [r3, #28]
    BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800167c:	7a3b      	ldrb	r3, [r7, #8]
 800167e:	b21b      	sxth	r3, r3
 8001680:	f003 030f 	and.w	r3, r3, #15
 8001684:	b219      	sxth	r1, r3
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	b21b      	sxth	r3, r3
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	b21a      	sxth	r2, r3
 800168e:	4b25      	ldr	r3, [pc, #148]	@ (8001724 <bme280_config+0x260>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	b212      	sxth	r2, r2
 8001698:	83da      	strh	r2, [r3, #30]
    BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 800169a:	7a3b      	ldrb	r3, [r7, #8]
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	b219      	sxth	r1, r3
 80016a2:	7a7b      	ldrb	r3, [r7, #9]
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001724 <bme280_config+0x260>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	b212      	sxth	r2, r2
 80016b4:	841a      	strh	r2, [r3, #32]
    BME->parameters->dig_H6 = params[6];
 80016b6:	7aba      	ldrb	r2, [r7, #10]
 80016b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <bme280_config+0x260>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b252      	sxtb	r2, r2
 80016c0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    uint8_t data_ctrl = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_output_speed;
 80016c8:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <bme280_config+0x260>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	799b      	ldrb	r3, [r3, #6]
 80016ce:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 80016d0:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <bme280_config+0x264>)
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	2332      	movs	r3, #50	@ 0x32
 80016d6:	9302      	str	r3, [sp, #8]
 80016d8:	2301      	movs	r3, #1
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	1cfb      	adds	r3, r7, #3
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2301      	movs	r3, #1
 80016e2:	22f2      	movs	r2, #242	@ 0xf2
 80016e4:	21ec      	movs	r1, #236	@ 0xec
 80016e6:	f008 ff75 	bl	800a5d4 <HAL_I2C_Mem_Write>
 80016ea:	4603      	mov	r3, r0
 80016ec:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);
 80016f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <bme280_config+0x260>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	795b      	ldrb	r3, [r3, #5]
 80016f8:	b25a      	sxtb	r2, r3
 80016fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <bme280_config+0x260>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	799b      	ldrb	r3, [r3, #6]
 8001700:	b25b      	sxtb	r3, r3
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	b25b      	sxtb	r3, r3
 8001706:	4313      	orrs	r3, r2
 8001708:	b25a      	sxtb	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <bme280_config+0x260>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	799b      	ldrb	r3, [r3, #6]
 8001710:	b25b      	sxtb	r3, r3
 8001712:	015b      	lsls	r3, r3, #5
 8001714:	b25b      	sxtb	r3, r3
 8001716:	4313      	orrs	r3, r2
 8001718:	b25b      	sxtb	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800171e:	4b02      	ldr	r3, [pc, #8]	@ (8001728 <bme280_config+0x264>)
 8001720:	6818      	ldr	r0, [r3, #0]
 8001722:	e003      	b.n	800172c <bme280_config+0x268>
 8001724:	20000234 	.word	0x20000234
 8001728:	20000230 	.word	0x20000230
 800172c:	2332      	movs	r3, #50	@ 0x32
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	2301      	movs	r3, #1
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	1cfb      	adds	r3, r7, #3
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2301      	movs	r3, #1
 800173a:	22f4      	movs	r2, #244	@ 0xf4
 800173c:	21ec      	movs	r1, #236	@ 0xec
 800173e:	f008 ff49 	bl	800a5d4 <HAL_I2C_Mem_Write>
 8001742:	4603      	mov	r3, r0
 8001744:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	70fb      	strb	r3, [r7, #3]
    data_ctrl = (BME->device_config.bme280_standby_time << 5) | (BME->device_config.bme280_filter << 2);
 800174a:	4b26      	ldr	r3, [pc, #152]	@ (80017e4 <bme280_config+0x320>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	79db      	ldrb	r3, [r3, #7]
 8001750:	b25b      	sxtb	r3, r3
 8001752:	015b      	lsls	r3, r3, #5
 8001754:	b25a      	sxtb	r2, r3
 8001756:	4b23      	ldr	r3, [pc, #140]	@ (80017e4 <bme280_config+0x320>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	791b      	ldrb	r3, [r3, #4]
 800175c:	b25b      	sxtb	r3, r3
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	b25b      	sxtb	r3, r3
 8001762:	4313      	orrs	r3, r2
 8001764:	b25b      	sxtb	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800176a:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <bme280_config+0x324>)
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	2332      	movs	r3, #50	@ 0x32
 8001770:	9302      	str	r3, [sp, #8]
 8001772:	2301      	movs	r3, #1
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	1cfb      	adds	r3, r7, #3
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2301      	movs	r3, #1
 800177c:	22f5      	movs	r2, #245	@ 0xf5
 800177e:	21ec      	movs	r1, #236	@ 0xec
 8001780:	f008 ff28 	bl	800a5d4 <HAL_I2C_Mem_Write>
 8001784:	4603      	mov	r3, r0
 8001786:	77fb      	strb	r3, [r7, #31]

    // Take base altitude readings
    float base = 0.0;
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_Delay(100);
 800178e:	2064      	movs	r0, #100	@ 0x64
 8001790:	f007 f94a 	bl	8008a28 <HAL_Delay>

    for(int i = 0; i < 50; i++) {
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
 8001798:	e011      	b.n	80017be <bme280_config+0x2fa>
        bme280_update();
 800179a:	f000 f861 	bl	8001860 <bme280_update>
        base += BME->altitude;
 800179e:	4b11      	ldr	r3, [pc, #68]	@ (80017e4 <bme280_config+0x320>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80017a6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80017aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        HAL_Delay(30);
 80017b2:	201e      	movs	r0, #30
 80017b4:	f007 f938 	bl	8008a28 <HAL_Delay>
    for(int i = 0; i < 50; i++) {
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	3301      	adds	r3, #1
 80017bc:	623b      	str	r3, [r7, #32]
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	2b31      	cmp	r3, #49	@ 0x31
 80017c2:	ddea      	ble.n	800179a <bme280_config+0x2d6>
    }
    BME->base_altitude = (base / 50.0);
 80017c4:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <bme280_config+0x320>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80017cc:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80017ec <bme280_config+0x328>
 80017d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017d4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bme280_update();
 80017d8:	f000 f842 	bl	8001860 <bme280_update>

    UNUSED(retVal);
}
 80017dc:	bf00      	nop
 80017de:	3728      	adds	r7, #40	@ 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000234 	.word	0x20000234
 80017e8:	20000230 	.word	0x20000230
 80017ec:	42480000 	.word	0x42480000

080017f0 <bme280_init>:

void bme280_init(BME_280_t* BME_sensor, I2C_HandleTypeDef* I2C_bme)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af04      	add	r7, sp, #16
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
    BME = BME_sensor;
 80017fa:	4a14      	ldr	r2, [pc, #80]	@ (800184c <bme280_init+0x5c>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6013      	str	r3, [r2, #0]
    I2C_ = I2C_bme;
 8001800:	4a13      	ldr	r2, [pc, #76]	@ (8001850 <bme280_init+0x60>)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	6013      	str	r3, [r2, #0]
    BME->parameters = &bme_params;
 8001806:	4b11      	ldr	r3, [pc, #68]	@ (800184c <bme280_init+0x5c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a12      	ldr	r2, [pc, #72]	@ (8001854 <bme280_init+0x64>)
 800180c:	601a      	str	r2, [r3, #0]
    bme_started_flag = 0;
 800180e:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <bme280_init+0x68>)
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]

    // Check BME280 ID
    uint8_t buf[1];
    HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8001814:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <bme280_init+0x60>)
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	2332      	movs	r3, #50	@ 0x32
 800181a:	9302      	str	r3, [sp, #8]
 800181c:	2301      	movs	r3, #1
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2301      	movs	r3, #1
 8001828:	22d0      	movs	r2, #208	@ 0xd0
 800182a:	21ec      	movs	r1, #236	@ 0xec
 800182c:	f008 ffcc 	bl	800a7c8 <HAL_I2C_Mem_Read>
    if(*buf == 0x60)
 8001830:	7b3b      	ldrb	r3, [r7, #12]
 8001832:	2b60      	cmp	r3, #96	@ 0x60
 8001834:	d103      	bne.n	800183e <bme280_init+0x4e>
        is_BME_ok = 1;
 8001836:	4b09      	ldr	r3, [pc, #36]	@ (800185c <bme280_init+0x6c>)
 8001838:	2201      	movs	r2, #1
 800183a:	601a      	str	r2, [r3, #0]
    else
        is_BME_ok = 0;
}
 800183c:	e002      	b.n	8001844 <bme280_init+0x54>
        is_BME_ok = 0;
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <bme280_init+0x6c>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000234 	.word	0x20000234
 8001850:	20000230 	.word	0x20000230
 8001854:	200016b4 	.word	0x200016b4
 8001858:	20000238 	.word	0x20000238
 800185c:	200016d8 	.word	0x200016d8

08001860 <bme280_update>:

void bme280_update() {
 8001860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001864:	b0d2      	sub	sp, #328	@ 0x148
 8001866:	af00      	add	r7, sp, #0
    int32_t var1_t, var2_t, T, adc_T;
    bme280_getVals();
 8001868:	f7ff fd58 	bl	800131c <bme280_getVals>

    if(BME->isUpdated == 1){
 800186c:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <bme280_update+0x88>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001874:	2b01      	cmp	r3, #1
 8001876:	f040 840d 	bne.w	8002094 <bme280_update+0x834>

    	if (!bme_started_flag) {
 800187a:	4b1c      	ldr	r3, [pc, #112]	@ (80018ec <bme280_update+0x8c>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d112      	bne.n	80018a8 <bme280_update+0x48>
    	    bme_started_flag = 1;
 8001882:	4a1a      	ldr	r2, [pc, #104]	@ (80018ec <bme280_update+0x8c>)
 8001884:	2301      	movs	r3, #1
 8001886:	7013      	strb	r3, [r2, #0]
    	    BME->lastTime = HAL_GetTick();
 8001888:	f007 f8c2 	bl	8008a10 <HAL_GetTick>
 800188c:	ee07 0a90 	vmov	s15, r0
 8001890:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <bme280_update+0x88>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001898:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	    BME->deltaTime1 = 0.0f;
 800189c:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <bme280_update+0x88>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a6:	e041      	b.n	800192c <bme280_update+0xcc>
    	} else {
    	    uint32_t now = HAL_GetTick();
 80018a8:	f007 f8b2 	bl	8008a10 <HAL_GetTick>
 80018ac:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    	    BME->deltaTime1 = (now > BME->lastTime) ? (now - BME->lastTime) : 0.0f;
 80018b0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018bc:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <bme280_update+0x88>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80018c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018cc:	dd12      	ble.n	80018f4 <bme280_update+0x94>
 80018ce:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80018d2:	ee07 3a90 	vmov	s15, r3
 80018d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018da:	4b03      	ldr	r3, [pc, #12]	@ (80018e8 <bme280_update+0x88>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80018e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e6:	e007      	b.n	80018f8 <bme280_update+0x98>
 80018e8:	20000234 	.word	0x20000234
 80018ec:	20000238 	.word	0x20000238
 80018f0:	00000000 	.word	0x00000000
 80018f4:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 80018f0 <bme280_update+0x90>
 80018f8:	4bda      	ldr	r3, [pc, #872]	@ (8001c64 <bme280_update+0x404>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->deltaTime1 = BME->deltaTime1 / 1000.0f;
 8001900:	4bd8      	ldr	r3, [pc, #864]	@ (8001c64 <bme280_update+0x404>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001908:	4bd6      	ldr	r3, [pc, #856]	@ (8001c64 <bme280_update+0x404>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8001c68 <bme280_update+0x408>
 8001910:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001914:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->lastTime = now;
 8001918:	4bd2      	ldr	r3, [pc, #840]	@ (8001c64 <bme280_update+0x404>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001920:	ee07 2a90 	vmov	s15, r2
 8001924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001928:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	}

        //For temperature
        adc_T = BME->adcVals.ut;
 800192c:	4bcd      	ldr	r3, [pc, #820]	@ (8001c64 <bme280_update+0x404>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 8001936:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800193a:	10da      	asrs	r2, r3, #3
 800193c:	4bc9      	ldr	r3, [pc, #804]	@ (8001c64 <bme280_update+0x404>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	1ad2      	subs	r2, r2, r3
 8001948:	4bc6      	ldr	r3, [pc, #792]	@ (8001c64 <bme280_update+0x404>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	12db      	asrs	r3, r3, #11
 8001958:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 800195c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001960:	111a      	asrs	r2, r3, #4
 8001962:	4bc0      	ldr	r3, [pc, #768]	@ (8001c64 <bme280_update+0x404>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	1ad1      	subs	r1, r2, r3
 800196c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001970:	111a      	asrs	r2, r3, #4
 8001972:	4bbc      	ldr	r3, [pc, #752]	@ (8001c64 <bme280_update+0x404>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	131a      	asrs	r2, r3, #12
 8001982:	4bb8      	ldr	r3, [pc, #736]	@ (8001c64 <bme280_update+0x404>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800198c:	fb02 f303 	mul.w	r3, r2, r3
 8001990:	139b      	asrs	r3, r3, #14
 8001992:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        int32_t t_fine = var1_t + var2_t;
 8001996:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800199a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800199e:	4413      	add	r3, r2
 80019a0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        T = (t_fine * 5 + 128) >> 8;
 80019a4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	3380      	adds	r3, #128	@ 0x80
 80019b0:	121b      	asrs	r3, r3, #8
 80019b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        BME->temperature = (float)T / 100.0;
 80019b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80019ba:	ee07 3a90 	vmov	s15, r3
 80019be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c2:	4ba8      	ldr	r3, [pc, #672]	@ (8001c64 <bme280_update+0x404>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001c6c <bme280_update+0x40c>
 80019ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ce:	edc3 7a05 	vstr	s15, [r3, #20]

        //For pressure
        int64_t var1_p, var2_p, P, adc_P;
        adc_P = (int64_t)BME->adcVals.up;
 80019d2:	4ba4      	ldr	r3, [pc, #656]	@ (8001c64 <bme280_update+0x404>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	17da      	asrs	r2, r3, #31
 80019da:	653b      	str	r3, [r7, #80]	@ 0x50
 80019dc:	657a      	str	r2, [r7, #84]	@ 0x54
 80019de:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80019e2:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
        var1_p = ((int64_t)t_fine) - 128000;
 80019e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80019ea:	17da      	asrs	r2, r3, #31
 80019ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80019f0:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80019f4:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80019f8:	460b      	mov	r3, r1
 80019fa:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 80019fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a00:	4613      	mov	r3, r2
 8001a02:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 8001a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001a0c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 8001a10:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a14:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a18:	fb03 f102 	mul.w	r1, r3, r2
 8001a1c:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a20:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	18ca      	adds	r2, r1, r3
 8001a2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a2e:	fba3 4503 	umull	r4, r5, r3, r3
 8001a32:	1953      	adds	r3, r2, r5
 8001a34:	461d      	mov	r5, r3
 8001a36:	4b8b      	ldr	r3, [pc, #556]	@ (8001c64 <bme280_update+0x404>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	17da      	asrs	r2, r3, #31
 8001a44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001a48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001a4c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001a50:	4603      	mov	r3, r0
 8001a52:	fb03 f205 	mul.w	r2, r3, r5
 8001a56:	460b      	mov	r3, r1
 8001a58:	fb04 f303 	mul.w	r3, r4, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4602      	mov	r2, r0
 8001a60:	fba4 1202 	umull	r1, r2, r4, r2
 8001a64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a68:	460a      	mov	r2, r1
 8001a6a:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a6e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a72:	4413      	add	r3, r2
 8001a74:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a78:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001a7c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8001a80:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001a84:	4b77      	ldr	r3, [pc, #476]	@ (8001c64 <bme280_update+0x404>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	17da      	asrs	r2, r3, #31
 8001a92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001a96:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001a9a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a9e:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001aa2:	462a      	mov	r2, r5
 8001aa4:	fb02 f203 	mul.w	r2, r2, r3
 8001aa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001aac:	4621      	mov	r1, r4
 8001aae:	fb01 f303 	mul.w	r3, r1, r3
 8001ab2:	441a      	add	r2, r3
 8001ab4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ab8:	4621      	mov	r1, r4
 8001aba:	fba3 ab01 	umull	sl, fp, r3, r1
 8001abe:	eb02 030b 	add.w	r3, r2, fp
 8001ac2:	469b      	mov	fp, r3
 8001ac4:	f04f 0000 	mov.w	r0, #0
 8001ac8:	f04f 0100 	mov.w	r1, #0
 8001acc:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001ad0:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001ad4:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001ad8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001adc:	1814      	adds	r4, r2, r0
 8001ade:	643c      	str	r4, [r7, #64]	@ 0x40
 8001ae0:	414b      	adcs	r3, r1
 8001ae2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ae4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001ae8:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 8001aec:	4b5d      	ldr	r3, [pc, #372]	@ (8001c64 <bme280_update+0x404>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	17da      	asrs	r2, r3, #31
 8001afa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001afe:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001b02:	f04f 0000 	mov.w	r0, #0
 8001b06:	f04f 0100 	mov.w	r1, #0
 8001b0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001b0e:	00d9      	lsls	r1, r3, #3
 8001b10:	2000      	movs	r0, #0
 8001b12:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001b16:	1814      	adds	r4, r2, r0
 8001b18:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001b1a:	414b      	adcs	r3, r1
 8001b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b1e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001b22:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001b26:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001b2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b2e:	fb03 f102 	mul.w	r1, r3, r2
 8001b32:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001b36:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	18ca      	adds	r2, r1, r3
 8001b40:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b44:	fba3 8903 	umull	r8, r9, r3, r3
 8001b48:	eb02 0309 	add.w	r3, r2, r9
 8001b4c:	4699      	mov	r9, r3
 8001b4e:	4b45      	ldr	r3, [pc, #276]	@ (8001c64 <bme280_update+0x404>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	17da      	asrs	r2, r3, #31
 8001b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001b64:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001b68:	4603      	mov	r3, r0
 8001b6a:	fb03 f209 	mul.w	r2, r3, r9
 8001b6e:	460b      	mov	r3, r1
 8001b70:	fb08 f303 	mul.w	r3, r8, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	4602      	mov	r2, r0
 8001b78:	fba8 1202 	umull	r1, r2, r8, r2
 8001b7c:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001b80:	460a      	mov	r2, r1
 8001b82:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001b86:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001b90:	f04f 0000 	mov.w	r0, #0
 8001b94:	f04f 0100 	mov.w	r1, #0
 8001b98:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001b9c:	4623      	mov	r3, r4
 8001b9e:	0a18      	lsrs	r0, r3, #8
 8001ba0:	462b      	mov	r3, r5
 8001ba2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001ba6:	462b      	mov	r3, r5
 8001ba8:	1219      	asrs	r1, r3, #8
 8001baa:	4b2e      	ldr	r3, [pc, #184]	@ (8001c64 <bme280_update+0x404>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	17da      	asrs	r2, r3, #31
 8001bb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001bbc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001bc0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001bc4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001bc8:	464a      	mov	r2, r9
 8001bca:	fb02 f203 	mul.w	r2, r2, r3
 8001bce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001bd2:	4644      	mov	r4, r8
 8001bd4:	fb04 f303 	mul.w	r3, r4, r3
 8001bd8:	441a      	add	r2, r3
 8001bda:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001bde:	4644      	mov	r4, r8
 8001be0:	fba3 4304 	umull	r4, r3, r3, r4
 8001be4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001be8:	4623      	mov	r3, r4
 8001bea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001bf2:	18d3      	adds	r3, r2, r3
 8001bf4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001c04:	464c      	mov	r4, r9
 8001c06:	0323      	lsls	r3, r4, #12
 8001c08:	4644      	mov	r4, r8
 8001c0a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001c0e:	4644      	mov	r4, r8
 8001c10:	0322      	lsls	r2, r4, #12
 8001c12:	1884      	adds	r4, r0, r2
 8001c14:	633c      	str	r4, [r7, #48]	@ 0x30
 8001c16:	eb41 0303 	adc.w	r3, r1, r3
 8001c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c1c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001c20:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
        var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8001c24:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c28:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001c2c:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001c30:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001c34:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <bme280_update+0x404>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	88db      	ldrh	r3, [r3, #6]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001c44:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001c48:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001c4c:	462b      	mov	r3, r5
 8001c4e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001c52:	4642      	mov	r2, r8
 8001c54:	fb02 f203 	mul.w	r2, r2, r3
 8001c58:	464b      	mov	r3, r9
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	fb01 f303 	mul.w	r3, r1, r3
 8001c60:	4413      	add	r3, r2
 8001c62:	e005      	b.n	8001c70 <bme280_update+0x410>
 8001c64:	20000234 	.word	0x20000234
 8001c68:	447a0000 	.word	0x447a0000
 8001c6c:	42c80000 	.word	0x42c80000
 8001c70:	4622      	mov	r2, r4
 8001c72:	4641      	mov	r1, r8
 8001c74:	fba2 1201 	umull	r1, r2, r2, r1
 8001c78:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001c7c:	460a      	mov	r2, r1
 8001c7e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001c82:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001c86:	4413      	add	r3, r2
 8001c88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001c98:	4629      	mov	r1, r5
 8001c9a:	104a      	asrs	r2, r1, #1
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	17cb      	asrs	r3, r1, #31
 8001ca0:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        if(var1_p == 0)
 8001ca4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	d106      	bne.n	8001cba <bme280_update+0x45a>
        {
            P = 0;
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8001cb8:	e14b      	b.n	8001f52 <bme280_update+0x6f2>
        }
        else
        {
            P = 1048576 - adc_P;
 8001cba:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 8001cc4:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001cc6:	eb61 0303 	sbc.w	r3, r1, r3
 8001cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ccc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001cd0:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
            P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001cd4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001cd8:	f04f 0000 	mov.w	r0, #0
 8001cdc:	f04f 0100 	mov.w	r1, #0
 8001ce0:	07d9      	lsls	r1, r3, #31
 8001ce2:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001ce6:	07d0      	lsls	r0, r2, #31
 8001ce8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001cec:	1a84      	subs	r4, r0, r2
 8001cee:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8001cf2:	eb61 0303 	sbc.w	r3, r1, r3
 8001cf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001cfa:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001cfe:	4622      	mov	r2, r4
 8001d00:	462b      	mov	r3, r5
 8001d02:	1891      	adds	r1, r2, r2
 8001d04:	6239      	str	r1, [r7, #32]
 8001d06:	415b      	adcs	r3, r3
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d0e:	4621      	mov	r1, r4
 8001d10:	1851      	adds	r1, r2, r1
 8001d12:	61b9      	str	r1, [r7, #24]
 8001d14:	4629      	mov	r1, r5
 8001d16:	414b      	adcs	r3, r1
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001d26:	4649      	mov	r1, r9
 8001d28:	018b      	lsls	r3, r1, #6
 8001d2a:	4641      	mov	r1, r8
 8001d2c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d30:	4641      	mov	r1, r8
 8001d32:	018a      	lsls	r2, r1, #6
 8001d34:	4641      	mov	r1, r8
 8001d36:	1889      	adds	r1, r1, r2
 8001d38:	6139      	str	r1, [r7, #16]
 8001d3a:	4649      	mov	r1, r9
 8001d3c:	eb43 0101 	adc.w	r1, r3, r1
 8001d40:	6179      	str	r1, [r7, #20]
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001d4e:	4649      	mov	r1, r9
 8001d50:	008b      	lsls	r3, r1, #2
 8001d52:	4641      	mov	r1, r8
 8001d54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d58:	4641      	mov	r1, r8
 8001d5a:	008a      	lsls	r2, r1, #2
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4603      	mov	r3, r0
 8001d62:	4622      	mov	r2, r4
 8001d64:	189b      	adds	r3, r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	462a      	mov	r2, r5
 8001d6c:	eb42 0303 	adc.w	r3, r2, r3
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001d7e:	4649      	mov	r1, r9
 8001d80:	008b      	lsls	r3, r1, #2
 8001d82:	4641      	mov	r1, r8
 8001d84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d88:	4641      	mov	r1, r8
 8001d8a:	008a      	lsls	r2, r1, #2
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4603      	mov	r3, r0
 8001d92:	4622      	mov	r2, r4
 8001d94:	189b      	adds	r3, r3, r2
 8001d96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d9a:	462b      	mov	r3, r5
 8001d9c:	460a      	mov	r2, r1
 8001d9e:	eb42 0303 	adc.w	r3, r2, r3
 8001da2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001da6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001daa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001dae:	f7ff f899 	bl	8000ee4 <__aeabi_ldivmod>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
            var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001dba:	4bb9      	ldr	r3, [pc, #740]	@ (80020a0 <bme280_update+0x840>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	17da      	asrs	r2, r3, #31
 8001dc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001dca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001dcc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001dd0:	f04f 0000 	mov.w	r0, #0
 8001dd4:	f04f 0100 	mov.w	r1, #0
 8001dd8:	0b50      	lsrs	r0, r2, #13
 8001dda:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001dde:	1359      	asrs	r1, r3, #13
 8001de0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001de4:	462b      	mov	r3, r5
 8001de6:	fb00 f203 	mul.w	r2, r0, r3
 8001dea:	4623      	mov	r3, r4
 8001dec:	fb03 f301 	mul.w	r3, r3, r1
 8001df0:	4413      	add	r3, r2
 8001df2:	4622      	mov	r2, r4
 8001df4:	fba2 1200 	umull	r1, r2, r2, r0
 8001df8:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001dfc:	460a      	mov	r2, r1
 8001dfe:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001e02:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001e06:	4413      	add	r3, r2
 8001e08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001e0c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001e10:	f04f 0000 	mov.w	r0, #0
 8001e14:	f04f 0100 	mov.w	r1, #0
 8001e18:	0b50      	lsrs	r0, r2, #13
 8001e1a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001e1e:	1359      	asrs	r1, r3, #13
 8001e20:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001e24:	462b      	mov	r3, r5
 8001e26:	fb00 f203 	mul.w	r2, r0, r3
 8001e2a:	4623      	mov	r3, r4
 8001e2c:	fb03 f301 	mul.w	r3, r3, r1
 8001e30:	4413      	add	r3, r2
 8001e32:	4622      	mov	r2, r4
 8001e34:	fba2 1200 	umull	r1, r2, r2, r0
 8001e38:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001e3c:	460a      	mov	r2, r1
 8001e3e:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001e42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001e46:	4413      	add	r3, r2
 8001e48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001e58:	4621      	mov	r1, r4
 8001e5a:	0e4a      	lsrs	r2, r1, #25
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001e62:	4629      	mov	r1, r5
 8001e64:	164b      	asrs	r3, r1, #25
 8001e66:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 8001e6a:	4b8d      	ldr	r3, [pc, #564]	@ (80020a0 <bme280_update+0x840>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	17da      	asrs	r2, r3, #31
 8001e78:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e7a:	677a      	str	r2, [r7, #116]	@ 0x74
 8001e7c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001e80:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001e84:	462a      	mov	r2, r5
 8001e86:	fb02 f203 	mul.w	r2, r2, r3
 8001e8a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001e8e:	4621      	mov	r1, r4
 8001e90:	fb01 f303 	mul.w	r3, r1, r3
 8001e94:	4413      	add	r3, r2
 8001e96:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	fba2 1201 	umull	r1, r2, r2, r1
 8001ea0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001eaa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001eae:	4413      	add	r3, r2
 8001eb0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	0cca      	lsrs	r2, r1, #19
 8001ec4:	4629      	mov	r1, r5
 8001ec6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001eca:	4629      	mov	r1, r5
 8001ecc:	14cb      	asrs	r3, r1, #19
 8001ece:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
            P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 8001ed2:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001ed6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001eda:	1884      	adds	r4, r0, r2
 8001edc:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001ede:	eb41 0303 	adc.w	r3, r1, r3
 8001ee2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001ee4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001ee8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001eec:	4621      	mov	r1, r4
 8001eee:	1889      	adds	r1, r1, r2
 8001ef0:	6639      	str	r1, [r7, #96]	@ 0x60
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	eb43 0101 	adc.w	r1, r3, r1
 8001ef8:	6679      	str	r1, [r7, #100]	@ 0x64
 8001efa:	f04f 0000 	mov.w	r0, #0
 8001efe:	f04f 0100 	mov.w	r1, #0
 8001f02:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001f06:	4623      	mov	r3, r4
 8001f08:	0a18      	lsrs	r0, r3, #8
 8001f0a:	462b      	mov	r3, r5
 8001f0c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001f10:	462b      	mov	r3, r5
 8001f12:	1219      	asrs	r1, r3, #8
 8001f14:	4b62      	ldr	r3, [pc, #392]	@ (80020a0 <bme280_update+0x840>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	17da      	asrs	r2, r3, #31
 8001f22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001f24:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001f32:	464c      	mov	r4, r9
 8001f34:	0123      	lsls	r3, r4, #4
 8001f36:	4644      	mov	r4, r8
 8001f38:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001f3c:	4644      	mov	r4, r8
 8001f3e:	0122      	lsls	r2, r4, #4
 8001f40:	1884      	adds	r4, r0, r2
 8001f42:	603c      	str	r4, [r7, #0]
 8001f44:	eb41 0303 	adc.w	r3, r1, r3
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001f4e:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
        }

        BME->pressure = ((float)P / 256.0 / 100.0);
 8001f52:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001f56:	f7fe ff87 	bl	8000e68 <__aeabi_l2f>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fb13 	bl	8000588 <__aeabi_f2d>
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	4b4f      	ldr	r3, [pc, #316]	@ (80020a4 <bme280_update+0x844>)
 8001f68:	f7fe fc90 	bl	800088c <__aeabi_ddiv>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4610      	mov	r0, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	4b4b      	ldr	r3, [pc, #300]	@ (80020a8 <bme280_update+0x848>)
 8001f7a:	f7fe fc87 	bl	800088c <__aeabi_ddiv>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4947      	ldr	r1, [pc, #284]	@ (80020a0 <bme280_update+0x840>)
 8001f84:	680c      	ldr	r4, [r1, #0]
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7fe fe4d 	bl	8000c28 <__aeabi_d2f>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	61a3      	str	r3, [r4, #24]

        //for humidity
        uint32_t var_h, adc_H;
        adc_H = BME->adcVals.uh;
 8001f92:	4b43      	ldr	r3, [pc, #268]	@ (80020a0 <bme280_update+0x840>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

        var_h = (t_fine - ((int32_t)76800));
 8001f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001fa0:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001fa4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8001fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001fac:	039a      	lsls	r2, r3, #14
 8001fae:	4b3c      	ldr	r3, [pc, #240]	@ (80020a0 <bme280_update+0x840>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001fb8:	051b      	lsls	r3, r3, #20
 8001fba:	1ad2      	subs	r2, r2, r3
 8001fbc:	4b38      	ldr	r3, [pc, #224]	@ (80020a0 <bme280_update+0x840>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001fcc:	fb01 f303 	mul.w	r3, r1, r3
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001fd6:	0bdb      	lsrs	r3, r3, #15
 8001fd8:	4a31      	ldr	r2, [pc, #196]	@ (80020a0 <bme280_update+0x840>)
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	6812      	ldr	r2, [r2, #0]
 8001fde:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001fe8:	fb01 f202 	mul.w	r2, r1, r2
 8001fec:	0a92      	lsrs	r2, r2, #10
 8001fee:	492c      	ldr	r1, [pc, #176]	@ (80020a0 <bme280_update+0x840>)
 8001ff0:	6809      	ldr	r1, [r1, #0]
 8001ff2:	6809      	ldr	r1, [r1, #0]
 8001ff4:	7f09      	ldrb	r1, [r1, #28]
 8001ff6:	4608      	mov	r0, r1
 8001ff8:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001ffc:	fb00 f101 	mul.w	r1, r0, r1
 8002000:	0ac9      	lsrs	r1, r1, #11
 8002002:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8002006:	fb01 f202 	mul.w	r2, r1, r2
 800200a:	0a92      	lsrs	r2, r2, #10
 800200c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8002010:	4923      	ldr	r1, [pc, #140]	@ (80020a0 <bme280_update+0x840>)
 8002012:	6809      	ldr	r1, [r1, #0]
 8002014:	6809      	ldr	r1, [r1, #0]
 8002016:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800201a:	fb01 f202 	mul.w	r2, r1, r2
 800201e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002022:	0b92      	lsrs	r2, r2, #14
 8002024:	fb02 f303 	mul.w	r3, r2, r3
 8002028:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 800202c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002030:	0bdb      	lsrs	r3, r3, #15
 8002032:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002036:	0bd2      	lsrs	r2, r2, #15
 8002038:	fb02 f303 	mul.w	r3, r2, r3
 800203c:	09db      	lsrs	r3, r3, #7
 800203e:	4a18      	ldr	r2, [pc, #96]	@ (80020a0 <bme280_update+0x840>)
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	7e12      	ldrb	r2, [r2, #24]
 8002046:	fb02 f303 	mul.w	r3, r2, r3
 800204a:	091b      	lsrs	r3, r3, #4
 800204c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h < 0 ? 0 : var_h);
        var_h = (var_h > 419430400 ? 419430400 : var_h);
 8002056:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800205a:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800205e:	bf28      	it	cs
 8002060:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 8002064:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 8002068:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800206c:	0b1b      	lsrs	r3, r3, #12
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002076:	4b0a      	ldr	r3, [pc, #40]	@ (80020a0 <bme280_update+0x840>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80020ac <bme280_update+0x84c>
 800207e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002082:	edc3 7a07 	vstr	s15, [r3, #28]

        // Calculate raw altitude (no filtering)
        bme280_calculate_altitude();
 8002086:	f7ff f9cb 	bl	8001420 <bme280_calculate_altitude>
        BME->isUpdated = 0;
 800208a:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <bme280_update+0x840>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
}
 8002094:	bf00      	nop
 8002096:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800209a:	46bd      	mov	sp, r7
 800209c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020a0:	20000234 	.word	0x20000234
 80020a4:	40700000 	.word	0x40700000
 80020a8:	40590000 	.word	0x40590000
 80020ac:	44800000 	.word	0x44800000

080020b0 <bmi088_init>:
	HAL_I2C_Init(BMI_I2c);

}
*/
uint8_t bmi088_init(bmi088_struct_t* BMI)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af04      	add	r7, sp, #16
 80020b6:	6078      	str	r0, [r7, #4]
	//quaternionSet_zero();
	uint8_t ret_val = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]
	BMI->flags.isGyroUpdated = 0;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
	BMI->flags.isAccelUpdated = 0;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	705a      	strb	r2, [r3, #1]
	is_time_updated = 0;
 80020c8:	4b23      	ldr	r3, [pc, #140]	@ (8002158 <bmi088_init+0xa8>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
	is_starded = 0;
 80020ce:	4b23      	ldr	r3, [pc, #140]	@ (800215c <bmi088_init+0xac>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	733b      	strb	r3, [r7, #12]

	if(BMI->device_config.offsets == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <bmi088_init+0x40>
	{
		BMI->device_config.offsets = calloc(sizeof(*BMI->device_config.offsets), 1);
 80020e0:	2101      	movs	r1, #1
 80020e2:	2018      	movs	r0, #24
 80020e4:	f00b fed0 	bl	800de88 <calloc>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	615a      	str	r2, [r3, #20]

	}

	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68d8      	ldr	r0, [r3, #12]
 80020f4:	2332      	movs	r3, #50	@ 0x32
 80020f6:	9302      	str	r3, [sp, #8]
 80020f8:	2301      	movs	r3, #1
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	f107 030c 	add.w	r3, r7, #12
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	2301      	movs	r3, #1
 8002104:	2200      	movs	r2, #0
 8002106:	2130      	movs	r1, #48	@ 0x30
 8002108:	f008 fb5e 	bl	800a7c8 <HAL_I2C_Mem_Read>
 800210c:	4603      	mov	r3, r0
 800210e:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &buf[1], 1, 50);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68d8      	ldr	r0, [r3, #12]
 8002114:	2332      	movs	r3, #50	@ 0x32
 8002116:	9302      	str	r3, [sp, #8]
 8002118:	2301      	movs	r3, #1
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	f107 030c 	add.w	r3, r7, #12
 8002120:	3301      	adds	r3, #1
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2301      	movs	r3, #1
 8002126:	2200      	movs	r2, #0
 8002128:	21d0      	movs	r1, #208	@ 0xd0
 800212a:	f008 fb4d 	bl	800a7c8 <HAL_I2C_Mem_Read>
 800212e:	4603      	mov	r3, r0
 8002130:	73bb      	strb	r3, [r7, #14]
	UNUSED(ret);
	if(!(buf[0] == 0x1E))
 8002132:	7b3b      	ldrb	r3, [r7, #12]
 8002134:	2b1e      	cmp	r3, #30
 8002136:	d003      	beq.n	8002140 <bmi088_init+0x90>
	{
		ret_val = ret_val | 0x01;
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
	}
	if(!(buf[1] == 0x0F))
 8002140:	7b7b      	ldrb	r3, [r7, #13]
 8002142:	2b0f      	cmp	r3, #15
 8002144:	d003      	beq.n	800214e <bmi088_init+0x9e>
	{
		ret_val = ret_val | 0x02;
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	f043 0302 	orr.w	r3, r3, #2
 800214c:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000239 	.word	0x20000239
 800215c:	2000023a 	.word	0x2000023a

08002160 <bmi088_config>:

void bmi088_config(bmi088_struct_t* BMI)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af04      	add	r7, sp, #16
 8002166:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(BMI->device_config.acc_IRQ);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800216e:	4618      	mov	r0, r3
 8002170:	f007 f9cd 	bl	800950e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BMI->device_config.gyro_IRQ);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800217a:	4618      	mov	r0, r3
 800217c:	f007 f9c7 	bl	800950e <HAL_NVIC_DisableIRQ>

	HAL_StatusTypeDef retVal = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 8002184:	2301      	movs	r3, #1
 8002186:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68d8      	ldr	r0, [r3, #12]
 800218c:	2364      	movs	r3, #100	@ 0x64
 800218e:	9302      	str	r3, [sp, #8]
 8002190:	2301      	movs	r3, #1
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2301      	movs	r3, #1
 800219c:	227c      	movs	r2, #124	@ 0x7c
 800219e:	2130      	movs	r1, #48	@ 0x30
 80021a0:	f008 fa18 	bl	800a5d4 <HAL_I2C_Mem_Write>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68d8      	ldr	r0, [r3, #12]
 80021b6:	2364      	movs	r3, #100	@ 0x64
 80021b8:	9302      	str	r3, [sp, #8]
 80021ba:	2301      	movs	r3, #1
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	f107 030c 	add.w	r3, r7, #12
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2301      	movs	r3, #1
 80021c6:	227d      	movs	r2, #125	@ 0x7d
 80021c8:	2130      	movs	r1, #48	@ 0x30
 80021ca:	f008 fa03 	bl	800a5d4 <HAL_I2C_Mem_Write>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461a      	mov	r2, r3
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 80021d8:	2014      	movs	r0, #20
 80021da:	f006 fc25 	bl	8008a28 <HAL_Delay>

	buf[0] = ACC_RESET;
 80021de:	23b6      	movs	r3, #182	@ 0xb6
 80021e0:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68d8      	ldr	r0, [r3, #12]
 80021e6:	2364      	movs	r3, #100	@ 0x64
 80021e8:	9302      	str	r3, [sp, #8]
 80021ea:	2301      	movs	r3, #1
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	f107 030c 	add.w	r3, r7, #12
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	2301      	movs	r3, #1
 80021f6:	227e      	movs	r2, #126	@ 0x7e
 80021f8:	2130      	movs	r1, #48	@ 0x30
 80021fa:	f008 f9eb 	bl	800a5d4 <HAL_I2C_Mem_Write>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	4313      	orrs	r3, r2
 8002206:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <bmi088_config+0xb4>
 800220e:	4bb4      	ldr	r3, [pc, #720]	@ (80024e0 <bmi088_config+0x380>)
 8002210:	22a1      	movs	r2, #161	@ 0xa1
 8002212:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002214:	200a      	movs	r0, #10
 8002216:	f006 fc07 	bl	8008a28 <HAL_Delay>

	buf[0] = FIFO_RESET;
 800221a:	23b0      	movs	r3, #176	@ 0xb0
 800221c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68d8      	ldr	r0, [r3, #12]
 8002222:	2364      	movs	r3, #100	@ 0x64
 8002224:	9302      	str	r3, [sp, #8]
 8002226:	2301      	movs	r3, #1
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	f107 030c 	add.w	r3, r7, #12
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	2301      	movs	r3, #1
 8002232:	227e      	movs	r2, #126	@ 0x7e
 8002234:	2130      	movs	r1, #48	@ 0x30
 8002236:	f008 f9cd 	bl	800a5d4 <HAL_I2C_Mem_Write>
 800223a:	4603      	mov	r3, r0
 800223c:	461a      	mov	r2, r3
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	4313      	orrs	r3, r2
 8002242:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <bmi088_config+0xf0>
 800224a:	4ba5      	ldr	r3, [pc, #660]	@ (80024e0 <bmi088_config+0x380>)
 800224c:	22a6      	movs	r2, #166	@ 0xa6
 800224e:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002250:	200a      	movs	r0, #10
 8002252:	f006 fbe9 	bl	8008a28 <HAL_Delay>

	buf[0] = GYRO_RESET;
 8002256:	23b6      	movs	r3, #182	@ 0xb6
 8002258:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68d8      	ldr	r0, [r3, #12]
 800225e:	2364      	movs	r3, #100	@ 0x64
 8002260:	9302      	str	r3, [sp, #8]
 8002262:	2301      	movs	r3, #1
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	f107 030c 	add.w	r3, r7, #12
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2301      	movs	r3, #1
 800226e:	2214      	movs	r2, #20
 8002270:	21d0      	movs	r1, #208	@ 0xd0
 8002272:	f008 f9af 	bl	800a5d4 <HAL_I2C_Mem_Write>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	4313      	orrs	r3, r2
 800227e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <bmi088_config+0x12c>
 8002286:	4b96      	ldr	r3, [pc, #600]	@ (80024e0 <bmi088_config+0x380>)
 8002288:	22ab      	movs	r2, #171	@ 0xab
 800228a:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 800228c:	200a      	movs	r0, #10
 800228e:	f006 fbcb 	bl	8008a28 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->device_config.gyro_range;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7a9b      	ldrb	r3, [r3, #10]
 8002296:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68d8      	ldr	r0, [r3, #12]
 800229c:	2364      	movs	r3, #100	@ 0x64
 800229e:	9302      	str	r3, [sp, #8]
 80022a0:	2301      	movs	r3, #1
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2301      	movs	r3, #1
 80022ac:	220f      	movs	r2, #15
 80022ae:	21d0      	movs	r1, #208	@ 0xd0
 80022b0:	f008 f990 	bl	800a5d4 <HAL_I2C_Mem_Write>
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <bmi088_config+0x16a>
 80022c4:	4b86      	ldr	r3, [pc, #536]	@ (80024e0 <bmi088_config+0x380>)
 80022c6:	22b1      	movs	r2, #177	@ 0xb1
 80022c8:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_bandWidth;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7a5b      	ldrb	r3, [r3, #9]
 80022ce:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68d8      	ldr	r0, [r3, #12]
 80022d4:	2314      	movs	r3, #20
 80022d6:	9302      	str	r3, [sp, #8]
 80022d8:	2301      	movs	r3, #1
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	f107 030c 	add.w	r3, r7, #12
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	2301      	movs	r3, #1
 80022e4:	2210      	movs	r2, #16
 80022e6:	21d0      	movs	r1, #208	@ 0xd0
 80022e8:	f008 f974 	bl	800a5d4 <HAL_I2C_Mem_Write>
 80022ec:	4603      	mov	r3, r0
 80022ee:	461a      	mov	r2, r3
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <bmi088_config+0x1a2>
 80022fc:	4b78      	ldr	r3, [pc, #480]	@ (80024e0 <bmi088_config+0x380>)
 80022fe:	22b5      	movs	r2, #181	@ 0xb5
 8002300:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_powerMode;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7a1b      	ldrb	r3, [r3, #8]
 8002306:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68d8      	ldr	r0, [r3, #12]
 800230c:	2314      	movs	r3, #20
 800230e:	9302      	str	r3, [sp, #8]
 8002310:	2301      	movs	r3, #1
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	2301      	movs	r3, #1
 800231c:	2211      	movs	r2, #17
 800231e:	21d0      	movs	r1, #208	@ 0xd0
 8002320:	f008 f958 	bl	800a5d4 <HAL_I2C_Mem_Write>
 8002324:	4603      	mov	r3, r0
 8002326:	461a      	mov	r2, r3
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	4313      	orrs	r3, r2
 800232c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <bmi088_config+0x1da>
 8002334:	4b6a      	ldr	r3, [pc, #424]	@ (80024e0 <bmi088_config+0x380>)
 8002336:	22b9      	movs	r2, #185	@ 0xb9
 8002338:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 800233a:	2014      	movs	r0, #20
 800233c:	f006 fb74 	bl	8008a28 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 8002340:	2380      	movs	r3, #128	@ 0x80
 8002342:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68d8      	ldr	r0, [r3, #12]
 8002348:	2314      	movs	r3, #20
 800234a:	9302      	str	r3, [sp, #8]
 800234c:	2301      	movs	r3, #1
 800234e:	9301      	str	r3, [sp, #4]
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	2301      	movs	r3, #1
 8002358:	2215      	movs	r2, #21
 800235a:	21d0      	movs	r1, #208	@ 0xd0
 800235c:	f008 f93a 	bl	800a5d4 <HAL_I2C_Mem_Write>
 8002360:	4603      	mov	r3, r0
 8002362:	461a      	mov	r2, r3
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	4313      	orrs	r3, r2
 8002368:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <bmi088_config+0x216>
 8002370:	4b5b      	ldr	r3, [pc, #364]	@ (80024e0 <bmi088_config+0x380>)
 8002372:	22bf      	movs	r2, #191	@ 0xbf
 8002374:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0) | (GYRO_INT_ACT_HIGH << 2);
 8002376:	2305      	movs	r3, #5
 8002378:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68d8      	ldr	r0, [r3, #12]
 800237e:	2314      	movs	r3, #20
 8002380:	9302      	str	r3, [sp, #8]
 8002382:	2301      	movs	r3, #1
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	f107 030c 	add.w	r3, r7, #12
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	2301      	movs	r3, #1
 800238e:	2216      	movs	r2, #22
 8002390:	21d0      	movs	r1, #208	@ 0xd0
 8002392:	f008 f91f 	bl	800a5d4 <HAL_I2C_Mem_Write>
 8002396:	4603      	mov	r3, r0
 8002398:	461a      	mov	r2, r3
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	4313      	orrs	r3, r2
 800239e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <bmi088_config+0x24c>
 80023a6:	4b4e      	ldr	r3, [pc, #312]	@ (80024e0 <bmi088_config+0x380>)
 80023a8:	22c3      	movs	r2, #195	@ 0xc3
 80023aa:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_BOTH;
 80023ac:	2381      	movs	r3, #129	@ 0x81
 80023ae:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68d8      	ldr	r0, [r3, #12]
 80023b4:	2314      	movs	r3, #20
 80023b6:	9302      	str	r3, [sp, #8]
 80023b8:	2301      	movs	r3, #1
 80023ba:	9301      	str	r3, [sp, #4]
 80023bc:	f107 030c 	add.w	r3, r7, #12
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	2301      	movs	r3, #1
 80023c4:	2218      	movs	r2, #24
 80023c6:	21d0      	movs	r1, #208	@ 0xd0
 80023c8:	f008 f904 	bl	800a5d4 <HAL_I2C_Mem_Write>
 80023cc:	4603      	mov	r3, r0
 80023ce:	461a      	mov	r2, r3
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <bmi088_config+0x282>
 80023dc:	4b40      	ldr	r3, [pc, #256]	@ (80024e0 <bmi088_config+0x380>)
 80023de:	22c7      	movs	r2, #199	@ 0xc7
 80023e0:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 80023e2:	2304      	movs	r3, #4
 80023e4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68d8      	ldr	r0, [r3, #12]
 80023ea:	2314      	movs	r3, #20
 80023ec:	9302      	str	r3, [sp, #8]
 80023ee:	2301      	movs	r3, #1
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	f107 030c 	add.w	r3, r7, #12
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2301      	movs	r3, #1
 80023fa:	227d      	movs	r2, #125	@ 0x7d
 80023fc:	2130      	movs	r1, #48	@ 0x30
 80023fe:	f008 f8e9 	bl	800a5d4 <HAL_I2C_Mem_Write>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	4313      	orrs	r3, r2
 800240a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <bmi088_config+0x2b8>
 8002412:	4b33      	ldr	r3, [pc, #204]	@ (80024e0 <bmi088_config+0x380>)
 8002414:	22cc      	movs	r2, #204	@ 0xcc
 8002416:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8002418:	2008      	movs	r0, #8
 800241a:	f006 fb05 	bl	8008a28 <HAL_Delay>

	buf[0] = BMI->device_config.acc_powerMode;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	791b      	ldrb	r3, [r3, #4]
 8002422:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68d8      	ldr	r0, [r3, #12]
 8002428:	2314      	movs	r3, #20
 800242a:	9302      	str	r3, [sp, #8]
 800242c:	2301      	movs	r3, #1
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	2301      	movs	r3, #1
 8002438:	227c      	movs	r2, #124	@ 0x7c
 800243a:	2130      	movs	r1, #48	@ 0x30
 800243c:	f008 f8ca 	bl	800a5d4 <HAL_I2C_Mem_Write>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	4313      	orrs	r3, r2
 8002448:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <bmi088_config+0x2f6>
 8002450:	4b23      	ldr	r3, [pc, #140]	@ (80024e0 <bmi088_config+0x380>)
 8002452:	22d1      	movs	r2, #209	@ 0xd1
 8002454:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8002456:	2008      	movs	r0, #8
 8002458:	f006 fae6 	bl	8008a28 <HAL_Delay>

	buf[0] = (BMI->device_config.acc_bandwith << 4) | BMI->device_config.acc_outputDateRate;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	799b      	ldrb	r3, [r3, #6]
 8002460:	b25b      	sxtb	r3, r3
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	b25a      	sxtb	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	79db      	ldrb	r3, [r3, #7]
 800246a:	b25b      	sxtb	r3, r3
 800246c:	4313      	orrs	r3, r2
 800246e:	b25b      	sxtb	r3, r3
 8002470:	b2db      	uxtb	r3, r3
 8002472:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68d8      	ldr	r0, [r3, #12]
 8002478:	2314      	movs	r3, #20
 800247a:	9302      	str	r3, [sp, #8]
 800247c:	2301      	movs	r3, #1
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	f107 030c 	add.w	r3, r7, #12
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2301      	movs	r3, #1
 8002488:	2240      	movs	r2, #64	@ 0x40
 800248a:	2130      	movs	r1, #48	@ 0x30
 800248c:	f008 f8a2 	bl	800a5d4 <HAL_I2C_Mem_Write>
 8002490:	4603      	mov	r3, r0
 8002492:	461a      	mov	r2, r3
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	4313      	orrs	r3, r2
 8002498:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <bmi088_config+0x346>
 80024a0:	4b0f      	ldr	r3, [pc, #60]	@ (80024e0 <bmi088_config+0x380>)
 80024a2:	22d6      	movs	r2, #214	@ 0xd6
 80024a4:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.acc_range;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	795b      	ldrb	r3, [r3, #5]
 80024aa:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68d8      	ldr	r0, [r3, #12]
 80024b0:	2314      	movs	r3, #20
 80024b2:	9302      	str	r3, [sp, #8]
 80024b4:	2301      	movs	r3, #1
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	f107 030c 	add.w	r3, r7, #12
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	2301      	movs	r3, #1
 80024c0:	2241      	movs	r2, #65	@ 0x41
 80024c2:	2130      	movs	r1, #48	@ 0x30
 80024c4:	f008 f886 	bl	800a5d4 <HAL_I2C_Mem_Write>
 80024c8:	4603      	mov	r3, r0
 80024ca:	461a      	mov	r2, r3
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <bmi088_config+0x384>
 80024d8:	4b01      	ldr	r3, [pc, #4]	@ (80024e0 <bmi088_config+0x380>)
 80024da:	22da      	movs	r2, #218	@ 0xda
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e001      	b.n	80024e4 <bmi088_config+0x384>
 80024e0:	2000023c 	.word	0x2000023c

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 80024e4:	230a      	movs	r3, #10
 80024e6:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68d8      	ldr	r0, [r3, #12]
 80024ec:	2314      	movs	r3, #20
 80024ee:	9302      	str	r3, [sp, #8]
 80024f0:	2301      	movs	r3, #1
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	f107 030c 	add.w	r3, r7, #12
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2301      	movs	r3, #1
 80024fc:	2253      	movs	r2, #83	@ 0x53
 80024fe:	2130      	movs	r1, #48	@ 0x30
 8002500:	f008 f868 	bl	800a5d4 <HAL_I2C_Mem_Write>
 8002504:	4603      	mov	r3, r0
 8002506:	461a      	mov	r2, r3
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	4313      	orrs	r3, r2
 800250c:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 800250e:	2304      	movs	r3, #4
 8002510:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68d8      	ldr	r0, [r3, #12]
 8002516:	2314      	movs	r3, #20
 8002518:	9302      	str	r3, [sp, #8]
 800251a:	2301      	movs	r3, #1
 800251c:	9301      	str	r3, [sp, #4]
 800251e:	f107 030c 	add.w	r3, r7, #12
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	2301      	movs	r3, #1
 8002526:	2258      	movs	r2, #88	@ 0x58
 8002528:	2130      	movs	r1, #48	@ 0x30
 800252a:	f008 f853 	bl	800a5d4 <HAL_I2C_Mem_Write>
 800252e:	4603      	mov	r3, r0
 8002530:	461a      	mov	r2, r3
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	4313      	orrs	r3, r2
 8002536:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(BMI->device_config.acc_IRQ);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800253e:	4618      	mov	r0, r3
 8002540:	f006 ffd7 	bl	80094f2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BMI->device_config.gyro_IRQ);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800254a:	4618      	mov	r0, r3
 800254c:	f006 ffd1 	bl	80094f2 <HAL_NVIC_EnableIRQ>
	HAL_Delay(70);
 8002550:	2046      	movs	r0, #70	@ 0x46
 8002552:	f006 fa69 	bl	8008a28 <HAL_Delay>
}
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop

08002560 <bmi088_update>:


void bmi088_update(bmi088_struct_t* BMI)
{
 8002560:	b5b0      	push	{r4, r5, r7, lr}
 8002562:	b092      	sub	sp, #72	@ 0x48
 8002564:	af04      	add	r7, sp, #16
 8002566:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret_val = HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		if(BMI->flags.isAccelUpdated)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	785b      	ldrb	r3, [r3, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8211 	beq.w	800299a <bmi088_update+0x43a>
		{
			uint8_t raw_accel[9];
			uint8_t	raw_temp[2];

			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_accel, 9, 20);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68d8      	ldr	r0, [r3, #12]
 800257c:	2314      	movs	r3, #20
 800257e:	9302      	str	r3, [sp, #8]
 8002580:	2309      	movs	r3, #9
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	2301      	movs	r3, #1
 800258c:	2212      	movs	r2, #18
 800258e:	2130      	movs	r1, #48	@ 0x30
 8002590:	f008 f91a 	bl	800a7c8 <HAL_I2C_Mem_Read>
 8002594:	4603      	mov	r3, r0
 8002596:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, raw_temp, 2, 20);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68d8      	ldr	r0, [r3, #12]
 800259e:	2314      	movs	r3, #20
 80025a0:	9302      	str	r3, [sp, #8]
 80025a2:	2302      	movs	r3, #2
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	f107 0310 	add.w	r3, r7, #16
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2301      	movs	r3, #1
 80025ae:	2222      	movs	r2, #34	@ 0x22
 80025b0:	2130      	movs	r1, #48	@ 0x30
 80025b2:	f008 f909 	bl	800a7c8 <HAL_I2C_Mem_Read>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			uint16_t Temp_uint11 = (raw_temp[0] << 3) | (raw_temp[1] >> 5);
 80025bc:	7c3b      	ldrb	r3, [r7, #16]
 80025be:	b21b      	sxth	r3, r3
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	b21a      	sxth	r2, r3
 80025c4:	7c7b      	ldrb	r3, [r7, #17]
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	4313      	orrs	r3, r2
 80025ce:	b21b      	sxth	r3, r3
 80025d0:	86bb      	strh	r3, [r7, #52]	@ 0x34
			int16_t Temp_int11 = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	867b      	strh	r3, [r7, #50]	@ 0x32
			if (Temp_uint11 > 1023){
 80025d6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80025d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025dc:	d305      	bcc.n	80025ea <bmi088_update+0x8a>
				Temp_int11 = Temp_uint11 - 2048;
 80025de:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80025e0:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	867b      	strh	r3, [r7, #50]	@ 0x32
 80025e8:	e023      	b.n	8002632 <bmi088_update+0xd2>
			}
			else{
				Temp_int11 = Temp_uint11;
 80025ea:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80025ec:	867b      	strh	r3, [r7, #50]	@ 0x32
				BMI->datas.temp = (float)Temp_int11 * 0.125 + 23.0;
 80025ee:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025fa:	ee17 0a90 	vmov	r0, s15
 80025fe:	f7fd ffc3 	bl	8000588 <__aeabi_f2d>
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800260a:	f7fe f815 	bl	8000638 <__aeabi_dmul>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4610      	mov	r0, r2
 8002614:	4619      	mov	r1, r3
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	4bd1      	ldr	r3, [pc, #836]	@ (8002960 <bmi088_update+0x400>)
 800261c:	f7fd fe56 	bl	80002cc <__adddf3>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4610      	mov	r0, r2
 8002626:	4619      	mov	r1, r3
 8002628:	f7fe fafe 	bl	8000c28 <__aeabi_d2f>
 800262c:	4602      	mov	r2, r0
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			uint32_t sensorTime = (raw_accel[8] << 16) | (raw_accel[7] << 8) | raw_accel[6];
 8002632:	7f3b      	ldrb	r3, [r7, #28]
 8002634:	041a      	lsls	r2, r3, #16
 8002636:	7efb      	ldrb	r3, [r7, #27]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	4313      	orrs	r3, r2
 800263c:	7eba      	ldrb	r2, [r7, #26]
 800263e:	4313      	orrs	r3, r2
 8002640:	62fb      	str	r3, [r7, #44]	@ 0x2c

			BMI->datas.current_time= (float)sensorTime * 39.0625 / 1000000.0;
 8002642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002644:	ee07 3a90 	vmov	s15, r3
 8002648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800264c:	ee17 0a90 	vmov	r0, s15
 8002650:	f7fd ff9a 	bl	8000588 <__aeabi_f2d>
 8002654:	a3ba      	add	r3, pc, #744	@ (adr r3, 8002940 <bmi088_update+0x3e0>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	f7fd ffed 	bl	8000638 <__aeabi_dmul>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4610      	mov	r0, r2
 8002664:	4619      	mov	r1, r3
 8002666:	a3b8      	add	r3, pc, #736	@ (adr r3, 8002948 <bmi088_update+0x3e8>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fe f90e 	bl	800088c <__aeabi_ddiv>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe fad6 	bl	8000c28 <__aeabi_d2f>
 800267c:	4602      	mov	r2, r0
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	669a      	str	r2, [r3, #104]	@ 0x68

			int16_t acc_z_16 = (raw_accel[5] << 8) | raw_accel[4];
 8002682:	7e7b      	ldrb	r3, [r7, #25]
 8002684:	b21b      	sxth	r3, r3
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	b21a      	sxth	r2, r3
 800268a:	7e3b      	ldrb	r3, [r7, #24]
 800268c:	b21b      	sxth	r3, r3
 800268e:	4313      	orrs	r3, r2
 8002690:	857b      	strh	r3, [r7, #42]	@ 0x2a
			int16_t acc_y_16 = (raw_accel[3] << 8) | raw_accel[2];
 8002692:	7dfb      	ldrb	r3, [r7, #23]
 8002694:	b21b      	sxth	r3, r3
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	b21a      	sxth	r2, r3
 800269a:	7dbb      	ldrb	r3, [r7, #22]
 800269c:	b21b      	sxth	r3, r3
 800269e:	4313      	orrs	r3, r2
 80026a0:	853b      	strh	r3, [r7, #40]	@ 0x28
			int16_t acc_x_16 = (raw_accel[1] << 8) | raw_accel[0];
 80026a2:	7d7b      	ldrb	r3, [r7, #21]
 80026a4:	b21b      	sxth	r3, r3
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	b21a      	sxth	r2, r3
 80026aa:	7d3b      	ldrb	r3, [r7, #20]
 80026ac:	b21b      	sxth	r3, r3
 80026ae:	4313      	orrs	r3, r2
 80026b0:	84fb      	strh	r3, [r7, #38]	@ 0x26

			BMI->datas.acc_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Z_OFFSET)*9.81/1000;
 80026b2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80026b6:	ee07 3a90 	vmov	s15, r3
 80026ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026be:	ee17 0a90 	vmov	r0, s15
 80026c2:	f7fd ff61 	bl	8000588 <__aeabi_f2d>
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	4ba6      	ldr	r3, [pc, #664]	@ (8002964 <bmi088_update+0x404>)
 80026cc:	f7fe f8de 	bl	800088c <__aeabi_ddiv>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	4ba2      	ldr	r3, [pc, #648]	@ (8002968 <bmi088_update+0x408>)
 80026de:	f7fd ffab 	bl	8000638 <__aeabi_dmul>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4610      	mov	r0, r2
 80026e8:	4619      	mov	r1, r3
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	4b9f      	ldr	r3, [pc, #636]	@ (800296c <bmi088_update+0x40c>)
 80026f0:	f7fd ffa2 	bl	8000638 <__aeabi_dmul>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4614      	mov	r4, r2
 80026fa:	461d      	mov	r5, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	795b      	ldrb	r3, [r3, #5]
 8002700:	3301      	adds	r3, #1
 8002702:	ee07 3a90 	vmov	s15, r3
 8002706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800270a:	ee17 0a90 	vmov	r0, s15
 800270e:	f7fd ff3b 	bl	8000588 <__aeabi_f2d>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	ec43 2b11 	vmov	d1, r2, r3
 800271a:	ed9f 0b8d 	vldr	d0, [pc, #564]	@ 8002950 <bmi088_update+0x3f0>
 800271e:	f010 fbf1 	bl	8012f04 <pow>
 8002722:	ec53 2b10 	vmov	r2, r3, d0
 8002726:	4620      	mov	r0, r4
 8002728:	4629      	mov	r1, r5
 800272a:	f7fd ff85 	bl	8000638 <__aeabi_dmul>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	4b8d      	ldr	r3, [pc, #564]	@ (8002970 <bmi088_update+0x410>)
 800273c:	f7fd fdc4 	bl	80002c8 <__aeabi_dsub>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4610      	mov	r0, r2
 8002746:	4619      	mov	r1, r3
 8002748:	a383      	add	r3, pc, #524	@ (adr r3, 8002958 <bmi088_update+0x3f8>)
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	f7fd ff73 	bl	8000638 <__aeabi_dmul>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4610      	mov	r0, r2
 8002758:	4619      	mov	r1, r3
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	4b82      	ldr	r3, [pc, #520]	@ (8002968 <bmi088_update+0x408>)
 8002760:	f7fe f894 	bl	800088c <__aeabi_ddiv>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	f7fe fa5c 	bl	8000c28 <__aeabi_d2f>
 8002770:	4602      	mov	r2, r0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	661a      	str	r2, [r3, #96]	@ 0x60
			BMI->datas.acc_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Y_OFFSET)*9.81/1000;
 8002776:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002782:	ee17 0a90 	vmov	r0, s15
 8002786:	f7fd feff 	bl	8000588 <__aeabi_f2d>
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	4b75      	ldr	r3, [pc, #468]	@ (8002964 <bmi088_update+0x404>)
 8002790:	f7fe f87c 	bl	800088c <__aeabi_ddiv>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	4b71      	ldr	r3, [pc, #452]	@ (8002968 <bmi088_update+0x408>)
 80027a2:	f7fd ff49 	bl	8000638 <__aeabi_dmul>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	4b6e      	ldr	r3, [pc, #440]	@ (800296c <bmi088_update+0x40c>)
 80027b4:	f7fd ff40 	bl	8000638 <__aeabi_dmul>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4614      	mov	r4, r2
 80027be:	461d      	mov	r5, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	795b      	ldrb	r3, [r3, #5]
 80027c4:	3301      	adds	r3, #1
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ce:	ee17 0a90 	vmov	r0, s15
 80027d2:	f7fd fed9 	bl	8000588 <__aeabi_f2d>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	ec43 2b11 	vmov	d1, r2, r3
 80027de:	ed9f 0b5c 	vldr	d0, [pc, #368]	@ 8002950 <bmi088_update+0x3f0>
 80027e2:	f010 fb8f 	bl	8012f04 <pow>
 80027e6:	ec53 2b10 	vmov	r2, r3, d0
 80027ea:	4620      	mov	r0, r4
 80027ec:	4629      	mov	r1, r5
 80027ee:	f7fd ff23 	bl	8000638 <__aeabi_dmul>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4610      	mov	r0, r2
 80027f8:	4619      	mov	r1, r3
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002974 <bmi088_update+0x414>)
 8002800:	f7fd fd64 	bl	80002cc <__adddf3>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	a352      	add	r3, pc, #328	@ (adr r3, 8002958 <bmi088_update+0x3f8>)
 800280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002812:	f7fd ff11 	bl	8000638 <__aeabi_dmul>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	4b51      	ldr	r3, [pc, #324]	@ (8002968 <bmi088_update+0x408>)
 8002824:	f7fe f832 	bl	800088c <__aeabi_ddiv>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	f7fe f9fa 	bl	8000c28 <__aeabi_d2f>
 8002834:	4602      	mov	r2, r0
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	65da      	str	r2, [r3, #92]	@ 0x5c
			BMI->datas.acc_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_X_OFFSET)*9.81/1000;
 800283a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800283e:	ee07 3a90 	vmov	s15, r3
 8002842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002846:	ee17 0a90 	vmov	r0, s15
 800284a:	f7fd fe9d 	bl	8000588 <__aeabi_f2d>
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	4b44      	ldr	r3, [pc, #272]	@ (8002964 <bmi088_update+0x404>)
 8002854:	f7fe f81a 	bl	800088c <__aeabi_ddiv>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	4b40      	ldr	r3, [pc, #256]	@ (8002968 <bmi088_update+0x408>)
 8002866:	f7fd fee7 	bl	8000638 <__aeabi_dmul>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	4b3d      	ldr	r3, [pc, #244]	@ (800296c <bmi088_update+0x40c>)
 8002878:	f7fd fede 	bl	8000638 <__aeabi_dmul>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4614      	mov	r4, r2
 8002882:	461d      	mov	r5, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	795b      	ldrb	r3, [r3, #5]
 8002888:	3301      	adds	r3, #1
 800288a:	ee07 3a90 	vmov	s15, r3
 800288e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002892:	ee17 0a90 	vmov	r0, s15
 8002896:	f7fd fe77 	bl	8000588 <__aeabi_f2d>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	ec43 2b11 	vmov	d1, r2, r3
 80028a2:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 8002950 <bmi088_update+0x3f0>
 80028a6:	f010 fb2d 	bl	8012f04 <pow>
 80028aa:	ec53 2b10 	vmov	r2, r3, d0
 80028ae:	4620      	mov	r0, r4
 80028b0:	4629      	mov	r1, r5
 80028b2:	f7fd fec1 	bl	8000638 <__aeabi_dmul>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002970 <bmi088_update+0x410>)
 80028c4:	f7fd fd02 	bl	80002cc <__adddf3>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4610      	mov	r0, r2
 80028ce:	4619      	mov	r1, r3
 80028d0:	a321      	add	r3, pc, #132	@ (adr r3, 8002958 <bmi088_update+0x3f8>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd feaf 	bl	8000638 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	4b20      	ldr	r3, [pc, #128]	@ (8002968 <bmi088_update+0x408>)
 80028e8:	f7fd ffd0 	bl	800088c <__aeabi_ddiv>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4610      	mov	r0, r2
 80028f2:	4619      	mov	r1, r3
 80028f4:	f7fe f998 	bl	8000c28 <__aeabi_d2f>
 80028f8:	4602      	mov	r2, r0
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	659a      	str	r2, [r3, #88]	@ 0x58

			if(is_starded)
 80028fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002978 <bmi088_update+0x418>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d03c      	beq.n	8002980 <bmi088_update+0x420>
			{
				BMI->datas.delta_time = BMI->datas.current_time - BMI->datas.last_time < 0 ? 0.0 : BMI->datas.current_time - BMI->datas.last_time;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8002912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002916:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800291a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291e:	d502      	bpl.n	8002926 <bmi088_update+0x3c6>
 8002920:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800297c <bmi088_update+0x41c>
 8002924:	e007      	b.n	8002936 <bmi088_update+0x3d6>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8002932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
 800293c:	e023      	b.n	8002986 <bmi088_update+0x426>
 800293e:	bf00      	nop
 8002940:	00000000 	.word	0x00000000
 8002944:	40438800 	.word	0x40438800
 8002948:	00000000 	.word	0x00000000
 800294c:	412e8480 	.word	0x412e8480
 8002950:	00000000 	.word	0x00000000
 8002954:	40000000 	.word	0x40000000
 8002958:	51eb851f 	.word	0x51eb851f
 800295c:	40239eb8 	.word	0x40239eb8
 8002960:	40370000 	.word	0x40370000
 8002964:	40e00000 	.word	0x40e00000
 8002968:	408f4000 	.word	0x408f4000
 800296c:	3ff80000 	.word	0x3ff80000
 8002970:	40100000 	.word	0x40100000
 8002974:	402e0000 	.word	0x402e0000
 8002978:	2000023a 	.word	0x2000023a
 800297c:	00000000 	.word	0x00000000
			}
			else
			{
				is_starded = 1;
 8002980:	4bcf      	ldr	r3, [pc, #828]	@ (8002cc0 <bmi088_update+0x760>)
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
			}

			BMI->datas.last_time = BMI->datas.current_time;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	66da      	str	r2, [r3, #108]	@ 0x6c
			BMI->flags.isAccelUpdated = 0;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	705a      	strb	r2, [r3, #1]
			is_time_updated = 1;
 8002994:	4bcb      	ldr	r3, [pc, #812]	@ (8002cc4 <bmi088_update+0x764>)
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->flags.isGyroUpdated && is_time_updated)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 81b2 	beq.w	8002d08 <bmi088_update+0x7a8>
 80029a4:	4bc7      	ldr	r3, [pc, #796]	@ (8002cc4 <bmi088_update+0x764>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 81ad 	beq.w	8002d08 <bmi088_update+0x7a8>
		{
			if(is_starded){
 80029ae:	4bc4      	ldr	r3, [pc, #784]	@ (8002cc0 <bmi088_update+0x760>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 81a0 	beq.w	8002cf8 <bmi088_update+0x798>
				uint8_t	raw_gyro[6];
				ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_gyro, 6, 10);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68d8      	ldr	r0, [r3, #12]
 80029bc:	230a      	movs	r3, #10
 80029be:	9302      	str	r3, [sp, #8]
 80029c0:	2306      	movs	r3, #6
 80029c2:	9301      	str	r3, [sp, #4]
 80029c4:	f107 0308 	add.w	r3, r7, #8
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	2301      	movs	r3, #1
 80029cc:	2202      	movs	r2, #2
 80029ce:	21d0      	movs	r1, #208	@ 0xd0
 80029d0:	f007 fefa 	bl	800a7c8 <HAL_I2C_Mem_Read>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

				if(ret_val)
 80029da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f040 8191 	bne.w	8002d06 <bmi088_update+0x7a6>
					return;

				int16_t gyro_x_16 = (raw_gyro[1] << 8) | raw_gyro[0];
 80029e4:	7a7b      	ldrb	r3, [r7, #9]
 80029e6:	b21b      	sxth	r3, r3
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	b21a      	sxth	r2, r3
 80029ec:	7a3b      	ldrb	r3, [r7, #8]
 80029ee:	b21b      	sxth	r3, r3
 80029f0:	4313      	orrs	r3, r2
 80029f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
				int16_t gyro_y_16 = (raw_gyro[3] << 8) | raw_gyro[2];
 80029f4:	7afb      	ldrb	r3, [r7, #11]
 80029f6:	b21b      	sxth	r3, r3
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	b21a      	sxth	r2, r3
 80029fc:	7abb      	ldrb	r3, [r7, #10]
 80029fe:	b21b      	sxth	r3, r3
 8002a00:	4313      	orrs	r3, r2
 8002a02:	847b      	strh	r3, [r7, #34]	@ 0x22
				int16_t gyro_z_16 = (raw_gyro[5] << 8) | raw_gyro[4];
 8002a04:	7b7b      	ldrb	r3, [r7, #13]
 8002a06:	b21b      	sxth	r3, r3
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	b21a      	sxth	r2, r3
 8002a0c:	7b3b      	ldrb	r3, [r7, #12]
 8002a0e:	b21b      	sxth	r3, r3
 8002a10:	4313      	orrs	r3, r2
 8002a12:	843b      	strh	r3, [r7, #32]

				BMI->datas.gyro_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[0]) * DEG_TO_RAD;
 8002a14:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002a18:	ee07 3a90 	vmov	s15, r3
 8002a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a20:	ee17 0a90 	vmov	r0, s15
 8002a24:	f7fd fdb0 	bl	8000588 <__aeabi_f2d>
 8002a28:	a3a1      	add	r3, pc, #644	@ (adr r3, 8002cb0 <bmi088_update+0x750>)
 8002a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2e:	f7fd ff2d 	bl	800088c <__aeabi_ddiv>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4614      	mov	r4, r2
 8002a38:	461d      	mov	r5, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	7a9b      	ldrb	r3, [r3, #10]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002a44:	4113      	asrs	r3, r2
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4e:	ee17 0a90 	vmov	r0, s15
 8002a52:	f7fd fd99 	bl	8000588 <__aeabi_f2d>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	f7fd fdeb 	bl	8000638 <__aeabi_dmul>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4614      	mov	r4, r2
 8002a68:	461d      	mov	r5, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fd89 	bl	8000588 <__aeabi_f2d>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	f7fd fc23 	bl	80002c8 <__aeabi_dsub>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4610      	mov	r0, r2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	a38b      	add	r3, pc, #556	@ (adr r3, 8002cb8 <bmi088_update+0x758>)
 8002a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a90:	f7fd fdd2 	bl	8000638 <__aeabi_dmul>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4610      	mov	r0, r2
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f7fe f8c4 	bl	8000c28 <__aeabi_d2f>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	619a      	str	r2, [r3, #24]
				BMI->datas.gyro_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[1]) * DEG_TO_RAD;
 8002aa6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab2:	ee17 0a90 	vmov	r0, s15
 8002ab6:	f7fd fd67 	bl	8000588 <__aeabi_f2d>
 8002aba:	a37d      	add	r3, pc, #500	@ (adr r3, 8002cb0 <bmi088_update+0x750>)
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	f7fd fee4 	bl	800088c <__aeabi_ddiv>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4614      	mov	r4, r2
 8002aca:	461d      	mov	r5, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7a9b      	ldrb	r3, [r3, #10]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002ad6:	4113      	asrs	r3, r2
 8002ad8:	ee07 3a90 	vmov	s15, r3
 8002adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae0:	ee17 0a90 	vmov	r0, s15
 8002ae4:	f7fd fd50 	bl	8000588 <__aeabi_f2d>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4620      	mov	r0, r4
 8002aee:	4629      	mov	r1, r5
 8002af0:	f7fd fda2 	bl	8000638 <__aeabi_dmul>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4614      	mov	r4, r2
 8002afa:	461d      	mov	r5, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fd fd40 	bl	8000588 <__aeabi_f2d>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	4629      	mov	r1, r5
 8002b10:	f7fd fbda 	bl	80002c8 <__aeabi_dsub>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	a366      	add	r3, pc, #408	@ (adr r3, 8002cb8 <bmi088_update+0x758>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	f7fd fd89 	bl	8000638 <__aeabi_dmul>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f7fe f87b 	bl	8000c28 <__aeabi_d2f>
 8002b32:	4602      	mov	r2, r0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	61da      	str	r2, [r3, #28]
				BMI->datas.gyro_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[2]) * DEG_TO_RAD;
 8002b38:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002b3c:	ee07 3a90 	vmov	s15, r3
 8002b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b44:	ee17 0a90 	vmov	r0, s15
 8002b48:	f7fd fd1e 	bl	8000588 <__aeabi_f2d>
 8002b4c:	a358      	add	r3, pc, #352	@ (adr r3, 8002cb0 <bmi088_update+0x750>)
 8002b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b52:	f7fd fe9b 	bl	800088c <__aeabi_ddiv>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4614      	mov	r4, r2
 8002b5c:	461d      	mov	r5, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	7a9b      	ldrb	r3, [r3, #10]
 8002b62:	461a      	mov	r2, r3
 8002b64:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002b68:	4113      	asrs	r3, r2
 8002b6a:	ee07 3a90 	vmov	s15, r3
 8002b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b72:	ee17 0a90 	vmov	r0, s15
 8002b76:	f7fd fd07 	bl	8000588 <__aeabi_f2d>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4620      	mov	r0, r4
 8002b80:	4629      	mov	r1, r5
 8002b82:	f7fd fd59 	bl	8000638 <__aeabi_dmul>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4614      	mov	r4, r2
 8002b8c:	461d      	mov	r5, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fd fcf7 	bl	8000588 <__aeabi_f2d>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	f7fd fb91 	bl	80002c8 <__aeabi_dsub>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	a342      	add	r3, pc, #264	@ (adr r3, 8002cb8 <bmi088_update+0x758>)
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f7fd fd40 	bl	8000638 <__aeabi_dmul>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f7fe f832 	bl	8000c28 <__aeabi_d2f>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	621a      	str	r2, [r3, #32]

				Orientation_Update(BMI->datas.gyro_y, -BMI->datas.gyro_x, BMI->datas.gyro_z,BMI->datas.acc_y,-BMI->datas.acc_x,BMI->datas.acc_z, BMI->datas.delta_time);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002bd6:	eef1 6a67 	vneg.f32	s13, s15
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	ed93 6a08 	vldr	s12, [r3, #32]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	edd3 5a17 	vldr	s11, [r3, #92]	@ 0x5c
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002bec:	eef1 7a67 	vneg.f32	s15, s15
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	ed93 5a18 	vldr	s10, [r3, #96]	@ 0x60
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	edd3 4a1c 	vldr	s9, [r3, #112]	@ 0x70
 8002bfc:	eeb0 3a64 	vmov.f32	s6, s9
 8002c00:	eef0 2a45 	vmov.f32	s5, s10
 8002c04:	eeb0 2a67 	vmov.f32	s4, s15
 8002c08:	eef0 1a65 	vmov.f32	s3, s11
 8002c0c:	eeb0 1a46 	vmov.f32	s2, s12
 8002c10:	eef0 0a66 	vmov.f32	s1, s13
 8002c14:	eeb0 0a47 	vmov.f32	s0, s14
 8002c18:	f003 fce8 	bl	80065ec <Orientation_Update>
				BMI->datas.yaw = quaternionToYaw();
 8002c1c:	f004 fa82 	bl	8007124 <quaternionToYaw>
 8002c20:	eef0 7a40 	vmov.f32	s15, s0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				BMI->datas.pitch = quaternionToPitch();
 8002c2a:	f004 fad9 	bl	80071e0 <quaternionToPitch>
 8002c2e:	eef0 7a40 	vmov.f32	s15, s0
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
				BMI->datas.roll = quaternionToRoll();
 8002c38:	f004 fb0a 	bl	8007250 <quaternionToRoll>
 8002c3c:	eef0 7a40 	vmov.f32	s15, s0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
				BMI->datas.theta = quaternionToThetaZ();
 8002c46:	f004 f945 	bl	8006ed4 <quaternionToThetaZ>
 8002c4a:	eef0 7a40 	vmov.f32	s15, s0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				BMI->datas.angle_x = quaternionToYawDegree1();
 8002c54:	f003 fab6 	bl	80061c4 <quaternionToYawDegree1>
 8002c58:	eef0 7a40 	vmov.f32	s15, s0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
				BMI->datas.angle_y = quaternionToPitchDegree();
 8002c62:	f004 f9c7 	bl	8006ff4 <quaternionToPitchDegree>
 8002c66:	eef0 7a40 	vmov.f32	s15, s0
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
				BMI->datas.angle_z = quaternionToRollDegree();
 8002c70:	f004 fa10 	bl	8007094 <quaternionToRollDegree>
 8002c74:	eef0 7a40 	vmov.f32	s15, s0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

				ekf_predict(BMI->datas.gyro_y,-BMI->datas.gyro_x,BMI->datas.gyro_z,BMI->datas.delta_time);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c8a:	eef1 7a67 	vneg.f32	s15, s15
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	ed93 6a1c 	vldr	s12, [r3, #112]	@ 0x70
 8002c9a:	eef0 1a46 	vmov.f32	s3, s12
 8002c9e:	eeb0 1a66 	vmov.f32	s2, s13
 8002ca2:	eef0 0a67 	vmov.f32	s1, s15
 8002ca6:	eeb0 0a47 	vmov.f32	s0, s14
 8002caa:	f003 f871 	bl	8005d90 <ekf_predict>
 8002cae:	e00b      	b.n	8002cc8 <bmi088_update+0x768>
 8002cb0:	00000000 	.word	0x00000000
 8002cb4:	40dfffc0 	.word	0x40dfffc0
 8002cb8:	a0000000 	.word	0xa0000000
 8002cbc:	3f91df46 	.word	0x3f91df46
 8002cc0:	2000023a 	.word	0x2000023a
 8002cc4:	20000239 	.word	0x20000239
				BMI->datas.yaw1 = quaternionToYaw1();
 8002cc8:	f003 f988 	bl	8005fdc <quaternionToYaw1>
 8002ccc:	eef0 7a40 	vmov.f32	s15, s0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
				BMI->datas.pitch1 = quaternionToPitch1();
 8002cd6:	f003 f9df 	bl	8006098 <quaternionToPitch1>
 8002cda:	eef0 7a40 	vmov.f32	s15, s0
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
				BMI->datas.roll1 = quaternionToRoll1();
 8002ce4:	f003 fa10 	bl	8006108 <quaternionToRoll1>
 8002ce8:	eef0 7a40 	vmov.f32	s15, s0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
				is_gyro_renewed = 1;
 8002cf2:	4b07      	ldr	r3, [pc, #28]	@ (8002d10 <bmi088_update+0x7b0>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	701a      	strb	r2, [r3, #0]
			}
			BMI->flags.isGyroUpdated = 0;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]
			is_time_updated = 0;
 8002cfe:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <bmi088_update+0x7b4>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	e000      	b.n	8002d08 <bmi088_update+0x7a8>
					return;
 8002d06:	bf00      	nop
		}
}
 8002d08:	3738      	adds	r7, #56	@ 0x38
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	2000023b 	.word	0x2000023b
 8002d14:	20000239 	.word	0x20000239

08002d18 <bmi088_set_accel_INT>:


void bmi088_set_accel_INT(bmi088_struct_t* BMI)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelUpdated = 1;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	705a      	strb	r2, [r3, #1]
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <bmi088_set_gyro_INT>:

void bmi088_set_gyro_INT(bmi088_struct_t* BMI)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroUpdated = 1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <get_offset>:
	HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void get_offset(bmi088_struct_t* BMI)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
	int offsetCounter = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		bmi088_update(BMI);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff fc01 	bl	8002560 <bmi088_update>
		if(is_gyro_renewed == 1)
 8002d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8002e1c <get_offset+0xd0>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d1f8      	bne.n	8002d58 <get_offset+0xc>
		{
			if(offsetCounter < 1000)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d6c:	da2d      	bge.n	8002dca <get_offset+0x7e>
			{
				BMI->device_config.offsets->gyro_offset[0] += BMI->datas.gyro_x;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	ed93 7a00 	vldr	s14, [r3]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d84:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] += BMI->datas.gyro_y;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9e:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] += BMI->datas.gyro_z;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	ed93 7a02 	vldr	s14, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	edd3 7a08 	vldr	s15, [r3, #32]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002db8:	edc3 7a02 	vstr	s15, [r3, #8]
				offsetCounter++;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	60fb      	str	r3, [r7, #12]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
				//quaternionSet_zero();
				break;
				//Error_Handler();
			}
			is_gyro_renewed = 0;
 8002dc2:	4b16      	ldr	r3, [pc, #88]	@ (8002e1c <get_offset+0xd0>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	e7c6      	b.n	8002d58 <get_offset+0xc>
				BMI->device_config.offsets->gyro_offset[0] /= 1000.0;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	ed93 7a00 	vldr	s14, [r3]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002e20 <get_offset+0xd4>
 8002dda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dde:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] /= 1000.0;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	ed93 7a01 	vldr	s14, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002e20 <get_offset+0xd4>
 8002df2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002df6:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002e20 <get_offset+0xd4>
 8002e0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e0e:	edc3 7a02 	vstr	s15, [r3, #8]
				break;
 8002e12:	bf00      	nop
		}

	}
}
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	2000023b 	.word	0x2000023b
 8002e20:	447a0000 	.word	0x447a0000

08002e24 <flight_algorithm_init>:

/**
 * @brief Initialize the flight algorithm
 */
void flight_algorithm_init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
    flight_algorithm_reset();
 8002e28:	f000 f802 	bl	8002e30 <flight_algorithm_reset>
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <flight_algorithm_reset>:

/**
 * @brief Reset flight algorithm to initial state
 */
void flight_algorithm_reset(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
    current_phase = PHASE_IDLE;
 8002e34:	4b18      	ldr	r3, [pc, #96]	@ (8002e98 <flight_algorithm_reset+0x68>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	701a      	strb	r2, [r3, #0]
    is_rising = 0;
 8002e3a:	4b18      	ldr	r3, [pc, #96]	@ (8002e9c <flight_algorithm_reset+0x6c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
    is_stabilized = 1;
 8002e40:	4b17      	ldr	r3, [pc, #92]	@ (8002ea0 <flight_algorithm_reset+0x70>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
    is_armed = 0;
 8002e46:	4b17      	ldr	r3, [pc, #92]	@ (8002ea4 <flight_algorithm_reset+0x74>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	701a      	strb	r2, [r3, #0]
    drogue_deployed = 0;
 8002e4c:	4b16      	ldr	r3, [pc, #88]	@ (8002ea8 <flight_algorithm_reset+0x78>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
    main_deployed = 0;
 8002e52:	4b16      	ldr	r3, [pc, #88]	@ (8002eac <flight_algorithm_reset+0x7c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	701a      	strb	r2, [r3, #0]
    altitude_decrease_count = 0;
 8002e58:	4b15      	ldr	r3, [pc, #84]	@ (8002eb0 <flight_algorithm_reset+0x80>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
    status_bits = 0;
 8002e5e:	4b15      	ldr	r3, [pc, #84]	@ (8002eb4 <flight_algorithm_reset+0x84>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	801a      	strh	r2, [r3, #0]
    prev_altitude = 0.0f;
 8002e64:	4b14      	ldr	r3, [pc, #80]	@ (8002eb8 <flight_algorithm_reset+0x88>)
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
    flight_start_time = 0;
 8002e6c:	4b13      	ldr	r3, [pc, #76]	@ (8002ebc <flight_algorithm_reset+0x8c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
    deployed_velocity = 1;
 8002e72:	4b13      	ldr	r3, [pc, #76]	@ (8002ec0 <flight_algorithm_reset+0x90>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
    deployed_angle = 1;
 8002e78:	4b12      	ldr	r3, [pc, #72]	@ (8002ec4 <flight_algorithm_reset+0x94>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
    apogee_counter = 0;
 8002e7e:	4b12      	ldr	r3, [pc, #72]	@ (8002ec8 <flight_algorithm_reset+0x98>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
    prev_velocity = 0;
 8002e84:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <flight_algorithm_reset+0x9c>)
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20000240 	.word	0x20000240
 8002e9c:	20000241 	.word	0x20000241
 8002ea0:	20000014 	.word	0x20000014
 8002ea4:	20000242 	.word	0x20000242
 8002ea8:	20000243 	.word	0x20000243
 8002eac:	20000244 	.word	0x20000244
 8002eb0:	20000254 	.word	0x20000254
 8002eb4:	2000025c 	.word	0x2000025c
 8002eb8:	20000258 	.word	0x20000258
 8002ebc:	20000250 	.word	0x20000250
 8002ec0:	20000016 	.word	0x20000016
 8002ec4:	20000015 	.word	0x20000015
 8002ec8:	20000248 	.word	0x20000248
 8002ecc:	2000024c 	.word	0x2000024c

08002ed0 <flight_algorithm_update>:

/**
 * @brief Update flight algorithm with sensor data
 */
void flight_algorithm_update(BME_280_t* bme, bmi088_struct_t* bmi, sensor_fusion_t* sensor_fusion)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
    // Calculate key metrics
    float total_acceleration = calculate_total_acceleration(bmi);
 8002edc:	68b8      	ldr	r0, [r7, #8]
 8002ede:	f000 f921 	bl	8003124 <calculate_total_acceleration>
 8002ee2:	ed87 0a05 	vstr	s0, [r7, #20]

    // Status bits are cumulative - once set they remain set
    // Each phase builds on the previous phase's status bits

    // State machine for flight phases
    switch (current_phase) {
 8002ee6:	4b7e      	ldr	r3, [pc, #504]	@ (80030e0 <flight_algorithm_update+0x210>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	f200 80ed 	bhi.w	80030ca <flight_algorithm_update+0x1fa>
 8002ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef8 <flight_algorithm_update+0x28>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	08002f0d 	.word	0x08002f0d
 8002efc:	08002f49 	.word	0x08002f49
 8002f00:	08002f7b 	.word	0x08002f7b
 8002f04:	080030cb 	.word	0x080030cb
 8002f08:	080030cb 	.word	0x080030cb
        case PHASE_IDLE:
            // Detect launch using acceleration threshold
            if (total_acceleration > launch_accel_threshold) {
 8002f0c:	4b75      	ldr	r3, [pc, #468]	@ (80030e4 <flight_algorithm_update+0x214>)
 8002f0e:	edd3 7a00 	vldr	s15, [r3]
 8002f12:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1e:	dc00      	bgt.n	8002f22 <flight_algorithm_update+0x52>
                current_phase = PHASE_BOOST;
                is_rising = 1;
                flight_start_time = HAL_GetTick();
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
            }
            break;
 8002f20:	e0d3      	b.n	80030ca <flight_algorithm_update+0x1fa>
                current_phase = PHASE_BOOST;
 8002f22:	4b6f      	ldr	r3, [pc, #444]	@ (80030e0 <flight_algorithm_update+0x210>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	701a      	strb	r2, [r3, #0]
                is_rising = 1;
 8002f28:	4b6f      	ldr	r3, [pc, #444]	@ (80030e8 <flight_algorithm_update+0x218>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
                flight_start_time = HAL_GetTick();
 8002f2e:	f005 fd6f 	bl	8008a10 <HAL_GetTick>
 8002f32:	4603      	mov	r3, r0
 8002f34:	4a6d      	ldr	r2, [pc, #436]	@ (80030ec <flight_algorithm_update+0x21c>)
 8002f36:	6013      	str	r3, [r2, #0]
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
 8002f38:	4b6d      	ldr	r3, [pc, #436]	@ (80030f0 <flight_algorithm_update+0x220>)
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	4b6b      	ldr	r3, [pc, #428]	@ (80030f0 <flight_algorithm_update+0x220>)
 8002f44:	801a      	strh	r2, [r3, #0]
            break;
 8002f46:	e0c0      	b.n	80030ca <flight_algorithm_update+0x1fa>

        case PHASE_BOOST:
            // After boost phase (typically 3-5 seconds)
            if (HAL_GetTick() - flight_start_time > 7000) {
 8002f48:	f005 fd62 	bl	8008a10 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b67      	ldr	r3, [pc, #412]	@ (80030ec <flight_algorithm_update+0x21c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	f240 80b3 	bls.w	80030c4 <flight_algorithm_update+0x1f4>
                current_phase = PHASE_COAST;
 8002f5e:	4b60      	ldr	r3, [pc, #384]	@ (80030e0 <flight_algorithm_update+0x210>)
 8002f60:	2202      	movs	r2, #2
 8002f62:	701a      	strb	r2, [r3, #0]
                is_stabilized = 1;
 8002f64:	4b63      	ldr	r3, [pc, #396]	@ (80030f4 <flight_algorithm_update+0x224>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0002; // Set Bit 1: Motor burn prevention period ended
 8002f6a:	4b61      	ldr	r3, [pc, #388]	@ (80030f0 <flight_algorithm_update+0x220>)
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	f043 0302 	orr.w	r3, r3, #2
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	4b5e      	ldr	r3, [pc, #376]	@ (80030f0 <flight_algorithm_update+0x220>)
 8002f76:	801a      	strh	r2, [r3, #0]
            }
            break;
 8002f78:	e0a4      	b.n	80030c4 <flight_algorithm_update+0x1f4>

        case PHASE_COAST:
            // Check minimum arming altitude
            if (bme->altitude > min_arming_altitude) {
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002f80:	4b5d      	ldr	r3, [pc, #372]	@ (80030f8 <flight_algorithm_update+0x228>)
 8002f82:	edd3 7a00 	vldr	s15, [r3]
 8002f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8e:	dd09      	ble.n	8002fa4 <flight_algorithm_update+0xd4>
                is_armed = 1;
 8002f90:	4b5a      	ldr	r3, [pc, #360]	@ (80030fc <flight_algorithm_update+0x22c>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0004; // Set Bit 2: Minimum altitude threshold exceeded
 8002f96:	4b56      	ldr	r3, [pc, #344]	@ (80030f0 <flight_algorithm_update+0x220>)
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	f043 0304 	orr.w	r3, r3, #4
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	4b53      	ldr	r3, [pc, #332]	@ (80030f0 <flight_algorithm_update+0x220>)
 8002fa2:	801a      	strh	r2, [r3, #0]
            }

            // Check if angle exceeds threshold
            if (is_armed && (fabs(bmi->datas.angle_y) > max_angle_threshold) && deployed_angle) {
 8002fa4:	4b55      	ldr	r3, [pc, #340]	@ (80030fc <flight_algorithm_update+0x22c>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d01f      	beq.n	8002fec <flight_algorithm_update+0x11c>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002fb2:	eeb0 7ae7 	vabs.f32	s14, s15
 8002fb6:	4b52      	ldr	r3, [pc, #328]	@ (8003100 <flight_algorithm_update+0x230>)
 8002fb8:	edd3 7a00 	vldr	s15, [r3]
 8002fbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc4:	dd12      	ble.n	8002fec <flight_algorithm_update+0x11c>
 8002fc6:	4b4f      	ldr	r3, [pc, #316]	@ (8003104 <flight_algorithm_update+0x234>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00e      	beq.n	8002fec <flight_algorithm_update+0x11c>
                drogue_deployed = 1;
 8002fce:	4b4e      	ldr	r3, [pc, #312]	@ (8003108 <flight_algorithm_update+0x238>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	701a      	strb	r2, [r3, #0]
                deployed_angle = 0;
 8002fd4:	4b4b      	ldr	r3, [pc, #300]	@ (8003104 <flight_algorithm_update+0x234>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0008; // Set Bit 3: Rocket body angle exceeds threshold
 8002fda:	4b45      	ldr	r3, [pc, #276]	@ (80030f0 <flight_algorithm_update+0x220>)
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	f043 0308 	orr.w	r3, r3, #8
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	4b42      	ldr	r3, [pc, #264]	@ (80030f0 <flight_algorithm_update+0x220>)
 8002fe6:	801a      	strh	r2, [r3, #0]
                deploy_drogue_parachute();
 8002fe8:	f000 f906 	bl	80031f8 <deploy_drogue_parachute>
                drogue_deployed = 1;
                deployed_velocity = 0;
                // deploy_drogue_parachute(); // Actual deployment command
            }*/

            if (is_armed && sensor_fusion->velocity < 0.0f && sensor_fusion->velocity < prev_velocity && deployed_velocity) {
 8002fec:	4b43      	ldr	r3, [pc, #268]	@ (80030fc <flight_algorithm_update+0x22c>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d036      	beq.n	8003062 <flight_algorithm_update+0x192>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ffa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003002:	d52e      	bpl.n	8003062 <flight_algorithm_update+0x192>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	ed93 7a01 	vldr	s14, [r3, #4]
 800300a:	4b40      	ldr	r3, [pc, #256]	@ (800310c <flight_algorithm_update+0x23c>)
 800300c:	edd3 7a00 	vldr	s15, [r3]
 8003010:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003018:	d523      	bpl.n	8003062 <flight_algorithm_update+0x192>
 800301a:	4b3d      	ldr	r3, [pc, #244]	@ (8003110 <flight_algorithm_update+0x240>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d01f      	beq.n	8003062 <flight_algorithm_update+0x192>
                apogee_counter++;
 8003022:	4b3c      	ldr	r3, [pc, #240]	@ (8003114 <flight_algorithm_update+0x244>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3301      	adds	r3, #1
 8003028:	4a3a      	ldr	r2, [pc, #232]	@ (8003114 <flight_algorithm_update+0x244>)
 800302a:	6013      	str	r3, [r2, #0]
                if (apogee_counter >= 9) {  // Confirm apogee after 5 consecutive samples
 800302c:	4b39      	ldr	r3, [pc, #228]	@ (8003114 <flight_algorithm_update+0x244>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b08      	cmp	r3, #8
 8003032:	dd19      	ble.n	8003068 <flight_algorithm_update+0x198>
                    status_bits |= 0x0010; // Set Bit 4: Rocket altitude started decreasing
 8003034:	4b2e      	ldr	r3, [pc, #184]	@ (80030f0 <flight_algorithm_update+0x220>)
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	f043 0310 	orr.w	r3, r3, #16
 800303c:	b29a      	uxth	r2, r3
 800303e:	4b2c      	ldr	r3, [pc, #176]	@ (80030f0 <flight_algorithm_update+0x220>)
 8003040:	801a      	strh	r2, [r3, #0]
                    status_bits |= 0x0020; // Set Bit 5: Drag parachute deployment command generated
 8003042:	4b2b      	ldr	r3, [pc, #172]	@ (80030f0 <flight_algorithm_update+0x220>)
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	f043 0320 	orr.w	r3, r3, #32
 800304a:	b29a      	uxth	r2, r3
 800304c:	4b28      	ldr	r3, [pc, #160]	@ (80030f0 <flight_algorithm_update+0x220>)
 800304e:	801a      	strh	r2, [r3, #0]
                    drogue_deployed = 1;
 8003050:	4b2d      	ldr	r3, [pc, #180]	@ (8003108 <flight_algorithm_update+0x238>)
 8003052:	2201      	movs	r2, #1
 8003054:	701a      	strb	r2, [r3, #0]
                    deployed_velocity = 0;
 8003056:	4b2e      	ldr	r3, [pc, #184]	@ (8003110 <flight_algorithm_update+0x240>)
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]
                    deploy_drogue_parachute();
 800305c:	f000 f8cc 	bl	80031f8 <deploy_drogue_parachute>
                if (apogee_counter >= 9) {  // Confirm apogee after 5 consecutive samples
 8003060:	e002      	b.n	8003068 <flight_algorithm_update+0x198>
                }
            } else {
                apogee_counter = 0;
 8003062:	4b2c      	ldr	r3, [pc, #176]	@ (8003114 <flight_algorithm_update+0x244>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
            }
            prev_velocity = sensor_fusion->velocity;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	4a27      	ldr	r2, [pc, #156]	@ (800310c <flight_algorithm_update+0x23c>)
 800306e:	6013      	str	r3, [r2, #0]

            // Deploy main parachute at designated altitude
            if (drogue_deployed && bme->altitude < main_chute_altitude) {
 8003070:	4b25      	ldr	r3, [pc, #148]	@ (8003108 <flight_algorithm_update+0x238>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d027      	beq.n	80030c8 <flight_algorithm_update+0x1f8>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	ed93 7a08 	vldr	s14, [r3, #32]
 800307e:	4b26      	ldr	r3, [pc, #152]	@ (8003118 <flight_algorithm_update+0x248>)
 8003080:	edd3 7a00 	vldr	s15, [r3]
 8003084:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308c:	d400      	bmi.n	8003090 <flight_algorithm_update+0x1c0>
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
                main_deployed = 1;
                drogue_deployed = 0;
                deploy_main_parachute();
            }
            break;
 800308e:	e01b      	b.n	80030c8 <flight_algorithm_update+0x1f8>
                current_phase = PHASE_MAIN_DESCENT;
 8003090:	4b13      	ldr	r3, [pc, #76]	@ (80030e0 <flight_algorithm_update+0x210>)
 8003092:	2203      	movs	r2, #3
 8003094:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0040; // Set Bit 6: Rocket altitude below specified altitude
 8003096:	4b16      	ldr	r3, [pc, #88]	@ (80030f0 <flight_algorithm_update+0x220>)
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800309e:	b29a      	uxth	r2, r3
 80030a0:	4b13      	ldr	r3, [pc, #76]	@ (80030f0 <flight_algorithm_update+0x220>)
 80030a2:	801a      	strh	r2, [r3, #0]
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
 80030a4:	4b12      	ldr	r3, [pc, #72]	@ (80030f0 <flight_algorithm_update+0x220>)
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	4b10      	ldr	r3, [pc, #64]	@ (80030f0 <flight_algorithm_update+0x220>)
 80030b0:	801a      	strh	r2, [r3, #0]
                main_deployed = 1;
 80030b2:	4b1a      	ldr	r3, [pc, #104]	@ (800311c <flight_algorithm_update+0x24c>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
                drogue_deployed = 0;
 80030b8:	4b13      	ldr	r3, [pc, #76]	@ (8003108 <flight_algorithm_update+0x238>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	701a      	strb	r2, [r3, #0]
                deploy_main_parachute();
 80030be:	f000 f8f3 	bl	80032a8 <deploy_main_parachute>
            break;
 80030c2:	e001      	b.n	80030c8 <flight_algorithm_update+0x1f8>
            break;
 80030c4:	bf00      	nop
 80030c6:	e000      	b.n	80030ca <flight_algorithm_update+0x1fa>
            break;
 80030c8:	bf00      	nop

        case PHASE_LANDED:
            // No additional status bits to set after landing
            break;
    }
    deploy_parachute_update();
 80030ca:	f000 f8b1 	bl	8003230 <deploy_parachute_update>
    prev_altitude = bme->altitude;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	4a13      	ldr	r2, [pc, #76]	@ (8003120 <flight_algorithm_update+0x250>)
 80030d4:	6013      	str	r3, [r2, #0]
}
 80030d6:	bf00      	nop
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000240 	.word	0x20000240
 80030e4:	20000004 	.word	0x20000004
 80030e8:	20000241 	.word	0x20000241
 80030ec:	20000250 	.word	0x20000250
 80030f0:	2000025c 	.word	0x2000025c
 80030f4:	20000014 	.word	0x20000014
 80030f8:	20000008 	.word	0x20000008
 80030fc:	20000242 	.word	0x20000242
 8003100:	20000010 	.word	0x20000010
 8003104:	20000015 	.word	0x20000015
 8003108:	20000243 	.word	0x20000243
 800310c:	2000024c 	.word	0x2000024c
 8003110:	20000016 	.word	0x20000016
 8003114:	20000248 	.word	0x20000248
 8003118:	2000000c 	.word	0x2000000c
 800311c:	20000244 	.word	0x20000244
 8003120:	20000258 	.word	0x20000258

08003124 <calculate_total_acceleration>:

/**
 * @brief Calculate total acceleration magnitude
 */
static float calculate_total_acceleration(bmi088_struct_t* bmi)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003138:	ee27 7a27 	vmul.f32	s14, s14, s15
                 (bmi->datas.acc_y * bmi->datas.acc_y) +
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8003148:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 800314c:	ee37 7a27 	vadd.f32	s14, s14, s15
                 (bmi->datas.acc_z * bmi->datas.acc_z));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800315c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 8003160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003164:	eeb0 0a67 	vmov.f32	s0, s15
 8003168:	f00f feae 	bl	8012ec8 <sqrtf>
 800316c:	eef0 7a40 	vmov.f32	s15, s0
}
 8003170:	eeb0 0a67 	vmov.f32	s0, s15
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <flight_algorithm_get_status_bits>:

/**
 * @brief Get the current status bits
 */
uint16_t flight_algorithm_get_status_bits(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
    return status_bits;
 8003180:	4b03      	ldr	r3, [pc, #12]	@ (8003190 <flight_algorithm_get_status_bits+0x14>)
 8003182:	881b      	ldrh	r3, [r3, #0]
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	2000025c 	.word	0x2000025c

08003194 <flight_algorithm_set_parameters>:
 */
void flight_algorithm_set_parameters(float launch_accel_threshold_param,
                                   float min_arming_altitude_param,
                                   float main_chute_altitude_param,
                                   float max_angle_threshold_param)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	ed87 0a03 	vstr	s0, [r7, #12]
 800319e:	edc7 0a02 	vstr	s1, [r7, #8]
 80031a2:	ed87 1a01 	vstr	s2, [r7, #4]
 80031a6:	edc7 1a00 	vstr	s3, [r7]
    launch_accel_threshold = launch_accel_threshold_param;
 80031aa:	4a09      	ldr	r2, [pc, #36]	@ (80031d0 <flight_algorithm_set_parameters+0x3c>)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6013      	str	r3, [r2, #0]
    min_arming_altitude = min_arming_altitude_param;
 80031b0:	4a08      	ldr	r2, [pc, #32]	@ (80031d4 <flight_algorithm_set_parameters+0x40>)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	6013      	str	r3, [r2, #0]
    main_chute_altitude = main_chute_altitude_param;
 80031b6:	4a08      	ldr	r2, [pc, #32]	@ (80031d8 <flight_algorithm_set_parameters+0x44>)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6013      	str	r3, [r2, #0]
    max_angle_threshold = max_angle_threshold_param;
 80031bc:	4a07      	ldr	r2, [pc, #28]	@ (80031dc <flight_algorithm_set_parameters+0x48>)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6013      	str	r3, [r2, #0]
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000004 	.word	0x20000004
 80031d4:	20000008 	.word	0x20000008
 80031d8:	2000000c 	.word	0x2000000c
 80031dc:	20000010 	.word	0x20000010

080031e0 <flight_algorithm_get_start_time>:

uint32_t flight_algorithm_get_start_time(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
    return flight_start_time;
 80031e4:	4b03      	ldr	r3, [pc, #12]	@ (80031f4 <flight_algorithm_get_start_time+0x14>)
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000250 	.word	0x20000250

080031f8 <deploy_drogue_parachute>:

void deploy_drogue_parachute(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
    if (!drogue_pulse_active) {
 80031fc:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <deploy_drogue_parachute+0x2c>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10c      	bne.n	800321e <deploy_drogue_parachute+0x26>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8003204:	2201      	movs	r2, #1
 8003206:	2140      	movs	r1, #64	@ 0x40
 8003208:	4807      	ldr	r0, [pc, #28]	@ (8003228 <deploy_drogue_parachute+0x30>)
 800320a:	f007 f83d 	bl	800a288 <HAL_GPIO_WritePin>
        drogue_pulse_start_time = HAL_GetTick();
 800320e:	f005 fbff 	bl	8008a10 <HAL_GetTick>
 8003212:	4603      	mov	r3, r0
 8003214:	4a05      	ldr	r2, [pc, #20]	@ (800322c <deploy_drogue_parachute+0x34>)
 8003216:	6013      	str	r3, [r2, #0]
        drogue_pulse_active = 1;
 8003218:	4b02      	ldr	r3, [pc, #8]	@ (8003224 <deploy_drogue_parachute+0x2c>)
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]
    }
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	2000025e 	.word	0x2000025e
 8003228:	40020800 	.word	0x40020800
 800322c:	20000260 	.word	0x20000260

08003230 <deploy_parachute_update>:

void deploy_parachute_update(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
    if (drogue_pulse_active && (HAL_GetTick() - drogue_pulse_start_time >= 1000)) {
 8003234:	4b16      	ldr	r3, [pc, #88]	@ (8003290 <deploy_parachute_update+0x60>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d010      	beq.n	800325e <deploy_parachute_update+0x2e>
 800323c:	f005 fbe8 	bl	8008a10 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	4b14      	ldr	r3, [pc, #80]	@ (8003294 <deploy_parachute_update+0x64>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800324c:	d307      	bcc.n	800325e <deploy_parachute_update+0x2e>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800324e:	2200      	movs	r2, #0
 8003250:	2140      	movs	r1, #64	@ 0x40
 8003252:	4811      	ldr	r0, [pc, #68]	@ (8003298 <deploy_parachute_update+0x68>)
 8003254:	f007 f818 	bl	800a288 <HAL_GPIO_WritePin>
        drogue_pulse_active = 0;
 8003258:	4b0d      	ldr	r3, [pc, #52]	@ (8003290 <deploy_parachute_update+0x60>)
 800325a:	2200      	movs	r2, #0
 800325c:	701a      	strb	r2, [r3, #0]
    }
    if (main_pulse_active && (HAL_GetTick() - main_pulse_start_time >= 1000)) {
 800325e:	4b0f      	ldr	r3, [pc, #60]	@ (800329c <deploy_parachute_update+0x6c>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d011      	beq.n	800328a <deploy_parachute_update+0x5a>
 8003266:	f005 fbd3 	bl	8008a10 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	4b0c      	ldr	r3, [pc, #48]	@ (80032a0 <deploy_parachute_update+0x70>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003276:	d308      	bcc.n	800328a <deploy_parachute_update+0x5a>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8003278:	2200      	movs	r2, #0
 800327a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800327e:	4809      	ldr	r0, [pc, #36]	@ (80032a4 <deploy_parachute_update+0x74>)
 8003280:	f007 f802 	bl	800a288 <HAL_GPIO_WritePin>
        main_pulse_active = 0;
 8003284:	4b05      	ldr	r3, [pc, #20]	@ (800329c <deploy_parachute_update+0x6c>)
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
    }
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	2000025e 	.word	0x2000025e
 8003294:	20000260 	.word	0x20000260
 8003298:	40020800 	.word	0x40020800
 800329c:	20000264 	.word	0x20000264
 80032a0:	20000268 	.word	0x20000268
 80032a4:	40020000 	.word	0x40020000

080032a8 <deploy_main_parachute>:

void deploy_main_parachute(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
    if (!main_pulse_active) {
 80032ac:	4b09      	ldr	r3, [pc, #36]	@ (80032d4 <deploy_main_parachute+0x2c>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10d      	bne.n	80032d0 <deploy_main_parachute+0x28>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80032b4:	2201      	movs	r2, #1
 80032b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80032ba:	4807      	ldr	r0, [pc, #28]	@ (80032d8 <deploy_main_parachute+0x30>)
 80032bc:	f006 ffe4 	bl	800a288 <HAL_GPIO_WritePin>
        main_pulse_start_time = HAL_GetTick();
 80032c0:	f005 fba6 	bl	8008a10 <HAL_GetTick>
 80032c4:	4603      	mov	r3, r0
 80032c6:	4a05      	ldr	r2, [pc, #20]	@ (80032dc <deploy_main_parachute+0x34>)
 80032c8:	6013      	str	r3, [r2, #0]
        main_pulse_active = 1;
 80032ca:	4b02      	ldr	r3, [pc, #8]	@ (80032d4 <deploy_main_parachute+0x2c>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]
    }
}
 80032d0:	bf00      	nop
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20000264 	.word	0x20000264
 80032d8:	40020000 	.word	0x40020000
 80032dc:	20000268 	.word	0x20000268

080032e0 <KalmanFilter_Init>:

/**
 * @brief Initialize the Kalman filter
 * @param kf Pointer to Kalman filter structure
 */
void KalmanFilter_Init(KalmanFilter_t *kf) {
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
    // Initialize state vector
    kf->x[0] = 0.0f;  // Altitude
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f04f 0200 	mov.w	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
    kf->x[1] = 0.0f;  // Velocity
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	605a      	str	r2, [r3, #4]
    kf->x[2] = 0.0f;  // Acceleration
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	609a      	str	r2, [r3, #8]

    // Initialize covariance matrix with initial uncertainty
    for (int i = 0; i < 3; i++) {
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	e01f      	b.n	8003346 <KalmanFilter_Init+0x66>
        for (int j = 0; j < 3; j++) {
 8003306:	2300      	movs	r3, #0
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	e016      	b.n	800333a <KalmanFilter_Init+0x5a>
            kf->P[i][j] = (i == j) ? 100.0f : 0.0f;
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	429a      	cmp	r2, r3
 8003312:	d101      	bne.n	8003318 <KalmanFilter_Init+0x38>
 8003314:	491b      	ldr	r1, [pc, #108]	@ (8003384 <KalmanFilter_Init+0xa4>)
 8003316:	e001      	b.n	800331c <KalmanFilter_Init+0x3c>
 8003318:	f04f 0100 	mov.w	r1, #0
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4613      	mov	r3, r2
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	4413      	add	r3, r2
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	4413      	add	r3, r2
 800332a:	3302      	adds	r3, #2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4403      	add	r3, r0
 8003330:	3304      	adds	r3, #4
 8003332:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 3; j++) {
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	3301      	adds	r3, #1
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b02      	cmp	r3, #2
 800333e:	dde5      	ble.n	800330c <KalmanFilter_Init+0x2c>
    for (int i = 0; i < 3; i++) {
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	3301      	adds	r3, #1
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b02      	cmp	r3, #2
 800334a:	dddc      	ble.n	8003306 <KalmanFilter_Init+0x26>
        }
    }

    // Set noise parameters - these can be tuned
    kf->process_noise = 0.01f;         // Process noise
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a0e      	ldr	r2, [pc, #56]	@ (8003388 <KalmanFilter_Init+0xa8>)
 8003350:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->measurement_noise_alt = 0.005f;  // Altitude measurement noise
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a0d      	ldr	r2, [pc, #52]	@ (800338c <KalmanFilter_Init+0xac>)
 8003356:	635a      	str	r2, [r3, #52]	@ 0x34
    kf->measurement_noise_acc = 5.0f;  // Acceleration measurement noise
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a0d      	ldr	r2, [pc, #52]	@ (8003390 <KalmanFilter_Init+0xb0>)
 800335c:	639a      	str	r2, [r3, #56]	@ 0x38

    // Initialize apogee detection variables
    kf->apogee_detected = 0;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	63da      	str	r2, [r3, #60]	@ 0x3c
    kf->apogee_counter = 0;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	641a      	str	r2, [r3, #64]	@ 0x40
    kf->prev_velocity = 0.0f;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	645a      	str	r2, [r3, #68]	@ 0x44

    // Mach transition control
    kf->in_mach_transition = 0;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	42c80000 	.word	0x42c80000
 8003388:	3c23d70a 	.word	0x3c23d70a
 800338c:	3ba3d70a 	.word	0x3ba3d70a
 8003390:	40a00000 	.word	0x40a00000

08003394 <KalmanFilter_Update>:
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 * @param dt Time step (seconds)
 * @return Filtered altitude
 */
float KalmanFilter_Update(KalmanFilter_t *kf, float altitude, float accel, float dt) {
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	ed87 0a02 	vstr	s0, [r7, #8]
 80033a0:	edc7 0a01 	vstr	s1, [r7, #4]
 80033a4:	ed87 1a00 	vstr	s2, [r7]
    // Check for Mach transition region (approximately 300-350 m/s)
    // Skip barometer readings in this region due to pressure anomalies
    if (fabsf(kf->x[1]) > 300.0f && fabsf(kf->x[1]) < 350.0f) {
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80033ae:	eef0 7ae7 	vabs.f32	s15, s15
 80033b2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003418 <KalmanFilter_Update+0x84>
 80033b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033be:	dd0f      	ble.n	80033e0 <KalmanFilter_Update+0x4c>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80033c6:	eef0 7ae7 	vabs.f32	s15, s15
 80033ca:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800341c <KalmanFilter_Update+0x88>
 80033ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d6:	d503      	bpl.n	80033e0 <KalmanFilter_Update+0x4c>
        kf->in_mach_transition = 1;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	649a      	str	r2, [r3, #72]	@ 0x48
 80033de:	e002      	b.n	80033e6 <KalmanFilter_Update+0x52>
    } else {
        kf->in_mach_transition = 0;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // Time update (prediction)
    KalmanFilter_TimeUpdate(kf, dt);
 80033e6:	ed97 0a00 	vldr	s0, [r7]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f818 	bl	8003420 <KalmanFilter_TimeUpdate>

    // Measurement update (correction)
    KalmanFilter_MeasurementUpdate(kf, altitude, accel);
 80033f0:	edd7 0a01 	vldr	s1, [r7, #4]
 80033f4:	ed97 0a02 	vldr	s0, [r7, #8]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 fa1d 	bl	8003838 <KalmanFilter_MeasurementUpdate>

    // Check for apogee
    KalmanFilter_DetectApogee(kf);
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f001 f96a 	bl	80046d8 <KalmanFilter_DetectApogee>

    // Return filtered altitude
    return kf->x[0];
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	ee07 3a90 	vmov	s15, r3
}
 800340c:	eeb0 0a67 	vmov.f32	s0, s15
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	43960000 	.word	0x43960000
 800341c:	43af0000 	.word	0x43af0000

08003420 <KalmanFilter_TimeUpdate>:
/**
 * @brief Time update step of Kalman filter (prediction)
 * @param kf Pointer to Kalman filter structure
 * @param dt Time step (seconds)
 */
static void KalmanFilter_TimeUpdate(KalmanFilter_t *kf, float dt) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b0b6      	sub	sp, #216	@ 0xd8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	ed87 0a00 	vstr	s0, [r7]
    float dt2 = dt * dt;
 800342c:	edd7 7a00 	vldr	s15, [r7]
 8003430:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003434:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
    float dt3 = dt2 * dt;
 8003438:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800343c:	edd7 7a00 	vldr	s15, [r7]
 8003440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003444:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
    float dt4 = dt2 * dt2;
 8003448:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800344c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003450:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac

    // State transition matrix F = [1 dt dt²/2; 0 1 dt; 0 0 1]
    // State prediction: x = F*x
    float x0_new = kf->x[0] + kf->x[1] * dt + kf->x[2] * dt2 / 2.0f;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	ed93 7a00 	vldr	s14, [r3]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003460:	edd7 7a00 	vldr	s15, [r7]
 8003464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003468:	ee37 7a27 	vadd.f32	s14, s14, s15
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003472:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003476:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800347a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800347e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003486:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
    float x1_new = kf->x[1] + kf->x[2] * dt;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	edd3 6a02 	vldr	s13, [r3, #8]
 8003496:	edd7 7a00 	vldr	s15, [r7]
 800349a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800349e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034a2:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
    float x2_new = kf->x[2];  // Acceleration assumed constant
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    kf->x[0] = x0_new;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80034b4:	601a      	str	r2, [r3, #0]
    kf->x[1] = x1_new;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80034bc:	605a      	str	r2, [r3, #4]
    kf->x[2] = x2_new;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80034c4:	609a      	str	r2, [r3, #8]

    // Process noise covariance Q
    float q = kf->process_noise;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    float Q[3][3] = {
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80034ce:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80034d2:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80034d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80034da:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80034de:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80034e2:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80034e6:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80034ea:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80034ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80034f2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80034f6:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80034fa:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80034fe:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003502:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003506:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800350a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800350e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003512:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
        {dt3/2.0f * q, dt2 * q, dt * q},
 8003516:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800351a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800351e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003522:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003526:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800352a:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
        {dt3/2.0f * q, dt2 * q, dt * q},
 800352e:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003532:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003536:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800353a:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
        {dt3/2.0f * q, dt2 * q, dt * q},
 800353e:	ed97 7a00 	vldr	s14, [r7]
 8003542:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003546:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800354a:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
        {dt2/2.0f * q, dt * q, q}
 800354e:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003552:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003556:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800355a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800355e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003562:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
        {dt2/2.0f * q, dt * q, q}
 8003566:	ed97 7a00 	vldr	s14, [r7]
 800356a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800356e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003572:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 8003576:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800357a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    };

    // State transition matrix F
    float F[3][3] = {
 800357e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003582:	657b      	str	r3, [r7, #84]	@ 0x54
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	65bb      	str	r3, [r7, #88]	@ 0x58
        {1.0f, dt, dt2/2.0f},
 8003588:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800358c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003590:	eec7 7a26 	vdiv.f32	s15, s14, s13
    float F[3][3] = {
 8003594:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	663b      	str	r3, [r7, #96]	@ 0x60
 800359e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80035a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80035b4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80035b8:	677b      	str	r3, [r7, #116]	@ 0x74
        {0.0f, 1.0f, dt},
        {0.0f, 0.0f, 1.0f}
    };

    // Temporary matrices for calculation
    float FP[3][3] = {0};
 80035ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80035be:	2224      	movs	r2, #36	@ 0x24
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f00c fb78 	bl	800fcb8 <memset>
    float FPFT[3][3] = {0};
 80035c8:	f107 030c 	add.w	r3, r7, #12
 80035cc:	2224      	movs	r2, #36	@ 0x24
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f00c fb71 	bl	800fcb8 <memset>

    // P = F*P*F' + Q
    // Step 1: FP = F*P
    for (int i = 0; i < 3; i++) {
 80035d6:	2300      	movs	r3, #0
 80035d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80035dc:	e06a      	b.n	80036b4 <KalmanFilter_TimeUpdate+0x294>
        for (int j = 0; j < 3; j++) {
 80035de:	2300      	movs	r3, #0
 80035e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035e4:	e05d      	b.n	80036a2 <KalmanFilter_TimeUpdate+0x282>
            FP[i][j] = 0.0f;
 80035e6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80035ea:	4613      	mov	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4413      	add	r3, r2
 80035f0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	33d8      	adds	r3, #216	@ 0xd8
 80035fa:	443b      	add	r3, r7
 80035fc:	3ba8      	subs	r3, #168	@ 0xa8
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 8003604:	2300      	movs	r3, #0
 8003606:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800360a:	e041      	b.n	8003690 <KalmanFilter_TimeUpdate+0x270>
                FP[i][j] += F[i][k] * kf->P[k][j];
 800360c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003610:	4613      	mov	r3, r2
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	4413      	add	r3, r2
 8003616:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	33d8      	adds	r3, #216	@ 0xd8
 8003620:	443b      	add	r3, r7
 8003622:	3ba8      	subs	r3, #168	@ 0xa8
 8003624:	ed93 7a00 	vldr	s14, [r3]
 8003628:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	33d8      	adds	r3, #216	@ 0xd8
 800363c:	443b      	add	r3, r7
 800363e:	3b84      	subs	r3, #132	@ 0x84
 8003640:	edd3 6a00 	vldr	s13, [r3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800364a:	4613      	mov	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4413      	add	r3, r2
 8003650:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003654:	4413      	add	r3, r2
 8003656:	3302      	adds	r3, #2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	3304      	adds	r3, #4
 800365e:	edd3 7a00 	vldr	s15, [r3]
 8003662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800366a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800366e:	4613      	mov	r3, r2
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	4413      	add	r3, r2
 8003674:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	33d8      	adds	r3, #216	@ 0xd8
 800367e:	443b      	add	r3, r7
 8003680:	3ba8      	subs	r3, #168	@ 0xa8
 8003682:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 8003686:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800368a:	3301      	adds	r3, #1
 800368c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003690:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003694:	2b02      	cmp	r3, #2
 8003696:	ddb9      	ble.n	800360c <KalmanFilter_TimeUpdate+0x1ec>
        for (int j = 0; j < 3; j++) {
 8003698:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800369c:	3301      	adds	r3, #1
 800369e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	dd9d      	ble.n	80035e6 <KalmanFilter_TimeUpdate+0x1c6>
    for (int i = 0; i < 3; i++) {
 80036aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036ae:	3301      	adds	r3, #1
 80036b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80036b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	dd90      	ble.n	80035de <KalmanFilter_TimeUpdate+0x1be>
            }
        }
    }

    // Step 2: FPFT = FP*F'
    for (int i = 0; i < 3; i++) {
 80036bc:	2300      	movs	r3, #0
 80036be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036c2:	e069      	b.n	8003798 <KalmanFilter_TimeUpdate+0x378>
        for (int j = 0; j < 3; j++) {
 80036c4:	2300      	movs	r3, #0
 80036c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036ca:	e05c      	b.n	8003786 <KalmanFilter_TimeUpdate+0x366>
            FPFT[i][j] = 0.0f;
 80036cc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80036d0:	4613      	mov	r3, r2
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	4413      	add	r3, r2
 80036d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	33d8      	adds	r3, #216	@ 0xd8
 80036e0:	443b      	add	r3, r7
 80036e2:	3bcc      	subs	r3, #204	@ 0xcc
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 80036ea:	2300      	movs	r3, #0
 80036ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036f0:	e040      	b.n	8003774 <KalmanFilter_TimeUpdate+0x354>
                FPFT[i][j] += FP[i][k] * F[j][k];  // F'[k][j] = F[j][k]
 80036f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80036f6:	4613      	mov	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4413      	add	r3, r2
 80036fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	33d8      	adds	r3, #216	@ 0xd8
 8003706:	443b      	add	r3, r7
 8003708:	3bcc      	subs	r3, #204	@ 0xcc
 800370a:	ed93 7a00 	vldr	s14, [r3]
 800370e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003712:	4613      	mov	r3, r2
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	4413      	add	r3, r2
 8003718:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	33d8      	adds	r3, #216	@ 0xd8
 8003722:	443b      	add	r3, r7
 8003724:	3ba8      	subs	r3, #168	@ 0xa8
 8003726:	edd3 6a00 	vldr	s13, [r3]
 800372a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800372e:	4613      	mov	r3, r2
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	4413      	add	r3, r2
 8003734:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	33d8      	adds	r3, #216	@ 0xd8
 800373e:	443b      	add	r3, r7
 8003740:	3b84      	subs	r3, #132	@ 0x84
 8003742:	edd3 7a00 	vldr	s15, [r3]
 8003746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800374a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800374e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800375c:	4413      	add	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	33d8      	adds	r3, #216	@ 0xd8
 8003762:	443b      	add	r3, r7
 8003764:	3bcc      	subs	r3, #204	@ 0xcc
 8003766:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 800376a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800376e:	3301      	adds	r3, #1
 8003770:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003774:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003778:	2b02      	cmp	r3, #2
 800377a:	ddba      	ble.n	80036f2 <KalmanFilter_TimeUpdate+0x2d2>
        for (int j = 0; j < 3; j++) {
 800377c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003780:	3301      	adds	r3, #1
 8003782:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003786:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800378a:	2b02      	cmp	r3, #2
 800378c:	dd9e      	ble.n	80036cc <KalmanFilter_TimeUpdate+0x2ac>
    for (int i = 0; i < 3; i++) {
 800378e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003792:	3301      	adds	r3, #1
 8003794:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003798:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800379c:	2b02      	cmp	r3, #2
 800379e:	dd91      	ble.n	80036c4 <KalmanFilter_TimeUpdate+0x2a4>
            }
        }
    }

    // Step 3: P = FPFT + Q
    for (int i = 0; i < 3; i++) {
 80037a0:	2300      	movs	r3, #0
 80037a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80037a6:	e03e      	b.n	8003826 <KalmanFilter_TimeUpdate+0x406>
        for (int j = 0; j < 3; j++) {
 80037a8:	2300      	movs	r3, #0
 80037aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037ae:	e031      	b.n	8003814 <KalmanFilter_TimeUpdate+0x3f4>
            kf->P[i][j] = FPFT[i][j] + Q[i][j];
 80037b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80037b4:	4613      	mov	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	4413      	add	r3, r2
 80037ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	33d8      	adds	r3, #216	@ 0xd8
 80037c4:	443b      	add	r3, r7
 80037c6:	3bcc      	subs	r3, #204	@ 0xcc
 80037c8:	ed93 7a00 	vldr	s14, [r3]
 80037cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80037d0:	4613      	mov	r3, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4413      	add	r3, r2
 80037d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	33d8      	adds	r3, #216	@ 0xd8
 80037e0:	443b      	add	r3, r7
 80037e2:	3b60      	subs	r3, #96	@ 0x60
 80037e4:	edd3 7a00 	vldr	s15, [r3]
 80037e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80037f2:	4613      	mov	r3, r2
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4413      	add	r3, r2
 80037f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037fc:	4413      	add	r3, r2
 80037fe:	3302      	adds	r3, #2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	3304      	adds	r3, #4
 8003806:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 800380a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800380e:	3301      	adds	r3, #1
 8003810:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003814:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003818:	2b02      	cmp	r3, #2
 800381a:	ddc9      	ble.n	80037b0 <KalmanFilter_TimeUpdate+0x390>
    for (int i = 0; i < 3; i++) {
 800381c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003820:	3301      	adds	r3, #1
 8003822:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003826:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800382a:	2b02      	cmp	r3, #2
 800382c:	ddbc      	ble.n	80037a8 <KalmanFilter_TimeUpdate+0x388>
        }
    }
}
 800382e:	bf00      	nop
 8003830:	bf00      	nop
 8003832:	37d8      	adds	r7, #216	@ 0xd8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <KalmanFilter_MeasurementUpdate>:
 * @brief Measurement update step of Kalman filter (correction)
 * @param kf Pointer to Kalman filter structure
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 */
static void KalmanFilter_MeasurementUpdate(KalmanFilter_t *kf, float altitude, float accel) {
 8003838:	b5b0      	push	{r4, r5, r7, lr}
 800383a:	b0f6      	sub	sp, #472	@ 0x1d8
 800383c:	af00      	add	r7, sp, #0
 800383e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003842:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003846:	6018      	str	r0, [r3, #0]
 8003848:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800384c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003850:	ed83 0a00 	vstr	s0, [r3]
 8003854:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003858:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800385c:	edc3 0a00 	vstr	s1, [r3]
    // In Mach transition region, only use acceleration measurement
    if (kf->in_mach_transition) {
 8003860:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003864:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 826b 	beq.w	8003d48 <KalmanFilter_MeasurementUpdate+0x510>
        // Only use acceleration measurement
        // H = [0 0 1]
        float H[1][3] = {{0.0f, 0.0f, 1.0f}};
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003882:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003886:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
        float z = accel;
 800388a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800388e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
        float y = z - kf->x[2];  // Innovation
 8003898:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800389c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80038a6:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 80038aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038ae:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c

        // S = H*P*H' + R
        float HP[1][3] = {0};
 80038b2:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	605a      	str	r2, [r3, #4]
 80038bc:	609a      	str	r2, [r3, #8]
        float S = 0.0f;
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

        for (int i = 0; i < 3; i++) {
 80038c6:	2300      	movs	r3, #0
 80038c8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80038cc:	e044      	b.n	8003958 <KalmanFilter_MeasurementUpdate+0x120>
            HP[0][i] = H[0][0]*kf->P[0][i] + H[0][1]*kf->P[1][i] + H[0][2]*kf->P[2][i];
 80038ce:	ed97 7a4e 	vldr	s14, [r7, #312]	@ 0x138
 80038d2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038d6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80038e0:	3302      	adds	r3, #2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	3304      	adds	r3, #4
 80038e8:	edd3 7a00 	vldr	s15, [r3]
 80038ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038f0:	edd7 6a4f 	vldr	s13, [r7, #316]	@ 0x13c
 80038f4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038f8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003902:	3305      	adds	r3, #5
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	3304      	adds	r3, #4
 800390a:	edd3 7a00 	vldr	s15, [r3]
 800390e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003912:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003916:	edd7 6a50 	vldr	s13, [r7, #320]	@ 0x140
 800391a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800391e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003928:	3308      	adds	r3, #8
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	3304      	adds	r3, #4
 8003930:	edd3 7a00 	vldr	s15, [r3]
 8003934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800393c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003946:	443b      	add	r3, r7
 8003948:	3bac      	subs	r3, #172	@ 0xac
 800394a:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 800394e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003952:	3301      	adds	r3, #1
 8003954:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8003958:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800395c:	2b02      	cmp	r3, #2
 800395e:	ddb6      	ble.n	80038ce <KalmanFilter_MeasurementUpdate+0x96>
        }

        S = HP[0][0]*H[0][0] + HP[0][1]*H[0][1] + HP[0][2]*H[0][2] + kf->measurement_noise_acc;
 8003960:	ed97 7a4b 	vldr	s14, [r7, #300]	@ 0x12c
 8003964:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 8003968:	ee27 7a27 	vmul.f32	s14, s14, s15
 800396c:	edd7 6a4c 	vldr	s13, [r7, #304]	@ 0x130
 8003970:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 8003974:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003978:	ee37 7a27 	vadd.f32	s14, s14, s15
 800397c:	edd7 6a4d 	vldr	s13, [r7, #308]	@ 0x134
 8003980:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8003984:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003988:	ee37 7a27 	vadd.f32	s14, s14, s15
 800398c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003990:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800399a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800399e:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148

        // K = P*H'*S^-1
        float K[3] = {0};
 80039a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	605a      	str	r2, [r3, #4]
 80039ac:	609a      	str	r2, [r3, #8]
        float S_inv = 1.0f / S;
 80039ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039b2:	ed97 7a52 	vldr	s14, [r7, #328]	@ 0x148
 80039b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ba:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144

        for (int i = 0; i < 3; i++) {
 80039be:	2300      	movs	r3, #0
 80039c0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80039c4:	e04f      	b.n	8003a66 <KalmanFilter_MeasurementUpdate+0x22e>
            K[i] = (kf->P[i][0]*H[0][0] + kf->P[i][1]*H[0][1] + kf->P[i][2]*H[0][2]) * S_inv;
 80039c6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039ca:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80039ce:	6819      	ldr	r1, [r3, #0]
 80039d0:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80039d4:	4613      	mov	r3, r2
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	330c      	adds	r3, #12
 80039e0:	ed93 7a00 	vldr	s14, [r3]
 80039e4:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 80039e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039ec:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039f0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80039f4:	6819      	ldr	r1, [r3, #0]
 80039f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	4613      	mov	r3, r2
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	3304      	adds	r3, #4
 8003a08:	edd3 6a00 	vldr	s13, [r3]
 8003a0c:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 8003a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a18:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a1c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003a20:	6819      	ldr	r1, [r3, #0]
 8003a22:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8003a26:	4613      	mov	r3, r2
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	3314      	adds	r3, #20
 8003a32:	edd3 6a00 	vldr	s13, [r3]
 8003a36:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8003a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a42:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 8003a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a4a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003a54:	443b      	add	r3, r7
 8003a56:	3bb8      	subs	r3, #184	@ 0xb8
 8003a58:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003a5c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003a60:	3301      	adds	r3, #1
 8003a62:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003a66:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	ddab      	ble.n	80039c6 <KalmanFilter_MeasurementUpdate+0x18e>
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003a74:	e029      	b.n	8003aca <KalmanFilter_MeasurementUpdate+0x292>
            kf->x[i] += K[i] * y;
 8003a76:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a7a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	ed93 7a00 	vldr	s14, [r3]
 8003a8c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003a96:	443b      	add	r3, r7
 8003a98:	3bb8      	subs	r3, #184	@ 0xb8
 8003a9a:	edd3 6a00 	vldr	s13, [r3]
 8003a9e:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 8003aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aaa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003aae:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003ac0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003aca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	ddd1      	ble.n	8003a76 <KalmanFilter_MeasurementUpdate+0x23e>
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 8003ad2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ad6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003ada:	4618      	mov	r0, r3
 8003adc:	2324      	movs	r3, #36	@ 0x24
 8003ade:	461a      	mov	r2, r3
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	f00c f8e9 	bl	800fcb8 <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 8003ae6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003aea:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8003aee:	4618      	mov	r0, r3
 8003af0:	2324      	movs	r3, #36	@ 0x24
 8003af2:	461a      	mov	r2, r3
 8003af4:	2100      	movs	r1, #0
 8003af6:	f00c f8df 	bl	800fcb8 <memset>

        for (int i = 0; i < 3; i++) {
 8003afa:	2300      	movs	r3, #0
 8003afc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003b00:	e062      	b.n	8003bc8 <KalmanFilter_MeasurementUpdate+0x390>
            for (int j = 0; j < 3; j++) {
 8003b02:	2300      	movs	r3, #0
 8003b04:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003b08:	e055      	b.n	8003bb6 <KalmanFilter_MeasurementUpdate+0x37e>
                KH[i][j] = K[i] * H[0][j];
 8003b0a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003b14:	443b      	add	r3, r7
 8003b16:	3bb8      	subs	r3, #184	@ 0xb8
 8003b18:	ed93 7a00 	vldr	s14, [r3]
 8003b1c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003b26:	443b      	add	r3, r7
 8003b28:	3ba0      	subs	r3, #160	@ 0xa0
 8003b2a:	edd3 7a00 	vldr	s15, [r3]
 8003b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b32:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b36:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003b3a:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003b3e:	4613      	mov	r3, r2
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	4413      	add	r3, r2
 8003b44:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	edc3 7a00 	vstr	s15, [r3]
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 8003b52:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003b56:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d102      	bne.n	8003b64 <KalmanFilter_MeasurementUpdate+0x32c>
 8003b5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b62:	e001      	b.n	8003b68 <KalmanFilter_MeasurementUpdate+0x330>
 8003b64:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8003e54 <KalmanFilter_MeasurementUpdate+0x61c>
 8003b68:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b6c:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003b70:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003b74:	4613      	mov	r3, r2
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	4413      	add	r3, r2
 8003b7a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	edd3 7a00 	vldr	s15, [r3]
 8003b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b8c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b90:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003b94:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003b98:	4613      	mov	r3, r2
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8003bac:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003bb6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	dda5      	ble.n	8003b0a <KalmanFilter_MeasurementUpdate+0x2d2>
        for (int i = 0; i < 3; i++) {
 8003bbe:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003bc8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	dd98      	ble.n	8003b02 <KalmanFilter_MeasurementUpdate+0x2ca>
            }
        }

        for (int i = 0; i < 3; i++) {
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003bd6:	e076      	b.n	8003cc6 <KalmanFilter_MeasurementUpdate+0x48e>
            for (int j = 0; j < 3; j++) {
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003bde:	e069      	b.n	8003cb4 <KalmanFilter_MeasurementUpdate+0x47c>
                Pnew[i][j] = 0.0f;
 8003be0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003be4:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003be8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003bec:	4613      	mov	r3, r2
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003c02:	2300      	movs	r3, #0
 8003c04:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003c08:	e04b      	b.n	8003ca2 <KalmanFilter_MeasurementUpdate+0x46a>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 8003c0a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c0e:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003c12:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003c16:	4613      	mov	r3, r2
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	ed93 7a00 	vldr	s14, [r3]
 8003c2a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c2e:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003c32:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003c36:	4613      	mov	r3, r2
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	edd3 6a00 	vldr	s13, [r3]
 8003c4a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c4e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003c52:	6819      	ldr	r1, [r3, #0]
 8003c54:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003c58:	4613      	mov	r3, r2
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003c62:	4413      	add	r3, r2
 8003c64:	3302      	adds	r3, #2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	edd3 7a00 	vldr	s15, [r3]
 8003c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c78:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c7c:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003c80:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003c84:	4613      	mov	r3, r2
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	4413      	add	r3, r2
 8003c8a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003c98:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003ca2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	ddaf      	ble.n	8003c0a <KalmanFilter_MeasurementUpdate+0x3d2>
            for (int j = 0; j < 3; j++) {
 8003caa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003cae:	3301      	adds	r3, #1
 8003cb0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003cb4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	dd91      	ble.n	8003be0 <KalmanFilter_MeasurementUpdate+0x3a8>
        for (int i = 0; i < 3; i++) {
 8003cbc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003cc6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	dd84      	ble.n	8003bd8 <KalmanFilter_MeasurementUpdate+0x3a0>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003cd4:	e032      	b.n	8003d3c <KalmanFilter_MeasurementUpdate+0x504>
            for (int j = 0; j < 3; j++) {
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003cdc:	e025      	b.n	8003d2a <KalmanFilter_MeasurementUpdate+0x4f2>
                kf->P[i][j] = Pnew[i][j];
 8003cde:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ce2:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003ce6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003cea:	4613      	mov	r3, r2
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	4413      	add	r3, r2
 8003cf0:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	6819      	ldr	r1, [r3, #0]
 8003cfc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d00:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	4413      	add	r3, r2
 8003d10:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003d14:	4413      	add	r3, r2
 8003d16:	3302      	adds	r3, #2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4403      	add	r3, r0
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 8003d20:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003d24:	3301      	adds	r3, #1
 8003d26:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003d2a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	ddd5      	ble.n	8003cde <KalmanFilter_MeasurementUpdate+0x4a6>
        for (int i = 0; i < 3; i++) {
 8003d32:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003d36:	3301      	adds	r3, #1
 8003d38:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003d3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	ddc8      	ble.n	8003cd6 <KalmanFilter_MeasurementUpdate+0x49e>
 8003d44:	f000 bcc2 	b.w	80046cc <KalmanFilter_MeasurementUpdate+0xe94>
            }
        }
    } else {
        // Use both altitude and acceleration measurements
        // H = [1 0 0; 0 0 1]
        float H[2][3] = {
 8003d48:	4b43      	ldr	r3, [pc, #268]	@ (8003e58 <KalmanFilter_MeasurementUpdate+0x620>)
 8003d4a:	f507 7484 	add.w	r4, r7, #264	@ 0x108
 8003d4e:	461d      	mov	r5, r3
 8003d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003d58:	e884 0003 	stmia.w	r4, {r0, r1}
            {1.0f, 0.0f, 0.0f},
            {0.0f, 0.0f, 1.0f}
        };

        float z[2] = {altitude, accel};
 8003d5c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d60:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d6a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d6e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        float y[2] = {z[0] - kf->x[0], z[1] - kf->x[2]};  // Innovation
 8003d78:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8003d7c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d80:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	edd3 7a00 	vldr	s15, [r3]
 8003d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d8e:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
 8003d92:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8003d96:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d9a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	edd3 7a02 	vldr	s15, [r3, #8]
 8003da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003da8:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

        // S = H*P*H' + R
        float HP[2][3] = {0};
 8003dac:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	611a      	str	r2, [r3, #16]
 8003dbc:	615a      	str	r2, [r3, #20]
        float S[2][2] = {0};
 8003dbe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	2300      	movs	r3, #0
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	6053      	str	r3, [r2, #4]
 8003dce:	6093      	str	r3, [r2, #8]
 8003dd0:	60d3      	str	r3, [r2, #12]
        float R[2][2] = {
            {kf->measurement_noise_alt, 0.0f},
 8003dd2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dd6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
        float R[2][2] = {
 8003dde:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003de2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dfa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	609a      	str	r2, [r3, #8]
            {0.0f, kf->measurement_noise_acc}
 8003e04:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e08:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
        float R[2][2] = {
 8003e10:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e14:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003e18:	60da      	str	r2, [r3, #12]
        };

        for (int i = 0; i < 2; i++) {
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003e20:	e079      	b.n	8003f16 <KalmanFilter_MeasurementUpdate+0x6de>
            for (int j = 0; j < 3; j++) {
 8003e22:	2300      	movs	r3, #0
 8003e24:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003e28:	e06c      	b.n	8003f04 <KalmanFilter_MeasurementUpdate+0x6cc>
                HP[i][j] = 0.0f;
 8003e2a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003e2e:	4613      	mov	r3, r2
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	4413      	add	r3, r2
 8003e34:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003e40:	443b      	add	r3, r7
 8003e42:	3bf8      	subs	r3, #248	@ 0xf8
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003e50:	e04f      	b.n	8003ef2 <KalmanFilter_MeasurementUpdate+0x6ba>
 8003e52:	bf00      	nop
 8003e54:	00000000 	.word	0x00000000
 8003e58:	08015560 	.word	0x08015560
 8003e5c:	358637bd 	.word	0x358637bd
                    HP[i][j] += H[i][k] * kf->P[k][j];
 8003e60:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003e64:	4613      	mov	r3, r2
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4413      	add	r3, r2
 8003e6a:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003e76:	443b      	add	r3, r7
 8003e78:	3bf8      	subs	r3, #248	@ 0xf8
 8003e7a:	ed93 7a00 	vldr	s14, [r3]
 8003e7e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003e82:	4613      	mov	r3, r2
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	4413      	add	r3, r2
 8003e88:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003e94:	443b      	add	r3, r7
 8003e96:	3bd0      	subs	r3, #208	@ 0xd0
 8003e98:	edd3 6a00 	vldr	s13, [r3]
 8003e9c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ea0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003ea4:	6819      	ldr	r1, [r3, #0]
 8003ea6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003eaa:	4613      	mov	r3, r2
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	4413      	add	r3, r2
 8003eb0:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3302      	adds	r3, #2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	edd3 7a00 	vldr	s15, [r3]
 8003ec2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eca:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003ece:	4613      	mov	r3, r2
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003ee0:	443b      	add	r3, r7
 8003ee2:	3bf8      	subs	r3, #248	@ 0xf8
 8003ee4:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003ee8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003eec:	3301      	adds	r3, #1
 8003eee:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003ef2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	ddb2      	ble.n	8003e60 <KalmanFilter_MeasurementUpdate+0x628>
            for (int j = 0; j < 3; j++) {
 8003efa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003efe:	3301      	adds	r3, #1
 8003f00:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003f04:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	dd8e      	ble.n	8003e2a <KalmanFilter_MeasurementUpdate+0x5f2>
        for (int i = 0; i < 2; i++) {
 8003f0c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003f10:	3301      	adds	r3, #1
 8003f12:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003f16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	dd81      	ble.n	8003e22 <KalmanFilter_MeasurementUpdate+0x5ea>
                }
            }
        }

        for (int i = 0; i < 2; i++) {
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003f24:	e098      	b.n	8004058 <KalmanFilter_MeasurementUpdate+0x820>
            for (int j = 0; j < 2; j++) {
 8003f26:	2300      	movs	r3, #0
 8003f28:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003f2c:	e08a      	b.n	8004044 <KalmanFilter_MeasurementUpdate+0x80c>
                S[i][j] = 0.0f;
 8003f2e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f32:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003f36:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f3a:	0059      	lsls	r1, r3, #1
 8003f3c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003f40:	440b      	add	r3, r1
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003f52:	e042      	b.n	8003fda <KalmanFilter_MeasurementUpdate+0x7a2>
                    S[i][j] += HP[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8003f54:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f58:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003f5c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f60:	0059      	lsls	r1, r3, #1
 8003f62:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003f66:	440b      	add	r3, r1
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	ed93 7a00 	vldr	s14, [r3]
 8003f70:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8003f74:	4613      	mov	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	4413      	add	r3, r2
 8003f7a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003f86:	443b      	add	r3, r7
 8003f88:	3bf8      	subs	r3, #248	@ 0xf8
 8003f8a:	edd3 6a00 	vldr	s13, [r3]
 8003f8e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003f92:	4613      	mov	r3, r2
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	4413      	add	r3, r2
 8003f98:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003fa4:	443b      	add	r3, r7
 8003fa6:	3bd0      	subs	r3, #208	@ 0xd0
 8003fa8:	edd3 7a00 	vldr	s15, [r3]
 8003fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fb4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fb8:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003fbc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003fc0:	0059      	lsls	r1, r3, #1
 8003fc2:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003fc6:	440b      	add	r3, r1
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003fd0:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003fda:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	ddb8      	ble.n	8003f54 <KalmanFilter_MeasurementUpdate+0x71c>
                }
                S[i][j] += R[i][j];
 8003fe2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fe6:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003fea:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003fee:	0059      	lsls	r1, r3, #1
 8003ff0:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003ff4:	440b      	add	r3, r1
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	ed93 7a00 	vldr	s14, [r3]
 8003ffe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004002:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8004006:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800400a:	0059      	lsls	r1, r3, #1
 800400c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004010:	440b      	add	r3, r1
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	edd3 7a00 	vldr	s15, [r3]
 800401a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800401e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004022:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8004026:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800402a:	0059      	lsls	r1, r3, #1
 800402c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004030:	440b      	add	r3, r1
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 800403a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800403e:	3301      	adds	r3, #1
 8004040:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004044:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004048:	2b01      	cmp	r3, #1
 800404a:	f77f af70 	ble.w	8003f2e <KalmanFilter_MeasurementUpdate+0x6f6>
        for (int i = 0; i < 2; i++) {
 800404e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004052:	3301      	adds	r3, #1
 8004054:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004058:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800405c:	2b01      	cmp	r3, #1
 800405e:	f77f af62 	ble.w	8003f26 <KalmanFilter_MeasurementUpdate+0x6ee>
            }
        }

        // Calculate S^-1 (inverse of 2x2 matrix)
        float det = S[0][0] * S[1][1] - S[0][1] * S[1][0];
 8004062:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800406a:	ed93 7a00 	vldr	s14, [r3]
 800406e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004076:	edd3 7a03 	vldr	s15, [r3, #12]
 800407a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800407e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004086:	edd3 6a01 	vldr	s13, [r3, #4]
 800408a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800408e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004092:	edd3 7a02 	vldr	s15, [r3, #8]
 8004096:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800409a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800409e:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
        if (fabsf(det) < 1e-6f) {
 80040a2:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 80040a6:	eef0 7ae7 	vabs.f32	s15, s15
 80040aa:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 8003e5c <KalmanFilter_MeasurementUpdate+0x624>
 80040ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b6:	f100 8308 	bmi.w	80046ca <KalmanFilter_MeasurementUpdate+0xe92>
            // Matrix is singular, skip update
            return;
        }

        float S_inv[2][2] = {
            {S[1][1] / det, -S[0][1] / det},
 80040ba:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040c2:	edd3 6a03 	vldr	s13, [r3, #12]
 80040c6:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 80040ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 80040ce:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040d2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80040d6:	edc3 7a00 	vstr	s15, [r3]
            {S[1][1] / det, -S[0][1] / det},
 80040da:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80040e6:	eef1 6a67 	vneg.f32	s13, s15
 80040ea:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 80040ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 80040f2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80040fa:	edc3 7a01 	vstr	s15, [r3, #4]
            {-S[1][0] / det, S[0][0] / det}
 80040fe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004106:	edd3 7a02 	vldr	s15, [r3, #8]
 800410a:	eef1 6a67 	vneg.f32	s13, s15
 800410e:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8004112:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8004116:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800411a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800411e:	edc3 7a02 	vstr	s15, [r3, #8]
            {-S[1][0] / det, S[0][0] / det}
 8004122:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800412a:	edd3 6a00 	vldr	s13, [r3]
 800412e:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8004132:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8004136:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800413a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800413e:	edc3 7a03 	vstr	s15, [r3, #12]
        };

        // K = P*H'*S^-1
        float PHt[3][2] = {0};
 8004142:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004146:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800414a:	461a      	mov	r2, r3
 800414c:	2300      	movs	r3, #0
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	6053      	str	r3, [r2, #4]
 8004152:	6093      	str	r3, [r2, #8]
 8004154:	60d3      	str	r3, [r2, #12]
 8004156:	6113      	str	r3, [r2, #16]
 8004158:	6153      	str	r3, [r2, #20]
        float K[3][2] = {0};
 800415a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800415e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004162:	461a      	mov	r2, r3
 8004164:	2300      	movs	r3, #0
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	6053      	str	r3, [r2, #4]
 800416a:	6093      	str	r3, [r2, #8]
 800416c:	60d3      	str	r3, [r2, #12]
 800416e:	6113      	str	r3, [r2, #16]
 8004170:	6153      	str	r3, [r2, #20]

        for (int i = 0; i < 3; i++) {
 8004172:	2300      	movs	r3, #0
 8004174:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8004178:	e06f      	b.n	800425a <KalmanFilter_MeasurementUpdate+0xa22>
            for (int j = 0; j < 2; j++) {
 800417a:	2300      	movs	r3, #0
 800417c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8004180:	e062      	b.n	8004248 <KalmanFilter_MeasurementUpdate+0xa10>
                PHt[i][j] = 0.0f;
 8004182:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004186:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 800418a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800418e:	0059      	lsls	r1, r3, #1
 8004190:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004194:	440b      	add	r3, r1
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 80041a0:	2300      	movs	r3, #0
 80041a2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80041a6:	e046      	b.n	8004236 <KalmanFilter_MeasurementUpdate+0x9fe>
                    PHt[i][j] += kf->P[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 80041a8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041ac:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 80041b0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80041b4:	0059      	lsls	r1, r3, #1
 80041b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80041ba:	440b      	add	r3, r1
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	ed93 7a00 	vldr	s14, [r3]
 80041c4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041c8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80041cc:	6819      	ldr	r1, [r3, #0]
 80041ce:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80041d2:	4613      	mov	r3, r2
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	4413      	add	r3, r2
 80041d8:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80041dc:	4413      	add	r3, r2
 80041de:	3302      	adds	r3, #2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	3304      	adds	r3, #4
 80041e6:	edd3 6a00 	vldr	s13, [r3]
 80041ea:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 80041ee:	4613      	mov	r3, r2
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	4413      	add	r3, r2
 80041f4:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004200:	443b      	add	r3, r7
 8004202:	3bd0      	subs	r3, #208	@ 0xd0
 8004204:	edd3 7a00 	vldr	s15, [r3]
 8004208:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800420c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004210:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004214:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8004218:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800421c:	0059      	lsls	r1, r3, #1
 800421e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004222:	440b      	add	r3, r1
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 800422c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004230:	3301      	adds	r3, #1
 8004232:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8004236:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800423a:	2b02      	cmp	r3, #2
 800423c:	ddb4      	ble.n	80041a8 <KalmanFilter_MeasurementUpdate+0x970>
            for (int j = 0; j < 2; j++) {
 800423e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004242:	3301      	adds	r3, #1
 8004244:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8004248:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800424c:	2b01      	cmp	r3, #1
 800424e:	dd98      	ble.n	8004182 <KalmanFilter_MeasurementUpdate+0x94a>
        for (int i = 0; i < 3; i++) {
 8004250:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004254:	3301      	adds	r3, #1
 8004256:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800425a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800425e:	2b02      	cmp	r3, #2
 8004260:	dd8b      	ble.n	800417a <KalmanFilter_MeasurementUpdate+0x942>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8004262:	2300      	movs	r3, #0
 8004264:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004268:	e069      	b.n	800433e <KalmanFilter_MeasurementUpdate+0xb06>
            for (int j = 0; j < 2; j++) {
 800426a:	2300      	movs	r3, #0
 800426c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004270:	e05c      	b.n	800432c <KalmanFilter_MeasurementUpdate+0xaf4>
                K[i][j] = 0.0f;
 8004272:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004276:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 800427a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800427e:	0059      	lsls	r1, r3, #1
 8004280:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004284:	440b      	add	r3, r1
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 8004290:	2300      	movs	r3, #0
 8004292:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004296:	e040      	b.n	800431a <KalmanFilter_MeasurementUpdate+0xae2>
                    K[i][j] += PHt[i][k] * S_inv[k][j];
 8004298:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800429c:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80042a0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80042a4:	0059      	lsls	r1, r3, #1
 80042a6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80042aa:	440b      	add	r3, r1
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	ed93 7a00 	vldr	s14, [r3]
 80042b4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042b8:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 80042bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80042c0:	0059      	lsls	r1, r3, #1
 80042c2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80042c6:	440b      	add	r3, r1
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	edd3 6a00 	vldr	s13, [r3]
 80042d0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042d4:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 80042d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80042dc:	0059      	lsls	r1, r3, #1
 80042de:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80042e2:	440b      	add	r3, r1
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	edd3 7a00 	vldr	s15, [r3]
 80042ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042f4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042f8:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80042fc:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004300:	0059      	lsls	r1, r3, #1
 8004302:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004306:	440b      	add	r3, r1
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 8004310:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004314:	3301      	adds	r3, #1
 8004316:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800431a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800431e:	2b01      	cmp	r3, #1
 8004320:	ddba      	ble.n	8004298 <KalmanFilter_MeasurementUpdate+0xa60>
            for (int j = 0; j < 2; j++) {
 8004322:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004326:	3301      	adds	r3, #1
 8004328:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800432c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004330:	2b01      	cmp	r3, #1
 8004332:	dd9e      	ble.n	8004272 <KalmanFilter_MeasurementUpdate+0xa3a>
        for (int i = 0; i < 3; i++) {
 8004334:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004338:	3301      	adds	r3, #1
 800433a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800433e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004342:	2b02      	cmp	r3, #2
 8004344:	dd91      	ble.n	800426a <KalmanFilter_MeasurementUpdate+0xa32>
                }
            }
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 8004346:	2300      	movs	r3, #0
 8004348:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800434c:	e042      	b.n	80043d4 <KalmanFilter_MeasurementUpdate+0xb9c>
            for (int j = 0; j < 2; j++) {
 800434e:	2300      	movs	r3, #0
 8004350:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8004354:	e035      	b.n	80043c2 <KalmanFilter_MeasurementUpdate+0xb8a>
                kf->x[i] += K[i][j] * y[j];
 8004356:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800435a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	ed93 7a00 	vldr	s14, [r3]
 800436c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004370:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004374:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004378:	0059      	lsls	r1, r3, #1
 800437a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800437e:	440b      	add	r3, r1
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	edd3 6a00 	vldr	s13, [r3]
 8004388:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004392:	443b      	add	r3, r7
 8004394:	3be0      	subs	r3, #224	@ 0xe0
 8004396:	edd3 7a00 	vldr	s15, [r3]
 800439a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800439e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043a2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043a6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 80043b8:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80043bc:	3301      	adds	r3, #1
 80043be:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80043c2:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	ddc5      	ble.n	8004356 <KalmanFilter_MeasurementUpdate+0xb1e>
        for (int i = 0; i < 3; i++) {
 80043ca:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80043ce:	3301      	adds	r3, #1
 80043d0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80043d4:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80043d8:	2b02      	cmp	r3, #2
 80043da:	ddb8      	ble.n	800434e <KalmanFilter_MeasurementUpdate+0xb16>
            }
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 80043dc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043e0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80043e4:	4618      	mov	r0, r3
 80043e6:	2324      	movs	r3, #36	@ 0x24
 80043e8:	461a      	mov	r2, r3
 80043ea:	2100      	movs	r1, #0
 80043ec:	f00b fc64 	bl	800fcb8 <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 80043f0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043f4:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80043f8:	4618      	mov	r0, r3
 80043fa:	2324      	movs	r3, #36	@ 0x24
 80043fc:	461a      	mov	r2, r3
 80043fe:	2100      	movs	r1, #0
 8004400:	f00b fc5a 	bl	800fcb8 <memset>

        for (int i = 0; i < 3; i++) {
 8004404:	2300      	movs	r3, #0
 8004406:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800440a:	e09e      	b.n	800454a <KalmanFilter_MeasurementUpdate+0xd12>
            for (int j = 0; j < 3; j++) {
 800440c:	2300      	movs	r3, #0
 800440e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004412:	e090      	b.n	8004536 <KalmanFilter_MeasurementUpdate+0xcfe>
                KH[i][j] = 0.0f;
 8004414:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004418:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 800441c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004420:	4613      	mov	r3, r2
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	4413      	add	r3, r2
 8004426:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 8004436:	2300      	movs	r3, #0
 8004438:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800443c:	e045      	b.n	80044ca <KalmanFilter_MeasurementUpdate+0xc92>
                    KH[i][j] += K[i][k] * H[k][j];
 800443e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004442:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004446:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800444a:	4613      	mov	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	ed93 7a00 	vldr	s14, [r3]
 800445e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004462:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004466:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800446a:	0059      	lsls	r1, r3, #1
 800446c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004470:	440b      	add	r3, r1
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	edd3 6a00 	vldr	s13, [r3]
 800447a:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 800447e:	4613      	mov	r3, r2
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	4413      	add	r3, r2
 8004484:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004490:	443b      	add	r3, r7
 8004492:	3bd0      	subs	r3, #208	@ 0xd0
 8004494:	edd3 7a00 	vldr	s15, [r3]
 8004498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800449c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044a0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80044a4:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80044a8:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80044ac:	4613      	mov	r3, r2
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	4413      	add	r3, r2
 80044b2:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 80044c0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80044c4:	3301      	adds	r3, #1
 80044c6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80044ca:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	ddb5      	ble.n	800443e <KalmanFilter_MeasurementUpdate+0xc06>
                }
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 80044d2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80044d6:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80044da:	429a      	cmp	r2, r3
 80044dc:	d102      	bne.n	80044e4 <KalmanFilter_MeasurementUpdate+0xcac>
 80044de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044e2:	e001      	b.n	80044e8 <KalmanFilter_MeasurementUpdate+0xcb0>
 80044e4:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 80046d4 <KalmanFilter_MeasurementUpdate+0xe9c>
 80044e8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80044ec:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80044f0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80044f4:	4613      	mov	r3, r2
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4413      	add	r3, r2
 80044fa:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	edd3 7a00 	vldr	s15, [r3]
 8004508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800450c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004510:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8004514:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004518:	4613      	mov	r3, r2
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	4413      	add	r3, r2
 800451e:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 800452c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004530:	3301      	adds	r3, #1
 8004532:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004536:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800453a:	2b02      	cmp	r3, #2
 800453c:	f77f af6a 	ble.w	8004414 <KalmanFilter_MeasurementUpdate+0xbdc>
        for (int i = 0; i < 3; i++) {
 8004540:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8004544:	3301      	adds	r3, #1
 8004546:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800454a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800454e:	2b02      	cmp	r3, #2
 8004550:	f77f af5c 	ble.w	800440c <KalmanFilter_MeasurementUpdate+0xbd4>
            }
        }

        for (int i = 0; i < 3; i++) {
 8004554:	2300      	movs	r3, #0
 8004556:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800455a:	e076      	b.n	800464a <KalmanFilter_MeasurementUpdate+0xe12>
            for (int j = 0; j < 3; j++) {
 800455c:	2300      	movs	r3, #0
 800455e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8004562:	e069      	b.n	8004638 <KalmanFilter_MeasurementUpdate+0xe00>
                Pnew[i][j] = 0.0f;
 8004564:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004568:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 800456c:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004570:	4613      	mov	r3, r2
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	4413      	add	r3, r2
 8004576:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8004586:	2300      	movs	r3, #0
 8004588:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800458c:	e04b      	b.n	8004626 <KalmanFilter_MeasurementUpdate+0xdee>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 800458e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004592:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004596:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 800459a:	4613      	mov	r3, r2
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	4413      	add	r3, r2
 80045a0:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	ed93 7a00 	vldr	s14, [r3]
 80045ae:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80045b2:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 80045b6:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80045ba:	4613      	mov	r3, r2
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	4413      	add	r3, r2
 80045c0:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	edd3 6a00 	vldr	s13, [r3]
 80045ce:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80045d2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80045d6:	6819      	ldr	r1, [r3, #0]
 80045d8:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80045dc:	4613      	mov	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	4413      	add	r3, r2
 80045e2:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80045e6:	4413      	add	r3, r2
 80045e8:	3302      	adds	r3, #2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	3304      	adds	r3, #4
 80045f0:	edd3 7a00 	vldr	s15, [r3]
 80045f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045fc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004600:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004604:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004608:	4613      	mov	r3, r2
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	4413      	add	r3, r2
 800460e:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 800461c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004620:	3301      	adds	r3, #1
 8004622:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8004626:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800462a:	2b02      	cmp	r3, #2
 800462c:	ddaf      	ble.n	800458e <KalmanFilter_MeasurementUpdate+0xd56>
            for (int j = 0; j < 3; j++) {
 800462e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004632:	3301      	adds	r3, #1
 8004634:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8004638:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800463c:	2b02      	cmp	r3, #2
 800463e:	dd91      	ble.n	8004564 <KalmanFilter_MeasurementUpdate+0xd2c>
        for (int i = 0; i < 3; i++) {
 8004640:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004644:	3301      	adds	r3, #1
 8004646:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800464a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800464e:	2b02      	cmp	r3, #2
 8004650:	dd84      	ble.n	800455c <KalmanFilter_MeasurementUpdate+0xd24>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8004652:	2300      	movs	r3, #0
 8004654:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004658:	e032      	b.n	80046c0 <KalmanFilter_MeasurementUpdate+0xe88>
            for (int j = 0; j < 3; j++) {
 800465a:	2300      	movs	r3, #0
 800465c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004660:	e025      	b.n	80046ae <KalmanFilter_MeasurementUpdate+0xe76>
                kf->P[i][j] = Pnew[i][j];
 8004662:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004666:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 800466a:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 800466e:	4613      	mov	r3, r2
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	4413      	add	r3, r2
 8004674:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	6819      	ldr	r1, [r3, #0]
 8004680:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004684:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 800468e:	4613      	mov	r3, r2
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	4413      	add	r3, r2
 8004694:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8004698:	4413      	add	r3, r2
 800469a:	3302      	adds	r3, #2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4403      	add	r3, r0
 80046a0:	3304      	adds	r3, #4
 80046a2:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 80046a4:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80046a8:	3301      	adds	r3, #1
 80046aa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80046ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	ddd5      	ble.n	8004662 <KalmanFilter_MeasurementUpdate+0xe2a>
        for (int i = 0; i < 3; i++) {
 80046b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80046ba:	3301      	adds	r3, #1
 80046bc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80046c0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	ddc8      	ble.n	800465a <KalmanFilter_MeasurementUpdate+0xe22>
 80046c8:	e000      	b.n	80046cc <KalmanFilter_MeasurementUpdate+0xe94>
            return;
 80046ca:	bf00      	nop
            }
        }
    }
}
 80046cc:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bdb0      	pop	{r4, r5, r7, pc}
 80046d4:	00000000 	.word	0x00000000

080046d8 <KalmanFilter_DetectApogee>:
/**
 * @brief Detect apogee based on velocity trend
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
static int KalmanFilter_DetectApogee(KalmanFilter_t *kf) {
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
    // Velocity is negative and magnitude is increasing
	if(kf->x[2] > 30.0){


	}
    if (kf->x[1] < 0.0f && kf->x[1] < kf->prev_velocity) {
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80046e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ee:	d517      	bpl.n	8004720 <KalmanFilter_DetectApogee+0x48>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80046fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004704:	d50c      	bpl.n	8004720 <KalmanFilter_DetectApogee+0x48>
        kf->apogee_counter++;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	641a      	str	r2, [r3, #64]	@ 0x40
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004714:	2b04      	cmp	r3, #4
 8004716:	dd06      	ble.n	8004726 <KalmanFilter_DetectApogee+0x4e>
            kf->apogee_detected = 1;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	63da      	str	r2, [r3, #60]	@ 0x3c
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 800471e:	e002      	b.n	8004726 <KalmanFilter_DetectApogee+0x4e>
        }
    } else {
        kf->apogee_counter = 0;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    kf->prev_velocity = kf->x[1];
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	645a      	str	r2, [r3, #68]	@ 0x44
    return kf->apogee_detected;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <Kalman_Get_Velocity>:
float Kalman_Get_Velocity(KalmanFilter_t *kf){
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
	return kf->x[1];
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	ee07 3a90 	vmov	s15, r3
}
 800474e:	eeb0 0a67 	vmov.f32	s0, s15
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <KalmanFilter_IsApogeeDetected>:
/**
 * @brief Check if apogee has been detected
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
int KalmanFilter_IsApogeeDetected(KalmanFilter_t *kf) {
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
    return kf->apogee_detected;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <L86_GNSS_Init>:
static void get_GNRMC_data(gps_data_t *gps_data_);
static void get_GPGGA_data(gps_data_t *gps_data_);
static void format_data(gps_data_t *gps_data_);

void L86_GNSS_Init(UART_HandleTypeDef *huart_gnss_)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
	huart_gnss = huart_gnss_;
 800477c:	4a07      	ldr	r2, [pc, #28]	@ (800479c <L86_GNSS_Init+0x28>)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(huart_gnss, (uint8_t *)gnss_rx_buffer, BUFFER_SIZE * 2);
 8004782:	4b06      	ldr	r3, [pc, #24]	@ (800479c <L86_GNSS_Init+0x28>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 800478a:	4905      	ldr	r1, [pc, #20]	@ (80047a0 <L86_GNSS_Init+0x2c>)
 800478c:	4618      	mov	r0, r3
 800478e:	f008 f9b1 	bl	800caf4 <HAL_UART_Receive_DMA>
}
 8004792:	bf00      	nop
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	2000026c 	.word	0x2000026c
 80047a0:	20000270 	.word	0x20000270

080047a4 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 80047ac:	4b06      	ldr	r3, [pc, #24]	@ (80047c8 <HAL_UART_RxHalfCpltCallback+0x24>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d104      	bne.n	80047c0 <HAL_UART_RxHalfCpltCallback+0x1c>
	{
		process_data(gnss_rx_buffer, BUFFER_SIZE);
 80047b6:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80047ba:	4804      	ldr	r0, [pc, #16]	@ (80047cc <HAL_UART_RxHalfCpltCallback+0x28>)
 80047bc:	f000 f830 	bl	8004820 <process_data>
	}
}
 80047c0:	bf00      	nop
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	2000026c 	.word	0x2000026c
 80047cc:	20000270 	.word	0x20000270

080047d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 80047d8:	4b06      	ldr	r3, [pc, #24]	@ (80047f4 <HAL_UART_RxCpltCallback+0x24>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d104      	bne.n	80047ec <HAL_UART_RxCpltCallback+0x1c>
	{
		process_data(&gnss_rx_buffer[BUFFER_SIZE], BUFFER_SIZE);
 80047e2:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80047e6:	4804      	ldr	r0, [pc, #16]	@ (80047f8 <HAL_UART_RxCpltCallback+0x28>)
 80047e8:	f000 f81a 	bl	8004820 <process_data>
	}
}
 80047ec:	bf00      	nop
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	2000026c 	.word	0x2000026c
 80047f8:	20000720 	.word	0x20000720

080047fc <L86_GNSS_Update>:

void L86_GNSS_Update(gps_data_t *gps_data_)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
	get_GNRMC_data(gps_data_);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f81d 	bl	8004844 <get_GNRMC_data>
	get_GPGGA_data(gps_data_);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f89e 	bl	800494c <get_GPGGA_data>
	format_data(gps_data_);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f90d 	bl	8004a30 <format_data>
}
 8004816:	bf00      	nop
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <process_data>:

	HAL_UART_Transmit(huart_Seri_Port, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
}

static void process_data(char *rx_buffer, uint16_t buffer_size)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	807b      	strh	r3, [r7, #2]
	memcpy(gps_buffer, rx_buffer, buffer_size);
 800482c:	887b      	ldrh	r3, [r7, #2]
 800482e:	461a      	mov	r2, r3
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	4803      	ldr	r0, [pc, #12]	@ (8004840 <process_data+0x20>)
 8004834:	f00b faf8 	bl	800fe28 <memcpy>
}
 8004838:	bf00      	nop
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000bd0 	.word	0x20000bd0

08004844 <get_GNRMC_data>:

static void get_GNRMC_data(gps_data_t *gps_data_)
{
 8004844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004846:	b08d      	sub	sp, #52	@ 0x34
 8004848:	af08      	add	r7, sp, #32
 800484a:	60f8      	str	r0, [r7, #12]
	gps_GNRMC_start_point = strstr(gps_buffer, "GNRMC");
 800484c:	4937      	ldr	r1, [pc, #220]	@ (800492c <get_GNRMC_data+0xe8>)
 800484e:	4838      	ldr	r0, [pc, #224]	@ (8004930 <get_GNRMC_data+0xec>)
 8004850:	f00b fa4c 	bl	800fcec <strstr>
 8004854:	4603      	mov	r3, r0
 8004856:	4a37      	ldr	r2, [pc, #220]	@ (8004934 <get_GNRMC_data+0xf0>)
 8004858:	6013      	str	r3, [r2, #0]

	if(gps_GNRMC_start_point != NULL && *(gps_GNRMC_start_point + 17) == 'A')
 800485a:	4b36      	ldr	r3, [pc, #216]	@ (8004934 <get_GNRMC_data+0xf0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <get_GNRMC_data+0x32>
 8004862:	4b34      	ldr	r3, [pc, #208]	@ (8004934 <get_GNRMC_data+0xf0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3311      	adds	r3, #17
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b41      	cmp	r3, #65	@ 0x41
 800486c:	d103      	bne.n	8004876 <get_GNRMC_data+0x32>
	{
		is_data_valid = 1;
 800486e:	4b32      	ldr	r3, [pc, #200]	@ (8004938 <get_GNRMC_data+0xf4>)
 8004870:	2201      	movs	r2, #1
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e005      	b.n	8004882 <get_GNRMC_data+0x3e>
	}
	else
	{
		is_data_valid = 0;
 8004876:	4b30      	ldr	r3, [pc, #192]	@ (8004938 <get_GNRMC_data+0xf4>)
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]
		gps_data_->is_valid = 'V';
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2256      	movs	r2, #86	@ 0x56
 8004880:	711a      	strb	r2, [r3, #4]
	}

	if(is_data_valid == 1)
 8004882:	4b2d      	ldr	r3, [pc, #180]	@ (8004938 <get_GNRMC_data+0xf4>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d148      	bne.n	800491c <get_GNRMC_data+0xd8>
	{
		memset(current_data, 0, DATA_SIZE);
 800488a:	2278      	movs	r2, #120	@ 0x78
 800488c:	2100      	movs	r1, #0
 800488e:	482b      	ldr	r0, [pc, #172]	@ (800493c <get_GNRMC_data+0xf8>)
 8004890:	f00b fa12 	bl	800fcb8 <memset>
		counter = 0;
 8004894:	4b2a      	ldr	r3, [pc, #168]	@ (8004940 <get_GNRMC_data+0xfc>)
 8004896:	2200      	movs	r2, #0
 8004898:	701a      	strb	r2, [r3, #0]
		current_char = gps_GNRMC_start_point;
 800489a:	4b26      	ldr	r3, [pc, #152]	@ (8004934 <get_GNRMC_data+0xf0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a29      	ldr	r2, [pc, #164]	@ (8004944 <get_GNRMC_data+0x100>)
 80048a0:	6013      	str	r3, [r2, #0]
		while(*current_char != '*')
 80048a2:	e011      	b.n	80048c8 <get_GNRMC_data+0x84>
		{
			current_data[counter] = *current_char;
 80048a4:	4b27      	ldr	r3, [pc, #156]	@ (8004944 <get_GNRMC_data+0x100>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a25      	ldr	r2, [pc, #148]	@ (8004940 <get_GNRMC_data+0xfc>)
 80048aa:	7812      	ldrb	r2, [r2, #0]
 80048ac:	7819      	ldrb	r1, [r3, #0]
 80048ae:	4b23      	ldr	r3, [pc, #140]	@ (800493c <get_GNRMC_data+0xf8>)
 80048b0:	5499      	strb	r1, [r3, r2]
			counter++;
 80048b2:	4b23      	ldr	r3, [pc, #140]	@ (8004940 <get_GNRMC_data+0xfc>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	3301      	adds	r3, #1
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	4b21      	ldr	r3, [pc, #132]	@ (8004940 <get_GNRMC_data+0xfc>)
 80048bc:	701a      	strb	r2, [r3, #0]
			current_char++;
 80048be:	4b21      	ldr	r3, [pc, #132]	@ (8004944 <get_GNRMC_data+0x100>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3301      	adds	r3, #1
 80048c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004944 <get_GNRMC_data+0x100>)
 80048c6:	6013      	str	r3, [r2, #0]
		while(*current_char != '*')
 80048c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004944 <get_GNRMC_data+0x100>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80048d0:	d1e8      	bne.n	80048a4 <get_GNRMC_data+0x60>
		}

		sscanf(current_data, "GNRMC,%f,%c,%f,%c,%f,%c,%f,%f,%lu,,,%c",
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f103 0c04 	add.w	ip, r3, #4
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3308      	adds	r3, #8
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	320c      	adds	r2, #12
 80048e4:	68f9      	ldr	r1, [r7, #12]
 80048e6:	3110      	adds	r1, #16
 80048e8:	6079      	str	r1, [r7, #4]
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	3014      	adds	r0, #20
 80048ee:	68fc      	ldr	r4, [r7, #12]
 80048f0:	3418      	adds	r4, #24
 80048f2:	68fd      	ldr	r5, [r7, #12]
 80048f4:	351c      	adds	r5, #28
 80048f6:	68fe      	ldr	r6, [r7, #12]
 80048f8:	3620      	adds	r6, #32
 80048fa:	68f9      	ldr	r1, [r7, #12]
 80048fc:	3124      	adds	r1, #36	@ 0x24
 80048fe:	9107      	str	r1, [sp, #28]
 8004900:	9606      	str	r6, [sp, #24]
 8004902:	9505      	str	r5, [sp, #20]
 8004904:	9404      	str	r4, [sp, #16]
 8004906:	9003      	str	r0, [sp, #12]
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	9102      	str	r1, [sp, #8]
 800490c:	9201      	str	r2, [sp, #4]
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	4663      	mov	r3, ip
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	490c      	ldr	r1, [pc, #48]	@ (8004948 <get_GNRMC_data+0x104>)
 8004916:	4809      	ldr	r0, [pc, #36]	@ (800493c <get_GNRMC_data+0xf8>)
 8004918:	f00a fa06 	bl	800ed28 <siscanf>
				&gps_data_->non_fixed_time, &gps_data_->is_valid, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
				&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->speed_over_ground, &gps_data_->course_over_ground,
				&gps_data_->non_fixed_date ,&gps_data_->positioning_mode);
	}

	gps_GNRMC_start_point = NULL;
 800491c:	4b05      	ldr	r3, [pc, #20]	@ (8004934 <get_GNRMC_data+0xf0>)
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
}
 8004922:	bf00      	nop
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800492a:	bf00      	nop
 800492c:	0801563c 	.word	0x0801563c
 8004930:	20000bd0 	.word	0x20000bd0
 8004934:	20001080 	.word	0x20001080
 8004938:	20001088 	.word	0x20001088
 800493c:	20001090 	.word	0x20001090
 8004940:	20001108 	.word	0x20001108
 8004944:	2000108c 	.word	0x2000108c
 8004948:	08015644 	.word	0x08015644

0800494c <get_GPGGA_data>:

static void get_GPGGA_data(gps_data_t *gps_data_)
{
 800494c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800494e:	b08d      	sub	sp, #52	@ 0x34
 8004950:	af08      	add	r7, sp, #32
 8004952:	60f8      	str	r0, [r7, #12]
	gps_GPGGA_start_point = strstr(gps_buffer, "GPGGA");
 8004954:	492f      	ldr	r1, [pc, #188]	@ (8004a14 <get_GPGGA_data+0xc8>)
 8004956:	4830      	ldr	r0, [pc, #192]	@ (8004a18 <get_GPGGA_data+0xcc>)
 8004958:	f00b f9c8 	bl	800fcec <strstr>
 800495c:	4603      	mov	r3, r0
 800495e:	4a2f      	ldr	r2, [pc, #188]	@ (8004a1c <get_GPGGA_data+0xd0>)
 8004960:	6013      	str	r3, [r2, #0]

	if(gps_GPGGA_start_point != NULL)
 8004962:	4b2e      	ldr	r3, [pc, #184]	@ (8004a1c <get_GPGGA_data+0xd0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d04f      	beq.n	8004a0a <get_GPGGA_data+0xbe>
	{
		if(gps_data_->is_valid == 'A')
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	791b      	ldrb	r3, [r3, #4]
 800496e:	2b41      	cmp	r3, #65	@ 0x41
 8004970:	d148      	bne.n	8004a04 <get_GPGGA_data+0xb8>
		{
			memset(current_data, 0, DATA_SIZE);
 8004972:	2278      	movs	r2, #120	@ 0x78
 8004974:	2100      	movs	r1, #0
 8004976:	482a      	ldr	r0, [pc, #168]	@ (8004a20 <get_GPGGA_data+0xd4>)
 8004978:	f00b f99e 	bl	800fcb8 <memset>
			counter = 0;
 800497c:	4b29      	ldr	r3, [pc, #164]	@ (8004a24 <get_GPGGA_data+0xd8>)
 800497e:	2200      	movs	r2, #0
 8004980:	701a      	strb	r2, [r3, #0]
			current_char = gps_GPGGA_start_point;
 8004982:	4b26      	ldr	r3, [pc, #152]	@ (8004a1c <get_GPGGA_data+0xd0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a28      	ldr	r2, [pc, #160]	@ (8004a28 <get_GPGGA_data+0xdc>)
 8004988:	6013      	str	r3, [r2, #0]
			while(*(current_char) != '*')
 800498a:	e011      	b.n	80049b0 <get_GPGGA_data+0x64>
			{
				current_data[counter] = *current_char;
 800498c:	4b26      	ldr	r3, [pc, #152]	@ (8004a28 <get_GPGGA_data+0xdc>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a24      	ldr	r2, [pc, #144]	@ (8004a24 <get_GPGGA_data+0xd8>)
 8004992:	7812      	ldrb	r2, [r2, #0]
 8004994:	7819      	ldrb	r1, [r3, #0]
 8004996:	4b22      	ldr	r3, [pc, #136]	@ (8004a20 <get_GPGGA_data+0xd4>)
 8004998:	5499      	strb	r1, [r3, r2]
				counter++;
 800499a:	4b22      	ldr	r3, [pc, #136]	@ (8004a24 <get_GPGGA_data+0xd8>)
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	3301      	adds	r3, #1
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	4b20      	ldr	r3, [pc, #128]	@ (8004a24 <get_GPGGA_data+0xd8>)
 80049a4:	701a      	strb	r2, [r3, #0]
				current_char++;
 80049a6:	4b20      	ldr	r3, [pc, #128]	@ (8004a28 <get_GPGGA_data+0xdc>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3301      	adds	r3, #1
 80049ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004a28 <get_GPGGA_data+0xdc>)
 80049ae:	6013      	str	r3, [r2, #0]
			while(*(current_char) != '*')
 80049b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a28 <get_GPGGA_data+0xdc>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80049b8:	d1e8      	bne.n	800498c <get_GPGGA_data+0x40>
			}

			sscanf(current_data, "GPGGA,%f,%f,%c,%f,%c,%u,%u,%f,%f,M,%f,M,,",
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	60bb      	str	r3, [r7, #8]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f103 0c08 	add.w	ip, r3, #8
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	330c      	adds	r3, #12
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	3210      	adds	r2, #16
 80049cc:	68f9      	ldr	r1, [r7, #12]
 80049ce:	3114      	adds	r1, #20
 80049d0:	6079      	str	r1, [r7, #4]
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	3025      	adds	r0, #37	@ 0x25
 80049d6:	68fc      	ldr	r4, [r7, #12]
 80049d8:	3426      	adds	r4, #38	@ 0x26
 80049da:	68fd      	ldr	r5, [r7, #12]
 80049dc:	3528      	adds	r5, #40	@ 0x28
 80049de:	68fe      	ldr	r6, [r7, #12]
 80049e0:	362c      	adds	r6, #44	@ 0x2c
 80049e2:	68f9      	ldr	r1, [r7, #12]
 80049e4:	3130      	adds	r1, #48	@ 0x30
 80049e6:	9107      	str	r1, [sp, #28]
 80049e8:	9606      	str	r6, [sp, #24]
 80049ea:	9505      	str	r5, [sp, #20]
 80049ec:	9404      	str	r4, [sp, #16]
 80049ee:	9003      	str	r0, [sp, #12]
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	9102      	str	r1, [sp, #8]
 80049f4:	9201      	str	r2, [sp, #4]
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	4663      	mov	r3, ip
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	490b      	ldr	r1, [pc, #44]	@ (8004a2c <get_GPGGA_data+0xe0>)
 80049fe:	4808      	ldr	r0, [pc, #32]	@ (8004a20 <get_GPGGA_data+0xd4>)
 8004a00:	f00a f992 	bl	800ed28 <siscanf>
					&gps_data_->non_fixed_time, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
					&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->fix_status, &gps_data_->satellites_in_use,
					&gps_data_->HDOP, &gps_data_->altitude, &gps_data_->geoid_height);
		}

		gps_GPGGA_start_point = NULL;
 8004a04:	4b05      	ldr	r3, [pc, #20]	@ (8004a1c <get_GPGGA_data+0xd0>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
	}
}
 8004a0a:	bf00      	nop
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a12:	bf00      	nop
 8004a14:	0801566c 	.word	0x0801566c
 8004a18:	20000bd0 	.word	0x20000bd0
 8004a1c:	20001084 	.word	0x20001084
 8004a20:	20001090 	.word	0x20001090
 8004a24:	20001108 	.word	0x20001108
 8004a28:	2000108c 	.word	0x2000108c
 8004a2c:	08015674 	.word	0x08015674

08004a30 <format_data>:

static void format_data(gps_data_t *gps_data_)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	if(gps_data_->is_valid == 'A')
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	791b      	ldrb	r3, [r3, #4]
 8004a3c:	2b41      	cmp	r3, #65	@ 0x41
 8004a3e:	f040 8154 	bne.w	8004cea <format_data+0x2ba>
	{
		// format latitude
		non_formatted_latitude = gps_data_->non_fixed_latitude;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	4aab      	ldr	r2, [pc, #684]	@ (8004cf4 <format_data+0x2c4>)
 8004a48:	6013      	str	r3, [r2, #0]
		gps_data_->latitude = (float)floor(non_formatted_latitude / 100);
 8004a4a:	4baa      	ldr	r3, [pc, #680]	@ (8004cf4 <format_data+0x2c4>)
 8004a4c:	edd3 7a00 	vldr	s15, [r3]
 8004a50:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8004cf8 <format_data+0x2c8>
 8004a54:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004a58:	ee16 0a90 	vmov	r0, s13
 8004a5c:	f7fb fd94 	bl	8000588 <__aeabi_f2d>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	ec43 2b10 	vmov	d0, r2, r3
 8004a68:	f00e fea6 	bl	80137b8 <floor>
 8004a6c:	ec53 2b10 	vmov	r2, r3, d0
 8004a70:	4610      	mov	r0, r2
 8004a72:	4619      	mov	r1, r3
 8004a74:	f7fc f8d8 	bl	8000c28 <__aeabi_d2f>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	635a      	str	r2, [r3, #52]	@ 0x34
		non_formatted_latitude -= gps_data_->latitude * 100;
 8004a7e:	4b9d      	ldr	r3, [pc, #628]	@ (8004cf4 <format_data+0x2c4>)
 8004a80:	ed93 7a00 	vldr	s14, [r3]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004a8a:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8004cf8 <format_data+0x2c8>
 8004a8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a96:	4b97      	ldr	r3, [pc, #604]	@ (8004cf4 <format_data+0x2c4>)
 8004a98:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_latitude /= 60;
 8004a9c:	4b95      	ldr	r3, [pc, #596]	@ (8004cf4 <format_data+0x2c4>)
 8004a9e:	ed93 7a00 	vldr	s14, [r3]
 8004aa2:	eddf 6a96 	vldr	s13, [pc, #600]	@ 8004cfc <format_data+0x2cc>
 8004aa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004aaa:	4b92      	ldr	r3, [pc, #584]	@ (8004cf4 <format_data+0x2c4>)
 8004aac:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->latitude += non_formatted_latitude;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8004ab6:	4b8f      	ldr	r3, [pc, #572]	@ (8004cf4 <format_data+0x2c4>)
 8004ab8:	edd3 7a00 	vldr	s15, [r3]
 8004abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

		// format langitude
		non_formatted_longitude = gps_data_->non_fixed_longitude;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	4a8d      	ldr	r2, [pc, #564]	@ (8004d00 <format_data+0x2d0>)
 8004acc:	6013      	str	r3, [r2, #0]
		gps_data_->longitude = (float)floor(non_formatted_longitude / 100);
 8004ace:	4b8c      	ldr	r3, [pc, #560]	@ (8004d00 <format_data+0x2d0>)
 8004ad0:	edd3 7a00 	vldr	s15, [r3]
 8004ad4:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8004cf8 <format_data+0x2c8>
 8004ad8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004adc:	ee16 0a90 	vmov	r0, s13
 8004ae0:	f7fb fd52 	bl	8000588 <__aeabi_f2d>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	ec43 2b10 	vmov	d0, r2, r3
 8004aec:	f00e fe64 	bl	80137b8 <floor>
 8004af0:	ec53 2b10 	vmov	r2, r3, d0
 8004af4:	4610      	mov	r0, r2
 8004af6:	4619      	mov	r1, r3
 8004af8:	f7fc f896 	bl	8000c28 <__aeabi_d2f>
 8004afc:	4602      	mov	r2, r0
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	639a      	str	r2, [r3, #56]	@ 0x38
		non_formatted_longitude -= gps_data_->longitude * 100;
 8004b02:	4b7f      	ldr	r3, [pc, #508]	@ (8004d00 <format_data+0x2d0>)
 8004b04:	ed93 7a00 	vldr	s14, [r3]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004b0e:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8004cf8 <format_data+0x2c8>
 8004b12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b1a:	4b79      	ldr	r3, [pc, #484]	@ (8004d00 <format_data+0x2d0>)
 8004b1c:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_longitude /= 60;
 8004b20:	4b77      	ldr	r3, [pc, #476]	@ (8004d00 <format_data+0x2d0>)
 8004b22:	ed93 7a00 	vldr	s14, [r3]
 8004b26:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8004cfc <format_data+0x2cc>
 8004b2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b2e:	4b74      	ldr	r3, [pc, #464]	@ (8004d00 <format_data+0x2d0>)
 8004b30:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->longitude += non_formatted_longitude;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004b3a:	4b71      	ldr	r3, [pc, #452]	@ (8004d00 <format_data+0x2d0>)
 8004b3c:	edd3 7a00 	vldr	s15, [r3]
 8004b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

		// format time
		non_formatted_time = gps_data_->non_fixed_time;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a6d      	ldr	r2, [pc, #436]	@ (8004d04 <format_data+0x2d4>)
 8004b50:	6013      	str	r3, [r2, #0]
		gps_data_->time[0] = (uint8_t)floor(non_formatted_time / 10000);
 8004b52:	4b6c      	ldr	r3, [pc, #432]	@ (8004d04 <format_data+0x2d4>)
 8004b54:	edd3 7a00 	vldr	s15, [r3]
 8004b58:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8004d08 <format_data+0x2d8>
 8004b5c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004b60:	ee16 0a90 	vmov	r0, s13
 8004b64:	f7fb fd10 	bl	8000588 <__aeabi_f2d>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	ec43 2b10 	vmov	d0, r2, r3
 8004b70:	f00e fe22 	bl	80137b8 <floor>
 8004b74:	ec53 2b10 	vmov	r2, r3, d0
 8004b78:	4610      	mov	r0, r2
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	f7fc f834 	bl	8000be8 <__aeabi_d2uiz>
 8004b80:	4603      	mov	r3, r0
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		non_formatted_time -= gps_data_->time[0] * 10000;
 8004b8a:	4b5e      	ldr	r3, [pc, #376]	@ (8004d04 <format_data+0x2d4>)
 8004b8c:	ed93 7a00 	vldr	s14, [r3]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b96:	461a      	mov	r2, r3
 8004b98:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004b9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ba0:	ee07 3a90 	vmov	s15, r3
 8004ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bac:	4b55      	ldr	r3, [pc, #340]	@ (8004d04 <format_data+0x2d4>)
 8004bae:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[0] += 3;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bb8:	3303      	adds	r3, #3
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		if(gps_data_->time[0] >= 24)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bc8:	2b17      	cmp	r3, #23
 8004bca:	d907      	bls.n	8004bdc <format_data+0x1ac>
		{
			gps_data_->time[0] -= 24;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bd2:	3b18      	subs	r3, #24
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		}
		gps_data_->time[1] = (uint8_t)floor(non_formatted_time / 100);
 8004bdc:	4b49      	ldr	r3, [pc, #292]	@ (8004d04 <format_data+0x2d4>)
 8004bde:	edd3 7a00 	vldr	s15, [r3]
 8004be2:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8004cf8 <format_data+0x2c8>
 8004be6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004bea:	ee16 0a90 	vmov	r0, s13
 8004bee:	f7fb fccb 	bl	8000588 <__aeabi_f2d>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	ec43 2b10 	vmov	d0, r2, r3
 8004bfa:	f00e fddd 	bl	80137b8 <floor>
 8004bfe:	ec53 2b10 	vmov	r2, r3, d0
 8004c02:	4610      	mov	r0, r2
 8004c04:	4619      	mov	r1, r3
 8004c06:	f7fb ffef 	bl	8000be8 <__aeabi_d2uiz>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		non_formatted_time-= gps_data_->time[1] * 100;
 8004c14:	4b3b      	ldr	r3, [pc, #236]	@ (8004d04 <format_data+0x2d4>)
 8004c16:	ed93 7a00 	vldr	s14, [r3]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c20:	461a      	mov	r2, r3
 8004c22:	2364      	movs	r3, #100	@ 0x64
 8004c24:	fb02 f303 	mul.w	r3, r2, r3
 8004c28:	ee07 3a90 	vmov	s15, r3
 8004c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c34:	4b33      	ldr	r3, [pc, #204]	@ (8004d04 <format_data+0x2d4>)
 8004c36:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[2] = (uint8_t)floor(non_formatted_time);
 8004c3a:	4b32      	ldr	r3, [pc, #200]	@ (8004d04 <format_data+0x2d4>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fb fca2 	bl	8000588 <__aeabi_f2d>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	ec43 2b10 	vmov	d0, r2, r3
 8004c4c:	f00e fdb4 	bl	80137b8 <floor>
 8004c50:	ec53 2b10 	vmov	r2, r3, d0
 8004c54:	4610      	mov	r0, r2
 8004c56:	4619      	mov	r1, r3
 8004c58:	f7fb ffc6 	bl	8000be8 <__aeabi_d2uiz>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

		// format date
		non_formatted_date = gps_data_->non_fixed_date;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	4a28      	ldr	r2, [pc, #160]	@ (8004d0c <format_data+0x2dc>)
 8004c6c:	6013      	str	r3, [r2, #0]
		gps_data_->date[0] = (uint8_t)(non_formatted_date / 10000);
 8004c6e:	4b27      	ldr	r3, [pc, #156]	@ (8004d0c <format_data+0x2dc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a27      	ldr	r2, [pc, #156]	@ (8004d10 <format_data+0x2e0>)
 8004c74:	fba2 2303 	umull	r2, r3, r2, r3
 8004c78:	0b5b      	lsrs	r3, r3, #13
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
		non_formatted_date -= gps_data_->date[0] * 10000;
 8004c82:	4b22      	ldr	r3, [pc, #136]	@ (8004d0c <format_data+0x2dc>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8004c8c:	4611      	mov	r1, r2
 8004c8e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004c92:	fb01 f202 	mul.w	r2, r1, r2
 8004c96:	1a9b      	subs	r3, r3, r2
 8004c98:	4a1c      	ldr	r2, [pc, #112]	@ (8004d0c <format_data+0x2dc>)
 8004c9a:	6013      	str	r3, [r2, #0]
		gps_data_->date[1] = (uint8_t)(non_formatted_date / 100);
 8004c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8004d0c <format_data+0x2dc>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8004d14 <format_data+0x2e4>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		non_formatted_date -= gps_data_->date[1] * 100;
 8004cb0:	4b16      	ldr	r3, [pc, #88]	@ (8004d0c <format_data+0x2dc>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8004cba:	4611      	mov	r1, r2
 8004cbc:	2264      	movs	r2, #100	@ 0x64
 8004cbe:	fb01 f202 	mul.w	r2, r1, r2
 8004cc2:	1a9b      	subs	r3, r3, r2
 8004cc4:	4a11      	ldr	r2, [pc, #68]	@ (8004d0c <format_data+0x2dc>)
 8004cc6:	6013      	str	r3, [r2, #0]
		gps_data_->date[2] = (uint8_t)(non_formatted_date);
 8004cc8:	4b10      	ldr	r3, [pc, #64]	@ (8004d0c <format_data+0x2dc>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

		// format height
		gps_data_->orthometric_height = gps_data_->altitude - gps_data_->geoid_height;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004ce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	}
}
 8004cea:	bf00      	nop
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	2000110c 	.word	0x2000110c
 8004cf8:	42c80000 	.word	0x42c80000
 8004cfc:	42700000 	.word	0x42700000
 8004d00:	20001110 	.word	0x20001110
 8004d04:	20001114 	.word	0x20001114
 8004d08:	461c4000 	.word	0x461c4000
 8004d0c:	20001118 	.word	0x20001118
 8004d10:	d1b71759 	.word	0xd1b71759
 8004d14:	51eb851f 	.word	0x51eb851f

08004d18 <send_command>:
#include "lora.h"
#include "main.h"



static void send_command(uint8_t header, uint8_t addresses, uint8_t dataLength, uint8_t *data) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	603b      	str	r3, [r7, #0]
 8004d20:	4603      	mov	r3, r0
 8004d22:	71fb      	strb	r3, [r7, #7]
 8004d24:	460b      	mov	r3, r1
 8004d26:	71bb      	strb	r3, [r7, #6]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	717b      	strb	r3, [r7, #5]
    uint8_t command[12];
    command[0] = header;
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	723b      	strb	r3, [r7, #8]
    command[1] = addresses;
 8004d30:	79bb      	ldrb	r3, [r7, #6]
 8004d32:	727b      	strb	r3, [r7, #9]
    command[2] = dataLength;
 8004d34:	797b      	ldrb	r3, [r7, #5]
 8004d36:	72bb      	strb	r3, [r7, #10]
    for (int i = 0; i < 9; i++) {
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	e00c      	b.n	8004d58 <send_command+0x40>
        command[3 + i] = data[i];
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	441a      	add	r2, r3
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	3303      	adds	r3, #3
 8004d48:	7812      	ldrb	r2, [r2, #0]
 8004d4a:	3318      	adds	r3, #24
 8004d4c:	443b      	add	r3, r7
 8004d4e:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < 9; i++) {
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	3301      	adds	r3, #1
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	ddef      	ble.n	8004d3e <send_command+0x26>
    }

    HAL_UART_Transmit(&huart2, command, 12, 100);
 8004d5e:	f107 0108 	add.w	r1, r7, #8
 8004d62:	2364      	movs	r3, #100	@ 0x64
 8004d64:	220c      	movs	r2, #12
 8004d66:	4803      	ldr	r0, [pc, #12]	@ (8004d74 <send_command+0x5c>)
 8004d68:	f007 fdbc 	bl	800c8e4 <HAL_UART_Transmit>
}
 8004d6c:	bf00      	nop
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	20001434 	.word	0x20001434

08004d78 <lora_activate>:

void lora_activate()
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, RESET);
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2101      	movs	r1, #1
 8004d80:	4804      	ldr	r0, [pc, #16]	@ (8004d94 <lora_activate+0x1c>)
 8004d82:	f005 fa81 	bl	800a288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, RESET);
 8004d86:	2200      	movs	r2, #0
 8004d88:	2102      	movs	r1, #2
 8004d8a:	4802      	ldr	r0, [pc, #8]	@ (8004d94 <lora_activate+0x1c>)
 8004d8c:	f005 fa7c 	bl	800a288 <HAL_GPIO_WritePin>
}
 8004d90:	bf00      	nop
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40020000 	.word	0x40020000

08004d98 <lora_deactivate>:

void lora_deactivate()
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, SET);
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	2101      	movs	r1, #1
 8004da0:	4804      	ldr	r0, [pc, #16]	@ (8004db4 <lora_deactivate+0x1c>)
 8004da2:	f005 fa71 	bl	800a288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, SET);
 8004da6:	2201      	movs	r2, #1
 8004da8:	2102      	movs	r1, #2
 8004daa:	4802      	ldr	r0, [pc, #8]	@ (8004db4 <lora_deactivate+0x1c>)
 8004dac:	f005 fa6c 	bl	800a288 <HAL_GPIO_WritePin>
}
 8004db0:	bf00      	nop
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40020000 	.word	0x40020000

08004db8 <lora_configure>:

void lora_configure(lorastruct *config)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
	uint8_t data[9];

    //default values of lora
    config->netId = (uint8_t) 0x00;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	725a      	strb	r2, [r3, #9]
    config->serialParity = LORA_PARITY_8N1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	745a      	strb	r2, [r3, #17]
    config->ambientNoise = LORA_RSSI_AMBIENT_NOISE_DISABLE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	729a      	strb	r2, [r3, #10]
    config->RSSI = LORA_RSSI_DISABLE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	72da      	strb	r2, [r3, #11]
    config->transmissonMode = LORA_TRANSMISSION_TRANSPARENT;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	731a      	strb	r2, [r3, #12]
    config->repeater = LORA_REPEATER_DISABLE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	735a      	strb	r2, [r3, #13]
    config->LBT = LORA_LBT_DISABLE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	739a      	strb	r2, [r3, #14]
    config->worMode = LORA_WOR_TRANSMITTER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2208      	movs	r2, #8
 8004dee:	73da      	strb	r2, [r3, #15]
    config->worCycle = LORA_WOR_4000;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2207      	movs	r2, #7
 8004df4:	741a      	strb	r2, [r3, #16]

    // Lora address
    data[0] = config->loraAddress.address8[1];
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	79db      	ldrb	r3, [r3, #7]
 8004dfa:	733b      	strb	r3, [r7, #12]
    data[1] = config->loraAddress.address8[0];
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	799b      	ldrb	r3, [r3, #6]
 8004e00:	737b      	strb	r3, [r7, #13]

    // Lora netid
    data[2] = config->netId;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	7a5b      	ldrb	r3, [r3, #9]
 8004e06:	73bb      	strb	r3, [r7, #14]

    // Lora baud rate, parite, air rate
    data[3] = config->baudRate | config->serialParity | config->airRate;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	781a      	ldrb	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	7c5b      	ldrb	r3, [r3, #17]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	785b      	ldrb	r3, [r3, #1]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	73fb      	strb	r3, [r7, #15]

    // packet size, ambient noise, reserve ve power
    data[4] = config->packetSize | config->ambientNoise | LORA_STATUS_LOG_DISABLE | config->power;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	789a      	ldrb	r2, [r3, #2]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	7a9b      	ldrb	r3, [r3, #10]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	78db      	ldrb	r3, [r3, #3]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	743b      	strb	r3, [r7, #16]

    // channel
    //frequency range restriction
    if(config->channel > 83)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	7a1b      	ldrb	r3, [r3, #8]
 8004e38:	2b53      	cmp	r3, #83	@ 0x53
 8004e3a:	d902      	bls.n	8004e42 <lora_configure+0x8a>
    	config->channel = 83;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2253      	movs	r2, #83	@ 0x53
 8004e40:	721a      	strb	r2, [r3, #8]
    else if(config->channel < 0)
    	config->channel = 0;

    data[5] = config->channel;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	7a1b      	ldrb	r3, [r3, #8]
 8004e46:	747b      	strb	r3, [r7, #17]

    // RSSI, transmission mode, repeater, LBT, worTransceiver ve worCycle
    data[6] = config->RSSI | config->transmissonMode | config->repeater | config->LBT | config->worMode | config->worCycle;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	7ada      	ldrb	r2, [r3, #11]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	7b1b      	ldrb	r3, [r3, #12]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	7b5b      	ldrb	r3, [r3, #13]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	7b9b      	ldrb	r3, [r3, #14]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	7bdb      	ldrb	r3, [r3, #15]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	7c1b      	ldrb	r3, [r3, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	74bb      	strb	r3, [r7, #18]

    // key
    data[7] = config->loraKey.key8[1];
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	795b      	ldrb	r3, [r3, #5]
 8004e7a:	74fb      	strb	r3, [r7, #19]
    data[8] = config->loraKey.key8[0];
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	791b      	ldrb	r3, [r3, #4]
 8004e80:	753b      	strb	r3, [r7, #20]


    send_command(0xC0, 0x00, 0x09, data);
 8004e82:	f107 030c 	add.w	r3, r7, #12
 8004e86:	2209      	movs	r2, #9
 8004e88:	2100      	movs	r1, #0
 8004e8a:	20c0      	movs	r0, #192	@ 0xc0
 8004e8c:	f7ff ff44 	bl	8004d18 <send_command>
		}
	}
	else {
		int x =10;
	}*/
}
 8004e90:	bf00      	nop
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e9e:	f003 fd51 	bl	8008944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004ea2:	f000 f8d9 	bl	8005058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ea6:	f000 fb87 	bl	80055b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004eaa:	f000 fb37 	bl	800551c <MX_DMA_Init>
  MX_I2C1_Init();
 8004eae:	f000 f9e3 	bl	8005278 <MX_I2C1_Init>
  MX_I2C3_Init();
 8004eb2:	f000 fa0f 	bl	80052d4 <MX_I2C3_Init>
  MX_TIM2_Init();
 8004eb6:	f000 fa3b 	bl	8005330 <MX_TIM2_Init>
  MX_UART5_Init();
 8004eba:	f000 fab1 	bl	8005420 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8004ebe:	f000 fad9 	bl	8005474 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8004ec2:	f000 f935 	bl	8005130 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004ec6:	f000 f985 	bl	80051d4 <MX_ADC2_Init>
  MX_UART4_Init();
 8004eca:	f000 fa7f 	bl	80053cc <MX_UART4_Init>
  MX_USART2_UART_Init();
 8004ece:	f000 fafb 	bl	80054c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	MX_TIM2_Init();
 8004ed2:	f000 fa2d 	bl	8005330 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8004ed6:	484f      	ldr	r0, [pc, #316]	@ (8005014 <main+0x17c>)
 8004ed8:	f007 f894 	bl	800c004 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004edc:	2200      	movs	r2, #0
 8004ede:	2101      	movs	r1, #1
 8004ee0:	201c      	movs	r0, #28
 8004ee2:	f004 faea 	bl	80094ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004ee6:	201c      	movs	r0, #28
 8004ee8:	f004 fb03 	bl	80094f2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 8004eec:	2201      	movs	r2, #1
 8004eee:	2100      	movs	r1, #0
 8004ef0:	2028      	movs	r0, #40	@ 0x28
 8004ef2:	f004 fae2 	bl	80094ba <HAL_NVIC_SetPriority>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buffer, 2);
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	4947      	ldr	r1, [pc, #284]	@ (8005018 <main+0x180>)
 8004efa:	4848      	ldr	r0, [pc, #288]	@ (800501c <main+0x184>)
 8004efc:	f003 fdfc 	bl	8008af8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buffer, 2);
 8004f00:	2202      	movs	r2, #2
 8004f02:	4947      	ldr	r1, [pc, #284]	@ (8005020 <main+0x188>)
 8004f04:	4847      	ldr	r0, [pc, #284]	@ (8005024 <main+0x18c>)
 8004f06:	f003 fdf7 	bl	8008af8 <HAL_ADC_Start_DMA>

	bme280_begin();
 8004f0a:	f000 fc3b 	bl	8005784 <bme280_begin>
	HAL_Delay(1000);
 8004f0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f12:	f003 fd89 	bl	8008a28 <HAL_Delay>
	bme280_config();
 8004f16:	f7fc fad5 	bl	80014c4 <bme280_config>

	bmi_imu_init();
 8004f1a:	f000 fc4b 	bl	80057b4 <bmi_imu_init>
    bmi088_config(&BMI_sensor);
 8004f1e:	4842      	ldr	r0, [pc, #264]	@ (8005028 <main+0x190>)
 8004f20:	f7fd f91e 	bl	8002160 <bmi088_config>
    get_offset(&BMI_sensor);
 8004f24:	4840      	ldr	r0, [pc, #256]	@ (8005028 <main+0x190>)
 8004f26:	f7fd ff11 	bl	8002d4c <get_offset>
	bme280_update();
 8004f2a:	f7fc fc99 	bl	8001860 <bme280_update>
    lora_deactivate();
 8004f2e:	f7ff ff33 	bl	8004d98 <lora_deactivate>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004f32:	2028      	movs	r0, #40	@ 0x28
 8004f34:	f004 fadd 	bl	80094f2 <HAL_NVIC_EnableIRQ>
	getInitialQuaternion();
 8004f38:	f002 f9e8 	bl	800730c <getInitialQuaternion>

	loraBegin();
 8004f3c:	f000 fd30 	bl	80059a0 <loraBegin>
    lora_activate();
 8004f40:	f7ff ff1a 	bl	8004d78 <lora_activate>


	sensor_fusion_init(&BME280_sensor);
 8004f44:	4839      	ldr	r0, [pc, #228]	@ (800502c <main+0x194>)
 8004f46:	f002 fc61 	bl	800780c <sensor_fusion_init>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart4, usart4_rx_buffer, 36);
 8004f4a:	2224      	movs	r2, #36	@ 0x24
 8004f4c:	4938      	ldr	r1, [pc, #224]	@ (8005030 <main+0x198>)
 8004f4e:	4839      	ldr	r0, [pc, #228]	@ (8005034 <main+0x19c>)
 8004f50:	f007 fdf5 	bl	800cb3e <HAL_UARTEx_ReceiveToIdle_DMA>
	flight_algorithm_set_parameters(10.0,2000.0,500.0,60.0);
 8004f54:	eddf 1a38 	vldr	s3, [pc, #224]	@ 8005038 <main+0x1a0>
 8004f58:	ed9f 1a38 	vldr	s2, [pc, #224]	@ 800503c <main+0x1a4>
 8004f5c:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8005040 <main+0x1a8>
 8004f60:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8004f64:	f7fe f916 	bl	8003194 <flight_algorithm_set_parameters>


	uart_handler_init();
 8004f68:	f003 fb2a 	bl	80085c0 <uart_handler_init>
	flight_algorithm_init();
 8004f6c:	f7fd ff5a 	bl	8002e24 <flight_algorithm_init>

	HAL_UART_Init(&huart5);
 8004f70:	4834      	ldr	r0, [pc, #208]	@ (8005044 <main+0x1ac>)
 8004f72:	f007 fc67 	bl	800c844 <HAL_UART_Init>
	HAL_DMA_Init(&hdma_uart5_rx);
 8004f76:	4834      	ldr	r0, [pc, #208]	@ (8005048 <main+0x1b0>)
 8004f78:	f004 fae4 	bl	8009544 <HAL_DMA_Init>
	L86_GNSS_Init(&huart5);
 8004f7c:	4831      	ldr	r0, [pc, #196]	@ (8005044 <main+0x1ac>)
 8004f7e:	f7ff fbf9 	bl	8004774 <L86_GNSS_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  bmi088_update(&BMI_sensor);
 8004f82:	4829      	ldr	r0, [pc, #164]	@ (8005028 <main+0x190>)
 8004f84:	f7fd faec 	bl	8002560 <bmi088_update>
		  sensor_fusion_update_mahony(&BMI_sensor, &sensor_output);
 8004f88:	4930      	ldr	r1, [pc, #192]	@ (800504c <main+0x1b4>)
 8004f8a:	4827      	ldr	r0, [pc, #156]	@ (8005028 <main+0x190>)
 8004f8c:	f002 fd46 	bl	8007a1c <sensor_fusion_update_mahony>
		  bme280_update();
 8004f90:	f7fc fc66 	bl	8001860 <bme280_update>

		  // Process UART packets and handle mode changes
		  uart_handler_process_packets();
 8004f94:	f003 fb2e 	bl	80085f4 <uart_handler_process_packets>

		  // Clear command flag if it was set
		  if (uart_handler_command_ready()) {
 8004f98:	f003 fc2a 	bl	80087f0 <uart_handler_command_ready>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d008      	beq.n	8004fb4 <main+0x11c>
			  uart_handler_clear_command_flag();
 8004fa2:	f003 fc53 	bl	800884c <uart_handler_clear_command_flag>
			  // Reset flight algorithm if switching to NORMAL mode
			  if (uart_handler_get_mode() == MODE_NORMAL) {
 8004fa6:	f003 fc17 	bl	80087d8 <uart_handler_get_mode>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <main+0x11c>
				  flight_algorithm_reset();
 8004fb0:	f7fd ff3e 	bl	8002e30 <flight_algorithm_reset>
			  }
		  }

		  if (tx_timer_flag) {
 8004fb4:	4b26      	ldr	r3, [pc, #152]	@ (8005050 <main+0x1b8>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0e1      	beq.n	8004f82 <main+0xea>
			tx_timer_flag = 0;
 8004fbe:	4b24      	ldr	r3, [pc, #144]	@ (8005050 <main+0x1b8>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	701a      	strb	r2, [r3, #0]
			//read_ADC();
			L86_GNSS_Update(&gnss_data);
 8004fc4:	4823      	ldr	r0, [pc, #140]	@ (8005054 <main+0x1bc>)
 8004fc6:	f7ff fc19 	bl	80047fc <L86_GNSS_Update>
			HSD_StatusCheck();
 8004fca:	f000 fcb3 	bl	8005934 <HSD_StatusCheck>
		    //IMU_visual();
			SystemMode_t current_mode = uart_handler_get_mode();
 8004fce:	f003 fc03 	bl	80087d8 <uart_handler_get_mode>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	71fb      	strb	r3, [r7, #7]

				switch (current_mode) {
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d016      	beq.n	800500a <main+0x172>
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	dcd0      	bgt.n	8004f82 <main+0xea>
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <main+0x152>
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d00b      	beq.n	8005000 <main+0x168>
 8004fe8:	e012      	b.n	8005010 <main+0x178>
					case MODE_NORMAL:
						sensor_fusion_update_kalman(&BME280_sensor, &BMI_sensor, &sensor_output);
 8004fea:	4a18      	ldr	r2, [pc, #96]	@ (800504c <main+0x1b4>)
 8004fec:	490e      	ldr	r1, [pc, #56]	@ (8005028 <main+0x190>)
 8004fee:	480f      	ldr	r0, [pc, #60]	@ (800502c <main+0x194>)
 8004ff0:	f002 fc62 	bl	80078b8 <sensor_fusion_update_kalman>
						flight_algorithm_update(&BME280_sensor, &BMI_sensor, &sensor_output);
 8004ff4:	4a15      	ldr	r2, [pc, #84]	@ (800504c <main+0x1b4>)
 8004ff6:	490c      	ldr	r1, [pc, #48]	@ (8005028 <main+0x190>)
 8004ff8:	480c      	ldr	r0, [pc, #48]	@ (800502c <main+0x194>)
 8004ffa:	f7fd ff69 	bl	8002ed0 <flight_algorithm_update>
						//addDataPacketNormal(&BME280_sensor, &BMI_sensor);
				    	//HAL_UART_Transmit(&huart2, (uint8_t*)normal_paket, 59, 100);
						//uint16_t status_bits = flight_algorithm_get_status_bits();
						//uart_handler_send_status(status_bits);
						break;
 8004ffe:	e007      	b.n	8005010 <main+0x178>

					case MODE_SIT:
						test_modes_handle_sit(&BME280_sensor, &BMI_sensor);
 8005000:	4909      	ldr	r1, [pc, #36]	@ (8005028 <main+0x190>)
 8005002:	480a      	ldr	r0, [pc, #40]	@ (800502c <main+0x194>)
 8005004:	f003 fa58 	bl	80084b8 <test_modes_handle_sit>
						break;
 8005008:	e002      	b.n	8005010 <main+0x178>

					case MODE_SUT:
						algorithm_update_sut();
 800500a:	f003 fa6f 	bl	80084ec <algorithm_update_sut>
						break;
 800500e:	bf00      	nop
	  	  bmi088_update(&BMI_sensor);
 8005010:	e7b7      	b.n	8004f82 <main+0xea>
 8005012:	bf00      	nop
 8005014:	20001314 	.word	0x20001314
 8005018:	200016e4 	.word	0x200016e4
 800501c:	2000111c 	.word	0x2000111c
 8005020:	200016e8 	.word	0x200016e8
 8005024:	20001164 	.word	0x20001164
 8005028:	200015e0 	.word	0x200015e0
 800502c:	2000159c 	.word	0x2000159c
 8005030:	20001690 	.word	0x20001690
 8005034:	2000135c 	.word	0x2000135c
 8005038:	42700000 	.word	0x42700000
 800503c:	43fa0000 	.word	0x43fa0000
 8005040:	44fa0000 	.word	0x44fa0000
 8005044:	200013a4 	.word	0x200013a4
 8005048:	2000153c 	.word	0x2000153c
 800504c:	20001660 	.word	0x20001660
 8005050:	200016e0 	.word	0x200016e0
 8005054:	200016ec 	.word	0x200016ec

08005058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b094      	sub	sp, #80	@ 0x50
 800505c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800505e:	f107 031c 	add.w	r3, r7, #28
 8005062:	2234      	movs	r2, #52	@ 0x34
 8005064:	2100      	movs	r1, #0
 8005066:	4618      	mov	r0, r3
 8005068:	f00a fe26 	bl	800fcb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800506c:	f107 0308 	add.w	r3, r7, #8
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	605a      	str	r2, [r3, #4]
 8005076:	609a      	str	r2, [r3, #8]
 8005078:	60da      	str	r2, [r3, #12]
 800507a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800507c:	2300      	movs	r3, #0
 800507e:	607b      	str	r3, [r7, #4]
 8005080:	4b29      	ldr	r3, [pc, #164]	@ (8005128 <SystemClock_Config+0xd0>)
 8005082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005084:	4a28      	ldr	r2, [pc, #160]	@ (8005128 <SystemClock_Config+0xd0>)
 8005086:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800508a:	6413      	str	r3, [r2, #64]	@ 0x40
 800508c:	4b26      	ldr	r3, [pc, #152]	@ (8005128 <SystemClock_Config+0xd0>)
 800508e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005094:	607b      	str	r3, [r7, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005098:	2300      	movs	r3, #0
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	4b23      	ldr	r3, [pc, #140]	@ (800512c <SystemClock_Config+0xd4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a22      	ldr	r2, [pc, #136]	@ (800512c <SystemClock_Config+0xd4>)
 80050a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050a6:	6013      	str	r3, [r2, #0]
 80050a8:	4b20      	ldr	r3, [pc, #128]	@ (800512c <SystemClock_Config+0xd4>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80050b0:	603b      	str	r3, [r7, #0]
 80050b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80050b4:	2301      	movs	r3, #1
 80050b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80050b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80050bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80050be:	2302      	movs	r3, #2
 80050c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80050c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80050c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80050c8:	2308      	movs	r3, #8
 80050ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80050cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80050d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80050d2:	2302      	movs	r3, #2
 80050d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80050d6:	2302      	movs	r3, #2
 80050d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80050da:	2302      	movs	r3, #2
 80050dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80050de:	f107 031c 	add.w	r3, r7, #28
 80050e2:	4618      	mov	r0, r3
 80050e4:	f006 fca0 	bl	800ba28 <HAL_RCC_OscConfig>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80050ee:	f000 fcb7 	bl	8005a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80050f2:	230f      	movs	r3, #15
 80050f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80050f6:	2302      	movs	r3, #2
 80050f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80050fa:	2300      	movs	r3, #0
 80050fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80050fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005102:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005108:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800510a:	f107 0308 	add.w	r3, r7, #8
 800510e:	2105      	movs	r1, #5
 8005110:	4618      	mov	r0, r3
 8005112:	f006 f93f 	bl	800b394 <HAL_RCC_ClockConfig>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800511c:	f000 fca0 	bl	8005a60 <Error_Handler>
  }
}
 8005120:	bf00      	nop
 8005122:	3750      	adds	r7, #80	@ 0x50
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40023800 	.word	0x40023800
 800512c:	40007000 	.word	0x40007000

08005130 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005136:	463b      	mov	r3, r7
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	605a      	str	r2, [r3, #4]
 800513e:	609a      	str	r2, [r3, #8]
 8005140:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005142:	4b21      	ldr	r3, [pc, #132]	@ (80051c8 <MX_ADC1_Init+0x98>)
 8005144:	4a21      	ldr	r2, [pc, #132]	@ (80051cc <MX_ADC1_Init+0x9c>)
 8005146:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005148:	4b1f      	ldr	r3, [pc, #124]	@ (80051c8 <MX_ADC1_Init+0x98>)
 800514a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800514e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005150:	4b1d      	ldr	r3, [pc, #116]	@ (80051c8 <MX_ADC1_Init+0x98>)
 8005152:	2200      	movs	r2, #0
 8005154:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8005156:	4b1c      	ldr	r3, [pc, #112]	@ (80051c8 <MX_ADC1_Init+0x98>)
 8005158:	2200      	movs	r2, #0
 800515a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800515c:	4b1a      	ldr	r3, [pc, #104]	@ (80051c8 <MX_ADC1_Init+0x98>)
 800515e:	2201      	movs	r2, #1
 8005160:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005162:	4b19      	ldr	r3, [pc, #100]	@ (80051c8 <MX_ADC1_Init+0x98>)
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800516a:	4b17      	ldr	r3, [pc, #92]	@ (80051c8 <MX_ADC1_Init+0x98>)
 800516c:	2200      	movs	r2, #0
 800516e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005170:	4b15      	ldr	r3, [pc, #84]	@ (80051c8 <MX_ADC1_Init+0x98>)
 8005172:	4a17      	ldr	r2, [pc, #92]	@ (80051d0 <MX_ADC1_Init+0xa0>)
 8005174:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005176:	4b14      	ldr	r3, [pc, #80]	@ (80051c8 <MX_ADC1_Init+0x98>)
 8005178:	2200      	movs	r2, #0
 800517a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800517c:	4b12      	ldr	r3, [pc, #72]	@ (80051c8 <MX_ADC1_Init+0x98>)
 800517e:	2201      	movs	r2, #1
 8005180:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005182:	4b11      	ldr	r3, [pc, #68]	@ (80051c8 <MX_ADC1_Init+0x98>)
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800518a:	4b0f      	ldr	r3, [pc, #60]	@ (80051c8 <MX_ADC1_Init+0x98>)
 800518c:	2201      	movs	r2, #1
 800518e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005190:	480d      	ldr	r0, [pc, #52]	@ (80051c8 <MX_ADC1_Init+0x98>)
 8005192:	f003 fc6d 	bl	8008a70 <HAL_ADC_Init>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800519c:	f000 fc60 	bl	8005a60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80051a0:	2309      	movs	r3, #9
 80051a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80051a4:	2301      	movs	r3, #1
 80051a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80051a8:	2307      	movs	r3, #7
 80051aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80051ac:	463b      	mov	r3, r7
 80051ae:	4619      	mov	r1, r3
 80051b0:	4805      	ldr	r0, [pc, #20]	@ (80051c8 <MX_ADC1_Init+0x98>)
 80051b2:	f003 fdd3 	bl	8008d5c <HAL_ADC_ConfigChannel>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80051bc:	f000 fc50 	bl	8005a60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80051c0:	bf00      	nop
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	2000111c 	.word	0x2000111c
 80051cc:	40012000 	.word	0x40012000
 80051d0:	0f000001 	.word	0x0f000001

080051d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80051da:	463b      	mov	r3, r7
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	605a      	str	r2, [r3, #4]
 80051e2:	609a      	str	r2, [r3, #8]
 80051e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80051e6:	4b21      	ldr	r3, [pc, #132]	@ (800526c <MX_ADC2_Init+0x98>)
 80051e8:	4a21      	ldr	r2, [pc, #132]	@ (8005270 <MX_ADC2_Init+0x9c>)
 80051ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80051ec:	4b1f      	ldr	r3, [pc, #124]	@ (800526c <MX_ADC2_Init+0x98>)
 80051ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80051f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80051f4:	4b1d      	ldr	r3, [pc, #116]	@ (800526c <MX_ADC2_Init+0x98>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80051fa:	4b1c      	ldr	r3, [pc, #112]	@ (800526c <MX_ADC2_Init+0x98>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005200:	4b1a      	ldr	r3, [pc, #104]	@ (800526c <MX_ADC2_Init+0x98>)
 8005202:	2201      	movs	r2, #1
 8005204:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005206:	4b19      	ldr	r3, [pc, #100]	@ (800526c <MX_ADC2_Init+0x98>)
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800520e:	4b17      	ldr	r3, [pc, #92]	@ (800526c <MX_ADC2_Init+0x98>)
 8005210:	2200      	movs	r2, #0
 8005212:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005214:	4b15      	ldr	r3, [pc, #84]	@ (800526c <MX_ADC2_Init+0x98>)
 8005216:	4a17      	ldr	r2, [pc, #92]	@ (8005274 <MX_ADC2_Init+0xa0>)
 8005218:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800521a:	4b14      	ldr	r3, [pc, #80]	@ (800526c <MX_ADC2_Init+0x98>)
 800521c:	2200      	movs	r2, #0
 800521e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8005220:	4b12      	ldr	r3, [pc, #72]	@ (800526c <MX_ADC2_Init+0x98>)
 8005222:	2201      	movs	r2, #1
 8005224:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005226:	4b11      	ldr	r3, [pc, #68]	@ (800526c <MX_ADC2_Init+0x98>)
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800522e:	4b0f      	ldr	r3, [pc, #60]	@ (800526c <MX_ADC2_Init+0x98>)
 8005230:	2201      	movs	r2, #1
 8005232:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005234:	480d      	ldr	r0, [pc, #52]	@ (800526c <MX_ADC2_Init+0x98>)
 8005236:	f003 fc1b 	bl	8008a70 <HAL_ADC_Init>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005240:	f000 fc0e 	bl	8005a60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005244:	2308      	movs	r3, #8
 8005246:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005248:	2301      	movs	r3, #1
 800524a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800524c:	2307      	movs	r3, #7
 800524e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005250:	463b      	mov	r3, r7
 8005252:	4619      	mov	r1, r3
 8005254:	4805      	ldr	r0, [pc, #20]	@ (800526c <MX_ADC2_Init+0x98>)
 8005256:	f003 fd81 	bl	8008d5c <HAL_ADC_ConfigChannel>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005260:	f000 fbfe 	bl	8005a60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	20001164 	.word	0x20001164
 8005270:	40012100 	.word	0x40012100
 8005274:	0f000001 	.word	0x0f000001

08005278 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800527c:	4b12      	ldr	r3, [pc, #72]	@ (80052c8 <MX_I2C1_Init+0x50>)
 800527e:	4a13      	ldr	r2, [pc, #76]	@ (80052cc <MX_I2C1_Init+0x54>)
 8005280:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005282:	4b11      	ldr	r3, [pc, #68]	@ (80052c8 <MX_I2C1_Init+0x50>)
 8005284:	4a12      	ldr	r2, [pc, #72]	@ (80052d0 <MX_I2C1_Init+0x58>)
 8005286:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005288:	4b0f      	ldr	r3, [pc, #60]	@ (80052c8 <MX_I2C1_Init+0x50>)
 800528a:	2200      	movs	r2, #0
 800528c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800528e:	4b0e      	ldr	r3, [pc, #56]	@ (80052c8 <MX_I2C1_Init+0x50>)
 8005290:	2200      	movs	r2, #0
 8005292:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005294:	4b0c      	ldr	r3, [pc, #48]	@ (80052c8 <MX_I2C1_Init+0x50>)
 8005296:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800529a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800529c:	4b0a      	ldr	r3, [pc, #40]	@ (80052c8 <MX_I2C1_Init+0x50>)
 800529e:	2200      	movs	r2, #0
 80052a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80052a2:	4b09      	ldr	r3, [pc, #36]	@ (80052c8 <MX_I2C1_Init+0x50>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80052a8:	4b07      	ldr	r3, [pc, #28]	@ (80052c8 <MX_I2C1_Init+0x50>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80052ae:	4b06      	ldr	r3, [pc, #24]	@ (80052c8 <MX_I2C1_Init+0x50>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80052b4:	4804      	ldr	r0, [pc, #16]	@ (80052c8 <MX_I2C1_Init+0x50>)
 80052b6:	f005 f819 	bl	800a2ec <HAL_I2C_Init>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80052c0:	f000 fbce 	bl	8005a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80052c4:	bf00      	nop
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	2000126c 	.word	0x2000126c
 80052cc:	40005400 	.word	0x40005400
 80052d0:	000186a0 	.word	0x000186a0

080052d4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80052d8:	4b12      	ldr	r3, [pc, #72]	@ (8005324 <MX_I2C3_Init+0x50>)
 80052da:	4a13      	ldr	r2, [pc, #76]	@ (8005328 <MX_I2C3_Init+0x54>)
 80052dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80052de:	4b11      	ldr	r3, [pc, #68]	@ (8005324 <MX_I2C3_Init+0x50>)
 80052e0:	4a12      	ldr	r2, [pc, #72]	@ (800532c <MX_I2C3_Init+0x58>)
 80052e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80052e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005324 <MX_I2C3_Init+0x50>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80052ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005324 <MX_I2C3_Init+0x50>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005324 <MX_I2C3_Init+0x50>)
 80052f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80052f6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80052f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005324 <MX_I2C3_Init+0x50>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80052fe:	4b09      	ldr	r3, [pc, #36]	@ (8005324 <MX_I2C3_Init+0x50>)
 8005300:	2200      	movs	r2, #0
 8005302:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005304:	4b07      	ldr	r3, [pc, #28]	@ (8005324 <MX_I2C3_Init+0x50>)
 8005306:	2200      	movs	r2, #0
 8005308:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800530a:	4b06      	ldr	r3, [pc, #24]	@ (8005324 <MX_I2C3_Init+0x50>)
 800530c:	2200      	movs	r2, #0
 800530e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005310:	4804      	ldr	r0, [pc, #16]	@ (8005324 <MX_I2C3_Init+0x50>)
 8005312:	f004 ffeb 	bl	800a2ec <HAL_I2C_Init>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800531c:	f000 fba0 	bl	8005a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005320:	bf00      	nop
 8005322:	bd80      	pop	{r7, pc}
 8005324:	200012c0 	.word	0x200012c0
 8005328:	40005c00 	.word	0x40005c00
 800532c:	000186a0 	.word	0x000186a0

08005330 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005336:	f107 0308 	add.w	r3, r7, #8
 800533a:	2200      	movs	r2, #0
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	605a      	str	r2, [r3, #4]
 8005340:	609a      	str	r2, [r3, #8]
 8005342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005344:	463b      	mov	r3, r7
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800534c:	4b1e      	ldr	r3, [pc, #120]	@ (80053c8 <MX_TIM2_Init+0x98>)
 800534e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005352:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 8005354:	4b1c      	ldr	r3, [pc, #112]	@ (80053c8 <MX_TIM2_Init+0x98>)
 8005356:	f242 3227 	movw	r2, #8999	@ 0x2327
 800535a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800535c:	4b1a      	ldr	r3, [pc, #104]	@ (80053c8 <MX_TIM2_Init+0x98>)
 800535e:	2200      	movs	r2, #0
 8005360:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8005362:	4b19      	ldr	r3, [pc, #100]	@ (80053c8 <MX_TIM2_Init+0x98>)
 8005364:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005368:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800536a:	4b17      	ldr	r3, [pc, #92]	@ (80053c8 <MX_TIM2_Init+0x98>)
 800536c:	2200      	movs	r2, #0
 800536e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005370:	4b15      	ldr	r3, [pc, #84]	@ (80053c8 <MX_TIM2_Init+0x98>)
 8005372:	2200      	movs	r2, #0
 8005374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005376:	4814      	ldr	r0, [pc, #80]	@ (80053c8 <MX_TIM2_Init+0x98>)
 8005378:	f006 fdf4 	bl	800bf64 <HAL_TIM_Base_Init>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005382:	f000 fb6d 	bl	8005a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005386:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800538a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800538c:	f107 0308 	add.w	r3, r7, #8
 8005390:	4619      	mov	r1, r3
 8005392:	480d      	ldr	r0, [pc, #52]	@ (80053c8 <MX_TIM2_Init+0x98>)
 8005394:	f006 ff96 	bl	800c2c4 <HAL_TIM_ConfigClockSource>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800539e:	f000 fb5f 	bl	8005a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053a2:	2300      	movs	r3, #0
 80053a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053a6:	2300      	movs	r3, #0
 80053a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80053aa:	463b      	mov	r3, r7
 80053ac:	4619      	mov	r1, r3
 80053ae:	4806      	ldr	r0, [pc, #24]	@ (80053c8 <MX_TIM2_Init+0x98>)
 80053b0:	f007 f9b8 	bl	800c724 <HAL_TIMEx_MasterConfigSynchronization>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80053ba:	f000 fb51 	bl	8005a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80053be:	bf00      	nop
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20001314 	.word	0x20001314

080053cc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80053d0:	4b11      	ldr	r3, [pc, #68]	@ (8005418 <MX_UART4_Init+0x4c>)
 80053d2:	4a12      	ldr	r2, [pc, #72]	@ (800541c <MX_UART4_Init+0x50>)
 80053d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80053d6:	4b10      	ldr	r3, [pc, #64]	@ (8005418 <MX_UART4_Init+0x4c>)
 80053d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80053dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80053de:	4b0e      	ldr	r3, [pc, #56]	@ (8005418 <MX_UART4_Init+0x4c>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80053e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005418 <MX_UART4_Init+0x4c>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80053ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005418 <MX_UART4_Init+0x4c>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80053f0:	4b09      	ldr	r3, [pc, #36]	@ (8005418 <MX_UART4_Init+0x4c>)
 80053f2:	220c      	movs	r2, #12
 80053f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053f6:	4b08      	ldr	r3, [pc, #32]	@ (8005418 <MX_UART4_Init+0x4c>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80053fc:	4b06      	ldr	r3, [pc, #24]	@ (8005418 <MX_UART4_Init+0x4c>)
 80053fe:	2200      	movs	r2, #0
 8005400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005402:	4805      	ldr	r0, [pc, #20]	@ (8005418 <MX_UART4_Init+0x4c>)
 8005404:	f007 fa1e 	bl	800c844 <HAL_UART_Init>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800540e:	f000 fb27 	bl	8005a60 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005412:	bf00      	nop
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	2000135c 	.word	0x2000135c
 800541c:	40004c00 	.word	0x40004c00

08005420 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005424:	4b11      	ldr	r3, [pc, #68]	@ (800546c <MX_UART5_Init+0x4c>)
 8005426:	4a12      	ldr	r2, [pc, #72]	@ (8005470 <MX_UART5_Init+0x50>)
 8005428:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800542a:	4b10      	ldr	r3, [pc, #64]	@ (800546c <MX_UART5_Init+0x4c>)
 800542c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8005430:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005432:	4b0e      	ldr	r3, [pc, #56]	@ (800546c <MX_UART5_Init+0x4c>)
 8005434:	2200      	movs	r2, #0
 8005436:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005438:	4b0c      	ldr	r3, [pc, #48]	@ (800546c <MX_UART5_Init+0x4c>)
 800543a:	2200      	movs	r2, #0
 800543c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800543e:	4b0b      	ldr	r3, [pc, #44]	@ (800546c <MX_UART5_Init+0x4c>)
 8005440:	2200      	movs	r2, #0
 8005442:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005444:	4b09      	ldr	r3, [pc, #36]	@ (800546c <MX_UART5_Init+0x4c>)
 8005446:	220c      	movs	r2, #12
 8005448:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800544a:	4b08      	ldr	r3, [pc, #32]	@ (800546c <MX_UART5_Init+0x4c>)
 800544c:	2200      	movs	r2, #0
 800544e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005450:	4b06      	ldr	r3, [pc, #24]	@ (800546c <MX_UART5_Init+0x4c>)
 8005452:	2200      	movs	r2, #0
 8005454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005456:	4805      	ldr	r0, [pc, #20]	@ (800546c <MX_UART5_Init+0x4c>)
 8005458:	f007 f9f4 	bl	800c844 <HAL_UART_Init>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8005462:	f000 fafd 	bl	8005a60 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005466:	bf00      	nop
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	200013a4 	.word	0x200013a4
 8005470:	40005000 	.word	0x40005000

08005474 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005478:	4b11      	ldr	r3, [pc, #68]	@ (80054c0 <MX_USART1_UART_Init+0x4c>)
 800547a:	4a12      	ldr	r2, [pc, #72]	@ (80054c4 <MX_USART1_UART_Init+0x50>)
 800547c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800547e:	4b10      	ldr	r3, [pc, #64]	@ (80054c0 <MX_USART1_UART_Init+0x4c>)
 8005480:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005484:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005486:	4b0e      	ldr	r3, [pc, #56]	@ (80054c0 <MX_USART1_UART_Init+0x4c>)
 8005488:	2200      	movs	r2, #0
 800548a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800548c:	4b0c      	ldr	r3, [pc, #48]	@ (80054c0 <MX_USART1_UART_Init+0x4c>)
 800548e:	2200      	movs	r2, #0
 8005490:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005492:	4b0b      	ldr	r3, [pc, #44]	@ (80054c0 <MX_USART1_UART_Init+0x4c>)
 8005494:	2200      	movs	r2, #0
 8005496:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005498:	4b09      	ldr	r3, [pc, #36]	@ (80054c0 <MX_USART1_UART_Init+0x4c>)
 800549a:	220c      	movs	r2, #12
 800549c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800549e:	4b08      	ldr	r3, [pc, #32]	@ (80054c0 <MX_USART1_UART_Init+0x4c>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80054a4:	4b06      	ldr	r3, [pc, #24]	@ (80054c0 <MX_USART1_UART_Init+0x4c>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80054aa:	4805      	ldr	r0, [pc, #20]	@ (80054c0 <MX_USART1_UART_Init+0x4c>)
 80054ac:	f007 f9ca 	bl	800c844 <HAL_UART_Init>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80054b6:	f000 fad3 	bl	8005a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80054ba:	bf00      	nop
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	200013ec 	.word	0x200013ec
 80054c4:	40011000 	.word	0x40011000

080054c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80054cc:	4b11      	ldr	r3, [pc, #68]	@ (8005514 <MX_USART2_UART_Init+0x4c>)
 80054ce:	4a12      	ldr	r2, [pc, #72]	@ (8005518 <MX_USART2_UART_Init+0x50>)
 80054d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80054d2:	4b10      	ldr	r3, [pc, #64]	@ (8005514 <MX_USART2_UART_Init+0x4c>)
 80054d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80054d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80054da:	4b0e      	ldr	r3, [pc, #56]	@ (8005514 <MX_USART2_UART_Init+0x4c>)
 80054dc:	2200      	movs	r2, #0
 80054de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80054e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005514 <MX_USART2_UART_Init+0x4c>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80054e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005514 <MX_USART2_UART_Init+0x4c>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80054ec:	4b09      	ldr	r3, [pc, #36]	@ (8005514 <MX_USART2_UART_Init+0x4c>)
 80054ee:	220c      	movs	r2, #12
 80054f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054f2:	4b08      	ldr	r3, [pc, #32]	@ (8005514 <MX_USART2_UART_Init+0x4c>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80054f8:	4b06      	ldr	r3, [pc, #24]	@ (8005514 <MX_USART2_UART_Init+0x4c>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80054fe:	4805      	ldr	r0, [pc, #20]	@ (8005514 <MX_USART2_UART_Init+0x4c>)
 8005500:	f007 f9a0 	bl	800c844 <HAL_UART_Init>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800550a:	f000 faa9 	bl	8005a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800550e:	bf00      	nop
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20001434 	.word	0x20001434
 8005518:	40004400 	.word	0x40004400

0800551c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005522:	2300      	movs	r3, #0
 8005524:	607b      	str	r3, [r7, #4]
 8005526:	4b23      	ldr	r3, [pc, #140]	@ (80055b4 <MX_DMA_Init+0x98>)
 8005528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552a:	4a22      	ldr	r2, [pc, #136]	@ (80055b4 <MX_DMA_Init+0x98>)
 800552c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005530:	6313      	str	r3, [r2, #48]	@ 0x30
 8005532:	4b20      	ldr	r3, [pc, #128]	@ (80055b4 <MX_DMA_Init+0x98>)
 8005534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800553a:	607b      	str	r3, [r7, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800553e:	2300      	movs	r3, #0
 8005540:	603b      	str	r3, [r7, #0]
 8005542:	4b1c      	ldr	r3, [pc, #112]	@ (80055b4 <MX_DMA_Init+0x98>)
 8005544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005546:	4a1b      	ldr	r2, [pc, #108]	@ (80055b4 <MX_DMA_Init+0x98>)
 8005548:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800554c:	6313      	str	r3, [r2, #48]	@ 0x30
 800554e:	4b19      	ldr	r3, [pc, #100]	@ (80055b4 <MX_DMA_Init+0x98>)
 8005550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005552:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800555a:	2200      	movs	r2, #0
 800555c:	2100      	movs	r1, #0
 800555e:	200b      	movs	r0, #11
 8005560:	f003 ffab 	bl	80094ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005564:	200b      	movs	r0, #11
 8005566:	f003 ffc4 	bl	80094f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800556a:	2200      	movs	r2, #0
 800556c:	2100      	movs	r1, #0
 800556e:	200d      	movs	r0, #13
 8005570:	f003 ffa3 	bl	80094ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8005574:	200d      	movs	r0, #13
 8005576:	f003 ffbc 	bl	80094f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800557a:	2200      	movs	r2, #0
 800557c:	2100      	movs	r1, #0
 800557e:	200f      	movs	r0, #15
 8005580:	f003 ff9b 	bl	80094ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005584:	200f      	movs	r0, #15
 8005586:	f003 ffb4 	bl	80094f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800558a:	2200      	movs	r2, #0
 800558c:	2100      	movs	r1, #0
 800558e:	2038      	movs	r0, #56	@ 0x38
 8005590:	f003 ff93 	bl	80094ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005594:	2038      	movs	r0, #56	@ 0x38
 8005596:	f003 ffac 	bl	80094f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800559a:	2200      	movs	r2, #0
 800559c:	2100      	movs	r1, #0
 800559e:	203b      	movs	r0, #59	@ 0x3b
 80055a0:	f003 ff8b 	bl	80094ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80055a4:	203b      	movs	r0, #59	@ 0x3b
 80055a6:	f003 ffa4 	bl	80094f2 <HAL_NVIC_EnableIRQ>

}
 80055aa:	bf00      	nop
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	40023800 	.word	0x40023800

080055b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	@ 0x28
 80055bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055be:	f107 0314 	add.w	r3, r7, #20
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	605a      	str	r2, [r3, #4]
 80055c8:	609a      	str	r2, [r3, #8]
 80055ca:	60da      	str	r2, [r3, #12]
 80055cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80055ce:	2300      	movs	r3, #0
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	4b68      	ldr	r3, [pc, #416]	@ (8005774 <MX_GPIO_Init+0x1bc>)
 80055d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d6:	4a67      	ldr	r2, [pc, #412]	@ (8005774 <MX_GPIO_Init+0x1bc>)
 80055d8:	f043 0304 	orr.w	r3, r3, #4
 80055dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80055de:	4b65      	ldr	r3, [pc, #404]	@ (8005774 <MX_GPIO_Init+0x1bc>)
 80055e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80055ea:	2300      	movs	r3, #0
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	4b61      	ldr	r3, [pc, #388]	@ (8005774 <MX_GPIO_Init+0x1bc>)
 80055f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f2:	4a60      	ldr	r2, [pc, #384]	@ (8005774 <MX_GPIO_Init+0x1bc>)
 80055f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80055fa:	4b5e      	ldr	r3, [pc, #376]	@ (8005774 <MX_GPIO_Init+0x1bc>)
 80055fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005606:	2300      	movs	r3, #0
 8005608:	60bb      	str	r3, [r7, #8]
 800560a:	4b5a      	ldr	r3, [pc, #360]	@ (8005774 <MX_GPIO_Init+0x1bc>)
 800560c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560e:	4a59      	ldr	r2, [pc, #356]	@ (8005774 <MX_GPIO_Init+0x1bc>)
 8005610:	f043 0301 	orr.w	r3, r3, #1
 8005614:	6313      	str	r3, [r2, #48]	@ 0x30
 8005616:	4b57      	ldr	r3, [pc, #348]	@ (8005774 <MX_GPIO_Init+0x1bc>)
 8005618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	60bb      	str	r3, [r7, #8]
 8005620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005622:	2300      	movs	r3, #0
 8005624:	607b      	str	r3, [r7, #4]
 8005626:	4b53      	ldr	r3, [pc, #332]	@ (8005774 <MX_GPIO_Init+0x1bc>)
 8005628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562a:	4a52      	ldr	r2, [pc, #328]	@ (8005774 <MX_GPIO_Init+0x1bc>)
 800562c:	f043 0302 	orr.w	r3, r3, #2
 8005630:	6313      	str	r3, [r2, #48]	@ 0x30
 8005632:	4b50      	ldr	r3, [pc, #320]	@ (8005774 <MX_GPIO_Init+0x1bc>)
 8005634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	607b      	str	r3, [r7, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800563e:	2300      	movs	r3, #0
 8005640:	603b      	str	r3, [r7, #0]
 8005642:	4b4c      	ldr	r3, [pc, #304]	@ (8005774 <MX_GPIO_Init+0x1bc>)
 8005644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005646:	4a4b      	ldr	r2, [pc, #300]	@ (8005774 <MX_GPIO_Init+0x1bc>)
 8005648:	f043 0308 	orr.w	r3, r3, #8
 800564c:	6313      	str	r3, [r2, #48]	@ 0x30
 800564e:	4b49      	ldr	r3, [pc, #292]	@ (8005774 <MX_GPIO_Init+0x1bc>)
 8005650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005652:	f003 0308 	and.w	r3, r3, #8
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RF_M0_Pin|RF_M1_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 800565a:	2200      	movs	r2, #0
 800565c:	f640 0103 	movw	r1, #2051	@ 0x803
 8005660:	4845      	ldr	r0, [pc, #276]	@ (8005778 <MX_GPIO_Init+0x1c0>)
 8005662:	f004 fe11 	bl	800a288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SGU_LED2_Pin|SGU_LED1_Pin, GPIO_PIN_RESET);
 8005666:	2200      	movs	r2, #0
 8005668:	f240 4104 	movw	r1, #1028	@ 0x404
 800566c:	4843      	ldr	r0, [pc, #268]	@ (800577c <MX_GPIO_Init+0x1c4>)
 800566e:	f004 fe0b 	bl	800a288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8005672:	2201      	movs	r2, #1
 8005674:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005678:	4840      	ldr	r0, [pc, #256]	@ (800577c <MX_GPIO_Init+0x1c4>)
 800567a:	f004 fe05 	bl	800a288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|MCU_LED_Pin, GPIO_PIN_RESET);
 800567e:	2200      	movs	r2, #0
 8005680:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8005684:	483e      	ldr	r0, [pc, #248]	@ (8005780 <MX_GPIO_Init+0x1c8>)
 8005686:	f004 fdff 	bl	800a288 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STATUS1_Pin STATUS2_Pin */
  GPIO_InitStruct.Pin = STATUS1_Pin|STATUS2_Pin;
 800568a:	2321      	movs	r3, #33	@ 0x21
 800568c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800568e:	2300      	movs	r3, #0
 8005690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005692:	2300      	movs	r3, #0
 8005694:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005696:	f107 0314 	add.w	r3, r7, #20
 800569a:	4619      	mov	r1, r3
 800569c:	4838      	ldr	r0, [pc, #224]	@ (8005780 <MX_GPIO_Init+0x1c8>)
 800569e:	f004 fb53 	bl	8009d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_M0_Pin RF_M1_Pin PA11 */
  GPIO_InitStruct.Pin = RF_M0_Pin|RF_M1_Pin|GPIO_PIN_11;
 80056a2:	f640 0303 	movw	r3, #2051	@ 0x803
 80056a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056a8:	2301      	movs	r3, #1
 80056aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056b0:	2300      	movs	r3, #0
 80056b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056b4:	f107 0314 	add.w	r3, r7, #20
 80056b8:	4619      	mov	r1, r3
 80056ba:	482f      	ldr	r0, [pc, #188]	@ (8005778 <MX_GPIO_Init+0x1c0>)
 80056bc:	f004 fb44 	bl	8009d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : SGU_LED2_Pin SGU_LED1_Pin PB14 */
  GPIO_InitStruct.Pin = SGU_LED2_Pin|SGU_LED1_Pin|GPIO_PIN_14;
 80056c0:	f244 4304 	movw	r3, #17412	@ 0x4404
 80056c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056c6:	2301      	movs	r3, #1
 80056c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ce:	2300      	movs	r3, #0
 80056d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056d2:	f107 0314 	add.w	r3, r7, #20
 80056d6:	4619      	mov	r1, r3
 80056d8:	4828      	ldr	r0, [pc, #160]	@ (800577c <MX_GPIO_Init+0x1c4>)
 80056da:	f004 fb35 	bl	8009d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80056de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80056e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80056e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80056e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056ee:	f107 0314 	add.w	r3, r7, #20
 80056f2:	4619      	mov	r1, r3
 80056f4:	4821      	ldr	r0, [pc, #132]	@ (800577c <MX_GPIO_Init+0x1c4>)
 80056f6:	f004 fb27 	bl	8009d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 MCU_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|MCU_LED_Pin;
 80056fa:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80056fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005700:	2301      	movs	r3, #1
 8005702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005704:	2300      	movs	r3, #0
 8005706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005708:	2300      	movs	r3, #0
 800570a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800570c:	f107 0314 	add.w	r3, r7, #20
 8005710:	4619      	mov	r1, r3
 8005712:	481b      	ldr	r0, [pc, #108]	@ (8005780 <MX_GPIO_Init+0x1c8>)
 8005714:	f004 fb18 	bl	8009d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005718:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800571c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800571e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005724:	2300      	movs	r3, #0
 8005726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005728:	f107 0314 	add.w	r3, r7, #20
 800572c:	4619      	mov	r1, r3
 800572e:	4812      	ldr	r0, [pc, #72]	@ (8005778 <MX_GPIO_Init+0x1c0>)
 8005730:	f004 fb0a 	bl	8009d48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005734:	2200      	movs	r2, #0
 8005736:	2100      	movs	r1, #0
 8005738:	2028      	movs	r0, #40	@ 0x28
 800573a:	f003 febe 	bl	80094ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800573e:	2028      	movs	r0, #40	@ 0x28
 8005740:	f003 fed7 	bl	80094f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8005744:	2200      	movs	r2, #0
 8005746:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800574a:	480c      	ldr	r0, [pc, #48]	@ (800577c <MX_GPIO_Init+0x1c4>)
 800574c:	f004 fd9c 	bl	800a288 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8005750:	2032      	movs	r0, #50	@ 0x32
 8005752:	f003 f969 	bl	8008a28 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8005756:	2201      	movs	r2, #1
 8005758:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800575c:	4807      	ldr	r0, [pc, #28]	@ (800577c <MX_GPIO_Init+0x1c4>)
 800575e:	f004 fd93 	bl	800a288 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8005762:	2032      	movs	r0, #50	@ 0x32
 8005764:	f003 f960 	bl	8008a28 <HAL_Delay>
  L86_GPIO_Init();
 8005768:	f000 f94e 	bl	8005a08 <L86_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 800576c:	bf00      	nop
 800576e:	3728      	adds	r7, #40	@ 0x28
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40023800 	.word	0x40023800
 8005778:	40020000 	.word	0x40020000
 800577c:	40020400 	.word	0x40020400
 8005780:	40020800 	.word	0x40020800

08005784 <bme280_begin>:

/* USER CODE BEGIN 4 */
void bme280_begin()
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
	BME280_sensor.device_config.bme280_filter = 			BME280_FILTER_8;
 8005788:	4b08      	ldr	r3, [pc, #32]	@ (80057ac <bme280_begin+0x28>)
 800578a:	2203      	movs	r2, #3
 800578c:	711a      	strb	r2, [r3, #4]
	BME280_sensor.device_config.bme280_mode =				BME280_MODE_NORMAL;
 800578e:	4b07      	ldr	r3, [pc, #28]	@ (80057ac <bme280_begin+0x28>)
 8005790:	2203      	movs	r2, #3
 8005792:	715a      	strb	r2, [r3, #5]
	BME280_sensor.device_config.bme280_output_speed =		BME280_OS_8;
 8005794:	4b05      	ldr	r3, [pc, #20]	@ (80057ac <bme280_begin+0x28>)
 8005796:	2204      	movs	r2, #4
 8005798:	719a      	strb	r2, [r3, #6]
	BME280_sensor.device_config.bme280_standby_time = 		BME280_STBY_20;
 800579a:	4b04      	ldr	r3, [pc, #16]	@ (80057ac <bme280_begin+0x28>)
 800579c:	2207      	movs	r2, #7
 800579e:	71da      	strb	r2, [r3, #7]
	bme280_init(&BME280_sensor, &hi2c1);
 80057a0:	4903      	ldr	r1, [pc, #12]	@ (80057b0 <bme280_begin+0x2c>)
 80057a2:	4802      	ldr	r0, [pc, #8]	@ (80057ac <bme280_begin+0x28>)
 80057a4:	f7fc f824 	bl	80017f0 <bme280_init>

}
 80057a8:	bf00      	nop
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	2000159c 	.word	0x2000159c
 80057b0:	2000126c 	.word	0x2000126c

080057b4 <bmi_imu_init>:

//BMI sensor struct filled with configuration settings. Then called bmi088_init function.
uint8_t bmi_imu_init(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
	//Acc config
	BMI_sensor.device_config.acc_bandwith = ACC_BWP_OSR4;
 80057b8:	4b13      	ldr	r3, [pc, #76]	@ (8005808 <bmi_imu_init+0x54>)
 80057ba:	2208      	movs	r2, #8
 80057bc:	719a      	strb	r2, [r3, #6]
	BMI_sensor.device_config.acc_outputDateRate = ACC_ODR_200;
 80057be:	4b12      	ldr	r3, [pc, #72]	@ (8005808 <bmi_imu_init+0x54>)
 80057c0:	2209      	movs	r2, #9
 80057c2:	71da      	strb	r2, [r3, #7]
	BMI_sensor.device_config.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 80057c4:	4b10      	ldr	r3, [pc, #64]	@ (8005808 <bmi_imu_init+0x54>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	711a      	strb	r2, [r3, #4]
	BMI_sensor.device_config.acc_range = ACC_RANGE_24G;
 80057ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005808 <bmi_imu_init+0x54>)
 80057cc:	2203      	movs	r2, #3
 80057ce:	715a      	strb	r2, [r3, #5]

	// Gyro config
	BMI_sensor.device_config.gyro_bandWidth = GYRO_BW_116;
 80057d0:	4b0d      	ldr	r3, [pc, #52]	@ (8005808 <bmi_imu_init+0x54>)
 80057d2:	2202      	movs	r2, #2
 80057d4:	725a      	strb	r2, [r3, #9]
	BMI_sensor.device_config.gyro_range = GYRO_RANGE_2000;
 80057d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005808 <bmi_imu_init+0x54>)
 80057d8:	2200      	movs	r2, #0
 80057da:	729a      	strb	r2, [r3, #10]
	BMI_sensor.device_config.gyro_powerMode = GYRO_LPM_NORMAL;
 80057dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005808 <bmi_imu_init+0x54>)
 80057de:	2200      	movs	r2, #0
 80057e0:	721a      	strb	r2, [r3, #8]

	BMI_sensor.device_config.acc_IRQ = EXTI15_10_IRQn;
 80057e2:	4b09      	ldr	r3, [pc, #36]	@ (8005808 <bmi_imu_init+0x54>)
 80057e4:	2228      	movs	r2, #40	@ 0x28
 80057e6:	741a      	strb	r2, [r3, #16]
	BMI_sensor.device_config.gyro_IRQ = EXTI15_10_IRQn;
 80057e8:	4b07      	ldr	r3, [pc, #28]	@ (8005808 <bmi_imu_init+0x54>)
 80057ea:	2228      	movs	r2, #40	@ 0x28
 80057ec:	745a      	strb	r2, [r3, #17]
	BMI_sensor.device_config.BMI_I2c = &IMU_I2C_HNDLR;
 80057ee:	4b06      	ldr	r3, [pc, #24]	@ (8005808 <bmi_imu_init+0x54>)
 80057f0:	4a06      	ldr	r2, [pc, #24]	@ (800580c <bmi_imu_init+0x58>)
 80057f2:	60da      	str	r2, [r3, #12]
	BMI_sensor.device_config.offsets = NULL;	//Offset datas stored in backup sram for saving them unwanted reset.
 80057f4:	4b04      	ldr	r3, [pc, #16]	@ (8005808 <bmi_imu_init+0x54>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	615a      	str	r2, [r3, #20]

	return	bmi088_init(&BMI_sensor);
 80057fa:	4803      	ldr	r0, [pc, #12]	@ (8005808 <bmi_imu_init+0x54>)
 80057fc:	f7fc fc58 	bl	80020b0 <bmi088_init>
 8005800:	4603      	mov	r3, r0
}
 8005802:	4618      	mov	r0, r3
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	200015e0 	.word	0x200015e0
 800580c:	200012c0 	.word	0x200012c0

08005810 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	4603      	mov	r3, r0
 8005818:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_12)
 800581a:	88fb      	ldrh	r3, [r7, #6]
 800581c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005820:	d102      	bne.n	8005828 <HAL_GPIO_EXTI_Callback+0x18>
	{
		bmi088_set_accel_INT(&BMI_sensor);
 8005822:	4807      	ldr	r0, [pc, #28]	@ (8005840 <HAL_GPIO_EXTI_Callback+0x30>)
 8005824:	f7fd fa78 	bl	8002d18 <bmi088_set_accel_INT>
	}
	if(GPIO_Pin == GPIO_PIN_13)
 8005828:	88fb      	ldrh	r3, [r7, #6]
 800582a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800582e:	d102      	bne.n	8005836 <HAL_GPIO_EXTI_Callback+0x26>
	{
		bmi088_set_gyro_INT(&BMI_sensor);
 8005830:	4803      	ldr	r0, [pc, #12]	@ (8005840 <HAL_GPIO_EXTI_Callback+0x30>)
 8005832:	f7fd fa7e 	bl	8002d32 <bmi088_set_gyro_INT>
	}
}
 8005836:	bf00      	nop
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	200015e0 	.word	0x200015e0

08005844 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	460b      	mov	r3, r1
 800584e:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == UART4) {
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a0d      	ldr	r2, [pc, #52]	@ (800588c <HAL_UARTEx_RxEventCallback+0x48>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d114      	bne.n	8005884 <HAL_UARTEx_RxEventCallback+0x40>
        usart4_packet_ready = 1;
 800585a:	4b0d      	ldr	r3, [pc, #52]	@ (8005890 <HAL_UARTEx_RxEventCallback+0x4c>)
 800585c:	2201      	movs	r2, #1
 800585e:	701a      	strb	r2, [r3, #0]
        usart4_packet_size = Size;
 8005860:	4a0c      	ldr	r2, [pc, #48]	@ (8005894 <HAL_UARTEx_RxEventCallback+0x50>)
 8005862:	887b      	ldrh	r3, [r7, #2]
 8005864:	8013      	strh	r3, [r2, #0]
        // RX DMA'yı tekrar başlat
        HAL_UARTEx_ReceiveToIdle_DMA(&huart4, usart4_rx_buffer, sizeof(usart4_rx_buffer));
 8005866:	2224      	movs	r2, #36	@ 0x24
 8005868:	490b      	ldr	r1, [pc, #44]	@ (8005898 <HAL_UARTEx_RxEventCallback+0x54>)
 800586a:	480c      	ldr	r0, [pc, #48]	@ (800589c <HAL_UARTEx_RxEventCallback+0x58>)
 800586c:	f007 f967 	bl	800cb3e <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart4.hdmarx, DMA_IT_HT); // Half-transfer interrupt'ı devre dışı bırak
 8005870:	4b0a      	ldr	r3, [pc, #40]	@ (800589c <HAL_UARTEx_RxEventCallback+0x58>)
 8005872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	4b08      	ldr	r3, [pc, #32]	@ (800589c <HAL_UARTEx_RxEventCallback+0x58>)
 800587a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0208 	bic.w	r2, r2, #8
 8005882:	601a      	str	r2, [r3, #0]
    }
}
 8005884:	bf00      	nop
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40004c00 	.word	0x40004c00
 8005890:	200016dc 	.word	0x200016dc
 8005894:	200016de 	.word	0x200016de
 8005898:	20001690 	.word	0x20001690
 800589c:	2000135c 	.word	0x2000135c

080058a0 <HAL_TIM_PeriodElapsedCallback>:

// Timer 2 interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058b0:	d106      	bne.n	80058c0 <HAL_TIM_PeriodElapsedCallback+0x20>
        tx_timer_flag++;
 80058b2:	4b06      	ldr	r3, [pc, #24]	@ (80058cc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	3301      	adds	r3, #1
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	4b03      	ldr	r3, [pc, #12]	@ (80058cc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80058be:	701a      	strb	r2, [r3, #0]
    }
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	200016e0 	.word	0x200016e0

080058d0 <HAL_UART_TxCpltCallback>:

// USART1 TX DMA tamam callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a05      	ldr	r2, [pc, #20]	@ (80058f4 <HAL_UART_TxCpltCallback+0x24>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d102      	bne.n	80058e8 <HAL_UART_TxCpltCallback+0x18>
        usart4_tx_busy = 0;
 80058e2:	4b05      	ldr	r3, [pc, #20]	@ (80058f8 <HAL_UART_TxCpltCallback+0x28>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	701a      	strb	r2, [r3, #0]
    }
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	40004c00 	.word	0x40004c00
 80058f8:	200016e1 	.word	0x200016e1

080058fc <uart4_send_packet_dma>:

// USART1 TX DMA başlatma fonksiyonu
void uart4_send_packet_dma(uint8_t *data, uint16_t size)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	460b      	mov	r3, r1
 8005906:	807b      	strh	r3, [r7, #2]
    if (!usart4_tx_busy) {
 8005908:	4b08      	ldr	r3, [pc, #32]	@ (800592c <uart4_send_packet_dma+0x30>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d108      	bne.n	8005924 <uart4_send_packet_dma+0x28>
        usart4_tx_busy = 1;
 8005912:	4b06      	ldr	r3, [pc, #24]	@ (800592c <uart4_send_packet_dma+0x30>)
 8005914:	2201      	movs	r2, #1
 8005916:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_DMA(&huart4, data, size);
 8005918:	887b      	ldrh	r3, [r7, #2]
 800591a:	461a      	mov	r2, r3
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	4804      	ldr	r0, [pc, #16]	@ (8005930 <uart4_send_packet_dma+0x34>)
 8005920:	f007 f86c 	bl	800c9fc <HAL_UART_Transmit_DMA>
    }
}
 8005924:	bf00      	nop
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	200016e1 	.word	0x200016e1
 8005930:	2000135c 	.word	0x2000135c

08005934 <HSD_StatusCheck>:
	// Voltaj
	sprintf(uart_buffer,"Akim: %u  | Voltaj: %u \r\n", v_current_raw, v_voltage_raw);
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
}

void HSD_StatusCheck(){
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
	// PC0 pinini oku
	GPIO_PinState pc0_state = HAL_GPIO_ReadPin(STATUS1_GPIO_Port, STATUS1_Pin);
 800593a:	2101      	movs	r1, #1
 800593c:	4816      	ldr	r0, [pc, #88]	@ (8005998 <HSD_StatusCheck+0x64>)
 800593e:	f004 fc8b 	bl	800a258 <HAL_GPIO_ReadPin>
 8005942:	4603      	mov	r3, r0
 8005944:	71fb      	strb	r3, [r7, #7]
	if (pc0_state == GPIO_PIN_RESET) { // low ise
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d106      	bne.n	800595a <HSD_StatusCheck+0x26>
		HAL_GPIO_WritePin(SGU_LED1_GPIO_Port, SGU_LED1_Pin, GPIO_PIN_SET); // PB10 LED yak
 800594c:	2201      	movs	r2, #1
 800594e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005952:	4812      	ldr	r0, [pc, #72]	@ (800599c <HSD_StatusCheck+0x68>)
 8005954:	f004 fc98 	bl	800a288 <HAL_GPIO_WritePin>
 8005958:	e005      	b.n	8005966 <HSD_StatusCheck+0x32>
	} else {
		HAL_GPIO_WritePin(SGU_LED1_GPIO_Port, SGU_LED1_Pin, GPIO_PIN_RESET); // değilse söndür
 800595a:	2200      	movs	r2, #0
 800595c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005960:	480e      	ldr	r0, [pc, #56]	@ (800599c <HSD_StatusCheck+0x68>)
 8005962:	f004 fc91 	bl	800a288 <HAL_GPIO_WritePin>
	}

	// PC5 pinini oku
	GPIO_PinState pc5_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8005966:	2120      	movs	r1, #32
 8005968:	480b      	ldr	r0, [pc, #44]	@ (8005998 <HSD_StatusCheck+0x64>)
 800596a:	f004 fc75 	bl	800a258 <HAL_GPIO_ReadPin>
 800596e:	4603      	mov	r3, r0
 8005970:	71bb      	strb	r3, [r7, #6]
	if (pc5_state == GPIO_PIN_RESET) { // low ise
 8005972:	79bb      	ldrb	r3, [r7, #6]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d105      	bne.n	8005984 <HSD_StatusCheck+0x50>
		HAL_GPIO_WritePin(SGU_LED2_GPIO_Port, SGU_LED2_Pin, GPIO_PIN_SET); // PB2 LED yak
 8005978:	2201      	movs	r2, #1
 800597a:	2104      	movs	r1, #4
 800597c:	4807      	ldr	r0, [pc, #28]	@ (800599c <HSD_StatusCheck+0x68>)
 800597e:	f004 fc83 	bl	800a288 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(SGU_LED2_GPIO_Port, SGU_LED2_Pin, GPIO_PIN_RESET); // değilse söndür
	}
}
 8005982:	e004      	b.n	800598e <HSD_StatusCheck+0x5a>
		HAL_GPIO_WritePin(SGU_LED2_GPIO_Port, SGU_LED2_Pin, GPIO_PIN_RESET); // değilse söndür
 8005984:	2200      	movs	r2, #0
 8005986:	2104      	movs	r1, #4
 8005988:	4804      	ldr	r0, [pc, #16]	@ (800599c <HSD_StatusCheck+0x68>)
 800598a:	f004 fc7d 	bl	800a288 <HAL_GPIO_WritePin>
}
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	40020800 	.word	0x40020800
 800599c:	40020400 	.word	0x40020400

080059a0 <loraBegin>:

void loraBegin()
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80059a4:	2064      	movs	r0, #100	@ 0x64
 80059a6:	f003 f83f 	bl	8008a28 <HAL_Delay>

	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, RESET);
 80059aa:	2200      	movs	r2, #0
 80059ac:	2101      	movs	r1, #1
 80059ae:	4814      	ldr	r0, [pc, #80]	@ (8005a00 <loraBegin+0x60>)
 80059b0:	f004 fc6a 	bl	800a288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, SET);
 80059b4:	2201      	movs	r2, #1
 80059b6:	2102      	movs	r1, #2
 80059b8:	4811      	ldr	r0, [pc, #68]	@ (8005a00 <loraBegin+0x60>)
 80059ba:	f004 fc65 	bl	800a288 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80059be:	2064      	movs	r0, #100	@ 0x64
 80059c0:	f003 f832 	bl	8008a28 <HAL_Delay>

    e22_lora.baudRate = LORA_BAUD_115200;
 80059c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005a04 <loraBegin+0x64>)
 80059c6:	22e0      	movs	r2, #224	@ 0xe0
 80059c8:	701a      	strb	r2, [r3, #0]
    e22_lora.airRate = LORA_AIR_RATE_2_4k;
 80059ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005a04 <loraBegin+0x64>)
 80059cc:	2202      	movs	r2, #2
 80059ce:	705a      	strb	r2, [r3, #1]
    e22_lora.packetSize = LORA_SUB_PACKET_64_BYTES;
 80059d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005a04 <loraBegin+0x64>)
 80059d2:	2280      	movs	r2, #128	@ 0x80
 80059d4:	709a      	strb	r2, [r3, #2]
    e22_lora.power = LORA_POWER_37dbm;
 80059d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005a04 <loraBegin+0x64>)
 80059d8:	2200      	movs	r2, #0
 80059da:	70da      	strb	r2, [r3, #3]
    e22_lora.loraAddress.address16 = 0x0000;
 80059dc:	4b09      	ldr	r3, [pc, #36]	@ (8005a04 <loraBegin+0x64>)
 80059de:	2200      	movs	r2, #0
 80059e0:	80da      	strh	r2, [r3, #6]
    e22_lora.loraKey.key16 = 0x0000;
 80059e2:	4b08      	ldr	r3, [pc, #32]	@ (8005a04 <loraBegin+0x64>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	809a      	strh	r2, [r3, #4]

    e22_lora.channel = ROCKET_TELEM_FREQ;
 80059e8:	4b06      	ldr	r3, [pc, #24]	@ (8005a04 <loraBegin+0x64>)
 80059ea:	2219      	movs	r2, #25
 80059ec:	721a      	strb	r2, [r3, #8]

    lora_configure(&e22_lora);
 80059ee:	4805      	ldr	r0, [pc, #20]	@ (8005a04 <loraBegin+0x64>)
 80059f0:	f7ff f9e2 	bl	8004db8 <lora_configure>
    HAL_Delay(1000);
 80059f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80059f8:	f003 f816 	bl	8008a28 <HAL_Delay>
}
 80059fc:	bf00      	nop
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40020000 	.word	0x40020000
 8005a04:	2000167c 	.word	0x2000167c

08005a08 <L86_GPIO_Init>:

static void L86_GPIO_Init(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08a      	sub	sp, #40	@ 0x28
 8005a0c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct_UART5_TX;
	GPIO_InitTypeDef GPIO_InitStruct_UART5_RX;

	GPIO_InitStruct_UART5_TX.Pin = L86_TX_Pin;
 8005a0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a12:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct_UART5_TX.Mode = GPIO_MODE_AF_PP;
 8005a14:	2302      	movs	r3, #2
 8005a16:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct_UART5_TX.Pull = GPIO_NOPULL;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct_UART5_TX.Speed = GPIO_SPEED_FREQ_LOW;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct_UART5_TX.Alternate = GPIO_AF8_UART5;
 8005a20:	2308      	movs	r3, #8
 8005a22:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(L86_TX_GPIO_Port, &GPIO_InitStruct_UART5_TX);
 8005a24:	f107 0314 	add.w	r3, r7, #20
 8005a28:	4619      	mov	r1, r3
 8005a2a:	480b      	ldr	r0, [pc, #44]	@ (8005a58 <L86_GPIO_Init+0x50>)
 8005a2c:	f004 f98c 	bl	8009d48 <HAL_GPIO_Init>

	 GPIO_InitStruct_UART5_RX.Pin = L86_RX_Pin;
 8005a30:	2304      	movs	r3, #4
 8005a32:	603b      	str	r3, [r7, #0]
	 GPIO_InitStruct_UART5_RX.Mode = GPIO_MODE_AF_PP;
 8005a34:	2302      	movs	r3, #2
 8005a36:	607b      	str	r3, [r7, #4]
	 GPIO_InitStruct_UART5_RX.Pull = GPIO_NOPULL;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60bb      	str	r3, [r7, #8]
	 GPIO_InitStruct_UART5_RX.Speed = GPIO_SPEED_FREQ_LOW;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60fb      	str	r3, [r7, #12]
	 GPIO_InitStruct_UART5_RX.Alternate = GPIO_AF8_UART5;
 8005a40:	2308      	movs	r3, #8
 8005a42:	613b      	str	r3, [r7, #16]
	 HAL_GPIO_Init(L86_RX_GPIO_Port, &GPIO_InitStruct_UART5_RX);
 8005a44:	463b      	mov	r3, r7
 8005a46:	4619      	mov	r1, r3
 8005a48:	4804      	ldr	r0, [pc, #16]	@ (8005a5c <L86_GPIO_Init+0x54>)
 8005a4a:	f004 f97d 	bl	8009d48 <HAL_GPIO_Init>
}
 8005a4e:	bf00      	nop
 8005a50:	3728      	adds	r7, #40	@ 0x28
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	40020800 	.word	0x40020800
 8005a5c:	40020c00 	.word	0x40020c00

08005a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a64:	b672      	cpsid	i
}
 8005a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005a68:	bf00      	nop
 8005a6a:	e7fd      	b.n	8005a68 <Error_Handler+0x8>

08005a6c <check_sum_hesapla_sit>:
        check_sum += normal_paket[i];
    }
    return (unsigned char) (check_sum % 256);
}

unsigned char check_sum_hesapla_sit(int a){
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60bb      	str	r3, [r7, #8]
 8005a7c:	e00a      	b.n	8005a94 <check_sum_hesapla_sit+0x28>
        check_sum += sit_paket[i];
 8005a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8005ab8 <check_sum_hesapla_sit+0x4c>)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4413      	add	r3, r2
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	3301      	adds	r3, #1
 8005a92:	60bb      	str	r3, [r7, #8]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	dbf0      	blt.n	8005a7e <check_sum_hesapla_sit+0x12>
    }
    return (unsigned char) (check_sum % 256);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	425a      	negs	r2, r3
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	bf58      	it	pl
 8005aa6:	4253      	negpl	r3, r2
 8005aa8:	b2db      	uxtb	r3, r3
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	20001734 	.word	0x20001734

08005abc <round2>:

// Float değerleri iki ondalık basamağa yuvarlamak için yardımcı fonksiyon
double round2(double value) {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	ed87 0b00 	vstr	d0, [r7]
    return round(value * 100.0) / 100.0;
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	4b10      	ldr	r3, [pc, #64]	@ (8005b0c <round2+0x50>)
 8005acc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ad0:	f7fa fdb2 	bl	8000638 <__aeabi_dmul>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	ec43 2b17 	vmov	d7, r2, r3
 8005adc:	eeb0 0a47 	vmov.f32	s0, s14
 8005ae0:	eef0 0a67 	vmov.f32	s1, s15
 8005ae4:	f00d fee4 	bl	80138b0 <round>
 8005ae8:	ec51 0b10 	vmov	r0, r1, d0
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	4b06      	ldr	r3, [pc, #24]	@ (8005b0c <round2+0x50>)
 8005af2:	f7fa fecb 	bl	800088c <__aeabi_ddiv>
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	ec43 2b17 	vmov	d7, r2, r3
}
 8005afe:	eeb0 0a47 	vmov.f32	s0, s14
 8005b02:	eef0 0a67 	vmov.f32	s1, s15
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40590000 	.word	0x40590000

08005b10 <addDataPacketSit>:
  normal_paket[56] = check_sum_hesapla_normal(56); // Check_sum = check_sum_hesapla();
  normal_paket[57] = 0x0D; // Sabit
  normal_paket[58] = 0x0A;
}

void addDataPacketSit(BME_280_t* BME, bmi088_struct_t* BMI){
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08a      	sub	sp, #40	@ 0x28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  sit_paket[0] = 0xAB; // Sabit
 8005b1a:	4b8f      	ldr	r3, [pc, #572]	@ (8005d58 <addDataPacketSit+0x248>)
 8005b1c:	22ab      	movs	r2, #171	@ 0xab
 8005b1e:	701a      	strb	r2, [r3, #0]

  FLOAT32_UINT8_DONUSTURUCU irtifa_float32_uint8_donusturucu;
  irtifa_float32_uint8_donusturucu.sayi = (float)round2(BME->base_altitude + BME->altitude); // Irtifa degerinin atamasini yapiyoruz.
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	edd3 7a08 	vldr	s15, [r3, #32]
 8005b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b30:	ee17 0a90 	vmov	r0, s15
 8005b34:	f7fa fd28 	bl	8000588 <__aeabi_f2d>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	ec43 2b10 	vmov	d0, r2, r3
 8005b40:	f7ff ffbc 	bl	8005abc <round2>
 8005b44:	ec53 2b10 	vmov	r2, r3, d0
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	f7fb f86c 	bl	8000c28 <__aeabi_d2f>
 8005b50:	4603      	mov	r3, r0
 8005b52:	627b      	str	r3, [r7, #36]	@ 0x24
  sit_paket[1] = irtifa_float32_uint8_donusturucu.array[3];
 8005b54:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005b58:	4b7f      	ldr	r3, [pc, #508]	@ (8005d58 <addDataPacketSit+0x248>)
 8005b5a:	705a      	strb	r2, [r3, #1]
  sit_paket[2] = irtifa_float32_uint8_donusturucu.array[2];
 8005b5c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005b60:	4b7d      	ldr	r3, [pc, #500]	@ (8005d58 <addDataPacketSit+0x248>)
 8005b62:	709a      	strb	r2, [r3, #2]
  sit_paket[3] = irtifa_float32_uint8_donusturucu.array[1];
 8005b64:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8005b68:	4b7b      	ldr	r3, [pc, #492]	@ (8005d58 <addDataPacketSit+0x248>)
 8005b6a:	70da      	strb	r2, [r3, #3]
  sit_paket[4] = irtifa_float32_uint8_donusturucu.array[0];
 8005b6c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005b70:	4b79      	ldr	r3, [pc, #484]	@ (8005d58 <addDataPacketSit+0x248>)
 8005b72:	711a      	strb	r2, [r3, #4]

  FLOAT32_UINT8_DONUSTURUCU basinc_float32_uint8_donusturucu;
  basinc_float32_uint8_donusturucu.sayi = (float)round2(BME->pressure); // Roket GPS Irtifa degerinin atamasini yapiyoruz.
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fa fd05 	bl	8000588 <__aeabi_f2d>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	ec43 2b10 	vmov	d0, r2, r3
 8005b86:	f7ff ff99 	bl	8005abc <round2>
 8005b8a:	ec53 2b10 	vmov	r2, r3, d0
 8005b8e:	4610      	mov	r0, r2
 8005b90:	4619      	mov	r1, r3
 8005b92:	f7fb f849 	bl	8000c28 <__aeabi_d2f>
 8005b96:	4603      	mov	r3, r0
 8005b98:	623b      	str	r3, [r7, #32]
  sit_paket[5] = basinc_float32_uint8_donusturucu.array[3];
 8005b9a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005b9e:	4b6e      	ldr	r3, [pc, #440]	@ (8005d58 <addDataPacketSit+0x248>)
 8005ba0:	715a      	strb	r2, [r3, #5]
  sit_paket[6] = basinc_float32_uint8_donusturucu.array[2];
 8005ba2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8005ba6:	4b6c      	ldr	r3, [pc, #432]	@ (8005d58 <addDataPacketSit+0x248>)
 8005ba8:	719a      	strb	r2, [r3, #6]
  sit_paket[7] = basinc_float32_uint8_donusturucu.array[1];
 8005baa:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8005bae:	4b6a      	ldr	r3, [pc, #424]	@ (8005d58 <addDataPacketSit+0x248>)
 8005bb0:	71da      	strb	r2, [r3, #7]
  sit_paket[8] = basinc_float32_uint8_donusturucu.array[0];
 8005bb2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005bb6:	4b68      	ldr	r3, [pc, #416]	@ (8005d58 <addDataPacketSit+0x248>)
 8005bb8:	721a      	strb	r2, [r3, #8]

  FLOAT32_UINT8_DONUSTURUCU ivme_x_float32_uint8_donusturucu;
  ivme_x_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.acc_x); // Ivme X degerinin atamasini yapiyoruz.
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fa fce2 	bl	8000588 <__aeabi_f2d>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	ec43 2b10 	vmov	d0, r2, r3
 8005bcc:	f7ff ff76 	bl	8005abc <round2>
 8005bd0:	ec53 2b10 	vmov	r2, r3, d0
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	f7fb f826 	bl	8000c28 <__aeabi_d2f>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	61fb      	str	r3, [r7, #28]
  sit_paket[9] = ivme_x_float32_uint8_donusturucu.array[3];
 8005be0:	7ffa      	ldrb	r2, [r7, #31]
 8005be2:	4b5d      	ldr	r3, [pc, #372]	@ (8005d58 <addDataPacketSit+0x248>)
 8005be4:	725a      	strb	r2, [r3, #9]
  sit_paket[10] = ivme_x_float32_uint8_donusturucu.array[2];
 8005be6:	7fba      	ldrb	r2, [r7, #30]
 8005be8:	4b5b      	ldr	r3, [pc, #364]	@ (8005d58 <addDataPacketSit+0x248>)
 8005bea:	729a      	strb	r2, [r3, #10]
  sit_paket[11] = ivme_x_float32_uint8_donusturucu.array[1];
 8005bec:	7f7a      	ldrb	r2, [r7, #29]
 8005bee:	4b5a      	ldr	r3, [pc, #360]	@ (8005d58 <addDataPacketSit+0x248>)
 8005bf0:	72da      	strb	r2, [r3, #11]
  sit_paket[12] = ivme_x_float32_uint8_donusturucu.array[0];
 8005bf2:	7f3a      	ldrb	r2, [r7, #28]
 8005bf4:	4b58      	ldr	r3, [pc, #352]	@ (8005d58 <addDataPacketSit+0x248>)
 8005bf6:	731a      	strb	r2, [r3, #12]

  FLOAT32_UINT8_DONUSTURUCU ivme_y_float32_uint8_donusturucu;
  ivme_y_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.acc_y); // Ivme Y degerinin atamasini yapiyoruz.
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7fa fcc3 	bl	8000588 <__aeabi_f2d>
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	ec43 2b10 	vmov	d0, r2, r3
 8005c0a:	f7ff ff57 	bl	8005abc <round2>
 8005c0e:	ec53 2b10 	vmov	r2, r3, d0
 8005c12:	4610      	mov	r0, r2
 8005c14:	4619      	mov	r1, r3
 8005c16:	f7fb f807 	bl	8000c28 <__aeabi_d2f>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	61bb      	str	r3, [r7, #24]
  sit_paket[13] = ivme_y_float32_uint8_donusturucu.array[3];
 8005c1e:	7efa      	ldrb	r2, [r7, #27]
 8005c20:	4b4d      	ldr	r3, [pc, #308]	@ (8005d58 <addDataPacketSit+0x248>)
 8005c22:	735a      	strb	r2, [r3, #13]
  sit_paket[14] = ivme_y_float32_uint8_donusturucu.array[2];
 8005c24:	7eba      	ldrb	r2, [r7, #26]
 8005c26:	4b4c      	ldr	r3, [pc, #304]	@ (8005d58 <addDataPacketSit+0x248>)
 8005c28:	739a      	strb	r2, [r3, #14]
  sit_paket[15] = ivme_y_float32_uint8_donusturucu.array[1];
 8005c2a:	7e7a      	ldrb	r2, [r7, #25]
 8005c2c:	4b4a      	ldr	r3, [pc, #296]	@ (8005d58 <addDataPacketSit+0x248>)
 8005c2e:	73da      	strb	r2, [r3, #15]
  sit_paket[16] = ivme_y_float32_uint8_donusturucu.array[0];
 8005c30:	7e3a      	ldrb	r2, [r7, #24]
 8005c32:	4b49      	ldr	r3, [pc, #292]	@ (8005d58 <addDataPacketSit+0x248>)
 8005c34:	741a      	strb	r2, [r3, #16]

  FLOAT32_UINT8_DONUSTURUCU ivme_z_float32_uint8_donusturucu;
  ivme_z_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.acc_z); // Ivme Z degerinin atamasini yapiyoruz.
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fa fca4 	bl	8000588 <__aeabi_f2d>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	ec43 2b10 	vmov	d0, r2, r3
 8005c48:	f7ff ff38 	bl	8005abc <round2>
 8005c4c:	ec53 2b10 	vmov	r2, r3, d0
 8005c50:	4610      	mov	r0, r2
 8005c52:	4619      	mov	r1, r3
 8005c54:	f7fa ffe8 	bl	8000c28 <__aeabi_d2f>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	617b      	str	r3, [r7, #20]
  sit_paket[17] = ivme_z_float32_uint8_donusturucu.array[3];
 8005c5c:	7dfa      	ldrb	r2, [r7, #23]
 8005c5e:	4b3e      	ldr	r3, [pc, #248]	@ (8005d58 <addDataPacketSit+0x248>)
 8005c60:	745a      	strb	r2, [r3, #17]
  sit_paket[18] = ivme_z_float32_uint8_donusturucu.array[2];
 8005c62:	7dba      	ldrb	r2, [r7, #22]
 8005c64:	4b3c      	ldr	r3, [pc, #240]	@ (8005d58 <addDataPacketSit+0x248>)
 8005c66:	749a      	strb	r2, [r3, #18]
  sit_paket[19] = ivme_z_float32_uint8_donusturucu.array[1];
 8005c68:	7d7a      	ldrb	r2, [r7, #21]
 8005c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8005d58 <addDataPacketSit+0x248>)
 8005c6c:	74da      	strb	r2, [r3, #19]
  sit_paket[20] = ivme_z_float32_uint8_donusturucu.array[0];
 8005c6e:	7d3a      	ldrb	r2, [r7, #20]
 8005c70:	4b39      	ldr	r3, [pc, #228]	@ (8005d58 <addDataPacketSit+0x248>)
 8005c72:	751a      	strb	r2, [r3, #20]

  FLOAT32_UINT8_DONUSTURUCU jiroskop_x_float32_uint8_donusturucu;
  jiroskop_x_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.angle_x); // Jiroskop X degerinin atamasini yapiyoruz.
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fa fc85 	bl	8000588 <__aeabi_f2d>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	ec43 2b10 	vmov	d0, r2, r3
 8005c86:	f7ff ff19 	bl	8005abc <round2>
 8005c8a:	ec53 2b10 	vmov	r2, r3, d0
 8005c8e:	4610      	mov	r0, r2
 8005c90:	4619      	mov	r1, r3
 8005c92:	f7fa ffc9 	bl	8000c28 <__aeabi_d2f>
 8005c96:	4603      	mov	r3, r0
 8005c98:	613b      	str	r3, [r7, #16]
  sit_paket[21] = jiroskop_x_float32_uint8_donusturucu.array[3];
 8005c9a:	7cfa      	ldrb	r2, [r7, #19]
 8005c9c:	4b2e      	ldr	r3, [pc, #184]	@ (8005d58 <addDataPacketSit+0x248>)
 8005c9e:	755a      	strb	r2, [r3, #21]
  sit_paket[22] = jiroskop_x_float32_uint8_donusturucu.array[2];
 8005ca0:	7cba      	ldrb	r2, [r7, #18]
 8005ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8005d58 <addDataPacketSit+0x248>)
 8005ca4:	759a      	strb	r2, [r3, #22]
  sit_paket[23] = jiroskop_x_float32_uint8_donusturucu.array[1];
 8005ca6:	7c7a      	ldrb	r2, [r7, #17]
 8005ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8005d58 <addDataPacketSit+0x248>)
 8005caa:	75da      	strb	r2, [r3, #23]
  sit_paket[24] = jiroskop_x_float32_uint8_donusturucu.array[0];
 8005cac:	7c3a      	ldrb	r2, [r7, #16]
 8005cae:	4b2a      	ldr	r3, [pc, #168]	@ (8005d58 <addDataPacketSit+0x248>)
 8005cb0:	761a      	strb	r2, [r3, #24]

  FLOAT32_UINT8_DONUSTURUCU jiroskop_y_float32_uint8_donusturucu;
  jiroskop_y_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.angle_y); // Jiroskop Y degerinin atamasini yapiyoruz.
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fa fc66 	bl	8000588 <__aeabi_f2d>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	ec43 2b10 	vmov	d0, r2, r3
 8005cc4:	f7ff fefa 	bl	8005abc <round2>
 8005cc8:	ec53 2b10 	vmov	r2, r3, d0
 8005ccc:	4610      	mov	r0, r2
 8005cce:	4619      	mov	r1, r3
 8005cd0:	f7fa ffaa 	bl	8000c28 <__aeabi_d2f>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	60fb      	str	r3, [r7, #12]
  sit_paket[25] = jiroskop_y_float32_uint8_donusturucu.array[3];
 8005cd8:	7bfa      	ldrb	r2, [r7, #15]
 8005cda:	4b1f      	ldr	r3, [pc, #124]	@ (8005d58 <addDataPacketSit+0x248>)
 8005cdc:	765a      	strb	r2, [r3, #25]
  sit_paket[26] = jiroskop_y_float32_uint8_donusturucu.array[2];
 8005cde:	7bba      	ldrb	r2, [r7, #14]
 8005ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8005d58 <addDataPacketSit+0x248>)
 8005ce2:	769a      	strb	r2, [r3, #26]
  sit_paket[27] = jiroskop_y_float32_uint8_donusturucu.array[1];
 8005ce4:	7b7a      	ldrb	r2, [r7, #13]
 8005ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8005d58 <addDataPacketSit+0x248>)
 8005ce8:	76da      	strb	r2, [r3, #27]
  sit_paket[28] = jiroskop_y_float32_uint8_donusturucu.array[0];
 8005cea:	7b3a      	ldrb	r2, [r7, #12]
 8005cec:	4b1a      	ldr	r3, [pc, #104]	@ (8005d58 <addDataPacketSit+0x248>)
 8005cee:	771a      	strb	r2, [r3, #28]
  FLOAT32_UINT8_DONUSTURUCU jiroskop_z_float32_uint8_donusturucu;
  jiroskop_z_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.angle_z); // Jiroskop Z degerinin atamasini yapiyoruz.
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fa fc47 	bl	8000588 <__aeabi_f2d>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	ec43 2b10 	vmov	d0, r2, r3
 8005d02:	f7ff fedb 	bl	8005abc <round2>
 8005d06:	ec53 2b10 	vmov	r2, r3, d0
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	f7fa ff8b 	bl	8000c28 <__aeabi_d2f>
 8005d12:	4603      	mov	r3, r0
 8005d14:	60bb      	str	r3, [r7, #8]
  sit_paket[29] = jiroskop_z_float32_uint8_donusturucu.array[3];
 8005d16:	7afa      	ldrb	r2, [r7, #11]
 8005d18:	4b0f      	ldr	r3, [pc, #60]	@ (8005d58 <addDataPacketSit+0x248>)
 8005d1a:	775a      	strb	r2, [r3, #29]
  sit_paket[30] = jiroskop_z_float32_uint8_donusturucu.array[2];
 8005d1c:	7aba      	ldrb	r2, [r7, #10]
 8005d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d58 <addDataPacketSit+0x248>)
 8005d20:	779a      	strb	r2, [r3, #30]
  sit_paket[31] = jiroskop_z_float32_uint8_donusturucu.array[1];
 8005d22:	7a7a      	ldrb	r2, [r7, #9]
 8005d24:	4b0c      	ldr	r3, [pc, #48]	@ (8005d58 <addDataPacketSit+0x248>)
 8005d26:	77da      	strb	r2, [r3, #31]
  sit_paket[32] = jiroskop_z_float32_uint8_donusturucu.array[0];
 8005d28:	7a3a      	ldrb	r2, [r7, #8]
 8005d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d58 <addDataPacketSit+0x248>)
 8005d2c:	f883 2020 	strb.w	r2, [r3, #32]

  sit_paket[33] = check_sum_hesapla_sit(33); // Check_sum = check_sum_hesapla();
 8005d30:	2021      	movs	r0, #33	@ 0x21
 8005d32:	f7ff fe9b 	bl	8005a6c <check_sum_hesapla_sit>
 8005d36:	4603      	mov	r3, r0
 8005d38:	461a      	mov	r2, r3
 8005d3a:	4b07      	ldr	r3, [pc, #28]	@ (8005d58 <addDataPacketSit+0x248>)
 8005d3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  sit_paket[34] = 0x0D;
 8005d40:	4b05      	ldr	r3, [pc, #20]	@ (8005d58 <addDataPacketSit+0x248>)
 8005d42:	220d      	movs	r2, #13
 8005d44:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  sit_paket[35] = 0x0A;
 8005d48:	4b03      	ldr	r3, [pc, #12]	@ (8005d58 <addDataPacketSit+0x248>)
 8005d4a:	220a      	movs	r2, #10
 8005d4c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

}
 8005d50:	bf00      	nop
 8005d52:	3728      	adds	r7, #40	@ 0x28
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	20001734 	.word	0x20001734

08005d5c <uint8_arrayi_float32_ye_donustur>:

float uint8_arrayi_float32_ye_donustur(uint8_t byte_array_u8[4]) {
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
    FLOAT32_UINT8_DONUSTURUCU float32_uint8_donusturucu;
    float32_uint8_donusturucu.array[0] = byte_array_u8[3];
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	78db      	ldrb	r3, [r3, #3]
 8005d68:	733b      	strb	r3, [r7, #12]
    float32_uint8_donusturucu.array[1] = byte_array_u8[2];
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	789b      	ldrb	r3, [r3, #2]
 8005d6e:	737b      	strb	r3, [r7, #13]
    float32_uint8_donusturucu.array[2] = byte_array_u8[1];
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	785b      	ldrb	r3, [r3, #1]
 8005d74:	73bb      	strb	r3, [r7, #14]
    float32_uint8_donusturucu.array[3] = byte_array_u8[0];
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	73fb      	strb	r3, [r7, #15]
    return float32_uint8_donusturucu.sayi;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	ee07 3a90 	vmov	s15, r3
}
 8005d82:	eeb0 0a67 	vmov.f32	s0, s15
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <ekf_predict>:
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++)
            P[i][j] = (i == j) ? 1e-3f : 0.0f;
}

void ekf_predict(float gx, float gy, float gz, float dt) {
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b09e      	sub	sp, #120	@ 0x78
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	ed87 0a03 	vstr	s0, [r7, #12]
 8005d9a:	edc7 0a02 	vstr	s1, [r7, #8]
 8005d9e:	ed87 1a01 	vstr	s2, [r7, #4]
 8005da2:	edc7 1a00 	vstr	s3, [r7]

    // Gyro'dan omega matrisi
    float Omega[4][4] = {
 8005da6:	f04f 0300 	mov.w	r3, #0
 8005daa:	623b      	str	r3, [r7, #32]
        {0, -gx, -gy, -gz},
 8005dac:	edd7 7a03 	vldr	s15, [r7, #12]
 8005db0:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005db4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        {0, -gx, -gy, -gz},
 8005db8:	edd7 7a02 	vldr	s15, [r7, #8]
 8005dbc:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005dc0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        {0, -gx, -gy, -gz},
 8005dc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dc8:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005dcc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dd4:	f04f 0300 	mov.w	r3, #0
 8005dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
        {gx,  0,  gz, -gy},
 8005dde:	edd7 7a02 	vldr	s15, [r7, #8]
 8005de2:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005de6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	643b      	str	r3, [r7, #64]	@ 0x40
        {gy, -gz,  0,  gx},
 8005dee:	edd7 7a01 	vldr	s15, [r7, #4]
 8005df2:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005df6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8005dfa:	f04f 0300 	mov.w	r3, #0
 8005dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	657b      	str	r3, [r7, #84]	@ 0x54
        {gz,  gy, -gx,  0}
 8005e0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e10:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005e14:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 8005e18:	f04f 0300 	mov.w	r3, #0
 8005e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    };

    // dq = 0.5 * Omega * q
    float dq[4] = {0};
 8005e1e:	f107 0310 	add.w	r3, r7, #16
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	605a      	str	r2, [r3, #4]
 8005e28:	609a      	str	r2, [r3, #8]
 8005e2a:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < 4; i++) {
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e30:	e043      	b.n	8005eba <ekf_predict+0x12a>
        for (int j = 0; j < 4; j++) {
 8005e32:	2300      	movs	r3, #0
 8005e34:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e36:	e024      	b.n	8005e82 <ekf_predict+0xf2>
            dq[i] += Omega[i][j] * q[j];
 8005e38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	3378      	adds	r3, #120	@ 0x78
 8005e3e:	443b      	add	r3, r7
 8005e40:	3b68      	subs	r3, #104	@ 0x68
 8005e42:	ed93 7a00 	vldr	s14, [r3]
 8005e46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e48:	009a      	lsls	r2, r3, #2
 8005e4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e4c:	4413      	add	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	3378      	adds	r3, #120	@ 0x78
 8005e52:	443b      	add	r3, r7
 8005e54:	3b58      	subs	r3, #88	@ 0x58
 8005e56:	edd3 6a00 	vldr	s13, [r3]
 8005e5a:	4a5d      	ldr	r2, [pc, #372]	@ (8005fd0 <ekf_predict+0x240>)
 8005e5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	edd3 7a00 	vldr	s15, [r3]
 8005e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	3378      	adds	r3, #120	@ 0x78
 8005e74:	443b      	add	r3, r7
 8005e76:	3b68      	subs	r3, #104	@ 0x68
 8005e78:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 4; j++) {
 8005e7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e7e:	3301      	adds	r3, #1
 8005e80:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	ddd7      	ble.n	8005e38 <ekf_predict+0xa8>
        }
        dq[i] *= 0.5f * dt;
 8005e88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	3378      	adds	r3, #120	@ 0x78
 8005e8e:	443b      	add	r3, r7
 8005e90:	3b68      	subs	r3, #104	@ 0x68
 8005e92:	ed93 7a00 	vldr	s14, [r3]
 8005e96:	edd7 7a00 	vldr	s15, [r7]
 8005e9a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8005e9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	3378      	adds	r3, #120	@ 0x78
 8005eac:	443b      	add	r3, r7
 8005eae:	3b68      	subs	r3, #104	@ 0x68
 8005eb0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 8005eb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	677b      	str	r3, [r7, #116]	@ 0x74
 8005eba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	ddb8      	ble.n	8005e32 <ekf_predict+0xa2>
    }

    // q = q + dq
    for (int i = 0; i < 4; i++)
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ec4:	e017      	b.n	8005ef6 <ekf_predict+0x166>
        q[i] += dq[i];
 8005ec6:	4a42      	ldr	r2, [pc, #264]	@ (8005fd0 <ekf_predict+0x240>)
 8005ec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	ed93 7a00 	vldr	s14, [r3]
 8005ed2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	3378      	adds	r3, #120	@ 0x78
 8005ed8:	443b      	add	r3, r7
 8005eda:	3b68      	subs	r3, #104	@ 0x68
 8005edc:	edd3 7a00 	vldr	s15, [r3]
 8005ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ee4:	4a3a      	ldr	r2, [pc, #232]	@ (8005fd0 <ekf_predict+0x240>)
 8005ee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8005ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	dde4      	ble.n	8005ec6 <ekf_predict+0x136>

    // Normalize
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8005efc:	4b34      	ldr	r3, [pc, #208]	@ (8005fd0 <ekf_predict+0x240>)
 8005efe:	ed93 7a00 	vldr	s14, [r3]
 8005f02:	4b33      	ldr	r3, [pc, #204]	@ (8005fd0 <ekf_predict+0x240>)
 8005f04:	edd3 7a00 	vldr	s15, [r3]
 8005f08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f0c:	4b30      	ldr	r3, [pc, #192]	@ (8005fd0 <ekf_predict+0x240>)
 8005f0e:	edd3 6a01 	vldr	s13, [r3, #4]
 8005f12:	4b2f      	ldr	r3, [pc, #188]	@ (8005fd0 <ekf_predict+0x240>)
 8005f14:	edd3 7a01 	vldr	s15, [r3, #4]
 8005f18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f20:	4b2b      	ldr	r3, [pc, #172]	@ (8005fd0 <ekf_predict+0x240>)
 8005f22:	edd3 6a02 	vldr	s13, [r3, #8]
 8005f26:	4b2a      	ldr	r3, [pc, #168]	@ (8005fd0 <ekf_predict+0x240>)
 8005f28:	edd3 7a02 	vldr	s15, [r3, #8]
 8005f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f34:	4b26      	ldr	r3, [pc, #152]	@ (8005fd0 <ekf_predict+0x240>)
 8005f36:	edd3 6a03 	vldr	s13, [r3, #12]
 8005f3a:	4b25      	ldr	r3, [pc, #148]	@ (8005fd0 <ekf_predict+0x240>)
 8005f3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f48:	eeb0 0a67 	vmov.f32	s0, s15
 8005f4c:	f00c ffbc 	bl	8012ec8 <sqrtf>
 8005f50:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
    for (int i = 0; i < 4; i++)
 8005f54:	2300      	movs	r3, #0
 8005f56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f58:	e012      	b.n	8005f80 <ekf_predict+0x1f0>
        q[i] /= norm;
 8005f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8005fd0 <ekf_predict+0x240>)
 8005f5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	edd3 6a00 	vldr	s13, [r3]
 8005f66:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8005f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f6e:	4a18      	ldr	r2, [pc, #96]	@ (8005fd0 <ekf_predict+0x240>)
 8005f70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8005f7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	dde9      	ble.n	8005f5a <ekf_predict+0x1ca>

    // P = P + Q
    for (int i = 0; i < 4; i++)
 8005f86:	2300      	movs	r3, #0
 8005f88:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f8a:	e018      	b.n	8005fbe <ekf_predict+0x22e>
        P[i][i] += Q_val;
 8005f8c:	4911      	ldr	r1, [pc, #68]	@ (8005fd4 <ekf_predict+0x244>)
 8005f8e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	440b      	add	r3, r1
 8005f9a:	edd3 7a00 	vldr	s15, [r3]
 8005f9e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005fd8 <ekf_predict+0x248>
 8005fa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fa6:	490b      	ldr	r1, [pc, #44]	@ (8005fd4 <ekf_predict+0x244>)
 8005fa8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005faa:	4613      	mov	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	440b      	add	r3, r1
 8005fb4:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8005fb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fba:	3301      	adds	r3, #1
 8005fbc:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	dde3      	ble.n	8005f8c <ekf_predict+0x1fc>
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	3778      	adds	r7, #120	@ 0x78
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20000018 	.word	0x20000018
 8005fd4:	20001758 	.word	0x20001758
 8005fd8:	3727c5ac 	.word	0x3727c5ac

08005fdc <quaternionToYaw1>:

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
    return acosf(safeValue) * (180.0f / 3.14f);
}

float quaternionToYaw1(){
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 8005fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800608c <quaternionToYaw1+0xb0>)
 8005fe4:	ed93 7a01 	vldr	s14, [r3, #4]
 8005fe8:	4b28      	ldr	r3, [pc, #160]	@ (800608c <quaternionToYaw1+0xb0>)
 8005fea:	edd3 7a02 	vldr	s15, [r3, #8]
 8005fee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ff2:	4b26      	ldr	r3, [pc, #152]	@ (800608c <quaternionToYaw1+0xb0>)
 8005ff4:	edd3 6a00 	vldr	s13, [r3]
 8005ff8:	4b24      	ldr	r3, [pc, #144]	@ (800608c <quaternionToYaw1+0xb0>)
 8005ffa:	edd3 7a03 	vldr	s15, [r3, #12]
 8005ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006006:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800600a:	4b20      	ldr	r3, [pc, #128]	@ (800608c <quaternionToYaw1+0xb0>)
 800600c:	ed93 7a00 	vldr	s14, [r3]
 8006010:	4b1e      	ldr	r3, [pc, #120]	@ (800608c <quaternionToYaw1+0xb0>)
 8006012:	edd3 7a00 	vldr	s15, [r3]
 8006016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800601a:	4b1c      	ldr	r3, [pc, #112]	@ (800608c <quaternionToYaw1+0xb0>)
 800601c:	edd3 6a01 	vldr	s13, [r3, #4]
 8006020:	4b1a      	ldr	r3, [pc, #104]	@ (800608c <quaternionToYaw1+0xb0>)
 8006022:	edd3 7a01 	vldr	s15, [r3, #4]
 8006026:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800602a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800602e:	4b17      	ldr	r3, [pc, #92]	@ (800608c <quaternionToYaw1+0xb0>)
 8006030:	edd3 6a02 	vldr	s13, [r3, #8]
 8006034:	4b15      	ldr	r3, [pc, #84]	@ (800608c <quaternionToYaw1+0xb0>)
 8006036:	edd3 7a02 	vldr	s15, [r3, #8]
 800603a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800603e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006042:	4b12      	ldr	r3, [pc, #72]	@ (800608c <quaternionToYaw1+0xb0>)
 8006044:	edd3 6a03 	vldr	s13, [r3, #12]
 8006048:	4b10      	ldr	r3, [pc, #64]	@ (800608c <quaternionToYaw1+0xb0>)
 800604a:	edd3 7a03 	vldr	s15, [r3, #12]
 800604e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006056:	eef0 0a67 	vmov.f32	s1, s15
 800605a:	eeb0 0a46 	vmov.f32	s0, s12
 800605e:	f00c ff31 	bl	8012ec4 <atan2f>
 8006062:	eef0 7a40 	vmov.f32	s15, s0
 8006066:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006090 <quaternionToYaw1+0xb4>
 800606a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800606e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006094 <quaternionToYaw1+0xb8>
 8006072:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006076:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	ee07 3a90 	vmov	s15, r3
}
 8006080:	eeb0 0a67 	vmov.f32	s0, s15
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	20000018 	.word	0x20000018
 8006090:	43340000 	.word	0x43340000
 8006094:	40490fd0 	.word	0x40490fd0

08006098 <quaternionToPitch1>:

float quaternionToPitch1(){
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 800609e:	4b17      	ldr	r3, [pc, #92]	@ (80060fc <quaternionToPitch1+0x64>)
 80060a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80060a4:	4b15      	ldr	r3, [pc, #84]	@ (80060fc <quaternionToPitch1+0x64>)
 80060a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80060aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060ae:	4b13      	ldr	r3, [pc, #76]	@ (80060fc <quaternionToPitch1+0x64>)
 80060b0:	edd3 6a00 	vldr	s13, [r3]
 80060b4:	4b11      	ldr	r3, [pc, #68]	@ (80060fc <quaternionToPitch1+0x64>)
 80060b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80060ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060c6:	eeb0 0a67 	vmov.f32	s0, s15
 80060ca:	f00c fecf 	bl	8012e6c <asinf>
 80060ce:	eef0 7a40 	vmov.f32	s15, s0
 80060d2:	eef1 7a67 	vneg.f32	s15, s15
 80060d6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006100 <quaternionToPitch1+0x68>
 80060da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80060de:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006104 <quaternionToPitch1+0x6c>
 80060e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060e6:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	ee07 3a90 	vmov	s15, r3
}
 80060f0:	eeb0 0a67 	vmov.f32	s0, s15
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	20000018 	.word	0x20000018
 8006100:	43340000 	.word	0x43340000
 8006104:	40490fd0 	.word	0x40490fd0

08006108 <quaternionToRoll1>:

float quaternionToRoll1(){
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 800610e:	4b2a      	ldr	r3, [pc, #168]	@ (80061b8 <quaternionToRoll1+0xb0>)
 8006110:	ed93 7a00 	vldr	s14, [r3]
 8006114:	4b28      	ldr	r3, [pc, #160]	@ (80061b8 <quaternionToRoll1+0xb0>)
 8006116:	edd3 7a01 	vldr	s15, [r3, #4]
 800611a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800611e:	4b26      	ldr	r3, [pc, #152]	@ (80061b8 <quaternionToRoll1+0xb0>)
 8006120:	edd3 6a02 	vldr	s13, [r3, #8]
 8006124:	4b24      	ldr	r3, [pc, #144]	@ (80061b8 <quaternionToRoll1+0xb0>)
 8006126:	edd3 7a03 	vldr	s15, [r3, #12]
 800612a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800612e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006132:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8006136:	4b20      	ldr	r3, [pc, #128]	@ (80061b8 <quaternionToRoll1+0xb0>)
 8006138:	ed93 7a00 	vldr	s14, [r3]
 800613c:	4b1e      	ldr	r3, [pc, #120]	@ (80061b8 <quaternionToRoll1+0xb0>)
 800613e:	edd3 7a00 	vldr	s15, [r3]
 8006142:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006146:	4b1c      	ldr	r3, [pc, #112]	@ (80061b8 <quaternionToRoll1+0xb0>)
 8006148:	edd3 6a01 	vldr	s13, [r3, #4]
 800614c:	4b1a      	ldr	r3, [pc, #104]	@ (80061b8 <quaternionToRoll1+0xb0>)
 800614e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006152:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006156:	ee37 7a67 	vsub.f32	s14, s14, s15
 800615a:	4b17      	ldr	r3, [pc, #92]	@ (80061b8 <quaternionToRoll1+0xb0>)
 800615c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006160:	4b15      	ldr	r3, [pc, #84]	@ (80061b8 <quaternionToRoll1+0xb0>)
 8006162:	edd3 7a02 	vldr	s15, [r3, #8]
 8006166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800616a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800616e:	4b12      	ldr	r3, [pc, #72]	@ (80061b8 <quaternionToRoll1+0xb0>)
 8006170:	edd3 6a03 	vldr	s13, [r3, #12]
 8006174:	4b10      	ldr	r3, [pc, #64]	@ (80061b8 <quaternionToRoll1+0xb0>)
 8006176:	edd3 7a03 	vldr	s15, [r3, #12]
 800617a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800617e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006182:	eef0 0a67 	vmov.f32	s1, s15
 8006186:	eeb0 0a46 	vmov.f32	s0, s12
 800618a:	f00c fe9b 	bl	8012ec4 <atan2f>
 800618e:	eef0 7a40 	vmov.f32	s15, s0
 8006192:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80061bc <quaternionToRoll1+0xb4>
 8006196:	ee27 7a87 	vmul.f32	s14, s15, s14
 800619a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80061c0 <quaternionToRoll1+0xb8>
 800619e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061a2:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	ee07 3a90 	vmov	s15, r3
}
 80061ac:	eeb0 0a67 	vmov.f32	s0, s15
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20000018 	.word	0x20000018
 80061bc:	43340000 	.word	0x43340000
 80061c0:	40490fd0 	.word	0x40490fd0

080061c4 <quaternionToYawDegree1>:

float quaternionToYawDegree1(){
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 80061ca:	4b20      	ldr	r3, [pc, #128]	@ (800624c <quaternionToYawDegree1+0x88>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	4b1e      	ldr	r3, [pc, #120]	@ (800624c <quaternionToYawDegree1+0x88>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	4b1d      	ldr	r3, [pc, #116]	@ (800624c <quaternionToYawDegree1+0x88>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	4b1b      	ldr	r3, [pc, #108]	@ (800624c <quaternionToYawDegree1+0x88>)
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	60bb      	str	r3, [r7, #8]
    float siny_cosp = 2.0f * (w * z + x * y);
 80061e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80061e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80061ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061ee:	edd7 6a04 	vldr	s13, [r7, #16]
 80061f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80061f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006202:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
 8006206:	edd7 7a03 	vldr	s15, [r7, #12]
 800620a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800620e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006212:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800621a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800621e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006226:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
 800622a:	edd7 0a00 	vldr	s1, [r7]
 800622e:	ed97 0a01 	vldr	s0, [r7, #4]
 8006232:	f00c fe47 	bl	8012ec4 <atan2f>
 8006236:	eef0 7a40 	vmov.f32	s15, s0
 800623a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006250 <quaternionToYawDegree1+0x8c>
 800623e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006242:	eeb0 0a67 	vmov.f32	s0, s15
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	20000018 	.word	0x20000018
 8006250:	42652ee0 	.word	0x42652ee0

08006254 <UpdateMahonyGains>:

uint8_t Gain = 0;
uint8_t gyroOnlyMode = 0;


void UpdateMahonyGains(float ax, float ay, float az) {
 8006254:	b580      	push	{r7, lr}
 8006256:	b08c      	sub	sp, #48	@ 0x30
 8006258:	af00      	add	r7, sp, #0
 800625a:	ed87 0a03 	vstr	s0, [r7, #12]
 800625e:	edc7 0a02 	vstr	s1, [r7, #8]
 8006262:	ed87 1a01 	vstr	s2, [r7, #4]
    // Quaternion normalize edilmemişse gravity yön tahmini hatalı olur
    float norm_q = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8006266:	4bd5      	ldr	r3, [pc, #852]	@ (80065bc <UpdateMahonyGains+0x368>)
 8006268:	ed93 7a00 	vldr	s14, [r3]
 800626c:	4bd3      	ldr	r3, [pc, #844]	@ (80065bc <UpdateMahonyGains+0x368>)
 800626e:	edd3 7a00 	vldr	s15, [r3]
 8006272:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006276:	4bd1      	ldr	r3, [pc, #836]	@ (80065bc <UpdateMahonyGains+0x368>)
 8006278:	edd3 6a01 	vldr	s13, [r3, #4]
 800627c:	4bcf      	ldr	r3, [pc, #828]	@ (80065bc <UpdateMahonyGains+0x368>)
 800627e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006282:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006286:	ee37 7a27 	vadd.f32	s14, s14, s15
 800628a:	4bcc      	ldr	r3, [pc, #816]	@ (80065bc <UpdateMahonyGains+0x368>)
 800628c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006290:	4bca      	ldr	r3, [pc, #808]	@ (80065bc <UpdateMahonyGains+0x368>)
 8006292:	edd3 7a02 	vldr	s15, [r3, #8]
 8006296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800629a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800629e:	4bc7      	ldr	r3, [pc, #796]	@ (80065bc <UpdateMahonyGains+0x368>)
 80062a0:	edd3 6a03 	vldr	s13, [r3, #12]
 80062a4:	4bc5      	ldr	r3, [pc, #788]	@ (80065bc <UpdateMahonyGains+0x368>)
 80062a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80062aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062b2:	eeb0 0a67 	vmov.f32	s0, s15
 80062b6:	f00c fe07 	bl	8012ec8 <sqrtf>
 80062ba:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    if (norm_q == 0.0f) return; // Koruma
 80062be:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80062c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80062c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ca:	f000 8172 	beq.w	80065b2 <UpdateMahonyGains+0x35e>
    q[0] /= norm_q;
 80062ce:	4bbb      	ldr	r3, [pc, #748]	@ (80065bc <UpdateMahonyGains+0x368>)
 80062d0:	edd3 6a00 	vldr	s13, [r3]
 80062d4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80062d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062dc:	4bb7      	ldr	r3, [pc, #732]	@ (80065bc <UpdateMahonyGains+0x368>)
 80062de:	edc3 7a00 	vstr	s15, [r3]
    q[1] /= norm_q;
 80062e2:	4bb6      	ldr	r3, [pc, #728]	@ (80065bc <UpdateMahonyGains+0x368>)
 80062e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80062e8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80062ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062f0:	4bb2      	ldr	r3, [pc, #712]	@ (80065bc <UpdateMahonyGains+0x368>)
 80062f2:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] /= norm_q;
 80062f6:	4bb1      	ldr	r3, [pc, #708]	@ (80065bc <UpdateMahonyGains+0x368>)
 80062f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80062fc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8006300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006304:	4bad      	ldr	r3, [pc, #692]	@ (80065bc <UpdateMahonyGains+0x368>)
 8006306:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] /= norm_q;
 800630a:	4bac      	ldr	r3, [pc, #688]	@ (80065bc <UpdateMahonyGains+0x368>)
 800630c:	edd3 6a03 	vldr	s13, [r3, #12]
 8006310:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8006314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006318:	4ba8      	ldr	r3, [pc, #672]	@ (80065bc <UpdateMahonyGains+0x368>)
 800631a:	edc3 7a03 	vstr	s15, [r3, #12]

    // Gravity yön vektörü (tam vektör formu)
    float gx = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 800631e:	4ba7      	ldr	r3, [pc, #668]	@ (80065bc <UpdateMahonyGains+0x368>)
 8006320:	ed93 7a01 	vldr	s14, [r3, #4]
 8006324:	4ba5      	ldr	r3, [pc, #660]	@ (80065bc <UpdateMahonyGains+0x368>)
 8006326:	edd3 7a03 	vldr	s15, [r3, #12]
 800632a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800632e:	4ba3      	ldr	r3, [pc, #652]	@ (80065bc <UpdateMahonyGains+0x368>)
 8006330:	edd3 6a00 	vldr	s13, [r3]
 8006334:	4ba1      	ldr	r3, [pc, #644]	@ (80065bc <UpdateMahonyGains+0x368>)
 8006336:	edd3 7a02 	vldr	s15, [r3, #8]
 800633a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800633e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006342:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006346:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 800634a:	4b9c      	ldr	r3, [pc, #624]	@ (80065bc <UpdateMahonyGains+0x368>)
 800634c:	ed93 7a00 	vldr	s14, [r3]
 8006350:	4b9a      	ldr	r3, [pc, #616]	@ (80065bc <UpdateMahonyGains+0x368>)
 8006352:	edd3 7a01 	vldr	s15, [r3, #4]
 8006356:	ee27 7a27 	vmul.f32	s14, s14, s15
 800635a:	4b98      	ldr	r3, [pc, #608]	@ (80065bc <UpdateMahonyGains+0x368>)
 800635c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006360:	4b96      	ldr	r3, [pc, #600]	@ (80065bc <UpdateMahonyGains+0x368>)
 8006362:	edd3 7a03 	vldr	s15, [r3, #12]
 8006366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800636a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800636e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006372:	edc7 7a08 	vstr	s15, [r7, #32]
    float gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 8006376:	4b91      	ldr	r3, [pc, #580]	@ (80065bc <UpdateMahonyGains+0x368>)
 8006378:	ed93 7a00 	vldr	s14, [r3]
 800637c:	4b8f      	ldr	r3, [pc, #572]	@ (80065bc <UpdateMahonyGains+0x368>)
 800637e:	edd3 7a00 	vldr	s15, [r3]
 8006382:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006386:	4b8d      	ldr	r3, [pc, #564]	@ (80065bc <UpdateMahonyGains+0x368>)
 8006388:	edd3 6a01 	vldr	s13, [r3, #4]
 800638c:	4b8b      	ldr	r3, [pc, #556]	@ (80065bc <UpdateMahonyGains+0x368>)
 800638e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006396:	ee37 7a67 	vsub.f32	s14, s14, s15
 800639a:	4b88      	ldr	r3, [pc, #544]	@ (80065bc <UpdateMahonyGains+0x368>)
 800639c:	edd3 6a02 	vldr	s13, [r3, #8]
 80063a0:	4b86      	ldr	r3, [pc, #536]	@ (80065bc <UpdateMahonyGains+0x368>)
 80063a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80063a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063ae:	4b83      	ldr	r3, [pc, #524]	@ (80065bc <UpdateMahonyGains+0x368>)
 80063b0:	edd3 6a03 	vldr	s13, [r3, #12]
 80063b4:	4b81      	ldr	r3, [pc, #516]	@ (80065bc <UpdateMahonyGains+0x368>)
 80063b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80063ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063c2:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalize gravity tahmini
    float recipNormG = invSqrt(gx * gx + gy * gy + gz * gz);
 80063c6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80063ca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80063ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80063d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80063d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063da:	edd7 7a07 	vldr	s15, [r7, #28]
 80063de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80063e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063e6:	eeb0 0a67 	vmov.f32	s0, s15
 80063ea:	f001 f8cb 	bl	8007584 <invSqrt>
 80063ee:	ed87 0a06 	vstr	s0, [r7, #24]
    gx *= recipNormG;
 80063f2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80063f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80063fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy *= recipNormG;
 8006402:	ed97 7a08 	vldr	s14, [r7, #32]
 8006406:	edd7 7a06 	vldr	s15, [r7, #24]
 800640a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800640e:	edc7 7a08 	vstr	s15, [r7, #32]
    gz *= recipNormG;
 8006412:	ed97 7a07 	vldr	s14, [r7, #28]
 8006416:	edd7 7a06 	vldr	s15, [r7, #24]
 800641a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800641e:	edc7 7a07 	vstr	s15, [r7, #28]

    // İvmeölçer zaten normalize edilmiş olarak gelmeli (gelmiyorsa normalize et!)
    float recipNormA = invSqrt(ax * ax + ay * ay + az * az);
 8006422:	edd7 7a03 	vldr	s15, [r7, #12]
 8006426:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800642a:	edd7 7a02 	vldr	s15, [r7, #8]
 800642e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006432:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006436:	edd7 7a01 	vldr	s15, [r7, #4]
 800643a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800643e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006442:	eeb0 0a67 	vmov.f32	s0, s15
 8006446:	f001 f89d 	bl	8007584 <invSqrt>
 800644a:	ed87 0a05 	vstr	s0, [r7, #20]
    ax *= recipNormA;
 800644e:	ed97 7a03 	vldr	s14, [r7, #12]
 8006452:	edd7 7a05 	vldr	s15, [r7, #20]
 8006456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645a:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNormA;
 800645e:	ed97 7a02 	vldr	s14, [r7, #8]
 8006462:	edd7 7a05 	vldr	s15, [r7, #20]
 8006466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800646a:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNormA;
 800646e:	ed97 7a01 	vldr	s14, [r7, #4]
 8006472:	edd7 7a05 	vldr	s15, [r7, #20]
 8006476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800647a:	edc7 7a01 	vstr	s15, [r7, #4]

    // Dot product
    float dot = ax * gx + ay * gy + az * gz;
 800647e:	ed97 7a03 	vldr	s14, [r7, #12]
 8006482:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006486:	ee27 7a27 	vmul.f32	s14, s14, s15
 800648a:	edd7 6a02 	vldr	s13, [r7, #8]
 800648e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006492:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006496:	ee37 7a27 	vadd.f32	s14, s14, s15
 800649a:	edd7 6a01 	vldr	s13, [r7, #4]
 800649e:	edd7 7a07 	vldr	s15, [r7, #28]
 80064a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064aa:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dot > 1.0f) dot = 1.0f;
 80064ae:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80064b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064be:	dd02      	ble.n	80064c6 <UpdateMahonyGains+0x272>
 80064c0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80064c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dot < -1.0f) dot = -1.0f;
 80064c6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80064ca:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80064ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064d6:	d501      	bpl.n	80064dc <UpdateMahonyGains+0x288>
 80064d8:	4b39      	ldr	r3, [pc, #228]	@ (80065c0 <UpdateMahonyGains+0x36c>)
 80064da:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Açı farkı (derece)
    float accErrorAngle = acosf(dot) * (180.0f / 3.1415926f);
 80064dc:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80064e0:	f00c fc98 	bl	8012e14 <acosf>
 80064e4:	eef0 7a40 	vmov.f32	s15, s0
 80064e8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80065c4 <UpdateMahonyGains+0x370>
 80064ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064f0:	edc7 7a04 	vstr	s15, [r7, #16]

    // Duruma göre kazanç ayarla
    if (accErrorAngle > 30.0f) {
 80064f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80064f8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80064fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006504:	dd0a      	ble.n	800651c <UpdateMahonyGains+0x2c8>
        Gain = 1;
 8006506:	4b30      	ldr	r3, [pc, #192]	@ (80065c8 <UpdateMahonyGains+0x374>)
 8006508:	2201      	movs	r2, #1
 800650a:	701a      	strb	r2, [r3, #0]
        twoKp = 0.2f;
 800650c:	4b2f      	ldr	r3, [pc, #188]	@ (80065cc <UpdateMahonyGains+0x378>)
 800650e:	4a30      	ldr	r2, [pc, #192]	@ (80065d0 <UpdateMahonyGains+0x37c>)
 8006510:	601a      	str	r2, [r3, #0]
        twoKi = 0.0f;
 8006512:	4b30      	ldr	r3, [pc, #192]	@ (80065d4 <UpdateMahonyGains+0x380>)
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	e01d      	b.n	8006558 <UpdateMahonyGains+0x304>
    } else if (accErrorAngle > 10.0f) {
 800651c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006520:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8006524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800652c:	dd0a      	ble.n	8006544 <UpdateMahonyGains+0x2f0>
        Gain = 2;
 800652e:	4b26      	ldr	r3, [pc, #152]	@ (80065c8 <UpdateMahonyGains+0x374>)
 8006530:	2202      	movs	r2, #2
 8006532:	701a      	strb	r2, [r3, #0]
        twoKp = 2.0f;
 8006534:	4b25      	ldr	r3, [pc, #148]	@ (80065cc <UpdateMahonyGains+0x378>)
 8006536:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800653a:	601a      	str	r2, [r3, #0]
        twoKi = 0.01f;
 800653c:	4b25      	ldr	r3, [pc, #148]	@ (80065d4 <UpdateMahonyGains+0x380>)
 800653e:	4a26      	ldr	r2, [pc, #152]	@ (80065d8 <UpdateMahonyGains+0x384>)
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	e009      	b.n	8006558 <UpdateMahonyGains+0x304>
    } else {
        Gain = 3;
 8006544:	4b20      	ldr	r3, [pc, #128]	@ (80065c8 <UpdateMahonyGains+0x374>)
 8006546:	2203      	movs	r2, #3
 8006548:	701a      	strb	r2, [r3, #0]
        twoKp = 8.0f;
 800654a:	4b20      	ldr	r3, [pc, #128]	@ (80065cc <UpdateMahonyGains+0x378>)
 800654c:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8006550:	601a      	str	r2, [r3, #0]
        twoKi = 0.05f;
 8006552:	4b20      	ldr	r3, [pc, #128]	@ (80065d4 <UpdateMahonyGains+0x380>)
 8006554:	4a21      	ldr	r2, [pc, #132]	@ (80065dc <UpdateMahonyGains+0x388>)
 8006556:	601a      	str	r2, [r3, #0]
    }

    // Güvenlik: kazanç sınırla (opsiyonel ama önerilir)
    twoKp = fmaxf(TWO_KP_MIN, fminf(twoKp, TWO_KP_MAX));
 8006558:	4b1c      	ldr	r3, [pc, #112]	@ (80065cc <UpdateMahonyGains+0x378>)
 800655a:	edd3 7a00 	vldr	s15, [r3]
 800655e:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 8006562:	eeb0 0a67 	vmov.f32	s0, s15
 8006566:	f00d fa06 	bl	8013976 <fminf>
 800656a:	eef0 7a40 	vmov.f32	s15, s0
 800656e:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80065e0 <UpdateMahonyGains+0x38c>
 8006572:	eeb0 0a67 	vmov.f32	s0, s15
 8006576:	f00d f9e1 	bl	801393c <fmaxf>
 800657a:	eef0 7a40 	vmov.f32	s15, s0
 800657e:	4b13      	ldr	r3, [pc, #76]	@ (80065cc <UpdateMahonyGains+0x378>)
 8006580:	edc3 7a00 	vstr	s15, [r3]
    twoKi = fmaxf(TWO_KI_MIN, fminf(twoKi, TWO_KI_MAX));
 8006584:	4b13      	ldr	r3, [pc, #76]	@ (80065d4 <UpdateMahonyGains+0x380>)
 8006586:	edd3 7a00 	vldr	s15, [r3]
 800658a:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80065e4 <UpdateMahonyGains+0x390>
 800658e:	eeb0 0a67 	vmov.f32	s0, s15
 8006592:	f00d f9f0 	bl	8013976 <fminf>
 8006596:	eef0 7a40 	vmov.f32	s15, s0
 800659a:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80065e8 <UpdateMahonyGains+0x394>
 800659e:	eeb0 0a67 	vmov.f32	s0, s15
 80065a2:	f00d f9cb 	bl	801393c <fmaxf>
 80065a6:	eef0 7a40 	vmov.f32	s15, s0
 80065aa:	4b0a      	ldr	r3, [pc, #40]	@ (80065d4 <UpdateMahonyGains+0x380>)
 80065ac:	edc3 7a00 	vstr	s15, [r3]
 80065b0:	e000      	b.n	80065b4 <UpdateMahonyGains+0x360>
    if (norm_q == 0.0f) return; // Koruma
 80065b2:	bf00      	nop
}
 80065b4:	3730      	adds	r7, #48	@ 0x30
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	20000028 	.word	0x20000028
 80065c0:	bf800000 	.word	0xbf800000
 80065c4:	42652ee2 	.word	0x42652ee2
 80065c8:	200017a4 	.word	0x200017a4
 80065cc:	20000038 	.word	0x20000038
 80065d0:	3e4ccccd 	.word	0x3e4ccccd
 80065d4:	2000003c 	.word	0x2000003c
 80065d8:	3c23d70a 	.word	0x3c23d70a
 80065dc:	3d4ccccd 	.word	0x3d4ccccd
 80065e0:	3dcccccd 	.word	0x3dcccccd
 80065e4:	3d4ccccd 	.word	0x3d4ccccd
 80065e8:	00000000 	.word	0x00000000

080065ec <Orientation_Update>:





void Orientation_Update(float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08a      	sub	sp, #40	@ 0x28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	ed87 0a07 	vstr	s0, [r7, #28]
 80065f6:	edc7 0a06 	vstr	s1, [r7, #24]
 80065fa:	ed87 1a05 	vstr	s2, [r7, #20]
 80065fe:	edc7 1a04 	vstr	s3, [r7, #16]
 8006602:	ed87 2a03 	vstr	s4, [r7, #12]
 8006606:	edc7 2a02 	vstr	s5, [r7, #8]
 800660a:	ed87 3a01 	vstr	s6, [r7, #4]
	static float ax_f = 0, ay_f = 0, az_f = 0;
    const float alpha = 0.3f;
 800660e:	4b60      	ldr	r3, [pc, #384]	@ (8006790 <Orientation_Update+0x1a4>)
 8006610:	627b      	str	r3, [r7, #36]	@ 0x24

    // LPF filtre
    ax_f = alpha * ax + (1.0f - alpha) * ax_f;
 8006612:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8006616:	edd7 7a04 	vldr	s15, [r7, #16]
 800661a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800661e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006622:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006626:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800662a:	4b5a      	ldr	r3, [pc, #360]	@ (8006794 <Orientation_Update+0x1a8>)
 800662c:	edd3 7a00 	vldr	s15, [r3]
 8006630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006638:	4b56      	ldr	r3, [pc, #344]	@ (8006794 <Orientation_Update+0x1a8>)
 800663a:	edc3 7a00 	vstr	s15, [r3]
    ay_f = alpha * ay + (1.0f - alpha) * ay_f;
 800663e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8006642:	edd7 7a03 	vldr	s15, [r7, #12]
 8006646:	ee27 7a27 	vmul.f32	s14, s14, s15
 800664a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800664e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006652:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006656:	4b50      	ldr	r3, [pc, #320]	@ (8006798 <Orientation_Update+0x1ac>)
 8006658:	edd3 7a00 	vldr	s15, [r3]
 800665c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006664:	4b4c      	ldr	r3, [pc, #304]	@ (8006798 <Orientation_Update+0x1ac>)
 8006666:	edc3 7a00 	vstr	s15, [r3]
    az_f = alpha * az + (1.0f - alpha) * az_f;
 800666a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800666e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006672:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800667a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800667e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006682:	4b46      	ldr	r3, [pc, #280]	@ (800679c <Orientation_Update+0x1b0>)
 8006684:	edd3 7a00 	vldr	s15, [r3]
 8006688:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800668c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006690:	4b42      	ldr	r3, [pc, #264]	@ (800679c <Orientation_Update+0x1b0>)
 8006692:	edc3 7a00 	vstr	s15, [r3]

    // Kazançları güncelle
    UpdateMahonyGains(ax_f, ay_f, az_f);
 8006696:	4b3f      	ldr	r3, [pc, #252]	@ (8006794 <Orientation_Update+0x1a8>)
 8006698:	edd3 7a00 	vldr	s15, [r3]
 800669c:	4b3e      	ldr	r3, [pc, #248]	@ (8006798 <Orientation_Update+0x1ac>)
 800669e:	ed93 7a00 	vldr	s14, [r3]
 80066a2:	4b3e      	ldr	r3, [pc, #248]	@ (800679c <Orientation_Update+0x1b0>)
 80066a4:	edd3 6a00 	vldr	s13, [r3]
 80066a8:	eeb0 1a66 	vmov.f32	s2, s13
 80066ac:	eef0 0a47 	vmov.f32	s1, s14
 80066b0:	eeb0 0a67 	vmov.f32	s0, s15
 80066b4:	f7ff fdce 	bl	8006254 <UpdateMahonyGains>

    // Acc magnitude
    float accMag = sqrtf(ax_f*ax_f + ay_f*ay_f + az_f*az_f);
 80066b8:	4b36      	ldr	r3, [pc, #216]	@ (8006794 <Orientation_Update+0x1a8>)
 80066ba:	ed93 7a00 	vldr	s14, [r3]
 80066be:	4b35      	ldr	r3, [pc, #212]	@ (8006794 <Orientation_Update+0x1a8>)
 80066c0:	edd3 7a00 	vldr	s15, [r3]
 80066c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066c8:	4b33      	ldr	r3, [pc, #204]	@ (8006798 <Orientation_Update+0x1ac>)
 80066ca:	edd3 6a00 	vldr	s13, [r3]
 80066ce:	4b32      	ldr	r3, [pc, #200]	@ (8006798 <Orientation_Update+0x1ac>)
 80066d0:	edd3 7a00 	vldr	s15, [r3]
 80066d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066dc:	4b2f      	ldr	r3, [pc, #188]	@ (800679c <Orientation_Update+0x1b0>)
 80066de:	edd3 6a00 	vldr	s13, [r3]
 80066e2:	4b2e      	ldr	r3, [pc, #184]	@ (800679c <Orientation_Update+0x1b0>)
 80066e4:	edd3 7a00 	vldr	s15, [r3]
 80066e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066f0:	eeb0 0a67 	vmov.f32	s0, s15
 80066f4:	f00c fbe8 	bl	8012ec8 <sqrtf>
 80066f8:	ed87 0a08 	vstr	s0, [r7, #32]

    if (gyroOnlyMode) {
 80066fc:	4b28      	ldr	r3, [pc, #160]	@ (80067a0 <Orientation_Update+0x1b4>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00c      	beq.n	800671e <Orientation_Update+0x132>
            if (accMag < ACC_THRESHOLD_LOW)
 8006704:	edd7 7a08 	vldr	s15, [r7, #32]
 8006708:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80067a4 <Orientation_Update+0x1b8>
 800670c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006714:	d50f      	bpl.n	8006736 <Orientation_Update+0x14a>
                gyroOnlyMode = 0;
 8006716:	4b22      	ldr	r3, [pc, #136]	@ (80067a0 <Orientation_Update+0x1b4>)
 8006718:	2200      	movs	r2, #0
 800671a:	701a      	strb	r2, [r3, #0]
 800671c:	e00b      	b.n	8006736 <Orientation_Update+0x14a>
	} else {
		if (accMag > ACC_THRESHOLD_HIGH)
 800671e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006722:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80067a8 <Orientation_Update+0x1bc>
 8006726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800672a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800672e:	dd02      	ble.n	8006736 <Orientation_Update+0x14a>
			gyroOnlyMode = 1;
 8006730:	4b1b      	ldr	r3, [pc, #108]	@ (80067a0 <Orientation_Update+0x1b4>)
 8006732:	2201      	movs	r2, #1
 8006734:	701a      	strb	r2, [r3, #0]
	}



    // Filtre çağrısı
    if (gyroOnlyMode)
 8006736:	4b1a      	ldr	r3, [pc, #104]	@ (80067a0 <Orientation_Update+0x1b4>)
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <Orientation_Update+0x168>
        updateQuaternion(gx, gy, gz, dt);
 800673e:	edd7 1a01 	vldr	s3, [r7, #4]
 8006742:	ed97 1a05 	vldr	s2, [r7, #20]
 8006746:	edd7 0a06 	vldr	s1, [r7, #24]
 800674a:	ed97 0a07 	vldr	s0, [r7, #28]
 800674e:	f000 f82d 	bl	80067ac <updateQuaternion>
    else
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
}
 8006752:	e018      	b.n	8006786 <Orientation_Update+0x19a>
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
 8006754:	4b0f      	ldr	r3, [pc, #60]	@ (8006794 <Orientation_Update+0x1a8>)
 8006756:	edd3 7a00 	vldr	s15, [r3]
 800675a:	4b0f      	ldr	r3, [pc, #60]	@ (8006798 <Orientation_Update+0x1ac>)
 800675c:	ed93 7a00 	vldr	s14, [r3]
 8006760:	4b0e      	ldr	r3, [pc, #56]	@ (800679c <Orientation_Update+0x1b0>)
 8006762:	edd3 6a00 	vldr	s13, [r3]
 8006766:	ed97 3a01 	vldr	s6, [r7, #4]
 800676a:	eef0 2a66 	vmov.f32	s5, s13
 800676e:	eeb0 2a47 	vmov.f32	s4, s14
 8006772:	eef0 1a67 	vmov.f32	s3, s15
 8006776:	ed97 1a05 	vldr	s2, [r7, #20]
 800677a:	edd7 0a06 	vldr	s1, [r7, #24]
 800677e:	ed97 0a07 	vldr	s0, [r7, #28]
 8006782:	f000 f93b 	bl	80069fc <MahonyAHRSupdateIMU>
}
 8006786:	bf00      	nop
 8006788:	3728      	adds	r7, #40	@ 0x28
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	3e99999a 	.word	0x3e99999a
 8006794:	200017a8 	.word	0x200017a8
 8006798:	200017ac 	.word	0x200017ac
 800679c:	200017b0 	.word	0x200017b0
 80067a0:	200017a5 	.word	0x200017a5
 80067a4:	41d3d2db 	.word	0x41d3d2db
 80067a8:	420172a2 	.word	0x420172a2

080067ac <updateQuaternion>:


void updateQuaternion(float gx, float gy, float gz, float dt) {
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b08a      	sub	sp, #40	@ 0x28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	ed87 0a03 	vstr	s0, [r7, #12]
 80067b6:	edc7 0a02 	vstr	s1, [r7, #8]
 80067ba:	ed87 1a01 	vstr	s2, [r7, #4]
 80067be:	edc7 1a00 	vstr	s3, [r7]

    // Quaternion türevleri
    float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 80067c2:	4b8c      	ldr	r3, [pc, #560]	@ (80069f4 <updateQuaternion+0x248>)
 80067c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80067c8:	eeb1 7a67 	vneg.f32	s14, s15
 80067cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80067d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067d4:	4b87      	ldr	r3, [pc, #540]	@ (80069f4 <updateQuaternion+0x248>)
 80067d6:	edd3 6a02 	vldr	s13, [r3, #8]
 80067da:	edd7 7a02 	vldr	s15, [r7, #8]
 80067de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80067e6:	4b83      	ldr	r3, [pc, #524]	@ (80069f4 <updateQuaternion+0x248>)
 80067e8:	edd3 6a03 	vldr	s13, [r3, #12]
 80067ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80067f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067f8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80067fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006800:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float qDot2 = 0.5f * ( q[0] * gx + q[2] * gz - q[3] * gy);
 8006804:	4b7b      	ldr	r3, [pc, #492]	@ (80069f4 <updateQuaternion+0x248>)
 8006806:	ed93 7a00 	vldr	s14, [r3]
 800680a:	edd7 7a03 	vldr	s15, [r7, #12]
 800680e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006812:	4b78      	ldr	r3, [pc, #480]	@ (80069f4 <updateQuaternion+0x248>)
 8006814:	edd3 6a02 	vldr	s13, [r3, #8]
 8006818:	edd7 7a01 	vldr	s15, [r7, #4]
 800681c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006820:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006824:	4b73      	ldr	r3, [pc, #460]	@ (80069f4 <updateQuaternion+0x248>)
 8006826:	edd3 6a03 	vldr	s13, [r3, #12]
 800682a:	edd7 7a02 	vldr	s15, [r7, #8]
 800682e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006836:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800683a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800683e:	edc7 7a08 	vstr	s15, [r7, #32]
    float qDot3 = 0.5f * ( q[0] * gy - q[1] * gz + q[3] * gx);
 8006842:	4b6c      	ldr	r3, [pc, #432]	@ (80069f4 <updateQuaternion+0x248>)
 8006844:	ed93 7a00 	vldr	s14, [r3]
 8006848:	edd7 7a02 	vldr	s15, [r7, #8]
 800684c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006850:	4b68      	ldr	r3, [pc, #416]	@ (80069f4 <updateQuaternion+0x248>)
 8006852:	edd3 6a01 	vldr	s13, [r3, #4]
 8006856:	edd7 7a01 	vldr	s15, [r7, #4]
 800685a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800685e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006862:	4b64      	ldr	r3, [pc, #400]	@ (80069f4 <updateQuaternion+0x248>)
 8006864:	edd3 6a03 	vldr	s13, [r3, #12]
 8006868:	edd7 7a03 	vldr	s15, [r7, #12]
 800686c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006874:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006878:	ee67 7a87 	vmul.f32	s15, s15, s14
 800687c:	edc7 7a07 	vstr	s15, [r7, #28]
    float qDot4 = 0.5f * ( q[0] * gz + q[1] * gy - q[2] * gx);
 8006880:	4b5c      	ldr	r3, [pc, #368]	@ (80069f4 <updateQuaternion+0x248>)
 8006882:	ed93 7a00 	vldr	s14, [r3]
 8006886:	edd7 7a01 	vldr	s15, [r7, #4]
 800688a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800688e:	4b59      	ldr	r3, [pc, #356]	@ (80069f4 <updateQuaternion+0x248>)
 8006890:	edd3 6a01 	vldr	s13, [r3, #4]
 8006894:	edd7 7a02 	vldr	s15, [r7, #8]
 8006898:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800689c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068a0:	4b54      	ldr	r3, [pc, #336]	@ (80069f4 <updateQuaternion+0x248>)
 80068a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80068a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80068aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068b2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80068b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068ba:	edc7 7a06 	vstr	s15, [r7, #24]

    // Entegrasyon
    q[0] += qDot1 * dt;
 80068be:	4b4d      	ldr	r3, [pc, #308]	@ (80069f4 <updateQuaternion+0x248>)
 80068c0:	ed93 7a00 	vldr	s14, [r3]
 80068c4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80068c8:	edd7 7a00 	vldr	s15, [r7]
 80068cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068d4:	4b47      	ldr	r3, [pc, #284]	@ (80069f4 <updateQuaternion+0x248>)
 80068d6:	edc3 7a00 	vstr	s15, [r3]
    q[1] += qDot2 * dt;
 80068da:	4b46      	ldr	r3, [pc, #280]	@ (80069f4 <updateQuaternion+0x248>)
 80068dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80068e0:	edd7 6a08 	vldr	s13, [r7, #32]
 80068e4:	edd7 7a00 	vldr	s15, [r7]
 80068e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068f0:	4b40      	ldr	r3, [pc, #256]	@ (80069f4 <updateQuaternion+0x248>)
 80068f2:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] += qDot3 * dt;
 80068f6:	4b3f      	ldr	r3, [pc, #252]	@ (80069f4 <updateQuaternion+0x248>)
 80068f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80068fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006900:	edd7 7a00 	vldr	s15, [r7]
 8006904:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800690c:	4b39      	ldr	r3, [pc, #228]	@ (80069f4 <updateQuaternion+0x248>)
 800690e:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] += qDot4 * dt;
 8006912:	4b38      	ldr	r3, [pc, #224]	@ (80069f4 <updateQuaternion+0x248>)
 8006914:	ed93 7a03 	vldr	s14, [r3, #12]
 8006918:	edd7 6a06 	vldr	s13, [r7, #24]
 800691c:	edd7 7a00 	vldr	s15, [r7]
 8006920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006928:	4b32      	ldr	r3, [pc, #200]	@ (80069f4 <updateQuaternion+0x248>)
 800692a:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalize et
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 800692e:	4b31      	ldr	r3, [pc, #196]	@ (80069f4 <updateQuaternion+0x248>)
 8006930:	ed93 7a00 	vldr	s14, [r3]
 8006934:	4b2f      	ldr	r3, [pc, #188]	@ (80069f4 <updateQuaternion+0x248>)
 8006936:	edd3 7a00 	vldr	s15, [r3]
 800693a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800693e:	4b2d      	ldr	r3, [pc, #180]	@ (80069f4 <updateQuaternion+0x248>)
 8006940:	edd3 6a01 	vldr	s13, [r3, #4]
 8006944:	4b2b      	ldr	r3, [pc, #172]	@ (80069f4 <updateQuaternion+0x248>)
 8006946:	edd3 7a01 	vldr	s15, [r3, #4]
 800694a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800694e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006952:	4b28      	ldr	r3, [pc, #160]	@ (80069f4 <updateQuaternion+0x248>)
 8006954:	edd3 6a02 	vldr	s13, [r3, #8]
 8006958:	4b26      	ldr	r3, [pc, #152]	@ (80069f4 <updateQuaternion+0x248>)
 800695a:	edd3 7a02 	vldr	s15, [r3, #8]
 800695e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006962:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006966:	4b23      	ldr	r3, [pc, #140]	@ (80069f4 <updateQuaternion+0x248>)
 8006968:	edd3 6a03 	vldr	s13, [r3, #12]
 800696c:	4b21      	ldr	r3, [pc, #132]	@ (80069f4 <updateQuaternion+0x248>)
 800696e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800697a:	eeb0 0a67 	vmov.f32	s0, s15
 800697e:	f00c faa3 	bl	8012ec8 <sqrtf>
 8006982:	ed87 0a05 	vstr	s0, [r7, #20]
    if (norm > 1e-6f) {
 8006986:	edd7 7a05 	vldr	s15, [r7, #20]
 800698a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80069f8 <updateQuaternion+0x24c>
 800698e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006996:	dc00      	bgt.n	800699a <updateQuaternion+0x1ee>
        q[0] /= norm;
        q[1] /= norm;
        q[2] /= norm;
        q[3] /= norm;
    }
}
 8006998:	e027      	b.n	80069ea <updateQuaternion+0x23e>
        q[0] /= norm;
 800699a:	4b16      	ldr	r3, [pc, #88]	@ (80069f4 <updateQuaternion+0x248>)
 800699c:	edd3 6a00 	vldr	s13, [r3]
 80069a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80069a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069a8:	4b12      	ldr	r3, [pc, #72]	@ (80069f4 <updateQuaternion+0x248>)
 80069aa:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= norm;
 80069ae:	4b11      	ldr	r3, [pc, #68]	@ (80069f4 <updateQuaternion+0x248>)
 80069b0:	edd3 6a01 	vldr	s13, [r3, #4]
 80069b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80069b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069bc:	4b0d      	ldr	r3, [pc, #52]	@ (80069f4 <updateQuaternion+0x248>)
 80069be:	edc3 7a01 	vstr	s15, [r3, #4]
        q[2] /= norm;
 80069c2:	4b0c      	ldr	r3, [pc, #48]	@ (80069f4 <updateQuaternion+0x248>)
 80069c4:	edd3 6a02 	vldr	s13, [r3, #8]
 80069c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80069cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069d0:	4b08      	ldr	r3, [pc, #32]	@ (80069f4 <updateQuaternion+0x248>)
 80069d2:	edc3 7a02 	vstr	s15, [r3, #8]
        q[3] /= norm;
 80069d6:	4b07      	ldr	r3, [pc, #28]	@ (80069f4 <updateQuaternion+0x248>)
 80069d8:	edd3 6a03 	vldr	s13, [r3, #12]
 80069dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80069e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069e4:	4b03      	ldr	r3, [pc, #12]	@ (80069f4 <updateQuaternion+0x248>)
 80069e6:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80069ea:	bf00      	nop
 80069ec:	3728      	adds	r7, #40	@ 0x28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20000028 	.word	0x20000028
 80069f8:	358637bd 	.word	0x358637bd

080069fc <MahonyAHRSupdateIMU>:
        q[2] /= norm_q;
        q[3] /= norm_q;
    }
}

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax_f, float ay_f, float az_f, float dt) {
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b092      	sub	sp, #72	@ 0x48
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	ed87 0a07 	vstr	s0, [r7, #28]
 8006a06:	edc7 0a06 	vstr	s1, [r7, #24]
 8006a0a:	ed87 1a05 	vstr	s2, [r7, #20]
 8006a0e:	edc7 1a04 	vstr	s3, [r7, #16]
 8006a12:	ed87 2a03 	vstr	s4, [r7, #12]
 8006a16:	edc7 2a02 	vstr	s5, [r7, #8]
 8006a1a:	ed87 3a01 	vstr	s6, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
		if(!((ax_f == 0.0f) && (ay_f == 0.0f) && (az_f == 0.0f))) {
 8006a1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006a22:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a2a:	d10e      	bne.n	8006a4a <MahonyAHRSupdateIMU+0x4e>
 8006a2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a30:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a38:	d107      	bne.n	8006a4a <MahonyAHRSupdateIMU+0x4e>
 8006a3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8006a3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a46:	f000 8138 	beq.w	8006cba <MahonyAHRSupdateIMU+0x2be>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax_f * ax_f + ay_f * ay_f + az_f * az_f);
 8006a4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8006a4e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006a52:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006a5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006a62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8006a6e:	f000 fd89 	bl	8007584 <invSqrt>
 8006a72:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax_f *= recipNorm;
 8006a76:	ed97 7a04 	vldr	s14, [r7, #16]
 8006a7a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a82:	edc7 7a04 	vstr	s15, [r7, #16]
		ay_f *= recipNorm;
 8006a86:	ed97 7a03 	vldr	s14, [r7, #12]
 8006a8a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a92:	edc7 7a03 	vstr	s15, [r7, #12]
		az_f *= recipNorm;
 8006a96:	ed97 7a02 	vldr	s14, [r7, #8]
 8006a9a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa2:	edc7 7a02 	vstr	s15, [r7, #8]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8006aa6:	4b66      	ldr	r3, [pc, #408]	@ (8006c40 <MahonyAHRSupdateIMU+0x244>)
 8006aa8:	ed93 7a01 	vldr	s14, [r3, #4]
 8006aac:	4b64      	ldr	r3, [pc, #400]	@ (8006c40 <MahonyAHRSupdateIMU+0x244>)
 8006aae:	edd3 7a03 	vldr	s15, [r3, #12]
 8006ab2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ab6:	4b62      	ldr	r3, [pc, #392]	@ (8006c40 <MahonyAHRSupdateIMU+0x244>)
 8006ab8:	edd3 6a00 	vldr	s13, [r3]
 8006abc:	4b60      	ldr	r3, [pc, #384]	@ (8006c40 <MahonyAHRSupdateIMU+0x244>)
 8006abe:	edd3 7a02 	vldr	s15, [r3, #8]
 8006ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006aca:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8006ace:	4b5c      	ldr	r3, [pc, #368]	@ (8006c40 <MahonyAHRSupdateIMU+0x244>)
 8006ad0:	ed93 7a00 	vldr	s14, [r3]
 8006ad4:	4b5a      	ldr	r3, [pc, #360]	@ (8006c40 <MahonyAHRSupdateIMU+0x244>)
 8006ad6:	edd3 7a01 	vldr	s15, [r3, #4]
 8006ada:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ade:	4b58      	ldr	r3, [pc, #352]	@ (8006c40 <MahonyAHRSupdateIMU+0x244>)
 8006ae0:	edd3 6a02 	vldr	s13, [r3, #8]
 8006ae4:	4b56      	ldr	r3, [pc, #344]	@ (8006c40 <MahonyAHRSupdateIMU+0x244>)
 8006ae6:	edd3 7a03 	vldr	s15, [r3, #12]
 8006aea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006af2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8006af6:	4b52      	ldr	r3, [pc, #328]	@ (8006c40 <MahonyAHRSupdateIMU+0x244>)
 8006af8:	ed93 7a00 	vldr	s14, [r3]
 8006afc:	4b50      	ldr	r3, [pc, #320]	@ (8006c40 <MahonyAHRSupdateIMU+0x244>)
 8006afe:	edd3 7a00 	vldr	s15, [r3]
 8006b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b06:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006b0a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006b0e:	4b4c      	ldr	r3, [pc, #304]	@ (8006c40 <MahonyAHRSupdateIMU+0x244>)
 8006b10:	edd3 6a03 	vldr	s13, [r3, #12]
 8006b14:	4b4a      	ldr	r3, [pc, #296]	@ (8006c40 <MahonyAHRSupdateIMU+0x244>)
 8006b16:	edd3 7a03 	vldr	s15, [r3, #12]
 8006b1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b22:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay_f * halfvz - az_f * halfvy);
 8006b26:	ed97 7a03 	vldr	s14, [r7, #12]
 8006b2a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8006b2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b32:	edd7 6a02 	vldr	s13, [r7, #8]
 8006b36:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8006b3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b42:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az_f * halfvx - ax_f * halfvz);
 8006b46:	ed97 7a02 	vldr	s14, [r7, #8]
 8006b4a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8006b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b52:	edd7 6a04 	vldr	s13, [r7, #16]
 8006b56:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8006b5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b62:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax_f * halfvy - ay_f * halfvx);
 8006b66:	ed97 7a04 	vldr	s14, [r7, #16]
 8006b6a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8006b6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b72:	edd7 6a03 	vldr	s13, [r7, #12]
 8006b76:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8006b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b82:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8006b86:	4b2f      	ldr	r3, [pc, #188]	@ (8006c44 <MahonyAHRSupdateIMU+0x248>)
 8006b88:	edd3 7a00 	vldr	s15, [r3]
 8006b8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b94:	dd5e      	ble.n	8006c54 <MahonyAHRSupdateIMU+0x258>
			integralFBx += twoKi * halfex * dt;	// integral error scaled by Ki
 8006b96:	4b2b      	ldr	r3, [pc, #172]	@ (8006c44 <MahonyAHRSupdateIMU+0x248>)
 8006b98:	ed93 7a00 	vldr	s14, [r3]
 8006b9c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006ba0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ba4:	edd7 7a01 	vldr	s15, [r7, #4]
 8006ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bac:	4b26      	ldr	r3, [pc, #152]	@ (8006c48 <MahonyAHRSupdateIMU+0x24c>)
 8006bae:	edd3 7a00 	vldr	s15, [r3]
 8006bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bb6:	4b24      	ldr	r3, [pc, #144]	@ (8006c48 <MahonyAHRSupdateIMU+0x24c>)
 8006bb8:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * dt;
 8006bbc:	4b21      	ldr	r3, [pc, #132]	@ (8006c44 <MahonyAHRSupdateIMU+0x248>)
 8006bbe:	ed93 7a00 	vldr	s14, [r3]
 8006bc2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8006bc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bca:	edd7 7a01 	vldr	s15, [r7, #4]
 8006bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8006c4c <MahonyAHRSupdateIMU+0x250>)
 8006bd4:	edd3 7a00 	vldr	s15, [r3]
 8006bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8006c4c <MahonyAHRSupdateIMU+0x250>)
 8006bde:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * dt;
 8006be2:	4b18      	ldr	r3, [pc, #96]	@ (8006c44 <MahonyAHRSupdateIMU+0x248>)
 8006be4:	ed93 7a00 	vldr	s14, [r3]
 8006be8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006bec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bf0:	edd7 7a01 	vldr	s15, [r7, #4]
 8006bf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bf8:	4b15      	ldr	r3, [pc, #84]	@ (8006c50 <MahonyAHRSupdateIMU+0x254>)
 8006bfa:	edd3 7a00 	vldr	s15, [r3]
 8006bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c02:	4b13      	ldr	r3, [pc, #76]	@ (8006c50 <MahonyAHRSupdateIMU+0x254>)
 8006c04:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8006c08:	4b0f      	ldr	r3, [pc, #60]	@ (8006c48 <MahonyAHRSupdateIMU+0x24c>)
 8006c0a:	edd3 7a00 	vldr	s15, [r3]
 8006c0e:	ed97 7a07 	vldr	s14, [r7, #28]
 8006c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c16:	edc7 7a07 	vstr	s15, [r7, #28]
			gy += integralFBy;
 8006c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8006c4c <MahonyAHRSupdateIMU+0x250>)
 8006c1c:	edd3 7a00 	vldr	s15, [r3]
 8006c20:	ed97 7a06 	vldr	s14, [r7, #24]
 8006c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c28:	edc7 7a06 	vstr	s15, [r7, #24]
			gz += integralFBz;
 8006c2c:	4b08      	ldr	r3, [pc, #32]	@ (8006c50 <MahonyAHRSupdateIMU+0x254>)
 8006c2e:	edd3 7a00 	vldr	s15, [r3]
 8006c32:	ed97 7a05 	vldr	s14, [r7, #20]
 8006c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c3a:	edc7 7a05 	vstr	s15, [r7, #20]
 8006c3e:	e015      	b.n	8006c6c <MahonyAHRSupdateIMU+0x270>
 8006c40:	20000028 	.word	0x20000028
 8006c44:	2000003c 	.word	0x2000003c
 8006c48:	20001798 	.word	0x20001798
 8006c4c:	2000179c 	.word	0x2000179c
 8006c50:	200017a0 	.word	0x200017a0
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8006c54:	4b9a      	ldr	r3, [pc, #616]	@ (8006ec0 <MahonyAHRSupdateIMU+0x4c4>)
 8006c56:	f04f 0200 	mov.w	r2, #0
 8006c5a:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8006c5c:	4b99      	ldr	r3, [pc, #612]	@ (8006ec4 <MahonyAHRSupdateIMU+0x4c8>)
 8006c5e:	f04f 0200 	mov.w	r2, #0
 8006c62:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8006c64:	4b98      	ldr	r3, [pc, #608]	@ (8006ec8 <MahonyAHRSupdateIMU+0x4cc>)
 8006c66:	f04f 0200 	mov.w	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8006c6c:	4b97      	ldr	r3, [pc, #604]	@ (8006ecc <MahonyAHRSupdateIMU+0x4d0>)
 8006c6e:	ed93 7a00 	vldr	s14, [r3]
 8006c72:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c7a:	ed97 7a07 	vldr	s14, [r7, #28]
 8006c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c82:	edc7 7a07 	vstr	s15, [r7, #28]
		gy += twoKp * halfey;
 8006c86:	4b91      	ldr	r3, [pc, #580]	@ (8006ecc <MahonyAHRSupdateIMU+0x4d0>)
 8006c88:	ed93 7a00 	vldr	s14, [r3]
 8006c8c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8006c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c94:	ed97 7a06 	vldr	s14, [r7, #24]
 8006c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c9c:	edc7 7a06 	vstr	s15, [r7, #24]
		gz += twoKp * halfez;
 8006ca0:	4b8a      	ldr	r3, [pc, #552]	@ (8006ecc <MahonyAHRSupdateIMU+0x4d0>)
 8006ca2:	ed93 7a00 	vldr	s14, [r3]
 8006ca6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cae:	ed97 7a05 	vldr	s14, [r7, #20]
 8006cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cb6:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * dt);		// pre-multiply common factors
 8006cba:	edd7 7a01 	vldr	s15, [r7, #4]
 8006cbe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006cc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cc6:	ed97 7a07 	vldr	s14, [r7, #28]
 8006cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cce:	edc7 7a07 	vstr	s15, [r7, #28]
	gy *= (0.5f * dt);
 8006cd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8006cd6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cde:	ed97 7a06 	vldr	s14, [r7, #24]
 8006ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ce6:	edc7 7a06 	vstr	s15, [r7, #24]
	gz *= (0.5f * dt);
 8006cea:	edd7 7a01 	vldr	s15, [r7, #4]
 8006cee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006cf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cf6:	ed97 7a05 	vldr	s14, [r7, #20]
 8006cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cfe:	edc7 7a05 	vstr	s15, [r7, #20]
	qa = q[0];
 8006d02:	4b73      	ldr	r3, [pc, #460]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 8006d08:	4b71      	ldr	r3, [pc, #452]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8006d0e:	4b70      	ldr	r3, [pc, #448]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8006d14:	4b6e      	ldr	r3, [pc, #440]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006d16:	ed93 7a00 	vldr	s14, [r3]
 8006d1a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006d1e:	eef1 6a67 	vneg.f32	s13, s15
 8006d22:	edd7 7a07 	vldr	s15, [r7, #28]
 8006d26:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006d2a:	ed97 6a08 	vldr	s12, [r7, #32]
 8006d2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006d32:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006d36:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006d3a:	4b65      	ldr	r3, [pc, #404]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006d3c:	ed93 6a03 	vldr	s12, [r3, #12]
 8006d40:	edd7 7a05 	vldr	s15, [r7, #20]
 8006d44:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006d48:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d50:	4b5f      	ldr	r3, [pc, #380]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006d52:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8006d56:	4b5e      	ldr	r3, [pc, #376]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006d58:	ed93 7a01 	vldr	s14, [r3, #4]
 8006d5c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006d60:	edd7 7a07 	vldr	s15, [r7, #28]
 8006d64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006d68:	ed97 6a08 	vldr	s12, [r7, #32]
 8006d6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006d70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006d74:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006d78:	4b55      	ldr	r3, [pc, #340]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006d7a:	ed93 6a03 	vldr	s12, [r3, #12]
 8006d7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006d82:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006d86:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d8e:	4b50      	ldr	r3, [pc, #320]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006d90:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8006d94:	4b4e      	ldr	r3, [pc, #312]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006d96:	ed93 7a02 	vldr	s14, [r3, #8]
 8006d9a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006d9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006da2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006da6:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8006daa:	edd7 7a05 	vldr	s15, [r7, #20]
 8006dae:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006db2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006db6:	4b46      	ldr	r3, [pc, #280]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006db8:	ed93 6a03 	vldr	s12, [r3, #12]
 8006dbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8006dc0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dcc:	4b40      	ldr	r3, [pc, #256]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006dce:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] += (qa * gz + qb * gy - qc * gx);
 8006dd2:	4b3f      	ldr	r3, [pc, #252]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006dd4:	ed93 7a03 	vldr	s14, [r3, #12]
 8006dd8:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006ddc:	edd7 7a05 	vldr	s15, [r7, #20]
 8006de0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006de4:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8006de8:	edd7 7a06 	vldr	s15, [r7, #24]
 8006dec:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006df0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006df4:	ed97 6a08 	vldr	s12, [r7, #32]
 8006df8:	edd7 7a07 	vldr	s15, [r7, #28]
 8006dfc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006e00:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e08:	4b31      	ldr	r3, [pc, #196]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006e0a:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8006e0e:	4b30      	ldr	r3, [pc, #192]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006e10:	ed93 7a00 	vldr	s14, [r3]
 8006e14:	4b2e      	ldr	r3, [pc, #184]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006e16:	edd3 7a00 	vldr	s15, [r3]
 8006e1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006e20:	edd3 6a01 	vldr	s13, [r3, #4]
 8006e24:	4b2a      	ldr	r3, [pc, #168]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006e26:	edd3 7a01 	vldr	s15, [r3, #4]
 8006e2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006e32:	4b27      	ldr	r3, [pc, #156]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006e34:	edd3 6a02 	vldr	s13, [r3, #8]
 8006e38:	4b25      	ldr	r3, [pc, #148]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006e3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8006e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006e46:	4b22      	ldr	r3, [pc, #136]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006e48:	edd3 6a03 	vldr	s13, [r3, #12]
 8006e4c:	4b20      	ldr	r3, [pc, #128]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006e4e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006e52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8006e5e:	f000 fb91 	bl	8007584 <invSqrt>
 8006e62:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 8006e66:	4b1a      	ldr	r3, [pc, #104]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006e68:	ed93 7a00 	vldr	s14, [r3]
 8006e6c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e74:	4b16      	ldr	r3, [pc, #88]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006e76:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8006e7a:	4b15      	ldr	r3, [pc, #84]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006e7c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006e80:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e88:	4b11      	ldr	r3, [pc, #68]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006e8a:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] *= recipNorm;
 8006e8e:	4b10      	ldr	r3, [pc, #64]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006e90:	ed93 7a02 	vldr	s14, [r3, #8]
 8006e94:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006e9e:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] *= recipNorm;
 8006ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006ea4:	ed93 7a03 	vldr	s14, [r3, #12]
 8006ea8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb0:	4b07      	ldr	r3, [pc, #28]	@ (8006ed0 <MahonyAHRSupdateIMU+0x4d4>)
 8006eb2:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8006eb6:	bf00      	nop
 8006eb8:	3748      	adds	r7, #72	@ 0x48
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20001798 	.word	0x20001798
 8006ec4:	2000179c 	.word	0x2000179c
 8006ec8:	200017a0 	.word	0x200017a0
 8006ecc:	20000038 	.word	0x20000038
 8006ed0:	20000028 	.word	0x20000028

08006ed4 <quaternionToThetaZ>:


float quaternionToThetaZ() {
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
    float r13 = 2 * q[1] * q[3] + 2 * q[2] * q[0];
 8006eda:	4b44      	ldr	r3, [pc, #272]	@ (8006fec <quaternionToThetaZ+0x118>)
 8006edc:	edd3 7a01 	vldr	s15, [r3, #4]
 8006ee0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006ee4:	4b41      	ldr	r3, [pc, #260]	@ (8006fec <quaternionToThetaZ+0x118>)
 8006ee6:	edd3 7a03 	vldr	s15, [r3, #12]
 8006eea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006eee:	4b3f      	ldr	r3, [pc, #252]	@ (8006fec <quaternionToThetaZ+0x118>)
 8006ef0:	edd3 7a02 	vldr	s15, [r3, #8]
 8006ef4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006ef8:	4b3c      	ldr	r3, [pc, #240]	@ (8006fec <quaternionToThetaZ+0x118>)
 8006efa:	edd3 7a00 	vldr	s15, [r3]
 8006efe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f06:	edc7 7a05 	vstr	s15, [r7, #20]
    float r23 = 2 * q[2] * q[3] - 2 * q[1] * q[0];
 8006f0a:	4b38      	ldr	r3, [pc, #224]	@ (8006fec <quaternionToThetaZ+0x118>)
 8006f0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006f10:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006f14:	4b35      	ldr	r3, [pc, #212]	@ (8006fec <quaternionToThetaZ+0x118>)
 8006f16:	edd3 7a03 	vldr	s15, [r3, #12]
 8006f1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f1e:	4b33      	ldr	r3, [pc, #204]	@ (8006fec <quaternionToThetaZ+0x118>)
 8006f20:	edd3 7a01 	vldr	s15, [r3, #4]
 8006f24:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006f28:	4b30      	ldr	r3, [pc, #192]	@ (8006fec <quaternionToThetaZ+0x118>)
 8006f2a:	edd3 7a00 	vldr	s15, [r3]
 8006f2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f36:	edc7 7a04 	vstr	s15, [r7, #16]
    float r33 = 1 - 2 * q[1] * q[1] - 2 * q[2] * q[2];
 8006f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8006fec <quaternionToThetaZ+0x118>)
 8006f3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006f40:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006f44:	4b29      	ldr	r3, [pc, #164]	@ (8006fec <quaternionToThetaZ+0x118>)
 8006f46:	edd3 7a01 	vldr	s15, [r3, #4]
 8006f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006f56:	4b25      	ldr	r3, [pc, #148]	@ (8006fec <quaternionToThetaZ+0x118>)
 8006f58:	edd3 7a02 	vldr	s15, [r3, #8]
 8006f5c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006f60:	4b22      	ldr	r3, [pc, #136]	@ (8006fec <quaternionToThetaZ+0x118>)
 8006f62:	edd3 7a02 	vldr	s15, [r3, #8]
 8006f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f6e:	edc7 7a03 	vstr	s15, [r7, #12]

    float dotProduct = r33;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	60bb      	str	r3, [r7, #8]
    float magnitude = sqrtf(r13 * r13 + r23 * r23 + r33 * r33);
 8006f76:	edd7 7a05 	vldr	s15, [r7, #20]
 8006f7a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006f7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006f82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006f86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f8e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f96:	eeb0 0a67 	vmov.f32	s0, s15
 8006f9a:	f00b ff95 	bl	8012ec8 <sqrtf>
 8006f9e:	ed87 0a01 	vstr	s0, [r7, #4]

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
 8006fa2:	ed97 7a02 	vldr	s14, [r7, #8]
 8006fa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8006faa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006fae:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8006fb2:	eeb0 0a66 	vmov.f32	s0, s13
 8006fb6:	f00c fcde 	bl	8013976 <fminf>
 8006fba:	eef0 7a40 	vmov.f32	s15, s0
 8006fbe:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8006fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8006fc6:	f00c fcb9 	bl	801393c <fmaxf>
 8006fca:	ed87 0a00 	vstr	s0, [r7]
    return acosf(safeValue) * (180.0f / 3.14f);
 8006fce:	ed97 0a00 	vldr	s0, [r7]
 8006fd2:	f00b ff1f 	bl	8012e14 <acosf>
 8006fd6:	eef0 7a40 	vmov.f32	s15, s0
 8006fda:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006ff0 <quaternionToThetaZ+0x11c>
 8006fde:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8006fe6:	3718      	adds	r7, #24
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	20000028 	.word	0x20000028
 8006ff0:	42654ca3 	.word	0x42654ca3

08006ff4 <quaternionToPitchDegree>:
    float siny_cosp = 2.0f * (w * z + x * y);
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
}

float quaternionToPitchDegree() {
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 8006ffa:	4b22      	ldr	r3, [pc, #136]	@ (8007084 <quaternionToPitchDegree+0x90>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	617b      	str	r3, [r7, #20]
 8007000:	4b20      	ldr	r3, [pc, #128]	@ (8007084 <quaternionToPitchDegree+0x90>)
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	613b      	str	r3, [r7, #16]
 8007006:	4b1f      	ldr	r3, [pc, #124]	@ (8007084 <quaternionToPitchDegree+0x90>)
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	4b1d      	ldr	r3, [pc, #116]	@ (8007084 <quaternionToPitchDegree+0x90>)
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	60bb      	str	r3, [r7, #8]
    float sinp = 2.0f * (w * y - z * x);
 8007012:	ed97 7a05 	vldr	s14, [r7, #20]
 8007016:	edd7 7a03 	vldr	s15, [r7, #12]
 800701a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800701e:	edd7 6a02 	vldr	s13, [r7, #8]
 8007022:	edd7 7a04 	vldr	s15, [r7, #16]
 8007026:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800702a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800702e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007032:	edc7 7a01 	vstr	s15, [r7, #4]
    if (fabsf(sinp) >= 1.0f)
 8007036:	edd7 7a01 	vldr	s15, [r7, #4]
 800703a:	eef0 7ae7 	vabs.f32	s15, s15
 800703e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800704a:	db0c      	blt.n	8007066 <quaternionToPitchDegree+0x72>
        return (sinp > 0 ? 90.0f : -90.0f); // clamp
 800704c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007050:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007058:	dd02      	ble.n	8007060 <quaternionToPitchDegree+0x6c>
 800705a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8007088 <quaternionToPitchDegree+0x94>
 800705e:	e00c      	b.n	800707a <quaternionToPitchDegree+0x86>
 8007060:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800708c <quaternionToPitchDegree+0x98>
 8007064:	e009      	b.n	800707a <quaternionToPitchDegree+0x86>
    else
        return asinf(sinp) * (180.0f / 3.14159265f);
 8007066:	ed97 0a01 	vldr	s0, [r7, #4]
 800706a:	f00b feff 	bl	8012e6c <asinf>
 800706e:	eef0 7a40 	vmov.f32	s15, s0
 8007072:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007090 <quaternionToPitchDegree+0x9c>
 8007076:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800707a:	eeb0 0a67 	vmov.f32	s0, s15
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20000028 	.word	0x20000028
 8007088:	42b40000 	.word	0x42b40000
 800708c:	c2b40000 	.word	0xc2b40000
 8007090:	42652ee0 	.word	0x42652ee0

08007094 <quaternionToRollDegree>:

float quaternionToRollDegree(){
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 800709a:	4b20      	ldr	r3, [pc, #128]	@ (800711c <quaternionToRollDegree+0x88>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	617b      	str	r3, [r7, #20]
 80070a0:	4b1e      	ldr	r3, [pc, #120]	@ (800711c <quaternionToRollDegree+0x88>)
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	613b      	str	r3, [r7, #16]
 80070a6:	4b1d      	ldr	r3, [pc, #116]	@ (800711c <quaternionToRollDegree+0x88>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	4b1b      	ldr	r3, [pc, #108]	@ (800711c <quaternionToRollDegree+0x88>)
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	60bb      	str	r3, [r7, #8]
    float sinr_cosp = 2.0f * (w * x + y * z);
 80070b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80070b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80070ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80070be:	edd7 6a03 	vldr	s13, [r7, #12]
 80070c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80070c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80070ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80070d2:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosr_cosp = 1.0f - 2.0f * (x * x + y * y);
 80070d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80070da:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80070de:	edd7 7a03 	vldr	s15, [r7, #12]
 80070e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80070e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80070ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070f6:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(sinr_cosp, cosr_cosp) * (180.0f / 3.14159265f);
 80070fa:	edd7 0a00 	vldr	s1, [r7]
 80070fe:	ed97 0a01 	vldr	s0, [r7, #4]
 8007102:	f00b fedf 	bl	8012ec4 <atan2f>
 8007106:	eef0 7a40 	vmov.f32	s15, s0
 800710a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8007120 <quaternionToRollDegree+0x8c>
 800710e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007112:	eeb0 0a67 	vmov.f32	s0, s15
 8007116:	3718      	adds	r7, #24
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	20000028 	.word	0x20000028
 8007120:	42652ee0 	.word	0x42652ee0

08007124 <quaternionToYaw>:


float quaternionToYaw(){
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 800712a:	4b2a      	ldr	r3, [pc, #168]	@ (80071d4 <quaternionToYaw+0xb0>)
 800712c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007130:	4b28      	ldr	r3, [pc, #160]	@ (80071d4 <quaternionToYaw+0xb0>)
 8007132:	edd3 7a02 	vldr	s15, [r3, #8]
 8007136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800713a:	4b26      	ldr	r3, [pc, #152]	@ (80071d4 <quaternionToYaw+0xb0>)
 800713c:	edd3 6a00 	vldr	s13, [r3]
 8007140:	4b24      	ldr	r3, [pc, #144]	@ (80071d4 <quaternionToYaw+0xb0>)
 8007142:	edd3 7a03 	vldr	s15, [r3, #12]
 8007146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800714a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800714e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8007152:	4b20      	ldr	r3, [pc, #128]	@ (80071d4 <quaternionToYaw+0xb0>)
 8007154:	ed93 7a00 	vldr	s14, [r3]
 8007158:	4b1e      	ldr	r3, [pc, #120]	@ (80071d4 <quaternionToYaw+0xb0>)
 800715a:	edd3 7a00 	vldr	s15, [r3]
 800715e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007162:	4b1c      	ldr	r3, [pc, #112]	@ (80071d4 <quaternionToYaw+0xb0>)
 8007164:	edd3 6a01 	vldr	s13, [r3, #4]
 8007168:	4b1a      	ldr	r3, [pc, #104]	@ (80071d4 <quaternionToYaw+0xb0>)
 800716a:	edd3 7a01 	vldr	s15, [r3, #4]
 800716e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007172:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007176:	4b17      	ldr	r3, [pc, #92]	@ (80071d4 <quaternionToYaw+0xb0>)
 8007178:	edd3 6a02 	vldr	s13, [r3, #8]
 800717c:	4b15      	ldr	r3, [pc, #84]	@ (80071d4 <quaternionToYaw+0xb0>)
 800717e:	edd3 7a02 	vldr	s15, [r3, #8]
 8007182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007186:	ee37 7a67 	vsub.f32	s14, s14, s15
 800718a:	4b12      	ldr	r3, [pc, #72]	@ (80071d4 <quaternionToYaw+0xb0>)
 800718c:	edd3 6a03 	vldr	s13, [r3, #12]
 8007190:	4b10      	ldr	r3, [pc, #64]	@ (80071d4 <quaternionToYaw+0xb0>)
 8007192:	edd3 7a03 	vldr	s15, [r3, #12]
 8007196:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800719a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800719e:	eef0 0a67 	vmov.f32	s1, s15
 80071a2:	eeb0 0a46 	vmov.f32	s0, s12
 80071a6:	f00b fe8d 	bl	8012ec4 <atan2f>
 80071aa:	eef0 7a40 	vmov.f32	s15, s0
 80071ae:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80071d8 <quaternionToYaw+0xb4>
 80071b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80071b6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80071dc <quaternionToYaw+0xb8>
 80071ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071be:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	ee07 3a90 	vmov	s15, r3
}
 80071c8:	eeb0 0a67 	vmov.f32	s0, s15
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	20000028 	.word	0x20000028
 80071d8:	43340000 	.word	0x43340000
 80071dc:	40490fd0 	.word	0x40490fd0

080071e0 <quaternionToPitch>:

float quaternionToPitch(){
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 80071e6:	4b17      	ldr	r3, [pc, #92]	@ (8007244 <quaternionToPitch+0x64>)
 80071e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80071ec:	4b15      	ldr	r3, [pc, #84]	@ (8007244 <quaternionToPitch+0x64>)
 80071ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80071f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80071f6:	4b13      	ldr	r3, [pc, #76]	@ (8007244 <quaternionToPitch+0x64>)
 80071f8:	edd3 6a00 	vldr	s13, [r3]
 80071fc:	4b11      	ldr	r3, [pc, #68]	@ (8007244 <quaternionToPitch+0x64>)
 80071fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8007202:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800720a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800720e:	eeb0 0a67 	vmov.f32	s0, s15
 8007212:	f00b fe2b 	bl	8012e6c <asinf>
 8007216:	eef0 7a40 	vmov.f32	s15, s0
 800721a:	eef1 7a67 	vneg.f32	s15, s15
 800721e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8007248 <quaternionToPitch+0x68>
 8007222:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007226:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800724c <quaternionToPitch+0x6c>
 800722a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800722e:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	ee07 3a90 	vmov	s15, r3
}
 8007238:	eeb0 0a67 	vmov.f32	s0, s15
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	20000028 	.word	0x20000028
 8007248:	43340000 	.word	0x43340000
 800724c:	40490fd0 	.word	0x40490fd0

08007250 <quaternionToRoll>:

float quaternionToRoll(){
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 8007256:	4b2a      	ldr	r3, [pc, #168]	@ (8007300 <quaternionToRoll+0xb0>)
 8007258:	ed93 7a00 	vldr	s14, [r3]
 800725c:	4b28      	ldr	r3, [pc, #160]	@ (8007300 <quaternionToRoll+0xb0>)
 800725e:	edd3 7a01 	vldr	s15, [r3, #4]
 8007262:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007266:	4b26      	ldr	r3, [pc, #152]	@ (8007300 <quaternionToRoll+0xb0>)
 8007268:	edd3 6a02 	vldr	s13, [r3, #8]
 800726c:	4b24      	ldr	r3, [pc, #144]	@ (8007300 <quaternionToRoll+0xb0>)
 800726e:	edd3 7a03 	vldr	s15, [r3, #12]
 8007272:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800727a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800727e:	4b20      	ldr	r3, [pc, #128]	@ (8007300 <quaternionToRoll+0xb0>)
 8007280:	ed93 7a00 	vldr	s14, [r3]
 8007284:	4b1e      	ldr	r3, [pc, #120]	@ (8007300 <quaternionToRoll+0xb0>)
 8007286:	edd3 7a00 	vldr	s15, [r3]
 800728a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800728e:	4b1c      	ldr	r3, [pc, #112]	@ (8007300 <quaternionToRoll+0xb0>)
 8007290:	edd3 6a01 	vldr	s13, [r3, #4]
 8007294:	4b1a      	ldr	r3, [pc, #104]	@ (8007300 <quaternionToRoll+0xb0>)
 8007296:	edd3 7a01 	vldr	s15, [r3, #4]
 800729a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800729e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80072a2:	4b17      	ldr	r3, [pc, #92]	@ (8007300 <quaternionToRoll+0xb0>)
 80072a4:	edd3 6a02 	vldr	s13, [r3, #8]
 80072a8:	4b15      	ldr	r3, [pc, #84]	@ (8007300 <quaternionToRoll+0xb0>)
 80072aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80072ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80072b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80072b6:	4b12      	ldr	r3, [pc, #72]	@ (8007300 <quaternionToRoll+0xb0>)
 80072b8:	edd3 6a03 	vldr	s13, [r3, #12]
 80072bc:	4b10      	ldr	r3, [pc, #64]	@ (8007300 <quaternionToRoll+0xb0>)
 80072be:	edd3 7a03 	vldr	s15, [r3, #12]
 80072c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80072c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072ca:	eef0 0a67 	vmov.f32	s1, s15
 80072ce:	eeb0 0a46 	vmov.f32	s0, s12
 80072d2:	f00b fdf7 	bl	8012ec4 <atan2f>
 80072d6:	eef0 7a40 	vmov.f32	s15, s0
 80072da:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8007304 <quaternionToRoll+0xb4>
 80072de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80072e2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007308 <quaternionToRoll+0xb8>
 80072e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072ea:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	ee07 3a90 	vmov	s15, r3
}
 80072f4:	eeb0 0a67 	vmov.f32	s0, s15
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	20000028 	.word	0x20000028
 8007304:	43340000 	.word	0x43340000
 8007308:	40490fd0 	.word	0x40490fd0

0800730c <getInitialQuaternion>:

void getInitialQuaternion() {
 800730c:	b5b0      	push	{r4, r5, r7, lr}
 800730e:	b092      	sub	sp, #72	@ 0x48
 8007310:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.datas.acc_z * BMI_sensor.datas.acc_z + BMI_sensor.datas.acc_x * BMI_sensor.datas.acc_x + BMI_sensor.datas.acc_y * BMI_sensor.datas.acc_y);
 8007312:	4b98      	ldr	r3, [pc, #608]	@ (8007574 <getInitialQuaternion+0x268>)
 8007314:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8007318:	4b96      	ldr	r3, [pc, #600]	@ (8007574 <getInitialQuaternion+0x268>)
 800731a:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800731e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007322:	4b94      	ldr	r3, [pc, #592]	@ (8007574 <getInitialQuaternion+0x268>)
 8007324:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 8007328:	4b92      	ldr	r3, [pc, #584]	@ (8007574 <getInitialQuaternion+0x268>)
 800732a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800732e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007332:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007336:	4b8f      	ldr	r3, [pc, #572]	@ (8007574 <getInitialQuaternion+0x268>)
 8007338:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 800733c:	4b8d      	ldr	r3, [pc, #564]	@ (8007574 <getInitialQuaternion+0x268>)
 800733e:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8007342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800734a:	ee17 0a90 	vmov	r0, s15
 800734e:	f7f9 f91b 	bl	8000588 <__aeabi_f2d>
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	ec43 2b10 	vmov	d0, r2, r3
 800735a:	f00b fe43 	bl	8012fe4 <sqrt>
 800735e:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.datas.acc_y;
 8007362:	4b84      	ldr	r3, [pc, #528]	@ (8007574 <getInitialQuaternion+0x268>)
 8007364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007366:	4618      	mov	r0, r3
 8007368:	f7f9 f90e 	bl	8000588 <__aeabi_f2d>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)-BMI_sensor.datas.acc_z;
 8007374:	4b7f      	ldr	r3, [pc, #508]	@ (8007574 <getInitialQuaternion+0x268>)
 8007376:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800737a:	eef1 7a67 	vneg.f32	s15, s15
 800737e:	ee17 3a90 	vmov	r3, s15
 8007382:	4618      	mov	r0, r3
 8007384:	f7f9 f900 	bl	8000588 <__aeabi_f2d>
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] = (double)BMI_sensor.datas.acc_x;
 8007390:	4b78      	ldr	r3, [pc, #480]	@ (8007574 <getInitialQuaternion+0x268>)
 8007392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007394:	4618      	mov	r0, r3
 8007396:	f7f9 f8f7 	bl	8000588 <__aeabi_f2d>
 800739a:	4602      	mov	r2, r0
 800739c:	460b      	mov	r3, r1
 800739e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    accel_temp[0] /= norm;
 80073a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80073a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80073aa:	f7f9 fa6f 	bl	800088c <__aeabi_ddiv>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 80073b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80073ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80073be:	f7f9 fa65 	bl	800088c <__aeabi_ddiv>
 80073c2:	4602      	mov	r2, r0
 80073c4:	460b      	mov	r3, r1
 80073c6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 80073ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80073ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80073d2:	f7f9 fa5b 	bl	800088c <__aeabi_ddiv>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 80073de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80073e2:	f04f 0000 	mov.w	r0, #0
 80073e6:	4964      	ldr	r1, [pc, #400]	@ (8007578 <getInitialQuaternion+0x26c>)
 80073e8:	f7f8 ff6e 	bl	80002c8 <__aeabi_dsub>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	ec43 2b17 	vmov	d7, r2, r3
 80073f4:	eeb0 0a47 	vmov.f32	s0, s14
 80073f8:	eef0 0a67 	vmov.f32	s1, s15
 80073fc:	f00b fdf2 	bl	8012fe4 <sqrt>
 8007400:	ec51 0b10 	vmov	r0, r1, d0
 8007404:	f04f 0200 	mov.w	r2, #0
 8007408:	4b5c      	ldr	r3, [pc, #368]	@ (800757c <getInitialQuaternion+0x270>)
 800740a:	f7f9 f915 	bl	8000638 <__aeabi_dmul>
 800740e:	4602      	mov	r2, r0
 8007410:	460b      	mov	r3, r1
 8007412:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 8007416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800741a:	f04f 0000 	mov.w	r0, #0
 800741e:	4957      	ldr	r1, [pc, #348]	@ (800757c <getInitialQuaternion+0x270>)
 8007420:	f7f9 fa34 	bl	800088c <__aeabi_ddiv>
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 800742c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007430:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007434:	f7f9 f900 	bl	8000638 <__aeabi_dmul>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	4610      	mov	r0, r2
 800743e:	4619      	mov	r1, r3
 8007440:	f04f 0200 	mov.w	r2, #0
 8007444:	4b4d      	ldr	r3, [pc, #308]	@ (800757c <getInitialQuaternion+0x270>)
 8007446:	f7f9 f8f7 	bl	8000638 <__aeabi_dmul>
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 8007452:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007456:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800745a:	f7f9 f8ed 	bl	8000638 <__aeabi_dmul>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4610      	mov	r0, r2
 8007464:	4619      	mov	r1, r3
 8007466:	f04f 0200 	mov.w	r2, #0
 800746a:	4b44      	ldr	r3, [pc, #272]	@ (800757c <getInitialQuaternion+0x270>)
 800746c:	f7f9 f8e4 	bl	8000638 <__aeabi_dmul>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 8007478:	f04f 0200 	mov.w	r2, #0
 800747c:	f04f 0300 	mov.w	r3, #0
 8007480:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8007484:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800748c:	f7f9 f8d4 	bl	8000638 <__aeabi_dmul>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4614      	mov	r4, r2
 8007496:	461d      	mov	r5, r3
 8007498:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800749c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074a0:	f7f9 f8ca 	bl	8000638 <__aeabi_dmul>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4620      	mov	r0, r4
 80074aa:	4629      	mov	r1, r5
 80074ac:	f7f8 ff0e 	bl	80002cc <__adddf3>
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4614      	mov	r4, r2
 80074b6:	461d      	mov	r5, r3
 80074b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80074bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80074c0:	f7f9 f8ba 	bl	8000638 <__aeabi_dmul>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	4620      	mov	r0, r4
 80074ca:	4629      	mov	r1, r5
 80074cc:	f7f8 fefe 	bl	80002cc <__adddf3>
 80074d0:	4602      	mov	r2, r0
 80074d2:	460b      	mov	r3, r1
 80074d4:	4614      	mov	r4, r2
 80074d6:	461d      	mov	r5, r3
 80074d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80074dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074e0:	f7f9 f8aa 	bl	8000638 <__aeabi_dmul>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4620      	mov	r0, r4
 80074ea:	4629      	mov	r1, r5
 80074ec:	f7f8 feee 	bl	80002cc <__adddf3>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	ec43 2b17 	vmov	d7, r2, r3
 80074f8:	eeb0 0a47 	vmov.f32	s0, s14
 80074fc:	eef0 0a67 	vmov.f32	s1, s15
 8007500:	f00b fd70 	bl	8012fe4 <sqrt>
 8007504:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

    q[0] = q_temp[0] / norm;
 8007508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800750c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007510:	f7f9 f9bc 	bl	800088c <__aeabi_ddiv>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	4610      	mov	r0, r2
 800751a:	4619      	mov	r1, r3
 800751c:	f7f9 fb84 	bl	8000c28 <__aeabi_d2f>
 8007520:	4603      	mov	r3, r0
 8007522:	4a17      	ldr	r2, [pc, #92]	@ (8007580 <getInitialQuaternion+0x274>)
 8007524:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 8007526:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800752a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800752e:	f7f9 f9ad 	bl	800088c <__aeabi_ddiv>
 8007532:	4602      	mov	r2, r0
 8007534:	460b      	mov	r3, r1
 8007536:	4610      	mov	r0, r2
 8007538:	4619      	mov	r1, r3
 800753a:	f7f9 fb75 	bl	8000c28 <__aeabi_d2f>
 800753e:	4603      	mov	r3, r0
 8007540:	4a0f      	ldr	r2, [pc, #60]	@ (8007580 <getInitialQuaternion+0x274>)
 8007542:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 8007544:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007548:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800754c:	f7f9 f99e 	bl	800088c <__aeabi_ddiv>
 8007550:	4602      	mov	r2, r0
 8007552:	460b      	mov	r3, r1
 8007554:	4610      	mov	r0, r2
 8007556:	4619      	mov	r1, r3
 8007558:	f7f9 fb66 	bl	8000c28 <__aeabi_d2f>
 800755c:	4603      	mov	r3, r0
 800755e:	4a08      	ldr	r2, [pc, #32]	@ (8007580 <getInitialQuaternion+0x274>)
 8007560:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 8007562:	4b07      	ldr	r3, [pc, #28]	@ (8007580 <getInitialQuaternion+0x274>)
 8007564:	f04f 0200 	mov.w	r2, #0
 8007568:	60da      	str	r2, [r3, #12]
}
 800756a:	bf00      	nop
 800756c:	3748      	adds	r7, #72	@ 0x48
 800756e:	46bd      	mov	sp, r7
 8007570:	bdb0      	pop	{r4, r5, r7, pc}
 8007572:	bf00      	nop
 8007574:	200015e0 	.word	0x200015e0
 8007578:	3ff00000 	.word	0x3ff00000
 800757c:	3fe00000 	.word	0x3fe00000
 8007580:	20000028 	.word	0x20000028

08007584 <invSqrt>:

float invSqrt(float x) {
 8007584:	b480      	push	{r7}
 8007586:	b087      	sub	sp, #28
 8007588:	af00      	add	r7, sp, #0
 800758a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800758e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007592:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800759a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80075a2:	f107 0310 	add.w	r3, r7, #16
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	105a      	asrs	r2, r3, #1
 80075ae:	4b12      	ldr	r3, [pc, #72]	@ (80075f8 <invSqrt+0x74>)
 80075b0:	1a9b      	subs	r3, r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80075b4:	f107 030c 	add.w	r3, r7, #12
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80075bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80075c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80075c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80075c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80075cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80075d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80075d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80075dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075e0:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	ee07 3a90 	vmov	s15, r3
}
 80075ea:	eeb0 0a67 	vmov.f32	s0, s15
 80075ee:	371c      	adds	r7, #28
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr
 80075f8:	5f3759df 	.word	0x5f3759df

080075fc <calculate_accel_std_deviation>:
/**
 * @brief İvme değerlerinin standart sapmasını hesapla
 * @return Standart sapma değeri
 */
static float calculate_accel_std_deviation(void)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
    // Buffer dolmadıysa ve çok az veri varsa
    if (!accel_buffer_full && accel_buffer_index < 2) return 0.0f;
 8007602:	4b3d      	ldr	r3, [pc, #244]	@ (80076f8 <calculate_accel_std_deviation+0xfc>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d106      	bne.n	8007618 <calculate_accel_std_deviation+0x1c>
 800760a:	4b3c      	ldr	r3, [pc, #240]	@ (80076fc <calculate_accel_std_deviation+0x100>)
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d802      	bhi.n	8007618 <calculate_accel_std_deviation+0x1c>
 8007612:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8007700 <calculate_accel_std_deviation+0x104>
 8007616:	e069      	b.n	80076ec <calculate_accel_std_deviation+0xf0>

    int count = accel_buffer_full ? ACCEL_BUFFER_SIZE : accel_buffer_index;
 8007618:	4b37      	ldr	r3, [pc, #220]	@ (80076f8 <calculate_accel_std_deviation+0xfc>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d102      	bne.n	8007626 <calculate_accel_std_deviation+0x2a>
 8007620:	4b36      	ldr	r3, [pc, #216]	@ (80076fc <calculate_accel_std_deviation+0x100>)
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	e000      	b.n	8007628 <calculate_accel_std_deviation+0x2c>
 8007626:	2305      	movs	r3, #5
 8007628:	607b      	str	r3, [r7, #4]
    float sum = 0.0f;
 800762a:	f04f 0300 	mov.w	r3, #0
 800762e:	617b      	str	r3, [r7, #20]
    float mean = 0.0f;
 8007630:	f04f 0300 	mov.w	r3, #0
 8007634:	603b      	str	r3, [r7, #0]
    float variance = 0.0f;
 8007636:	f04f 0300 	mov.w	r3, #0
 800763a:	613b      	str	r3, [r7, #16]

    // Ortalama hesapla
    for (int i = 0; i < count; i++) {
 800763c:	2300      	movs	r3, #0
 800763e:	60fb      	str	r3, [r7, #12]
 8007640:	e00e      	b.n	8007660 <calculate_accel_std_deviation+0x64>
        sum += accel_buffer[i];
 8007642:	4a30      	ldr	r2, [pc, #192]	@ (8007704 <calculate_accel_std_deviation+0x108>)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	edd3 7a00 	vldr	s15, [r3]
 800764e:	ed97 7a05 	vldr	s14, [r7, #20]
 8007652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007656:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < count; i++) {
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3301      	adds	r3, #1
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	429a      	cmp	r2, r3
 8007666:	dbec      	blt.n	8007642 <calculate_accel_std_deviation+0x46>
    }
    mean = sum / count;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	ee07 3a90 	vmov	s15, r3
 800766e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007672:	edd7 6a05 	vldr	s13, [r7, #20]
 8007676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800767a:	edc7 7a00 	vstr	s15, [r7]

    // Varyans hesapla
    for (int i = 0; i < count; i++) {
 800767e:	2300      	movs	r3, #0
 8007680:	60bb      	str	r3, [r7, #8]
 8007682:	e01e      	b.n	80076c2 <calculate_accel_std_deviation+0xc6>
        variance += (accel_buffer[i] - mean) * (accel_buffer[i] - mean);
 8007684:	4a1f      	ldr	r2, [pc, #124]	@ (8007704 <calculate_accel_std_deviation+0x108>)
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	ed93 7a00 	vldr	s14, [r3]
 8007690:	edd7 7a00 	vldr	s15, [r7]
 8007694:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007698:	4a1a      	ldr	r2, [pc, #104]	@ (8007704 <calculate_accel_std_deviation+0x108>)
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	edd3 6a00 	vldr	s13, [r3]
 80076a4:	edd7 7a00 	vldr	s15, [r7]
 80076a8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80076ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80076b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076b8:	edc7 7a04 	vstr	s15, [r7, #16]
    for (int i = 0; i < count; i++) {
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	3301      	adds	r3, #1
 80076c0:	60bb      	str	r3, [r7, #8]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	dbdc      	blt.n	8007684 <calculate_accel_std_deviation+0x88>
    }
    variance /= count;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	ee07 3a90 	vmov	s15, r3
 80076d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076d4:	edd7 6a04 	vldr	s13, [r7, #16]
 80076d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076dc:	edc7 7a04 	vstr	s15, [r7, #16]

    return sqrtf(variance);
 80076e0:	ed97 0a04 	vldr	s0, [r7, #16]
 80076e4:	f00b fbf0 	bl	8012ec8 <sqrtf>
 80076e8:	eef0 7a40 	vmov.f32	s15, s0
}
 80076ec:	eeb0 0a67 	vmov.f32	s0, s15
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	20001825 	.word	0x20001825
 80076fc:	20001824 	.word	0x20001824
 8007700:	00000000 	.word	0x00000000
 8007704:	20001810 	.word	0x20001810

08007708 <detect_accel_failure>:
 * @brief İvme sensörünün arızalı olup olmadığını kontrol et
 * @param accel İvme değeri (m/s²)
 * @return 1: Arıza tespit edildi, 0: Arıza yok
 */
static uint8_t detect_accel_failure(float accel)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af00      	add	r7, sp, #0
 800770e:	ed87 0a01 	vstr	s0, [r7, #4]
    float accel_abs = fabsf(accel);
 8007712:	edd7 7a01 	vldr	s15, [r7, #4]
 8007716:	eef0 7ae7 	vabs.f32	s15, s15
 800771a:	edc7 7a05 	vstr	s15, [r7, #20]
    float max_accel, max_std;

    // Buffer güncelleme
    accel_buffer[accel_buffer_index] = accel_abs;
 800771e:	4b31      	ldr	r3, [pc, #196]	@ (80077e4 <detect_accel_failure+0xdc>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	4a31      	ldr	r2, [pc, #196]	@ (80077e8 <detect_accel_failure+0xe0>)
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	601a      	str	r2, [r3, #0]
    accel_buffer_index = (accel_buffer_index + 1) % ACCEL_BUFFER_SIZE;
 800772c:	4b2d      	ldr	r3, [pc, #180]	@ (80077e4 <detect_accel_failure+0xdc>)
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	4b2e      	ldr	r3, [pc, #184]	@ (80077ec <detect_accel_failure+0xe4>)
 8007734:	fb83 1302 	smull	r1, r3, r3, r2
 8007738:	1059      	asrs	r1, r3, #1
 800773a:	17d3      	asrs	r3, r2, #31
 800773c:	1ac9      	subs	r1, r1, r3
 800773e:	460b      	mov	r3, r1
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	440b      	add	r3, r1
 8007744:	1ad1      	subs	r1, r2, r3
 8007746:	b2ca      	uxtb	r2, r1
 8007748:	4b26      	ldr	r3, [pc, #152]	@ (80077e4 <detect_accel_failure+0xdc>)
 800774a:	701a      	strb	r2, [r3, #0]
    if (accel_buffer_index == 0) {
 800774c:	4b25      	ldr	r3, [pc, #148]	@ (80077e4 <detect_accel_failure+0xdc>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d102      	bne.n	800775a <detect_accel_failure+0x52>
        accel_buffer_full = 1;
 8007754:	4b26      	ldr	r3, [pc, #152]	@ (80077f0 <detect_accel_failure+0xe8>)
 8007756:	2201      	movs	r2, #1
 8007758:	701a      	strb	r2, [r3, #0]
    }

    // Standart sapma hesapla
    float std_dev = calculate_accel_std_deviation();
 800775a:	f7ff ff4f 	bl	80075fc <calculate_accel_std_deviation>
 800775e:	ed87 0a04 	vstr	s0, [r7, #16]

    // Uçuş başlangıç zamanını flight_algorithm'dan al
	uint32_t algorithm_start_time = flight_algorithm_get_start_time();
 8007762:	f7fb fd3d 	bl	80031e0 <flight_algorithm_get_start_time>
 8007766:	60f8      	str	r0, [r7, #12]

	// Uçuş başlamışsa flight_algorithm'dan gelen zamanı kullan
	if (algorithm_start_time > 0) {
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <detect_accel_failure+0x6c>
		flight_start_time = algorithm_start_time;
 800776e:	4a21      	ldr	r2, [pc, #132]	@ (80077f4 <detect_accel_failure+0xec>)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6013      	str	r3, [r2, #0]
	}

	// Uçuş fazına göre limit değerlerini belirle
	if (flight_start_time == 0) {
 8007774:	4b1f      	ldr	r3, [pc, #124]	@ (80077f4 <detect_accel_failure+0xec>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d104      	bne.n	8007786 <detect_accel_failure+0x7e>
		max_accel = 200.0f;  // Yer hazırlığında gerçekçi olmayan çok yüksek değer
 800777c:	4b1e      	ldr	r3, [pc, #120]	@ (80077f8 <detect_accel_failure+0xf0>)
 800777e:	61fb      	str	r3, [r7, #28]
		max_std = 100.0f;    // Yer hazırlığında çok yüksek standart sapma eşiği
 8007780:	4b1e      	ldr	r3, [pc, #120]	@ (80077fc <detect_accel_failure+0xf4>)
 8007782:	61bb      	str	r3, [r7, #24]
 8007784:	e014      	b.n	80077b0 <detect_accel_failure+0xa8>
	}
	else {
		// *** UÇUŞ BAŞLADI - NORMAL ARIZA TESPİTİ ***
		uint32_t flight_elapsed_time = HAL_GetTick() - flight_start_time;
 8007786:	f001 f943 	bl	8008a10 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	4b19      	ldr	r3, [pc, #100]	@ (80077f4 <detect_accel_failure+0xec>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	60bb      	str	r3, [r7, #8]

		if (flight_elapsed_time < THRUST_PHASE_DURATION_MS) {
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f643 2297 	movw	r2, #14999	@ 0x3a97
 800779a:	4293      	cmp	r3, r2
 800779c:	d804      	bhi.n	80077a8 <detect_accel_failure+0xa0>
			// İtki fazı - Yüksek limitler
			max_accel = ACCEL_MAX_VALUE_THRUST;
 800779e:	4b18      	ldr	r3, [pc, #96]	@ (8007800 <detect_accel_failure+0xf8>)
 80077a0:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_THRUST;
 80077a2:	4b18      	ldr	r3, [pc, #96]	@ (8007804 <detect_accel_failure+0xfc>)
 80077a4:	61bb      	str	r3, [r7, #24]
 80077a6:	e003      	b.n	80077b0 <detect_accel_failure+0xa8>
		} else {
			// Seyir fazı - Düşük limitler
			max_accel = ACCEL_MAX_VALUE_CRUISE;
 80077a8:	4b16      	ldr	r3, [pc, #88]	@ (8007804 <detect_accel_failure+0xfc>)
 80077aa:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_CRUISE;
 80077ac:	4b16      	ldr	r3, [pc, #88]	@ (8007808 <detect_accel_failure+0x100>)
 80077ae:	61bb      	str	r3, [r7, #24]
		}
	}

    // İvme değeri veya standart sapma limitler dışındaysa
    if (accel_abs > max_accel || std_dev > max_std) {
 80077b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80077b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80077b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c0:	dc08      	bgt.n	80077d4 <detect_accel_failure+0xcc>
 80077c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80077c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80077ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d2:	dd01      	ble.n	80077d8 <detect_accel_failure+0xd0>
        return 1;  // Arıza tespit edildi
 80077d4:	2301      	movs	r3, #1
 80077d6:	e000      	b.n	80077da <detect_accel_failure+0xd2>
    }

    return 0;  // Arıza yok
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3720      	adds	r7, #32
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20001824 	.word	0x20001824
 80077e8:	20001810 	.word	0x20001810
 80077ec:	66666667 	.word	0x66666667
 80077f0:	20001825 	.word	0x20001825
 80077f4:	2000180c 	.word	0x2000180c
 80077f8:	43480000 	.word	0x43480000
 80077fc:	42c80000 	.word	0x42c80000
 8007800:	43160000 	.word	0x43160000
 8007804:	42480000 	.word	0x42480000
 8007808:	41700000 	.word	0x41700000

0800780c <sensor_fusion_init>:

/**
 * @brief Initialize the sensor fusion module
 */
void sensor_fusion_init(BME_280_t* BME)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
    KalmanFilter_Init(&kalman);
 8007814:	481b      	ldr	r0, [pc, #108]	@ (8007884 <sensor_fusion_init+0x78>)
 8007816:	f7fb fd63 	bl	80032e0 <KalmanFilter_Init>

    // Sensörlerinize göre gürültü değerlerini ayarlayın
    kalman.process_noise = 0.1f;         // Model gürültüsü
 800781a:	4b1a      	ldr	r3, [pc, #104]	@ (8007884 <sensor_fusion_init+0x78>)
 800781c:	4a1a      	ldr	r2, [pc, #104]	@ (8007888 <sensor_fusion_init+0x7c>)
 800781e:	631a      	str	r2, [r3, #48]	@ 0x30
    kalman.measurement_noise_alt = 0.005f;  // BME280 yükseklik gürültüsü
 8007820:	4b18      	ldr	r3, [pc, #96]	@ (8007884 <sensor_fusion_init+0x78>)
 8007822:	4a1a      	ldr	r2, [pc, #104]	@ (800788c <sensor_fusion_init+0x80>)
 8007824:	635a      	str	r2, [r3, #52]	@ 0x34
    kalman.measurement_noise_acc = 5.0f;  // BMI088 ivme gürültüsü
 8007826:	4b17      	ldr	r3, [pc, #92]	@ (8007884 <sensor_fusion_init+0x78>)
 8007828:	4a19      	ldr	r2, [pc, #100]	@ (8007890 <sensor_fusion_init+0x84>)
 800782a:	639a      	str	r2, [r3, #56]	@ 0x38


    // İvme arıza tespit değişkenlerini sıfırla
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]
 8007830:	e009      	b.n	8007846 <sensor_fusion_init+0x3a>
        accel_buffer[i] = 0.0f;
 8007832:	4a18      	ldr	r2, [pc, #96]	@ (8007894 <sensor_fusion_init+0x88>)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	f04f 0200 	mov.w	r2, #0
 800783e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	3301      	adds	r3, #1
 8007844:	60fb      	str	r3, [r7, #12]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2b04      	cmp	r3, #4
 800784a:	ddf2      	ble.n	8007832 <sensor_fusion_init+0x26>
    }
    accel_buffer_index = 0;
 800784c:	4b12      	ldr	r3, [pc, #72]	@ (8007898 <sensor_fusion_init+0x8c>)
 800784e:	2200      	movs	r2, #0
 8007850:	701a      	strb	r2, [r3, #0]
    accel_buffer_full = 0;
 8007852:	4b12      	ldr	r3, [pc, #72]	@ (800789c <sensor_fusion_init+0x90>)
 8007854:	2200      	movs	r2, #0
 8007856:	701a      	strb	r2, [r3, #0]
    accel_failure_detected = 0;
 8007858:	4b11      	ldr	r3, [pc, #68]	@ (80078a0 <sensor_fusion_init+0x94>)
 800785a:	2200      	movs	r2, #0
 800785c:	701a      	strb	r2, [r3, #0]

    initialized = 1;
 800785e:	4b11      	ldr	r3, [pc, #68]	@ (80078a4 <sensor_fusion_init+0x98>)
 8007860:	2201      	movs	r2, #1
 8007862:	701a      	strb	r2, [r3, #0]
    reference_altitude = BME->base_altitude;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007868:	4a0f      	ldr	r2, [pc, #60]	@ (80078a8 <sensor_fusion_init+0x9c>)
 800786a:	6013      	str	r3, [r2, #0]
    last_kalman_update_time = HAL_GetTick();
 800786c:	f001 f8d0 	bl	8008a10 <HAL_GetTick>
 8007870:	4603      	mov	r3, r0
 8007872:	4a0e      	ldr	r2, [pc, #56]	@ (80078ac <sensor_fusion_init+0xa0>)
 8007874:	6013      	str	r3, [r2, #0]
    flight_start_time = 0;
 8007876:	4b0e      	ldr	r3, [pc, #56]	@ (80078b0 <sensor_fusion_init+0xa4>)
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]
}
 800787c:	bf00      	nop
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	200017b4 	.word	0x200017b4
 8007888:	3dcccccd 	.word	0x3dcccccd
 800788c:	3ba3d70a 	.word	0x3ba3d70a
 8007890:	40a00000 	.word	0x40a00000
 8007894:	20001810 	.word	0x20001810
 8007898:	20001824 	.word	0x20001824
 800789c:	20001825 	.word	0x20001825
 80078a0:	20001826 	.word	0x20001826
 80078a4:	20001800 	.word	0x20001800
 80078a8:	20001804 	.word	0x20001804
 80078ac:	20001808 	.word	0x20001808
 80078b0:	2000180c 	.word	0x2000180c
 80078b4:	00000000 	.word	0x00000000

080078b8 <sensor_fusion_update_kalman>:

/**
 * @brief Update sensor fusion with new measurements (Kalman filter)
 */
void sensor_fusion_update_kalman(BME_280_t* BME, bmi088_struct_t* BMI, sensor_fusion_t* sensor)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08a      	sub	sp, #40	@ 0x28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
    // Get current time for automatic delta calculation
    uint32_t current_time = HAL_GetTick();
 80078c4:	f001 f8a4 	bl	8008a10 <HAL_GetTick>
 80078c8:	6238      	str	r0, [r7, #32]

    // Calculate time difference in seconds
    float time_sec = (current_time - last_kalman_update_time) / 1000.0f;
 80078ca:	4b4b      	ldr	r3, [pc, #300]	@ (80079f8 <sensor_fusion_update_kalman+0x140>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6a3a      	ldr	r2, [r7, #32]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078da:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80079fc <sensor_fusion_update_kalman+0x144>
 80078de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80078e2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Update the last update time
    last_kalman_update_time = current_time;
 80078e6:	4a44      	ldr	r2, [pc, #272]	@ (80079f8 <sensor_fusion_update_kalman+0x140>)
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	6013      	str	r3, [r2, #0]

    float altitude = BME->altitude;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	61fb      	str	r3, [r7, #28]

    // Ensure time is valid (never zero or negative)
    if (time_sec <= 0.001f) {
 80078f2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80078f6:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8007a00 <sensor_fusion_update_kalman+0x148>
 80078fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007902:	d801      	bhi.n	8007908 <sensor_fusion_update_kalman+0x50>
        time_sec = 0.01f; // Use default time step if invalid
 8007904:	4b3f      	ldr	r3, [pc, #252]	@ (8007a04 <sensor_fusion_update_kalman+0x14c>)
 8007906:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calculate vertical acceleration by compensating for gravity using IMU orientation
    float angle_rad = BMI->datas.theta * (M_PI / 180.0f);  // dereceyse radyana çevir
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800790c:	4618      	mov	r0, r3
 800790e:	f7f8 fe3b 	bl	8000588 <__aeabi_f2d>
 8007912:	a335      	add	r3, pc, #212	@ (adr r3, 80079e8 <sensor_fusion_update_kalman+0x130>)
 8007914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007918:	f7f8 fe8e 	bl	8000638 <__aeabi_dmul>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4610      	mov	r0, r2
 8007922:	4619      	mov	r1, r3
 8007924:	f7f9 f980 	bl	8000c28 <__aeabi_d2f>
 8007928:	4603      	mov	r3, r0
 800792a:	61bb      	str	r3, [r7, #24]

    // Yerçekimi ivmesinin lokal z eksenindeki bileşeni
    float g_local_z = 9.81f * cos(angle_rad);
 800792c:	69b8      	ldr	r0, [r7, #24]
 800792e:	f7f8 fe2b 	bl	8000588 <__aeabi_f2d>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	ec43 2b10 	vmov	d0, r2, r3
 800793a:	f00b fb89 	bl	8013050 <cos>
 800793e:	ec51 0b10 	vmov	r0, r1, d0
 8007942:	a32b      	add	r3, pc, #172	@ (adr r3, 80079f0 <sensor_fusion_update_kalman+0x138>)
 8007944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007948:	f7f8 fe76 	bl	8000638 <__aeabi_dmul>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	4610      	mov	r0, r2
 8007952:	4619      	mov	r1, r3
 8007954:	f7f9 f968 	bl	8000c28 <__aeabi_d2f>
 8007958:	4603      	mov	r3, r0
 800795a:	617b      	str	r3, [r7, #20]

    // Gerçek ivmeyi hesapla:
    float accel_z_corrected = BMI->datas.acc_z - g_local_z;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8007962:	edd7 7a05 	vldr	s15, [r7, #20]
 8007966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800796a:	edc7 7a04 	vstr	s15, [r7, #16]

    // İvme sensörü arıza tespiti
    accel_failure_detected = detect_accel_failure(accel_z_corrected);
 800796e:	ed97 0a04 	vldr	s0, [r7, #16]
 8007972:	f7ff fec9 	bl	8007708 <detect_accel_failure>
 8007976:	4603      	mov	r3, r0
 8007978:	461a      	mov	r2, r3
 800797a:	4b23      	ldr	r3, [pc, #140]	@ (8007a08 <sensor_fusion_update_kalman+0x150>)
 800797c:	701a      	strb	r2, [r3, #0]

    // Arıza durumuna göre Kalman filtresi parametrelerini güncelle
    if (accel_failure_detected) {
 800797e:	4b22      	ldr	r3, [pc, #136]	@ (8007a08 <sensor_fusion_update_kalman+0x150>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <sensor_fusion_update_kalman+0xd6>
        // Arıza tespit edildi - ivme sensörüne çok az güven
        kalman.measurement_noise_acc = 50.0f;
 8007986:	4b21      	ldr	r3, [pc, #132]	@ (8007a0c <sensor_fusion_update_kalman+0x154>)
 8007988:	4a21      	ldr	r2, [pc, #132]	@ (8007a10 <sensor_fusion_update_kalman+0x158>)
 800798a:	639a      	str	r2, [r3, #56]	@ 0x38
 800798c:	e002      	b.n	8007994 <sensor_fusion_update_kalman+0xdc>
    } else {
        // Normal durum - normal güven
        kalman.measurement_noise_acc = 0.3f;
 800798e:	4b1f      	ldr	r3, [pc, #124]	@ (8007a0c <sensor_fusion_update_kalman+0x154>)
 8007990:	4a20      	ldr	r2, [pc, #128]	@ (8007a14 <sensor_fusion_update_kalman+0x15c>)
 8007992:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Only update if initialized
    if (initialized) {
 8007994:	4b20      	ldr	r3, [pc, #128]	@ (8007a18 <sensor_fusion_update_kalman+0x160>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d020      	beq.n	80079de <sensor_fusion_update_kalman+0x126>
        sensor->filtered_altitude = KalmanFilter_Update(&kalman, altitude, accel_z_corrected, time_sec);
 800799c:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 80079a0:	edd7 0a04 	vldr	s1, [r7, #16]
 80079a4:	ed97 0a07 	vldr	s0, [r7, #28]
 80079a8:	4818      	ldr	r0, [pc, #96]	@ (8007a0c <sensor_fusion_update_kalman+0x154>)
 80079aa:	f7fb fcf3 	bl	8003394 <KalmanFilter_Update>
 80079ae:	eef0 7a40 	vmov.f32	s15, s0
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	edc3 7a00 	vstr	s15, [r3]
        sensor->apogeeDetect = KalmanFilter_IsApogeeDetected(&kalman);
 80079b8:	4814      	ldr	r0, [pc, #80]	@ (8007a0c <sensor_fusion_update_kalman+0x154>)
 80079ba:	f7fc fecf 	bl	800475c <KalmanFilter_IsApogeeDetected>
 80079be:	4603      	mov	r3, r0
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	761a      	strb	r2, [r3, #24]
        sensor->velocity = Kalman_Get_Velocity(&kalman);
 80079c6:	4811      	ldr	r0, [pc, #68]	@ (8007a0c <sensor_fusion_update_kalman+0x154>)
 80079c8:	f7fc feb9 	bl	800473e <Kalman_Get_Velocity>
 80079cc:	eef0 7a40 	vmov.f32	s15, s0
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	edc3 7a01 	vstr	s15, [r3, #4]
            sensor->velocity = (sensor->filtered_altitude - prev_altitude) / time_sec;
        }
        prev_altitude = sensor->filtered_altitude;*/

        // Arıza durumunu sensor yapısına ekleyelim (telemetri için kullanılabilir)
        sensor->accel_failure = accel_failure_detected;
 80079d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007a08 <sensor_fusion_update_kalman+0x150>)
 80079d8:	781a      	ldrb	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	765a      	strb	r2, [r3, #25]
    }
}
 80079de:	bf00      	nop
 80079e0:	3728      	adds	r7, #40	@ 0x28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	a2529d39 	.word	0xa2529d39
 80079ec:	3f91df46 	.word	0x3f91df46
 80079f0:	60000000 	.word	0x60000000
 80079f4:	40239eb8 	.word	0x40239eb8
 80079f8:	20001808 	.word	0x20001808
 80079fc:	447a0000 	.word	0x447a0000
 8007a00:	3a83126f 	.word	0x3a83126f
 8007a04:	3c23d70a 	.word	0x3c23d70a
 8007a08:	20001826 	.word	0x20001826
 8007a0c:	200017b4 	.word	0x200017b4
 8007a10:	42480000 	.word	0x42480000
 8007a14:	3e99999a 	.word	0x3e99999a
 8007a18:	20001800 	.word	0x20001800

08007a1c <sensor_fusion_update_mahony>:

/**
 * @brief Update orientation using Mahony filter
 */
void sensor_fusion_update_mahony(bmi088_struct_t* BMI, sensor_fusion_t *sensor)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
		sensor->yaw = quaternionToYaw();
		sensor->pitch = quaternionToPitch();
		sensor->roll = quaternionToRoll();
		BMI->isUpdated = 0;
	}*/
}
 8007a26:	bf00      	nop
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
	...

08007a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	607b      	str	r3, [r7, #4]
 8007a3e:	4b10      	ldr	r3, [pc, #64]	@ (8007a80 <HAL_MspInit+0x4c>)
 8007a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a42:	4a0f      	ldr	r2, [pc, #60]	@ (8007a80 <HAL_MspInit+0x4c>)
 8007a44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a48:	6453      	str	r3, [r2, #68]	@ 0x44
 8007a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a80 <HAL_MspInit+0x4c>)
 8007a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a52:	607b      	str	r3, [r7, #4]
 8007a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007a56:	2300      	movs	r3, #0
 8007a58:	603b      	str	r3, [r7, #0]
 8007a5a:	4b09      	ldr	r3, [pc, #36]	@ (8007a80 <HAL_MspInit+0x4c>)
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a5e:	4a08      	ldr	r2, [pc, #32]	@ (8007a80 <HAL_MspInit+0x4c>)
 8007a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a66:	4b06      	ldr	r3, [pc, #24]	@ (8007a80 <HAL_MspInit+0x4c>)
 8007a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a6e:	603b      	str	r3, [r7, #0]
 8007a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a72:	bf00      	nop
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	40023800 	.word	0x40023800

08007a84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b08c      	sub	sp, #48	@ 0x30
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a8c:	f107 031c 	add.w	r3, r7, #28
 8007a90:	2200      	movs	r2, #0
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	605a      	str	r2, [r3, #4]
 8007a96:	609a      	str	r2, [r3, #8]
 8007a98:	60da      	str	r2, [r3, #12]
 8007a9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a5e      	ldr	r2, [pc, #376]	@ (8007c1c <HAL_ADC_MspInit+0x198>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d158      	bne.n	8007b58 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	61bb      	str	r3, [r7, #24]
 8007aaa:	4b5d      	ldr	r3, [pc, #372]	@ (8007c20 <HAL_ADC_MspInit+0x19c>)
 8007aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aae:	4a5c      	ldr	r2, [pc, #368]	@ (8007c20 <HAL_ADC_MspInit+0x19c>)
 8007ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8007ab6:	4b5a      	ldr	r3, [pc, #360]	@ (8007c20 <HAL_ADC_MspInit+0x19c>)
 8007ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007abe:	61bb      	str	r3, [r7, #24]
 8007ac0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	617b      	str	r3, [r7, #20]
 8007ac6:	4b56      	ldr	r3, [pc, #344]	@ (8007c20 <HAL_ADC_MspInit+0x19c>)
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aca:	4a55      	ldr	r2, [pc, #340]	@ (8007c20 <HAL_ADC_MspInit+0x19c>)
 8007acc:	f043 0302 	orr.w	r3, r3, #2
 8007ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8007ad2:	4b53      	ldr	r3, [pc, #332]	@ (8007c20 <HAL_ADC_MspInit+0x19c>)
 8007ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	617b      	str	r3, [r7, #20]
 8007adc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007ade:	2302      	movs	r3, #2
 8007ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007aea:	f107 031c 	add.w	r3, r7, #28
 8007aee:	4619      	mov	r1, r3
 8007af0:	484c      	ldr	r0, [pc, #304]	@ (8007c24 <HAL_ADC_MspInit+0x1a0>)
 8007af2:	f002 f929 	bl	8009d48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8007af6:	4b4c      	ldr	r3, [pc, #304]	@ (8007c28 <HAL_ADC_MspInit+0x1a4>)
 8007af8:	4a4c      	ldr	r2, [pc, #304]	@ (8007c2c <HAL_ADC_MspInit+0x1a8>)
 8007afa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8007afc:	4b4a      	ldr	r3, [pc, #296]	@ (8007c28 <HAL_ADC_MspInit+0x1a4>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007b02:	4b49      	ldr	r3, [pc, #292]	@ (8007c28 <HAL_ADC_MspInit+0x1a4>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b08:	4b47      	ldr	r3, [pc, #284]	@ (8007c28 <HAL_ADC_MspInit+0x1a4>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007b0e:	4b46      	ldr	r3, [pc, #280]	@ (8007c28 <HAL_ADC_MspInit+0x1a4>)
 8007b10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007b14:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007b16:	4b44      	ldr	r3, [pc, #272]	@ (8007c28 <HAL_ADC_MspInit+0x1a4>)
 8007b18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b1c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007b1e:	4b42      	ldr	r3, [pc, #264]	@ (8007c28 <HAL_ADC_MspInit+0x1a4>)
 8007b20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007b24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007b26:	4b40      	ldr	r3, [pc, #256]	@ (8007c28 <HAL_ADC_MspInit+0x1a4>)
 8007b28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b2c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007b2e:	4b3e      	ldr	r3, [pc, #248]	@ (8007c28 <HAL_ADC_MspInit+0x1a4>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007b34:	4b3c      	ldr	r3, [pc, #240]	@ (8007c28 <HAL_ADC_MspInit+0x1a4>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007b3a:	483b      	ldr	r0, [pc, #236]	@ (8007c28 <HAL_ADC_MspInit+0x1a4>)
 8007b3c:	f001 fd02 	bl	8009544 <HAL_DMA_Init>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d001      	beq.n	8007b4a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8007b46:	f7fd ff8b 	bl	8005a60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a36      	ldr	r2, [pc, #216]	@ (8007c28 <HAL_ADC_MspInit+0x1a4>)
 8007b4e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007b50:	4a35      	ldr	r2, [pc, #212]	@ (8007c28 <HAL_ADC_MspInit+0x1a4>)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8007b56:	e05d      	b.n	8007c14 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a34      	ldr	r2, [pc, #208]	@ (8007c30 <HAL_ADC_MspInit+0x1ac>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d158      	bne.n	8007c14 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007b62:	2300      	movs	r3, #0
 8007b64:	613b      	str	r3, [r7, #16]
 8007b66:	4b2e      	ldr	r3, [pc, #184]	@ (8007c20 <HAL_ADC_MspInit+0x19c>)
 8007b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b6a:	4a2d      	ldr	r2, [pc, #180]	@ (8007c20 <HAL_ADC_MspInit+0x19c>)
 8007b6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b72:	4b2b      	ldr	r3, [pc, #172]	@ (8007c20 <HAL_ADC_MspInit+0x19c>)
 8007b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b7a:	613b      	str	r3, [r7, #16]
 8007b7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b7e:	2300      	movs	r3, #0
 8007b80:	60fb      	str	r3, [r7, #12]
 8007b82:	4b27      	ldr	r3, [pc, #156]	@ (8007c20 <HAL_ADC_MspInit+0x19c>)
 8007b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b86:	4a26      	ldr	r2, [pc, #152]	@ (8007c20 <HAL_ADC_MspInit+0x19c>)
 8007b88:	f043 0302 	orr.w	r3, r3, #2
 8007b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b8e:	4b24      	ldr	r3, [pc, #144]	@ (8007c20 <HAL_ADC_MspInit+0x19c>)
 8007b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b92:	f003 0302 	and.w	r3, r3, #2
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ba6:	f107 031c 	add.w	r3, r7, #28
 8007baa:	4619      	mov	r1, r3
 8007bac:	481d      	ldr	r0, [pc, #116]	@ (8007c24 <HAL_ADC_MspInit+0x1a0>)
 8007bae:	f002 f8cb 	bl	8009d48 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream3;
 8007bb2:	4b20      	ldr	r3, [pc, #128]	@ (8007c34 <HAL_ADC_MspInit+0x1b0>)
 8007bb4:	4a20      	ldr	r2, [pc, #128]	@ (8007c38 <HAL_ADC_MspInit+0x1b4>)
 8007bb6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8007bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8007c34 <HAL_ADC_MspInit+0x1b0>)
 8007bba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007bbe:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8007c34 <HAL_ADC_MspInit+0x1b0>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8007bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8007c34 <HAL_ADC_MspInit+0x1b0>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8007bcc:	4b19      	ldr	r3, [pc, #100]	@ (8007c34 <HAL_ADC_MspInit+0x1b0>)
 8007bce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007bd2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007bd4:	4b17      	ldr	r3, [pc, #92]	@ (8007c34 <HAL_ADC_MspInit+0x1b0>)
 8007bd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bda:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007bdc:	4b15      	ldr	r3, [pc, #84]	@ (8007c34 <HAL_ADC_MspInit+0x1b0>)
 8007bde:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007be2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8007be4:	4b13      	ldr	r3, [pc, #76]	@ (8007c34 <HAL_ADC_MspInit+0x1b0>)
 8007be6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007bea:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8007bec:	4b11      	ldr	r3, [pc, #68]	@ (8007c34 <HAL_ADC_MspInit+0x1b0>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007bf2:	4b10      	ldr	r3, [pc, #64]	@ (8007c34 <HAL_ADC_MspInit+0x1b0>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8007bf8:	480e      	ldr	r0, [pc, #56]	@ (8007c34 <HAL_ADC_MspInit+0x1b0>)
 8007bfa:	f001 fca3 	bl	8009544 <HAL_DMA_Init>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d001      	beq.n	8007c08 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8007c04:	f7fd ff2c 	bl	8005a60 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8007c34 <HAL_ADC_MspInit+0x1b0>)
 8007c0c:	639a      	str	r2, [r3, #56]	@ 0x38
 8007c0e:	4a09      	ldr	r2, [pc, #36]	@ (8007c34 <HAL_ADC_MspInit+0x1b0>)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8007c14:	bf00      	nop
 8007c16:	3730      	adds	r7, #48	@ 0x30
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	40012000 	.word	0x40012000
 8007c20:	40023800 	.word	0x40023800
 8007c24:	40020400 	.word	0x40020400
 8007c28:	200011ac 	.word	0x200011ac
 8007c2c:	40026410 	.word	0x40026410
 8007c30:	40012100 	.word	0x40012100
 8007c34:	2000120c 	.word	0x2000120c
 8007c38:	40026458 	.word	0x40026458

08007c3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b08c      	sub	sp, #48	@ 0x30
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c44:	f107 031c 	add.w	r3, r7, #28
 8007c48:	2200      	movs	r2, #0
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	605a      	str	r2, [r3, #4]
 8007c4e:	609a      	str	r2, [r3, #8]
 8007c50:	60da      	str	r2, [r3, #12]
 8007c52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a42      	ldr	r2, [pc, #264]	@ (8007d64 <HAL_I2C_MspInit+0x128>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d12d      	bne.n	8007cba <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c5e:	2300      	movs	r3, #0
 8007c60:	61bb      	str	r3, [r7, #24]
 8007c62:	4b41      	ldr	r3, [pc, #260]	@ (8007d68 <HAL_I2C_MspInit+0x12c>)
 8007c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c66:	4a40      	ldr	r2, [pc, #256]	@ (8007d68 <HAL_I2C_MspInit+0x12c>)
 8007c68:	f043 0302 	orr.w	r3, r3, #2
 8007c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8007d68 <HAL_I2C_MspInit+0x12c>)
 8007c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c72:	f003 0302 	and.w	r3, r3, #2
 8007c76:	61bb      	str	r3, [r7, #24]
 8007c78:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8007c7a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8007c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007c80:	2312      	movs	r3, #18
 8007c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c84:	2300      	movs	r3, #0
 8007c86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007c8c:	2304      	movs	r3, #4
 8007c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c90:	f107 031c 	add.w	r3, r7, #28
 8007c94:	4619      	mov	r1, r3
 8007c96:	4835      	ldr	r0, [pc, #212]	@ (8007d6c <HAL_I2C_MspInit+0x130>)
 8007c98:	f002 f856 	bl	8009d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	617b      	str	r3, [r7, #20]
 8007ca0:	4b31      	ldr	r3, [pc, #196]	@ (8007d68 <HAL_I2C_MspInit+0x12c>)
 8007ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ca4:	4a30      	ldr	r2, [pc, #192]	@ (8007d68 <HAL_I2C_MspInit+0x12c>)
 8007ca6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007caa:	6413      	str	r3, [r2, #64]	@ 0x40
 8007cac:	4b2e      	ldr	r3, [pc, #184]	@ (8007d68 <HAL_I2C_MspInit+0x12c>)
 8007cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007cb4:	617b      	str	r3, [r7, #20]
 8007cb6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8007cb8:	e050      	b.n	8007d5c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a2c      	ldr	r2, [pc, #176]	@ (8007d70 <HAL_I2C_MspInit+0x134>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d14b      	bne.n	8007d5c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	613b      	str	r3, [r7, #16]
 8007cc8:	4b27      	ldr	r3, [pc, #156]	@ (8007d68 <HAL_I2C_MspInit+0x12c>)
 8007cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ccc:	4a26      	ldr	r2, [pc, #152]	@ (8007d68 <HAL_I2C_MspInit+0x12c>)
 8007cce:	f043 0304 	orr.w	r3, r3, #4
 8007cd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8007cd4:	4b24      	ldr	r3, [pc, #144]	@ (8007d68 <HAL_I2C_MspInit+0x12c>)
 8007cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd8:	f003 0304 	and.w	r3, r3, #4
 8007cdc:	613b      	str	r3, [r7, #16]
 8007cde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	4b20      	ldr	r3, [pc, #128]	@ (8007d68 <HAL_I2C_MspInit+0x12c>)
 8007ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8007d68 <HAL_I2C_MspInit+0x12c>)
 8007cea:	f043 0301 	orr.w	r3, r3, #1
 8007cee:	6313      	str	r3, [r2, #48]	@ 0x30
 8007cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8007d68 <HAL_I2C_MspInit+0x12c>)
 8007cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	60fb      	str	r3, [r7, #12]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007cfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d02:	2312      	movs	r3, #18
 8007d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d06:	2301      	movs	r3, #1
 8007d08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007d0e:	2304      	movs	r3, #4
 8007d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d12:	f107 031c 	add.w	r3, r7, #28
 8007d16:	4619      	mov	r1, r3
 8007d18:	4816      	ldr	r0, [pc, #88]	@ (8007d74 <HAL_I2C_MspInit+0x138>)
 8007d1a:	f002 f815 	bl	8009d48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007d1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d24:	2312      	movs	r3, #18
 8007d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007d30:	2304      	movs	r3, #4
 8007d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d34:	f107 031c 	add.w	r3, r7, #28
 8007d38:	4619      	mov	r1, r3
 8007d3a:	480f      	ldr	r0, [pc, #60]	@ (8007d78 <HAL_I2C_MspInit+0x13c>)
 8007d3c:	f002 f804 	bl	8009d48 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007d40:	2300      	movs	r3, #0
 8007d42:	60bb      	str	r3, [r7, #8]
 8007d44:	4b08      	ldr	r3, [pc, #32]	@ (8007d68 <HAL_I2C_MspInit+0x12c>)
 8007d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d48:	4a07      	ldr	r2, [pc, #28]	@ (8007d68 <HAL_I2C_MspInit+0x12c>)
 8007d4a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007d4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007d50:	4b05      	ldr	r3, [pc, #20]	@ (8007d68 <HAL_I2C_MspInit+0x12c>)
 8007d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d58:	60bb      	str	r3, [r7, #8]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
}
 8007d5c:	bf00      	nop
 8007d5e:	3730      	adds	r7, #48	@ 0x30
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	40005400 	.word	0x40005400
 8007d68:	40023800 	.word	0x40023800
 8007d6c:	40020400 	.word	0x40020400
 8007d70:	40005c00 	.word	0x40005c00
 8007d74:	40020800 	.word	0x40020800
 8007d78:	40020000 	.word	0x40020000

08007d7c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a15      	ldr	r2, [pc, #84]	@ (8007de0 <HAL_I2C_MspDeInit+0x64>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d10f      	bne.n	8007dae <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8007d8e:	4b15      	ldr	r3, [pc, #84]	@ (8007de4 <HAL_I2C_MspDeInit+0x68>)
 8007d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d92:	4a14      	ldr	r2, [pc, #80]	@ (8007de4 <HAL_I2C_MspDeInit+0x68>)
 8007d94:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d98:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8007d9a:	2180      	movs	r1, #128	@ 0x80
 8007d9c:	4812      	ldr	r0, [pc, #72]	@ (8007de8 <HAL_I2C_MspDeInit+0x6c>)
 8007d9e:	f002 f967 	bl	800a070 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8007da2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007da6:	4810      	ldr	r0, [pc, #64]	@ (8007de8 <HAL_I2C_MspDeInit+0x6c>)
 8007da8:	f002 f962 	bl	800a070 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8007dac:	e014      	b.n	8007dd8 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a0e      	ldr	r2, [pc, #56]	@ (8007dec <HAL_I2C_MspDeInit+0x70>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d10f      	bne.n	8007dd8 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8007db8:	4b0a      	ldr	r3, [pc, #40]	@ (8007de4 <HAL_I2C_MspDeInit+0x68>)
 8007dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dbc:	4a09      	ldr	r2, [pc, #36]	@ (8007de4 <HAL_I2C_MspDeInit+0x68>)
 8007dbe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007dc2:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8007dc4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007dc8:	4809      	ldr	r0, [pc, #36]	@ (8007df0 <HAL_I2C_MspDeInit+0x74>)
 8007dca:	f002 f951 	bl	800a070 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8007dce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007dd2:	4808      	ldr	r0, [pc, #32]	@ (8007df4 <HAL_I2C_MspDeInit+0x78>)
 8007dd4:	f002 f94c 	bl	800a070 <HAL_GPIO_DeInit>
}
 8007dd8:	bf00      	nop
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	40005400 	.word	0x40005400
 8007de4:	40023800 	.word	0x40023800
 8007de8:	40020400 	.word	0x40020400
 8007dec:	40005c00 	.word	0x40005c00
 8007df0:	40020800 	.word	0x40020800
 8007df4:	40020000 	.word	0x40020000

08007df8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e08:	d115      	bne.n	8007e36 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60fb      	str	r3, [r7, #12]
 8007e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8007e40 <HAL_TIM_Base_MspInit+0x48>)
 8007e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e12:	4a0b      	ldr	r2, [pc, #44]	@ (8007e40 <HAL_TIM_Base_MspInit+0x48>)
 8007e14:	f043 0301 	orr.w	r3, r3, #1
 8007e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e1a:	4b09      	ldr	r3, [pc, #36]	@ (8007e40 <HAL_TIM_Base_MspInit+0x48>)
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	60fb      	str	r3, [r7, #12]
 8007e24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007e26:	2200      	movs	r2, #0
 8007e28:	2100      	movs	r1, #0
 8007e2a:	201c      	movs	r0, #28
 8007e2c:	f001 fb45 	bl	80094ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007e30:	201c      	movs	r0, #28
 8007e32:	f001 fb5e 	bl	80094f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8007e36:	bf00      	nop
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	40023800 	.word	0x40023800

08007e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b092      	sub	sp, #72	@ 0x48
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e4c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	605a      	str	r2, [r3, #4]
 8007e56:	609a      	str	r2, [r3, #8]
 8007e58:	60da      	str	r2, [r3, #12]
 8007e5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a90      	ldr	r2, [pc, #576]	@ (80080a4 <HAL_UART_MspInit+0x260>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	f040 8094 	bne.w	8007f90 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007e68:	2300      	movs	r3, #0
 8007e6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e6c:	4b8e      	ldr	r3, [pc, #568]	@ (80080a8 <HAL_UART_MspInit+0x264>)
 8007e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e70:	4a8d      	ldr	r2, [pc, #564]	@ (80080a8 <HAL_UART_MspInit+0x264>)
 8007e72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e76:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e78:	4b8b      	ldr	r3, [pc, #556]	@ (80080a8 <HAL_UART_MspInit+0x264>)
 8007e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e80:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e84:	2300      	movs	r3, #0
 8007e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e88:	4b87      	ldr	r3, [pc, #540]	@ (80080a8 <HAL_UART_MspInit+0x264>)
 8007e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e8c:	4a86      	ldr	r2, [pc, #536]	@ (80080a8 <HAL_UART_MspInit+0x264>)
 8007e8e:	f043 0304 	orr.w	r3, r3, #4
 8007e92:	6313      	str	r3, [r2, #48]	@ 0x30
 8007e94:	4b84      	ldr	r3, [pc, #528]	@ (80080a8 <HAL_UART_MspInit+0x264>)
 8007e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e98:	f003 0304 	and.w	r3, r3, #4
 8007e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007ea0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007ea4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007eb2:	2308      	movs	r3, #8
 8007eb4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007eb6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007eba:	4619      	mov	r1, r3
 8007ebc:	487b      	ldr	r0, [pc, #492]	@ (80080ac <HAL_UART_MspInit+0x268>)
 8007ebe:	f001 ff43 	bl	8009d48 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8007ec2:	4b7b      	ldr	r3, [pc, #492]	@ (80080b0 <HAL_UART_MspInit+0x26c>)
 8007ec4:	4a7b      	ldr	r2, [pc, #492]	@ (80080b4 <HAL_UART_MspInit+0x270>)
 8007ec6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8007ec8:	4b79      	ldr	r3, [pc, #484]	@ (80080b0 <HAL_UART_MspInit+0x26c>)
 8007eca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007ece:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007ed0:	4b77      	ldr	r3, [pc, #476]	@ (80080b0 <HAL_UART_MspInit+0x26c>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ed6:	4b76      	ldr	r3, [pc, #472]	@ (80080b0 <HAL_UART_MspInit+0x26c>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007edc:	4b74      	ldr	r3, [pc, #464]	@ (80080b0 <HAL_UART_MspInit+0x26c>)
 8007ede:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007ee2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007ee4:	4b72      	ldr	r3, [pc, #456]	@ (80080b0 <HAL_UART_MspInit+0x26c>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007eea:	4b71      	ldr	r3, [pc, #452]	@ (80080b0 <HAL_UART_MspInit+0x26c>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8007ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80080b0 <HAL_UART_MspInit+0x26c>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8007ef6:	4b6e      	ldr	r3, [pc, #440]	@ (80080b0 <HAL_UART_MspInit+0x26c>)
 8007ef8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007efc:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007efe:	4b6c      	ldr	r3, [pc, #432]	@ (80080b0 <HAL_UART_MspInit+0x26c>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8007f04:	486a      	ldr	r0, [pc, #424]	@ (80080b0 <HAL_UART_MspInit+0x26c>)
 8007f06:	f001 fb1d 	bl	8009544 <HAL_DMA_Init>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d001      	beq.n	8007f14 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8007f10:	f7fd fda6 	bl	8005a60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a66      	ldr	r2, [pc, #408]	@ (80080b0 <HAL_UART_MspInit+0x26c>)
 8007f18:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007f1a:	4a65      	ldr	r2, [pc, #404]	@ (80080b0 <HAL_UART_MspInit+0x26c>)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8007f20:	4b65      	ldr	r3, [pc, #404]	@ (80080b8 <HAL_UART_MspInit+0x274>)
 8007f22:	4a66      	ldr	r2, [pc, #408]	@ (80080bc <HAL_UART_MspInit+0x278>)
 8007f24:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8007f26:	4b64      	ldr	r3, [pc, #400]	@ (80080b8 <HAL_UART_MspInit+0x274>)
 8007f28:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007f2c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007f2e:	4b62      	ldr	r3, [pc, #392]	@ (80080b8 <HAL_UART_MspInit+0x274>)
 8007f30:	2240      	movs	r2, #64	@ 0x40
 8007f32:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007f34:	4b60      	ldr	r3, [pc, #384]	@ (80080b8 <HAL_UART_MspInit+0x274>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007f3a:	4b5f      	ldr	r3, [pc, #380]	@ (80080b8 <HAL_UART_MspInit+0x274>)
 8007f3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007f40:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007f42:	4b5d      	ldr	r3, [pc, #372]	@ (80080b8 <HAL_UART_MspInit+0x274>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007f48:	4b5b      	ldr	r3, [pc, #364]	@ (80080b8 <HAL_UART_MspInit+0x274>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8007f4e:	4b5a      	ldr	r3, [pc, #360]	@ (80080b8 <HAL_UART_MspInit+0x274>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8007f54:	4b58      	ldr	r3, [pc, #352]	@ (80080b8 <HAL_UART_MspInit+0x274>)
 8007f56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007f5a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007f5c:	4b56      	ldr	r3, [pc, #344]	@ (80080b8 <HAL_UART_MspInit+0x274>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8007f62:	4855      	ldr	r0, [pc, #340]	@ (80080b8 <HAL_UART_MspInit+0x274>)
 8007f64:	f001 faee 	bl	8009544 <HAL_DMA_Init>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8007f6e:	f7fd fd77 	bl	8005a60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a50      	ldr	r2, [pc, #320]	@ (80080b8 <HAL_UART_MspInit+0x274>)
 8007f76:	639a      	str	r2, [r3, #56]	@ 0x38
 8007f78:	4a4f      	ldr	r2, [pc, #316]	@ (80080b8 <HAL_UART_MspInit+0x274>)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8007f7e:	2200      	movs	r2, #0
 8007f80:	2100      	movs	r1, #0
 8007f82:	2034      	movs	r0, #52	@ 0x34
 8007f84:	f001 fa99 	bl	80094ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8007f88:	2034      	movs	r0, #52	@ 0x34
 8007f8a:	f001 fab2 	bl	80094f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007f8e:	e121      	b.n	80081d4 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==UART5)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a4a      	ldr	r2, [pc, #296]	@ (80080c0 <HAL_UART_MspInit+0x27c>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	f040 809a 	bne.w	80080d0 <HAL_UART_MspInit+0x28c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fa0:	4b41      	ldr	r3, [pc, #260]	@ (80080a8 <HAL_UART_MspInit+0x264>)
 8007fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa4:	4a40      	ldr	r2, [pc, #256]	@ (80080a8 <HAL_UART_MspInit+0x264>)
 8007fa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007faa:	6413      	str	r3, [r2, #64]	@ 0x40
 8007fac:	4b3e      	ldr	r3, [pc, #248]	@ (80080a8 <HAL_UART_MspInit+0x264>)
 8007fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007fb8:	2300      	movs	r3, #0
 8007fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fbc:	4b3a      	ldr	r3, [pc, #232]	@ (80080a8 <HAL_UART_MspInit+0x264>)
 8007fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fc0:	4a39      	ldr	r2, [pc, #228]	@ (80080a8 <HAL_UART_MspInit+0x264>)
 8007fc2:	f043 0304 	orr.w	r3, r3, #4
 8007fc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8007fc8:	4b37      	ldr	r3, [pc, #220]	@ (80080a8 <HAL_UART_MspInit+0x264>)
 8007fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fcc:	f003 0304 	and.w	r3, r3, #4
 8007fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	623b      	str	r3, [r7, #32]
 8007fd8:	4b33      	ldr	r3, [pc, #204]	@ (80080a8 <HAL_UART_MspInit+0x264>)
 8007fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fdc:	4a32      	ldr	r2, [pc, #200]	@ (80080a8 <HAL_UART_MspInit+0x264>)
 8007fde:	f043 0308 	orr.w	r3, r3, #8
 8007fe2:	6313      	str	r3, [r2, #48]	@ 0x30
 8007fe4:	4b30      	ldr	r3, [pc, #192]	@ (80080a8 <HAL_UART_MspInit+0x264>)
 8007fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe8:	f003 0308 	and.w	r3, r3, #8
 8007fec:	623b      	str	r3, [r7, #32]
 8007fee:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007ff0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007ff4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ffe:	2303      	movs	r3, #3
 8008000:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8008002:	2308      	movs	r3, #8
 8008004:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008006:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800800a:	4619      	mov	r1, r3
 800800c:	4827      	ldr	r0, [pc, #156]	@ (80080ac <HAL_UART_MspInit+0x268>)
 800800e:	f001 fe9b 	bl	8009d48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008012:	2304      	movs	r3, #4
 8008014:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008016:	2302      	movs	r3, #2
 8008018:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800801a:	2300      	movs	r3, #0
 800801c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800801e:	2303      	movs	r3, #3
 8008020:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8008022:	2308      	movs	r3, #8
 8008024:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008026:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800802a:	4619      	mov	r1, r3
 800802c:	4825      	ldr	r0, [pc, #148]	@ (80080c4 <HAL_UART_MspInit+0x280>)
 800802e:	f001 fe8b 	bl	8009d48 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8008032:	4b25      	ldr	r3, [pc, #148]	@ (80080c8 <HAL_UART_MspInit+0x284>)
 8008034:	4a25      	ldr	r2, [pc, #148]	@ (80080cc <HAL_UART_MspInit+0x288>)
 8008036:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8008038:	4b23      	ldr	r3, [pc, #140]	@ (80080c8 <HAL_UART_MspInit+0x284>)
 800803a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800803e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008040:	4b21      	ldr	r3, [pc, #132]	@ (80080c8 <HAL_UART_MspInit+0x284>)
 8008042:	2200      	movs	r2, #0
 8008044:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008046:	4b20      	ldr	r3, [pc, #128]	@ (80080c8 <HAL_UART_MspInit+0x284>)
 8008048:	2200      	movs	r2, #0
 800804a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800804c:	4b1e      	ldr	r3, [pc, #120]	@ (80080c8 <HAL_UART_MspInit+0x284>)
 800804e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008052:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008054:	4b1c      	ldr	r3, [pc, #112]	@ (80080c8 <HAL_UART_MspInit+0x284>)
 8008056:	2200      	movs	r2, #0
 8008058:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800805a:	4b1b      	ldr	r3, [pc, #108]	@ (80080c8 <HAL_UART_MspInit+0x284>)
 800805c:	2200      	movs	r2, #0
 800805e:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8008060:	4b19      	ldr	r3, [pc, #100]	@ (80080c8 <HAL_UART_MspInit+0x284>)
 8008062:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008066:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008068:	4b17      	ldr	r3, [pc, #92]	@ (80080c8 <HAL_UART_MspInit+0x284>)
 800806a:	2200      	movs	r2, #0
 800806c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800806e:	4b16      	ldr	r3, [pc, #88]	@ (80080c8 <HAL_UART_MspInit+0x284>)
 8008070:	2200      	movs	r2, #0
 8008072:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8008074:	4814      	ldr	r0, [pc, #80]	@ (80080c8 <HAL_UART_MspInit+0x284>)
 8008076:	f001 fa65 	bl	8009544 <HAL_DMA_Init>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <HAL_UART_MspInit+0x240>
      Error_Handler();
 8008080:	f7fd fcee 	bl	8005a60 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a10      	ldr	r2, [pc, #64]	@ (80080c8 <HAL_UART_MspInit+0x284>)
 8008088:	63da      	str	r2, [r3, #60]	@ 0x3c
 800808a:	4a0f      	ldr	r2, [pc, #60]	@ (80080c8 <HAL_UART_MspInit+0x284>)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8008090:	2200      	movs	r2, #0
 8008092:	2100      	movs	r1, #0
 8008094:	2035      	movs	r0, #53	@ 0x35
 8008096:	f001 fa10 	bl	80094ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800809a:	2035      	movs	r0, #53	@ 0x35
 800809c:	f001 fa29 	bl	80094f2 <HAL_NVIC_EnableIRQ>
}
 80080a0:	e098      	b.n	80081d4 <HAL_UART_MspInit+0x390>
 80080a2:	bf00      	nop
 80080a4:	40004c00 	.word	0x40004c00
 80080a8:	40023800 	.word	0x40023800
 80080ac:	40020800 	.word	0x40020800
 80080b0:	2000147c 	.word	0x2000147c
 80080b4:	40026040 	.word	0x40026040
 80080b8:	200014dc 	.word	0x200014dc
 80080bc:	40026070 	.word	0x40026070
 80080c0:	40005000 	.word	0x40005000
 80080c4:	40020c00 	.word	0x40020c00
 80080c8:	2000153c 	.word	0x2000153c
 80080cc:	40026010 	.word	0x40026010
  else if(huart->Instance==USART1)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a41      	ldr	r2, [pc, #260]	@ (80081dc <HAL_UART_MspInit+0x398>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d14b      	bne.n	8008172 <HAL_UART_MspInit+0x32e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80080da:	2300      	movs	r3, #0
 80080dc:	61fb      	str	r3, [r7, #28]
 80080de:	4b40      	ldr	r3, [pc, #256]	@ (80081e0 <HAL_UART_MspInit+0x39c>)
 80080e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080e2:	4a3f      	ldr	r2, [pc, #252]	@ (80081e0 <HAL_UART_MspInit+0x39c>)
 80080e4:	f043 0310 	orr.w	r3, r3, #16
 80080e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80080ea:	4b3d      	ldr	r3, [pc, #244]	@ (80081e0 <HAL_UART_MspInit+0x39c>)
 80080ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ee:	f003 0310 	and.w	r3, r3, #16
 80080f2:	61fb      	str	r3, [r7, #28]
 80080f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080f6:	2300      	movs	r3, #0
 80080f8:	61bb      	str	r3, [r7, #24]
 80080fa:	4b39      	ldr	r3, [pc, #228]	@ (80081e0 <HAL_UART_MspInit+0x39c>)
 80080fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080fe:	4a38      	ldr	r2, [pc, #224]	@ (80081e0 <HAL_UART_MspInit+0x39c>)
 8008100:	f043 0301 	orr.w	r3, r3, #1
 8008104:	6313      	str	r3, [r2, #48]	@ 0x30
 8008106:	4b36      	ldr	r3, [pc, #216]	@ (80081e0 <HAL_UART_MspInit+0x39c>)
 8008108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	61bb      	str	r3, [r7, #24]
 8008110:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008112:	2300      	movs	r3, #0
 8008114:	617b      	str	r3, [r7, #20]
 8008116:	4b32      	ldr	r3, [pc, #200]	@ (80081e0 <HAL_UART_MspInit+0x39c>)
 8008118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800811a:	4a31      	ldr	r2, [pc, #196]	@ (80081e0 <HAL_UART_MspInit+0x39c>)
 800811c:	f043 0302 	orr.w	r3, r3, #2
 8008120:	6313      	str	r3, [r2, #48]	@ 0x30
 8008122:	4b2f      	ldr	r3, [pc, #188]	@ (80081e0 <HAL_UART_MspInit+0x39c>)
 8008124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	617b      	str	r3, [r7, #20]
 800812c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800812e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008132:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008134:	2302      	movs	r3, #2
 8008136:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008138:	2300      	movs	r3, #0
 800813a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800813c:	2303      	movs	r3, #3
 800813e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008140:	2307      	movs	r3, #7
 8008142:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008144:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008148:	4619      	mov	r1, r3
 800814a:	4826      	ldr	r0, [pc, #152]	@ (80081e4 <HAL_UART_MspInit+0x3a0>)
 800814c:	f001 fdfc 	bl	8009d48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008150:	2340      	movs	r3, #64	@ 0x40
 8008152:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008154:	2302      	movs	r3, #2
 8008156:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008158:	2300      	movs	r3, #0
 800815a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800815c:	2303      	movs	r3, #3
 800815e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008160:	2307      	movs	r3, #7
 8008162:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008164:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008168:	4619      	mov	r1, r3
 800816a:	481f      	ldr	r0, [pc, #124]	@ (80081e8 <HAL_UART_MspInit+0x3a4>)
 800816c:	f001 fdec 	bl	8009d48 <HAL_GPIO_Init>
}
 8008170:	e030      	b.n	80081d4 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART2)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a1d      	ldr	r2, [pc, #116]	@ (80081ec <HAL_UART_MspInit+0x3a8>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d12b      	bne.n	80081d4 <HAL_UART_MspInit+0x390>
    __HAL_RCC_USART2_CLK_ENABLE();
 800817c:	2300      	movs	r3, #0
 800817e:	613b      	str	r3, [r7, #16]
 8008180:	4b17      	ldr	r3, [pc, #92]	@ (80081e0 <HAL_UART_MspInit+0x39c>)
 8008182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008184:	4a16      	ldr	r2, [pc, #88]	@ (80081e0 <HAL_UART_MspInit+0x39c>)
 8008186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800818a:	6413      	str	r3, [r2, #64]	@ 0x40
 800818c:	4b14      	ldr	r3, [pc, #80]	@ (80081e0 <HAL_UART_MspInit+0x39c>)
 800818e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008194:	613b      	str	r3, [r7, #16]
 8008196:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008198:	2300      	movs	r3, #0
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	4b10      	ldr	r3, [pc, #64]	@ (80081e0 <HAL_UART_MspInit+0x39c>)
 800819e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081a0:	4a0f      	ldr	r2, [pc, #60]	@ (80081e0 <HAL_UART_MspInit+0x39c>)
 80081a2:	f043 0301 	orr.w	r3, r3, #1
 80081a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80081a8:	4b0d      	ldr	r3, [pc, #52]	@ (80081e0 <HAL_UART_MspInit+0x39c>)
 80081aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ac:	f003 0301 	and.w	r3, r3, #1
 80081b0:	60fb      	str	r3, [r7, #12]
 80081b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80081b4:	230c      	movs	r3, #12
 80081b6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081b8:	2302      	movs	r3, #2
 80081ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081bc:	2300      	movs	r3, #0
 80081be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081c0:	2303      	movs	r3, #3
 80081c2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80081c4:	2307      	movs	r3, #7
 80081c6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80081cc:	4619      	mov	r1, r3
 80081ce:	4805      	ldr	r0, [pc, #20]	@ (80081e4 <HAL_UART_MspInit+0x3a0>)
 80081d0:	f001 fdba 	bl	8009d48 <HAL_GPIO_Init>
}
 80081d4:	bf00      	nop
 80081d6:	3748      	adds	r7, #72	@ 0x48
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	40011000 	.word	0x40011000
 80081e0:	40023800 	.word	0x40023800
 80081e4:	40020000 	.word	0x40020000
 80081e8:	40020400 	.word	0x40020400
 80081ec:	40004400 	.word	0x40004400

080081f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80081f0:	b480      	push	{r7}
 80081f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80081f4:	bf00      	nop
 80081f6:	e7fd      	b.n	80081f4 <NMI_Handler+0x4>

080081f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80081f8:	b480      	push	{r7}
 80081fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80081fc:	bf00      	nop
 80081fe:	e7fd      	b.n	80081fc <HardFault_Handler+0x4>

08008200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008200:	b480      	push	{r7}
 8008202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008204:	bf00      	nop
 8008206:	e7fd      	b.n	8008204 <MemManage_Handler+0x4>

08008208 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008208:	b480      	push	{r7}
 800820a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800820c:	bf00      	nop
 800820e:	e7fd      	b.n	800820c <BusFault_Handler+0x4>

08008210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008210:	b480      	push	{r7}
 8008212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008214:	bf00      	nop
 8008216:	e7fd      	b.n	8008214 <UsageFault_Handler+0x4>

08008218 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008218:	b480      	push	{r7}
 800821a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800821c:	bf00      	nop
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008226:	b480      	push	{r7}
 8008228:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800822a:	bf00      	nop
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008234:	b480      	push	{r7}
 8008236:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008238:	bf00      	nop
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008246:	f000 fbcf 	bl	80089e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800824a:	bf00      	nop
 800824c:	bd80      	pop	{r7, pc}
	...

08008250 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8008254:	4802      	ldr	r0, [pc, #8]	@ (8008260 <DMA1_Stream0_IRQHandler+0x10>)
 8008256:	f001 fb0d 	bl	8009874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800825a:	bf00      	nop
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	2000153c 	.word	0x2000153c

08008264 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8008268:	4802      	ldr	r0, [pc, #8]	@ (8008274 <DMA1_Stream2_IRQHandler+0x10>)
 800826a:	f001 fb03 	bl	8009874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800826e:	bf00      	nop
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	2000147c 	.word	0x2000147c

08008278 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800827c:	4802      	ldr	r0, [pc, #8]	@ (8008288 <DMA1_Stream4_IRQHandler+0x10>)
 800827e:	f001 faf9 	bl	8009874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8008282:	bf00      	nop
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	200014dc 	.word	0x200014dc

0800828c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008290:	4802      	ldr	r0, [pc, #8]	@ (800829c <TIM2_IRQHandler+0x10>)
 8008292:	f003 ff27 	bl	800c0e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008296:	bf00      	nop
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	20001314 	.word	0x20001314

080082a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80082a4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80082a8:	f002 f808 	bl	800a2bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80082ac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80082b0:	f002 f804 	bl	800a2bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80082b4:	bf00      	nop
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80082bc:	4802      	ldr	r0, [pc, #8]	@ (80082c8 <UART4_IRQHandler+0x10>)
 80082be:	f004 fc97 	bl	800cbf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80082c2:	bf00      	nop
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	2000135c 	.word	0x2000135c

080082cc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80082d0:	4802      	ldr	r0, [pc, #8]	@ (80082dc <UART5_IRQHandler+0x10>)
 80082d2:	f004 fc8d 	bl	800cbf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80082d6:	bf00      	nop
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	200013a4 	.word	0x200013a4

080082e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80082e4:	4802      	ldr	r0, [pc, #8]	@ (80082f0 <DMA2_Stream0_IRQHandler+0x10>)
 80082e6:	f001 fac5 	bl	8009874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80082ea:	bf00      	nop
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	200011ac 	.word	0x200011ac

080082f4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80082f8:	4802      	ldr	r0, [pc, #8]	@ (8008304 <DMA2_Stream3_IRQHandler+0x10>)
 80082fa:	f001 fabb 	bl	8009874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80082fe:	bf00      	nop
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	2000120c 	.word	0x2000120c

08008308 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008308:	b480      	push	{r7}
 800830a:	af00      	add	r7, sp, #0
  return 1;
 800830c:	2301      	movs	r3, #1
}
 800830e:	4618      	mov	r0, r3
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <_kill>:

int _kill(int pid, int sig)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008322:	f007 fd3f 	bl	800fda4 <__errno>
 8008326:	4603      	mov	r3, r0
 8008328:	2216      	movs	r2, #22
 800832a:	601a      	str	r2, [r3, #0]
  return -1;
 800832c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <_exit>:

void _exit (int status)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008340:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff ffe7 	bl	8008318 <_kill>
  while (1) {}    /* Make sure we hang here */
 800834a:	bf00      	nop
 800834c:	e7fd      	b.n	800834a <_exit+0x12>

0800834e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b086      	sub	sp, #24
 8008352:	af00      	add	r7, sp, #0
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800835a:	2300      	movs	r3, #0
 800835c:	617b      	str	r3, [r7, #20]
 800835e:	e00a      	b.n	8008376 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008360:	f3af 8000 	nop.w
 8008364:	4601      	mov	r1, r0
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	1c5a      	adds	r2, r3, #1
 800836a:	60ba      	str	r2, [r7, #8]
 800836c:	b2ca      	uxtb	r2, r1
 800836e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	3301      	adds	r3, #1
 8008374:	617b      	str	r3, [r7, #20]
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	429a      	cmp	r2, r3
 800837c:	dbf0      	blt.n	8008360 <_read+0x12>
  }

  return len;
 800837e:	687b      	ldr	r3, [r7, #4]
}
 8008380:	4618      	mov	r0, r3
 8008382:	3718      	adds	r7, #24
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008394:	2300      	movs	r3, #0
 8008396:	617b      	str	r3, [r7, #20]
 8008398:	e009      	b.n	80083ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	1c5a      	adds	r2, r3, #1
 800839e:	60ba      	str	r2, [r7, #8]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	3301      	adds	r3, #1
 80083ac:	617b      	str	r3, [r7, #20]
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	dbf1      	blt.n	800839a <_write+0x12>
  }
  return len;
 80083b6:	687b      	ldr	r3, [r7, #4]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3718      	adds	r7, #24
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <_close>:

int _close(int file)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80083c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80083e8:	605a      	str	r2, [r3, #4]
  return 0;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <_isatty>:

int _isatty(int file)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008400:	2301      	movs	r3, #1
}
 8008402:	4618      	mov	r0, r3
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800840e:	b480      	push	{r7}
 8008410:	b085      	sub	sp, #20
 8008412:	af00      	add	r7, sp, #0
 8008414:	60f8      	str	r0, [r7, #12]
 8008416:	60b9      	str	r1, [r7, #8]
 8008418:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008430:	4a14      	ldr	r2, [pc, #80]	@ (8008484 <_sbrk+0x5c>)
 8008432:	4b15      	ldr	r3, [pc, #84]	@ (8008488 <_sbrk+0x60>)
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800843c:	4b13      	ldr	r3, [pc, #76]	@ (800848c <_sbrk+0x64>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d102      	bne.n	800844a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008444:	4b11      	ldr	r3, [pc, #68]	@ (800848c <_sbrk+0x64>)
 8008446:	4a12      	ldr	r2, [pc, #72]	@ (8008490 <_sbrk+0x68>)
 8008448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800844a:	4b10      	ldr	r3, [pc, #64]	@ (800848c <_sbrk+0x64>)
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4413      	add	r3, r2
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	429a      	cmp	r2, r3
 8008456:	d207      	bcs.n	8008468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008458:	f007 fca4 	bl	800fda4 <__errno>
 800845c:	4603      	mov	r3, r0
 800845e:	220c      	movs	r2, #12
 8008460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008462:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008466:	e009      	b.n	800847c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008468:	4b08      	ldr	r3, [pc, #32]	@ (800848c <_sbrk+0x64>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800846e:	4b07      	ldr	r3, [pc, #28]	@ (800848c <_sbrk+0x64>)
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4413      	add	r3, r2
 8008476:	4a05      	ldr	r2, [pc, #20]	@ (800848c <_sbrk+0x64>)
 8008478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800847a:	68fb      	ldr	r3, [r7, #12]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3718      	adds	r7, #24
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	20020000 	.word	0x20020000
 8008488:	00000400 	.word	0x00000400
 800848c:	20001828 	.word	0x20001828
 8008490:	200019a8 	.word	0x200019a8

08008494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008494:	b480      	push	{r7}
 8008496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008498:	4b06      	ldr	r3, [pc, #24]	@ (80084b4 <SystemInit+0x20>)
 800849a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800849e:	4a05      	ldr	r2, [pc, #20]	@ (80084b4 <SystemInit+0x20>)
 80084a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80084a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80084a8:	bf00      	nop
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	e000ed00 	.word	0xe000ed00

080084b8 <test_modes_handle_sit>:

/**
 * @brief Handle SIT (Sensor Interface Test) mode
 */
void test_modes_handle_sit(BME_280_t* bme, bmi088_struct_t* bmi)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
	addDataPacketSit(bme, bmi);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7fd fb23 	bl	8005b10 <addDataPacketSit>
    if (!usart4_tx_busy) {
 80084ca:	4b06      	ldr	r3, [pc, #24]	@ (80084e4 <test_modes_handle_sit+0x2c>)
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d103      	bne.n	80084dc <test_modes_handle_sit+0x24>
        uart4_send_packet_dma((uint8_t*)sit_paket, 36);
 80084d4:	2124      	movs	r1, #36	@ 0x24
 80084d6:	4804      	ldr	r0, [pc, #16]	@ (80084e8 <test_modes_handle_sit+0x30>)
 80084d8:	f7fd fa10 	bl	80058fc <uart4_send_packet_dma>
    	//HAL_UART_Transmit(&huart4, (uint8_t*)sit_paket, 36, 100);
    }
}
 80084dc:	bf00      	nop
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	200016e1 	.word	0x200016e1
 80084e8:	20001734 	.word	0x20001734

080084ec <algorithm_update_sut>:


void algorithm_update_sut(void)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b08a      	sub	sp, #40	@ 0x28
 80084f0:	af00      	add	r7, sp, #0
    // Check if SUT data is ready
    if (uart_handler_sut_data_ready()) {
 80084f2:	f000 f989 	bl	8008808 <uart_handler_sut_data_ready>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d013      	beq.n	8008524 <algorithm_update_sut+0x38>
        uart_handler_clear_sut_flag();
 80084fc:	f000 f9b2 	bl	8008864 <uart_handler_clear_sut_flag>

        sut_data_t sut_data;
        if (uart_handler_get_sut_data(&sut_data)) {
 8008500:	1d3b      	adds	r3, r7, #4
 8008502:	4618      	mov	r0, r3
 8008504:	f000 f98c 	bl	8008820 <uart_handler_get_sut_data>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00a      	beq.n	8008524 <algorithm_update_sut+0x38>
            // Process SUT data through test modes handler
            uint16_t status_bits = test_modes_handle_sut(&sut_data, &sensor_output);
 800850e:	1d3b      	adds	r3, r7, #4
 8008510:	4906      	ldr	r1, [pc, #24]	@ (800852c <algorithm_update_sut+0x40>)
 8008512:	4618      	mov	r0, r3
 8008514:	f000 f80c 	bl	8008530 <test_modes_handle_sut>
 8008518:	4603      	mov	r3, r0
 800851a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            uart_handler_send_status(status_bits);
 800851c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800851e:	4618      	mov	r0, r3
 8008520:	f000 f9ac 	bl	800887c <uart_handler_send_status>
        }
    }
}
 8008524:	bf00      	nop
 8008526:	3728      	adds	r7, #40	@ 0x28
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	20001660 	.word	0x20001660

08008530 <test_modes_handle_sut>:

/**
 * @brief Handle SUT (System Under Test) mode
 */
uint16_t test_modes_handle_sut(sut_data_t* sut_data, sensor_fusion_t* sensor_output)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b0b4      	sub	sp, #208	@ 0xd0
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
    // Convert SUT data to BME and BMI structures
    BME_280_t bme_sut = {0};
 800853a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800853e:	2244      	movs	r2, #68	@ 0x44
 8008540:	2100      	movs	r1, #0
 8008542:	4618      	mov	r0, r3
 8008544:	f007 fbb8 	bl	800fcb8 <memset>
    bmi088_struct_t bmi_sut = {0};
 8008548:	f107 0308 	add.w	r3, r7, #8
 800854c:	2280      	movs	r2, #128	@ 0x80
 800854e:	2100      	movs	r1, #0
 8008550:	4618      	mov	r0, r3
 8008552:	f007 fbb1 	bl	800fcb8 <memset>

    // Fill BME data
    bme_sut.altitude = sut_data->altitude;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    bme_sut.pressure = sut_data->pressure;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    // Fill BMI data
    bmi_sut.datas.acc_x = sut_data->acc_x;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	663b      	str	r3, [r7, #96]	@ 0x60
    bmi_sut.datas.acc_y = sut_data->acc_y;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	667b      	str	r3, [r7, #100]	@ 0x64
    bmi_sut.datas.acc_z = sut_data->acc_z;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	66bb      	str	r3, [r7, #104]	@ 0x68
    bmi_sut.datas.gyro_x = sut_data->gyro_x;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	623b      	str	r3, [r7, #32]
    bmi_sut.datas.angle_y = sut_data->gyro_y;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	633b      	str	r3, [r7, #48]	@ 0x30
    bmi_sut.datas.gyro_z = sut_data->gyro_z;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	69db      	ldr	r3, [r3, #28]
 8008588:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Process synthetic data through sensor fusion first
    //sensor_fusion_update_mahony(&bmi_sut, sensor_output);
	sensor_fusion_update_kalman(&bme_sut, &bmi_sut, sensor_output);
 800858a:	f107 0108 	add.w	r1, r7, #8
 800858e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff f98f 	bl	80078b8 <sensor_fusion_update_kalman>

    // Then run flight algorithm with fused data
    flight_algorithm_update(&bme_sut, &bmi_sut, sensor_output);
 800859a:	f107 0108 	add.w	r1, r7, #8
 800859e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fa fc93 	bl	8002ed0 <flight_algorithm_update>
    uint16_t status_bits = flight_algorithm_get_status_bits();
 80085aa:	f7fa fde7 	bl	800317c <flight_algorithm_get_status_bits>
 80085ae:	4603      	mov	r3, r0
 80085b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce

    return status_bits;
 80085b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	37d0      	adds	r7, #208	@ 0xd0
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <uart_handler_init>:

/**
 * @brief Initialize UART handler
 */
void uart_handler_init(void)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	af00      	add	r7, sp, #0
    current_mode = MODE_NORMAL;
 80085c4:	4b07      	ldr	r3, [pc, #28]	@ (80085e4 <uart_handler_init+0x24>)
 80085c6:	2200      	movs	r2, #0
 80085c8:	701a      	strb	r2, [r3, #0]
    command_packet_ready = 0;
 80085ca:	4b07      	ldr	r3, [pc, #28]	@ (80085e8 <uart_handler_init+0x28>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	701a      	strb	r2, [r3, #0]
    sut_packet_ready = 0;
 80085d0:	4b06      	ldr	r3, [pc, #24]	@ (80085ec <uart_handler_init+0x2c>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	701a      	strb	r2, [r3, #0]
    memset(&latest_sut_data, 0, sizeof(latest_sut_data));
 80085d6:	2220      	movs	r2, #32
 80085d8:	2100      	movs	r1, #0
 80085da:	4805      	ldr	r0, [pc, #20]	@ (80085f0 <uart_handler_init+0x30>)
 80085dc:	f007 fb6c 	bl	800fcb8 <memset>
}
 80085e0:	bf00      	nop
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	2000182c 	.word	0x2000182c
 80085e8:	2000182d 	.word	0x2000182d
 80085ec:	2000182e 	.word	0x2000182e
 80085f0:	20001830 	.word	0x20001830

080085f4 <uart_handler_process_packets>:

/**
 * @brief Process incoming UART packets (call from main loop)
 */
void uart_handler_process_packets(void)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	af00      	add	r7, sp, #0
    if (usart4_packet_ready) {
 80085f8:	4b14      	ldr	r3, [pc, #80]	@ (800864c <uart_handler_process_packets+0x58>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d021      	beq.n	8008646 <uart_handler_process_packets+0x52>
        usart4_packet_ready = 0; // Clear flag immediately
 8008602:	4b12      	ldr	r3, [pc, #72]	@ (800864c <uart_handler_process_packets+0x58>)
 8008604:	2200      	movs	r2, #0
 8008606:	701a      	strb	r2, [r3, #0]

        // Command packet (5 bytes with header 0xAA)
        if (usart4_rx_buffer[0] == CMD_HEADER && usart4_packet_size == 5) {
 8008608:	4b11      	ldr	r3, [pc, #68]	@ (8008650 <uart_handler_process_packets+0x5c>)
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	2baa      	cmp	r3, #170	@ 0xaa
 800860e:	d10b      	bne.n	8008628 <uart_handler_process_packets+0x34>
 8008610:	4b10      	ldr	r3, [pc, #64]	@ (8008654 <uart_handler_process_packets+0x60>)
 8008612:	881b      	ldrh	r3, [r3, #0]
 8008614:	b29b      	uxth	r3, r3
 8008616:	2b05      	cmp	r3, #5
 8008618:	d106      	bne.n	8008628 <uart_handler_process_packets+0x34>
            command_packet_ready = 1;
 800861a:	4b0f      	ldr	r3, [pc, #60]	@ (8008658 <uart_handler_process_packets+0x64>)
 800861c:	2201      	movs	r2, #1
 800861e:	701a      	strb	r2, [r3, #0]
            process_command_packet(usart4_rx_buffer);
 8008620:	480b      	ldr	r0, [pc, #44]	@ (8008650 <uart_handler_process_packets+0x5c>)
 8008622:	f000 f81d 	bl	8008660 <process_command_packet>
        else if (usart4_rx_buffer[0] == PACKET_HEADER && usart4_packet_size == 36) {
            sut_packet_ready = 1;
            process_sut_packet(usart4_rx_buffer);
        }
    }
}
 8008626:	e00e      	b.n	8008646 <uart_handler_process_packets+0x52>
        else if (usart4_rx_buffer[0] == PACKET_HEADER && usart4_packet_size == 36) {
 8008628:	4b09      	ldr	r3, [pc, #36]	@ (8008650 <uart_handler_process_packets+0x5c>)
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	2bab      	cmp	r3, #171	@ 0xab
 800862e:	d10a      	bne.n	8008646 <uart_handler_process_packets+0x52>
 8008630:	4b08      	ldr	r3, [pc, #32]	@ (8008654 <uart_handler_process_packets+0x60>)
 8008632:	881b      	ldrh	r3, [r3, #0]
 8008634:	b29b      	uxth	r3, r3
 8008636:	2b24      	cmp	r3, #36	@ 0x24
 8008638:	d105      	bne.n	8008646 <uart_handler_process_packets+0x52>
            sut_packet_ready = 1;
 800863a:	4b08      	ldr	r3, [pc, #32]	@ (800865c <uart_handler_process_packets+0x68>)
 800863c:	2201      	movs	r2, #1
 800863e:	701a      	strb	r2, [r3, #0]
            process_sut_packet(usart4_rx_buffer);
 8008640:	4803      	ldr	r0, [pc, #12]	@ (8008650 <uart_handler_process_packets+0x5c>)
 8008642:	f000 f843 	bl	80086cc <process_sut_packet>
}
 8008646:	bf00      	nop
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	200016dc 	.word	0x200016dc
 8008650:	20001690 	.word	0x20001690
 8008654:	200016de 	.word	0x200016de
 8008658:	2000182d 	.word	0x2000182d
 800865c:	2000182e 	.word	0x2000182e

08008660 <process_command_packet>:
/**
 * @brief Process command packet from buffer
 * @param buffer Pointer to received buffer
 */
void process_command_packet(uint8_t* buffer)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
    if (buffer[0] == CMD_HEADER) {
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2baa      	cmp	r3, #170	@ 0xaa
 800866e:	d124      	bne.n	80086ba <process_command_packet+0x5a>
        uint8_t command = buffer[1];
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	785b      	ldrb	r3, [r3, #1]
 8008674:	73fb      	strb	r3, [r7, #15]
        //uint8_t checksum = buffer[2];
        uint8_t footer1 = buffer[3];
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	78db      	ldrb	r3, [r3, #3]
 800867a:	73bb      	strb	r3, [r7, #14]
        uint8_t footer2 = buffer[4];
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	791b      	ldrb	r3, [r3, #4]
 8008680:	737b      	strb	r3, [r7, #13]

        if (footer1 == CMD_FOOTER1 && footer2 == CMD_FOOTER2) {
 8008682:	7bbb      	ldrb	r3, [r7, #14]
 8008684:	2b0d      	cmp	r3, #13
 8008686:	d118      	bne.n	80086ba <process_command_packet+0x5a>
 8008688:	7b7b      	ldrb	r3, [r7, #13]
 800868a:	2b0a      	cmp	r3, #10
 800868c:	d115      	bne.n	80086ba <process_command_packet+0x5a>
            switch (command) {
 800868e:	7bfb      	ldrb	r3, [r7, #15]
 8008690:	2b24      	cmp	r3, #36	@ 0x24
 8008692:	d00e      	beq.n	80086b2 <process_command_packet+0x52>
 8008694:	2b24      	cmp	r3, #36	@ 0x24
 8008696:	dc10      	bgt.n	80086ba <process_command_packet+0x5a>
 8008698:	2b20      	cmp	r3, #32
 800869a:	d002      	beq.n	80086a2 <process_command_packet+0x42>
 800869c:	2b22      	cmp	r3, #34	@ 0x22
 800869e:	d004      	beq.n	80086aa <process_command_packet+0x4a>
                    current_mode = MODE_NORMAL;
                    break;
            }
        }
    }
}
 80086a0:	e00b      	b.n	80086ba <process_command_packet+0x5a>
                    current_mode = MODE_SIT;
 80086a2:	4b09      	ldr	r3, [pc, #36]	@ (80086c8 <process_command_packet+0x68>)
 80086a4:	2201      	movs	r2, #1
 80086a6:	701a      	strb	r2, [r3, #0]
                    break;
 80086a8:	e007      	b.n	80086ba <process_command_packet+0x5a>
                    current_mode = MODE_SUT;
 80086aa:	4b07      	ldr	r3, [pc, #28]	@ (80086c8 <process_command_packet+0x68>)
 80086ac:	2202      	movs	r2, #2
 80086ae:	701a      	strb	r2, [r3, #0]
                    break;
 80086b0:	e003      	b.n	80086ba <process_command_packet+0x5a>
                    current_mode = MODE_NORMAL;
 80086b2:	4b05      	ldr	r3, [pc, #20]	@ (80086c8 <process_command_packet+0x68>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	701a      	strb	r2, [r3, #0]
                    break;
 80086b8:	bf00      	nop
}
 80086ba:	bf00      	nop
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	2000182c 	.word	0x2000182c

080086cc <process_sut_packet>:
/**
 * @brief Process SUT data packet from buffer
 * @param buffer Pointer to received buffer
 */
void process_sut_packet(uint8_t* buffer)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
    // Header, footer and checksum verification
    if (buffer[0] != PACKET_HEADER) return;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	2bab      	cmp	r3, #171	@ 0xab
 80086da:	d172      	bne.n	80087c2 <process_sut_packet+0xf6>
    if (buffer[34] != CMD_FOOTER1 || buffer[35] != CMD_FOOTER2) return;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	3322      	adds	r3, #34	@ 0x22
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	2b0d      	cmp	r3, #13
 80086e4:	d16f      	bne.n	80087c6 <process_sut_packet+0xfa>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	3323      	adds	r3, #35	@ 0x23
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	2b0a      	cmp	r3, #10
 80086ee:	d16a      	bne.n	80087c6 <process_sut_packet+0xfa>

    uint8_t calculated_checksum = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 33; i++) {
 80086f4:	2300      	movs	r3, #0
 80086f6:	60bb      	str	r3, [r7, #8]
 80086f8:	e009      	b.n	800870e <process_sut_packet+0x42>
        calculated_checksum += buffer[i];
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	4413      	add	r3, r2
 8008700:	781a      	ldrb	r2, [r3, #0]
 8008702:	7bfb      	ldrb	r3, [r7, #15]
 8008704:	4413      	add	r3, r2
 8008706:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 33; i++) {
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	3301      	adds	r3, #1
 800870c:	60bb      	str	r3, [r7, #8]
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	2b20      	cmp	r3, #32
 8008712:	ddf2      	ble.n	80086fa <process_sut_packet+0x2e>
    }
    calculated_checksum %= 256;
    if (calculated_checksum != buffer[33]) return;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	3321      	adds	r3, #33	@ 0x21
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	7bfa      	ldrb	r2, [r7, #15]
 800871c:	429a      	cmp	r2, r3
 800871e:	d154      	bne.n	80087ca <process_sut_packet+0xfe>

    // Parse data
    latest_sut_data.altitude = uint8_arrayi_float32_ye_donustur(&buffer[1]);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	3301      	adds	r3, #1
 8008724:	4618      	mov	r0, r3
 8008726:	f7fd fb19 	bl	8005d5c <uint8_arrayi_float32_ye_donustur>
 800872a:	eef0 7a40 	vmov.f32	s15, s0
 800872e:	4b29      	ldr	r3, [pc, #164]	@ (80087d4 <process_sut_packet+0x108>)
 8008730:	edc3 7a00 	vstr	s15, [r3]
    latest_sut_data.pressure = uint8_arrayi_float32_ye_donustur(&buffer[5]);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	3305      	adds	r3, #5
 8008738:	4618      	mov	r0, r3
 800873a:	f7fd fb0f 	bl	8005d5c <uint8_arrayi_float32_ye_donustur>
 800873e:	eef0 7a40 	vmov.f32	s15, s0
 8008742:	4b24      	ldr	r3, [pc, #144]	@ (80087d4 <process_sut_packet+0x108>)
 8008744:	edc3 7a01 	vstr	s15, [r3, #4]
    latest_sut_data.acc_x = uint8_arrayi_float32_ye_donustur(&buffer[9]);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3309      	adds	r3, #9
 800874c:	4618      	mov	r0, r3
 800874e:	f7fd fb05 	bl	8005d5c <uint8_arrayi_float32_ye_donustur>
 8008752:	eef0 7a40 	vmov.f32	s15, s0
 8008756:	4b1f      	ldr	r3, [pc, #124]	@ (80087d4 <process_sut_packet+0x108>)
 8008758:	edc3 7a02 	vstr	s15, [r3, #8]
    latest_sut_data.acc_y = uint8_arrayi_float32_ye_donustur(&buffer[13]);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	330d      	adds	r3, #13
 8008760:	4618      	mov	r0, r3
 8008762:	f7fd fafb 	bl	8005d5c <uint8_arrayi_float32_ye_donustur>
 8008766:	eef0 7a40 	vmov.f32	s15, s0
 800876a:	4b1a      	ldr	r3, [pc, #104]	@ (80087d4 <process_sut_packet+0x108>)
 800876c:	edc3 7a03 	vstr	s15, [r3, #12]
    latest_sut_data.acc_z = uint8_arrayi_float32_ye_donustur(&buffer[17]);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	3311      	adds	r3, #17
 8008774:	4618      	mov	r0, r3
 8008776:	f7fd faf1 	bl	8005d5c <uint8_arrayi_float32_ye_donustur>
 800877a:	eef0 7a40 	vmov.f32	s15, s0
 800877e:	4b15      	ldr	r3, [pc, #84]	@ (80087d4 <process_sut_packet+0x108>)
 8008780:	edc3 7a04 	vstr	s15, [r3, #16]
    latest_sut_data.gyro_x = uint8_arrayi_float32_ye_donustur(&buffer[21]);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	3315      	adds	r3, #21
 8008788:	4618      	mov	r0, r3
 800878a:	f7fd fae7 	bl	8005d5c <uint8_arrayi_float32_ye_donustur>
 800878e:	eef0 7a40 	vmov.f32	s15, s0
 8008792:	4b10      	ldr	r3, [pc, #64]	@ (80087d4 <process_sut_packet+0x108>)
 8008794:	edc3 7a05 	vstr	s15, [r3, #20]
    latest_sut_data.gyro_y = uint8_arrayi_float32_ye_donustur(&buffer[25]);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	3319      	adds	r3, #25
 800879c:	4618      	mov	r0, r3
 800879e:	f7fd fadd 	bl	8005d5c <uint8_arrayi_float32_ye_donustur>
 80087a2:	eef0 7a40 	vmov.f32	s15, s0
 80087a6:	4b0b      	ldr	r3, [pc, #44]	@ (80087d4 <process_sut_packet+0x108>)
 80087a8:	edc3 7a06 	vstr	s15, [r3, #24]
    latest_sut_data.gyro_z = uint8_arrayi_float32_ye_donustur(&buffer[29]);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	331d      	adds	r3, #29
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7fd fad3 	bl	8005d5c <uint8_arrayi_float32_ye_donustur>
 80087b6:	eef0 7a40 	vmov.f32	s15, s0
 80087ba:	4b06      	ldr	r3, [pc, #24]	@ (80087d4 <process_sut_packet+0x108>)
 80087bc:	edc3 7a07 	vstr	s15, [r3, #28]
 80087c0:	e004      	b.n	80087cc <process_sut_packet+0x100>
    if (buffer[0] != PACKET_HEADER) return;
 80087c2:	bf00      	nop
 80087c4:	e002      	b.n	80087cc <process_sut_packet+0x100>
    if (buffer[34] != CMD_FOOTER1 || buffer[35] != CMD_FOOTER2) return;
 80087c6:	bf00      	nop
 80087c8:	e000      	b.n	80087cc <process_sut_packet+0x100>
    if (calculated_checksum != buffer[33]) return;
 80087ca:	bf00      	nop
}
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20001830 	.word	0x20001830

080087d8 <uart_handler_get_mode>:

/**
 * @brief Get current system mode
 */
SystemMode_t uart_handler_get_mode(void)
{
 80087d8:	b480      	push	{r7}
 80087da:	af00      	add	r7, sp, #0
    return current_mode;
 80087dc:	4b03      	ldr	r3, [pc, #12]	@ (80087ec <uart_handler_get_mode+0x14>)
 80087de:	781b      	ldrb	r3, [r3, #0]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	2000182c 	.word	0x2000182c

080087f0 <uart_handler_command_ready>:

/**
 * @brief Check if command packet is ready
 */
uint8_t uart_handler_command_ready(void)
{
 80087f0:	b480      	push	{r7}
 80087f2:	af00      	add	r7, sp, #0
    return command_packet_ready;
 80087f4:	4b03      	ldr	r3, [pc, #12]	@ (8008804 <uart_handler_command_ready+0x14>)
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	b2db      	uxtb	r3, r3
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	2000182d 	.word	0x2000182d

08008808 <uart_handler_sut_data_ready>:

/**
 * @brief Check if SUT data packet is ready
 */
uint8_t uart_handler_sut_data_ready(void)
{
 8008808:	b480      	push	{r7}
 800880a:	af00      	add	r7, sp, #0
    return sut_packet_ready;
 800880c:	4b03      	ldr	r3, [pc, #12]	@ (800881c <uart_handler_sut_data_ready+0x14>)
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	b2db      	uxtb	r3, r3
}
 8008812:	4618      	mov	r0, r3
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr
 800881c:	2000182e 	.word	0x2000182e

08008820 <uart_handler_get_sut_data>:

/**
 * @brief Get the latest SUT data
 */
uint8_t uart_handler_get_sut_data(sut_data_t* data)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
    if (data == NULL) return 0;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <uart_handler_get_sut_data+0x12>
 800882e:	2300      	movs	r3, #0
 8008830:	e005      	b.n	800883e <uart_handler_get_sut_data+0x1e>

    memcpy(data, &latest_sut_data, sizeof(sut_data_t));
 8008832:	2220      	movs	r2, #32
 8008834:	4904      	ldr	r1, [pc, #16]	@ (8008848 <uart_handler_get_sut_data+0x28>)
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f007 faf6 	bl	800fe28 <memcpy>
    return 1;
 800883c:	2301      	movs	r3, #1
}
 800883e:	4618      	mov	r0, r3
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	20001830 	.word	0x20001830

0800884c <uart_handler_clear_command_flag>:

/**
 * @brief Clear command ready flag
 */
void uart_handler_clear_command_flag(void)
{
 800884c:	b480      	push	{r7}
 800884e:	af00      	add	r7, sp, #0
    command_packet_ready = 0;
 8008850:	4b03      	ldr	r3, [pc, #12]	@ (8008860 <uart_handler_clear_command_flag+0x14>)
 8008852:	2200      	movs	r2, #0
 8008854:	701a      	strb	r2, [r3, #0]
}
 8008856:	bf00      	nop
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	2000182d 	.word	0x2000182d

08008864 <uart_handler_clear_sut_flag>:

/**
 * @brief Clear SUT data ready flag
 */
void uart_handler_clear_sut_flag(void)
{
 8008864:	b480      	push	{r7}
 8008866:	af00      	add	r7, sp, #0
    sut_packet_ready = 0;
 8008868:	4b03      	ldr	r3, [pc, #12]	@ (8008878 <uart_handler_clear_sut_flag+0x14>)
 800886a:	2200      	movs	r2, #0
 800886c:	701a      	strb	r2, [r3, #0]
}
 800886e:	bf00      	nop
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	2000182e 	.word	0x2000182e

0800887c <uart_handler_send_status>:

/**
 * @brief Send status packet (for SUT mode)
 */
void uart_handler_send_status(uint16_t status_bits)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	4603      	mov	r3, r0
 8008884:	80fb      	strh	r3, [r7, #6]
    if (!usart4_tx_busy) {
 8008886:	4b18      	ldr	r3, [pc, #96]	@ (80088e8 <uart_handler_send_status+0x6c>)
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b00      	cmp	r3, #0
 800888e:	d127      	bne.n	80088e0 <uart_handler_send_status+0x64>
        // Use static buffer for DMA safety
        status_packet_dma[0] = 0xAA;
 8008890:	4b16      	ldr	r3, [pc, #88]	@ (80088ec <uart_handler_send_status+0x70>)
 8008892:	22aa      	movs	r2, #170	@ 0xaa
 8008894:	701a      	strb	r2, [r3, #0]
        status_packet_dma[1] = status_bits & 0xFF;         // Low byte of status
 8008896:	88fb      	ldrh	r3, [r7, #6]
 8008898:	b2da      	uxtb	r2, r3
 800889a:	4b14      	ldr	r3, [pc, #80]	@ (80088ec <uart_handler_send_status+0x70>)
 800889c:	705a      	strb	r2, [r3, #1]
        status_packet_dma[2] = (status_bits >> 8) & 0xFF;  // High byte of status
 800889e:	88fb      	ldrh	r3, [r7, #6]
 80088a0:	0a1b      	lsrs	r3, r3, #8
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	4b11      	ldr	r3, [pc, #68]	@ (80088ec <uart_handler_send_status+0x70>)
 80088a8:	709a      	strb	r2, [r3, #2]

        // Calculate checksum (only for header and status bytes)
        status_packet_dma[3] = (status_packet_dma[0] + status_packet_dma[1] + status_packet_dma[2]) % 256;
 80088aa:	4b10      	ldr	r3, [pc, #64]	@ (80088ec <uart_handler_send_status+0x70>)
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	461a      	mov	r2, r3
 80088b0:	4b0e      	ldr	r3, [pc, #56]	@ (80088ec <uart_handler_send_status+0x70>)
 80088b2:	785b      	ldrb	r3, [r3, #1]
 80088b4:	4413      	add	r3, r2
 80088b6:	4a0d      	ldr	r2, [pc, #52]	@ (80088ec <uart_handler_send_status+0x70>)
 80088b8:	7892      	ldrb	r2, [r2, #2]
 80088ba:	4413      	add	r3, r2
 80088bc:	425a      	negs	r2, r3
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	b2d2      	uxtb	r2, r2
 80088c2:	bf58      	it	pl
 80088c4:	4253      	negpl	r3, r2
 80088c6:	b2da      	uxtb	r2, r3
 80088c8:	4b08      	ldr	r3, [pc, #32]	@ (80088ec <uart_handler_send_status+0x70>)
 80088ca:	70da      	strb	r2, [r3, #3]

        status_packet_dma[4] = 0x0D;
 80088cc:	4b07      	ldr	r3, [pc, #28]	@ (80088ec <uart_handler_send_status+0x70>)
 80088ce:	220d      	movs	r2, #13
 80088d0:	711a      	strb	r2, [r3, #4]
        status_packet_dma[5] = 0x0A;
 80088d2:	4b06      	ldr	r3, [pc, #24]	@ (80088ec <uart_handler_send_status+0x70>)
 80088d4:	220a      	movs	r2, #10
 80088d6:	715a      	strb	r2, [r3, #5]

        uart4_send_packet_dma(status_packet_dma, 6);
 80088d8:	2106      	movs	r1, #6
 80088da:	4804      	ldr	r0, [pc, #16]	@ (80088ec <uart_handler_send_status+0x70>)
 80088dc:	f7fd f80e 	bl	80058fc <uart4_send_packet_dma>
    }
}
 80088e0:	bf00      	nop
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	200016e1 	.word	0x200016e1
 80088ec:	20001850 	.word	0x20001850

080088f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80088f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008928 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80088f4:	f7ff fdce 	bl	8008494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80088f8:	480c      	ldr	r0, [pc, #48]	@ (800892c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80088fa:	490d      	ldr	r1, [pc, #52]	@ (8008930 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80088fc:	4a0d      	ldr	r2, [pc, #52]	@ (8008934 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80088fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008900:	e002      	b.n	8008908 <LoopCopyDataInit>

08008902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008906:	3304      	adds	r3, #4

08008908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800890a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800890c:	d3f9      	bcc.n	8008902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800890e:	4a0a      	ldr	r2, [pc, #40]	@ (8008938 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008910:	4c0a      	ldr	r4, [pc, #40]	@ (800893c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008914:	e001      	b.n	800891a <LoopFillZerobss>

08008916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008918:	3204      	adds	r2, #4

0800891a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800891a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800891c:	d3fb      	bcc.n	8008916 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800891e:	f007 fa47 	bl	800fdb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008922:	f7fc fab9 	bl	8004e98 <main>
  bx  lr    
 8008926:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008928:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800892c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008930:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8008934:	08015d70 	.word	0x08015d70
  ldr r2, =_sbss
 8008938:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 800893c:	200019a8 	.word	0x200019a8

08008940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008940:	e7fe      	b.n	8008940 <ADC_IRQHandler>
	...

08008944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008948:	4b0e      	ldr	r3, [pc, #56]	@ (8008984 <HAL_Init+0x40>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a0d      	ldr	r2, [pc, #52]	@ (8008984 <HAL_Init+0x40>)
 800894e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008952:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008954:	4b0b      	ldr	r3, [pc, #44]	@ (8008984 <HAL_Init+0x40>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a0a      	ldr	r2, [pc, #40]	@ (8008984 <HAL_Init+0x40>)
 800895a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800895e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008960:	4b08      	ldr	r3, [pc, #32]	@ (8008984 <HAL_Init+0x40>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a07      	ldr	r2, [pc, #28]	@ (8008984 <HAL_Init+0x40>)
 8008966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800896a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800896c:	2003      	movs	r0, #3
 800896e:	f000 fd99 	bl	80094a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008972:	200f      	movs	r0, #15
 8008974:	f000 f808 	bl	8008988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008978:	f7ff f85c 	bl	8007a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	40023c00 	.word	0x40023c00

08008988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008990:	4b12      	ldr	r3, [pc, #72]	@ (80089dc <HAL_InitTick+0x54>)
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	4b12      	ldr	r3, [pc, #72]	@ (80089e0 <HAL_InitTick+0x58>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	4619      	mov	r1, r3
 800899a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800899e:	fbb3 f3f1 	udiv	r3, r3, r1
 80089a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 fdbf 	bl	800952a <HAL_SYSTICK_Config>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e00e      	b.n	80089d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b0f      	cmp	r3, #15
 80089ba:	d80a      	bhi.n	80089d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80089bc:	2200      	movs	r2, #0
 80089be:	6879      	ldr	r1, [r7, #4]
 80089c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089c4:	f000 fd79 	bl	80094ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80089c8:	4a06      	ldr	r2, [pc, #24]	@ (80089e4 <HAL_InitTick+0x5c>)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	e000      	b.n	80089d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	20000040 	.word	0x20000040
 80089e0:	20000048 	.word	0x20000048
 80089e4:	20000044 	.word	0x20000044

080089e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80089e8:	b480      	push	{r7}
 80089ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80089ec:	4b06      	ldr	r3, [pc, #24]	@ (8008a08 <HAL_IncTick+0x20>)
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	461a      	mov	r2, r3
 80089f2:	4b06      	ldr	r3, [pc, #24]	@ (8008a0c <HAL_IncTick+0x24>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4413      	add	r3, r2
 80089f8:	4a04      	ldr	r2, [pc, #16]	@ (8008a0c <HAL_IncTick+0x24>)
 80089fa:	6013      	str	r3, [r2, #0]
}
 80089fc:	bf00      	nop
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	20000048 	.word	0x20000048
 8008a0c:	20001858 	.word	0x20001858

08008a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a10:	b480      	push	{r7}
 8008a12:	af00      	add	r7, sp, #0
  return uwTick;
 8008a14:	4b03      	ldr	r3, [pc, #12]	@ (8008a24 <HAL_GetTick+0x14>)
 8008a16:	681b      	ldr	r3, [r3, #0]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	20001858 	.word	0x20001858

08008a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008a30:	f7ff ffee 	bl	8008a10 <HAL_GetTick>
 8008a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a40:	d005      	beq.n	8008a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008a42:	4b0a      	ldr	r3, [pc, #40]	@ (8008a6c <HAL_Delay+0x44>)
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	461a      	mov	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008a4e:	bf00      	nop
 8008a50:	f7ff ffde 	bl	8008a10 <HAL_GetTick>
 8008a54:	4602      	mov	r2, r0
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d8f7      	bhi.n	8008a50 <HAL_Delay+0x28>
  {
  }
}
 8008a60:	bf00      	nop
 8008a62:	bf00      	nop
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20000048 	.word	0x20000048

08008a70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e033      	b.n	8008aee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d109      	bne.n	8008aa2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7fe fff8 	bl	8007a84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aa6:	f003 0310 	and.w	r3, r3, #16
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d118      	bne.n	8008ae0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008ab6:	f023 0302 	bic.w	r3, r3, #2
 8008aba:	f043 0202 	orr.w	r2, r3, #2
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fa7c 	bl	8008fc0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad2:	f023 0303 	bic.w	r3, r3, #3
 8008ad6:	f043 0201 	orr.w	r2, r3, #1
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	641a      	str	r2, [r3, #64]	@ 0x40
 8008ade:	e001      	b.n	8008ae4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
	...

08008af8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b088      	sub	sp, #32
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008b04:	2300      	movs	r3, #0
 8008b06:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d101      	bne.n	8008b1a <HAL_ADC_Start_DMA+0x22>
 8008b16:	2302      	movs	r3, #2
 8008b18:	e0eb      	b.n	8008cf2 <HAL_ADC_Start_DMA+0x1fa>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f003 0301 	and.w	r3, r3, #1
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d018      	beq.n	8008b62 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	689a      	ldr	r2, [r3, #8]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f042 0201 	orr.w	r2, r2, #1
 8008b3e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008b40:	4b6e      	ldr	r3, [pc, #440]	@ (8008cfc <HAL_ADC_Start_DMA+0x204>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a6e      	ldr	r2, [pc, #440]	@ (8008d00 <HAL_ADC_Start_DMA+0x208>)
 8008b46:	fba2 2303 	umull	r2, r3, r2, r3
 8008b4a:	0c9a      	lsrs	r2, r3, #18
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	005b      	lsls	r3, r3, #1
 8008b50:	4413      	add	r3, r2
 8008b52:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8008b54:	e002      	b.n	8008b5c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1f9      	bne.n	8008b56 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b70:	d107      	bne.n	8008b82 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	689a      	ldr	r2, [r3, #8]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008b80:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	f040 80a3 	bne.w	8008cd8 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b96:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008b9a:	f023 0301 	bic.w	r3, r3, #1
 8008b9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d007      	beq.n	8008bc4 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bb8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8008bbc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008bcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bd0:	d106      	bne.n	8008be0 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bd6:	f023 0206 	bic.w	r2, r3, #6
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	645a      	str	r2, [r3, #68]	@ 0x44
 8008bde:	e002      	b.n	8008be6 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008bee:	4b45      	ldr	r3, [pc, #276]	@ (8008d04 <HAL_ADC_Start_DMA+0x20c>)
 8008bf0:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bf6:	4a44      	ldr	r2, [pc, #272]	@ (8008d08 <HAL_ADC_Start_DMA+0x210>)
 8008bf8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bfe:	4a43      	ldr	r2, [pc, #268]	@ (8008d0c <HAL_ADC_Start_DMA+0x214>)
 8008c00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c06:	4a42      	ldr	r2, [pc, #264]	@ (8008d10 <HAL_ADC_Start_DMA+0x218>)
 8008c08:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8008c12:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	685a      	ldr	r2, [r3, #4]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8008c22:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	689a      	ldr	r2, [r3, #8]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c32:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	334c      	adds	r3, #76	@ 0x4c
 8008c3e:	4619      	mov	r1, r3
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f000 fd2c 	bl	80096a0 <HAL_DMA_Start_IT>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	f003 031f 	and.w	r3, r3, #31
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d12a      	bne.n	8008cae <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a2d      	ldr	r2, [pc, #180]	@ (8008d14 <HAL_ADC_Start_DMA+0x21c>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d015      	beq.n	8008c8e <HAL_ADC_Start_DMA+0x196>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a2c      	ldr	r2, [pc, #176]	@ (8008d18 <HAL_ADC_Start_DMA+0x220>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d105      	bne.n	8008c78 <HAL_ADC_Start_DMA+0x180>
 8008c6c:	4b25      	ldr	r3, [pc, #148]	@ (8008d04 <HAL_ADC_Start_DMA+0x20c>)
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	f003 031f 	and.w	r3, r3, #31
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00a      	beq.n	8008c8e <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a27      	ldr	r2, [pc, #156]	@ (8008d1c <HAL_ADC_Start_DMA+0x224>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d136      	bne.n	8008cf0 <HAL_ADC_Start_DMA+0x1f8>
 8008c82:	4b20      	ldr	r3, [pc, #128]	@ (8008d04 <HAL_ADC_Start_DMA+0x20c>)
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f003 0310 	and.w	r3, r3, #16
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d130      	bne.n	8008cf0 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d129      	bne.n	8008cf0 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	689a      	ldr	r2, [r3, #8]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008caa:	609a      	str	r2, [r3, #8]
 8008cac:	e020      	b.n	8008cf0 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a18      	ldr	r2, [pc, #96]	@ (8008d14 <HAL_ADC_Start_DMA+0x21c>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d11b      	bne.n	8008cf0 <HAL_ADC_Start_DMA+0x1f8>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d114      	bne.n	8008cf0 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	689a      	ldr	r2, [r3, #8]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008cd4:	609a      	str	r2, [r3, #8]
 8008cd6:	e00b      	b.n	8008cf0 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cdc:	f043 0210 	orr.w	r2, r3, #16
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ce8:	f043 0201 	orr.w	r2, r3, #1
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8008cf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3720      	adds	r7, #32
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	20000040 	.word	0x20000040
 8008d00:	431bde83 	.word	0x431bde83
 8008d04:	40012300 	.word	0x40012300
 8008d08:	080091b9 	.word	0x080091b9
 8008d0c:	08009273 	.word	0x08009273
 8008d10:	0800928f 	.word	0x0800928f
 8008d14:	40012000 	.word	0x40012000
 8008d18:	40012100 	.word	0x40012100
 8008d1c:	40012200 	.word	0x40012200

08008d20 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008d66:	2300      	movs	r3, #0
 8008d68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d101      	bne.n	8008d78 <HAL_ADC_ConfigChannel+0x1c>
 8008d74:	2302      	movs	r3, #2
 8008d76:	e113      	b.n	8008fa0 <HAL_ADC_ConfigChannel+0x244>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b09      	cmp	r3, #9
 8008d86:	d925      	bls.n	8008dd4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68d9      	ldr	r1, [r3, #12]
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	461a      	mov	r2, r3
 8008d96:	4613      	mov	r3, r2
 8008d98:	005b      	lsls	r3, r3, #1
 8008d9a:	4413      	add	r3, r2
 8008d9c:	3b1e      	subs	r3, #30
 8008d9e:	2207      	movs	r2, #7
 8008da0:	fa02 f303 	lsl.w	r3, r2, r3
 8008da4:	43da      	mvns	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	400a      	ands	r2, r1
 8008dac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68d9      	ldr	r1, [r3, #12]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	689a      	ldr	r2, [r3, #8]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	005b      	lsls	r3, r3, #1
 8008dc4:	4403      	add	r3, r0
 8008dc6:	3b1e      	subs	r3, #30
 8008dc8:	409a      	lsls	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	430a      	orrs	r2, r1
 8008dd0:	60da      	str	r2, [r3, #12]
 8008dd2:	e022      	b.n	8008e1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6919      	ldr	r1, [r3, #16]
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	461a      	mov	r2, r3
 8008de2:	4613      	mov	r3, r2
 8008de4:	005b      	lsls	r3, r3, #1
 8008de6:	4413      	add	r3, r2
 8008de8:	2207      	movs	r2, #7
 8008dea:	fa02 f303 	lsl.w	r3, r2, r3
 8008dee:	43da      	mvns	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	400a      	ands	r2, r1
 8008df6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	6919      	ldr	r1, [r3, #16]
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	689a      	ldr	r2, [r3, #8]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	4618      	mov	r0, r3
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	005b      	lsls	r3, r3, #1
 8008e0e:	4403      	add	r3, r0
 8008e10:	409a      	lsls	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	430a      	orrs	r2, r1
 8008e18:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	2b06      	cmp	r3, #6
 8008e20:	d824      	bhi.n	8008e6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4413      	add	r3, r2
 8008e32:	3b05      	subs	r3, #5
 8008e34:	221f      	movs	r2, #31
 8008e36:	fa02 f303 	lsl.w	r3, r2, r3
 8008e3a:	43da      	mvns	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	400a      	ands	r2, r1
 8008e42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	4618      	mov	r0, r3
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	685a      	ldr	r2, [r3, #4]
 8008e56:	4613      	mov	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	4413      	add	r3, r2
 8008e5c:	3b05      	subs	r3, #5
 8008e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	635a      	str	r2, [r3, #52]	@ 0x34
 8008e6a:	e04c      	b.n	8008f06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	2b0c      	cmp	r3, #12
 8008e72:	d824      	bhi.n	8008ebe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4413      	add	r3, r2
 8008e84:	3b23      	subs	r3, #35	@ 0x23
 8008e86:	221f      	movs	r2, #31
 8008e88:	fa02 f303 	lsl.w	r3, r2, r3
 8008e8c:	43da      	mvns	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	400a      	ands	r2, r1
 8008e94:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	685a      	ldr	r2, [r3, #4]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	3b23      	subs	r3, #35	@ 0x23
 8008eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	430a      	orrs	r2, r1
 8008eba:	631a      	str	r2, [r3, #48]	@ 0x30
 8008ebc:	e023      	b.n	8008f06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	3b41      	subs	r3, #65	@ 0x41
 8008ed0:	221f      	movs	r2, #31
 8008ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed6:	43da      	mvns	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	400a      	ands	r2, r1
 8008ede:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	4618      	mov	r0, r3
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	4413      	add	r3, r2
 8008ef8:	3b41      	subs	r3, #65	@ 0x41
 8008efa:	fa00 f203 	lsl.w	r2, r0, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	430a      	orrs	r2, r1
 8008f04:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008f06:	4b29      	ldr	r3, [pc, #164]	@ (8008fac <HAL_ADC_ConfigChannel+0x250>)
 8008f08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a28      	ldr	r2, [pc, #160]	@ (8008fb0 <HAL_ADC_ConfigChannel+0x254>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d10f      	bne.n	8008f34 <HAL_ADC_ConfigChannel+0x1d8>
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b12      	cmp	r3, #18
 8008f1a:	d10b      	bne.n	8008f34 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a1d      	ldr	r2, [pc, #116]	@ (8008fb0 <HAL_ADC_ConfigChannel+0x254>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d12b      	bne.n	8008f96 <HAL_ADC_ConfigChannel+0x23a>
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a1c      	ldr	r2, [pc, #112]	@ (8008fb4 <HAL_ADC_ConfigChannel+0x258>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d003      	beq.n	8008f50 <HAL_ADC_ConfigChannel+0x1f4>
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2b11      	cmp	r3, #17
 8008f4e:	d122      	bne.n	8008f96 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a11      	ldr	r2, [pc, #68]	@ (8008fb4 <HAL_ADC_ConfigChannel+0x258>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d111      	bne.n	8008f96 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008f72:	4b11      	ldr	r3, [pc, #68]	@ (8008fb8 <HAL_ADC_ConfigChannel+0x25c>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a11      	ldr	r2, [pc, #68]	@ (8008fbc <HAL_ADC_ConfigChannel+0x260>)
 8008f78:	fba2 2303 	umull	r2, r3, r2, r3
 8008f7c:	0c9a      	lsrs	r2, r3, #18
 8008f7e:	4613      	mov	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4413      	add	r3, r2
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8008f88:	e002      	b.n	8008f90 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d1f9      	bne.n	8008f8a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3714      	adds	r7, #20
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	40012300 	.word	0x40012300
 8008fb0:	40012000 	.word	0x40012000
 8008fb4:	10000012 	.word	0x10000012
 8008fb8:	20000040 	.word	0x20000040
 8008fbc:	431bde83 	.word	0x431bde83

08008fc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008fc8:	4b79      	ldr	r3, [pc, #484]	@ (80091b0 <ADC_Init+0x1f0>)
 8008fca:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	685a      	ldr	r2, [r3, #4]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	431a      	orrs	r2, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008ff4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	6859      	ldr	r1, [r3, #4]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	021a      	lsls	r2, r3, #8
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	430a      	orrs	r2, r1
 8009008:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8009018:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6859      	ldr	r1, [r3, #4]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	689a      	ldr	r2, [r3, #8]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	430a      	orrs	r2, r1
 800902a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689a      	ldr	r2, [r3, #8]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800903a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	6899      	ldr	r1, [r3, #8]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68da      	ldr	r2, [r3, #12]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	430a      	orrs	r2, r1
 800904c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009052:	4a58      	ldr	r2, [pc, #352]	@ (80091b4 <ADC_Init+0x1f4>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d022      	beq.n	800909e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689a      	ldr	r2, [r3, #8]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009066:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6899      	ldr	r1, [r3, #8]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	689a      	ldr	r2, [r3, #8]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009088:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	6899      	ldr	r1, [r3, #8]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	430a      	orrs	r2, r1
 800909a:	609a      	str	r2, [r3, #8]
 800909c:	e00f      	b.n	80090be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	689a      	ldr	r2, [r3, #8]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80090ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	689a      	ldr	r2, [r3, #8]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80090bc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	689a      	ldr	r2, [r3, #8]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f022 0202 	bic.w	r2, r2, #2
 80090cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	6899      	ldr	r1, [r3, #8]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	7e1b      	ldrb	r3, [r3, #24]
 80090d8:	005a      	lsls	r2, r3, #1
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	430a      	orrs	r2, r1
 80090e0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d01b      	beq.n	8009124 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	685a      	ldr	r2, [r3, #4]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090fa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	685a      	ldr	r2, [r3, #4]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800910a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6859      	ldr	r1, [r3, #4]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009116:	3b01      	subs	r3, #1
 8009118:	035a      	lsls	r2, r3, #13
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	430a      	orrs	r2, r1
 8009120:	605a      	str	r2, [r3, #4]
 8009122:	e007      	b.n	8009134 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	685a      	ldr	r2, [r3, #4]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009132:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8009142:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	69db      	ldr	r3, [r3, #28]
 800914e:	3b01      	subs	r3, #1
 8009150:	051a      	lsls	r2, r3, #20
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	430a      	orrs	r2, r1
 8009158:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	689a      	ldr	r2, [r3, #8]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009168:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	6899      	ldr	r1, [r3, #8]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009176:	025a      	lsls	r2, r3, #9
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	430a      	orrs	r2, r1
 800917e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	689a      	ldr	r2, [r3, #8]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800918e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6899      	ldr	r1, [r3, #8]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	029a      	lsls	r2, r3, #10
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	430a      	orrs	r2, r1
 80091a2:	609a      	str	r2, [r3, #8]
}
 80091a4:	bf00      	nop
 80091a6:	3714      	adds	r7, #20
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr
 80091b0:	40012300 	.word	0x40012300
 80091b4:	0f000001 	.word	0x0f000001

080091b8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ca:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d13c      	bne.n	800924c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d12b      	bne.n	8009244 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d127      	bne.n	8009244 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d006      	beq.n	8009210 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800920c:	2b00      	cmp	r3, #0
 800920e:	d119      	bne.n	8009244 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	685a      	ldr	r2, [r3, #4]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f022 0220 	bic.w	r2, r2, #32
 800921e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009224:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009230:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d105      	bne.n	8009244 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800923c:	f043 0201 	orr.w	r2, r3, #1
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f7ff fd6b 	bl	8008d20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800924a:	e00e      	b.n	800926a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009250:	f003 0310 	and.w	r3, r3, #16
 8009254:	2b00      	cmp	r3, #0
 8009256:	d003      	beq.n	8009260 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f7ff fd75 	bl	8008d48 <HAL_ADC_ErrorCallback>
}
 800925e:	e004      	b.n	800926a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	4798      	blx	r3
}
 800926a:	bf00      	nop
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b084      	sub	sp, #16
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800927e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f7ff fd57 	bl	8008d34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009286:	bf00      	nop
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b084      	sub	sp, #16
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800929a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2240      	movs	r2, #64	@ 0x40
 80092a0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092a6:	f043 0204 	orr.w	r2, r3, #4
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f7ff fd4a 	bl	8008d48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80092b4:	bf00      	nop
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f003 0307 	and.w	r3, r3, #7
 80092ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80092cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009300 <__NVIC_SetPriorityGrouping+0x44>)
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80092d2:	68ba      	ldr	r2, [r7, #8]
 80092d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80092d8:	4013      	ands	r3, r2
 80092da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80092e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80092e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80092ee:	4a04      	ldr	r2, [pc, #16]	@ (8009300 <__NVIC_SetPriorityGrouping+0x44>)
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	60d3      	str	r3, [r2, #12]
}
 80092f4:	bf00      	nop
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	e000ed00 	.word	0xe000ed00

08009304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009304:	b480      	push	{r7}
 8009306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009308:	4b04      	ldr	r3, [pc, #16]	@ (800931c <__NVIC_GetPriorityGrouping+0x18>)
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	0a1b      	lsrs	r3, r3, #8
 800930e:	f003 0307 	and.w	r3, r3, #7
}
 8009312:	4618      	mov	r0, r3
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr
 800931c:	e000ed00 	.word	0xe000ed00

08009320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	4603      	mov	r3, r0
 8009328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800932a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800932e:	2b00      	cmp	r3, #0
 8009330:	db0b      	blt.n	800934a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009332:	79fb      	ldrb	r3, [r7, #7]
 8009334:	f003 021f 	and.w	r2, r3, #31
 8009338:	4907      	ldr	r1, [pc, #28]	@ (8009358 <__NVIC_EnableIRQ+0x38>)
 800933a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800933e:	095b      	lsrs	r3, r3, #5
 8009340:	2001      	movs	r0, #1
 8009342:	fa00 f202 	lsl.w	r2, r0, r2
 8009346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800934a:	bf00      	nop
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
 8009356:	bf00      	nop
 8009358:	e000e100 	.word	0xe000e100

0800935c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	4603      	mov	r3, r0
 8009364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800936a:	2b00      	cmp	r3, #0
 800936c:	db12      	blt.n	8009394 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800936e:	79fb      	ldrb	r3, [r7, #7]
 8009370:	f003 021f 	and.w	r2, r3, #31
 8009374:	490a      	ldr	r1, [pc, #40]	@ (80093a0 <__NVIC_DisableIRQ+0x44>)
 8009376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800937a:	095b      	lsrs	r3, r3, #5
 800937c:	2001      	movs	r0, #1
 800937e:	fa00 f202 	lsl.w	r2, r0, r2
 8009382:	3320      	adds	r3, #32
 8009384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009388:	f3bf 8f4f 	dsb	sy
}
 800938c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800938e:	f3bf 8f6f 	isb	sy
}
 8009392:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	e000e100 	.word	0xe000e100

080093a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	4603      	mov	r3, r0
 80093ac:	6039      	str	r1, [r7, #0]
 80093ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80093b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	db0a      	blt.n	80093ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	b2da      	uxtb	r2, r3
 80093bc:	490c      	ldr	r1, [pc, #48]	@ (80093f0 <__NVIC_SetPriority+0x4c>)
 80093be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093c2:	0112      	lsls	r2, r2, #4
 80093c4:	b2d2      	uxtb	r2, r2
 80093c6:	440b      	add	r3, r1
 80093c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80093cc:	e00a      	b.n	80093e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	4908      	ldr	r1, [pc, #32]	@ (80093f4 <__NVIC_SetPriority+0x50>)
 80093d4:	79fb      	ldrb	r3, [r7, #7]
 80093d6:	f003 030f 	and.w	r3, r3, #15
 80093da:	3b04      	subs	r3, #4
 80093dc:	0112      	lsls	r2, r2, #4
 80093de:	b2d2      	uxtb	r2, r2
 80093e0:	440b      	add	r3, r1
 80093e2:	761a      	strb	r2, [r3, #24]
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	e000e100 	.word	0xe000e100
 80093f4:	e000ed00 	.word	0xe000ed00

080093f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b089      	sub	sp, #36	@ 0x24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f003 0307 	and.w	r3, r3, #7
 800940a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	f1c3 0307 	rsb	r3, r3, #7
 8009412:	2b04      	cmp	r3, #4
 8009414:	bf28      	it	cs
 8009416:	2304      	movcs	r3, #4
 8009418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	3304      	adds	r3, #4
 800941e:	2b06      	cmp	r3, #6
 8009420:	d902      	bls.n	8009428 <NVIC_EncodePriority+0x30>
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	3b03      	subs	r3, #3
 8009426:	e000      	b.n	800942a <NVIC_EncodePriority+0x32>
 8009428:	2300      	movs	r3, #0
 800942a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800942c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	fa02 f303 	lsl.w	r3, r2, r3
 8009436:	43da      	mvns	r2, r3
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	401a      	ands	r2, r3
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009440:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	fa01 f303 	lsl.w	r3, r1, r3
 800944a:	43d9      	mvns	r1, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009450:	4313      	orrs	r3, r2
         );
}
 8009452:	4618      	mov	r0, r3
 8009454:	3724      	adds	r7, #36	@ 0x24
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
	...

08009460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	3b01      	subs	r3, #1
 800946c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009470:	d301      	bcc.n	8009476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009472:	2301      	movs	r3, #1
 8009474:	e00f      	b.n	8009496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009476:	4a0a      	ldr	r2, [pc, #40]	@ (80094a0 <SysTick_Config+0x40>)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	3b01      	subs	r3, #1
 800947c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800947e:	210f      	movs	r1, #15
 8009480:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009484:	f7ff ff8e 	bl	80093a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009488:	4b05      	ldr	r3, [pc, #20]	@ (80094a0 <SysTick_Config+0x40>)
 800948a:	2200      	movs	r2, #0
 800948c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800948e:	4b04      	ldr	r3, [pc, #16]	@ (80094a0 <SysTick_Config+0x40>)
 8009490:	2207      	movs	r2, #7
 8009492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	e000e010 	.word	0xe000e010

080094a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff ff05 	bl	80092bc <__NVIC_SetPriorityGrouping>
}
 80094b2:	bf00      	nop
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b086      	sub	sp, #24
 80094be:	af00      	add	r7, sp, #0
 80094c0:	4603      	mov	r3, r0
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	607a      	str	r2, [r7, #4]
 80094c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80094c8:	2300      	movs	r3, #0
 80094ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80094cc:	f7ff ff1a 	bl	8009304 <__NVIC_GetPriorityGrouping>
 80094d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	68b9      	ldr	r1, [r7, #8]
 80094d6:	6978      	ldr	r0, [r7, #20]
 80094d8:	f7ff ff8e 	bl	80093f8 <NVIC_EncodePriority>
 80094dc:	4602      	mov	r2, r0
 80094de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094e2:	4611      	mov	r1, r2
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7ff ff5d 	bl	80093a4 <__NVIC_SetPriority>
}
 80094ea:	bf00      	nop
 80094ec:	3718      	adds	r7, #24
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b082      	sub	sp, #8
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	4603      	mov	r3, r0
 80094fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80094fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009500:	4618      	mov	r0, r3
 8009502:	f7ff ff0d 	bl	8009320 <__NVIC_EnableIRQ>
}
 8009506:	bf00      	nop
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b082      	sub	sp, #8
 8009512:	af00      	add	r7, sp, #0
 8009514:	4603      	mov	r3, r0
 8009516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800951c:	4618      	mov	r0, r3
 800951e:	f7ff ff1d 	bl	800935c <__NVIC_DisableIRQ>
}
 8009522:	bf00      	nop
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b082      	sub	sp, #8
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f7ff ff94 	bl	8009460 <SysTick_Config>
 8009538:	4603      	mov	r3, r0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
	...

08009544 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800954c:	2300      	movs	r3, #0
 800954e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009550:	f7ff fa5e 	bl	8008a10 <HAL_GetTick>
 8009554:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d101      	bne.n	8009560 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e099      	b.n	8009694 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2202      	movs	r2, #2
 8009564:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f022 0201 	bic.w	r2, r2, #1
 800957e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009580:	e00f      	b.n	80095a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009582:	f7ff fa45 	bl	8008a10 <HAL_GetTick>
 8009586:	4602      	mov	r2, r0
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	2b05      	cmp	r3, #5
 800958e:	d908      	bls.n	80095a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2220      	movs	r2, #32
 8009594:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2203      	movs	r2, #3
 800959a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	e078      	b.n	8009694 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 0301 	and.w	r3, r3, #1
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1e8      	bne.n	8009582 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80095b8:	697a      	ldr	r2, [r7, #20]
 80095ba:	4b38      	ldr	r3, [pc, #224]	@ (800969c <HAL_DMA_Init+0x158>)
 80095bc:	4013      	ands	r3, r2
 80095be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	685a      	ldr	r2, [r3, #4]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80095ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80095da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80095e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a1b      	ldr	r3, [r3, #32]
 80095ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f8:	2b04      	cmp	r3, #4
 80095fa:	d107      	bne.n	800960c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009604:	4313      	orrs	r3, r2
 8009606:	697a      	ldr	r2, [r7, #20]
 8009608:	4313      	orrs	r3, r2
 800960a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	697a      	ldr	r2, [r7, #20]
 8009612:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	f023 0307 	bic.w	r3, r3, #7
 8009622:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	4313      	orrs	r3, r2
 800962c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009632:	2b04      	cmp	r3, #4
 8009634:	d117      	bne.n	8009666 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	4313      	orrs	r3, r2
 800963e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00e      	beq.n	8009666 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fb01 	bl	8009c50 <DMA_CheckFifoParam>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d008      	beq.n	8009666 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2240      	movs	r2, #64	@ 0x40
 8009658:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8009662:	2301      	movs	r3, #1
 8009664:	e016      	b.n	8009694 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fab8 	bl	8009be4 <DMA_CalcBaseAndBitshift>
 8009674:	4603      	mov	r3, r0
 8009676:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800967c:	223f      	movs	r2, #63	@ 0x3f
 800967e:	409a      	lsls	r2, r3
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3718      	adds	r7, #24
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	f010803f 	.word	0xf010803f

080096a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
 80096ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d101      	bne.n	80096c6 <HAL_DMA_Start_IT+0x26>
 80096c2:	2302      	movs	r3, #2
 80096c4:	e040      	b.n	8009748 <HAL_DMA_Start_IT+0xa8>
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d12f      	bne.n	800973a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2202      	movs	r2, #2
 80096de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	68b9      	ldr	r1, [r7, #8]
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f000 fa4a 	bl	8009b88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096f8:	223f      	movs	r2, #63	@ 0x3f
 80096fa:	409a      	lsls	r2, r3
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f042 0216 	orr.w	r2, r2, #22
 800970e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009714:	2b00      	cmp	r3, #0
 8009716:	d007      	beq.n	8009728 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f042 0208 	orr.w	r2, r2, #8
 8009726:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f042 0201 	orr.w	r2, r2, #1
 8009736:	601a      	str	r2, [r3, #0]
 8009738:	e005      	b.n	8009746 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009742:	2302      	movs	r3, #2
 8009744:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009746:	7dfb      	ldrb	r3, [r7, #23]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3718      	adds	r7, #24
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800975c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800975e:	f7ff f957 	bl	8008a10 <HAL_GetTick>
 8009762:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800976a:	b2db      	uxtb	r3, r3
 800976c:	2b02      	cmp	r3, #2
 800976e:	d008      	beq.n	8009782 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2280      	movs	r2, #128	@ 0x80
 8009774:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e052      	b.n	8009828 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f022 0216 	bic.w	r2, r2, #22
 8009790:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	695a      	ldr	r2, [r3, #20]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80097a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d103      	bne.n	80097b2 <HAL_DMA_Abort+0x62>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d007      	beq.n	80097c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f022 0208 	bic.w	r2, r2, #8
 80097c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f022 0201 	bic.w	r2, r2, #1
 80097d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80097d2:	e013      	b.n	80097fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80097d4:	f7ff f91c 	bl	8008a10 <HAL_GetTick>
 80097d8:	4602      	mov	r2, r0
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	2b05      	cmp	r3, #5
 80097e0:	d90c      	bls.n	80097fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2220      	movs	r2, #32
 80097e6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2203      	movs	r2, #3
 80097ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e015      	b.n	8009828 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f003 0301 	and.w	r3, r3, #1
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1e4      	bne.n	80097d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800980e:	223f      	movs	r2, #63	@ 0x3f
 8009810:	409a      	lsls	r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2201      	movs	r2, #1
 800981a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800983e:	b2db      	uxtb	r3, r3
 8009840:	2b02      	cmp	r3, #2
 8009842:	d004      	beq.n	800984e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2280      	movs	r2, #128	@ 0x80
 8009848:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e00c      	b.n	8009868 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2205      	movs	r2, #5
 8009852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f022 0201 	bic.w	r2, r2, #1
 8009864:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b086      	sub	sp, #24
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800987c:	2300      	movs	r3, #0
 800987e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009880:	4b8e      	ldr	r3, [pc, #568]	@ (8009abc <HAL_DMA_IRQHandler+0x248>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a8e      	ldr	r2, [pc, #568]	@ (8009ac0 <HAL_DMA_IRQHandler+0x24c>)
 8009886:	fba2 2303 	umull	r2, r3, r2, r3
 800988a:	0a9b      	lsrs	r3, r3, #10
 800988c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009892:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800989e:	2208      	movs	r2, #8
 80098a0:	409a      	lsls	r2, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	4013      	ands	r3, r2
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d01a      	beq.n	80098e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 0304 	and.w	r3, r3, #4
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d013      	beq.n	80098e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f022 0204 	bic.w	r2, r2, #4
 80098c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098cc:	2208      	movs	r2, #8
 80098ce:	409a      	lsls	r2, r3
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098d8:	f043 0201 	orr.w	r2, r3, #1
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098e4:	2201      	movs	r2, #1
 80098e6:	409a      	lsls	r2, r3
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	4013      	ands	r3, r2
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d012      	beq.n	8009916 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	695b      	ldr	r3, [r3, #20]
 80098f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00b      	beq.n	8009916 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009902:	2201      	movs	r2, #1
 8009904:	409a      	lsls	r2, r3
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800990e:	f043 0202 	orr.w	r2, r3, #2
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800991a:	2204      	movs	r2, #4
 800991c:	409a      	lsls	r2, r3
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	4013      	ands	r3, r2
 8009922:	2b00      	cmp	r3, #0
 8009924:	d012      	beq.n	800994c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 0302 	and.w	r3, r3, #2
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00b      	beq.n	800994c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009938:	2204      	movs	r2, #4
 800993a:	409a      	lsls	r2, r3
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009944:	f043 0204 	orr.w	r2, r3, #4
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009950:	2210      	movs	r2, #16
 8009952:	409a      	lsls	r2, r3
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	4013      	ands	r3, r2
 8009958:	2b00      	cmp	r3, #0
 800995a:	d043      	beq.n	80099e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f003 0308 	and.w	r3, r3, #8
 8009966:	2b00      	cmp	r3, #0
 8009968:	d03c      	beq.n	80099e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800996e:	2210      	movs	r2, #16
 8009970:	409a      	lsls	r2, r3
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009980:	2b00      	cmp	r3, #0
 8009982:	d018      	beq.n	80099b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800998e:	2b00      	cmp	r3, #0
 8009990:	d108      	bne.n	80099a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009996:	2b00      	cmp	r3, #0
 8009998:	d024      	beq.n	80099e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	4798      	blx	r3
 80099a2:	e01f      	b.n	80099e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d01b      	beq.n	80099e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	4798      	blx	r3
 80099b4:	e016      	b.n	80099e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d107      	bne.n	80099d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f022 0208 	bic.w	r2, r2, #8
 80099d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d003      	beq.n	80099e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099e8:	2220      	movs	r2, #32
 80099ea:	409a      	lsls	r2, r3
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	4013      	ands	r3, r2
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f000 808f 	beq.w	8009b14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 0310 	and.w	r3, r3, #16
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f000 8087 	beq.w	8009b14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a0a:	2220      	movs	r2, #32
 8009a0c:	409a      	lsls	r2, r3
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2b05      	cmp	r3, #5
 8009a1c:	d136      	bne.n	8009a8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f022 0216 	bic.w	r2, r2, #22
 8009a2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	695a      	ldr	r2, [r3, #20]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d103      	bne.n	8009a4e <HAL_DMA_IRQHandler+0x1da>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d007      	beq.n	8009a5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f022 0208 	bic.w	r2, r2, #8
 8009a5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a62:	223f      	movs	r2, #63	@ 0x3f
 8009a64:	409a      	lsls	r2, r3
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d07e      	beq.n	8009b80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	4798      	blx	r3
        }
        return;
 8009a8a:	e079      	b.n	8009b80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d01d      	beq.n	8009ad6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10d      	bne.n	8009ac4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d031      	beq.n	8009b14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	4798      	blx	r3
 8009ab8:	e02c      	b.n	8009b14 <HAL_DMA_IRQHandler+0x2a0>
 8009aba:	bf00      	nop
 8009abc:	20000040 	.word	0x20000040
 8009ac0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d023      	beq.n	8009b14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	4798      	blx	r3
 8009ad4:	e01e      	b.n	8009b14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10f      	bne.n	8009b04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f022 0210 	bic.w	r2, r2, #16
 8009af2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d003      	beq.n	8009b14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d032      	beq.n	8009b82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b20:	f003 0301 	and.w	r3, r3, #1
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d022      	beq.n	8009b6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2205      	movs	r2, #5
 8009b2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f022 0201 	bic.w	r2, r2, #1
 8009b3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	3301      	adds	r3, #1
 8009b44:	60bb      	str	r3, [r7, #8]
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d307      	bcc.n	8009b5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f003 0301 	and.w	r3, r3, #1
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d1f2      	bne.n	8009b40 <HAL_DMA_IRQHandler+0x2cc>
 8009b5a:	e000      	b.n	8009b5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8009b5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2201      	movs	r2, #1
 8009b62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d005      	beq.n	8009b82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	4798      	blx	r3
 8009b7e:	e000      	b.n	8009b82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8009b80:	bf00      	nop
    }
  }
}
 8009b82:	3718      	adds	r7, #24
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
 8009b94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009ba4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	2b40      	cmp	r3, #64	@ 0x40
 8009bb4:	d108      	bne.n	8009bc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009bc6:	e007      	b.n	8009bd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	60da      	str	r2, [r3, #12]
}
 8009bd8:	bf00      	nop
 8009bda:	3714      	adds	r7, #20
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	3b10      	subs	r3, #16
 8009bf4:	4a14      	ldr	r2, [pc, #80]	@ (8009c48 <DMA_CalcBaseAndBitshift+0x64>)
 8009bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bfa:	091b      	lsrs	r3, r3, #4
 8009bfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009bfe:	4a13      	ldr	r2, [pc, #76]	@ (8009c4c <DMA_CalcBaseAndBitshift+0x68>)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	4413      	add	r3, r2
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	461a      	mov	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	d909      	bls.n	8009c26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8009c1a:	f023 0303 	bic.w	r3, r3, #3
 8009c1e:	1d1a      	adds	r2, r3, #4
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	659a      	str	r2, [r3, #88]	@ 0x58
 8009c24:	e007      	b.n	8009c36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8009c2e:	f023 0303 	bic.w	r3, r3, #3
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3714      	adds	r7, #20
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	aaaaaaab 	.word	0xaaaaaaab
 8009c4c:	080156c4 	.word	0x080156c4

08009c50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	699b      	ldr	r3, [r3, #24]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d11f      	bne.n	8009caa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	2b03      	cmp	r3, #3
 8009c6e:	d856      	bhi.n	8009d1e <DMA_CheckFifoParam+0xce>
 8009c70:	a201      	add	r2, pc, #4	@ (adr r2, 8009c78 <DMA_CheckFifoParam+0x28>)
 8009c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c76:	bf00      	nop
 8009c78:	08009c89 	.word	0x08009c89
 8009c7c:	08009c9b 	.word	0x08009c9b
 8009c80:	08009c89 	.word	0x08009c89
 8009c84:	08009d1f 	.word	0x08009d1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d046      	beq.n	8009d22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c98:	e043      	b.n	8009d22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c9e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009ca2:	d140      	bne.n	8009d26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009ca8:	e03d      	b.n	8009d26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	699b      	ldr	r3, [r3, #24]
 8009cae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cb2:	d121      	bne.n	8009cf8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	2b03      	cmp	r3, #3
 8009cb8:	d837      	bhi.n	8009d2a <DMA_CheckFifoParam+0xda>
 8009cba:	a201      	add	r2, pc, #4	@ (adr r2, 8009cc0 <DMA_CheckFifoParam+0x70>)
 8009cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc0:	08009cd1 	.word	0x08009cd1
 8009cc4:	08009cd7 	.word	0x08009cd7
 8009cc8:	08009cd1 	.word	0x08009cd1
 8009ccc:	08009ce9 	.word	0x08009ce9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8009cd4:	e030      	b.n	8009d38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d025      	beq.n	8009d2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009ce6:	e022      	b.n	8009d2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009cf0:	d11f      	bne.n	8009d32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009cf6:	e01c      	b.n	8009d32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d903      	bls.n	8009d06 <DMA_CheckFifoParam+0xb6>
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	2b03      	cmp	r3, #3
 8009d02:	d003      	beq.n	8009d0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009d04:	e018      	b.n	8009d38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	73fb      	strb	r3, [r7, #15]
      break;
 8009d0a:	e015      	b.n	8009d38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00e      	beq.n	8009d36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d1c:	e00b      	b.n	8009d36 <DMA_CheckFifoParam+0xe6>
      break;
 8009d1e:	bf00      	nop
 8009d20:	e00a      	b.n	8009d38 <DMA_CheckFifoParam+0xe8>
      break;
 8009d22:	bf00      	nop
 8009d24:	e008      	b.n	8009d38 <DMA_CheckFifoParam+0xe8>
      break;
 8009d26:	bf00      	nop
 8009d28:	e006      	b.n	8009d38 <DMA_CheckFifoParam+0xe8>
      break;
 8009d2a:	bf00      	nop
 8009d2c:	e004      	b.n	8009d38 <DMA_CheckFifoParam+0xe8>
      break;
 8009d2e:	bf00      	nop
 8009d30:	e002      	b.n	8009d38 <DMA_CheckFifoParam+0xe8>
      break;   
 8009d32:	bf00      	nop
 8009d34:	e000      	b.n	8009d38 <DMA_CheckFifoParam+0xe8>
      break;
 8009d36:	bf00      	nop
    }
  } 
  
  return status; 
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop

08009d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b089      	sub	sp, #36	@ 0x24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009d52:	2300      	movs	r3, #0
 8009d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009d56:	2300      	movs	r3, #0
 8009d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009d5e:	2300      	movs	r3, #0
 8009d60:	61fb      	str	r3, [r7, #28]
 8009d62:	e165      	b.n	800a030 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009d64:	2201      	movs	r2, #1
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	fa02 f303 	lsl.w	r3, r2, r3
 8009d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	697a      	ldr	r2, [r7, #20]
 8009d74:	4013      	ands	r3, r2
 8009d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009d78:	693a      	ldr	r2, [r7, #16]
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	f040 8154 	bne.w	800a02a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f003 0303 	and.w	r3, r3, #3
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d005      	beq.n	8009d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d130      	bne.n	8009dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	005b      	lsls	r3, r3, #1
 8009da4:	2203      	movs	r2, #3
 8009da6:	fa02 f303 	lsl.w	r3, r2, r3
 8009daa:	43db      	mvns	r3, r3
 8009dac:	69ba      	ldr	r2, [r7, #24]
 8009dae:	4013      	ands	r3, r2
 8009db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	68da      	ldr	r2, [r3, #12]
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	005b      	lsls	r3, r3, #1
 8009dba:	fa02 f303 	lsl.w	r3, r2, r3
 8009dbe:	69ba      	ldr	r2, [r7, #24]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	69ba      	ldr	r2, [r7, #24]
 8009dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd8:	43db      	mvns	r3, r3
 8009dda:	69ba      	ldr	r2, [r7, #24]
 8009ddc:	4013      	ands	r3, r2
 8009dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	091b      	lsrs	r3, r3, #4
 8009de6:	f003 0201 	and.w	r2, r3, #1
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	fa02 f303 	lsl.w	r3, r2, r3
 8009df0:	69ba      	ldr	r2, [r7, #24]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	69ba      	ldr	r2, [r7, #24]
 8009dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	f003 0303 	and.w	r3, r3, #3
 8009e04:	2b03      	cmp	r3, #3
 8009e06:	d017      	beq.n	8009e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	005b      	lsls	r3, r3, #1
 8009e12:	2203      	movs	r2, #3
 8009e14:	fa02 f303 	lsl.w	r3, r2, r3
 8009e18:	43db      	mvns	r3, r3
 8009e1a:	69ba      	ldr	r2, [r7, #24]
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	689a      	ldr	r2, [r3, #8]
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	005b      	lsls	r3, r3, #1
 8009e28:	fa02 f303 	lsl.w	r3, r2, r3
 8009e2c:	69ba      	ldr	r2, [r7, #24]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	69ba      	ldr	r2, [r7, #24]
 8009e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	f003 0303 	and.w	r3, r3, #3
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	d123      	bne.n	8009e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	08da      	lsrs	r2, r3, #3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3208      	adds	r2, #8
 8009e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	f003 0307 	and.w	r3, r3, #7
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	220f      	movs	r2, #15
 8009e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e60:	43db      	mvns	r3, r3
 8009e62:	69ba      	ldr	r2, [r7, #24]
 8009e64:	4013      	ands	r3, r2
 8009e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	691a      	ldr	r2, [r3, #16]
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	f003 0307 	and.w	r3, r3, #7
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	fa02 f303 	lsl.w	r3, r2, r3
 8009e78:	69ba      	ldr	r2, [r7, #24]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	08da      	lsrs	r2, r3, #3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	3208      	adds	r2, #8
 8009e86:	69b9      	ldr	r1, [r7, #24]
 8009e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	005b      	lsls	r3, r3, #1
 8009e96:	2203      	movs	r2, #3
 8009e98:	fa02 f303 	lsl.w	r3, r2, r3
 8009e9c:	43db      	mvns	r3, r3
 8009e9e:	69ba      	ldr	r2, [r7, #24]
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	f003 0203 	and.w	r2, r3, #3
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	005b      	lsls	r3, r3, #1
 8009eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb4:	69ba      	ldr	r2, [r7, #24]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	69ba      	ldr	r2, [r7, #24]
 8009ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 80ae 	beq.w	800a02a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ece:	2300      	movs	r3, #0
 8009ed0:	60fb      	str	r3, [r7, #12]
 8009ed2:	4b5d      	ldr	r3, [pc, #372]	@ (800a048 <HAL_GPIO_Init+0x300>)
 8009ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ed6:	4a5c      	ldr	r2, [pc, #368]	@ (800a048 <HAL_GPIO_Init+0x300>)
 8009ed8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8009ede:	4b5a      	ldr	r3, [pc, #360]	@ (800a048 <HAL_GPIO_Init+0x300>)
 8009ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ee6:	60fb      	str	r3, [r7, #12]
 8009ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009eea:	4a58      	ldr	r2, [pc, #352]	@ (800a04c <HAL_GPIO_Init+0x304>)
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	089b      	lsrs	r3, r3, #2
 8009ef0:	3302      	adds	r3, #2
 8009ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	f003 0303 	and.w	r3, r3, #3
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	220f      	movs	r2, #15
 8009f02:	fa02 f303 	lsl.w	r3, r2, r3
 8009f06:	43db      	mvns	r3, r3
 8009f08:	69ba      	ldr	r2, [r7, #24]
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a4f      	ldr	r2, [pc, #316]	@ (800a050 <HAL_GPIO_Init+0x308>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d025      	beq.n	8009f62 <HAL_GPIO_Init+0x21a>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a4e      	ldr	r2, [pc, #312]	@ (800a054 <HAL_GPIO_Init+0x30c>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d01f      	beq.n	8009f5e <HAL_GPIO_Init+0x216>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a4d      	ldr	r2, [pc, #308]	@ (800a058 <HAL_GPIO_Init+0x310>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d019      	beq.n	8009f5a <HAL_GPIO_Init+0x212>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a4c      	ldr	r2, [pc, #304]	@ (800a05c <HAL_GPIO_Init+0x314>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d013      	beq.n	8009f56 <HAL_GPIO_Init+0x20e>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a4b      	ldr	r2, [pc, #300]	@ (800a060 <HAL_GPIO_Init+0x318>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d00d      	beq.n	8009f52 <HAL_GPIO_Init+0x20a>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a4a      	ldr	r2, [pc, #296]	@ (800a064 <HAL_GPIO_Init+0x31c>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d007      	beq.n	8009f4e <HAL_GPIO_Init+0x206>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a49      	ldr	r2, [pc, #292]	@ (800a068 <HAL_GPIO_Init+0x320>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d101      	bne.n	8009f4a <HAL_GPIO_Init+0x202>
 8009f46:	2306      	movs	r3, #6
 8009f48:	e00c      	b.n	8009f64 <HAL_GPIO_Init+0x21c>
 8009f4a:	2307      	movs	r3, #7
 8009f4c:	e00a      	b.n	8009f64 <HAL_GPIO_Init+0x21c>
 8009f4e:	2305      	movs	r3, #5
 8009f50:	e008      	b.n	8009f64 <HAL_GPIO_Init+0x21c>
 8009f52:	2304      	movs	r3, #4
 8009f54:	e006      	b.n	8009f64 <HAL_GPIO_Init+0x21c>
 8009f56:	2303      	movs	r3, #3
 8009f58:	e004      	b.n	8009f64 <HAL_GPIO_Init+0x21c>
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	e002      	b.n	8009f64 <HAL_GPIO_Init+0x21c>
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e000      	b.n	8009f64 <HAL_GPIO_Init+0x21c>
 8009f62:	2300      	movs	r3, #0
 8009f64:	69fa      	ldr	r2, [r7, #28]
 8009f66:	f002 0203 	and.w	r2, r2, #3
 8009f6a:	0092      	lsls	r2, r2, #2
 8009f6c:	4093      	lsls	r3, r2
 8009f6e:	69ba      	ldr	r2, [r7, #24]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009f74:	4935      	ldr	r1, [pc, #212]	@ (800a04c <HAL_GPIO_Init+0x304>)
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	089b      	lsrs	r3, r3, #2
 8009f7a:	3302      	adds	r3, #2
 8009f7c:	69ba      	ldr	r2, [r7, #24]
 8009f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009f82:	4b3a      	ldr	r3, [pc, #232]	@ (800a06c <HAL_GPIO_Init+0x324>)
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	43db      	mvns	r3, r3
 8009f8c:	69ba      	ldr	r2, [r7, #24]
 8009f8e:	4013      	ands	r3, r2
 8009f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d003      	beq.n	8009fa6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8009f9e:	69ba      	ldr	r2, [r7, #24]
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009fa6:	4a31      	ldr	r2, [pc, #196]	@ (800a06c <HAL_GPIO_Init+0x324>)
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009fac:	4b2f      	ldr	r3, [pc, #188]	@ (800a06c <HAL_GPIO_Init+0x324>)
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	43db      	mvns	r3, r3
 8009fb6:	69ba      	ldr	r2, [r7, #24]
 8009fb8:	4013      	ands	r3, r2
 8009fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d003      	beq.n	8009fd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8009fc8:	69ba      	ldr	r2, [r7, #24]
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009fd0:	4a26      	ldr	r2, [pc, #152]	@ (800a06c <HAL_GPIO_Init+0x324>)
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009fd6:	4b25      	ldr	r3, [pc, #148]	@ (800a06c <HAL_GPIO_Init+0x324>)
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	43db      	mvns	r3, r3
 8009fe0:	69ba      	ldr	r2, [r7, #24]
 8009fe2:	4013      	ands	r3, r2
 8009fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d003      	beq.n	8009ffa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8009ff2:	69ba      	ldr	r2, [r7, #24]
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800a06c <HAL_GPIO_Init+0x324>)
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a000:	4b1a      	ldr	r3, [pc, #104]	@ (800a06c <HAL_GPIO_Init+0x324>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	43db      	mvns	r3, r3
 800a00a:	69ba      	ldr	r2, [r7, #24]
 800a00c:	4013      	ands	r3, r2
 800a00e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d003      	beq.n	800a024 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a01c:	69ba      	ldr	r2, [r7, #24]
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	4313      	orrs	r3, r2
 800a022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a024:	4a11      	ldr	r2, [pc, #68]	@ (800a06c <HAL_GPIO_Init+0x324>)
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	3301      	adds	r3, #1
 800a02e:	61fb      	str	r3, [r7, #28]
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	2b0f      	cmp	r3, #15
 800a034:	f67f ae96 	bls.w	8009d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a038:	bf00      	nop
 800a03a:	bf00      	nop
 800a03c:	3724      	adds	r7, #36	@ 0x24
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	40023800 	.word	0x40023800
 800a04c:	40013800 	.word	0x40013800
 800a050:	40020000 	.word	0x40020000
 800a054:	40020400 	.word	0x40020400
 800a058:	40020800 	.word	0x40020800
 800a05c:	40020c00 	.word	0x40020c00
 800a060:	40021000 	.word	0x40021000
 800a064:	40021400 	.word	0x40021400
 800a068:	40021800 	.word	0x40021800
 800a06c:	40013c00 	.word	0x40013c00

0800a070 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a070:	b480      	push	{r7}
 800a072:	b087      	sub	sp, #28
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a07a:	2300      	movs	r3, #0
 800a07c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800a07e:	2300      	movs	r3, #0
 800a080:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800a082:	2300      	movs	r3, #0
 800a084:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a086:	2300      	movs	r3, #0
 800a088:	617b      	str	r3, [r7, #20]
 800a08a:	e0c7      	b.n	800a21c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a08c:	2201      	movs	r2, #1
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	fa02 f303 	lsl.w	r3, r2, r3
 800a094:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800a096:	683a      	ldr	r2, [r7, #0]
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	4013      	ands	r3, r2
 800a09c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	f040 80b7 	bne.w	800a216 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800a0a8:	4a62      	ldr	r2, [pc, #392]	@ (800a234 <HAL_GPIO_DeInit+0x1c4>)
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	089b      	lsrs	r3, r3, #2
 800a0ae:	3302      	adds	r3, #2
 800a0b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0b4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	f003 0303 	and.w	r3, r3, #3
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	220f      	movs	r2, #15
 800a0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	4013      	ands	r3, r2
 800a0c8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a5a      	ldr	r2, [pc, #360]	@ (800a238 <HAL_GPIO_DeInit+0x1c8>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d025      	beq.n	800a11e <HAL_GPIO_DeInit+0xae>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4a59      	ldr	r2, [pc, #356]	@ (800a23c <HAL_GPIO_DeInit+0x1cc>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d01f      	beq.n	800a11a <HAL_GPIO_DeInit+0xaa>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4a58      	ldr	r2, [pc, #352]	@ (800a240 <HAL_GPIO_DeInit+0x1d0>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d019      	beq.n	800a116 <HAL_GPIO_DeInit+0xa6>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	4a57      	ldr	r2, [pc, #348]	@ (800a244 <HAL_GPIO_DeInit+0x1d4>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d013      	beq.n	800a112 <HAL_GPIO_DeInit+0xa2>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4a56      	ldr	r2, [pc, #344]	@ (800a248 <HAL_GPIO_DeInit+0x1d8>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d00d      	beq.n	800a10e <HAL_GPIO_DeInit+0x9e>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	4a55      	ldr	r2, [pc, #340]	@ (800a24c <HAL_GPIO_DeInit+0x1dc>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d007      	beq.n	800a10a <HAL_GPIO_DeInit+0x9a>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4a54      	ldr	r2, [pc, #336]	@ (800a250 <HAL_GPIO_DeInit+0x1e0>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d101      	bne.n	800a106 <HAL_GPIO_DeInit+0x96>
 800a102:	2306      	movs	r3, #6
 800a104:	e00c      	b.n	800a120 <HAL_GPIO_DeInit+0xb0>
 800a106:	2307      	movs	r3, #7
 800a108:	e00a      	b.n	800a120 <HAL_GPIO_DeInit+0xb0>
 800a10a:	2305      	movs	r3, #5
 800a10c:	e008      	b.n	800a120 <HAL_GPIO_DeInit+0xb0>
 800a10e:	2304      	movs	r3, #4
 800a110:	e006      	b.n	800a120 <HAL_GPIO_DeInit+0xb0>
 800a112:	2303      	movs	r3, #3
 800a114:	e004      	b.n	800a120 <HAL_GPIO_DeInit+0xb0>
 800a116:	2302      	movs	r3, #2
 800a118:	e002      	b.n	800a120 <HAL_GPIO_DeInit+0xb0>
 800a11a:	2301      	movs	r3, #1
 800a11c:	e000      	b.n	800a120 <HAL_GPIO_DeInit+0xb0>
 800a11e:	2300      	movs	r3, #0
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	f002 0203 	and.w	r2, r2, #3
 800a126:	0092      	lsls	r2, r2, #2
 800a128:	4093      	lsls	r3, r2
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d132      	bne.n	800a196 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a130:	4b48      	ldr	r3, [pc, #288]	@ (800a254 <HAL_GPIO_DeInit+0x1e4>)
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	43db      	mvns	r3, r3
 800a138:	4946      	ldr	r1, [pc, #280]	@ (800a254 <HAL_GPIO_DeInit+0x1e4>)
 800a13a:	4013      	ands	r3, r2
 800a13c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a13e:	4b45      	ldr	r3, [pc, #276]	@ (800a254 <HAL_GPIO_DeInit+0x1e4>)
 800a140:	685a      	ldr	r2, [r3, #4]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	43db      	mvns	r3, r3
 800a146:	4943      	ldr	r1, [pc, #268]	@ (800a254 <HAL_GPIO_DeInit+0x1e4>)
 800a148:	4013      	ands	r3, r2
 800a14a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a14c:	4b41      	ldr	r3, [pc, #260]	@ (800a254 <HAL_GPIO_DeInit+0x1e4>)
 800a14e:	68da      	ldr	r2, [r3, #12]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	43db      	mvns	r3, r3
 800a154:	493f      	ldr	r1, [pc, #252]	@ (800a254 <HAL_GPIO_DeInit+0x1e4>)
 800a156:	4013      	ands	r3, r2
 800a158:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a15a:	4b3e      	ldr	r3, [pc, #248]	@ (800a254 <HAL_GPIO_DeInit+0x1e4>)
 800a15c:	689a      	ldr	r2, [r3, #8]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	43db      	mvns	r3, r3
 800a162:	493c      	ldr	r1, [pc, #240]	@ (800a254 <HAL_GPIO_DeInit+0x1e4>)
 800a164:	4013      	ands	r3, r2
 800a166:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	f003 0303 	and.w	r3, r3, #3
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	220f      	movs	r2, #15
 800a172:	fa02 f303 	lsl.w	r3, r2, r3
 800a176:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a178:	4a2e      	ldr	r2, [pc, #184]	@ (800a234 <HAL_GPIO_DeInit+0x1c4>)
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	089b      	lsrs	r3, r3, #2
 800a17e:	3302      	adds	r3, #2
 800a180:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	43da      	mvns	r2, r3
 800a188:	482a      	ldr	r0, [pc, #168]	@ (800a234 <HAL_GPIO_DeInit+0x1c4>)
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	089b      	lsrs	r3, r3, #2
 800a18e:	400a      	ands	r2, r1
 800a190:	3302      	adds	r3, #2
 800a192:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	005b      	lsls	r3, r3, #1
 800a19e:	2103      	movs	r1, #3
 800a1a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a1a4:	43db      	mvns	r3, r3
 800a1a6:	401a      	ands	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	08da      	lsrs	r2, r3, #3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	3208      	adds	r2, #8
 800a1b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	f003 0307 	and.w	r3, r3, #7
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	220f      	movs	r2, #15
 800a1c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c6:	43db      	mvns	r3, r3
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	08d2      	lsrs	r2, r2, #3
 800a1cc:	4019      	ands	r1, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	3208      	adds	r2, #8
 800a1d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	68da      	ldr	r2, [r3, #12]
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	005b      	lsls	r3, r3, #1
 800a1de:	2103      	movs	r1, #3
 800a1e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a1e4:	43db      	mvns	r3, r3
 800a1e6:	401a      	ands	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	685a      	ldr	r2, [r3, #4]
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a1f8:	43db      	mvns	r3, r3
 800a1fa:	401a      	ands	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	689a      	ldr	r2, [r3, #8]
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	005b      	lsls	r3, r3, #1
 800a208:	2103      	movs	r1, #3
 800a20a:	fa01 f303 	lsl.w	r3, r1, r3
 800a20e:	43db      	mvns	r3, r3
 800a210:	401a      	ands	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	3301      	adds	r3, #1
 800a21a:	617b      	str	r3, [r7, #20]
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	2b0f      	cmp	r3, #15
 800a220:	f67f af34 	bls.w	800a08c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800a224:	bf00      	nop
 800a226:	bf00      	nop
 800a228:	371c      	adds	r7, #28
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	40013800 	.word	0x40013800
 800a238:	40020000 	.word	0x40020000
 800a23c:	40020400 	.word	0x40020400
 800a240:	40020800 	.word	0x40020800
 800a244:	40020c00 	.word	0x40020c00
 800a248:	40021000 	.word	0x40021000
 800a24c:	40021400 	.word	0x40021400
 800a250:	40021800 	.word	0x40021800
 800a254:	40013c00 	.word	0x40013c00

0800a258 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	460b      	mov	r3, r1
 800a262:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	691a      	ldr	r2, [r3, #16]
 800a268:	887b      	ldrh	r3, [r7, #2]
 800a26a:	4013      	ands	r3, r2
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d002      	beq.n	800a276 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a270:	2301      	movs	r3, #1
 800a272:	73fb      	strb	r3, [r7, #15]
 800a274:	e001      	b.n	800a27a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a276:	2300      	movs	r3, #0
 800a278:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a27a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3714      	adds	r7, #20
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	460b      	mov	r3, r1
 800a292:	807b      	strh	r3, [r7, #2]
 800a294:	4613      	mov	r3, r2
 800a296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a298:	787b      	ldrb	r3, [r7, #1]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d003      	beq.n	800a2a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a29e:	887a      	ldrh	r2, [r7, #2]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a2a4:	e003      	b.n	800a2ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a2a6:	887b      	ldrh	r3, [r7, #2]
 800a2a8:	041a      	lsls	r2, r3, #16
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	619a      	str	r2, [r3, #24]
}
 800a2ae:	bf00      	nop
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
	...

0800a2bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a2c6:	4b08      	ldr	r3, [pc, #32]	@ (800a2e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a2c8:	695a      	ldr	r2, [r3, #20]
 800a2ca:	88fb      	ldrh	r3, [r7, #6]
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d006      	beq.n	800a2e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a2d2:	4a05      	ldr	r2, [pc, #20]	@ (800a2e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a2d4:	88fb      	ldrh	r3, [r7, #6]
 800a2d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a2d8:	88fb      	ldrh	r3, [r7, #6]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fb fa98 	bl	8005810 <HAL_GPIO_EXTI_Callback>
  }
}
 800a2e0:	bf00      	nop
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	40013c00 	.word	0x40013c00

0800a2ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d101      	bne.n	800a2fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e12b      	b.n	800a556 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a304:	b2db      	uxtb	r3, r3
 800a306:	2b00      	cmp	r3, #0
 800a308:	d106      	bne.n	800a318 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f7fd fc92 	bl	8007c3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2224      	movs	r2, #36	@ 0x24
 800a31c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f022 0201 	bic.w	r2, r2, #1
 800a32e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a33e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a34e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a350:	f001 f912 	bl	800b578 <HAL_RCC_GetPCLK1Freq>
 800a354:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	4a81      	ldr	r2, [pc, #516]	@ (800a560 <HAL_I2C_Init+0x274>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d807      	bhi.n	800a370 <HAL_I2C_Init+0x84>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	4a80      	ldr	r2, [pc, #512]	@ (800a564 <HAL_I2C_Init+0x278>)
 800a364:	4293      	cmp	r3, r2
 800a366:	bf94      	ite	ls
 800a368:	2301      	movls	r3, #1
 800a36a:	2300      	movhi	r3, #0
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	e006      	b.n	800a37e <HAL_I2C_Init+0x92>
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	4a7d      	ldr	r2, [pc, #500]	@ (800a568 <HAL_I2C_Init+0x27c>)
 800a374:	4293      	cmp	r3, r2
 800a376:	bf94      	ite	ls
 800a378:	2301      	movls	r3, #1
 800a37a:	2300      	movhi	r3, #0
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	e0e7      	b.n	800a556 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	4a78      	ldr	r2, [pc, #480]	@ (800a56c <HAL_I2C_Init+0x280>)
 800a38a:	fba2 2303 	umull	r2, r3, r2, r3
 800a38e:	0c9b      	lsrs	r3, r3, #18
 800a390:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	430a      	orrs	r2, r1
 800a3a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	6a1b      	ldr	r3, [r3, #32]
 800a3ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	4a6a      	ldr	r2, [pc, #424]	@ (800a560 <HAL_I2C_Init+0x274>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d802      	bhi.n	800a3c0 <HAL_I2C_Init+0xd4>
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	e009      	b.n	800a3d4 <HAL_I2C_Init+0xe8>
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a3c6:	fb02 f303 	mul.w	r3, r2, r3
 800a3ca:	4a69      	ldr	r2, [pc, #420]	@ (800a570 <HAL_I2C_Init+0x284>)
 800a3cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a3d0:	099b      	lsrs	r3, r3, #6
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	6812      	ldr	r2, [r2, #0]
 800a3d8:	430b      	orrs	r3, r1
 800a3da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	69db      	ldr	r3, [r3, #28]
 800a3e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a3e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	495c      	ldr	r1, [pc, #368]	@ (800a560 <HAL_I2C_Init+0x274>)
 800a3f0:	428b      	cmp	r3, r1
 800a3f2:	d819      	bhi.n	800a428 <HAL_I2C_Init+0x13c>
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	1e59      	subs	r1, r3, #1
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	005b      	lsls	r3, r3, #1
 800a3fe:	fbb1 f3f3 	udiv	r3, r1, r3
 800a402:	1c59      	adds	r1, r3, #1
 800a404:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a408:	400b      	ands	r3, r1
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00a      	beq.n	800a424 <HAL_I2C_Init+0x138>
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	1e59      	subs	r1, r3, #1
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	005b      	lsls	r3, r3, #1
 800a418:	fbb1 f3f3 	udiv	r3, r1, r3
 800a41c:	3301      	adds	r3, #1
 800a41e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a422:	e051      	b.n	800a4c8 <HAL_I2C_Init+0x1dc>
 800a424:	2304      	movs	r3, #4
 800a426:	e04f      	b.n	800a4c8 <HAL_I2C_Init+0x1dc>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d111      	bne.n	800a454 <HAL_I2C_Init+0x168>
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	1e58      	subs	r0, r3, #1
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6859      	ldr	r1, [r3, #4]
 800a438:	460b      	mov	r3, r1
 800a43a:	005b      	lsls	r3, r3, #1
 800a43c:	440b      	add	r3, r1
 800a43e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a442:	3301      	adds	r3, #1
 800a444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a448:	2b00      	cmp	r3, #0
 800a44a:	bf0c      	ite	eq
 800a44c:	2301      	moveq	r3, #1
 800a44e:	2300      	movne	r3, #0
 800a450:	b2db      	uxtb	r3, r3
 800a452:	e012      	b.n	800a47a <HAL_I2C_Init+0x18e>
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	1e58      	subs	r0, r3, #1
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6859      	ldr	r1, [r3, #4]
 800a45c:	460b      	mov	r3, r1
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	440b      	add	r3, r1
 800a462:	0099      	lsls	r1, r3, #2
 800a464:	440b      	add	r3, r1
 800a466:	fbb0 f3f3 	udiv	r3, r0, r3
 800a46a:	3301      	adds	r3, #1
 800a46c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a470:	2b00      	cmp	r3, #0
 800a472:	bf0c      	ite	eq
 800a474:	2301      	moveq	r3, #1
 800a476:	2300      	movne	r3, #0
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d001      	beq.n	800a482 <HAL_I2C_Init+0x196>
 800a47e:	2301      	movs	r3, #1
 800a480:	e022      	b.n	800a4c8 <HAL_I2C_Init+0x1dc>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10e      	bne.n	800a4a8 <HAL_I2C_Init+0x1bc>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	1e58      	subs	r0, r3, #1
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6859      	ldr	r1, [r3, #4]
 800a492:	460b      	mov	r3, r1
 800a494:	005b      	lsls	r3, r3, #1
 800a496:	440b      	add	r3, r1
 800a498:	fbb0 f3f3 	udiv	r3, r0, r3
 800a49c:	3301      	adds	r3, #1
 800a49e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4a6:	e00f      	b.n	800a4c8 <HAL_I2C_Init+0x1dc>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	1e58      	subs	r0, r3, #1
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6859      	ldr	r1, [r3, #4]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	440b      	add	r3, r1
 800a4b6:	0099      	lsls	r1, r3, #2
 800a4b8:	440b      	add	r3, r1
 800a4ba:	fbb0 f3f3 	udiv	r3, r0, r3
 800a4be:	3301      	adds	r3, #1
 800a4c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a4c8:	6879      	ldr	r1, [r7, #4]
 800a4ca:	6809      	ldr	r1, [r1, #0]
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	69da      	ldr	r2, [r3, #28]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	430a      	orrs	r2, r1
 800a4ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a4f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	6911      	ldr	r1, [r2, #16]
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	68d2      	ldr	r2, [r2, #12]
 800a502:	4311      	orrs	r1, r2
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	6812      	ldr	r2, [r2, #0]
 800a508:	430b      	orrs	r3, r1
 800a50a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	695a      	ldr	r2, [r3, #20]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	699b      	ldr	r3, [r3, #24]
 800a51e:	431a      	orrs	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	430a      	orrs	r2, r1
 800a526:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f042 0201 	orr.w	r2, r2, #1
 800a536:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2220      	movs	r2, #32
 800a542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	000186a0 	.word	0x000186a0
 800a564:	001e847f 	.word	0x001e847f
 800a568:	003d08ff 	.word	0x003d08ff
 800a56c:	431bde83 	.word	0x431bde83
 800a570:	10624dd3 	.word	0x10624dd3

0800a574 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e021      	b.n	800a5ca <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2224      	movs	r2, #36	@ 0x24
 800a58a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f022 0201 	bic.w	r2, r2, #1
 800a59c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7fd fbec 	bl	8007d7c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
	...

0800a5d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b088      	sub	sp, #32
 800a5d8:	af02      	add	r7, sp, #8
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	4608      	mov	r0, r1
 800a5de:	4611      	mov	r1, r2
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	817b      	strh	r3, [r7, #10]
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	813b      	strh	r3, [r7, #8]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a5ee:	f7fe fa0f 	bl	8008a10 <HAL_GetTick>
 800a5f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	2b20      	cmp	r3, #32
 800a5fe:	f040 80d9 	bne.w	800a7b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	2319      	movs	r3, #25
 800a608:	2201      	movs	r2, #1
 800a60a:	496d      	ldr	r1, [pc, #436]	@ (800a7c0 <HAL_I2C_Mem_Write+0x1ec>)
 800a60c:	68f8      	ldr	r0, [r7, #12]
 800a60e:	f000 fc8b 	bl	800af28 <I2C_WaitOnFlagUntilTimeout>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a618:	2302      	movs	r3, #2
 800a61a:	e0cc      	b.n	800a7b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a622:	2b01      	cmp	r3, #1
 800a624:	d101      	bne.n	800a62a <HAL_I2C_Mem_Write+0x56>
 800a626:	2302      	movs	r3, #2
 800a628:	e0c5      	b.n	800a7b6 <HAL_I2C_Mem_Write+0x1e2>
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2201      	movs	r2, #1
 800a62e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f003 0301 	and.w	r3, r3, #1
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d007      	beq.n	800a650 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f042 0201 	orr.w	r2, r2, #1
 800a64e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a65e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2221      	movs	r2, #33	@ 0x21
 800a664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2240      	movs	r2, #64	@ 0x40
 800a66c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2200      	movs	r2, #0
 800a674:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6a3a      	ldr	r2, [r7, #32]
 800a67a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a680:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a686:	b29a      	uxth	r2, r3
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	4a4d      	ldr	r2, [pc, #308]	@ (800a7c4 <HAL_I2C_Mem_Write+0x1f0>)
 800a690:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a692:	88f8      	ldrh	r0, [r7, #6]
 800a694:	893a      	ldrh	r2, [r7, #8]
 800a696:	8979      	ldrh	r1, [r7, #10]
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	9301      	str	r3, [sp, #4]
 800a69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f000 fac2 	bl	800ac2c <I2C_RequestMemoryWrite>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d052      	beq.n	800a754 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e081      	b.n	800a7b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f000 fd50 	bl	800b15c <I2C_WaitOnTXEFlagUntilTimeout>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00d      	beq.n	800a6de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6c6:	2b04      	cmp	r3, #4
 800a6c8:	d107      	bne.n	800a6da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e06b      	b.n	800a7b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e2:	781a      	ldrb	r2, [r3, #0]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6ee:	1c5a      	adds	r2, r3, #1
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a704:	b29b      	uxth	r3, r3
 800a706:	3b01      	subs	r3, #1
 800a708:	b29a      	uxth	r2, r3
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	695b      	ldr	r3, [r3, #20]
 800a714:	f003 0304 	and.w	r3, r3, #4
 800a718:	2b04      	cmp	r3, #4
 800a71a:	d11b      	bne.n	800a754 <HAL_I2C_Mem_Write+0x180>
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a720:	2b00      	cmp	r3, #0
 800a722:	d017      	beq.n	800a754 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a728:	781a      	ldrb	r2, [r3, #0]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a734:	1c5a      	adds	r2, r3, #1
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a73e:	3b01      	subs	r3, #1
 800a740:	b29a      	uxth	r2, r3
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	3b01      	subs	r3, #1
 800a74e:	b29a      	uxth	r2, r3
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1aa      	bne.n	800a6b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a75c:	697a      	ldr	r2, [r7, #20]
 800a75e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f000 fd43 	bl	800b1ec <I2C_WaitOnBTFFlagUntilTimeout>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d00d      	beq.n	800a788 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a770:	2b04      	cmp	r3, #4
 800a772:	d107      	bne.n	800a784 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a782:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	e016      	b.n	800a7b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2220      	movs	r2, #32
 800a79c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	e000      	b.n	800a7b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a7b4:	2302      	movs	r3, #2
  }
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	00100002 	.word	0x00100002
 800a7c4:	ffff0000 	.word	0xffff0000

0800a7c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b08c      	sub	sp, #48	@ 0x30
 800a7cc:	af02      	add	r7, sp, #8
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	4608      	mov	r0, r1
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	817b      	strh	r3, [r7, #10]
 800a7da:	460b      	mov	r3, r1
 800a7dc:	813b      	strh	r3, [r7, #8]
 800a7de:	4613      	mov	r3, r2
 800a7e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a7e2:	f7fe f915 	bl	8008a10 <HAL_GetTick>
 800a7e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	2b20      	cmp	r3, #32
 800a7f2:	f040 8214 	bne.w	800ac1e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	2319      	movs	r3, #25
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	497b      	ldr	r1, [pc, #492]	@ (800a9ec <HAL_I2C_Mem_Read+0x224>)
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f000 fb91 	bl	800af28 <I2C_WaitOnFlagUntilTimeout>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d001      	beq.n	800a810 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a80c:	2302      	movs	r3, #2
 800a80e:	e207      	b.n	800ac20 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a816:	2b01      	cmp	r3, #1
 800a818:	d101      	bne.n	800a81e <HAL_I2C_Mem_Read+0x56>
 800a81a:	2302      	movs	r3, #2
 800a81c:	e200      	b.n	800ac20 <HAL_I2C_Mem_Read+0x458>
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2201      	movs	r2, #1
 800a822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f003 0301 	and.w	r3, r3, #1
 800a830:	2b01      	cmp	r3, #1
 800a832:	d007      	beq.n	800a844 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f042 0201 	orr.w	r2, r2, #1
 800a842:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a852:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2222      	movs	r2, #34	@ 0x22
 800a858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2240      	movs	r2, #64	@ 0x40
 800a860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a86e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a874:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a87a:	b29a      	uxth	r2, r3
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	4a5b      	ldr	r2, [pc, #364]	@ (800a9f0 <HAL_I2C_Mem_Read+0x228>)
 800a884:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a886:	88f8      	ldrh	r0, [r7, #6]
 800a888:	893a      	ldrh	r2, [r7, #8]
 800a88a:	8979      	ldrh	r1, [r7, #10]
 800a88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88e:	9301      	str	r3, [sp, #4]
 800a890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	4603      	mov	r3, r0
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f000 fa5e 	bl	800ad58 <I2C_RequestMemoryRead>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d001      	beq.n	800a8a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e1bc      	b.n	800ac20 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d113      	bne.n	800a8d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	623b      	str	r3, [r7, #32]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	695b      	ldr	r3, [r3, #20]
 800a8b8:	623b      	str	r3, [r7, #32]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	699b      	ldr	r3, [r3, #24]
 800a8c0:	623b      	str	r3, [r7, #32]
 800a8c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a8d2:	601a      	str	r2, [r3, #0]
 800a8d4:	e190      	b.n	800abf8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d11b      	bne.n	800a916 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	61fb      	str	r3, [r7, #28]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	695b      	ldr	r3, [r3, #20]
 800a8f8:	61fb      	str	r3, [r7, #28]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	699b      	ldr	r3, [r3, #24]
 800a900:	61fb      	str	r3, [r7, #28]
 800a902:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	e170      	b.n	800abf8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d11b      	bne.n	800a956 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a92c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a93c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a93e:	2300      	movs	r3, #0
 800a940:	61bb      	str	r3, [r7, #24]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	695b      	ldr	r3, [r3, #20]
 800a948:	61bb      	str	r3, [r7, #24]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	699b      	ldr	r3, [r3, #24]
 800a950:	61bb      	str	r3, [r7, #24]
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	e150      	b.n	800abf8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a956:	2300      	movs	r3, #0
 800a958:	617b      	str	r3, [r7, #20]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	695b      	ldr	r3, [r3, #20]
 800a960:	617b      	str	r3, [r7, #20]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	617b      	str	r3, [r7, #20]
 800a96a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a96c:	e144      	b.n	800abf8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a972:	2b03      	cmp	r3, #3
 800a974:	f200 80f1 	bhi.w	800ab5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d123      	bne.n	800a9c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a982:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	f000 fc79 	bl	800b27c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d001      	beq.n	800a994 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	e145      	b.n	800ac20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	691a      	ldr	r2, [r3, #16]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a99e:	b2d2      	uxtb	r2, r2
 800a9a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9a6:	1c5a      	adds	r2, r3, #1
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a9c6:	e117      	b.n	800abf8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d14e      	bne.n	800aa6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d2:	9300      	str	r3, [sp, #0]
 800a9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	4906      	ldr	r1, [pc, #24]	@ (800a9f4 <HAL_I2C_Mem_Read+0x22c>)
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f000 faa4 	bl	800af28 <I2C_WaitOnFlagUntilTimeout>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d008      	beq.n	800a9f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e11a      	b.n	800ac20 <HAL_I2C_Mem_Read+0x458>
 800a9ea:	bf00      	nop
 800a9ec:	00100002 	.word	0x00100002
 800a9f0:	ffff0000 	.word	0xffff0000
 800a9f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	691a      	ldr	r2, [r3, #16]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa12:	b2d2      	uxtb	r2, r2
 800aa14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa1a:	1c5a      	adds	r2, r3, #1
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa24:	3b01      	subs	r3, #1
 800aa26:	b29a      	uxth	r2, r3
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	3b01      	subs	r3, #1
 800aa34:	b29a      	uxth	r2, r3
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	691a      	ldr	r2, [r3, #16]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa44:	b2d2      	uxtb	r2, r2
 800aa46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa4c:	1c5a      	adds	r2, r3, #1
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa56:	3b01      	subs	r3, #1
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	3b01      	subs	r3, #1
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aa6c:	e0c4      	b.n	800abf8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa70:	9300      	str	r3, [sp, #0]
 800aa72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa74:	2200      	movs	r2, #0
 800aa76:	496c      	ldr	r1, [pc, #432]	@ (800ac28 <HAL_I2C_Mem_Read+0x460>)
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f000 fa55 	bl	800af28 <I2C_WaitOnFlagUntilTimeout>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d001      	beq.n	800aa88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e0cb      	b.n	800ac20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	691a      	ldr	r2, [r3, #16]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa2:	b2d2      	uxtb	r2, r2
 800aaa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaaa:	1c5a      	adds	r2, r3, #1
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aab4:	3b01      	subs	r3, #1
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	3b01      	subs	r3, #1
 800aac4:	b29a      	uxth	r2, r3
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aaca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aad0:	2200      	movs	r2, #0
 800aad2:	4955      	ldr	r1, [pc, #340]	@ (800ac28 <HAL_I2C_Mem_Read+0x460>)
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f000 fa27 	bl	800af28 <I2C_WaitOnFlagUntilTimeout>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d001      	beq.n	800aae4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	e09d      	b.n	800ac20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aaf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	691a      	ldr	r2, [r3, #16]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aafe:	b2d2      	uxtb	r2, r2
 800ab00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab06:	1c5a      	adds	r2, r3, #1
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab10:	3b01      	subs	r3, #1
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	3b01      	subs	r3, #1
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	691a      	ldr	r2, [r3, #16]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab30:	b2d2      	uxtb	r2, r2
 800ab32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab38:	1c5a      	adds	r2, r3, #1
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab42:	3b01      	subs	r3, #1
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	3b01      	subs	r3, #1
 800ab52:	b29a      	uxth	r2, r3
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ab58:	e04e      	b.n	800abf8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab5c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f000 fb8c 	bl	800b27c <I2C_WaitOnRXNEFlagUntilTimeout>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d001      	beq.n	800ab6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e058      	b.n	800ac20 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	691a      	ldr	r2, [r3, #16]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab78:	b2d2      	uxtb	r2, r2
 800ab7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab80:	1c5a      	adds	r2, r3, #1
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	695b      	ldr	r3, [r3, #20]
 800aba6:	f003 0304 	and.w	r3, r3, #4
 800abaa:	2b04      	cmp	r3, #4
 800abac:	d124      	bne.n	800abf8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abb2:	2b03      	cmp	r3, #3
 800abb4:	d107      	bne.n	800abc6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800abc4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	691a      	ldr	r2, [r3, #16]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abd0:	b2d2      	uxtb	r2, r2
 800abd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abd8:	1c5a      	adds	r2, r3, #1
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abe2:	3b01      	subs	r3, #1
 800abe4:	b29a      	uxth	r2, r3
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abee:	b29b      	uxth	r3, r3
 800abf0:	3b01      	subs	r3, #1
 800abf2:	b29a      	uxth	r2, r3
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f47f aeb6 	bne.w	800a96e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2220      	movs	r2, #32
 800ac06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	e000      	b.n	800ac20 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800ac1e:	2302      	movs	r3, #2
  }
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3728      	adds	r7, #40	@ 0x28
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	00010004 	.word	0x00010004

0800ac2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b088      	sub	sp, #32
 800ac30:	af02      	add	r7, sp, #8
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	4608      	mov	r0, r1
 800ac36:	4611      	mov	r1, r2
 800ac38:	461a      	mov	r2, r3
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	817b      	strh	r3, [r7, #10]
 800ac3e:	460b      	mov	r3, r1
 800ac40:	813b      	strh	r3, [r7, #8]
 800ac42:	4613      	mov	r3, r2
 800ac44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ac54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	6a3b      	ldr	r3, [r7, #32]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	f000 f960 	bl	800af28 <I2C_WaitOnFlagUntilTimeout>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00d      	beq.n	800ac8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac7c:	d103      	bne.n	800ac86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ac84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ac86:	2303      	movs	r3, #3
 800ac88:	e05f      	b.n	800ad4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ac8a:	897b      	ldrh	r3, [r7, #10]
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	461a      	mov	r2, r3
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ac98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9c:	6a3a      	ldr	r2, [r7, #32]
 800ac9e:	492d      	ldr	r1, [pc, #180]	@ (800ad54 <I2C_RequestMemoryWrite+0x128>)
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f000 f9bb 	bl	800b01c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d001      	beq.n	800acb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800acac:	2301      	movs	r3, #1
 800acae:	e04c      	b.n	800ad4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800acb0:	2300      	movs	r3, #0
 800acb2:	617b      	str	r3, [r7, #20]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	695b      	ldr	r3, [r3, #20]
 800acba:	617b      	str	r3, [r7, #20]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	699b      	ldr	r3, [r3, #24]
 800acc2:	617b      	str	r3, [r7, #20]
 800acc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800acc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acc8:	6a39      	ldr	r1, [r7, #32]
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f000 fa46 	bl	800b15c <I2C_WaitOnTXEFlagUntilTimeout>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00d      	beq.n	800acf2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acda:	2b04      	cmp	r3, #4
 800acdc:	d107      	bne.n	800acee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800acec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800acee:	2301      	movs	r3, #1
 800acf0:	e02b      	b.n	800ad4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800acf2:	88fb      	ldrh	r3, [r7, #6]
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d105      	bne.n	800ad04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800acf8:	893b      	ldrh	r3, [r7, #8]
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	611a      	str	r2, [r3, #16]
 800ad02:	e021      	b.n	800ad48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ad04:	893b      	ldrh	r3, [r7, #8]
 800ad06:	0a1b      	lsrs	r3, r3, #8
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	b2da      	uxtb	r2, r3
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad14:	6a39      	ldr	r1, [r7, #32]
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f000 fa20 	bl	800b15c <I2C_WaitOnTXEFlagUntilTimeout>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00d      	beq.n	800ad3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad26:	2b04      	cmp	r3, #4
 800ad28:	d107      	bne.n	800ad3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e005      	b.n	800ad4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ad3e:	893b      	ldrh	r3, [r7, #8]
 800ad40:	b2da      	uxtb	r2, r3
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ad48:	2300      	movs	r3, #0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3718      	adds	r7, #24
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	00010002 	.word	0x00010002

0800ad58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b088      	sub	sp, #32
 800ad5c:	af02      	add	r7, sp, #8
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	4608      	mov	r0, r1
 800ad62:	4611      	mov	r1, r2
 800ad64:	461a      	mov	r2, r3
 800ad66:	4603      	mov	r3, r0
 800ad68:	817b      	strh	r3, [r7, #10]
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	813b      	strh	r3, [r7, #8]
 800ad6e:	4613      	mov	r3, r2
 800ad70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ad80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ad92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	6a3b      	ldr	r3, [r7, #32]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f000 f8c2 	bl	800af28 <I2C_WaitOnFlagUntilTimeout>
 800ada4:	4603      	mov	r3, r0
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00d      	beq.n	800adc6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adb8:	d103      	bne.n	800adc2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800adc0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800adc2:	2303      	movs	r3, #3
 800adc4:	e0aa      	b.n	800af1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800adc6:	897b      	ldrh	r3, [r7, #10]
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	461a      	mov	r2, r3
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800add4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800add6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add8:	6a3a      	ldr	r2, [r7, #32]
 800adda:	4952      	ldr	r1, [pc, #328]	@ (800af24 <I2C_RequestMemoryRead+0x1cc>)
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f000 f91d 	bl	800b01c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d001      	beq.n	800adec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	e097      	b.n	800af1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800adec:	2300      	movs	r3, #0
 800adee:	617b      	str	r3, [r7, #20]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	695b      	ldr	r3, [r3, #20]
 800adf6:	617b      	str	r3, [r7, #20]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	699b      	ldr	r3, [r3, #24]
 800adfe:	617b      	str	r3, [r7, #20]
 800ae00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae04:	6a39      	ldr	r1, [r7, #32]
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f000 f9a8 	bl	800b15c <I2C_WaitOnTXEFlagUntilTimeout>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d00d      	beq.n	800ae2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae16:	2b04      	cmp	r3, #4
 800ae18:	d107      	bne.n	800ae2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e076      	b.n	800af1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae2e:	88fb      	ldrh	r3, [r7, #6]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d105      	bne.n	800ae40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ae34:	893b      	ldrh	r3, [r7, #8]
 800ae36:	b2da      	uxtb	r2, r3
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	611a      	str	r2, [r3, #16]
 800ae3e:	e021      	b.n	800ae84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ae40:	893b      	ldrh	r3, [r7, #8]
 800ae42:	0a1b      	lsrs	r3, r3, #8
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	b2da      	uxtb	r2, r3
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae50:	6a39      	ldr	r1, [r7, #32]
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	f000 f982 	bl	800b15c <I2C_WaitOnTXEFlagUntilTimeout>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00d      	beq.n	800ae7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae62:	2b04      	cmp	r3, #4
 800ae64:	d107      	bne.n	800ae76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	e050      	b.n	800af1c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ae7a:	893b      	ldrh	r3, [r7, #8]
 800ae7c:	b2da      	uxtb	r2, r3
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae86:	6a39      	ldr	r1, [r7, #32]
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f000 f967 	bl	800b15c <I2C_WaitOnTXEFlagUntilTimeout>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00d      	beq.n	800aeb0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae98:	2b04      	cmp	r3, #4
 800ae9a:	d107      	bne.n	800aeac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aeaa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	e035      	b.n	800af1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aebe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	6a3b      	ldr	r3, [r7, #32]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f000 f82b 	bl	800af28 <I2C_WaitOnFlagUntilTimeout>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d00d      	beq.n	800aef4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aee2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aee6:	d103      	bne.n	800aef0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aeee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800aef0:	2303      	movs	r3, #3
 800aef2:	e013      	b.n	800af1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800aef4:	897b      	ldrh	r3, [r7, #10]
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	f043 0301 	orr.w	r3, r3, #1
 800aefc:	b2da      	uxtb	r2, r3
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800af04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af06:	6a3a      	ldr	r2, [r7, #32]
 800af08:	4906      	ldr	r1, [pc, #24]	@ (800af24 <I2C_RequestMemoryRead+0x1cc>)
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f000 f886 	bl	800b01c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800af10:	4603      	mov	r3, r0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d001      	beq.n	800af1a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800af16:	2301      	movs	r3, #1
 800af18:	e000      	b.n	800af1c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800af1a:	2300      	movs	r3, #0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3718      	adds	r7, #24
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	00010002 	.word	0x00010002

0800af28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	603b      	str	r3, [r7, #0]
 800af34:	4613      	mov	r3, r2
 800af36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af38:	e048      	b.n	800afcc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af40:	d044      	beq.n	800afcc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af42:	f7fd fd65 	bl	8008a10 <HAL_GetTick>
 800af46:	4602      	mov	r2, r0
 800af48:	69bb      	ldr	r3, [r7, #24]
 800af4a:	1ad3      	subs	r3, r2, r3
 800af4c:	683a      	ldr	r2, [r7, #0]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d302      	bcc.n	800af58 <I2C_WaitOnFlagUntilTimeout+0x30>
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d139      	bne.n	800afcc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	0c1b      	lsrs	r3, r3, #16
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d10d      	bne.n	800af7e <I2C_WaitOnFlagUntilTimeout+0x56>
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	695b      	ldr	r3, [r3, #20]
 800af68:	43da      	mvns	r2, r3
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	4013      	ands	r3, r2
 800af6e:	b29b      	uxth	r3, r3
 800af70:	2b00      	cmp	r3, #0
 800af72:	bf0c      	ite	eq
 800af74:	2301      	moveq	r3, #1
 800af76:	2300      	movne	r3, #0
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	461a      	mov	r2, r3
 800af7c:	e00c      	b.n	800af98 <I2C_WaitOnFlagUntilTimeout+0x70>
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	699b      	ldr	r3, [r3, #24]
 800af84:	43da      	mvns	r2, r3
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	4013      	ands	r3, r2
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	bf0c      	ite	eq
 800af90:	2301      	moveq	r3, #1
 800af92:	2300      	movne	r3, #0
 800af94:	b2db      	uxtb	r3, r3
 800af96:	461a      	mov	r2, r3
 800af98:	79fb      	ldrb	r3, [r7, #7]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d116      	bne.n	800afcc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2200      	movs	r2, #0
 800afa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2220      	movs	r2, #32
 800afa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afb8:	f043 0220 	orr.w	r2, r3, #32
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800afc8:	2301      	movs	r3, #1
 800afca:	e023      	b.n	800b014 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	0c1b      	lsrs	r3, r3, #16
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d10d      	bne.n	800aff2 <I2C_WaitOnFlagUntilTimeout+0xca>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	695b      	ldr	r3, [r3, #20]
 800afdc:	43da      	mvns	r2, r3
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	4013      	ands	r3, r2
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	bf0c      	ite	eq
 800afe8:	2301      	moveq	r3, #1
 800afea:	2300      	movne	r3, #0
 800afec:	b2db      	uxtb	r3, r3
 800afee:	461a      	mov	r2, r3
 800aff0:	e00c      	b.n	800b00c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	699b      	ldr	r3, [r3, #24]
 800aff8:	43da      	mvns	r2, r3
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	4013      	ands	r3, r2
 800affe:	b29b      	uxth	r3, r3
 800b000:	2b00      	cmp	r3, #0
 800b002:	bf0c      	ite	eq
 800b004:	2301      	moveq	r3, #1
 800b006:	2300      	movne	r3, #0
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	461a      	mov	r2, r3
 800b00c:	79fb      	ldrb	r3, [r7, #7]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d093      	beq.n	800af3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	3710      	adds	r7, #16
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
 800b028:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b02a:	e071      	b.n	800b110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	695b      	ldr	r3, [r3, #20]
 800b032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b03a:	d123      	bne.n	800b084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b04a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b054:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2200      	movs	r2, #0
 800b05a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2220      	movs	r2, #32
 800b060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2200      	movs	r2, #0
 800b068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b070:	f043 0204 	orr.w	r2, r3, #4
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	e067      	b.n	800b154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b08a:	d041      	beq.n	800b110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b08c:	f7fd fcc0 	bl	8008a10 <HAL_GetTick>
 800b090:	4602      	mov	r2, r0
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d302      	bcc.n	800b0a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d136      	bne.n	800b110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	0c1b      	lsrs	r3, r3, #16
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d10c      	bne.n	800b0c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	695b      	ldr	r3, [r3, #20]
 800b0b2:	43da      	mvns	r2, r3
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	4013      	ands	r3, r2
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	bf14      	ite	ne
 800b0be:	2301      	movne	r3, #1
 800b0c0:	2300      	moveq	r3, #0
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	e00b      	b.n	800b0de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	699b      	ldr	r3, [r3, #24]
 800b0cc:	43da      	mvns	r2, r3
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	4013      	ands	r3, r2
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	bf14      	ite	ne
 800b0d8:	2301      	movne	r3, #1
 800b0da:	2300      	moveq	r3, #0
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d016      	beq.n	800b110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2220      	movs	r2, #32
 800b0ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0fc:	f043 0220 	orr.w	r2, r3, #32
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2200      	movs	r2, #0
 800b108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e021      	b.n	800b154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	0c1b      	lsrs	r3, r3, #16
 800b114:	b2db      	uxtb	r3, r3
 800b116:	2b01      	cmp	r3, #1
 800b118:	d10c      	bne.n	800b134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	695b      	ldr	r3, [r3, #20]
 800b120:	43da      	mvns	r2, r3
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	4013      	ands	r3, r2
 800b126:	b29b      	uxth	r3, r3
 800b128:	2b00      	cmp	r3, #0
 800b12a:	bf14      	ite	ne
 800b12c:	2301      	movne	r3, #1
 800b12e:	2300      	moveq	r3, #0
 800b130:	b2db      	uxtb	r3, r3
 800b132:	e00b      	b.n	800b14c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	699b      	ldr	r3, [r3, #24]
 800b13a:	43da      	mvns	r2, r3
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	4013      	ands	r3, r2
 800b140:	b29b      	uxth	r3, r3
 800b142:	2b00      	cmp	r3, #0
 800b144:	bf14      	ite	ne
 800b146:	2301      	movne	r3, #1
 800b148:	2300      	moveq	r3, #0
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f47f af6d 	bne.w	800b02c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	3710      	adds	r7, #16
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b168:	e034      	b.n	800b1d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b16a:	68f8      	ldr	r0, [r7, #12]
 800b16c:	f000 f8e3 	bl	800b336 <I2C_IsAcknowledgeFailed>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d001      	beq.n	800b17a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	e034      	b.n	800b1e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b180:	d028      	beq.n	800b1d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b182:	f7fd fc45 	bl	8008a10 <HAL_GetTick>
 800b186:	4602      	mov	r2, r0
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	1ad3      	subs	r3, r2, r3
 800b18c:	68ba      	ldr	r2, [r7, #8]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d302      	bcc.n	800b198 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d11d      	bne.n	800b1d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	695b      	ldr	r3, [r3, #20]
 800b19e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1a2:	2b80      	cmp	r3, #128	@ 0x80
 800b1a4:	d016      	beq.n	800b1d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2220      	movs	r2, #32
 800b1b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1c0:	f043 0220 	orr.w	r2, r3, #32
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e007      	b.n	800b1e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	695b      	ldr	r3, [r3, #20]
 800b1da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1de:	2b80      	cmp	r3, #128	@ 0x80
 800b1e0:	d1c3      	bne.n	800b16a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b1f8:	e034      	b.n	800b264 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f000 f89b 	bl	800b336 <I2C_IsAcknowledgeFailed>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d001      	beq.n	800b20a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b206:	2301      	movs	r3, #1
 800b208:	e034      	b.n	800b274 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b210:	d028      	beq.n	800b264 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b212:	f7fd fbfd 	bl	8008a10 <HAL_GetTick>
 800b216:	4602      	mov	r2, r0
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	1ad3      	subs	r3, r2, r3
 800b21c:	68ba      	ldr	r2, [r7, #8]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d302      	bcc.n	800b228 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d11d      	bne.n	800b264 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	695b      	ldr	r3, [r3, #20]
 800b22e:	f003 0304 	and.w	r3, r3, #4
 800b232:	2b04      	cmp	r3, #4
 800b234:	d016      	beq.n	800b264 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2200      	movs	r2, #0
 800b23a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2220      	movs	r2, #32
 800b240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2200      	movs	r2, #0
 800b248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b250:	f043 0220 	orr.w	r2, r3, #32
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b260:	2301      	movs	r3, #1
 800b262:	e007      	b.n	800b274 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	695b      	ldr	r3, [r3, #20]
 800b26a:	f003 0304 	and.w	r3, r3, #4
 800b26e:	2b04      	cmp	r3, #4
 800b270:	d1c3      	bne.n	800b1fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b288:	e049      	b.n	800b31e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	695b      	ldr	r3, [r3, #20]
 800b290:	f003 0310 	and.w	r3, r3, #16
 800b294:	2b10      	cmp	r3, #16
 800b296:	d119      	bne.n	800b2cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f06f 0210 	mvn.w	r2, #16
 800b2a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2220      	movs	r2, #32
 800b2ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e030      	b.n	800b32e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2cc:	f7fd fba0 	bl	8008a10 <HAL_GetTick>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	1ad3      	subs	r3, r2, r3
 800b2d6:	68ba      	ldr	r2, [r7, #8]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d302      	bcc.n	800b2e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d11d      	bne.n	800b31e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	695b      	ldr	r3, [r3, #20]
 800b2e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2ec:	2b40      	cmp	r3, #64	@ 0x40
 800b2ee:	d016      	beq.n	800b31e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2220      	movs	r2, #32
 800b2fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2200      	movs	r2, #0
 800b302:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b30a:	f043 0220 	orr.w	r2, r3, #32
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2200      	movs	r2, #0
 800b316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b31a:	2301      	movs	r3, #1
 800b31c:	e007      	b.n	800b32e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	695b      	ldr	r3, [r3, #20]
 800b324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b328:	2b40      	cmp	r3, #64	@ 0x40
 800b32a:	d1ae      	bne.n	800b28a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b336:	b480      	push	{r7}
 800b338:	b083      	sub	sp, #12
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	695b      	ldr	r3, [r3, #20]
 800b344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b34c:	d11b      	bne.n	800b386 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b356:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2220      	movs	r2, #32
 800b362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b372:	f043 0204 	orr.w	r2, r3, #4
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	e000      	b.n	800b388 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d101      	bne.n	800b3a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	e0cc      	b.n	800b542 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b3a8:	4b68      	ldr	r3, [pc, #416]	@ (800b54c <HAL_RCC_ClockConfig+0x1b8>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f003 030f 	and.w	r3, r3, #15
 800b3b0:	683a      	ldr	r2, [r7, #0]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d90c      	bls.n	800b3d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3b6:	4b65      	ldr	r3, [pc, #404]	@ (800b54c <HAL_RCC_ClockConfig+0x1b8>)
 800b3b8:	683a      	ldr	r2, [r7, #0]
 800b3ba:	b2d2      	uxtb	r2, r2
 800b3bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3be:	4b63      	ldr	r3, [pc, #396]	@ (800b54c <HAL_RCC_ClockConfig+0x1b8>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f003 030f 	and.w	r3, r3, #15
 800b3c6:	683a      	ldr	r2, [r7, #0]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d001      	beq.n	800b3d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e0b8      	b.n	800b542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f003 0302 	and.w	r3, r3, #2
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d020      	beq.n	800b41e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f003 0304 	and.w	r3, r3, #4
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d005      	beq.n	800b3f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b3e8:	4b59      	ldr	r3, [pc, #356]	@ (800b550 <HAL_RCC_ClockConfig+0x1bc>)
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	4a58      	ldr	r2, [pc, #352]	@ (800b550 <HAL_RCC_ClockConfig+0x1bc>)
 800b3ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b3f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f003 0308 	and.w	r3, r3, #8
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d005      	beq.n	800b40c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b400:	4b53      	ldr	r3, [pc, #332]	@ (800b550 <HAL_RCC_ClockConfig+0x1bc>)
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	4a52      	ldr	r2, [pc, #328]	@ (800b550 <HAL_RCC_ClockConfig+0x1bc>)
 800b406:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b40a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b40c:	4b50      	ldr	r3, [pc, #320]	@ (800b550 <HAL_RCC_ClockConfig+0x1bc>)
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	494d      	ldr	r1, [pc, #308]	@ (800b550 <HAL_RCC_ClockConfig+0x1bc>)
 800b41a:	4313      	orrs	r3, r2
 800b41c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f003 0301 	and.w	r3, r3, #1
 800b426:	2b00      	cmp	r3, #0
 800b428:	d044      	beq.n	800b4b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d107      	bne.n	800b442 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b432:	4b47      	ldr	r3, [pc, #284]	@ (800b550 <HAL_RCC_ClockConfig+0x1bc>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d119      	bne.n	800b472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b43e:	2301      	movs	r3, #1
 800b440:	e07f      	b.n	800b542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	2b02      	cmp	r3, #2
 800b448:	d003      	beq.n	800b452 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b44e:	2b03      	cmp	r3, #3
 800b450:	d107      	bne.n	800b462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b452:	4b3f      	ldr	r3, [pc, #252]	@ (800b550 <HAL_RCC_ClockConfig+0x1bc>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d109      	bne.n	800b472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	e06f      	b.n	800b542 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b462:	4b3b      	ldr	r3, [pc, #236]	@ (800b550 <HAL_RCC_ClockConfig+0x1bc>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f003 0302 	and.w	r3, r3, #2
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d101      	bne.n	800b472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	e067      	b.n	800b542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b472:	4b37      	ldr	r3, [pc, #220]	@ (800b550 <HAL_RCC_ClockConfig+0x1bc>)
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	f023 0203 	bic.w	r2, r3, #3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	4934      	ldr	r1, [pc, #208]	@ (800b550 <HAL_RCC_ClockConfig+0x1bc>)
 800b480:	4313      	orrs	r3, r2
 800b482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b484:	f7fd fac4 	bl	8008a10 <HAL_GetTick>
 800b488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b48a:	e00a      	b.n	800b4a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b48c:	f7fd fac0 	bl	8008a10 <HAL_GetTick>
 800b490:	4602      	mov	r2, r0
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	1ad3      	subs	r3, r2, r3
 800b496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d901      	bls.n	800b4a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b49e:	2303      	movs	r3, #3
 800b4a0:	e04f      	b.n	800b542 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4a2:	4b2b      	ldr	r3, [pc, #172]	@ (800b550 <HAL_RCC_ClockConfig+0x1bc>)
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	f003 020c 	and.w	r2, r3, #12
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d1eb      	bne.n	800b48c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b4b4:	4b25      	ldr	r3, [pc, #148]	@ (800b54c <HAL_RCC_ClockConfig+0x1b8>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f003 030f 	and.w	r3, r3, #15
 800b4bc:	683a      	ldr	r2, [r7, #0]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d20c      	bcs.n	800b4dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4c2:	4b22      	ldr	r3, [pc, #136]	@ (800b54c <HAL_RCC_ClockConfig+0x1b8>)
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	b2d2      	uxtb	r2, r2
 800b4c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4ca:	4b20      	ldr	r3, [pc, #128]	@ (800b54c <HAL_RCC_ClockConfig+0x1b8>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f003 030f 	and.w	r3, r3, #15
 800b4d2:	683a      	ldr	r2, [r7, #0]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d001      	beq.n	800b4dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	e032      	b.n	800b542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f003 0304 	and.w	r3, r3, #4
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d008      	beq.n	800b4fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b4e8:	4b19      	ldr	r3, [pc, #100]	@ (800b550 <HAL_RCC_ClockConfig+0x1bc>)
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	4916      	ldr	r1, [pc, #88]	@ (800b550 <HAL_RCC_ClockConfig+0x1bc>)
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f003 0308 	and.w	r3, r3, #8
 800b502:	2b00      	cmp	r3, #0
 800b504:	d009      	beq.n	800b51a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b506:	4b12      	ldr	r3, [pc, #72]	@ (800b550 <HAL_RCC_ClockConfig+0x1bc>)
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	00db      	lsls	r3, r3, #3
 800b514:	490e      	ldr	r1, [pc, #56]	@ (800b550 <HAL_RCC_ClockConfig+0x1bc>)
 800b516:	4313      	orrs	r3, r2
 800b518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b51a:	f000 f855 	bl	800b5c8 <HAL_RCC_GetSysClockFreq>
 800b51e:	4602      	mov	r2, r0
 800b520:	4b0b      	ldr	r3, [pc, #44]	@ (800b550 <HAL_RCC_ClockConfig+0x1bc>)
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	091b      	lsrs	r3, r3, #4
 800b526:	f003 030f 	and.w	r3, r3, #15
 800b52a:	490a      	ldr	r1, [pc, #40]	@ (800b554 <HAL_RCC_ClockConfig+0x1c0>)
 800b52c:	5ccb      	ldrb	r3, [r1, r3]
 800b52e:	fa22 f303 	lsr.w	r3, r2, r3
 800b532:	4a09      	ldr	r2, [pc, #36]	@ (800b558 <HAL_RCC_ClockConfig+0x1c4>)
 800b534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800b536:	4b09      	ldr	r3, [pc, #36]	@ (800b55c <HAL_RCC_ClockConfig+0x1c8>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fd fa24 	bl	8008988 <HAL_InitTick>

  return HAL_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	40023c00 	.word	0x40023c00
 800b550:	40023800 	.word	0x40023800
 800b554:	080156ac 	.word	0x080156ac
 800b558:	20000040 	.word	0x20000040
 800b55c:	20000044 	.word	0x20000044

0800b560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b560:	b480      	push	{r7}
 800b562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b564:	4b03      	ldr	r3, [pc, #12]	@ (800b574 <HAL_RCC_GetHCLKFreq+0x14>)
 800b566:	681b      	ldr	r3, [r3, #0]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	20000040 	.word	0x20000040

0800b578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b57c:	f7ff fff0 	bl	800b560 <HAL_RCC_GetHCLKFreq>
 800b580:	4602      	mov	r2, r0
 800b582:	4b05      	ldr	r3, [pc, #20]	@ (800b598 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	0a9b      	lsrs	r3, r3, #10
 800b588:	f003 0307 	and.w	r3, r3, #7
 800b58c:	4903      	ldr	r1, [pc, #12]	@ (800b59c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b58e:	5ccb      	ldrb	r3, [r1, r3]
 800b590:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b594:	4618      	mov	r0, r3
 800b596:	bd80      	pop	{r7, pc}
 800b598:	40023800 	.word	0x40023800
 800b59c:	080156bc 	.word	0x080156bc

0800b5a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b5a4:	f7ff ffdc 	bl	800b560 <HAL_RCC_GetHCLKFreq>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	4b05      	ldr	r3, [pc, #20]	@ (800b5c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	0b5b      	lsrs	r3, r3, #13
 800b5b0:	f003 0307 	and.w	r3, r3, #7
 800b5b4:	4903      	ldr	r1, [pc, #12]	@ (800b5c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b5b6:	5ccb      	ldrb	r3, [r1, r3]
 800b5b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	40023800 	.word	0x40023800
 800b5c4:	080156bc 	.word	0x080156bc

0800b5c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b5c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5cc:	b0ae      	sub	sp, #184	@ 0xb8
 800b5ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b5ee:	4bcb      	ldr	r3, [pc, #812]	@ (800b91c <HAL_RCC_GetSysClockFreq+0x354>)
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	f003 030c 	and.w	r3, r3, #12
 800b5f6:	2b0c      	cmp	r3, #12
 800b5f8:	f200 8206 	bhi.w	800ba08 <HAL_RCC_GetSysClockFreq+0x440>
 800b5fc:	a201      	add	r2, pc, #4	@ (adr r2, 800b604 <HAL_RCC_GetSysClockFreq+0x3c>)
 800b5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b602:	bf00      	nop
 800b604:	0800b639 	.word	0x0800b639
 800b608:	0800ba09 	.word	0x0800ba09
 800b60c:	0800ba09 	.word	0x0800ba09
 800b610:	0800ba09 	.word	0x0800ba09
 800b614:	0800b641 	.word	0x0800b641
 800b618:	0800ba09 	.word	0x0800ba09
 800b61c:	0800ba09 	.word	0x0800ba09
 800b620:	0800ba09 	.word	0x0800ba09
 800b624:	0800b649 	.word	0x0800b649
 800b628:	0800ba09 	.word	0x0800ba09
 800b62c:	0800ba09 	.word	0x0800ba09
 800b630:	0800ba09 	.word	0x0800ba09
 800b634:	0800b839 	.word	0x0800b839
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b638:	4bb9      	ldr	r3, [pc, #740]	@ (800b920 <HAL_RCC_GetSysClockFreq+0x358>)
 800b63a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800b63e:	e1e7      	b.n	800ba10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b640:	4bb8      	ldr	r3, [pc, #736]	@ (800b924 <HAL_RCC_GetSysClockFreq+0x35c>)
 800b642:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800b646:	e1e3      	b.n	800ba10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b648:	4bb4      	ldr	r3, [pc, #720]	@ (800b91c <HAL_RCC_GetSysClockFreq+0x354>)
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b650:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b654:	4bb1      	ldr	r3, [pc, #708]	@ (800b91c <HAL_RCC_GetSysClockFreq+0x354>)
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d071      	beq.n	800b744 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b660:	4bae      	ldr	r3, [pc, #696]	@ (800b91c <HAL_RCC_GetSysClockFreq+0x354>)
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	099b      	lsrs	r3, r3, #6
 800b666:	2200      	movs	r2, #0
 800b668:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b66c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800b670:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b678:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b67c:	2300      	movs	r3, #0
 800b67e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b682:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b686:	4622      	mov	r2, r4
 800b688:	462b      	mov	r3, r5
 800b68a:	f04f 0000 	mov.w	r0, #0
 800b68e:	f04f 0100 	mov.w	r1, #0
 800b692:	0159      	lsls	r1, r3, #5
 800b694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b698:	0150      	lsls	r0, r2, #5
 800b69a:	4602      	mov	r2, r0
 800b69c:	460b      	mov	r3, r1
 800b69e:	4621      	mov	r1, r4
 800b6a0:	1a51      	subs	r1, r2, r1
 800b6a2:	6439      	str	r1, [r7, #64]	@ 0x40
 800b6a4:	4629      	mov	r1, r5
 800b6a6:	eb63 0301 	sbc.w	r3, r3, r1
 800b6aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6ac:	f04f 0200 	mov.w	r2, #0
 800b6b0:	f04f 0300 	mov.w	r3, #0
 800b6b4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800b6b8:	4649      	mov	r1, r9
 800b6ba:	018b      	lsls	r3, r1, #6
 800b6bc:	4641      	mov	r1, r8
 800b6be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b6c2:	4641      	mov	r1, r8
 800b6c4:	018a      	lsls	r2, r1, #6
 800b6c6:	4641      	mov	r1, r8
 800b6c8:	1a51      	subs	r1, r2, r1
 800b6ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b6cc:	4649      	mov	r1, r9
 800b6ce:	eb63 0301 	sbc.w	r3, r3, r1
 800b6d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6d4:	f04f 0200 	mov.w	r2, #0
 800b6d8:	f04f 0300 	mov.w	r3, #0
 800b6dc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800b6e0:	4649      	mov	r1, r9
 800b6e2:	00cb      	lsls	r3, r1, #3
 800b6e4:	4641      	mov	r1, r8
 800b6e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b6ea:	4641      	mov	r1, r8
 800b6ec:	00ca      	lsls	r2, r1, #3
 800b6ee:	4610      	mov	r0, r2
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	4622      	mov	r2, r4
 800b6f6:	189b      	adds	r3, r3, r2
 800b6f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6fa:	462b      	mov	r3, r5
 800b6fc:	460a      	mov	r2, r1
 800b6fe:	eb42 0303 	adc.w	r3, r2, r3
 800b702:	637b      	str	r3, [r7, #52]	@ 0x34
 800b704:	f04f 0200 	mov.w	r2, #0
 800b708:	f04f 0300 	mov.w	r3, #0
 800b70c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b710:	4629      	mov	r1, r5
 800b712:	024b      	lsls	r3, r1, #9
 800b714:	4621      	mov	r1, r4
 800b716:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b71a:	4621      	mov	r1, r4
 800b71c:	024a      	lsls	r2, r1, #9
 800b71e:	4610      	mov	r0, r2
 800b720:	4619      	mov	r1, r3
 800b722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b726:	2200      	movs	r2, #0
 800b728:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b72c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b730:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800b734:	f7f5 fc26 	bl	8000f84 <__aeabi_uldivmod>
 800b738:	4602      	mov	r2, r0
 800b73a:	460b      	mov	r3, r1
 800b73c:	4613      	mov	r3, r2
 800b73e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b742:	e067      	b.n	800b814 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b744:	4b75      	ldr	r3, [pc, #468]	@ (800b91c <HAL_RCC_GetSysClockFreq+0x354>)
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	099b      	lsrs	r3, r3, #6
 800b74a:	2200      	movs	r2, #0
 800b74c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b750:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800b754:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b75c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b75e:	2300      	movs	r3, #0
 800b760:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b762:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800b766:	4622      	mov	r2, r4
 800b768:	462b      	mov	r3, r5
 800b76a:	f04f 0000 	mov.w	r0, #0
 800b76e:	f04f 0100 	mov.w	r1, #0
 800b772:	0159      	lsls	r1, r3, #5
 800b774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b778:	0150      	lsls	r0, r2, #5
 800b77a:	4602      	mov	r2, r0
 800b77c:	460b      	mov	r3, r1
 800b77e:	4621      	mov	r1, r4
 800b780:	1a51      	subs	r1, r2, r1
 800b782:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b784:	4629      	mov	r1, r5
 800b786:	eb63 0301 	sbc.w	r3, r3, r1
 800b78a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b78c:	f04f 0200 	mov.w	r2, #0
 800b790:	f04f 0300 	mov.w	r3, #0
 800b794:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800b798:	4649      	mov	r1, r9
 800b79a:	018b      	lsls	r3, r1, #6
 800b79c:	4641      	mov	r1, r8
 800b79e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b7a2:	4641      	mov	r1, r8
 800b7a4:	018a      	lsls	r2, r1, #6
 800b7a6:	4641      	mov	r1, r8
 800b7a8:	ebb2 0a01 	subs.w	sl, r2, r1
 800b7ac:	4649      	mov	r1, r9
 800b7ae:	eb63 0b01 	sbc.w	fp, r3, r1
 800b7b2:	f04f 0200 	mov.w	r2, #0
 800b7b6:	f04f 0300 	mov.w	r3, #0
 800b7ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b7be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b7c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b7c6:	4692      	mov	sl, r2
 800b7c8:	469b      	mov	fp, r3
 800b7ca:	4623      	mov	r3, r4
 800b7cc:	eb1a 0303 	adds.w	r3, sl, r3
 800b7d0:	623b      	str	r3, [r7, #32]
 800b7d2:	462b      	mov	r3, r5
 800b7d4:	eb4b 0303 	adc.w	r3, fp, r3
 800b7d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7da:	f04f 0200 	mov.w	r2, #0
 800b7de:	f04f 0300 	mov.w	r3, #0
 800b7e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	028b      	lsls	r3, r1, #10
 800b7ea:	4621      	mov	r1, r4
 800b7ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b7f0:	4621      	mov	r1, r4
 800b7f2:	028a      	lsls	r2, r1, #10
 800b7f4:	4610      	mov	r0, r2
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	673b      	str	r3, [r7, #112]	@ 0x70
 800b800:	677a      	str	r2, [r7, #116]	@ 0x74
 800b802:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800b806:	f7f5 fbbd 	bl	8000f84 <__aeabi_uldivmod>
 800b80a:	4602      	mov	r2, r0
 800b80c:	460b      	mov	r3, r1
 800b80e:	4613      	mov	r3, r2
 800b810:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800b814:	4b41      	ldr	r3, [pc, #260]	@ (800b91c <HAL_RCC_GetSysClockFreq+0x354>)
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	0c1b      	lsrs	r3, r3, #16
 800b81a:	f003 0303 	and.w	r3, r3, #3
 800b81e:	3301      	adds	r3, #1
 800b820:	005b      	lsls	r3, r3, #1
 800b822:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800b826:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b82a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b82e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b832:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800b836:	e0eb      	b.n	800ba10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b838:	4b38      	ldr	r3, [pc, #224]	@ (800b91c <HAL_RCC_GetSysClockFreq+0x354>)
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b840:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b844:	4b35      	ldr	r3, [pc, #212]	@ (800b91c <HAL_RCC_GetSysClockFreq+0x354>)
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d06b      	beq.n	800b928 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b850:	4b32      	ldr	r3, [pc, #200]	@ (800b91c <HAL_RCC_GetSysClockFreq+0x354>)
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	099b      	lsrs	r3, r3, #6
 800b856:	2200      	movs	r2, #0
 800b858:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b85a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b85c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b85e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b862:	663b      	str	r3, [r7, #96]	@ 0x60
 800b864:	2300      	movs	r3, #0
 800b866:	667b      	str	r3, [r7, #100]	@ 0x64
 800b868:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800b86c:	4622      	mov	r2, r4
 800b86e:	462b      	mov	r3, r5
 800b870:	f04f 0000 	mov.w	r0, #0
 800b874:	f04f 0100 	mov.w	r1, #0
 800b878:	0159      	lsls	r1, r3, #5
 800b87a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b87e:	0150      	lsls	r0, r2, #5
 800b880:	4602      	mov	r2, r0
 800b882:	460b      	mov	r3, r1
 800b884:	4621      	mov	r1, r4
 800b886:	1a51      	subs	r1, r2, r1
 800b888:	61b9      	str	r1, [r7, #24]
 800b88a:	4629      	mov	r1, r5
 800b88c:	eb63 0301 	sbc.w	r3, r3, r1
 800b890:	61fb      	str	r3, [r7, #28]
 800b892:	f04f 0200 	mov.w	r2, #0
 800b896:	f04f 0300 	mov.w	r3, #0
 800b89a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800b89e:	4659      	mov	r1, fp
 800b8a0:	018b      	lsls	r3, r1, #6
 800b8a2:	4651      	mov	r1, sl
 800b8a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b8a8:	4651      	mov	r1, sl
 800b8aa:	018a      	lsls	r2, r1, #6
 800b8ac:	4651      	mov	r1, sl
 800b8ae:	ebb2 0801 	subs.w	r8, r2, r1
 800b8b2:	4659      	mov	r1, fp
 800b8b4:	eb63 0901 	sbc.w	r9, r3, r1
 800b8b8:	f04f 0200 	mov.w	r2, #0
 800b8bc:	f04f 0300 	mov.w	r3, #0
 800b8c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b8c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b8c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b8cc:	4690      	mov	r8, r2
 800b8ce:	4699      	mov	r9, r3
 800b8d0:	4623      	mov	r3, r4
 800b8d2:	eb18 0303 	adds.w	r3, r8, r3
 800b8d6:	613b      	str	r3, [r7, #16]
 800b8d8:	462b      	mov	r3, r5
 800b8da:	eb49 0303 	adc.w	r3, r9, r3
 800b8de:	617b      	str	r3, [r7, #20]
 800b8e0:	f04f 0200 	mov.w	r2, #0
 800b8e4:	f04f 0300 	mov.w	r3, #0
 800b8e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800b8ec:	4629      	mov	r1, r5
 800b8ee:	024b      	lsls	r3, r1, #9
 800b8f0:	4621      	mov	r1, r4
 800b8f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b8f6:	4621      	mov	r1, r4
 800b8f8:	024a      	lsls	r2, r1, #9
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b902:	2200      	movs	r2, #0
 800b904:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b906:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800b908:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b90c:	f7f5 fb3a 	bl	8000f84 <__aeabi_uldivmod>
 800b910:	4602      	mov	r2, r0
 800b912:	460b      	mov	r3, r1
 800b914:	4613      	mov	r3, r2
 800b916:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b91a:	e065      	b.n	800b9e8 <HAL_RCC_GetSysClockFreq+0x420>
 800b91c:	40023800 	.word	0x40023800
 800b920:	00f42400 	.word	0x00f42400
 800b924:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b928:	4b3d      	ldr	r3, [pc, #244]	@ (800ba20 <HAL_RCC_GetSysClockFreq+0x458>)
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	099b      	lsrs	r3, r3, #6
 800b92e:	2200      	movs	r2, #0
 800b930:	4618      	mov	r0, r3
 800b932:	4611      	mov	r1, r2
 800b934:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b938:	653b      	str	r3, [r7, #80]	@ 0x50
 800b93a:	2300      	movs	r3, #0
 800b93c:	657b      	str	r3, [r7, #84]	@ 0x54
 800b93e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800b942:	4642      	mov	r2, r8
 800b944:	464b      	mov	r3, r9
 800b946:	f04f 0000 	mov.w	r0, #0
 800b94a:	f04f 0100 	mov.w	r1, #0
 800b94e:	0159      	lsls	r1, r3, #5
 800b950:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b954:	0150      	lsls	r0, r2, #5
 800b956:	4602      	mov	r2, r0
 800b958:	460b      	mov	r3, r1
 800b95a:	4641      	mov	r1, r8
 800b95c:	1a51      	subs	r1, r2, r1
 800b95e:	60b9      	str	r1, [r7, #8]
 800b960:	4649      	mov	r1, r9
 800b962:	eb63 0301 	sbc.w	r3, r3, r1
 800b966:	60fb      	str	r3, [r7, #12]
 800b968:	f04f 0200 	mov.w	r2, #0
 800b96c:	f04f 0300 	mov.w	r3, #0
 800b970:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800b974:	4659      	mov	r1, fp
 800b976:	018b      	lsls	r3, r1, #6
 800b978:	4651      	mov	r1, sl
 800b97a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b97e:	4651      	mov	r1, sl
 800b980:	018a      	lsls	r2, r1, #6
 800b982:	4651      	mov	r1, sl
 800b984:	1a54      	subs	r4, r2, r1
 800b986:	4659      	mov	r1, fp
 800b988:	eb63 0501 	sbc.w	r5, r3, r1
 800b98c:	f04f 0200 	mov.w	r2, #0
 800b990:	f04f 0300 	mov.w	r3, #0
 800b994:	00eb      	lsls	r3, r5, #3
 800b996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b99a:	00e2      	lsls	r2, r4, #3
 800b99c:	4614      	mov	r4, r2
 800b99e:	461d      	mov	r5, r3
 800b9a0:	4643      	mov	r3, r8
 800b9a2:	18e3      	adds	r3, r4, r3
 800b9a4:	603b      	str	r3, [r7, #0]
 800b9a6:	464b      	mov	r3, r9
 800b9a8:	eb45 0303 	adc.w	r3, r5, r3
 800b9ac:	607b      	str	r3, [r7, #4]
 800b9ae:	f04f 0200 	mov.w	r2, #0
 800b9b2:	f04f 0300 	mov.w	r3, #0
 800b9b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b9ba:	4629      	mov	r1, r5
 800b9bc:	028b      	lsls	r3, r1, #10
 800b9be:	4621      	mov	r1, r4
 800b9c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b9c4:	4621      	mov	r1, r4
 800b9c6:	028a      	lsls	r2, r1, #10
 800b9c8:	4610      	mov	r0, r2
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b9d4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b9d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b9da:	f7f5 fad3 	bl	8000f84 <__aeabi_uldivmod>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b9e8:	4b0d      	ldr	r3, [pc, #52]	@ (800ba20 <HAL_RCC_GetSysClockFreq+0x458>)
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	0f1b      	lsrs	r3, r3, #28
 800b9ee:	f003 0307 	and.w	r3, r3, #7
 800b9f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800b9f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b9fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b9fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800ba06:	e003      	b.n	800ba10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ba08:	4b06      	ldr	r3, [pc, #24]	@ (800ba24 <HAL_RCC_GetSysClockFreq+0x45c>)
 800ba0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800ba0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ba10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	37b8      	adds	r7, #184	@ 0xb8
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba1e:	bf00      	nop
 800ba20:	40023800 	.word	0x40023800
 800ba24:	00f42400 	.word	0x00f42400

0800ba28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b086      	sub	sp, #24
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d101      	bne.n	800ba3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ba36:	2301      	movs	r3, #1
 800ba38:	e28d      	b.n	800bf56 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f003 0301 	and.w	r3, r3, #1
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f000 8083 	beq.w	800bb4e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ba48:	4b94      	ldr	r3, [pc, #592]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	f003 030c 	and.w	r3, r3, #12
 800ba50:	2b04      	cmp	r3, #4
 800ba52:	d019      	beq.n	800ba88 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800ba54:	4b91      	ldr	r3, [pc, #580]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	f003 030c 	and.w	r3, r3, #12
        || \
 800ba5c:	2b08      	cmp	r3, #8
 800ba5e:	d106      	bne.n	800ba6e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800ba60:	4b8e      	ldr	r3, [pc, #568]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ba68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba6c:	d00c      	beq.n	800ba88 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ba6e:	4b8b      	ldr	r3, [pc, #556]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800ba76:	2b0c      	cmp	r3, #12
 800ba78:	d112      	bne.n	800baa0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ba7a:	4b88      	ldr	r3, [pc, #544]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ba82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba86:	d10b      	bne.n	800baa0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba88:	4b84      	ldr	r3, [pc, #528]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d05b      	beq.n	800bb4c <HAL_RCC_OscConfig+0x124>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d157      	bne.n	800bb4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e25a      	b.n	800bf56 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800baa8:	d106      	bne.n	800bab8 <HAL_RCC_OscConfig+0x90>
 800baaa:	4b7c      	ldr	r3, [pc, #496]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4a7b      	ldr	r2, [pc, #492]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bab4:	6013      	str	r3, [r2, #0]
 800bab6:	e01d      	b.n	800baf4 <HAL_RCC_OscConfig+0xcc>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bac0:	d10c      	bne.n	800badc <HAL_RCC_OscConfig+0xb4>
 800bac2:	4b76      	ldr	r3, [pc, #472]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a75      	ldr	r2, [pc, #468]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bacc:	6013      	str	r3, [r2, #0]
 800bace:	4b73      	ldr	r3, [pc, #460]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a72      	ldr	r2, [pc, #456]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bad8:	6013      	str	r3, [r2, #0]
 800bada:	e00b      	b.n	800baf4 <HAL_RCC_OscConfig+0xcc>
 800badc:	4b6f      	ldr	r3, [pc, #444]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a6e      	ldr	r2, [pc, #440]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bae6:	6013      	str	r3, [r2, #0]
 800bae8:	4b6c      	ldr	r3, [pc, #432]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a6b      	ldr	r2, [pc, #428]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800baee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800baf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d013      	beq.n	800bb24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bafc:	f7fc ff88 	bl	8008a10 <HAL_GetTick>
 800bb00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb02:	e008      	b.n	800bb16 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bb04:	f7fc ff84 	bl	8008a10 <HAL_GetTick>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	1ad3      	subs	r3, r2, r3
 800bb0e:	2b64      	cmp	r3, #100	@ 0x64
 800bb10:	d901      	bls.n	800bb16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800bb12:	2303      	movs	r3, #3
 800bb14:	e21f      	b.n	800bf56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb16:	4b61      	ldr	r3, [pc, #388]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d0f0      	beq.n	800bb04 <HAL_RCC_OscConfig+0xdc>
 800bb22:	e014      	b.n	800bb4e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb24:	f7fc ff74 	bl	8008a10 <HAL_GetTick>
 800bb28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bb2a:	e008      	b.n	800bb3e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bb2c:	f7fc ff70 	bl	8008a10 <HAL_GetTick>
 800bb30:	4602      	mov	r2, r0
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	1ad3      	subs	r3, r2, r3
 800bb36:	2b64      	cmp	r3, #100	@ 0x64
 800bb38:	d901      	bls.n	800bb3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800bb3a:	2303      	movs	r3, #3
 800bb3c:	e20b      	b.n	800bf56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bb3e:	4b57      	ldr	r3, [pc, #348]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1f0      	bne.n	800bb2c <HAL_RCC_OscConfig+0x104>
 800bb4a:	e000      	b.n	800bb4e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f003 0302 	and.w	r3, r3, #2
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d06f      	beq.n	800bc3a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800bb5a:	4b50      	ldr	r3, [pc, #320]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bb5c:	689b      	ldr	r3, [r3, #8]
 800bb5e:	f003 030c 	and.w	r3, r3, #12
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d017      	beq.n	800bb96 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800bb66:	4b4d      	ldr	r3, [pc, #308]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	f003 030c 	and.w	r3, r3, #12
        || \
 800bb6e:	2b08      	cmp	r3, #8
 800bb70:	d105      	bne.n	800bb7e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800bb72:	4b4a      	ldr	r3, [pc, #296]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00b      	beq.n	800bb96 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bb7e:	4b47      	ldr	r3, [pc, #284]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800bb86:	2b0c      	cmp	r3, #12
 800bb88:	d11c      	bne.n	800bbc4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bb8a:	4b44      	ldr	r3, [pc, #272]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d116      	bne.n	800bbc4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bb96:	4b41      	ldr	r3, [pc, #260]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f003 0302 	and.w	r3, r3, #2
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d005      	beq.n	800bbae <HAL_RCC_OscConfig+0x186>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	68db      	ldr	r3, [r3, #12]
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d001      	beq.n	800bbae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e1d3      	b.n	800bf56 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bbae:	4b3b      	ldr	r3, [pc, #236]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	691b      	ldr	r3, [r3, #16]
 800bbba:	00db      	lsls	r3, r3, #3
 800bbbc:	4937      	ldr	r1, [pc, #220]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bbc2:	e03a      	b.n	800bc3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d020      	beq.n	800bc0e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bbcc:	4b34      	ldr	r3, [pc, #208]	@ (800bca0 <HAL_RCC_OscConfig+0x278>)
 800bbce:	2201      	movs	r2, #1
 800bbd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbd2:	f7fc ff1d 	bl	8008a10 <HAL_GetTick>
 800bbd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bbd8:	e008      	b.n	800bbec <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bbda:	f7fc ff19 	bl	8008a10 <HAL_GetTick>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d901      	bls.n	800bbec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800bbe8:	2303      	movs	r3, #3
 800bbea:	e1b4      	b.n	800bf56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bbec:	4b2b      	ldr	r3, [pc, #172]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f003 0302 	and.w	r3, r3, #2
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d0f0      	beq.n	800bbda <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bbf8:	4b28      	ldr	r3, [pc, #160]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	691b      	ldr	r3, [r3, #16]
 800bc04:	00db      	lsls	r3, r3, #3
 800bc06:	4925      	ldr	r1, [pc, #148]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	600b      	str	r3, [r1, #0]
 800bc0c:	e015      	b.n	800bc3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bc0e:	4b24      	ldr	r3, [pc, #144]	@ (800bca0 <HAL_RCC_OscConfig+0x278>)
 800bc10:	2200      	movs	r2, #0
 800bc12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc14:	f7fc fefc 	bl	8008a10 <HAL_GetTick>
 800bc18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bc1a:	e008      	b.n	800bc2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc1c:	f7fc fef8 	bl	8008a10 <HAL_GetTick>
 800bc20:	4602      	mov	r2, r0
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	1ad3      	subs	r3, r2, r3
 800bc26:	2b02      	cmp	r3, #2
 800bc28:	d901      	bls.n	800bc2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800bc2a:	2303      	movs	r3, #3
 800bc2c:	e193      	b.n	800bf56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bc2e:	4b1b      	ldr	r3, [pc, #108]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f003 0302 	and.w	r3, r3, #2
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d1f0      	bne.n	800bc1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f003 0308 	and.w	r3, r3, #8
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d036      	beq.n	800bcb4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	695b      	ldr	r3, [r3, #20]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d016      	beq.n	800bc7c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bc4e:	4b15      	ldr	r3, [pc, #84]	@ (800bca4 <HAL_RCC_OscConfig+0x27c>)
 800bc50:	2201      	movs	r2, #1
 800bc52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc54:	f7fc fedc 	bl	8008a10 <HAL_GetTick>
 800bc58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bc5a:	e008      	b.n	800bc6e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bc5c:	f7fc fed8 	bl	8008a10 <HAL_GetTick>
 800bc60:	4602      	mov	r2, r0
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	1ad3      	subs	r3, r2, r3
 800bc66:	2b02      	cmp	r3, #2
 800bc68:	d901      	bls.n	800bc6e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800bc6a:	2303      	movs	r3, #3
 800bc6c:	e173      	b.n	800bf56 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bc6e:	4b0b      	ldr	r3, [pc, #44]	@ (800bc9c <HAL_RCC_OscConfig+0x274>)
 800bc70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc72:	f003 0302 	and.w	r3, r3, #2
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d0f0      	beq.n	800bc5c <HAL_RCC_OscConfig+0x234>
 800bc7a:	e01b      	b.n	800bcb4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bc7c:	4b09      	ldr	r3, [pc, #36]	@ (800bca4 <HAL_RCC_OscConfig+0x27c>)
 800bc7e:	2200      	movs	r2, #0
 800bc80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc82:	f7fc fec5 	bl	8008a10 <HAL_GetTick>
 800bc86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bc88:	e00e      	b.n	800bca8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bc8a:	f7fc fec1 	bl	8008a10 <HAL_GetTick>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	1ad3      	subs	r3, r2, r3
 800bc94:	2b02      	cmp	r3, #2
 800bc96:	d907      	bls.n	800bca8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800bc98:	2303      	movs	r3, #3
 800bc9a:	e15c      	b.n	800bf56 <HAL_RCC_OscConfig+0x52e>
 800bc9c:	40023800 	.word	0x40023800
 800bca0:	42470000 	.word	0x42470000
 800bca4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bca8:	4b8a      	ldr	r3, [pc, #552]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bcaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bcac:	f003 0302 	and.w	r3, r3, #2
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d1ea      	bne.n	800bc8a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f003 0304 	and.w	r3, r3, #4
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f000 8097 	beq.w	800bdf0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bcc6:	4b83      	ldr	r3, [pc, #524]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bcc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d10f      	bne.n	800bcf2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	60bb      	str	r3, [r7, #8]
 800bcd6:	4b7f      	ldr	r3, [pc, #508]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bcd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcda:	4a7e      	ldr	r2, [pc, #504]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bcdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bce0:	6413      	str	r3, [r2, #64]	@ 0x40
 800bce2:	4b7c      	ldr	r3, [pc, #496]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bcea:	60bb      	str	r3, [r7, #8]
 800bcec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bcf2:	4b79      	ldr	r3, [pc, #484]	@ (800bed8 <HAL_RCC_OscConfig+0x4b0>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d118      	bne.n	800bd30 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bcfe:	4b76      	ldr	r3, [pc, #472]	@ (800bed8 <HAL_RCC_OscConfig+0x4b0>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a75      	ldr	r2, [pc, #468]	@ (800bed8 <HAL_RCC_OscConfig+0x4b0>)
 800bd04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bd0a:	f7fc fe81 	bl	8008a10 <HAL_GetTick>
 800bd0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd10:	e008      	b.n	800bd24 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd12:	f7fc fe7d 	bl	8008a10 <HAL_GetTick>
 800bd16:	4602      	mov	r2, r0
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	1ad3      	subs	r3, r2, r3
 800bd1c:	2b02      	cmp	r3, #2
 800bd1e:	d901      	bls.n	800bd24 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800bd20:	2303      	movs	r3, #3
 800bd22:	e118      	b.n	800bf56 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd24:	4b6c      	ldr	r3, [pc, #432]	@ (800bed8 <HAL_RCC_OscConfig+0x4b0>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d0f0      	beq.n	800bd12 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d106      	bne.n	800bd46 <HAL_RCC_OscConfig+0x31e>
 800bd38:	4b66      	ldr	r3, [pc, #408]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bd3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd3c:	4a65      	ldr	r2, [pc, #404]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bd3e:	f043 0301 	orr.w	r3, r3, #1
 800bd42:	6713      	str	r3, [r2, #112]	@ 0x70
 800bd44:	e01c      	b.n	800bd80 <HAL_RCC_OscConfig+0x358>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	2b05      	cmp	r3, #5
 800bd4c:	d10c      	bne.n	800bd68 <HAL_RCC_OscConfig+0x340>
 800bd4e:	4b61      	ldr	r3, [pc, #388]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bd50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd52:	4a60      	ldr	r2, [pc, #384]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bd54:	f043 0304 	orr.w	r3, r3, #4
 800bd58:	6713      	str	r3, [r2, #112]	@ 0x70
 800bd5a:	4b5e      	ldr	r3, [pc, #376]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bd5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd5e:	4a5d      	ldr	r2, [pc, #372]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bd60:	f043 0301 	orr.w	r3, r3, #1
 800bd64:	6713      	str	r3, [r2, #112]	@ 0x70
 800bd66:	e00b      	b.n	800bd80 <HAL_RCC_OscConfig+0x358>
 800bd68:	4b5a      	ldr	r3, [pc, #360]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bd6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd6c:	4a59      	ldr	r2, [pc, #356]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bd6e:	f023 0301 	bic.w	r3, r3, #1
 800bd72:	6713      	str	r3, [r2, #112]	@ 0x70
 800bd74:	4b57      	ldr	r3, [pc, #348]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bd76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd78:	4a56      	ldr	r2, [pc, #344]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bd7a:	f023 0304 	bic.w	r3, r3, #4
 800bd7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d015      	beq.n	800bdb4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd88:	f7fc fe42 	bl	8008a10 <HAL_GetTick>
 800bd8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd8e:	e00a      	b.n	800bda6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd90:	f7fc fe3e 	bl	8008a10 <HAL_GetTick>
 800bd94:	4602      	mov	r2, r0
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	1ad3      	subs	r3, r2, r3
 800bd9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d901      	bls.n	800bda6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800bda2:	2303      	movs	r3, #3
 800bda4:	e0d7      	b.n	800bf56 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bda6:	4b4b      	ldr	r3, [pc, #300]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bda8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdaa:	f003 0302 	and.w	r3, r3, #2
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d0ee      	beq.n	800bd90 <HAL_RCC_OscConfig+0x368>
 800bdb2:	e014      	b.n	800bdde <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdb4:	f7fc fe2c 	bl	8008a10 <HAL_GetTick>
 800bdb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bdba:	e00a      	b.n	800bdd2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bdbc:	f7fc fe28 	bl	8008a10 <HAL_GetTick>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	1ad3      	subs	r3, r2, r3
 800bdc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d901      	bls.n	800bdd2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800bdce:	2303      	movs	r3, #3
 800bdd0:	e0c1      	b.n	800bf56 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bdd2:	4b40      	ldr	r3, [pc, #256]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bdd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdd6:	f003 0302 	and.w	r3, r3, #2
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d1ee      	bne.n	800bdbc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bdde:	7dfb      	ldrb	r3, [r7, #23]
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d105      	bne.n	800bdf0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bde4:	4b3b      	ldr	r3, [pc, #236]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bde6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bde8:	4a3a      	ldr	r2, [pc, #232]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bdea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bdee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	699b      	ldr	r3, [r3, #24]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	f000 80ad 	beq.w	800bf54 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bdfa:	4b36      	ldr	r3, [pc, #216]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	f003 030c 	and.w	r3, r3, #12
 800be02:	2b08      	cmp	r3, #8
 800be04:	d060      	beq.n	800bec8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	699b      	ldr	r3, [r3, #24]
 800be0a:	2b02      	cmp	r3, #2
 800be0c:	d145      	bne.n	800be9a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be0e:	4b33      	ldr	r3, [pc, #204]	@ (800bedc <HAL_RCC_OscConfig+0x4b4>)
 800be10:	2200      	movs	r2, #0
 800be12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be14:	f7fc fdfc 	bl	8008a10 <HAL_GetTick>
 800be18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be1a:	e008      	b.n	800be2e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be1c:	f7fc fdf8 	bl	8008a10 <HAL_GetTick>
 800be20:	4602      	mov	r2, r0
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	1ad3      	subs	r3, r2, r3
 800be26:	2b02      	cmp	r3, #2
 800be28:	d901      	bls.n	800be2e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800be2a:	2303      	movs	r3, #3
 800be2c:	e093      	b.n	800bf56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be2e:	4b29      	ldr	r3, [pc, #164]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be36:	2b00      	cmp	r3, #0
 800be38:	d1f0      	bne.n	800be1c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	69da      	ldr	r2, [r3, #28]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6a1b      	ldr	r3, [r3, #32]
 800be42:	431a      	orrs	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be48:	019b      	lsls	r3, r3, #6
 800be4a:	431a      	orrs	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be50:	085b      	lsrs	r3, r3, #1
 800be52:	3b01      	subs	r3, #1
 800be54:	041b      	lsls	r3, r3, #16
 800be56:	431a      	orrs	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be5c:	061b      	lsls	r3, r3, #24
 800be5e:	431a      	orrs	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be64:	071b      	lsls	r3, r3, #28
 800be66:	491b      	ldr	r1, [pc, #108]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800be68:	4313      	orrs	r3, r2
 800be6a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800be6c:	4b1b      	ldr	r3, [pc, #108]	@ (800bedc <HAL_RCC_OscConfig+0x4b4>)
 800be6e:	2201      	movs	r2, #1
 800be70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be72:	f7fc fdcd 	bl	8008a10 <HAL_GetTick>
 800be76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be78:	e008      	b.n	800be8c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be7a:	f7fc fdc9 	bl	8008a10 <HAL_GetTick>
 800be7e:	4602      	mov	r2, r0
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	1ad3      	subs	r3, r2, r3
 800be84:	2b02      	cmp	r3, #2
 800be86:	d901      	bls.n	800be8c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800be88:	2303      	movs	r3, #3
 800be8a:	e064      	b.n	800bf56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be8c:	4b11      	ldr	r3, [pc, #68]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be94:	2b00      	cmp	r3, #0
 800be96:	d0f0      	beq.n	800be7a <HAL_RCC_OscConfig+0x452>
 800be98:	e05c      	b.n	800bf54 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be9a:	4b10      	ldr	r3, [pc, #64]	@ (800bedc <HAL_RCC_OscConfig+0x4b4>)
 800be9c:	2200      	movs	r2, #0
 800be9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bea0:	f7fc fdb6 	bl	8008a10 <HAL_GetTick>
 800bea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bea6:	e008      	b.n	800beba <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bea8:	f7fc fdb2 	bl	8008a10 <HAL_GetTick>
 800beac:	4602      	mov	r2, r0
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	1ad3      	subs	r3, r2, r3
 800beb2:	2b02      	cmp	r3, #2
 800beb4:	d901      	bls.n	800beba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800beb6:	2303      	movs	r3, #3
 800beb8:	e04d      	b.n	800bf56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800beba:	4b06      	ldr	r3, [pc, #24]	@ (800bed4 <HAL_RCC_OscConfig+0x4ac>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d1f0      	bne.n	800bea8 <HAL_RCC_OscConfig+0x480>
 800bec6:	e045      	b.n	800bf54 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	2b01      	cmp	r3, #1
 800bece:	d107      	bne.n	800bee0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800bed0:	2301      	movs	r3, #1
 800bed2:	e040      	b.n	800bf56 <HAL_RCC_OscConfig+0x52e>
 800bed4:	40023800 	.word	0x40023800
 800bed8:	40007000 	.word	0x40007000
 800bedc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bee0:	4b1f      	ldr	r3, [pc, #124]	@ (800bf60 <HAL_RCC_OscConfig+0x538>)
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	699b      	ldr	r3, [r3, #24]
 800beea:	2b01      	cmp	r3, #1
 800beec:	d030      	beq.n	800bf50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bef8:	429a      	cmp	r2, r3
 800befa:	d129      	bne.n	800bf50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d122      	bne.n	800bf50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bf0a:	68fa      	ldr	r2, [r7, #12]
 800bf0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800bf10:	4013      	ands	r3, r2
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800bf16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d119      	bne.n	800bf50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf26:	085b      	lsrs	r3, r3, #1
 800bf28:	3b01      	subs	r3, #1
 800bf2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d10f      	bne.n	800bf50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d107      	bne.n	800bf50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf4a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d001      	beq.n	800bf54 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800bf50:	2301      	movs	r3, #1
 800bf52:	e000      	b.n	800bf56 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800bf54:	2300      	movs	r3, #0
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3718      	adds	r7, #24
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	40023800 	.word	0x40023800

0800bf64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d101      	bne.n	800bf76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bf72:	2301      	movs	r3, #1
 800bf74:	e041      	b.n	800bffa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d106      	bne.n	800bf90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f7fb ff34 	bl	8007df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2202      	movs	r2, #2
 800bf94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	3304      	adds	r3, #4
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	4610      	mov	r0, r2
 800bfa4:	f000 fa7e 	bl	800c4a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2201      	movs	r2, #1
 800bfac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2201      	movs	r2, #1
 800bfec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2201      	movs	r2, #1
 800bff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3708      	adds	r7, #8
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
	...

0800c004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c004:	b480      	push	{r7}
 800c006:	b085      	sub	sp, #20
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c012:	b2db      	uxtb	r3, r3
 800c014:	2b01      	cmp	r3, #1
 800c016:	d001      	beq.n	800c01c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c018:	2301      	movs	r3, #1
 800c01a:	e04e      	b.n	800c0ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2202      	movs	r2, #2
 800c020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	68da      	ldr	r2, [r3, #12]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f042 0201 	orr.w	r2, r2, #1
 800c032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4a23      	ldr	r2, [pc, #140]	@ (800c0c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d022      	beq.n	800c084 <HAL_TIM_Base_Start_IT+0x80>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c046:	d01d      	beq.n	800c084 <HAL_TIM_Base_Start_IT+0x80>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a1f      	ldr	r2, [pc, #124]	@ (800c0cc <HAL_TIM_Base_Start_IT+0xc8>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d018      	beq.n	800c084 <HAL_TIM_Base_Start_IT+0x80>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a1e      	ldr	r2, [pc, #120]	@ (800c0d0 <HAL_TIM_Base_Start_IT+0xcc>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d013      	beq.n	800c084 <HAL_TIM_Base_Start_IT+0x80>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a1c      	ldr	r2, [pc, #112]	@ (800c0d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d00e      	beq.n	800c084 <HAL_TIM_Base_Start_IT+0x80>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4a1b      	ldr	r2, [pc, #108]	@ (800c0d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d009      	beq.n	800c084 <HAL_TIM_Base_Start_IT+0x80>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4a19      	ldr	r2, [pc, #100]	@ (800c0dc <HAL_TIM_Base_Start_IT+0xd8>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d004      	beq.n	800c084 <HAL_TIM_Base_Start_IT+0x80>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4a18      	ldr	r2, [pc, #96]	@ (800c0e0 <HAL_TIM_Base_Start_IT+0xdc>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d111      	bne.n	800c0a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	689b      	ldr	r3, [r3, #8]
 800c08a:	f003 0307 	and.w	r3, r3, #7
 800c08e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2b06      	cmp	r3, #6
 800c094:	d010      	beq.n	800c0b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f042 0201 	orr.w	r2, r2, #1
 800c0a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0a6:	e007      	b.n	800c0b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	681a      	ldr	r2, [r3, #0]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f042 0201 	orr.w	r2, r2, #1
 800c0b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c0b8:	2300      	movs	r3, #0
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3714      	adds	r7, #20
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr
 800c0c6:	bf00      	nop
 800c0c8:	40010000 	.word	0x40010000
 800c0cc:	40000400 	.word	0x40000400
 800c0d0:	40000800 	.word	0x40000800
 800c0d4:	40000c00 	.word	0x40000c00
 800c0d8:	40010400 	.word	0x40010400
 800c0dc:	40014000 	.word	0x40014000
 800c0e0:	40001800 	.word	0x40001800

0800c0e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	691b      	ldr	r3, [r3, #16]
 800c0fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	f003 0302 	and.w	r3, r3, #2
 800c102:	2b00      	cmp	r3, #0
 800c104:	d020      	beq.n	800c148 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f003 0302 	and.w	r3, r3, #2
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d01b      	beq.n	800c148 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f06f 0202 	mvn.w	r2, #2
 800c118:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2201      	movs	r2, #1
 800c11e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	699b      	ldr	r3, [r3, #24]
 800c126:	f003 0303 	and.w	r3, r3, #3
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d003      	beq.n	800c136 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 f999 	bl	800c466 <HAL_TIM_IC_CaptureCallback>
 800c134:	e005      	b.n	800c142 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 f98b 	bl	800c452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 f99c 	bl	800c47a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2200      	movs	r2, #0
 800c146:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	f003 0304 	and.w	r3, r3, #4
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d020      	beq.n	800c194 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f003 0304 	and.w	r3, r3, #4
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d01b      	beq.n	800c194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f06f 0204 	mvn.w	r2, #4
 800c164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2202      	movs	r2, #2
 800c16a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	699b      	ldr	r3, [r3, #24]
 800c172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c176:	2b00      	cmp	r3, #0
 800c178:	d003      	beq.n	800c182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 f973 	bl	800c466 <HAL_TIM_IC_CaptureCallback>
 800c180:	e005      	b.n	800c18e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 f965 	bl	800c452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 f976 	bl	800c47a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2200      	movs	r2, #0
 800c192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	f003 0308 	and.w	r3, r3, #8
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d020      	beq.n	800c1e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f003 0308 	and.w	r3, r3, #8
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d01b      	beq.n	800c1e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f06f 0208 	mvn.w	r2, #8
 800c1b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2204      	movs	r2, #4
 800c1b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	69db      	ldr	r3, [r3, #28]
 800c1be:	f003 0303 	and.w	r3, r3, #3
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d003      	beq.n	800c1ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 f94d 	bl	800c466 <HAL_TIM_IC_CaptureCallback>
 800c1cc:	e005      	b.n	800c1da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 f93f 	bl	800c452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 f950 	bl	800c47a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	f003 0310 	and.w	r3, r3, #16
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d020      	beq.n	800c22c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f003 0310 	and.w	r3, r3, #16
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d01b      	beq.n	800c22c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f06f 0210 	mvn.w	r2, #16
 800c1fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2208      	movs	r2, #8
 800c202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	69db      	ldr	r3, [r3, #28]
 800c20a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d003      	beq.n	800c21a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 f927 	bl	800c466 <HAL_TIM_IC_CaptureCallback>
 800c218:	e005      	b.n	800c226 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 f919 	bl	800c452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 f92a 	bl	800c47a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2200      	movs	r2, #0
 800c22a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	f003 0301 	and.w	r3, r3, #1
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00c      	beq.n	800c250 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f003 0301 	and.w	r3, r3, #1
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d007      	beq.n	800c250 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f06f 0201 	mvn.w	r2, #1
 800c248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f7f9 fb28 	bl	80058a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c256:	2b00      	cmp	r3, #0
 800c258:	d00c      	beq.n	800c274 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c260:	2b00      	cmp	r3, #0
 800c262:	d007      	beq.n	800c274 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c26c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 fade 	bl	800c830 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d00c      	beq.n	800c298 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c284:	2b00      	cmp	r3, #0
 800c286:	d007      	beq.n	800c298 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 f8fb 	bl	800c48e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	f003 0320 	and.w	r3, r3, #32
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00c      	beq.n	800c2bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f003 0320 	and.w	r3, r3, #32
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d007      	beq.n	800c2bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f06f 0220 	mvn.w	r2, #32
 800c2b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 fab0 	bl	800c81c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c2bc:	bf00      	nop
 800c2be:	3710      	adds	r7, #16
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d101      	bne.n	800c2e0 <HAL_TIM_ConfigClockSource+0x1c>
 800c2dc:	2302      	movs	r3, #2
 800c2de:	e0b4      	b.n	800c44a <HAL_TIM_ConfigClockSource+0x186>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2202      	movs	r2, #2
 800c2ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	689b      	ldr	r3, [r3, #8]
 800c2f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c2fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	68ba      	ldr	r2, [r7, #8]
 800c30e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c318:	d03e      	beq.n	800c398 <HAL_TIM_ConfigClockSource+0xd4>
 800c31a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c31e:	f200 8087 	bhi.w	800c430 <HAL_TIM_ConfigClockSource+0x16c>
 800c322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c326:	f000 8086 	beq.w	800c436 <HAL_TIM_ConfigClockSource+0x172>
 800c32a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c32e:	d87f      	bhi.n	800c430 <HAL_TIM_ConfigClockSource+0x16c>
 800c330:	2b70      	cmp	r3, #112	@ 0x70
 800c332:	d01a      	beq.n	800c36a <HAL_TIM_ConfigClockSource+0xa6>
 800c334:	2b70      	cmp	r3, #112	@ 0x70
 800c336:	d87b      	bhi.n	800c430 <HAL_TIM_ConfigClockSource+0x16c>
 800c338:	2b60      	cmp	r3, #96	@ 0x60
 800c33a:	d050      	beq.n	800c3de <HAL_TIM_ConfigClockSource+0x11a>
 800c33c:	2b60      	cmp	r3, #96	@ 0x60
 800c33e:	d877      	bhi.n	800c430 <HAL_TIM_ConfigClockSource+0x16c>
 800c340:	2b50      	cmp	r3, #80	@ 0x50
 800c342:	d03c      	beq.n	800c3be <HAL_TIM_ConfigClockSource+0xfa>
 800c344:	2b50      	cmp	r3, #80	@ 0x50
 800c346:	d873      	bhi.n	800c430 <HAL_TIM_ConfigClockSource+0x16c>
 800c348:	2b40      	cmp	r3, #64	@ 0x40
 800c34a:	d058      	beq.n	800c3fe <HAL_TIM_ConfigClockSource+0x13a>
 800c34c:	2b40      	cmp	r3, #64	@ 0x40
 800c34e:	d86f      	bhi.n	800c430 <HAL_TIM_ConfigClockSource+0x16c>
 800c350:	2b30      	cmp	r3, #48	@ 0x30
 800c352:	d064      	beq.n	800c41e <HAL_TIM_ConfigClockSource+0x15a>
 800c354:	2b30      	cmp	r3, #48	@ 0x30
 800c356:	d86b      	bhi.n	800c430 <HAL_TIM_ConfigClockSource+0x16c>
 800c358:	2b20      	cmp	r3, #32
 800c35a:	d060      	beq.n	800c41e <HAL_TIM_ConfigClockSource+0x15a>
 800c35c:	2b20      	cmp	r3, #32
 800c35e:	d867      	bhi.n	800c430 <HAL_TIM_ConfigClockSource+0x16c>
 800c360:	2b00      	cmp	r3, #0
 800c362:	d05c      	beq.n	800c41e <HAL_TIM_ConfigClockSource+0x15a>
 800c364:	2b10      	cmp	r3, #16
 800c366:	d05a      	beq.n	800c41e <HAL_TIM_ConfigClockSource+0x15a>
 800c368:	e062      	b.n	800c430 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c37a:	f000 f9b3 	bl	800c6e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c38c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	68ba      	ldr	r2, [r7, #8]
 800c394:	609a      	str	r2, [r3, #8]
      break;
 800c396:	e04f      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c3a8:	f000 f99c 	bl	800c6e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	689a      	ldr	r2, [r3, #8]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c3ba:	609a      	str	r2, [r3, #8]
      break;
 800c3bc:	e03c      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	f000 f910 	bl	800c5f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	2150      	movs	r1, #80	@ 0x50
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f000 f969 	bl	800c6ae <TIM_ITRx_SetConfig>
      break;
 800c3dc:	e02c      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	f000 f92f 	bl	800c64e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	2160      	movs	r1, #96	@ 0x60
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f000 f959 	bl	800c6ae <TIM_ITRx_SetConfig>
      break;
 800c3fc:	e01c      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c40a:	461a      	mov	r2, r3
 800c40c:	f000 f8f0 	bl	800c5f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	2140      	movs	r1, #64	@ 0x40
 800c416:	4618      	mov	r0, r3
 800c418:	f000 f949 	bl	800c6ae <TIM_ITRx_SetConfig>
      break;
 800c41c:	e00c      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4619      	mov	r1, r3
 800c428:	4610      	mov	r0, r2
 800c42a:	f000 f940 	bl	800c6ae <TIM_ITRx_SetConfig>
      break;
 800c42e:	e003      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c430:	2301      	movs	r3, #1
 800c432:	73fb      	strb	r3, [r7, #15]
      break;
 800c434:	e000      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c436:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2201      	movs	r2, #1
 800c43c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c448:	7bfb      	ldrb	r3, [r7, #15]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3710      	adds	r7, #16
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c452:	b480      	push	{r7}
 800c454:	b083      	sub	sp, #12
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c45a:	bf00      	nop
 800c45c:	370c      	adds	r7, #12
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr

0800c466 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c466:	b480      	push	{r7}
 800c468:	b083      	sub	sp, #12
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c46e:	bf00      	nop
 800c470:	370c      	adds	r7, #12
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c47a:	b480      	push	{r7}
 800c47c:	b083      	sub	sp, #12
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c482:	bf00      	nop
 800c484:	370c      	adds	r7, #12
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr

0800c48e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c48e:	b480      	push	{r7}
 800c490:	b083      	sub	sp, #12
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c496:	bf00      	nop
 800c498:	370c      	adds	r7, #12
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr
	...

0800c4a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	4a43      	ldr	r2, [pc, #268]	@ (800c5c4 <TIM_Base_SetConfig+0x120>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d013      	beq.n	800c4e4 <TIM_Base_SetConfig+0x40>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4c2:	d00f      	beq.n	800c4e4 <TIM_Base_SetConfig+0x40>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	4a40      	ldr	r2, [pc, #256]	@ (800c5c8 <TIM_Base_SetConfig+0x124>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d00b      	beq.n	800c4e4 <TIM_Base_SetConfig+0x40>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	4a3f      	ldr	r2, [pc, #252]	@ (800c5cc <TIM_Base_SetConfig+0x128>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d007      	beq.n	800c4e4 <TIM_Base_SetConfig+0x40>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	4a3e      	ldr	r2, [pc, #248]	@ (800c5d0 <TIM_Base_SetConfig+0x12c>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d003      	beq.n	800c4e4 <TIM_Base_SetConfig+0x40>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	4a3d      	ldr	r2, [pc, #244]	@ (800c5d4 <TIM_Base_SetConfig+0x130>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d108      	bne.n	800c4f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	68fa      	ldr	r2, [r7, #12]
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	4a32      	ldr	r2, [pc, #200]	@ (800c5c4 <TIM_Base_SetConfig+0x120>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d02b      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c504:	d027      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	4a2f      	ldr	r2, [pc, #188]	@ (800c5c8 <TIM_Base_SetConfig+0x124>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d023      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	4a2e      	ldr	r2, [pc, #184]	@ (800c5cc <TIM_Base_SetConfig+0x128>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d01f      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	4a2d      	ldr	r2, [pc, #180]	@ (800c5d0 <TIM_Base_SetConfig+0x12c>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d01b      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	4a2c      	ldr	r2, [pc, #176]	@ (800c5d4 <TIM_Base_SetConfig+0x130>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d017      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	4a2b      	ldr	r2, [pc, #172]	@ (800c5d8 <TIM_Base_SetConfig+0x134>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d013      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4a2a      	ldr	r2, [pc, #168]	@ (800c5dc <TIM_Base_SetConfig+0x138>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d00f      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	4a29      	ldr	r2, [pc, #164]	@ (800c5e0 <TIM_Base_SetConfig+0x13c>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d00b      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	4a28      	ldr	r2, [pc, #160]	@ (800c5e4 <TIM_Base_SetConfig+0x140>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d007      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4a27      	ldr	r2, [pc, #156]	@ (800c5e8 <TIM_Base_SetConfig+0x144>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d003      	beq.n	800c556 <TIM_Base_SetConfig+0xb2>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4a26      	ldr	r2, [pc, #152]	@ (800c5ec <TIM_Base_SetConfig+0x148>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d108      	bne.n	800c568 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c55c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	68fa      	ldr	r2, [r7, #12]
 800c564:	4313      	orrs	r3, r2
 800c566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	695b      	ldr	r3, [r3, #20]
 800c572:	4313      	orrs	r3, r2
 800c574:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	689a      	ldr	r2, [r3, #8]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	681a      	ldr	r2, [r3, #0]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4a0e      	ldr	r2, [pc, #56]	@ (800c5c4 <TIM_Base_SetConfig+0x120>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d003      	beq.n	800c596 <TIM_Base_SetConfig+0xf2>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4a10      	ldr	r2, [pc, #64]	@ (800c5d4 <TIM_Base_SetConfig+0x130>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d103      	bne.n	800c59e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	691a      	ldr	r2, [r3, #16]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f043 0204 	orr.w	r2, r3, #4
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	68fa      	ldr	r2, [r7, #12]
 800c5b4:	601a      	str	r2, [r3, #0]
}
 800c5b6:	bf00      	nop
 800c5b8:	3714      	adds	r7, #20
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	40010000 	.word	0x40010000
 800c5c8:	40000400 	.word	0x40000400
 800c5cc:	40000800 	.word	0x40000800
 800c5d0:	40000c00 	.word	0x40000c00
 800c5d4:	40010400 	.word	0x40010400
 800c5d8:	40014000 	.word	0x40014000
 800c5dc:	40014400 	.word	0x40014400
 800c5e0:	40014800 	.word	0x40014800
 800c5e4:	40001800 	.word	0x40001800
 800c5e8:	40001c00 	.word	0x40001c00
 800c5ec:	40002000 	.word	0x40002000

0800c5f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b087      	sub	sp, #28
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	6a1b      	ldr	r3, [r3, #32]
 800c600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	6a1b      	ldr	r3, [r3, #32]
 800c606:	f023 0201 	bic.w	r2, r3, #1
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	699b      	ldr	r3, [r3, #24]
 800c612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c61a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	011b      	lsls	r3, r3, #4
 800c620:	693a      	ldr	r2, [r7, #16]
 800c622:	4313      	orrs	r3, r2
 800c624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	f023 030a 	bic.w	r3, r3, #10
 800c62c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c62e:	697a      	ldr	r2, [r7, #20]
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	4313      	orrs	r3, r2
 800c634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	693a      	ldr	r2, [r7, #16]
 800c63a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	697a      	ldr	r2, [r7, #20]
 800c640:	621a      	str	r2, [r3, #32]
}
 800c642:	bf00      	nop
 800c644:	371c      	adds	r7, #28
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr

0800c64e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c64e:	b480      	push	{r7}
 800c650:	b087      	sub	sp, #28
 800c652:	af00      	add	r7, sp, #0
 800c654:	60f8      	str	r0, [r7, #12]
 800c656:	60b9      	str	r1, [r7, #8]
 800c658:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6a1b      	ldr	r3, [r3, #32]
 800c65e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	6a1b      	ldr	r3, [r3, #32]
 800c664:	f023 0210 	bic.w	r2, r3, #16
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	699b      	ldr	r3, [r3, #24]
 800c670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c678:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	031b      	lsls	r3, r3, #12
 800c67e:	693a      	ldr	r2, [r7, #16]
 800c680:	4313      	orrs	r3, r2
 800c682:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c68a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	011b      	lsls	r3, r3, #4
 800c690:	697a      	ldr	r2, [r7, #20]
 800c692:	4313      	orrs	r3, r2
 800c694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	693a      	ldr	r2, [r7, #16]
 800c69a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	697a      	ldr	r2, [r7, #20]
 800c6a0:	621a      	str	r2, [r3, #32]
}
 800c6a2:	bf00      	nop
 800c6a4:	371c      	adds	r7, #28
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr

0800c6ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c6ae:	b480      	push	{r7}
 800c6b0:	b085      	sub	sp, #20
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
 800c6b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	689b      	ldr	r3, [r3, #8]
 800c6bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c6c6:	683a      	ldr	r2, [r7, #0]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	f043 0307 	orr.w	r3, r3, #7
 800c6d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	609a      	str	r2, [r3, #8]
}
 800c6d8:	bf00      	nop
 800c6da:	3714      	adds	r7, #20
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr

0800c6e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b087      	sub	sp, #28
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
 800c6f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	689b      	ldr	r3, [r3, #8]
 800c6f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c6fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	021a      	lsls	r2, r3, #8
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	431a      	orrs	r2, r3
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	4313      	orrs	r3, r2
 800c70c:	697a      	ldr	r2, [r7, #20]
 800c70e:	4313      	orrs	r3, r2
 800c710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	697a      	ldr	r2, [r7, #20]
 800c716:	609a      	str	r2, [r3, #8]
}
 800c718:	bf00      	nop
 800c71a:	371c      	adds	r7, #28
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr

0800c724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c724:	b480      	push	{r7}
 800c726:	b085      	sub	sp, #20
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c734:	2b01      	cmp	r3, #1
 800c736:	d101      	bne.n	800c73c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c738:	2302      	movs	r3, #2
 800c73a:	e05a      	b.n	800c7f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2201      	movs	r2, #1
 800c740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2202      	movs	r2, #2
 800c748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	689b      	ldr	r3, [r3, #8]
 800c75a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c762:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	4313      	orrs	r3, r2
 800c76c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a21      	ldr	r2, [pc, #132]	@ (800c800 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d022      	beq.n	800c7c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c788:	d01d      	beq.n	800c7c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a1d      	ldr	r2, [pc, #116]	@ (800c804 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d018      	beq.n	800c7c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a1b      	ldr	r2, [pc, #108]	@ (800c808 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d013      	beq.n	800c7c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a1a      	ldr	r2, [pc, #104]	@ (800c80c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d00e      	beq.n	800c7c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a18      	ldr	r2, [pc, #96]	@ (800c810 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d009      	beq.n	800c7c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a17      	ldr	r2, [pc, #92]	@ (800c814 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d004      	beq.n	800c7c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a15      	ldr	r2, [pc, #84]	@ (800c818 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d10c      	bne.n	800c7e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c7cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	68ba      	ldr	r2, [r7, #8]
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	68ba      	ldr	r2, [r7, #8]
 800c7de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c7f0:	2300      	movs	r3, #0
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3714      	adds	r7, #20
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop
 800c800:	40010000 	.word	0x40010000
 800c804:	40000400 	.word	0x40000400
 800c808:	40000800 	.word	0x40000800
 800c80c:	40000c00 	.word	0x40000c00
 800c810:	40010400 	.word	0x40010400
 800c814:	40014000 	.word	0x40014000
 800c818:	40001800 	.word	0x40001800

0800c81c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b083      	sub	sp, #12
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c824:	bf00      	nop
 800c826:	370c      	adds	r7, #12
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr

0800c830 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c838:	bf00      	nop
 800c83a:	370c      	adds	r7, #12
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d101      	bne.n	800c856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c852:	2301      	movs	r3, #1
 800c854:	e042      	b.n	800c8dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d106      	bne.n	800c870 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f7fb faea 	bl	8007e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2224      	movs	r2, #36	@ 0x24
 800c874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	68da      	ldr	r2, [r3, #12]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c886:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f001 f889 	bl	800d9a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	691a      	ldr	r2, [r3, #16]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c89c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	695a      	ldr	r2, [r3, #20]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c8ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	68da      	ldr	r2, [r3, #12]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c8bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2220      	movs	r2, #32
 800c8c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2220      	movs	r2, #32
 800c8d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b08a      	sub	sp, #40	@ 0x28
 800c8e8:	af02      	add	r7, sp, #8
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	603b      	str	r3, [r7, #0]
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	2b20      	cmp	r3, #32
 800c902:	d175      	bne.n	800c9f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d002      	beq.n	800c910 <HAL_UART_Transmit+0x2c>
 800c90a:	88fb      	ldrh	r3, [r7, #6]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d101      	bne.n	800c914 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c910:	2301      	movs	r3, #1
 800c912:	e06e      	b.n	800c9f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2200      	movs	r2, #0
 800c918:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2221      	movs	r2, #33	@ 0x21
 800c91e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c922:	f7fc f875 	bl	8008a10 <HAL_GetTick>
 800c926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	88fa      	ldrh	r2, [r7, #6]
 800c92c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	88fa      	ldrh	r2, [r7, #6]
 800c932:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	689b      	ldr	r3, [r3, #8]
 800c938:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c93c:	d108      	bne.n	800c950 <HAL_UART_Transmit+0x6c>
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	691b      	ldr	r3, [r3, #16]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d104      	bne.n	800c950 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c946:	2300      	movs	r3, #0
 800c948:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	61bb      	str	r3, [r7, #24]
 800c94e:	e003      	b.n	800c958 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c954:	2300      	movs	r3, #0
 800c956:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c958:	e02e      	b.n	800c9b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	9300      	str	r3, [sp, #0]
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	2200      	movs	r2, #0
 800c962:	2180      	movs	r1, #128	@ 0x80
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f000 fd5a 	bl	800d41e <UART_WaitOnFlagUntilTimeout>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d005      	beq.n	800c97c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2220      	movs	r2, #32
 800c974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800c978:	2303      	movs	r3, #3
 800c97a:	e03a      	b.n	800c9f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d10b      	bne.n	800c99a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c982:	69bb      	ldr	r3, [r7, #24]
 800c984:	881b      	ldrh	r3, [r3, #0]
 800c986:	461a      	mov	r2, r3
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c990:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c992:	69bb      	ldr	r3, [r7, #24]
 800c994:	3302      	adds	r3, #2
 800c996:	61bb      	str	r3, [r7, #24]
 800c998:	e007      	b.n	800c9aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	781a      	ldrb	r2, [r3, #0]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c9a4:	69fb      	ldr	r3, [r7, #28]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	3b01      	subs	r3, #1
 800c9b2:	b29a      	uxth	r2, r3
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c9bc:	b29b      	uxth	r3, r3
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d1cb      	bne.n	800c95a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	9300      	str	r3, [sp, #0]
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	2140      	movs	r1, #64	@ 0x40
 800c9cc:	68f8      	ldr	r0, [r7, #12]
 800c9ce:	f000 fd26 	bl	800d41e <UART_WaitOnFlagUntilTimeout>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d005      	beq.n	800c9e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2220      	movs	r2, #32
 800c9dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800c9e0:	2303      	movs	r3, #3
 800c9e2:	e006      	b.n	800c9f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2220      	movs	r2, #32
 800c9e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	e000      	b.n	800c9f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c9f0:	2302      	movs	r3, #2
  }
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3720      	adds	r7, #32
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
	...

0800c9fc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b08c      	sub	sp, #48	@ 0x30
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	60f8      	str	r0, [r7, #12]
 800ca04:	60b9      	str	r1, [r7, #8]
 800ca06:	4613      	mov	r3, r2
 800ca08:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	2b20      	cmp	r3, #32
 800ca14:	d162      	bne.n	800cadc <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d002      	beq.n	800ca22 <HAL_UART_Transmit_DMA+0x26>
 800ca1c:	88fb      	ldrh	r3, [r7, #6]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d101      	bne.n	800ca26 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ca22:	2301      	movs	r3, #1
 800ca24:	e05b      	b.n	800cade <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	88fa      	ldrh	r2, [r7, #6]
 800ca30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	88fa      	ldrh	r2, [r7, #6]
 800ca36:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2221      	movs	r2, #33	@ 0x21
 800ca42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca4a:	4a27      	ldr	r2, [pc, #156]	@ (800cae8 <HAL_UART_Transmit_DMA+0xec>)
 800ca4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca52:	4a26      	ldr	r2, [pc, #152]	@ (800caec <HAL_UART_Transmit_DMA+0xf0>)
 800ca54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca5a:	4a25      	ldr	r2, [pc, #148]	@ (800caf0 <HAL_UART_Transmit_DMA+0xf4>)
 800ca5c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca62:	2200      	movs	r2, #0
 800ca64:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800ca66:	f107 0308 	add.w	r3, r7, #8
 800ca6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800ca70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca72:	6819      	ldr	r1, [r3, #0]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	3304      	adds	r3, #4
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	88fb      	ldrh	r3, [r7, #6]
 800ca7e:	f7fc fe0f 	bl	80096a0 <HAL_DMA_Start_IT>
 800ca82:	4603      	mov	r3, r0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d008      	beq.n	800ca9a <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2210      	movs	r2, #16
 800ca8c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2220      	movs	r2, #32
 800ca92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800ca96:	2301      	movs	r3, #1
 800ca98:	e021      	b.n	800cade <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800caa2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	3314      	adds	r3, #20
 800caaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	e853 3f00 	ldrex	r3, [r3]
 800cab2:	617b      	str	r3, [r7, #20]
   return(result);
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800caba:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	3314      	adds	r3, #20
 800cac2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cac4:	627a      	str	r2, [r7, #36]	@ 0x24
 800cac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cac8:	6a39      	ldr	r1, [r7, #32]
 800caca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cacc:	e841 2300 	strex	r3, r2, [r1]
 800cad0:	61fb      	str	r3, [r7, #28]
   return(result);
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d1e5      	bne.n	800caa4 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 800cad8:	2300      	movs	r3, #0
 800cada:	e000      	b.n	800cade <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800cadc:	2302      	movs	r3, #2
  }
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3730      	adds	r7, #48	@ 0x30
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	0800d16d 	.word	0x0800d16d
 800caec:	0800d207 	.word	0x0800d207
 800caf0:	0800d38b 	.word	0x0800d38b

0800caf4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	4613      	mov	r3, r2
 800cb00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	2b20      	cmp	r3, #32
 800cb0c:	d112      	bne.n	800cb34 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d002      	beq.n	800cb1a <HAL_UART_Receive_DMA+0x26>
 800cb14:	88fb      	ldrh	r3, [r7, #6]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d101      	bne.n	800cb1e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	e00b      	b.n	800cb36 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2200      	movs	r2, #0
 800cb22:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cb24:	88fb      	ldrh	r3, [r7, #6]
 800cb26:	461a      	mov	r2, r3
 800cb28:	68b9      	ldr	r1, [r7, #8]
 800cb2a:	68f8      	ldr	r0, [r7, #12]
 800cb2c:	f000 fcd0 	bl	800d4d0 <UART_Start_Receive_DMA>
 800cb30:	4603      	mov	r3, r0
 800cb32:	e000      	b.n	800cb36 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800cb34:	2302      	movs	r3, #2
  }
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}

0800cb3e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb3e:	b580      	push	{r7, lr}
 800cb40:	b08c      	sub	sp, #48	@ 0x30
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	60f8      	str	r0, [r7, #12]
 800cb46:	60b9      	str	r1, [r7, #8]
 800cb48:	4613      	mov	r3, r2
 800cb4a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	2b20      	cmp	r3, #32
 800cb56:	d146      	bne.n	800cbe6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d002      	beq.n	800cb64 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800cb5e:	88fb      	ldrh	r3, [r7, #6]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d101      	bne.n	800cb68 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800cb64:	2301      	movs	r3, #1
 800cb66:	e03f      	b.n	800cbe8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2200      	movs	r2, #0
 800cb72:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800cb74:	88fb      	ldrh	r3, [r7, #6]
 800cb76:	461a      	mov	r2, r3
 800cb78:	68b9      	ldr	r1, [r7, #8]
 800cb7a:	68f8      	ldr	r0, [r7, #12]
 800cb7c:	f000 fca8 	bl	800d4d0 <UART_Start_Receive_DMA>
 800cb80:	4603      	mov	r3, r0
 800cb82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d125      	bne.n	800cbda <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cb8e:	2300      	movs	r3, #0
 800cb90:	613b      	str	r3, [r7, #16]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	613b      	str	r3, [r7, #16]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	613b      	str	r3, [r7, #16]
 800cba2:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	330c      	adds	r3, #12
 800cbaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbac:	69bb      	ldr	r3, [r7, #24]
 800cbae:	e853 3f00 	ldrex	r3, [r3]
 800cbb2:	617b      	str	r3, [r7, #20]
   return(result);
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	f043 0310 	orr.w	r3, r3, #16
 800cbba:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	330c      	adds	r3, #12
 800cbc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbc4:	627a      	str	r2, [r7, #36]	@ 0x24
 800cbc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc8:	6a39      	ldr	r1, [r7, #32]
 800cbca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbcc:	e841 2300 	strex	r3, r2, [r1]
 800cbd0:	61fb      	str	r3, [r7, #28]
   return(result);
 800cbd2:	69fb      	ldr	r3, [r7, #28]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d1e5      	bne.n	800cba4 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800cbd8:	e002      	b.n	800cbe0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800cbe0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cbe4:	e000      	b.n	800cbe8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800cbe6:	2302      	movs	r3, #2
  }
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3730      	adds	r7, #48	@ 0x30
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b0ba      	sub	sp, #232	@ 0xe8
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	695b      	ldr	r3, [r3, #20]
 800cc12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800cc16:	2300      	movs	r3, #0
 800cc18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cc22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc26:	f003 030f 	and.w	r3, r3, #15
 800cc2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800cc2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d10f      	bne.n	800cc56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cc36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc3a:	f003 0320 	and.w	r3, r3, #32
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d009      	beq.n	800cc56 <HAL_UART_IRQHandler+0x66>
 800cc42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc46:	f003 0320 	and.w	r3, r3, #32
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d003      	beq.n	800cc56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 fde8 	bl	800d824 <UART_Receive_IT>
      return;
 800cc54:	e273      	b.n	800d13e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800cc56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	f000 80de 	beq.w	800ce1c <HAL_UART_IRQHandler+0x22c>
 800cc60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc64:	f003 0301 	and.w	r3, r3, #1
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d106      	bne.n	800cc7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cc6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc70:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f000 80d1 	beq.w	800ce1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cc7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc7e:	f003 0301 	and.w	r3, r3, #1
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d00b      	beq.n	800cc9e <HAL_UART_IRQHandler+0xae>
 800cc86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d005      	beq.n	800cc9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc96:	f043 0201 	orr.w	r2, r3, #1
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cc9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cca2:	f003 0304 	and.w	r3, r3, #4
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00b      	beq.n	800ccc2 <HAL_UART_IRQHandler+0xd2>
 800ccaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ccae:	f003 0301 	and.w	r3, r3, #1
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d005      	beq.n	800ccc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccba:	f043 0202 	orr.w	r2, r3, #2
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ccc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccc6:	f003 0302 	and.w	r3, r3, #2
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d00b      	beq.n	800cce6 <HAL_UART_IRQHandler+0xf6>
 800ccce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ccd2:	f003 0301 	and.w	r3, r3, #1
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d005      	beq.n	800cce6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccde:	f043 0204 	orr.w	r2, r3, #4
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccea:	f003 0308 	and.w	r3, r3, #8
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d011      	beq.n	800cd16 <HAL_UART_IRQHandler+0x126>
 800ccf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccf6:	f003 0320 	and.w	r3, r3, #32
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d105      	bne.n	800cd0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ccfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd02:	f003 0301 	and.w	r3, r3, #1
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d005      	beq.n	800cd16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd0e:	f043 0208 	orr.w	r2, r3, #8
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f000 820a 	beq.w	800d134 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cd20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd24:	f003 0320 	and.w	r3, r3, #32
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d008      	beq.n	800cd3e <HAL_UART_IRQHandler+0x14e>
 800cd2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd30:	f003 0320 	and.w	r3, r3, #32
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d002      	beq.n	800cd3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f000 fd73 	bl	800d824 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	695b      	ldr	r3, [r3, #20]
 800cd44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd48:	2b40      	cmp	r3, #64	@ 0x40
 800cd4a:	bf0c      	ite	eq
 800cd4c:	2301      	moveq	r3, #1
 800cd4e:	2300      	movne	r3, #0
 800cd50:	b2db      	uxtb	r3, r3
 800cd52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd5a:	f003 0308 	and.w	r3, r3, #8
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d103      	bne.n	800cd6a <HAL_UART_IRQHandler+0x17a>
 800cd62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d04f      	beq.n	800ce0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fc7e 	bl	800d66c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	695b      	ldr	r3, [r3, #20]
 800cd76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd7a:	2b40      	cmp	r3, #64	@ 0x40
 800cd7c:	d141      	bne.n	800ce02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	3314      	adds	r3, #20
 800cd84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cd8c:	e853 3f00 	ldrex	r3, [r3]
 800cd90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cd94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cd98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	3314      	adds	r3, #20
 800cda6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cdaa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cdae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cdb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cdba:	e841 2300 	strex	r3, r2, [r1]
 800cdbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cdc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d1d9      	bne.n	800cd7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d013      	beq.n	800cdfa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdd6:	4a8a      	ldr	r2, [pc, #552]	@ (800d000 <HAL_UART_IRQHandler+0x410>)
 800cdd8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fc fd26 	bl	8009830 <HAL_DMA_Abort_IT>
 800cde4:	4603      	mov	r3, r0
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d016      	beq.n	800ce18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800cdf4:	4610      	mov	r0, r2
 800cdf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdf8:	e00e      	b.n	800ce18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f9ac 	bl	800d158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce00:	e00a      	b.n	800ce18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f000 f9a8 	bl	800d158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce08:	e006      	b.n	800ce18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 f9a4 	bl	800d158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2200      	movs	r2, #0
 800ce14:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800ce16:	e18d      	b.n	800d134 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce18:	bf00      	nop
    return;
 800ce1a:	e18b      	b.n	800d134 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	f040 8167 	bne.w	800d0f4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ce26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce2a:	f003 0310 	and.w	r3, r3, #16
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	f000 8160 	beq.w	800d0f4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800ce34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce38:	f003 0310 	and.w	r3, r3, #16
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	f000 8159 	beq.w	800d0f4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ce42:	2300      	movs	r3, #0
 800ce44:	60bb      	str	r3, [r7, #8]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	60bb      	str	r3, [r7, #8]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	60bb      	str	r3, [r7, #8]
 800ce56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	695b      	ldr	r3, [r3, #20]
 800ce5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce62:	2b40      	cmp	r3, #64	@ 0x40
 800ce64:	f040 80ce 	bne.w	800d004 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ce74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	f000 80a9 	beq.w	800cfd0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ce82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ce86:	429a      	cmp	r2, r3
 800ce88:	f080 80a2 	bcs.w	800cfd0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ce92:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce98:	69db      	ldr	r3, [r3, #28]
 800ce9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce9e:	f000 8088 	beq.w	800cfb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	330c      	adds	r3, #12
 800cea8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ceb0:	e853 3f00 	ldrex	r3, [r3]
 800ceb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ceb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cebc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cec0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	330c      	adds	r3, #12
 800ceca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800cece:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ced2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ced6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ceda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cede:	e841 2300 	strex	r3, r2, [r1]
 800cee2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1d9      	bne.n	800cea2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	3314      	adds	r3, #20
 800cef4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cef6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cef8:	e853 3f00 	ldrex	r3, [r3]
 800cefc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cefe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf00:	f023 0301 	bic.w	r3, r3, #1
 800cf04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	3314      	adds	r3, #20
 800cf0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cf12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cf16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cf1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cf1e:	e841 2300 	strex	r3, r2, [r1]
 800cf22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cf24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d1e1      	bne.n	800ceee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	3314      	adds	r3, #20
 800cf30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf34:	e853 3f00 	ldrex	r3, [r3]
 800cf38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cf3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	3314      	adds	r3, #20
 800cf4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cf4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cf50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cf54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cf56:	e841 2300 	strex	r3, r2, [r1]
 800cf5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cf5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d1e3      	bne.n	800cf2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2220      	movs	r2, #32
 800cf66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	330c      	adds	r3, #12
 800cf76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf7a:	e853 3f00 	ldrex	r3, [r3]
 800cf7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cf80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf82:	f023 0310 	bic.w	r3, r3, #16
 800cf86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	330c      	adds	r3, #12
 800cf90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cf94:	65ba      	str	r2, [r7, #88]	@ 0x58
 800cf96:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cf9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cf9c:	e841 2300 	strex	r3, r2, [r1]
 800cfa0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cfa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d1e3      	bne.n	800cf70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7fc fbcf 	bl	8009750 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2202      	movs	r2, #2
 800cfb6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cfc0:	b29b      	uxth	r3, r3
 800cfc2:	1ad3      	subs	r3, r2, r3
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f7f8 fc3b 	bl	8005844 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800cfce:	e0b3      	b.n	800d138 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cfd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	f040 80ad 	bne.w	800d138 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfe2:	69db      	ldr	r3, [r3, #28]
 800cfe4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfe8:	f040 80a6 	bne.w	800d138 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2202      	movs	r2, #2
 800cff0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cff6:	4619      	mov	r1, r3
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f7f8 fc23 	bl	8005844 <HAL_UARTEx_RxEventCallback>
      return;
 800cffe:	e09b      	b.n	800d138 <HAL_UART_IRQHandler+0x548>
 800d000:	0800d733 	.word	0x0800d733
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	1ad3      	subs	r3, r2, r3
 800d010:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d018:	b29b      	uxth	r3, r3
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	f000 808e 	beq.w	800d13c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800d020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d024:	2b00      	cmp	r3, #0
 800d026:	f000 8089 	beq.w	800d13c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	330c      	adds	r3, #12
 800d030:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d034:	e853 3f00 	ldrex	r3, [r3]
 800d038:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d03a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d03c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d040:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	330c      	adds	r3, #12
 800d04a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d04e:	647a      	str	r2, [r7, #68]	@ 0x44
 800d050:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d052:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d054:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d056:	e841 2300 	strex	r3, r2, [r1]
 800d05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d05c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d1e3      	bne.n	800d02a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	3314      	adds	r3, #20
 800d068:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d06c:	e853 3f00 	ldrex	r3, [r3]
 800d070:	623b      	str	r3, [r7, #32]
   return(result);
 800d072:	6a3b      	ldr	r3, [r7, #32]
 800d074:	f023 0301 	bic.w	r3, r3, #1
 800d078:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	3314      	adds	r3, #20
 800d082:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d086:	633a      	str	r2, [r7, #48]	@ 0x30
 800d088:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d08a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d08c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d08e:	e841 2300 	strex	r3, r2, [r1]
 800d092:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d096:	2b00      	cmp	r3, #0
 800d098:	d1e3      	bne.n	800d062 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2220      	movs	r2, #32
 800d09e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	330c      	adds	r3, #12
 800d0ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	e853 3f00 	ldrex	r3, [r3]
 800d0b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f023 0310 	bic.w	r3, r3, #16
 800d0be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	330c      	adds	r3, #12
 800d0c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d0cc:	61fa      	str	r2, [r7, #28]
 800d0ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0d0:	69b9      	ldr	r1, [r7, #24]
 800d0d2:	69fa      	ldr	r2, [r7, #28]
 800d0d4:	e841 2300 	strex	r3, r2, [r1]
 800d0d8:	617b      	str	r3, [r7, #20]
   return(result);
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d1e3      	bne.n	800d0a8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2202      	movs	r2, #2
 800d0e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d0e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f7f8 fba9 	bl	8005844 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d0f2:	e023      	b.n	800d13c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d0f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d009      	beq.n	800d114 <HAL_UART_IRQHandler+0x524>
 800d100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d003      	beq.n	800d114 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 fb21 	bl	800d754 <UART_Transmit_IT>
    return;
 800d112:	e014      	b.n	800d13e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00e      	beq.n	800d13e <HAL_UART_IRQHandler+0x54e>
 800d120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d008      	beq.n	800d13e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 fb61 	bl	800d7f4 <UART_EndTransmit_IT>
    return;
 800d132:	e004      	b.n	800d13e <HAL_UART_IRQHandler+0x54e>
    return;
 800d134:	bf00      	nop
 800d136:	e002      	b.n	800d13e <HAL_UART_IRQHandler+0x54e>
      return;
 800d138:	bf00      	nop
 800d13a:	e000      	b.n	800d13e <HAL_UART_IRQHandler+0x54e>
      return;
 800d13c:	bf00      	nop
  }
}
 800d13e:	37e8      	adds	r7, #232	@ 0xe8
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800d14c:	bf00      	nop
 800d14e:	370c      	adds	r7, #12
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr

0800d158 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d158:	b480      	push	{r7}
 800d15a:	b083      	sub	sp, #12
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d160:	bf00      	nop
 800d162:	370c      	adds	r7, #12
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr

0800d16c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b090      	sub	sp, #64	@ 0x40
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d178:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d184:	2b00      	cmp	r3, #0
 800d186:	d137      	bne.n	800d1f8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800d188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d18a:	2200      	movs	r2, #0
 800d18c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d18e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	3314      	adds	r3, #20
 800d194:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d198:	e853 3f00 	ldrex	r3, [r3]
 800d19c:	623b      	str	r3, [r7, #32]
   return(result);
 800d19e:	6a3b      	ldr	r3, [r7, #32]
 800d1a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d1a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d1a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	3314      	adds	r3, #20
 800d1ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d1ae:	633a      	str	r2, [r7, #48]	@ 0x30
 800d1b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d1b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1b6:	e841 2300 	strex	r3, r2, [r1]
 800d1ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1e5      	bne.n	800d18e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d1c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	330c      	adds	r3, #12
 800d1c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	e853 3f00 	ldrex	r3, [r3]
 800d1d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	330c      	adds	r3, #12
 800d1e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1e2:	61fa      	str	r2, [r7, #28]
 800d1e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e6:	69b9      	ldr	r1, [r7, #24]
 800d1e8:	69fa      	ldr	r2, [r7, #28]
 800d1ea:	e841 2300 	strex	r3, r2, [r1]
 800d1ee:	617b      	str	r3, [r7, #20]
   return(result);
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d1e5      	bne.n	800d1c2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d1f6:	e002      	b.n	800d1fe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d1f8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d1fa:	f7f8 fb69 	bl	80058d0 <HAL_UART_TxCpltCallback>
}
 800d1fe:	bf00      	nop
 800d200:	3740      	adds	r7, #64	@ 0x40
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}

0800d206 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d206:	b580      	push	{r7, lr}
 800d208:	b084      	sub	sp, #16
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d212:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d214:	68f8      	ldr	r0, [r7, #12]
 800d216:	f7ff ff95 	bl	800d144 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d21a:	bf00      	nop
 800d21c:	3710      	adds	r7, #16
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}

0800d222 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d222:	b580      	push	{r7, lr}
 800d224:	b09c      	sub	sp, #112	@ 0x70
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d22e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d172      	bne.n	800d324 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800d23e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d240:	2200      	movs	r2, #0
 800d242:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	330c      	adds	r3, #12
 800d24a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d24c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d24e:	e853 3f00 	ldrex	r3, [r3]
 800d252:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d254:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d256:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d25a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d25c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	330c      	adds	r3, #12
 800d262:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d264:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d266:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d268:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d26a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d26c:	e841 2300 	strex	r3, r2, [r1]
 800d270:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d274:	2b00      	cmp	r3, #0
 800d276:	d1e5      	bne.n	800d244 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	3314      	adds	r3, #20
 800d27e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d282:	e853 3f00 	ldrex	r3, [r3]
 800d286:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d28a:	f023 0301 	bic.w	r3, r3, #1
 800d28e:	667b      	str	r3, [r7, #100]	@ 0x64
 800d290:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	3314      	adds	r3, #20
 800d296:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d298:	647a      	str	r2, [r7, #68]	@ 0x44
 800d29a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d29c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d29e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d2a0:	e841 2300 	strex	r3, r2, [r1]
 800d2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d2a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d1e5      	bne.n	800d278 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	3314      	adds	r3, #20
 800d2b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b6:	e853 3f00 	ldrex	r3, [r3]
 800d2ba:	623b      	str	r3, [r7, #32]
   return(result);
 800d2bc:	6a3b      	ldr	r3, [r7, #32]
 800d2be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d2c2:	663b      	str	r3, [r7, #96]	@ 0x60
 800d2c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	3314      	adds	r3, #20
 800d2ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d2cc:	633a      	str	r2, [r7, #48]	@ 0x30
 800d2ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d2d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2d4:	e841 2300 	strex	r3, r2, [r1]
 800d2d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d1e5      	bne.n	800d2ac <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d2e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d2e2:	2220      	movs	r2, #32
 800d2e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d2ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d119      	bne.n	800d324 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	330c      	adds	r3, #12
 800d2f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	e853 3f00 	ldrex	r3, [r3]
 800d2fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f023 0310 	bic.w	r3, r3, #16
 800d306:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d308:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	330c      	adds	r3, #12
 800d30e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d310:	61fa      	str	r2, [r7, #28]
 800d312:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d314:	69b9      	ldr	r1, [r7, #24]
 800d316:	69fa      	ldr	r2, [r7, #28]
 800d318:	e841 2300 	strex	r3, r2, [r1]
 800d31c:	617b      	str	r3, [r7, #20]
   return(result);
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d1e5      	bne.n	800d2f0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d324:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d326:	2200      	movs	r2, #0
 800d328:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d32a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d32c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d32e:	2b01      	cmp	r3, #1
 800d330:	d106      	bne.n	800d340 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d332:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d334:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d336:	4619      	mov	r1, r3
 800d338:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d33a:	f7f8 fa83 	bl	8005844 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d33e:	e002      	b.n	800d346 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800d340:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d342:	f7f7 fa45 	bl	80047d0 <HAL_UART_RxCpltCallback>
}
 800d346:	bf00      	nop
 800d348:	3770      	adds	r7, #112	@ 0x70
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}

0800d34e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d34e:	b580      	push	{r7, lr}
 800d350:	b084      	sub	sp, #16
 800d352:	af00      	add	r7, sp, #0
 800d354:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d35a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2201      	movs	r2, #1
 800d360:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d366:	2b01      	cmp	r3, #1
 800d368:	d108      	bne.n	800d37c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d36e:	085b      	lsrs	r3, r3, #1
 800d370:	b29b      	uxth	r3, r3
 800d372:	4619      	mov	r1, r3
 800d374:	68f8      	ldr	r0, [r7, #12]
 800d376:	f7f8 fa65 	bl	8005844 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d37a:	e002      	b.n	800d382 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800d37c:	68f8      	ldr	r0, [r7, #12]
 800d37e:	f7f7 fa11 	bl	80047a4 <HAL_UART_RxHalfCpltCallback>
}
 800d382:	bf00      	nop
 800d384:	3710      	adds	r7, #16
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}

0800d38a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b084      	sub	sp, #16
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d392:	2300      	movs	r3, #0
 800d394:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d39a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	695b      	ldr	r3, [r3, #20]
 800d3a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3a6:	2b80      	cmp	r3, #128	@ 0x80
 800d3a8:	bf0c      	ite	eq
 800d3aa:	2301      	moveq	r3, #1
 800d3ac:	2300      	movne	r3, #0
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d3b8:	b2db      	uxtb	r3, r3
 800d3ba:	2b21      	cmp	r3, #33	@ 0x21
 800d3bc:	d108      	bne.n	800d3d0 <UART_DMAError+0x46>
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d005      	beq.n	800d3d0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800d3ca:	68b8      	ldr	r0, [r7, #8]
 800d3cc:	f000 f926 	bl	800d61c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	695b      	ldr	r3, [r3, #20]
 800d3d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3da:	2b40      	cmp	r3, #64	@ 0x40
 800d3dc:	bf0c      	ite	eq
 800d3de:	2301      	moveq	r3, #1
 800d3e0:	2300      	movne	r3, #0
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	2b22      	cmp	r3, #34	@ 0x22
 800d3f0:	d108      	bne.n	800d404 <UART_DMAError+0x7a>
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d005      	beq.n	800d404 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800d3fe:	68b8      	ldr	r0, [r7, #8]
 800d400:	f000 f934 	bl	800d66c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d408:	f043 0210 	orr.w	r2, r3, #16
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d410:	68b8      	ldr	r0, [r7, #8]
 800d412:	f7ff fea1 	bl	800d158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d416:	bf00      	nop
 800d418:	3710      	adds	r7, #16
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}

0800d41e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d41e:	b580      	push	{r7, lr}
 800d420:	b086      	sub	sp, #24
 800d422:	af00      	add	r7, sp, #0
 800d424:	60f8      	str	r0, [r7, #12]
 800d426:	60b9      	str	r1, [r7, #8]
 800d428:	603b      	str	r3, [r7, #0]
 800d42a:	4613      	mov	r3, r2
 800d42c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d42e:	e03b      	b.n	800d4a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d430:	6a3b      	ldr	r3, [r7, #32]
 800d432:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d436:	d037      	beq.n	800d4a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d438:	f7fb faea 	bl	8008a10 <HAL_GetTick>
 800d43c:	4602      	mov	r2, r0
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	1ad3      	subs	r3, r2, r3
 800d442:	6a3a      	ldr	r2, [r7, #32]
 800d444:	429a      	cmp	r2, r3
 800d446:	d302      	bcc.n	800d44e <UART_WaitOnFlagUntilTimeout+0x30>
 800d448:	6a3b      	ldr	r3, [r7, #32]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d101      	bne.n	800d452 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d44e:	2303      	movs	r3, #3
 800d450:	e03a      	b.n	800d4c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	68db      	ldr	r3, [r3, #12]
 800d458:	f003 0304 	and.w	r3, r3, #4
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d023      	beq.n	800d4a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	2b80      	cmp	r3, #128	@ 0x80
 800d464:	d020      	beq.n	800d4a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	2b40      	cmp	r3, #64	@ 0x40
 800d46a:	d01d      	beq.n	800d4a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f003 0308 	and.w	r3, r3, #8
 800d476:	2b08      	cmp	r3, #8
 800d478:	d116      	bne.n	800d4a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800d47a:	2300      	movs	r3, #0
 800d47c:	617b      	str	r3, [r7, #20]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	617b      	str	r3, [r7, #20]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	617b      	str	r3, [r7, #20]
 800d48e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d490:	68f8      	ldr	r0, [r7, #12]
 800d492:	f000 f8eb 	bl	800d66c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2208      	movs	r2, #8
 800d49a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	e00f      	b.n	800d4c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	681a      	ldr	r2, [r3, #0]
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	4013      	ands	r3, r2
 800d4b2:	68ba      	ldr	r2, [r7, #8]
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	bf0c      	ite	eq
 800d4b8:	2301      	moveq	r3, #1
 800d4ba:	2300      	movne	r3, #0
 800d4bc:	b2db      	uxtb	r3, r3
 800d4be:	461a      	mov	r2, r3
 800d4c0:	79fb      	ldrb	r3, [r7, #7]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d0b4      	beq.n	800d430 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d4c6:	2300      	movs	r3, #0
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3718      	adds	r7, #24
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b098      	sub	sp, #96	@ 0x60
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	60f8      	str	r0, [r7, #12]
 800d4d8:	60b9      	str	r1, [r7, #8]
 800d4da:	4613      	mov	r3, r2
 800d4dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800d4de:	68ba      	ldr	r2, [r7, #8]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	88fa      	ldrh	r2, [r7, #6]
 800d4e8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2222      	movs	r2, #34	@ 0x22
 800d4f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4fc:	4a44      	ldr	r2, [pc, #272]	@ (800d610 <UART_Start_Receive_DMA+0x140>)
 800d4fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d504:	4a43      	ldr	r2, [pc, #268]	@ (800d614 <UART_Start_Receive_DMA+0x144>)
 800d506:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d50c:	4a42      	ldr	r2, [pc, #264]	@ (800d618 <UART_Start_Receive_DMA+0x148>)
 800d50e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d514:	2200      	movs	r2, #0
 800d516:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800d518:	f107 0308 	add.w	r3, r7, #8
 800d51c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	3304      	adds	r3, #4
 800d528:	4619      	mov	r1, r3
 800d52a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	88fb      	ldrh	r3, [r7, #6]
 800d530:	f7fc f8b6 	bl	80096a0 <HAL_DMA_Start_IT>
 800d534:	4603      	mov	r3, r0
 800d536:	2b00      	cmp	r3, #0
 800d538:	d008      	beq.n	800d54c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	2210      	movs	r2, #16
 800d53e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	2220      	movs	r2, #32
 800d544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800d548:	2301      	movs	r3, #1
 800d54a:	e05d      	b.n	800d608 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800d54c:	2300      	movs	r3, #0
 800d54e:	613b      	str	r3, [r7, #16]
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	613b      	str	r3, [r7, #16]
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	613b      	str	r3, [r7, #16]
 800d560:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	691b      	ldr	r3, [r3, #16]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d019      	beq.n	800d59e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	330c      	adds	r3, #12
 800d570:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d574:	e853 3f00 	ldrex	r3, [r3]
 800d578:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d57a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d57c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d580:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	330c      	adds	r3, #12
 800d588:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d58a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800d58c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d58e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d590:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d592:	e841 2300 	strex	r3, r2, [r1]
 800d596:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d1e5      	bne.n	800d56a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	3314      	adds	r3, #20
 800d5a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5a8:	e853 3f00 	ldrex	r3, [r3]
 800d5ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b0:	f043 0301 	orr.w	r3, r3, #1
 800d5b4:	657b      	str	r3, [r7, #84]	@ 0x54
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	3314      	adds	r3, #20
 800d5bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d5be:	63ba      	str	r2, [r7, #56]	@ 0x38
 800d5c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d5c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d5c6:	e841 2300 	strex	r3, r2, [r1]
 800d5ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d5cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d1e5      	bne.n	800d59e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	3314      	adds	r3, #20
 800d5d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5da:	69bb      	ldr	r3, [r7, #24]
 800d5dc:	e853 3f00 	ldrex	r3, [r3]
 800d5e0:	617b      	str	r3, [r7, #20]
   return(result);
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5e8:	653b      	str	r3, [r7, #80]	@ 0x50
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	3314      	adds	r3, #20
 800d5f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d5f2:	627a      	str	r2, [r7, #36]	@ 0x24
 800d5f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5f6:	6a39      	ldr	r1, [r7, #32]
 800d5f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5fa:	e841 2300 	strex	r3, r2, [r1]
 800d5fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800d600:	69fb      	ldr	r3, [r7, #28]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d1e5      	bne.n	800d5d2 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800d606:	2300      	movs	r3, #0
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3760      	adds	r7, #96	@ 0x60
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	0800d223 	.word	0x0800d223
 800d614:	0800d34f 	.word	0x0800d34f
 800d618:	0800d38b 	.word	0x0800d38b

0800d61c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b089      	sub	sp, #36	@ 0x24
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	330c      	adds	r3, #12
 800d62a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	e853 3f00 	ldrex	r3, [r3]
 800d632:	60bb      	str	r3, [r7, #8]
   return(result);
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d63a:	61fb      	str	r3, [r7, #28]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	330c      	adds	r3, #12
 800d642:	69fa      	ldr	r2, [r7, #28]
 800d644:	61ba      	str	r2, [r7, #24]
 800d646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d648:	6979      	ldr	r1, [r7, #20]
 800d64a:	69ba      	ldr	r2, [r7, #24]
 800d64c:	e841 2300 	strex	r3, r2, [r1]
 800d650:	613b      	str	r3, [r7, #16]
   return(result);
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d1e5      	bne.n	800d624 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2220      	movs	r2, #32
 800d65c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800d660:	bf00      	nop
 800d662:	3724      	adds	r7, #36	@ 0x24
 800d664:	46bd      	mov	sp, r7
 800d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66a:	4770      	bx	lr

0800d66c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b095      	sub	sp, #84	@ 0x54
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	330c      	adds	r3, #12
 800d67a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d67c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d67e:	e853 3f00 	ldrex	r3, [r3]
 800d682:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d686:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d68a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	330c      	adds	r3, #12
 800d692:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d694:	643a      	str	r2, [r7, #64]	@ 0x40
 800d696:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d698:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d69a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d69c:	e841 2300 	strex	r3, r2, [r1]
 800d6a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d1e5      	bne.n	800d674 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	3314      	adds	r3, #20
 800d6ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6b0:	6a3b      	ldr	r3, [r7, #32]
 800d6b2:	e853 3f00 	ldrex	r3, [r3]
 800d6b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	f023 0301 	bic.w	r3, r3, #1
 800d6be:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	3314      	adds	r3, #20
 800d6c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d6c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d6ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d6ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6d0:	e841 2300 	strex	r3, r2, [r1]
 800d6d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d1e5      	bne.n	800d6a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6e0:	2b01      	cmp	r3, #1
 800d6e2:	d119      	bne.n	800d718 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	330c      	adds	r3, #12
 800d6ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	e853 3f00 	ldrex	r3, [r3]
 800d6f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	f023 0310 	bic.w	r3, r3, #16
 800d6fa:	647b      	str	r3, [r7, #68]	@ 0x44
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	330c      	adds	r3, #12
 800d702:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d704:	61ba      	str	r2, [r7, #24]
 800d706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d708:	6979      	ldr	r1, [r7, #20]
 800d70a:	69ba      	ldr	r2, [r7, #24]
 800d70c:	e841 2300 	strex	r3, r2, [r1]
 800d710:	613b      	str	r3, [r7, #16]
   return(result);
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d1e5      	bne.n	800d6e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2220      	movs	r2, #32
 800d71c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2200      	movs	r2, #0
 800d724:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d726:	bf00      	nop
 800d728:	3754      	adds	r7, #84	@ 0x54
 800d72a:	46bd      	mov	sp, r7
 800d72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d730:	4770      	bx	lr

0800d732 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d732:	b580      	push	{r7, lr}
 800d734:	b084      	sub	sp, #16
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d73e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2200      	movs	r2, #0
 800d744:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d746:	68f8      	ldr	r0, [r7, #12]
 800d748:	f7ff fd06 	bl	800d158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d74c:	bf00      	nop
 800d74e:	3710      	adds	r7, #16
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d754:	b480      	push	{r7}
 800d756:	b085      	sub	sp, #20
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d762:	b2db      	uxtb	r3, r3
 800d764:	2b21      	cmp	r3, #33	@ 0x21
 800d766:	d13e      	bne.n	800d7e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	689b      	ldr	r3, [r3, #8]
 800d76c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d770:	d114      	bne.n	800d79c <UART_Transmit_IT+0x48>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	691b      	ldr	r3, [r3, #16]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d110      	bne.n	800d79c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6a1b      	ldr	r3, [r3, #32]
 800d77e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	881b      	ldrh	r3, [r3, #0]
 800d784:	461a      	mov	r2, r3
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d78e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6a1b      	ldr	r3, [r3, #32]
 800d794:	1c9a      	adds	r2, r3, #2
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	621a      	str	r2, [r3, #32]
 800d79a:	e008      	b.n	800d7ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6a1b      	ldr	r3, [r3, #32]
 800d7a0:	1c59      	adds	r1, r3, #1
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	6211      	str	r1, [r2, #32]
 800d7a6:	781a      	ldrb	r2, [r3, #0]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	3b01      	subs	r3, #1
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	687a      	ldr	r2, [r7, #4]
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10f      	bne.n	800d7e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	68da      	ldr	r2, [r3, #12]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d7d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	68da      	ldr	r2, [r3, #12]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d7e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	e000      	b.n	800d7e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d7e6:	2302      	movs	r3, #2
  }
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3714      	adds	r7, #20
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr

0800d7f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b082      	sub	sp, #8
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	68da      	ldr	r2, [r3, #12]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d80a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2220      	movs	r2, #32
 800d810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f7f8 f85b 	bl	80058d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d81a:	2300      	movs	r3, #0
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3708      	adds	r7, #8
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b08c      	sub	sp, #48	@ 0x30
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800d82c:	2300      	movs	r3, #0
 800d82e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800d830:	2300      	movs	r3, #0
 800d832:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	2b22      	cmp	r3, #34	@ 0x22
 800d83e:	f040 80aa 	bne.w	800d996 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	689b      	ldr	r3, [r3, #8]
 800d846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d84a:	d115      	bne.n	800d878 <UART_Receive_IT+0x54>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	691b      	ldr	r3, [r3, #16]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d111      	bne.n	800d878 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d858:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	685b      	ldr	r3, [r3, #4]
 800d860:	b29b      	uxth	r3, r3
 800d862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d866:	b29a      	uxth	r2, r3
 800d868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d86a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d870:	1c9a      	adds	r2, r3, #2
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	629a      	str	r2, [r3, #40]	@ 0x28
 800d876:	e024      	b.n	800d8c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d87c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	689b      	ldr	r3, [r3, #8]
 800d882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d886:	d007      	beq.n	800d898 <UART_Receive_IT+0x74>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	689b      	ldr	r3, [r3, #8]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d10a      	bne.n	800d8a6 <UART_Receive_IT+0x82>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	691b      	ldr	r3, [r3, #16]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d106      	bne.n	800d8a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	b2da      	uxtb	r2, r3
 800d8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8a2:	701a      	strb	r2, [r3, #0]
 800d8a4:	e008      	b.n	800d8b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8b2:	b2da      	uxtb	r2, r3
 800d8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8bc:	1c5a      	adds	r2, r3, #1
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d8c6:	b29b      	uxth	r3, r3
 800d8c8:	3b01      	subs	r3, #1
 800d8ca:	b29b      	uxth	r3, r3
 800d8cc:	687a      	ldr	r2, [r7, #4]
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d15d      	bne.n	800d992 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	68da      	ldr	r2, [r3, #12]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f022 0220 	bic.w	r2, r2, #32
 800d8e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	68da      	ldr	r2, [r3, #12]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d8f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	695a      	ldr	r2, [r3, #20]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f022 0201 	bic.w	r2, r2, #1
 800d904:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2220      	movs	r2, #32
 800d90a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2200      	movs	r2, #0
 800d912:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d918:	2b01      	cmp	r3, #1
 800d91a:	d135      	bne.n	800d988 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	330c      	adds	r3, #12
 800d928:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	e853 3f00 	ldrex	r3, [r3]
 800d930:	613b      	str	r3, [r7, #16]
   return(result);
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	f023 0310 	bic.w	r3, r3, #16
 800d938:	627b      	str	r3, [r7, #36]	@ 0x24
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	330c      	adds	r3, #12
 800d940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d942:	623a      	str	r2, [r7, #32]
 800d944:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d946:	69f9      	ldr	r1, [r7, #28]
 800d948:	6a3a      	ldr	r2, [r7, #32]
 800d94a:	e841 2300 	strex	r3, r2, [r1]
 800d94e:	61bb      	str	r3, [r7, #24]
   return(result);
 800d950:	69bb      	ldr	r3, [r7, #24]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d1e5      	bne.n	800d922 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f003 0310 	and.w	r3, r3, #16
 800d960:	2b10      	cmp	r3, #16
 800d962:	d10a      	bne.n	800d97a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d964:	2300      	movs	r3, #0
 800d966:	60fb      	str	r3, [r7, #12]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	60fb      	str	r3, [r7, #12]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	60fb      	str	r3, [r7, #12]
 800d978:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d97e:	4619      	mov	r1, r3
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f7f7 ff5f 	bl	8005844 <HAL_UARTEx_RxEventCallback>
 800d986:	e002      	b.n	800d98e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f7f6 ff21 	bl	80047d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d98e:	2300      	movs	r3, #0
 800d990:	e002      	b.n	800d998 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d992:	2300      	movs	r3, #0
 800d994:	e000      	b.n	800d998 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d996:	2302      	movs	r3, #2
  }
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3730      	adds	r7, #48	@ 0x30
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d9a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d9a4:	b0c0      	sub	sp, #256	@ 0x100
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d9ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	691b      	ldr	r3, [r3, #16]
 800d9b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d9b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9bc:	68d9      	ldr	r1, [r3, #12]
 800d9be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9c2:	681a      	ldr	r2, [r3, #0]
 800d9c4:	ea40 0301 	orr.w	r3, r0, r1
 800d9c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d9ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9ce:	689a      	ldr	r2, [r3, #8]
 800d9d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9d4:	691b      	ldr	r3, [r3, #16]
 800d9d6:	431a      	orrs	r2, r3
 800d9d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9dc:	695b      	ldr	r3, [r3, #20]
 800d9de:	431a      	orrs	r2, r3
 800d9e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9e4:	69db      	ldr	r3, [r3, #28]
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d9ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d9f8:	f021 010c 	bic.w	r1, r1, #12
 800d9fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da00:	681a      	ldr	r2, [r3, #0]
 800da02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800da06:	430b      	orrs	r3, r1
 800da08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800da0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	695b      	ldr	r3, [r3, #20]
 800da12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800da16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da1a:	6999      	ldr	r1, [r3, #24]
 800da1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	ea40 0301 	orr.w	r3, r0, r1
 800da26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800da28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	4b8f      	ldr	r3, [pc, #572]	@ (800dc6c <UART_SetConfig+0x2cc>)
 800da30:	429a      	cmp	r2, r3
 800da32:	d005      	beq.n	800da40 <UART_SetConfig+0xa0>
 800da34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	4b8d      	ldr	r3, [pc, #564]	@ (800dc70 <UART_SetConfig+0x2d0>)
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d104      	bne.n	800da4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800da40:	f7fd fdae 	bl	800b5a0 <HAL_RCC_GetPCLK2Freq>
 800da44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800da48:	e003      	b.n	800da52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800da4a:	f7fd fd95 	bl	800b578 <HAL_RCC_GetPCLK1Freq>
 800da4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800da52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da56:	69db      	ldr	r3, [r3, #28]
 800da58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800da5c:	f040 810c 	bne.w	800dc78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800da60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800da64:	2200      	movs	r2, #0
 800da66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800da6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800da6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800da72:	4622      	mov	r2, r4
 800da74:	462b      	mov	r3, r5
 800da76:	1891      	adds	r1, r2, r2
 800da78:	65b9      	str	r1, [r7, #88]	@ 0x58
 800da7a:	415b      	adcs	r3, r3
 800da7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800da7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800da82:	4621      	mov	r1, r4
 800da84:	eb12 0801 	adds.w	r8, r2, r1
 800da88:	4629      	mov	r1, r5
 800da8a:	eb43 0901 	adc.w	r9, r3, r1
 800da8e:	f04f 0200 	mov.w	r2, #0
 800da92:	f04f 0300 	mov.w	r3, #0
 800da96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800da9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800da9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800daa2:	4690      	mov	r8, r2
 800daa4:	4699      	mov	r9, r3
 800daa6:	4623      	mov	r3, r4
 800daa8:	eb18 0303 	adds.w	r3, r8, r3
 800daac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dab0:	462b      	mov	r3, r5
 800dab2:	eb49 0303 	adc.w	r3, r9, r3
 800dab6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800daba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dac6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800daca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800dace:	460b      	mov	r3, r1
 800dad0:	18db      	adds	r3, r3, r3
 800dad2:	653b      	str	r3, [r7, #80]	@ 0x50
 800dad4:	4613      	mov	r3, r2
 800dad6:	eb42 0303 	adc.w	r3, r2, r3
 800dada:	657b      	str	r3, [r7, #84]	@ 0x54
 800dadc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800dae0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800dae4:	f7f3 fa4e 	bl	8000f84 <__aeabi_uldivmod>
 800dae8:	4602      	mov	r2, r0
 800daea:	460b      	mov	r3, r1
 800daec:	4b61      	ldr	r3, [pc, #388]	@ (800dc74 <UART_SetConfig+0x2d4>)
 800daee:	fba3 2302 	umull	r2, r3, r3, r2
 800daf2:	095b      	lsrs	r3, r3, #5
 800daf4:	011c      	lsls	r4, r3, #4
 800daf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dafa:	2200      	movs	r2, #0
 800dafc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800db00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800db04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800db08:	4642      	mov	r2, r8
 800db0a:	464b      	mov	r3, r9
 800db0c:	1891      	adds	r1, r2, r2
 800db0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800db10:	415b      	adcs	r3, r3
 800db12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800db14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800db18:	4641      	mov	r1, r8
 800db1a:	eb12 0a01 	adds.w	sl, r2, r1
 800db1e:	4649      	mov	r1, r9
 800db20:	eb43 0b01 	adc.w	fp, r3, r1
 800db24:	f04f 0200 	mov.w	r2, #0
 800db28:	f04f 0300 	mov.w	r3, #0
 800db2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800db30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800db34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800db38:	4692      	mov	sl, r2
 800db3a:	469b      	mov	fp, r3
 800db3c:	4643      	mov	r3, r8
 800db3e:	eb1a 0303 	adds.w	r3, sl, r3
 800db42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800db46:	464b      	mov	r3, r9
 800db48:	eb4b 0303 	adc.w	r3, fp, r3
 800db4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800db50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800db5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800db60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800db64:	460b      	mov	r3, r1
 800db66:	18db      	adds	r3, r3, r3
 800db68:	643b      	str	r3, [r7, #64]	@ 0x40
 800db6a:	4613      	mov	r3, r2
 800db6c:	eb42 0303 	adc.w	r3, r2, r3
 800db70:	647b      	str	r3, [r7, #68]	@ 0x44
 800db72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800db76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800db7a:	f7f3 fa03 	bl	8000f84 <__aeabi_uldivmod>
 800db7e:	4602      	mov	r2, r0
 800db80:	460b      	mov	r3, r1
 800db82:	4611      	mov	r1, r2
 800db84:	4b3b      	ldr	r3, [pc, #236]	@ (800dc74 <UART_SetConfig+0x2d4>)
 800db86:	fba3 2301 	umull	r2, r3, r3, r1
 800db8a:	095b      	lsrs	r3, r3, #5
 800db8c:	2264      	movs	r2, #100	@ 0x64
 800db8e:	fb02 f303 	mul.w	r3, r2, r3
 800db92:	1acb      	subs	r3, r1, r3
 800db94:	00db      	lsls	r3, r3, #3
 800db96:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800db9a:	4b36      	ldr	r3, [pc, #216]	@ (800dc74 <UART_SetConfig+0x2d4>)
 800db9c:	fba3 2302 	umull	r2, r3, r3, r2
 800dba0:	095b      	lsrs	r3, r3, #5
 800dba2:	005b      	lsls	r3, r3, #1
 800dba4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800dba8:	441c      	add	r4, r3
 800dbaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dbae:	2200      	movs	r2, #0
 800dbb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dbb4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800dbb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800dbbc:	4642      	mov	r2, r8
 800dbbe:	464b      	mov	r3, r9
 800dbc0:	1891      	adds	r1, r2, r2
 800dbc2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800dbc4:	415b      	adcs	r3, r3
 800dbc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dbc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800dbcc:	4641      	mov	r1, r8
 800dbce:	1851      	adds	r1, r2, r1
 800dbd0:	6339      	str	r1, [r7, #48]	@ 0x30
 800dbd2:	4649      	mov	r1, r9
 800dbd4:	414b      	adcs	r3, r1
 800dbd6:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbd8:	f04f 0200 	mov.w	r2, #0
 800dbdc:	f04f 0300 	mov.w	r3, #0
 800dbe0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800dbe4:	4659      	mov	r1, fp
 800dbe6:	00cb      	lsls	r3, r1, #3
 800dbe8:	4651      	mov	r1, sl
 800dbea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dbee:	4651      	mov	r1, sl
 800dbf0:	00ca      	lsls	r2, r1, #3
 800dbf2:	4610      	mov	r0, r2
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	4642      	mov	r2, r8
 800dbfa:	189b      	adds	r3, r3, r2
 800dbfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dc00:	464b      	mov	r3, r9
 800dc02:	460a      	mov	r2, r1
 800dc04:	eb42 0303 	adc.w	r3, r2, r3
 800dc08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dc0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	2200      	movs	r2, #0
 800dc14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800dc18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800dc1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800dc20:	460b      	mov	r3, r1
 800dc22:	18db      	adds	r3, r3, r3
 800dc24:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dc26:	4613      	mov	r3, r2
 800dc28:	eb42 0303 	adc.w	r3, r2, r3
 800dc2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800dc32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800dc36:	f7f3 f9a5 	bl	8000f84 <__aeabi_uldivmod>
 800dc3a:	4602      	mov	r2, r0
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	4b0d      	ldr	r3, [pc, #52]	@ (800dc74 <UART_SetConfig+0x2d4>)
 800dc40:	fba3 1302 	umull	r1, r3, r3, r2
 800dc44:	095b      	lsrs	r3, r3, #5
 800dc46:	2164      	movs	r1, #100	@ 0x64
 800dc48:	fb01 f303 	mul.w	r3, r1, r3
 800dc4c:	1ad3      	subs	r3, r2, r3
 800dc4e:	00db      	lsls	r3, r3, #3
 800dc50:	3332      	adds	r3, #50	@ 0x32
 800dc52:	4a08      	ldr	r2, [pc, #32]	@ (800dc74 <UART_SetConfig+0x2d4>)
 800dc54:	fba2 2303 	umull	r2, r3, r2, r3
 800dc58:	095b      	lsrs	r3, r3, #5
 800dc5a:	f003 0207 	and.w	r2, r3, #7
 800dc5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4422      	add	r2, r4
 800dc66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800dc68:	e106      	b.n	800de78 <UART_SetConfig+0x4d8>
 800dc6a:	bf00      	nop
 800dc6c:	40011000 	.word	0x40011000
 800dc70:	40011400 	.word	0x40011400
 800dc74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dc78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dc82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800dc86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800dc8a:	4642      	mov	r2, r8
 800dc8c:	464b      	mov	r3, r9
 800dc8e:	1891      	adds	r1, r2, r2
 800dc90:	6239      	str	r1, [r7, #32]
 800dc92:	415b      	adcs	r3, r3
 800dc94:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dc9a:	4641      	mov	r1, r8
 800dc9c:	1854      	adds	r4, r2, r1
 800dc9e:	4649      	mov	r1, r9
 800dca0:	eb43 0501 	adc.w	r5, r3, r1
 800dca4:	f04f 0200 	mov.w	r2, #0
 800dca8:	f04f 0300 	mov.w	r3, #0
 800dcac:	00eb      	lsls	r3, r5, #3
 800dcae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dcb2:	00e2      	lsls	r2, r4, #3
 800dcb4:	4614      	mov	r4, r2
 800dcb6:	461d      	mov	r5, r3
 800dcb8:	4643      	mov	r3, r8
 800dcba:	18e3      	adds	r3, r4, r3
 800dcbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800dcc0:	464b      	mov	r3, r9
 800dcc2:	eb45 0303 	adc.w	r3, r5, r3
 800dcc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dcca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dcd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800dcda:	f04f 0200 	mov.w	r2, #0
 800dcde:	f04f 0300 	mov.w	r3, #0
 800dce2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800dce6:	4629      	mov	r1, r5
 800dce8:	008b      	lsls	r3, r1, #2
 800dcea:	4621      	mov	r1, r4
 800dcec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dcf0:	4621      	mov	r1, r4
 800dcf2:	008a      	lsls	r2, r1, #2
 800dcf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800dcf8:	f7f3 f944 	bl	8000f84 <__aeabi_uldivmod>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	460b      	mov	r3, r1
 800dd00:	4b60      	ldr	r3, [pc, #384]	@ (800de84 <UART_SetConfig+0x4e4>)
 800dd02:	fba3 2302 	umull	r2, r3, r3, r2
 800dd06:	095b      	lsrs	r3, r3, #5
 800dd08:	011c      	lsls	r4, r3, #4
 800dd0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dd0e:	2200      	movs	r2, #0
 800dd10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800dd14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800dd18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800dd1c:	4642      	mov	r2, r8
 800dd1e:	464b      	mov	r3, r9
 800dd20:	1891      	adds	r1, r2, r2
 800dd22:	61b9      	str	r1, [r7, #24]
 800dd24:	415b      	adcs	r3, r3
 800dd26:	61fb      	str	r3, [r7, #28]
 800dd28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800dd2c:	4641      	mov	r1, r8
 800dd2e:	1851      	adds	r1, r2, r1
 800dd30:	6139      	str	r1, [r7, #16]
 800dd32:	4649      	mov	r1, r9
 800dd34:	414b      	adcs	r3, r1
 800dd36:	617b      	str	r3, [r7, #20]
 800dd38:	f04f 0200 	mov.w	r2, #0
 800dd3c:	f04f 0300 	mov.w	r3, #0
 800dd40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800dd44:	4659      	mov	r1, fp
 800dd46:	00cb      	lsls	r3, r1, #3
 800dd48:	4651      	mov	r1, sl
 800dd4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dd4e:	4651      	mov	r1, sl
 800dd50:	00ca      	lsls	r2, r1, #3
 800dd52:	4610      	mov	r0, r2
 800dd54:	4619      	mov	r1, r3
 800dd56:	4603      	mov	r3, r0
 800dd58:	4642      	mov	r2, r8
 800dd5a:	189b      	adds	r3, r3, r2
 800dd5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dd60:	464b      	mov	r3, r9
 800dd62:	460a      	mov	r2, r1
 800dd64:	eb42 0303 	adc.w	r3, r2, r3
 800dd68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dd6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	2200      	movs	r2, #0
 800dd74:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dd76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800dd78:	f04f 0200 	mov.w	r2, #0
 800dd7c:	f04f 0300 	mov.w	r3, #0
 800dd80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800dd84:	4649      	mov	r1, r9
 800dd86:	008b      	lsls	r3, r1, #2
 800dd88:	4641      	mov	r1, r8
 800dd8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dd8e:	4641      	mov	r1, r8
 800dd90:	008a      	lsls	r2, r1, #2
 800dd92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800dd96:	f7f3 f8f5 	bl	8000f84 <__aeabi_uldivmod>
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	460b      	mov	r3, r1
 800dd9e:	4611      	mov	r1, r2
 800dda0:	4b38      	ldr	r3, [pc, #224]	@ (800de84 <UART_SetConfig+0x4e4>)
 800dda2:	fba3 2301 	umull	r2, r3, r3, r1
 800dda6:	095b      	lsrs	r3, r3, #5
 800dda8:	2264      	movs	r2, #100	@ 0x64
 800ddaa:	fb02 f303 	mul.w	r3, r2, r3
 800ddae:	1acb      	subs	r3, r1, r3
 800ddb0:	011b      	lsls	r3, r3, #4
 800ddb2:	3332      	adds	r3, #50	@ 0x32
 800ddb4:	4a33      	ldr	r2, [pc, #204]	@ (800de84 <UART_SetConfig+0x4e4>)
 800ddb6:	fba2 2303 	umull	r2, r3, r2, r3
 800ddba:	095b      	lsrs	r3, r3, #5
 800ddbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ddc0:	441c      	add	r4, r3
 800ddc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	673b      	str	r3, [r7, #112]	@ 0x70
 800ddca:	677a      	str	r2, [r7, #116]	@ 0x74
 800ddcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ddd0:	4642      	mov	r2, r8
 800ddd2:	464b      	mov	r3, r9
 800ddd4:	1891      	adds	r1, r2, r2
 800ddd6:	60b9      	str	r1, [r7, #8]
 800ddd8:	415b      	adcs	r3, r3
 800ddda:	60fb      	str	r3, [r7, #12]
 800dddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dde0:	4641      	mov	r1, r8
 800dde2:	1851      	adds	r1, r2, r1
 800dde4:	6039      	str	r1, [r7, #0]
 800dde6:	4649      	mov	r1, r9
 800dde8:	414b      	adcs	r3, r1
 800ddea:	607b      	str	r3, [r7, #4]
 800ddec:	f04f 0200 	mov.w	r2, #0
 800ddf0:	f04f 0300 	mov.w	r3, #0
 800ddf4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ddf8:	4659      	mov	r1, fp
 800ddfa:	00cb      	lsls	r3, r1, #3
 800ddfc:	4651      	mov	r1, sl
 800ddfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800de02:	4651      	mov	r1, sl
 800de04:	00ca      	lsls	r2, r1, #3
 800de06:	4610      	mov	r0, r2
 800de08:	4619      	mov	r1, r3
 800de0a:	4603      	mov	r3, r0
 800de0c:	4642      	mov	r2, r8
 800de0e:	189b      	adds	r3, r3, r2
 800de10:	66bb      	str	r3, [r7, #104]	@ 0x68
 800de12:	464b      	mov	r3, r9
 800de14:	460a      	mov	r2, r1
 800de16:	eb42 0303 	adc.w	r3, r2, r3
 800de1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800de1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	2200      	movs	r2, #0
 800de24:	663b      	str	r3, [r7, #96]	@ 0x60
 800de26:	667a      	str	r2, [r7, #100]	@ 0x64
 800de28:	f04f 0200 	mov.w	r2, #0
 800de2c:	f04f 0300 	mov.w	r3, #0
 800de30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800de34:	4649      	mov	r1, r9
 800de36:	008b      	lsls	r3, r1, #2
 800de38:	4641      	mov	r1, r8
 800de3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800de3e:	4641      	mov	r1, r8
 800de40:	008a      	lsls	r2, r1, #2
 800de42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800de46:	f7f3 f89d 	bl	8000f84 <__aeabi_uldivmod>
 800de4a:	4602      	mov	r2, r0
 800de4c:	460b      	mov	r3, r1
 800de4e:	4b0d      	ldr	r3, [pc, #52]	@ (800de84 <UART_SetConfig+0x4e4>)
 800de50:	fba3 1302 	umull	r1, r3, r3, r2
 800de54:	095b      	lsrs	r3, r3, #5
 800de56:	2164      	movs	r1, #100	@ 0x64
 800de58:	fb01 f303 	mul.w	r3, r1, r3
 800de5c:	1ad3      	subs	r3, r2, r3
 800de5e:	011b      	lsls	r3, r3, #4
 800de60:	3332      	adds	r3, #50	@ 0x32
 800de62:	4a08      	ldr	r2, [pc, #32]	@ (800de84 <UART_SetConfig+0x4e4>)
 800de64:	fba2 2303 	umull	r2, r3, r2, r3
 800de68:	095b      	lsrs	r3, r3, #5
 800de6a:	f003 020f 	and.w	r2, r3, #15
 800de6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	4422      	add	r2, r4
 800de76:	609a      	str	r2, [r3, #8]
}
 800de78:	bf00      	nop
 800de7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800de7e:	46bd      	mov	sp, r7
 800de80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800de84:	51eb851f 	.word	0x51eb851f

0800de88 <calloc>:
 800de88:	4b02      	ldr	r3, [pc, #8]	@ (800de94 <calloc+0xc>)
 800de8a:	460a      	mov	r2, r1
 800de8c:	4601      	mov	r1, r0
 800de8e:	6818      	ldr	r0, [r3, #0]
 800de90:	f000 b802 	b.w	800de98 <_calloc_r>
 800de94:	200001c4 	.word	0x200001c4

0800de98 <_calloc_r>:
 800de98:	b570      	push	{r4, r5, r6, lr}
 800de9a:	fba1 5402 	umull	r5, r4, r1, r2
 800de9e:	b934      	cbnz	r4, 800deae <_calloc_r+0x16>
 800dea0:	4629      	mov	r1, r5
 800dea2:	f000 faf9 	bl	800e498 <_malloc_r>
 800dea6:	4606      	mov	r6, r0
 800dea8:	b928      	cbnz	r0, 800deb6 <_calloc_r+0x1e>
 800deaa:	4630      	mov	r0, r6
 800deac:	bd70      	pop	{r4, r5, r6, pc}
 800deae:	220c      	movs	r2, #12
 800deb0:	6002      	str	r2, [r0, #0]
 800deb2:	2600      	movs	r6, #0
 800deb4:	e7f9      	b.n	800deaa <_calloc_r+0x12>
 800deb6:	462a      	mov	r2, r5
 800deb8:	4621      	mov	r1, r4
 800deba:	f001 fefd 	bl	800fcb8 <memset>
 800debe:	e7f4      	b.n	800deaa <_calloc_r+0x12>

0800dec0 <__cvt>:
 800dec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dec4:	ec57 6b10 	vmov	r6, r7, d0
 800dec8:	2f00      	cmp	r7, #0
 800deca:	460c      	mov	r4, r1
 800decc:	4619      	mov	r1, r3
 800dece:	463b      	mov	r3, r7
 800ded0:	bfbb      	ittet	lt
 800ded2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ded6:	461f      	movlt	r7, r3
 800ded8:	2300      	movge	r3, #0
 800deda:	232d      	movlt	r3, #45	@ 0x2d
 800dedc:	700b      	strb	r3, [r1, #0]
 800dede:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dee0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800dee4:	4691      	mov	r9, r2
 800dee6:	f023 0820 	bic.w	r8, r3, #32
 800deea:	bfbc      	itt	lt
 800deec:	4632      	movlt	r2, r6
 800deee:	4616      	movlt	r6, r2
 800def0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800def4:	d005      	beq.n	800df02 <__cvt+0x42>
 800def6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800defa:	d100      	bne.n	800defe <__cvt+0x3e>
 800defc:	3401      	adds	r4, #1
 800defe:	2102      	movs	r1, #2
 800df00:	e000      	b.n	800df04 <__cvt+0x44>
 800df02:	2103      	movs	r1, #3
 800df04:	ab03      	add	r3, sp, #12
 800df06:	9301      	str	r3, [sp, #4]
 800df08:	ab02      	add	r3, sp, #8
 800df0a:	9300      	str	r3, [sp, #0]
 800df0c:	ec47 6b10 	vmov	d0, r6, r7
 800df10:	4653      	mov	r3, sl
 800df12:	4622      	mov	r2, r4
 800df14:	f002 f830 	bl	800ff78 <_dtoa_r>
 800df18:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800df1c:	4605      	mov	r5, r0
 800df1e:	d119      	bne.n	800df54 <__cvt+0x94>
 800df20:	f019 0f01 	tst.w	r9, #1
 800df24:	d00e      	beq.n	800df44 <__cvt+0x84>
 800df26:	eb00 0904 	add.w	r9, r0, r4
 800df2a:	2200      	movs	r2, #0
 800df2c:	2300      	movs	r3, #0
 800df2e:	4630      	mov	r0, r6
 800df30:	4639      	mov	r1, r7
 800df32:	f7f2 fde9 	bl	8000b08 <__aeabi_dcmpeq>
 800df36:	b108      	cbz	r0, 800df3c <__cvt+0x7c>
 800df38:	f8cd 900c 	str.w	r9, [sp, #12]
 800df3c:	2230      	movs	r2, #48	@ 0x30
 800df3e:	9b03      	ldr	r3, [sp, #12]
 800df40:	454b      	cmp	r3, r9
 800df42:	d31e      	bcc.n	800df82 <__cvt+0xc2>
 800df44:	9b03      	ldr	r3, [sp, #12]
 800df46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df48:	1b5b      	subs	r3, r3, r5
 800df4a:	4628      	mov	r0, r5
 800df4c:	6013      	str	r3, [r2, #0]
 800df4e:	b004      	add	sp, #16
 800df50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800df58:	eb00 0904 	add.w	r9, r0, r4
 800df5c:	d1e5      	bne.n	800df2a <__cvt+0x6a>
 800df5e:	7803      	ldrb	r3, [r0, #0]
 800df60:	2b30      	cmp	r3, #48	@ 0x30
 800df62:	d10a      	bne.n	800df7a <__cvt+0xba>
 800df64:	2200      	movs	r2, #0
 800df66:	2300      	movs	r3, #0
 800df68:	4630      	mov	r0, r6
 800df6a:	4639      	mov	r1, r7
 800df6c:	f7f2 fdcc 	bl	8000b08 <__aeabi_dcmpeq>
 800df70:	b918      	cbnz	r0, 800df7a <__cvt+0xba>
 800df72:	f1c4 0401 	rsb	r4, r4, #1
 800df76:	f8ca 4000 	str.w	r4, [sl]
 800df7a:	f8da 3000 	ldr.w	r3, [sl]
 800df7e:	4499      	add	r9, r3
 800df80:	e7d3      	b.n	800df2a <__cvt+0x6a>
 800df82:	1c59      	adds	r1, r3, #1
 800df84:	9103      	str	r1, [sp, #12]
 800df86:	701a      	strb	r2, [r3, #0]
 800df88:	e7d9      	b.n	800df3e <__cvt+0x7e>

0800df8a <__exponent>:
 800df8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df8c:	2900      	cmp	r1, #0
 800df8e:	bfba      	itte	lt
 800df90:	4249      	neglt	r1, r1
 800df92:	232d      	movlt	r3, #45	@ 0x2d
 800df94:	232b      	movge	r3, #43	@ 0x2b
 800df96:	2909      	cmp	r1, #9
 800df98:	7002      	strb	r2, [r0, #0]
 800df9a:	7043      	strb	r3, [r0, #1]
 800df9c:	dd29      	ble.n	800dff2 <__exponent+0x68>
 800df9e:	f10d 0307 	add.w	r3, sp, #7
 800dfa2:	461d      	mov	r5, r3
 800dfa4:	270a      	movs	r7, #10
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	fbb1 f6f7 	udiv	r6, r1, r7
 800dfac:	fb07 1416 	mls	r4, r7, r6, r1
 800dfb0:	3430      	adds	r4, #48	@ 0x30
 800dfb2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800dfb6:	460c      	mov	r4, r1
 800dfb8:	2c63      	cmp	r4, #99	@ 0x63
 800dfba:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800dfbe:	4631      	mov	r1, r6
 800dfc0:	dcf1      	bgt.n	800dfa6 <__exponent+0x1c>
 800dfc2:	3130      	adds	r1, #48	@ 0x30
 800dfc4:	1e94      	subs	r4, r2, #2
 800dfc6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dfca:	1c41      	adds	r1, r0, #1
 800dfcc:	4623      	mov	r3, r4
 800dfce:	42ab      	cmp	r3, r5
 800dfd0:	d30a      	bcc.n	800dfe8 <__exponent+0x5e>
 800dfd2:	f10d 0309 	add.w	r3, sp, #9
 800dfd6:	1a9b      	subs	r3, r3, r2
 800dfd8:	42ac      	cmp	r4, r5
 800dfda:	bf88      	it	hi
 800dfdc:	2300      	movhi	r3, #0
 800dfde:	3302      	adds	r3, #2
 800dfe0:	4403      	add	r3, r0
 800dfe2:	1a18      	subs	r0, r3, r0
 800dfe4:	b003      	add	sp, #12
 800dfe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfe8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800dfec:	f801 6f01 	strb.w	r6, [r1, #1]!
 800dff0:	e7ed      	b.n	800dfce <__exponent+0x44>
 800dff2:	2330      	movs	r3, #48	@ 0x30
 800dff4:	3130      	adds	r1, #48	@ 0x30
 800dff6:	7083      	strb	r3, [r0, #2]
 800dff8:	70c1      	strb	r1, [r0, #3]
 800dffa:	1d03      	adds	r3, r0, #4
 800dffc:	e7f1      	b.n	800dfe2 <__exponent+0x58>
	...

0800e000 <_printf_float>:
 800e000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e004:	b08d      	sub	sp, #52	@ 0x34
 800e006:	460c      	mov	r4, r1
 800e008:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e00c:	4616      	mov	r6, r2
 800e00e:	461f      	mov	r7, r3
 800e010:	4605      	mov	r5, r0
 800e012:	f001 fef5 	bl	800fe00 <_localeconv_r>
 800e016:	6803      	ldr	r3, [r0, #0]
 800e018:	9304      	str	r3, [sp, #16]
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7f2 f948 	bl	80002b0 <strlen>
 800e020:	2300      	movs	r3, #0
 800e022:	930a      	str	r3, [sp, #40]	@ 0x28
 800e024:	f8d8 3000 	ldr.w	r3, [r8]
 800e028:	9005      	str	r0, [sp, #20]
 800e02a:	3307      	adds	r3, #7
 800e02c:	f023 0307 	bic.w	r3, r3, #7
 800e030:	f103 0208 	add.w	r2, r3, #8
 800e034:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e038:	f8d4 b000 	ldr.w	fp, [r4]
 800e03c:	f8c8 2000 	str.w	r2, [r8]
 800e040:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e044:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e048:	9307      	str	r3, [sp, #28]
 800e04a:	f8cd 8018 	str.w	r8, [sp, #24]
 800e04e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e052:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e056:	4b9c      	ldr	r3, [pc, #624]	@ (800e2c8 <_printf_float+0x2c8>)
 800e058:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e05c:	f7f2 fd86 	bl	8000b6c <__aeabi_dcmpun>
 800e060:	bb70      	cbnz	r0, 800e0c0 <_printf_float+0xc0>
 800e062:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e066:	4b98      	ldr	r3, [pc, #608]	@ (800e2c8 <_printf_float+0x2c8>)
 800e068:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e06c:	f7f2 fd60 	bl	8000b30 <__aeabi_dcmple>
 800e070:	bb30      	cbnz	r0, 800e0c0 <_printf_float+0xc0>
 800e072:	2200      	movs	r2, #0
 800e074:	2300      	movs	r3, #0
 800e076:	4640      	mov	r0, r8
 800e078:	4649      	mov	r1, r9
 800e07a:	f7f2 fd4f 	bl	8000b1c <__aeabi_dcmplt>
 800e07e:	b110      	cbz	r0, 800e086 <_printf_float+0x86>
 800e080:	232d      	movs	r3, #45	@ 0x2d
 800e082:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e086:	4a91      	ldr	r2, [pc, #580]	@ (800e2cc <_printf_float+0x2cc>)
 800e088:	4b91      	ldr	r3, [pc, #580]	@ (800e2d0 <_printf_float+0x2d0>)
 800e08a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e08e:	bf8c      	ite	hi
 800e090:	4690      	movhi	r8, r2
 800e092:	4698      	movls	r8, r3
 800e094:	2303      	movs	r3, #3
 800e096:	6123      	str	r3, [r4, #16]
 800e098:	f02b 0304 	bic.w	r3, fp, #4
 800e09c:	6023      	str	r3, [r4, #0]
 800e09e:	f04f 0900 	mov.w	r9, #0
 800e0a2:	9700      	str	r7, [sp, #0]
 800e0a4:	4633      	mov	r3, r6
 800e0a6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e0a8:	4621      	mov	r1, r4
 800e0aa:	4628      	mov	r0, r5
 800e0ac:	f000 fa74 	bl	800e598 <_printf_common>
 800e0b0:	3001      	adds	r0, #1
 800e0b2:	f040 808d 	bne.w	800e1d0 <_printf_float+0x1d0>
 800e0b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e0ba:	b00d      	add	sp, #52	@ 0x34
 800e0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0c0:	4642      	mov	r2, r8
 800e0c2:	464b      	mov	r3, r9
 800e0c4:	4640      	mov	r0, r8
 800e0c6:	4649      	mov	r1, r9
 800e0c8:	f7f2 fd50 	bl	8000b6c <__aeabi_dcmpun>
 800e0cc:	b140      	cbz	r0, 800e0e0 <_printf_float+0xe0>
 800e0ce:	464b      	mov	r3, r9
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	bfbc      	itt	lt
 800e0d4:	232d      	movlt	r3, #45	@ 0x2d
 800e0d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e0da:	4a7e      	ldr	r2, [pc, #504]	@ (800e2d4 <_printf_float+0x2d4>)
 800e0dc:	4b7e      	ldr	r3, [pc, #504]	@ (800e2d8 <_printf_float+0x2d8>)
 800e0de:	e7d4      	b.n	800e08a <_printf_float+0x8a>
 800e0e0:	6863      	ldr	r3, [r4, #4]
 800e0e2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e0e6:	9206      	str	r2, [sp, #24]
 800e0e8:	1c5a      	adds	r2, r3, #1
 800e0ea:	d13b      	bne.n	800e164 <_printf_float+0x164>
 800e0ec:	2306      	movs	r3, #6
 800e0ee:	6063      	str	r3, [r4, #4]
 800e0f0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	6022      	str	r2, [r4, #0]
 800e0f8:	9303      	str	r3, [sp, #12]
 800e0fa:	ab0a      	add	r3, sp, #40	@ 0x28
 800e0fc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e100:	ab09      	add	r3, sp, #36	@ 0x24
 800e102:	9300      	str	r3, [sp, #0]
 800e104:	6861      	ldr	r1, [r4, #4]
 800e106:	ec49 8b10 	vmov	d0, r8, r9
 800e10a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e10e:	4628      	mov	r0, r5
 800e110:	f7ff fed6 	bl	800dec0 <__cvt>
 800e114:	9b06      	ldr	r3, [sp, #24]
 800e116:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e118:	2b47      	cmp	r3, #71	@ 0x47
 800e11a:	4680      	mov	r8, r0
 800e11c:	d129      	bne.n	800e172 <_printf_float+0x172>
 800e11e:	1cc8      	adds	r0, r1, #3
 800e120:	db02      	blt.n	800e128 <_printf_float+0x128>
 800e122:	6863      	ldr	r3, [r4, #4]
 800e124:	4299      	cmp	r1, r3
 800e126:	dd41      	ble.n	800e1ac <_printf_float+0x1ac>
 800e128:	f1aa 0a02 	sub.w	sl, sl, #2
 800e12c:	fa5f fa8a 	uxtb.w	sl, sl
 800e130:	3901      	subs	r1, #1
 800e132:	4652      	mov	r2, sl
 800e134:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e138:	9109      	str	r1, [sp, #36]	@ 0x24
 800e13a:	f7ff ff26 	bl	800df8a <__exponent>
 800e13e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e140:	1813      	adds	r3, r2, r0
 800e142:	2a01      	cmp	r2, #1
 800e144:	4681      	mov	r9, r0
 800e146:	6123      	str	r3, [r4, #16]
 800e148:	dc02      	bgt.n	800e150 <_printf_float+0x150>
 800e14a:	6822      	ldr	r2, [r4, #0]
 800e14c:	07d2      	lsls	r2, r2, #31
 800e14e:	d501      	bpl.n	800e154 <_printf_float+0x154>
 800e150:	3301      	adds	r3, #1
 800e152:	6123      	str	r3, [r4, #16]
 800e154:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d0a2      	beq.n	800e0a2 <_printf_float+0xa2>
 800e15c:	232d      	movs	r3, #45	@ 0x2d
 800e15e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e162:	e79e      	b.n	800e0a2 <_printf_float+0xa2>
 800e164:	9a06      	ldr	r2, [sp, #24]
 800e166:	2a47      	cmp	r2, #71	@ 0x47
 800e168:	d1c2      	bne.n	800e0f0 <_printf_float+0xf0>
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d1c0      	bne.n	800e0f0 <_printf_float+0xf0>
 800e16e:	2301      	movs	r3, #1
 800e170:	e7bd      	b.n	800e0ee <_printf_float+0xee>
 800e172:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e176:	d9db      	bls.n	800e130 <_printf_float+0x130>
 800e178:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e17c:	d118      	bne.n	800e1b0 <_printf_float+0x1b0>
 800e17e:	2900      	cmp	r1, #0
 800e180:	6863      	ldr	r3, [r4, #4]
 800e182:	dd0b      	ble.n	800e19c <_printf_float+0x19c>
 800e184:	6121      	str	r1, [r4, #16]
 800e186:	b913      	cbnz	r3, 800e18e <_printf_float+0x18e>
 800e188:	6822      	ldr	r2, [r4, #0]
 800e18a:	07d0      	lsls	r0, r2, #31
 800e18c:	d502      	bpl.n	800e194 <_printf_float+0x194>
 800e18e:	3301      	adds	r3, #1
 800e190:	440b      	add	r3, r1
 800e192:	6123      	str	r3, [r4, #16]
 800e194:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e196:	f04f 0900 	mov.w	r9, #0
 800e19a:	e7db      	b.n	800e154 <_printf_float+0x154>
 800e19c:	b913      	cbnz	r3, 800e1a4 <_printf_float+0x1a4>
 800e19e:	6822      	ldr	r2, [r4, #0]
 800e1a0:	07d2      	lsls	r2, r2, #31
 800e1a2:	d501      	bpl.n	800e1a8 <_printf_float+0x1a8>
 800e1a4:	3302      	adds	r3, #2
 800e1a6:	e7f4      	b.n	800e192 <_printf_float+0x192>
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	e7f2      	b.n	800e192 <_printf_float+0x192>
 800e1ac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e1b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1b2:	4299      	cmp	r1, r3
 800e1b4:	db05      	blt.n	800e1c2 <_printf_float+0x1c2>
 800e1b6:	6823      	ldr	r3, [r4, #0]
 800e1b8:	6121      	str	r1, [r4, #16]
 800e1ba:	07d8      	lsls	r0, r3, #31
 800e1bc:	d5ea      	bpl.n	800e194 <_printf_float+0x194>
 800e1be:	1c4b      	adds	r3, r1, #1
 800e1c0:	e7e7      	b.n	800e192 <_printf_float+0x192>
 800e1c2:	2900      	cmp	r1, #0
 800e1c4:	bfd4      	ite	le
 800e1c6:	f1c1 0202 	rsble	r2, r1, #2
 800e1ca:	2201      	movgt	r2, #1
 800e1cc:	4413      	add	r3, r2
 800e1ce:	e7e0      	b.n	800e192 <_printf_float+0x192>
 800e1d0:	6823      	ldr	r3, [r4, #0]
 800e1d2:	055a      	lsls	r2, r3, #21
 800e1d4:	d407      	bmi.n	800e1e6 <_printf_float+0x1e6>
 800e1d6:	6923      	ldr	r3, [r4, #16]
 800e1d8:	4642      	mov	r2, r8
 800e1da:	4631      	mov	r1, r6
 800e1dc:	4628      	mov	r0, r5
 800e1de:	47b8      	blx	r7
 800e1e0:	3001      	adds	r0, #1
 800e1e2:	d12b      	bne.n	800e23c <_printf_float+0x23c>
 800e1e4:	e767      	b.n	800e0b6 <_printf_float+0xb6>
 800e1e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e1ea:	f240 80dd 	bls.w	800e3a8 <_printf_float+0x3a8>
 800e1ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	f7f2 fc87 	bl	8000b08 <__aeabi_dcmpeq>
 800e1fa:	2800      	cmp	r0, #0
 800e1fc:	d033      	beq.n	800e266 <_printf_float+0x266>
 800e1fe:	4a37      	ldr	r2, [pc, #220]	@ (800e2dc <_printf_float+0x2dc>)
 800e200:	2301      	movs	r3, #1
 800e202:	4631      	mov	r1, r6
 800e204:	4628      	mov	r0, r5
 800e206:	47b8      	blx	r7
 800e208:	3001      	adds	r0, #1
 800e20a:	f43f af54 	beq.w	800e0b6 <_printf_float+0xb6>
 800e20e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e212:	4543      	cmp	r3, r8
 800e214:	db02      	blt.n	800e21c <_printf_float+0x21c>
 800e216:	6823      	ldr	r3, [r4, #0]
 800e218:	07d8      	lsls	r0, r3, #31
 800e21a:	d50f      	bpl.n	800e23c <_printf_float+0x23c>
 800e21c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e220:	4631      	mov	r1, r6
 800e222:	4628      	mov	r0, r5
 800e224:	47b8      	blx	r7
 800e226:	3001      	adds	r0, #1
 800e228:	f43f af45 	beq.w	800e0b6 <_printf_float+0xb6>
 800e22c:	f04f 0900 	mov.w	r9, #0
 800e230:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800e234:	f104 0a1a 	add.w	sl, r4, #26
 800e238:	45c8      	cmp	r8, r9
 800e23a:	dc09      	bgt.n	800e250 <_printf_float+0x250>
 800e23c:	6823      	ldr	r3, [r4, #0]
 800e23e:	079b      	lsls	r3, r3, #30
 800e240:	f100 8103 	bmi.w	800e44a <_printf_float+0x44a>
 800e244:	68e0      	ldr	r0, [r4, #12]
 800e246:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e248:	4298      	cmp	r0, r3
 800e24a:	bfb8      	it	lt
 800e24c:	4618      	movlt	r0, r3
 800e24e:	e734      	b.n	800e0ba <_printf_float+0xba>
 800e250:	2301      	movs	r3, #1
 800e252:	4652      	mov	r2, sl
 800e254:	4631      	mov	r1, r6
 800e256:	4628      	mov	r0, r5
 800e258:	47b8      	blx	r7
 800e25a:	3001      	adds	r0, #1
 800e25c:	f43f af2b 	beq.w	800e0b6 <_printf_float+0xb6>
 800e260:	f109 0901 	add.w	r9, r9, #1
 800e264:	e7e8      	b.n	800e238 <_printf_float+0x238>
 800e266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e268:	2b00      	cmp	r3, #0
 800e26a:	dc39      	bgt.n	800e2e0 <_printf_float+0x2e0>
 800e26c:	4a1b      	ldr	r2, [pc, #108]	@ (800e2dc <_printf_float+0x2dc>)
 800e26e:	2301      	movs	r3, #1
 800e270:	4631      	mov	r1, r6
 800e272:	4628      	mov	r0, r5
 800e274:	47b8      	blx	r7
 800e276:	3001      	adds	r0, #1
 800e278:	f43f af1d 	beq.w	800e0b6 <_printf_float+0xb6>
 800e27c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e280:	ea59 0303 	orrs.w	r3, r9, r3
 800e284:	d102      	bne.n	800e28c <_printf_float+0x28c>
 800e286:	6823      	ldr	r3, [r4, #0]
 800e288:	07d9      	lsls	r1, r3, #31
 800e28a:	d5d7      	bpl.n	800e23c <_printf_float+0x23c>
 800e28c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e290:	4631      	mov	r1, r6
 800e292:	4628      	mov	r0, r5
 800e294:	47b8      	blx	r7
 800e296:	3001      	adds	r0, #1
 800e298:	f43f af0d 	beq.w	800e0b6 <_printf_float+0xb6>
 800e29c:	f04f 0a00 	mov.w	sl, #0
 800e2a0:	f104 0b1a 	add.w	fp, r4, #26
 800e2a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2a6:	425b      	negs	r3, r3
 800e2a8:	4553      	cmp	r3, sl
 800e2aa:	dc01      	bgt.n	800e2b0 <_printf_float+0x2b0>
 800e2ac:	464b      	mov	r3, r9
 800e2ae:	e793      	b.n	800e1d8 <_printf_float+0x1d8>
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	465a      	mov	r2, fp
 800e2b4:	4631      	mov	r1, r6
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	47b8      	blx	r7
 800e2ba:	3001      	adds	r0, #1
 800e2bc:	f43f aefb 	beq.w	800e0b6 <_printf_float+0xb6>
 800e2c0:	f10a 0a01 	add.w	sl, sl, #1
 800e2c4:	e7ee      	b.n	800e2a4 <_printf_float+0x2a4>
 800e2c6:	bf00      	nop
 800e2c8:	7fefffff 	.word	0x7fefffff
 800e2cc:	080156d0 	.word	0x080156d0
 800e2d0:	080156cc 	.word	0x080156cc
 800e2d4:	080156d8 	.word	0x080156d8
 800e2d8:	080156d4 	.word	0x080156d4
 800e2dc:	08015821 	.word	0x08015821
 800e2e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e2e2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e2e6:	4553      	cmp	r3, sl
 800e2e8:	bfa8      	it	ge
 800e2ea:	4653      	movge	r3, sl
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	4699      	mov	r9, r3
 800e2f0:	dc36      	bgt.n	800e360 <_printf_float+0x360>
 800e2f2:	f04f 0b00 	mov.w	fp, #0
 800e2f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2fa:	f104 021a 	add.w	r2, r4, #26
 800e2fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e300:	9306      	str	r3, [sp, #24]
 800e302:	eba3 0309 	sub.w	r3, r3, r9
 800e306:	455b      	cmp	r3, fp
 800e308:	dc31      	bgt.n	800e36e <_printf_float+0x36e>
 800e30a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e30c:	459a      	cmp	sl, r3
 800e30e:	dc3a      	bgt.n	800e386 <_printf_float+0x386>
 800e310:	6823      	ldr	r3, [r4, #0]
 800e312:	07da      	lsls	r2, r3, #31
 800e314:	d437      	bmi.n	800e386 <_printf_float+0x386>
 800e316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e318:	ebaa 0903 	sub.w	r9, sl, r3
 800e31c:	9b06      	ldr	r3, [sp, #24]
 800e31e:	ebaa 0303 	sub.w	r3, sl, r3
 800e322:	4599      	cmp	r9, r3
 800e324:	bfa8      	it	ge
 800e326:	4699      	movge	r9, r3
 800e328:	f1b9 0f00 	cmp.w	r9, #0
 800e32c:	dc33      	bgt.n	800e396 <_printf_float+0x396>
 800e32e:	f04f 0800 	mov.w	r8, #0
 800e332:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e336:	f104 0b1a 	add.w	fp, r4, #26
 800e33a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e33c:	ebaa 0303 	sub.w	r3, sl, r3
 800e340:	eba3 0309 	sub.w	r3, r3, r9
 800e344:	4543      	cmp	r3, r8
 800e346:	f77f af79 	ble.w	800e23c <_printf_float+0x23c>
 800e34a:	2301      	movs	r3, #1
 800e34c:	465a      	mov	r2, fp
 800e34e:	4631      	mov	r1, r6
 800e350:	4628      	mov	r0, r5
 800e352:	47b8      	blx	r7
 800e354:	3001      	adds	r0, #1
 800e356:	f43f aeae 	beq.w	800e0b6 <_printf_float+0xb6>
 800e35a:	f108 0801 	add.w	r8, r8, #1
 800e35e:	e7ec      	b.n	800e33a <_printf_float+0x33a>
 800e360:	4642      	mov	r2, r8
 800e362:	4631      	mov	r1, r6
 800e364:	4628      	mov	r0, r5
 800e366:	47b8      	blx	r7
 800e368:	3001      	adds	r0, #1
 800e36a:	d1c2      	bne.n	800e2f2 <_printf_float+0x2f2>
 800e36c:	e6a3      	b.n	800e0b6 <_printf_float+0xb6>
 800e36e:	2301      	movs	r3, #1
 800e370:	4631      	mov	r1, r6
 800e372:	4628      	mov	r0, r5
 800e374:	9206      	str	r2, [sp, #24]
 800e376:	47b8      	blx	r7
 800e378:	3001      	adds	r0, #1
 800e37a:	f43f ae9c 	beq.w	800e0b6 <_printf_float+0xb6>
 800e37e:	9a06      	ldr	r2, [sp, #24]
 800e380:	f10b 0b01 	add.w	fp, fp, #1
 800e384:	e7bb      	b.n	800e2fe <_printf_float+0x2fe>
 800e386:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e38a:	4631      	mov	r1, r6
 800e38c:	4628      	mov	r0, r5
 800e38e:	47b8      	blx	r7
 800e390:	3001      	adds	r0, #1
 800e392:	d1c0      	bne.n	800e316 <_printf_float+0x316>
 800e394:	e68f      	b.n	800e0b6 <_printf_float+0xb6>
 800e396:	9a06      	ldr	r2, [sp, #24]
 800e398:	464b      	mov	r3, r9
 800e39a:	4442      	add	r2, r8
 800e39c:	4631      	mov	r1, r6
 800e39e:	4628      	mov	r0, r5
 800e3a0:	47b8      	blx	r7
 800e3a2:	3001      	adds	r0, #1
 800e3a4:	d1c3      	bne.n	800e32e <_printf_float+0x32e>
 800e3a6:	e686      	b.n	800e0b6 <_printf_float+0xb6>
 800e3a8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e3ac:	f1ba 0f01 	cmp.w	sl, #1
 800e3b0:	dc01      	bgt.n	800e3b6 <_printf_float+0x3b6>
 800e3b2:	07db      	lsls	r3, r3, #31
 800e3b4:	d536      	bpl.n	800e424 <_printf_float+0x424>
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	4642      	mov	r2, r8
 800e3ba:	4631      	mov	r1, r6
 800e3bc:	4628      	mov	r0, r5
 800e3be:	47b8      	blx	r7
 800e3c0:	3001      	adds	r0, #1
 800e3c2:	f43f ae78 	beq.w	800e0b6 <_printf_float+0xb6>
 800e3c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3ca:	4631      	mov	r1, r6
 800e3cc:	4628      	mov	r0, r5
 800e3ce:	47b8      	blx	r7
 800e3d0:	3001      	adds	r0, #1
 800e3d2:	f43f ae70 	beq.w	800e0b6 <_printf_float+0xb6>
 800e3d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e3da:	2200      	movs	r2, #0
 800e3dc:	2300      	movs	r3, #0
 800e3de:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e3e2:	f7f2 fb91 	bl	8000b08 <__aeabi_dcmpeq>
 800e3e6:	b9c0      	cbnz	r0, 800e41a <_printf_float+0x41a>
 800e3e8:	4653      	mov	r3, sl
 800e3ea:	f108 0201 	add.w	r2, r8, #1
 800e3ee:	4631      	mov	r1, r6
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	47b8      	blx	r7
 800e3f4:	3001      	adds	r0, #1
 800e3f6:	d10c      	bne.n	800e412 <_printf_float+0x412>
 800e3f8:	e65d      	b.n	800e0b6 <_printf_float+0xb6>
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	465a      	mov	r2, fp
 800e3fe:	4631      	mov	r1, r6
 800e400:	4628      	mov	r0, r5
 800e402:	47b8      	blx	r7
 800e404:	3001      	adds	r0, #1
 800e406:	f43f ae56 	beq.w	800e0b6 <_printf_float+0xb6>
 800e40a:	f108 0801 	add.w	r8, r8, #1
 800e40e:	45d0      	cmp	r8, sl
 800e410:	dbf3      	blt.n	800e3fa <_printf_float+0x3fa>
 800e412:	464b      	mov	r3, r9
 800e414:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e418:	e6df      	b.n	800e1da <_printf_float+0x1da>
 800e41a:	f04f 0800 	mov.w	r8, #0
 800e41e:	f104 0b1a 	add.w	fp, r4, #26
 800e422:	e7f4      	b.n	800e40e <_printf_float+0x40e>
 800e424:	2301      	movs	r3, #1
 800e426:	4642      	mov	r2, r8
 800e428:	e7e1      	b.n	800e3ee <_printf_float+0x3ee>
 800e42a:	2301      	movs	r3, #1
 800e42c:	464a      	mov	r2, r9
 800e42e:	4631      	mov	r1, r6
 800e430:	4628      	mov	r0, r5
 800e432:	47b8      	blx	r7
 800e434:	3001      	adds	r0, #1
 800e436:	f43f ae3e 	beq.w	800e0b6 <_printf_float+0xb6>
 800e43a:	f108 0801 	add.w	r8, r8, #1
 800e43e:	68e3      	ldr	r3, [r4, #12]
 800e440:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e442:	1a5b      	subs	r3, r3, r1
 800e444:	4543      	cmp	r3, r8
 800e446:	dcf0      	bgt.n	800e42a <_printf_float+0x42a>
 800e448:	e6fc      	b.n	800e244 <_printf_float+0x244>
 800e44a:	f04f 0800 	mov.w	r8, #0
 800e44e:	f104 0919 	add.w	r9, r4, #25
 800e452:	e7f4      	b.n	800e43e <_printf_float+0x43e>

0800e454 <sbrk_aligned>:
 800e454:	b570      	push	{r4, r5, r6, lr}
 800e456:	4e0f      	ldr	r6, [pc, #60]	@ (800e494 <sbrk_aligned+0x40>)
 800e458:	460c      	mov	r4, r1
 800e45a:	6831      	ldr	r1, [r6, #0]
 800e45c:	4605      	mov	r5, r0
 800e45e:	b911      	cbnz	r1, 800e466 <sbrk_aligned+0x12>
 800e460:	f001 fc7e 	bl	800fd60 <_sbrk_r>
 800e464:	6030      	str	r0, [r6, #0]
 800e466:	4621      	mov	r1, r4
 800e468:	4628      	mov	r0, r5
 800e46a:	f001 fc79 	bl	800fd60 <_sbrk_r>
 800e46e:	1c43      	adds	r3, r0, #1
 800e470:	d103      	bne.n	800e47a <sbrk_aligned+0x26>
 800e472:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e476:	4620      	mov	r0, r4
 800e478:	bd70      	pop	{r4, r5, r6, pc}
 800e47a:	1cc4      	adds	r4, r0, #3
 800e47c:	f024 0403 	bic.w	r4, r4, #3
 800e480:	42a0      	cmp	r0, r4
 800e482:	d0f8      	beq.n	800e476 <sbrk_aligned+0x22>
 800e484:	1a21      	subs	r1, r4, r0
 800e486:	4628      	mov	r0, r5
 800e488:	f001 fc6a 	bl	800fd60 <_sbrk_r>
 800e48c:	3001      	adds	r0, #1
 800e48e:	d1f2      	bne.n	800e476 <sbrk_aligned+0x22>
 800e490:	e7ef      	b.n	800e472 <sbrk_aligned+0x1e>
 800e492:	bf00      	nop
 800e494:	2000185c 	.word	0x2000185c

0800e498 <_malloc_r>:
 800e498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e49c:	1ccd      	adds	r5, r1, #3
 800e49e:	f025 0503 	bic.w	r5, r5, #3
 800e4a2:	3508      	adds	r5, #8
 800e4a4:	2d0c      	cmp	r5, #12
 800e4a6:	bf38      	it	cc
 800e4a8:	250c      	movcc	r5, #12
 800e4aa:	2d00      	cmp	r5, #0
 800e4ac:	4606      	mov	r6, r0
 800e4ae:	db01      	blt.n	800e4b4 <_malloc_r+0x1c>
 800e4b0:	42a9      	cmp	r1, r5
 800e4b2:	d904      	bls.n	800e4be <_malloc_r+0x26>
 800e4b4:	230c      	movs	r3, #12
 800e4b6:	6033      	str	r3, [r6, #0]
 800e4b8:	2000      	movs	r0, #0
 800e4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e594 <_malloc_r+0xfc>
 800e4c2:	f000 fc03 	bl	800eccc <__malloc_lock>
 800e4c6:	f8d8 3000 	ldr.w	r3, [r8]
 800e4ca:	461c      	mov	r4, r3
 800e4cc:	bb44      	cbnz	r4, 800e520 <_malloc_r+0x88>
 800e4ce:	4629      	mov	r1, r5
 800e4d0:	4630      	mov	r0, r6
 800e4d2:	f7ff ffbf 	bl	800e454 <sbrk_aligned>
 800e4d6:	1c43      	adds	r3, r0, #1
 800e4d8:	4604      	mov	r4, r0
 800e4da:	d158      	bne.n	800e58e <_malloc_r+0xf6>
 800e4dc:	f8d8 4000 	ldr.w	r4, [r8]
 800e4e0:	4627      	mov	r7, r4
 800e4e2:	2f00      	cmp	r7, #0
 800e4e4:	d143      	bne.n	800e56e <_malloc_r+0xd6>
 800e4e6:	2c00      	cmp	r4, #0
 800e4e8:	d04b      	beq.n	800e582 <_malloc_r+0xea>
 800e4ea:	6823      	ldr	r3, [r4, #0]
 800e4ec:	4639      	mov	r1, r7
 800e4ee:	4630      	mov	r0, r6
 800e4f0:	eb04 0903 	add.w	r9, r4, r3
 800e4f4:	f001 fc34 	bl	800fd60 <_sbrk_r>
 800e4f8:	4581      	cmp	r9, r0
 800e4fa:	d142      	bne.n	800e582 <_malloc_r+0xea>
 800e4fc:	6821      	ldr	r1, [r4, #0]
 800e4fe:	1a6d      	subs	r5, r5, r1
 800e500:	4629      	mov	r1, r5
 800e502:	4630      	mov	r0, r6
 800e504:	f7ff ffa6 	bl	800e454 <sbrk_aligned>
 800e508:	3001      	adds	r0, #1
 800e50a:	d03a      	beq.n	800e582 <_malloc_r+0xea>
 800e50c:	6823      	ldr	r3, [r4, #0]
 800e50e:	442b      	add	r3, r5
 800e510:	6023      	str	r3, [r4, #0]
 800e512:	f8d8 3000 	ldr.w	r3, [r8]
 800e516:	685a      	ldr	r2, [r3, #4]
 800e518:	bb62      	cbnz	r2, 800e574 <_malloc_r+0xdc>
 800e51a:	f8c8 7000 	str.w	r7, [r8]
 800e51e:	e00f      	b.n	800e540 <_malloc_r+0xa8>
 800e520:	6822      	ldr	r2, [r4, #0]
 800e522:	1b52      	subs	r2, r2, r5
 800e524:	d420      	bmi.n	800e568 <_malloc_r+0xd0>
 800e526:	2a0b      	cmp	r2, #11
 800e528:	d917      	bls.n	800e55a <_malloc_r+0xc2>
 800e52a:	1961      	adds	r1, r4, r5
 800e52c:	42a3      	cmp	r3, r4
 800e52e:	6025      	str	r5, [r4, #0]
 800e530:	bf18      	it	ne
 800e532:	6059      	strne	r1, [r3, #4]
 800e534:	6863      	ldr	r3, [r4, #4]
 800e536:	bf08      	it	eq
 800e538:	f8c8 1000 	streq.w	r1, [r8]
 800e53c:	5162      	str	r2, [r4, r5]
 800e53e:	604b      	str	r3, [r1, #4]
 800e540:	4630      	mov	r0, r6
 800e542:	f000 fbc9 	bl	800ecd8 <__malloc_unlock>
 800e546:	f104 000b 	add.w	r0, r4, #11
 800e54a:	1d23      	adds	r3, r4, #4
 800e54c:	f020 0007 	bic.w	r0, r0, #7
 800e550:	1ac2      	subs	r2, r0, r3
 800e552:	bf1c      	itt	ne
 800e554:	1a1b      	subne	r3, r3, r0
 800e556:	50a3      	strne	r3, [r4, r2]
 800e558:	e7af      	b.n	800e4ba <_malloc_r+0x22>
 800e55a:	6862      	ldr	r2, [r4, #4]
 800e55c:	42a3      	cmp	r3, r4
 800e55e:	bf0c      	ite	eq
 800e560:	f8c8 2000 	streq.w	r2, [r8]
 800e564:	605a      	strne	r2, [r3, #4]
 800e566:	e7eb      	b.n	800e540 <_malloc_r+0xa8>
 800e568:	4623      	mov	r3, r4
 800e56a:	6864      	ldr	r4, [r4, #4]
 800e56c:	e7ae      	b.n	800e4cc <_malloc_r+0x34>
 800e56e:	463c      	mov	r4, r7
 800e570:	687f      	ldr	r7, [r7, #4]
 800e572:	e7b6      	b.n	800e4e2 <_malloc_r+0x4a>
 800e574:	461a      	mov	r2, r3
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	42a3      	cmp	r3, r4
 800e57a:	d1fb      	bne.n	800e574 <_malloc_r+0xdc>
 800e57c:	2300      	movs	r3, #0
 800e57e:	6053      	str	r3, [r2, #4]
 800e580:	e7de      	b.n	800e540 <_malloc_r+0xa8>
 800e582:	230c      	movs	r3, #12
 800e584:	6033      	str	r3, [r6, #0]
 800e586:	4630      	mov	r0, r6
 800e588:	f000 fba6 	bl	800ecd8 <__malloc_unlock>
 800e58c:	e794      	b.n	800e4b8 <_malloc_r+0x20>
 800e58e:	6005      	str	r5, [r0, #0]
 800e590:	e7d6      	b.n	800e540 <_malloc_r+0xa8>
 800e592:	bf00      	nop
 800e594:	20001860 	.word	0x20001860

0800e598 <_printf_common>:
 800e598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e59c:	4616      	mov	r6, r2
 800e59e:	4698      	mov	r8, r3
 800e5a0:	688a      	ldr	r2, [r1, #8]
 800e5a2:	690b      	ldr	r3, [r1, #16]
 800e5a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e5a8:	4293      	cmp	r3, r2
 800e5aa:	bfb8      	it	lt
 800e5ac:	4613      	movlt	r3, r2
 800e5ae:	6033      	str	r3, [r6, #0]
 800e5b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e5b4:	4607      	mov	r7, r0
 800e5b6:	460c      	mov	r4, r1
 800e5b8:	b10a      	cbz	r2, 800e5be <_printf_common+0x26>
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	6033      	str	r3, [r6, #0]
 800e5be:	6823      	ldr	r3, [r4, #0]
 800e5c0:	0699      	lsls	r1, r3, #26
 800e5c2:	bf42      	ittt	mi
 800e5c4:	6833      	ldrmi	r3, [r6, #0]
 800e5c6:	3302      	addmi	r3, #2
 800e5c8:	6033      	strmi	r3, [r6, #0]
 800e5ca:	6825      	ldr	r5, [r4, #0]
 800e5cc:	f015 0506 	ands.w	r5, r5, #6
 800e5d0:	d106      	bne.n	800e5e0 <_printf_common+0x48>
 800e5d2:	f104 0a19 	add.w	sl, r4, #25
 800e5d6:	68e3      	ldr	r3, [r4, #12]
 800e5d8:	6832      	ldr	r2, [r6, #0]
 800e5da:	1a9b      	subs	r3, r3, r2
 800e5dc:	42ab      	cmp	r3, r5
 800e5de:	dc26      	bgt.n	800e62e <_printf_common+0x96>
 800e5e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e5e4:	6822      	ldr	r2, [r4, #0]
 800e5e6:	3b00      	subs	r3, #0
 800e5e8:	bf18      	it	ne
 800e5ea:	2301      	movne	r3, #1
 800e5ec:	0692      	lsls	r2, r2, #26
 800e5ee:	d42b      	bmi.n	800e648 <_printf_common+0xb0>
 800e5f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e5f4:	4641      	mov	r1, r8
 800e5f6:	4638      	mov	r0, r7
 800e5f8:	47c8      	blx	r9
 800e5fa:	3001      	adds	r0, #1
 800e5fc:	d01e      	beq.n	800e63c <_printf_common+0xa4>
 800e5fe:	6823      	ldr	r3, [r4, #0]
 800e600:	6922      	ldr	r2, [r4, #16]
 800e602:	f003 0306 	and.w	r3, r3, #6
 800e606:	2b04      	cmp	r3, #4
 800e608:	bf02      	ittt	eq
 800e60a:	68e5      	ldreq	r5, [r4, #12]
 800e60c:	6833      	ldreq	r3, [r6, #0]
 800e60e:	1aed      	subeq	r5, r5, r3
 800e610:	68a3      	ldr	r3, [r4, #8]
 800e612:	bf0c      	ite	eq
 800e614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e618:	2500      	movne	r5, #0
 800e61a:	4293      	cmp	r3, r2
 800e61c:	bfc4      	itt	gt
 800e61e:	1a9b      	subgt	r3, r3, r2
 800e620:	18ed      	addgt	r5, r5, r3
 800e622:	2600      	movs	r6, #0
 800e624:	341a      	adds	r4, #26
 800e626:	42b5      	cmp	r5, r6
 800e628:	d11a      	bne.n	800e660 <_printf_common+0xc8>
 800e62a:	2000      	movs	r0, #0
 800e62c:	e008      	b.n	800e640 <_printf_common+0xa8>
 800e62e:	2301      	movs	r3, #1
 800e630:	4652      	mov	r2, sl
 800e632:	4641      	mov	r1, r8
 800e634:	4638      	mov	r0, r7
 800e636:	47c8      	blx	r9
 800e638:	3001      	adds	r0, #1
 800e63a:	d103      	bne.n	800e644 <_printf_common+0xac>
 800e63c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e644:	3501      	adds	r5, #1
 800e646:	e7c6      	b.n	800e5d6 <_printf_common+0x3e>
 800e648:	18e1      	adds	r1, r4, r3
 800e64a:	1c5a      	adds	r2, r3, #1
 800e64c:	2030      	movs	r0, #48	@ 0x30
 800e64e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e652:	4422      	add	r2, r4
 800e654:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e658:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e65c:	3302      	adds	r3, #2
 800e65e:	e7c7      	b.n	800e5f0 <_printf_common+0x58>
 800e660:	2301      	movs	r3, #1
 800e662:	4622      	mov	r2, r4
 800e664:	4641      	mov	r1, r8
 800e666:	4638      	mov	r0, r7
 800e668:	47c8      	blx	r9
 800e66a:	3001      	adds	r0, #1
 800e66c:	d0e6      	beq.n	800e63c <_printf_common+0xa4>
 800e66e:	3601      	adds	r6, #1
 800e670:	e7d9      	b.n	800e626 <_printf_common+0x8e>
	...

0800e674 <_printf_i>:
 800e674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e678:	7e0f      	ldrb	r7, [r1, #24]
 800e67a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e67c:	2f78      	cmp	r7, #120	@ 0x78
 800e67e:	4691      	mov	r9, r2
 800e680:	4680      	mov	r8, r0
 800e682:	460c      	mov	r4, r1
 800e684:	469a      	mov	sl, r3
 800e686:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e68a:	d807      	bhi.n	800e69c <_printf_i+0x28>
 800e68c:	2f62      	cmp	r7, #98	@ 0x62
 800e68e:	d80a      	bhi.n	800e6a6 <_printf_i+0x32>
 800e690:	2f00      	cmp	r7, #0
 800e692:	f000 80d1 	beq.w	800e838 <_printf_i+0x1c4>
 800e696:	2f58      	cmp	r7, #88	@ 0x58
 800e698:	f000 80b8 	beq.w	800e80c <_printf_i+0x198>
 800e69c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e6a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e6a4:	e03a      	b.n	800e71c <_printf_i+0xa8>
 800e6a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e6aa:	2b15      	cmp	r3, #21
 800e6ac:	d8f6      	bhi.n	800e69c <_printf_i+0x28>
 800e6ae:	a101      	add	r1, pc, #4	@ (adr r1, 800e6b4 <_printf_i+0x40>)
 800e6b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e6b4:	0800e70d 	.word	0x0800e70d
 800e6b8:	0800e721 	.word	0x0800e721
 800e6bc:	0800e69d 	.word	0x0800e69d
 800e6c0:	0800e69d 	.word	0x0800e69d
 800e6c4:	0800e69d 	.word	0x0800e69d
 800e6c8:	0800e69d 	.word	0x0800e69d
 800e6cc:	0800e721 	.word	0x0800e721
 800e6d0:	0800e69d 	.word	0x0800e69d
 800e6d4:	0800e69d 	.word	0x0800e69d
 800e6d8:	0800e69d 	.word	0x0800e69d
 800e6dc:	0800e69d 	.word	0x0800e69d
 800e6e0:	0800e81f 	.word	0x0800e81f
 800e6e4:	0800e74b 	.word	0x0800e74b
 800e6e8:	0800e7d9 	.word	0x0800e7d9
 800e6ec:	0800e69d 	.word	0x0800e69d
 800e6f0:	0800e69d 	.word	0x0800e69d
 800e6f4:	0800e841 	.word	0x0800e841
 800e6f8:	0800e69d 	.word	0x0800e69d
 800e6fc:	0800e74b 	.word	0x0800e74b
 800e700:	0800e69d 	.word	0x0800e69d
 800e704:	0800e69d 	.word	0x0800e69d
 800e708:	0800e7e1 	.word	0x0800e7e1
 800e70c:	6833      	ldr	r3, [r6, #0]
 800e70e:	1d1a      	adds	r2, r3, #4
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	6032      	str	r2, [r6, #0]
 800e714:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e718:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e71c:	2301      	movs	r3, #1
 800e71e:	e09c      	b.n	800e85a <_printf_i+0x1e6>
 800e720:	6833      	ldr	r3, [r6, #0]
 800e722:	6820      	ldr	r0, [r4, #0]
 800e724:	1d19      	adds	r1, r3, #4
 800e726:	6031      	str	r1, [r6, #0]
 800e728:	0606      	lsls	r6, r0, #24
 800e72a:	d501      	bpl.n	800e730 <_printf_i+0xbc>
 800e72c:	681d      	ldr	r5, [r3, #0]
 800e72e:	e003      	b.n	800e738 <_printf_i+0xc4>
 800e730:	0645      	lsls	r5, r0, #25
 800e732:	d5fb      	bpl.n	800e72c <_printf_i+0xb8>
 800e734:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e738:	2d00      	cmp	r5, #0
 800e73a:	da03      	bge.n	800e744 <_printf_i+0xd0>
 800e73c:	232d      	movs	r3, #45	@ 0x2d
 800e73e:	426d      	negs	r5, r5
 800e740:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e744:	4858      	ldr	r0, [pc, #352]	@ (800e8a8 <_printf_i+0x234>)
 800e746:	230a      	movs	r3, #10
 800e748:	e011      	b.n	800e76e <_printf_i+0xfa>
 800e74a:	6821      	ldr	r1, [r4, #0]
 800e74c:	6833      	ldr	r3, [r6, #0]
 800e74e:	0608      	lsls	r0, r1, #24
 800e750:	f853 5b04 	ldr.w	r5, [r3], #4
 800e754:	d402      	bmi.n	800e75c <_printf_i+0xe8>
 800e756:	0649      	lsls	r1, r1, #25
 800e758:	bf48      	it	mi
 800e75a:	b2ad      	uxthmi	r5, r5
 800e75c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e75e:	4852      	ldr	r0, [pc, #328]	@ (800e8a8 <_printf_i+0x234>)
 800e760:	6033      	str	r3, [r6, #0]
 800e762:	bf14      	ite	ne
 800e764:	230a      	movne	r3, #10
 800e766:	2308      	moveq	r3, #8
 800e768:	2100      	movs	r1, #0
 800e76a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e76e:	6866      	ldr	r6, [r4, #4]
 800e770:	60a6      	str	r6, [r4, #8]
 800e772:	2e00      	cmp	r6, #0
 800e774:	db05      	blt.n	800e782 <_printf_i+0x10e>
 800e776:	6821      	ldr	r1, [r4, #0]
 800e778:	432e      	orrs	r6, r5
 800e77a:	f021 0104 	bic.w	r1, r1, #4
 800e77e:	6021      	str	r1, [r4, #0]
 800e780:	d04b      	beq.n	800e81a <_printf_i+0x1a6>
 800e782:	4616      	mov	r6, r2
 800e784:	fbb5 f1f3 	udiv	r1, r5, r3
 800e788:	fb03 5711 	mls	r7, r3, r1, r5
 800e78c:	5dc7      	ldrb	r7, [r0, r7]
 800e78e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e792:	462f      	mov	r7, r5
 800e794:	42bb      	cmp	r3, r7
 800e796:	460d      	mov	r5, r1
 800e798:	d9f4      	bls.n	800e784 <_printf_i+0x110>
 800e79a:	2b08      	cmp	r3, #8
 800e79c:	d10b      	bne.n	800e7b6 <_printf_i+0x142>
 800e79e:	6823      	ldr	r3, [r4, #0]
 800e7a0:	07df      	lsls	r7, r3, #31
 800e7a2:	d508      	bpl.n	800e7b6 <_printf_i+0x142>
 800e7a4:	6923      	ldr	r3, [r4, #16]
 800e7a6:	6861      	ldr	r1, [r4, #4]
 800e7a8:	4299      	cmp	r1, r3
 800e7aa:	bfde      	ittt	le
 800e7ac:	2330      	movle	r3, #48	@ 0x30
 800e7ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e7b2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e7b6:	1b92      	subs	r2, r2, r6
 800e7b8:	6122      	str	r2, [r4, #16]
 800e7ba:	f8cd a000 	str.w	sl, [sp]
 800e7be:	464b      	mov	r3, r9
 800e7c0:	aa03      	add	r2, sp, #12
 800e7c2:	4621      	mov	r1, r4
 800e7c4:	4640      	mov	r0, r8
 800e7c6:	f7ff fee7 	bl	800e598 <_printf_common>
 800e7ca:	3001      	adds	r0, #1
 800e7cc:	d14a      	bne.n	800e864 <_printf_i+0x1f0>
 800e7ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e7d2:	b004      	add	sp, #16
 800e7d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7d8:	6823      	ldr	r3, [r4, #0]
 800e7da:	f043 0320 	orr.w	r3, r3, #32
 800e7de:	6023      	str	r3, [r4, #0]
 800e7e0:	4832      	ldr	r0, [pc, #200]	@ (800e8ac <_printf_i+0x238>)
 800e7e2:	2778      	movs	r7, #120	@ 0x78
 800e7e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e7e8:	6823      	ldr	r3, [r4, #0]
 800e7ea:	6831      	ldr	r1, [r6, #0]
 800e7ec:	061f      	lsls	r7, r3, #24
 800e7ee:	f851 5b04 	ldr.w	r5, [r1], #4
 800e7f2:	d402      	bmi.n	800e7fa <_printf_i+0x186>
 800e7f4:	065f      	lsls	r7, r3, #25
 800e7f6:	bf48      	it	mi
 800e7f8:	b2ad      	uxthmi	r5, r5
 800e7fa:	6031      	str	r1, [r6, #0]
 800e7fc:	07d9      	lsls	r1, r3, #31
 800e7fe:	bf44      	itt	mi
 800e800:	f043 0320 	orrmi.w	r3, r3, #32
 800e804:	6023      	strmi	r3, [r4, #0]
 800e806:	b11d      	cbz	r5, 800e810 <_printf_i+0x19c>
 800e808:	2310      	movs	r3, #16
 800e80a:	e7ad      	b.n	800e768 <_printf_i+0xf4>
 800e80c:	4826      	ldr	r0, [pc, #152]	@ (800e8a8 <_printf_i+0x234>)
 800e80e:	e7e9      	b.n	800e7e4 <_printf_i+0x170>
 800e810:	6823      	ldr	r3, [r4, #0]
 800e812:	f023 0320 	bic.w	r3, r3, #32
 800e816:	6023      	str	r3, [r4, #0]
 800e818:	e7f6      	b.n	800e808 <_printf_i+0x194>
 800e81a:	4616      	mov	r6, r2
 800e81c:	e7bd      	b.n	800e79a <_printf_i+0x126>
 800e81e:	6833      	ldr	r3, [r6, #0]
 800e820:	6825      	ldr	r5, [r4, #0]
 800e822:	6961      	ldr	r1, [r4, #20]
 800e824:	1d18      	adds	r0, r3, #4
 800e826:	6030      	str	r0, [r6, #0]
 800e828:	062e      	lsls	r6, r5, #24
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	d501      	bpl.n	800e832 <_printf_i+0x1be>
 800e82e:	6019      	str	r1, [r3, #0]
 800e830:	e002      	b.n	800e838 <_printf_i+0x1c4>
 800e832:	0668      	lsls	r0, r5, #25
 800e834:	d5fb      	bpl.n	800e82e <_printf_i+0x1ba>
 800e836:	8019      	strh	r1, [r3, #0]
 800e838:	2300      	movs	r3, #0
 800e83a:	6123      	str	r3, [r4, #16]
 800e83c:	4616      	mov	r6, r2
 800e83e:	e7bc      	b.n	800e7ba <_printf_i+0x146>
 800e840:	6833      	ldr	r3, [r6, #0]
 800e842:	1d1a      	adds	r2, r3, #4
 800e844:	6032      	str	r2, [r6, #0]
 800e846:	681e      	ldr	r6, [r3, #0]
 800e848:	6862      	ldr	r2, [r4, #4]
 800e84a:	2100      	movs	r1, #0
 800e84c:	4630      	mov	r0, r6
 800e84e:	f7f1 fcdf 	bl	8000210 <memchr>
 800e852:	b108      	cbz	r0, 800e858 <_printf_i+0x1e4>
 800e854:	1b80      	subs	r0, r0, r6
 800e856:	6060      	str	r0, [r4, #4]
 800e858:	6863      	ldr	r3, [r4, #4]
 800e85a:	6123      	str	r3, [r4, #16]
 800e85c:	2300      	movs	r3, #0
 800e85e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e862:	e7aa      	b.n	800e7ba <_printf_i+0x146>
 800e864:	6923      	ldr	r3, [r4, #16]
 800e866:	4632      	mov	r2, r6
 800e868:	4649      	mov	r1, r9
 800e86a:	4640      	mov	r0, r8
 800e86c:	47d0      	blx	sl
 800e86e:	3001      	adds	r0, #1
 800e870:	d0ad      	beq.n	800e7ce <_printf_i+0x15a>
 800e872:	6823      	ldr	r3, [r4, #0]
 800e874:	079b      	lsls	r3, r3, #30
 800e876:	d413      	bmi.n	800e8a0 <_printf_i+0x22c>
 800e878:	68e0      	ldr	r0, [r4, #12]
 800e87a:	9b03      	ldr	r3, [sp, #12]
 800e87c:	4298      	cmp	r0, r3
 800e87e:	bfb8      	it	lt
 800e880:	4618      	movlt	r0, r3
 800e882:	e7a6      	b.n	800e7d2 <_printf_i+0x15e>
 800e884:	2301      	movs	r3, #1
 800e886:	4632      	mov	r2, r6
 800e888:	4649      	mov	r1, r9
 800e88a:	4640      	mov	r0, r8
 800e88c:	47d0      	blx	sl
 800e88e:	3001      	adds	r0, #1
 800e890:	d09d      	beq.n	800e7ce <_printf_i+0x15a>
 800e892:	3501      	adds	r5, #1
 800e894:	68e3      	ldr	r3, [r4, #12]
 800e896:	9903      	ldr	r1, [sp, #12]
 800e898:	1a5b      	subs	r3, r3, r1
 800e89a:	42ab      	cmp	r3, r5
 800e89c:	dcf2      	bgt.n	800e884 <_printf_i+0x210>
 800e89e:	e7eb      	b.n	800e878 <_printf_i+0x204>
 800e8a0:	2500      	movs	r5, #0
 800e8a2:	f104 0619 	add.w	r6, r4, #25
 800e8a6:	e7f5      	b.n	800e894 <_printf_i+0x220>
 800e8a8:	080156dc 	.word	0x080156dc
 800e8ac:	080156ed 	.word	0x080156ed

0800e8b0 <_scanf_float>:
 800e8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8b4:	b087      	sub	sp, #28
 800e8b6:	4691      	mov	r9, r2
 800e8b8:	9303      	str	r3, [sp, #12]
 800e8ba:	688b      	ldr	r3, [r1, #8]
 800e8bc:	1e5a      	subs	r2, r3, #1
 800e8be:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e8c2:	bf81      	itttt	hi
 800e8c4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e8c8:	eb03 0b05 	addhi.w	fp, r3, r5
 800e8cc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e8d0:	608b      	strhi	r3, [r1, #8]
 800e8d2:	680b      	ldr	r3, [r1, #0]
 800e8d4:	460a      	mov	r2, r1
 800e8d6:	f04f 0500 	mov.w	r5, #0
 800e8da:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e8de:	f842 3b1c 	str.w	r3, [r2], #28
 800e8e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e8e6:	4680      	mov	r8, r0
 800e8e8:	460c      	mov	r4, r1
 800e8ea:	bf98      	it	ls
 800e8ec:	f04f 0b00 	movls.w	fp, #0
 800e8f0:	9201      	str	r2, [sp, #4]
 800e8f2:	4616      	mov	r6, r2
 800e8f4:	46aa      	mov	sl, r5
 800e8f6:	462f      	mov	r7, r5
 800e8f8:	9502      	str	r5, [sp, #8]
 800e8fa:	68a2      	ldr	r2, [r4, #8]
 800e8fc:	b15a      	cbz	r2, 800e916 <_scanf_float+0x66>
 800e8fe:	f8d9 3000 	ldr.w	r3, [r9]
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	2b4e      	cmp	r3, #78	@ 0x4e
 800e906:	d863      	bhi.n	800e9d0 <_scanf_float+0x120>
 800e908:	2b40      	cmp	r3, #64	@ 0x40
 800e90a:	d83b      	bhi.n	800e984 <_scanf_float+0xd4>
 800e90c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e910:	b2c8      	uxtb	r0, r1
 800e912:	280e      	cmp	r0, #14
 800e914:	d939      	bls.n	800e98a <_scanf_float+0xda>
 800e916:	b11f      	cbz	r7, 800e920 <_scanf_float+0x70>
 800e918:	6823      	ldr	r3, [r4, #0]
 800e91a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e91e:	6023      	str	r3, [r4, #0]
 800e920:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e924:	f1ba 0f01 	cmp.w	sl, #1
 800e928:	f200 8114 	bhi.w	800eb54 <_scanf_float+0x2a4>
 800e92c:	9b01      	ldr	r3, [sp, #4]
 800e92e:	429e      	cmp	r6, r3
 800e930:	f200 8105 	bhi.w	800eb3e <_scanf_float+0x28e>
 800e934:	2001      	movs	r0, #1
 800e936:	b007      	add	sp, #28
 800e938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e93c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e940:	2a0d      	cmp	r2, #13
 800e942:	d8e8      	bhi.n	800e916 <_scanf_float+0x66>
 800e944:	a101      	add	r1, pc, #4	@ (adr r1, 800e94c <_scanf_float+0x9c>)
 800e946:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e94a:	bf00      	nop
 800e94c:	0800ea95 	.word	0x0800ea95
 800e950:	0800e917 	.word	0x0800e917
 800e954:	0800e917 	.word	0x0800e917
 800e958:	0800e917 	.word	0x0800e917
 800e95c:	0800eaf1 	.word	0x0800eaf1
 800e960:	0800eacb 	.word	0x0800eacb
 800e964:	0800e917 	.word	0x0800e917
 800e968:	0800e917 	.word	0x0800e917
 800e96c:	0800eaa3 	.word	0x0800eaa3
 800e970:	0800e917 	.word	0x0800e917
 800e974:	0800e917 	.word	0x0800e917
 800e978:	0800e917 	.word	0x0800e917
 800e97c:	0800e917 	.word	0x0800e917
 800e980:	0800ea5f 	.word	0x0800ea5f
 800e984:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e988:	e7da      	b.n	800e940 <_scanf_float+0x90>
 800e98a:	290e      	cmp	r1, #14
 800e98c:	d8c3      	bhi.n	800e916 <_scanf_float+0x66>
 800e98e:	a001      	add	r0, pc, #4	@ (adr r0, 800e994 <_scanf_float+0xe4>)
 800e990:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e994:	0800ea4f 	.word	0x0800ea4f
 800e998:	0800e917 	.word	0x0800e917
 800e99c:	0800ea4f 	.word	0x0800ea4f
 800e9a0:	0800eadf 	.word	0x0800eadf
 800e9a4:	0800e917 	.word	0x0800e917
 800e9a8:	0800e9f1 	.word	0x0800e9f1
 800e9ac:	0800ea35 	.word	0x0800ea35
 800e9b0:	0800ea35 	.word	0x0800ea35
 800e9b4:	0800ea35 	.word	0x0800ea35
 800e9b8:	0800ea35 	.word	0x0800ea35
 800e9bc:	0800ea35 	.word	0x0800ea35
 800e9c0:	0800ea35 	.word	0x0800ea35
 800e9c4:	0800ea35 	.word	0x0800ea35
 800e9c8:	0800ea35 	.word	0x0800ea35
 800e9cc:	0800ea35 	.word	0x0800ea35
 800e9d0:	2b6e      	cmp	r3, #110	@ 0x6e
 800e9d2:	d809      	bhi.n	800e9e8 <_scanf_float+0x138>
 800e9d4:	2b60      	cmp	r3, #96	@ 0x60
 800e9d6:	d8b1      	bhi.n	800e93c <_scanf_float+0x8c>
 800e9d8:	2b54      	cmp	r3, #84	@ 0x54
 800e9da:	d07b      	beq.n	800ead4 <_scanf_float+0x224>
 800e9dc:	2b59      	cmp	r3, #89	@ 0x59
 800e9de:	d19a      	bne.n	800e916 <_scanf_float+0x66>
 800e9e0:	2d07      	cmp	r5, #7
 800e9e2:	d198      	bne.n	800e916 <_scanf_float+0x66>
 800e9e4:	2508      	movs	r5, #8
 800e9e6:	e02f      	b.n	800ea48 <_scanf_float+0x198>
 800e9e8:	2b74      	cmp	r3, #116	@ 0x74
 800e9ea:	d073      	beq.n	800ead4 <_scanf_float+0x224>
 800e9ec:	2b79      	cmp	r3, #121	@ 0x79
 800e9ee:	e7f6      	b.n	800e9de <_scanf_float+0x12e>
 800e9f0:	6821      	ldr	r1, [r4, #0]
 800e9f2:	05c8      	lsls	r0, r1, #23
 800e9f4:	d51e      	bpl.n	800ea34 <_scanf_float+0x184>
 800e9f6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e9fa:	6021      	str	r1, [r4, #0]
 800e9fc:	3701      	adds	r7, #1
 800e9fe:	f1bb 0f00 	cmp.w	fp, #0
 800ea02:	d003      	beq.n	800ea0c <_scanf_float+0x15c>
 800ea04:	3201      	adds	r2, #1
 800ea06:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800ea0a:	60a2      	str	r2, [r4, #8]
 800ea0c:	68a3      	ldr	r3, [r4, #8]
 800ea0e:	3b01      	subs	r3, #1
 800ea10:	60a3      	str	r3, [r4, #8]
 800ea12:	6923      	ldr	r3, [r4, #16]
 800ea14:	3301      	adds	r3, #1
 800ea16:	6123      	str	r3, [r4, #16]
 800ea18:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ea1c:	3b01      	subs	r3, #1
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	f8c9 3004 	str.w	r3, [r9, #4]
 800ea24:	f340 8082 	ble.w	800eb2c <_scanf_float+0x27c>
 800ea28:	f8d9 3000 	ldr.w	r3, [r9]
 800ea2c:	3301      	adds	r3, #1
 800ea2e:	f8c9 3000 	str.w	r3, [r9]
 800ea32:	e762      	b.n	800e8fa <_scanf_float+0x4a>
 800ea34:	eb1a 0105 	adds.w	r1, sl, r5
 800ea38:	f47f af6d 	bne.w	800e916 <_scanf_float+0x66>
 800ea3c:	6822      	ldr	r2, [r4, #0]
 800ea3e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ea42:	6022      	str	r2, [r4, #0]
 800ea44:	460d      	mov	r5, r1
 800ea46:	468a      	mov	sl, r1
 800ea48:	f806 3b01 	strb.w	r3, [r6], #1
 800ea4c:	e7de      	b.n	800ea0c <_scanf_float+0x15c>
 800ea4e:	6822      	ldr	r2, [r4, #0]
 800ea50:	0610      	lsls	r0, r2, #24
 800ea52:	f57f af60 	bpl.w	800e916 <_scanf_float+0x66>
 800ea56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ea5a:	6022      	str	r2, [r4, #0]
 800ea5c:	e7f4      	b.n	800ea48 <_scanf_float+0x198>
 800ea5e:	f1ba 0f00 	cmp.w	sl, #0
 800ea62:	d10c      	bne.n	800ea7e <_scanf_float+0x1ce>
 800ea64:	b977      	cbnz	r7, 800ea84 <_scanf_float+0x1d4>
 800ea66:	6822      	ldr	r2, [r4, #0]
 800ea68:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ea6c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ea70:	d108      	bne.n	800ea84 <_scanf_float+0x1d4>
 800ea72:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ea76:	6022      	str	r2, [r4, #0]
 800ea78:	f04f 0a01 	mov.w	sl, #1
 800ea7c:	e7e4      	b.n	800ea48 <_scanf_float+0x198>
 800ea7e:	f1ba 0f02 	cmp.w	sl, #2
 800ea82:	d050      	beq.n	800eb26 <_scanf_float+0x276>
 800ea84:	2d01      	cmp	r5, #1
 800ea86:	d002      	beq.n	800ea8e <_scanf_float+0x1de>
 800ea88:	2d04      	cmp	r5, #4
 800ea8a:	f47f af44 	bne.w	800e916 <_scanf_float+0x66>
 800ea8e:	3501      	adds	r5, #1
 800ea90:	b2ed      	uxtb	r5, r5
 800ea92:	e7d9      	b.n	800ea48 <_scanf_float+0x198>
 800ea94:	f1ba 0f01 	cmp.w	sl, #1
 800ea98:	f47f af3d 	bne.w	800e916 <_scanf_float+0x66>
 800ea9c:	f04f 0a02 	mov.w	sl, #2
 800eaa0:	e7d2      	b.n	800ea48 <_scanf_float+0x198>
 800eaa2:	b975      	cbnz	r5, 800eac2 <_scanf_float+0x212>
 800eaa4:	2f00      	cmp	r7, #0
 800eaa6:	f47f af37 	bne.w	800e918 <_scanf_float+0x68>
 800eaaa:	6822      	ldr	r2, [r4, #0]
 800eaac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800eab0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800eab4:	f040 8103 	bne.w	800ecbe <_scanf_float+0x40e>
 800eab8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800eabc:	6022      	str	r2, [r4, #0]
 800eabe:	2501      	movs	r5, #1
 800eac0:	e7c2      	b.n	800ea48 <_scanf_float+0x198>
 800eac2:	2d03      	cmp	r5, #3
 800eac4:	d0e3      	beq.n	800ea8e <_scanf_float+0x1de>
 800eac6:	2d05      	cmp	r5, #5
 800eac8:	e7df      	b.n	800ea8a <_scanf_float+0x1da>
 800eaca:	2d02      	cmp	r5, #2
 800eacc:	f47f af23 	bne.w	800e916 <_scanf_float+0x66>
 800ead0:	2503      	movs	r5, #3
 800ead2:	e7b9      	b.n	800ea48 <_scanf_float+0x198>
 800ead4:	2d06      	cmp	r5, #6
 800ead6:	f47f af1e 	bne.w	800e916 <_scanf_float+0x66>
 800eada:	2507      	movs	r5, #7
 800eadc:	e7b4      	b.n	800ea48 <_scanf_float+0x198>
 800eade:	6822      	ldr	r2, [r4, #0]
 800eae0:	0591      	lsls	r1, r2, #22
 800eae2:	f57f af18 	bpl.w	800e916 <_scanf_float+0x66>
 800eae6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800eaea:	6022      	str	r2, [r4, #0]
 800eaec:	9702      	str	r7, [sp, #8]
 800eaee:	e7ab      	b.n	800ea48 <_scanf_float+0x198>
 800eaf0:	6822      	ldr	r2, [r4, #0]
 800eaf2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800eaf6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800eafa:	d005      	beq.n	800eb08 <_scanf_float+0x258>
 800eafc:	0550      	lsls	r0, r2, #21
 800eafe:	f57f af0a 	bpl.w	800e916 <_scanf_float+0x66>
 800eb02:	2f00      	cmp	r7, #0
 800eb04:	f000 80db 	beq.w	800ecbe <_scanf_float+0x40e>
 800eb08:	0591      	lsls	r1, r2, #22
 800eb0a:	bf58      	it	pl
 800eb0c:	9902      	ldrpl	r1, [sp, #8]
 800eb0e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800eb12:	bf58      	it	pl
 800eb14:	1a79      	subpl	r1, r7, r1
 800eb16:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800eb1a:	bf58      	it	pl
 800eb1c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800eb20:	6022      	str	r2, [r4, #0]
 800eb22:	2700      	movs	r7, #0
 800eb24:	e790      	b.n	800ea48 <_scanf_float+0x198>
 800eb26:	f04f 0a03 	mov.w	sl, #3
 800eb2a:	e78d      	b.n	800ea48 <_scanf_float+0x198>
 800eb2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800eb30:	4649      	mov	r1, r9
 800eb32:	4640      	mov	r0, r8
 800eb34:	4798      	blx	r3
 800eb36:	2800      	cmp	r0, #0
 800eb38:	f43f aedf 	beq.w	800e8fa <_scanf_float+0x4a>
 800eb3c:	e6eb      	b.n	800e916 <_scanf_float+0x66>
 800eb3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eb46:	464a      	mov	r2, r9
 800eb48:	4640      	mov	r0, r8
 800eb4a:	4798      	blx	r3
 800eb4c:	6923      	ldr	r3, [r4, #16]
 800eb4e:	3b01      	subs	r3, #1
 800eb50:	6123      	str	r3, [r4, #16]
 800eb52:	e6eb      	b.n	800e92c <_scanf_float+0x7c>
 800eb54:	1e6b      	subs	r3, r5, #1
 800eb56:	2b06      	cmp	r3, #6
 800eb58:	d824      	bhi.n	800eba4 <_scanf_float+0x2f4>
 800eb5a:	2d02      	cmp	r5, #2
 800eb5c:	d836      	bhi.n	800ebcc <_scanf_float+0x31c>
 800eb5e:	9b01      	ldr	r3, [sp, #4]
 800eb60:	429e      	cmp	r6, r3
 800eb62:	f67f aee7 	bls.w	800e934 <_scanf_float+0x84>
 800eb66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eb6e:	464a      	mov	r2, r9
 800eb70:	4640      	mov	r0, r8
 800eb72:	4798      	blx	r3
 800eb74:	6923      	ldr	r3, [r4, #16]
 800eb76:	3b01      	subs	r3, #1
 800eb78:	6123      	str	r3, [r4, #16]
 800eb7a:	e7f0      	b.n	800eb5e <_scanf_float+0x2ae>
 800eb7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb80:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800eb84:	464a      	mov	r2, r9
 800eb86:	4640      	mov	r0, r8
 800eb88:	4798      	blx	r3
 800eb8a:	6923      	ldr	r3, [r4, #16]
 800eb8c:	3b01      	subs	r3, #1
 800eb8e:	6123      	str	r3, [r4, #16]
 800eb90:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800eb94:	fa5f fa8a 	uxtb.w	sl, sl
 800eb98:	f1ba 0f02 	cmp.w	sl, #2
 800eb9c:	d1ee      	bne.n	800eb7c <_scanf_float+0x2cc>
 800eb9e:	3d03      	subs	r5, #3
 800eba0:	b2ed      	uxtb	r5, r5
 800eba2:	1b76      	subs	r6, r6, r5
 800eba4:	6823      	ldr	r3, [r4, #0]
 800eba6:	05da      	lsls	r2, r3, #23
 800eba8:	d530      	bpl.n	800ec0c <_scanf_float+0x35c>
 800ebaa:	055b      	lsls	r3, r3, #21
 800ebac:	d511      	bpl.n	800ebd2 <_scanf_float+0x322>
 800ebae:	9b01      	ldr	r3, [sp, #4]
 800ebb0:	429e      	cmp	r6, r3
 800ebb2:	f67f aebf 	bls.w	800e934 <_scanf_float+0x84>
 800ebb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ebba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ebbe:	464a      	mov	r2, r9
 800ebc0:	4640      	mov	r0, r8
 800ebc2:	4798      	blx	r3
 800ebc4:	6923      	ldr	r3, [r4, #16]
 800ebc6:	3b01      	subs	r3, #1
 800ebc8:	6123      	str	r3, [r4, #16]
 800ebca:	e7f0      	b.n	800ebae <_scanf_float+0x2fe>
 800ebcc:	46aa      	mov	sl, r5
 800ebce:	46b3      	mov	fp, r6
 800ebd0:	e7de      	b.n	800eb90 <_scanf_float+0x2e0>
 800ebd2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ebd6:	6923      	ldr	r3, [r4, #16]
 800ebd8:	2965      	cmp	r1, #101	@ 0x65
 800ebda:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ebde:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800ebe2:	6123      	str	r3, [r4, #16]
 800ebe4:	d00c      	beq.n	800ec00 <_scanf_float+0x350>
 800ebe6:	2945      	cmp	r1, #69	@ 0x45
 800ebe8:	d00a      	beq.n	800ec00 <_scanf_float+0x350>
 800ebea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ebee:	464a      	mov	r2, r9
 800ebf0:	4640      	mov	r0, r8
 800ebf2:	4798      	blx	r3
 800ebf4:	6923      	ldr	r3, [r4, #16]
 800ebf6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ebfa:	3b01      	subs	r3, #1
 800ebfc:	1eb5      	subs	r5, r6, #2
 800ebfe:	6123      	str	r3, [r4, #16]
 800ec00:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ec04:	464a      	mov	r2, r9
 800ec06:	4640      	mov	r0, r8
 800ec08:	4798      	blx	r3
 800ec0a:	462e      	mov	r6, r5
 800ec0c:	6822      	ldr	r2, [r4, #0]
 800ec0e:	f012 0210 	ands.w	r2, r2, #16
 800ec12:	d001      	beq.n	800ec18 <_scanf_float+0x368>
 800ec14:	2000      	movs	r0, #0
 800ec16:	e68e      	b.n	800e936 <_scanf_float+0x86>
 800ec18:	7032      	strb	r2, [r6, #0]
 800ec1a:	6823      	ldr	r3, [r4, #0]
 800ec1c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ec20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec24:	d125      	bne.n	800ec72 <_scanf_float+0x3c2>
 800ec26:	9b02      	ldr	r3, [sp, #8]
 800ec28:	429f      	cmp	r7, r3
 800ec2a:	d00a      	beq.n	800ec42 <_scanf_float+0x392>
 800ec2c:	1bda      	subs	r2, r3, r7
 800ec2e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ec32:	429e      	cmp	r6, r3
 800ec34:	bf28      	it	cs
 800ec36:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ec3a:	4922      	ldr	r1, [pc, #136]	@ (800ecc4 <_scanf_float+0x414>)
 800ec3c:	4630      	mov	r0, r6
 800ec3e:	f000 f851 	bl	800ece4 <siprintf>
 800ec42:	9901      	ldr	r1, [sp, #4]
 800ec44:	2200      	movs	r2, #0
 800ec46:	4640      	mov	r0, r8
 800ec48:	f000 ff86 	bl	800fb58 <_strtod_r>
 800ec4c:	9b03      	ldr	r3, [sp, #12]
 800ec4e:	6821      	ldr	r1, [r4, #0]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f011 0f02 	tst.w	r1, #2
 800ec56:	ec57 6b10 	vmov	r6, r7, d0
 800ec5a:	f103 0204 	add.w	r2, r3, #4
 800ec5e:	d015      	beq.n	800ec8c <_scanf_float+0x3dc>
 800ec60:	9903      	ldr	r1, [sp, #12]
 800ec62:	600a      	str	r2, [r1, #0]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	e9c3 6700 	strd	r6, r7, [r3]
 800ec6a:	68e3      	ldr	r3, [r4, #12]
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	60e3      	str	r3, [r4, #12]
 800ec70:	e7d0      	b.n	800ec14 <_scanf_float+0x364>
 800ec72:	9b04      	ldr	r3, [sp, #16]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d0e4      	beq.n	800ec42 <_scanf_float+0x392>
 800ec78:	9905      	ldr	r1, [sp, #20]
 800ec7a:	230a      	movs	r3, #10
 800ec7c:	3101      	adds	r1, #1
 800ec7e:	4640      	mov	r0, r8
 800ec80:	f000 ffea 	bl	800fc58 <_strtol_r>
 800ec84:	9b04      	ldr	r3, [sp, #16]
 800ec86:	9e05      	ldr	r6, [sp, #20]
 800ec88:	1ac2      	subs	r2, r0, r3
 800ec8a:	e7d0      	b.n	800ec2e <_scanf_float+0x37e>
 800ec8c:	f011 0f04 	tst.w	r1, #4
 800ec90:	9903      	ldr	r1, [sp, #12]
 800ec92:	600a      	str	r2, [r1, #0]
 800ec94:	d1e6      	bne.n	800ec64 <_scanf_float+0x3b4>
 800ec96:	681d      	ldr	r5, [r3, #0]
 800ec98:	4632      	mov	r2, r6
 800ec9a:	463b      	mov	r3, r7
 800ec9c:	4630      	mov	r0, r6
 800ec9e:	4639      	mov	r1, r7
 800eca0:	f7f1 ff64 	bl	8000b6c <__aeabi_dcmpun>
 800eca4:	b128      	cbz	r0, 800ecb2 <_scanf_float+0x402>
 800eca6:	4808      	ldr	r0, [pc, #32]	@ (800ecc8 <_scanf_float+0x418>)
 800eca8:	f001 f8d6 	bl	800fe58 <nanf>
 800ecac:	ed85 0a00 	vstr	s0, [r5]
 800ecb0:	e7db      	b.n	800ec6a <_scanf_float+0x3ba>
 800ecb2:	4630      	mov	r0, r6
 800ecb4:	4639      	mov	r1, r7
 800ecb6:	f7f1 ffb7 	bl	8000c28 <__aeabi_d2f>
 800ecba:	6028      	str	r0, [r5, #0]
 800ecbc:	e7d5      	b.n	800ec6a <_scanf_float+0x3ba>
 800ecbe:	2700      	movs	r7, #0
 800ecc0:	e62e      	b.n	800e920 <_scanf_float+0x70>
 800ecc2:	bf00      	nop
 800ecc4:	080156fe 	.word	0x080156fe
 800ecc8:	080158ba 	.word	0x080158ba

0800eccc <__malloc_lock>:
 800eccc:	4801      	ldr	r0, [pc, #4]	@ (800ecd4 <__malloc_lock+0x8>)
 800ecce:	f001 b894 	b.w	800fdfa <__retarget_lock_acquire_recursive>
 800ecd2:	bf00      	nop
 800ecd4:	200019a0 	.word	0x200019a0

0800ecd8 <__malloc_unlock>:
 800ecd8:	4801      	ldr	r0, [pc, #4]	@ (800ece0 <__malloc_unlock+0x8>)
 800ecda:	f001 b88f 	b.w	800fdfc <__retarget_lock_release_recursive>
 800ecde:	bf00      	nop
 800ece0:	200019a0 	.word	0x200019a0

0800ece4 <siprintf>:
 800ece4:	b40e      	push	{r1, r2, r3}
 800ece6:	b510      	push	{r4, lr}
 800ece8:	b09d      	sub	sp, #116	@ 0x74
 800ecea:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ecec:	9002      	str	r0, [sp, #8]
 800ecee:	9006      	str	r0, [sp, #24]
 800ecf0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ecf4:	480a      	ldr	r0, [pc, #40]	@ (800ed20 <siprintf+0x3c>)
 800ecf6:	9107      	str	r1, [sp, #28]
 800ecf8:	9104      	str	r1, [sp, #16]
 800ecfa:	490a      	ldr	r1, [pc, #40]	@ (800ed24 <siprintf+0x40>)
 800ecfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed00:	9105      	str	r1, [sp, #20]
 800ed02:	2400      	movs	r4, #0
 800ed04:	a902      	add	r1, sp, #8
 800ed06:	6800      	ldr	r0, [r0, #0]
 800ed08:	9301      	str	r3, [sp, #4]
 800ed0a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ed0c:	f002 fae2 	bl	80112d4 <_svfiprintf_r>
 800ed10:	9b02      	ldr	r3, [sp, #8]
 800ed12:	701c      	strb	r4, [r3, #0]
 800ed14:	b01d      	add	sp, #116	@ 0x74
 800ed16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed1a:	b003      	add	sp, #12
 800ed1c:	4770      	bx	lr
 800ed1e:	bf00      	nop
 800ed20:	200001c4 	.word	0x200001c4
 800ed24:	ffff0208 	.word	0xffff0208

0800ed28 <siscanf>:
 800ed28:	b40e      	push	{r1, r2, r3}
 800ed2a:	b570      	push	{r4, r5, r6, lr}
 800ed2c:	b09d      	sub	sp, #116	@ 0x74
 800ed2e:	ac21      	add	r4, sp, #132	@ 0x84
 800ed30:	2500      	movs	r5, #0
 800ed32:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800ed36:	f854 6b04 	ldr.w	r6, [r4], #4
 800ed3a:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ed3e:	951b      	str	r5, [sp, #108]	@ 0x6c
 800ed40:	9002      	str	r0, [sp, #8]
 800ed42:	9006      	str	r0, [sp, #24]
 800ed44:	f7f1 fab4 	bl	80002b0 <strlen>
 800ed48:	4b0b      	ldr	r3, [pc, #44]	@ (800ed78 <siscanf+0x50>)
 800ed4a:	9003      	str	r0, [sp, #12]
 800ed4c:	9007      	str	r0, [sp, #28]
 800ed4e:	480b      	ldr	r0, [pc, #44]	@ (800ed7c <siscanf+0x54>)
 800ed50:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ed52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ed56:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ed5a:	4632      	mov	r2, r6
 800ed5c:	4623      	mov	r3, r4
 800ed5e:	a902      	add	r1, sp, #8
 800ed60:	6800      	ldr	r0, [r0, #0]
 800ed62:	950f      	str	r5, [sp, #60]	@ 0x3c
 800ed64:	9514      	str	r5, [sp, #80]	@ 0x50
 800ed66:	9401      	str	r4, [sp, #4]
 800ed68:	f002 fc0a 	bl	8011580 <__ssvfiscanf_r>
 800ed6c:	b01d      	add	sp, #116	@ 0x74
 800ed6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed72:	b003      	add	sp, #12
 800ed74:	4770      	bx	lr
 800ed76:	bf00      	nop
 800ed78:	0800eda3 	.word	0x0800eda3
 800ed7c:	200001c4 	.word	0x200001c4

0800ed80 <__sread>:
 800ed80:	b510      	push	{r4, lr}
 800ed82:	460c      	mov	r4, r1
 800ed84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed88:	f000 ffd8 	bl	800fd3c <_read_r>
 800ed8c:	2800      	cmp	r0, #0
 800ed8e:	bfab      	itete	ge
 800ed90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ed92:	89a3      	ldrhlt	r3, [r4, #12]
 800ed94:	181b      	addge	r3, r3, r0
 800ed96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ed9a:	bfac      	ite	ge
 800ed9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ed9e:	81a3      	strhlt	r3, [r4, #12]
 800eda0:	bd10      	pop	{r4, pc}

0800eda2 <__seofread>:
 800eda2:	2000      	movs	r0, #0
 800eda4:	4770      	bx	lr

0800eda6 <__swrite>:
 800eda6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edaa:	461f      	mov	r7, r3
 800edac:	898b      	ldrh	r3, [r1, #12]
 800edae:	05db      	lsls	r3, r3, #23
 800edb0:	4605      	mov	r5, r0
 800edb2:	460c      	mov	r4, r1
 800edb4:	4616      	mov	r6, r2
 800edb6:	d505      	bpl.n	800edc4 <__swrite+0x1e>
 800edb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edbc:	2302      	movs	r3, #2
 800edbe:	2200      	movs	r2, #0
 800edc0:	f000 ffaa 	bl	800fd18 <_lseek_r>
 800edc4:	89a3      	ldrh	r3, [r4, #12]
 800edc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800edce:	81a3      	strh	r3, [r4, #12]
 800edd0:	4632      	mov	r2, r6
 800edd2:	463b      	mov	r3, r7
 800edd4:	4628      	mov	r0, r5
 800edd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edda:	f000 bfd1 	b.w	800fd80 <_write_r>

0800edde <__sseek>:
 800edde:	b510      	push	{r4, lr}
 800ede0:	460c      	mov	r4, r1
 800ede2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ede6:	f000 ff97 	bl	800fd18 <_lseek_r>
 800edea:	1c43      	adds	r3, r0, #1
 800edec:	89a3      	ldrh	r3, [r4, #12]
 800edee:	bf15      	itete	ne
 800edf0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800edf2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800edf6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800edfa:	81a3      	strheq	r3, [r4, #12]
 800edfc:	bf18      	it	ne
 800edfe:	81a3      	strhne	r3, [r4, #12]
 800ee00:	bd10      	pop	{r4, pc}

0800ee02 <__sclose>:
 800ee02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee06:	f000 bfff 	b.w	800fe08 <_close_r>
	...

0800ee0c <std>:
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	b510      	push	{r4, lr}
 800ee10:	4604      	mov	r4, r0
 800ee12:	e9c0 3300 	strd	r3, r3, [r0]
 800ee16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee1a:	6083      	str	r3, [r0, #8]
 800ee1c:	8181      	strh	r1, [r0, #12]
 800ee1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ee20:	81c2      	strh	r2, [r0, #14]
 800ee22:	6183      	str	r3, [r0, #24]
 800ee24:	4619      	mov	r1, r3
 800ee26:	2208      	movs	r2, #8
 800ee28:	305c      	adds	r0, #92	@ 0x5c
 800ee2a:	f000 ff45 	bl	800fcb8 <memset>
 800ee2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ee64 <std+0x58>)
 800ee30:	6263      	str	r3, [r4, #36]	@ 0x24
 800ee32:	4b0d      	ldr	r3, [pc, #52]	@ (800ee68 <std+0x5c>)
 800ee34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ee36:	4b0d      	ldr	r3, [pc, #52]	@ (800ee6c <std+0x60>)
 800ee38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ee3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ee70 <std+0x64>)
 800ee3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ee3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ee74 <std+0x68>)
 800ee40:	6224      	str	r4, [r4, #32]
 800ee42:	429c      	cmp	r4, r3
 800ee44:	d006      	beq.n	800ee54 <std+0x48>
 800ee46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ee4a:	4294      	cmp	r4, r2
 800ee4c:	d002      	beq.n	800ee54 <std+0x48>
 800ee4e:	33d0      	adds	r3, #208	@ 0xd0
 800ee50:	429c      	cmp	r4, r3
 800ee52:	d105      	bne.n	800ee60 <std+0x54>
 800ee54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ee58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee5c:	f000 bfcc 	b.w	800fdf8 <__retarget_lock_init_recursive>
 800ee60:	bd10      	pop	{r4, pc}
 800ee62:	bf00      	nop
 800ee64:	0800ed81 	.word	0x0800ed81
 800ee68:	0800eda7 	.word	0x0800eda7
 800ee6c:	0800eddf 	.word	0x0800eddf
 800ee70:	0800ee03 	.word	0x0800ee03
 800ee74:	20001864 	.word	0x20001864

0800ee78 <stdio_exit_handler>:
 800ee78:	4a02      	ldr	r2, [pc, #8]	@ (800ee84 <stdio_exit_handler+0xc>)
 800ee7a:	4903      	ldr	r1, [pc, #12]	@ (800ee88 <stdio_exit_handler+0x10>)
 800ee7c:	4803      	ldr	r0, [pc, #12]	@ (800ee8c <stdio_exit_handler+0x14>)
 800ee7e:	f000 beed 	b.w	800fc5c <_fwalk_sglue>
 800ee82:	bf00      	nop
 800ee84:	2000004c 	.word	0x2000004c
 800ee88:	08011cb9 	.word	0x08011cb9
 800ee8c:	200001c8 	.word	0x200001c8

0800ee90 <cleanup_stdio>:
 800ee90:	6841      	ldr	r1, [r0, #4]
 800ee92:	4b0c      	ldr	r3, [pc, #48]	@ (800eec4 <cleanup_stdio+0x34>)
 800ee94:	4299      	cmp	r1, r3
 800ee96:	b510      	push	{r4, lr}
 800ee98:	4604      	mov	r4, r0
 800ee9a:	d001      	beq.n	800eea0 <cleanup_stdio+0x10>
 800ee9c:	f002 ff0c 	bl	8011cb8 <_fflush_r>
 800eea0:	68a1      	ldr	r1, [r4, #8]
 800eea2:	4b09      	ldr	r3, [pc, #36]	@ (800eec8 <cleanup_stdio+0x38>)
 800eea4:	4299      	cmp	r1, r3
 800eea6:	d002      	beq.n	800eeae <cleanup_stdio+0x1e>
 800eea8:	4620      	mov	r0, r4
 800eeaa:	f002 ff05 	bl	8011cb8 <_fflush_r>
 800eeae:	68e1      	ldr	r1, [r4, #12]
 800eeb0:	4b06      	ldr	r3, [pc, #24]	@ (800eecc <cleanup_stdio+0x3c>)
 800eeb2:	4299      	cmp	r1, r3
 800eeb4:	d004      	beq.n	800eec0 <cleanup_stdio+0x30>
 800eeb6:	4620      	mov	r0, r4
 800eeb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eebc:	f002 befc 	b.w	8011cb8 <_fflush_r>
 800eec0:	bd10      	pop	{r4, pc}
 800eec2:	bf00      	nop
 800eec4:	20001864 	.word	0x20001864
 800eec8:	200018cc 	.word	0x200018cc
 800eecc:	20001934 	.word	0x20001934

0800eed0 <global_stdio_init.part.0>:
 800eed0:	b510      	push	{r4, lr}
 800eed2:	4b0b      	ldr	r3, [pc, #44]	@ (800ef00 <global_stdio_init.part.0+0x30>)
 800eed4:	4c0b      	ldr	r4, [pc, #44]	@ (800ef04 <global_stdio_init.part.0+0x34>)
 800eed6:	4a0c      	ldr	r2, [pc, #48]	@ (800ef08 <global_stdio_init.part.0+0x38>)
 800eed8:	601a      	str	r2, [r3, #0]
 800eeda:	4620      	mov	r0, r4
 800eedc:	2200      	movs	r2, #0
 800eede:	2104      	movs	r1, #4
 800eee0:	f7ff ff94 	bl	800ee0c <std>
 800eee4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800eee8:	2201      	movs	r2, #1
 800eeea:	2109      	movs	r1, #9
 800eeec:	f7ff ff8e 	bl	800ee0c <std>
 800eef0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800eef4:	2202      	movs	r2, #2
 800eef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eefa:	2112      	movs	r1, #18
 800eefc:	f7ff bf86 	b.w	800ee0c <std>
 800ef00:	2000199c 	.word	0x2000199c
 800ef04:	20001864 	.word	0x20001864
 800ef08:	0800ee79 	.word	0x0800ee79

0800ef0c <__sfp_lock_acquire>:
 800ef0c:	4801      	ldr	r0, [pc, #4]	@ (800ef14 <__sfp_lock_acquire+0x8>)
 800ef0e:	f000 bf74 	b.w	800fdfa <__retarget_lock_acquire_recursive>
 800ef12:	bf00      	nop
 800ef14:	200019a1 	.word	0x200019a1

0800ef18 <__sfp_lock_release>:
 800ef18:	4801      	ldr	r0, [pc, #4]	@ (800ef20 <__sfp_lock_release+0x8>)
 800ef1a:	f000 bf6f 	b.w	800fdfc <__retarget_lock_release_recursive>
 800ef1e:	bf00      	nop
 800ef20:	200019a1 	.word	0x200019a1

0800ef24 <__sinit>:
 800ef24:	b510      	push	{r4, lr}
 800ef26:	4604      	mov	r4, r0
 800ef28:	f7ff fff0 	bl	800ef0c <__sfp_lock_acquire>
 800ef2c:	6a23      	ldr	r3, [r4, #32]
 800ef2e:	b11b      	cbz	r3, 800ef38 <__sinit+0x14>
 800ef30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef34:	f7ff bff0 	b.w	800ef18 <__sfp_lock_release>
 800ef38:	4b04      	ldr	r3, [pc, #16]	@ (800ef4c <__sinit+0x28>)
 800ef3a:	6223      	str	r3, [r4, #32]
 800ef3c:	4b04      	ldr	r3, [pc, #16]	@ (800ef50 <__sinit+0x2c>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d1f5      	bne.n	800ef30 <__sinit+0xc>
 800ef44:	f7ff ffc4 	bl	800eed0 <global_stdio_init.part.0>
 800ef48:	e7f2      	b.n	800ef30 <__sinit+0xc>
 800ef4a:	bf00      	nop
 800ef4c:	0800ee91 	.word	0x0800ee91
 800ef50:	2000199c 	.word	0x2000199c

0800ef54 <sulp>:
 800ef54:	b570      	push	{r4, r5, r6, lr}
 800ef56:	4604      	mov	r4, r0
 800ef58:	460d      	mov	r5, r1
 800ef5a:	ec45 4b10 	vmov	d0, r4, r5
 800ef5e:	4616      	mov	r6, r2
 800ef60:	f003 fa3e 	bl	80123e0 <__ulp>
 800ef64:	ec51 0b10 	vmov	r0, r1, d0
 800ef68:	b17e      	cbz	r6, 800ef8a <sulp+0x36>
 800ef6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ef6e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	dd09      	ble.n	800ef8a <sulp+0x36>
 800ef76:	051b      	lsls	r3, r3, #20
 800ef78:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ef7c:	2400      	movs	r4, #0
 800ef7e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ef82:	4622      	mov	r2, r4
 800ef84:	462b      	mov	r3, r5
 800ef86:	f7f1 fb57 	bl	8000638 <__aeabi_dmul>
 800ef8a:	ec41 0b10 	vmov	d0, r0, r1
 800ef8e:	bd70      	pop	{r4, r5, r6, pc}

0800ef90 <_strtod_l>:
 800ef90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef94:	b09f      	sub	sp, #124	@ 0x7c
 800ef96:	460c      	mov	r4, r1
 800ef98:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ef9e:	9005      	str	r0, [sp, #20]
 800efa0:	f04f 0a00 	mov.w	sl, #0
 800efa4:	f04f 0b00 	mov.w	fp, #0
 800efa8:	460a      	mov	r2, r1
 800efaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800efac:	7811      	ldrb	r1, [r2, #0]
 800efae:	292b      	cmp	r1, #43	@ 0x2b
 800efb0:	d04a      	beq.n	800f048 <_strtod_l+0xb8>
 800efb2:	d838      	bhi.n	800f026 <_strtod_l+0x96>
 800efb4:	290d      	cmp	r1, #13
 800efb6:	d832      	bhi.n	800f01e <_strtod_l+0x8e>
 800efb8:	2908      	cmp	r1, #8
 800efba:	d832      	bhi.n	800f022 <_strtod_l+0x92>
 800efbc:	2900      	cmp	r1, #0
 800efbe:	d03b      	beq.n	800f038 <_strtod_l+0xa8>
 800efc0:	2200      	movs	r2, #0
 800efc2:	920e      	str	r2, [sp, #56]	@ 0x38
 800efc4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800efc6:	782a      	ldrb	r2, [r5, #0]
 800efc8:	2a30      	cmp	r2, #48	@ 0x30
 800efca:	f040 80b2 	bne.w	800f132 <_strtod_l+0x1a2>
 800efce:	786a      	ldrb	r2, [r5, #1]
 800efd0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800efd4:	2a58      	cmp	r2, #88	@ 0x58
 800efd6:	d16e      	bne.n	800f0b6 <_strtod_l+0x126>
 800efd8:	9302      	str	r3, [sp, #8]
 800efda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efdc:	9301      	str	r3, [sp, #4]
 800efde:	ab1a      	add	r3, sp, #104	@ 0x68
 800efe0:	9300      	str	r3, [sp, #0]
 800efe2:	4a8f      	ldr	r2, [pc, #572]	@ (800f220 <_strtod_l+0x290>)
 800efe4:	9805      	ldr	r0, [sp, #20]
 800efe6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800efe8:	a919      	add	r1, sp, #100	@ 0x64
 800efea:	f001 fe47 	bl	8010c7c <__gethex>
 800efee:	f010 060f 	ands.w	r6, r0, #15
 800eff2:	4604      	mov	r4, r0
 800eff4:	d005      	beq.n	800f002 <_strtod_l+0x72>
 800eff6:	2e06      	cmp	r6, #6
 800eff8:	d128      	bne.n	800f04c <_strtod_l+0xbc>
 800effa:	3501      	adds	r5, #1
 800effc:	2300      	movs	r3, #0
 800effe:	9519      	str	r5, [sp, #100]	@ 0x64
 800f000:	930e      	str	r3, [sp, #56]	@ 0x38
 800f002:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f004:	2b00      	cmp	r3, #0
 800f006:	f040 858e 	bne.w	800fb26 <_strtod_l+0xb96>
 800f00a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f00c:	b1cb      	cbz	r3, 800f042 <_strtod_l+0xb2>
 800f00e:	4652      	mov	r2, sl
 800f010:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f014:	ec43 2b10 	vmov	d0, r2, r3
 800f018:	b01f      	add	sp, #124	@ 0x7c
 800f01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f01e:	2920      	cmp	r1, #32
 800f020:	d1ce      	bne.n	800efc0 <_strtod_l+0x30>
 800f022:	3201      	adds	r2, #1
 800f024:	e7c1      	b.n	800efaa <_strtod_l+0x1a>
 800f026:	292d      	cmp	r1, #45	@ 0x2d
 800f028:	d1ca      	bne.n	800efc0 <_strtod_l+0x30>
 800f02a:	2101      	movs	r1, #1
 800f02c:	910e      	str	r1, [sp, #56]	@ 0x38
 800f02e:	1c51      	adds	r1, r2, #1
 800f030:	9119      	str	r1, [sp, #100]	@ 0x64
 800f032:	7852      	ldrb	r2, [r2, #1]
 800f034:	2a00      	cmp	r2, #0
 800f036:	d1c5      	bne.n	800efc4 <_strtod_l+0x34>
 800f038:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f03a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	f040 8570 	bne.w	800fb22 <_strtod_l+0xb92>
 800f042:	4652      	mov	r2, sl
 800f044:	465b      	mov	r3, fp
 800f046:	e7e5      	b.n	800f014 <_strtod_l+0x84>
 800f048:	2100      	movs	r1, #0
 800f04a:	e7ef      	b.n	800f02c <_strtod_l+0x9c>
 800f04c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f04e:	b13a      	cbz	r2, 800f060 <_strtod_l+0xd0>
 800f050:	2135      	movs	r1, #53	@ 0x35
 800f052:	a81c      	add	r0, sp, #112	@ 0x70
 800f054:	f003 fabe 	bl	80125d4 <__copybits>
 800f058:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f05a:	9805      	ldr	r0, [sp, #20]
 800f05c:	f002 fe94 	bl	8011d88 <_Bfree>
 800f060:	3e01      	subs	r6, #1
 800f062:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f064:	2e04      	cmp	r6, #4
 800f066:	d806      	bhi.n	800f076 <_strtod_l+0xe6>
 800f068:	e8df f006 	tbb	[pc, r6]
 800f06c:	201d0314 	.word	0x201d0314
 800f070:	14          	.byte	0x14
 800f071:	00          	.byte	0x00
 800f072:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f076:	05e1      	lsls	r1, r4, #23
 800f078:	bf48      	it	mi
 800f07a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f07e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f082:	0d1b      	lsrs	r3, r3, #20
 800f084:	051b      	lsls	r3, r3, #20
 800f086:	2b00      	cmp	r3, #0
 800f088:	d1bb      	bne.n	800f002 <_strtod_l+0x72>
 800f08a:	f000 fe8b 	bl	800fda4 <__errno>
 800f08e:	2322      	movs	r3, #34	@ 0x22
 800f090:	6003      	str	r3, [r0, #0]
 800f092:	e7b6      	b.n	800f002 <_strtod_l+0x72>
 800f094:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f098:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f09c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f0a0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f0a4:	e7e7      	b.n	800f076 <_strtod_l+0xe6>
 800f0a6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800f228 <_strtod_l+0x298>
 800f0aa:	e7e4      	b.n	800f076 <_strtod_l+0xe6>
 800f0ac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f0b0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f0b4:	e7df      	b.n	800f076 <_strtod_l+0xe6>
 800f0b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f0b8:	1c5a      	adds	r2, r3, #1
 800f0ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800f0bc:	785b      	ldrb	r3, [r3, #1]
 800f0be:	2b30      	cmp	r3, #48	@ 0x30
 800f0c0:	d0f9      	beq.n	800f0b6 <_strtod_l+0x126>
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d09d      	beq.n	800f002 <_strtod_l+0x72>
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	2700      	movs	r7, #0
 800f0ca:	9308      	str	r3, [sp, #32]
 800f0cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f0ce:	930c      	str	r3, [sp, #48]	@ 0x30
 800f0d0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800f0d2:	46b9      	mov	r9, r7
 800f0d4:	220a      	movs	r2, #10
 800f0d6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f0d8:	7805      	ldrb	r5, [r0, #0]
 800f0da:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f0de:	b2d9      	uxtb	r1, r3
 800f0e0:	2909      	cmp	r1, #9
 800f0e2:	d928      	bls.n	800f136 <_strtod_l+0x1a6>
 800f0e4:	494f      	ldr	r1, [pc, #316]	@ (800f224 <_strtod_l+0x294>)
 800f0e6:	2201      	movs	r2, #1
 800f0e8:	f000 fdee 	bl	800fcc8 <strncmp>
 800f0ec:	2800      	cmp	r0, #0
 800f0ee:	d032      	beq.n	800f156 <_strtod_l+0x1c6>
 800f0f0:	2000      	movs	r0, #0
 800f0f2:	462a      	mov	r2, r5
 800f0f4:	900a      	str	r0, [sp, #40]	@ 0x28
 800f0f6:	464d      	mov	r5, r9
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	2a65      	cmp	r2, #101	@ 0x65
 800f0fc:	d001      	beq.n	800f102 <_strtod_l+0x172>
 800f0fe:	2a45      	cmp	r2, #69	@ 0x45
 800f100:	d114      	bne.n	800f12c <_strtod_l+0x19c>
 800f102:	b91d      	cbnz	r5, 800f10c <_strtod_l+0x17c>
 800f104:	9a08      	ldr	r2, [sp, #32]
 800f106:	4302      	orrs	r2, r0
 800f108:	d096      	beq.n	800f038 <_strtod_l+0xa8>
 800f10a:	2500      	movs	r5, #0
 800f10c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f10e:	1c62      	adds	r2, r4, #1
 800f110:	9219      	str	r2, [sp, #100]	@ 0x64
 800f112:	7862      	ldrb	r2, [r4, #1]
 800f114:	2a2b      	cmp	r2, #43	@ 0x2b
 800f116:	d07a      	beq.n	800f20e <_strtod_l+0x27e>
 800f118:	2a2d      	cmp	r2, #45	@ 0x2d
 800f11a:	d07e      	beq.n	800f21a <_strtod_l+0x28a>
 800f11c:	f04f 0c00 	mov.w	ip, #0
 800f120:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f124:	2909      	cmp	r1, #9
 800f126:	f240 8085 	bls.w	800f234 <_strtod_l+0x2a4>
 800f12a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f12c:	f04f 0800 	mov.w	r8, #0
 800f130:	e0a5      	b.n	800f27e <_strtod_l+0x2ee>
 800f132:	2300      	movs	r3, #0
 800f134:	e7c8      	b.n	800f0c8 <_strtod_l+0x138>
 800f136:	f1b9 0f08 	cmp.w	r9, #8
 800f13a:	bfd8      	it	le
 800f13c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800f13e:	f100 0001 	add.w	r0, r0, #1
 800f142:	bfda      	itte	le
 800f144:	fb02 3301 	mlale	r3, r2, r1, r3
 800f148:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800f14a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800f14e:	f109 0901 	add.w	r9, r9, #1
 800f152:	9019      	str	r0, [sp, #100]	@ 0x64
 800f154:	e7bf      	b.n	800f0d6 <_strtod_l+0x146>
 800f156:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f158:	1c5a      	adds	r2, r3, #1
 800f15a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f15c:	785a      	ldrb	r2, [r3, #1]
 800f15e:	f1b9 0f00 	cmp.w	r9, #0
 800f162:	d03b      	beq.n	800f1dc <_strtod_l+0x24c>
 800f164:	900a      	str	r0, [sp, #40]	@ 0x28
 800f166:	464d      	mov	r5, r9
 800f168:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f16c:	2b09      	cmp	r3, #9
 800f16e:	d912      	bls.n	800f196 <_strtod_l+0x206>
 800f170:	2301      	movs	r3, #1
 800f172:	e7c2      	b.n	800f0fa <_strtod_l+0x16a>
 800f174:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f176:	1c5a      	adds	r2, r3, #1
 800f178:	9219      	str	r2, [sp, #100]	@ 0x64
 800f17a:	785a      	ldrb	r2, [r3, #1]
 800f17c:	3001      	adds	r0, #1
 800f17e:	2a30      	cmp	r2, #48	@ 0x30
 800f180:	d0f8      	beq.n	800f174 <_strtod_l+0x1e4>
 800f182:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f186:	2b08      	cmp	r3, #8
 800f188:	f200 84d2 	bhi.w	800fb30 <_strtod_l+0xba0>
 800f18c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f18e:	900a      	str	r0, [sp, #40]	@ 0x28
 800f190:	2000      	movs	r0, #0
 800f192:	930c      	str	r3, [sp, #48]	@ 0x30
 800f194:	4605      	mov	r5, r0
 800f196:	3a30      	subs	r2, #48	@ 0x30
 800f198:	f100 0301 	add.w	r3, r0, #1
 800f19c:	d018      	beq.n	800f1d0 <_strtod_l+0x240>
 800f19e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f1a0:	4419      	add	r1, r3
 800f1a2:	910a      	str	r1, [sp, #40]	@ 0x28
 800f1a4:	462e      	mov	r6, r5
 800f1a6:	f04f 0e0a 	mov.w	lr, #10
 800f1aa:	1c71      	adds	r1, r6, #1
 800f1ac:	eba1 0c05 	sub.w	ip, r1, r5
 800f1b0:	4563      	cmp	r3, ip
 800f1b2:	dc15      	bgt.n	800f1e0 <_strtod_l+0x250>
 800f1b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800f1b8:	182b      	adds	r3, r5, r0
 800f1ba:	2b08      	cmp	r3, #8
 800f1bc:	f105 0501 	add.w	r5, r5, #1
 800f1c0:	4405      	add	r5, r0
 800f1c2:	dc1a      	bgt.n	800f1fa <_strtod_l+0x26a>
 800f1c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f1c6:	230a      	movs	r3, #10
 800f1c8:	fb03 2301 	mla	r3, r3, r1, r2
 800f1cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f1d2:	1c51      	adds	r1, r2, #1
 800f1d4:	9119      	str	r1, [sp, #100]	@ 0x64
 800f1d6:	7852      	ldrb	r2, [r2, #1]
 800f1d8:	4618      	mov	r0, r3
 800f1da:	e7c5      	b.n	800f168 <_strtod_l+0x1d8>
 800f1dc:	4648      	mov	r0, r9
 800f1de:	e7ce      	b.n	800f17e <_strtod_l+0x1ee>
 800f1e0:	2e08      	cmp	r6, #8
 800f1e2:	dc05      	bgt.n	800f1f0 <_strtod_l+0x260>
 800f1e4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f1e6:	fb0e f606 	mul.w	r6, lr, r6
 800f1ea:	960b      	str	r6, [sp, #44]	@ 0x2c
 800f1ec:	460e      	mov	r6, r1
 800f1ee:	e7dc      	b.n	800f1aa <_strtod_l+0x21a>
 800f1f0:	2910      	cmp	r1, #16
 800f1f2:	bfd8      	it	le
 800f1f4:	fb0e f707 	mulle.w	r7, lr, r7
 800f1f8:	e7f8      	b.n	800f1ec <_strtod_l+0x25c>
 800f1fa:	2b0f      	cmp	r3, #15
 800f1fc:	bfdc      	itt	le
 800f1fe:	230a      	movle	r3, #10
 800f200:	fb03 2707 	mlale	r7, r3, r7, r2
 800f204:	e7e3      	b.n	800f1ce <_strtod_l+0x23e>
 800f206:	2300      	movs	r3, #0
 800f208:	930a      	str	r3, [sp, #40]	@ 0x28
 800f20a:	2301      	movs	r3, #1
 800f20c:	e77a      	b.n	800f104 <_strtod_l+0x174>
 800f20e:	f04f 0c00 	mov.w	ip, #0
 800f212:	1ca2      	adds	r2, r4, #2
 800f214:	9219      	str	r2, [sp, #100]	@ 0x64
 800f216:	78a2      	ldrb	r2, [r4, #2]
 800f218:	e782      	b.n	800f120 <_strtod_l+0x190>
 800f21a:	f04f 0c01 	mov.w	ip, #1
 800f21e:	e7f8      	b.n	800f212 <_strtod_l+0x282>
 800f220:	080158d0 	.word	0x080158d0
 800f224:	08015703 	.word	0x08015703
 800f228:	7ff00000 	.word	0x7ff00000
 800f22c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f22e:	1c51      	adds	r1, r2, #1
 800f230:	9119      	str	r1, [sp, #100]	@ 0x64
 800f232:	7852      	ldrb	r2, [r2, #1]
 800f234:	2a30      	cmp	r2, #48	@ 0x30
 800f236:	d0f9      	beq.n	800f22c <_strtod_l+0x29c>
 800f238:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f23c:	2908      	cmp	r1, #8
 800f23e:	f63f af75 	bhi.w	800f12c <_strtod_l+0x19c>
 800f242:	3a30      	subs	r2, #48	@ 0x30
 800f244:	9209      	str	r2, [sp, #36]	@ 0x24
 800f246:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f248:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f24a:	f04f 080a 	mov.w	r8, #10
 800f24e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f250:	1c56      	adds	r6, r2, #1
 800f252:	9619      	str	r6, [sp, #100]	@ 0x64
 800f254:	7852      	ldrb	r2, [r2, #1]
 800f256:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f25a:	f1be 0f09 	cmp.w	lr, #9
 800f25e:	d939      	bls.n	800f2d4 <_strtod_l+0x344>
 800f260:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f262:	1a76      	subs	r6, r6, r1
 800f264:	2e08      	cmp	r6, #8
 800f266:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f26a:	dc03      	bgt.n	800f274 <_strtod_l+0x2e4>
 800f26c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f26e:	4588      	cmp	r8, r1
 800f270:	bfa8      	it	ge
 800f272:	4688      	movge	r8, r1
 800f274:	f1bc 0f00 	cmp.w	ip, #0
 800f278:	d001      	beq.n	800f27e <_strtod_l+0x2ee>
 800f27a:	f1c8 0800 	rsb	r8, r8, #0
 800f27e:	2d00      	cmp	r5, #0
 800f280:	d14e      	bne.n	800f320 <_strtod_l+0x390>
 800f282:	9908      	ldr	r1, [sp, #32]
 800f284:	4308      	orrs	r0, r1
 800f286:	f47f aebc 	bne.w	800f002 <_strtod_l+0x72>
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	f47f aed4 	bne.w	800f038 <_strtod_l+0xa8>
 800f290:	2a69      	cmp	r2, #105	@ 0x69
 800f292:	d028      	beq.n	800f2e6 <_strtod_l+0x356>
 800f294:	dc25      	bgt.n	800f2e2 <_strtod_l+0x352>
 800f296:	2a49      	cmp	r2, #73	@ 0x49
 800f298:	d025      	beq.n	800f2e6 <_strtod_l+0x356>
 800f29a:	2a4e      	cmp	r2, #78	@ 0x4e
 800f29c:	f47f aecc 	bne.w	800f038 <_strtod_l+0xa8>
 800f2a0:	499a      	ldr	r1, [pc, #616]	@ (800f50c <_strtod_l+0x57c>)
 800f2a2:	a819      	add	r0, sp, #100	@ 0x64
 800f2a4:	f001 ff0c 	bl	80110c0 <__match>
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	f43f aec5 	beq.w	800f038 <_strtod_l+0xa8>
 800f2ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	2b28      	cmp	r3, #40	@ 0x28
 800f2b4:	d12e      	bne.n	800f314 <_strtod_l+0x384>
 800f2b6:	4996      	ldr	r1, [pc, #600]	@ (800f510 <_strtod_l+0x580>)
 800f2b8:	aa1c      	add	r2, sp, #112	@ 0x70
 800f2ba:	a819      	add	r0, sp, #100	@ 0x64
 800f2bc:	f001 ff14 	bl	80110e8 <__hexnan>
 800f2c0:	2805      	cmp	r0, #5
 800f2c2:	d127      	bne.n	800f314 <_strtod_l+0x384>
 800f2c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f2c6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f2ca:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f2ce:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f2d2:	e696      	b.n	800f002 <_strtod_l+0x72>
 800f2d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f2d6:	fb08 2101 	mla	r1, r8, r1, r2
 800f2da:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f2de:	9209      	str	r2, [sp, #36]	@ 0x24
 800f2e0:	e7b5      	b.n	800f24e <_strtod_l+0x2be>
 800f2e2:	2a6e      	cmp	r2, #110	@ 0x6e
 800f2e4:	e7da      	b.n	800f29c <_strtod_l+0x30c>
 800f2e6:	498b      	ldr	r1, [pc, #556]	@ (800f514 <_strtod_l+0x584>)
 800f2e8:	a819      	add	r0, sp, #100	@ 0x64
 800f2ea:	f001 fee9 	bl	80110c0 <__match>
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	f43f aea2 	beq.w	800f038 <_strtod_l+0xa8>
 800f2f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f2f6:	4988      	ldr	r1, [pc, #544]	@ (800f518 <_strtod_l+0x588>)
 800f2f8:	3b01      	subs	r3, #1
 800f2fa:	a819      	add	r0, sp, #100	@ 0x64
 800f2fc:	9319      	str	r3, [sp, #100]	@ 0x64
 800f2fe:	f001 fedf 	bl	80110c0 <__match>
 800f302:	b910      	cbnz	r0, 800f30a <_strtod_l+0x37a>
 800f304:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f306:	3301      	adds	r3, #1
 800f308:	9319      	str	r3, [sp, #100]	@ 0x64
 800f30a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800f528 <_strtod_l+0x598>
 800f30e:	f04f 0a00 	mov.w	sl, #0
 800f312:	e676      	b.n	800f002 <_strtod_l+0x72>
 800f314:	4881      	ldr	r0, [pc, #516]	@ (800f51c <_strtod_l+0x58c>)
 800f316:	f000 fd97 	bl	800fe48 <nan>
 800f31a:	ec5b ab10 	vmov	sl, fp, d0
 800f31e:	e670      	b.n	800f002 <_strtod_l+0x72>
 800f320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f322:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f324:	eba8 0303 	sub.w	r3, r8, r3
 800f328:	f1b9 0f00 	cmp.w	r9, #0
 800f32c:	bf08      	it	eq
 800f32e:	46a9      	moveq	r9, r5
 800f330:	2d10      	cmp	r5, #16
 800f332:	9309      	str	r3, [sp, #36]	@ 0x24
 800f334:	462c      	mov	r4, r5
 800f336:	bfa8      	it	ge
 800f338:	2410      	movge	r4, #16
 800f33a:	f7f1 f903 	bl	8000544 <__aeabi_ui2d>
 800f33e:	2d09      	cmp	r5, #9
 800f340:	4682      	mov	sl, r0
 800f342:	468b      	mov	fp, r1
 800f344:	dc13      	bgt.n	800f36e <_strtod_l+0x3de>
 800f346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f348:	2b00      	cmp	r3, #0
 800f34a:	f43f ae5a 	beq.w	800f002 <_strtod_l+0x72>
 800f34e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f350:	dd78      	ble.n	800f444 <_strtod_l+0x4b4>
 800f352:	2b16      	cmp	r3, #22
 800f354:	dc5f      	bgt.n	800f416 <_strtod_l+0x486>
 800f356:	4972      	ldr	r1, [pc, #456]	@ (800f520 <_strtod_l+0x590>)
 800f358:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f35c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f360:	4652      	mov	r2, sl
 800f362:	465b      	mov	r3, fp
 800f364:	f7f1 f968 	bl	8000638 <__aeabi_dmul>
 800f368:	4682      	mov	sl, r0
 800f36a:	468b      	mov	fp, r1
 800f36c:	e649      	b.n	800f002 <_strtod_l+0x72>
 800f36e:	4b6c      	ldr	r3, [pc, #432]	@ (800f520 <_strtod_l+0x590>)
 800f370:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f374:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f378:	f7f1 f95e 	bl	8000638 <__aeabi_dmul>
 800f37c:	4682      	mov	sl, r0
 800f37e:	4638      	mov	r0, r7
 800f380:	468b      	mov	fp, r1
 800f382:	f7f1 f8df 	bl	8000544 <__aeabi_ui2d>
 800f386:	4602      	mov	r2, r0
 800f388:	460b      	mov	r3, r1
 800f38a:	4650      	mov	r0, sl
 800f38c:	4659      	mov	r1, fp
 800f38e:	f7f0 ff9d 	bl	80002cc <__adddf3>
 800f392:	2d0f      	cmp	r5, #15
 800f394:	4682      	mov	sl, r0
 800f396:	468b      	mov	fp, r1
 800f398:	ddd5      	ble.n	800f346 <_strtod_l+0x3b6>
 800f39a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f39c:	1b2c      	subs	r4, r5, r4
 800f39e:	441c      	add	r4, r3
 800f3a0:	2c00      	cmp	r4, #0
 800f3a2:	f340 8093 	ble.w	800f4cc <_strtod_l+0x53c>
 800f3a6:	f014 030f 	ands.w	r3, r4, #15
 800f3aa:	d00a      	beq.n	800f3c2 <_strtod_l+0x432>
 800f3ac:	495c      	ldr	r1, [pc, #368]	@ (800f520 <_strtod_l+0x590>)
 800f3ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f3b2:	4652      	mov	r2, sl
 800f3b4:	465b      	mov	r3, fp
 800f3b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3ba:	f7f1 f93d 	bl	8000638 <__aeabi_dmul>
 800f3be:	4682      	mov	sl, r0
 800f3c0:	468b      	mov	fp, r1
 800f3c2:	f034 040f 	bics.w	r4, r4, #15
 800f3c6:	d073      	beq.n	800f4b0 <_strtod_l+0x520>
 800f3c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f3cc:	dd49      	ble.n	800f462 <_strtod_l+0x4d2>
 800f3ce:	2400      	movs	r4, #0
 800f3d0:	46a0      	mov	r8, r4
 800f3d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f3d4:	46a1      	mov	r9, r4
 800f3d6:	9a05      	ldr	r2, [sp, #20]
 800f3d8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800f528 <_strtod_l+0x598>
 800f3dc:	2322      	movs	r3, #34	@ 0x22
 800f3de:	6013      	str	r3, [r2, #0]
 800f3e0:	f04f 0a00 	mov.w	sl, #0
 800f3e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	f43f ae0b 	beq.w	800f002 <_strtod_l+0x72>
 800f3ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f3ee:	9805      	ldr	r0, [sp, #20]
 800f3f0:	f002 fcca 	bl	8011d88 <_Bfree>
 800f3f4:	9805      	ldr	r0, [sp, #20]
 800f3f6:	4649      	mov	r1, r9
 800f3f8:	f002 fcc6 	bl	8011d88 <_Bfree>
 800f3fc:	9805      	ldr	r0, [sp, #20]
 800f3fe:	4641      	mov	r1, r8
 800f400:	f002 fcc2 	bl	8011d88 <_Bfree>
 800f404:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f406:	9805      	ldr	r0, [sp, #20]
 800f408:	f002 fcbe 	bl	8011d88 <_Bfree>
 800f40c:	9805      	ldr	r0, [sp, #20]
 800f40e:	4621      	mov	r1, r4
 800f410:	f002 fcba 	bl	8011d88 <_Bfree>
 800f414:	e5f5      	b.n	800f002 <_strtod_l+0x72>
 800f416:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f418:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f41c:	4293      	cmp	r3, r2
 800f41e:	dbbc      	blt.n	800f39a <_strtod_l+0x40a>
 800f420:	4c3f      	ldr	r4, [pc, #252]	@ (800f520 <_strtod_l+0x590>)
 800f422:	f1c5 050f 	rsb	r5, r5, #15
 800f426:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f42a:	4652      	mov	r2, sl
 800f42c:	465b      	mov	r3, fp
 800f42e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f432:	f7f1 f901 	bl	8000638 <__aeabi_dmul>
 800f436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f438:	1b5d      	subs	r5, r3, r5
 800f43a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f43e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f442:	e78f      	b.n	800f364 <_strtod_l+0x3d4>
 800f444:	3316      	adds	r3, #22
 800f446:	dba8      	blt.n	800f39a <_strtod_l+0x40a>
 800f448:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f44a:	eba3 0808 	sub.w	r8, r3, r8
 800f44e:	4b34      	ldr	r3, [pc, #208]	@ (800f520 <_strtod_l+0x590>)
 800f450:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f454:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f458:	4650      	mov	r0, sl
 800f45a:	4659      	mov	r1, fp
 800f45c:	f7f1 fa16 	bl	800088c <__aeabi_ddiv>
 800f460:	e782      	b.n	800f368 <_strtod_l+0x3d8>
 800f462:	2300      	movs	r3, #0
 800f464:	4f2f      	ldr	r7, [pc, #188]	@ (800f524 <_strtod_l+0x594>)
 800f466:	1124      	asrs	r4, r4, #4
 800f468:	4650      	mov	r0, sl
 800f46a:	4659      	mov	r1, fp
 800f46c:	461e      	mov	r6, r3
 800f46e:	2c01      	cmp	r4, #1
 800f470:	dc21      	bgt.n	800f4b6 <_strtod_l+0x526>
 800f472:	b10b      	cbz	r3, 800f478 <_strtod_l+0x4e8>
 800f474:	4682      	mov	sl, r0
 800f476:	468b      	mov	fp, r1
 800f478:	492a      	ldr	r1, [pc, #168]	@ (800f524 <_strtod_l+0x594>)
 800f47a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f47e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f482:	4652      	mov	r2, sl
 800f484:	465b      	mov	r3, fp
 800f486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f48a:	f7f1 f8d5 	bl	8000638 <__aeabi_dmul>
 800f48e:	4b26      	ldr	r3, [pc, #152]	@ (800f528 <_strtod_l+0x598>)
 800f490:	460a      	mov	r2, r1
 800f492:	400b      	ands	r3, r1
 800f494:	4925      	ldr	r1, [pc, #148]	@ (800f52c <_strtod_l+0x59c>)
 800f496:	428b      	cmp	r3, r1
 800f498:	4682      	mov	sl, r0
 800f49a:	d898      	bhi.n	800f3ce <_strtod_l+0x43e>
 800f49c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f4a0:	428b      	cmp	r3, r1
 800f4a2:	bf86      	itte	hi
 800f4a4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800f530 <_strtod_l+0x5a0>
 800f4a8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800f4ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	9308      	str	r3, [sp, #32]
 800f4b4:	e076      	b.n	800f5a4 <_strtod_l+0x614>
 800f4b6:	07e2      	lsls	r2, r4, #31
 800f4b8:	d504      	bpl.n	800f4c4 <_strtod_l+0x534>
 800f4ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4be:	f7f1 f8bb 	bl	8000638 <__aeabi_dmul>
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	3601      	adds	r6, #1
 800f4c6:	1064      	asrs	r4, r4, #1
 800f4c8:	3708      	adds	r7, #8
 800f4ca:	e7d0      	b.n	800f46e <_strtod_l+0x4de>
 800f4cc:	d0f0      	beq.n	800f4b0 <_strtod_l+0x520>
 800f4ce:	4264      	negs	r4, r4
 800f4d0:	f014 020f 	ands.w	r2, r4, #15
 800f4d4:	d00a      	beq.n	800f4ec <_strtod_l+0x55c>
 800f4d6:	4b12      	ldr	r3, [pc, #72]	@ (800f520 <_strtod_l+0x590>)
 800f4d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f4dc:	4650      	mov	r0, sl
 800f4de:	4659      	mov	r1, fp
 800f4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e4:	f7f1 f9d2 	bl	800088c <__aeabi_ddiv>
 800f4e8:	4682      	mov	sl, r0
 800f4ea:	468b      	mov	fp, r1
 800f4ec:	1124      	asrs	r4, r4, #4
 800f4ee:	d0df      	beq.n	800f4b0 <_strtod_l+0x520>
 800f4f0:	2c1f      	cmp	r4, #31
 800f4f2:	dd1f      	ble.n	800f534 <_strtod_l+0x5a4>
 800f4f4:	2400      	movs	r4, #0
 800f4f6:	46a0      	mov	r8, r4
 800f4f8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f4fa:	46a1      	mov	r9, r4
 800f4fc:	9a05      	ldr	r2, [sp, #20]
 800f4fe:	2322      	movs	r3, #34	@ 0x22
 800f500:	f04f 0a00 	mov.w	sl, #0
 800f504:	f04f 0b00 	mov.w	fp, #0
 800f508:	6013      	str	r3, [r2, #0]
 800f50a:	e76b      	b.n	800f3e4 <_strtod_l+0x454>
 800f50c:	080156d9 	.word	0x080156d9
 800f510:	080158bc 	.word	0x080158bc
 800f514:	080156d1 	.word	0x080156d1
 800f518:	08015710 	.word	0x08015710
 800f51c:	080158ba 	.word	0x080158ba
 800f520:	08015a48 	.word	0x08015a48
 800f524:	08015a20 	.word	0x08015a20
 800f528:	7ff00000 	.word	0x7ff00000
 800f52c:	7ca00000 	.word	0x7ca00000
 800f530:	7fefffff 	.word	0x7fefffff
 800f534:	f014 0310 	ands.w	r3, r4, #16
 800f538:	bf18      	it	ne
 800f53a:	236a      	movne	r3, #106	@ 0x6a
 800f53c:	4ea9      	ldr	r6, [pc, #676]	@ (800f7e4 <_strtod_l+0x854>)
 800f53e:	9308      	str	r3, [sp, #32]
 800f540:	4650      	mov	r0, sl
 800f542:	4659      	mov	r1, fp
 800f544:	2300      	movs	r3, #0
 800f546:	07e7      	lsls	r7, r4, #31
 800f548:	d504      	bpl.n	800f554 <_strtod_l+0x5c4>
 800f54a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f54e:	f7f1 f873 	bl	8000638 <__aeabi_dmul>
 800f552:	2301      	movs	r3, #1
 800f554:	1064      	asrs	r4, r4, #1
 800f556:	f106 0608 	add.w	r6, r6, #8
 800f55a:	d1f4      	bne.n	800f546 <_strtod_l+0x5b6>
 800f55c:	b10b      	cbz	r3, 800f562 <_strtod_l+0x5d2>
 800f55e:	4682      	mov	sl, r0
 800f560:	468b      	mov	fp, r1
 800f562:	9b08      	ldr	r3, [sp, #32]
 800f564:	b1b3      	cbz	r3, 800f594 <_strtod_l+0x604>
 800f566:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f56a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f56e:	2b00      	cmp	r3, #0
 800f570:	4659      	mov	r1, fp
 800f572:	dd0f      	ble.n	800f594 <_strtod_l+0x604>
 800f574:	2b1f      	cmp	r3, #31
 800f576:	dd56      	ble.n	800f626 <_strtod_l+0x696>
 800f578:	2b34      	cmp	r3, #52	@ 0x34
 800f57a:	bfde      	ittt	le
 800f57c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800f580:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f584:	4093      	lslle	r3, r2
 800f586:	f04f 0a00 	mov.w	sl, #0
 800f58a:	bfcc      	ite	gt
 800f58c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f590:	ea03 0b01 	andle.w	fp, r3, r1
 800f594:	2200      	movs	r2, #0
 800f596:	2300      	movs	r3, #0
 800f598:	4650      	mov	r0, sl
 800f59a:	4659      	mov	r1, fp
 800f59c:	f7f1 fab4 	bl	8000b08 <__aeabi_dcmpeq>
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	d1a7      	bne.n	800f4f4 <_strtod_l+0x564>
 800f5a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5a6:	9300      	str	r3, [sp, #0]
 800f5a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f5aa:	9805      	ldr	r0, [sp, #20]
 800f5ac:	462b      	mov	r3, r5
 800f5ae:	464a      	mov	r2, r9
 800f5b0:	f002 fc52 	bl	8011e58 <__s2b>
 800f5b4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f5b6:	2800      	cmp	r0, #0
 800f5b8:	f43f af09 	beq.w	800f3ce <_strtod_l+0x43e>
 800f5bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5c0:	2a00      	cmp	r2, #0
 800f5c2:	eba3 0308 	sub.w	r3, r3, r8
 800f5c6:	bfa8      	it	ge
 800f5c8:	2300      	movge	r3, #0
 800f5ca:	9312      	str	r3, [sp, #72]	@ 0x48
 800f5cc:	2400      	movs	r4, #0
 800f5ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f5d2:	9316      	str	r3, [sp, #88]	@ 0x58
 800f5d4:	46a0      	mov	r8, r4
 800f5d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5d8:	9805      	ldr	r0, [sp, #20]
 800f5da:	6859      	ldr	r1, [r3, #4]
 800f5dc:	f002 fb94 	bl	8011d08 <_Balloc>
 800f5e0:	4681      	mov	r9, r0
 800f5e2:	2800      	cmp	r0, #0
 800f5e4:	f43f aef7 	beq.w	800f3d6 <_strtod_l+0x446>
 800f5e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5ea:	691a      	ldr	r2, [r3, #16]
 800f5ec:	3202      	adds	r2, #2
 800f5ee:	f103 010c 	add.w	r1, r3, #12
 800f5f2:	0092      	lsls	r2, r2, #2
 800f5f4:	300c      	adds	r0, #12
 800f5f6:	f000 fc17 	bl	800fe28 <memcpy>
 800f5fa:	ec4b ab10 	vmov	d0, sl, fp
 800f5fe:	9805      	ldr	r0, [sp, #20]
 800f600:	aa1c      	add	r2, sp, #112	@ 0x70
 800f602:	a91b      	add	r1, sp, #108	@ 0x6c
 800f604:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f608:	f002 ff5a 	bl	80124c0 <__d2b>
 800f60c:	901a      	str	r0, [sp, #104]	@ 0x68
 800f60e:	2800      	cmp	r0, #0
 800f610:	f43f aee1 	beq.w	800f3d6 <_strtod_l+0x446>
 800f614:	9805      	ldr	r0, [sp, #20]
 800f616:	2101      	movs	r1, #1
 800f618:	f002 fcb4 	bl	8011f84 <__i2b>
 800f61c:	4680      	mov	r8, r0
 800f61e:	b948      	cbnz	r0, 800f634 <_strtod_l+0x6a4>
 800f620:	f04f 0800 	mov.w	r8, #0
 800f624:	e6d7      	b.n	800f3d6 <_strtod_l+0x446>
 800f626:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f62a:	fa02 f303 	lsl.w	r3, r2, r3
 800f62e:	ea03 0a0a 	and.w	sl, r3, sl
 800f632:	e7af      	b.n	800f594 <_strtod_l+0x604>
 800f634:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f636:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f638:	2d00      	cmp	r5, #0
 800f63a:	bfab      	itete	ge
 800f63c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f63e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f640:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f642:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f644:	bfac      	ite	ge
 800f646:	18ef      	addge	r7, r5, r3
 800f648:	1b5e      	sublt	r6, r3, r5
 800f64a:	9b08      	ldr	r3, [sp, #32]
 800f64c:	1aed      	subs	r5, r5, r3
 800f64e:	4415      	add	r5, r2
 800f650:	4b65      	ldr	r3, [pc, #404]	@ (800f7e8 <_strtod_l+0x858>)
 800f652:	3d01      	subs	r5, #1
 800f654:	429d      	cmp	r5, r3
 800f656:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f65a:	da50      	bge.n	800f6fe <_strtod_l+0x76e>
 800f65c:	1b5b      	subs	r3, r3, r5
 800f65e:	2b1f      	cmp	r3, #31
 800f660:	eba2 0203 	sub.w	r2, r2, r3
 800f664:	f04f 0101 	mov.w	r1, #1
 800f668:	dc3d      	bgt.n	800f6e6 <_strtod_l+0x756>
 800f66a:	fa01 f303 	lsl.w	r3, r1, r3
 800f66e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f670:	2300      	movs	r3, #0
 800f672:	9310      	str	r3, [sp, #64]	@ 0x40
 800f674:	18bd      	adds	r5, r7, r2
 800f676:	9b08      	ldr	r3, [sp, #32]
 800f678:	42af      	cmp	r7, r5
 800f67a:	4416      	add	r6, r2
 800f67c:	441e      	add	r6, r3
 800f67e:	463b      	mov	r3, r7
 800f680:	bfa8      	it	ge
 800f682:	462b      	movge	r3, r5
 800f684:	42b3      	cmp	r3, r6
 800f686:	bfa8      	it	ge
 800f688:	4633      	movge	r3, r6
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	bfc2      	ittt	gt
 800f68e:	1aed      	subgt	r5, r5, r3
 800f690:	1af6      	subgt	r6, r6, r3
 800f692:	1aff      	subgt	r7, r7, r3
 800f694:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f696:	2b00      	cmp	r3, #0
 800f698:	dd16      	ble.n	800f6c8 <_strtod_l+0x738>
 800f69a:	4641      	mov	r1, r8
 800f69c:	9805      	ldr	r0, [sp, #20]
 800f69e:	461a      	mov	r2, r3
 800f6a0:	f002 fd28 	bl	80120f4 <__pow5mult>
 800f6a4:	4680      	mov	r8, r0
 800f6a6:	2800      	cmp	r0, #0
 800f6a8:	d0ba      	beq.n	800f620 <_strtod_l+0x690>
 800f6aa:	4601      	mov	r1, r0
 800f6ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f6ae:	9805      	ldr	r0, [sp, #20]
 800f6b0:	f002 fc7e 	bl	8011fb0 <__multiply>
 800f6b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	f43f ae8d 	beq.w	800f3d6 <_strtod_l+0x446>
 800f6bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f6be:	9805      	ldr	r0, [sp, #20]
 800f6c0:	f002 fb62 	bl	8011d88 <_Bfree>
 800f6c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6c6:	931a      	str	r3, [sp, #104]	@ 0x68
 800f6c8:	2d00      	cmp	r5, #0
 800f6ca:	dc1d      	bgt.n	800f708 <_strtod_l+0x778>
 800f6cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	dd23      	ble.n	800f71a <_strtod_l+0x78a>
 800f6d2:	4649      	mov	r1, r9
 800f6d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f6d6:	9805      	ldr	r0, [sp, #20]
 800f6d8:	f002 fd0c 	bl	80120f4 <__pow5mult>
 800f6dc:	4681      	mov	r9, r0
 800f6de:	b9e0      	cbnz	r0, 800f71a <_strtod_l+0x78a>
 800f6e0:	f04f 0900 	mov.w	r9, #0
 800f6e4:	e677      	b.n	800f3d6 <_strtod_l+0x446>
 800f6e6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f6ea:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f6ee:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f6f2:	35e2      	adds	r5, #226	@ 0xe2
 800f6f4:	fa01 f305 	lsl.w	r3, r1, r5
 800f6f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800f6fa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f6fc:	e7ba      	b.n	800f674 <_strtod_l+0x6e4>
 800f6fe:	2300      	movs	r3, #0
 800f700:	9310      	str	r3, [sp, #64]	@ 0x40
 800f702:	2301      	movs	r3, #1
 800f704:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f706:	e7b5      	b.n	800f674 <_strtod_l+0x6e4>
 800f708:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f70a:	9805      	ldr	r0, [sp, #20]
 800f70c:	462a      	mov	r2, r5
 800f70e:	f002 fd4b 	bl	80121a8 <__lshift>
 800f712:	901a      	str	r0, [sp, #104]	@ 0x68
 800f714:	2800      	cmp	r0, #0
 800f716:	d1d9      	bne.n	800f6cc <_strtod_l+0x73c>
 800f718:	e65d      	b.n	800f3d6 <_strtod_l+0x446>
 800f71a:	2e00      	cmp	r6, #0
 800f71c:	dd07      	ble.n	800f72e <_strtod_l+0x79e>
 800f71e:	4649      	mov	r1, r9
 800f720:	9805      	ldr	r0, [sp, #20]
 800f722:	4632      	mov	r2, r6
 800f724:	f002 fd40 	bl	80121a8 <__lshift>
 800f728:	4681      	mov	r9, r0
 800f72a:	2800      	cmp	r0, #0
 800f72c:	d0d8      	beq.n	800f6e0 <_strtod_l+0x750>
 800f72e:	2f00      	cmp	r7, #0
 800f730:	dd08      	ble.n	800f744 <_strtod_l+0x7b4>
 800f732:	4641      	mov	r1, r8
 800f734:	9805      	ldr	r0, [sp, #20]
 800f736:	463a      	mov	r2, r7
 800f738:	f002 fd36 	bl	80121a8 <__lshift>
 800f73c:	4680      	mov	r8, r0
 800f73e:	2800      	cmp	r0, #0
 800f740:	f43f ae49 	beq.w	800f3d6 <_strtod_l+0x446>
 800f744:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f746:	9805      	ldr	r0, [sp, #20]
 800f748:	464a      	mov	r2, r9
 800f74a:	f002 fdb5 	bl	80122b8 <__mdiff>
 800f74e:	4604      	mov	r4, r0
 800f750:	2800      	cmp	r0, #0
 800f752:	f43f ae40 	beq.w	800f3d6 <_strtod_l+0x446>
 800f756:	68c3      	ldr	r3, [r0, #12]
 800f758:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f75a:	2300      	movs	r3, #0
 800f75c:	60c3      	str	r3, [r0, #12]
 800f75e:	4641      	mov	r1, r8
 800f760:	f002 fd8e 	bl	8012280 <__mcmp>
 800f764:	2800      	cmp	r0, #0
 800f766:	da45      	bge.n	800f7f4 <_strtod_l+0x864>
 800f768:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f76a:	ea53 030a 	orrs.w	r3, r3, sl
 800f76e:	d16b      	bne.n	800f848 <_strtod_l+0x8b8>
 800f770:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f774:	2b00      	cmp	r3, #0
 800f776:	d167      	bne.n	800f848 <_strtod_l+0x8b8>
 800f778:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f77c:	0d1b      	lsrs	r3, r3, #20
 800f77e:	051b      	lsls	r3, r3, #20
 800f780:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f784:	d960      	bls.n	800f848 <_strtod_l+0x8b8>
 800f786:	6963      	ldr	r3, [r4, #20]
 800f788:	b913      	cbnz	r3, 800f790 <_strtod_l+0x800>
 800f78a:	6923      	ldr	r3, [r4, #16]
 800f78c:	2b01      	cmp	r3, #1
 800f78e:	dd5b      	ble.n	800f848 <_strtod_l+0x8b8>
 800f790:	4621      	mov	r1, r4
 800f792:	2201      	movs	r2, #1
 800f794:	9805      	ldr	r0, [sp, #20]
 800f796:	f002 fd07 	bl	80121a8 <__lshift>
 800f79a:	4641      	mov	r1, r8
 800f79c:	4604      	mov	r4, r0
 800f79e:	f002 fd6f 	bl	8012280 <__mcmp>
 800f7a2:	2800      	cmp	r0, #0
 800f7a4:	dd50      	ble.n	800f848 <_strtod_l+0x8b8>
 800f7a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f7aa:	9a08      	ldr	r2, [sp, #32]
 800f7ac:	0d1b      	lsrs	r3, r3, #20
 800f7ae:	051b      	lsls	r3, r3, #20
 800f7b0:	2a00      	cmp	r2, #0
 800f7b2:	d06a      	beq.n	800f88a <_strtod_l+0x8fa>
 800f7b4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f7b8:	d867      	bhi.n	800f88a <_strtod_l+0x8fa>
 800f7ba:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f7be:	f67f ae9d 	bls.w	800f4fc <_strtod_l+0x56c>
 800f7c2:	4b0a      	ldr	r3, [pc, #40]	@ (800f7ec <_strtod_l+0x85c>)
 800f7c4:	4650      	mov	r0, sl
 800f7c6:	4659      	mov	r1, fp
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	f7f0 ff35 	bl	8000638 <__aeabi_dmul>
 800f7ce:	4b08      	ldr	r3, [pc, #32]	@ (800f7f0 <_strtod_l+0x860>)
 800f7d0:	400b      	ands	r3, r1
 800f7d2:	4682      	mov	sl, r0
 800f7d4:	468b      	mov	fp, r1
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	f47f ae08 	bne.w	800f3ec <_strtod_l+0x45c>
 800f7dc:	9a05      	ldr	r2, [sp, #20]
 800f7de:	2322      	movs	r3, #34	@ 0x22
 800f7e0:	6013      	str	r3, [r2, #0]
 800f7e2:	e603      	b.n	800f3ec <_strtod_l+0x45c>
 800f7e4:	080158e8 	.word	0x080158e8
 800f7e8:	fffffc02 	.word	0xfffffc02
 800f7ec:	39500000 	.word	0x39500000
 800f7f0:	7ff00000 	.word	0x7ff00000
 800f7f4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f7f8:	d165      	bne.n	800f8c6 <_strtod_l+0x936>
 800f7fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f7fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f800:	b35a      	cbz	r2, 800f85a <_strtod_l+0x8ca>
 800f802:	4a9f      	ldr	r2, [pc, #636]	@ (800fa80 <_strtod_l+0xaf0>)
 800f804:	4293      	cmp	r3, r2
 800f806:	d12b      	bne.n	800f860 <_strtod_l+0x8d0>
 800f808:	9b08      	ldr	r3, [sp, #32]
 800f80a:	4651      	mov	r1, sl
 800f80c:	b303      	cbz	r3, 800f850 <_strtod_l+0x8c0>
 800f80e:	4b9d      	ldr	r3, [pc, #628]	@ (800fa84 <_strtod_l+0xaf4>)
 800f810:	465a      	mov	r2, fp
 800f812:	4013      	ands	r3, r2
 800f814:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f818:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f81c:	d81b      	bhi.n	800f856 <_strtod_l+0x8c6>
 800f81e:	0d1b      	lsrs	r3, r3, #20
 800f820:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f824:	fa02 f303 	lsl.w	r3, r2, r3
 800f828:	4299      	cmp	r1, r3
 800f82a:	d119      	bne.n	800f860 <_strtod_l+0x8d0>
 800f82c:	4b96      	ldr	r3, [pc, #600]	@ (800fa88 <_strtod_l+0xaf8>)
 800f82e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f830:	429a      	cmp	r2, r3
 800f832:	d102      	bne.n	800f83a <_strtod_l+0x8aa>
 800f834:	3101      	adds	r1, #1
 800f836:	f43f adce 	beq.w	800f3d6 <_strtod_l+0x446>
 800f83a:	4b92      	ldr	r3, [pc, #584]	@ (800fa84 <_strtod_l+0xaf4>)
 800f83c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f83e:	401a      	ands	r2, r3
 800f840:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f844:	f04f 0a00 	mov.w	sl, #0
 800f848:	9b08      	ldr	r3, [sp, #32]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d1b9      	bne.n	800f7c2 <_strtod_l+0x832>
 800f84e:	e5cd      	b.n	800f3ec <_strtod_l+0x45c>
 800f850:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f854:	e7e8      	b.n	800f828 <_strtod_l+0x898>
 800f856:	4613      	mov	r3, r2
 800f858:	e7e6      	b.n	800f828 <_strtod_l+0x898>
 800f85a:	ea53 030a 	orrs.w	r3, r3, sl
 800f85e:	d0a2      	beq.n	800f7a6 <_strtod_l+0x816>
 800f860:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f862:	b1db      	cbz	r3, 800f89c <_strtod_l+0x90c>
 800f864:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f866:	4213      	tst	r3, r2
 800f868:	d0ee      	beq.n	800f848 <_strtod_l+0x8b8>
 800f86a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f86c:	9a08      	ldr	r2, [sp, #32]
 800f86e:	4650      	mov	r0, sl
 800f870:	4659      	mov	r1, fp
 800f872:	b1bb      	cbz	r3, 800f8a4 <_strtod_l+0x914>
 800f874:	f7ff fb6e 	bl	800ef54 <sulp>
 800f878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f87c:	ec53 2b10 	vmov	r2, r3, d0
 800f880:	f7f0 fd24 	bl	80002cc <__adddf3>
 800f884:	4682      	mov	sl, r0
 800f886:	468b      	mov	fp, r1
 800f888:	e7de      	b.n	800f848 <_strtod_l+0x8b8>
 800f88a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f88e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f892:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f896:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f89a:	e7d5      	b.n	800f848 <_strtod_l+0x8b8>
 800f89c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f89e:	ea13 0f0a 	tst.w	r3, sl
 800f8a2:	e7e1      	b.n	800f868 <_strtod_l+0x8d8>
 800f8a4:	f7ff fb56 	bl	800ef54 <sulp>
 800f8a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f8ac:	ec53 2b10 	vmov	r2, r3, d0
 800f8b0:	f7f0 fd0a 	bl	80002c8 <__aeabi_dsub>
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	4682      	mov	sl, r0
 800f8ba:	468b      	mov	fp, r1
 800f8bc:	f7f1 f924 	bl	8000b08 <__aeabi_dcmpeq>
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	d0c1      	beq.n	800f848 <_strtod_l+0x8b8>
 800f8c4:	e61a      	b.n	800f4fc <_strtod_l+0x56c>
 800f8c6:	4641      	mov	r1, r8
 800f8c8:	4620      	mov	r0, r4
 800f8ca:	f002 fe51 	bl	8012570 <__ratio>
 800f8ce:	ec57 6b10 	vmov	r6, r7, d0
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f8d8:	4630      	mov	r0, r6
 800f8da:	4639      	mov	r1, r7
 800f8dc:	f7f1 f928 	bl	8000b30 <__aeabi_dcmple>
 800f8e0:	2800      	cmp	r0, #0
 800f8e2:	d06f      	beq.n	800f9c4 <_strtod_l+0xa34>
 800f8e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d17a      	bne.n	800f9e0 <_strtod_l+0xa50>
 800f8ea:	f1ba 0f00 	cmp.w	sl, #0
 800f8ee:	d158      	bne.n	800f9a2 <_strtod_l+0xa12>
 800f8f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d15a      	bne.n	800f9b0 <_strtod_l+0xa20>
 800f8fa:	4b64      	ldr	r3, [pc, #400]	@ (800fa8c <_strtod_l+0xafc>)
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	4630      	mov	r0, r6
 800f900:	4639      	mov	r1, r7
 800f902:	f7f1 f90b 	bl	8000b1c <__aeabi_dcmplt>
 800f906:	2800      	cmp	r0, #0
 800f908:	d159      	bne.n	800f9be <_strtod_l+0xa2e>
 800f90a:	4630      	mov	r0, r6
 800f90c:	4639      	mov	r1, r7
 800f90e:	4b60      	ldr	r3, [pc, #384]	@ (800fa90 <_strtod_l+0xb00>)
 800f910:	2200      	movs	r2, #0
 800f912:	f7f0 fe91 	bl	8000638 <__aeabi_dmul>
 800f916:	4606      	mov	r6, r0
 800f918:	460f      	mov	r7, r1
 800f91a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f91e:	9606      	str	r6, [sp, #24]
 800f920:	9307      	str	r3, [sp, #28]
 800f922:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f926:	4d57      	ldr	r5, [pc, #348]	@ (800fa84 <_strtod_l+0xaf4>)
 800f928:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f92c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f92e:	401d      	ands	r5, r3
 800f930:	4b58      	ldr	r3, [pc, #352]	@ (800fa94 <_strtod_l+0xb04>)
 800f932:	429d      	cmp	r5, r3
 800f934:	f040 80b2 	bne.w	800fa9c <_strtod_l+0xb0c>
 800f938:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f93a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f93e:	ec4b ab10 	vmov	d0, sl, fp
 800f942:	f002 fd4d 	bl	80123e0 <__ulp>
 800f946:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f94a:	ec51 0b10 	vmov	r0, r1, d0
 800f94e:	f7f0 fe73 	bl	8000638 <__aeabi_dmul>
 800f952:	4652      	mov	r2, sl
 800f954:	465b      	mov	r3, fp
 800f956:	f7f0 fcb9 	bl	80002cc <__adddf3>
 800f95a:	460b      	mov	r3, r1
 800f95c:	4949      	ldr	r1, [pc, #292]	@ (800fa84 <_strtod_l+0xaf4>)
 800f95e:	4a4e      	ldr	r2, [pc, #312]	@ (800fa98 <_strtod_l+0xb08>)
 800f960:	4019      	ands	r1, r3
 800f962:	4291      	cmp	r1, r2
 800f964:	4682      	mov	sl, r0
 800f966:	d942      	bls.n	800f9ee <_strtod_l+0xa5e>
 800f968:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f96a:	4b47      	ldr	r3, [pc, #284]	@ (800fa88 <_strtod_l+0xaf8>)
 800f96c:	429a      	cmp	r2, r3
 800f96e:	d103      	bne.n	800f978 <_strtod_l+0x9e8>
 800f970:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f972:	3301      	adds	r3, #1
 800f974:	f43f ad2f 	beq.w	800f3d6 <_strtod_l+0x446>
 800f978:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800fa88 <_strtod_l+0xaf8>
 800f97c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f980:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f982:	9805      	ldr	r0, [sp, #20]
 800f984:	f002 fa00 	bl	8011d88 <_Bfree>
 800f988:	9805      	ldr	r0, [sp, #20]
 800f98a:	4649      	mov	r1, r9
 800f98c:	f002 f9fc 	bl	8011d88 <_Bfree>
 800f990:	9805      	ldr	r0, [sp, #20]
 800f992:	4641      	mov	r1, r8
 800f994:	f002 f9f8 	bl	8011d88 <_Bfree>
 800f998:	9805      	ldr	r0, [sp, #20]
 800f99a:	4621      	mov	r1, r4
 800f99c:	f002 f9f4 	bl	8011d88 <_Bfree>
 800f9a0:	e619      	b.n	800f5d6 <_strtod_l+0x646>
 800f9a2:	f1ba 0f01 	cmp.w	sl, #1
 800f9a6:	d103      	bne.n	800f9b0 <_strtod_l+0xa20>
 800f9a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	f43f ada6 	beq.w	800f4fc <_strtod_l+0x56c>
 800f9b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800fa60 <_strtod_l+0xad0>
 800f9b4:	4f35      	ldr	r7, [pc, #212]	@ (800fa8c <_strtod_l+0xafc>)
 800f9b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f9ba:	2600      	movs	r6, #0
 800f9bc:	e7b1      	b.n	800f922 <_strtod_l+0x992>
 800f9be:	4f34      	ldr	r7, [pc, #208]	@ (800fa90 <_strtod_l+0xb00>)
 800f9c0:	2600      	movs	r6, #0
 800f9c2:	e7aa      	b.n	800f91a <_strtod_l+0x98a>
 800f9c4:	4b32      	ldr	r3, [pc, #200]	@ (800fa90 <_strtod_l+0xb00>)
 800f9c6:	4630      	mov	r0, r6
 800f9c8:	4639      	mov	r1, r7
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	f7f0 fe34 	bl	8000638 <__aeabi_dmul>
 800f9d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9d2:	4606      	mov	r6, r0
 800f9d4:	460f      	mov	r7, r1
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d09f      	beq.n	800f91a <_strtod_l+0x98a>
 800f9da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f9de:	e7a0      	b.n	800f922 <_strtod_l+0x992>
 800f9e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800fa68 <_strtod_l+0xad8>
 800f9e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f9e8:	ec57 6b17 	vmov	r6, r7, d7
 800f9ec:	e799      	b.n	800f922 <_strtod_l+0x992>
 800f9ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f9f2:	9b08      	ldr	r3, [sp, #32]
 800f9f4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d1c1      	bne.n	800f980 <_strtod_l+0x9f0>
 800f9fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fa00:	0d1b      	lsrs	r3, r3, #20
 800fa02:	051b      	lsls	r3, r3, #20
 800fa04:	429d      	cmp	r5, r3
 800fa06:	d1bb      	bne.n	800f980 <_strtod_l+0x9f0>
 800fa08:	4630      	mov	r0, r6
 800fa0a:	4639      	mov	r1, r7
 800fa0c:	f7f1 fad2 	bl	8000fb4 <__aeabi_d2lz>
 800fa10:	f7f0 fde4 	bl	80005dc <__aeabi_l2d>
 800fa14:	4602      	mov	r2, r0
 800fa16:	460b      	mov	r3, r1
 800fa18:	4630      	mov	r0, r6
 800fa1a:	4639      	mov	r1, r7
 800fa1c:	f7f0 fc54 	bl	80002c8 <__aeabi_dsub>
 800fa20:	460b      	mov	r3, r1
 800fa22:	4602      	mov	r2, r0
 800fa24:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800fa28:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800fa2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa2e:	ea46 060a 	orr.w	r6, r6, sl
 800fa32:	431e      	orrs	r6, r3
 800fa34:	d06f      	beq.n	800fb16 <_strtod_l+0xb86>
 800fa36:	a30e      	add	r3, pc, #56	@ (adr r3, 800fa70 <_strtod_l+0xae0>)
 800fa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa3c:	f7f1 f86e 	bl	8000b1c <__aeabi_dcmplt>
 800fa40:	2800      	cmp	r0, #0
 800fa42:	f47f acd3 	bne.w	800f3ec <_strtod_l+0x45c>
 800fa46:	a30c      	add	r3, pc, #48	@ (adr r3, 800fa78 <_strtod_l+0xae8>)
 800fa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fa50:	f7f1 f882 	bl	8000b58 <__aeabi_dcmpgt>
 800fa54:	2800      	cmp	r0, #0
 800fa56:	d093      	beq.n	800f980 <_strtod_l+0x9f0>
 800fa58:	e4c8      	b.n	800f3ec <_strtod_l+0x45c>
 800fa5a:	bf00      	nop
 800fa5c:	f3af 8000 	nop.w
 800fa60:	00000000 	.word	0x00000000
 800fa64:	bff00000 	.word	0xbff00000
 800fa68:	00000000 	.word	0x00000000
 800fa6c:	3ff00000 	.word	0x3ff00000
 800fa70:	94a03595 	.word	0x94a03595
 800fa74:	3fdfffff 	.word	0x3fdfffff
 800fa78:	35afe535 	.word	0x35afe535
 800fa7c:	3fe00000 	.word	0x3fe00000
 800fa80:	000fffff 	.word	0x000fffff
 800fa84:	7ff00000 	.word	0x7ff00000
 800fa88:	7fefffff 	.word	0x7fefffff
 800fa8c:	3ff00000 	.word	0x3ff00000
 800fa90:	3fe00000 	.word	0x3fe00000
 800fa94:	7fe00000 	.word	0x7fe00000
 800fa98:	7c9fffff 	.word	0x7c9fffff
 800fa9c:	9b08      	ldr	r3, [sp, #32]
 800fa9e:	b323      	cbz	r3, 800faea <_strtod_l+0xb5a>
 800faa0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800faa4:	d821      	bhi.n	800faea <_strtod_l+0xb5a>
 800faa6:	a328      	add	r3, pc, #160	@ (adr r3, 800fb48 <_strtod_l+0xbb8>)
 800faa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faac:	4630      	mov	r0, r6
 800faae:	4639      	mov	r1, r7
 800fab0:	f7f1 f83e 	bl	8000b30 <__aeabi_dcmple>
 800fab4:	b1a0      	cbz	r0, 800fae0 <_strtod_l+0xb50>
 800fab6:	4639      	mov	r1, r7
 800fab8:	4630      	mov	r0, r6
 800faba:	f7f1 f895 	bl	8000be8 <__aeabi_d2uiz>
 800fabe:	2801      	cmp	r0, #1
 800fac0:	bf38      	it	cc
 800fac2:	2001      	movcc	r0, #1
 800fac4:	f7f0 fd3e 	bl	8000544 <__aeabi_ui2d>
 800fac8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800faca:	4606      	mov	r6, r0
 800facc:	460f      	mov	r7, r1
 800face:	b9fb      	cbnz	r3, 800fb10 <_strtod_l+0xb80>
 800fad0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fad4:	9014      	str	r0, [sp, #80]	@ 0x50
 800fad6:	9315      	str	r3, [sp, #84]	@ 0x54
 800fad8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800fadc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fae0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fae2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800fae6:	1b5b      	subs	r3, r3, r5
 800fae8:	9311      	str	r3, [sp, #68]	@ 0x44
 800faea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800faee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800faf2:	f002 fc75 	bl	80123e0 <__ulp>
 800faf6:	4650      	mov	r0, sl
 800faf8:	ec53 2b10 	vmov	r2, r3, d0
 800fafc:	4659      	mov	r1, fp
 800fafe:	f7f0 fd9b 	bl	8000638 <__aeabi_dmul>
 800fb02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fb06:	f7f0 fbe1 	bl	80002cc <__adddf3>
 800fb0a:	4682      	mov	sl, r0
 800fb0c:	468b      	mov	fp, r1
 800fb0e:	e770      	b.n	800f9f2 <_strtod_l+0xa62>
 800fb10:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800fb14:	e7e0      	b.n	800fad8 <_strtod_l+0xb48>
 800fb16:	a30e      	add	r3, pc, #56	@ (adr r3, 800fb50 <_strtod_l+0xbc0>)
 800fb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1c:	f7f0 fffe 	bl	8000b1c <__aeabi_dcmplt>
 800fb20:	e798      	b.n	800fa54 <_strtod_l+0xac4>
 800fb22:	2300      	movs	r3, #0
 800fb24:	930e      	str	r3, [sp, #56]	@ 0x38
 800fb26:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800fb28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fb2a:	6013      	str	r3, [r2, #0]
 800fb2c:	f7ff ba6d 	b.w	800f00a <_strtod_l+0x7a>
 800fb30:	2a65      	cmp	r2, #101	@ 0x65
 800fb32:	f43f ab68 	beq.w	800f206 <_strtod_l+0x276>
 800fb36:	2a45      	cmp	r2, #69	@ 0x45
 800fb38:	f43f ab65 	beq.w	800f206 <_strtod_l+0x276>
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	f7ff bba0 	b.w	800f282 <_strtod_l+0x2f2>
 800fb42:	bf00      	nop
 800fb44:	f3af 8000 	nop.w
 800fb48:	ffc00000 	.word	0xffc00000
 800fb4c:	41dfffff 	.word	0x41dfffff
 800fb50:	94a03595 	.word	0x94a03595
 800fb54:	3fcfffff 	.word	0x3fcfffff

0800fb58 <_strtod_r>:
 800fb58:	4b01      	ldr	r3, [pc, #4]	@ (800fb60 <_strtod_r+0x8>)
 800fb5a:	f7ff ba19 	b.w	800ef90 <_strtod_l>
 800fb5e:	bf00      	nop
 800fb60:	20000058 	.word	0x20000058

0800fb64 <_strtol_l.isra.0>:
 800fb64:	2b24      	cmp	r3, #36	@ 0x24
 800fb66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb6a:	4686      	mov	lr, r0
 800fb6c:	4690      	mov	r8, r2
 800fb6e:	d801      	bhi.n	800fb74 <_strtol_l.isra.0+0x10>
 800fb70:	2b01      	cmp	r3, #1
 800fb72:	d106      	bne.n	800fb82 <_strtol_l.isra.0+0x1e>
 800fb74:	f000 f916 	bl	800fda4 <__errno>
 800fb78:	2316      	movs	r3, #22
 800fb7a:	6003      	str	r3, [r0, #0]
 800fb7c:	2000      	movs	r0, #0
 800fb7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb82:	4834      	ldr	r0, [pc, #208]	@ (800fc54 <_strtol_l.isra.0+0xf0>)
 800fb84:	460d      	mov	r5, r1
 800fb86:	462a      	mov	r2, r5
 800fb88:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb8c:	5d06      	ldrb	r6, [r0, r4]
 800fb8e:	f016 0608 	ands.w	r6, r6, #8
 800fb92:	d1f8      	bne.n	800fb86 <_strtol_l.isra.0+0x22>
 800fb94:	2c2d      	cmp	r4, #45	@ 0x2d
 800fb96:	d110      	bne.n	800fbba <_strtol_l.isra.0+0x56>
 800fb98:	782c      	ldrb	r4, [r5, #0]
 800fb9a:	2601      	movs	r6, #1
 800fb9c:	1c95      	adds	r5, r2, #2
 800fb9e:	f033 0210 	bics.w	r2, r3, #16
 800fba2:	d115      	bne.n	800fbd0 <_strtol_l.isra.0+0x6c>
 800fba4:	2c30      	cmp	r4, #48	@ 0x30
 800fba6:	d10d      	bne.n	800fbc4 <_strtol_l.isra.0+0x60>
 800fba8:	782a      	ldrb	r2, [r5, #0]
 800fbaa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fbae:	2a58      	cmp	r2, #88	@ 0x58
 800fbb0:	d108      	bne.n	800fbc4 <_strtol_l.isra.0+0x60>
 800fbb2:	786c      	ldrb	r4, [r5, #1]
 800fbb4:	3502      	adds	r5, #2
 800fbb6:	2310      	movs	r3, #16
 800fbb8:	e00a      	b.n	800fbd0 <_strtol_l.isra.0+0x6c>
 800fbba:	2c2b      	cmp	r4, #43	@ 0x2b
 800fbbc:	bf04      	itt	eq
 800fbbe:	782c      	ldrbeq	r4, [r5, #0]
 800fbc0:	1c95      	addeq	r5, r2, #2
 800fbc2:	e7ec      	b.n	800fb9e <_strtol_l.isra.0+0x3a>
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d1f6      	bne.n	800fbb6 <_strtol_l.isra.0+0x52>
 800fbc8:	2c30      	cmp	r4, #48	@ 0x30
 800fbca:	bf14      	ite	ne
 800fbcc:	230a      	movne	r3, #10
 800fbce:	2308      	moveq	r3, #8
 800fbd0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fbd4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800fbd8:	2200      	movs	r2, #0
 800fbda:	fbbc f9f3 	udiv	r9, ip, r3
 800fbde:	4610      	mov	r0, r2
 800fbe0:	fb03 ca19 	mls	sl, r3, r9, ip
 800fbe4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fbe8:	2f09      	cmp	r7, #9
 800fbea:	d80f      	bhi.n	800fc0c <_strtol_l.isra.0+0xa8>
 800fbec:	463c      	mov	r4, r7
 800fbee:	42a3      	cmp	r3, r4
 800fbf0:	dd1b      	ble.n	800fc2a <_strtol_l.isra.0+0xc6>
 800fbf2:	1c57      	adds	r7, r2, #1
 800fbf4:	d007      	beq.n	800fc06 <_strtol_l.isra.0+0xa2>
 800fbf6:	4581      	cmp	r9, r0
 800fbf8:	d314      	bcc.n	800fc24 <_strtol_l.isra.0+0xc0>
 800fbfa:	d101      	bne.n	800fc00 <_strtol_l.isra.0+0x9c>
 800fbfc:	45a2      	cmp	sl, r4
 800fbfe:	db11      	blt.n	800fc24 <_strtol_l.isra.0+0xc0>
 800fc00:	fb00 4003 	mla	r0, r0, r3, r4
 800fc04:	2201      	movs	r2, #1
 800fc06:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc0a:	e7eb      	b.n	800fbe4 <_strtol_l.isra.0+0x80>
 800fc0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fc10:	2f19      	cmp	r7, #25
 800fc12:	d801      	bhi.n	800fc18 <_strtol_l.isra.0+0xb4>
 800fc14:	3c37      	subs	r4, #55	@ 0x37
 800fc16:	e7ea      	b.n	800fbee <_strtol_l.isra.0+0x8a>
 800fc18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fc1c:	2f19      	cmp	r7, #25
 800fc1e:	d804      	bhi.n	800fc2a <_strtol_l.isra.0+0xc6>
 800fc20:	3c57      	subs	r4, #87	@ 0x57
 800fc22:	e7e4      	b.n	800fbee <_strtol_l.isra.0+0x8a>
 800fc24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fc28:	e7ed      	b.n	800fc06 <_strtol_l.isra.0+0xa2>
 800fc2a:	1c53      	adds	r3, r2, #1
 800fc2c:	d108      	bne.n	800fc40 <_strtol_l.isra.0+0xdc>
 800fc2e:	2322      	movs	r3, #34	@ 0x22
 800fc30:	f8ce 3000 	str.w	r3, [lr]
 800fc34:	4660      	mov	r0, ip
 800fc36:	f1b8 0f00 	cmp.w	r8, #0
 800fc3a:	d0a0      	beq.n	800fb7e <_strtol_l.isra.0+0x1a>
 800fc3c:	1e69      	subs	r1, r5, #1
 800fc3e:	e006      	b.n	800fc4e <_strtol_l.isra.0+0xea>
 800fc40:	b106      	cbz	r6, 800fc44 <_strtol_l.isra.0+0xe0>
 800fc42:	4240      	negs	r0, r0
 800fc44:	f1b8 0f00 	cmp.w	r8, #0
 800fc48:	d099      	beq.n	800fb7e <_strtol_l.isra.0+0x1a>
 800fc4a:	2a00      	cmp	r2, #0
 800fc4c:	d1f6      	bne.n	800fc3c <_strtol_l.isra.0+0xd8>
 800fc4e:	f8c8 1000 	str.w	r1, [r8]
 800fc52:	e794      	b.n	800fb7e <_strtol_l.isra.0+0x1a>
 800fc54:	08015911 	.word	0x08015911

0800fc58 <_strtol_r>:
 800fc58:	f7ff bf84 	b.w	800fb64 <_strtol_l.isra.0>

0800fc5c <_fwalk_sglue>:
 800fc5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc60:	4607      	mov	r7, r0
 800fc62:	4688      	mov	r8, r1
 800fc64:	4614      	mov	r4, r2
 800fc66:	2600      	movs	r6, #0
 800fc68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fc6c:	f1b9 0901 	subs.w	r9, r9, #1
 800fc70:	d505      	bpl.n	800fc7e <_fwalk_sglue+0x22>
 800fc72:	6824      	ldr	r4, [r4, #0]
 800fc74:	2c00      	cmp	r4, #0
 800fc76:	d1f7      	bne.n	800fc68 <_fwalk_sglue+0xc>
 800fc78:	4630      	mov	r0, r6
 800fc7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc7e:	89ab      	ldrh	r3, [r5, #12]
 800fc80:	2b01      	cmp	r3, #1
 800fc82:	d907      	bls.n	800fc94 <_fwalk_sglue+0x38>
 800fc84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fc88:	3301      	adds	r3, #1
 800fc8a:	d003      	beq.n	800fc94 <_fwalk_sglue+0x38>
 800fc8c:	4629      	mov	r1, r5
 800fc8e:	4638      	mov	r0, r7
 800fc90:	47c0      	blx	r8
 800fc92:	4306      	orrs	r6, r0
 800fc94:	3568      	adds	r5, #104	@ 0x68
 800fc96:	e7e9      	b.n	800fc6c <_fwalk_sglue+0x10>

0800fc98 <memcmp>:
 800fc98:	b510      	push	{r4, lr}
 800fc9a:	3901      	subs	r1, #1
 800fc9c:	4402      	add	r2, r0
 800fc9e:	4290      	cmp	r0, r2
 800fca0:	d101      	bne.n	800fca6 <memcmp+0xe>
 800fca2:	2000      	movs	r0, #0
 800fca4:	e005      	b.n	800fcb2 <memcmp+0x1a>
 800fca6:	7803      	ldrb	r3, [r0, #0]
 800fca8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fcac:	42a3      	cmp	r3, r4
 800fcae:	d001      	beq.n	800fcb4 <memcmp+0x1c>
 800fcb0:	1b18      	subs	r0, r3, r4
 800fcb2:	bd10      	pop	{r4, pc}
 800fcb4:	3001      	adds	r0, #1
 800fcb6:	e7f2      	b.n	800fc9e <memcmp+0x6>

0800fcb8 <memset>:
 800fcb8:	4402      	add	r2, r0
 800fcba:	4603      	mov	r3, r0
 800fcbc:	4293      	cmp	r3, r2
 800fcbe:	d100      	bne.n	800fcc2 <memset+0xa>
 800fcc0:	4770      	bx	lr
 800fcc2:	f803 1b01 	strb.w	r1, [r3], #1
 800fcc6:	e7f9      	b.n	800fcbc <memset+0x4>

0800fcc8 <strncmp>:
 800fcc8:	b510      	push	{r4, lr}
 800fcca:	b16a      	cbz	r2, 800fce8 <strncmp+0x20>
 800fccc:	3901      	subs	r1, #1
 800fcce:	1884      	adds	r4, r0, r2
 800fcd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fcd4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	d103      	bne.n	800fce4 <strncmp+0x1c>
 800fcdc:	42a0      	cmp	r0, r4
 800fcde:	d001      	beq.n	800fce4 <strncmp+0x1c>
 800fce0:	2a00      	cmp	r2, #0
 800fce2:	d1f5      	bne.n	800fcd0 <strncmp+0x8>
 800fce4:	1ad0      	subs	r0, r2, r3
 800fce6:	bd10      	pop	{r4, pc}
 800fce8:	4610      	mov	r0, r2
 800fcea:	e7fc      	b.n	800fce6 <strncmp+0x1e>

0800fcec <strstr>:
 800fcec:	780a      	ldrb	r2, [r1, #0]
 800fcee:	b570      	push	{r4, r5, r6, lr}
 800fcf0:	b96a      	cbnz	r2, 800fd0e <strstr+0x22>
 800fcf2:	bd70      	pop	{r4, r5, r6, pc}
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d109      	bne.n	800fd0c <strstr+0x20>
 800fcf8:	460c      	mov	r4, r1
 800fcfa:	4605      	mov	r5, r0
 800fcfc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d0f6      	beq.n	800fcf2 <strstr+0x6>
 800fd04:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800fd08:	429e      	cmp	r6, r3
 800fd0a:	d0f7      	beq.n	800fcfc <strstr+0x10>
 800fd0c:	3001      	adds	r0, #1
 800fd0e:	7803      	ldrb	r3, [r0, #0]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d1ef      	bne.n	800fcf4 <strstr+0x8>
 800fd14:	4618      	mov	r0, r3
 800fd16:	e7ec      	b.n	800fcf2 <strstr+0x6>

0800fd18 <_lseek_r>:
 800fd18:	b538      	push	{r3, r4, r5, lr}
 800fd1a:	4d07      	ldr	r5, [pc, #28]	@ (800fd38 <_lseek_r+0x20>)
 800fd1c:	4604      	mov	r4, r0
 800fd1e:	4608      	mov	r0, r1
 800fd20:	4611      	mov	r1, r2
 800fd22:	2200      	movs	r2, #0
 800fd24:	602a      	str	r2, [r5, #0]
 800fd26:	461a      	mov	r2, r3
 800fd28:	f7f8 fb71 	bl	800840e <_lseek>
 800fd2c:	1c43      	adds	r3, r0, #1
 800fd2e:	d102      	bne.n	800fd36 <_lseek_r+0x1e>
 800fd30:	682b      	ldr	r3, [r5, #0]
 800fd32:	b103      	cbz	r3, 800fd36 <_lseek_r+0x1e>
 800fd34:	6023      	str	r3, [r4, #0]
 800fd36:	bd38      	pop	{r3, r4, r5, pc}
 800fd38:	200019a4 	.word	0x200019a4

0800fd3c <_read_r>:
 800fd3c:	b538      	push	{r3, r4, r5, lr}
 800fd3e:	4d07      	ldr	r5, [pc, #28]	@ (800fd5c <_read_r+0x20>)
 800fd40:	4604      	mov	r4, r0
 800fd42:	4608      	mov	r0, r1
 800fd44:	4611      	mov	r1, r2
 800fd46:	2200      	movs	r2, #0
 800fd48:	602a      	str	r2, [r5, #0]
 800fd4a:	461a      	mov	r2, r3
 800fd4c:	f7f8 faff 	bl	800834e <_read>
 800fd50:	1c43      	adds	r3, r0, #1
 800fd52:	d102      	bne.n	800fd5a <_read_r+0x1e>
 800fd54:	682b      	ldr	r3, [r5, #0]
 800fd56:	b103      	cbz	r3, 800fd5a <_read_r+0x1e>
 800fd58:	6023      	str	r3, [r4, #0]
 800fd5a:	bd38      	pop	{r3, r4, r5, pc}
 800fd5c:	200019a4 	.word	0x200019a4

0800fd60 <_sbrk_r>:
 800fd60:	b538      	push	{r3, r4, r5, lr}
 800fd62:	4d06      	ldr	r5, [pc, #24]	@ (800fd7c <_sbrk_r+0x1c>)
 800fd64:	2300      	movs	r3, #0
 800fd66:	4604      	mov	r4, r0
 800fd68:	4608      	mov	r0, r1
 800fd6a:	602b      	str	r3, [r5, #0]
 800fd6c:	f7f8 fb5c 	bl	8008428 <_sbrk>
 800fd70:	1c43      	adds	r3, r0, #1
 800fd72:	d102      	bne.n	800fd7a <_sbrk_r+0x1a>
 800fd74:	682b      	ldr	r3, [r5, #0]
 800fd76:	b103      	cbz	r3, 800fd7a <_sbrk_r+0x1a>
 800fd78:	6023      	str	r3, [r4, #0]
 800fd7a:	bd38      	pop	{r3, r4, r5, pc}
 800fd7c:	200019a4 	.word	0x200019a4

0800fd80 <_write_r>:
 800fd80:	b538      	push	{r3, r4, r5, lr}
 800fd82:	4d07      	ldr	r5, [pc, #28]	@ (800fda0 <_write_r+0x20>)
 800fd84:	4604      	mov	r4, r0
 800fd86:	4608      	mov	r0, r1
 800fd88:	4611      	mov	r1, r2
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	602a      	str	r2, [r5, #0]
 800fd8e:	461a      	mov	r2, r3
 800fd90:	f7f8 fafa 	bl	8008388 <_write>
 800fd94:	1c43      	adds	r3, r0, #1
 800fd96:	d102      	bne.n	800fd9e <_write_r+0x1e>
 800fd98:	682b      	ldr	r3, [r5, #0]
 800fd9a:	b103      	cbz	r3, 800fd9e <_write_r+0x1e>
 800fd9c:	6023      	str	r3, [r4, #0]
 800fd9e:	bd38      	pop	{r3, r4, r5, pc}
 800fda0:	200019a4 	.word	0x200019a4

0800fda4 <__errno>:
 800fda4:	4b01      	ldr	r3, [pc, #4]	@ (800fdac <__errno+0x8>)
 800fda6:	6818      	ldr	r0, [r3, #0]
 800fda8:	4770      	bx	lr
 800fdaa:	bf00      	nop
 800fdac:	200001c4 	.word	0x200001c4

0800fdb0 <__libc_init_array>:
 800fdb0:	b570      	push	{r4, r5, r6, lr}
 800fdb2:	4d0d      	ldr	r5, [pc, #52]	@ (800fde8 <__libc_init_array+0x38>)
 800fdb4:	4c0d      	ldr	r4, [pc, #52]	@ (800fdec <__libc_init_array+0x3c>)
 800fdb6:	1b64      	subs	r4, r4, r5
 800fdb8:	10a4      	asrs	r4, r4, #2
 800fdba:	2600      	movs	r6, #0
 800fdbc:	42a6      	cmp	r6, r4
 800fdbe:	d109      	bne.n	800fdd4 <__libc_init_array+0x24>
 800fdc0:	4d0b      	ldr	r5, [pc, #44]	@ (800fdf0 <__libc_init_array+0x40>)
 800fdc2:	4c0c      	ldr	r4, [pc, #48]	@ (800fdf4 <__libc_init_array+0x44>)
 800fdc4:	f005 fbbe 	bl	8015544 <_init>
 800fdc8:	1b64      	subs	r4, r4, r5
 800fdca:	10a4      	asrs	r4, r4, #2
 800fdcc:	2600      	movs	r6, #0
 800fdce:	42a6      	cmp	r6, r4
 800fdd0:	d105      	bne.n	800fdde <__libc_init_array+0x2e>
 800fdd2:	bd70      	pop	{r4, r5, r6, pc}
 800fdd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdd8:	4798      	blx	r3
 800fdda:	3601      	adds	r6, #1
 800fddc:	e7ee      	b.n	800fdbc <__libc_init_array+0xc>
 800fdde:	f855 3b04 	ldr.w	r3, [r5], #4
 800fde2:	4798      	blx	r3
 800fde4:	3601      	adds	r6, #1
 800fde6:	e7f2      	b.n	800fdce <__libc_init_array+0x1e>
 800fde8:	08015d68 	.word	0x08015d68
 800fdec:	08015d68 	.word	0x08015d68
 800fdf0:	08015d68 	.word	0x08015d68
 800fdf4:	08015d6c 	.word	0x08015d6c

0800fdf8 <__retarget_lock_init_recursive>:
 800fdf8:	4770      	bx	lr

0800fdfa <__retarget_lock_acquire_recursive>:
 800fdfa:	4770      	bx	lr

0800fdfc <__retarget_lock_release_recursive>:
 800fdfc:	4770      	bx	lr
	...

0800fe00 <_localeconv_r>:
 800fe00:	4800      	ldr	r0, [pc, #0]	@ (800fe04 <_localeconv_r+0x4>)
 800fe02:	4770      	bx	lr
 800fe04:	20000148 	.word	0x20000148

0800fe08 <_close_r>:
 800fe08:	b538      	push	{r3, r4, r5, lr}
 800fe0a:	4d06      	ldr	r5, [pc, #24]	@ (800fe24 <_close_r+0x1c>)
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	4604      	mov	r4, r0
 800fe10:	4608      	mov	r0, r1
 800fe12:	602b      	str	r3, [r5, #0]
 800fe14:	f7f8 fad4 	bl	80083c0 <_close>
 800fe18:	1c43      	adds	r3, r0, #1
 800fe1a:	d102      	bne.n	800fe22 <_close_r+0x1a>
 800fe1c:	682b      	ldr	r3, [r5, #0]
 800fe1e:	b103      	cbz	r3, 800fe22 <_close_r+0x1a>
 800fe20:	6023      	str	r3, [r4, #0]
 800fe22:	bd38      	pop	{r3, r4, r5, pc}
 800fe24:	200019a4 	.word	0x200019a4

0800fe28 <memcpy>:
 800fe28:	440a      	add	r2, r1
 800fe2a:	4291      	cmp	r1, r2
 800fe2c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800fe30:	d100      	bne.n	800fe34 <memcpy+0xc>
 800fe32:	4770      	bx	lr
 800fe34:	b510      	push	{r4, lr}
 800fe36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe3e:	4291      	cmp	r1, r2
 800fe40:	d1f9      	bne.n	800fe36 <memcpy+0xe>
 800fe42:	bd10      	pop	{r4, pc}
 800fe44:	0000      	movs	r0, r0
	...

0800fe48 <nan>:
 800fe48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fe50 <nan+0x8>
 800fe4c:	4770      	bx	lr
 800fe4e:	bf00      	nop
 800fe50:	00000000 	.word	0x00000000
 800fe54:	7ff80000 	.word	0x7ff80000

0800fe58 <nanf>:
 800fe58:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fe60 <nanf+0x8>
 800fe5c:	4770      	bx	lr
 800fe5e:	bf00      	nop
 800fe60:	7fc00000 	.word	0x7fc00000

0800fe64 <quorem>:
 800fe64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe68:	6903      	ldr	r3, [r0, #16]
 800fe6a:	690c      	ldr	r4, [r1, #16]
 800fe6c:	42a3      	cmp	r3, r4
 800fe6e:	4607      	mov	r7, r0
 800fe70:	db7e      	blt.n	800ff70 <quorem+0x10c>
 800fe72:	3c01      	subs	r4, #1
 800fe74:	f101 0814 	add.w	r8, r1, #20
 800fe78:	00a3      	lsls	r3, r4, #2
 800fe7a:	f100 0514 	add.w	r5, r0, #20
 800fe7e:	9300      	str	r3, [sp, #0]
 800fe80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe84:	9301      	str	r3, [sp, #4]
 800fe86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fe8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe8e:	3301      	adds	r3, #1
 800fe90:	429a      	cmp	r2, r3
 800fe92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fe96:	fbb2 f6f3 	udiv	r6, r2, r3
 800fe9a:	d32e      	bcc.n	800fefa <quorem+0x96>
 800fe9c:	f04f 0a00 	mov.w	sl, #0
 800fea0:	46c4      	mov	ip, r8
 800fea2:	46ae      	mov	lr, r5
 800fea4:	46d3      	mov	fp, sl
 800fea6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800feaa:	b298      	uxth	r0, r3
 800feac:	fb06 a000 	mla	r0, r6, r0, sl
 800feb0:	0c02      	lsrs	r2, r0, #16
 800feb2:	0c1b      	lsrs	r3, r3, #16
 800feb4:	fb06 2303 	mla	r3, r6, r3, r2
 800feb8:	f8de 2000 	ldr.w	r2, [lr]
 800febc:	b280      	uxth	r0, r0
 800febe:	b292      	uxth	r2, r2
 800fec0:	1a12      	subs	r2, r2, r0
 800fec2:	445a      	add	r2, fp
 800fec4:	f8de 0000 	ldr.w	r0, [lr]
 800fec8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fecc:	b29b      	uxth	r3, r3
 800fece:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fed2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fed6:	b292      	uxth	r2, r2
 800fed8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fedc:	45e1      	cmp	r9, ip
 800fede:	f84e 2b04 	str.w	r2, [lr], #4
 800fee2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fee6:	d2de      	bcs.n	800fea6 <quorem+0x42>
 800fee8:	9b00      	ldr	r3, [sp, #0]
 800feea:	58eb      	ldr	r3, [r5, r3]
 800feec:	b92b      	cbnz	r3, 800fefa <quorem+0x96>
 800feee:	9b01      	ldr	r3, [sp, #4]
 800fef0:	3b04      	subs	r3, #4
 800fef2:	429d      	cmp	r5, r3
 800fef4:	461a      	mov	r2, r3
 800fef6:	d32f      	bcc.n	800ff58 <quorem+0xf4>
 800fef8:	613c      	str	r4, [r7, #16]
 800fefa:	4638      	mov	r0, r7
 800fefc:	f002 f9c0 	bl	8012280 <__mcmp>
 800ff00:	2800      	cmp	r0, #0
 800ff02:	db25      	blt.n	800ff50 <quorem+0xec>
 800ff04:	4629      	mov	r1, r5
 800ff06:	2000      	movs	r0, #0
 800ff08:	f858 2b04 	ldr.w	r2, [r8], #4
 800ff0c:	f8d1 c000 	ldr.w	ip, [r1]
 800ff10:	fa1f fe82 	uxth.w	lr, r2
 800ff14:	fa1f f38c 	uxth.w	r3, ip
 800ff18:	eba3 030e 	sub.w	r3, r3, lr
 800ff1c:	4403      	add	r3, r0
 800ff1e:	0c12      	lsrs	r2, r2, #16
 800ff20:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ff24:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ff28:	b29b      	uxth	r3, r3
 800ff2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff2e:	45c1      	cmp	r9, r8
 800ff30:	f841 3b04 	str.w	r3, [r1], #4
 800ff34:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ff38:	d2e6      	bcs.n	800ff08 <quorem+0xa4>
 800ff3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ff3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ff42:	b922      	cbnz	r2, 800ff4e <quorem+0xea>
 800ff44:	3b04      	subs	r3, #4
 800ff46:	429d      	cmp	r5, r3
 800ff48:	461a      	mov	r2, r3
 800ff4a:	d30b      	bcc.n	800ff64 <quorem+0x100>
 800ff4c:	613c      	str	r4, [r7, #16]
 800ff4e:	3601      	adds	r6, #1
 800ff50:	4630      	mov	r0, r6
 800ff52:	b003      	add	sp, #12
 800ff54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff58:	6812      	ldr	r2, [r2, #0]
 800ff5a:	3b04      	subs	r3, #4
 800ff5c:	2a00      	cmp	r2, #0
 800ff5e:	d1cb      	bne.n	800fef8 <quorem+0x94>
 800ff60:	3c01      	subs	r4, #1
 800ff62:	e7c6      	b.n	800fef2 <quorem+0x8e>
 800ff64:	6812      	ldr	r2, [r2, #0]
 800ff66:	3b04      	subs	r3, #4
 800ff68:	2a00      	cmp	r2, #0
 800ff6a:	d1ef      	bne.n	800ff4c <quorem+0xe8>
 800ff6c:	3c01      	subs	r4, #1
 800ff6e:	e7ea      	b.n	800ff46 <quorem+0xe2>
 800ff70:	2000      	movs	r0, #0
 800ff72:	e7ee      	b.n	800ff52 <quorem+0xee>
 800ff74:	0000      	movs	r0, r0
	...

0800ff78 <_dtoa_r>:
 800ff78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff7c:	69c7      	ldr	r7, [r0, #28]
 800ff7e:	b097      	sub	sp, #92	@ 0x5c
 800ff80:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ff84:	ec55 4b10 	vmov	r4, r5, d0
 800ff88:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ff8a:	9107      	str	r1, [sp, #28]
 800ff8c:	4681      	mov	r9, r0
 800ff8e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ff90:	9311      	str	r3, [sp, #68]	@ 0x44
 800ff92:	b97f      	cbnz	r7, 800ffb4 <_dtoa_r+0x3c>
 800ff94:	2010      	movs	r0, #16
 800ff96:	f001 fc69 	bl	801186c <malloc>
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	f8c9 001c 	str.w	r0, [r9, #28]
 800ffa0:	b920      	cbnz	r0, 800ffac <_dtoa_r+0x34>
 800ffa2:	4ba9      	ldr	r3, [pc, #676]	@ (8010248 <_dtoa_r+0x2d0>)
 800ffa4:	21ef      	movs	r1, #239	@ 0xef
 800ffa6:	48a9      	ldr	r0, [pc, #676]	@ (801024c <_dtoa_r+0x2d4>)
 800ffa8:	f002 fc58 	bl	801285c <__assert_func>
 800ffac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ffb0:	6007      	str	r7, [r0, #0]
 800ffb2:	60c7      	str	r7, [r0, #12]
 800ffb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ffb8:	6819      	ldr	r1, [r3, #0]
 800ffba:	b159      	cbz	r1, 800ffd4 <_dtoa_r+0x5c>
 800ffbc:	685a      	ldr	r2, [r3, #4]
 800ffbe:	604a      	str	r2, [r1, #4]
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	4093      	lsls	r3, r2
 800ffc4:	608b      	str	r3, [r1, #8]
 800ffc6:	4648      	mov	r0, r9
 800ffc8:	f001 fede 	bl	8011d88 <_Bfree>
 800ffcc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	601a      	str	r2, [r3, #0]
 800ffd4:	1e2b      	subs	r3, r5, #0
 800ffd6:	bfb9      	ittee	lt
 800ffd8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ffdc:	9305      	strlt	r3, [sp, #20]
 800ffde:	2300      	movge	r3, #0
 800ffe0:	6033      	strge	r3, [r6, #0]
 800ffe2:	9f05      	ldr	r7, [sp, #20]
 800ffe4:	4b9a      	ldr	r3, [pc, #616]	@ (8010250 <_dtoa_r+0x2d8>)
 800ffe6:	bfbc      	itt	lt
 800ffe8:	2201      	movlt	r2, #1
 800ffea:	6032      	strlt	r2, [r6, #0]
 800ffec:	43bb      	bics	r3, r7
 800ffee:	d112      	bne.n	8010016 <_dtoa_r+0x9e>
 800fff0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fff2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fff6:	6013      	str	r3, [r2, #0]
 800fff8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fffc:	4323      	orrs	r3, r4
 800fffe:	f000 855a 	beq.w	8010ab6 <_dtoa_r+0xb3e>
 8010002:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010004:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010264 <_dtoa_r+0x2ec>
 8010008:	2b00      	cmp	r3, #0
 801000a:	f000 855c 	beq.w	8010ac6 <_dtoa_r+0xb4e>
 801000e:	f10a 0303 	add.w	r3, sl, #3
 8010012:	f000 bd56 	b.w	8010ac2 <_dtoa_r+0xb4a>
 8010016:	ed9d 7b04 	vldr	d7, [sp, #16]
 801001a:	2200      	movs	r2, #0
 801001c:	ec51 0b17 	vmov	r0, r1, d7
 8010020:	2300      	movs	r3, #0
 8010022:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8010026:	f7f0 fd6f 	bl	8000b08 <__aeabi_dcmpeq>
 801002a:	4680      	mov	r8, r0
 801002c:	b158      	cbz	r0, 8010046 <_dtoa_r+0xce>
 801002e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010030:	2301      	movs	r3, #1
 8010032:	6013      	str	r3, [r2, #0]
 8010034:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010036:	b113      	cbz	r3, 801003e <_dtoa_r+0xc6>
 8010038:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801003a:	4b86      	ldr	r3, [pc, #536]	@ (8010254 <_dtoa_r+0x2dc>)
 801003c:	6013      	str	r3, [r2, #0]
 801003e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010268 <_dtoa_r+0x2f0>
 8010042:	f000 bd40 	b.w	8010ac6 <_dtoa_r+0xb4e>
 8010046:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801004a:	aa14      	add	r2, sp, #80	@ 0x50
 801004c:	a915      	add	r1, sp, #84	@ 0x54
 801004e:	4648      	mov	r0, r9
 8010050:	f002 fa36 	bl	80124c0 <__d2b>
 8010054:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010058:	9002      	str	r0, [sp, #8]
 801005a:	2e00      	cmp	r6, #0
 801005c:	d078      	beq.n	8010150 <_dtoa_r+0x1d8>
 801005e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010060:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010068:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801006c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010070:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010074:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010078:	4619      	mov	r1, r3
 801007a:	2200      	movs	r2, #0
 801007c:	4b76      	ldr	r3, [pc, #472]	@ (8010258 <_dtoa_r+0x2e0>)
 801007e:	f7f0 f923 	bl	80002c8 <__aeabi_dsub>
 8010082:	a36b      	add	r3, pc, #428	@ (adr r3, 8010230 <_dtoa_r+0x2b8>)
 8010084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010088:	f7f0 fad6 	bl	8000638 <__aeabi_dmul>
 801008c:	a36a      	add	r3, pc, #424	@ (adr r3, 8010238 <_dtoa_r+0x2c0>)
 801008e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010092:	f7f0 f91b 	bl	80002cc <__adddf3>
 8010096:	4604      	mov	r4, r0
 8010098:	4630      	mov	r0, r6
 801009a:	460d      	mov	r5, r1
 801009c:	f7f0 fa62 	bl	8000564 <__aeabi_i2d>
 80100a0:	a367      	add	r3, pc, #412	@ (adr r3, 8010240 <_dtoa_r+0x2c8>)
 80100a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a6:	f7f0 fac7 	bl	8000638 <__aeabi_dmul>
 80100aa:	4602      	mov	r2, r0
 80100ac:	460b      	mov	r3, r1
 80100ae:	4620      	mov	r0, r4
 80100b0:	4629      	mov	r1, r5
 80100b2:	f7f0 f90b 	bl	80002cc <__adddf3>
 80100b6:	4604      	mov	r4, r0
 80100b8:	460d      	mov	r5, r1
 80100ba:	f7f0 fd6d 	bl	8000b98 <__aeabi_d2iz>
 80100be:	2200      	movs	r2, #0
 80100c0:	4607      	mov	r7, r0
 80100c2:	2300      	movs	r3, #0
 80100c4:	4620      	mov	r0, r4
 80100c6:	4629      	mov	r1, r5
 80100c8:	f7f0 fd28 	bl	8000b1c <__aeabi_dcmplt>
 80100cc:	b140      	cbz	r0, 80100e0 <_dtoa_r+0x168>
 80100ce:	4638      	mov	r0, r7
 80100d0:	f7f0 fa48 	bl	8000564 <__aeabi_i2d>
 80100d4:	4622      	mov	r2, r4
 80100d6:	462b      	mov	r3, r5
 80100d8:	f7f0 fd16 	bl	8000b08 <__aeabi_dcmpeq>
 80100dc:	b900      	cbnz	r0, 80100e0 <_dtoa_r+0x168>
 80100de:	3f01      	subs	r7, #1
 80100e0:	2f16      	cmp	r7, #22
 80100e2:	d852      	bhi.n	801018a <_dtoa_r+0x212>
 80100e4:	4b5d      	ldr	r3, [pc, #372]	@ (801025c <_dtoa_r+0x2e4>)
 80100e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80100ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80100f2:	f7f0 fd13 	bl	8000b1c <__aeabi_dcmplt>
 80100f6:	2800      	cmp	r0, #0
 80100f8:	d049      	beq.n	801018e <_dtoa_r+0x216>
 80100fa:	3f01      	subs	r7, #1
 80100fc:	2300      	movs	r3, #0
 80100fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8010100:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010102:	1b9b      	subs	r3, r3, r6
 8010104:	1e5a      	subs	r2, r3, #1
 8010106:	bf45      	ittet	mi
 8010108:	f1c3 0301 	rsbmi	r3, r3, #1
 801010c:	9300      	strmi	r3, [sp, #0]
 801010e:	2300      	movpl	r3, #0
 8010110:	2300      	movmi	r3, #0
 8010112:	9206      	str	r2, [sp, #24]
 8010114:	bf54      	ite	pl
 8010116:	9300      	strpl	r3, [sp, #0]
 8010118:	9306      	strmi	r3, [sp, #24]
 801011a:	2f00      	cmp	r7, #0
 801011c:	db39      	blt.n	8010192 <_dtoa_r+0x21a>
 801011e:	9b06      	ldr	r3, [sp, #24]
 8010120:	970d      	str	r7, [sp, #52]	@ 0x34
 8010122:	443b      	add	r3, r7
 8010124:	9306      	str	r3, [sp, #24]
 8010126:	2300      	movs	r3, #0
 8010128:	9308      	str	r3, [sp, #32]
 801012a:	9b07      	ldr	r3, [sp, #28]
 801012c:	2b09      	cmp	r3, #9
 801012e:	d863      	bhi.n	80101f8 <_dtoa_r+0x280>
 8010130:	2b05      	cmp	r3, #5
 8010132:	bfc4      	itt	gt
 8010134:	3b04      	subgt	r3, #4
 8010136:	9307      	strgt	r3, [sp, #28]
 8010138:	9b07      	ldr	r3, [sp, #28]
 801013a:	f1a3 0302 	sub.w	r3, r3, #2
 801013e:	bfcc      	ite	gt
 8010140:	2400      	movgt	r4, #0
 8010142:	2401      	movle	r4, #1
 8010144:	2b03      	cmp	r3, #3
 8010146:	d863      	bhi.n	8010210 <_dtoa_r+0x298>
 8010148:	e8df f003 	tbb	[pc, r3]
 801014c:	2b375452 	.word	0x2b375452
 8010150:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010154:	441e      	add	r6, r3
 8010156:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801015a:	2b20      	cmp	r3, #32
 801015c:	bfc1      	itttt	gt
 801015e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010162:	409f      	lslgt	r7, r3
 8010164:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010168:	fa24 f303 	lsrgt.w	r3, r4, r3
 801016c:	bfd6      	itet	le
 801016e:	f1c3 0320 	rsble	r3, r3, #32
 8010172:	ea47 0003 	orrgt.w	r0, r7, r3
 8010176:	fa04 f003 	lslle.w	r0, r4, r3
 801017a:	f7f0 f9e3 	bl	8000544 <__aeabi_ui2d>
 801017e:	2201      	movs	r2, #1
 8010180:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010184:	3e01      	subs	r6, #1
 8010186:	9212      	str	r2, [sp, #72]	@ 0x48
 8010188:	e776      	b.n	8010078 <_dtoa_r+0x100>
 801018a:	2301      	movs	r3, #1
 801018c:	e7b7      	b.n	80100fe <_dtoa_r+0x186>
 801018e:	9010      	str	r0, [sp, #64]	@ 0x40
 8010190:	e7b6      	b.n	8010100 <_dtoa_r+0x188>
 8010192:	9b00      	ldr	r3, [sp, #0]
 8010194:	1bdb      	subs	r3, r3, r7
 8010196:	9300      	str	r3, [sp, #0]
 8010198:	427b      	negs	r3, r7
 801019a:	9308      	str	r3, [sp, #32]
 801019c:	2300      	movs	r3, #0
 801019e:	930d      	str	r3, [sp, #52]	@ 0x34
 80101a0:	e7c3      	b.n	801012a <_dtoa_r+0x1b2>
 80101a2:	2301      	movs	r3, #1
 80101a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80101a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80101a8:	eb07 0b03 	add.w	fp, r7, r3
 80101ac:	f10b 0301 	add.w	r3, fp, #1
 80101b0:	2b01      	cmp	r3, #1
 80101b2:	9303      	str	r3, [sp, #12]
 80101b4:	bfb8      	it	lt
 80101b6:	2301      	movlt	r3, #1
 80101b8:	e006      	b.n	80101c8 <_dtoa_r+0x250>
 80101ba:	2301      	movs	r3, #1
 80101bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80101be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	dd28      	ble.n	8010216 <_dtoa_r+0x29e>
 80101c4:	469b      	mov	fp, r3
 80101c6:	9303      	str	r3, [sp, #12]
 80101c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80101cc:	2100      	movs	r1, #0
 80101ce:	2204      	movs	r2, #4
 80101d0:	f102 0514 	add.w	r5, r2, #20
 80101d4:	429d      	cmp	r5, r3
 80101d6:	d926      	bls.n	8010226 <_dtoa_r+0x2ae>
 80101d8:	6041      	str	r1, [r0, #4]
 80101da:	4648      	mov	r0, r9
 80101dc:	f001 fd94 	bl	8011d08 <_Balloc>
 80101e0:	4682      	mov	sl, r0
 80101e2:	2800      	cmp	r0, #0
 80101e4:	d142      	bne.n	801026c <_dtoa_r+0x2f4>
 80101e6:	4b1e      	ldr	r3, [pc, #120]	@ (8010260 <_dtoa_r+0x2e8>)
 80101e8:	4602      	mov	r2, r0
 80101ea:	f240 11af 	movw	r1, #431	@ 0x1af
 80101ee:	e6da      	b.n	800ffa6 <_dtoa_r+0x2e>
 80101f0:	2300      	movs	r3, #0
 80101f2:	e7e3      	b.n	80101bc <_dtoa_r+0x244>
 80101f4:	2300      	movs	r3, #0
 80101f6:	e7d5      	b.n	80101a4 <_dtoa_r+0x22c>
 80101f8:	2401      	movs	r4, #1
 80101fa:	2300      	movs	r3, #0
 80101fc:	9307      	str	r3, [sp, #28]
 80101fe:	9409      	str	r4, [sp, #36]	@ 0x24
 8010200:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8010204:	2200      	movs	r2, #0
 8010206:	f8cd b00c 	str.w	fp, [sp, #12]
 801020a:	2312      	movs	r3, #18
 801020c:	920c      	str	r2, [sp, #48]	@ 0x30
 801020e:	e7db      	b.n	80101c8 <_dtoa_r+0x250>
 8010210:	2301      	movs	r3, #1
 8010212:	9309      	str	r3, [sp, #36]	@ 0x24
 8010214:	e7f4      	b.n	8010200 <_dtoa_r+0x288>
 8010216:	f04f 0b01 	mov.w	fp, #1
 801021a:	f8cd b00c 	str.w	fp, [sp, #12]
 801021e:	465b      	mov	r3, fp
 8010220:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8010224:	e7d0      	b.n	80101c8 <_dtoa_r+0x250>
 8010226:	3101      	adds	r1, #1
 8010228:	0052      	lsls	r2, r2, #1
 801022a:	e7d1      	b.n	80101d0 <_dtoa_r+0x258>
 801022c:	f3af 8000 	nop.w
 8010230:	636f4361 	.word	0x636f4361
 8010234:	3fd287a7 	.word	0x3fd287a7
 8010238:	8b60c8b3 	.word	0x8b60c8b3
 801023c:	3fc68a28 	.word	0x3fc68a28
 8010240:	509f79fb 	.word	0x509f79fb
 8010244:	3fd34413 	.word	0x3fd34413
 8010248:	0801571a 	.word	0x0801571a
 801024c:	08015731 	.word	0x08015731
 8010250:	7ff00000 	.word	0x7ff00000
 8010254:	08015822 	.word	0x08015822
 8010258:	3ff80000 	.word	0x3ff80000
 801025c:	08015a48 	.word	0x08015a48
 8010260:	08015789 	.word	0x08015789
 8010264:	08015716 	.word	0x08015716
 8010268:	08015821 	.word	0x08015821
 801026c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010270:	6018      	str	r0, [r3, #0]
 8010272:	9b03      	ldr	r3, [sp, #12]
 8010274:	2b0e      	cmp	r3, #14
 8010276:	f200 80a1 	bhi.w	80103bc <_dtoa_r+0x444>
 801027a:	2c00      	cmp	r4, #0
 801027c:	f000 809e 	beq.w	80103bc <_dtoa_r+0x444>
 8010280:	2f00      	cmp	r7, #0
 8010282:	dd33      	ble.n	80102ec <_dtoa_r+0x374>
 8010284:	4b9c      	ldr	r3, [pc, #624]	@ (80104f8 <_dtoa_r+0x580>)
 8010286:	f007 020f 	and.w	r2, r7, #15
 801028a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801028e:	ed93 7b00 	vldr	d7, [r3]
 8010292:	05f8      	lsls	r0, r7, #23
 8010294:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010298:	ea4f 1427 	mov.w	r4, r7, asr #4
 801029c:	d516      	bpl.n	80102cc <_dtoa_r+0x354>
 801029e:	4b97      	ldr	r3, [pc, #604]	@ (80104fc <_dtoa_r+0x584>)
 80102a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80102a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80102a8:	f7f0 faf0 	bl	800088c <__aeabi_ddiv>
 80102ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80102b0:	f004 040f 	and.w	r4, r4, #15
 80102b4:	2603      	movs	r6, #3
 80102b6:	4d91      	ldr	r5, [pc, #580]	@ (80104fc <_dtoa_r+0x584>)
 80102b8:	b954      	cbnz	r4, 80102d0 <_dtoa_r+0x358>
 80102ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80102be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102c2:	f7f0 fae3 	bl	800088c <__aeabi_ddiv>
 80102c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80102ca:	e028      	b.n	801031e <_dtoa_r+0x3a6>
 80102cc:	2602      	movs	r6, #2
 80102ce:	e7f2      	b.n	80102b6 <_dtoa_r+0x33e>
 80102d0:	07e1      	lsls	r1, r4, #31
 80102d2:	d508      	bpl.n	80102e6 <_dtoa_r+0x36e>
 80102d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80102d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80102dc:	f7f0 f9ac 	bl	8000638 <__aeabi_dmul>
 80102e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80102e4:	3601      	adds	r6, #1
 80102e6:	1064      	asrs	r4, r4, #1
 80102e8:	3508      	adds	r5, #8
 80102ea:	e7e5      	b.n	80102b8 <_dtoa_r+0x340>
 80102ec:	f000 80af 	beq.w	801044e <_dtoa_r+0x4d6>
 80102f0:	427c      	negs	r4, r7
 80102f2:	4b81      	ldr	r3, [pc, #516]	@ (80104f8 <_dtoa_r+0x580>)
 80102f4:	4d81      	ldr	r5, [pc, #516]	@ (80104fc <_dtoa_r+0x584>)
 80102f6:	f004 020f 	and.w	r2, r4, #15
 80102fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80102fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010302:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010306:	f7f0 f997 	bl	8000638 <__aeabi_dmul>
 801030a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801030e:	1124      	asrs	r4, r4, #4
 8010310:	2300      	movs	r3, #0
 8010312:	2602      	movs	r6, #2
 8010314:	2c00      	cmp	r4, #0
 8010316:	f040 808f 	bne.w	8010438 <_dtoa_r+0x4c0>
 801031a:	2b00      	cmp	r3, #0
 801031c:	d1d3      	bne.n	80102c6 <_dtoa_r+0x34e>
 801031e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010320:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010324:	2b00      	cmp	r3, #0
 8010326:	f000 8094 	beq.w	8010452 <_dtoa_r+0x4da>
 801032a:	4b75      	ldr	r3, [pc, #468]	@ (8010500 <_dtoa_r+0x588>)
 801032c:	2200      	movs	r2, #0
 801032e:	4620      	mov	r0, r4
 8010330:	4629      	mov	r1, r5
 8010332:	f7f0 fbf3 	bl	8000b1c <__aeabi_dcmplt>
 8010336:	2800      	cmp	r0, #0
 8010338:	f000 808b 	beq.w	8010452 <_dtoa_r+0x4da>
 801033c:	9b03      	ldr	r3, [sp, #12]
 801033e:	2b00      	cmp	r3, #0
 8010340:	f000 8087 	beq.w	8010452 <_dtoa_r+0x4da>
 8010344:	f1bb 0f00 	cmp.w	fp, #0
 8010348:	dd34      	ble.n	80103b4 <_dtoa_r+0x43c>
 801034a:	4620      	mov	r0, r4
 801034c:	4b6d      	ldr	r3, [pc, #436]	@ (8010504 <_dtoa_r+0x58c>)
 801034e:	2200      	movs	r2, #0
 8010350:	4629      	mov	r1, r5
 8010352:	f7f0 f971 	bl	8000638 <__aeabi_dmul>
 8010356:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801035a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 801035e:	3601      	adds	r6, #1
 8010360:	465c      	mov	r4, fp
 8010362:	4630      	mov	r0, r6
 8010364:	f7f0 f8fe 	bl	8000564 <__aeabi_i2d>
 8010368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801036c:	f7f0 f964 	bl	8000638 <__aeabi_dmul>
 8010370:	4b65      	ldr	r3, [pc, #404]	@ (8010508 <_dtoa_r+0x590>)
 8010372:	2200      	movs	r2, #0
 8010374:	f7ef ffaa 	bl	80002cc <__adddf3>
 8010378:	4605      	mov	r5, r0
 801037a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801037e:	2c00      	cmp	r4, #0
 8010380:	d16a      	bne.n	8010458 <_dtoa_r+0x4e0>
 8010382:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010386:	4b61      	ldr	r3, [pc, #388]	@ (801050c <_dtoa_r+0x594>)
 8010388:	2200      	movs	r2, #0
 801038a:	f7ef ff9d 	bl	80002c8 <__aeabi_dsub>
 801038e:	4602      	mov	r2, r0
 8010390:	460b      	mov	r3, r1
 8010392:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010396:	462a      	mov	r2, r5
 8010398:	4633      	mov	r3, r6
 801039a:	f7f0 fbdd 	bl	8000b58 <__aeabi_dcmpgt>
 801039e:	2800      	cmp	r0, #0
 80103a0:	f040 8298 	bne.w	80108d4 <_dtoa_r+0x95c>
 80103a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80103a8:	462a      	mov	r2, r5
 80103aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80103ae:	f7f0 fbb5 	bl	8000b1c <__aeabi_dcmplt>
 80103b2:	bb38      	cbnz	r0, 8010404 <_dtoa_r+0x48c>
 80103b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80103b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80103bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80103be:	2b00      	cmp	r3, #0
 80103c0:	f2c0 8157 	blt.w	8010672 <_dtoa_r+0x6fa>
 80103c4:	2f0e      	cmp	r7, #14
 80103c6:	f300 8154 	bgt.w	8010672 <_dtoa_r+0x6fa>
 80103ca:	4b4b      	ldr	r3, [pc, #300]	@ (80104f8 <_dtoa_r+0x580>)
 80103cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80103d0:	ed93 7b00 	vldr	d7, [r3]
 80103d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	ed8d 7b00 	vstr	d7, [sp]
 80103dc:	f280 80e5 	bge.w	80105aa <_dtoa_r+0x632>
 80103e0:	9b03      	ldr	r3, [sp, #12]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	f300 80e1 	bgt.w	80105aa <_dtoa_r+0x632>
 80103e8:	d10c      	bne.n	8010404 <_dtoa_r+0x48c>
 80103ea:	4b48      	ldr	r3, [pc, #288]	@ (801050c <_dtoa_r+0x594>)
 80103ec:	2200      	movs	r2, #0
 80103ee:	ec51 0b17 	vmov	r0, r1, d7
 80103f2:	f7f0 f921 	bl	8000638 <__aeabi_dmul>
 80103f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103fa:	f7f0 fba3 	bl	8000b44 <__aeabi_dcmpge>
 80103fe:	2800      	cmp	r0, #0
 8010400:	f000 8266 	beq.w	80108d0 <_dtoa_r+0x958>
 8010404:	2400      	movs	r4, #0
 8010406:	4625      	mov	r5, r4
 8010408:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801040a:	4656      	mov	r6, sl
 801040c:	ea6f 0803 	mvn.w	r8, r3
 8010410:	2700      	movs	r7, #0
 8010412:	4621      	mov	r1, r4
 8010414:	4648      	mov	r0, r9
 8010416:	f001 fcb7 	bl	8011d88 <_Bfree>
 801041a:	2d00      	cmp	r5, #0
 801041c:	f000 80bd 	beq.w	801059a <_dtoa_r+0x622>
 8010420:	b12f      	cbz	r7, 801042e <_dtoa_r+0x4b6>
 8010422:	42af      	cmp	r7, r5
 8010424:	d003      	beq.n	801042e <_dtoa_r+0x4b6>
 8010426:	4639      	mov	r1, r7
 8010428:	4648      	mov	r0, r9
 801042a:	f001 fcad 	bl	8011d88 <_Bfree>
 801042e:	4629      	mov	r1, r5
 8010430:	4648      	mov	r0, r9
 8010432:	f001 fca9 	bl	8011d88 <_Bfree>
 8010436:	e0b0      	b.n	801059a <_dtoa_r+0x622>
 8010438:	07e2      	lsls	r2, r4, #31
 801043a:	d505      	bpl.n	8010448 <_dtoa_r+0x4d0>
 801043c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010440:	f7f0 f8fa 	bl	8000638 <__aeabi_dmul>
 8010444:	3601      	adds	r6, #1
 8010446:	2301      	movs	r3, #1
 8010448:	1064      	asrs	r4, r4, #1
 801044a:	3508      	adds	r5, #8
 801044c:	e762      	b.n	8010314 <_dtoa_r+0x39c>
 801044e:	2602      	movs	r6, #2
 8010450:	e765      	b.n	801031e <_dtoa_r+0x3a6>
 8010452:	9c03      	ldr	r4, [sp, #12]
 8010454:	46b8      	mov	r8, r7
 8010456:	e784      	b.n	8010362 <_dtoa_r+0x3ea>
 8010458:	4b27      	ldr	r3, [pc, #156]	@ (80104f8 <_dtoa_r+0x580>)
 801045a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801045c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010460:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010464:	4454      	add	r4, sl
 8010466:	2900      	cmp	r1, #0
 8010468:	d054      	beq.n	8010514 <_dtoa_r+0x59c>
 801046a:	4929      	ldr	r1, [pc, #164]	@ (8010510 <_dtoa_r+0x598>)
 801046c:	2000      	movs	r0, #0
 801046e:	f7f0 fa0d 	bl	800088c <__aeabi_ddiv>
 8010472:	4633      	mov	r3, r6
 8010474:	462a      	mov	r2, r5
 8010476:	f7ef ff27 	bl	80002c8 <__aeabi_dsub>
 801047a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801047e:	4656      	mov	r6, sl
 8010480:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010484:	f7f0 fb88 	bl	8000b98 <__aeabi_d2iz>
 8010488:	4605      	mov	r5, r0
 801048a:	f7f0 f86b 	bl	8000564 <__aeabi_i2d>
 801048e:	4602      	mov	r2, r0
 8010490:	460b      	mov	r3, r1
 8010492:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010496:	f7ef ff17 	bl	80002c8 <__aeabi_dsub>
 801049a:	3530      	adds	r5, #48	@ 0x30
 801049c:	4602      	mov	r2, r0
 801049e:	460b      	mov	r3, r1
 80104a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80104a4:	f806 5b01 	strb.w	r5, [r6], #1
 80104a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80104ac:	f7f0 fb36 	bl	8000b1c <__aeabi_dcmplt>
 80104b0:	2800      	cmp	r0, #0
 80104b2:	d172      	bne.n	801059a <_dtoa_r+0x622>
 80104b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80104b8:	4911      	ldr	r1, [pc, #68]	@ (8010500 <_dtoa_r+0x588>)
 80104ba:	2000      	movs	r0, #0
 80104bc:	f7ef ff04 	bl	80002c8 <__aeabi_dsub>
 80104c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80104c4:	f7f0 fb2a 	bl	8000b1c <__aeabi_dcmplt>
 80104c8:	2800      	cmp	r0, #0
 80104ca:	f040 80b4 	bne.w	8010636 <_dtoa_r+0x6be>
 80104ce:	42a6      	cmp	r6, r4
 80104d0:	f43f af70 	beq.w	80103b4 <_dtoa_r+0x43c>
 80104d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80104d8:	4b0a      	ldr	r3, [pc, #40]	@ (8010504 <_dtoa_r+0x58c>)
 80104da:	2200      	movs	r2, #0
 80104dc:	f7f0 f8ac 	bl	8000638 <__aeabi_dmul>
 80104e0:	4b08      	ldr	r3, [pc, #32]	@ (8010504 <_dtoa_r+0x58c>)
 80104e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80104e6:	2200      	movs	r2, #0
 80104e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80104ec:	f7f0 f8a4 	bl	8000638 <__aeabi_dmul>
 80104f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80104f4:	e7c4      	b.n	8010480 <_dtoa_r+0x508>
 80104f6:	bf00      	nop
 80104f8:	08015a48 	.word	0x08015a48
 80104fc:	08015a20 	.word	0x08015a20
 8010500:	3ff00000 	.word	0x3ff00000
 8010504:	40240000 	.word	0x40240000
 8010508:	401c0000 	.word	0x401c0000
 801050c:	40140000 	.word	0x40140000
 8010510:	3fe00000 	.word	0x3fe00000
 8010514:	4631      	mov	r1, r6
 8010516:	4628      	mov	r0, r5
 8010518:	f7f0 f88e 	bl	8000638 <__aeabi_dmul>
 801051c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010520:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010522:	4656      	mov	r6, sl
 8010524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010528:	f7f0 fb36 	bl	8000b98 <__aeabi_d2iz>
 801052c:	4605      	mov	r5, r0
 801052e:	f7f0 f819 	bl	8000564 <__aeabi_i2d>
 8010532:	4602      	mov	r2, r0
 8010534:	460b      	mov	r3, r1
 8010536:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801053a:	f7ef fec5 	bl	80002c8 <__aeabi_dsub>
 801053e:	3530      	adds	r5, #48	@ 0x30
 8010540:	f806 5b01 	strb.w	r5, [r6], #1
 8010544:	4602      	mov	r2, r0
 8010546:	460b      	mov	r3, r1
 8010548:	42a6      	cmp	r6, r4
 801054a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801054e:	f04f 0200 	mov.w	r2, #0
 8010552:	d124      	bne.n	801059e <_dtoa_r+0x626>
 8010554:	4baf      	ldr	r3, [pc, #700]	@ (8010814 <_dtoa_r+0x89c>)
 8010556:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801055a:	f7ef feb7 	bl	80002cc <__adddf3>
 801055e:	4602      	mov	r2, r0
 8010560:	460b      	mov	r3, r1
 8010562:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010566:	f7f0 faf7 	bl	8000b58 <__aeabi_dcmpgt>
 801056a:	2800      	cmp	r0, #0
 801056c:	d163      	bne.n	8010636 <_dtoa_r+0x6be>
 801056e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010572:	49a8      	ldr	r1, [pc, #672]	@ (8010814 <_dtoa_r+0x89c>)
 8010574:	2000      	movs	r0, #0
 8010576:	f7ef fea7 	bl	80002c8 <__aeabi_dsub>
 801057a:	4602      	mov	r2, r0
 801057c:	460b      	mov	r3, r1
 801057e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010582:	f7f0 facb 	bl	8000b1c <__aeabi_dcmplt>
 8010586:	2800      	cmp	r0, #0
 8010588:	f43f af14 	beq.w	80103b4 <_dtoa_r+0x43c>
 801058c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801058e:	1e73      	subs	r3, r6, #1
 8010590:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010592:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010596:	2b30      	cmp	r3, #48	@ 0x30
 8010598:	d0f8      	beq.n	801058c <_dtoa_r+0x614>
 801059a:	4647      	mov	r7, r8
 801059c:	e03b      	b.n	8010616 <_dtoa_r+0x69e>
 801059e:	4b9e      	ldr	r3, [pc, #632]	@ (8010818 <_dtoa_r+0x8a0>)
 80105a0:	f7f0 f84a 	bl	8000638 <__aeabi_dmul>
 80105a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80105a8:	e7bc      	b.n	8010524 <_dtoa_r+0x5ac>
 80105aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80105ae:	4656      	mov	r6, sl
 80105b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105b4:	4620      	mov	r0, r4
 80105b6:	4629      	mov	r1, r5
 80105b8:	f7f0 f968 	bl	800088c <__aeabi_ddiv>
 80105bc:	f7f0 faec 	bl	8000b98 <__aeabi_d2iz>
 80105c0:	4680      	mov	r8, r0
 80105c2:	f7ef ffcf 	bl	8000564 <__aeabi_i2d>
 80105c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105ca:	f7f0 f835 	bl	8000638 <__aeabi_dmul>
 80105ce:	4602      	mov	r2, r0
 80105d0:	460b      	mov	r3, r1
 80105d2:	4620      	mov	r0, r4
 80105d4:	4629      	mov	r1, r5
 80105d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80105da:	f7ef fe75 	bl	80002c8 <__aeabi_dsub>
 80105de:	f806 4b01 	strb.w	r4, [r6], #1
 80105e2:	9d03      	ldr	r5, [sp, #12]
 80105e4:	eba6 040a 	sub.w	r4, r6, sl
 80105e8:	42a5      	cmp	r5, r4
 80105ea:	4602      	mov	r2, r0
 80105ec:	460b      	mov	r3, r1
 80105ee:	d133      	bne.n	8010658 <_dtoa_r+0x6e0>
 80105f0:	f7ef fe6c 	bl	80002cc <__adddf3>
 80105f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105f8:	4604      	mov	r4, r0
 80105fa:	460d      	mov	r5, r1
 80105fc:	f7f0 faac 	bl	8000b58 <__aeabi_dcmpgt>
 8010600:	b9c0      	cbnz	r0, 8010634 <_dtoa_r+0x6bc>
 8010602:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010606:	4620      	mov	r0, r4
 8010608:	4629      	mov	r1, r5
 801060a:	f7f0 fa7d 	bl	8000b08 <__aeabi_dcmpeq>
 801060e:	b110      	cbz	r0, 8010616 <_dtoa_r+0x69e>
 8010610:	f018 0f01 	tst.w	r8, #1
 8010614:	d10e      	bne.n	8010634 <_dtoa_r+0x6bc>
 8010616:	9902      	ldr	r1, [sp, #8]
 8010618:	4648      	mov	r0, r9
 801061a:	f001 fbb5 	bl	8011d88 <_Bfree>
 801061e:	2300      	movs	r3, #0
 8010620:	7033      	strb	r3, [r6, #0]
 8010622:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010624:	3701      	adds	r7, #1
 8010626:	601f      	str	r7, [r3, #0]
 8010628:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801062a:	2b00      	cmp	r3, #0
 801062c:	f000 824b 	beq.w	8010ac6 <_dtoa_r+0xb4e>
 8010630:	601e      	str	r6, [r3, #0]
 8010632:	e248      	b.n	8010ac6 <_dtoa_r+0xb4e>
 8010634:	46b8      	mov	r8, r7
 8010636:	4633      	mov	r3, r6
 8010638:	461e      	mov	r6, r3
 801063a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801063e:	2a39      	cmp	r2, #57	@ 0x39
 8010640:	d106      	bne.n	8010650 <_dtoa_r+0x6d8>
 8010642:	459a      	cmp	sl, r3
 8010644:	d1f8      	bne.n	8010638 <_dtoa_r+0x6c0>
 8010646:	2230      	movs	r2, #48	@ 0x30
 8010648:	f108 0801 	add.w	r8, r8, #1
 801064c:	f88a 2000 	strb.w	r2, [sl]
 8010650:	781a      	ldrb	r2, [r3, #0]
 8010652:	3201      	adds	r2, #1
 8010654:	701a      	strb	r2, [r3, #0]
 8010656:	e7a0      	b.n	801059a <_dtoa_r+0x622>
 8010658:	4b6f      	ldr	r3, [pc, #444]	@ (8010818 <_dtoa_r+0x8a0>)
 801065a:	2200      	movs	r2, #0
 801065c:	f7ef ffec 	bl	8000638 <__aeabi_dmul>
 8010660:	2200      	movs	r2, #0
 8010662:	2300      	movs	r3, #0
 8010664:	4604      	mov	r4, r0
 8010666:	460d      	mov	r5, r1
 8010668:	f7f0 fa4e 	bl	8000b08 <__aeabi_dcmpeq>
 801066c:	2800      	cmp	r0, #0
 801066e:	d09f      	beq.n	80105b0 <_dtoa_r+0x638>
 8010670:	e7d1      	b.n	8010616 <_dtoa_r+0x69e>
 8010672:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010674:	2a00      	cmp	r2, #0
 8010676:	f000 80ea 	beq.w	801084e <_dtoa_r+0x8d6>
 801067a:	9a07      	ldr	r2, [sp, #28]
 801067c:	2a01      	cmp	r2, #1
 801067e:	f300 80cd 	bgt.w	801081c <_dtoa_r+0x8a4>
 8010682:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010684:	2a00      	cmp	r2, #0
 8010686:	f000 80c1 	beq.w	801080c <_dtoa_r+0x894>
 801068a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801068e:	9c08      	ldr	r4, [sp, #32]
 8010690:	9e00      	ldr	r6, [sp, #0]
 8010692:	9a00      	ldr	r2, [sp, #0]
 8010694:	441a      	add	r2, r3
 8010696:	9200      	str	r2, [sp, #0]
 8010698:	9a06      	ldr	r2, [sp, #24]
 801069a:	2101      	movs	r1, #1
 801069c:	441a      	add	r2, r3
 801069e:	4648      	mov	r0, r9
 80106a0:	9206      	str	r2, [sp, #24]
 80106a2:	f001 fc6f 	bl	8011f84 <__i2b>
 80106a6:	4605      	mov	r5, r0
 80106a8:	b166      	cbz	r6, 80106c4 <_dtoa_r+0x74c>
 80106aa:	9b06      	ldr	r3, [sp, #24]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	dd09      	ble.n	80106c4 <_dtoa_r+0x74c>
 80106b0:	42b3      	cmp	r3, r6
 80106b2:	9a00      	ldr	r2, [sp, #0]
 80106b4:	bfa8      	it	ge
 80106b6:	4633      	movge	r3, r6
 80106b8:	1ad2      	subs	r2, r2, r3
 80106ba:	9200      	str	r2, [sp, #0]
 80106bc:	9a06      	ldr	r2, [sp, #24]
 80106be:	1af6      	subs	r6, r6, r3
 80106c0:	1ad3      	subs	r3, r2, r3
 80106c2:	9306      	str	r3, [sp, #24]
 80106c4:	9b08      	ldr	r3, [sp, #32]
 80106c6:	b30b      	cbz	r3, 801070c <_dtoa_r+0x794>
 80106c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	f000 80c6 	beq.w	801085c <_dtoa_r+0x8e4>
 80106d0:	2c00      	cmp	r4, #0
 80106d2:	f000 80c0 	beq.w	8010856 <_dtoa_r+0x8de>
 80106d6:	4629      	mov	r1, r5
 80106d8:	4622      	mov	r2, r4
 80106da:	4648      	mov	r0, r9
 80106dc:	f001 fd0a 	bl	80120f4 <__pow5mult>
 80106e0:	9a02      	ldr	r2, [sp, #8]
 80106e2:	4601      	mov	r1, r0
 80106e4:	4605      	mov	r5, r0
 80106e6:	4648      	mov	r0, r9
 80106e8:	f001 fc62 	bl	8011fb0 <__multiply>
 80106ec:	9902      	ldr	r1, [sp, #8]
 80106ee:	4680      	mov	r8, r0
 80106f0:	4648      	mov	r0, r9
 80106f2:	f001 fb49 	bl	8011d88 <_Bfree>
 80106f6:	9b08      	ldr	r3, [sp, #32]
 80106f8:	1b1b      	subs	r3, r3, r4
 80106fa:	9308      	str	r3, [sp, #32]
 80106fc:	f000 80b1 	beq.w	8010862 <_dtoa_r+0x8ea>
 8010700:	9a08      	ldr	r2, [sp, #32]
 8010702:	4641      	mov	r1, r8
 8010704:	4648      	mov	r0, r9
 8010706:	f001 fcf5 	bl	80120f4 <__pow5mult>
 801070a:	9002      	str	r0, [sp, #8]
 801070c:	2101      	movs	r1, #1
 801070e:	4648      	mov	r0, r9
 8010710:	f001 fc38 	bl	8011f84 <__i2b>
 8010714:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010716:	4604      	mov	r4, r0
 8010718:	2b00      	cmp	r3, #0
 801071a:	f000 81d8 	beq.w	8010ace <_dtoa_r+0xb56>
 801071e:	461a      	mov	r2, r3
 8010720:	4601      	mov	r1, r0
 8010722:	4648      	mov	r0, r9
 8010724:	f001 fce6 	bl	80120f4 <__pow5mult>
 8010728:	9b07      	ldr	r3, [sp, #28]
 801072a:	2b01      	cmp	r3, #1
 801072c:	4604      	mov	r4, r0
 801072e:	f300 809f 	bgt.w	8010870 <_dtoa_r+0x8f8>
 8010732:	9b04      	ldr	r3, [sp, #16]
 8010734:	2b00      	cmp	r3, #0
 8010736:	f040 8097 	bne.w	8010868 <_dtoa_r+0x8f0>
 801073a:	9b05      	ldr	r3, [sp, #20]
 801073c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010740:	2b00      	cmp	r3, #0
 8010742:	f040 8093 	bne.w	801086c <_dtoa_r+0x8f4>
 8010746:	9b05      	ldr	r3, [sp, #20]
 8010748:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801074c:	0d1b      	lsrs	r3, r3, #20
 801074e:	051b      	lsls	r3, r3, #20
 8010750:	b133      	cbz	r3, 8010760 <_dtoa_r+0x7e8>
 8010752:	9b00      	ldr	r3, [sp, #0]
 8010754:	3301      	adds	r3, #1
 8010756:	9300      	str	r3, [sp, #0]
 8010758:	9b06      	ldr	r3, [sp, #24]
 801075a:	3301      	adds	r3, #1
 801075c:	9306      	str	r3, [sp, #24]
 801075e:	2301      	movs	r3, #1
 8010760:	9308      	str	r3, [sp, #32]
 8010762:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010764:	2b00      	cmp	r3, #0
 8010766:	f000 81b8 	beq.w	8010ada <_dtoa_r+0xb62>
 801076a:	6923      	ldr	r3, [r4, #16]
 801076c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010770:	6918      	ldr	r0, [r3, #16]
 8010772:	f001 fbbb 	bl	8011eec <__hi0bits>
 8010776:	f1c0 0020 	rsb	r0, r0, #32
 801077a:	9b06      	ldr	r3, [sp, #24]
 801077c:	4418      	add	r0, r3
 801077e:	f010 001f 	ands.w	r0, r0, #31
 8010782:	f000 8082 	beq.w	801088a <_dtoa_r+0x912>
 8010786:	f1c0 0320 	rsb	r3, r0, #32
 801078a:	2b04      	cmp	r3, #4
 801078c:	dd73      	ble.n	8010876 <_dtoa_r+0x8fe>
 801078e:	9b00      	ldr	r3, [sp, #0]
 8010790:	f1c0 001c 	rsb	r0, r0, #28
 8010794:	4403      	add	r3, r0
 8010796:	9300      	str	r3, [sp, #0]
 8010798:	9b06      	ldr	r3, [sp, #24]
 801079a:	4403      	add	r3, r0
 801079c:	4406      	add	r6, r0
 801079e:	9306      	str	r3, [sp, #24]
 80107a0:	9b00      	ldr	r3, [sp, #0]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	dd05      	ble.n	80107b2 <_dtoa_r+0x83a>
 80107a6:	9902      	ldr	r1, [sp, #8]
 80107a8:	461a      	mov	r2, r3
 80107aa:	4648      	mov	r0, r9
 80107ac:	f001 fcfc 	bl	80121a8 <__lshift>
 80107b0:	9002      	str	r0, [sp, #8]
 80107b2:	9b06      	ldr	r3, [sp, #24]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	dd05      	ble.n	80107c4 <_dtoa_r+0x84c>
 80107b8:	4621      	mov	r1, r4
 80107ba:	461a      	mov	r2, r3
 80107bc:	4648      	mov	r0, r9
 80107be:	f001 fcf3 	bl	80121a8 <__lshift>
 80107c2:	4604      	mov	r4, r0
 80107c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d061      	beq.n	801088e <_dtoa_r+0x916>
 80107ca:	9802      	ldr	r0, [sp, #8]
 80107cc:	4621      	mov	r1, r4
 80107ce:	f001 fd57 	bl	8012280 <__mcmp>
 80107d2:	2800      	cmp	r0, #0
 80107d4:	da5b      	bge.n	801088e <_dtoa_r+0x916>
 80107d6:	2300      	movs	r3, #0
 80107d8:	9902      	ldr	r1, [sp, #8]
 80107da:	220a      	movs	r2, #10
 80107dc:	4648      	mov	r0, r9
 80107de:	f001 faf5 	bl	8011dcc <__multadd>
 80107e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107e4:	9002      	str	r0, [sp, #8]
 80107e6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	f000 8177 	beq.w	8010ade <_dtoa_r+0xb66>
 80107f0:	4629      	mov	r1, r5
 80107f2:	2300      	movs	r3, #0
 80107f4:	220a      	movs	r2, #10
 80107f6:	4648      	mov	r0, r9
 80107f8:	f001 fae8 	bl	8011dcc <__multadd>
 80107fc:	f1bb 0f00 	cmp.w	fp, #0
 8010800:	4605      	mov	r5, r0
 8010802:	dc6f      	bgt.n	80108e4 <_dtoa_r+0x96c>
 8010804:	9b07      	ldr	r3, [sp, #28]
 8010806:	2b02      	cmp	r3, #2
 8010808:	dc49      	bgt.n	801089e <_dtoa_r+0x926>
 801080a:	e06b      	b.n	80108e4 <_dtoa_r+0x96c>
 801080c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801080e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010812:	e73c      	b.n	801068e <_dtoa_r+0x716>
 8010814:	3fe00000 	.word	0x3fe00000
 8010818:	40240000 	.word	0x40240000
 801081c:	9b03      	ldr	r3, [sp, #12]
 801081e:	1e5c      	subs	r4, r3, #1
 8010820:	9b08      	ldr	r3, [sp, #32]
 8010822:	42a3      	cmp	r3, r4
 8010824:	db09      	blt.n	801083a <_dtoa_r+0x8c2>
 8010826:	1b1c      	subs	r4, r3, r4
 8010828:	9b03      	ldr	r3, [sp, #12]
 801082a:	2b00      	cmp	r3, #0
 801082c:	f6bf af30 	bge.w	8010690 <_dtoa_r+0x718>
 8010830:	9b00      	ldr	r3, [sp, #0]
 8010832:	9a03      	ldr	r2, [sp, #12]
 8010834:	1a9e      	subs	r6, r3, r2
 8010836:	2300      	movs	r3, #0
 8010838:	e72b      	b.n	8010692 <_dtoa_r+0x71a>
 801083a:	9b08      	ldr	r3, [sp, #32]
 801083c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801083e:	9408      	str	r4, [sp, #32]
 8010840:	1ae3      	subs	r3, r4, r3
 8010842:	441a      	add	r2, r3
 8010844:	9e00      	ldr	r6, [sp, #0]
 8010846:	9b03      	ldr	r3, [sp, #12]
 8010848:	920d      	str	r2, [sp, #52]	@ 0x34
 801084a:	2400      	movs	r4, #0
 801084c:	e721      	b.n	8010692 <_dtoa_r+0x71a>
 801084e:	9c08      	ldr	r4, [sp, #32]
 8010850:	9e00      	ldr	r6, [sp, #0]
 8010852:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010854:	e728      	b.n	80106a8 <_dtoa_r+0x730>
 8010856:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801085a:	e751      	b.n	8010700 <_dtoa_r+0x788>
 801085c:	9a08      	ldr	r2, [sp, #32]
 801085e:	9902      	ldr	r1, [sp, #8]
 8010860:	e750      	b.n	8010704 <_dtoa_r+0x78c>
 8010862:	f8cd 8008 	str.w	r8, [sp, #8]
 8010866:	e751      	b.n	801070c <_dtoa_r+0x794>
 8010868:	2300      	movs	r3, #0
 801086a:	e779      	b.n	8010760 <_dtoa_r+0x7e8>
 801086c:	9b04      	ldr	r3, [sp, #16]
 801086e:	e777      	b.n	8010760 <_dtoa_r+0x7e8>
 8010870:	2300      	movs	r3, #0
 8010872:	9308      	str	r3, [sp, #32]
 8010874:	e779      	b.n	801076a <_dtoa_r+0x7f2>
 8010876:	d093      	beq.n	80107a0 <_dtoa_r+0x828>
 8010878:	9a00      	ldr	r2, [sp, #0]
 801087a:	331c      	adds	r3, #28
 801087c:	441a      	add	r2, r3
 801087e:	9200      	str	r2, [sp, #0]
 8010880:	9a06      	ldr	r2, [sp, #24]
 8010882:	441a      	add	r2, r3
 8010884:	441e      	add	r6, r3
 8010886:	9206      	str	r2, [sp, #24]
 8010888:	e78a      	b.n	80107a0 <_dtoa_r+0x828>
 801088a:	4603      	mov	r3, r0
 801088c:	e7f4      	b.n	8010878 <_dtoa_r+0x900>
 801088e:	9b03      	ldr	r3, [sp, #12]
 8010890:	2b00      	cmp	r3, #0
 8010892:	46b8      	mov	r8, r7
 8010894:	dc20      	bgt.n	80108d8 <_dtoa_r+0x960>
 8010896:	469b      	mov	fp, r3
 8010898:	9b07      	ldr	r3, [sp, #28]
 801089a:	2b02      	cmp	r3, #2
 801089c:	dd1e      	ble.n	80108dc <_dtoa_r+0x964>
 801089e:	f1bb 0f00 	cmp.w	fp, #0
 80108a2:	f47f adb1 	bne.w	8010408 <_dtoa_r+0x490>
 80108a6:	4621      	mov	r1, r4
 80108a8:	465b      	mov	r3, fp
 80108aa:	2205      	movs	r2, #5
 80108ac:	4648      	mov	r0, r9
 80108ae:	f001 fa8d 	bl	8011dcc <__multadd>
 80108b2:	4601      	mov	r1, r0
 80108b4:	4604      	mov	r4, r0
 80108b6:	9802      	ldr	r0, [sp, #8]
 80108b8:	f001 fce2 	bl	8012280 <__mcmp>
 80108bc:	2800      	cmp	r0, #0
 80108be:	f77f ada3 	ble.w	8010408 <_dtoa_r+0x490>
 80108c2:	4656      	mov	r6, sl
 80108c4:	2331      	movs	r3, #49	@ 0x31
 80108c6:	f806 3b01 	strb.w	r3, [r6], #1
 80108ca:	f108 0801 	add.w	r8, r8, #1
 80108ce:	e59f      	b.n	8010410 <_dtoa_r+0x498>
 80108d0:	9c03      	ldr	r4, [sp, #12]
 80108d2:	46b8      	mov	r8, r7
 80108d4:	4625      	mov	r5, r4
 80108d6:	e7f4      	b.n	80108c2 <_dtoa_r+0x94a>
 80108d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80108dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108de:	2b00      	cmp	r3, #0
 80108e0:	f000 8101 	beq.w	8010ae6 <_dtoa_r+0xb6e>
 80108e4:	2e00      	cmp	r6, #0
 80108e6:	dd05      	ble.n	80108f4 <_dtoa_r+0x97c>
 80108e8:	4629      	mov	r1, r5
 80108ea:	4632      	mov	r2, r6
 80108ec:	4648      	mov	r0, r9
 80108ee:	f001 fc5b 	bl	80121a8 <__lshift>
 80108f2:	4605      	mov	r5, r0
 80108f4:	9b08      	ldr	r3, [sp, #32]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d05c      	beq.n	80109b4 <_dtoa_r+0xa3c>
 80108fa:	6869      	ldr	r1, [r5, #4]
 80108fc:	4648      	mov	r0, r9
 80108fe:	f001 fa03 	bl	8011d08 <_Balloc>
 8010902:	4606      	mov	r6, r0
 8010904:	b928      	cbnz	r0, 8010912 <_dtoa_r+0x99a>
 8010906:	4b82      	ldr	r3, [pc, #520]	@ (8010b10 <_dtoa_r+0xb98>)
 8010908:	4602      	mov	r2, r0
 801090a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801090e:	f7ff bb4a 	b.w	800ffa6 <_dtoa_r+0x2e>
 8010912:	692a      	ldr	r2, [r5, #16]
 8010914:	3202      	adds	r2, #2
 8010916:	0092      	lsls	r2, r2, #2
 8010918:	f105 010c 	add.w	r1, r5, #12
 801091c:	300c      	adds	r0, #12
 801091e:	f7ff fa83 	bl	800fe28 <memcpy>
 8010922:	2201      	movs	r2, #1
 8010924:	4631      	mov	r1, r6
 8010926:	4648      	mov	r0, r9
 8010928:	f001 fc3e 	bl	80121a8 <__lshift>
 801092c:	f10a 0301 	add.w	r3, sl, #1
 8010930:	9300      	str	r3, [sp, #0]
 8010932:	eb0a 030b 	add.w	r3, sl, fp
 8010936:	9308      	str	r3, [sp, #32]
 8010938:	9b04      	ldr	r3, [sp, #16]
 801093a:	f003 0301 	and.w	r3, r3, #1
 801093e:	462f      	mov	r7, r5
 8010940:	9306      	str	r3, [sp, #24]
 8010942:	4605      	mov	r5, r0
 8010944:	9b00      	ldr	r3, [sp, #0]
 8010946:	9802      	ldr	r0, [sp, #8]
 8010948:	4621      	mov	r1, r4
 801094a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801094e:	f7ff fa89 	bl	800fe64 <quorem>
 8010952:	4603      	mov	r3, r0
 8010954:	3330      	adds	r3, #48	@ 0x30
 8010956:	9003      	str	r0, [sp, #12]
 8010958:	4639      	mov	r1, r7
 801095a:	9802      	ldr	r0, [sp, #8]
 801095c:	9309      	str	r3, [sp, #36]	@ 0x24
 801095e:	f001 fc8f 	bl	8012280 <__mcmp>
 8010962:	462a      	mov	r2, r5
 8010964:	9004      	str	r0, [sp, #16]
 8010966:	4621      	mov	r1, r4
 8010968:	4648      	mov	r0, r9
 801096a:	f001 fca5 	bl	80122b8 <__mdiff>
 801096e:	68c2      	ldr	r2, [r0, #12]
 8010970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010972:	4606      	mov	r6, r0
 8010974:	bb02      	cbnz	r2, 80109b8 <_dtoa_r+0xa40>
 8010976:	4601      	mov	r1, r0
 8010978:	9802      	ldr	r0, [sp, #8]
 801097a:	f001 fc81 	bl	8012280 <__mcmp>
 801097e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010980:	4602      	mov	r2, r0
 8010982:	4631      	mov	r1, r6
 8010984:	4648      	mov	r0, r9
 8010986:	920c      	str	r2, [sp, #48]	@ 0x30
 8010988:	9309      	str	r3, [sp, #36]	@ 0x24
 801098a:	f001 f9fd 	bl	8011d88 <_Bfree>
 801098e:	9b07      	ldr	r3, [sp, #28]
 8010990:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010992:	9e00      	ldr	r6, [sp, #0]
 8010994:	ea42 0103 	orr.w	r1, r2, r3
 8010998:	9b06      	ldr	r3, [sp, #24]
 801099a:	4319      	orrs	r1, r3
 801099c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801099e:	d10d      	bne.n	80109bc <_dtoa_r+0xa44>
 80109a0:	2b39      	cmp	r3, #57	@ 0x39
 80109a2:	d027      	beq.n	80109f4 <_dtoa_r+0xa7c>
 80109a4:	9a04      	ldr	r2, [sp, #16]
 80109a6:	2a00      	cmp	r2, #0
 80109a8:	dd01      	ble.n	80109ae <_dtoa_r+0xa36>
 80109aa:	9b03      	ldr	r3, [sp, #12]
 80109ac:	3331      	adds	r3, #49	@ 0x31
 80109ae:	f88b 3000 	strb.w	r3, [fp]
 80109b2:	e52e      	b.n	8010412 <_dtoa_r+0x49a>
 80109b4:	4628      	mov	r0, r5
 80109b6:	e7b9      	b.n	801092c <_dtoa_r+0x9b4>
 80109b8:	2201      	movs	r2, #1
 80109ba:	e7e2      	b.n	8010982 <_dtoa_r+0xa0a>
 80109bc:	9904      	ldr	r1, [sp, #16]
 80109be:	2900      	cmp	r1, #0
 80109c0:	db04      	blt.n	80109cc <_dtoa_r+0xa54>
 80109c2:	9807      	ldr	r0, [sp, #28]
 80109c4:	4301      	orrs	r1, r0
 80109c6:	9806      	ldr	r0, [sp, #24]
 80109c8:	4301      	orrs	r1, r0
 80109ca:	d120      	bne.n	8010a0e <_dtoa_r+0xa96>
 80109cc:	2a00      	cmp	r2, #0
 80109ce:	ddee      	ble.n	80109ae <_dtoa_r+0xa36>
 80109d0:	9902      	ldr	r1, [sp, #8]
 80109d2:	9300      	str	r3, [sp, #0]
 80109d4:	2201      	movs	r2, #1
 80109d6:	4648      	mov	r0, r9
 80109d8:	f001 fbe6 	bl	80121a8 <__lshift>
 80109dc:	4621      	mov	r1, r4
 80109de:	9002      	str	r0, [sp, #8]
 80109e0:	f001 fc4e 	bl	8012280 <__mcmp>
 80109e4:	2800      	cmp	r0, #0
 80109e6:	9b00      	ldr	r3, [sp, #0]
 80109e8:	dc02      	bgt.n	80109f0 <_dtoa_r+0xa78>
 80109ea:	d1e0      	bne.n	80109ae <_dtoa_r+0xa36>
 80109ec:	07da      	lsls	r2, r3, #31
 80109ee:	d5de      	bpl.n	80109ae <_dtoa_r+0xa36>
 80109f0:	2b39      	cmp	r3, #57	@ 0x39
 80109f2:	d1da      	bne.n	80109aa <_dtoa_r+0xa32>
 80109f4:	2339      	movs	r3, #57	@ 0x39
 80109f6:	f88b 3000 	strb.w	r3, [fp]
 80109fa:	4633      	mov	r3, r6
 80109fc:	461e      	mov	r6, r3
 80109fe:	3b01      	subs	r3, #1
 8010a00:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010a04:	2a39      	cmp	r2, #57	@ 0x39
 8010a06:	d04e      	beq.n	8010aa6 <_dtoa_r+0xb2e>
 8010a08:	3201      	adds	r2, #1
 8010a0a:	701a      	strb	r2, [r3, #0]
 8010a0c:	e501      	b.n	8010412 <_dtoa_r+0x49a>
 8010a0e:	2a00      	cmp	r2, #0
 8010a10:	dd03      	ble.n	8010a1a <_dtoa_r+0xaa2>
 8010a12:	2b39      	cmp	r3, #57	@ 0x39
 8010a14:	d0ee      	beq.n	80109f4 <_dtoa_r+0xa7c>
 8010a16:	3301      	adds	r3, #1
 8010a18:	e7c9      	b.n	80109ae <_dtoa_r+0xa36>
 8010a1a:	9a00      	ldr	r2, [sp, #0]
 8010a1c:	9908      	ldr	r1, [sp, #32]
 8010a1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010a22:	428a      	cmp	r2, r1
 8010a24:	d028      	beq.n	8010a78 <_dtoa_r+0xb00>
 8010a26:	9902      	ldr	r1, [sp, #8]
 8010a28:	2300      	movs	r3, #0
 8010a2a:	220a      	movs	r2, #10
 8010a2c:	4648      	mov	r0, r9
 8010a2e:	f001 f9cd 	bl	8011dcc <__multadd>
 8010a32:	42af      	cmp	r7, r5
 8010a34:	9002      	str	r0, [sp, #8]
 8010a36:	f04f 0300 	mov.w	r3, #0
 8010a3a:	f04f 020a 	mov.w	r2, #10
 8010a3e:	4639      	mov	r1, r7
 8010a40:	4648      	mov	r0, r9
 8010a42:	d107      	bne.n	8010a54 <_dtoa_r+0xadc>
 8010a44:	f001 f9c2 	bl	8011dcc <__multadd>
 8010a48:	4607      	mov	r7, r0
 8010a4a:	4605      	mov	r5, r0
 8010a4c:	9b00      	ldr	r3, [sp, #0]
 8010a4e:	3301      	adds	r3, #1
 8010a50:	9300      	str	r3, [sp, #0]
 8010a52:	e777      	b.n	8010944 <_dtoa_r+0x9cc>
 8010a54:	f001 f9ba 	bl	8011dcc <__multadd>
 8010a58:	4629      	mov	r1, r5
 8010a5a:	4607      	mov	r7, r0
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	220a      	movs	r2, #10
 8010a60:	4648      	mov	r0, r9
 8010a62:	f001 f9b3 	bl	8011dcc <__multadd>
 8010a66:	4605      	mov	r5, r0
 8010a68:	e7f0      	b.n	8010a4c <_dtoa_r+0xad4>
 8010a6a:	f1bb 0f00 	cmp.w	fp, #0
 8010a6e:	bfcc      	ite	gt
 8010a70:	465e      	movgt	r6, fp
 8010a72:	2601      	movle	r6, #1
 8010a74:	4456      	add	r6, sl
 8010a76:	2700      	movs	r7, #0
 8010a78:	9902      	ldr	r1, [sp, #8]
 8010a7a:	9300      	str	r3, [sp, #0]
 8010a7c:	2201      	movs	r2, #1
 8010a7e:	4648      	mov	r0, r9
 8010a80:	f001 fb92 	bl	80121a8 <__lshift>
 8010a84:	4621      	mov	r1, r4
 8010a86:	9002      	str	r0, [sp, #8]
 8010a88:	f001 fbfa 	bl	8012280 <__mcmp>
 8010a8c:	2800      	cmp	r0, #0
 8010a8e:	dcb4      	bgt.n	80109fa <_dtoa_r+0xa82>
 8010a90:	d102      	bne.n	8010a98 <_dtoa_r+0xb20>
 8010a92:	9b00      	ldr	r3, [sp, #0]
 8010a94:	07db      	lsls	r3, r3, #31
 8010a96:	d4b0      	bmi.n	80109fa <_dtoa_r+0xa82>
 8010a98:	4633      	mov	r3, r6
 8010a9a:	461e      	mov	r6, r3
 8010a9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010aa0:	2a30      	cmp	r2, #48	@ 0x30
 8010aa2:	d0fa      	beq.n	8010a9a <_dtoa_r+0xb22>
 8010aa4:	e4b5      	b.n	8010412 <_dtoa_r+0x49a>
 8010aa6:	459a      	cmp	sl, r3
 8010aa8:	d1a8      	bne.n	80109fc <_dtoa_r+0xa84>
 8010aaa:	2331      	movs	r3, #49	@ 0x31
 8010aac:	f108 0801 	add.w	r8, r8, #1
 8010ab0:	f88a 3000 	strb.w	r3, [sl]
 8010ab4:	e4ad      	b.n	8010412 <_dtoa_r+0x49a>
 8010ab6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010ab8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8010b14 <_dtoa_r+0xb9c>
 8010abc:	b11b      	cbz	r3, 8010ac6 <_dtoa_r+0xb4e>
 8010abe:	f10a 0308 	add.w	r3, sl, #8
 8010ac2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010ac4:	6013      	str	r3, [r2, #0]
 8010ac6:	4650      	mov	r0, sl
 8010ac8:	b017      	add	sp, #92	@ 0x5c
 8010aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ace:	9b07      	ldr	r3, [sp, #28]
 8010ad0:	2b01      	cmp	r3, #1
 8010ad2:	f77f ae2e 	ble.w	8010732 <_dtoa_r+0x7ba>
 8010ad6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ad8:	9308      	str	r3, [sp, #32]
 8010ada:	2001      	movs	r0, #1
 8010adc:	e64d      	b.n	801077a <_dtoa_r+0x802>
 8010ade:	f1bb 0f00 	cmp.w	fp, #0
 8010ae2:	f77f aed9 	ble.w	8010898 <_dtoa_r+0x920>
 8010ae6:	4656      	mov	r6, sl
 8010ae8:	9802      	ldr	r0, [sp, #8]
 8010aea:	4621      	mov	r1, r4
 8010aec:	f7ff f9ba 	bl	800fe64 <quorem>
 8010af0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8010af4:	f806 3b01 	strb.w	r3, [r6], #1
 8010af8:	eba6 020a 	sub.w	r2, r6, sl
 8010afc:	4593      	cmp	fp, r2
 8010afe:	ddb4      	ble.n	8010a6a <_dtoa_r+0xaf2>
 8010b00:	9902      	ldr	r1, [sp, #8]
 8010b02:	2300      	movs	r3, #0
 8010b04:	220a      	movs	r2, #10
 8010b06:	4648      	mov	r0, r9
 8010b08:	f001 f960 	bl	8011dcc <__multadd>
 8010b0c:	9002      	str	r0, [sp, #8]
 8010b0e:	e7eb      	b.n	8010ae8 <_dtoa_r+0xb70>
 8010b10:	08015789 	.word	0x08015789
 8010b14:	0801570d 	.word	0x0801570d

08010b18 <_free_r>:
 8010b18:	b538      	push	{r3, r4, r5, lr}
 8010b1a:	4605      	mov	r5, r0
 8010b1c:	2900      	cmp	r1, #0
 8010b1e:	d041      	beq.n	8010ba4 <_free_r+0x8c>
 8010b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b24:	1f0c      	subs	r4, r1, #4
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	bfb8      	it	lt
 8010b2a:	18e4      	addlt	r4, r4, r3
 8010b2c:	f7fe f8ce 	bl	800eccc <__malloc_lock>
 8010b30:	4a1d      	ldr	r2, [pc, #116]	@ (8010ba8 <_free_r+0x90>)
 8010b32:	6813      	ldr	r3, [r2, #0]
 8010b34:	b933      	cbnz	r3, 8010b44 <_free_r+0x2c>
 8010b36:	6063      	str	r3, [r4, #4]
 8010b38:	6014      	str	r4, [r2, #0]
 8010b3a:	4628      	mov	r0, r5
 8010b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b40:	f7fe b8ca 	b.w	800ecd8 <__malloc_unlock>
 8010b44:	42a3      	cmp	r3, r4
 8010b46:	d908      	bls.n	8010b5a <_free_r+0x42>
 8010b48:	6820      	ldr	r0, [r4, #0]
 8010b4a:	1821      	adds	r1, r4, r0
 8010b4c:	428b      	cmp	r3, r1
 8010b4e:	bf01      	itttt	eq
 8010b50:	6819      	ldreq	r1, [r3, #0]
 8010b52:	685b      	ldreq	r3, [r3, #4]
 8010b54:	1809      	addeq	r1, r1, r0
 8010b56:	6021      	streq	r1, [r4, #0]
 8010b58:	e7ed      	b.n	8010b36 <_free_r+0x1e>
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	685b      	ldr	r3, [r3, #4]
 8010b5e:	b10b      	cbz	r3, 8010b64 <_free_r+0x4c>
 8010b60:	42a3      	cmp	r3, r4
 8010b62:	d9fa      	bls.n	8010b5a <_free_r+0x42>
 8010b64:	6811      	ldr	r1, [r2, #0]
 8010b66:	1850      	adds	r0, r2, r1
 8010b68:	42a0      	cmp	r0, r4
 8010b6a:	d10b      	bne.n	8010b84 <_free_r+0x6c>
 8010b6c:	6820      	ldr	r0, [r4, #0]
 8010b6e:	4401      	add	r1, r0
 8010b70:	1850      	adds	r0, r2, r1
 8010b72:	4283      	cmp	r3, r0
 8010b74:	6011      	str	r1, [r2, #0]
 8010b76:	d1e0      	bne.n	8010b3a <_free_r+0x22>
 8010b78:	6818      	ldr	r0, [r3, #0]
 8010b7a:	685b      	ldr	r3, [r3, #4]
 8010b7c:	6053      	str	r3, [r2, #4]
 8010b7e:	4408      	add	r0, r1
 8010b80:	6010      	str	r0, [r2, #0]
 8010b82:	e7da      	b.n	8010b3a <_free_r+0x22>
 8010b84:	d902      	bls.n	8010b8c <_free_r+0x74>
 8010b86:	230c      	movs	r3, #12
 8010b88:	602b      	str	r3, [r5, #0]
 8010b8a:	e7d6      	b.n	8010b3a <_free_r+0x22>
 8010b8c:	6820      	ldr	r0, [r4, #0]
 8010b8e:	1821      	adds	r1, r4, r0
 8010b90:	428b      	cmp	r3, r1
 8010b92:	bf04      	itt	eq
 8010b94:	6819      	ldreq	r1, [r3, #0]
 8010b96:	685b      	ldreq	r3, [r3, #4]
 8010b98:	6063      	str	r3, [r4, #4]
 8010b9a:	bf04      	itt	eq
 8010b9c:	1809      	addeq	r1, r1, r0
 8010b9e:	6021      	streq	r1, [r4, #0]
 8010ba0:	6054      	str	r4, [r2, #4]
 8010ba2:	e7ca      	b.n	8010b3a <_free_r+0x22>
 8010ba4:	bd38      	pop	{r3, r4, r5, pc}
 8010ba6:	bf00      	nop
 8010ba8:	20001860 	.word	0x20001860

08010bac <rshift>:
 8010bac:	6903      	ldr	r3, [r0, #16]
 8010bae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010bb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010bb6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010bba:	f100 0414 	add.w	r4, r0, #20
 8010bbe:	dd45      	ble.n	8010c4c <rshift+0xa0>
 8010bc0:	f011 011f 	ands.w	r1, r1, #31
 8010bc4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010bc8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010bcc:	d10c      	bne.n	8010be8 <rshift+0x3c>
 8010bce:	f100 0710 	add.w	r7, r0, #16
 8010bd2:	4629      	mov	r1, r5
 8010bd4:	42b1      	cmp	r1, r6
 8010bd6:	d334      	bcc.n	8010c42 <rshift+0x96>
 8010bd8:	1a9b      	subs	r3, r3, r2
 8010bda:	009b      	lsls	r3, r3, #2
 8010bdc:	1eea      	subs	r2, r5, #3
 8010bde:	4296      	cmp	r6, r2
 8010be0:	bf38      	it	cc
 8010be2:	2300      	movcc	r3, #0
 8010be4:	4423      	add	r3, r4
 8010be6:	e015      	b.n	8010c14 <rshift+0x68>
 8010be8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010bec:	f1c1 0820 	rsb	r8, r1, #32
 8010bf0:	40cf      	lsrs	r7, r1
 8010bf2:	f105 0e04 	add.w	lr, r5, #4
 8010bf6:	46a1      	mov	r9, r4
 8010bf8:	4576      	cmp	r6, lr
 8010bfa:	46f4      	mov	ip, lr
 8010bfc:	d815      	bhi.n	8010c2a <rshift+0x7e>
 8010bfe:	1a9a      	subs	r2, r3, r2
 8010c00:	0092      	lsls	r2, r2, #2
 8010c02:	3a04      	subs	r2, #4
 8010c04:	3501      	adds	r5, #1
 8010c06:	42ae      	cmp	r6, r5
 8010c08:	bf38      	it	cc
 8010c0a:	2200      	movcc	r2, #0
 8010c0c:	18a3      	adds	r3, r4, r2
 8010c0e:	50a7      	str	r7, [r4, r2]
 8010c10:	b107      	cbz	r7, 8010c14 <rshift+0x68>
 8010c12:	3304      	adds	r3, #4
 8010c14:	1b1a      	subs	r2, r3, r4
 8010c16:	42a3      	cmp	r3, r4
 8010c18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010c1c:	bf08      	it	eq
 8010c1e:	2300      	moveq	r3, #0
 8010c20:	6102      	str	r2, [r0, #16]
 8010c22:	bf08      	it	eq
 8010c24:	6143      	streq	r3, [r0, #20]
 8010c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c2a:	f8dc c000 	ldr.w	ip, [ip]
 8010c2e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010c32:	ea4c 0707 	orr.w	r7, ip, r7
 8010c36:	f849 7b04 	str.w	r7, [r9], #4
 8010c3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010c3e:	40cf      	lsrs	r7, r1
 8010c40:	e7da      	b.n	8010bf8 <rshift+0x4c>
 8010c42:	f851 cb04 	ldr.w	ip, [r1], #4
 8010c46:	f847 cf04 	str.w	ip, [r7, #4]!
 8010c4a:	e7c3      	b.n	8010bd4 <rshift+0x28>
 8010c4c:	4623      	mov	r3, r4
 8010c4e:	e7e1      	b.n	8010c14 <rshift+0x68>

08010c50 <__hexdig_fun>:
 8010c50:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010c54:	2b09      	cmp	r3, #9
 8010c56:	d802      	bhi.n	8010c5e <__hexdig_fun+0xe>
 8010c58:	3820      	subs	r0, #32
 8010c5a:	b2c0      	uxtb	r0, r0
 8010c5c:	4770      	bx	lr
 8010c5e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010c62:	2b05      	cmp	r3, #5
 8010c64:	d801      	bhi.n	8010c6a <__hexdig_fun+0x1a>
 8010c66:	3847      	subs	r0, #71	@ 0x47
 8010c68:	e7f7      	b.n	8010c5a <__hexdig_fun+0xa>
 8010c6a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010c6e:	2b05      	cmp	r3, #5
 8010c70:	d801      	bhi.n	8010c76 <__hexdig_fun+0x26>
 8010c72:	3827      	subs	r0, #39	@ 0x27
 8010c74:	e7f1      	b.n	8010c5a <__hexdig_fun+0xa>
 8010c76:	2000      	movs	r0, #0
 8010c78:	4770      	bx	lr
	...

08010c7c <__gethex>:
 8010c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c80:	b085      	sub	sp, #20
 8010c82:	468a      	mov	sl, r1
 8010c84:	9302      	str	r3, [sp, #8]
 8010c86:	680b      	ldr	r3, [r1, #0]
 8010c88:	9001      	str	r0, [sp, #4]
 8010c8a:	4690      	mov	r8, r2
 8010c8c:	1c9c      	adds	r4, r3, #2
 8010c8e:	46a1      	mov	r9, r4
 8010c90:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010c94:	2830      	cmp	r0, #48	@ 0x30
 8010c96:	d0fa      	beq.n	8010c8e <__gethex+0x12>
 8010c98:	eba9 0303 	sub.w	r3, r9, r3
 8010c9c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010ca0:	f7ff ffd6 	bl	8010c50 <__hexdig_fun>
 8010ca4:	4605      	mov	r5, r0
 8010ca6:	2800      	cmp	r0, #0
 8010ca8:	d168      	bne.n	8010d7c <__gethex+0x100>
 8010caa:	49a0      	ldr	r1, [pc, #640]	@ (8010f2c <__gethex+0x2b0>)
 8010cac:	2201      	movs	r2, #1
 8010cae:	4648      	mov	r0, r9
 8010cb0:	f7ff f80a 	bl	800fcc8 <strncmp>
 8010cb4:	4607      	mov	r7, r0
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	d167      	bne.n	8010d8a <__gethex+0x10e>
 8010cba:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010cbe:	4626      	mov	r6, r4
 8010cc0:	f7ff ffc6 	bl	8010c50 <__hexdig_fun>
 8010cc4:	2800      	cmp	r0, #0
 8010cc6:	d062      	beq.n	8010d8e <__gethex+0x112>
 8010cc8:	4623      	mov	r3, r4
 8010cca:	7818      	ldrb	r0, [r3, #0]
 8010ccc:	2830      	cmp	r0, #48	@ 0x30
 8010cce:	4699      	mov	r9, r3
 8010cd0:	f103 0301 	add.w	r3, r3, #1
 8010cd4:	d0f9      	beq.n	8010cca <__gethex+0x4e>
 8010cd6:	f7ff ffbb 	bl	8010c50 <__hexdig_fun>
 8010cda:	fab0 f580 	clz	r5, r0
 8010cde:	096d      	lsrs	r5, r5, #5
 8010ce0:	f04f 0b01 	mov.w	fp, #1
 8010ce4:	464a      	mov	r2, r9
 8010ce6:	4616      	mov	r6, r2
 8010ce8:	3201      	adds	r2, #1
 8010cea:	7830      	ldrb	r0, [r6, #0]
 8010cec:	f7ff ffb0 	bl	8010c50 <__hexdig_fun>
 8010cf0:	2800      	cmp	r0, #0
 8010cf2:	d1f8      	bne.n	8010ce6 <__gethex+0x6a>
 8010cf4:	498d      	ldr	r1, [pc, #564]	@ (8010f2c <__gethex+0x2b0>)
 8010cf6:	2201      	movs	r2, #1
 8010cf8:	4630      	mov	r0, r6
 8010cfa:	f7fe ffe5 	bl	800fcc8 <strncmp>
 8010cfe:	2800      	cmp	r0, #0
 8010d00:	d13f      	bne.n	8010d82 <__gethex+0x106>
 8010d02:	b944      	cbnz	r4, 8010d16 <__gethex+0x9a>
 8010d04:	1c74      	adds	r4, r6, #1
 8010d06:	4622      	mov	r2, r4
 8010d08:	4616      	mov	r6, r2
 8010d0a:	3201      	adds	r2, #1
 8010d0c:	7830      	ldrb	r0, [r6, #0]
 8010d0e:	f7ff ff9f 	bl	8010c50 <__hexdig_fun>
 8010d12:	2800      	cmp	r0, #0
 8010d14:	d1f8      	bne.n	8010d08 <__gethex+0x8c>
 8010d16:	1ba4      	subs	r4, r4, r6
 8010d18:	00a7      	lsls	r7, r4, #2
 8010d1a:	7833      	ldrb	r3, [r6, #0]
 8010d1c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010d20:	2b50      	cmp	r3, #80	@ 0x50
 8010d22:	d13e      	bne.n	8010da2 <__gethex+0x126>
 8010d24:	7873      	ldrb	r3, [r6, #1]
 8010d26:	2b2b      	cmp	r3, #43	@ 0x2b
 8010d28:	d033      	beq.n	8010d92 <__gethex+0x116>
 8010d2a:	2b2d      	cmp	r3, #45	@ 0x2d
 8010d2c:	d034      	beq.n	8010d98 <__gethex+0x11c>
 8010d2e:	1c71      	adds	r1, r6, #1
 8010d30:	2400      	movs	r4, #0
 8010d32:	7808      	ldrb	r0, [r1, #0]
 8010d34:	f7ff ff8c 	bl	8010c50 <__hexdig_fun>
 8010d38:	1e43      	subs	r3, r0, #1
 8010d3a:	b2db      	uxtb	r3, r3
 8010d3c:	2b18      	cmp	r3, #24
 8010d3e:	d830      	bhi.n	8010da2 <__gethex+0x126>
 8010d40:	f1a0 0210 	sub.w	r2, r0, #16
 8010d44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010d48:	f7ff ff82 	bl	8010c50 <__hexdig_fun>
 8010d4c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8010d50:	fa5f fc8c 	uxtb.w	ip, ip
 8010d54:	f1bc 0f18 	cmp.w	ip, #24
 8010d58:	f04f 030a 	mov.w	r3, #10
 8010d5c:	d91e      	bls.n	8010d9c <__gethex+0x120>
 8010d5e:	b104      	cbz	r4, 8010d62 <__gethex+0xe6>
 8010d60:	4252      	negs	r2, r2
 8010d62:	4417      	add	r7, r2
 8010d64:	f8ca 1000 	str.w	r1, [sl]
 8010d68:	b1ed      	cbz	r5, 8010da6 <__gethex+0x12a>
 8010d6a:	f1bb 0f00 	cmp.w	fp, #0
 8010d6e:	bf0c      	ite	eq
 8010d70:	2506      	moveq	r5, #6
 8010d72:	2500      	movne	r5, #0
 8010d74:	4628      	mov	r0, r5
 8010d76:	b005      	add	sp, #20
 8010d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d7c:	2500      	movs	r5, #0
 8010d7e:	462c      	mov	r4, r5
 8010d80:	e7b0      	b.n	8010ce4 <__gethex+0x68>
 8010d82:	2c00      	cmp	r4, #0
 8010d84:	d1c7      	bne.n	8010d16 <__gethex+0x9a>
 8010d86:	4627      	mov	r7, r4
 8010d88:	e7c7      	b.n	8010d1a <__gethex+0x9e>
 8010d8a:	464e      	mov	r6, r9
 8010d8c:	462f      	mov	r7, r5
 8010d8e:	2501      	movs	r5, #1
 8010d90:	e7c3      	b.n	8010d1a <__gethex+0x9e>
 8010d92:	2400      	movs	r4, #0
 8010d94:	1cb1      	adds	r1, r6, #2
 8010d96:	e7cc      	b.n	8010d32 <__gethex+0xb6>
 8010d98:	2401      	movs	r4, #1
 8010d9a:	e7fb      	b.n	8010d94 <__gethex+0x118>
 8010d9c:	fb03 0002 	mla	r0, r3, r2, r0
 8010da0:	e7ce      	b.n	8010d40 <__gethex+0xc4>
 8010da2:	4631      	mov	r1, r6
 8010da4:	e7de      	b.n	8010d64 <__gethex+0xe8>
 8010da6:	eba6 0309 	sub.w	r3, r6, r9
 8010daa:	3b01      	subs	r3, #1
 8010dac:	4629      	mov	r1, r5
 8010dae:	2b07      	cmp	r3, #7
 8010db0:	dc0a      	bgt.n	8010dc8 <__gethex+0x14c>
 8010db2:	9801      	ldr	r0, [sp, #4]
 8010db4:	f000 ffa8 	bl	8011d08 <_Balloc>
 8010db8:	4604      	mov	r4, r0
 8010dba:	b940      	cbnz	r0, 8010dce <__gethex+0x152>
 8010dbc:	4b5c      	ldr	r3, [pc, #368]	@ (8010f30 <__gethex+0x2b4>)
 8010dbe:	4602      	mov	r2, r0
 8010dc0:	21e4      	movs	r1, #228	@ 0xe4
 8010dc2:	485c      	ldr	r0, [pc, #368]	@ (8010f34 <__gethex+0x2b8>)
 8010dc4:	f001 fd4a 	bl	801285c <__assert_func>
 8010dc8:	3101      	adds	r1, #1
 8010dca:	105b      	asrs	r3, r3, #1
 8010dcc:	e7ef      	b.n	8010dae <__gethex+0x132>
 8010dce:	f100 0a14 	add.w	sl, r0, #20
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	4655      	mov	r5, sl
 8010dd6:	469b      	mov	fp, r3
 8010dd8:	45b1      	cmp	r9, r6
 8010dda:	d337      	bcc.n	8010e4c <__gethex+0x1d0>
 8010ddc:	f845 bb04 	str.w	fp, [r5], #4
 8010de0:	eba5 050a 	sub.w	r5, r5, sl
 8010de4:	10ad      	asrs	r5, r5, #2
 8010de6:	6125      	str	r5, [r4, #16]
 8010de8:	4658      	mov	r0, fp
 8010dea:	f001 f87f 	bl	8011eec <__hi0bits>
 8010dee:	016d      	lsls	r5, r5, #5
 8010df0:	f8d8 6000 	ldr.w	r6, [r8]
 8010df4:	1a2d      	subs	r5, r5, r0
 8010df6:	42b5      	cmp	r5, r6
 8010df8:	dd54      	ble.n	8010ea4 <__gethex+0x228>
 8010dfa:	1bad      	subs	r5, r5, r6
 8010dfc:	4629      	mov	r1, r5
 8010dfe:	4620      	mov	r0, r4
 8010e00:	f001 fc0b 	bl	801261a <__any_on>
 8010e04:	4681      	mov	r9, r0
 8010e06:	b178      	cbz	r0, 8010e28 <__gethex+0x1ac>
 8010e08:	1e6b      	subs	r3, r5, #1
 8010e0a:	1159      	asrs	r1, r3, #5
 8010e0c:	f003 021f 	and.w	r2, r3, #31
 8010e10:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010e14:	f04f 0901 	mov.w	r9, #1
 8010e18:	fa09 f202 	lsl.w	r2, r9, r2
 8010e1c:	420a      	tst	r2, r1
 8010e1e:	d003      	beq.n	8010e28 <__gethex+0x1ac>
 8010e20:	454b      	cmp	r3, r9
 8010e22:	dc36      	bgt.n	8010e92 <__gethex+0x216>
 8010e24:	f04f 0902 	mov.w	r9, #2
 8010e28:	4629      	mov	r1, r5
 8010e2a:	4620      	mov	r0, r4
 8010e2c:	f7ff febe 	bl	8010bac <rshift>
 8010e30:	442f      	add	r7, r5
 8010e32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010e36:	42bb      	cmp	r3, r7
 8010e38:	da42      	bge.n	8010ec0 <__gethex+0x244>
 8010e3a:	9801      	ldr	r0, [sp, #4]
 8010e3c:	4621      	mov	r1, r4
 8010e3e:	f000 ffa3 	bl	8011d88 <_Bfree>
 8010e42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e44:	2300      	movs	r3, #0
 8010e46:	6013      	str	r3, [r2, #0]
 8010e48:	25a3      	movs	r5, #163	@ 0xa3
 8010e4a:	e793      	b.n	8010d74 <__gethex+0xf8>
 8010e4c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010e50:	2a2e      	cmp	r2, #46	@ 0x2e
 8010e52:	d012      	beq.n	8010e7a <__gethex+0x1fe>
 8010e54:	2b20      	cmp	r3, #32
 8010e56:	d104      	bne.n	8010e62 <__gethex+0x1e6>
 8010e58:	f845 bb04 	str.w	fp, [r5], #4
 8010e5c:	f04f 0b00 	mov.w	fp, #0
 8010e60:	465b      	mov	r3, fp
 8010e62:	7830      	ldrb	r0, [r6, #0]
 8010e64:	9303      	str	r3, [sp, #12]
 8010e66:	f7ff fef3 	bl	8010c50 <__hexdig_fun>
 8010e6a:	9b03      	ldr	r3, [sp, #12]
 8010e6c:	f000 000f 	and.w	r0, r0, #15
 8010e70:	4098      	lsls	r0, r3
 8010e72:	ea4b 0b00 	orr.w	fp, fp, r0
 8010e76:	3304      	adds	r3, #4
 8010e78:	e7ae      	b.n	8010dd8 <__gethex+0x15c>
 8010e7a:	45b1      	cmp	r9, r6
 8010e7c:	d8ea      	bhi.n	8010e54 <__gethex+0x1d8>
 8010e7e:	492b      	ldr	r1, [pc, #172]	@ (8010f2c <__gethex+0x2b0>)
 8010e80:	9303      	str	r3, [sp, #12]
 8010e82:	2201      	movs	r2, #1
 8010e84:	4630      	mov	r0, r6
 8010e86:	f7fe ff1f 	bl	800fcc8 <strncmp>
 8010e8a:	9b03      	ldr	r3, [sp, #12]
 8010e8c:	2800      	cmp	r0, #0
 8010e8e:	d1e1      	bne.n	8010e54 <__gethex+0x1d8>
 8010e90:	e7a2      	b.n	8010dd8 <__gethex+0x15c>
 8010e92:	1ea9      	subs	r1, r5, #2
 8010e94:	4620      	mov	r0, r4
 8010e96:	f001 fbc0 	bl	801261a <__any_on>
 8010e9a:	2800      	cmp	r0, #0
 8010e9c:	d0c2      	beq.n	8010e24 <__gethex+0x1a8>
 8010e9e:	f04f 0903 	mov.w	r9, #3
 8010ea2:	e7c1      	b.n	8010e28 <__gethex+0x1ac>
 8010ea4:	da09      	bge.n	8010eba <__gethex+0x23e>
 8010ea6:	1b75      	subs	r5, r6, r5
 8010ea8:	4621      	mov	r1, r4
 8010eaa:	9801      	ldr	r0, [sp, #4]
 8010eac:	462a      	mov	r2, r5
 8010eae:	f001 f97b 	bl	80121a8 <__lshift>
 8010eb2:	1b7f      	subs	r7, r7, r5
 8010eb4:	4604      	mov	r4, r0
 8010eb6:	f100 0a14 	add.w	sl, r0, #20
 8010eba:	f04f 0900 	mov.w	r9, #0
 8010ebe:	e7b8      	b.n	8010e32 <__gethex+0x1b6>
 8010ec0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010ec4:	42bd      	cmp	r5, r7
 8010ec6:	dd6f      	ble.n	8010fa8 <__gethex+0x32c>
 8010ec8:	1bed      	subs	r5, r5, r7
 8010eca:	42ae      	cmp	r6, r5
 8010ecc:	dc34      	bgt.n	8010f38 <__gethex+0x2bc>
 8010ece:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010ed2:	2b02      	cmp	r3, #2
 8010ed4:	d022      	beq.n	8010f1c <__gethex+0x2a0>
 8010ed6:	2b03      	cmp	r3, #3
 8010ed8:	d024      	beq.n	8010f24 <__gethex+0x2a8>
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	d115      	bne.n	8010f0a <__gethex+0x28e>
 8010ede:	42ae      	cmp	r6, r5
 8010ee0:	d113      	bne.n	8010f0a <__gethex+0x28e>
 8010ee2:	2e01      	cmp	r6, #1
 8010ee4:	d10b      	bne.n	8010efe <__gethex+0x282>
 8010ee6:	9a02      	ldr	r2, [sp, #8]
 8010ee8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010eec:	6013      	str	r3, [r2, #0]
 8010eee:	2301      	movs	r3, #1
 8010ef0:	6123      	str	r3, [r4, #16]
 8010ef2:	f8ca 3000 	str.w	r3, [sl]
 8010ef6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ef8:	2562      	movs	r5, #98	@ 0x62
 8010efa:	601c      	str	r4, [r3, #0]
 8010efc:	e73a      	b.n	8010d74 <__gethex+0xf8>
 8010efe:	1e71      	subs	r1, r6, #1
 8010f00:	4620      	mov	r0, r4
 8010f02:	f001 fb8a 	bl	801261a <__any_on>
 8010f06:	2800      	cmp	r0, #0
 8010f08:	d1ed      	bne.n	8010ee6 <__gethex+0x26a>
 8010f0a:	9801      	ldr	r0, [sp, #4]
 8010f0c:	4621      	mov	r1, r4
 8010f0e:	f000 ff3b 	bl	8011d88 <_Bfree>
 8010f12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f14:	2300      	movs	r3, #0
 8010f16:	6013      	str	r3, [r2, #0]
 8010f18:	2550      	movs	r5, #80	@ 0x50
 8010f1a:	e72b      	b.n	8010d74 <__gethex+0xf8>
 8010f1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d1f3      	bne.n	8010f0a <__gethex+0x28e>
 8010f22:	e7e0      	b.n	8010ee6 <__gethex+0x26a>
 8010f24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d1dd      	bne.n	8010ee6 <__gethex+0x26a>
 8010f2a:	e7ee      	b.n	8010f0a <__gethex+0x28e>
 8010f2c:	08015703 	.word	0x08015703
 8010f30:	08015789 	.word	0x08015789
 8010f34:	0801579a 	.word	0x0801579a
 8010f38:	1e6f      	subs	r7, r5, #1
 8010f3a:	f1b9 0f00 	cmp.w	r9, #0
 8010f3e:	d130      	bne.n	8010fa2 <__gethex+0x326>
 8010f40:	b127      	cbz	r7, 8010f4c <__gethex+0x2d0>
 8010f42:	4639      	mov	r1, r7
 8010f44:	4620      	mov	r0, r4
 8010f46:	f001 fb68 	bl	801261a <__any_on>
 8010f4a:	4681      	mov	r9, r0
 8010f4c:	117a      	asrs	r2, r7, #5
 8010f4e:	2301      	movs	r3, #1
 8010f50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010f54:	f007 071f 	and.w	r7, r7, #31
 8010f58:	40bb      	lsls	r3, r7
 8010f5a:	4213      	tst	r3, r2
 8010f5c:	4629      	mov	r1, r5
 8010f5e:	4620      	mov	r0, r4
 8010f60:	bf18      	it	ne
 8010f62:	f049 0902 	orrne.w	r9, r9, #2
 8010f66:	f7ff fe21 	bl	8010bac <rshift>
 8010f6a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010f6e:	1b76      	subs	r6, r6, r5
 8010f70:	2502      	movs	r5, #2
 8010f72:	f1b9 0f00 	cmp.w	r9, #0
 8010f76:	d047      	beq.n	8011008 <__gethex+0x38c>
 8010f78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010f7c:	2b02      	cmp	r3, #2
 8010f7e:	d015      	beq.n	8010fac <__gethex+0x330>
 8010f80:	2b03      	cmp	r3, #3
 8010f82:	d017      	beq.n	8010fb4 <__gethex+0x338>
 8010f84:	2b01      	cmp	r3, #1
 8010f86:	d109      	bne.n	8010f9c <__gethex+0x320>
 8010f88:	f019 0f02 	tst.w	r9, #2
 8010f8c:	d006      	beq.n	8010f9c <__gethex+0x320>
 8010f8e:	f8da 3000 	ldr.w	r3, [sl]
 8010f92:	ea49 0903 	orr.w	r9, r9, r3
 8010f96:	f019 0f01 	tst.w	r9, #1
 8010f9a:	d10e      	bne.n	8010fba <__gethex+0x33e>
 8010f9c:	f045 0510 	orr.w	r5, r5, #16
 8010fa0:	e032      	b.n	8011008 <__gethex+0x38c>
 8010fa2:	f04f 0901 	mov.w	r9, #1
 8010fa6:	e7d1      	b.n	8010f4c <__gethex+0x2d0>
 8010fa8:	2501      	movs	r5, #1
 8010faa:	e7e2      	b.n	8010f72 <__gethex+0x2f6>
 8010fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010fae:	f1c3 0301 	rsb	r3, r3, #1
 8010fb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010fb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d0f0      	beq.n	8010f9c <__gethex+0x320>
 8010fba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010fbe:	f104 0314 	add.w	r3, r4, #20
 8010fc2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010fc6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010fca:	f04f 0c00 	mov.w	ip, #0
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fd4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8010fd8:	d01b      	beq.n	8011012 <__gethex+0x396>
 8010fda:	3201      	adds	r2, #1
 8010fdc:	6002      	str	r2, [r0, #0]
 8010fde:	2d02      	cmp	r5, #2
 8010fe0:	f104 0314 	add.w	r3, r4, #20
 8010fe4:	d13c      	bne.n	8011060 <__gethex+0x3e4>
 8010fe6:	f8d8 2000 	ldr.w	r2, [r8]
 8010fea:	3a01      	subs	r2, #1
 8010fec:	42b2      	cmp	r2, r6
 8010fee:	d109      	bne.n	8011004 <__gethex+0x388>
 8010ff0:	1171      	asrs	r1, r6, #5
 8010ff2:	2201      	movs	r2, #1
 8010ff4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010ff8:	f006 061f 	and.w	r6, r6, #31
 8010ffc:	fa02 f606 	lsl.w	r6, r2, r6
 8011000:	421e      	tst	r6, r3
 8011002:	d13a      	bne.n	801107a <__gethex+0x3fe>
 8011004:	f045 0520 	orr.w	r5, r5, #32
 8011008:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801100a:	601c      	str	r4, [r3, #0]
 801100c:	9b02      	ldr	r3, [sp, #8]
 801100e:	601f      	str	r7, [r3, #0]
 8011010:	e6b0      	b.n	8010d74 <__gethex+0xf8>
 8011012:	4299      	cmp	r1, r3
 8011014:	f843 cc04 	str.w	ip, [r3, #-4]
 8011018:	d8d9      	bhi.n	8010fce <__gethex+0x352>
 801101a:	68a3      	ldr	r3, [r4, #8]
 801101c:	459b      	cmp	fp, r3
 801101e:	db17      	blt.n	8011050 <__gethex+0x3d4>
 8011020:	6861      	ldr	r1, [r4, #4]
 8011022:	9801      	ldr	r0, [sp, #4]
 8011024:	3101      	adds	r1, #1
 8011026:	f000 fe6f 	bl	8011d08 <_Balloc>
 801102a:	4681      	mov	r9, r0
 801102c:	b918      	cbnz	r0, 8011036 <__gethex+0x3ba>
 801102e:	4b1a      	ldr	r3, [pc, #104]	@ (8011098 <__gethex+0x41c>)
 8011030:	4602      	mov	r2, r0
 8011032:	2184      	movs	r1, #132	@ 0x84
 8011034:	e6c5      	b.n	8010dc2 <__gethex+0x146>
 8011036:	6922      	ldr	r2, [r4, #16]
 8011038:	3202      	adds	r2, #2
 801103a:	f104 010c 	add.w	r1, r4, #12
 801103e:	0092      	lsls	r2, r2, #2
 8011040:	300c      	adds	r0, #12
 8011042:	f7fe fef1 	bl	800fe28 <memcpy>
 8011046:	4621      	mov	r1, r4
 8011048:	9801      	ldr	r0, [sp, #4]
 801104a:	f000 fe9d 	bl	8011d88 <_Bfree>
 801104e:	464c      	mov	r4, r9
 8011050:	6923      	ldr	r3, [r4, #16]
 8011052:	1c5a      	adds	r2, r3, #1
 8011054:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011058:	6122      	str	r2, [r4, #16]
 801105a:	2201      	movs	r2, #1
 801105c:	615a      	str	r2, [r3, #20]
 801105e:	e7be      	b.n	8010fde <__gethex+0x362>
 8011060:	6922      	ldr	r2, [r4, #16]
 8011062:	455a      	cmp	r2, fp
 8011064:	dd0b      	ble.n	801107e <__gethex+0x402>
 8011066:	2101      	movs	r1, #1
 8011068:	4620      	mov	r0, r4
 801106a:	f7ff fd9f 	bl	8010bac <rshift>
 801106e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011072:	3701      	adds	r7, #1
 8011074:	42bb      	cmp	r3, r7
 8011076:	f6ff aee0 	blt.w	8010e3a <__gethex+0x1be>
 801107a:	2501      	movs	r5, #1
 801107c:	e7c2      	b.n	8011004 <__gethex+0x388>
 801107e:	f016 061f 	ands.w	r6, r6, #31
 8011082:	d0fa      	beq.n	801107a <__gethex+0x3fe>
 8011084:	4453      	add	r3, sl
 8011086:	f1c6 0620 	rsb	r6, r6, #32
 801108a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801108e:	f000 ff2d 	bl	8011eec <__hi0bits>
 8011092:	42b0      	cmp	r0, r6
 8011094:	dbe7      	blt.n	8011066 <__gethex+0x3ea>
 8011096:	e7f0      	b.n	801107a <__gethex+0x3fe>
 8011098:	08015789 	.word	0x08015789

0801109c <L_shift>:
 801109c:	f1c2 0208 	rsb	r2, r2, #8
 80110a0:	0092      	lsls	r2, r2, #2
 80110a2:	b570      	push	{r4, r5, r6, lr}
 80110a4:	f1c2 0620 	rsb	r6, r2, #32
 80110a8:	6843      	ldr	r3, [r0, #4]
 80110aa:	6804      	ldr	r4, [r0, #0]
 80110ac:	fa03 f506 	lsl.w	r5, r3, r6
 80110b0:	432c      	orrs	r4, r5
 80110b2:	40d3      	lsrs	r3, r2
 80110b4:	6004      	str	r4, [r0, #0]
 80110b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80110ba:	4288      	cmp	r0, r1
 80110bc:	d3f4      	bcc.n	80110a8 <L_shift+0xc>
 80110be:	bd70      	pop	{r4, r5, r6, pc}

080110c0 <__match>:
 80110c0:	b530      	push	{r4, r5, lr}
 80110c2:	6803      	ldr	r3, [r0, #0]
 80110c4:	3301      	adds	r3, #1
 80110c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80110ca:	b914      	cbnz	r4, 80110d2 <__match+0x12>
 80110cc:	6003      	str	r3, [r0, #0]
 80110ce:	2001      	movs	r0, #1
 80110d0:	bd30      	pop	{r4, r5, pc}
 80110d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80110da:	2d19      	cmp	r5, #25
 80110dc:	bf98      	it	ls
 80110de:	3220      	addls	r2, #32
 80110e0:	42a2      	cmp	r2, r4
 80110e2:	d0f0      	beq.n	80110c6 <__match+0x6>
 80110e4:	2000      	movs	r0, #0
 80110e6:	e7f3      	b.n	80110d0 <__match+0x10>

080110e8 <__hexnan>:
 80110e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ec:	680b      	ldr	r3, [r1, #0]
 80110ee:	6801      	ldr	r1, [r0, #0]
 80110f0:	115e      	asrs	r6, r3, #5
 80110f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80110f6:	f013 031f 	ands.w	r3, r3, #31
 80110fa:	b087      	sub	sp, #28
 80110fc:	bf18      	it	ne
 80110fe:	3604      	addne	r6, #4
 8011100:	2500      	movs	r5, #0
 8011102:	1f37      	subs	r7, r6, #4
 8011104:	4682      	mov	sl, r0
 8011106:	4690      	mov	r8, r2
 8011108:	9301      	str	r3, [sp, #4]
 801110a:	f846 5c04 	str.w	r5, [r6, #-4]
 801110e:	46b9      	mov	r9, r7
 8011110:	463c      	mov	r4, r7
 8011112:	9502      	str	r5, [sp, #8]
 8011114:	46ab      	mov	fp, r5
 8011116:	784a      	ldrb	r2, [r1, #1]
 8011118:	1c4b      	adds	r3, r1, #1
 801111a:	9303      	str	r3, [sp, #12]
 801111c:	b342      	cbz	r2, 8011170 <__hexnan+0x88>
 801111e:	4610      	mov	r0, r2
 8011120:	9105      	str	r1, [sp, #20]
 8011122:	9204      	str	r2, [sp, #16]
 8011124:	f7ff fd94 	bl	8010c50 <__hexdig_fun>
 8011128:	2800      	cmp	r0, #0
 801112a:	d151      	bne.n	80111d0 <__hexnan+0xe8>
 801112c:	9a04      	ldr	r2, [sp, #16]
 801112e:	9905      	ldr	r1, [sp, #20]
 8011130:	2a20      	cmp	r2, #32
 8011132:	d818      	bhi.n	8011166 <__hexnan+0x7e>
 8011134:	9b02      	ldr	r3, [sp, #8]
 8011136:	459b      	cmp	fp, r3
 8011138:	dd13      	ble.n	8011162 <__hexnan+0x7a>
 801113a:	454c      	cmp	r4, r9
 801113c:	d206      	bcs.n	801114c <__hexnan+0x64>
 801113e:	2d07      	cmp	r5, #7
 8011140:	dc04      	bgt.n	801114c <__hexnan+0x64>
 8011142:	462a      	mov	r2, r5
 8011144:	4649      	mov	r1, r9
 8011146:	4620      	mov	r0, r4
 8011148:	f7ff ffa8 	bl	801109c <L_shift>
 801114c:	4544      	cmp	r4, r8
 801114e:	d952      	bls.n	80111f6 <__hexnan+0x10e>
 8011150:	2300      	movs	r3, #0
 8011152:	f1a4 0904 	sub.w	r9, r4, #4
 8011156:	f844 3c04 	str.w	r3, [r4, #-4]
 801115a:	f8cd b008 	str.w	fp, [sp, #8]
 801115e:	464c      	mov	r4, r9
 8011160:	461d      	mov	r5, r3
 8011162:	9903      	ldr	r1, [sp, #12]
 8011164:	e7d7      	b.n	8011116 <__hexnan+0x2e>
 8011166:	2a29      	cmp	r2, #41	@ 0x29
 8011168:	d157      	bne.n	801121a <__hexnan+0x132>
 801116a:	3102      	adds	r1, #2
 801116c:	f8ca 1000 	str.w	r1, [sl]
 8011170:	f1bb 0f00 	cmp.w	fp, #0
 8011174:	d051      	beq.n	801121a <__hexnan+0x132>
 8011176:	454c      	cmp	r4, r9
 8011178:	d206      	bcs.n	8011188 <__hexnan+0xa0>
 801117a:	2d07      	cmp	r5, #7
 801117c:	dc04      	bgt.n	8011188 <__hexnan+0xa0>
 801117e:	462a      	mov	r2, r5
 8011180:	4649      	mov	r1, r9
 8011182:	4620      	mov	r0, r4
 8011184:	f7ff ff8a 	bl	801109c <L_shift>
 8011188:	4544      	cmp	r4, r8
 801118a:	d936      	bls.n	80111fa <__hexnan+0x112>
 801118c:	f1a8 0204 	sub.w	r2, r8, #4
 8011190:	4623      	mov	r3, r4
 8011192:	f853 1b04 	ldr.w	r1, [r3], #4
 8011196:	f842 1f04 	str.w	r1, [r2, #4]!
 801119a:	429f      	cmp	r7, r3
 801119c:	d2f9      	bcs.n	8011192 <__hexnan+0xaa>
 801119e:	1b3b      	subs	r3, r7, r4
 80111a0:	f023 0303 	bic.w	r3, r3, #3
 80111a4:	3304      	adds	r3, #4
 80111a6:	3401      	adds	r4, #1
 80111a8:	3e03      	subs	r6, #3
 80111aa:	42b4      	cmp	r4, r6
 80111ac:	bf88      	it	hi
 80111ae:	2304      	movhi	r3, #4
 80111b0:	4443      	add	r3, r8
 80111b2:	2200      	movs	r2, #0
 80111b4:	f843 2b04 	str.w	r2, [r3], #4
 80111b8:	429f      	cmp	r7, r3
 80111ba:	d2fb      	bcs.n	80111b4 <__hexnan+0xcc>
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	b91b      	cbnz	r3, 80111c8 <__hexnan+0xe0>
 80111c0:	4547      	cmp	r7, r8
 80111c2:	d128      	bne.n	8011216 <__hexnan+0x12e>
 80111c4:	2301      	movs	r3, #1
 80111c6:	603b      	str	r3, [r7, #0]
 80111c8:	2005      	movs	r0, #5
 80111ca:	b007      	add	sp, #28
 80111cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111d0:	3501      	adds	r5, #1
 80111d2:	2d08      	cmp	r5, #8
 80111d4:	f10b 0b01 	add.w	fp, fp, #1
 80111d8:	dd06      	ble.n	80111e8 <__hexnan+0x100>
 80111da:	4544      	cmp	r4, r8
 80111dc:	d9c1      	bls.n	8011162 <__hexnan+0x7a>
 80111de:	2300      	movs	r3, #0
 80111e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80111e4:	2501      	movs	r5, #1
 80111e6:	3c04      	subs	r4, #4
 80111e8:	6822      	ldr	r2, [r4, #0]
 80111ea:	f000 000f 	and.w	r0, r0, #15
 80111ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80111f2:	6020      	str	r0, [r4, #0]
 80111f4:	e7b5      	b.n	8011162 <__hexnan+0x7a>
 80111f6:	2508      	movs	r5, #8
 80111f8:	e7b3      	b.n	8011162 <__hexnan+0x7a>
 80111fa:	9b01      	ldr	r3, [sp, #4]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d0dd      	beq.n	80111bc <__hexnan+0xd4>
 8011200:	f1c3 0320 	rsb	r3, r3, #32
 8011204:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011208:	40da      	lsrs	r2, r3
 801120a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801120e:	4013      	ands	r3, r2
 8011210:	f846 3c04 	str.w	r3, [r6, #-4]
 8011214:	e7d2      	b.n	80111bc <__hexnan+0xd4>
 8011216:	3f04      	subs	r7, #4
 8011218:	e7d0      	b.n	80111bc <__hexnan+0xd4>
 801121a:	2004      	movs	r0, #4
 801121c:	e7d5      	b.n	80111ca <__hexnan+0xe2>

0801121e <__ssputs_r>:
 801121e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011222:	688e      	ldr	r6, [r1, #8]
 8011224:	461f      	mov	r7, r3
 8011226:	42be      	cmp	r6, r7
 8011228:	680b      	ldr	r3, [r1, #0]
 801122a:	4682      	mov	sl, r0
 801122c:	460c      	mov	r4, r1
 801122e:	4690      	mov	r8, r2
 8011230:	d82d      	bhi.n	801128e <__ssputs_r+0x70>
 8011232:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011236:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801123a:	d026      	beq.n	801128a <__ssputs_r+0x6c>
 801123c:	6965      	ldr	r5, [r4, #20]
 801123e:	6909      	ldr	r1, [r1, #16]
 8011240:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011244:	eba3 0901 	sub.w	r9, r3, r1
 8011248:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801124c:	1c7b      	adds	r3, r7, #1
 801124e:	444b      	add	r3, r9
 8011250:	106d      	asrs	r5, r5, #1
 8011252:	429d      	cmp	r5, r3
 8011254:	bf38      	it	cc
 8011256:	461d      	movcc	r5, r3
 8011258:	0553      	lsls	r3, r2, #21
 801125a:	d527      	bpl.n	80112ac <__ssputs_r+0x8e>
 801125c:	4629      	mov	r1, r5
 801125e:	f7fd f91b 	bl	800e498 <_malloc_r>
 8011262:	4606      	mov	r6, r0
 8011264:	b360      	cbz	r0, 80112c0 <__ssputs_r+0xa2>
 8011266:	6921      	ldr	r1, [r4, #16]
 8011268:	464a      	mov	r2, r9
 801126a:	f7fe fddd 	bl	800fe28 <memcpy>
 801126e:	89a3      	ldrh	r3, [r4, #12]
 8011270:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011278:	81a3      	strh	r3, [r4, #12]
 801127a:	6126      	str	r6, [r4, #16]
 801127c:	6165      	str	r5, [r4, #20]
 801127e:	444e      	add	r6, r9
 8011280:	eba5 0509 	sub.w	r5, r5, r9
 8011284:	6026      	str	r6, [r4, #0]
 8011286:	60a5      	str	r5, [r4, #8]
 8011288:	463e      	mov	r6, r7
 801128a:	42be      	cmp	r6, r7
 801128c:	d900      	bls.n	8011290 <__ssputs_r+0x72>
 801128e:	463e      	mov	r6, r7
 8011290:	6820      	ldr	r0, [r4, #0]
 8011292:	4632      	mov	r2, r6
 8011294:	4641      	mov	r1, r8
 8011296:	f001 fac6 	bl	8012826 <memmove>
 801129a:	68a3      	ldr	r3, [r4, #8]
 801129c:	1b9b      	subs	r3, r3, r6
 801129e:	60a3      	str	r3, [r4, #8]
 80112a0:	6823      	ldr	r3, [r4, #0]
 80112a2:	4433      	add	r3, r6
 80112a4:	6023      	str	r3, [r4, #0]
 80112a6:	2000      	movs	r0, #0
 80112a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112ac:	462a      	mov	r2, r5
 80112ae:	f001 fa0f 	bl	80126d0 <_realloc_r>
 80112b2:	4606      	mov	r6, r0
 80112b4:	2800      	cmp	r0, #0
 80112b6:	d1e0      	bne.n	801127a <__ssputs_r+0x5c>
 80112b8:	6921      	ldr	r1, [r4, #16]
 80112ba:	4650      	mov	r0, sl
 80112bc:	f7ff fc2c 	bl	8010b18 <_free_r>
 80112c0:	230c      	movs	r3, #12
 80112c2:	f8ca 3000 	str.w	r3, [sl]
 80112c6:	89a3      	ldrh	r3, [r4, #12]
 80112c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112cc:	81a3      	strh	r3, [r4, #12]
 80112ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80112d2:	e7e9      	b.n	80112a8 <__ssputs_r+0x8a>

080112d4 <_svfiprintf_r>:
 80112d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112d8:	4698      	mov	r8, r3
 80112da:	898b      	ldrh	r3, [r1, #12]
 80112dc:	061b      	lsls	r3, r3, #24
 80112de:	b09d      	sub	sp, #116	@ 0x74
 80112e0:	4607      	mov	r7, r0
 80112e2:	460d      	mov	r5, r1
 80112e4:	4614      	mov	r4, r2
 80112e6:	d510      	bpl.n	801130a <_svfiprintf_r+0x36>
 80112e8:	690b      	ldr	r3, [r1, #16]
 80112ea:	b973      	cbnz	r3, 801130a <_svfiprintf_r+0x36>
 80112ec:	2140      	movs	r1, #64	@ 0x40
 80112ee:	f7fd f8d3 	bl	800e498 <_malloc_r>
 80112f2:	6028      	str	r0, [r5, #0]
 80112f4:	6128      	str	r0, [r5, #16]
 80112f6:	b930      	cbnz	r0, 8011306 <_svfiprintf_r+0x32>
 80112f8:	230c      	movs	r3, #12
 80112fa:	603b      	str	r3, [r7, #0]
 80112fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011300:	b01d      	add	sp, #116	@ 0x74
 8011302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011306:	2340      	movs	r3, #64	@ 0x40
 8011308:	616b      	str	r3, [r5, #20]
 801130a:	2300      	movs	r3, #0
 801130c:	9309      	str	r3, [sp, #36]	@ 0x24
 801130e:	2320      	movs	r3, #32
 8011310:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011314:	f8cd 800c 	str.w	r8, [sp, #12]
 8011318:	2330      	movs	r3, #48	@ 0x30
 801131a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80114b8 <_svfiprintf_r+0x1e4>
 801131e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011322:	f04f 0901 	mov.w	r9, #1
 8011326:	4623      	mov	r3, r4
 8011328:	469a      	mov	sl, r3
 801132a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801132e:	b10a      	cbz	r2, 8011334 <_svfiprintf_r+0x60>
 8011330:	2a25      	cmp	r2, #37	@ 0x25
 8011332:	d1f9      	bne.n	8011328 <_svfiprintf_r+0x54>
 8011334:	ebba 0b04 	subs.w	fp, sl, r4
 8011338:	d00b      	beq.n	8011352 <_svfiprintf_r+0x7e>
 801133a:	465b      	mov	r3, fp
 801133c:	4622      	mov	r2, r4
 801133e:	4629      	mov	r1, r5
 8011340:	4638      	mov	r0, r7
 8011342:	f7ff ff6c 	bl	801121e <__ssputs_r>
 8011346:	3001      	adds	r0, #1
 8011348:	f000 80a7 	beq.w	801149a <_svfiprintf_r+0x1c6>
 801134c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801134e:	445a      	add	r2, fp
 8011350:	9209      	str	r2, [sp, #36]	@ 0x24
 8011352:	f89a 3000 	ldrb.w	r3, [sl]
 8011356:	2b00      	cmp	r3, #0
 8011358:	f000 809f 	beq.w	801149a <_svfiprintf_r+0x1c6>
 801135c:	2300      	movs	r3, #0
 801135e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011362:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011366:	f10a 0a01 	add.w	sl, sl, #1
 801136a:	9304      	str	r3, [sp, #16]
 801136c:	9307      	str	r3, [sp, #28]
 801136e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011372:	931a      	str	r3, [sp, #104]	@ 0x68
 8011374:	4654      	mov	r4, sl
 8011376:	2205      	movs	r2, #5
 8011378:	f814 1b01 	ldrb.w	r1, [r4], #1
 801137c:	484e      	ldr	r0, [pc, #312]	@ (80114b8 <_svfiprintf_r+0x1e4>)
 801137e:	f7ee ff47 	bl	8000210 <memchr>
 8011382:	9a04      	ldr	r2, [sp, #16]
 8011384:	b9d8      	cbnz	r0, 80113be <_svfiprintf_r+0xea>
 8011386:	06d0      	lsls	r0, r2, #27
 8011388:	bf44      	itt	mi
 801138a:	2320      	movmi	r3, #32
 801138c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011390:	0711      	lsls	r1, r2, #28
 8011392:	bf44      	itt	mi
 8011394:	232b      	movmi	r3, #43	@ 0x2b
 8011396:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801139a:	f89a 3000 	ldrb.w	r3, [sl]
 801139e:	2b2a      	cmp	r3, #42	@ 0x2a
 80113a0:	d015      	beq.n	80113ce <_svfiprintf_r+0xfa>
 80113a2:	9a07      	ldr	r2, [sp, #28]
 80113a4:	4654      	mov	r4, sl
 80113a6:	2000      	movs	r0, #0
 80113a8:	f04f 0c0a 	mov.w	ip, #10
 80113ac:	4621      	mov	r1, r4
 80113ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113b2:	3b30      	subs	r3, #48	@ 0x30
 80113b4:	2b09      	cmp	r3, #9
 80113b6:	d94b      	bls.n	8011450 <_svfiprintf_r+0x17c>
 80113b8:	b1b0      	cbz	r0, 80113e8 <_svfiprintf_r+0x114>
 80113ba:	9207      	str	r2, [sp, #28]
 80113bc:	e014      	b.n	80113e8 <_svfiprintf_r+0x114>
 80113be:	eba0 0308 	sub.w	r3, r0, r8
 80113c2:	fa09 f303 	lsl.w	r3, r9, r3
 80113c6:	4313      	orrs	r3, r2
 80113c8:	9304      	str	r3, [sp, #16]
 80113ca:	46a2      	mov	sl, r4
 80113cc:	e7d2      	b.n	8011374 <_svfiprintf_r+0xa0>
 80113ce:	9b03      	ldr	r3, [sp, #12]
 80113d0:	1d19      	adds	r1, r3, #4
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	9103      	str	r1, [sp, #12]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	bfbb      	ittet	lt
 80113da:	425b      	neglt	r3, r3
 80113dc:	f042 0202 	orrlt.w	r2, r2, #2
 80113e0:	9307      	strge	r3, [sp, #28]
 80113e2:	9307      	strlt	r3, [sp, #28]
 80113e4:	bfb8      	it	lt
 80113e6:	9204      	strlt	r2, [sp, #16]
 80113e8:	7823      	ldrb	r3, [r4, #0]
 80113ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80113ec:	d10a      	bne.n	8011404 <_svfiprintf_r+0x130>
 80113ee:	7863      	ldrb	r3, [r4, #1]
 80113f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80113f2:	d132      	bne.n	801145a <_svfiprintf_r+0x186>
 80113f4:	9b03      	ldr	r3, [sp, #12]
 80113f6:	1d1a      	adds	r2, r3, #4
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	9203      	str	r2, [sp, #12]
 80113fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011400:	3402      	adds	r4, #2
 8011402:	9305      	str	r3, [sp, #20]
 8011404:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80114c8 <_svfiprintf_r+0x1f4>
 8011408:	7821      	ldrb	r1, [r4, #0]
 801140a:	2203      	movs	r2, #3
 801140c:	4650      	mov	r0, sl
 801140e:	f7ee feff 	bl	8000210 <memchr>
 8011412:	b138      	cbz	r0, 8011424 <_svfiprintf_r+0x150>
 8011414:	9b04      	ldr	r3, [sp, #16]
 8011416:	eba0 000a 	sub.w	r0, r0, sl
 801141a:	2240      	movs	r2, #64	@ 0x40
 801141c:	4082      	lsls	r2, r0
 801141e:	4313      	orrs	r3, r2
 8011420:	3401      	adds	r4, #1
 8011422:	9304      	str	r3, [sp, #16]
 8011424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011428:	4824      	ldr	r0, [pc, #144]	@ (80114bc <_svfiprintf_r+0x1e8>)
 801142a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801142e:	2206      	movs	r2, #6
 8011430:	f7ee feee 	bl	8000210 <memchr>
 8011434:	2800      	cmp	r0, #0
 8011436:	d036      	beq.n	80114a6 <_svfiprintf_r+0x1d2>
 8011438:	4b21      	ldr	r3, [pc, #132]	@ (80114c0 <_svfiprintf_r+0x1ec>)
 801143a:	bb1b      	cbnz	r3, 8011484 <_svfiprintf_r+0x1b0>
 801143c:	9b03      	ldr	r3, [sp, #12]
 801143e:	3307      	adds	r3, #7
 8011440:	f023 0307 	bic.w	r3, r3, #7
 8011444:	3308      	adds	r3, #8
 8011446:	9303      	str	r3, [sp, #12]
 8011448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801144a:	4433      	add	r3, r6
 801144c:	9309      	str	r3, [sp, #36]	@ 0x24
 801144e:	e76a      	b.n	8011326 <_svfiprintf_r+0x52>
 8011450:	fb0c 3202 	mla	r2, ip, r2, r3
 8011454:	460c      	mov	r4, r1
 8011456:	2001      	movs	r0, #1
 8011458:	e7a8      	b.n	80113ac <_svfiprintf_r+0xd8>
 801145a:	2300      	movs	r3, #0
 801145c:	3401      	adds	r4, #1
 801145e:	9305      	str	r3, [sp, #20]
 8011460:	4619      	mov	r1, r3
 8011462:	f04f 0c0a 	mov.w	ip, #10
 8011466:	4620      	mov	r0, r4
 8011468:	f810 2b01 	ldrb.w	r2, [r0], #1
 801146c:	3a30      	subs	r2, #48	@ 0x30
 801146e:	2a09      	cmp	r2, #9
 8011470:	d903      	bls.n	801147a <_svfiprintf_r+0x1a6>
 8011472:	2b00      	cmp	r3, #0
 8011474:	d0c6      	beq.n	8011404 <_svfiprintf_r+0x130>
 8011476:	9105      	str	r1, [sp, #20]
 8011478:	e7c4      	b.n	8011404 <_svfiprintf_r+0x130>
 801147a:	fb0c 2101 	mla	r1, ip, r1, r2
 801147e:	4604      	mov	r4, r0
 8011480:	2301      	movs	r3, #1
 8011482:	e7f0      	b.n	8011466 <_svfiprintf_r+0x192>
 8011484:	ab03      	add	r3, sp, #12
 8011486:	9300      	str	r3, [sp, #0]
 8011488:	462a      	mov	r2, r5
 801148a:	4b0e      	ldr	r3, [pc, #56]	@ (80114c4 <_svfiprintf_r+0x1f0>)
 801148c:	a904      	add	r1, sp, #16
 801148e:	4638      	mov	r0, r7
 8011490:	f7fc fdb6 	bl	800e000 <_printf_float>
 8011494:	1c42      	adds	r2, r0, #1
 8011496:	4606      	mov	r6, r0
 8011498:	d1d6      	bne.n	8011448 <_svfiprintf_r+0x174>
 801149a:	89ab      	ldrh	r3, [r5, #12]
 801149c:	065b      	lsls	r3, r3, #25
 801149e:	f53f af2d 	bmi.w	80112fc <_svfiprintf_r+0x28>
 80114a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80114a4:	e72c      	b.n	8011300 <_svfiprintf_r+0x2c>
 80114a6:	ab03      	add	r3, sp, #12
 80114a8:	9300      	str	r3, [sp, #0]
 80114aa:	462a      	mov	r2, r5
 80114ac:	4b05      	ldr	r3, [pc, #20]	@ (80114c4 <_svfiprintf_r+0x1f0>)
 80114ae:	a904      	add	r1, sp, #16
 80114b0:	4638      	mov	r0, r7
 80114b2:	f7fd f8df 	bl	800e674 <_printf_i>
 80114b6:	e7ed      	b.n	8011494 <_svfiprintf_r+0x1c0>
 80114b8:	080157fa 	.word	0x080157fa
 80114bc:	08015804 	.word	0x08015804
 80114c0:	0800e001 	.word	0x0800e001
 80114c4:	0801121f 	.word	0x0801121f
 80114c8:	08015800 	.word	0x08015800

080114cc <_sungetc_r>:
 80114cc:	b538      	push	{r3, r4, r5, lr}
 80114ce:	1c4b      	adds	r3, r1, #1
 80114d0:	4614      	mov	r4, r2
 80114d2:	d103      	bne.n	80114dc <_sungetc_r+0x10>
 80114d4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80114d8:	4628      	mov	r0, r5
 80114da:	bd38      	pop	{r3, r4, r5, pc}
 80114dc:	8993      	ldrh	r3, [r2, #12]
 80114de:	f023 0320 	bic.w	r3, r3, #32
 80114e2:	8193      	strh	r3, [r2, #12]
 80114e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80114e6:	6852      	ldr	r2, [r2, #4]
 80114e8:	b2cd      	uxtb	r5, r1
 80114ea:	b18b      	cbz	r3, 8011510 <_sungetc_r+0x44>
 80114ec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80114ee:	4293      	cmp	r3, r2
 80114f0:	dd08      	ble.n	8011504 <_sungetc_r+0x38>
 80114f2:	6823      	ldr	r3, [r4, #0]
 80114f4:	1e5a      	subs	r2, r3, #1
 80114f6:	6022      	str	r2, [r4, #0]
 80114f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80114fc:	6863      	ldr	r3, [r4, #4]
 80114fe:	3301      	adds	r3, #1
 8011500:	6063      	str	r3, [r4, #4]
 8011502:	e7e9      	b.n	80114d8 <_sungetc_r+0xc>
 8011504:	4621      	mov	r1, r4
 8011506:	f001 f8a9 	bl	801265c <__submore>
 801150a:	2800      	cmp	r0, #0
 801150c:	d0f1      	beq.n	80114f2 <_sungetc_r+0x26>
 801150e:	e7e1      	b.n	80114d4 <_sungetc_r+0x8>
 8011510:	6921      	ldr	r1, [r4, #16]
 8011512:	6823      	ldr	r3, [r4, #0]
 8011514:	b151      	cbz	r1, 801152c <_sungetc_r+0x60>
 8011516:	4299      	cmp	r1, r3
 8011518:	d208      	bcs.n	801152c <_sungetc_r+0x60>
 801151a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801151e:	42a9      	cmp	r1, r5
 8011520:	d104      	bne.n	801152c <_sungetc_r+0x60>
 8011522:	3b01      	subs	r3, #1
 8011524:	3201      	adds	r2, #1
 8011526:	6023      	str	r3, [r4, #0]
 8011528:	6062      	str	r2, [r4, #4]
 801152a:	e7d5      	b.n	80114d8 <_sungetc_r+0xc>
 801152c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8011530:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011534:	6363      	str	r3, [r4, #52]	@ 0x34
 8011536:	2303      	movs	r3, #3
 8011538:	63a3      	str	r3, [r4, #56]	@ 0x38
 801153a:	4623      	mov	r3, r4
 801153c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011540:	6023      	str	r3, [r4, #0]
 8011542:	2301      	movs	r3, #1
 8011544:	e7dc      	b.n	8011500 <_sungetc_r+0x34>

08011546 <__ssrefill_r>:
 8011546:	b510      	push	{r4, lr}
 8011548:	460c      	mov	r4, r1
 801154a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801154c:	b169      	cbz	r1, 801156a <__ssrefill_r+0x24>
 801154e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011552:	4299      	cmp	r1, r3
 8011554:	d001      	beq.n	801155a <__ssrefill_r+0x14>
 8011556:	f7ff fadf 	bl	8010b18 <_free_r>
 801155a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801155c:	6063      	str	r3, [r4, #4]
 801155e:	2000      	movs	r0, #0
 8011560:	6360      	str	r0, [r4, #52]	@ 0x34
 8011562:	b113      	cbz	r3, 801156a <__ssrefill_r+0x24>
 8011564:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011566:	6023      	str	r3, [r4, #0]
 8011568:	bd10      	pop	{r4, pc}
 801156a:	6923      	ldr	r3, [r4, #16]
 801156c:	6023      	str	r3, [r4, #0]
 801156e:	2300      	movs	r3, #0
 8011570:	6063      	str	r3, [r4, #4]
 8011572:	89a3      	ldrh	r3, [r4, #12]
 8011574:	f043 0320 	orr.w	r3, r3, #32
 8011578:	81a3      	strh	r3, [r4, #12]
 801157a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801157e:	e7f3      	b.n	8011568 <__ssrefill_r+0x22>

08011580 <__ssvfiscanf_r>:
 8011580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011584:	460c      	mov	r4, r1
 8011586:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801158a:	2100      	movs	r1, #0
 801158c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011590:	49a6      	ldr	r1, [pc, #664]	@ (801182c <__ssvfiscanf_r+0x2ac>)
 8011592:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011594:	f10d 0804 	add.w	r8, sp, #4
 8011598:	49a5      	ldr	r1, [pc, #660]	@ (8011830 <__ssvfiscanf_r+0x2b0>)
 801159a:	4fa6      	ldr	r7, [pc, #664]	@ (8011834 <__ssvfiscanf_r+0x2b4>)
 801159c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80115a0:	4606      	mov	r6, r0
 80115a2:	91a1      	str	r1, [sp, #644]	@ 0x284
 80115a4:	9300      	str	r3, [sp, #0]
 80115a6:	f892 9000 	ldrb.w	r9, [r2]
 80115aa:	f1b9 0f00 	cmp.w	r9, #0
 80115ae:	f000 8158 	beq.w	8011862 <__ssvfiscanf_r+0x2e2>
 80115b2:	f817 3009 	ldrb.w	r3, [r7, r9]
 80115b6:	f013 0308 	ands.w	r3, r3, #8
 80115ba:	f102 0501 	add.w	r5, r2, #1
 80115be:	d019      	beq.n	80115f4 <__ssvfiscanf_r+0x74>
 80115c0:	6863      	ldr	r3, [r4, #4]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	dd0f      	ble.n	80115e6 <__ssvfiscanf_r+0x66>
 80115c6:	6823      	ldr	r3, [r4, #0]
 80115c8:	781a      	ldrb	r2, [r3, #0]
 80115ca:	5cba      	ldrb	r2, [r7, r2]
 80115cc:	0712      	lsls	r2, r2, #28
 80115ce:	d401      	bmi.n	80115d4 <__ssvfiscanf_r+0x54>
 80115d0:	462a      	mov	r2, r5
 80115d2:	e7e8      	b.n	80115a6 <__ssvfiscanf_r+0x26>
 80115d4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80115d6:	3201      	adds	r2, #1
 80115d8:	9245      	str	r2, [sp, #276]	@ 0x114
 80115da:	6862      	ldr	r2, [r4, #4]
 80115dc:	3301      	adds	r3, #1
 80115de:	3a01      	subs	r2, #1
 80115e0:	6062      	str	r2, [r4, #4]
 80115e2:	6023      	str	r3, [r4, #0]
 80115e4:	e7ec      	b.n	80115c0 <__ssvfiscanf_r+0x40>
 80115e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80115e8:	4621      	mov	r1, r4
 80115ea:	4630      	mov	r0, r6
 80115ec:	4798      	blx	r3
 80115ee:	2800      	cmp	r0, #0
 80115f0:	d0e9      	beq.n	80115c6 <__ssvfiscanf_r+0x46>
 80115f2:	e7ed      	b.n	80115d0 <__ssvfiscanf_r+0x50>
 80115f4:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80115f8:	f040 8085 	bne.w	8011706 <__ssvfiscanf_r+0x186>
 80115fc:	9341      	str	r3, [sp, #260]	@ 0x104
 80115fe:	9343      	str	r3, [sp, #268]	@ 0x10c
 8011600:	7853      	ldrb	r3, [r2, #1]
 8011602:	2b2a      	cmp	r3, #42	@ 0x2a
 8011604:	bf02      	ittt	eq
 8011606:	2310      	moveq	r3, #16
 8011608:	1c95      	addeq	r5, r2, #2
 801160a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801160c:	220a      	movs	r2, #10
 801160e:	46aa      	mov	sl, r5
 8011610:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8011614:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011618:	2b09      	cmp	r3, #9
 801161a:	d91e      	bls.n	801165a <__ssvfiscanf_r+0xda>
 801161c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8011838 <__ssvfiscanf_r+0x2b8>
 8011620:	2203      	movs	r2, #3
 8011622:	4658      	mov	r0, fp
 8011624:	f7ee fdf4 	bl	8000210 <memchr>
 8011628:	b138      	cbz	r0, 801163a <__ssvfiscanf_r+0xba>
 801162a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801162c:	eba0 000b 	sub.w	r0, r0, fp
 8011630:	2301      	movs	r3, #1
 8011632:	4083      	lsls	r3, r0
 8011634:	4313      	orrs	r3, r2
 8011636:	9341      	str	r3, [sp, #260]	@ 0x104
 8011638:	4655      	mov	r5, sl
 801163a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801163e:	2b78      	cmp	r3, #120	@ 0x78
 8011640:	d806      	bhi.n	8011650 <__ssvfiscanf_r+0xd0>
 8011642:	2b57      	cmp	r3, #87	@ 0x57
 8011644:	d810      	bhi.n	8011668 <__ssvfiscanf_r+0xe8>
 8011646:	2b25      	cmp	r3, #37	@ 0x25
 8011648:	d05d      	beq.n	8011706 <__ssvfiscanf_r+0x186>
 801164a:	d857      	bhi.n	80116fc <__ssvfiscanf_r+0x17c>
 801164c:	2b00      	cmp	r3, #0
 801164e:	d075      	beq.n	801173c <__ssvfiscanf_r+0x1bc>
 8011650:	2303      	movs	r3, #3
 8011652:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011654:	230a      	movs	r3, #10
 8011656:	9342      	str	r3, [sp, #264]	@ 0x108
 8011658:	e088      	b.n	801176c <__ssvfiscanf_r+0x1ec>
 801165a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801165c:	fb02 1103 	mla	r1, r2, r3, r1
 8011660:	3930      	subs	r1, #48	@ 0x30
 8011662:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011664:	4655      	mov	r5, sl
 8011666:	e7d2      	b.n	801160e <__ssvfiscanf_r+0x8e>
 8011668:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801166c:	2a20      	cmp	r2, #32
 801166e:	d8ef      	bhi.n	8011650 <__ssvfiscanf_r+0xd0>
 8011670:	a101      	add	r1, pc, #4	@ (adr r1, 8011678 <__ssvfiscanf_r+0xf8>)
 8011672:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011676:	bf00      	nop
 8011678:	0801174b 	.word	0x0801174b
 801167c:	08011651 	.word	0x08011651
 8011680:	08011651 	.word	0x08011651
 8011684:	080117a5 	.word	0x080117a5
 8011688:	08011651 	.word	0x08011651
 801168c:	08011651 	.word	0x08011651
 8011690:	08011651 	.word	0x08011651
 8011694:	08011651 	.word	0x08011651
 8011698:	08011651 	.word	0x08011651
 801169c:	08011651 	.word	0x08011651
 80116a0:	08011651 	.word	0x08011651
 80116a4:	080117bb 	.word	0x080117bb
 80116a8:	080117a1 	.word	0x080117a1
 80116ac:	08011703 	.word	0x08011703
 80116b0:	08011703 	.word	0x08011703
 80116b4:	08011703 	.word	0x08011703
 80116b8:	08011651 	.word	0x08011651
 80116bc:	0801175d 	.word	0x0801175d
 80116c0:	08011651 	.word	0x08011651
 80116c4:	08011651 	.word	0x08011651
 80116c8:	08011651 	.word	0x08011651
 80116cc:	08011651 	.word	0x08011651
 80116d0:	080117cb 	.word	0x080117cb
 80116d4:	08011765 	.word	0x08011765
 80116d8:	08011743 	.word	0x08011743
 80116dc:	08011651 	.word	0x08011651
 80116e0:	08011651 	.word	0x08011651
 80116e4:	080117c7 	.word	0x080117c7
 80116e8:	08011651 	.word	0x08011651
 80116ec:	080117a1 	.word	0x080117a1
 80116f0:	08011651 	.word	0x08011651
 80116f4:	08011651 	.word	0x08011651
 80116f8:	0801174b 	.word	0x0801174b
 80116fc:	3b45      	subs	r3, #69	@ 0x45
 80116fe:	2b02      	cmp	r3, #2
 8011700:	d8a6      	bhi.n	8011650 <__ssvfiscanf_r+0xd0>
 8011702:	2305      	movs	r3, #5
 8011704:	e031      	b.n	801176a <__ssvfiscanf_r+0x1ea>
 8011706:	6863      	ldr	r3, [r4, #4]
 8011708:	2b00      	cmp	r3, #0
 801170a:	dd0d      	ble.n	8011728 <__ssvfiscanf_r+0x1a8>
 801170c:	6823      	ldr	r3, [r4, #0]
 801170e:	781a      	ldrb	r2, [r3, #0]
 8011710:	454a      	cmp	r2, r9
 8011712:	f040 80a6 	bne.w	8011862 <__ssvfiscanf_r+0x2e2>
 8011716:	3301      	adds	r3, #1
 8011718:	6862      	ldr	r2, [r4, #4]
 801171a:	6023      	str	r3, [r4, #0]
 801171c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801171e:	3a01      	subs	r2, #1
 8011720:	3301      	adds	r3, #1
 8011722:	6062      	str	r2, [r4, #4]
 8011724:	9345      	str	r3, [sp, #276]	@ 0x114
 8011726:	e753      	b.n	80115d0 <__ssvfiscanf_r+0x50>
 8011728:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801172a:	4621      	mov	r1, r4
 801172c:	4630      	mov	r0, r6
 801172e:	4798      	blx	r3
 8011730:	2800      	cmp	r0, #0
 8011732:	d0eb      	beq.n	801170c <__ssvfiscanf_r+0x18c>
 8011734:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011736:	2800      	cmp	r0, #0
 8011738:	f040 808b 	bne.w	8011852 <__ssvfiscanf_r+0x2d2>
 801173c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011740:	e08b      	b.n	801185a <__ssvfiscanf_r+0x2da>
 8011742:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011744:	f042 0220 	orr.w	r2, r2, #32
 8011748:	9241      	str	r2, [sp, #260]	@ 0x104
 801174a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801174c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011750:	9241      	str	r2, [sp, #260]	@ 0x104
 8011752:	2210      	movs	r2, #16
 8011754:	2b6e      	cmp	r3, #110	@ 0x6e
 8011756:	9242      	str	r2, [sp, #264]	@ 0x108
 8011758:	d902      	bls.n	8011760 <__ssvfiscanf_r+0x1e0>
 801175a:	e005      	b.n	8011768 <__ssvfiscanf_r+0x1e8>
 801175c:	2300      	movs	r3, #0
 801175e:	9342      	str	r3, [sp, #264]	@ 0x108
 8011760:	2303      	movs	r3, #3
 8011762:	e002      	b.n	801176a <__ssvfiscanf_r+0x1ea>
 8011764:	2308      	movs	r3, #8
 8011766:	9342      	str	r3, [sp, #264]	@ 0x108
 8011768:	2304      	movs	r3, #4
 801176a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801176c:	6863      	ldr	r3, [r4, #4]
 801176e:	2b00      	cmp	r3, #0
 8011770:	dd39      	ble.n	80117e6 <__ssvfiscanf_r+0x266>
 8011772:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011774:	0659      	lsls	r1, r3, #25
 8011776:	d404      	bmi.n	8011782 <__ssvfiscanf_r+0x202>
 8011778:	6823      	ldr	r3, [r4, #0]
 801177a:	781a      	ldrb	r2, [r3, #0]
 801177c:	5cba      	ldrb	r2, [r7, r2]
 801177e:	0712      	lsls	r2, r2, #28
 8011780:	d438      	bmi.n	80117f4 <__ssvfiscanf_r+0x274>
 8011782:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011784:	2b02      	cmp	r3, #2
 8011786:	dc47      	bgt.n	8011818 <__ssvfiscanf_r+0x298>
 8011788:	466b      	mov	r3, sp
 801178a:	4622      	mov	r2, r4
 801178c:	a941      	add	r1, sp, #260	@ 0x104
 801178e:	4630      	mov	r0, r6
 8011790:	f000 f886 	bl	80118a0 <_scanf_chars>
 8011794:	2801      	cmp	r0, #1
 8011796:	d064      	beq.n	8011862 <__ssvfiscanf_r+0x2e2>
 8011798:	2802      	cmp	r0, #2
 801179a:	f47f af19 	bne.w	80115d0 <__ssvfiscanf_r+0x50>
 801179e:	e7c9      	b.n	8011734 <__ssvfiscanf_r+0x1b4>
 80117a0:	220a      	movs	r2, #10
 80117a2:	e7d7      	b.n	8011754 <__ssvfiscanf_r+0x1d4>
 80117a4:	4629      	mov	r1, r5
 80117a6:	4640      	mov	r0, r8
 80117a8:	f000 f9c8 	bl	8011b3c <__sccl>
 80117ac:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80117ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117b2:	9341      	str	r3, [sp, #260]	@ 0x104
 80117b4:	4605      	mov	r5, r0
 80117b6:	2301      	movs	r3, #1
 80117b8:	e7d7      	b.n	801176a <__ssvfiscanf_r+0x1ea>
 80117ba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80117bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117c0:	9341      	str	r3, [sp, #260]	@ 0x104
 80117c2:	2300      	movs	r3, #0
 80117c4:	e7d1      	b.n	801176a <__ssvfiscanf_r+0x1ea>
 80117c6:	2302      	movs	r3, #2
 80117c8:	e7cf      	b.n	801176a <__ssvfiscanf_r+0x1ea>
 80117ca:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80117cc:	06c3      	lsls	r3, r0, #27
 80117ce:	f53f aeff 	bmi.w	80115d0 <__ssvfiscanf_r+0x50>
 80117d2:	9b00      	ldr	r3, [sp, #0]
 80117d4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80117d6:	1d19      	adds	r1, r3, #4
 80117d8:	9100      	str	r1, [sp, #0]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	07c0      	lsls	r0, r0, #31
 80117de:	bf4c      	ite	mi
 80117e0:	801a      	strhmi	r2, [r3, #0]
 80117e2:	601a      	strpl	r2, [r3, #0]
 80117e4:	e6f4      	b.n	80115d0 <__ssvfiscanf_r+0x50>
 80117e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80117e8:	4621      	mov	r1, r4
 80117ea:	4630      	mov	r0, r6
 80117ec:	4798      	blx	r3
 80117ee:	2800      	cmp	r0, #0
 80117f0:	d0bf      	beq.n	8011772 <__ssvfiscanf_r+0x1f2>
 80117f2:	e79f      	b.n	8011734 <__ssvfiscanf_r+0x1b4>
 80117f4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80117f6:	3201      	adds	r2, #1
 80117f8:	9245      	str	r2, [sp, #276]	@ 0x114
 80117fa:	6862      	ldr	r2, [r4, #4]
 80117fc:	3a01      	subs	r2, #1
 80117fe:	2a00      	cmp	r2, #0
 8011800:	6062      	str	r2, [r4, #4]
 8011802:	dd02      	ble.n	801180a <__ssvfiscanf_r+0x28a>
 8011804:	3301      	adds	r3, #1
 8011806:	6023      	str	r3, [r4, #0]
 8011808:	e7b6      	b.n	8011778 <__ssvfiscanf_r+0x1f8>
 801180a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801180c:	4621      	mov	r1, r4
 801180e:	4630      	mov	r0, r6
 8011810:	4798      	blx	r3
 8011812:	2800      	cmp	r0, #0
 8011814:	d0b0      	beq.n	8011778 <__ssvfiscanf_r+0x1f8>
 8011816:	e78d      	b.n	8011734 <__ssvfiscanf_r+0x1b4>
 8011818:	2b04      	cmp	r3, #4
 801181a:	dc0f      	bgt.n	801183c <__ssvfiscanf_r+0x2bc>
 801181c:	466b      	mov	r3, sp
 801181e:	4622      	mov	r2, r4
 8011820:	a941      	add	r1, sp, #260	@ 0x104
 8011822:	4630      	mov	r0, r6
 8011824:	f000 f896 	bl	8011954 <_scanf_i>
 8011828:	e7b4      	b.n	8011794 <__ssvfiscanf_r+0x214>
 801182a:	bf00      	nop
 801182c:	080114cd 	.word	0x080114cd
 8011830:	08011547 	.word	0x08011547
 8011834:	08015911 	.word	0x08015911
 8011838:	08015800 	.word	0x08015800
 801183c:	4b0a      	ldr	r3, [pc, #40]	@ (8011868 <__ssvfiscanf_r+0x2e8>)
 801183e:	2b00      	cmp	r3, #0
 8011840:	f43f aec6 	beq.w	80115d0 <__ssvfiscanf_r+0x50>
 8011844:	466b      	mov	r3, sp
 8011846:	4622      	mov	r2, r4
 8011848:	a941      	add	r1, sp, #260	@ 0x104
 801184a:	4630      	mov	r0, r6
 801184c:	f7fd f830 	bl	800e8b0 <_scanf_float>
 8011850:	e7a0      	b.n	8011794 <__ssvfiscanf_r+0x214>
 8011852:	89a3      	ldrh	r3, [r4, #12]
 8011854:	065b      	lsls	r3, r3, #25
 8011856:	f53f af71 	bmi.w	801173c <__ssvfiscanf_r+0x1bc>
 801185a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801185e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011862:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011864:	e7f9      	b.n	801185a <__ssvfiscanf_r+0x2da>
 8011866:	bf00      	nop
 8011868:	0800e8b1 	.word	0x0800e8b1

0801186c <malloc>:
 801186c:	4b02      	ldr	r3, [pc, #8]	@ (8011878 <malloc+0xc>)
 801186e:	4601      	mov	r1, r0
 8011870:	6818      	ldr	r0, [r3, #0]
 8011872:	f7fc be11 	b.w	800e498 <_malloc_r>
 8011876:	bf00      	nop
 8011878:	200001c4 	.word	0x200001c4

0801187c <__ascii_mbtowc>:
 801187c:	b082      	sub	sp, #8
 801187e:	b901      	cbnz	r1, 8011882 <__ascii_mbtowc+0x6>
 8011880:	a901      	add	r1, sp, #4
 8011882:	b142      	cbz	r2, 8011896 <__ascii_mbtowc+0x1a>
 8011884:	b14b      	cbz	r3, 801189a <__ascii_mbtowc+0x1e>
 8011886:	7813      	ldrb	r3, [r2, #0]
 8011888:	600b      	str	r3, [r1, #0]
 801188a:	7812      	ldrb	r2, [r2, #0]
 801188c:	1e10      	subs	r0, r2, #0
 801188e:	bf18      	it	ne
 8011890:	2001      	movne	r0, #1
 8011892:	b002      	add	sp, #8
 8011894:	4770      	bx	lr
 8011896:	4610      	mov	r0, r2
 8011898:	e7fb      	b.n	8011892 <__ascii_mbtowc+0x16>
 801189a:	f06f 0001 	mvn.w	r0, #1
 801189e:	e7f8      	b.n	8011892 <__ascii_mbtowc+0x16>

080118a0 <_scanf_chars>:
 80118a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118a4:	4615      	mov	r5, r2
 80118a6:	688a      	ldr	r2, [r1, #8]
 80118a8:	4680      	mov	r8, r0
 80118aa:	460c      	mov	r4, r1
 80118ac:	b932      	cbnz	r2, 80118bc <_scanf_chars+0x1c>
 80118ae:	698a      	ldr	r2, [r1, #24]
 80118b0:	2a00      	cmp	r2, #0
 80118b2:	bf14      	ite	ne
 80118b4:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 80118b8:	2201      	moveq	r2, #1
 80118ba:	608a      	str	r2, [r1, #8]
 80118bc:	6822      	ldr	r2, [r4, #0]
 80118be:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8011950 <_scanf_chars+0xb0>
 80118c2:	06d1      	lsls	r1, r2, #27
 80118c4:	bf5f      	itttt	pl
 80118c6:	681a      	ldrpl	r2, [r3, #0]
 80118c8:	1d11      	addpl	r1, r2, #4
 80118ca:	6019      	strpl	r1, [r3, #0]
 80118cc:	6816      	ldrpl	r6, [r2, #0]
 80118ce:	2700      	movs	r7, #0
 80118d0:	69a0      	ldr	r0, [r4, #24]
 80118d2:	b188      	cbz	r0, 80118f8 <_scanf_chars+0x58>
 80118d4:	2801      	cmp	r0, #1
 80118d6:	d107      	bne.n	80118e8 <_scanf_chars+0x48>
 80118d8:	682b      	ldr	r3, [r5, #0]
 80118da:	781a      	ldrb	r2, [r3, #0]
 80118dc:	6963      	ldr	r3, [r4, #20]
 80118de:	5c9b      	ldrb	r3, [r3, r2]
 80118e0:	b953      	cbnz	r3, 80118f8 <_scanf_chars+0x58>
 80118e2:	2f00      	cmp	r7, #0
 80118e4:	d031      	beq.n	801194a <_scanf_chars+0xaa>
 80118e6:	e022      	b.n	801192e <_scanf_chars+0x8e>
 80118e8:	2802      	cmp	r0, #2
 80118ea:	d120      	bne.n	801192e <_scanf_chars+0x8e>
 80118ec:	682b      	ldr	r3, [r5, #0]
 80118ee:	781b      	ldrb	r3, [r3, #0]
 80118f0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80118f4:	071b      	lsls	r3, r3, #28
 80118f6:	d41a      	bmi.n	801192e <_scanf_chars+0x8e>
 80118f8:	6823      	ldr	r3, [r4, #0]
 80118fa:	06da      	lsls	r2, r3, #27
 80118fc:	bf5e      	ittt	pl
 80118fe:	682b      	ldrpl	r3, [r5, #0]
 8011900:	781b      	ldrbpl	r3, [r3, #0]
 8011902:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011906:	682a      	ldr	r2, [r5, #0]
 8011908:	686b      	ldr	r3, [r5, #4]
 801190a:	3201      	adds	r2, #1
 801190c:	602a      	str	r2, [r5, #0]
 801190e:	68a2      	ldr	r2, [r4, #8]
 8011910:	3b01      	subs	r3, #1
 8011912:	3a01      	subs	r2, #1
 8011914:	606b      	str	r3, [r5, #4]
 8011916:	3701      	adds	r7, #1
 8011918:	60a2      	str	r2, [r4, #8]
 801191a:	b142      	cbz	r2, 801192e <_scanf_chars+0x8e>
 801191c:	2b00      	cmp	r3, #0
 801191e:	dcd7      	bgt.n	80118d0 <_scanf_chars+0x30>
 8011920:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011924:	4629      	mov	r1, r5
 8011926:	4640      	mov	r0, r8
 8011928:	4798      	blx	r3
 801192a:	2800      	cmp	r0, #0
 801192c:	d0d0      	beq.n	80118d0 <_scanf_chars+0x30>
 801192e:	6823      	ldr	r3, [r4, #0]
 8011930:	f013 0310 	ands.w	r3, r3, #16
 8011934:	d105      	bne.n	8011942 <_scanf_chars+0xa2>
 8011936:	68e2      	ldr	r2, [r4, #12]
 8011938:	3201      	adds	r2, #1
 801193a:	60e2      	str	r2, [r4, #12]
 801193c:	69a2      	ldr	r2, [r4, #24]
 801193e:	b102      	cbz	r2, 8011942 <_scanf_chars+0xa2>
 8011940:	7033      	strb	r3, [r6, #0]
 8011942:	6923      	ldr	r3, [r4, #16]
 8011944:	443b      	add	r3, r7
 8011946:	6123      	str	r3, [r4, #16]
 8011948:	2000      	movs	r0, #0
 801194a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801194e:	bf00      	nop
 8011950:	08015911 	.word	0x08015911

08011954 <_scanf_i>:
 8011954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011958:	4698      	mov	r8, r3
 801195a:	4b74      	ldr	r3, [pc, #464]	@ (8011b2c <_scanf_i+0x1d8>)
 801195c:	460c      	mov	r4, r1
 801195e:	4682      	mov	sl, r0
 8011960:	4616      	mov	r6, r2
 8011962:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011966:	b087      	sub	sp, #28
 8011968:	ab03      	add	r3, sp, #12
 801196a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801196e:	4b70      	ldr	r3, [pc, #448]	@ (8011b30 <_scanf_i+0x1dc>)
 8011970:	69a1      	ldr	r1, [r4, #24]
 8011972:	4a70      	ldr	r2, [pc, #448]	@ (8011b34 <_scanf_i+0x1e0>)
 8011974:	2903      	cmp	r1, #3
 8011976:	bf08      	it	eq
 8011978:	461a      	moveq	r2, r3
 801197a:	68a3      	ldr	r3, [r4, #8]
 801197c:	9201      	str	r2, [sp, #4]
 801197e:	1e5a      	subs	r2, r3, #1
 8011980:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011984:	bf88      	it	hi
 8011986:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801198a:	4627      	mov	r7, r4
 801198c:	bf82      	ittt	hi
 801198e:	eb03 0905 	addhi.w	r9, r3, r5
 8011992:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011996:	60a3      	strhi	r3, [r4, #8]
 8011998:	f857 3b1c 	ldr.w	r3, [r7], #28
 801199c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80119a0:	bf98      	it	ls
 80119a2:	f04f 0900 	movls.w	r9, #0
 80119a6:	6023      	str	r3, [r4, #0]
 80119a8:	463d      	mov	r5, r7
 80119aa:	f04f 0b00 	mov.w	fp, #0
 80119ae:	6831      	ldr	r1, [r6, #0]
 80119b0:	ab03      	add	r3, sp, #12
 80119b2:	7809      	ldrb	r1, [r1, #0]
 80119b4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80119b8:	2202      	movs	r2, #2
 80119ba:	f7ee fc29 	bl	8000210 <memchr>
 80119be:	b328      	cbz	r0, 8011a0c <_scanf_i+0xb8>
 80119c0:	f1bb 0f01 	cmp.w	fp, #1
 80119c4:	d159      	bne.n	8011a7a <_scanf_i+0x126>
 80119c6:	6862      	ldr	r2, [r4, #4]
 80119c8:	b92a      	cbnz	r2, 80119d6 <_scanf_i+0x82>
 80119ca:	6822      	ldr	r2, [r4, #0]
 80119cc:	2108      	movs	r1, #8
 80119ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80119d2:	6061      	str	r1, [r4, #4]
 80119d4:	6022      	str	r2, [r4, #0]
 80119d6:	6822      	ldr	r2, [r4, #0]
 80119d8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80119dc:	6022      	str	r2, [r4, #0]
 80119de:	68a2      	ldr	r2, [r4, #8]
 80119e0:	1e51      	subs	r1, r2, #1
 80119e2:	60a1      	str	r1, [r4, #8]
 80119e4:	b192      	cbz	r2, 8011a0c <_scanf_i+0xb8>
 80119e6:	6832      	ldr	r2, [r6, #0]
 80119e8:	1c51      	adds	r1, r2, #1
 80119ea:	6031      	str	r1, [r6, #0]
 80119ec:	7812      	ldrb	r2, [r2, #0]
 80119ee:	f805 2b01 	strb.w	r2, [r5], #1
 80119f2:	6872      	ldr	r2, [r6, #4]
 80119f4:	3a01      	subs	r2, #1
 80119f6:	2a00      	cmp	r2, #0
 80119f8:	6072      	str	r2, [r6, #4]
 80119fa:	dc07      	bgt.n	8011a0c <_scanf_i+0xb8>
 80119fc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8011a00:	4631      	mov	r1, r6
 8011a02:	4650      	mov	r0, sl
 8011a04:	4790      	blx	r2
 8011a06:	2800      	cmp	r0, #0
 8011a08:	f040 8085 	bne.w	8011b16 <_scanf_i+0x1c2>
 8011a0c:	f10b 0b01 	add.w	fp, fp, #1
 8011a10:	f1bb 0f03 	cmp.w	fp, #3
 8011a14:	d1cb      	bne.n	80119ae <_scanf_i+0x5a>
 8011a16:	6863      	ldr	r3, [r4, #4]
 8011a18:	b90b      	cbnz	r3, 8011a1e <_scanf_i+0xca>
 8011a1a:	230a      	movs	r3, #10
 8011a1c:	6063      	str	r3, [r4, #4]
 8011a1e:	6863      	ldr	r3, [r4, #4]
 8011a20:	4945      	ldr	r1, [pc, #276]	@ (8011b38 <_scanf_i+0x1e4>)
 8011a22:	6960      	ldr	r0, [r4, #20]
 8011a24:	1ac9      	subs	r1, r1, r3
 8011a26:	f000 f889 	bl	8011b3c <__sccl>
 8011a2a:	f04f 0b00 	mov.w	fp, #0
 8011a2e:	68a3      	ldr	r3, [r4, #8]
 8011a30:	6822      	ldr	r2, [r4, #0]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d03d      	beq.n	8011ab2 <_scanf_i+0x15e>
 8011a36:	6831      	ldr	r1, [r6, #0]
 8011a38:	6960      	ldr	r0, [r4, #20]
 8011a3a:	f891 c000 	ldrb.w	ip, [r1]
 8011a3e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011a42:	2800      	cmp	r0, #0
 8011a44:	d035      	beq.n	8011ab2 <_scanf_i+0x15e>
 8011a46:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8011a4a:	d124      	bne.n	8011a96 <_scanf_i+0x142>
 8011a4c:	0510      	lsls	r0, r2, #20
 8011a4e:	d522      	bpl.n	8011a96 <_scanf_i+0x142>
 8011a50:	f10b 0b01 	add.w	fp, fp, #1
 8011a54:	f1b9 0f00 	cmp.w	r9, #0
 8011a58:	d003      	beq.n	8011a62 <_scanf_i+0x10e>
 8011a5a:	3301      	adds	r3, #1
 8011a5c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8011a60:	60a3      	str	r3, [r4, #8]
 8011a62:	6873      	ldr	r3, [r6, #4]
 8011a64:	3b01      	subs	r3, #1
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	6073      	str	r3, [r6, #4]
 8011a6a:	dd1b      	ble.n	8011aa4 <_scanf_i+0x150>
 8011a6c:	6833      	ldr	r3, [r6, #0]
 8011a6e:	3301      	adds	r3, #1
 8011a70:	6033      	str	r3, [r6, #0]
 8011a72:	68a3      	ldr	r3, [r4, #8]
 8011a74:	3b01      	subs	r3, #1
 8011a76:	60a3      	str	r3, [r4, #8]
 8011a78:	e7d9      	b.n	8011a2e <_scanf_i+0xda>
 8011a7a:	f1bb 0f02 	cmp.w	fp, #2
 8011a7e:	d1ae      	bne.n	80119de <_scanf_i+0x8a>
 8011a80:	6822      	ldr	r2, [r4, #0]
 8011a82:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8011a86:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8011a8a:	d1c4      	bne.n	8011a16 <_scanf_i+0xc2>
 8011a8c:	2110      	movs	r1, #16
 8011a8e:	6061      	str	r1, [r4, #4]
 8011a90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011a94:	e7a2      	b.n	80119dc <_scanf_i+0x88>
 8011a96:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8011a9a:	6022      	str	r2, [r4, #0]
 8011a9c:	780b      	ldrb	r3, [r1, #0]
 8011a9e:	f805 3b01 	strb.w	r3, [r5], #1
 8011aa2:	e7de      	b.n	8011a62 <_scanf_i+0x10e>
 8011aa4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011aa8:	4631      	mov	r1, r6
 8011aaa:	4650      	mov	r0, sl
 8011aac:	4798      	blx	r3
 8011aae:	2800      	cmp	r0, #0
 8011ab0:	d0df      	beq.n	8011a72 <_scanf_i+0x11e>
 8011ab2:	6823      	ldr	r3, [r4, #0]
 8011ab4:	05d9      	lsls	r1, r3, #23
 8011ab6:	d50d      	bpl.n	8011ad4 <_scanf_i+0x180>
 8011ab8:	42bd      	cmp	r5, r7
 8011aba:	d909      	bls.n	8011ad0 <_scanf_i+0x17c>
 8011abc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011ac0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011ac4:	4632      	mov	r2, r6
 8011ac6:	4650      	mov	r0, sl
 8011ac8:	4798      	blx	r3
 8011aca:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8011ace:	464d      	mov	r5, r9
 8011ad0:	42bd      	cmp	r5, r7
 8011ad2:	d028      	beq.n	8011b26 <_scanf_i+0x1d2>
 8011ad4:	6822      	ldr	r2, [r4, #0]
 8011ad6:	f012 0210 	ands.w	r2, r2, #16
 8011ada:	d113      	bne.n	8011b04 <_scanf_i+0x1b0>
 8011adc:	702a      	strb	r2, [r5, #0]
 8011ade:	6863      	ldr	r3, [r4, #4]
 8011ae0:	9e01      	ldr	r6, [sp, #4]
 8011ae2:	4639      	mov	r1, r7
 8011ae4:	4650      	mov	r0, sl
 8011ae6:	47b0      	blx	r6
 8011ae8:	f8d8 3000 	ldr.w	r3, [r8]
 8011aec:	6821      	ldr	r1, [r4, #0]
 8011aee:	1d1a      	adds	r2, r3, #4
 8011af0:	f8c8 2000 	str.w	r2, [r8]
 8011af4:	f011 0f20 	tst.w	r1, #32
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	d00f      	beq.n	8011b1c <_scanf_i+0x1c8>
 8011afc:	6018      	str	r0, [r3, #0]
 8011afe:	68e3      	ldr	r3, [r4, #12]
 8011b00:	3301      	adds	r3, #1
 8011b02:	60e3      	str	r3, [r4, #12]
 8011b04:	6923      	ldr	r3, [r4, #16]
 8011b06:	1bed      	subs	r5, r5, r7
 8011b08:	445d      	add	r5, fp
 8011b0a:	442b      	add	r3, r5
 8011b0c:	6123      	str	r3, [r4, #16]
 8011b0e:	2000      	movs	r0, #0
 8011b10:	b007      	add	sp, #28
 8011b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b16:	f04f 0b00 	mov.w	fp, #0
 8011b1a:	e7ca      	b.n	8011ab2 <_scanf_i+0x15e>
 8011b1c:	07ca      	lsls	r2, r1, #31
 8011b1e:	bf4c      	ite	mi
 8011b20:	8018      	strhmi	r0, [r3, #0]
 8011b22:	6018      	strpl	r0, [r3, #0]
 8011b24:	e7eb      	b.n	8011afe <_scanf_i+0x1aa>
 8011b26:	2001      	movs	r0, #1
 8011b28:	e7f2      	b.n	8011b10 <_scanf_i+0x1bc>
 8011b2a:	bf00      	nop
 8011b2c:	080156a0 	.word	0x080156a0
 8011b30:	0800fc59 	.word	0x0800fc59
 8011b34:	08012809 	.word	0x08012809
 8011b38:	0801581b 	.word	0x0801581b

08011b3c <__sccl>:
 8011b3c:	b570      	push	{r4, r5, r6, lr}
 8011b3e:	780b      	ldrb	r3, [r1, #0]
 8011b40:	4604      	mov	r4, r0
 8011b42:	2b5e      	cmp	r3, #94	@ 0x5e
 8011b44:	bf0b      	itete	eq
 8011b46:	784b      	ldrbeq	r3, [r1, #1]
 8011b48:	1c4a      	addne	r2, r1, #1
 8011b4a:	1c8a      	addeq	r2, r1, #2
 8011b4c:	2100      	movne	r1, #0
 8011b4e:	bf08      	it	eq
 8011b50:	2101      	moveq	r1, #1
 8011b52:	3801      	subs	r0, #1
 8011b54:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8011b58:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011b5c:	42a8      	cmp	r0, r5
 8011b5e:	d1fb      	bne.n	8011b58 <__sccl+0x1c>
 8011b60:	b90b      	cbnz	r3, 8011b66 <__sccl+0x2a>
 8011b62:	1e50      	subs	r0, r2, #1
 8011b64:	bd70      	pop	{r4, r5, r6, pc}
 8011b66:	f081 0101 	eor.w	r1, r1, #1
 8011b6a:	54e1      	strb	r1, [r4, r3]
 8011b6c:	4610      	mov	r0, r2
 8011b6e:	4602      	mov	r2, r0
 8011b70:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011b74:	2d2d      	cmp	r5, #45	@ 0x2d
 8011b76:	d005      	beq.n	8011b84 <__sccl+0x48>
 8011b78:	2d5d      	cmp	r5, #93	@ 0x5d
 8011b7a:	d016      	beq.n	8011baa <__sccl+0x6e>
 8011b7c:	2d00      	cmp	r5, #0
 8011b7e:	d0f1      	beq.n	8011b64 <__sccl+0x28>
 8011b80:	462b      	mov	r3, r5
 8011b82:	e7f2      	b.n	8011b6a <__sccl+0x2e>
 8011b84:	7846      	ldrb	r6, [r0, #1]
 8011b86:	2e5d      	cmp	r6, #93	@ 0x5d
 8011b88:	d0fa      	beq.n	8011b80 <__sccl+0x44>
 8011b8a:	42b3      	cmp	r3, r6
 8011b8c:	dcf8      	bgt.n	8011b80 <__sccl+0x44>
 8011b8e:	3002      	adds	r0, #2
 8011b90:	461a      	mov	r2, r3
 8011b92:	3201      	adds	r2, #1
 8011b94:	4296      	cmp	r6, r2
 8011b96:	54a1      	strb	r1, [r4, r2]
 8011b98:	dcfb      	bgt.n	8011b92 <__sccl+0x56>
 8011b9a:	1af2      	subs	r2, r6, r3
 8011b9c:	3a01      	subs	r2, #1
 8011b9e:	1c5d      	adds	r5, r3, #1
 8011ba0:	42b3      	cmp	r3, r6
 8011ba2:	bfa8      	it	ge
 8011ba4:	2200      	movge	r2, #0
 8011ba6:	18ab      	adds	r3, r5, r2
 8011ba8:	e7e1      	b.n	8011b6e <__sccl+0x32>
 8011baa:	4610      	mov	r0, r2
 8011bac:	e7da      	b.n	8011b64 <__sccl+0x28>
	...

08011bb0 <__sflush_r>:
 8011bb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bb8:	0716      	lsls	r6, r2, #28
 8011bba:	4605      	mov	r5, r0
 8011bbc:	460c      	mov	r4, r1
 8011bbe:	d454      	bmi.n	8011c6a <__sflush_r+0xba>
 8011bc0:	684b      	ldr	r3, [r1, #4]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	dc02      	bgt.n	8011bcc <__sflush_r+0x1c>
 8011bc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	dd48      	ble.n	8011c5e <__sflush_r+0xae>
 8011bcc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011bce:	2e00      	cmp	r6, #0
 8011bd0:	d045      	beq.n	8011c5e <__sflush_r+0xae>
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011bd8:	682f      	ldr	r7, [r5, #0]
 8011bda:	6a21      	ldr	r1, [r4, #32]
 8011bdc:	602b      	str	r3, [r5, #0]
 8011bde:	d030      	beq.n	8011c42 <__sflush_r+0x92>
 8011be0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011be2:	89a3      	ldrh	r3, [r4, #12]
 8011be4:	0759      	lsls	r1, r3, #29
 8011be6:	d505      	bpl.n	8011bf4 <__sflush_r+0x44>
 8011be8:	6863      	ldr	r3, [r4, #4]
 8011bea:	1ad2      	subs	r2, r2, r3
 8011bec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011bee:	b10b      	cbz	r3, 8011bf4 <__sflush_r+0x44>
 8011bf0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011bf2:	1ad2      	subs	r2, r2, r3
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011bf8:	6a21      	ldr	r1, [r4, #32]
 8011bfa:	4628      	mov	r0, r5
 8011bfc:	47b0      	blx	r6
 8011bfe:	1c43      	adds	r3, r0, #1
 8011c00:	89a3      	ldrh	r3, [r4, #12]
 8011c02:	d106      	bne.n	8011c12 <__sflush_r+0x62>
 8011c04:	6829      	ldr	r1, [r5, #0]
 8011c06:	291d      	cmp	r1, #29
 8011c08:	d82b      	bhi.n	8011c62 <__sflush_r+0xb2>
 8011c0a:	4a2a      	ldr	r2, [pc, #168]	@ (8011cb4 <__sflush_r+0x104>)
 8011c0c:	40ca      	lsrs	r2, r1
 8011c0e:	07d6      	lsls	r6, r2, #31
 8011c10:	d527      	bpl.n	8011c62 <__sflush_r+0xb2>
 8011c12:	2200      	movs	r2, #0
 8011c14:	6062      	str	r2, [r4, #4]
 8011c16:	04d9      	lsls	r1, r3, #19
 8011c18:	6922      	ldr	r2, [r4, #16]
 8011c1a:	6022      	str	r2, [r4, #0]
 8011c1c:	d504      	bpl.n	8011c28 <__sflush_r+0x78>
 8011c1e:	1c42      	adds	r2, r0, #1
 8011c20:	d101      	bne.n	8011c26 <__sflush_r+0x76>
 8011c22:	682b      	ldr	r3, [r5, #0]
 8011c24:	b903      	cbnz	r3, 8011c28 <__sflush_r+0x78>
 8011c26:	6560      	str	r0, [r4, #84]	@ 0x54
 8011c28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011c2a:	602f      	str	r7, [r5, #0]
 8011c2c:	b1b9      	cbz	r1, 8011c5e <__sflush_r+0xae>
 8011c2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c32:	4299      	cmp	r1, r3
 8011c34:	d002      	beq.n	8011c3c <__sflush_r+0x8c>
 8011c36:	4628      	mov	r0, r5
 8011c38:	f7fe ff6e 	bl	8010b18 <_free_r>
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011c40:	e00d      	b.n	8011c5e <__sflush_r+0xae>
 8011c42:	2301      	movs	r3, #1
 8011c44:	4628      	mov	r0, r5
 8011c46:	47b0      	blx	r6
 8011c48:	4602      	mov	r2, r0
 8011c4a:	1c50      	adds	r0, r2, #1
 8011c4c:	d1c9      	bne.n	8011be2 <__sflush_r+0x32>
 8011c4e:	682b      	ldr	r3, [r5, #0]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d0c6      	beq.n	8011be2 <__sflush_r+0x32>
 8011c54:	2b1d      	cmp	r3, #29
 8011c56:	d001      	beq.n	8011c5c <__sflush_r+0xac>
 8011c58:	2b16      	cmp	r3, #22
 8011c5a:	d11e      	bne.n	8011c9a <__sflush_r+0xea>
 8011c5c:	602f      	str	r7, [r5, #0]
 8011c5e:	2000      	movs	r0, #0
 8011c60:	e022      	b.n	8011ca8 <__sflush_r+0xf8>
 8011c62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c66:	b21b      	sxth	r3, r3
 8011c68:	e01b      	b.n	8011ca2 <__sflush_r+0xf2>
 8011c6a:	690f      	ldr	r7, [r1, #16]
 8011c6c:	2f00      	cmp	r7, #0
 8011c6e:	d0f6      	beq.n	8011c5e <__sflush_r+0xae>
 8011c70:	0793      	lsls	r3, r2, #30
 8011c72:	680e      	ldr	r6, [r1, #0]
 8011c74:	bf08      	it	eq
 8011c76:	694b      	ldreq	r3, [r1, #20]
 8011c78:	600f      	str	r7, [r1, #0]
 8011c7a:	bf18      	it	ne
 8011c7c:	2300      	movne	r3, #0
 8011c7e:	eba6 0807 	sub.w	r8, r6, r7
 8011c82:	608b      	str	r3, [r1, #8]
 8011c84:	f1b8 0f00 	cmp.w	r8, #0
 8011c88:	dde9      	ble.n	8011c5e <__sflush_r+0xae>
 8011c8a:	6a21      	ldr	r1, [r4, #32]
 8011c8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011c8e:	4643      	mov	r3, r8
 8011c90:	463a      	mov	r2, r7
 8011c92:	4628      	mov	r0, r5
 8011c94:	47b0      	blx	r6
 8011c96:	2800      	cmp	r0, #0
 8011c98:	dc08      	bgt.n	8011cac <__sflush_r+0xfc>
 8011c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ca2:	81a3      	strh	r3, [r4, #12]
 8011ca4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cac:	4407      	add	r7, r0
 8011cae:	eba8 0800 	sub.w	r8, r8, r0
 8011cb2:	e7e7      	b.n	8011c84 <__sflush_r+0xd4>
 8011cb4:	20400001 	.word	0x20400001

08011cb8 <_fflush_r>:
 8011cb8:	b538      	push	{r3, r4, r5, lr}
 8011cba:	690b      	ldr	r3, [r1, #16]
 8011cbc:	4605      	mov	r5, r0
 8011cbe:	460c      	mov	r4, r1
 8011cc0:	b913      	cbnz	r3, 8011cc8 <_fflush_r+0x10>
 8011cc2:	2500      	movs	r5, #0
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	bd38      	pop	{r3, r4, r5, pc}
 8011cc8:	b118      	cbz	r0, 8011cd2 <_fflush_r+0x1a>
 8011cca:	6a03      	ldr	r3, [r0, #32]
 8011ccc:	b90b      	cbnz	r3, 8011cd2 <_fflush_r+0x1a>
 8011cce:	f7fd f929 	bl	800ef24 <__sinit>
 8011cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d0f3      	beq.n	8011cc2 <_fflush_r+0xa>
 8011cda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011cdc:	07d0      	lsls	r0, r2, #31
 8011cde:	d404      	bmi.n	8011cea <_fflush_r+0x32>
 8011ce0:	0599      	lsls	r1, r3, #22
 8011ce2:	d402      	bmi.n	8011cea <_fflush_r+0x32>
 8011ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ce6:	f7fe f888 	bl	800fdfa <__retarget_lock_acquire_recursive>
 8011cea:	4628      	mov	r0, r5
 8011cec:	4621      	mov	r1, r4
 8011cee:	f7ff ff5f 	bl	8011bb0 <__sflush_r>
 8011cf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011cf4:	07da      	lsls	r2, r3, #31
 8011cf6:	4605      	mov	r5, r0
 8011cf8:	d4e4      	bmi.n	8011cc4 <_fflush_r+0xc>
 8011cfa:	89a3      	ldrh	r3, [r4, #12]
 8011cfc:	059b      	lsls	r3, r3, #22
 8011cfe:	d4e1      	bmi.n	8011cc4 <_fflush_r+0xc>
 8011d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011d02:	f7fe f87b 	bl	800fdfc <__retarget_lock_release_recursive>
 8011d06:	e7dd      	b.n	8011cc4 <_fflush_r+0xc>

08011d08 <_Balloc>:
 8011d08:	b570      	push	{r4, r5, r6, lr}
 8011d0a:	69c6      	ldr	r6, [r0, #28]
 8011d0c:	4604      	mov	r4, r0
 8011d0e:	460d      	mov	r5, r1
 8011d10:	b976      	cbnz	r6, 8011d30 <_Balloc+0x28>
 8011d12:	2010      	movs	r0, #16
 8011d14:	f7ff fdaa 	bl	801186c <malloc>
 8011d18:	4602      	mov	r2, r0
 8011d1a:	61e0      	str	r0, [r4, #28]
 8011d1c:	b920      	cbnz	r0, 8011d28 <_Balloc+0x20>
 8011d1e:	4b18      	ldr	r3, [pc, #96]	@ (8011d80 <_Balloc+0x78>)
 8011d20:	4818      	ldr	r0, [pc, #96]	@ (8011d84 <_Balloc+0x7c>)
 8011d22:	216b      	movs	r1, #107	@ 0x6b
 8011d24:	f000 fd9a 	bl	801285c <__assert_func>
 8011d28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d2c:	6006      	str	r6, [r0, #0]
 8011d2e:	60c6      	str	r6, [r0, #12]
 8011d30:	69e6      	ldr	r6, [r4, #28]
 8011d32:	68f3      	ldr	r3, [r6, #12]
 8011d34:	b183      	cbz	r3, 8011d58 <_Balloc+0x50>
 8011d36:	69e3      	ldr	r3, [r4, #28]
 8011d38:	68db      	ldr	r3, [r3, #12]
 8011d3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011d3e:	b9b8      	cbnz	r0, 8011d70 <_Balloc+0x68>
 8011d40:	2101      	movs	r1, #1
 8011d42:	fa01 f605 	lsl.w	r6, r1, r5
 8011d46:	1d72      	adds	r2, r6, #5
 8011d48:	0092      	lsls	r2, r2, #2
 8011d4a:	4620      	mov	r0, r4
 8011d4c:	f7fc f8a4 	bl	800de98 <_calloc_r>
 8011d50:	b160      	cbz	r0, 8011d6c <_Balloc+0x64>
 8011d52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011d56:	e00e      	b.n	8011d76 <_Balloc+0x6e>
 8011d58:	2221      	movs	r2, #33	@ 0x21
 8011d5a:	2104      	movs	r1, #4
 8011d5c:	4620      	mov	r0, r4
 8011d5e:	f7fc f89b 	bl	800de98 <_calloc_r>
 8011d62:	69e3      	ldr	r3, [r4, #28]
 8011d64:	60f0      	str	r0, [r6, #12]
 8011d66:	68db      	ldr	r3, [r3, #12]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d1e4      	bne.n	8011d36 <_Balloc+0x2e>
 8011d6c:	2000      	movs	r0, #0
 8011d6e:	bd70      	pop	{r4, r5, r6, pc}
 8011d70:	6802      	ldr	r2, [r0, #0]
 8011d72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011d76:	2300      	movs	r3, #0
 8011d78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011d7c:	e7f7      	b.n	8011d6e <_Balloc+0x66>
 8011d7e:	bf00      	nop
 8011d80:	0801571a 	.word	0x0801571a
 8011d84:	08015826 	.word	0x08015826

08011d88 <_Bfree>:
 8011d88:	b570      	push	{r4, r5, r6, lr}
 8011d8a:	69c6      	ldr	r6, [r0, #28]
 8011d8c:	4605      	mov	r5, r0
 8011d8e:	460c      	mov	r4, r1
 8011d90:	b976      	cbnz	r6, 8011db0 <_Bfree+0x28>
 8011d92:	2010      	movs	r0, #16
 8011d94:	f7ff fd6a 	bl	801186c <malloc>
 8011d98:	4602      	mov	r2, r0
 8011d9a:	61e8      	str	r0, [r5, #28]
 8011d9c:	b920      	cbnz	r0, 8011da8 <_Bfree+0x20>
 8011d9e:	4b09      	ldr	r3, [pc, #36]	@ (8011dc4 <_Bfree+0x3c>)
 8011da0:	4809      	ldr	r0, [pc, #36]	@ (8011dc8 <_Bfree+0x40>)
 8011da2:	218f      	movs	r1, #143	@ 0x8f
 8011da4:	f000 fd5a 	bl	801285c <__assert_func>
 8011da8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011dac:	6006      	str	r6, [r0, #0]
 8011dae:	60c6      	str	r6, [r0, #12]
 8011db0:	b13c      	cbz	r4, 8011dc2 <_Bfree+0x3a>
 8011db2:	69eb      	ldr	r3, [r5, #28]
 8011db4:	6862      	ldr	r2, [r4, #4]
 8011db6:	68db      	ldr	r3, [r3, #12]
 8011db8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011dbc:	6021      	str	r1, [r4, #0]
 8011dbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011dc2:	bd70      	pop	{r4, r5, r6, pc}
 8011dc4:	0801571a 	.word	0x0801571a
 8011dc8:	08015826 	.word	0x08015826

08011dcc <__multadd>:
 8011dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dd0:	690d      	ldr	r5, [r1, #16]
 8011dd2:	4607      	mov	r7, r0
 8011dd4:	460c      	mov	r4, r1
 8011dd6:	461e      	mov	r6, r3
 8011dd8:	f101 0c14 	add.w	ip, r1, #20
 8011ddc:	2000      	movs	r0, #0
 8011dde:	f8dc 3000 	ldr.w	r3, [ip]
 8011de2:	b299      	uxth	r1, r3
 8011de4:	fb02 6101 	mla	r1, r2, r1, r6
 8011de8:	0c1e      	lsrs	r6, r3, #16
 8011dea:	0c0b      	lsrs	r3, r1, #16
 8011dec:	fb02 3306 	mla	r3, r2, r6, r3
 8011df0:	b289      	uxth	r1, r1
 8011df2:	3001      	adds	r0, #1
 8011df4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011df8:	4285      	cmp	r5, r0
 8011dfa:	f84c 1b04 	str.w	r1, [ip], #4
 8011dfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011e02:	dcec      	bgt.n	8011dde <__multadd+0x12>
 8011e04:	b30e      	cbz	r6, 8011e4a <__multadd+0x7e>
 8011e06:	68a3      	ldr	r3, [r4, #8]
 8011e08:	42ab      	cmp	r3, r5
 8011e0a:	dc19      	bgt.n	8011e40 <__multadd+0x74>
 8011e0c:	6861      	ldr	r1, [r4, #4]
 8011e0e:	4638      	mov	r0, r7
 8011e10:	3101      	adds	r1, #1
 8011e12:	f7ff ff79 	bl	8011d08 <_Balloc>
 8011e16:	4680      	mov	r8, r0
 8011e18:	b928      	cbnz	r0, 8011e26 <__multadd+0x5a>
 8011e1a:	4602      	mov	r2, r0
 8011e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8011e50 <__multadd+0x84>)
 8011e1e:	480d      	ldr	r0, [pc, #52]	@ (8011e54 <__multadd+0x88>)
 8011e20:	21ba      	movs	r1, #186	@ 0xba
 8011e22:	f000 fd1b 	bl	801285c <__assert_func>
 8011e26:	6922      	ldr	r2, [r4, #16]
 8011e28:	3202      	adds	r2, #2
 8011e2a:	f104 010c 	add.w	r1, r4, #12
 8011e2e:	0092      	lsls	r2, r2, #2
 8011e30:	300c      	adds	r0, #12
 8011e32:	f7fd fff9 	bl	800fe28 <memcpy>
 8011e36:	4621      	mov	r1, r4
 8011e38:	4638      	mov	r0, r7
 8011e3a:	f7ff ffa5 	bl	8011d88 <_Bfree>
 8011e3e:	4644      	mov	r4, r8
 8011e40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011e44:	3501      	adds	r5, #1
 8011e46:	615e      	str	r6, [r3, #20]
 8011e48:	6125      	str	r5, [r4, #16]
 8011e4a:	4620      	mov	r0, r4
 8011e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e50:	08015789 	.word	0x08015789
 8011e54:	08015826 	.word	0x08015826

08011e58 <__s2b>:
 8011e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e5c:	460c      	mov	r4, r1
 8011e5e:	4615      	mov	r5, r2
 8011e60:	461f      	mov	r7, r3
 8011e62:	2209      	movs	r2, #9
 8011e64:	3308      	adds	r3, #8
 8011e66:	4606      	mov	r6, r0
 8011e68:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e6c:	2100      	movs	r1, #0
 8011e6e:	2201      	movs	r2, #1
 8011e70:	429a      	cmp	r2, r3
 8011e72:	db09      	blt.n	8011e88 <__s2b+0x30>
 8011e74:	4630      	mov	r0, r6
 8011e76:	f7ff ff47 	bl	8011d08 <_Balloc>
 8011e7a:	b940      	cbnz	r0, 8011e8e <__s2b+0x36>
 8011e7c:	4602      	mov	r2, r0
 8011e7e:	4b19      	ldr	r3, [pc, #100]	@ (8011ee4 <__s2b+0x8c>)
 8011e80:	4819      	ldr	r0, [pc, #100]	@ (8011ee8 <__s2b+0x90>)
 8011e82:	21d3      	movs	r1, #211	@ 0xd3
 8011e84:	f000 fcea 	bl	801285c <__assert_func>
 8011e88:	0052      	lsls	r2, r2, #1
 8011e8a:	3101      	adds	r1, #1
 8011e8c:	e7f0      	b.n	8011e70 <__s2b+0x18>
 8011e8e:	9b08      	ldr	r3, [sp, #32]
 8011e90:	6143      	str	r3, [r0, #20]
 8011e92:	2d09      	cmp	r5, #9
 8011e94:	f04f 0301 	mov.w	r3, #1
 8011e98:	6103      	str	r3, [r0, #16]
 8011e9a:	dd16      	ble.n	8011eca <__s2b+0x72>
 8011e9c:	f104 0909 	add.w	r9, r4, #9
 8011ea0:	46c8      	mov	r8, r9
 8011ea2:	442c      	add	r4, r5
 8011ea4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011ea8:	4601      	mov	r1, r0
 8011eaa:	3b30      	subs	r3, #48	@ 0x30
 8011eac:	220a      	movs	r2, #10
 8011eae:	4630      	mov	r0, r6
 8011eb0:	f7ff ff8c 	bl	8011dcc <__multadd>
 8011eb4:	45a0      	cmp	r8, r4
 8011eb6:	d1f5      	bne.n	8011ea4 <__s2b+0x4c>
 8011eb8:	f1a5 0408 	sub.w	r4, r5, #8
 8011ebc:	444c      	add	r4, r9
 8011ebe:	1b2d      	subs	r5, r5, r4
 8011ec0:	1963      	adds	r3, r4, r5
 8011ec2:	42bb      	cmp	r3, r7
 8011ec4:	db04      	blt.n	8011ed0 <__s2b+0x78>
 8011ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011eca:	340a      	adds	r4, #10
 8011ecc:	2509      	movs	r5, #9
 8011ece:	e7f6      	b.n	8011ebe <__s2b+0x66>
 8011ed0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011ed4:	4601      	mov	r1, r0
 8011ed6:	3b30      	subs	r3, #48	@ 0x30
 8011ed8:	220a      	movs	r2, #10
 8011eda:	4630      	mov	r0, r6
 8011edc:	f7ff ff76 	bl	8011dcc <__multadd>
 8011ee0:	e7ee      	b.n	8011ec0 <__s2b+0x68>
 8011ee2:	bf00      	nop
 8011ee4:	08015789 	.word	0x08015789
 8011ee8:	08015826 	.word	0x08015826

08011eec <__hi0bits>:
 8011eec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	bf36      	itet	cc
 8011ef4:	0403      	lslcc	r3, r0, #16
 8011ef6:	2000      	movcs	r0, #0
 8011ef8:	2010      	movcc	r0, #16
 8011efa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011efe:	bf3c      	itt	cc
 8011f00:	021b      	lslcc	r3, r3, #8
 8011f02:	3008      	addcc	r0, #8
 8011f04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011f08:	bf3c      	itt	cc
 8011f0a:	011b      	lslcc	r3, r3, #4
 8011f0c:	3004      	addcc	r0, #4
 8011f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011f12:	bf3c      	itt	cc
 8011f14:	009b      	lslcc	r3, r3, #2
 8011f16:	3002      	addcc	r0, #2
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	db05      	blt.n	8011f28 <__hi0bits+0x3c>
 8011f1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011f20:	f100 0001 	add.w	r0, r0, #1
 8011f24:	bf08      	it	eq
 8011f26:	2020      	moveq	r0, #32
 8011f28:	4770      	bx	lr

08011f2a <__lo0bits>:
 8011f2a:	6803      	ldr	r3, [r0, #0]
 8011f2c:	4602      	mov	r2, r0
 8011f2e:	f013 0007 	ands.w	r0, r3, #7
 8011f32:	d00b      	beq.n	8011f4c <__lo0bits+0x22>
 8011f34:	07d9      	lsls	r1, r3, #31
 8011f36:	d421      	bmi.n	8011f7c <__lo0bits+0x52>
 8011f38:	0798      	lsls	r0, r3, #30
 8011f3a:	bf49      	itett	mi
 8011f3c:	085b      	lsrmi	r3, r3, #1
 8011f3e:	089b      	lsrpl	r3, r3, #2
 8011f40:	2001      	movmi	r0, #1
 8011f42:	6013      	strmi	r3, [r2, #0]
 8011f44:	bf5c      	itt	pl
 8011f46:	6013      	strpl	r3, [r2, #0]
 8011f48:	2002      	movpl	r0, #2
 8011f4a:	4770      	bx	lr
 8011f4c:	b299      	uxth	r1, r3
 8011f4e:	b909      	cbnz	r1, 8011f54 <__lo0bits+0x2a>
 8011f50:	0c1b      	lsrs	r3, r3, #16
 8011f52:	2010      	movs	r0, #16
 8011f54:	b2d9      	uxtb	r1, r3
 8011f56:	b909      	cbnz	r1, 8011f5c <__lo0bits+0x32>
 8011f58:	3008      	adds	r0, #8
 8011f5a:	0a1b      	lsrs	r3, r3, #8
 8011f5c:	0719      	lsls	r1, r3, #28
 8011f5e:	bf04      	itt	eq
 8011f60:	091b      	lsreq	r3, r3, #4
 8011f62:	3004      	addeq	r0, #4
 8011f64:	0799      	lsls	r1, r3, #30
 8011f66:	bf04      	itt	eq
 8011f68:	089b      	lsreq	r3, r3, #2
 8011f6a:	3002      	addeq	r0, #2
 8011f6c:	07d9      	lsls	r1, r3, #31
 8011f6e:	d403      	bmi.n	8011f78 <__lo0bits+0x4e>
 8011f70:	085b      	lsrs	r3, r3, #1
 8011f72:	f100 0001 	add.w	r0, r0, #1
 8011f76:	d003      	beq.n	8011f80 <__lo0bits+0x56>
 8011f78:	6013      	str	r3, [r2, #0]
 8011f7a:	4770      	bx	lr
 8011f7c:	2000      	movs	r0, #0
 8011f7e:	4770      	bx	lr
 8011f80:	2020      	movs	r0, #32
 8011f82:	4770      	bx	lr

08011f84 <__i2b>:
 8011f84:	b510      	push	{r4, lr}
 8011f86:	460c      	mov	r4, r1
 8011f88:	2101      	movs	r1, #1
 8011f8a:	f7ff febd 	bl	8011d08 <_Balloc>
 8011f8e:	4602      	mov	r2, r0
 8011f90:	b928      	cbnz	r0, 8011f9e <__i2b+0x1a>
 8011f92:	4b05      	ldr	r3, [pc, #20]	@ (8011fa8 <__i2b+0x24>)
 8011f94:	4805      	ldr	r0, [pc, #20]	@ (8011fac <__i2b+0x28>)
 8011f96:	f240 1145 	movw	r1, #325	@ 0x145
 8011f9a:	f000 fc5f 	bl	801285c <__assert_func>
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	6144      	str	r4, [r0, #20]
 8011fa2:	6103      	str	r3, [r0, #16]
 8011fa4:	bd10      	pop	{r4, pc}
 8011fa6:	bf00      	nop
 8011fa8:	08015789 	.word	0x08015789
 8011fac:	08015826 	.word	0x08015826

08011fb0 <__multiply>:
 8011fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fb4:	4617      	mov	r7, r2
 8011fb6:	690a      	ldr	r2, [r1, #16]
 8011fb8:	693b      	ldr	r3, [r7, #16]
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	bfa8      	it	ge
 8011fbe:	463b      	movge	r3, r7
 8011fc0:	4689      	mov	r9, r1
 8011fc2:	bfa4      	itt	ge
 8011fc4:	460f      	movge	r7, r1
 8011fc6:	4699      	movge	r9, r3
 8011fc8:	693d      	ldr	r5, [r7, #16]
 8011fca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011fce:	68bb      	ldr	r3, [r7, #8]
 8011fd0:	6879      	ldr	r1, [r7, #4]
 8011fd2:	eb05 060a 	add.w	r6, r5, sl
 8011fd6:	42b3      	cmp	r3, r6
 8011fd8:	b085      	sub	sp, #20
 8011fda:	bfb8      	it	lt
 8011fdc:	3101      	addlt	r1, #1
 8011fde:	f7ff fe93 	bl	8011d08 <_Balloc>
 8011fe2:	b930      	cbnz	r0, 8011ff2 <__multiply+0x42>
 8011fe4:	4602      	mov	r2, r0
 8011fe6:	4b41      	ldr	r3, [pc, #260]	@ (80120ec <__multiply+0x13c>)
 8011fe8:	4841      	ldr	r0, [pc, #260]	@ (80120f0 <__multiply+0x140>)
 8011fea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011fee:	f000 fc35 	bl	801285c <__assert_func>
 8011ff2:	f100 0414 	add.w	r4, r0, #20
 8011ff6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011ffa:	4623      	mov	r3, r4
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	4573      	cmp	r3, lr
 8012000:	d320      	bcc.n	8012044 <__multiply+0x94>
 8012002:	f107 0814 	add.w	r8, r7, #20
 8012006:	f109 0114 	add.w	r1, r9, #20
 801200a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801200e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8012012:	9302      	str	r3, [sp, #8]
 8012014:	1beb      	subs	r3, r5, r7
 8012016:	3b15      	subs	r3, #21
 8012018:	f023 0303 	bic.w	r3, r3, #3
 801201c:	3304      	adds	r3, #4
 801201e:	3715      	adds	r7, #21
 8012020:	42bd      	cmp	r5, r7
 8012022:	bf38      	it	cc
 8012024:	2304      	movcc	r3, #4
 8012026:	9301      	str	r3, [sp, #4]
 8012028:	9b02      	ldr	r3, [sp, #8]
 801202a:	9103      	str	r1, [sp, #12]
 801202c:	428b      	cmp	r3, r1
 801202e:	d80c      	bhi.n	801204a <__multiply+0x9a>
 8012030:	2e00      	cmp	r6, #0
 8012032:	dd03      	ble.n	801203c <__multiply+0x8c>
 8012034:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012038:	2b00      	cmp	r3, #0
 801203a:	d055      	beq.n	80120e8 <__multiply+0x138>
 801203c:	6106      	str	r6, [r0, #16]
 801203e:	b005      	add	sp, #20
 8012040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012044:	f843 2b04 	str.w	r2, [r3], #4
 8012048:	e7d9      	b.n	8011ffe <__multiply+0x4e>
 801204a:	f8b1 a000 	ldrh.w	sl, [r1]
 801204e:	f1ba 0f00 	cmp.w	sl, #0
 8012052:	d01f      	beq.n	8012094 <__multiply+0xe4>
 8012054:	46c4      	mov	ip, r8
 8012056:	46a1      	mov	r9, r4
 8012058:	2700      	movs	r7, #0
 801205a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801205e:	f8d9 3000 	ldr.w	r3, [r9]
 8012062:	fa1f fb82 	uxth.w	fp, r2
 8012066:	b29b      	uxth	r3, r3
 8012068:	fb0a 330b 	mla	r3, sl, fp, r3
 801206c:	443b      	add	r3, r7
 801206e:	f8d9 7000 	ldr.w	r7, [r9]
 8012072:	0c12      	lsrs	r2, r2, #16
 8012074:	0c3f      	lsrs	r7, r7, #16
 8012076:	fb0a 7202 	mla	r2, sl, r2, r7
 801207a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801207e:	b29b      	uxth	r3, r3
 8012080:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012084:	4565      	cmp	r5, ip
 8012086:	f849 3b04 	str.w	r3, [r9], #4
 801208a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801208e:	d8e4      	bhi.n	801205a <__multiply+0xaa>
 8012090:	9b01      	ldr	r3, [sp, #4]
 8012092:	50e7      	str	r7, [r4, r3]
 8012094:	9b03      	ldr	r3, [sp, #12]
 8012096:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801209a:	3104      	adds	r1, #4
 801209c:	f1b9 0f00 	cmp.w	r9, #0
 80120a0:	d020      	beq.n	80120e4 <__multiply+0x134>
 80120a2:	6823      	ldr	r3, [r4, #0]
 80120a4:	4647      	mov	r7, r8
 80120a6:	46a4      	mov	ip, r4
 80120a8:	f04f 0a00 	mov.w	sl, #0
 80120ac:	f8b7 b000 	ldrh.w	fp, [r7]
 80120b0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80120b4:	fb09 220b 	mla	r2, r9, fp, r2
 80120b8:	4452      	add	r2, sl
 80120ba:	b29b      	uxth	r3, r3
 80120bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80120c0:	f84c 3b04 	str.w	r3, [ip], #4
 80120c4:	f857 3b04 	ldr.w	r3, [r7], #4
 80120c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80120cc:	f8bc 3000 	ldrh.w	r3, [ip]
 80120d0:	fb09 330a 	mla	r3, r9, sl, r3
 80120d4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80120d8:	42bd      	cmp	r5, r7
 80120da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80120de:	d8e5      	bhi.n	80120ac <__multiply+0xfc>
 80120e0:	9a01      	ldr	r2, [sp, #4]
 80120e2:	50a3      	str	r3, [r4, r2]
 80120e4:	3404      	adds	r4, #4
 80120e6:	e79f      	b.n	8012028 <__multiply+0x78>
 80120e8:	3e01      	subs	r6, #1
 80120ea:	e7a1      	b.n	8012030 <__multiply+0x80>
 80120ec:	08015789 	.word	0x08015789
 80120f0:	08015826 	.word	0x08015826

080120f4 <__pow5mult>:
 80120f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120f8:	4615      	mov	r5, r2
 80120fa:	f012 0203 	ands.w	r2, r2, #3
 80120fe:	4607      	mov	r7, r0
 8012100:	460e      	mov	r6, r1
 8012102:	d007      	beq.n	8012114 <__pow5mult+0x20>
 8012104:	4c25      	ldr	r4, [pc, #148]	@ (801219c <__pow5mult+0xa8>)
 8012106:	3a01      	subs	r2, #1
 8012108:	2300      	movs	r3, #0
 801210a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801210e:	f7ff fe5d 	bl	8011dcc <__multadd>
 8012112:	4606      	mov	r6, r0
 8012114:	10ad      	asrs	r5, r5, #2
 8012116:	d03d      	beq.n	8012194 <__pow5mult+0xa0>
 8012118:	69fc      	ldr	r4, [r7, #28]
 801211a:	b97c      	cbnz	r4, 801213c <__pow5mult+0x48>
 801211c:	2010      	movs	r0, #16
 801211e:	f7ff fba5 	bl	801186c <malloc>
 8012122:	4602      	mov	r2, r0
 8012124:	61f8      	str	r0, [r7, #28]
 8012126:	b928      	cbnz	r0, 8012134 <__pow5mult+0x40>
 8012128:	4b1d      	ldr	r3, [pc, #116]	@ (80121a0 <__pow5mult+0xac>)
 801212a:	481e      	ldr	r0, [pc, #120]	@ (80121a4 <__pow5mult+0xb0>)
 801212c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012130:	f000 fb94 	bl	801285c <__assert_func>
 8012134:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012138:	6004      	str	r4, [r0, #0]
 801213a:	60c4      	str	r4, [r0, #12]
 801213c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012140:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012144:	b94c      	cbnz	r4, 801215a <__pow5mult+0x66>
 8012146:	f240 2171 	movw	r1, #625	@ 0x271
 801214a:	4638      	mov	r0, r7
 801214c:	f7ff ff1a 	bl	8011f84 <__i2b>
 8012150:	2300      	movs	r3, #0
 8012152:	f8c8 0008 	str.w	r0, [r8, #8]
 8012156:	4604      	mov	r4, r0
 8012158:	6003      	str	r3, [r0, #0]
 801215a:	f04f 0900 	mov.w	r9, #0
 801215e:	07eb      	lsls	r3, r5, #31
 8012160:	d50a      	bpl.n	8012178 <__pow5mult+0x84>
 8012162:	4631      	mov	r1, r6
 8012164:	4622      	mov	r2, r4
 8012166:	4638      	mov	r0, r7
 8012168:	f7ff ff22 	bl	8011fb0 <__multiply>
 801216c:	4631      	mov	r1, r6
 801216e:	4680      	mov	r8, r0
 8012170:	4638      	mov	r0, r7
 8012172:	f7ff fe09 	bl	8011d88 <_Bfree>
 8012176:	4646      	mov	r6, r8
 8012178:	106d      	asrs	r5, r5, #1
 801217a:	d00b      	beq.n	8012194 <__pow5mult+0xa0>
 801217c:	6820      	ldr	r0, [r4, #0]
 801217e:	b938      	cbnz	r0, 8012190 <__pow5mult+0x9c>
 8012180:	4622      	mov	r2, r4
 8012182:	4621      	mov	r1, r4
 8012184:	4638      	mov	r0, r7
 8012186:	f7ff ff13 	bl	8011fb0 <__multiply>
 801218a:	6020      	str	r0, [r4, #0]
 801218c:	f8c0 9000 	str.w	r9, [r0]
 8012190:	4604      	mov	r4, r0
 8012192:	e7e4      	b.n	801215e <__pow5mult+0x6a>
 8012194:	4630      	mov	r0, r6
 8012196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801219a:	bf00      	nop
 801219c:	08015a14 	.word	0x08015a14
 80121a0:	0801571a 	.word	0x0801571a
 80121a4:	08015826 	.word	0x08015826

080121a8 <__lshift>:
 80121a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121ac:	460c      	mov	r4, r1
 80121ae:	6849      	ldr	r1, [r1, #4]
 80121b0:	6923      	ldr	r3, [r4, #16]
 80121b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80121b6:	68a3      	ldr	r3, [r4, #8]
 80121b8:	4607      	mov	r7, r0
 80121ba:	4691      	mov	r9, r2
 80121bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80121c0:	f108 0601 	add.w	r6, r8, #1
 80121c4:	42b3      	cmp	r3, r6
 80121c6:	db0b      	blt.n	80121e0 <__lshift+0x38>
 80121c8:	4638      	mov	r0, r7
 80121ca:	f7ff fd9d 	bl	8011d08 <_Balloc>
 80121ce:	4605      	mov	r5, r0
 80121d0:	b948      	cbnz	r0, 80121e6 <__lshift+0x3e>
 80121d2:	4602      	mov	r2, r0
 80121d4:	4b28      	ldr	r3, [pc, #160]	@ (8012278 <__lshift+0xd0>)
 80121d6:	4829      	ldr	r0, [pc, #164]	@ (801227c <__lshift+0xd4>)
 80121d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80121dc:	f000 fb3e 	bl	801285c <__assert_func>
 80121e0:	3101      	adds	r1, #1
 80121e2:	005b      	lsls	r3, r3, #1
 80121e4:	e7ee      	b.n	80121c4 <__lshift+0x1c>
 80121e6:	2300      	movs	r3, #0
 80121e8:	f100 0114 	add.w	r1, r0, #20
 80121ec:	f100 0210 	add.w	r2, r0, #16
 80121f0:	4618      	mov	r0, r3
 80121f2:	4553      	cmp	r3, sl
 80121f4:	db33      	blt.n	801225e <__lshift+0xb6>
 80121f6:	6920      	ldr	r0, [r4, #16]
 80121f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80121fc:	f104 0314 	add.w	r3, r4, #20
 8012200:	f019 091f 	ands.w	r9, r9, #31
 8012204:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012208:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801220c:	d02b      	beq.n	8012266 <__lshift+0xbe>
 801220e:	f1c9 0e20 	rsb	lr, r9, #32
 8012212:	468a      	mov	sl, r1
 8012214:	2200      	movs	r2, #0
 8012216:	6818      	ldr	r0, [r3, #0]
 8012218:	fa00 f009 	lsl.w	r0, r0, r9
 801221c:	4310      	orrs	r0, r2
 801221e:	f84a 0b04 	str.w	r0, [sl], #4
 8012222:	f853 2b04 	ldr.w	r2, [r3], #4
 8012226:	459c      	cmp	ip, r3
 8012228:	fa22 f20e 	lsr.w	r2, r2, lr
 801222c:	d8f3      	bhi.n	8012216 <__lshift+0x6e>
 801222e:	ebac 0304 	sub.w	r3, ip, r4
 8012232:	3b15      	subs	r3, #21
 8012234:	f023 0303 	bic.w	r3, r3, #3
 8012238:	3304      	adds	r3, #4
 801223a:	f104 0015 	add.w	r0, r4, #21
 801223e:	4560      	cmp	r0, ip
 8012240:	bf88      	it	hi
 8012242:	2304      	movhi	r3, #4
 8012244:	50ca      	str	r2, [r1, r3]
 8012246:	b10a      	cbz	r2, 801224c <__lshift+0xa4>
 8012248:	f108 0602 	add.w	r6, r8, #2
 801224c:	3e01      	subs	r6, #1
 801224e:	4638      	mov	r0, r7
 8012250:	612e      	str	r6, [r5, #16]
 8012252:	4621      	mov	r1, r4
 8012254:	f7ff fd98 	bl	8011d88 <_Bfree>
 8012258:	4628      	mov	r0, r5
 801225a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801225e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012262:	3301      	adds	r3, #1
 8012264:	e7c5      	b.n	80121f2 <__lshift+0x4a>
 8012266:	3904      	subs	r1, #4
 8012268:	f853 2b04 	ldr.w	r2, [r3], #4
 801226c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012270:	459c      	cmp	ip, r3
 8012272:	d8f9      	bhi.n	8012268 <__lshift+0xc0>
 8012274:	e7ea      	b.n	801224c <__lshift+0xa4>
 8012276:	bf00      	nop
 8012278:	08015789 	.word	0x08015789
 801227c:	08015826 	.word	0x08015826

08012280 <__mcmp>:
 8012280:	690a      	ldr	r2, [r1, #16]
 8012282:	4603      	mov	r3, r0
 8012284:	6900      	ldr	r0, [r0, #16]
 8012286:	1a80      	subs	r0, r0, r2
 8012288:	b530      	push	{r4, r5, lr}
 801228a:	d10e      	bne.n	80122aa <__mcmp+0x2a>
 801228c:	3314      	adds	r3, #20
 801228e:	3114      	adds	r1, #20
 8012290:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012294:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012298:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801229c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80122a0:	4295      	cmp	r5, r2
 80122a2:	d003      	beq.n	80122ac <__mcmp+0x2c>
 80122a4:	d205      	bcs.n	80122b2 <__mcmp+0x32>
 80122a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80122aa:	bd30      	pop	{r4, r5, pc}
 80122ac:	42a3      	cmp	r3, r4
 80122ae:	d3f3      	bcc.n	8012298 <__mcmp+0x18>
 80122b0:	e7fb      	b.n	80122aa <__mcmp+0x2a>
 80122b2:	2001      	movs	r0, #1
 80122b4:	e7f9      	b.n	80122aa <__mcmp+0x2a>
	...

080122b8 <__mdiff>:
 80122b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122bc:	4689      	mov	r9, r1
 80122be:	4606      	mov	r6, r0
 80122c0:	4611      	mov	r1, r2
 80122c2:	4648      	mov	r0, r9
 80122c4:	4614      	mov	r4, r2
 80122c6:	f7ff ffdb 	bl	8012280 <__mcmp>
 80122ca:	1e05      	subs	r5, r0, #0
 80122cc:	d112      	bne.n	80122f4 <__mdiff+0x3c>
 80122ce:	4629      	mov	r1, r5
 80122d0:	4630      	mov	r0, r6
 80122d2:	f7ff fd19 	bl	8011d08 <_Balloc>
 80122d6:	4602      	mov	r2, r0
 80122d8:	b928      	cbnz	r0, 80122e6 <__mdiff+0x2e>
 80122da:	4b3f      	ldr	r3, [pc, #252]	@ (80123d8 <__mdiff+0x120>)
 80122dc:	f240 2137 	movw	r1, #567	@ 0x237
 80122e0:	483e      	ldr	r0, [pc, #248]	@ (80123dc <__mdiff+0x124>)
 80122e2:	f000 fabb 	bl	801285c <__assert_func>
 80122e6:	2301      	movs	r3, #1
 80122e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80122ec:	4610      	mov	r0, r2
 80122ee:	b003      	add	sp, #12
 80122f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122f4:	bfbc      	itt	lt
 80122f6:	464b      	movlt	r3, r9
 80122f8:	46a1      	movlt	r9, r4
 80122fa:	4630      	mov	r0, r6
 80122fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012300:	bfba      	itte	lt
 8012302:	461c      	movlt	r4, r3
 8012304:	2501      	movlt	r5, #1
 8012306:	2500      	movge	r5, #0
 8012308:	f7ff fcfe 	bl	8011d08 <_Balloc>
 801230c:	4602      	mov	r2, r0
 801230e:	b918      	cbnz	r0, 8012318 <__mdiff+0x60>
 8012310:	4b31      	ldr	r3, [pc, #196]	@ (80123d8 <__mdiff+0x120>)
 8012312:	f240 2145 	movw	r1, #581	@ 0x245
 8012316:	e7e3      	b.n	80122e0 <__mdiff+0x28>
 8012318:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801231c:	6926      	ldr	r6, [r4, #16]
 801231e:	60c5      	str	r5, [r0, #12]
 8012320:	f109 0310 	add.w	r3, r9, #16
 8012324:	f109 0514 	add.w	r5, r9, #20
 8012328:	f104 0e14 	add.w	lr, r4, #20
 801232c:	f100 0b14 	add.w	fp, r0, #20
 8012330:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012334:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012338:	9301      	str	r3, [sp, #4]
 801233a:	46d9      	mov	r9, fp
 801233c:	f04f 0c00 	mov.w	ip, #0
 8012340:	9b01      	ldr	r3, [sp, #4]
 8012342:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012346:	f853 af04 	ldr.w	sl, [r3, #4]!
 801234a:	9301      	str	r3, [sp, #4]
 801234c:	fa1f f38a 	uxth.w	r3, sl
 8012350:	4619      	mov	r1, r3
 8012352:	b283      	uxth	r3, r0
 8012354:	1acb      	subs	r3, r1, r3
 8012356:	0c00      	lsrs	r0, r0, #16
 8012358:	4463      	add	r3, ip
 801235a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801235e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012362:	b29b      	uxth	r3, r3
 8012364:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012368:	4576      	cmp	r6, lr
 801236a:	f849 3b04 	str.w	r3, [r9], #4
 801236e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012372:	d8e5      	bhi.n	8012340 <__mdiff+0x88>
 8012374:	1b33      	subs	r3, r6, r4
 8012376:	3b15      	subs	r3, #21
 8012378:	f023 0303 	bic.w	r3, r3, #3
 801237c:	3415      	adds	r4, #21
 801237e:	3304      	adds	r3, #4
 8012380:	42a6      	cmp	r6, r4
 8012382:	bf38      	it	cc
 8012384:	2304      	movcc	r3, #4
 8012386:	441d      	add	r5, r3
 8012388:	445b      	add	r3, fp
 801238a:	461e      	mov	r6, r3
 801238c:	462c      	mov	r4, r5
 801238e:	4544      	cmp	r4, r8
 8012390:	d30e      	bcc.n	80123b0 <__mdiff+0xf8>
 8012392:	f108 0103 	add.w	r1, r8, #3
 8012396:	1b49      	subs	r1, r1, r5
 8012398:	f021 0103 	bic.w	r1, r1, #3
 801239c:	3d03      	subs	r5, #3
 801239e:	45a8      	cmp	r8, r5
 80123a0:	bf38      	it	cc
 80123a2:	2100      	movcc	r1, #0
 80123a4:	440b      	add	r3, r1
 80123a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80123aa:	b191      	cbz	r1, 80123d2 <__mdiff+0x11a>
 80123ac:	6117      	str	r7, [r2, #16]
 80123ae:	e79d      	b.n	80122ec <__mdiff+0x34>
 80123b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80123b4:	46e6      	mov	lr, ip
 80123b6:	0c08      	lsrs	r0, r1, #16
 80123b8:	fa1c fc81 	uxtah	ip, ip, r1
 80123bc:	4471      	add	r1, lr
 80123be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80123c2:	b289      	uxth	r1, r1
 80123c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80123c8:	f846 1b04 	str.w	r1, [r6], #4
 80123cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80123d0:	e7dd      	b.n	801238e <__mdiff+0xd6>
 80123d2:	3f01      	subs	r7, #1
 80123d4:	e7e7      	b.n	80123a6 <__mdiff+0xee>
 80123d6:	bf00      	nop
 80123d8:	08015789 	.word	0x08015789
 80123dc:	08015826 	.word	0x08015826

080123e0 <__ulp>:
 80123e0:	b082      	sub	sp, #8
 80123e2:	ed8d 0b00 	vstr	d0, [sp]
 80123e6:	9a01      	ldr	r2, [sp, #4]
 80123e8:	4b0f      	ldr	r3, [pc, #60]	@ (8012428 <__ulp+0x48>)
 80123ea:	4013      	ands	r3, r2
 80123ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	dc08      	bgt.n	8012406 <__ulp+0x26>
 80123f4:	425b      	negs	r3, r3
 80123f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80123fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80123fe:	da04      	bge.n	801240a <__ulp+0x2a>
 8012400:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012404:	4113      	asrs	r3, r2
 8012406:	2200      	movs	r2, #0
 8012408:	e008      	b.n	801241c <__ulp+0x3c>
 801240a:	f1a2 0314 	sub.w	r3, r2, #20
 801240e:	2b1e      	cmp	r3, #30
 8012410:	bfda      	itte	le
 8012412:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012416:	40da      	lsrle	r2, r3
 8012418:	2201      	movgt	r2, #1
 801241a:	2300      	movs	r3, #0
 801241c:	4619      	mov	r1, r3
 801241e:	4610      	mov	r0, r2
 8012420:	ec41 0b10 	vmov	d0, r0, r1
 8012424:	b002      	add	sp, #8
 8012426:	4770      	bx	lr
 8012428:	7ff00000 	.word	0x7ff00000

0801242c <__b2d>:
 801242c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012430:	6906      	ldr	r6, [r0, #16]
 8012432:	f100 0814 	add.w	r8, r0, #20
 8012436:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801243a:	1f37      	subs	r7, r6, #4
 801243c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012440:	4610      	mov	r0, r2
 8012442:	f7ff fd53 	bl	8011eec <__hi0bits>
 8012446:	f1c0 0320 	rsb	r3, r0, #32
 801244a:	280a      	cmp	r0, #10
 801244c:	600b      	str	r3, [r1, #0]
 801244e:	491b      	ldr	r1, [pc, #108]	@ (80124bc <__b2d+0x90>)
 8012450:	dc15      	bgt.n	801247e <__b2d+0x52>
 8012452:	f1c0 0c0b 	rsb	ip, r0, #11
 8012456:	fa22 f30c 	lsr.w	r3, r2, ip
 801245a:	45b8      	cmp	r8, r7
 801245c:	ea43 0501 	orr.w	r5, r3, r1
 8012460:	bf34      	ite	cc
 8012462:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012466:	2300      	movcs	r3, #0
 8012468:	3015      	adds	r0, #21
 801246a:	fa02 f000 	lsl.w	r0, r2, r0
 801246e:	fa23 f30c 	lsr.w	r3, r3, ip
 8012472:	4303      	orrs	r3, r0
 8012474:	461c      	mov	r4, r3
 8012476:	ec45 4b10 	vmov	d0, r4, r5
 801247a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801247e:	45b8      	cmp	r8, r7
 8012480:	bf3a      	itte	cc
 8012482:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012486:	f1a6 0708 	subcc.w	r7, r6, #8
 801248a:	2300      	movcs	r3, #0
 801248c:	380b      	subs	r0, #11
 801248e:	d012      	beq.n	80124b6 <__b2d+0x8a>
 8012490:	f1c0 0120 	rsb	r1, r0, #32
 8012494:	fa23 f401 	lsr.w	r4, r3, r1
 8012498:	4082      	lsls	r2, r0
 801249a:	4322      	orrs	r2, r4
 801249c:	4547      	cmp	r7, r8
 801249e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80124a2:	bf8c      	ite	hi
 80124a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80124a8:	2200      	movls	r2, #0
 80124aa:	4083      	lsls	r3, r0
 80124ac:	40ca      	lsrs	r2, r1
 80124ae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80124b2:	4313      	orrs	r3, r2
 80124b4:	e7de      	b.n	8012474 <__b2d+0x48>
 80124b6:	ea42 0501 	orr.w	r5, r2, r1
 80124ba:	e7db      	b.n	8012474 <__b2d+0x48>
 80124bc:	3ff00000 	.word	0x3ff00000

080124c0 <__d2b>:
 80124c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80124c4:	460f      	mov	r7, r1
 80124c6:	2101      	movs	r1, #1
 80124c8:	ec59 8b10 	vmov	r8, r9, d0
 80124cc:	4616      	mov	r6, r2
 80124ce:	f7ff fc1b 	bl	8011d08 <_Balloc>
 80124d2:	4604      	mov	r4, r0
 80124d4:	b930      	cbnz	r0, 80124e4 <__d2b+0x24>
 80124d6:	4602      	mov	r2, r0
 80124d8:	4b23      	ldr	r3, [pc, #140]	@ (8012568 <__d2b+0xa8>)
 80124da:	4824      	ldr	r0, [pc, #144]	@ (801256c <__d2b+0xac>)
 80124dc:	f240 310f 	movw	r1, #783	@ 0x30f
 80124e0:	f000 f9bc 	bl	801285c <__assert_func>
 80124e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80124e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80124ec:	b10d      	cbz	r5, 80124f2 <__d2b+0x32>
 80124ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80124f2:	9301      	str	r3, [sp, #4]
 80124f4:	f1b8 0300 	subs.w	r3, r8, #0
 80124f8:	d023      	beq.n	8012542 <__d2b+0x82>
 80124fa:	4668      	mov	r0, sp
 80124fc:	9300      	str	r3, [sp, #0]
 80124fe:	f7ff fd14 	bl	8011f2a <__lo0bits>
 8012502:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012506:	b1d0      	cbz	r0, 801253e <__d2b+0x7e>
 8012508:	f1c0 0320 	rsb	r3, r0, #32
 801250c:	fa02 f303 	lsl.w	r3, r2, r3
 8012510:	430b      	orrs	r3, r1
 8012512:	40c2      	lsrs	r2, r0
 8012514:	6163      	str	r3, [r4, #20]
 8012516:	9201      	str	r2, [sp, #4]
 8012518:	9b01      	ldr	r3, [sp, #4]
 801251a:	61a3      	str	r3, [r4, #24]
 801251c:	2b00      	cmp	r3, #0
 801251e:	bf0c      	ite	eq
 8012520:	2201      	moveq	r2, #1
 8012522:	2202      	movne	r2, #2
 8012524:	6122      	str	r2, [r4, #16]
 8012526:	b1a5      	cbz	r5, 8012552 <__d2b+0x92>
 8012528:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801252c:	4405      	add	r5, r0
 801252e:	603d      	str	r5, [r7, #0]
 8012530:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012534:	6030      	str	r0, [r6, #0]
 8012536:	4620      	mov	r0, r4
 8012538:	b003      	add	sp, #12
 801253a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801253e:	6161      	str	r1, [r4, #20]
 8012540:	e7ea      	b.n	8012518 <__d2b+0x58>
 8012542:	a801      	add	r0, sp, #4
 8012544:	f7ff fcf1 	bl	8011f2a <__lo0bits>
 8012548:	9b01      	ldr	r3, [sp, #4]
 801254a:	6163      	str	r3, [r4, #20]
 801254c:	3020      	adds	r0, #32
 801254e:	2201      	movs	r2, #1
 8012550:	e7e8      	b.n	8012524 <__d2b+0x64>
 8012552:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012556:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801255a:	6038      	str	r0, [r7, #0]
 801255c:	6918      	ldr	r0, [r3, #16]
 801255e:	f7ff fcc5 	bl	8011eec <__hi0bits>
 8012562:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012566:	e7e5      	b.n	8012534 <__d2b+0x74>
 8012568:	08015789 	.word	0x08015789
 801256c:	08015826 	.word	0x08015826

08012570 <__ratio>:
 8012570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012574:	b085      	sub	sp, #20
 8012576:	e9cd 1000 	strd	r1, r0, [sp]
 801257a:	a902      	add	r1, sp, #8
 801257c:	f7ff ff56 	bl	801242c <__b2d>
 8012580:	9800      	ldr	r0, [sp, #0]
 8012582:	a903      	add	r1, sp, #12
 8012584:	ec55 4b10 	vmov	r4, r5, d0
 8012588:	f7ff ff50 	bl	801242c <__b2d>
 801258c:	9b01      	ldr	r3, [sp, #4]
 801258e:	6919      	ldr	r1, [r3, #16]
 8012590:	9b00      	ldr	r3, [sp, #0]
 8012592:	691b      	ldr	r3, [r3, #16]
 8012594:	1ac9      	subs	r1, r1, r3
 8012596:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801259a:	1a9b      	subs	r3, r3, r2
 801259c:	ec5b ab10 	vmov	sl, fp, d0
 80125a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	bfce      	itee	gt
 80125a8:	462a      	movgt	r2, r5
 80125aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80125ae:	465a      	movle	r2, fp
 80125b0:	462f      	mov	r7, r5
 80125b2:	46d9      	mov	r9, fp
 80125b4:	bfcc      	ite	gt
 80125b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80125ba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80125be:	464b      	mov	r3, r9
 80125c0:	4652      	mov	r2, sl
 80125c2:	4620      	mov	r0, r4
 80125c4:	4639      	mov	r1, r7
 80125c6:	f7ee f961 	bl	800088c <__aeabi_ddiv>
 80125ca:	ec41 0b10 	vmov	d0, r0, r1
 80125ce:	b005      	add	sp, #20
 80125d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080125d4 <__copybits>:
 80125d4:	3901      	subs	r1, #1
 80125d6:	b570      	push	{r4, r5, r6, lr}
 80125d8:	1149      	asrs	r1, r1, #5
 80125da:	6914      	ldr	r4, [r2, #16]
 80125dc:	3101      	adds	r1, #1
 80125de:	f102 0314 	add.w	r3, r2, #20
 80125e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80125e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80125ea:	1f05      	subs	r5, r0, #4
 80125ec:	42a3      	cmp	r3, r4
 80125ee:	d30c      	bcc.n	801260a <__copybits+0x36>
 80125f0:	1aa3      	subs	r3, r4, r2
 80125f2:	3b11      	subs	r3, #17
 80125f4:	f023 0303 	bic.w	r3, r3, #3
 80125f8:	3211      	adds	r2, #17
 80125fa:	42a2      	cmp	r2, r4
 80125fc:	bf88      	it	hi
 80125fe:	2300      	movhi	r3, #0
 8012600:	4418      	add	r0, r3
 8012602:	2300      	movs	r3, #0
 8012604:	4288      	cmp	r0, r1
 8012606:	d305      	bcc.n	8012614 <__copybits+0x40>
 8012608:	bd70      	pop	{r4, r5, r6, pc}
 801260a:	f853 6b04 	ldr.w	r6, [r3], #4
 801260e:	f845 6f04 	str.w	r6, [r5, #4]!
 8012612:	e7eb      	b.n	80125ec <__copybits+0x18>
 8012614:	f840 3b04 	str.w	r3, [r0], #4
 8012618:	e7f4      	b.n	8012604 <__copybits+0x30>

0801261a <__any_on>:
 801261a:	f100 0214 	add.w	r2, r0, #20
 801261e:	6900      	ldr	r0, [r0, #16]
 8012620:	114b      	asrs	r3, r1, #5
 8012622:	4298      	cmp	r0, r3
 8012624:	b510      	push	{r4, lr}
 8012626:	db11      	blt.n	801264c <__any_on+0x32>
 8012628:	dd0a      	ble.n	8012640 <__any_on+0x26>
 801262a:	f011 011f 	ands.w	r1, r1, #31
 801262e:	d007      	beq.n	8012640 <__any_on+0x26>
 8012630:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012634:	fa24 f001 	lsr.w	r0, r4, r1
 8012638:	fa00 f101 	lsl.w	r1, r0, r1
 801263c:	428c      	cmp	r4, r1
 801263e:	d10b      	bne.n	8012658 <__any_on+0x3e>
 8012640:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012644:	4293      	cmp	r3, r2
 8012646:	d803      	bhi.n	8012650 <__any_on+0x36>
 8012648:	2000      	movs	r0, #0
 801264a:	bd10      	pop	{r4, pc}
 801264c:	4603      	mov	r3, r0
 801264e:	e7f7      	b.n	8012640 <__any_on+0x26>
 8012650:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012654:	2900      	cmp	r1, #0
 8012656:	d0f5      	beq.n	8012644 <__any_on+0x2a>
 8012658:	2001      	movs	r0, #1
 801265a:	e7f6      	b.n	801264a <__any_on+0x30>

0801265c <__submore>:
 801265c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012660:	460c      	mov	r4, r1
 8012662:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012664:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012668:	4299      	cmp	r1, r3
 801266a:	d11d      	bne.n	80126a8 <__submore+0x4c>
 801266c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012670:	f7fb ff12 	bl	800e498 <_malloc_r>
 8012674:	b918      	cbnz	r0, 801267e <__submore+0x22>
 8012676:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801267a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801267e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012682:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012684:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012688:	6360      	str	r0, [r4, #52]	@ 0x34
 801268a:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801268e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012692:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012696:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801269a:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801269e:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80126a2:	6020      	str	r0, [r4, #0]
 80126a4:	2000      	movs	r0, #0
 80126a6:	e7e8      	b.n	801267a <__submore+0x1e>
 80126a8:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80126aa:	0077      	lsls	r7, r6, #1
 80126ac:	463a      	mov	r2, r7
 80126ae:	f000 f80f 	bl	80126d0 <_realloc_r>
 80126b2:	4605      	mov	r5, r0
 80126b4:	2800      	cmp	r0, #0
 80126b6:	d0de      	beq.n	8012676 <__submore+0x1a>
 80126b8:	eb00 0806 	add.w	r8, r0, r6
 80126bc:	4601      	mov	r1, r0
 80126be:	4632      	mov	r2, r6
 80126c0:	4640      	mov	r0, r8
 80126c2:	f7fd fbb1 	bl	800fe28 <memcpy>
 80126c6:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80126ca:	f8c4 8000 	str.w	r8, [r4]
 80126ce:	e7e9      	b.n	80126a4 <__submore+0x48>

080126d0 <_realloc_r>:
 80126d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126d4:	4607      	mov	r7, r0
 80126d6:	4614      	mov	r4, r2
 80126d8:	460d      	mov	r5, r1
 80126da:	b921      	cbnz	r1, 80126e6 <_realloc_r+0x16>
 80126dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126e0:	4611      	mov	r1, r2
 80126e2:	f7fb bed9 	b.w	800e498 <_malloc_r>
 80126e6:	b92a      	cbnz	r2, 80126f4 <_realloc_r+0x24>
 80126e8:	f7fe fa16 	bl	8010b18 <_free_r>
 80126ec:	4625      	mov	r5, r4
 80126ee:	4628      	mov	r0, r5
 80126f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126f4:	f000 f8d0 	bl	8012898 <_malloc_usable_size_r>
 80126f8:	4284      	cmp	r4, r0
 80126fa:	4606      	mov	r6, r0
 80126fc:	d802      	bhi.n	8012704 <_realloc_r+0x34>
 80126fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012702:	d8f4      	bhi.n	80126ee <_realloc_r+0x1e>
 8012704:	4621      	mov	r1, r4
 8012706:	4638      	mov	r0, r7
 8012708:	f7fb fec6 	bl	800e498 <_malloc_r>
 801270c:	4680      	mov	r8, r0
 801270e:	b908      	cbnz	r0, 8012714 <_realloc_r+0x44>
 8012710:	4645      	mov	r5, r8
 8012712:	e7ec      	b.n	80126ee <_realloc_r+0x1e>
 8012714:	42b4      	cmp	r4, r6
 8012716:	4622      	mov	r2, r4
 8012718:	4629      	mov	r1, r5
 801271a:	bf28      	it	cs
 801271c:	4632      	movcs	r2, r6
 801271e:	f7fd fb83 	bl	800fe28 <memcpy>
 8012722:	4629      	mov	r1, r5
 8012724:	4638      	mov	r0, r7
 8012726:	f7fe f9f7 	bl	8010b18 <_free_r>
 801272a:	e7f1      	b.n	8012710 <_realloc_r+0x40>

0801272c <_strtoul_l.isra.0>:
 801272c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012730:	4e34      	ldr	r6, [pc, #208]	@ (8012804 <_strtoul_l.isra.0+0xd8>)
 8012732:	4686      	mov	lr, r0
 8012734:	460d      	mov	r5, r1
 8012736:	4628      	mov	r0, r5
 8012738:	f815 4b01 	ldrb.w	r4, [r5], #1
 801273c:	5d37      	ldrb	r7, [r6, r4]
 801273e:	f017 0708 	ands.w	r7, r7, #8
 8012742:	d1f8      	bne.n	8012736 <_strtoul_l.isra.0+0xa>
 8012744:	2c2d      	cmp	r4, #45	@ 0x2d
 8012746:	d110      	bne.n	801276a <_strtoul_l.isra.0+0x3e>
 8012748:	782c      	ldrb	r4, [r5, #0]
 801274a:	2701      	movs	r7, #1
 801274c:	1c85      	adds	r5, r0, #2
 801274e:	f033 0010 	bics.w	r0, r3, #16
 8012752:	d115      	bne.n	8012780 <_strtoul_l.isra.0+0x54>
 8012754:	2c30      	cmp	r4, #48	@ 0x30
 8012756:	d10d      	bne.n	8012774 <_strtoul_l.isra.0+0x48>
 8012758:	7828      	ldrb	r0, [r5, #0]
 801275a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801275e:	2858      	cmp	r0, #88	@ 0x58
 8012760:	d108      	bne.n	8012774 <_strtoul_l.isra.0+0x48>
 8012762:	786c      	ldrb	r4, [r5, #1]
 8012764:	3502      	adds	r5, #2
 8012766:	2310      	movs	r3, #16
 8012768:	e00a      	b.n	8012780 <_strtoul_l.isra.0+0x54>
 801276a:	2c2b      	cmp	r4, #43	@ 0x2b
 801276c:	bf04      	itt	eq
 801276e:	782c      	ldrbeq	r4, [r5, #0]
 8012770:	1c85      	addeq	r5, r0, #2
 8012772:	e7ec      	b.n	801274e <_strtoul_l.isra.0+0x22>
 8012774:	2b00      	cmp	r3, #0
 8012776:	d1f6      	bne.n	8012766 <_strtoul_l.isra.0+0x3a>
 8012778:	2c30      	cmp	r4, #48	@ 0x30
 801277a:	bf14      	ite	ne
 801277c:	230a      	movne	r3, #10
 801277e:	2308      	moveq	r3, #8
 8012780:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8012784:	2600      	movs	r6, #0
 8012786:	fbb8 f8f3 	udiv	r8, r8, r3
 801278a:	fb03 f908 	mul.w	r9, r3, r8
 801278e:	ea6f 0909 	mvn.w	r9, r9
 8012792:	4630      	mov	r0, r6
 8012794:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012798:	f1bc 0f09 	cmp.w	ip, #9
 801279c:	d810      	bhi.n	80127c0 <_strtoul_l.isra.0+0x94>
 801279e:	4664      	mov	r4, ip
 80127a0:	42a3      	cmp	r3, r4
 80127a2:	dd1e      	ble.n	80127e2 <_strtoul_l.isra.0+0xb6>
 80127a4:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80127a8:	d007      	beq.n	80127ba <_strtoul_l.isra.0+0x8e>
 80127aa:	4580      	cmp	r8, r0
 80127ac:	d316      	bcc.n	80127dc <_strtoul_l.isra.0+0xb0>
 80127ae:	d101      	bne.n	80127b4 <_strtoul_l.isra.0+0x88>
 80127b0:	45a1      	cmp	r9, r4
 80127b2:	db13      	blt.n	80127dc <_strtoul_l.isra.0+0xb0>
 80127b4:	fb00 4003 	mla	r0, r0, r3, r4
 80127b8:	2601      	movs	r6, #1
 80127ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80127be:	e7e9      	b.n	8012794 <_strtoul_l.isra.0+0x68>
 80127c0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80127c4:	f1bc 0f19 	cmp.w	ip, #25
 80127c8:	d801      	bhi.n	80127ce <_strtoul_l.isra.0+0xa2>
 80127ca:	3c37      	subs	r4, #55	@ 0x37
 80127cc:	e7e8      	b.n	80127a0 <_strtoul_l.isra.0+0x74>
 80127ce:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80127d2:	f1bc 0f19 	cmp.w	ip, #25
 80127d6:	d804      	bhi.n	80127e2 <_strtoul_l.isra.0+0xb6>
 80127d8:	3c57      	subs	r4, #87	@ 0x57
 80127da:	e7e1      	b.n	80127a0 <_strtoul_l.isra.0+0x74>
 80127dc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80127e0:	e7eb      	b.n	80127ba <_strtoul_l.isra.0+0x8e>
 80127e2:	1c73      	adds	r3, r6, #1
 80127e4:	d106      	bne.n	80127f4 <_strtoul_l.isra.0+0xc8>
 80127e6:	2322      	movs	r3, #34	@ 0x22
 80127e8:	f8ce 3000 	str.w	r3, [lr]
 80127ec:	4630      	mov	r0, r6
 80127ee:	b932      	cbnz	r2, 80127fe <_strtoul_l.isra.0+0xd2>
 80127f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127f4:	b107      	cbz	r7, 80127f8 <_strtoul_l.isra.0+0xcc>
 80127f6:	4240      	negs	r0, r0
 80127f8:	2a00      	cmp	r2, #0
 80127fa:	d0f9      	beq.n	80127f0 <_strtoul_l.isra.0+0xc4>
 80127fc:	b106      	cbz	r6, 8012800 <_strtoul_l.isra.0+0xd4>
 80127fe:	1e69      	subs	r1, r5, #1
 8012800:	6011      	str	r1, [r2, #0]
 8012802:	e7f5      	b.n	80127f0 <_strtoul_l.isra.0+0xc4>
 8012804:	08015911 	.word	0x08015911

08012808 <_strtoul_r>:
 8012808:	f7ff bf90 	b.w	801272c <_strtoul_l.isra.0>

0801280c <__ascii_wctomb>:
 801280c:	4603      	mov	r3, r0
 801280e:	4608      	mov	r0, r1
 8012810:	b141      	cbz	r1, 8012824 <__ascii_wctomb+0x18>
 8012812:	2aff      	cmp	r2, #255	@ 0xff
 8012814:	d904      	bls.n	8012820 <__ascii_wctomb+0x14>
 8012816:	228a      	movs	r2, #138	@ 0x8a
 8012818:	601a      	str	r2, [r3, #0]
 801281a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801281e:	4770      	bx	lr
 8012820:	700a      	strb	r2, [r1, #0]
 8012822:	2001      	movs	r0, #1
 8012824:	4770      	bx	lr

08012826 <memmove>:
 8012826:	4288      	cmp	r0, r1
 8012828:	b510      	push	{r4, lr}
 801282a:	eb01 0402 	add.w	r4, r1, r2
 801282e:	d902      	bls.n	8012836 <memmove+0x10>
 8012830:	4284      	cmp	r4, r0
 8012832:	4623      	mov	r3, r4
 8012834:	d807      	bhi.n	8012846 <memmove+0x20>
 8012836:	1e43      	subs	r3, r0, #1
 8012838:	42a1      	cmp	r1, r4
 801283a:	d008      	beq.n	801284e <memmove+0x28>
 801283c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012840:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012844:	e7f8      	b.n	8012838 <memmove+0x12>
 8012846:	4402      	add	r2, r0
 8012848:	4601      	mov	r1, r0
 801284a:	428a      	cmp	r2, r1
 801284c:	d100      	bne.n	8012850 <memmove+0x2a>
 801284e:	bd10      	pop	{r4, pc}
 8012850:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012854:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012858:	e7f7      	b.n	801284a <memmove+0x24>
	...

0801285c <__assert_func>:
 801285c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801285e:	4614      	mov	r4, r2
 8012860:	461a      	mov	r2, r3
 8012862:	4b09      	ldr	r3, [pc, #36]	@ (8012888 <__assert_func+0x2c>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	4605      	mov	r5, r0
 8012868:	68d8      	ldr	r0, [r3, #12]
 801286a:	b14c      	cbz	r4, 8012880 <__assert_func+0x24>
 801286c:	4b07      	ldr	r3, [pc, #28]	@ (801288c <__assert_func+0x30>)
 801286e:	9100      	str	r1, [sp, #0]
 8012870:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012874:	4906      	ldr	r1, [pc, #24]	@ (8012890 <__assert_func+0x34>)
 8012876:	462b      	mov	r3, r5
 8012878:	f000 f816 	bl	80128a8 <fiprintf>
 801287c:	f000 f826 	bl	80128cc <abort>
 8012880:	4b04      	ldr	r3, [pc, #16]	@ (8012894 <__assert_func+0x38>)
 8012882:	461c      	mov	r4, r3
 8012884:	e7f3      	b.n	801286e <__assert_func+0x12>
 8012886:	bf00      	nop
 8012888:	200001c4 	.word	0x200001c4
 801288c:	0801587f 	.word	0x0801587f
 8012890:	0801588c 	.word	0x0801588c
 8012894:	080158ba 	.word	0x080158ba

08012898 <_malloc_usable_size_r>:
 8012898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801289c:	1f18      	subs	r0, r3, #4
 801289e:	2b00      	cmp	r3, #0
 80128a0:	bfbc      	itt	lt
 80128a2:	580b      	ldrlt	r3, [r1, r0]
 80128a4:	18c0      	addlt	r0, r0, r3
 80128a6:	4770      	bx	lr

080128a8 <fiprintf>:
 80128a8:	b40e      	push	{r1, r2, r3}
 80128aa:	b503      	push	{r0, r1, lr}
 80128ac:	4601      	mov	r1, r0
 80128ae:	ab03      	add	r3, sp, #12
 80128b0:	4805      	ldr	r0, [pc, #20]	@ (80128c8 <fiprintf+0x20>)
 80128b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80128b6:	6800      	ldr	r0, [r0, #0]
 80128b8:	9301      	str	r3, [sp, #4]
 80128ba:	f000 f837 	bl	801292c <_vfiprintf_r>
 80128be:	b002      	add	sp, #8
 80128c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80128c4:	b003      	add	sp, #12
 80128c6:	4770      	bx	lr
 80128c8:	200001c4 	.word	0x200001c4

080128cc <abort>:
 80128cc:	b508      	push	{r3, lr}
 80128ce:	2006      	movs	r0, #6
 80128d0:	f000 fa62 	bl	8012d98 <raise>
 80128d4:	2001      	movs	r0, #1
 80128d6:	f7f5 fd2f 	bl	8008338 <_exit>

080128da <__sfputc_r>:
 80128da:	6893      	ldr	r3, [r2, #8]
 80128dc:	3b01      	subs	r3, #1
 80128de:	2b00      	cmp	r3, #0
 80128e0:	b410      	push	{r4}
 80128e2:	6093      	str	r3, [r2, #8]
 80128e4:	da08      	bge.n	80128f8 <__sfputc_r+0x1e>
 80128e6:	6994      	ldr	r4, [r2, #24]
 80128e8:	42a3      	cmp	r3, r4
 80128ea:	db01      	blt.n	80128f0 <__sfputc_r+0x16>
 80128ec:	290a      	cmp	r1, #10
 80128ee:	d103      	bne.n	80128f8 <__sfputc_r+0x1e>
 80128f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80128f4:	f000 b932 	b.w	8012b5c <__swbuf_r>
 80128f8:	6813      	ldr	r3, [r2, #0]
 80128fa:	1c58      	adds	r0, r3, #1
 80128fc:	6010      	str	r0, [r2, #0]
 80128fe:	7019      	strb	r1, [r3, #0]
 8012900:	4608      	mov	r0, r1
 8012902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012906:	4770      	bx	lr

08012908 <__sfputs_r>:
 8012908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801290a:	4606      	mov	r6, r0
 801290c:	460f      	mov	r7, r1
 801290e:	4614      	mov	r4, r2
 8012910:	18d5      	adds	r5, r2, r3
 8012912:	42ac      	cmp	r4, r5
 8012914:	d101      	bne.n	801291a <__sfputs_r+0x12>
 8012916:	2000      	movs	r0, #0
 8012918:	e007      	b.n	801292a <__sfputs_r+0x22>
 801291a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801291e:	463a      	mov	r2, r7
 8012920:	4630      	mov	r0, r6
 8012922:	f7ff ffda 	bl	80128da <__sfputc_r>
 8012926:	1c43      	adds	r3, r0, #1
 8012928:	d1f3      	bne.n	8012912 <__sfputs_r+0xa>
 801292a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801292c <_vfiprintf_r>:
 801292c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012930:	460d      	mov	r5, r1
 8012932:	b09d      	sub	sp, #116	@ 0x74
 8012934:	4614      	mov	r4, r2
 8012936:	4698      	mov	r8, r3
 8012938:	4606      	mov	r6, r0
 801293a:	b118      	cbz	r0, 8012944 <_vfiprintf_r+0x18>
 801293c:	6a03      	ldr	r3, [r0, #32]
 801293e:	b90b      	cbnz	r3, 8012944 <_vfiprintf_r+0x18>
 8012940:	f7fc faf0 	bl	800ef24 <__sinit>
 8012944:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012946:	07d9      	lsls	r1, r3, #31
 8012948:	d405      	bmi.n	8012956 <_vfiprintf_r+0x2a>
 801294a:	89ab      	ldrh	r3, [r5, #12]
 801294c:	059a      	lsls	r2, r3, #22
 801294e:	d402      	bmi.n	8012956 <_vfiprintf_r+0x2a>
 8012950:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012952:	f7fd fa52 	bl	800fdfa <__retarget_lock_acquire_recursive>
 8012956:	89ab      	ldrh	r3, [r5, #12]
 8012958:	071b      	lsls	r3, r3, #28
 801295a:	d501      	bpl.n	8012960 <_vfiprintf_r+0x34>
 801295c:	692b      	ldr	r3, [r5, #16]
 801295e:	b99b      	cbnz	r3, 8012988 <_vfiprintf_r+0x5c>
 8012960:	4629      	mov	r1, r5
 8012962:	4630      	mov	r0, r6
 8012964:	f000 f938 	bl	8012bd8 <__swsetup_r>
 8012968:	b170      	cbz	r0, 8012988 <_vfiprintf_r+0x5c>
 801296a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801296c:	07dc      	lsls	r4, r3, #31
 801296e:	d504      	bpl.n	801297a <_vfiprintf_r+0x4e>
 8012970:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012974:	b01d      	add	sp, #116	@ 0x74
 8012976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801297a:	89ab      	ldrh	r3, [r5, #12]
 801297c:	0598      	lsls	r0, r3, #22
 801297e:	d4f7      	bmi.n	8012970 <_vfiprintf_r+0x44>
 8012980:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012982:	f7fd fa3b 	bl	800fdfc <__retarget_lock_release_recursive>
 8012986:	e7f3      	b.n	8012970 <_vfiprintf_r+0x44>
 8012988:	2300      	movs	r3, #0
 801298a:	9309      	str	r3, [sp, #36]	@ 0x24
 801298c:	2320      	movs	r3, #32
 801298e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012992:	f8cd 800c 	str.w	r8, [sp, #12]
 8012996:	2330      	movs	r3, #48	@ 0x30
 8012998:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012b48 <_vfiprintf_r+0x21c>
 801299c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80129a0:	f04f 0901 	mov.w	r9, #1
 80129a4:	4623      	mov	r3, r4
 80129a6:	469a      	mov	sl, r3
 80129a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129ac:	b10a      	cbz	r2, 80129b2 <_vfiprintf_r+0x86>
 80129ae:	2a25      	cmp	r2, #37	@ 0x25
 80129b0:	d1f9      	bne.n	80129a6 <_vfiprintf_r+0x7a>
 80129b2:	ebba 0b04 	subs.w	fp, sl, r4
 80129b6:	d00b      	beq.n	80129d0 <_vfiprintf_r+0xa4>
 80129b8:	465b      	mov	r3, fp
 80129ba:	4622      	mov	r2, r4
 80129bc:	4629      	mov	r1, r5
 80129be:	4630      	mov	r0, r6
 80129c0:	f7ff ffa2 	bl	8012908 <__sfputs_r>
 80129c4:	3001      	adds	r0, #1
 80129c6:	f000 80a7 	beq.w	8012b18 <_vfiprintf_r+0x1ec>
 80129ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80129cc:	445a      	add	r2, fp
 80129ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80129d0:	f89a 3000 	ldrb.w	r3, [sl]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	f000 809f 	beq.w	8012b18 <_vfiprintf_r+0x1ec>
 80129da:	2300      	movs	r3, #0
 80129dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80129e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129e4:	f10a 0a01 	add.w	sl, sl, #1
 80129e8:	9304      	str	r3, [sp, #16]
 80129ea:	9307      	str	r3, [sp, #28]
 80129ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80129f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80129f2:	4654      	mov	r4, sl
 80129f4:	2205      	movs	r2, #5
 80129f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129fa:	4853      	ldr	r0, [pc, #332]	@ (8012b48 <_vfiprintf_r+0x21c>)
 80129fc:	f7ed fc08 	bl	8000210 <memchr>
 8012a00:	9a04      	ldr	r2, [sp, #16]
 8012a02:	b9d8      	cbnz	r0, 8012a3c <_vfiprintf_r+0x110>
 8012a04:	06d1      	lsls	r1, r2, #27
 8012a06:	bf44      	itt	mi
 8012a08:	2320      	movmi	r3, #32
 8012a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a0e:	0713      	lsls	r3, r2, #28
 8012a10:	bf44      	itt	mi
 8012a12:	232b      	movmi	r3, #43	@ 0x2b
 8012a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a18:	f89a 3000 	ldrb.w	r3, [sl]
 8012a1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a1e:	d015      	beq.n	8012a4c <_vfiprintf_r+0x120>
 8012a20:	9a07      	ldr	r2, [sp, #28]
 8012a22:	4654      	mov	r4, sl
 8012a24:	2000      	movs	r0, #0
 8012a26:	f04f 0c0a 	mov.w	ip, #10
 8012a2a:	4621      	mov	r1, r4
 8012a2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a30:	3b30      	subs	r3, #48	@ 0x30
 8012a32:	2b09      	cmp	r3, #9
 8012a34:	d94b      	bls.n	8012ace <_vfiprintf_r+0x1a2>
 8012a36:	b1b0      	cbz	r0, 8012a66 <_vfiprintf_r+0x13a>
 8012a38:	9207      	str	r2, [sp, #28]
 8012a3a:	e014      	b.n	8012a66 <_vfiprintf_r+0x13a>
 8012a3c:	eba0 0308 	sub.w	r3, r0, r8
 8012a40:	fa09 f303 	lsl.w	r3, r9, r3
 8012a44:	4313      	orrs	r3, r2
 8012a46:	9304      	str	r3, [sp, #16]
 8012a48:	46a2      	mov	sl, r4
 8012a4a:	e7d2      	b.n	80129f2 <_vfiprintf_r+0xc6>
 8012a4c:	9b03      	ldr	r3, [sp, #12]
 8012a4e:	1d19      	adds	r1, r3, #4
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	9103      	str	r1, [sp, #12]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	bfbb      	ittet	lt
 8012a58:	425b      	neglt	r3, r3
 8012a5a:	f042 0202 	orrlt.w	r2, r2, #2
 8012a5e:	9307      	strge	r3, [sp, #28]
 8012a60:	9307      	strlt	r3, [sp, #28]
 8012a62:	bfb8      	it	lt
 8012a64:	9204      	strlt	r2, [sp, #16]
 8012a66:	7823      	ldrb	r3, [r4, #0]
 8012a68:	2b2e      	cmp	r3, #46	@ 0x2e
 8012a6a:	d10a      	bne.n	8012a82 <_vfiprintf_r+0x156>
 8012a6c:	7863      	ldrb	r3, [r4, #1]
 8012a6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a70:	d132      	bne.n	8012ad8 <_vfiprintf_r+0x1ac>
 8012a72:	9b03      	ldr	r3, [sp, #12]
 8012a74:	1d1a      	adds	r2, r3, #4
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	9203      	str	r2, [sp, #12]
 8012a7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012a7e:	3402      	adds	r4, #2
 8012a80:	9305      	str	r3, [sp, #20]
 8012a82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012b58 <_vfiprintf_r+0x22c>
 8012a86:	7821      	ldrb	r1, [r4, #0]
 8012a88:	2203      	movs	r2, #3
 8012a8a:	4650      	mov	r0, sl
 8012a8c:	f7ed fbc0 	bl	8000210 <memchr>
 8012a90:	b138      	cbz	r0, 8012aa2 <_vfiprintf_r+0x176>
 8012a92:	9b04      	ldr	r3, [sp, #16]
 8012a94:	eba0 000a 	sub.w	r0, r0, sl
 8012a98:	2240      	movs	r2, #64	@ 0x40
 8012a9a:	4082      	lsls	r2, r0
 8012a9c:	4313      	orrs	r3, r2
 8012a9e:	3401      	adds	r4, #1
 8012aa0:	9304      	str	r3, [sp, #16]
 8012aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012aa6:	4829      	ldr	r0, [pc, #164]	@ (8012b4c <_vfiprintf_r+0x220>)
 8012aa8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012aac:	2206      	movs	r2, #6
 8012aae:	f7ed fbaf 	bl	8000210 <memchr>
 8012ab2:	2800      	cmp	r0, #0
 8012ab4:	d03f      	beq.n	8012b36 <_vfiprintf_r+0x20a>
 8012ab6:	4b26      	ldr	r3, [pc, #152]	@ (8012b50 <_vfiprintf_r+0x224>)
 8012ab8:	bb1b      	cbnz	r3, 8012b02 <_vfiprintf_r+0x1d6>
 8012aba:	9b03      	ldr	r3, [sp, #12]
 8012abc:	3307      	adds	r3, #7
 8012abe:	f023 0307 	bic.w	r3, r3, #7
 8012ac2:	3308      	adds	r3, #8
 8012ac4:	9303      	str	r3, [sp, #12]
 8012ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ac8:	443b      	add	r3, r7
 8012aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8012acc:	e76a      	b.n	80129a4 <_vfiprintf_r+0x78>
 8012ace:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ad2:	460c      	mov	r4, r1
 8012ad4:	2001      	movs	r0, #1
 8012ad6:	e7a8      	b.n	8012a2a <_vfiprintf_r+0xfe>
 8012ad8:	2300      	movs	r3, #0
 8012ada:	3401      	adds	r4, #1
 8012adc:	9305      	str	r3, [sp, #20]
 8012ade:	4619      	mov	r1, r3
 8012ae0:	f04f 0c0a 	mov.w	ip, #10
 8012ae4:	4620      	mov	r0, r4
 8012ae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012aea:	3a30      	subs	r2, #48	@ 0x30
 8012aec:	2a09      	cmp	r2, #9
 8012aee:	d903      	bls.n	8012af8 <_vfiprintf_r+0x1cc>
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d0c6      	beq.n	8012a82 <_vfiprintf_r+0x156>
 8012af4:	9105      	str	r1, [sp, #20]
 8012af6:	e7c4      	b.n	8012a82 <_vfiprintf_r+0x156>
 8012af8:	fb0c 2101 	mla	r1, ip, r1, r2
 8012afc:	4604      	mov	r4, r0
 8012afe:	2301      	movs	r3, #1
 8012b00:	e7f0      	b.n	8012ae4 <_vfiprintf_r+0x1b8>
 8012b02:	ab03      	add	r3, sp, #12
 8012b04:	9300      	str	r3, [sp, #0]
 8012b06:	462a      	mov	r2, r5
 8012b08:	4b12      	ldr	r3, [pc, #72]	@ (8012b54 <_vfiprintf_r+0x228>)
 8012b0a:	a904      	add	r1, sp, #16
 8012b0c:	4630      	mov	r0, r6
 8012b0e:	f7fb fa77 	bl	800e000 <_printf_float>
 8012b12:	4607      	mov	r7, r0
 8012b14:	1c78      	adds	r0, r7, #1
 8012b16:	d1d6      	bne.n	8012ac6 <_vfiprintf_r+0x19a>
 8012b18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b1a:	07d9      	lsls	r1, r3, #31
 8012b1c:	d405      	bmi.n	8012b2a <_vfiprintf_r+0x1fe>
 8012b1e:	89ab      	ldrh	r3, [r5, #12]
 8012b20:	059a      	lsls	r2, r3, #22
 8012b22:	d402      	bmi.n	8012b2a <_vfiprintf_r+0x1fe>
 8012b24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b26:	f7fd f969 	bl	800fdfc <__retarget_lock_release_recursive>
 8012b2a:	89ab      	ldrh	r3, [r5, #12]
 8012b2c:	065b      	lsls	r3, r3, #25
 8012b2e:	f53f af1f 	bmi.w	8012970 <_vfiprintf_r+0x44>
 8012b32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012b34:	e71e      	b.n	8012974 <_vfiprintf_r+0x48>
 8012b36:	ab03      	add	r3, sp, #12
 8012b38:	9300      	str	r3, [sp, #0]
 8012b3a:	462a      	mov	r2, r5
 8012b3c:	4b05      	ldr	r3, [pc, #20]	@ (8012b54 <_vfiprintf_r+0x228>)
 8012b3e:	a904      	add	r1, sp, #16
 8012b40:	4630      	mov	r0, r6
 8012b42:	f7fb fd97 	bl	800e674 <_printf_i>
 8012b46:	e7e4      	b.n	8012b12 <_vfiprintf_r+0x1e6>
 8012b48:	080157fa 	.word	0x080157fa
 8012b4c:	08015804 	.word	0x08015804
 8012b50:	0800e001 	.word	0x0800e001
 8012b54:	08012909 	.word	0x08012909
 8012b58:	08015800 	.word	0x08015800

08012b5c <__swbuf_r>:
 8012b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b5e:	460e      	mov	r6, r1
 8012b60:	4614      	mov	r4, r2
 8012b62:	4605      	mov	r5, r0
 8012b64:	b118      	cbz	r0, 8012b6e <__swbuf_r+0x12>
 8012b66:	6a03      	ldr	r3, [r0, #32]
 8012b68:	b90b      	cbnz	r3, 8012b6e <__swbuf_r+0x12>
 8012b6a:	f7fc f9db 	bl	800ef24 <__sinit>
 8012b6e:	69a3      	ldr	r3, [r4, #24]
 8012b70:	60a3      	str	r3, [r4, #8]
 8012b72:	89a3      	ldrh	r3, [r4, #12]
 8012b74:	071a      	lsls	r2, r3, #28
 8012b76:	d501      	bpl.n	8012b7c <__swbuf_r+0x20>
 8012b78:	6923      	ldr	r3, [r4, #16]
 8012b7a:	b943      	cbnz	r3, 8012b8e <__swbuf_r+0x32>
 8012b7c:	4621      	mov	r1, r4
 8012b7e:	4628      	mov	r0, r5
 8012b80:	f000 f82a 	bl	8012bd8 <__swsetup_r>
 8012b84:	b118      	cbz	r0, 8012b8e <__swbuf_r+0x32>
 8012b86:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012b8a:	4638      	mov	r0, r7
 8012b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b8e:	6823      	ldr	r3, [r4, #0]
 8012b90:	6922      	ldr	r2, [r4, #16]
 8012b92:	1a98      	subs	r0, r3, r2
 8012b94:	6963      	ldr	r3, [r4, #20]
 8012b96:	b2f6      	uxtb	r6, r6
 8012b98:	4283      	cmp	r3, r0
 8012b9a:	4637      	mov	r7, r6
 8012b9c:	dc05      	bgt.n	8012baa <__swbuf_r+0x4e>
 8012b9e:	4621      	mov	r1, r4
 8012ba0:	4628      	mov	r0, r5
 8012ba2:	f7ff f889 	bl	8011cb8 <_fflush_r>
 8012ba6:	2800      	cmp	r0, #0
 8012ba8:	d1ed      	bne.n	8012b86 <__swbuf_r+0x2a>
 8012baa:	68a3      	ldr	r3, [r4, #8]
 8012bac:	3b01      	subs	r3, #1
 8012bae:	60a3      	str	r3, [r4, #8]
 8012bb0:	6823      	ldr	r3, [r4, #0]
 8012bb2:	1c5a      	adds	r2, r3, #1
 8012bb4:	6022      	str	r2, [r4, #0]
 8012bb6:	701e      	strb	r6, [r3, #0]
 8012bb8:	6962      	ldr	r2, [r4, #20]
 8012bba:	1c43      	adds	r3, r0, #1
 8012bbc:	429a      	cmp	r2, r3
 8012bbe:	d004      	beq.n	8012bca <__swbuf_r+0x6e>
 8012bc0:	89a3      	ldrh	r3, [r4, #12]
 8012bc2:	07db      	lsls	r3, r3, #31
 8012bc4:	d5e1      	bpl.n	8012b8a <__swbuf_r+0x2e>
 8012bc6:	2e0a      	cmp	r6, #10
 8012bc8:	d1df      	bne.n	8012b8a <__swbuf_r+0x2e>
 8012bca:	4621      	mov	r1, r4
 8012bcc:	4628      	mov	r0, r5
 8012bce:	f7ff f873 	bl	8011cb8 <_fflush_r>
 8012bd2:	2800      	cmp	r0, #0
 8012bd4:	d0d9      	beq.n	8012b8a <__swbuf_r+0x2e>
 8012bd6:	e7d6      	b.n	8012b86 <__swbuf_r+0x2a>

08012bd8 <__swsetup_r>:
 8012bd8:	b538      	push	{r3, r4, r5, lr}
 8012bda:	4b29      	ldr	r3, [pc, #164]	@ (8012c80 <__swsetup_r+0xa8>)
 8012bdc:	4605      	mov	r5, r0
 8012bde:	6818      	ldr	r0, [r3, #0]
 8012be0:	460c      	mov	r4, r1
 8012be2:	b118      	cbz	r0, 8012bec <__swsetup_r+0x14>
 8012be4:	6a03      	ldr	r3, [r0, #32]
 8012be6:	b90b      	cbnz	r3, 8012bec <__swsetup_r+0x14>
 8012be8:	f7fc f99c 	bl	800ef24 <__sinit>
 8012bec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bf0:	0719      	lsls	r1, r3, #28
 8012bf2:	d422      	bmi.n	8012c3a <__swsetup_r+0x62>
 8012bf4:	06da      	lsls	r2, r3, #27
 8012bf6:	d407      	bmi.n	8012c08 <__swsetup_r+0x30>
 8012bf8:	2209      	movs	r2, #9
 8012bfa:	602a      	str	r2, [r5, #0]
 8012bfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c00:	81a3      	strh	r3, [r4, #12]
 8012c02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c06:	e033      	b.n	8012c70 <__swsetup_r+0x98>
 8012c08:	0758      	lsls	r0, r3, #29
 8012c0a:	d512      	bpl.n	8012c32 <__swsetup_r+0x5a>
 8012c0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012c0e:	b141      	cbz	r1, 8012c22 <__swsetup_r+0x4a>
 8012c10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012c14:	4299      	cmp	r1, r3
 8012c16:	d002      	beq.n	8012c1e <__swsetup_r+0x46>
 8012c18:	4628      	mov	r0, r5
 8012c1a:	f7fd ff7d 	bl	8010b18 <_free_r>
 8012c1e:	2300      	movs	r3, #0
 8012c20:	6363      	str	r3, [r4, #52]	@ 0x34
 8012c22:	89a3      	ldrh	r3, [r4, #12]
 8012c24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012c28:	81a3      	strh	r3, [r4, #12]
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	6063      	str	r3, [r4, #4]
 8012c2e:	6923      	ldr	r3, [r4, #16]
 8012c30:	6023      	str	r3, [r4, #0]
 8012c32:	89a3      	ldrh	r3, [r4, #12]
 8012c34:	f043 0308 	orr.w	r3, r3, #8
 8012c38:	81a3      	strh	r3, [r4, #12]
 8012c3a:	6923      	ldr	r3, [r4, #16]
 8012c3c:	b94b      	cbnz	r3, 8012c52 <__swsetup_r+0x7a>
 8012c3e:	89a3      	ldrh	r3, [r4, #12]
 8012c40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012c44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012c48:	d003      	beq.n	8012c52 <__swsetup_r+0x7a>
 8012c4a:	4621      	mov	r1, r4
 8012c4c:	4628      	mov	r0, r5
 8012c4e:	f000 f83f 	bl	8012cd0 <__smakebuf_r>
 8012c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c56:	f013 0201 	ands.w	r2, r3, #1
 8012c5a:	d00a      	beq.n	8012c72 <__swsetup_r+0x9a>
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	60a2      	str	r2, [r4, #8]
 8012c60:	6962      	ldr	r2, [r4, #20]
 8012c62:	4252      	negs	r2, r2
 8012c64:	61a2      	str	r2, [r4, #24]
 8012c66:	6922      	ldr	r2, [r4, #16]
 8012c68:	b942      	cbnz	r2, 8012c7c <__swsetup_r+0xa4>
 8012c6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012c6e:	d1c5      	bne.n	8012bfc <__swsetup_r+0x24>
 8012c70:	bd38      	pop	{r3, r4, r5, pc}
 8012c72:	0799      	lsls	r1, r3, #30
 8012c74:	bf58      	it	pl
 8012c76:	6962      	ldrpl	r2, [r4, #20]
 8012c78:	60a2      	str	r2, [r4, #8]
 8012c7a:	e7f4      	b.n	8012c66 <__swsetup_r+0x8e>
 8012c7c:	2000      	movs	r0, #0
 8012c7e:	e7f7      	b.n	8012c70 <__swsetup_r+0x98>
 8012c80:	200001c4 	.word	0x200001c4

08012c84 <__swhatbuf_r>:
 8012c84:	b570      	push	{r4, r5, r6, lr}
 8012c86:	460c      	mov	r4, r1
 8012c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c8c:	2900      	cmp	r1, #0
 8012c8e:	b096      	sub	sp, #88	@ 0x58
 8012c90:	4615      	mov	r5, r2
 8012c92:	461e      	mov	r6, r3
 8012c94:	da0d      	bge.n	8012cb2 <__swhatbuf_r+0x2e>
 8012c96:	89a3      	ldrh	r3, [r4, #12]
 8012c98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012c9c:	f04f 0100 	mov.w	r1, #0
 8012ca0:	bf14      	ite	ne
 8012ca2:	2340      	movne	r3, #64	@ 0x40
 8012ca4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012ca8:	2000      	movs	r0, #0
 8012caa:	6031      	str	r1, [r6, #0]
 8012cac:	602b      	str	r3, [r5, #0]
 8012cae:	b016      	add	sp, #88	@ 0x58
 8012cb0:	bd70      	pop	{r4, r5, r6, pc}
 8012cb2:	466a      	mov	r2, sp
 8012cb4:	f000 f89c 	bl	8012df0 <_fstat_r>
 8012cb8:	2800      	cmp	r0, #0
 8012cba:	dbec      	blt.n	8012c96 <__swhatbuf_r+0x12>
 8012cbc:	9901      	ldr	r1, [sp, #4]
 8012cbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012cc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012cc6:	4259      	negs	r1, r3
 8012cc8:	4159      	adcs	r1, r3
 8012cca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012cce:	e7eb      	b.n	8012ca8 <__swhatbuf_r+0x24>

08012cd0 <__smakebuf_r>:
 8012cd0:	898b      	ldrh	r3, [r1, #12]
 8012cd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012cd4:	079d      	lsls	r5, r3, #30
 8012cd6:	4606      	mov	r6, r0
 8012cd8:	460c      	mov	r4, r1
 8012cda:	d507      	bpl.n	8012cec <__smakebuf_r+0x1c>
 8012cdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012ce0:	6023      	str	r3, [r4, #0]
 8012ce2:	6123      	str	r3, [r4, #16]
 8012ce4:	2301      	movs	r3, #1
 8012ce6:	6163      	str	r3, [r4, #20]
 8012ce8:	b003      	add	sp, #12
 8012cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cec:	ab01      	add	r3, sp, #4
 8012cee:	466a      	mov	r2, sp
 8012cf0:	f7ff ffc8 	bl	8012c84 <__swhatbuf_r>
 8012cf4:	9f00      	ldr	r7, [sp, #0]
 8012cf6:	4605      	mov	r5, r0
 8012cf8:	4639      	mov	r1, r7
 8012cfa:	4630      	mov	r0, r6
 8012cfc:	f7fb fbcc 	bl	800e498 <_malloc_r>
 8012d00:	b948      	cbnz	r0, 8012d16 <__smakebuf_r+0x46>
 8012d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d06:	059a      	lsls	r2, r3, #22
 8012d08:	d4ee      	bmi.n	8012ce8 <__smakebuf_r+0x18>
 8012d0a:	f023 0303 	bic.w	r3, r3, #3
 8012d0e:	f043 0302 	orr.w	r3, r3, #2
 8012d12:	81a3      	strh	r3, [r4, #12]
 8012d14:	e7e2      	b.n	8012cdc <__smakebuf_r+0xc>
 8012d16:	89a3      	ldrh	r3, [r4, #12]
 8012d18:	6020      	str	r0, [r4, #0]
 8012d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d1e:	81a3      	strh	r3, [r4, #12]
 8012d20:	9b01      	ldr	r3, [sp, #4]
 8012d22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012d26:	b15b      	cbz	r3, 8012d40 <__smakebuf_r+0x70>
 8012d28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d2c:	4630      	mov	r0, r6
 8012d2e:	f000 f83b 	bl	8012da8 <_isatty_r>
 8012d32:	b128      	cbz	r0, 8012d40 <__smakebuf_r+0x70>
 8012d34:	89a3      	ldrh	r3, [r4, #12]
 8012d36:	f023 0303 	bic.w	r3, r3, #3
 8012d3a:	f043 0301 	orr.w	r3, r3, #1
 8012d3e:	81a3      	strh	r3, [r4, #12]
 8012d40:	89a3      	ldrh	r3, [r4, #12]
 8012d42:	431d      	orrs	r5, r3
 8012d44:	81a5      	strh	r5, [r4, #12]
 8012d46:	e7cf      	b.n	8012ce8 <__smakebuf_r+0x18>

08012d48 <_raise_r>:
 8012d48:	291f      	cmp	r1, #31
 8012d4a:	b538      	push	{r3, r4, r5, lr}
 8012d4c:	4605      	mov	r5, r0
 8012d4e:	460c      	mov	r4, r1
 8012d50:	d904      	bls.n	8012d5c <_raise_r+0x14>
 8012d52:	2316      	movs	r3, #22
 8012d54:	6003      	str	r3, [r0, #0]
 8012d56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012d5a:	bd38      	pop	{r3, r4, r5, pc}
 8012d5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012d5e:	b112      	cbz	r2, 8012d66 <_raise_r+0x1e>
 8012d60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012d64:	b94b      	cbnz	r3, 8012d7a <_raise_r+0x32>
 8012d66:	4628      	mov	r0, r5
 8012d68:	f000 f840 	bl	8012dec <_getpid_r>
 8012d6c:	4622      	mov	r2, r4
 8012d6e:	4601      	mov	r1, r0
 8012d70:	4628      	mov	r0, r5
 8012d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d76:	f000 b827 	b.w	8012dc8 <_kill_r>
 8012d7a:	2b01      	cmp	r3, #1
 8012d7c:	d00a      	beq.n	8012d94 <_raise_r+0x4c>
 8012d7e:	1c59      	adds	r1, r3, #1
 8012d80:	d103      	bne.n	8012d8a <_raise_r+0x42>
 8012d82:	2316      	movs	r3, #22
 8012d84:	6003      	str	r3, [r0, #0]
 8012d86:	2001      	movs	r0, #1
 8012d88:	e7e7      	b.n	8012d5a <_raise_r+0x12>
 8012d8a:	2100      	movs	r1, #0
 8012d8c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012d90:	4620      	mov	r0, r4
 8012d92:	4798      	blx	r3
 8012d94:	2000      	movs	r0, #0
 8012d96:	e7e0      	b.n	8012d5a <_raise_r+0x12>

08012d98 <raise>:
 8012d98:	4b02      	ldr	r3, [pc, #8]	@ (8012da4 <raise+0xc>)
 8012d9a:	4601      	mov	r1, r0
 8012d9c:	6818      	ldr	r0, [r3, #0]
 8012d9e:	f7ff bfd3 	b.w	8012d48 <_raise_r>
 8012da2:	bf00      	nop
 8012da4:	200001c4 	.word	0x200001c4

08012da8 <_isatty_r>:
 8012da8:	b538      	push	{r3, r4, r5, lr}
 8012daa:	4d06      	ldr	r5, [pc, #24]	@ (8012dc4 <_isatty_r+0x1c>)
 8012dac:	2300      	movs	r3, #0
 8012dae:	4604      	mov	r4, r0
 8012db0:	4608      	mov	r0, r1
 8012db2:	602b      	str	r3, [r5, #0]
 8012db4:	f7f5 fb20 	bl	80083f8 <_isatty>
 8012db8:	1c43      	adds	r3, r0, #1
 8012dba:	d102      	bne.n	8012dc2 <_isatty_r+0x1a>
 8012dbc:	682b      	ldr	r3, [r5, #0]
 8012dbe:	b103      	cbz	r3, 8012dc2 <_isatty_r+0x1a>
 8012dc0:	6023      	str	r3, [r4, #0]
 8012dc2:	bd38      	pop	{r3, r4, r5, pc}
 8012dc4:	200019a4 	.word	0x200019a4

08012dc8 <_kill_r>:
 8012dc8:	b538      	push	{r3, r4, r5, lr}
 8012dca:	4d07      	ldr	r5, [pc, #28]	@ (8012de8 <_kill_r+0x20>)
 8012dcc:	2300      	movs	r3, #0
 8012dce:	4604      	mov	r4, r0
 8012dd0:	4608      	mov	r0, r1
 8012dd2:	4611      	mov	r1, r2
 8012dd4:	602b      	str	r3, [r5, #0]
 8012dd6:	f7f5 fa9f 	bl	8008318 <_kill>
 8012dda:	1c43      	adds	r3, r0, #1
 8012ddc:	d102      	bne.n	8012de4 <_kill_r+0x1c>
 8012dde:	682b      	ldr	r3, [r5, #0]
 8012de0:	b103      	cbz	r3, 8012de4 <_kill_r+0x1c>
 8012de2:	6023      	str	r3, [r4, #0]
 8012de4:	bd38      	pop	{r3, r4, r5, pc}
 8012de6:	bf00      	nop
 8012de8:	200019a4 	.word	0x200019a4

08012dec <_getpid_r>:
 8012dec:	f7f5 ba8c 	b.w	8008308 <_getpid>

08012df0 <_fstat_r>:
 8012df0:	b538      	push	{r3, r4, r5, lr}
 8012df2:	4d07      	ldr	r5, [pc, #28]	@ (8012e10 <_fstat_r+0x20>)
 8012df4:	2300      	movs	r3, #0
 8012df6:	4604      	mov	r4, r0
 8012df8:	4608      	mov	r0, r1
 8012dfa:	4611      	mov	r1, r2
 8012dfc:	602b      	str	r3, [r5, #0]
 8012dfe:	f7f5 faeb 	bl	80083d8 <_fstat>
 8012e02:	1c43      	adds	r3, r0, #1
 8012e04:	d102      	bne.n	8012e0c <_fstat_r+0x1c>
 8012e06:	682b      	ldr	r3, [r5, #0]
 8012e08:	b103      	cbz	r3, 8012e0c <_fstat_r+0x1c>
 8012e0a:	6023      	str	r3, [r4, #0]
 8012e0c:	bd38      	pop	{r3, r4, r5, pc}
 8012e0e:	bf00      	nop
 8012e10:	200019a4 	.word	0x200019a4

08012e14 <acosf>:
 8012e14:	b508      	push	{r3, lr}
 8012e16:	ed2d 8b02 	vpush	{d8}
 8012e1a:	eeb0 8a40 	vmov.f32	s16, s0
 8012e1e:	f000 f977 	bl	8013110 <__ieee754_acosf>
 8012e22:	eeb4 8a48 	vcmp.f32	s16, s16
 8012e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e2a:	eef0 8a40 	vmov.f32	s17, s0
 8012e2e:	d615      	bvs.n	8012e5c <acosf+0x48>
 8012e30:	eeb0 0a48 	vmov.f32	s0, s16
 8012e34:	f000 f902 	bl	801303c <fabsf>
 8012e38:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012e3c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e44:	dd0a      	ble.n	8012e5c <acosf+0x48>
 8012e46:	f7fc ffad 	bl	800fda4 <__errno>
 8012e4a:	ecbd 8b02 	vpop	{d8}
 8012e4e:	2321      	movs	r3, #33	@ 0x21
 8012e50:	6003      	str	r3, [r0, #0]
 8012e52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012e56:	4804      	ldr	r0, [pc, #16]	@ (8012e68 <acosf+0x54>)
 8012e58:	f7fc bffe 	b.w	800fe58 <nanf>
 8012e5c:	eeb0 0a68 	vmov.f32	s0, s17
 8012e60:	ecbd 8b02 	vpop	{d8}
 8012e64:	bd08      	pop	{r3, pc}
 8012e66:	bf00      	nop
 8012e68:	080158ba 	.word	0x080158ba

08012e6c <asinf>:
 8012e6c:	b508      	push	{r3, lr}
 8012e6e:	ed2d 8b02 	vpush	{d8}
 8012e72:	eeb0 8a40 	vmov.f32	s16, s0
 8012e76:	f000 fa41 	bl	80132fc <__ieee754_asinf>
 8012e7a:	eeb4 8a48 	vcmp.f32	s16, s16
 8012e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e82:	eef0 8a40 	vmov.f32	s17, s0
 8012e86:	d615      	bvs.n	8012eb4 <asinf+0x48>
 8012e88:	eeb0 0a48 	vmov.f32	s0, s16
 8012e8c:	f000 f8d6 	bl	801303c <fabsf>
 8012e90:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012e94:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e9c:	dd0a      	ble.n	8012eb4 <asinf+0x48>
 8012e9e:	f7fc ff81 	bl	800fda4 <__errno>
 8012ea2:	ecbd 8b02 	vpop	{d8}
 8012ea6:	2321      	movs	r3, #33	@ 0x21
 8012ea8:	6003      	str	r3, [r0, #0]
 8012eaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012eae:	4804      	ldr	r0, [pc, #16]	@ (8012ec0 <asinf+0x54>)
 8012eb0:	f7fc bfd2 	b.w	800fe58 <nanf>
 8012eb4:	eeb0 0a68 	vmov.f32	s0, s17
 8012eb8:	ecbd 8b02 	vpop	{d8}
 8012ebc:	bd08      	pop	{r3, pc}
 8012ebe:	bf00      	nop
 8012ec0:	080158ba 	.word	0x080158ba

08012ec4 <atan2f>:
 8012ec4:	f000 bafe 	b.w	80134c4 <__ieee754_atan2f>

08012ec8 <sqrtf>:
 8012ec8:	b508      	push	{r3, lr}
 8012eca:	ed2d 8b02 	vpush	{d8}
 8012ece:	eeb0 8a40 	vmov.f32	s16, s0
 8012ed2:	f000 fc6d 	bl	80137b0 <__ieee754_sqrtf>
 8012ed6:	eeb4 8a48 	vcmp.f32	s16, s16
 8012eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ede:	d60c      	bvs.n	8012efa <sqrtf+0x32>
 8012ee0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012f00 <sqrtf+0x38>
 8012ee4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eec:	d505      	bpl.n	8012efa <sqrtf+0x32>
 8012eee:	f7fc ff59 	bl	800fda4 <__errno>
 8012ef2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012ef6:	2321      	movs	r3, #33	@ 0x21
 8012ef8:	6003      	str	r3, [r0, #0]
 8012efa:	ecbd 8b02 	vpop	{d8}
 8012efe:	bd08      	pop	{r3, pc}
 8012f00:	00000000 	.word	0x00000000

08012f04 <pow>:
 8012f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f06:	ed2d 8b02 	vpush	{d8}
 8012f0a:	eeb0 8a40 	vmov.f32	s16, s0
 8012f0e:	eef0 8a60 	vmov.f32	s17, s1
 8012f12:	ec55 4b11 	vmov	r4, r5, d1
 8012f16:	f000 fd67 	bl	80139e8 <__ieee754_pow>
 8012f1a:	4622      	mov	r2, r4
 8012f1c:	462b      	mov	r3, r5
 8012f1e:	4620      	mov	r0, r4
 8012f20:	4629      	mov	r1, r5
 8012f22:	ec57 6b10 	vmov	r6, r7, d0
 8012f26:	f7ed fe21 	bl	8000b6c <__aeabi_dcmpun>
 8012f2a:	2800      	cmp	r0, #0
 8012f2c:	d13b      	bne.n	8012fa6 <pow+0xa2>
 8012f2e:	ec51 0b18 	vmov	r0, r1, d8
 8012f32:	2200      	movs	r2, #0
 8012f34:	2300      	movs	r3, #0
 8012f36:	f7ed fde7 	bl	8000b08 <__aeabi_dcmpeq>
 8012f3a:	b1b8      	cbz	r0, 8012f6c <pow+0x68>
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	2300      	movs	r3, #0
 8012f40:	4620      	mov	r0, r4
 8012f42:	4629      	mov	r1, r5
 8012f44:	f7ed fde0 	bl	8000b08 <__aeabi_dcmpeq>
 8012f48:	2800      	cmp	r0, #0
 8012f4a:	d146      	bne.n	8012fda <pow+0xd6>
 8012f4c:	ec45 4b10 	vmov	d0, r4, r5
 8012f50:	f000 f8d2 	bl	80130f8 <finite>
 8012f54:	b338      	cbz	r0, 8012fa6 <pow+0xa2>
 8012f56:	2200      	movs	r2, #0
 8012f58:	2300      	movs	r3, #0
 8012f5a:	4620      	mov	r0, r4
 8012f5c:	4629      	mov	r1, r5
 8012f5e:	f7ed fddd 	bl	8000b1c <__aeabi_dcmplt>
 8012f62:	b300      	cbz	r0, 8012fa6 <pow+0xa2>
 8012f64:	f7fc ff1e 	bl	800fda4 <__errno>
 8012f68:	2322      	movs	r3, #34	@ 0x22
 8012f6a:	e01b      	b.n	8012fa4 <pow+0xa0>
 8012f6c:	ec47 6b10 	vmov	d0, r6, r7
 8012f70:	f000 f8c2 	bl	80130f8 <finite>
 8012f74:	b9e0      	cbnz	r0, 8012fb0 <pow+0xac>
 8012f76:	eeb0 0a48 	vmov.f32	s0, s16
 8012f7a:	eef0 0a68 	vmov.f32	s1, s17
 8012f7e:	f000 f8bb 	bl	80130f8 <finite>
 8012f82:	b1a8      	cbz	r0, 8012fb0 <pow+0xac>
 8012f84:	ec45 4b10 	vmov	d0, r4, r5
 8012f88:	f000 f8b6 	bl	80130f8 <finite>
 8012f8c:	b180      	cbz	r0, 8012fb0 <pow+0xac>
 8012f8e:	4632      	mov	r2, r6
 8012f90:	463b      	mov	r3, r7
 8012f92:	4630      	mov	r0, r6
 8012f94:	4639      	mov	r1, r7
 8012f96:	f7ed fde9 	bl	8000b6c <__aeabi_dcmpun>
 8012f9a:	2800      	cmp	r0, #0
 8012f9c:	d0e2      	beq.n	8012f64 <pow+0x60>
 8012f9e:	f7fc ff01 	bl	800fda4 <__errno>
 8012fa2:	2321      	movs	r3, #33	@ 0x21
 8012fa4:	6003      	str	r3, [r0, #0]
 8012fa6:	ecbd 8b02 	vpop	{d8}
 8012faa:	ec47 6b10 	vmov	d0, r6, r7
 8012fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	4630      	mov	r0, r6
 8012fb6:	4639      	mov	r1, r7
 8012fb8:	f7ed fda6 	bl	8000b08 <__aeabi_dcmpeq>
 8012fbc:	2800      	cmp	r0, #0
 8012fbe:	d0f2      	beq.n	8012fa6 <pow+0xa2>
 8012fc0:	eeb0 0a48 	vmov.f32	s0, s16
 8012fc4:	eef0 0a68 	vmov.f32	s1, s17
 8012fc8:	f000 f896 	bl	80130f8 <finite>
 8012fcc:	2800      	cmp	r0, #0
 8012fce:	d0ea      	beq.n	8012fa6 <pow+0xa2>
 8012fd0:	ec45 4b10 	vmov	d0, r4, r5
 8012fd4:	f000 f890 	bl	80130f8 <finite>
 8012fd8:	e7c3      	b.n	8012f62 <pow+0x5e>
 8012fda:	4f01      	ldr	r7, [pc, #4]	@ (8012fe0 <pow+0xdc>)
 8012fdc:	2600      	movs	r6, #0
 8012fde:	e7e2      	b.n	8012fa6 <pow+0xa2>
 8012fe0:	3ff00000 	.word	0x3ff00000

08012fe4 <sqrt>:
 8012fe4:	b538      	push	{r3, r4, r5, lr}
 8012fe6:	ed2d 8b02 	vpush	{d8}
 8012fea:	ec55 4b10 	vmov	r4, r5, d0
 8012fee:	f000 fb09 	bl	8013604 <__ieee754_sqrt>
 8012ff2:	4622      	mov	r2, r4
 8012ff4:	462b      	mov	r3, r5
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	4629      	mov	r1, r5
 8012ffa:	eeb0 8a40 	vmov.f32	s16, s0
 8012ffe:	eef0 8a60 	vmov.f32	s17, s1
 8013002:	f7ed fdb3 	bl	8000b6c <__aeabi_dcmpun>
 8013006:	b990      	cbnz	r0, 801302e <sqrt+0x4a>
 8013008:	2200      	movs	r2, #0
 801300a:	2300      	movs	r3, #0
 801300c:	4620      	mov	r0, r4
 801300e:	4629      	mov	r1, r5
 8013010:	f7ed fd84 	bl	8000b1c <__aeabi_dcmplt>
 8013014:	b158      	cbz	r0, 801302e <sqrt+0x4a>
 8013016:	f7fc fec5 	bl	800fda4 <__errno>
 801301a:	2321      	movs	r3, #33	@ 0x21
 801301c:	6003      	str	r3, [r0, #0]
 801301e:	2200      	movs	r2, #0
 8013020:	2300      	movs	r3, #0
 8013022:	4610      	mov	r0, r2
 8013024:	4619      	mov	r1, r3
 8013026:	f7ed fc31 	bl	800088c <__aeabi_ddiv>
 801302a:	ec41 0b18 	vmov	d8, r0, r1
 801302e:	eeb0 0a48 	vmov.f32	s0, s16
 8013032:	eef0 0a68 	vmov.f32	s1, s17
 8013036:	ecbd 8b02 	vpop	{d8}
 801303a:	bd38      	pop	{r3, r4, r5, pc}

0801303c <fabsf>:
 801303c:	ee10 3a10 	vmov	r3, s0
 8013040:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013044:	ee00 3a10 	vmov	s0, r3
 8013048:	4770      	bx	lr
 801304a:	0000      	movs	r0, r0
 801304c:	0000      	movs	r0, r0
	...

08013050 <cos>:
 8013050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013052:	ec53 2b10 	vmov	r2, r3, d0
 8013056:	4826      	ldr	r0, [pc, #152]	@ (80130f0 <cos+0xa0>)
 8013058:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801305c:	4281      	cmp	r1, r0
 801305e:	d806      	bhi.n	801306e <cos+0x1e>
 8013060:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80130e8 <cos+0x98>
 8013064:	b005      	add	sp, #20
 8013066:	f85d eb04 	ldr.w	lr, [sp], #4
 801306a:	f001 bf91 	b.w	8014f90 <__kernel_cos>
 801306e:	4821      	ldr	r0, [pc, #132]	@ (80130f4 <cos+0xa4>)
 8013070:	4281      	cmp	r1, r0
 8013072:	d908      	bls.n	8013086 <cos+0x36>
 8013074:	4610      	mov	r0, r2
 8013076:	4619      	mov	r1, r3
 8013078:	f7ed f926 	bl	80002c8 <__aeabi_dsub>
 801307c:	ec41 0b10 	vmov	d0, r0, r1
 8013080:	b005      	add	sp, #20
 8013082:	f85d fb04 	ldr.w	pc, [sp], #4
 8013086:	4668      	mov	r0, sp
 8013088:	f001 f9fa 	bl	8014480 <__ieee754_rem_pio2>
 801308c:	f000 0003 	and.w	r0, r0, #3
 8013090:	2801      	cmp	r0, #1
 8013092:	d00b      	beq.n	80130ac <cos+0x5c>
 8013094:	2802      	cmp	r0, #2
 8013096:	d015      	beq.n	80130c4 <cos+0x74>
 8013098:	b9d8      	cbnz	r0, 80130d2 <cos+0x82>
 801309a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801309e:	ed9d 0b00 	vldr	d0, [sp]
 80130a2:	f001 ff75 	bl	8014f90 <__kernel_cos>
 80130a6:	ec51 0b10 	vmov	r0, r1, d0
 80130aa:	e7e7      	b.n	801307c <cos+0x2c>
 80130ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130b0:	ed9d 0b00 	vldr	d0, [sp]
 80130b4:	f002 f834 	bl	8015120 <__kernel_sin>
 80130b8:	ec53 2b10 	vmov	r2, r3, d0
 80130bc:	4610      	mov	r0, r2
 80130be:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80130c2:	e7db      	b.n	801307c <cos+0x2c>
 80130c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130c8:	ed9d 0b00 	vldr	d0, [sp]
 80130cc:	f001 ff60 	bl	8014f90 <__kernel_cos>
 80130d0:	e7f2      	b.n	80130b8 <cos+0x68>
 80130d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130d6:	ed9d 0b00 	vldr	d0, [sp]
 80130da:	2001      	movs	r0, #1
 80130dc:	f002 f820 	bl	8015120 <__kernel_sin>
 80130e0:	e7e1      	b.n	80130a6 <cos+0x56>
 80130e2:	bf00      	nop
 80130e4:	f3af 8000 	nop.w
	...
 80130f0:	3fe921fb 	.word	0x3fe921fb
 80130f4:	7fefffff 	.word	0x7fefffff

080130f8 <finite>:
 80130f8:	b082      	sub	sp, #8
 80130fa:	ed8d 0b00 	vstr	d0, [sp]
 80130fe:	9801      	ldr	r0, [sp, #4]
 8013100:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8013104:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8013108:	0fc0      	lsrs	r0, r0, #31
 801310a:	b002      	add	sp, #8
 801310c:	4770      	bx	lr
	...

08013110 <__ieee754_acosf>:
 8013110:	b508      	push	{r3, lr}
 8013112:	ee10 3a10 	vmov	r3, s0
 8013116:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801311a:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801311e:	ed2d 8b0c 	vpush	{d8-d13}
 8013122:	d10a      	bne.n	801313a <__ieee754_acosf+0x2a>
 8013124:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 80132b8 <__ieee754_acosf+0x1a8>
 8013128:	eddf 7a64 	vldr	s15, [pc, #400]	@ 80132bc <__ieee754_acosf+0x1ac>
 801312c:	2b00      	cmp	r3, #0
 801312e:	bfc8      	it	gt
 8013130:	eeb0 0a67 	vmovgt.f32	s0, s15
 8013134:	ecbd 8b0c 	vpop	{d8-d13}
 8013138:	bd08      	pop	{r3, pc}
 801313a:	d904      	bls.n	8013146 <__ieee754_acosf+0x36>
 801313c:	ee30 8a40 	vsub.f32	s16, s0, s0
 8013140:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8013144:	e7f6      	b.n	8013134 <__ieee754_acosf+0x24>
 8013146:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 801314a:	d23c      	bcs.n	80131c6 <__ieee754_acosf+0xb6>
 801314c:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8013150:	f240 80af 	bls.w	80132b2 <__ieee754_acosf+0x1a2>
 8013154:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013158:	eddf 6a59 	vldr	s13, [pc, #356]	@ 80132c0 <__ieee754_acosf+0x1b0>
 801315c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80132c4 <__ieee754_acosf+0x1b4>
 8013160:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 80132c8 <__ieee754_acosf+0x1b8>
 8013164:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013168:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80132cc <__ieee754_acosf+0x1bc>
 801316c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013170:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 80132d0 <__ieee754_acosf+0x1c0>
 8013174:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013178:	eddf 6a56 	vldr	s13, [pc, #344]	@ 80132d4 <__ieee754_acosf+0x1c4>
 801317c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013180:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80132d8 <__ieee754_acosf+0x1c8>
 8013184:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013188:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80132dc <__ieee754_acosf+0x1cc>
 801318c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8013190:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80132e0 <__ieee754_acosf+0x1d0>
 8013194:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013198:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 80132e4 <__ieee754_acosf+0x1d4>
 801319c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80131a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80131a4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80131a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80131ac:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 80132e8 <__ieee754_acosf+0x1d8>
 80131b0:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80131b4:	eee0 7a46 	vfms.f32	s15, s0, s12
 80131b8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80131bc:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 80132ec <__ieee754_acosf+0x1dc>
 80131c0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80131c4:	e7b6      	b.n	8013134 <__ieee754_acosf+0x24>
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	eddf da3d 	vldr	s27, [pc, #244]	@ 80132c0 <__ieee754_acosf+0x1b0>
 80131cc:	eddf ca3d 	vldr	s25, [pc, #244]	@ 80132c4 <__ieee754_acosf+0x1b4>
 80131d0:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 80132cc <__ieee754_acosf+0x1bc>
 80131d4:	eddf ba3e 	vldr	s23, [pc, #248]	@ 80132d0 <__ieee754_acosf+0x1c0>
 80131d8:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 80132d4 <__ieee754_acosf+0x1c4>
 80131dc:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 80132d8 <__ieee754_acosf+0x1c8>
 80131e0:	ed9f da3e 	vldr	s26, [pc, #248]	@ 80132dc <__ieee754_acosf+0x1cc>
 80131e4:	eddf aa38 	vldr	s21, [pc, #224]	@ 80132c8 <__ieee754_acosf+0x1b8>
 80131e8:	ed9f aa3d 	vldr	s20, [pc, #244]	@ 80132e0 <__ieee754_acosf+0x1d0>
 80131ec:	eddf 9a3d 	vldr	s19, [pc, #244]	@ 80132e4 <__ieee754_acosf+0x1d4>
 80131f0:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 80131f4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80131f8:	da28      	bge.n	801324c <__ieee754_acosf+0x13c>
 80131fa:	ee30 8a09 	vadd.f32	s16, s0, s18
 80131fe:	ee28 0a27 	vmul.f32	s0, s16, s15
 8013202:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8013206:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801320a:	eeac ca80 	vfma.f32	s24, s25, s0
 801320e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8013212:	eeec ba00 	vfma.f32	s23, s24, s0
 8013216:	eeea 9a00 	vfma.f32	s19, s20, s0
 801321a:	eeab ba80 	vfma.f32	s22, s23, s0
 801321e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8013222:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8013226:	ee68 8a80 	vmul.f32	s17, s17, s0
 801322a:	f000 fac1 	bl	80137b0 <__ieee754_sqrtf>
 801322e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8013232:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 80132f0 <__ieee754_acosf+0x1e0>
 8013236:	eee0 7a07 	vfma.f32	s15, s0, s14
 801323a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801323e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013242:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80132f4 <__ieee754_acosf+0x1e4>
 8013246:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801324a:	e773      	b.n	8013134 <__ieee754_acosf+0x24>
 801324c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8013250:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013254:	eeb0 0a48 	vmov.f32	s0, s16
 8013258:	f000 faaa 	bl	80137b0 <__ieee754_sqrtf>
 801325c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8013260:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8013264:	eeac ca88 	vfma.f32	s24, s25, s16
 8013268:	eeaa aa88 	vfma.f32	s20, s21, s16
 801326c:	eeec ba08 	vfma.f32	s23, s24, s16
 8013270:	ee10 3a10 	vmov	r3, s0
 8013274:	eeab ba88 	vfma.f32	s22, s23, s16
 8013278:	f36f 030b 	bfc	r3, #0, #12
 801327c:	eeea 9a08 	vfma.f32	s19, s20, s16
 8013280:	ee07 3a90 	vmov	s15, r3
 8013284:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8013288:	eeb0 6a48 	vmov.f32	s12, s16
 801328c:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8013290:	eea9 9a88 	vfma.f32	s18, s19, s16
 8013294:	ee70 6a27 	vadd.f32	s13, s0, s15
 8013298:	ee68 8a88 	vmul.f32	s17, s17, s16
 801329c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80132a0:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80132a4:	eea0 7a26 	vfma.f32	s14, s0, s13
 80132a8:	ee37 0a87 	vadd.f32	s0, s15, s14
 80132ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 80132b0:	e740      	b.n	8013134 <__ieee754_acosf+0x24>
 80132b2:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80132f8 <__ieee754_acosf+0x1e8>
 80132b6:	e73d      	b.n	8013134 <__ieee754_acosf+0x24>
 80132b8:	40490fdb 	.word	0x40490fdb
 80132bc:	00000000 	.word	0x00000000
 80132c0:	3811ef08 	.word	0x3811ef08
 80132c4:	3a4f7f04 	.word	0x3a4f7f04
 80132c8:	bf303361 	.word	0xbf303361
 80132cc:	bd241146 	.word	0xbd241146
 80132d0:	3e4e0aa8 	.word	0x3e4e0aa8
 80132d4:	bea6b090 	.word	0xbea6b090
 80132d8:	3e2aaaab 	.word	0x3e2aaaab
 80132dc:	3d9dc62e 	.word	0x3d9dc62e
 80132e0:	4001572d 	.word	0x4001572d
 80132e4:	c019d139 	.word	0xc019d139
 80132e8:	33a22168 	.word	0x33a22168
 80132ec:	3fc90fda 	.word	0x3fc90fda
 80132f0:	b3a22168 	.word	0xb3a22168
 80132f4:	40490fda 	.word	0x40490fda
 80132f8:	3fc90fdb 	.word	0x3fc90fdb

080132fc <__ieee754_asinf>:
 80132fc:	b538      	push	{r3, r4, r5, lr}
 80132fe:	ee10 5a10 	vmov	r5, s0
 8013302:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8013306:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 801330a:	ed2d 8b04 	vpush	{d8-d9}
 801330e:	d10c      	bne.n	801332a <__ieee754_asinf+0x2e>
 8013310:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8013484 <__ieee754_asinf+0x188>
 8013314:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8013488 <__ieee754_asinf+0x18c>
 8013318:	ee60 7a27 	vmul.f32	s15, s0, s15
 801331c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013320:	eeb0 0a67 	vmov.f32	s0, s15
 8013324:	ecbd 8b04 	vpop	{d8-d9}
 8013328:	bd38      	pop	{r3, r4, r5, pc}
 801332a:	d904      	bls.n	8013336 <__ieee754_asinf+0x3a>
 801332c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013330:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013334:	e7f6      	b.n	8013324 <__ieee754_asinf+0x28>
 8013336:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801333a:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801333e:	d20b      	bcs.n	8013358 <__ieee754_asinf+0x5c>
 8013340:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8013344:	d252      	bcs.n	80133ec <__ieee754_asinf+0xf0>
 8013346:	eddf 7a51 	vldr	s15, [pc, #324]	@ 801348c <__ieee754_asinf+0x190>
 801334a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801334e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013356:	dce5      	bgt.n	8013324 <__ieee754_asinf+0x28>
 8013358:	f7ff fe70 	bl	801303c <fabsf>
 801335c:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8013360:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013364:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013368:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8013490 <__ieee754_asinf+0x194>
 801336c:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8013494 <__ieee754_asinf+0x198>
 8013370:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 8013498 <__ieee754_asinf+0x19c>
 8013374:	eea8 7a27 	vfma.f32	s14, s16, s15
 8013378:	eddf 7a48 	vldr	s15, [pc, #288]	@ 801349c <__ieee754_asinf+0x1a0>
 801337c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013380:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80134a0 <__ieee754_asinf+0x1a4>
 8013384:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013388:	eddf 7a46 	vldr	s15, [pc, #280]	@ 80134a4 <__ieee754_asinf+0x1a8>
 801338c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013390:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80134a8 <__ieee754_asinf+0x1ac>
 8013394:	eea7 9a88 	vfma.f32	s18, s15, s16
 8013398:	eddf 7a44 	vldr	s15, [pc, #272]	@ 80134ac <__ieee754_asinf+0x1b0>
 801339c:	eee8 7a07 	vfma.f32	s15, s16, s14
 80133a0:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80134b0 <__ieee754_asinf+0x1b4>
 80133a4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80133a8:	eddf 7a42 	vldr	s15, [pc, #264]	@ 80134b4 <__ieee754_asinf+0x1b8>
 80133ac:	eee7 7a08 	vfma.f32	s15, s14, s16
 80133b0:	eeb0 0a48 	vmov.f32	s0, s16
 80133b4:	eee7 8a88 	vfma.f32	s17, s15, s16
 80133b8:	f000 f9fa 	bl	80137b0 <__ieee754_sqrtf>
 80133bc:	4b3e      	ldr	r3, [pc, #248]	@ (80134b8 <__ieee754_asinf+0x1bc>)
 80133be:	ee29 9a08 	vmul.f32	s18, s18, s16
 80133c2:	429c      	cmp	r4, r3
 80133c4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80133c8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80133cc:	d93d      	bls.n	801344a <__ieee754_asinf+0x14e>
 80133ce:	eea0 0a06 	vfma.f32	s0, s0, s12
 80133d2:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 80134bc <__ieee754_asinf+0x1c0>
 80133d6:	eee0 7a26 	vfma.f32	s15, s0, s13
 80133da:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8013488 <__ieee754_asinf+0x18c>
 80133de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80133e2:	2d00      	cmp	r5, #0
 80133e4:	bfd8      	it	le
 80133e6:	eeb1 0a40 	vnegle.f32	s0, s0
 80133ea:	e79b      	b.n	8013324 <__ieee754_asinf+0x28>
 80133ec:	ee60 7a00 	vmul.f32	s15, s0, s0
 80133f0:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8013494 <__ieee754_asinf+0x198>
 80133f4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8013490 <__ieee754_asinf+0x194>
 80133f8:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 80134a8 <__ieee754_asinf+0x1ac>
 80133fc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013400:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801349c <__ieee754_asinf+0x1a0>
 8013404:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013408:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80134a0 <__ieee754_asinf+0x1a4>
 801340c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013410:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80134a4 <__ieee754_asinf+0x1a8>
 8013414:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013418:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8013498 <__ieee754_asinf+0x19c>
 801341c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013420:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80134ac <__ieee754_asinf+0x1b0>
 8013424:	eee7 6a86 	vfma.f32	s13, s15, s12
 8013428:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 80134b0 <__ieee754_asinf+0x1b4>
 801342c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8013430:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80134b4 <__ieee754_asinf+0x1b8>
 8013434:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013438:	ee27 7a27 	vmul.f32	s14, s14, s15
 801343c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8013440:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8013444:	eea0 0a27 	vfma.f32	s0, s0, s15
 8013448:	e76c      	b.n	8013324 <__ieee754_asinf+0x28>
 801344a:	ee10 3a10 	vmov	r3, s0
 801344e:	f36f 030b 	bfc	r3, #0, #12
 8013452:	ee07 3a10 	vmov	s14, r3
 8013456:	eea7 8a47 	vfms.f32	s16, s14, s14
 801345a:	ee70 5a00 	vadd.f32	s11, s0, s0
 801345e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8013462:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8013484 <__ieee754_asinf+0x188>
 8013466:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801346a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80134c0 <__ieee754_asinf+0x1c4>
 801346e:	eee5 7a66 	vfms.f32	s15, s10, s13
 8013472:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8013476:	eeb0 6a40 	vmov.f32	s12, s0
 801347a:	eea7 6a66 	vfms.f32	s12, s14, s13
 801347e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013482:	e7ac      	b.n	80133de <__ieee754_asinf+0xe2>
 8013484:	b33bbd2e 	.word	0xb33bbd2e
 8013488:	3fc90fdb 	.word	0x3fc90fdb
 801348c:	7149f2ca 	.word	0x7149f2ca
 8013490:	3a4f7f04 	.word	0x3a4f7f04
 8013494:	3811ef08 	.word	0x3811ef08
 8013498:	3e2aaaab 	.word	0x3e2aaaab
 801349c:	bd241146 	.word	0xbd241146
 80134a0:	3e4e0aa8 	.word	0x3e4e0aa8
 80134a4:	bea6b090 	.word	0xbea6b090
 80134a8:	3d9dc62e 	.word	0x3d9dc62e
 80134ac:	bf303361 	.word	0xbf303361
 80134b0:	4001572d 	.word	0x4001572d
 80134b4:	c019d139 	.word	0xc019d139
 80134b8:	3f799999 	.word	0x3f799999
 80134bc:	333bbd2e 	.word	0x333bbd2e
 80134c0:	3f490fdb 	.word	0x3f490fdb

080134c4 <__ieee754_atan2f>:
 80134c4:	ee10 2a90 	vmov	r2, s1
 80134c8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80134cc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80134d0:	b510      	push	{r4, lr}
 80134d2:	eef0 7a40 	vmov.f32	s15, s0
 80134d6:	d806      	bhi.n	80134e6 <__ieee754_atan2f+0x22>
 80134d8:	ee10 0a10 	vmov	r0, s0
 80134dc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80134e0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80134e4:	d904      	bls.n	80134f0 <__ieee754_atan2f+0x2c>
 80134e6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80134ea:	eeb0 0a67 	vmov.f32	s0, s15
 80134ee:	bd10      	pop	{r4, pc}
 80134f0:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80134f4:	d103      	bne.n	80134fe <__ieee754_atan2f+0x3a>
 80134f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134fa:	f001 becb 	b.w	8015294 <atanf>
 80134fe:	1794      	asrs	r4, r2, #30
 8013500:	f004 0402 	and.w	r4, r4, #2
 8013504:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8013508:	b943      	cbnz	r3, 801351c <__ieee754_atan2f+0x58>
 801350a:	2c02      	cmp	r4, #2
 801350c:	d05e      	beq.n	80135cc <__ieee754_atan2f+0x108>
 801350e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80135e0 <__ieee754_atan2f+0x11c>
 8013512:	2c03      	cmp	r4, #3
 8013514:	bf08      	it	eq
 8013516:	eef0 7a47 	vmoveq.f32	s15, s14
 801351a:	e7e6      	b.n	80134ea <__ieee754_atan2f+0x26>
 801351c:	b941      	cbnz	r1, 8013530 <__ieee754_atan2f+0x6c>
 801351e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80135e4 <__ieee754_atan2f+0x120>
 8013522:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80135e8 <__ieee754_atan2f+0x124>
 8013526:	2800      	cmp	r0, #0
 8013528:	bfa8      	it	ge
 801352a:	eef0 7a47 	vmovge.f32	s15, s14
 801352e:	e7dc      	b.n	80134ea <__ieee754_atan2f+0x26>
 8013530:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8013534:	d110      	bne.n	8013558 <__ieee754_atan2f+0x94>
 8013536:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801353a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801353e:	d107      	bne.n	8013550 <__ieee754_atan2f+0x8c>
 8013540:	2c02      	cmp	r4, #2
 8013542:	d846      	bhi.n	80135d2 <__ieee754_atan2f+0x10e>
 8013544:	4b29      	ldr	r3, [pc, #164]	@ (80135ec <__ieee754_atan2f+0x128>)
 8013546:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801354a:	edd3 7a00 	vldr	s15, [r3]
 801354e:	e7cc      	b.n	80134ea <__ieee754_atan2f+0x26>
 8013550:	2c02      	cmp	r4, #2
 8013552:	d841      	bhi.n	80135d8 <__ieee754_atan2f+0x114>
 8013554:	4b26      	ldr	r3, [pc, #152]	@ (80135f0 <__ieee754_atan2f+0x12c>)
 8013556:	e7f6      	b.n	8013546 <__ieee754_atan2f+0x82>
 8013558:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801355c:	d0df      	beq.n	801351e <__ieee754_atan2f+0x5a>
 801355e:	1a5b      	subs	r3, r3, r1
 8013560:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8013564:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8013568:	da1a      	bge.n	80135a0 <__ieee754_atan2f+0xdc>
 801356a:	2a00      	cmp	r2, #0
 801356c:	da01      	bge.n	8013572 <__ieee754_atan2f+0xae>
 801356e:	313c      	adds	r1, #60	@ 0x3c
 8013570:	db19      	blt.n	80135a6 <__ieee754_atan2f+0xe2>
 8013572:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8013576:	f7ff fd61 	bl	801303c <fabsf>
 801357a:	f001 fe8b 	bl	8015294 <atanf>
 801357e:	eef0 7a40 	vmov.f32	s15, s0
 8013582:	2c01      	cmp	r4, #1
 8013584:	d012      	beq.n	80135ac <__ieee754_atan2f+0xe8>
 8013586:	2c02      	cmp	r4, #2
 8013588:	d017      	beq.n	80135ba <__ieee754_atan2f+0xf6>
 801358a:	2c00      	cmp	r4, #0
 801358c:	d0ad      	beq.n	80134ea <__ieee754_atan2f+0x26>
 801358e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80135f4 <__ieee754_atan2f+0x130>
 8013592:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013596:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80135f8 <__ieee754_atan2f+0x134>
 801359a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801359e:	e7a4      	b.n	80134ea <__ieee754_atan2f+0x26>
 80135a0:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80135e8 <__ieee754_atan2f+0x124>
 80135a4:	e7ed      	b.n	8013582 <__ieee754_atan2f+0xbe>
 80135a6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80135fc <__ieee754_atan2f+0x138>
 80135aa:	e7ea      	b.n	8013582 <__ieee754_atan2f+0xbe>
 80135ac:	ee17 3a90 	vmov	r3, s15
 80135b0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80135b4:	ee07 3a90 	vmov	s15, r3
 80135b8:	e797      	b.n	80134ea <__ieee754_atan2f+0x26>
 80135ba:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80135f4 <__ieee754_atan2f+0x130>
 80135be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80135c2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80135f8 <__ieee754_atan2f+0x134>
 80135c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80135ca:	e78e      	b.n	80134ea <__ieee754_atan2f+0x26>
 80135cc:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80135f8 <__ieee754_atan2f+0x134>
 80135d0:	e78b      	b.n	80134ea <__ieee754_atan2f+0x26>
 80135d2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8013600 <__ieee754_atan2f+0x13c>
 80135d6:	e788      	b.n	80134ea <__ieee754_atan2f+0x26>
 80135d8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80135fc <__ieee754_atan2f+0x138>
 80135dc:	e785      	b.n	80134ea <__ieee754_atan2f+0x26>
 80135de:	bf00      	nop
 80135e0:	c0490fdb 	.word	0xc0490fdb
 80135e4:	bfc90fdb 	.word	0xbfc90fdb
 80135e8:	3fc90fdb 	.word	0x3fc90fdb
 80135ec:	08015b1c 	.word	0x08015b1c
 80135f0:	08015b10 	.word	0x08015b10
 80135f4:	33bbbd2e 	.word	0x33bbbd2e
 80135f8:	40490fdb 	.word	0x40490fdb
 80135fc:	00000000 	.word	0x00000000
 8013600:	3f490fdb 	.word	0x3f490fdb

08013604 <__ieee754_sqrt>:
 8013604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013608:	4a66      	ldr	r2, [pc, #408]	@ (80137a4 <__ieee754_sqrt+0x1a0>)
 801360a:	ec55 4b10 	vmov	r4, r5, d0
 801360e:	43aa      	bics	r2, r5
 8013610:	462b      	mov	r3, r5
 8013612:	4621      	mov	r1, r4
 8013614:	d110      	bne.n	8013638 <__ieee754_sqrt+0x34>
 8013616:	4622      	mov	r2, r4
 8013618:	4620      	mov	r0, r4
 801361a:	4629      	mov	r1, r5
 801361c:	f7ed f80c 	bl	8000638 <__aeabi_dmul>
 8013620:	4602      	mov	r2, r0
 8013622:	460b      	mov	r3, r1
 8013624:	4620      	mov	r0, r4
 8013626:	4629      	mov	r1, r5
 8013628:	f7ec fe50 	bl	80002cc <__adddf3>
 801362c:	4604      	mov	r4, r0
 801362e:	460d      	mov	r5, r1
 8013630:	ec45 4b10 	vmov	d0, r4, r5
 8013634:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013638:	2d00      	cmp	r5, #0
 801363a:	dc0e      	bgt.n	801365a <__ieee754_sqrt+0x56>
 801363c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8013640:	4322      	orrs	r2, r4
 8013642:	d0f5      	beq.n	8013630 <__ieee754_sqrt+0x2c>
 8013644:	b19d      	cbz	r5, 801366e <__ieee754_sqrt+0x6a>
 8013646:	4622      	mov	r2, r4
 8013648:	4620      	mov	r0, r4
 801364a:	4629      	mov	r1, r5
 801364c:	f7ec fe3c 	bl	80002c8 <__aeabi_dsub>
 8013650:	4602      	mov	r2, r0
 8013652:	460b      	mov	r3, r1
 8013654:	f7ed f91a 	bl	800088c <__aeabi_ddiv>
 8013658:	e7e8      	b.n	801362c <__ieee754_sqrt+0x28>
 801365a:	152a      	asrs	r2, r5, #20
 801365c:	d115      	bne.n	801368a <__ieee754_sqrt+0x86>
 801365e:	2000      	movs	r0, #0
 8013660:	e009      	b.n	8013676 <__ieee754_sqrt+0x72>
 8013662:	0acb      	lsrs	r3, r1, #11
 8013664:	3a15      	subs	r2, #21
 8013666:	0549      	lsls	r1, r1, #21
 8013668:	2b00      	cmp	r3, #0
 801366a:	d0fa      	beq.n	8013662 <__ieee754_sqrt+0x5e>
 801366c:	e7f7      	b.n	801365e <__ieee754_sqrt+0x5a>
 801366e:	462a      	mov	r2, r5
 8013670:	e7fa      	b.n	8013668 <__ieee754_sqrt+0x64>
 8013672:	005b      	lsls	r3, r3, #1
 8013674:	3001      	adds	r0, #1
 8013676:	02dc      	lsls	r4, r3, #11
 8013678:	d5fb      	bpl.n	8013672 <__ieee754_sqrt+0x6e>
 801367a:	1e44      	subs	r4, r0, #1
 801367c:	1b12      	subs	r2, r2, r4
 801367e:	f1c0 0420 	rsb	r4, r0, #32
 8013682:	fa21 f404 	lsr.w	r4, r1, r4
 8013686:	4323      	orrs	r3, r4
 8013688:	4081      	lsls	r1, r0
 801368a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801368e:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8013692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013696:	07d2      	lsls	r2, r2, #31
 8013698:	bf5c      	itt	pl
 801369a:	005b      	lslpl	r3, r3, #1
 801369c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80136a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80136a4:	bf58      	it	pl
 80136a6:	0049      	lslpl	r1, r1, #1
 80136a8:	2600      	movs	r6, #0
 80136aa:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80136ae:	107f      	asrs	r7, r7, #1
 80136b0:	0049      	lsls	r1, r1, #1
 80136b2:	2016      	movs	r0, #22
 80136b4:	4632      	mov	r2, r6
 80136b6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80136ba:	1915      	adds	r5, r2, r4
 80136bc:	429d      	cmp	r5, r3
 80136be:	bfde      	ittt	le
 80136c0:	192a      	addle	r2, r5, r4
 80136c2:	1b5b      	suble	r3, r3, r5
 80136c4:	1936      	addle	r6, r6, r4
 80136c6:	0fcd      	lsrs	r5, r1, #31
 80136c8:	3801      	subs	r0, #1
 80136ca:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80136ce:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80136d2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80136d6:	d1f0      	bne.n	80136ba <__ieee754_sqrt+0xb6>
 80136d8:	4605      	mov	r5, r0
 80136da:	2420      	movs	r4, #32
 80136dc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80136e0:	4293      	cmp	r3, r2
 80136e2:	eb0c 0e00 	add.w	lr, ip, r0
 80136e6:	dc02      	bgt.n	80136ee <__ieee754_sqrt+0xea>
 80136e8:	d113      	bne.n	8013712 <__ieee754_sqrt+0x10e>
 80136ea:	458e      	cmp	lr, r1
 80136ec:	d811      	bhi.n	8013712 <__ieee754_sqrt+0x10e>
 80136ee:	f1be 0f00 	cmp.w	lr, #0
 80136f2:	eb0e 000c 	add.w	r0, lr, ip
 80136f6:	da3f      	bge.n	8013778 <__ieee754_sqrt+0x174>
 80136f8:	2800      	cmp	r0, #0
 80136fa:	db3d      	blt.n	8013778 <__ieee754_sqrt+0x174>
 80136fc:	f102 0801 	add.w	r8, r2, #1
 8013700:	1a9b      	subs	r3, r3, r2
 8013702:	458e      	cmp	lr, r1
 8013704:	bf88      	it	hi
 8013706:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801370a:	eba1 010e 	sub.w	r1, r1, lr
 801370e:	4465      	add	r5, ip
 8013710:	4642      	mov	r2, r8
 8013712:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8013716:	3c01      	subs	r4, #1
 8013718:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801371c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013720:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8013724:	d1dc      	bne.n	80136e0 <__ieee754_sqrt+0xdc>
 8013726:	4319      	orrs	r1, r3
 8013728:	d01b      	beq.n	8013762 <__ieee754_sqrt+0x15e>
 801372a:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80137a8 <__ieee754_sqrt+0x1a4>
 801372e:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80137ac <__ieee754_sqrt+0x1a8>
 8013732:	e9da 0100 	ldrd	r0, r1, [sl]
 8013736:	e9db 2300 	ldrd	r2, r3, [fp]
 801373a:	f7ec fdc5 	bl	80002c8 <__aeabi_dsub>
 801373e:	e9da 8900 	ldrd	r8, r9, [sl]
 8013742:	4602      	mov	r2, r0
 8013744:	460b      	mov	r3, r1
 8013746:	4640      	mov	r0, r8
 8013748:	4649      	mov	r1, r9
 801374a:	f7ed f9f1 	bl	8000b30 <__aeabi_dcmple>
 801374e:	b140      	cbz	r0, 8013762 <__ieee754_sqrt+0x15e>
 8013750:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8013754:	e9da 0100 	ldrd	r0, r1, [sl]
 8013758:	e9db 2300 	ldrd	r2, r3, [fp]
 801375c:	d10e      	bne.n	801377c <__ieee754_sqrt+0x178>
 801375e:	3601      	adds	r6, #1
 8013760:	4625      	mov	r5, r4
 8013762:	1073      	asrs	r3, r6, #1
 8013764:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8013768:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 801376c:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8013770:	086b      	lsrs	r3, r5, #1
 8013772:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8013776:	e759      	b.n	801362c <__ieee754_sqrt+0x28>
 8013778:	4690      	mov	r8, r2
 801377a:	e7c1      	b.n	8013700 <__ieee754_sqrt+0xfc>
 801377c:	f7ec fda6 	bl	80002cc <__adddf3>
 8013780:	e9da 8900 	ldrd	r8, r9, [sl]
 8013784:	4602      	mov	r2, r0
 8013786:	460b      	mov	r3, r1
 8013788:	4640      	mov	r0, r8
 801378a:	4649      	mov	r1, r9
 801378c:	f7ed f9c6 	bl	8000b1c <__aeabi_dcmplt>
 8013790:	b120      	cbz	r0, 801379c <__ieee754_sqrt+0x198>
 8013792:	1cab      	adds	r3, r5, #2
 8013794:	bf08      	it	eq
 8013796:	3601      	addeq	r6, #1
 8013798:	3502      	adds	r5, #2
 801379a:	e7e2      	b.n	8013762 <__ieee754_sqrt+0x15e>
 801379c:	1c6b      	adds	r3, r5, #1
 801379e:	f023 0501 	bic.w	r5, r3, #1
 80137a2:	e7de      	b.n	8013762 <__ieee754_sqrt+0x15e>
 80137a4:	7ff00000 	.word	0x7ff00000
 80137a8:	08015b30 	.word	0x08015b30
 80137ac:	08015b28 	.word	0x08015b28

080137b0 <__ieee754_sqrtf>:
 80137b0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80137b4:	4770      	bx	lr
	...

080137b8 <floor>:
 80137b8:	ec51 0b10 	vmov	r0, r1, d0
 80137bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80137c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137c4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80137c8:	2e13      	cmp	r6, #19
 80137ca:	460c      	mov	r4, r1
 80137cc:	4605      	mov	r5, r0
 80137ce:	4680      	mov	r8, r0
 80137d0:	dc34      	bgt.n	801383c <floor+0x84>
 80137d2:	2e00      	cmp	r6, #0
 80137d4:	da17      	bge.n	8013806 <floor+0x4e>
 80137d6:	a332      	add	r3, pc, #200	@ (adr r3, 80138a0 <floor+0xe8>)
 80137d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137dc:	f7ec fd76 	bl	80002cc <__adddf3>
 80137e0:	2200      	movs	r2, #0
 80137e2:	2300      	movs	r3, #0
 80137e4:	f7ed f9b8 	bl	8000b58 <__aeabi_dcmpgt>
 80137e8:	b150      	cbz	r0, 8013800 <floor+0x48>
 80137ea:	2c00      	cmp	r4, #0
 80137ec:	da55      	bge.n	801389a <floor+0xe2>
 80137ee:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80137f2:	432c      	orrs	r4, r5
 80137f4:	2500      	movs	r5, #0
 80137f6:	42ac      	cmp	r4, r5
 80137f8:	4c2b      	ldr	r4, [pc, #172]	@ (80138a8 <floor+0xf0>)
 80137fa:	bf08      	it	eq
 80137fc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8013800:	4621      	mov	r1, r4
 8013802:	4628      	mov	r0, r5
 8013804:	e023      	b.n	801384e <floor+0x96>
 8013806:	4f29      	ldr	r7, [pc, #164]	@ (80138ac <floor+0xf4>)
 8013808:	4137      	asrs	r7, r6
 801380a:	ea01 0307 	and.w	r3, r1, r7
 801380e:	4303      	orrs	r3, r0
 8013810:	d01d      	beq.n	801384e <floor+0x96>
 8013812:	a323      	add	r3, pc, #140	@ (adr r3, 80138a0 <floor+0xe8>)
 8013814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013818:	f7ec fd58 	bl	80002cc <__adddf3>
 801381c:	2200      	movs	r2, #0
 801381e:	2300      	movs	r3, #0
 8013820:	f7ed f99a 	bl	8000b58 <__aeabi_dcmpgt>
 8013824:	2800      	cmp	r0, #0
 8013826:	d0eb      	beq.n	8013800 <floor+0x48>
 8013828:	2c00      	cmp	r4, #0
 801382a:	bfbe      	ittt	lt
 801382c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8013830:	4133      	asrlt	r3, r6
 8013832:	18e4      	addlt	r4, r4, r3
 8013834:	ea24 0407 	bic.w	r4, r4, r7
 8013838:	2500      	movs	r5, #0
 801383a:	e7e1      	b.n	8013800 <floor+0x48>
 801383c:	2e33      	cmp	r6, #51	@ 0x33
 801383e:	dd0a      	ble.n	8013856 <floor+0x9e>
 8013840:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8013844:	d103      	bne.n	801384e <floor+0x96>
 8013846:	4602      	mov	r2, r0
 8013848:	460b      	mov	r3, r1
 801384a:	f7ec fd3f 	bl	80002cc <__adddf3>
 801384e:	ec41 0b10 	vmov	d0, r0, r1
 8013852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013856:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801385a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801385e:	40df      	lsrs	r7, r3
 8013860:	4207      	tst	r7, r0
 8013862:	d0f4      	beq.n	801384e <floor+0x96>
 8013864:	a30e      	add	r3, pc, #56	@ (adr r3, 80138a0 <floor+0xe8>)
 8013866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801386a:	f7ec fd2f 	bl	80002cc <__adddf3>
 801386e:	2200      	movs	r2, #0
 8013870:	2300      	movs	r3, #0
 8013872:	f7ed f971 	bl	8000b58 <__aeabi_dcmpgt>
 8013876:	2800      	cmp	r0, #0
 8013878:	d0c2      	beq.n	8013800 <floor+0x48>
 801387a:	2c00      	cmp	r4, #0
 801387c:	da0a      	bge.n	8013894 <floor+0xdc>
 801387e:	2e14      	cmp	r6, #20
 8013880:	d101      	bne.n	8013886 <floor+0xce>
 8013882:	3401      	adds	r4, #1
 8013884:	e006      	b.n	8013894 <floor+0xdc>
 8013886:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801388a:	2301      	movs	r3, #1
 801388c:	40b3      	lsls	r3, r6
 801388e:	441d      	add	r5, r3
 8013890:	4545      	cmp	r5, r8
 8013892:	d3f6      	bcc.n	8013882 <floor+0xca>
 8013894:	ea25 0507 	bic.w	r5, r5, r7
 8013898:	e7b2      	b.n	8013800 <floor+0x48>
 801389a:	2500      	movs	r5, #0
 801389c:	462c      	mov	r4, r5
 801389e:	e7af      	b.n	8013800 <floor+0x48>
 80138a0:	8800759c 	.word	0x8800759c
 80138a4:	7e37e43c 	.word	0x7e37e43c
 80138a8:	bff00000 	.word	0xbff00000
 80138ac:	000fffff 	.word	0x000fffff

080138b0 <round>:
 80138b0:	ec51 0b10 	vmov	r0, r1, d0
 80138b4:	b570      	push	{r4, r5, r6, lr}
 80138b6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80138ba:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 80138be:	2a13      	cmp	r2, #19
 80138c0:	460b      	mov	r3, r1
 80138c2:	4605      	mov	r5, r0
 80138c4:	dc1b      	bgt.n	80138fe <round+0x4e>
 80138c6:	2a00      	cmp	r2, #0
 80138c8:	da0b      	bge.n	80138e2 <round+0x32>
 80138ca:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80138ce:	3201      	adds	r2, #1
 80138d0:	bf04      	itt	eq
 80138d2:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80138d6:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80138da:	2200      	movs	r2, #0
 80138dc:	4619      	mov	r1, r3
 80138de:	4610      	mov	r0, r2
 80138e0:	e015      	b.n	801390e <round+0x5e>
 80138e2:	4c15      	ldr	r4, [pc, #84]	@ (8013938 <round+0x88>)
 80138e4:	4114      	asrs	r4, r2
 80138e6:	ea04 0601 	and.w	r6, r4, r1
 80138ea:	4306      	orrs	r6, r0
 80138ec:	d00f      	beq.n	801390e <round+0x5e>
 80138ee:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80138f2:	fa41 f202 	asr.w	r2, r1, r2
 80138f6:	4413      	add	r3, r2
 80138f8:	ea23 0304 	bic.w	r3, r3, r4
 80138fc:	e7ed      	b.n	80138da <round+0x2a>
 80138fe:	2a33      	cmp	r2, #51	@ 0x33
 8013900:	dd08      	ble.n	8013914 <round+0x64>
 8013902:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8013906:	d102      	bne.n	801390e <round+0x5e>
 8013908:	4602      	mov	r2, r0
 801390a:	f7ec fcdf 	bl	80002cc <__adddf3>
 801390e:	ec41 0b10 	vmov	d0, r0, r1
 8013912:	bd70      	pop	{r4, r5, r6, pc}
 8013914:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8013918:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801391c:	40f4      	lsrs	r4, r6
 801391e:	4204      	tst	r4, r0
 8013920:	d0f5      	beq.n	801390e <round+0x5e>
 8013922:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8013926:	2201      	movs	r2, #1
 8013928:	408a      	lsls	r2, r1
 801392a:	1952      	adds	r2, r2, r5
 801392c:	bf28      	it	cs
 801392e:	3301      	addcs	r3, #1
 8013930:	ea22 0204 	bic.w	r2, r2, r4
 8013934:	e7d2      	b.n	80138dc <round+0x2c>
 8013936:	bf00      	nop
 8013938:	000fffff 	.word	0x000fffff

0801393c <fmaxf>:
 801393c:	b508      	push	{r3, lr}
 801393e:	ed2d 8b02 	vpush	{d8}
 8013942:	eeb0 8a40 	vmov.f32	s16, s0
 8013946:	eef0 8a60 	vmov.f32	s17, s1
 801394a:	f000 f831 	bl	80139b0 <__fpclassifyf>
 801394e:	b930      	cbnz	r0, 801395e <fmaxf+0x22>
 8013950:	eeb0 8a68 	vmov.f32	s16, s17
 8013954:	eeb0 0a48 	vmov.f32	s0, s16
 8013958:	ecbd 8b02 	vpop	{d8}
 801395c:	bd08      	pop	{r3, pc}
 801395e:	eeb0 0a68 	vmov.f32	s0, s17
 8013962:	f000 f825 	bl	80139b0 <__fpclassifyf>
 8013966:	2800      	cmp	r0, #0
 8013968:	d0f4      	beq.n	8013954 <fmaxf+0x18>
 801396a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801396e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013972:	dded      	ble.n	8013950 <fmaxf+0x14>
 8013974:	e7ee      	b.n	8013954 <fmaxf+0x18>

08013976 <fminf>:
 8013976:	b508      	push	{r3, lr}
 8013978:	ed2d 8b02 	vpush	{d8}
 801397c:	eeb0 8a40 	vmov.f32	s16, s0
 8013980:	eef0 8a60 	vmov.f32	s17, s1
 8013984:	f000 f814 	bl	80139b0 <__fpclassifyf>
 8013988:	b930      	cbnz	r0, 8013998 <fminf+0x22>
 801398a:	eeb0 8a68 	vmov.f32	s16, s17
 801398e:	eeb0 0a48 	vmov.f32	s0, s16
 8013992:	ecbd 8b02 	vpop	{d8}
 8013996:	bd08      	pop	{r3, pc}
 8013998:	eeb0 0a68 	vmov.f32	s0, s17
 801399c:	f000 f808 	bl	80139b0 <__fpclassifyf>
 80139a0:	2800      	cmp	r0, #0
 80139a2:	d0f4      	beq.n	801398e <fminf+0x18>
 80139a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80139a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ac:	d5ed      	bpl.n	801398a <fminf+0x14>
 80139ae:	e7ee      	b.n	801398e <fminf+0x18>

080139b0 <__fpclassifyf>:
 80139b0:	ee10 3a10 	vmov	r3, s0
 80139b4:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80139b8:	d00d      	beq.n	80139d6 <__fpclassifyf+0x26>
 80139ba:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80139be:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80139c2:	d30a      	bcc.n	80139da <__fpclassifyf+0x2a>
 80139c4:	4b07      	ldr	r3, [pc, #28]	@ (80139e4 <__fpclassifyf+0x34>)
 80139c6:	1e42      	subs	r2, r0, #1
 80139c8:	429a      	cmp	r2, r3
 80139ca:	d908      	bls.n	80139de <__fpclassifyf+0x2e>
 80139cc:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80139d0:	4258      	negs	r0, r3
 80139d2:	4158      	adcs	r0, r3
 80139d4:	4770      	bx	lr
 80139d6:	2002      	movs	r0, #2
 80139d8:	4770      	bx	lr
 80139da:	2004      	movs	r0, #4
 80139dc:	4770      	bx	lr
 80139de:	2003      	movs	r0, #3
 80139e0:	4770      	bx	lr
 80139e2:	bf00      	nop
 80139e4:	007ffffe 	.word	0x007ffffe

080139e8 <__ieee754_pow>:
 80139e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139ec:	b091      	sub	sp, #68	@ 0x44
 80139ee:	ed8d 1b00 	vstr	d1, [sp]
 80139f2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80139f6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80139fa:	ea5a 0001 	orrs.w	r0, sl, r1
 80139fe:	ec57 6b10 	vmov	r6, r7, d0
 8013a02:	d113      	bne.n	8013a2c <__ieee754_pow+0x44>
 8013a04:	19b3      	adds	r3, r6, r6
 8013a06:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8013a0a:	4152      	adcs	r2, r2
 8013a0c:	4298      	cmp	r0, r3
 8013a0e:	4b9a      	ldr	r3, [pc, #616]	@ (8013c78 <__ieee754_pow+0x290>)
 8013a10:	4193      	sbcs	r3, r2
 8013a12:	f080 84ee 	bcs.w	80143f2 <__ieee754_pow+0xa0a>
 8013a16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013a1a:	4630      	mov	r0, r6
 8013a1c:	4639      	mov	r1, r7
 8013a1e:	f7ec fc55 	bl	80002cc <__adddf3>
 8013a22:	ec41 0b10 	vmov	d0, r0, r1
 8013a26:	b011      	add	sp, #68	@ 0x44
 8013a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a2c:	4a93      	ldr	r2, [pc, #588]	@ (8013c7c <__ieee754_pow+0x294>)
 8013a2e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8013a32:	4295      	cmp	r5, r2
 8013a34:	46b8      	mov	r8, r7
 8013a36:	4633      	mov	r3, r6
 8013a38:	d80a      	bhi.n	8013a50 <__ieee754_pow+0x68>
 8013a3a:	d104      	bne.n	8013a46 <__ieee754_pow+0x5e>
 8013a3c:	2e00      	cmp	r6, #0
 8013a3e:	d1ea      	bne.n	8013a16 <__ieee754_pow+0x2e>
 8013a40:	45aa      	cmp	sl, r5
 8013a42:	d8e8      	bhi.n	8013a16 <__ieee754_pow+0x2e>
 8013a44:	e001      	b.n	8013a4a <__ieee754_pow+0x62>
 8013a46:	4592      	cmp	sl, r2
 8013a48:	d802      	bhi.n	8013a50 <__ieee754_pow+0x68>
 8013a4a:	4592      	cmp	sl, r2
 8013a4c:	d10f      	bne.n	8013a6e <__ieee754_pow+0x86>
 8013a4e:	b171      	cbz	r1, 8013a6e <__ieee754_pow+0x86>
 8013a50:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8013a54:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8013a58:	ea58 0803 	orrs.w	r8, r8, r3
 8013a5c:	d1db      	bne.n	8013a16 <__ieee754_pow+0x2e>
 8013a5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013a62:	18db      	adds	r3, r3, r3
 8013a64:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8013a68:	4152      	adcs	r2, r2
 8013a6a:	4598      	cmp	r8, r3
 8013a6c:	e7cf      	b.n	8013a0e <__ieee754_pow+0x26>
 8013a6e:	f1b8 0f00 	cmp.w	r8, #0
 8013a72:	46ab      	mov	fp, r5
 8013a74:	da43      	bge.n	8013afe <__ieee754_pow+0x116>
 8013a76:	4a82      	ldr	r2, [pc, #520]	@ (8013c80 <__ieee754_pow+0x298>)
 8013a78:	4592      	cmp	sl, r2
 8013a7a:	d856      	bhi.n	8013b2a <__ieee754_pow+0x142>
 8013a7c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8013a80:	4592      	cmp	sl, r2
 8013a82:	f240 84c5 	bls.w	8014410 <__ieee754_pow+0xa28>
 8013a86:	ea4f 522a 	mov.w	r2, sl, asr #20
 8013a8a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8013a8e:	2a14      	cmp	r2, #20
 8013a90:	dd18      	ble.n	8013ac4 <__ieee754_pow+0xdc>
 8013a92:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8013a96:	fa21 f402 	lsr.w	r4, r1, r2
 8013a9a:	fa04 f202 	lsl.w	r2, r4, r2
 8013a9e:	428a      	cmp	r2, r1
 8013aa0:	f040 84b6 	bne.w	8014410 <__ieee754_pow+0xa28>
 8013aa4:	f004 0401 	and.w	r4, r4, #1
 8013aa8:	f1c4 0402 	rsb	r4, r4, #2
 8013aac:	2900      	cmp	r1, #0
 8013aae:	d159      	bne.n	8013b64 <__ieee754_pow+0x17c>
 8013ab0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8013ab4:	d148      	bne.n	8013b48 <__ieee754_pow+0x160>
 8013ab6:	4632      	mov	r2, r6
 8013ab8:	463b      	mov	r3, r7
 8013aba:	4630      	mov	r0, r6
 8013abc:	4639      	mov	r1, r7
 8013abe:	f7ec fdbb 	bl	8000638 <__aeabi_dmul>
 8013ac2:	e7ae      	b.n	8013a22 <__ieee754_pow+0x3a>
 8013ac4:	2900      	cmp	r1, #0
 8013ac6:	d14c      	bne.n	8013b62 <__ieee754_pow+0x17a>
 8013ac8:	f1c2 0214 	rsb	r2, r2, #20
 8013acc:	fa4a f402 	asr.w	r4, sl, r2
 8013ad0:	fa04 f202 	lsl.w	r2, r4, r2
 8013ad4:	4552      	cmp	r2, sl
 8013ad6:	f040 8498 	bne.w	801440a <__ieee754_pow+0xa22>
 8013ada:	f004 0401 	and.w	r4, r4, #1
 8013ade:	f1c4 0402 	rsb	r4, r4, #2
 8013ae2:	4a68      	ldr	r2, [pc, #416]	@ (8013c84 <__ieee754_pow+0x29c>)
 8013ae4:	4592      	cmp	sl, r2
 8013ae6:	d1e3      	bne.n	8013ab0 <__ieee754_pow+0xc8>
 8013ae8:	f1b9 0f00 	cmp.w	r9, #0
 8013aec:	f280 8489 	bge.w	8014402 <__ieee754_pow+0xa1a>
 8013af0:	4964      	ldr	r1, [pc, #400]	@ (8013c84 <__ieee754_pow+0x29c>)
 8013af2:	4632      	mov	r2, r6
 8013af4:	463b      	mov	r3, r7
 8013af6:	2000      	movs	r0, #0
 8013af8:	f7ec fec8 	bl	800088c <__aeabi_ddiv>
 8013afc:	e791      	b.n	8013a22 <__ieee754_pow+0x3a>
 8013afe:	2400      	movs	r4, #0
 8013b00:	bb81      	cbnz	r1, 8013b64 <__ieee754_pow+0x17c>
 8013b02:	4a5e      	ldr	r2, [pc, #376]	@ (8013c7c <__ieee754_pow+0x294>)
 8013b04:	4592      	cmp	sl, r2
 8013b06:	d1ec      	bne.n	8013ae2 <__ieee754_pow+0xfa>
 8013b08:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8013b0c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8013b10:	431a      	orrs	r2, r3
 8013b12:	f000 846e 	beq.w	80143f2 <__ieee754_pow+0xa0a>
 8013b16:	4b5c      	ldr	r3, [pc, #368]	@ (8013c88 <__ieee754_pow+0x2a0>)
 8013b18:	429d      	cmp	r5, r3
 8013b1a:	d908      	bls.n	8013b2e <__ieee754_pow+0x146>
 8013b1c:	f1b9 0f00 	cmp.w	r9, #0
 8013b20:	f280 846b 	bge.w	80143fa <__ieee754_pow+0xa12>
 8013b24:	2000      	movs	r0, #0
 8013b26:	2100      	movs	r1, #0
 8013b28:	e77b      	b.n	8013a22 <__ieee754_pow+0x3a>
 8013b2a:	2402      	movs	r4, #2
 8013b2c:	e7e8      	b.n	8013b00 <__ieee754_pow+0x118>
 8013b2e:	f1b9 0f00 	cmp.w	r9, #0
 8013b32:	f04f 0000 	mov.w	r0, #0
 8013b36:	f04f 0100 	mov.w	r1, #0
 8013b3a:	f6bf af72 	bge.w	8013a22 <__ieee754_pow+0x3a>
 8013b3e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013b42:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8013b46:	e76c      	b.n	8013a22 <__ieee754_pow+0x3a>
 8013b48:	4a50      	ldr	r2, [pc, #320]	@ (8013c8c <__ieee754_pow+0x2a4>)
 8013b4a:	4591      	cmp	r9, r2
 8013b4c:	d10a      	bne.n	8013b64 <__ieee754_pow+0x17c>
 8013b4e:	f1b8 0f00 	cmp.w	r8, #0
 8013b52:	db07      	blt.n	8013b64 <__ieee754_pow+0x17c>
 8013b54:	ec47 6b10 	vmov	d0, r6, r7
 8013b58:	b011      	add	sp, #68	@ 0x44
 8013b5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b5e:	f7ff bd51 	b.w	8013604 <__ieee754_sqrt>
 8013b62:	2400      	movs	r4, #0
 8013b64:	ec47 6b10 	vmov	d0, r6, r7
 8013b68:	9302      	str	r3, [sp, #8]
 8013b6a:	f001 fc67 	bl	801543c <fabs>
 8013b6e:	9b02      	ldr	r3, [sp, #8]
 8013b70:	ec51 0b10 	vmov	r0, r1, d0
 8013b74:	bb43      	cbnz	r3, 8013bc8 <__ieee754_pow+0x1e0>
 8013b76:	4b43      	ldr	r3, [pc, #268]	@ (8013c84 <__ieee754_pow+0x29c>)
 8013b78:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8013b7c:	429a      	cmp	r2, r3
 8013b7e:	d000      	beq.n	8013b82 <__ieee754_pow+0x19a>
 8013b80:	bb15      	cbnz	r5, 8013bc8 <__ieee754_pow+0x1e0>
 8013b82:	f1b9 0f00 	cmp.w	r9, #0
 8013b86:	da05      	bge.n	8013b94 <__ieee754_pow+0x1ac>
 8013b88:	4602      	mov	r2, r0
 8013b8a:	460b      	mov	r3, r1
 8013b8c:	2000      	movs	r0, #0
 8013b8e:	493d      	ldr	r1, [pc, #244]	@ (8013c84 <__ieee754_pow+0x29c>)
 8013b90:	f7ec fe7c 	bl	800088c <__aeabi_ddiv>
 8013b94:	f1b8 0f00 	cmp.w	r8, #0
 8013b98:	f6bf af43 	bge.w	8013a22 <__ieee754_pow+0x3a>
 8013b9c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8013ba0:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8013ba4:	4325      	orrs	r5, r4
 8013ba6:	d108      	bne.n	8013bba <__ieee754_pow+0x1d2>
 8013ba8:	4602      	mov	r2, r0
 8013baa:	460b      	mov	r3, r1
 8013bac:	4610      	mov	r0, r2
 8013bae:	4619      	mov	r1, r3
 8013bb0:	f7ec fb8a 	bl	80002c8 <__aeabi_dsub>
 8013bb4:	4602      	mov	r2, r0
 8013bb6:	460b      	mov	r3, r1
 8013bb8:	e79e      	b.n	8013af8 <__ieee754_pow+0x110>
 8013bba:	2c01      	cmp	r4, #1
 8013bbc:	f47f af31 	bne.w	8013a22 <__ieee754_pow+0x3a>
 8013bc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013bc4:	4619      	mov	r1, r3
 8013bc6:	e72c      	b.n	8013a22 <__ieee754_pow+0x3a>
 8013bc8:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8013bcc:	3b01      	subs	r3, #1
 8013bce:	ea53 0204 	orrs.w	r2, r3, r4
 8013bd2:	d102      	bne.n	8013bda <__ieee754_pow+0x1f2>
 8013bd4:	4632      	mov	r2, r6
 8013bd6:	463b      	mov	r3, r7
 8013bd8:	e7e8      	b.n	8013bac <__ieee754_pow+0x1c4>
 8013bda:	3c01      	subs	r4, #1
 8013bdc:	431c      	orrs	r4, r3
 8013bde:	d016      	beq.n	8013c0e <__ieee754_pow+0x226>
 8013be0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013c68 <__ieee754_pow+0x280>
 8013be4:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8013be8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013bec:	f240 8110 	bls.w	8013e10 <__ieee754_pow+0x428>
 8013bf0:	4b27      	ldr	r3, [pc, #156]	@ (8013c90 <__ieee754_pow+0x2a8>)
 8013bf2:	459a      	cmp	sl, r3
 8013bf4:	4b24      	ldr	r3, [pc, #144]	@ (8013c88 <__ieee754_pow+0x2a0>)
 8013bf6:	d916      	bls.n	8013c26 <__ieee754_pow+0x23e>
 8013bf8:	429d      	cmp	r5, r3
 8013bfa:	d80b      	bhi.n	8013c14 <__ieee754_pow+0x22c>
 8013bfc:	f1b9 0f00 	cmp.w	r9, #0
 8013c00:	da0b      	bge.n	8013c1a <__ieee754_pow+0x232>
 8013c02:	2000      	movs	r0, #0
 8013c04:	b011      	add	sp, #68	@ 0x44
 8013c06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c0a:	f000 be69 	b.w	80148e0 <__math_oflow>
 8013c0e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8013c70 <__ieee754_pow+0x288>
 8013c12:	e7e7      	b.n	8013be4 <__ieee754_pow+0x1fc>
 8013c14:	f1b9 0f00 	cmp.w	r9, #0
 8013c18:	dcf3      	bgt.n	8013c02 <__ieee754_pow+0x21a>
 8013c1a:	2000      	movs	r0, #0
 8013c1c:	b011      	add	sp, #68	@ 0x44
 8013c1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c22:	f000 be55 	b.w	80148d0 <__math_uflow>
 8013c26:	429d      	cmp	r5, r3
 8013c28:	d20c      	bcs.n	8013c44 <__ieee754_pow+0x25c>
 8013c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c2e:	2200      	movs	r2, #0
 8013c30:	2300      	movs	r3, #0
 8013c32:	f7ec ff73 	bl	8000b1c <__aeabi_dcmplt>
 8013c36:	3800      	subs	r0, #0
 8013c38:	bf18      	it	ne
 8013c3a:	2001      	movne	r0, #1
 8013c3c:	f1b9 0f00 	cmp.w	r9, #0
 8013c40:	daec      	bge.n	8013c1c <__ieee754_pow+0x234>
 8013c42:	e7df      	b.n	8013c04 <__ieee754_pow+0x21c>
 8013c44:	4b0f      	ldr	r3, [pc, #60]	@ (8013c84 <__ieee754_pow+0x29c>)
 8013c46:	429d      	cmp	r5, r3
 8013c48:	f04f 0200 	mov.w	r2, #0
 8013c4c:	d922      	bls.n	8013c94 <__ieee754_pow+0x2ac>
 8013c4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c52:	2300      	movs	r3, #0
 8013c54:	f7ec ff62 	bl	8000b1c <__aeabi_dcmplt>
 8013c58:	3800      	subs	r0, #0
 8013c5a:	bf18      	it	ne
 8013c5c:	2001      	movne	r0, #1
 8013c5e:	f1b9 0f00 	cmp.w	r9, #0
 8013c62:	dccf      	bgt.n	8013c04 <__ieee754_pow+0x21c>
 8013c64:	e7da      	b.n	8013c1c <__ieee754_pow+0x234>
 8013c66:	bf00      	nop
 8013c68:	00000000 	.word	0x00000000
 8013c6c:	3ff00000 	.word	0x3ff00000
 8013c70:	00000000 	.word	0x00000000
 8013c74:	bff00000 	.word	0xbff00000
 8013c78:	fff00000 	.word	0xfff00000
 8013c7c:	7ff00000 	.word	0x7ff00000
 8013c80:	433fffff 	.word	0x433fffff
 8013c84:	3ff00000 	.word	0x3ff00000
 8013c88:	3fefffff 	.word	0x3fefffff
 8013c8c:	3fe00000 	.word	0x3fe00000
 8013c90:	43f00000 	.word	0x43f00000
 8013c94:	4b5a      	ldr	r3, [pc, #360]	@ (8013e00 <__ieee754_pow+0x418>)
 8013c96:	f7ec fb17 	bl	80002c8 <__aeabi_dsub>
 8013c9a:	a351      	add	r3, pc, #324	@ (adr r3, 8013de0 <__ieee754_pow+0x3f8>)
 8013c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ca0:	4604      	mov	r4, r0
 8013ca2:	460d      	mov	r5, r1
 8013ca4:	f7ec fcc8 	bl	8000638 <__aeabi_dmul>
 8013ca8:	a34f      	add	r3, pc, #316	@ (adr r3, 8013de8 <__ieee754_pow+0x400>)
 8013caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cae:	4606      	mov	r6, r0
 8013cb0:	460f      	mov	r7, r1
 8013cb2:	4620      	mov	r0, r4
 8013cb4:	4629      	mov	r1, r5
 8013cb6:	f7ec fcbf 	bl	8000638 <__aeabi_dmul>
 8013cba:	4b52      	ldr	r3, [pc, #328]	@ (8013e04 <__ieee754_pow+0x41c>)
 8013cbc:	4682      	mov	sl, r0
 8013cbe:	468b      	mov	fp, r1
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	4620      	mov	r0, r4
 8013cc4:	4629      	mov	r1, r5
 8013cc6:	f7ec fcb7 	bl	8000638 <__aeabi_dmul>
 8013cca:	4602      	mov	r2, r0
 8013ccc:	460b      	mov	r3, r1
 8013cce:	a148      	add	r1, pc, #288	@ (adr r1, 8013df0 <__ieee754_pow+0x408>)
 8013cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013cd4:	f7ec faf8 	bl	80002c8 <__aeabi_dsub>
 8013cd8:	4622      	mov	r2, r4
 8013cda:	462b      	mov	r3, r5
 8013cdc:	f7ec fcac 	bl	8000638 <__aeabi_dmul>
 8013ce0:	4602      	mov	r2, r0
 8013ce2:	460b      	mov	r3, r1
 8013ce4:	2000      	movs	r0, #0
 8013ce6:	4948      	ldr	r1, [pc, #288]	@ (8013e08 <__ieee754_pow+0x420>)
 8013ce8:	f7ec faee 	bl	80002c8 <__aeabi_dsub>
 8013cec:	4622      	mov	r2, r4
 8013cee:	4680      	mov	r8, r0
 8013cf0:	4689      	mov	r9, r1
 8013cf2:	462b      	mov	r3, r5
 8013cf4:	4620      	mov	r0, r4
 8013cf6:	4629      	mov	r1, r5
 8013cf8:	f7ec fc9e 	bl	8000638 <__aeabi_dmul>
 8013cfc:	4602      	mov	r2, r0
 8013cfe:	460b      	mov	r3, r1
 8013d00:	4640      	mov	r0, r8
 8013d02:	4649      	mov	r1, r9
 8013d04:	f7ec fc98 	bl	8000638 <__aeabi_dmul>
 8013d08:	a33b      	add	r3, pc, #236	@ (adr r3, 8013df8 <__ieee754_pow+0x410>)
 8013d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d0e:	f7ec fc93 	bl	8000638 <__aeabi_dmul>
 8013d12:	4602      	mov	r2, r0
 8013d14:	460b      	mov	r3, r1
 8013d16:	4650      	mov	r0, sl
 8013d18:	4659      	mov	r1, fp
 8013d1a:	f7ec fad5 	bl	80002c8 <__aeabi_dsub>
 8013d1e:	4602      	mov	r2, r0
 8013d20:	460b      	mov	r3, r1
 8013d22:	4680      	mov	r8, r0
 8013d24:	4689      	mov	r9, r1
 8013d26:	4630      	mov	r0, r6
 8013d28:	4639      	mov	r1, r7
 8013d2a:	f7ec facf 	bl	80002cc <__adddf3>
 8013d2e:	2400      	movs	r4, #0
 8013d30:	4632      	mov	r2, r6
 8013d32:	463b      	mov	r3, r7
 8013d34:	4620      	mov	r0, r4
 8013d36:	460d      	mov	r5, r1
 8013d38:	f7ec fac6 	bl	80002c8 <__aeabi_dsub>
 8013d3c:	4602      	mov	r2, r0
 8013d3e:	460b      	mov	r3, r1
 8013d40:	4640      	mov	r0, r8
 8013d42:	4649      	mov	r1, r9
 8013d44:	f7ec fac0 	bl	80002c8 <__aeabi_dsub>
 8013d48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013d4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013d50:	2300      	movs	r3, #0
 8013d52:	9304      	str	r3, [sp, #16]
 8013d54:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013d58:	4606      	mov	r6, r0
 8013d5a:	460f      	mov	r7, r1
 8013d5c:	465b      	mov	r3, fp
 8013d5e:	4652      	mov	r2, sl
 8013d60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d64:	f7ec fab0 	bl	80002c8 <__aeabi_dsub>
 8013d68:	4622      	mov	r2, r4
 8013d6a:	462b      	mov	r3, r5
 8013d6c:	f7ec fc64 	bl	8000638 <__aeabi_dmul>
 8013d70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013d74:	4680      	mov	r8, r0
 8013d76:	4689      	mov	r9, r1
 8013d78:	4630      	mov	r0, r6
 8013d7a:	4639      	mov	r1, r7
 8013d7c:	f7ec fc5c 	bl	8000638 <__aeabi_dmul>
 8013d80:	4602      	mov	r2, r0
 8013d82:	460b      	mov	r3, r1
 8013d84:	4640      	mov	r0, r8
 8013d86:	4649      	mov	r1, r9
 8013d88:	f7ec faa0 	bl	80002cc <__adddf3>
 8013d8c:	465b      	mov	r3, fp
 8013d8e:	4606      	mov	r6, r0
 8013d90:	460f      	mov	r7, r1
 8013d92:	4652      	mov	r2, sl
 8013d94:	4620      	mov	r0, r4
 8013d96:	4629      	mov	r1, r5
 8013d98:	f7ec fc4e 	bl	8000638 <__aeabi_dmul>
 8013d9c:	460b      	mov	r3, r1
 8013d9e:	4602      	mov	r2, r0
 8013da0:	4680      	mov	r8, r0
 8013da2:	4689      	mov	r9, r1
 8013da4:	4630      	mov	r0, r6
 8013da6:	4639      	mov	r1, r7
 8013da8:	f7ec fa90 	bl	80002cc <__adddf3>
 8013dac:	4b17      	ldr	r3, [pc, #92]	@ (8013e0c <__ieee754_pow+0x424>)
 8013dae:	4299      	cmp	r1, r3
 8013db0:	4604      	mov	r4, r0
 8013db2:	460d      	mov	r5, r1
 8013db4:	468b      	mov	fp, r1
 8013db6:	f340 820b 	ble.w	80141d0 <__ieee754_pow+0x7e8>
 8013dba:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8013dbe:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8013dc2:	4303      	orrs	r3, r0
 8013dc4:	f000 81ea 	beq.w	801419c <__ieee754_pow+0x7b4>
 8013dc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013dcc:	2200      	movs	r2, #0
 8013dce:	2300      	movs	r3, #0
 8013dd0:	f7ec fea4 	bl	8000b1c <__aeabi_dcmplt>
 8013dd4:	3800      	subs	r0, #0
 8013dd6:	bf18      	it	ne
 8013dd8:	2001      	movne	r0, #1
 8013dda:	e713      	b.n	8013c04 <__ieee754_pow+0x21c>
 8013ddc:	f3af 8000 	nop.w
 8013de0:	60000000 	.word	0x60000000
 8013de4:	3ff71547 	.word	0x3ff71547
 8013de8:	f85ddf44 	.word	0xf85ddf44
 8013dec:	3e54ae0b 	.word	0x3e54ae0b
 8013df0:	55555555 	.word	0x55555555
 8013df4:	3fd55555 	.word	0x3fd55555
 8013df8:	652b82fe 	.word	0x652b82fe
 8013dfc:	3ff71547 	.word	0x3ff71547
 8013e00:	3ff00000 	.word	0x3ff00000
 8013e04:	3fd00000 	.word	0x3fd00000
 8013e08:	3fe00000 	.word	0x3fe00000
 8013e0c:	408fffff 	.word	0x408fffff
 8013e10:	4bd5      	ldr	r3, [pc, #852]	@ (8014168 <__ieee754_pow+0x780>)
 8013e12:	ea08 0303 	and.w	r3, r8, r3
 8013e16:	2200      	movs	r2, #0
 8013e18:	b92b      	cbnz	r3, 8013e26 <__ieee754_pow+0x43e>
 8013e1a:	4bd4      	ldr	r3, [pc, #848]	@ (801416c <__ieee754_pow+0x784>)
 8013e1c:	f7ec fc0c 	bl	8000638 <__aeabi_dmul>
 8013e20:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8013e24:	468b      	mov	fp, r1
 8013e26:	ea4f 532b 	mov.w	r3, fp, asr #20
 8013e2a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8013e2e:	4413      	add	r3, r2
 8013e30:	930a      	str	r3, [sp, #40]	@ 0x28
 8013e32:	4bcf      	ldr	r3, [pc, #828]	@ (8014170 <__ieee754_pow+0x788>)
 8013e34:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8013e38:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8013e3c:	459b      	cmp	fp, r3
 8013e3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013e42:	dd08      	ble.n	8013e56 <__ieee754_pow+0x46e>
 8013e44:	4bcb      	ldr	r3, [pc, #812]	@ (8014174 <__ieee754_pow+0x78c>)
 8013e46:	459b      	cmp	fp, r3
 8013e48:	f340 81a5 	ble.w	8014196 <__ieee754_pow+0x7ae>
 8013e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013e4e:	3301      	adds	r3, #1
 8013e50:	930a      	str	r3, [sp, #40]	@ 0x28
 8013e52:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8013e56:	f04f 0a00 	mov.w	sl, #0
 8013e5a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8013e5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013e60:	4bc5      	ldr	r3, [pc, #788]	@ (8014178 <__ieee754_pow+0x790>)
 8013e62:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013e66:	ed93 7b00 	vldr	d7, [r3]
 8013e6a:	4629      	mov	r1, r5
 8013e6c:	ec53 2b17 	vmov	r2, r3, d7
 8013e70:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013e74:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013e78:	f7ec fa26 	bl	80002c8 <__aeabi_dsub>
 8013e7c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013e80:	4606      	mov	r6, r0
 8013e82:	460f      	mov	r7, r1
 8013e84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013e88:	f7ec fa20 	bl	80002cc <__adddf3>
 8013e8c:	4602      	mov	r2, r0
 8013e8e:	460b      	mov	r3, r1
 8013e90:	2000      	movs	r0, #0
 8013e92:	49ba      	ldr	r1, [pc, #744]	@ (801417c <__ieee754_pow+0x794>)
 8013e94:	f7ec fcfa 	bl	800088c <__aeabi_ddiv>
 8013e98:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8013e9c:	4602      	mov	r2, r0
 8013e9e:	460b      	mov	r3, r1
 8013ea0:	4630      	mov	r0, r6
 8013ea2:	4639      	mov	r1, r7
 8013ea4:	f7ec fbc8 	bl	8000638 <__aeabi_dmul>
 8013ea8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013eac:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8013eb0:	106d      	asrs	r5, r5, #1
 8013eb2:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8013eb6:	f04f 0b00 	mov.w	fp, #0
 8013eba:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8013ebe:	4661      	mov	r1, ip
 8013ec0:	2200      	movs	r2, #0
 8013ec2:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013ec6:	4658      	mov	r0, fp
 8013ec8:	46e1      	mov	r9, ip
 8013eca:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8013ece:	4614      	mov	r4, r2
 8013ed0:	461d      	mov	r5, r3
 8013ed2:	f7ec fbb1 	bl	8000638 <__aeabi_dmul>
 8013ed6:	4602      	mov	r2, r0
 8013ed8:	460b      	mov	r3, r1
 8013eda:	4630      	mov	r0, r6
 8013edc:	4639      	mov	r1, r7
 8013ede:	f7ec f9f3 	bl	80002c8 <__aeabi_dsub>
 8013ee2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013ee6:	4606      	mov	r6, r0
 8013ee8:	460f      	mov	r7, r1
 8013eea:	4620      	mov	r0, r4
 8013eec:	4629      	mov	r1, r5
 8013eee:	f7ec f9eb 	bl	80002c8 <__aeabi_dsub>
 8013ef2:	4602      	mov	r2, r0
 8013ef4:	460b      	mov	r3, r1
 8013ef6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013efa:	f7ec f9e5 	bl	80002c8 <__aeabi_dsub>
 8013efe:	465a      	mov	r2, fp
 8013f00:	464b      	mov	r3, r9
 8013f02:	f7ec fb99 	bl	8000638 <__aeabi_dmul>
 8013f06:	4602      	mov	r2, r0
 8013f08:	460b      	mov	r3, r1
 8013f0a:	4630      	mov	r0, r6
 8013f0c:	4639      	mov	r1, r7
 8013f0e:	f7ec f9db 	bl	80002c8 <__aeabi_dsub>
 8013f12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013f16:	f7ec fb8f 	bl	8000638 <__aeabi_dmul>
 8013f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013f22:	4610      	mov	r0, r2
 8013f24:	4619      	mov	r1, r3
 8013f26:	f7ec fb87 	bl	8000638 <__aeabi_dmul>
 8013f2a:	a37d      	add	r3, pc, #500	@ (adr r3, 8014120 <__ieee754_pow+0x738>)
 8013f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f30:	4604      	mov	r4, r0
 8013f32:	460d      	mov	r5, r1
 8013f34:	f7ec fb80 	bl	8000638 <__aeabi_dmul>
 8013f38:	a37b      	add	r3, pc, #492	@ (adr r3, 8014128 <__ieee754_pow+0x740>)
 8013f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f3e:	f7ec f9c5 	bl	80002cc <__adddf3>
 8013f42:	4622      	mov	r2, r4
 8013f44:	462b      	mov	r3, r5
 8013f46:	f7ec fb77 	bl	8000638 <__aeabi_dmul>
 8013f4a:	a379      	add	r3, pc, #484	@ (adr r3, 8014130 <__ieee754_pow+0x748>)
 8013f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f50:	f7ec f9bc 	bl	80002cc <__adddf3>
 8013f54:	4622      	mov	r2, r4
 8013f56:	462b      	mov	r3, r5
 8013f58:	f7ec fb6e 	bl	8000638 <__aeabi_dmul>
 8013f5c:	a376      	add	r3, pc, #472	@ (adr r3, 8014138 <__ieee754_pow+0x750>)
 8013f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f62:	f7ec f9b3 	bl	80002cc <__adddf3>
 8013f66:	4622      	mov	r2, r4
 8013f68:	462b      	mov	r3, r5
 8013f6a:	f7ec fb65 	bl	8000638 <__aeabi_dmul>
 8013f6e:	a374      	add	r3, pc, #464	@ (adr r3, 8014140 <__ieee754_pow+0x758>)
 8013f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f74:	f7ec f9aa 	bl	80002cc <__adddf3>
 8013f78:	4622      	mov	r2, r4
 8013f7a:	462b      	mov	r3, r5
 8013f7c:	f7ec fb5c 	bl	8000638 <__aeabi_dmul>
 8013f80:	a371      	add	r3, pc, #452	@ (adr r3, 8014148 <__ieee754_pow+0x760>)
 8013f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f86:	f7ec f9a1 	bl	80002cc <__adddf3>
 8013f8a:	4622      	mov	r2, r4
 8013f8c:	4606      	mov	r6, r0
 8013f8e:	460f      	mov	r7, r1
 8013f90:	462b      	mov	r3, r5
 8013f92:	4620      	mov	r0, r4
 8013f94:	4629      	mov	r1, r5
 8013f96:	f7ec fb4f 	bl	8000638 <__aeabi_dmul>
 8013f9a:	4602      	mov	r2, r0
 8013f9c:	460b      	mov	r3, r1
 8013f9e:	4630      	mov	r0, r6
 8013fa0:	4639      	mov	r1, r7
 8013fa2:	f7ec fb49 	bl	8000638 <__aeabi_dmul>
 8013fa6:	465a      	mov	r2, fp
 8013fa8:	4604      	mov	r4, r0
 8013faa:	460d      	mov	r5, r1
 8013fac:	464b      	mov	r3, r9
 8013fae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013fb2:	f7ec f98b 	bl	80002cc <__adddf3>
 8013fb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013fba:	f7ec fb3d 	bl	8000638 <__aeabi_dmul>
 8013fbe:	4622      	mov	r2, r4
 8013fc0:	462b      	mov	r3, r5
 8013fc2:	f7ec f983 	bl	80002cc <__adddf3>
 8013fc6:	465a      	mov	r2, fp
 8013fc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013fcc:	464b      	mov	r3, r9
 8013fce:	4658      	mov	r0, fp
 8013fd0:	4649      	mov	r1, r9
 8013fd2:	f7ec fb31 	bl	8000638 <__aeabi_dmul>
 8013fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8014180 <__ieee754_pow+0x798>)
 8013fd8:	2200      	movs	r2, #0
 8013fda:	4606      	mov	r6, r0
 8013fdc:	460f      	mov	r7, r1
 8013fde:	f7ec f975 	bl	80002cc <__adddf3>
 8013fe2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013fe6:	f7ec f971 	bl	80002cc <__adddf3>
 8013fea:	46d8      	mov	r8, fp
 8013fec:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8013ff0:	460d      	mov	r5, r1
 8013ff2:	465a      	mov	r2, fp
 8013ff4:	460b      	mov	r3, r1
 8013ff6:	4640      	mov	r0, r8
 8013ff8:	4649      	mov	r1, r9
 8013ffa:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8013ffe:	f7ec fb1b 	bl	8000638 <__aeabi_dmul>
 8014002:	465c      	mov	r4, fp
 8014004:	4680      	mov	r8, r0
 8014006:	4689      	mov	r9, r1
 8014008:	4b5d      	ldr	r3, [pc, #372]	@ (8014180 <__ieee754_pow+0x798>)
 801400a:	2200      	movs	r2, #0
 801400c:	4620      	mov	r0, r4
 801400e:	4629      	mov	r1, r5
 8014010:	f7ec f95a 	bl	80002c8 <__aeabi_dsub>
 8014014:	4632      	mov	r2, r6
 8014016:	463b      	mov	r3, r7
 8014018:	f7ec f956 	bl	80002c8 <__aeabi_dsub>
 801401c:	4602      	mov	r2, r0
 801401e:	460b      	mov	r3, r1
 8014020:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014024:	f7ec f950 	bl	80002c8 <__aeabi_dsub>
 8014028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801402c:	f7ec fb04 	bl	8000638 <__aeabi_dmul>
 8014030:	4622      	mov	r2, r4
 8014032:	4606      	mov	r6, r0
 8014034:	460f      	mov	r7, r1
 8014036:	462b      	mov	r3, r5
 8014038:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801403c:	f7ec fafc 	bl	8000638 <__aeabi_dmul>
 8014040:	4602      	mov	r2, r0
 8014042:	460b      	mov	r3, r1
 8014044:	4630      	mov	r0, r6
 8014046:	4639      	mov	r1, r7
 8014048:	f7ec f940 	bl	80002cc <__adddf3>
 801404c:	4606      	mov	r6, r0
 801404e:	460f      	mov	r7, r1
 8014050:	4602      	mov	r2, r0
 8014052:	460b      	mov	r3, r1
 8014054:	4640      	mov	r0, r8
 8014056:	4649      	mov	r1, r9
 8014058:	f7ec f938 	bl	80002cc <__adddf3>
 801405c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8014060:	a33b      	add	r3, pc, #236	@ (adr r3, 8014150 <__ieee754_pow+0x768>)
 8014062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014066:	4658      	mov	r0, fp
 8014068:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801406c:	460d      	mov	r5, r1
 801406e:	f7ec fae3 	bl	8000638 <__aeabi_dmul>
 8014072:	465c      	mov	r4, fp
 8014074:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014078:	4642      	mov	r2, r8
 801407a:	464b      	mov	r3, r9
 801407c:	4620      	mov	r0, r4
 801407e:	4629      	mov	r1, r5
 8014080:	f7ec f922 	bl	80002c8 <__aeabi_dsub>
 8014084:	4602      	mov	r2, r0
 8014086:	460b      	mov	r3, r1
 8014088:	4630      	mov	r0, r6
 801408a:	4639      	mov	r1, r7
 801408c:	f7ec f91c 	bl	80002c8 <__aeabi_dsub>
 8014090:	a331      	add	r3, pc, #196	@ (adr r3, 8014158 <__ieee754_pow+0x770>)
 8014092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014096:	f7ec facf 	bl	8000638 <__aeabi_dmul>
 801409a:	a331      	add	r3, pc, #196	@ (adr r3, 8014160 <__ieee754_pow+0x778>)
 801409c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140a0:	4606      	mov	r6, r0
 80140a2:	460f      	mov	r7, r1
 80140a4:	4620      	mov	r0, r4
 80140a6:	4629      	mov	r1, r5
 80140a8:	f7ec fac6 	bl	8000638 <__aeabi_dmul>
 80140ac:	4602      	mov	r2, r0
 80140ae:	460b      	mov	r3, r1
 80140b0:	4630      	mov	r0, r6
 80140b2:	4639      	mov	r1, r7
 80140b4:	f7ec f90a 	bl	80002cc <__adddf3>
 80140b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80140ba:	4b32      	ldr	r3, [pc, #200]	@ (8014184 <__ieee754_pow+0x79c>)
 80140bc:	4413      	add	r3, r2
 80140be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c2:	f7ec f903 	bl	80002cc <__adddf3>
 80140c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80140ca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80140cc:	f7ec fa4a 	bl	8000564 <__aeabi_i2d>
 80140d0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80140d2:	4b2d      	ldr	r3, [pc, #180]	@ (8014188 <__ieee754_pow+0x7a0>)
 80140d4:	4413      	add	r3, r2
 80140d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80140da:	4606      	mov	r6, r0
 80140dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80140e0:	460f      	mov	r7, r1
 80140e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80140e6:	f7ec f8f1 	bl	80002cc <__adddf3>
 80140ea:	4642      	mov	r2, r8
 80140ec:	464b      	mov	r3, r9
 80140ee:	f7ec f8ed 	bl	80002cc <__adddf3>
 80140f2:	4632      	mov	r2, r6
 80140f4:	463b      	mov	r3, r7
 80140f6:	f7ec f8e9 	bl	80002cc <__adddf3>
 80140fa:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80140fe:	4632      	mov	r2, r6
 8014100:	463b      	mov	r3, r7
 8014102:	4658      	mov	r0, fp
 8014104:	460d      	mov	r5, r1
 8014106:	f7ec f8df 	bl	80002c8 <__aeabi_dsub>
 801410a:	4642      	mov	r2, r8
 801410c:	464b      	mov	r3, r9
 801410e:	f7ec f8db 	bl	80002c8 <__aeabi_dsub>
 8014112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014116:	f7ec f8d7 	bl	80002c8 <__aeabi_dsub>
 801411a:	465c      	mov	r4, fp
 801411c:	e036      	b.n	801418c <__ieee754_pow+0x7a4>
 801411e:	bf00      	nop
 8014120:	4a454eef 	.word	0x4a454eef
 8014124:	3fca7e28 	.word	0x3fca7e28
 8014128:	93c9db65 	.word	0x93c9db65
 801412c:	3fcd864a 	.word	0x3fcd864a
 8014130:	a91d4101 	.word	0xa91d4101
 8014134:	3fd17460 	.word	0x3fd17460
 8014138:	518f264d 	.word	0x518f264d
 801413c:	3fd55555 	.word	0x3fd55555
 8014140:	db6fabff 	.word	0xdb6fabff
 8014144:	3fdb6db6 	.word	0x3fdb6db6
 8014148:	33333303 	.word	0x33333303
 801414c:	3fe33333 	.word	0x3fe33333
 8014150:	e0000000 	.word	0xe0000000
 8014154:	3feec709 	.word	0x3feec709
 8014158:	dc3a03fd 	.word	0xdc3a03fd
 801415c:	3feec709 	.word	0x3feec709
 8014160:	145b01f5 	.word	0x145b01f5
 8014164:	be3e2fe0 	.word	0xbe3e2fe0
 8014168:	7ff00000 	.word	0x7ff00000
 801416c:	43400000 	.word	0x43400000
 8014170:	0003988e 	.word	0x0003988e
 8014174:	000bb679 	.word	0x000bb679
 8014178:	08015b58 	.word	0x08015b58
 801417c:	3ff00000 	.word	0x3ff00000
 8014180:	40080000 	.word	0x40080000
 8014184:	08015b38 	.word	0x08015b38
 8014188:	08015b48 	.word	0x08015b48
 801418c:	4602      	mov	r2, r0
 801418e:	460b      	mov	r3, r1
 8014190:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014194:	e5d6      	b.n	8013d44 <__ieee754_pow+0x35c>
 8014196:	f04f 0a01 	mov.w	sl, #1
 801419a:	e65e      	b.n	8013e5a <__ieee754_pow+0x472>
 801419c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8014474 <__ieee754_pow+0xa8c>)
 801419e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141a2:	4630      	mov	r0, r6
 80141a4:	4639      	mov	r1, r7
 80141a6:	f7ec f891 	bl	80002cc <__adddf3>
 80141aa:	4642      	mov	r2, r8
 80141ac:	e9cd 0100 	strd	r0, r1, [sp]
 80141b0:	464b      	mov	r3, r9
 80141b2:	4620      	mov	r0, r4
 80141b4:	4629      	mov	r1, r5
 80141b6:	f7ec f887 	bl	80002c8 <__aeabi_dsub>
 80141ba:	4602      	mov	r2, r0
 80141bc:	460b      	mov	r3, r1
 80141be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80141c2:	f7ec fcc9 	bl	8000b58 <__aeabi_dcmpgt>
 80141c6:	2800      	cmp	r0, #0
 80141c8:	f47f adfe 	bne.w	8013dc8 <__ieee754_pow+0x3e0>
 80141cc:	4ba2      	ldr	r3, [pc, #648]	@ (8014458 <__ieee754_pow+0xa70>)
 80141ce:	e022      	b.n	8014216 <__ieee754_pow+0x82e>
 80141d0:	4ca2      	ldr	r4, [pc, #648]	@ (801445c <__ieee754_pow+0xa74>)
 80141d2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80141d6:	42a3      	cmp	r3, r4
 80141d8:	d919      	bls.n	801420e <__ieee754_pow+0x826>
 80141da:	4ba1      	ldr	r3, [pc, #644]	@ (8014460 <__ieee754_pow+0xa78>)
 80141dc:	440b      	add	r3, r1
 80141de:	4303      	orrs	r3, r0
 80141e0:	d009      	beq.n	80141f6 <__ieee754_pow+0x80e>
 80141e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80141e6:	2200      	movs	r2, #0
 80141e8:	2300      	movs	r3, #0
 80141ea:	f7ec fc97 	bl	8000b1c <__aeabi_dcmplt>
 80141ee:	3800      	subs	r0, #0
 80141f0:	bf18      	it	ne
 80141f2:	2001      	movne	r0, #1
 80141f4:	e512      	b.n	8013c1c <__ieee754_pow+0x234>
 80141f6:	4642      	mov	r2, r8
 80141f8:	464b      	mov	r3, r9
 80141fa:	f7ec f865 	bl	80002c8 <__aeabi_dsub>
 80141fe:	4632      	mov	r2, r6
 8014200:	463b      	mov	r3, r7
 8014202:	f7ec fc9f 	bl	8000b44 <__aeabi_dcmpge>
 8014206:	2800      	cmp	r0, #0
 8014208:	d1eb      	bne.n	80141e2 <__ieee754_pow+0x7fa>
 801420a:	4b96      	ldr	r3, [pc, #600]	@ (8014464 <__ieee754_pow+0xa7c>)
 801420c:	e003      	b.n	8014216 <__ieee754_pow+0x82e>
 801420e:	4a96      	ldr	r2, [pc, #600]	@ (8014468 <__ieee754_pow+0xa80>)
 8014210:	4293      	cmp	r3, r2
 8014212:	f240 80e7 	bls.w	80143e4 <__ieee754_pow+0x9fc>
 8014216:	151b      	asrs	r3, r3, #20
 8014218:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 801421c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8014220:	fa4a fa03 	asr.w	sl, sl, r3
 8014224:	44da      	add	sl, fp
 8014226:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801422a:	4890      	ldr	r0, [pc, #576]	@ (801446c <__ieee754_pow+0xa84>)
 801422c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8014230:	4108      	asrs	r0, r1
 8014232:	ea00 030a 	and.w	r3, r0, sl
 8014236:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801423a:	f1c1 0114 	rsb	r1, r1, #20
 801423e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8014242:	fa4a fa01 	asr.w	sl, sl, r1
 8014246:	f1bb 0f00 	cmp.w	fp, #0
 801424a:	4640      	mov	r0, r8
 801424c:	4649      	mov	r1, r9
 801424e:	f04f 0200 	mov.w	r2, #0
 8014252:	bfb8      	it	lt
 8014254:	f1ca 0a00 	rsblt	sl, sl, #0
 8014258:	f7ec f836 	bl	80002c8 <__aeabi_dsub>
 801425c:	4680      	mov	r8, r0
 801425e:	4689      	mov	r9, r1
 8014260:	4632      	mov	r2, r6
 8014262:	463b      	mov	r3, r7
 8014264:	4640      	mov	r0, r8
 8014266:	4649      	mov	r1, r9
 8014268:	f7ec f830 	bl	80002cc <__adddf3>
 801426c:	2400      	movs	r4, #0
 801426e:	a36a      	add	r3, pc, #424	@ (adr r3, 8014418 <__ieee754_pow+0xa30>)
 8014270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014274:	4620      	mov	r0, r4
 8014276:	460d      	mov	r5, r1
 8014278:	f7ec f9de 	bl	8000638 <__aeabi_dmul>
 801427c:	4642      	mov	r2, r8
 801427e:	e9cd 0100 	strd	r0, r1, [sp]
 8014282:	464b      	mov	r3, r9
 8014284:	4620      	mov	r0, r4
 8014286:	4629      	mov	r1, r5
 8014288:	f7ec f81e 	bl	80002c8 <__aeabi_dsub>
 801428c:	4602      	mov	r2, r0
 801428e:	460b      	mov	r3, r1
 8014290:	4630      	mov	r0, r6
 8014292:	4639      	mov	r1, r7
 8014294:	f7ec f818 	bl	80002c8 <__aeabi_dsub>
 8014298:	a361      	add	r3, pc, #388	@ (adr r3, 8014420 <__ieee754_pow+0xa38>)
 801429a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801429e:	f7ec f9cb 	bl	8000638 <__aeabi_dmul>
 80142a2:	a361      	add	r3, pc, #388	@ (adr r3, 8014428 <__ieee754_pow+0xa40>)
 80142a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142a8:	4680      	mov	r8, r0
 80142aa:	4689      	mov	r9, r1
 80142ac:	4620      	mov	r0, r4
 80142ae:	4629      	mov	r1, r5
 80142b0:	f7ec f9c2 	bl	8000638 <__aeabi_dmul>
 80142b4:	4602      	mov	r2, r0
 80142b6:	460b      	mov	r3, r1
 80142b8:	4640      	mov	r0, r8
 80142ba:	4649      	mov	r1, r9
 80142bc:	f7ec f806 	bl	80002cc <__adddf3>
 80142c0:	4604      	mov	r4, r0
 80142c2:	460d      	mov	r5, r1
 80142c4:	4602      	mov	r2, r0
 80142c6:	460b      	mov	r3, r1
 80142c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80142cc:	f7eb fffe 	bl	80002cc <__adddf3>
 80142d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80142d4:	4680      	mov	r8, r0
 80142d6:	4689      	mov	r9, r1
 80142d8:	f7eb fff6 	bl	80002c8 <__aeabi_dsub>
 80142dc:	4602      	mov	r2, r0
 80142de:	460b      	mov	r3, r1
 80142e0:	4620      	mov	r0, r4
 80142e2:	4629      	mov	r1, r5
 80142e4:	f7eb fff0 	bl	80002c8 <__aeabi_dsub>
 80142e8:	4642      	mov	r2, r8
 80142ea:	4606      	mov	r6, r0
 80142ec:	460f      	mov	r7, r1
 80142ee:	464b      	mov	r3, r9
 80142f0:	4640      	mov	r0, r8
 80142f2:	4649      	mov	r1, r9
 80142f4:	f7ec f9a0 	bl	8000638 <__aeabi_dmul>
 80142f8:	a34d      	add	r3, pc, #308	@ (adr r3, 8014430 <__ieee754_pow+0xa48>)
 80142fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142fe:	4604      	mov	r4, r0
 8014300:	460d      	mov	r5, r1
 8014302:	f7ec f999 	bl	8000638 <__aeabi_dmul>
 8014306:	a34c      	add	r3, pc, #304	@ (adr r3, 8014438 <__ieee754_pow+0xa50>)
 8014308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801430c:	f7eb ffdc 	bl	80002c8 <__aeabi_dsub>
 8014310:	4622      	mov	r2, r4
 8014312:	462b      	mov	r3, r5
 8014314:	f7ec f990 	bl	8000638 <__aeabi_dmul>
 8014318:	a349      	add	r3, pc, #292	@ (adr r3, 8014440 <__ieee754_pow+0xa58>)
 801431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801431e:	f7eb ffd5 	bl	80002cc <__adddf3>
 8014322:	4622      	mov	r2, r4
 8014324:	462b      	mov	r3, r5
 8014326:	f7ec f987 	bl	8000638 <__aeabi_dmul>
 801432a:	a347      	add	r3, pc, #284	@ (adr r3, 8014448 <__ieee754_pow+0xa60>)
 801432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014330:	f7eb ffca 	bl	80002c8 <__aeabi_dsub>
 8014334:	4622      	mov	r2, r4
 8014336:	462b      	mov	r3, r5
 8014338:	f7ec f97e 	bl	8000638 <__aeabi_dmul>
 801433c:	a344      	add	r3, pc, #272	@ (adr r3, 8014450 <__ieee754_pow+0xa68>)
 801433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014342:	f7eb ffc3 	bl	80002cc <__adddf3>
 8014346:	4622      	mov	r2, r4
 8014348:	462b      	mov	r3, r5
 801434a:	f7ec f975 	bl	8000638 <__aeabi_dmul>
 801434e:	4602      	mov	r2, r0
 8014350:	460b      	mov	r3, r1
 8014352:	4640      	mov	r0, r8
 8014354:	4649      	mov	r1, r9
 8014356:	f7eb ffb7 	bl	80002c8 <__aeabi_dsub>
 801435a:	4604      	mov	r4, r0
 801435c:	460d      	mov	r5, r1
 801435e:	4602      	mov	r2, r0
 8014360:	460b      	mov	r3, r1
 8014362:	4640      	mov	r0, r8
 8014364:	4649      	mov	r1, r9
 8014366:	f7ec f967 	bl	8000638 <__aeabi_dmul>
 801436a:	2200      	movs	r2, #0
 801436c:	e9cd 0100 	strd	r0, r1, [sp]
 8014370:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8014374:	4620      	mov	r0, r4
 8014376:	4629      	mov	r1, r5
 8014378:	f7eb ffa6 	bl	80002c8 <__aeabi_dsub>
 801437c:	4602      	mov	r2, r0
 801437e:	460b      	mov	r3, r1
 8014380:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014384:	f7ec fa82 	bl	800088c <__aeabi_ddiv>
 8014388:	4632      	mov	r2, r6
 801438a:	4604      	mov	r4, r0
 801438c:	460d      	mov	r5, r1
 801438e:	463b      	mov	r3, r7
 8014390:	4640      	mov	r0, r8
 8014392:	4649      	mov	r1, r9
 8014394:	f7ec f950 	bl	8000638 <__aeabi_dmul>
 8014398:	4632      	mov	r2, r6
 801439a:	463b      	mov	r3, r7
 801439c:	f7eb ff96 	bl	80002cc <__adddf3>
 80143a0:	4602      	mov	r2, r0
 80143a2:	460b      	mov	r3, r1
 80143a4:	4620      	mov	r0, r4
 80143a6:	4629      	mov	r1, r5
 80143a8:	f7eb ff8e 	bl	80002c8 <__aeabi_dsub>
 80143ac:	4642      	mov	r2, r8
 80143ae:	464b      	mov	r3, r9
 80143b0:	f7eb ff8a 	bl	80002c8 <__aeabi_dsub>
 80143b4:	460b      	mov	r3, r1
 80143b6:	4602      	mov	r2, r0
 80143b8:	492d      	ldr	r1, [pc, #180]	@ (8014470 <__ieee754_pow+0xa88>)
 80143ba:	2000      	movs	r0, #0
 80143bc:	f7eb ff84 	bl	80002c8 <__aeabi_dsub>
 80143c0:	ec41 0b10 	vmov	d0, r0, r1
 80143c4:	ee10 3a90 	vmov	r3, s1
 80143c8:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80143cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80143d0:	da0b      	bge.n	80143ea <__ieee754_pow+0xa02>
 80143d2:	4650      	mov	r0, sl
 80143d4:	f001 f83c 	bl	8015450 <scalbn>
 80143d8:	ec51 0b10 	vmov	r0, r1, d0
 80143dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80143e0:	f7ff bb6d 	b.w	8013abe <__ieee754_pow+0xd6>
 80143e4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80143e8:	e73a      	b.n	8014260 <__ieee754_pow+0x878>
 80143ea:	ec51 0b10 	vmov	r0, r1, d0
 80143ee:	4619      	mov	r1, r3
 80143f0:	e7f4      	b.n	80143dc <__ieee754_pow+0x9f4>
 80143f2:	491f      	ldr	r1, [pc, #124]	@ (8014470 <__ieee754_pow+0xa88>)
 80143f4:	2000      	movs	r0, #0
 80143f6:	f7ff bb14 	b.w	8013a22 <__ieee754_pow+0x3a>
 80143fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143fe:	f7ff bb10 	b.w	8013a22 <__ieee754_pow+0x3a>
 8014402:	4630      	mov	r0, r6
 8014404:	4639      	mov	r1, r7
 8014406:	f7ff bb0c 	b.w	8013a22 <__ieee754_pow+0x3a>
 801440a:	460c      	mov	r4, r1
 801440c:	f7ff bb69 	b.w	8013ae2 <__ieee754_pow+0xfa>
 8014410:	2400      	movs	r4, #0
 8014412:	f7ff bb4b 	b.w	8013aac <__ieee754_pow+0xc4>
 8014416:	bf00      	nop
 8014418:	00000000 	.word	0x00000000
 801441c:	3fe62e43 	.word	0x3fe62e43
 8014420:	fefa39ef 	.word	0xfefa39ef
 8014424:	3fe62e42 	.word	0x3fe62e42
 8014428:	0ca86c39 	.word	0x0ca86c39
 801442c:	be205c61 	.word	0xbe205c61
 8014430:	72bea4d0 	.word	0x72bea4d0
 8014434:	3e663769 	.word	0x3e663769
 8014438:	c5d26bf1 	.word	0xc5d26bf1
 801443c:	3ebbbd41 	.word	0x3ebbbd41
 8014440:	af25de2c 	.word	0xaf25de2c
 8014444:	3f11566a 	.word	0x3f11566a
 8014448:	16bebd93 	.word	0x16bebd93
 801444c:	3f66c16c 	.word	0x3f66c16c
 8014450:	5555553e 	.word	0x5555553e
 8014454:	3fc55555 	.word	0x3fc55555
 8014458:	40900000 	.word	0x40900000
 801445c:	4090cbff 	.word	0x4090cbff
 8014460:	3f6f3400 	.word	0x3f6f3400
 8014464:	4090cc00 	.word	0x4090cc00
 8014468:	3fe00000 	.word	0x3fe00000
 801446c:	fff00000 	.word	0xfff00000
 8014470:	3ff00000 	.word	0x3ff00000
 8014474:	652b82fe 	.word	0x652b82fe
 8014478:	3c971547 	.word	0x3c971547
 801447c:	00000000 	.word	0x00000000

08014480 <__ieee754_rem_pio2>:
 8014480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014484:	ec57 6b10 	vmov	r6, r7, d0
 8014488:	4bc5      	ldr	r3, [pc, #788]	@ (80147a0 <__ieee754_rem_pio2+0x320>)
 801448a:	b08d      	sub	sp, #52	@ 0x34
 801448c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8014490:	4598      	cmp	r8, r3
 8014492:	4604      	mov	r4, r0
 8014494:	9704      	str	r7, [sp, #16]
 8014496:	d807      	bhi.n	80144a8 <__ieee754_rem_pio2+0x28>
 8014498:	2200      	movs	r2, #0
 801449a:	2300      	movs	r3, #0
 801449c:	ed80 0b00 	vstr	d0, [r0]
 80144a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80144a4:	2500      	movs	r5, #0
 80144a6:	e028      	b.n	80144fa <__ieee754_rem_pio2+0x7a>
 80144a8:	4bbe      	ldr	r3, [pc, #760]	@ (80147a4 <__ieee754_rem_pio2+0x324>)
 80144aa:	4598      	cmp	r8, r3
 80144ac:	d878      	bhi.n	80145a0 <__ieee754_rem_pio2+0x120>
 80144ae:	9b04      	ldr	r3, [sp, #16]
 80144b0:	4dbd      	ldr	r5, [pc, #756]	@ (80147a8 <__ieee754_rem_pio2+0x328>)
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	4630      	mov	r0, r6
 80144b6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8014768 <__ieee754_rem_pio2+0x2e8>)
 80144b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144bc:	4639      	mov	r1, r7
 80144be:	dd38      	ble.n	8014532 <__ieee754_rem_pio2+0xb2>
 80144c0:	f7eb ff02 	bl	80002c8 <__aeabi_dsub>
 80144c4:	45a8      	cmp	r8, r5
 80144c6:	4606      	mov	r6, r0
 80144c8:	460f      	mov	r7, r1
 80144ca:	d01a      	beq.n	8014502 <__ieee754_rem_pio2+0x82>
 80144cc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8014770 <__ieee754_rem_pio2+0x2f0>)
 80144ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144d2:	f7eb fef9 	bl	80002c8 <__aeabi_dsub>
 80144d6:	4602      	mov	r2, r0
 80144d8:	460b      	mov	r3, r1
 80144da:	4680      	mov	r8, r0
 80144dc:	4689      	mov	r9, r1
 80144de:	4630      	mov	r0, r6
 80144e0:	4639      	mov	r1, r7
 80144e2:	f7eb fef1 	bl	80002c8 <__aeabi_dsub>
 80144e6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8014770 <__ieee754_rem_pio2+0x2f0>)
 80144e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ec:	f7eb feec 	bl	80002c8 <__aeabi_dsub>
 80144f0:	e9c4 8900 	strd	r8, r9, [r4]
 80144f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80144f8:	2501      	movs	r5, #1
 80144fa:	4628      	mov	r0, r5
 80144fc:	b00d      	add	sp, #52	@ 0x34
 80144fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014502:	a39d      	add	r3, pc, #628	@ (adr r3, 8014778 <__ieee754_rem_pio2+0x2f8>)
 8014504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014508:	f7eb fede 	bl	80002c8 <__aeabi_dsub>
 801450c:	a39c      	add	r3, pc, #624	@ (adr r3, 8014780 <__ieee754_rem_pio2+0x300>)
 801450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014512:	4606      	mov	r6, r0
 8014514:	460f      	mov	r7, r1
 8014516:	f7eb fed7 	bl	80002c8 <__aeabi_dsub>
 801451a:	4602      	mov	r2, r0
 801451c:	460b      	mov	r3, r1
 801451e:	4680      	mov	r8, r0
 8014520:	4689      	mov	r9, r1
 8014522:	4630      	mov	r0, r6
 8014524:	4639      	mov	r1, r7
 8014526:	f7eb fecf 	bl	80002c8 <__aeabi_dsub>
 801452a:	a395      	add	r3, pc, #596	@ (adr r3, 8014780 <__ieee754_rem_pio2+0x300>)
 801452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014530:	e7dc      	b.n	80144ec <__ieee754_rem_pio2+0x6c>
 8014532:	f7eb fecb 	bl	80002cc <__adddf3>
 8014536:	45a8      	cmp	r8, r5
 8014538:	4606      	mov	r6, r0
 801453a:	460f      	mov	r7, r1
 801453c:	d018      	beq.n	8014570 <__ieee754_rem_pio2+0xf0>
 801453e:	a38c      	add	r3, pc, #560	@ (adr r3, 8014770 <__ieee754_rem_pio2+0x2f0>)
 8014540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014544:	f7eb fec2 	bl	80002cc <__adddf3>
 8014548:	4602      	mov	r2, r0
 801454a:	460b      	mov	r3, r1
 801454c:	4680      	mov	r8, r0
 801454e:	4689      	mov	r9, r1
 8014550:	4630      	mov	r0, r6
 8014552:	4639      	mov	r1, r7
 8014554:	f7eb feb8 	bl	80002c8 <__aeabi_dsub>
 8014558:	a385      	add	r3, pc, #532	@ (adr r3, 8014770 <__ieee754_rem_pio2+0x2f0>)
 801455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801455e:	f7eb feb5 	bl	80002cc <__adddf3>
 8014562:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8014566:	e9c4 8900 	strd	r8, r9, [r4]
 801456a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801456e:	e7c4      	b.n	80144fa <__ieee754_rem_pio2+0x7a>
 8014570:	a381      	add	r3, pc, #516	@ (adr r3, 8014778 <__ieee754_rem_pio2+0x2f8>)
 8014572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014576:	f7eb fea9 	bl	80002cc <__adddf3>
 801457a:	a381      	add	r3, pc, #516	@ (adr r3, 8014780 <__ieee754_rem_pio2+0x300>)
 801457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014580:	4606      	mov	r6, r0
 8014582:	460f      	mov	r7, r1
 8014584:	f7eb fea2 	bl	80002cc <__adddf3>
 8014588:	4602      	mov	r2, r0
 801458a:	460b      	mov	r3, r1
 801458c:	4680      	mov	r8, r0
 801458e:	4689      	mov	r9, r1
 8014590:	4630      	mov	r0, r6
 8014592:	4639      	mov	r1, r7
 8014594:	f7eb fe98 	bl	80002c8 <__aeabi_dsub>
 8014598:	a379      	add	r3, pc, #484	@ (adr r3, 8014780 <__ieee754_rem_pio2+0x300>)
 801459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801459e:	e7de      	b.n	801455e <__ieee754_rem_pio2+0xde>
 80145a0:	4b82      	ldr	r3, [pc, #520]	@ (80147ac <__ieee754_rem_pio2+0x32c>)
 80145a2:	4598      	cmp	r8, r3
 80145a4:	f200 80d1 	bhi.w	801474a <__ieee754_rem_pio2+0x2ca>
 80145a8:	f000 ff48 	bl	801543c <fabs>
 80145ac:	ec57 6b10 	vmov	r6, r7, d0
 80145b0:	a375      	add	r3, pc, #468	@ (adr r3, 8014788 <__ieee754_rem_pio2+0x308>)
 80145b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145b6:	4630      	mov	r0, r6
 80145b8:	4639      	mov	r1, r7
 80145ba:	f7ec f83d 	bl	8000638 <__aeabi_dmul>
 80145be:	4b7c      	ldr	r3, [pc, #496]	@ (80147b0 <__ieee754_rem_pio2+0x330>)
 80145c0:	2200      	movs	r2, #0
 80145c2:	f7eb fe83 	bl	80002cc <__adddf3>
 80145c6:	f7ec fae7 	bl	8000b98 <__aeabi_d2iz>
 80145ca:	4605      	mov	r5, r0
 80145cc:	f7eb ffca 	bl	8000564 <__aeabi_i2d>
 80145d0:	4602      	mov	r2, r0
 80145d2:	460b      	mov	r3, r1
 80145d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80145d8:	a363      	add	r3, pc, #396	@ (adr r3, 8014768 <__ieee754_rem_pio2+0x2e8>)
 80145da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145de:	f7ec f82b 	bl	8000638 <__aeabi_dmul>
 80145e2:	4602      	mov	r2, r0
 80145e4:	460b      	mov	r3, r1
 80145e6:	4630      	mov	r0, r6
 80145e8:	4639      	mov	r1, r7
 80145ea:	f7eb fe6d 	bl	80002c8 <__aeabi_dsub>
 80145ee:	a360      	add	r3, pc, #384	@ (adr r3, 8014770 <__ieee754_rem_pio2+0x2f0>)
 80145f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145f4:	4682      	mov	sl, r0
 80145f6:	468b      	mov	fp, r1
 80145f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80145fc:	f7ec f81c 	bl	8000638 <__aeabi_dmul>
 8014600:	2d1f      	cmp	r5, #31
 8014602:	4606      	mov	r6, r0
 8014604:	460f      	mov	r7, r1
 8014606:	dc0c      	bgt.n	8014622 <__ieee754_rem_pio2+0x1a2>
 8014608:	4b6a      	ldr	r3, [pc, #424]	@ (80147b4 <__ieee754_rem_pio2+0x334>)
 801460a:	1e6a      	subs	r2, r5, #1
 801460c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014610:	4543      	cmp	r3, r8
 8014612:	d006      	beq.n	8014622 <__ieee754_rem_pio2+0x1a2>
 8014614:	4632      	mov	r2, r6
 8014616:	463b      	mov	r3, r7
 8014618:	4650      	mov	r0, sl
 801461a:	4659      	mov	r1, fp
 801461c:	f7eb fe54 	bl	80002c8 <__aeabi_dsub>
 8014620:	e00e      	b.n	8014640 <__ieee754_rem_pio2+0x1c0>
 8014622:	463b      	mov	r3, r7
 8014624:	4632      	mov	r2, r6
 8014626:	4650      	mov	r0, sl
 8014628:	4659      	mov	r1, fp
 801462a:	f7eb fe4d 	bl	80002c8 <__aeabi_dsub>
 801462e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014632:	9305      	str	r3, [sp, #20]
 8014634:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014638:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801463c:	2b10      	cmp	r3, #16
 801463e:	dc02      	bgt.n	8014646 <__ieee754_rem_pio2+0x1c6>
 8014640:	e9c4 0100 	strd	r0, r1, [r4]
 8014644:	e039      	b.n	80146ba <__ieee754_rem_pio2+0x23a>
 8014646:	a34c      	add	r3, pc, #304	@ (adr r3, 8014778 <__ieee754_rem_pio2+0x2f8>)
 8014648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801464c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014650:	f7eb fff2 	bl	8000638 <__aeabi_dmul>
 8014654:	4606      	mov	r6, r0
 8014656:	460f      	mov	r7, r1
 8014658:	4602      	mov	r2, r0
 801465a:	460b      	mov	r3, r1
 801465c:	4650      	mov	r0, sl
 801465e:	4659      	mov	r1, fp
 8014660:	f7eb fe32 	bl	80002c8 <__aeabi_dsub>
 8014664:	4602      	mov	r2, r0
 8014666:	460b      	mov	r3, r1
 8014668:	4680      	mov	r8, r0
 801466a:	4689      	mov	r9, r1
 801466c:	4650      	mov	r0, sl
 801466e:	4659      	mov	r1, fp
 8014670:	f7eb fe2a 	bl	80002c8 <__aeabi_dsub>
 8014674:	4632      	mov	r2, r6
 8014676:	463b      	mov	r3, r7
 8014678:	f7eb fe26 	bl	80002c8 <__aeabi_dsub>
 801467c:	a340      	add	r3, pc, #256	@ (adr r3, 8014780 <__ieee754_rem_pio2+0x300>)
 801467e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014682:	4606      	mov	r6, r0
 8014684:	460f      	mov	r7, r1
 8014686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801468a:	f7eb ffd5 	bl	8000638 <__aeabi_dmul>
 801468e:	4632      	mov	r2, r6
 8014690:	463b      	mov	r3, r7
 8014692:	f7eb fe19 	bl	80002c8 <__aeabi_dsub>
 8014696:	4602      	mov	r2, r0
 8014698:	460b      	mov	r3, r1
 801469a:	4606      	mov	r6, r0
 801469c:	460f      	mov	r7, r1
 801469e:	4640      	mov	r0, r8
 80146a0:	4649      	mov	r1, r9
 80146a2:	f7eb fe11 	bl	80002c8 <__aeabi_dsub>
 80146a6:	9a05      	ldr	r2, [sp, #20]
 80146a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80146ac:	1ad3      	subs	r3, r2, r3
 80146ae:	2b31      	cmp	r3, #49	@ 0x31
 80146b0:	dc20      	bgt.n	80146f4 <__ieee754_rem_pio2+0x274>
 80146b2:	e9c4 0100 	strd	r0, r1, [r4]
 80146b6:	46c2      	mov	sl, r8
 80146b8:	46cb      	mov	fp, r9
 80146ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 80146be:	4650      	mov	r0, sl
 80146c0:	4642      	mov	r2, r8
 80146c2:	464b      	mov	r3, r9
 80146c4:	4659      	mov	r1, fp
 80146c6:	f7eb fdff 	bl	80002c8 <__aeabi_dsub>
 80146ca:	463b      	mov	r3, r7
 80146cc:	4632      	mov	r2, r6
 80146ce:	f7eb fdfb 	bl	80002c8 <__aeabi_dsub>
 80146d2:	9b04      	ldr	r3, [sp, #16]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80146da:	f6bf af0e 	bge.w	80144fa <__ieee754_rem_pio2+0x7a>
 80146de:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80146e2:	6063      	str	r3, [r4, #4]
 80146e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80146e8:	f8c4 8000 	str.w	r8, [r4]
 80146ec:	60a0      	str	r0, [r4, #8]
 80146ee:	60e3      	str	r3, [r4, #12]
 80146f0:	426d      	negs	r5, r5
 80146f2:	e702      	b.n	80144fa <__ieee754_rem_pio2+0x7a>
 80146f4:	a326      	add	r3, pc, #152	@ (adr r3, 8014790 <__ieee754_rem_pio2+0x310>)
 80146f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80146fe:	f7eb ff9b 	bl	8000638 <__aeabi_dmul>
 8014702:	4606      	mov	r6, r0
 8014704:	460f      	mov	r7, r1
 8014706:	4602      	mov	r2, r0
 8014708:	460b      	mov	r3, r1
 801470a:	4640      	mov	r0, r8
 801470c:	4649      	mov	r1, r9
 801470e:	f7eb fddb 	bl	80002c8 <__aeabi_dsub>
 8014712:	4602      	mov	r2, r0
 8014714:	460b      	mov	r3, r1
 8014716:	4682      	mov	sl, r0
 8014718:	468b      	mov	fp, r1
 801471a:	4640      	mov	r0, r8
 801471c:	4649      	mov	r1, r9
 801471e:	f7eb fdd3 	bl	80002c8 <__aeabi_dsub>
 8014722:	4632      	mov	r2, r6
 8014724:	463b      	mov	r3, r7
 8014726:	f7eb fdcf 	bl	80002c8 <__aeabi_dsub>
 801472a:	a31b      	add	r3, pc, #108	@ (adr r3, 8014798 <__ieee754_rem_pio2+0x318>)
 801472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014730:	4606      	mov	r6, r0
 8014732:	460f      	mov	r7, r1
 8014734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014738:	f7eb ff7e 	bl	8000638 <__aeabi_dmul>
 801473c:	4632      	mov	r2, r6
 801473e:	463b      	mov	r3, r7
 8014740:	f7eb fdc2 	bl	80002c8 <__aeabi_dsub>
 8014744:	4606      	mov	r6, r0
 8014746:	460f      	mov	r7, r1
 8014748:	e764      	b.n	8014614 <__ieee754_rem_pio2+0x194>
 801474a:	4b1b      	ldr	r3, [pc, #108]	@ (80147b8 <__ieee754_rem_pio2+0x338>)
 801474c:	4598      	cmp	r8, r3
 801474e:	d935      	bls.n	80147bc <__ieee754_rem_pio2+0x33c>
 8014750:	4632      	mov	r2, r6
 8014752:	463b      	mov	r3, r7
 8014754:	4630      	mov	r0, r6
 8014756:	4639      	mov	r1, r7
 8014758:	f7eb fdb6 	bl	80002c8 <__aeabi_dsub>
 801475c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014760:	e9c4 0100 	strd	r0, r1, [r4]
 8014764:	e69e      	b.n	80144a4 <__ieee754_rem_pio2+0x24>
 8014766:	bf00      	nop
 8014768:	54400000 	.word	0x54400000
 801476c:	3ff921fb 	.word	0x3ff921fb
 8014770:	1a626331 	.word	0x1a626331
 8014774:	3dd0b461 	.word	0x3dd0b461
 8014778:	1a600000 	.word	0x1a600000
 801477c:	3dd0b461 	.word	0x3dd0b461
 8014780:	2e037073 	.word	0x2e037073
 8014784:	3ba3198a 	.word	0x3ba3198a
 8014788:	6dc9c883 	.word	0x6dc9c883
 801478c:	3fe45f30 	.word	0x3fe45f30
 8014790:	2e000000 	.word	0x2e000000
 8014794:	3ba3198a 	.word	0x3ba3198a
 8014798:	252049c1 	.word	0x252049c1
 801479c:	397b839a 	.word	0x397b839a
 80147a0:	3fe921fb 	.word	0x3fe921fb
 80147a4:	4002d97b 	.word	0x4002d97b
 80147a8:	3ff921fb 	.word	0x3ff921fb
 80147ac:	413921fb 	.word	0x413921fb
 80147b0:	3fe00000 	.word	0x3fe00000
 80147b4:	08015b68 	.word	0x08015b68
 80147b8:	7fefffff 	.word	0x7fefffff
 80147bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80147c0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80147c4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80147c8:	4630      	mov	r0, r6
 80147ca:	460f      	mov	r7, r1
 80147cc:	f7ec f9e4 	bl	8000b98 <__aeabi_d2iz>
 80147d0:	f7eb fec8 	bl	8000564 <__aeabi_i2d>
 80147d4:	4602      	mov	r2, r0
 80147d6:	460b      	mov	r3, r1
 80147d8:	4630      	mov	r0, r6
 80147da:	4639      	mov	r1, r7
 80147dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80147e0:	f7eb fd72 	bl	80002c8 <__aeabi_dsub>
 80147e4:	4b22      	ldr	r3, [pc, #136]	@ (8014870 <__ieee754_rem_pio2+0x3f0>)
 80147e6:	2200      	movs	r2, #0
 80147e8:	f7eb ff26 	bl	8000638 <__aeabi_dmul>
 80147ec:	460f      	mov	r7, r1
 80147ee:	4606      	mov	r6, r0
 80147f0:	f7ec f9d2 	bl	8000b98 <__aeabi_d2iz>
 80147f4:	f7eb feb6 	bl	8000564 <__aeabi_i2d>
 80147f8:	4602      	mov	r2, r0
 80147fa:	460b      	mov	r3, r1
 80147fc:	4630      	mov	r0, r6
 80147fe:	4639      	mov	r1, r7
 8014800:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014804:	f7eb fd60 	bl	80002c8 <__aeabi_dsub>
 8014808:	4b19      	ldr	r3, [pc, #100]	@ (8014870 <__ieee754_rem_pio2+0x3f0>)
 801480a:	2200      	movs	r2, #0
 801480c:	f7eb ff14 	bl	8000638 <__aeabi_dmul>
 8014810:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8014814:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8014818:	f04f 0803 	mov.w	r8, #3
 801481c:	2600      	movs	r6, #0
 801481e:	2700      	movs	r7, #0
 8014820:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014824:	4632      	mov	r2, r6
 8014826:	463b      	mov	r3, r7
 8014828:	46c2      	mov	sl, r8
 801482a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801482e:	f7ec f96b 	bl	8000b08 <__aeabi_dcmpeq>
 8014832:	2800      	cmp	r0, #0
 8014834:	d1f4      	bne.n	8014820 <__ieee754_rem_pio2+0x3a0>
 8014836:	4b0f      	ldr	r3, [pc, #60]	@ (8014874 <__ieee754_rem_pio2+0x3f4>)
 8014838:	9301      	str	r3, [sp, #4]
 801483a:	2302      	movs	r3, #2
 801483c:	9300      	str	r3, [sp, #0]
 801483e:	462a      	mov	r2, r5
 8014840:	4653      	mov	r3, sl
 8014842:	4621      	mov	r1, r4
 8014844:	a806      	add	r0, sp, #24
 8014846:	f000 f853 	bl	80148f0 <__kernel_rem_pio2>
 801484a:	9b04      	ldr	r3, [sp, #16]
 801484c:	2b00      	cmp	r3, #0
 801484e:	4605      	mov	r5, r0
 8014850:	f6bf ae53 	bge.w	80144fa <__ieee754_rem_pio2+0x7a>
 8014854:	e9d4 2100 	ldrd	r2, r1, [r4]
 8014858:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801485c:	e9c4 2300 	strd	r2, r3, [r4]
 8014860:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8014864:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014868:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801486c:	e740      	b.n	80146f0 <__ieee754_rem_pio2+0x270>
 801486e:	bf00      	nop
 8014870:	41700000 	.word	0x41700000
 8014874:	08015be8 	.word	0x08015be8

08014878 <with_errno>:
 8014878:	b510      	push	{r4, lr}
 801487a:	ed2d 8b02 	vpush	{d8}
 801487e:	eeb0 8a40 	vmov.f32	s16, s0
 8014882:	eef0 8a60 	vmov.f32	s17, s1
 8014886:	4604      	mov	r4, r0
 8014888:	f7fb fa8c 	bl	800fda4 <__errno>
 801488c:	eeb0 0a48 	vmov.f32	s0, s16
 8014890:	eef0 0a68 	vmov.f32	s1, s17
 8014894:	ecbd 8b02 	vpop	{d8}
 8014898:	6004      	str	r4, [r0, #0]
 801489a:	bd10      	pop	{r4, pc}

0801489c <xflow>:
 801489c:	4603      	mov	r3, r0
 801489e:	b507      	push	{r0, r1, r2, lr}
 80148a0:	ec51 0b10 	vmov	r0, r1, d0
 80148a4:	b183      	cbz	r3, 80148c8 <xflow+0x2c>
 80148a6:	4602      	mov	r2, r0
 80148a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80148ac:	e9cd 2300 	strd	r2, r3, [sp]
 80148b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80148b4:	f7eb fec0 	bl	8000638 <__aeabi_dmul>
 80148b8:	ec41 0b10 	vmov	d0, r0, r1
 80148bc:	2022      	movs	r0, #34	@ 0x22
 80148be:	b003      	add	sp, #12
 80148c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80148c4:	f7ff bfd8 	b.w	8014878 <with_errno>
 80148c8:	4602      	mov	r2, r0
 80148ca:	460b      	mov	r3, r1
 80148cc:	e7ee      	b.n	80148ac <xflow+0x10>
	...

080148d0 <__math_uflow>:
 80148d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80148d8 <__math_uflow+0x8>
 80148d4:	f7ff bfe2 	b.w	801489c <xflow>
 80148d8:	00000000 	.word	0x00000000
 80148dc:	10000000 	.word	0x10000000

080148e0 <__math_oflow>:
 80148e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80148e8 <__math_oflow+0x8>
 80148e4:	f7ff bfda 	b.w	801489c <xflow>
 80148e8:	00000000 	.word	0x00000000
 80148ec:	70000000 	.word	0x70000000

080148f0 <__kernel_rem_pio2>:
 80148f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148f4:	ed2d 8b02 	vpush	{d8}
 80148f8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80148fc:	f112 0f14 	cmn.w	r2, #20
 8014900:	9306      	str	r3, [sp, #24]
 8014902:	9104      	str	r1, [sp, #16]
 8014904:	4bc2      	ldr	r3, [pc, #776]	@ (8014c10 <__kernel_rem_pio2+0x320>)
 8014906:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8014908:	9008      	str	r0, [sp, #32]
 801490a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801490e:	9300      	str	r3, [sp, #0]
 8014910:	9b06      	ldr	r3, [sp, #24]
 8014912:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8014916:	bfa8      	it	ge
 8014918:	1ed4      	subge	r4, r2, #3
 801491a:	9305      	str	r3, [sp, #20]
 801491c:	bfb2      	itee	lt
 801491e:	2400      	movlt	r4, #0
 8014920:	2318      	movge	r3, #24
 8014922:	fb94 f4f3 	sdivge	r4, r4, r3
 8014926:	f06f 0317 	mvn.w	r3, #23
 801492a:	fb04 3303 	mla	r3, r4, r3, r3
 801492e:	eb03 0b02 	add.w	fp, r3, r2
 8014932:	9b00      	ldr	r3, [sp, #0]
 8014934:	9a05      	ldr	r2, [sp, #20]
 8014936:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8014c00 <__kernel_rem_pio2+0x310>
 801493a:	eb03 0802 	add.w	r8, r3, r2
 801493e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014940:	1aa7      	subs	r7, r4, r2
 8014942:	ae20      	add	r6, sp, #128	@ 0x80
 8014944:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014948:	2500      	movs	r5, #0
 801494a:	4545      	cmp	r5, r8
 801494c:	dd12      	ble.n	8014974 <__kernel_rem_pio2+0x84>
 801494e:	9b06      	ldr	r3, [sp, #24]
 8014950:	aa20      	add	r2, sp, #128	@ 0x80
 8014952:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8014956:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801495a:	2700      	movs	r7, #0
 801495c:	9b00      	ldr	r3, [sp, #0]
 801495e:	429f      	cmp	r7, r3
 8014960:	dc2e      	bgt.n	80149c0 <__kernel_rem_pio2+0xd0>
 8014962:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8014c00 <__kernel_rem_pio2+0x310>
 8014966:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801496a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801496e:	46a8      	mov	r8, r5
 8014970:	2600      	movs	r6, #0
 8014972:	e01b      	b.n	80149ac <__kernel_rem_pio2+0xbc>
 8014974:	42ef      	cmn	r7, r5
 8014976:	d407      	bmi.n	8014988 <__kernel_rem_pio2+0x98>
 8014978:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801497c:	f7eb fdf2 	bl	8000564 <__aeabi_i2d>
 8014980:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014984:	3501      	adds	r5, #1
 8014986:	e7e0      	b.n	801494a <__kernel_rem_pio2+0x5a>
 8014988:	ec51 0b18 	vmov	r0, r1, d8
 801498c:	e7f8      	b.n	8014980 <__kernel_rem_pio2+0x90>
 801498e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8014992:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014996:	f7eb fe4f 	bl	8000638 <__aeabi_dmul>
 801499a:	4602      	mov	r2, r0
 801499c:	460b      	mov	r3, r1
 801499e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80149a2:	f7eb fc93 	bl	80002cc <__adddf3>
 80149a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80149aa:	3601      	adds	r6, #1
 80149ac:	9b05      	ldr	r3, [sp, #20]
 80149ae:	429e      	cmp	r6, r3
 80149b0:	dded      	ble.n	801498e <__kernel_rem_pio2+0x9e>
 80149b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80149b6:	3701      	adds	r7, #1
 80149b8:	ecaa 7b02 	vstmia	sl!, {d7}
 80149bc:	3508      	adds	r5, #8
 80149be:	e7cd      	b.n	801495c <__kernel_rem_pio2+0x6c>
 80149c0:	9b00      	ldr	r3, [sp, #0]
 80149c2:	f8dd 8000 	ldr.w	r8, [sp]
 80149c6:	aa0c      	add	r2, sp, #48	@ 0x30
 80149c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80149cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80149ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80149d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80149d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80149d6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80149da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80149dc:	ab98      	add	r3, sp, #608	@ 0x260
 80149de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80149e2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80149e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80149ea:	ac0c      	add	r4, sp, #48	@ 0x30
 80149ec:	ab70      	add	r3, sp, #448	@ 0x1c0
 80149ee:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80149f2:	46a1      	mov	r9, r4
 80149f4:	46c2      	mov	sl, r8
 80149f6:	f1ba 0f00 	cmp.w	sl, #0
 80149fa:	dc77      	bgt.n	8014aec <__kernel_rem_pio2+0x1fc>
 80149fc:	4658      	mov	r0, fp
 80149fe:	ed9d 0b02 	vldr	d0, [sp, #8]
 8014a02:	f000 fd25 	bl	8015450 <scalbn>
 8014a06:	ec57 6b10 	vmov	r6, r7, d0
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8014a10:	4630      	mov	r0, r6
 8014a12:	4639      	mov	r1, r7
 8014a14:	f7eb fe10 	bl	8000638 <__aeabi_dmul>
 8014a18:	ec41 0b10 	vmov	d0, r0, r1
 8014a1c:	f7fe fecc 	bl	80137b8 <floor>
 8014a20:	4b7c      	ldr	r3, [pc, #496]	@ (8014c14 <__kernel_rem_pio2+0x324>)
 8014a22:	ec51 0b10 	vmov	r0, r1, d0
 8014a26:	2200      	movs	r2, #0
 8014a28:	f7eb fe06 	bl	8000638 <__aeabi_dmul>
 8014a2c:	4602      	mov	r2, r0
 8014a2e:	460b      	mov	r3, r1
 8014a30:	4630      	mov	r0, r6
 8014a32:	4639      	mov	r1, r7
 8014a34:	f7eb fc48 	bl	80002c8 <__aeabi_dsub>
 8014a38:	460f      	mov	r7, r1
 8014a3a:	4606      	mov	r6, r0
 8014a3c:	f7ec f8ac 	bl	8000b98 <__aeabi_d2iz>
 8014a40:	9002      	str	r0, [sp, #8]
 8014a42:	f7eb fd8f 	bl	8000564 <__aeabi_i2d>
 8014a46:	4602      	mov	r2, r0
 8014a48:	460b      	mov	r3, r1
 8014a4a:	4630      	mov	r0, r6
 8014a4c:	4639      	mov	r1, r7
 8014a4e:	f7eb fc3b 	bl	80002c8 <__aeabi_dsub>
 8014a52:	f1bb 0f00 	cmp.w	fp, #0
 8014a56:	4606      	mov	r6, r0
 8014a58:	460f      	mov	r7, r1
 8014a5a:	dd6c      	ble.n	8014b36 <__kernel_rem_pio2+0x246>
 8014a5c:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8014a60:	ab0c      	add	r3, sp, #48	@ 0x30
 8014a62:	9d02      	ldr	r5, [sp, #8]
 8014a64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014a68:	f1cb 0018 	rsb	r0, fp, #24
 8014a6c:	fa43 f200 	asr.w	r2, r3, r0
 8014a70:	4415      	add	r5, r2
 8014a72:	4082      	lsls	r2, r0
 8014a74:	1a9b      	subs	r3, r3, r2
 8014a76:	aa0c      	add	r2, sp, #48	@ 0x30
 8014a78:	9502      	str	r5, [sp, #8]
 8014a7a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8014a7e:	f1cb 0217 	rsb	r2, fp, #23
 8014a82:	fa43 f902 	asr.w	r9, r3, r2
 8014a86:	f1b9 0f00 	cmp.w	r9, #0
 8014a8a:	dd64      	ble.n	8014b56 <__kernel_rem_pio2+0x266>
 8014a8c:	9b02      	ldr	r3, [sp, #8]
 8014a8e:	2200      	movs	r2, #0
 8014a90:	3301      	adds	r3, #1
 8014a92:	9302      	str	r3, [sp, #8]
 8014a94:	4615      	mov	r5, r2
 8014a96:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8014a9a:	4590      	cmp	r8, r2
 8014a9c:	f300 80a1 	bgt.w	8014be2 <__kernel_rem_pio2+0x2f2>
 8014aa0:	f1bb 0f00 	cmp.w	fp, #0
 8014aa4:	dd07      	ble.n	8014ab6 <__kernel_rem_pio2+0x1c6>
 8014aa6:	f1bb 0f01 	cmp.w	fp, #1
 8014aaa:	f000 80c1 	beq.w	8014c30 <__kernel_rem_pio2+0x340>
 8014aae:	f1bb 0f02 	cmp.w	fp, #2
 8014ab2:	f000 80c8 	beq.w	8014c46 <__kernel_rem_pio2+0x356>
 8014ab6:	f1b9 0f02 	cmp.w	r9, #2
 8014aba:	d14c      	bne.n	8014b56 <__kernel_rem_pio2+0x266>
 8014abc:	4632      	mov	r2, r6
 8014abe:	463b      	mov	r3, r7
 8014ac0:	4955      	ldr	r1, [pc, #340]	@ (8014c18 <__kernel_rem_pio2+0x328>)
 8014ac2:	2000      	movs	r0, #0
 8014ac4:	f7eb fc00 	bl	80002c8 <__aeabi_dsub>
 8014ac8:	4606      	mov	r6, r0
 8014aca:	460f      	mov	r7, r1
 8014acc:	2d00      	cmp	r5, #0
 8014ace:	d042      	beq.n	8014b56 <__kernel_rem_pio2+0x266>
 8014ad0:	4658      	mov	r0, fp
 8014ad2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8014c08 <__kernel_rem_pio2+0x318>
 8014ad6:	f000 fcbb 	bl	8015450 <scalbn>
 8014ada:	4630      	mov	r0, r6
 8014adc:	4639      	mov	r1, r7
 8014ade:	ec53 2b10 	vmov	r2, r3, d0
 8014ae2:	f7eb fbf1 	bl	80002c8 <__aeabi_dsub>
 8014ae6:	4606      	mov	r6, r0
 8014ae8:	460f      	mov	r7, r1
 8014aea:	e034      	b.n	8014b56 <__kernel_rem_pio2+0x266>
 8014aec:	4b4b      	ldr	r3, [pc, #300]	@ (8014c1c <__kernel_rem_pio2+0x32c>)
 8014aee:	2200      	movs	r2, #0
 8014af0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014af4:	f7eb fda0 	bl	8000638 <__aeabi_dmul>
 8014af8:	f7ec f84e 	bl	8000b98 <__aeabi_d2iz>
 8014afc:	f7eb fd32 	bl	8000564 <__aeabi_i2d>
 8014b00:	4b47      	ldr	r3, [pc, #284]	@ (8014c20 <__kernel_rem_pio2+0x330>)
 8014b02:	2200      	movs	r2, #0
 8014b04:	4606      	mov	r6, r0
 8014b06:	460f      	mov	r7, r1
 8014b08:	f7eb fd96 	bl	8000638 <__aeabi_dmul>
 8014b0c:	4602      	mov	r2, r0
 8014b0e:	460b      	mov	r3, r1
 8014b10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b14:	f7eb fbd8 	bl	80002c8 <__aeabi_dsub>
 8014b18:	f7ec f83e 	bl	8000b98 <__aeabi_d2iz>
 8014b1c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8014b20:	f849 0b04 	str.w	r0, [r9], #4
 8014b24:	4639      	mov	r1, r7
 8014b26:	4630      	mov	r0, r6
 8014b28:	f7eb fbd0 	bl	80002cc <__adddf3>
 8014b2c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8014b30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b34:	e75f      	b.n	80149f6 <__kernel_rem_pio2+0x106>
 8014b36:	d107      	bne.n	8014b48 <__kernel_rem_pio2+0x258>
 8014b38:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8014b3c:	aa0c      	add	r2, sp, #48	@ 0x30
 8014b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b42:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8014b46:	e79e      	b.n	8014a86 <__kernel_rem_pio2+0x196>
 8014b48:	4b36      	ldr	r3, [pc, #216]	@ (8014c24 <__kernel_rem_pio2+0x334>)
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	f7eb fffa 	bl	8000b44 <__aeabi_dcmpge>
 8014b50:	2800      	cmp	r0, #0
 8014b52:	d143      	bne.n	8014bdc <__kernel_rem_pio2+0x2ec>
 8014b54:	4681      	mov	r9, r0
 8014b56:	2200      	movs	r2, #0
 8014b58:	2300      	movs	r3, #0
 8014b5a:	4630      	mov	r0, r6
 8014b5c:	4639      	mov	r1, r7
 8014b5e:	f7eb ffd3 	bl	8000b08 <__aeabi_dcmpeq>
 8014b62:	2800      	cmp	r0, #0
 8014b64:	f000 80c1 	beq.w	8014cea <__kernel_rem_pio2+0x3fa>
 8014b68:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	9900      	ldr	r1, [sp, #0]
 8014b70:	428b      	cmp	r3, r1
 8014b72:	da70      	bge.n	8014c56 <__kernel_rem_pio2+0x366>
 8014b74:	2a00      	cmp	r2, #0
 8014b76:	f000 808b 	beq.w	8014c90 <__kernel_rem_pio2+0x3a0>
 8014b7a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8014b7e:	ab0c      	add	r3, sp, #48	@ 0x30
 8014b80:	f1ab 0b18 	sub.w	fp, fp, #24
 8014b84:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d0f6      	beq.n	8014b7a <__kernel_rem_pio2+0x28a>
 8014b8c:	4658      	mov	r0, fp
 8014b8e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8014c08 <__kernel_rem_pio2+0x318>
 8014b92:	f000 fc5d 	bl	8015450 <scalbn>
 8014b96:	f108 0301 	add.w	r3, r8, #1
 8014b9a:	00da      	lsls	r2, r3, #3
 8014b9c:	9205      	str	r2, [sp, #20]
 8014b9e:	ec55 4b10 	vmov	r4, r5, d0
 8014ba2:	aa70      	add	r2, sp, #448	@ 0x1c0
 8014ba4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8014c1c <__kernel_rem_pio2+0x32c>
 8014ba8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8014bac:	4646      	mov	r6, r8
 8014bae:	f04f 0a00 	mov.w	sl, #0
 8014bb2:	2e00      	cmp	r6, #0
 8014bb4:	f280 80d1 	bge.w	8014d5a <__kernel_rem_pio2+0x46a>
 8014bb8:	4644      	mov	r4, r8
 8014bba:	2c00      	cmp	r4, #0
 8014bbc:	f2c0 80ff 	blt.w	8014dbe <__kernel_rem_pio2+0x4ce>
 8014bc0:	4b19      	ldr	r3, [pc, #100]	@ (8014c28 <__kernel_rem_pio2+0x338>)
 8014bc2:	461f      	mov	r7, r3
 8014bc4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8014bc6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014bca:	9306      	str	r3, [sp, #24]
 8014bcc:	f04f 0a00 	mov.w	sl, #0
 8014bd0:	f04f 0b00 	mov.w	fp, #0
 8014bd4:	2600      	movs	r6, #0
 8014bd6:	eba8 0504 	sub.w	r5, r8, r4
 8014bda:	e0e4      	b.n	8014da6 <__kernel_rem_pio2+0x4b6>
 8014bdc:	f04f 0902 	mov.w	r9, #2
 8014be0:	e754      	b.n	8014a8c <__kernel_rem_pio2+0x19c>
 8014be2:	f854 3b04 	ldr.w	r3, [r4], #4
 8014be6:	bb0d      	cbnz	r5, 8014c2c <__kernel_rem_pio2+0x33c>
 8014be8:	b123      	cbz	r3, 8014bf4 <__kernel_rem_pio2+0x304>
 8014bea:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8014bee:	f844 3c04 	str.w	r3, [r4, #-4]
 8014bf2:	2301      	movs	r3, #1
 8014bf4:	3201      	adds	r2, #1
 8014bf6:	461d      	mov	r5, r3
 8014bf8:	e74f      	b.n	8014a9a <__kernel_rem_pio2+0x1aa>
 8014bfa:	bf00      	nop
 8014bfc:	f3af 8000 	nop.w
	...
 8014c0c:	3ff00000 	.word	0x3ff00000
 8014c10:	08015d30 	.word	0x08015d30
 8014c14:	40200000 	.word	0x40200000
 8014c18:	3ff00000 	.word	0x3ff00000
 8014c1c:	3e700000 	.word	0x3e700000
 8014c20:	41700000 	.word	0x41700000
 8014c24:	3fe00000 	.word	0x3fe00000
 8014c28:	08015cf0 	.word	0x08015cf0
 8014c2c:	1acb      	subs	r3, r1, r3
 8014c2e:	e7de      	b.n	8014bee <__kernel_rem_pio2+0x2fe>
 8014c30:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8014c34:	ab0c      	add	r3, sp, #48	@ 0x30
 8014c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c3a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014c3e:	a90c      	add	r1, sp, #48	@ 0x30
 8014c40:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014c44:	e737      	b.n	8014ab6 <__kernel_rem_pio2+0x1c6>
 8014c46:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8014c4a:	ab0c      	add	r3, sp, #48	@ 0x30
 8014c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c50:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014c54:	e7f3      	b.n	8014c3e <__kernel_rem_pio2+0x34e>
 8014c56:	a90c      	add	r1, sp, #48	@ 0x30
 8014c58:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014c5c:	3b01      	subs	r3, #1
 8014c5e:	430a      	orrs	r2, r1
 8014c60:	e785      	b.n	8014b6e <__kernel_rem_pio2+0x27e>
 8014c62:	3401      	adds	r4, #1
 8014c64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014c68:	2a00      	cmp	r2, #0
 8014c6a:	d0fa      	beq.n	8014c62 <__kernel_rem_pio2+0x372>
 8014c6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014c6e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014c72:	eb0d 0503 	add.w	r5, sp, r3
 8014c76:	9b06      	ldr	r3, [sp, #24]
 8014c78:	aa20      	add	r2, sp, #128	@ 0x80
 8014c7a:	4443      	add	r3, r8
 8014c7c:	f108 0701 	add.w	r7, r8, #1
 8014c80:	3d98      	subs	r5, #152	@ 0x98
 8014c82:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8014c86:	4444      	add	r4, r8
 8014c88:	42bc      	cmp	r4, r7
 8014c8a:	da04      	bge.n	8014c96 <__kernel_rem_pio2+0x3a6>
 8014c8c:	46a0      	mov	r8, r4
 8014c8e:	e6a2      	b.n	80149d6 <__kernel_rem_pio2+0xe6>
 8014c90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014c92:	2401      	movs	r4, #1
 8014c94:	e7e6      	b.n	8014c64 <__kernel_rem_pio2+0x374>
 8014c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c98:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014c9c:	f7eb fc62 	bl	8000564 <__aeabi_i2d>
 8014ca0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8014f60 <__kernel_rem_pio2+0x670>
 8014ca4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014ca8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014cac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014cb0:	46b2      	mov	sl, r6
 8014cb2:	f04f 0800 	mov.w	r8, #0
 8014cb6:	9b05      	ldr	r3, [sp, #20]
 8014cb8:	4598      	cmp	r8, r3
 8014cba:	dd05      	ble.n	8014cc8 <__kernel_rem_pio2+0x3d8>
 8014cbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014cc0:	3701      	adds	r7, #1
 8014cc2:	eca5 7b02 	vstmia	r5!, {d7}
 8014cc6:	e7df      	b.n	8014c88 <__kernel_rem_pio2+0x398>
 8014cc8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8014ccc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014cd0:	f7eb fcb2 	bl	8000638 <__aeabi_dmul>
 8014cd4:	4602      	mov	r2, r0
 8014cd6:	460b      	mov	r3, r1
 8014cd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014cdc:	f7eb faf6 	bl	80002cc <__adddf3>
 8014ce0:	f108 0801 	add.w	r8, r8, #1
 8014ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014ce8:	e7e5      	b.n	8014cb6 <__kernel_rem_pio2+0x3c6>
 8014cea:	f1cb 0000 	rsb	r0, fp, #0
 8014cee:	ec47 6b10 	vmov	d0, r6, r7
 8014cf2:	f000 fbad 	bl	8015450 <scalbn>
 8014cf6:	ec55 4b10 	vmov	r4, r5, d0
 8014cfa:	4b9b      	ldr	r3, [pc, #620]	@ (8014f68 <__kernel_rem_pio2+0x678>)
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	4620      	mov	r0, r4
 8014d00:	4629      	mov	r1, r5
 8014d02:	f7eb ff1f 	bl	8000b44 <__aeabi_dcmpge>
 8014d06:	b300      	cbz	r0, 8014d4a <__kernel_rem_pio2+0x45a>
 8014d08:	4b98      	ldr	r3, [pc, #608]	@ (8014f6c <__kernel_rem_pio2+0x67c>)
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	4620      	mov	r0, r4
 8014d0e:	4629      	mov	r1, r5
 8014d10:	f7eb fc92 	bl	8000638 <__aeabi_dmul>
 8014d14:	f7eb ff40 	bl	8000b98 <__aeabi_d2iz>
 8014d18:	4606      	mov	r6, r0
 8014d1a:	f7eb fc23 	bl	8000564 <__aeabi_i2d>
 8014d1e:	4b92      	ldr	r3, [pc, #584]	@ (8014f68 <__kernel_rem_pio2+0x678>)
 8014d20:	2200      	movs	r2, #0
 8014d22:	f7eb fc89 	bl	8000638 <__aeabi_dmul>
 8014d26:	460b      	mov	r3, r1
 8014d28:	4602      	mov	r2, r0
 8014d2a:	4629      	mov	r1, r5
 8014d2c:	4620      	mov	r0, r4
 8014d2e:	f7eb facb 	bl	80002c8 <__aeabi_dsub>
 8014d32:	f7eb ff31 	bl	8000b98 <__aeabi_d2iz>
 8014d36:	ab0c      	add	r3, sp, #48	@ 0x30
 8014d38:	f10b 0b18 	add.w	fp, fp, #24
 8014d3c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8014d40:	f108 0801 	add.w	r8, r8, #1
 8014d44:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8014d48:	e720      	b.n	8014b8c <__kernel_rem_pio2+0x29c>
 8014d4a:	4620      	mov	r0, r4
 8014d4c:	4629      	mov	r1, r5
 8014d4e:	f7eb ff23 	bl	8000b98 <__aeabi_d2iz>
 8014d52:	ab0c      	add	r3, sp, #48	@ 0x30
 8014d54:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8014d58:	e718      	b.n	8014b8c <__kernel_rem_pio2+0x29c>
 8014d5a:	ab0c      	add	r3, sp, #48	@ 0x30
 8014d5c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014d60:	f7eb fc00 	bl	8000564 <__aeabi_i2d>
 8014d64:	4622      	mov	r2, r4
 8014d66:	462b      	mov	r3, r5
 8014d68:	f7eb fc66 	bl	8000638 <__aeabi_dmul>
 8014d6c:	4652      	mov	r2, sl
 8014d6e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8014d72:	465b      	mov	r3, fp
 8014d74:	4620      	mov	r0, r4
 8014d76:	4629      	mov	r1, r5
 8014d78:	f7eb fc5e 	bl	8000638 <__aeabi_dmul>
 8014d7c:	3e01      	subs	r6, #1
 8014d7e:	4604      	mov	r4, r0
 8014d80:	460d      	mov	r5, r1
 8014d82:	e716      	b.n	8014bb2 <__kernel_rem_pio2+0x2c2>
 8014d84:	9906      	ldr	r1, [sp, #24]
 8014d86:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8014d8a:	9106      	str	r1, [sp, #24]
 8014d8c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8014d90:	f7eb fc52 	bl	8000638 <__aeabi_dmul>
 8014d94:	4602      	mov	r2, r0
 8014d96:	460b      	mov	r3, r1
 8014d98:	4650      	mov	r0, sl
 8014d9a:	4659      	mov	r1, fp
 8014d9c:	f7eb fa96 	bl	80002cc <__adddf3>
 8014da0:	3601      	adds	r6, #1
 8014da2:	4682      	mov	sl, r0
 8014da4:	468b      	mov	fp, r1
 8014da6:	9b00      	ldr	r3, [sp, #0]
 8014da8:	429e      	cmp	r6, r3
 8014daa:	dc01      	bgt.n	8014db0 <__kernel_rem_pio2+0x4c0>
 8014dac:	42ae      	cmp	r6, r5
 8014dae:	dde9      	ble.n	8014d84 <__kernel_rem_pio2+0x494>
 8014db0:	ab48      	add	r3, sp, #288	@ 0x120
 8014db2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014db6:	e9c5 ab00 	strd	sl, fp, [r5]
 8014dba:	3c01      	subs	r4, #1
 8014dbc:	e6fd      	b.n	8014bba <__kernel_rem_pio2+0x2ca>
 8014dbe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8014dc0:	2b02      	cmp	r3, #2
 8014dc2:	dc0b      	bgt.n	8014ddc <__kernel_rem_pio2+0x4ec>
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	dc35      	bgt.n	8014e34 <__kernel_rem_pio2+0x544>
 8014dc8:	d059      	beq.n	8014e7e <__kernel_rem_pio2+0x58e>
 8014dca:	9b02      	ldr	r3, [sp, #8]
 8014dcc:	f003 0007 	and.w	r0, r3, #7
 8014dd0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8014dd4:	ecbd 8b02 	vpop	{d8}
 8014dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ddc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8014dde:	2b03      	cmp	r3, #3
 8014de0:	d1f3      	bne.n	8014dca <__kernel_rem_pio2+0x4da>
 8014de2:	9b05      	ldr	r3, [sp, #20]
 8014de4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014de8:	eb0d 0403 	add.w	r4, sp, r3
 8014dec:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8014df0:	4625      	mov	r5, r4
 8014df2:	46c2      	mov	sl, r8
 8014df4:	f1ba 0f00 	cmp.w	sl, #0
 8014df8:	dc69      	bgt.n	8014ece <__kernel_rem_pio2+0x5de>
 8014dfa:	4645      	mov	r5, r8
 8014dfc:	2d01      	cmp	r5, #1
 8014dfe:	f300 8087 	bgt.w	8014f10 <__kernel_rem_pio2+0x620>
 8014e02:	9c05      	ldr	r4, [sp, #20]
 8014e04:	ab48      	add	r3, sp, #288	@ 0x120
 8014e06:	441c      	add	r4, r3
 8014e08:	2000      	movs	r0, #0
 8014e0a:	2100      	movs	r1, #0
 8014e0c:	f1b8 0f01 	cmp.w	r8, #1
 8014e10:	f300 809c 	bgt.w	8014f4c <__kernel_rem_pio2+0x65c>
 8014e14:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8014e18:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8014e1c:	f1b9 0f00 	cmp.w	r9, #0
 8014e20:	f040 80a6 	bne.w	8014f70 <__kernel_rem_pio2+0x680>
 8014e24:	9b04      	ldr	r3, [sp, #16]
 8014e26:	e9c3 5600 	strd	r5, r6, [r3]
 8014e2a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8014e2e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014e32:	e7ca      	b.n	8014dca <__kernel_rem_pio2+0x4da>
 8014e34:	9d05      	ldr	r5, [sp, #20]
 8014e36:	ab48      	add	r3, sp, #288	@ 0x120
 8014e38:	441d      	add	r5, r3
 8014e3a:	4644      	mov	r4, r8
 8014e3c:	2000      	movs	r0, #0
 8014e3e:	2100      	movs	r1, #0
 8014e40:	2c00      	cmp	r4, #0
 8014e42:	da35      	bge.n	8014eb0 <__kernel_rem_pio2+0x5c0>
 8014e44:	f1b9 0f00 	cmp.w	r9, #0
 8014e48:	d038      	beq.n	8014ebc <__kernel_rem_pio2+0x5cc>
 8014e4a:	4602      	mov	r2, r0
 8014e4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014e50:	9c04      	ldr	r4, [sp, #16]
 8014e52:	e9c4 2300 	strd	r2, r3, [r4]
 8014e56:	4602      	mov	r2, r0
 8014e58:	460b      	mov	r3, r1
 8014e5a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8014e5e:	f7eb fa33 	bl	80002c8 <__aeabi_dsub>
 8014e62:	ad4a      	add	r5, sp, #296	@ 0x128
 8014e64:	2401      	movs	r4, #1
 8014e66:	45a0      	cmp	r8, r4
 8014e68:	da2b      	bge.n	8014ec2 <__kernel_rem_pio2+0x5d2>
 8014e6a:	f1b9 0f00 	cmp.w	r9, #0
 8014e6e:	d002      	beq.n	8014e76 <__kernel_rem_pio2+0x586>
 8014e70:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014e74:	4619      	mov	r1, r3
 8014e76:	9b04      	ldr	r3, [sp, #16]
 8014e78:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014e7c:	e7a5      	b.n	8014dca <__kernel_rem_pio2+0x4da>
 8014e7e:	9c05      	ldr	r4, [sp, #20]
 8014e80:	ab48      	add	r3, sp, #288	@ 0x120
 8014e82:	441c      	add	r4, r3
 8014e84:	2000      	movs	r0, #0
 8014e86:	2100      	movs	r1, #0
 8014e88:	f1b8 0f00 	cmp.w	r8, #0
 8014e8c:	da09      	bge.n	8014ea2 <__kernel_rem_pio2+0x5b2>
 8014e8e:	f1b9 0f00 	cmp.w	r9, #0
 8014e92:	d002      	beq.n	8014e9a <__kernel_rem_pio2+0x5aa>
 8014e94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014e98:	4619      	mov	r1, r3
 8014e9a:	9b04      	ldr	r3, [sp, #16]
 8014e9c:	e9c3 0100 	strd	r0, r1, [r3]
 8014ea0:	e793      	b.n	8014dca <__kernel_rem_pio2+0x4da>
 8014ea2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014ea6:	f7eb fa11 	bl	80002cc <__adddf3>
 8014eaa:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8014eae:	e7eb      	b.n	8014e88 <__kernel_rem_pio2+0x598>
 8014eb0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8014eb4:	f7eb fa0a 	bl	80002cc <__adddf3>
 8014eb8:	3c01      	subs	r4, #1
 8014eba:	e7c1      	b.n	8014e40 <__kernel_rem_pio2+0x550>
 8014ebc:	4602      	mov	r2, r0
 8014ebe:	460b      	mov	r3, r1
 8014ec0:	e7c6      	b.n	8014e50 <__kernel_rem_pio2+0x560>
 8014ec2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8014ec6:	f7eb fa01 	bl	80002cc <__adddf3>
 8014eca:	3401      	adds	r4, #1
 8014ecc:	e7cb      	b.n	8014e66 <__kernel_rem_pio2+0x576>
 8014ece:	ed35 7b02 	vldmdb	r5!, {d7}
 8014ed2:	ed8d 7b00 	vstr	d7, [sp]
 8014ed6:	ed95 7b02 	vldr	d7, [r5, #8]
 8014eda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ede:	ec53 2b17 	vmov	r2, r3, d7
 8014ee2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014ee6:	f7eb f9f1 	bl	80002cc <__adddf3>
 8014eea:	4602      	mov	r2, r0
 8014eec:	460b      	mov	r3, r1
 8014eee:	4606      	mov	r6, r0
 8014ef0:	460f      	mov	r7, r1
 8014ef2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ef6:	f7eb f9e7 	bl	80002c8 <__aeabi_dsub>
 8014efa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014efe:	f7eb f9e5 	bl	80002cc <__adddf3>
 8014f02:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8014f06:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8014f0a:	e9c5 6700 	strd	r6, r7, [r5]
 8014f0e:	e771      	b.n	8014df4 <__kernel_rem_pio2+0x504>
 8014f10:	ed34 7b02 	vldmdb	r4!, {d7}
 8014f14:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8014f18:	ec51 0b17 	vmov	r0, r1, d7
 8014f1c:	4652      	mov	r2, sl
 8014f1e:	465b      	mov	r3, fp
 8014f20:	ed8d 7b00 	vstr	d7, [sp]
 8014f24:	f7eb f9d2 	bl	80002cc <__adddf3>
 8014f28:	4602      	mov	r2, r0
 8014f2a:	460b      	mov	r3, r1
 8014f2c:	4606      	mov	r6, r0
 8014f2e:	460f      	mov	r7, r1
 8014f30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f34:	f7eb f9c8 	bl	80002c8 <__aeabi_dsub>
 8014f38:	4652      	mov	r2, sl
 8014f3a:	465b      	mov	r3, fp
 8014f3c:	f7eb f9c6 	bl	80002cc <__adddf3>
 8014f40:	3d01      	subs	r5, #1
 8014f42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014f46:	e9c4 6700 	strd	r6, r7, [r4]
 8014f4a:	e757      	b.n	8014dfc <__kernel_rem_pio2+0x50c>
 8014f4c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014f50:	f7eb f9bc 	bl	80002cc <__adddf3>
 8014f54:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8014f58:	e758      	b.n	8014e0c <__kernel_rem_pio2+0x51c>
 8014f5a:	bf00      	nop
 8014f5c:	f3af 8000 	nop.w
	...
 8014f68:	41700000 	.word	0x41700000
 8014f6c:	3e700000 	.word	0x3e700000
 8014f70:	9b04      	ldr	r3, [sp, #16]
 8014f72:	9a04      	ldr	r2, [sp, #16]
 8014f74:	601d      	str	r5, [r3, #0]
 8014f76:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8014f7a:	605c      	str	r4, [r3, #4]
 8014f7c:	609f      	str	r7, [r3, #8]
 8014f7e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8014f82:	60d3      	str	r3, [r2, #12]
 8014f84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014f88:	6110      	str	r0, [r2, #16]
 8014f8a:	6153      	str	r3, [r2, #20]
 8014f8c:	e71d      	b.n	8014dca <__kernel_rem_pio2+0x4da>
 8014f8e:	bf00      	nop

08014f90 <__kernel_cos>:
 8014f90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f94:	ec57 6b10 	vmov	r6, r7, d0
 8014f98:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8014f9c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8014fa0:	ed8d 1b00 	vstr	d1, [sp]
 8014fa4:	d206      	bcs.n	8014fb4 <__kernel_cos+0x24>
 8014fa6:	4630      	mov	r0, r6
 8014fa8:	4639      	mov	r1, r7
 8014faa:	f7eb fdf5 	bl	8000b98 <__aeabi_d2iz>
 8014fae:	2800      	cmp	r0, #0
 8014fb0:	f000 8088 	beq.w	80150c4 <__kernel_cos+0x134>
 8014fb4:	4632      	mov	r2, r6
 8014fb6:	463b      	mov	r3, r7
 8014fb8:	4630      	mov	r0, r6
 8014fba:	4639      	mov	r1, r7
 8014fbc:	f7eb fb3c 	bl	8000638 <__aeabi_dmul>
 8014fc0:	4b51      	ldr	r3, [pc, #324]	@ (8015108 <__kernel_cos+0x178>)
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	4604      	mov	r4, r0
 8014fc6:	460d      	mov	r5, r1
 8014fc8:	f7eb fb36 	bl	8000638 <__aeabi_dmul>
 8014fcc:	a340      	add	r3, pc, #256	@ (adr r3, 80150d0 <__kernel_cos+0x140>)
 8014fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fd2:	4682      	mov	sl, r0
 8014fd4:	468b      	mov	fp, r1
 8014fd6:	4620      	mov	r0, r4
 8014fd8:	4629      	mov	r1, r5
 8014fda:	f7eb fb2d 	bl	8000638 <__aeabi_dmul>
 8014fde:	a33e      	add	r3, pc, #248	@ (adr r3, 80150d8 <__kernel_cos+0x148>)
 8014fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fe4:	f7eb f972 	bl	80002cc <__adddf3>
 8014fe8:	4622      	mov	r2, r4
 8014fea:	462b      	mov	r3, r5
 8014fec:	f7eb fb24 	bl	8000638 <__aeabi_dmul>
 8014ff0:	a33b      	add	r3, pc, #236	@ (adr r3, 80150e0 <__kernel_cos+0x150>)
 8014ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ff6:	f7eb f967 	bl	80002c8 <__aeabi_dsub>
 8014ffa:	4622      	mov	r2, r4
 8014ffc:	462b      	mov	r3, r5
 8014ffe:	f7eb fb1b 	bl	8000638 <__aeabi_dmul>
 8015002:	a339      	add	r3, pc, #228	@ (adr r3, 80150e8 <__kernel_cos+0x158>)
 8015004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015008:	f7eb f960 	bl	80002cc <__adddf3>
 801500c:	4622      	mov	r2, r4
 801500e:	462b      	mov	r3, r5
 8015010:	f7eb fb12 	bl	8000638 <__aeabi_dmul>
 8015014:	a336      	add	r3, pc, #216	@ (adr r3, 80150f0 <__kernel_cos+0x160>)
 8015016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801501a:	f7eb f955 	bl	80002c8 <__aeabi_dsub>
 801501e:	4622      	mov	r2, r4
 8015020:	462b      	mov	r3, r5
 8015022:	f7eb fb09 	bl	8000638 <__aeabi_dmul>
 8015026:	a334      	add	r3, pc, #208	@ (adr r3, 80150f8 <__kernel_cos+0x168>)
 8015028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801502c:	f7eb f94e 	bl	80002cc <__adddf3>
 8015030:	4622      	mov	r2, r4
 8015032:	462b      	mov	r3, r5
 8015034:	f7eb fb00 	bl	8000638 <__aeabi_dmul>
 8015038:	4622      	mov	r2, r4
 801503a:	462b      	mov	r3, r5
 801503c:	f7eb fafc 	bl	8000638 <__aeabi_dmul>
 8015040:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015044:	4604      	mov	r4, r0
 8015046:	460d      	mov	r5, r1
 8015048:	4630      	mov	r0, r6
 801504a:	4639      	mov	r1, r7
 801504c:	f7eb faf4 	bl	8000638 <__aeabi_dmul>
 8015050:	460b      	mov	r3, r1
 8015052:	4602      	mov	r2, r0
 8015054:	4629      	mov	r1, r5
 8015056:	4620      	mov	r0, r4
 8015058:	f7eb f936 	bl	80002c8 <__aeabi_dsub>
 801505c:	4b2b      	ldr	r3, [pc, #172]	@ (801510c <__kernel_cos+0x17c>)
 801505e:	4598      	cmp	r8, r3
 8015060:	4606      	mov	r6, r0
 8015062:	460f      	mov	r7, r1
 8015064:	d810      	bhi.n	8015088 <__kernel_cos+0xf8>
 8015066:	4602      	mov	r2, r0
 8015068:	460b      	mov	r3, r1
 801506a:	4650      	mov	r0, sl
 801506c:	4659      	mov	r1, fp
 801506e:	f7eb f92b 	bl	80002c8 <__aeabi_dsub>
 8015072:	460b      	mov	r3, r1
 8015074:	4926      	ldr	r1, [pc, #152]	@ (8015110 <__kernel_cos+0x180>)
 8015076:	4602      	mov	r2, r0
 8015078:	2000      	movs	r0, #0
 801507a:	f7eb f925 	bl	80002c8 <__aeabi_dsub>
 801507e:	ec41 0b10 	vmov	d0, r0, r1
 8015082:	b003      	add	sp, #12
 8015084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015088:	4b22      	ldr	r3, [pc, #136]	@ (8015114 <__kernel_cos+0x184>)
 801508a:	4921      	ldr	r1, [pc, #132]	@ (8015110 <__kernel_cos+0x180>)
 801508c:	4598      	cmp	r8, r3
 801508e:	bf8c      	ite	hi
 8015090:	4d21      	ldrhi	r5, [pc, #132]	@ (8015118 <__kernel_cos+0x188>)
 8015092:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8015096:	2400      	movs	r4, #0
 8015098:	4622      	mov	r2, r4
 801509a:	462b      	mov	r3, r5
 801509c:	2000      	movs	r0, #0
 801509e:	f7eb f913 	bl	80002c8 <__aeabi_dsub>
 80150a2:	4622      	mov	r2, r4
 80150a4:	4680      	mov	r8, r0
 80150a6:	4689      	mov	r9, r1
 80150a8:	462b      	mov	r3, r5
 80150aa:	4650      	mov	r0, sl
 80150ac:	4659      	mov	r1, fp
 80150ae:	f7eb f90b 	bl	80002c8 <__aeabi_dsub>
 80150b2:	4632      	mov	r2, r6
 80150b4:	463b      	mov	r3, r7
 80150b6:	f7eb f907 	bl	80002c8 <__aeabi_dsub>
 80150ba:	4602      	mov	r2, r0
 80150bc:	460b      	mov	r3, r1
 80150be:	4640      	mov	r0, r8
 80150c0:	4649      	mov	r1, r9
 80150c2:	e7da      	b.n	801507a <__kernel_cos+0xea>
 80150c4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8015100 <__kernel_cos+0x170>
 80150c8:	e7db      	b.n	8015082 <__kernel_cos+0xf2>
 80150ca:	bf00      	nop
 80150cc:	f3af 8000 	nop.w
 80150d0:	be8838d4 	.word	0xbe8838d4
 80150d4:	bda8fae9 	.word	0xbda8fae9
 80150d8:	bdb4b1c4 	.word	0xbdb4b1c4
 80150dc:	3e21ee9e 	.word	0x3e21ee9e
 80150e0:	809c52ad 	.word	0x809c52ad
 80150e4:	3e927e4f 	.word	0x3e927e4f
 80150e8:	19cb1590 	.word	0x19cb1590
 80150ec:	3efa01a0 	.word	0x3efa01a0
 80150f0:	16c15177 	.word	0x16c15177
 80150f4:	3f56c16c 	.word	0x3f56c16c
 80150f8:	5555554c 	.word	0x5555554c
 80150fc:	3fa55555 	.word	0x3fa55555
 8015100:	00000000 	.word	0x00000000
 8015104:	3ff00000 	.word	0x3ff00000
 8015108:	3fe00000 	.word	0x3fe00000
 801510c:	3fd33332 	.word	0x3fd33332
 8015110:	3ff00000 	.word	0x3ff00000
 8015114:	3fe90000 	.word	0x3fe90000
 8015118:	3fd20000 	.word	0x3fd20000
 801511c:	00000000 	.word	0x00000000

08015120 <__kernel_sin>:
 8015120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015124:	ec55 4b10 	vmov	r4, r5, d0
 8015128:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801512c:	b085      	sub	sp, #20
 801512e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8015132:	ed8d 1b02 	vstr	d1, [sp, #8]
 8015136:	4680      	mov	r8, r0
 8015138:	d205      	bcs.n	8015146 <__kernel_sin+0x26>
 801513a:	4620      	mov	r0, r4
 801513c:	4629      	mov	r1, r5
 801513e:	f7eb fd2b 	bl	8000b98 <__aeabi_d2iz>
 8015142:	2800      	cmp	r0, #0
 8015144:	d052      	beq.n	80151ec <__kernel_sin+0xcc>
 8015146:	4622      	mov	r2, r4
 8015148:	462b      	mov	r3, r5
 801514a:	4620      	mov	r0, r4
 801514c:	4629      	mov	r1, r5
 801514e:	f7eb fa73 	bl	8000638 <__aeabi_dmul>
 8015152:	4682      	mov	sl, r0
 8015154:	468b      	mov	fp, r1
 8015156:	4602      	mov	r2, r0
 8015158:	460b      	mov	r3, r1
 801515a:	4620      	mov	r0, r4
 801515c:	4629      	mov	r1, r5
 801515e:	f7eb fa6b 	bl	8000638 <__aeabi_dmul>
 8015162:	a342      	add	r3, pc, #264	@ (adr r3, 801526c <__kernel_sin+0x14c>)
 8015164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015168:	e9cd 0100 	strd	r0, r1, [sp]
 801516c:	4650      	mov	r0, sl
 801516e:	4659      	mov	r1, fp
 8015170:	f7eb fa62 	bl	8000638 <__aeabi_dmul>
 8015174:	a33f      	add	r3, pc, #252	@ (adr r3, 8015274 <__kernel_sin+0x154>)
 8015176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801517a:	f7eb f8a5 	bl	80002c8 <__aeabi_dsub>
 801517e:	4652      	mov	r2, sl
 8015180:	465b      	mov	r3, fp
 8015182:	f7eb fa59 	bl	8000638 <__aeabi_dmul>
 8015186:	a33d      	add	r3, pc, #244	@ (adr r3, 801527c <__kernel_sin+0x15c>)
 8015188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801518c:	f7eb f89e 	bl	80002cc <__adddf3>
 8015190:	4652      	mov	r2, sl
 8015192:	465b      	mov	r3, fp
 8015194:	f7eb fa50 	bl	8000638 <__aeabi_dmul>
 8015198:	a33a      	add	r3, pc, #232	@ (adr r3, 8015284 <__kernel_sin+0x164>)
 801519a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801519e:	f7eb f893 	bl	80002c8 <__aeabi_dsub>
 80151a2:	4652      	mov	r2, sl
 80151a4:	465b      	mov	r3, fp
 80151a6:	f7eb fa47 	bl	8000638 <__aeabi_dmul>
 80151aa:	a338      	add	r3, pc, #224	@ (adr r3, 801528c <__kernel_sin+0x16c>)
 80151ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151b0:	f7eb f88c 	bl	80002cc <__adddf3>
 80151b4:	4606      	mov	r6, r0
 80151b6:	460f      	mov	r7, r1
 80151b8:	f1b8 0f00 	cmp.w	r8, #0
 80151bc:	d11b      	bne.n	80151f6 <__kernel_sin+0xd6>
 80151be:	4602      	mov	r2, r0
 80151c0:	460b      	mov	r3, r1
 80151c2:	4650      	mov	r0, sl
 80151c4:	4659      	mov	r1, fp
 80151c6:	f7eb fa37 	bl	8000638 <__aeabi_dmul>
 80151ca:	a325      	add	r3, pc, #148	@ (adr r3, 8015260 <__kernel_sin+0x140>)
 80151cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151d0:	f7eb f87a 	bl	80002c8 <__aeabi_dsub>
 80151d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151d8:	f7eb fa2e 	bl	8000638 <__aeabi_dmul>
 80151dc:	4602      	mov	r2, r0
 80151de:	460b      	mov	r3, r1
 80151e0:	4620      	mov	r0, r4
 80151e2:	4629      	mov	r1, r5
 80151e4:	f7eb f872 	bl	80002cc <__adddf3>
 80151e8:	4604      	mov	r4, r0
 80151ea:	460d      	mov	r5, r1
 80151ec:	ec45 4b10 	vmov	d0, r4, r5
 80151f0:	b005      	add	sp, #20
 80151f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151fa:	4b1b      	ldr	r3, [pc, #108]	@ (8015268 <__kernel_sin+0x148>)
 80151fc:	2200      	movs	r2, #0
 80151fe:	f7eb fa1b 	bl	8000638 <__aeabi_dmul>
 8015202:	4632      	mov	r2, r6
 8015204:	4680      	mov	r8, r0
 8015206:	4689      	mov	r9, r1
 8015208:	463b      	mov	r3, r7
 801520a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801520e:	f7eb fa13 	bl	8000638 <__aeabi_dmul>
 8015212:	4602      	mov	r2, r0
 8015214:	460b      	mov	r3, r1
 8015216:	4640      	mov	r0, r8
 8015218:	4649      	mov	r1, r9
 801521a:	f7eb f855 	bl	80002c8 <__aeabi_dsub>
 801521e:	4652      	mov	r2, sl
 8015220:	465b      	mov	r3, fp
 8015222:	f7eb fa09 	bl	8000638 <__aeabi_dmul>
 8015226:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801522a:	f7eb f84d 	bl	80002c8 <__aeabi_dsub>
 801522e:	a30c      	add	r3, pc, #48	@ (adr r3, 8015260 <__kernel_sin+0x140>)
 8015230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015234:	4606      	mov	r6, r0
 8015236:	460f      	mov	r7, r1
 8015238:	e9dd 0100 	ldrd	r0, r1, [sp]
 801523c:	f7eb f9fc 	bl	8000638 <__aeabi_dmul>
 8015240:	4602      	mov	r2, r0
 8015242:	460b      	mov	r3, r1
 8015244:	4630      	mov	r0, r6
 8015246:	4639      	mov	r1, r7
 8015248:	f7eb f840 	bl	80002cc <__adddf3>
 801524c:	4602      	mov	r2, r0
 801524e:	460b      	mov	r3, r1
 8015250:	4620      	mov	r0, r4
 8015252:	4629      	mov	r1, r5
 8015254:	f7eb f838 	bl	80002c8 <__aeabi_dsub>
 8015258:	e7c6      	b.n	80151e8 <__kernel_sin+0xc8>
 801525a:	bf00      	nop
 801525c:	f3af 8000 	nop.w
 8015260:	55555549 	.word	0x55555549
 8015264:	3fc55555 	.word	0x3fc55555
 8015268:	3fe00000 	.word	0x3fe00000
 801526c:	5acfd57c 	.word	0x5acfd57c
 8015270:	3de5d93a 	.word	0x3de5d93a
 8015274:	8a2b9ceb 	.word	0x8a2b9ceb
 8015278:	3e5ae5e6 	.word	0x3e5ae5e6
 801527c:	57b1fe7d 	.word	0x57b1fe7d
 8015280:	3ec71de3 	.word	0x3ec71de3
 8015284:	19c161d5 	.word	0x19c161d5
 8015288:	3f2a01a0 	.word	0x3f2a01a0
 801528c:	1110f8a6 	.word	0x1110f8a6
 8015290:	3f811111 	.word	0x3f811111

08015294 <atanf>:
 8015294:	b538      	push	{r3, r4, r5, lr}
 8015296:	ee10 5a10 	vmov	r5, s0
 801529a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801529e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80152a2:	eef0 7a40 	vmov.f32	s15, s0
 80152a6:	d310      	bcc.n	80152ca <atanf+0x36>
 80152a8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80152ac:	d904      	bls.n	80152b8 <atanf+0x24>
 80152ae:	ee70 7a00 	vadd.f32	s15, s0, s0
 80152b2:	eeb0 0a67 	vmov.f32	s0, s15
 80152b6:	bd38      	pop	{r3, r4, r5, pc}
 80152b8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80153f0 <atanf+0x15c>
 80152bc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80153f4 <atanf+0x160>
 80152c0:	2d00      	cmp	r5, #0
 80152c2:	bfc8      	it	gt
 80152c4:	eef0 7a47 	vmovgt.f32	s15, s14
 80152c8:	e7f3      	b.n	80152b2 <atanf+0x1e>
 80152ca:	4b4b      	ldr	r3, [pc, #300]	@ (80153f8 <atanf+0x164>)
 80152cc:	429c      	cmp	r4, r3
 80152ce:	d810      	bhi.n	80152f2 <atanf+0x5e>
 80152d0:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80152d4:	d20a      	bcs.n	80152ec <atanf+0x58>
 80152d6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80153fc <atanf+0x168>
 80152da:	ee30 7a07 	vadd.f32	s14, s0, s14
 80152de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80152e2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80152e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152ea:	dce2      	bgt.n	80152b2 <atanf+0x1e>
 80152ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80152f0:	e013      	b.n	801531a <atanf+0x86>
 80152f2:	f7fd fea3 	bl	801303c <fabsf>
 80152f6:	4b42      	ldr	r3, [pc, #264]	@ (8015400 <atanf+0x16c>)
 80152f8:	429c      	cmp	r4, r3
 80152fa:	d84f      	bhi.n	801539c <atanf+0x108>
 80152fc:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8015300:	429c      	cmp	r4, r3
 8015302:	d841      	bhi.n	8015388 <atanf+0xf4>
 8015304:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8015308:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801530c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015310:	2300      	movs	r3, #0
 8015312:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015316:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801531a:	1c5a      	adds	r2, r3, #1
 801531c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8015320:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8015404 <atanf+0x170>
 8015324:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8015408 <atanf+0x174>
 8015328:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 801540c <atanf+0x178>
 801532c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8015330:	eee6 5a87 	vfma.f32	s11, s13, s14
 8015334:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8015410 <atanf+0x17c>
 8015338:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801533c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8015414 <atanf+0x180>
 8015340:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015344:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8015418 <atanf+0x184>
 8015348:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801534c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801541c <atanf+0x188>
 8015350:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015354:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8015420 <atanf+0x18c>
 8015358:	eea6 5a87 	vfma.f32	s10, s13, s14
 801535c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8015424 <atanf+0x190>
 8015360:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015364:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8015428 <atanf+0x194>
 8015368:	eea7 5a26 	vfma.f32	s10, s14, s13
 801536c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 801542c <atanf+0x198>
 8015370:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015374:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015378:	eea5 7a86 	vfma.f32	s14, s11, s12
 801537c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015380:	d121      	bne.n	80153c6 <atanf+0x132>
 8015382:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015386:	e794      	b.n	80152b2 <atanf+0x1e>
 8015388:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801538c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015390:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015394:	2301      	movs	r3, #1
 8015396:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801539a:	e7be      	b.n	801531a <atanf+0x86>
 801539c:	4b24      	ldr	r3, [pc, #144]	@ (8015430 <atanf+0x19c>)
 801539e:	429c      	cmp	r4, r3
 80153a0:	d80b      	bhi.n	80153ba <atanf+0x126>
 80153a2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80153a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80153aa:	eea0 7a27 	vfma.f32	s14, s0, s15
 80153ae:	2302      	movs	r3, #2
 80153b0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80153b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80153b8:	e7af      	b.n	801531a <atanf+0x86>
 80153ba:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80153be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80153c2:	2303      	movs	r3, #3
 80153c4:	e7a9      	b.n	801531a <atanf+0x86>
 80153c6:	4a1b      	ldr	r2, [pc, #108]	@ (8015434 <atanf+0x1a0>)
 80153c8:	491b      	ldr	r1, [pc, #108]	@ (8015438 <atanf+0x1a4>)
 80153ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80153ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80153d2:	edd3 6a00 	vldr	s13, [r3]
 80153d6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80153da:	2d00      	cmp	r5, #0
 80153dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80153e0:	edd2 7a00 	vldr	s15, [r2]
 80153e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80153e8:	bfb8      	it	lt
 80153ea:	eef1 7a67 	vneglt.f32	s15, s15
 80153ee:	e760      	b.n	80152b2 <atanf+0x1e>
 80153f0:	bfc90fdb 	.word	0xbfc90fdb
 80153f4:	3fc90fdb 	.word	0x3fc90fdb
 80153f8:	3edfffff 	.word	0x3edfffff
 80153fc:	7149f2ca 	.word	0x7149f2ca
 8015400:	3f97ffff 	.word	0x3f97ffff
 8015404:	3c8569d7 	.word	0x3c8569d7
 8015408:	3d4bda59 	.word	0x3d4bda59
 801540c:	bd6ef16b 	.word	0xbd6ef16b
 8015410:	3d886b35 	.word	0x3d886b35
 8015414:	3dba2e6e 	.word	0x3dba2e6e
 8015418:	3e124925 	.word	0x3e124925
 801541c:	3eaaaaab 	.word	0x3eaaaaab
 8015420:	bd15a221 	.word	0xbd15a221
 8015424:	bd9d8795 	.word	0xbd9d8795
 8015428:	bde38e38 	.word	0xbde38e38
 801542c:	be4ccccd 	.word	0xbe4ccccd
 8015430:	401bffff 	.word	0x401bffff
 8015434:	08015d50 	.word	0x08015d50
 8015438:	08015d40 	.word	0x08015d40

0801543c <fabs>:
 801543c:	ec51 0b10 	vmov	r0, r1, d0
 8015440:	4602      	mov	r2, r0
 8015442:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015446:	ec43 2b10 	vmov	d0, r2, r3
 801544a:	4770      	bx	lr
 801544c:	0000      	movs	r0, r0
	...

08015450 <scalbn>:
 8015450:	b570      	push	{r4, r5, r6, lr}
 8015452:	ec55 4b10 	vmov	r4, r5, d0
 8015456:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801545a:	4606      	mov	r6, r0
 801545c:	462b      	mov	r3, r5
 801545e:	b991      	cbnz	r1, 8015486 <scalbn+0x36>
 8015460:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8015464:	4323      	orrs	r3, r4
 8015466:	d03b      	beq.n	80154e0 <scalbn+0x90>
 8015468:	4b33      	ldr	r3, [pc, #204]	@ (8015538 <scalbn+0xe8>)
 801546a:	4620      	mov	r0, r4
 801546c:	4629      	mov	r1, r5
 801546e:	2200      	movs	r2, #0
 8015470:	f7eb f8e2 	bl	8000638 <__aeabi_dmul>
 8015474:	4b31      	ldr	r3, [pc, #196]	@ (801553c <scalbn+0xec>)
 8015476:	429e      	cmp	r6, r3
 8015478:	4604      	mov	r4, r0
 801547a:	460d      	mov	r5, r1
 801547c:	da0f      	bge.n	801549e <scalbn+0x4e>
 801547e:	a326      	add	r3, pc, #152	@ (adr r3, 8015518 <scalbn+0xc8>)
 8015480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015484:	e01e      	b.n	80154c4 <scalbn+0x74>
 8015486:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801548a:	4291      	cmp	r1, r2
 801548c:	d10b      	bne.n	80154a6 <scalbn+0x56>
 801548e:	4622      	mov	r2, r4
 8015490:	4620      	mov	r0, r4
 8015492:	4629      	mov	r1, r5
 8015494:	f7ea ff1a 	bl	80002cc <__adddf3>
 8015498:	4604      	mov	r4, r0
 801549a:	460d      	mov	r5, r1
 801549c:	e020      	b.n	80154e0 <scalbn+0x90>
 801549e:	460b      	mov	r3, r1
 80154a0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80154a4:	3936      	subs	r1, #54	@ 0x36
 80154a6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80154aa:	4296      	cmp	r6, r2
 80154ac:	dd0d      	ble.n	80154ca <scalbn+0x7a>
 80154ae:	2d00      	cmp	r5, #0
 80154b0:	a11b      	add	r1, pc, #108	@ (adr r1, 8015520 <scalbn+0xd0>)
 80154b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154b6:	da02      	bge.n	80154be <scalbn+0x6e>
 80154b8:	a11b      	add	r1, pc, #108	@ (adr r1, 8015528 <scalbn+0xd8>)
 80154ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154be:	a318      	add	r3, pc, #96	@ (adr r3, 8015520 <scalbn+0xd0>)
 80154c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154c4:	f7eb f8b8 	bl	8000638 <__aeabi_dmul>
 80154c8:	e7e6      	b.n	8015498 <scalbn+0x48>
 80154ca:	1872      	adds	r2, r6, r1
 80154cc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80154d0:	428a      	cmp	r2, r1
 80154d2:	dcec      	bgt.n	80154ae <scalbn+0x5e>
 80154d4:	2a00      	cmp	r2, #0
 80154d6:	dd06      	ble.n	80154e6 <scalbn+0x96>
 80154d8:	f36f 531e 	bfc	r3, #20, #11
 80154dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80154e0:	ec45 4b10 	vmov	d0, r4, r5
 80154e4:	bd70      	pop	{r4, r5, r6, pc}
 80154e6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80154ea:	da08      	bge.n	80154fe <scalbn+0xae>
 80154ec:	2d00      	cmp	r5, #0
 80154ee:	a10a      	add	r1, pc, #40	@ (adr r1, 8015518 <scalbn+0xc8>)
 80154f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154f4:	dac3      	bge.n	801547e <scalbn+0x2e>
 80154f6:	a10e      	add	r1, pc, #56	@ (adr r1, 8015530 <scalbn+0xe0>)
 80154f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154fc:	e7bf      	b.n	801547e <scalbn+0x2e>
 80154fe:	3236      	adds	r2, #54	@ 0x36
 8015500:	f36f 531e 	bfc	r3, #20, #11
 8015504:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015508:	4620      	mov	r0, r4
 801550a:	4b0d      	ldr	r3, [pc, #52]	@ (8015540 <scalbn+0xf0>)
 801550c:	4629      	mov	r1, r5
 801550e:	2200      	movs	r2, #0
 8015510:	e7d8      	b.n	80154c4 <scalbn+0x74>
 8015512:	bf00      	nop
 8015514:	f3af 8000 	nop.w
 8015518:	c2f8f359 	.word	0xc2f8f359
 801551c:	01a56e1f 	.word	0x01a56e1f
 8015520:	8800759c 	.word	0x8800759c
 8015524:	7e37e43c 	.word	0x7e37e43c
 8015528:	8800759c 	.word	0x8800759c
 801552c:	fe37e43c 	.word	0xfe37e43c
 8015530:	c2f8f359 	.word	0xc2f8f359
 8015534:	81a56e1f 	.word	0x81a56e1f
 8015538:	43500000 	.word	0x43500000
 801553c:	ffff3cb0 	.word	0xffff3cb0
 8015540:	3c900000 	.word	0x3c900000

08015544 <_init>:
 8015544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015546:	bf00      	nop
 8015548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801554a:	bc08      	pop	{r3}
 801554c:	469e      	mov	lr, r3
 801554e:	4770      	bx	lr

08015550 <_fini>:
 8015550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015552:	bf00      	nop
 8015554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015556:	bc08      	pop	{r3}
 8015558:	469e      	mov	lr, r3
 801555a:	4770      	bx	lr
